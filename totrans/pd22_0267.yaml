- en: pandas.DataFrame.apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function along an axis of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Objects passed to the function are Series objects whose index is either the
    DataFrame’s index (`axis=0`) or the DataFrame’s columns (`axis=1`). By default
    (`result_type=None`), the final return type is inferred from the return type of
    the applied function. Otherwise, it depends on the result_type argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**function'
  prefs: []
  type: TYPE_NORMAL
- en: Function to apply to each column or row.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Axis along which the function is applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '0 or ‘index’: apply function to each column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1 or ‘columns’: apply function to each row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**raw**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: 'Determines if row or column is passed as a Series or ndarray object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`False` : passes each row or column as a Series to the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` : the passed function will receive ndarray objects instead. If you are
    just applying a NumPy reduction function this will achieve much better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**result_type**{‘expand’, ‘reduce’, ‘broadcast’, None}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: 'These only act when `axis=1` (columns):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘expand’ : list-like results will be turned into columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘reduce’ : returns a Series if possible rather than expanding list-like results.
    This is the opposite of ‘expand’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘broadcast’ : results will be broadcast to the original shape of the DataFrame,
    the original index and columns will be retained.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The default behaviour (None) depends on the return value of the applied function:
    list-like results will be returned as a Series of those. However if the apply
    function returns a Series these are expanded to columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Positional arguments to pass to func in addition to the array/series.
  prefs: []
  type: TYPE_NORMAL
- en: '**by_row**False or “compat”, default “compat”'
  prefs: []
  type: TYPE_NORMAL
- en: Only has an effect when `func` is a listlike or dictlike of funcs and the func
    isn’t a string. If “compat”, will if possible first translate the func into pandas
    methods (e.g. `Series().apply(np.sum)` will be translated to `Series().sum()`).
    If that doesn’t work, will try call to apply again with `by_row=True` and if that
    fails, will call apply again with `by_row=False` (backward compatible). If False,
    the funcs will be passed the whole Series at once.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**engine**{‘python’, ‘numba’}, default ‘python’'
  prefs: []
  type: TYPE_NORMAL
- en: Choose between the python (default) engine or the numba engine in apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'The numba engine will attempt to JIT compile the passed function, which may
    result in speedups for large DataFrames. It also supports the following engine_kwargs
    :'
  prefs: []
  type: TYPE_NORMAL
- en: nopython (compile the function in nopython mode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nogil (release the GIL inside the JIT compiled function)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parallel (try to apply the function in parallel over the DataFrame)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: Due to limitations within numba/how pandas interfaces with numba, you
    should only use this if raw=True'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note: The numba compiler only supports a subset of valid Python/numpy operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Please read more about the [supported python features](https://numba.pydata.org/numba-doc/dev/reference/pysupported.html)
    and [supported numpy features](https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html)
    in numba to learn what you can or cannot use in the passed function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**engine_kwargs**dict'
  prefs: []
  type: TYPE_NORMAL
- en: Pass keyword arguments to the engine. This is currently only used by the numba
    engine, see the documentation for the engine argument for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword arguments to pass as keywords arguments to func.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Result of applying `func` along the given axis of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")'
  prefs: []
  type: TYPE_NORMAL
- en: For elementwise operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.aggregate`](pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")'
  prefs: []
  type: TYPE_NORMAL
- en: Only perform aggregating type operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.transform`](pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")'
  prefs: []
  type: TYPE_NORMAL
- en: Only perform transforming type operations.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Functions that mutate the passed object can produce unexpected behavior or errors
    and are not supported. See [Mutating with User Defined Function (UDF) methods](../../user_guide/gotchas.html#gotchas-udf-mutation)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a numpy universal function (in this case the same as `np.sqrt(df)`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using a reducing function on either axis
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returning a list-like will result in a Series
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Passing `result_type='expand'` will expand list-like results to columns of a
    Dataframe
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returning a Series inside the function is similar to passing `result_type='expand'`.
    The resulting column names will be the Series index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Passing `result_type='broadcast'` will ensure the same shape result, whether
    list-like or scalar is returned by the function, and broadcast it along the axis.
    The resulting column names will be the originals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
