- en: scipy.signal.savgol_filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.savgol_filter.html#scipy.signal.savgol_filter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.savgol_filter.html#scipy.signal.savgol_filter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply a Savitzky-Golay filter to an array.
  prefs: []
  type: TYPE_NORMAL
- en: This is a 1-D filter. If *x* has dimension greater than 1, *axis* determines
    the axis along which the filter is applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The data to be filtered. If *x* is not a single or double precision floating
    point array, it will be converted to type `numpy.float64` before filtering.
  prefs: []
  type: TYPE_NORMAL
- en: '**window_length**int'
  prefs: []
  type: TYPE_NORMAL
- en: The length of the filter window (i.e., the number of coefficients). If *mode*
    is ‘interp’, *window_length* must be less than or equal to the size of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: '**polyorder**int'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the polynomial used to fit the samples. *polyorder* must be less
    than *window_length*.
  prefs: []
  type: TYPE_NORMAL
- en: '**deriv**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the derivative to compute. This must be a nonnegative integer.
    The default is 0, which means to filter the data without differentiating.
  prefs: []
  type: TYPE_NORMAL
- en: '**delta**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The spacing of the samples to which the filter will be applied. This is only
    used if deriv > 0\. Default is 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the array *x* along which the filter is to be applied. Default is
    -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Must be ‘mirror’, ‘constant’, ‘nearest’, ‘wrap’ or ‘interp’. This determines
    the type of extension to use for the padded signal to which the filter is applied.
    When *mode* is ‘constant’, the padding value is given by *cval*. See the Notes
    for more details on ‘mirror’, ‘constant’, ‘wrap’, and ‘nearest’. When the ‘interp’
    mode is selected (the default), no extension is used. Instead, a degree *polyorder*
    polynomial is fit to the last *window_length* values of the edges, and this polynomial
    is used to evaluate the last *window_length // 2* output values.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past the edges of the input if *mode* is ‘constant’. Default is
    0.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray, same shape as *x*'
  prefs: []
  type: TYPE_NORMAL
- en: The filtered data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`savgol_coeffs`](scipy.signal.savgol_coeffs.html#scipy.signal.savgol_coeffs
    "scipy.signal.savgol_coeffs")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Details on the *mode* options:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘mirror’:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Repeats the values at the edges in reverse order. The value closest to the edge
    is not included.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '‘nearest’:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The extension contains the nearest input value.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '‘constant’:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The extension contains the value given by the *cval* argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '‘wrap’:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The extension contains the values from the other end of the array.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For example, if the input is [1, 2, 3, 4, 5, 6, 7, 8], and *window_length*
    is 7, the following shows the extended data for the various *mode* options (assuming
    *cval* is 0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: New in version 0.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Filter with a window length of 5 and a degree 2 polynomial. Use the defaults
    for all other parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the last five values in x are samples of a parabola, so when mode=’interp’
    (the default) is used with polyorder=2, the last three values are unchanged. Compare
    that to, for example, *mode=’nearest’*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
