- en: Legacy Random Generation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗留随机生成
- en: 原文：[https://numpy.org/doc/1.26/reference/random/legacy.html](https://numpy.org/doc/1.26/reference/random/legacy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/legacy.html](https://numpy.org/doc/1.26/reference/random/legacy.html)
- en: The [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") provides
    access to legacy generators. This generator is considered frozen and will have
    no further improvements. It is guaranteed to produce the same values as the final
    point release of NumPy v1.16\. These all depend on Box-Muller normals or inverse
    CDF exponentials or gammas. This class should only be used if it is essential
    to have randoms that are identical to what would have been produced by previous
    versions of NumPy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") 提供对遗留生成器的访问。这个生成器被认为是冻结的，将不再有进一步的改进。它被保证会产生与
    NumPy v1.16 最终版本相同的值。这些都依赖于Box-Muller正态分布或逆CDF指数分布或gamma分布。只有在必须要得到与以前版本的NumPy所产生的随机数相同的情况下，才应该使用这个类。'
- en: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") adds
    additional information to the state which is required when using Box-Muller normals
    since these are produced in pairs. It is important to use [`RandomState.get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state"), and not the underlying bit generators *state*,
    when accessing the state so that these extra values are saved.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") 在使用 Box-Muller
    正态分布时增加了一些状态所需的额外信息，因为这些值是成对产生的。重要的是要使用 [`RandomState.get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state") 而不是底层的比特生成器*state*来访问状态，这样就可以保存这些额外的值。'
- en: 'Although we provide the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") BitGenerator for use independent of [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"), note that its default seeding uses [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") rather than the legacy seeding algorithm. [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") will use the legacy seeding algorithm. The methods
    to use the legacy seeding algorithm are currently private as the main reason to
    use them is just to implement [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState").
    However, one can reset the state of [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") using the state of the [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们提供了[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    独立使用的 BitGenerator，但请注意其默认的种子生成使用的是 [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 而不是遗留的种子生成算法。[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") 将使用遗留的种子生成算法。目前使用遗留种子生成算法的方法是私有的，因为使用它们的主要原因只是为了实现[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState")。但是，可以使用[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")的状态来重置[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937")的状态：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Container for the slow Mersenne Twister pseudo-random number generator. Consider
    using a different BitGenerator with the Generator container instead.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用于慢的 Mersenne Twister 伪随机数生成器的容器。考虑使用不同的 BitGenerator 与 Generator 容器。
- en: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") and [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") expose a number of methods for generating random numbers
    drawn from a variety of probability distributions. In addition to the distribution-specific
    arguments, each method takes a keyword argument *size* that defaults to `None`.
    If *size* is `None`, then a single value is generated and returned. If *size*
    is an integer, then a 1-D array filled with generated values is returned. If *size*
    is a tuple, then an array with that shape is filled and returned.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState") 和 [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") 提供了许多方法，用于从各种概率分布中生成随机数。除了特定于分布的参数外，每个方法都带有一个关键字参数*size*，默认为`None`。如果*size*为`None`，那么将生成并返回单个值。如果*size*是整数，则返回填充了生成值的1-D数组。如果*size*是一个元组，则填充并返回一个具有该形状的数组。'
- en: '**Compatibility Guarantee**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**兼容性保证**'
- en: A fixed bit generator using a fixed seed and a fixed series of calls to ‘RandomState’
    methods using the same parameters will always produce the same results up to roundoff
    error except when the values were incorrect. [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") is effectively frozen and will only receive updates
    that are required by changes in the internals of Numpy. More substantial changes,
    including algorithmic improvements, are reserved for [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用固定种子和对相同参数使用‘RandomState’方法的固定系列调用的固定比特生成器将始终产生相同的结果，直到舍入误差，除非值不正确。[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState")实际上是冻结的，只会接收Numpy内部变化所需的更新。更重大的变化，包括算法改进，保留给[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**seed**{None, int, array_like, BitGenerator}, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**seed**{None, int, array_like, BitGenerator}, optional'
- en: Random seed used to initialize the pseudo-random number generator or an instantized
    BitGenerator. If an integer or array, used as a seed for the MT19937 BitGenerator.
    Values can be any integer between 0 and 2**32 - 1 inclusive, an array (or other
    sequence) of such integers, or `None` (the default). If [`seed`](generated/numpy.random.seed.html#numpy.random.seed
    "numpy.random.seed") is `None`, then the [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") BitGenerator is initialized by reading data from `/dev/urandom`
    (or the Windows analogue) if available or seed from the clock otherwise.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于初始化伪随机数生成器或实例化的比特生成器的随机种子。如果是整数或数组，则用作MT19937比特生成器的种子。值可以是0到2**32 - 1之间的任何整数，这样的整数数组（或其他序列），或`None`（默认值）。如果[`seed`](generated/numpy.random.seed.html#numpy.random.seed
    "numpy.random.seed")为`None`，那么[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937")比特生成器将通过从`/dev/urandom`（或Windows的类似物）读取数据（如果可用）或否则从时钟种子初始化。
- en: See also
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")'
- en: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")'
- en: '[`numpy.random.BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random.BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")'
- en: Notes
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Python stdlib module “random” also contains a Mersenne Twister pseudo-random
    number generator with a number of methods that are similar to the ones available
    in [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState"). [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState"), besides being NumPy-aware, has the advantage that
    it provides a much larger number of probability distributions to choose from.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库模块“random”还包含一个梅森旋转伪随机数生成器，具有一些与[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState")中可用方法类似的方法。除了具有NumPy意识外，[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState")的优势在于它提供了更多的概率分布可供选择。
- en: Seeding and State
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播种和状态
- en: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | Return a tuple representing
    the internal state of the generator. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | 返回表示生成器内部状态的元组。 |'
- en: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | Set the internal state of the generator
    from a tuple. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | 从元组设置生成器的内部状态。 |'
- en: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | Reseed a legacy MT19937 BitGenerator
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | 重新播种传统MT19937比特生成器 |'
- en: Simple random data
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的随机数据
- en: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | Random values in a given shape.
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | 给定形状的随机值。 |'
- en: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | Return a sample (or samples)
    from the "standard normal" distribution. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | 从“标准正态”分布中返回一个样本（或多个样本）。'
- en: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | Return random
    integers from *low* (inclusive) to *high* (exclusive). |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | 返回从 *low*（包括）到
    *high*（不包括）的随机整数。'
- en: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | Random integers
    of type *np.int_* between *low* and *high*, inclusive. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | 返回 *np.int_*
    类型的随机整数，范围在 *low* 和 *high* 之间（包括边界）。'
- en: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | Return random floats in the
    half-open interval [0.0, 1.0). |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | 返回半开区间 [0.0, 1.0) 中的随机浮点数。'
- en: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | Generates a random
    sample from a given 1-D array |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | 从给定的 1-D 数组中生成随机样本。'
- en: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | Return random bytes. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | 返回随机字节。'
- en: Permutations
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列
- en: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | Modify a sequence in-place by shuffling
    its contents. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | 通过对其内容进行洗牌来就地修改序列。'
- en: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | Randomly permute a sequence, or return
    a permuted range. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | 随机排列一个序列，或返回一个排列后的范围。'
- en: Distributions
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布
- en: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | 从 Beta 分布中抽取样本。'
- en: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | 从二项分布中抽取样本。'
- en: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | 从卡方分布中抽取样本。'
- en: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | 从 Dirichlet 分布中抽取样本。'
- en: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | Draw samples from an
    exponential distribution. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | 从指数分布中抽取样本。'
- en: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | Draw samples from an F distribution.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | 从 F 分布中抽取样本。'
- en: '| [`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | Draw samples from a
    Gamma distribution. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '[`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | 从伽马分布中绘制样本。'
- en: '| [`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '[`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | 从几何分布中绘制样本。'
- en: '| [`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '[`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | 从古贝尔分布中绘制样本。'
- en: '| [`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '[`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | 从超几何分布中绘制样本。'
- en: '| [`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '[`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | 从拉普拉斯或双指数分布中绘制样本，并指定位置（或平均值）和规模（衰减）。'
- en: '| [`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | Draw samples from a
    logistic distribution. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '[`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | 从逻辑分布中绘制样本。'
- en: '| [`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | Draw samples from
    a log-normal distribution. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '[`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | 从对数正态分布中绘制样本。'
- en: '| [`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '[`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | 从对数序列分布中绘制样本。'
- en: '| [`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | Draw samples from
    a multinomial distribution. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '[`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | 从多项分布中绘制样本。'
- en: '| [`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | Draw
    random samples from a multivariate normal distribution. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '[`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | 从多元正态分布中随机抽取样本。'
- en: '| [`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '[`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。'
- en: '| [`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '[`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中绘制样本。'
- en: '| [`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '[`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心F分布中绘制样本。'
- en: '| [`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | 从正态（高斯）分布中抽取随机样本。 |'
- en: '| [`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | Draw samples from a Pareto II
    or Lomax distribution with specified shape. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | 从具有指定形状的 Pareto II 或 Lomax 分布中抽取样本。
    |'
- en: '| [`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | Draw samples from a Poisson
    distribution. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | 从泊松分布中抽取样本。 |'
- en: '| [`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | Draws samples in [0, 1] from a
    power distribution with positive exponent a - 1. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | 从具有正指数 a - 1 的幂分布中在 [0, 1] 中抽取样本。
    |'
- en: '| [`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | 从 Rayleigh 分布中抽取样本。 |'
- en: '| [`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | 从具有模式=0的标准柯西分布中抽取样本。 |'
- en: '| [`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | Draw samples from the
    standard exponential distribution. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | 从标准指数分布中抽取样本。 |'
- en: '| [`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | Draw samples from
    a standard Gamma distribution. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | 从标准 Gamma 分布中抽取样本。
    |'
- en: '| [`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | Draw samples from a standard
    Normal distribution (mean=0, stdev=1). |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | 从标准正态分布（均值=0，标准差=1）中抽取样本。
    |'
- en: '| [`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | 从具有 *df* 自由度的标准学生 t 分布中抽取样本。
    |'
- en: '| [`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | 从区间 `[left,
    right]` 上的三角形分布中抽取样本。 |'
- en: '| [`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | 从均匀分布中抽取样本。 |'
- en: '| [`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | Draw samples from a
    von Mises distribution. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | 从 von Mises 分布中抽取样本。
    |'
- en: '| [`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | 从 Wald 或反高斯分布中抽取样本。'
- en: '| [`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | 从 Weibull 分布中抽取样本。'
- en: '| [`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size]) | 从 Zipf 分布中抽取样本。'
- en: '## Functions in [`numpy.random`](index.html#module-numpy.random "numpy.random")'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '## Functions in [`numpy.random`](index.html#module-numpy.random "numpy.random")'
- en: 'Many of the RandomState methods above are exported as functions in [`numpy.random`](index.html#module-numpy.random
    "numpy.random") This usage is discouraged, as it is implemented via a global [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") instance which is not advised on two counts:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 RandomState 方法中的许多方法以函数的形式导出到 [`numpy.random`](index.html#module-numpy.random
    "numpy.random") 这种用法是不推荐的，因为它是通过一个全局的  [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") 实例实现的，这在两个方面都是不建议的：
- en: It uses global state, which means results will change as the code changes
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用全局状态，这意味着结果会随着代码的更改而变化。
- en: It uses a [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")
    rather than the more modern [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用一个 [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")
    而不是更现代的 [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")。
- en: For backward compatible legacy reasons, we will not change this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 出于向后兼容的传统原因，我们不会更改这个。
- en: '| [`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a, b[, size])
    | Draw samples from a Beta distribution. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a,
    b[, size]) | 从 Beta 分布中抽取样本。'
- en: '| [`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n, p[, size])
    | Draw samples from a binomial distribution. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n,
    p[, size]) | 从二项分布中抽取样本。'
- en: '| [`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)
    | Return random bytes. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)
    | 返回随机字节。'
- en: '| [`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size]) | Draw samples from a chi-square distribution.
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size]) | 从卡方分布中抽取样本。'
- en: '| [`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[, size, replace, p])
    | Generates a random sample from a given 1-D array |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[,
    size, replace, p]) | 从给定的 1-D 数组中生成随机样本。'
- en: '| [`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet distribution.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size]) | 从 Dirichlet 分布中抽取样本。'
- en: '| [`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size]) | 从指数分布中抽取样本。'
- en: '| [`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum,
    dfden[, size]) | 从 F 分布中抽取样本。'
- en: '| [`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[, scale, size])
    | Draw samples from a Gamma distribution. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[,
    scale, size]) | 从 Gamma 分布中抽取样本。'
- en: '| [`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size]) | Draw samples from the geometric distribution.
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size]) | 从几何分布中抽取样本。'
- en: '| [`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy]) | Return a tuple representing the internal
    state of the generator. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy]) | 返回代表生成器内部状态的元组。 |'
- en: '| [`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc, scale, size])
    | Draw samples from a Gumbel distribution. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc, scale, size])
    | 从 Gumbel 分布中抽取样本。 |'
- en: '| [`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size]) | Draw samples from
    a Hypergeometric distribution. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size]) | 从超几何分布中抽取样本。 |'
- en: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | Draw samples from the Laplace or double exponential distribution with specified
    location (or mean) and scale (decay). |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | 从具有指定位置（或均值）和尺度（衰减）的拉普拉斯或双指数分布中抽取样本。 |'
- en: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | Draw samples from a logistic distribution. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | 从 logistic 分布中抽取样本。 |'
- en: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | Draw samples from a log-normal
    distribution. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | 从对数正态分布中抽取样本。 |'
- en: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | Draw samples from a logarithmic series
    distribution. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | 从对数级数分布中抽取样本。 |'
- en: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | Draw samples from a multinomial
    distribution. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | 从多项分布中抽取样本。 |'
- en: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | Draw random samples
    from a multivariate normal distribution. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | 从多变量正态分布中抽取随机样本。
    |'
- en: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | Draw samples from a negative
    binomial distribution. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。 |'
- en: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | Draw samples from a noncentral
    chi-square distribution. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中抽取样本。 |'
- en: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples from the
    noncentral F distribution. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心 F 分布中抽取样本。 |'
- en: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal "numpy.random.normal")([loc, scale, size])
    | Draw random samples from a normal (Gaussian) distribution. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal "numpy.random.normal")([loc, scale, size])
    | 从正态（高斯）分布中抽取随机样本。 |'
- en: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | Draw samples from a Pareto II or Lomax distribution with specified shape. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | 从参数化 Pareto II 或 Lomax 分布中抽取样本。 |'
- en: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | Randomly permute a sequence, or return a permuted
    range. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | 随机排列一个序列，或返回一个随机排列的范围。 |'
- en: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | Draw samples from a Poisson distribution. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | 从泊松分布中抽取样本。 |'
- en: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | Draws samples in [0, 1] from a power distribution with positive exponent a -
    1. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | 从具有正指数a-1的幂分布中抽取[0, 1]范围内的样本。 |'
- en: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | Random values in a given shape. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | 返回给定形状的随机值。 |'
- en: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | Return random integers from *low* (inclusive) to *high* (exclusive). |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | 返回从*low*（包含）到*high*（不含）之间的随机整数。 |'
- en: '| [`randn`](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | Return a sample (or samples) from the "standard normal" distribution. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`randn`](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | 从“标准正态”分布中返回样本（或样本）。 |'
- en: '| [`random`](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | Return random floats in the half-open interval [0.0, 1.0). |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`random`](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | 返回半开区间[0.0, 1.0)内的随机浮点数。 |'
- en: '| [`random_integers`](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | Random integers of type *np.int_*
    between *low* and *high*, inclusive. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`random_integers`](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | 返回类型为*np.int_*的随机整数，范围在*low*和*high*之间（包含边界）。
    |'
- en: '| [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | Return random floats in the half-open
    interval [0.0, 1.0). |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | 返回半开区间[0.0, 1.0)内的随机浮点数。 |'
- en: '| [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | 这是[`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")的别名。 |'
- en: '| [`rayleigh`](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | Draw samples from a Rayleigh distribution. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`rayleigh`](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | 从瑞利分布中抽取样本。 |'
- en: '| [`sample`](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`sample`](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | 这是[`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")的别名。 |'
- en: '| [`seed`](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | Reseed the singleton RandomState instance. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`seed`](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | 重新设置单例RandomState实例的种子。 |'
- en: '| [`set_state`](generated/numpy.random.set_state.html#numpy.random.set_state
    "numpy.random.set_state")(state) | Set the internal state of the generator from
    a tuple. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`set_state`](generated/numpy.random.set_state.html#numpy.random.set_state
    "numpy.random.set_state")(state) | 从元组中设置生成器的内部状态。 |'
- en: '| [`shuffle`](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | Modify a sequence in-place by shuffling its contents. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`shuffle`](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | 通过对其内容进行洗牌而就地修改序列。 |'
- en: '| [`standard_cauchy`](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | Draw samples from a standard Cauchy
    distribution with mode = 0. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_cauchy`](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | 从标准柯西分布中抽取样本，其中模式=0。 |'
- en: '| [`standard_exponential`](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential
    "numpy.random.standard_exponential")([size]) | Draw samples from the standard
    exponential distribution. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_exponential`](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential
    "numpy.random.standard_exponential")([size]) | 从标准指数分布中抽取样本。 |'
- en: '| [`standard_gamma`](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | Draw samples from a standard Gamma
    distribution. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_gamma`](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | 从标准伽玛分布中抽取样本。 |'
- en: '| [`standard_normal`](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | Draw samples from a standard Normal
    distribution (mean=0, stdev=1). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_normal`](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | 从标准正态分布（均值=0，标准差=1）中抽取样本。 |'
- en: '| [`standard_t`](generated/numpy.random.standard_t.html#numpy.random.standard_t
    "numpy.random.standard_t")(df[, size]) | Draw samples from a standard Student''s
    t distribution with *df* degrees of freedom. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`standard_t`](generated/numpy.random.standard_t.html#numpy.random.standard_t
    "numpy.random.standard_t")(df[, size]) | 从具有*df*自由度的标准学生t分布中抽取样本。 |'
- en: '| [`triangular`](generated/numpy.random.triangular.html#numpy.random.triangular
    "numpy.random.triangular")(left, mode, right[, size]) | Draw samples from the
    triangular distribution over the interval `[left, right]`. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`triangular`](generated/numpy.random.triangular.html#numpy.random.triangular
    "numpy.random.triangular")(left, mode, right[, size]) | 从区间`[left, right]`上的三角分布中抽取样本。
    |'
- en: '| [`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | Draw samples from a uniform distribution. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | 从均匀分布中抽取样本。 |'
- en: '| [`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | Draw samples from a von Mises distribution. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | 从冯·米塞斯分布中抽取样本。 |'
- en: '| [`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | Draw samples from a Wald, or inverse Gaussian, distribution. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | 从瓦尔德分布或逆高斯分布中抽取样本。 |'
- en: '| [`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | Draw samples from a Weibull distribution. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | 从威布尔分布中抽取样本。 |'
- en: '| [`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | Draw samples from a Zipf distribution. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | 从齐普夫分布中抽取样本。 |'
- en: Seeding and State
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 种子和状态
- en: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | Return a tuple representing
    the internal state of the generator. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`get_state`](generated/numpy.random.RandomState.get_state.html#numpy.random.RandomState.get_state
    "numpy.random.RandomState.get_state")([legacy]) | 返回表示生成器内部状态的元组。 |'
- en: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | Set the internal state of the generator
    from a tuple. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`set_state`](generated/numpy.random.RandomState.set_state.html#numpy.random.RandomState.set_state
    "numpy.random.RandomState.set_state")(state) | 从元组中设置生成器的内部状态。 |'
- en: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | Reseed a legacy MT19937 BitGenerator
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`seed`](generated/numpy.random.RandomState.seed.html#numpy.random.RandomState.seed
    "numpy.random.RandomState.seed")([seed]) | 重新设置传统的MT19937 BitGenerator的种子 |'
- en: Simple random data
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单随机数据
- en: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | Random values in a given shape.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`rand`](generated/numpy.random.RandomState.rand.html#numpy.random.RandomState.rand
    "numpy.random.RandomState.rand")(d0, d1, ..., dn) | 给定形状的随机值。 |'
- en: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | Return a sample (or samples)
    from the "standard normal" distribution. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`randn`](generated/numpy.random.RandomState.randn.html#numpy.random.RandomState.randn
    "numpy.random.RandomState.randn")(d0, d1, ..., dn) | 从“标准正态”分布中返回一个样本（或多个样本）。
    |'
- en: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | Return random
    integers from *low* (inclusive) to *high* (exclusive). |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`randint`](generated/numpy.random.RandomState.randint.html#numpy.random.RandomState.randint
    "numpy.random.RandomState.randint")(low[, high, size, dtype]) | 从*low*（包括）到*high*（不包括）之间返回随机整数。
    |'
- en: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | Random integers
    of type *np.int_* between *low* and *high*, inclusive. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`random_integers`](generated/numpy.random.RandomState.random_integers.html#numpy.random.RandomState.random_integers
    "numpy.random.RandomState.random_integers")(low[, high, size]) | 在*low*和*high*之间（包括两端）生成类型为*np.int_*的随机整数。
    |'
- en: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | Return random floats in the
    half-open interval [0.0, 1.0). |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")([size]) | 返回半开区间[0.0, 1.0)内的随机浮点数。 |'
- en: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | Generates a random
    sample from a given 1-D array |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`choice`](generated/numpy.random.RandomState.choice.html#numpy.random.RandomState.choice
    "numpy.random.RandomState.choice")(a[, size, replace, p]) | 从给定的1-D数组中生成随机样本 |'
- en: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | Return random bytes. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes`](generated/numpy.random.RandomState.bytes.html#numpy.random.RandomState.bytes
    "numpy.random.RandomState.bytes")(length) | 返回随机字节。 |'
- en: Permutations
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列
- en: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | Modify a sequence in-place by shuffling
    its contents. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`shuffle`](generated/numpy.random.RandomState.shuffle.html#numpy.random.RandomState.shuffle
    "numpy.random.RandomState.shuffle")(x) | 通过对其内容进行洗牌来就地修改一个序列。 |'
- en: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | Randomly permute a sequence, or return
    a permuted range. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.RandomState.permutation.html#numpy.random.RandomState.permutation
    "numpy.random.RandomState.permutation")(x) | 随机排列一个序列，或返回一个排列后的范围。 |'
- en: Distributions
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布
- en: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | Draw samples from a Beta distribution.
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/numpy.random.RandomState.beta.html#numpy.random.RandomState.beta
    "numpy.random.RandomState.beta")(a, b[, size]) | 从Beta分布中抽取样本。 |'
- en: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | Draw samples from a binomial
    distribution. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`binomial`](generated/numpy.random.RandomState.binomial.html#numpy.random.RandomState.binomial
    "numpy.random.RandomState.binomial")(n, p[, size]) | 从二项分布中抽取样本。 |'
- en: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | Draw samples from a chi-square
    distribution. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/numpy.random.RandomState.chisquare.html#numpy.random.RandomState.chisquare
    "numpy.random.RandomState.chisquare")(df[, size]) | 从卡方分布中抽取样本。 |'
- en: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet
    distribution. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/numpy.random.RandomState.dirichlet.html#numpy.random.RandomState.dirichlet
    "numpy.random.RandomState.dirichlet")(alpha[, size]) | 从Dirichlet分布中抽取样本。 |'
- en: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | Draw samples from an
    exponential distribution. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`exponential`](generated/numpy.random.RandomState.exponential.html#numpy.random.RandomState.exponential
    "numpy.random.RandomState.exponential")([scale, size]) | 从指数分布中抽取样本。 |'
- en: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | Draw samples from an F distribution.
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`f`](generated/numpy.random.RandomState.f.html#numpy.random.RandomState.f
    "numpy.random.RandomState.f")(dfnum, dfden[, size]) | 从F分布中抽取样本。 |'
- en: '| [`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | Draw samples from a
    Gamma distribution. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`gamma`](generated/numpy.random.RandomState.gamma.html#numpy.random.RandomState.gamma
    "numpy.random.RandomState.gamma")(shape[, scale, size]) | 从Gamma分布中抽取样本。 |'
- en: '| [`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | Draw samples from the geometric
    distribution. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`geometric`](generated/numpy.random.RandomState.geometric.html#numpy.random.RandomState.geometric
    "numpy.random.RandomState.geometric")(p[, size]) | 从几何分布中抽取样本。 |'
- en: '| [`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | Draw samples from a Gumbel
    distribution. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '[`gumbel`](generated/numpy.random.RandomState.gumbel.html#numpy.random.RandomState.gumbel
    "numpy.random.RandomState.gumbel")([loc, scale, size]) | 从 Gumbel 分布中抽取样本。'
- en: '| [`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | Draw
    samples from a Hypergeometric distribution. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '[`hypergeometric`](generated/numpy.random.RandomState.hypergeometric.html#numpy.random.RandomState.hypergeometric
    "numpy.random.RandomState.hypergeometric")(ngood, nbad, nsample[, size]) | 从超几何分布中抽取样本。'
- en: '| [`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | Draw samples from the
    Laplace or double exponential distribution with specified location (or mean) and
    scale (decay). |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '[`laplace`](generated/numpy.random.RandomState.laplace.html#numpy.random.RandomState.laplace
    "numpy.random.RandomState.laplace")([loc, scale, size]) | 从指定位置（或均值）和尺度（衰减）的拉普拉斯或双指数分布中抽取样本。'
- en: '| [`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | Draw samples from a
    logistic distribution. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '[`logistic`](generated/numpy.random.RandomState.logistic.html#numpy.random.RandomState.logistic
    "numpy.random.RandomState.logistic")([loc, scale, size]) | 从 logistic 分布中抽取样本。'
- en: '| [`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | Draw samples from
    a log-normal distribution. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '[`lognormal`](generated/numpy.random.RandomState.lognormal.html#numpy.random.RandomState.lognormal
    "numpy.random.RandomState.lognormal")([mean, sigma, size]) | 从对数正态分布中抽取样本。'
- en: '| [`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | Draw samples from a logarithmic
    series distribution. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '[`logseries`](generated/numpy.random.RandomState.logseries.html#numpy.random.RandomState.logseries
    "numpy.random.RandomState.logseries")(p[, size]) | 从对数级数分布中抽取样本。'
- en: '| [`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | Draw samples from
    a multinomial distribution. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '[`multinomial`](generated/numpy.random.RandomState.multinomial.html#numpy.random.RandomState.multinomial
    "numpy.random.RandomState.multinomial")(n, pvals[, size]) | 从多项分布中抽取样本。'
- en: '| [`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | Draw
    random samples from a multivariate normal distribution. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '[`multivariate_normal`](generated/numpy.random.RandomState.multivariate_normal.html#numpy.random.RandomState.multivariate_normal
    "numpy.random.RandomState.multivariate_normal")(mean, cov[, size, ...]) | 从多元正态分布中抽取随机样本。'
- en: '| [`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | Draw samples from
    a negative binomial distribution. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '[`negative_binomial`](generated/numpy.random.RandomState.negative_binomial.html#numpy.random.RandomState.negative_binomial
    "numpy.random.RandomState.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。'
- en: '| [`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | Draw samples
    from a noncentral chi-square distribution. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '[`noncentral_chisquare`](generated/numpy.random.RandomState.noncentral_chisquare.html#numpy.random.RandomState.noncentral_chisquare
    "numpy.random.RandomState.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中抽取样本。'
- en: '| [`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples
    from the noncentral F distribution. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '[`noncentral_f`](generated/numpy.random.RandomState.noncentral_f.html#numpy.random.RandomState.noncentral_f
    "numpy.random.RandomState.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心 F
    分布中抽取样本。'
- en: '| [`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | Draw random samples from
    a normal (Gaussian) distribution. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '[`normal`](generated/numpy.random.RandomState.normal.html#numpy.random.RandomState.normal
    "numpy.random.RandomState.normal")([loc, scale, size]) | 从正态（高斯）分布中抽取随机样本。'
- en: '| [`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | Draw samples from a Pareto II
    or Lomax distribution with specified shape. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '[`pareto`](generated/numpy.random.RandomState.pareto.html#numpy.random.RandomState.pareto
    "numpy.random.RandomState.pareto")(a[, size]) | 从指定形状的 Pareto II 或 Lomax 分布中抽取样本。'
- en: '| [`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | Draw samples from a Poisson
    distribution. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '[`poisson`](generated/numpy.random.RandomState.poisson.html#numpy.random.RandomState.poisson
    "numpy.random.RandomState.poisson")([lam, size]) | 从泊松分布中抽取样本。'
- en: '| [`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | Draws samples in [0, 1] from a
    power distribution with positive exponent a - 1. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '[`power`](generated/numpy.random.RandomState.power.html#numpy.random.RandomState.power
    "numpy.random.RandomState.power")(a[, size]) | 从具有正指数a-1的幂分布中的[0, 1]中抽取样本。'
- en: '| [`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | Draw samples from a Rayleigh
    distribution. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '[`rayleigh`](generated/numpy.random.RandomState.rayleigh.html#numpy.random.RandomState.rayleigh
    "numpy.random.RandomState.rayleigh")([scale, size]) | 从瑞利分布中抽取样本。'
- en: '| [`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | Draw samples from a standard
    Cauchy distribution with mode = 0. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '[`standard_cauchy`](generated/numpy.random.RandomState.standard_cauchy.html#numpy.random.RandomState.standard_cauchy
    "numpy.random.RandomState.standard_cauchy")([size]) | 从具有模=0的标准柯西分布中抽取样本。'
- en: '| [`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | Draw samples from the
    standard exponential distribution. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '[`standard_exponential`](generated/numpy.random.RandomState.standard_exponential.html#numpy.random.RandomState.standard_exponential
    "numpy.random.RandomState.standard_exponential")([size]) | 从标准指数分布中抽取样本。'
- en: '| [`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | Draw samples from
    a standard Gamma distribution. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '[`standard_gamma`](generated/numpy.random.RandomState.standard_gamma.html#numpy.random.RandomState.standard_gamma
    "numpy.random.RandomState.standard_gamma")(shape[, size]) | 从标准伽玛分布中抽取样本。'
- en: '| [`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | Draw samples from a standard
    Normal distribution (mean=0, stdev=1). |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '[`standard_normal`](generated/numpy.random.RandomState.standard_normal.html#numpy.random.RandomState.standard_normal
    "numpy.random.RandomState.standard_normal")([size]) | 从标准正态分布（均值=0，标准差=1）中抽取样本。'
- en: '| [`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | Draw samples from a standard
    Student''s t distribution with *df* degrees of freedom. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '[`standard_t`](generated/numpy.random.RandomState.standard_t.html#numpy.random.RandomState.standard_t
    "numpy.random.RandomState.standard_t")(df[, size]) | 从具有*df*自由度的标准学生t分布中抽取样本。'
- en: '| [`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | Draw samples
    from the triangular distribution over the interval `[left, right]`. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '[`triangular`](generated/numpy.random.RandomState.triangular.html#numpy.random.RandomState.triangular
    "numpy.random.RandomState.triangular")(left, mode, right[, size]) | 从区间`[left,
    right]`上的三角分布抽取样本。'
- en: '| [`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | Draw samples from a uniform
    distribution. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '[`uniform`](generated/numpy.random.RandomState.uniform.html#numpy.random.RandomState.uniform
    "numpy.random.RandomState.uniform")([low, high, size]) | 从均匀分布中抽取样本。'
- en: '| [`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | Draw samples from a
    von Mises distribution. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '[`vonmises`](generated/numpy.random.RandomState.vonmises.html#numpy.random.RandomState.vonmises
    "numpy.random.RandomState.vonmises")(mu, kappa[, size]) | 从von Mises分布中抽取样本。'
- en: '| [`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | Draw samples from a Wald,
    or inverse Gaussian, distribution. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '[`wald`](generated/numpy.random.RandomState.wald.html#numpy.random.RandomState.wald
    "numpy.random.RandomState.wald")(mean, scale[, size]) | 从Wald或逆高斯分布中抽取样本。'
- en: '| [`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | Draw samples from a Weibull distribution.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '[`weibull`](generated/numpy.random.RandomState.weibull.html#numpy.random.RandomState.weibull
    "numpy.random.RandomState.weibull")(a[, size]) | 从威布尔分布中抽取样本。'
- en: '| [`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size]) | Draw samples from a Zipf distribution.
    |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '|[`zipf`](generated/numpy.random.RandomState.zipf.html#numpy.random.RandomState.zipf
    "numpy.random.RandomState.zipf")(a[, size])|从Zipf分布中抽取样本。|'
- en: '## Functions in [`numpy.random`](index.html#module-numpy.random "numpy.random")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '## 在 [`numpy.random`](index.html#module-numpy.random "numpy.random")中的函数'
- en: 'Many of the RandomState methods above are exported as functions in [`numpy.random`](index.html#module-numpy.random
    "numpy.random") This usage is discouraged, as it is implemented via a global [`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState") instance which is not advised on two counts:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Many of the RandomState methods above are exported as functions in [`numpy.random`](index.html#module-numpy.random
    "numpy.random")这种用法是不鼓励的，因为它是通过一个全局的[`RandomState`](#numpy.random.RandomState
    "numpy.random.RandomState")实例来实现的，这在两个方面都不被建议：
- en: It uses global state, which means results will change as the code changes
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用全局状态，这意味着结果将随着代码的更改而改变
- en: It uses a [`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")
    rather than the more modern [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用[`RandomState`](#numpy.random.RandomState "numpy.random.RandomState")而不是更现代的[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")。
- en: For backward compatible legacy reasons, we will not change this.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于向后兼容的遗留原因，我们不会对此进行更改。
- en: '| [`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a, b[, size])
    | Draw samples from a Beta distribution. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '|[`beta`](generated/numpy.random.beta.html#numpy.random.beta "numpy.random.beta")(a,
    b[, size])|从Beta分布中抽取样本。|'
- en: '| [`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n, p[, size])
    | Draw samples from a binomial distribution. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '|[`binomial`](generated/numpy.random.binomial.html#numpy.random.binomial "numpy.random.binomial")(n,
    p[, size])|从二项分布中抽取样本。|'
- en: '| [`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)
    | Return random bytes. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '|[`bytes`](generated/numpy.random.bytes.html#numpy.random.bytes "numpy.random.bytes")(length)|返回随机字节。|'
- en: '| [`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size]) | Draw samples from a chi-square distribution.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '|[`chisquare`](generated/numpy.random.chisquare.html#numpy.random.chisquare
    "numpy.random.chisquare")(df[, size])|从卡方分布中抽取样本。|'
- en: '| [`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[, size, replace, p])
    | Generates a random sample from a given 1-D array |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '|[`choice`](generated/numpy.random.choice.html#numpy.random.choice "numpy.random.choice")(a[,
    size, replace, p])|从给定的1-D数组生成随机样本|'
- en: '| [`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size]) | Draw samples from the Dirichlet distribution.
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '|[`dirichlet`](generated/numpy.random.dirichlet.html#numpy.random.dirichlet
    "numpy.random.dirichlet")(alpha[, size])|从Dirichlet分布中抽取样本。|'
- en: '| [`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size]) | Draw samples from an exponential
    distribution. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '|[`exponential`](generated/numpy.random.exponential.html#numpy.random.exponential
    "numpy.random.exponential")([scale, size])|从指数分布中抽取样本。|'
- en: '| [`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum, dfden[, size])
    | Draw samples from an F distribution. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '|[`f`](generated/numpy.random.f.html#numpy.random.f "numpy.random.f")(dfnum,
    dfden[, size])|从F分布中抽取样本。|'
- en: '| [`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[, scale, size])
    | Draw samples from a Gamma distribution. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '|[`gamma`](generated/numpy.random.gamma.html#numpy.random.gamma "numpy.random.gamma")(shape[,
    scale, size])|从Gamma分布中抽取样本。|'
- en: '| [`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size]) | Draw samples from the geometric distribution.
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '|[`geometric`](generated/numpy.random.geometric.html#numpy.random.geometric
    "numpy.random.geometric")(p[, size])|从几何分布中抽取样本。|'
- en: '| [`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy]) | Return a tuple representing the internal
    state of the generator. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '|[`get_state`](generated/numpy.random.get_state.html#numpy.random.get_state
    "numpy.random.get_state")([legacy])|返回表示生成器内部状态的元组。|'
- en: '| [`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc, scale, size])
    | Draw samples from a Gumbel distribution. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '|[`gumbel`](generated/numpy.random.gumbel.html#numpy.random.gumbel "numpy.random.gumbel")([loc,
    scale, size])|从Gumbel分布中抽取样本。|'
- en: '| [`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size]) | Draw samples from
    a Hypergeometric distribution. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '|[`hypergeometric`](generated/numpy.random.hypergeometric.html#numpy.random.hypergeometric
    "numpy.random.hypergeometric")(ngood, nbad, nsample[, size])|从超几何分布中抽取样本。|'
- en: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | Draw samples from the Laplace or double exponential distribution with specified
    location (or mean) and scale (decay). |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`laplace`](generated/numpy.random.laplace.html#numpy.random.laplace "numpy.random.laplace")([loc, scale, size])
    | 从具有指定位置（或均值）和尺度（衰减）的拉普拉斯或双指数分布中抽取样本。 |'
- en: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | Draw samples from a logistic distribution. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`logistic`](generated/numpy.random.logistic.html#numpy.random.logistic "numpy.random.logistic")([loc, scale, size])
    | 从 logistic 分布中抽取样本。 |'
- en: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | Draw samples from a log-normal
    distribution. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`lognormal`](generated/numpy.random.lognormal.html#numpy.random.lognormal
    "numpy.random.lognormal")([mean, sigma, size]) | 从对数正态分布中抽取样本。 |'
- en: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | Draw samples from a logarithmic series
    distribution. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`logseries`](generated/numpy.random.logseries.html#numpy.random.logseries
    "numpy.random.logseries")(p[, size]) | 从对数序列分布中抽取样本。 |'
- en: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | Draw samples from a multinomial
    distribution. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`multinomial`](generated/numpy.random.multinomial.html#numpy.random.multinomial
    "numpy.random.multinomial")(n, pvals[, size]) | 从多项式分布中抽取样本。 |'
- en: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | Draw random samples
    from a multivariate normal distribution. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_normal`](generated/numpy.random.multivariate_normal.html#numpy.random.multivariate_normal
    "numpy.random.multivariate_normal")(mean, cov[, size, ...]) | 从多元正态分布中抽取随机样本。
    |'
- en: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | Draw samples from a negative
    binomial distribution. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`negative_binomial`](generated/numpy.random.negative_binomial.html#numpy.random.negative_binomial
    "numpy.random.negative_binomial")(n, p[, size]) | 从负二项分布中抽取样本。 |'
- en: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | Draw samples from a noncentral
    chi-square distribution. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_chisquare`](generated/numpy.random.noncentral_chisquare.html#numpy.random.noncentral_chisquare
    "numpy.random.noncentral_chisquare")(df, nonc[, size]) | 从非中心卡方分布中抽取样本。 |'
- en: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | Draw samples from the
    noncentral F distribution. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`noncentral_f`](generated/numpy.random.noncentral_f.html#numpy.random.noncentral_f
    "numpy.random.noncentral_f")(dfnum, dfden, nonc[, size]) | 从非中心 F 分布中抽取样本。 |'
- en: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal "numpy.random.normal")([loc, scale, size])
    | Draw random samples from a normal (Gaussian) distribution. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`normal`](generated/numpy.random.normal.html#numpy.random.normal") | 从正态（高斯）分布中抽取随机样本。
    |'
- en: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | Draw samples from a Pareto II or Lomax distribution with specified shape. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`pareto`](generated/numpy.random.pareto.html#numpy.random.pareto "numpy.random.pareto")(a[, size])
    | 从具有指定形状的 Pareto II 或 Lomax 分布中抽取样本。 |'
- en: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | Randomly permute a sequence, or return a permuted
    range. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation`](generated/numpy.random.permutation.html#numpy.random.permutation
    "numpy.random.permutation")(x) | 随机排列一个序列，或返回一个排列范围。 |'
- en: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | Draw samples from a Poisson distribution. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/numpy.random.poisson.html#numpy.random.poisson "numpy.random.poisson")([lam, size])
    | 从泊松分布中抽取样本。 |'
- en: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | Draws samples in [0, 1] from a power distribution with positive exponent a -
    1. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`power`](generated/numpy.random.power.html#numpy.random.power "numpy.random.power")(a[, size])
    | 从具有正指数 a-1 的幂分布中抽取样本，范围在 [0, 1]。 |'
- en: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | Random values in a given shape. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`rand`](generated/numpy.random.rand.html#numpy.random.rand "numpy.random.rand")(d0, d1, ..., dn)
    | 给定形状中的随机值。 |'
- en: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | Return random integers from *low* (inclusive) to *high* (exclusive). |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`randint`](generated/numpy.random.randint.html#numpy.random.randint "numpy.random.randint")(low[, high, size, dtype])
    | 返回从 *low*（包括）到 *high*（不包括）的随机整数。 |'
- en: '| [`randn`](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | Return a sample (or samples) from the "standard normal" distribution. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '[randn](generated/numpy.random.randn.html#numpy.random.randn "numpy.random.randn")(d0, d1, ..., dn)
    | 从 "标准正态" 分布中返回样本（或样本）。'
- en: '| [`random`](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | Return random floats in the half-open interval [0.0, 1.0). |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '[随机数](generated/numpy.random.random.html#numpy.random.random "numpy.random.random")([size])
    | 返回半开区间 [0.0, 1.0) 中的随机浮点数。'
- en: '| [`random_integers`](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | Random integers of type *np.int_*
    between *low* and *high*, inclusive. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '[随机整数](generated/numpy.random.random_integers.html#numpy.random.random_integers
    "numpy.random.random_integers")(low[, high, size]) | 生成类型为 *np.int_* 的介于 *low*
    和 *high* 之间的随机整数，包括 *high*。'
- en: '| [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | Return random floats in the half-open
    interval [0.0, 1.0). |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '[随机样本](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample")([size]) | 返回半开区间 [0.0, 1.0) 中的随机浮点数。'
- en: '| [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '[ranf](generated/numpy.random.ranf.html#numpy.random.ranf "numpy.random.ranf")
    | 这是 [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample") 的别名。'
- en: '| [`rayleigh`](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | Draw samples from a Rayleigh distribution. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '[瑞利分布](generated/numpy.random.rayleigh.html#numpy.random.rayleigh "numpy.random.rayleigh")([scale, size])
    | 从瑞利分布中抽取样本。'
- en: '| [`sample`](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | This is an alias of [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample"). |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '[样本](generated/numpy.random.sample.html#numpy.random.sample "numpy.random.sample")
    | 这是 [`random_sample`](generated/numpy.random.random_sample.html#numpy.random.random_sample
    "numpy.random.random_sample") 的别名。'
- en: '| [`seed`](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | Reseed the singleton RandomState instance. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '[种子](generated/numpy.random.seed.html#numpy.random.seed "numpy.random.seed")([seed])
    | 重新播种单例RandomState实例。'
- en: '| [`set_state`](generated/numpy.random.set_state.html#numpy.random.set_state
    "numpy.random.set_state")(state) | Set the internal state of the generator from
    a tuple. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '[设置状态](generated/numpy.random.set_state.html#numpy.random.set_state "numpy.random.set_state")(state)
    | 从元组中设置生成器的内部状态。'
- en: '| [`shuffle`](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | Modify a sequence in-place by shuffling its contents. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '[洗牌](generated/numpy.random.shuffle.html#numpy.random.shuffle "numpy.random.shuffle")(x)
    | 通过重排其内容就地修改序列。'
- en: '| [`standard_cauchy`](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | Draw samples from a standard Cauchy
    distribution with mode = 0. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '[标准柯西分布](generated/numpy.random.standard_cauchy.html#numpy.random.standard_cauchy
    "numpy.random.standard_cauchy")([size]) | 从以 mode = 0 的标准柯西分布中抽取样本。'
- en: '| [`standard_exponential`](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential
    "numpy.random.standard_exponential")([size]) | Draw samples from the standard
    exponential distribution. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '[标准指数分布](generated/numpy.random.standard_exponential.html#numpy.random.standard_exponential")
    | 从标准指数分布中抽取样本。'
- en: '| [`standard_gamma`](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | Draw samples from a standard Gamma
    distribution. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '[标准 Gamma 分布](generated/numpy.random.standard_gamma.html#numpy.random.standard_gamma
    "numpy.random.standard_gamma")(shape[, size]) | 从标准 Gamma 分布中抽取样本。'
- en: '| [`standard_normal`](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | Draw samples from a standard Normal
    distribution (mean=0, stdev=1). |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '[标准正态分布](generated/numpy.random.standard_normal.html#numpy.random.standard_normal
    "numpy.random.standard_normal")([size]) | 从标准正态分布（平均值=0，标准差=1）中抽取样本。'
- en: '| [`standard_t`](generated/numpy.random.standard_t.html#numpy.random.standard_t
    "numpy.random.standard_t")(df[, size]) | Draw samples from a standard Student''s
    t distribution with *df* degrees of freedom. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '[标准 t 分布](generated/numpy.random.standard_t.html#numpy.random.standard_t "numpy.random.standard_t")(df[, size])
    | 从具有 *df* 自由度的标准学生 t 分布中抽取样本。'
- en: '| [`triangular`](generated/numpy.random.triangular.html#numpy.random.triangular
    "numpy.random.triangular")(left, mode, right[, size]) | Draw samples from the
    triangular distribution over the interval `[left, right]`. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '[`三角`](generated/numpy.random.triangular.html#numpy.random.triangular "numpy.random.triangular")(left, mode, right[, size])
    | 从区间`[left, right]`上的三角分布中抽取样本。'
- en: '| [`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | Draw samples from a uniform distribution. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '[`uniform`](generated/numpy.random.uniform.html#numpy.random.uniform "numpy.random.uniform")([low, high, size])
    | 从均匀分布中抽取样本。'
- en: '| [`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | Draw samples from a von Mises distribution. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '[`vonmises`](generated/numpy.random.vonmises.html#numpy.random.vonmises "numpy.random.vonmises")(mu, kappa[, size])
    | 从von Mises分布中抽取样本。'
- en: '| [`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | Draw samples from a Wald, or inverse Gaussian, distribution. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '[`wald`](generated/numpy.random.wald.html#numpy.random.wald "numpy.random.wald")(mean, scale[, size])
    | 从Wald或逆高斯分布中抽取样本。'
- en: '| [`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | Draw samples from a Weibull distribution. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '[`weibull`](generated/numpy.random.weibull.html#numpy.random.weibull "numpy.random.weibull")(a[, size])
    | 从Weibull分布中抽取样本。'
- en: '| [`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | Draw samples from a Zipf distribution. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '[`zipf`](generated/numpy.random.zipf.html#numpy.random.zipf "numpy.random.zipf")(a[, size])
    | 从Zipf分布中抽取样本。'
