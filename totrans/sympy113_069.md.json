["```py\nsympy.combinatorics.tensor_can.canonicalize(g, dummies, msym, *v)\n```", "```py\n>>> from sympy.combinatorics.tensor_can import get_symmetric_group_sgs, canonicalize, bsgs_direct_product\n>>> from sympy.combinatorics import Permutation\n>>> base2a, gens2a = get_symmetric_group_sgs(2, 1)\n>>> t0 = (base2a, gens2a, 1, 0)\n>>> t1 = (base2a, gens2a, 2, 0)\n>>> g = Permutation([1, 3, 0, 5, 4, 2, 6, 7])\n>>> canonicalize(g, range(6), 0, t0, t1)\n0 \n```", "```py\n>>> t1 = (base2a, gens2a, 2, 1)\n>>> canonicalize(g, range(6), 0, t0, t1)\n[0, 2, 1, 4, 3, 5, 7, 6] \n```", "```py\n>>> base_f, gens_f = get_symmetric_group_sgs(3, 1)\n>>> base1, gens1 = get_symmetric_group_sgs(1)\n>>> base_A, gens_A = bsgs_direct_product(base1, gens1, base1, gens1)\n>>> t0 = (base_f, gens_f, 2, 0)\n>>> t1 = (base_A, gens_A, 4, 0)\n>>> dummies = [range(2, 10), range(10, 14)]\n>>> g = Permutation([0, 7, 3, 1, 9, 5, 11, 6, 10, 4, 13, 2, 12, 8, 14, 15])\n>>> canonicalize(g, dummies, [0, 0], t0, t1)\n[0, 2, 4, 1, 6, 8, 10, 3, 11, 7, 12, 5, 13, 9, 15, 14] \n```", "```py\nsympy.combinatorics.tensor_can.double_coset_can_rep(dummies, sym, b_S, sgens, S_transversals, g)\n```", "```py\n>>> from sympy.combinatorics.permutations import Permutation\n>>> from sympy.combinatorics.tensor_can import double_coset_can_rep, get_transversals\n>>> gens = [Permutation(x) for x in [[2, 1, 0, 3, 4, 5, 7, 6], [4, 1, 2, 3, 0, 5, 7, 6]]]\n>>> base = [0, 2]\n>>> g = Permutation([4, 2, 0, 1, 3, 5, 6, 7])\n>>> transversals = get_transversals(base, gens)\n>>> double_coset_can_rep([list(range(6))], [0], base, gens, transversals, g)\n[0, 1, 2, 3, 4, 5, 7, 6] \n```", "```py\n>>> g = Permutation([4, 1, 3, 0, 5, 2, 6, 7])\n>>> double_coset_can_rep([list(range(6))], [0], base, gens, transversals, g)\n0 \n```", "```py\nsympy.combinatorics.tensor_can.get_symmetric_group_sgs(n, antisym=False)\n```", "```py\n>>> from sympy.combinatorics.tensor_can import get_symmetric_group_sgs\n>>> get_symmetric_group_sgs(3)\n([0, 1], [(4)(0 1), (4)(1 2)]) \n```", "```py\nsympy.combinatorics.tensor_can.bsgs_direct_product(base1, gens1, base2, gens2, signed=True)\n```", "```py\n>>> from sympy.combinatorics.tensor_can import (get_symmetric_group_sgs, bsgs_direct_product)\n>>> base1, gens1 = get_symmetric_group_sgs(1)\n>>> base2, gens2 = get_symmetric_group_sgs(2)\n>>> bsgs_direct_product(base1, gens1, base2, gens2)\n([1], [(4)(1 2)]) \n```"]