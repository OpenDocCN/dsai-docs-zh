- en: scipy.signal.freqz_zpk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the frequency response of a digital filter in ZPK form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the Zeros, Poles and Gain of a digital filter, compute its frequency
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: \(H(z)=k \prod_i (z - Z[i]) / \prod_j (z - P[j])\)
  prefs: []
  type: TYPE_NORMAL
- en: where \(k\) is the *gain*, \(Z\) are the *zeros* and \(P\) are the *poles*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Zeroes of a linear filter
  prefs: []
  type: TYPE_NORMAL
- en: '**p**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Poles of a linear filter
  prefs: []
  type: TYPE_NORMAL
- en: '**k**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Gain of a linear filter
  prefs: []
  type: TYPE_NORMAL
- en: '**worN**{None, int, array_like}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If a single integer, then compute at that many frequencies (default is N=512).
  prefs: []
  type: TYPE_NORMAL
- en: If an array_like, compute the response at the frequencies given. These are in
    the same units as *fs*.
  prefs: []
  type: TYPE_NORMAL
- en: '**whole**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normally, frequencies are computed from 0 to the Nyquist frequency, fs/2 (upper-half
    of unit-circle). If *whole* is True, compute frequencies from 0 to fs. Ignored
    if w is array_like.
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the digital system. Defaults to 2*pi radians/sample
    (so w is from 0 to pi).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**w**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The frequencies at which *h* was computed, in the same units as *fs*. By default,
    *w* is normalized to the range [0, pi) (radians/sample).
  prefs: []
  type: TYPE_NORMAL
- en: '**h**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The frequency response, as complex numbers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`freqs`](scipy.signal.freqs.html#scipy.signal.freqs "scipy.signal.freqs")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the frequency response of an analog filter in TF form
  prefs: []
  type: TYPE_NORMAL
- en: '[`freqs_zpk`](scipy.signal.freqs_zpk.html#scipy.signal.freqs_zpk "scipy.signal.freqs_zpk")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the frequency response of an analog filter in ZPK form
  prefs: []
  type: TYPE_NORMAL
- en: '[`freqz`](scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the frequency response of a digital filter in TF form
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Design a 4th-order digital Butterworth filter with cut-off of 100 Hz in a system
    with sample rate of 1000 Hz, and plot the frequency response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-freqz_zpk-1.png](../Images/83a0567a0e205dd353491ec03b38090f.png)'
  prefs: []
  type: TYPE_IMG
