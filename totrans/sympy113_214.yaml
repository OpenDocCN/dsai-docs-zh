- en: Operator/State Helper Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/operatorset.html](https://docs.sympy.org/latest/modules/physics/quantum/operatorset.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A module for mapping operators to their corresponding eigenstates and vice versa
  prefs: []
  type: TYPE_NORMAL
- en: It contains a global dictionary with eigenstate-operator pairings. If a new
    state-operator pair is created, this dictionary should be updated as well.
  prefs: []
  type: TYPE_NORMAL
- en: It also contains functions operators_to_state and state_to_operators for mapping
    between the two. These can handle both classes and instances of operators and
    states. See the individual function descriptions for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'TODO List: - Update the dictionary with a complete list of state-operator pairs'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns the eigenstate of the given operator or set of operators
  prefs: []
  type: TYPE_NORMAL
- en: A global function for mapping operator classes to their associated states. It
    takes either an Operator or a set of operators and returns the state associated
    with these.
  prefs: []
  type: TYPE_NORMAL
- en: This function can handle both instances of a given operator or just the class
    itself (i.e. both XOp() and XOp)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple use cases to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '1) A class or set of classes is passed: First, we try to instantiate default
    instances for these operators. If this fails, then the class is simply returned.
    If we succeed in instantiating default instances, then we try to call state._operators_to_state
    on the operator instances. If this fails, the class is returned. Otherwise, the
    instance returned by _operators_to_state is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: '2) An instance or set of instances is passed: In this case, state._operators_to_state
    is called on the instances passed. If this fails, a state class is returned. If
    the method returns an instance, that instance is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, if the operator class or set does not exist in the state_mapping
    dictionary, None is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg: Operator or set**'
  prefs: []
  type: TYPE_NORMAL
- en: The class or instance of the operator or set of operators to be mapped to a
    state
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the operator or set of operators corresponding to the given eigenstate
  prefs: []
  type: TYPE_NORMAL
- en: A global function for mapping state classes to their associated operators or
    sets of operators. It takes either a state class or instance.
  prefs: []
  type: TYPE_NORMAL
- en: This function can handle both instances of a given state or just the class itself
    (i.e. both XKet() and XKet)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple use cases to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '1) A state class is passed: In this case, we first try instantiating a default
    instance of the class. If this succeeds, then we try to call state._state_to_operators
    on that instance. If the creation of the default instance or if the calling of
    _state_to_operators fails, then either an operator class or set of operator classes
    is returned. Otherwise, the appropriate operator instances are returned.'
  prefs: []
  type: TYPE_NORMAL
- en: '2) A state instance is returned: Here, state._state_to_operators is called
    for the instance. If this fails, then a class or set of operator classes is returned.
    Otherwise, the instances are returned.'
  prefs: []
  type: TYPE_NORMAL
- en: In either case, if the state’s class does not exist in state_mapping, None is
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg: StateBase class or instance (or subclasses)**'
  prefs: []
  type: TYPE_NORMAL
- en: The class or instance of the state to be mapped to an operator or set of operators
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
