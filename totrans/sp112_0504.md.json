["```py\nscipy.signal.correlate(in1, in2, mode='full', method='auto')\n```", "```py\nz[...,k,...] = sum[..., i_l, ...] x[..., i_l,...] * conj(y[..., i_l - k,...]) \n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> sig = np.repeat([0., 1., 1., 0., 1., 0., 0., 1.], 128)\n>>> sig_noise = sig + rng.standard_normal(len(sig))\n>>> corr = signal.correlate(sig_noise, np.ones(128), mode='same') / 128 \n```", "```py\n>>> clock = np.arange(64, len(sig), 128)\n>>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, sharex=True)\n>>> ax_orig.plot(sig)\n>>> ax_orig.plot(clock, sig[clock], 'ro')\n>>> ax_orig.set_title('Original signal')\n>>> ax_noise.plot(sig_noise)\n>>> ax_noise.set_title('Signal with noise')\n>>> ax_corr.plot(corr)\n>>> ax_corr.plot(clock, corr[clock], 'ro')\n>>> ax_corr.axhline(0.5, ls=':')\n>>> ax_corr.set_title('Cross-correlated with rectangular pulse')\n>>> ax_orig.margins(0, 0.1)\n>>> fig.tight_layout()\n>>> plt.show() \n```", "```py\n>>> x = np.arange(128) / 128\n>>> sig = np.sin(2 * np.pi * x)\n>>> sig_noise = sig + rng.standard_normal(len(sig))\n>>> corr = signal.correlate(sig_noise, sig)\n>>> lags = signal.correlation_lags(len(sig), len(sig_noise))\n>>> corr /= np.max(corr) \n```", "```py\n>>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, figsize=(4.8, 4.8))\n>>> ax_orig.plot(sig)\n>>> ax_orig.set_title('Original signal')\n>>> ax_orig.set_xlabel('Sample Number')\n>>> ax_noise.plot(sig_noise)\n>>> ax_noise.set_title('Signal with noise')\n>>> ax_noise.set_xlabel('Sample Number')\n>>> ax_corr.plot(lags, corr)\n>>> ax_corr.set_title('Cross-correlated signal')\n>>> ax_corr.set_xlabel('Lag')\n>>> ax_orig.margins(0, 0.1)\n>>> ax_noise.margins(0, 0.1)\n>>> ax_corr.margins(0, 0.1)\n>>> fig.tight_layout()\n>>> plt.show() \n```"]