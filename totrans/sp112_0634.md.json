["```py\nscipy.signal.place_poles(A, B, poles, method='YT', rtol=0.001, maxiter=30)\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> A = np.array([[ 1.380,  -0.2077,  6.715, -5.676  ],\n...               [-0.5814, -4.290,   0,      0.6750 ],\n...               [ 1.067,   4.273,  -6.654,  5.893  ],\n...               [ 0.0480,  4.273,   1.343, -2.104  ]])\n>>> B = np.array([[ 0,      5.679 ],\n...               [ 1.136,  1.136 ],\n...               [ 0,      0,    ],\n...               [-3.146,  0     ]])\n>>> P = np.array([-0.2, -0.5, -5.0566, -8.6659]) \n```", "```py\n>>> fsf1 = signal.place_poles(A, B, P, method='KNV0')\n>>> fsf1.gain_matrix\narray([[ 0.20071427, -0.96665799,  0.24066128, -0.10279785],\n [ 0.50587268,  0.57779091,  0.51795763, -0.41991442]]) \n```", "```py\n>>> fsf2 = signal.place_poles(A, B, P)  # uses YT method\n>>> fsf2.computed_poles\narray([-8.6659, -5.0566, -0.5   , -0.2   ]) \n```", "```py\n>>> fsf3 = signal.place_poles(A, B, P, rtol=-1, maxiter=100)\n>>> fsf3.X\narray([[ 0.52072442+0.j, -0.08409372+0.j, -0.56847937+0.j,  0.74823657+0.j],\n [-0.04977751+0.j, -0.80872954+0.j,  0.13566234+0.j, -0.29322906+0.j],\n [-0.82266932+0.j, -0.19168026+0.j, -0.56348322+0.j, -0.43815060+0.j],\n [ 0.22267347+0.j,  0.54967577+0.j, -0.58387806+0.j, -0.40271926+0.j]]) \n```", "```py\n>>> abs(np.linalg.det(fsf1.X)) < abs(np.linalg.det(fsf2.X))\nTrue\n>>> abs(np.linalg.det(fsf2.X)) < abs(np.linalg.det(fsf3.X))\nTrue \n```", "```py\n>>> A = np.array([[ 0,  7/3.,  0,   0   ],\n...               [ 0,   0,    0,  7/9. ],\n...               [ 0,   0,    0,   0   ],\n...               [ 0,   0,    0,   0   ]])\n>>> B = np.array([[ 0,  0 ],\n...               [ 0,  0 ],\n...               [ 1,  0 ],\n...               [ 0,  1 ]])\n>>> P = np.array([-3, -1, -2-1j, -2+1j]) / 3.\n>>> fsf = signal.place_poles(A, B, P, method='YT') \n```", "```py\n>>> t = np.linspace(0, 2*np.pi, 401)\n>>> plt.plot(np.cos(t), np.sin(t), 'k--')  # unit circle\n>>> plt.plot(fsf.requested_poles.real, fsf.requested_poles.imag,\n...          'wo', label='Desired')\n>>> plt.plot(fsf.computed_poles.real, fsf.computed_poles.imag, 'bx',\n...          label='Placed')\n>>> plt.grid()\n>>> plt.axis('image')\n>>> plt.axis([-1.1, 1.1, -1.1, 1.1])\n>>> plt.legend(bbox_to_anchor=(1.05, 1), loc=2, numpoints=1) \n```"]