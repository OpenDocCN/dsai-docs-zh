- en: scipy.signal.freqz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.signal.freqz
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz.html#scipy.signal.freqz](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz.html#scipy.signal.freqz)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz.html#scipy.signal.freqz](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.freqz.html#scipy.signal.freqz)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Compute the frequency response of a digital filter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算数字滤波器的频率响应。
- en: 'Given the M-order numerator *b* and N-order denominator *a* of a digital filter,
    compute its frequency response:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 给定数字滤波器的M阶分子*b*和N阶分母*a*，计算其频率响应：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**b**array_like'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**b**：array_like'
- en: Numerator of a linear filter. If *b* has dimension greater than 1, it is assumed
    that the coefficients are stored in the first dimension, and `b.shape[1:]`, `a.shape[1:]`,
    and the shape of the frequencies array must be compatible for broadcasting.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 线性滤波器的分子。如果*b*的维度大于1，则假定系数存储在第一维度中，并且*b.shape[1:]*、*a.shape[1:]*和频率数组的形状必须兼容广播。
- en: '**a**array_like'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**：array_like'
- en: Denominator of a linear filter. If *b* has dimension greater than 1, it is assumed
    that the coefficients are stored in the first dimension, and `b.shape[1:]`, `a.shape[1:]`,
    and the shape of the frequencies array must be compatible for broadcasting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 线性滤波器的分母。如果*b*的维度大于1，则假定系数存储在第一维度中，并且*b.shape[1:]*、*a.shape[1:]*和频率数组的形状必须兼容广播。
- en: '**worN**{None, int, array_like}, optional'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**worN**：{None, int, array_like}，可选'
- en: 'If a single integer, then compute at that many frequencies (default is N=512).
    This is a convenient alternative to:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是单个整数，则在那么多的频率上进行计算（默认值为N=512）。这是以下便利的替代方法：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using a number that is fast for FFT computations can result in faster computations
    (see Notes).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快速FFT计算的数字可以导致更快的计算（见备注）。
- en: If an array_like, compute the response at the frequencies given. These are in
    the same units as *fs*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是array_like，则在给定的频率上计算响应。这些频率与*fs*的单位相同。
- en: '**whole**bool, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**whole**：bool，可选'
- en: Normally, frequencies are computed from 0 to the Nyquist frequency, fs/2 (upper-half
    of unit-circle). If *whole* is True, compute frequencies from 0 to fs. Ignored
    if worN is array_like.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，频率从0到Nyquist频率fs/2（单位圆的上半部分）计算。如果*whole*为True，则从0到fs计算频率。如果worN是array_like，则忽略。
- en: '**plot**callable'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**plot**：callable'
- en: A callable that takes two arguments. If given, the return parameters *w* and
    *h* are passed to plot. Useful for plotting the frequency response inside [`freqz`](#scipy.signal.freqz
    "scipy.signal.freqz").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个接受两个参数的可调用函数。如果提供了，返回参数*w*和*h*将传递给绘图函数。用于在[`freqz`](#scipy.signal.freqz "scipy.signal.freqz")内绘制频率响应。
- en: '**fs**float, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**fs**：float，可选'
- en: The sampling frequency of the digital system. Defaults to 2*pi radians/sample
    (so w is from 0 to pi).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数字系统的采样频率。默认为2*pi弧度/样本（所以w从0到pi）。
- en: New in version 1.2.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1.2.0版的新功能。
- en: '**include_nyquist**bool, optional'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_nyquist**：bool，可选'
- en: If *whole* is False and *worN* is an integer, setting *include_nyquist* to True
    will include the last frequency (Nyquist frequency) and is otherwise ignored.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*whole*为False且*worN*为整数，则将*include_nyquist*设置为True将包括最后一个频率（Nyquist频率），否则将被忽略。
- en: New in version 1.5.0.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 1.5.0版的新功能。
- en: 'Returns:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**w**ndarray'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**w**：ndarray'
- en: The frequencies at which *h* was computed, in the same units as *fs*. By default,
    *w* is normalized to the range [0, pi) (radians/sample).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*h*的频率，单位与*fs*相同。默认情况下，*w*被归一化为范围[0, pi)（弧度/样本）。
- en: '**h**ndarray'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**h**：ndarray'
- en: The frequency response, as complex numbers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 频率响应，作为复数。
- en: See also
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`freqz_zpk`](scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk "scipy.signal.freqz_zpk")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`freqz_zpk`](scipy.signal.freqz_zpk.html#scipy.signal.freqz_zpk "scipy.signal.freqz_zpk")'
- en: '[`sosfreqz`](scipy.signal.sosfreqz.html#scipy.signal.sosfreqz "scipy.signal.sosfreqz")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sosfreqz`](scipy.signal.sosfreqz.html#scipy.signal.sosfreqz "scipy.signal.sosfreqz")'
- en: Notes
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: 'Using Matplotlib’s [`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot
    "(in Matplotlib v3.8.2)") function as the callable for *plot* produces unexpected
    results, as this plots the real part of the complex transfer function, not the
    magnitude. Try `lambda w, h: plot(w, np.abs(h))`.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用Matplotlib的[`matplotlib.pyplot.plot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot
    "(在Matplotlib v3.8.2中)")函数作为*plot*的可调用函数时，会产生意外的结果，因为这会绘制复数传递函数的实部而不是幅度。尝试`lambda
    w, h: plot(w, np.abs(h))`。'
- en: 'A direct computation via (R)FFT is used to compute the frequency response when
    the following conditions are met:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在满足以下条件时使用直接计算（R）FFT来计算频率响应：
- en: An integer value is given for *worN*.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*worN* 是一个整数值。'
- en: '*worN* is fast to compute via FFT (i.e., [`next_fast_len(worN)`](scipy.fft.next_fast_len.html#scipy.fft.next_fast_len
    "scipy.fft.next_fast_len") equals *worN*).'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*worN* 通过FFT计算快速（即，[`next_fast_len(worN)`](scipy.fft.next_fast_len.html#scipy.fft.next_fast_len)
    等于 *worN*)。'
- en: The denominator coefficients are a single value (`a.shape[0] == 1`).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分母系数是单个值（`a.shape[0] == 1`）。
- en: '*worN* is at least as long as the numerator coefficients (`worN >= b.shape[0]`).'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*worN* 至少与分子系数的长度相同（`worN >= b.shape[0]`）。'
- en: If `b.ndim > 1`, then `b.shape[-1] == 1`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `b.ndim > 1`，那么 `b.shape[-1] == 1`。
- en: For long FIR filters, the FFT approach can have lower error and be much faster
    than the equivalent direct polynomial calculation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长FIR滤波器，FFT方法的误差可能比等效的直接多项式计算低，并且速度要快得多。
- en: Examples
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![../../_images/scipy-signal-freqz-1_00_00.png](../Images/93c9d64d7c517e269b9bd306bf209cb5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-signal-freqz-1_00_00.png](../Images/93c9d64d7c517e269b9bd306bf209cb5.png)'
- en: Broadcasting Examples
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 广播示例
- en: 'Suppose we have two FIR filters whose coefficients are stored in the rows of
    an array with shape (2, 25). For this demonstration, we’ll use random data:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个FIR滤波器，它们的系数存储在形状为（2, 25）的数组的行中。为了演示，我们将使用随机数据：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To compute the frequency response for these two filters with one call to [`freqz`](#scipy.signal.freqz
    "scipy.signal.freqz"), we must pass in `b.T`, because [`freqz`](#scipy.signal.freqz
    "scipy.signal.freqz") expects the first axis to hold the coefficients. We must
    then extend the shape with a trivial dimension of length 1 to allow broadcasting
    with the array of frequencies. That is, we pass in `b.T[..., np.newaxis]`, which
    has shape (25, 2, 1):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了一次调用[`freqz`](#scipy.signal.freqz "scipy.signal.freqz")计算这两个滤波器的频率响应，我们必须传入`b.T`，因为[`freqz`](#scipy.signal.freqz
    "scipy.signal.freqz")期望第一个轴包含系数。然后我们必须通过在长度为1的虚拟维度上扩展形状来允许与频率数组进行广播。也就是说，我们传入`b.T[...,
    np.newaxis]`，其形状为（25, 2, 1）：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, suppose we have two transfer functions, with the same numerator coefficients
    `b = [0.5, 0.5]`. The coefficients for the two denominators are stored in the
    first dimension of the 2-D array *a*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有两个传递函数，分子系数相同 `b = [0.5, 0.5]`。这两个分母的系数存储在2-D数组 *a* 的第一个维度中：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Only *a* is more than 1-D. To make it compatible for broadcasting with the
    frequencies, we extend it with a trivial dimension in the call to [`freqz`](#scipy.signal.freqz
    "scipy.signal.freqz"):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 *a* 是多于1维的。为了使其与频率广播兼容，在调用[`freqz`](#scipy.signal.freqz "scipy.signal.freqz")时，我们通过在虚拟维度上扩展它来实现：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
