["```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> x = symbols('x')\n>>> reduce_inequalities([x >= 0, x**2 <= pi], x)\n(0 <= x) & (x <= sqrt(pi)) \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> x = symbols('x')\n>>> reduce_inequalities(x**2 <= pi, x)\n(x <= sqrt(pi)) & (-sqrt(pi) <= x) \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> x = symbols('x')\n>>> reduce_inequalities([3*x >= 1, x**2 <= pi], x)\n(1/3 <= x) & (x <= sqrt(pi)) \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> from sympy.core.relational import Relational\n>>> x = symbols('x')\n>>> eq = reduce_inequalities([3*x >= 1, x**2 <= pi], x); eq\n(1/3 <= x) & (x <= sqrt(pi))\n>>> relations = [(i.lhs, i.rel_op, i.rhs) for i in [i.canonical for i in eq.atoms(Relational)]]\n>>> relations_sorted = sorted(relations, key=lambda x: float(x[2])) # Sorting relations just to ensure consistent list order for docstring testing\n>>> relations_sorted\n[(x, '>=', 1/3), (x, '<=', sqrt(pi))] \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> x = symbols('x')\n>>> eq = reduce_inequalities([3*x >= 1, x**2 <= pi], x); eq\n(1/3 <= x) & (x <= sqrt(pi))\n>>> eq.args\n(1/3 <= x, x <= sqrt(pi))\n>>> constants = []\n>>> for arg in eq.args:\n...     if arg.lhs == x:\n...         constants.append(arg.rhs)\n...     else:\n...         constants.append(arg.lhs)\n>>> constants\n[1/3, sqrt(pi)] \n```", "```py\n>>> from sympy import reduce_inequalities, symbols\n>>> x, y = symbols(\"x y\")\n>>> reduce_inequalities([x + y > 1, y > 0], [x, y])\nTraceback (most recent call last):\n...\nNotImplementedError: inequality has more than one symbol of interest. \n```", "```py\n>>> from sympy import reduce_inequalities, symbols\n>>> x, y = symbols(\"x y\")\n>>> reduce_inequalities([x + y > 1, y > 0], x)\n(0 < y) & (y < oo) & (x > 1 - y) \n```", "```py\n>>> from sympy import reduce_inequalities, symbols\n>>> x, y = symbols(\"x y\")\n>>> x_y_reduced = reduce_inequalities([x > 1, y > 0], [x, y]); x_y_reduced\n(0 < y) & (1 < x) & (x < oo) & (y < oo) \n```", "```py\n>>> from sympy import And\n>>> x_reduced = reduce_inequalities(x > 1, x); x_reduced\n(1 < x) & (x < oo)\n>>> y_reduced = reduce_inequalities(y > 0, y); y_reduced\n(0 < y) & (y < oo)\n>>> And(x_reduced, y_reduced) == x_y_reduced\nTrue \n```", "```py\n>>> from sympy import reduce_inequalities\n>>> from sympy.abc import x, y\n>>> reduce_inequalities([x ** 2 < 4, x > 0], x)\n(0 < x) & (x < 2)\n>>> reduce_inequalities([x < y, x > 0], x)\n(0 < x) & (x < oo) & (x < y)\n>>> reduce_inequalities([x ** 2 - y < 4, x > 0], x)\nTraceback (most recent call last):\n...\nNotImplementedError: The inequality, -_y + x**2 - 4 < 0, cannot be solved using\nsolve_univariate_inequality. \n```", "```py\n>>> from sympy import reduce_inequalities, cos\n>>> from sympy.abc import x, y\n>>> from sympy.calculus.util import periodicity\n>>> reduce_inequalities([2*cos(x) < 1, x > 0], x)\n(0 < x) & (x < oo) & (pi/3 < x) & (x < 5*pi/3)\n>>> periodicity(2*cos(x), x)\n2*pi \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, pi\n>>> x = symbols('x')\n>>> reduce_inequalities([x < 0, x > pi], x)\nFalse \n```", "```py\n>>> from sympy import symbols, reduce_inequalities, cos\n>>> x = symbols('x')\n>>> reduce_inequalities([cos(x) - x > 0, x > 0], x)\nTraceback (most recent call last):\n...\nNotImplementedError: The inequality, -x + cos(x) > 0, cannot be solved using solve_univariate_inequality. \n```"]