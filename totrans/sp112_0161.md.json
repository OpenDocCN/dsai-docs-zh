["```py\nclass scipy.interpolate.BarycentricInterpolator(xi, yi=None, axis=0, *, wi=None, random_state=None)\n```", "```py\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from scipy.interpolate import BarycentricInterpolator\n>>> rng = np.random.default_rng()\n>>> xi = rng.random(6) * np.pi/2\n>>> f, f_d1, f_d2, f_d3, f_d4 = np.sin, np.cos, lambda x: -np.sin(x), lambda x: -np.cos(x), np.sin\n>>> P = BarycentricInterpolator(xi, f(xi), random_state=rng)\n>>> fig, axs = plt.subplots(5, 1, sharex=True, layout='constrained', figsize=(7,10))\n>>> x = np.linspace(0, np.pi, 100)\n>>> axs[0].plot(x, P(x), 'r:', x, f(x), 'k--', xi, f(xi), 'xk')\n>>> axs[1].plot(x, P.derivative(x), 'r:', x, f_d1(x), 'k--', xi, f_d1(xi), 'xk')\n>>> axs[2].plot(x, P.derivative(x, 2), 'r:', x, f_d2(x), 'k--', xi, f_d2(xi), 'xk')\n>>> axs[3].plot(x, P.derivative(x, 3), 'r:', x, f_d3(x), 'k--', xi, f_d3(xi), 'xk')\n>>> axs[4].plot(x, P.derivative(x, 4), 'r:', x, f_d4(x), 'k--', xi, f_d4(xi), 'xk')\n>>> axs[0].set_xlim(0, np.pi)\n>>> axs[4].set_xlabel(r\"$x$\")\n>>> axs[4].set_xticks([i * np.pi / 4 for i in range(5)],\n...                   [\"0\", r\"$\\frac{\\pi}{4}$\", r\"$\\frac{\\pi}{2}$\", r\"$\\frac{3\\pi}{4}$\", r\"$\\pi$\"])\n>>> axs[0].set_ylabel(\"$f(x)$\")\n>>> axs[1].set_ylabel(\"$f'(x)$\")\n>>> axs[2].set_ylabel(\"$f''(x)$\")\n>>> axs[3].set_ylabel(\"$f^{(3)}(x)$\")\n>>> axs[4].set_ylabel(\"$f^{(4)}(x)$\")\n>>> labels = ['Interpolation nodes', 'True function $f$', 'Barycentric interpolation']\n>>> axs[0].legend(axs[0].get_lines()[::-1], labels, bbox_to_anchor=(0., 1.02, 1., .102),\n...               loc='lower left', ncols=3, mode=\"expand\", borderaxespad=0., frameon=False)\n>>> plt.show() \n```"]