- en: For downstream package authors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/depending_on_numpy.html](https://numpy.org/doc/1.26/dev/depending_on_numpy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This document aims to explain some best practices for authoring a package that
    depends on NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding NumPy’s versioning and API/ABI stability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy uses a standard, [**PEP 440**](https://peps.python.org/pep-0440/) compliant,
    versioning scheme: `major.minor.bugfix`. A *major* release is highly unusual (NumPy
    is still at version `1.xx`) and if it happens it will likely indicate an ABI break.
    *Minor* versions are released regularly, typically every 6 months. Minor versions
    contain new features, deprecations, and removals of previously deprecated code.
    *Bugfix* releases are made even more frequently; they do not contain any new features
    or deprecations.'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know that NumPy, like Python itself and most other well known
    scientific Python projects, does **not** use semantic versioning. Instead, backwards
    incompatible API changes require deprecation warnings for at least two releases.
    For more details, see [NEP 23 — Backwards compatibility and deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)").
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy has both a Python API and a C API. The C API can be used directly or
    via Cython, f2py, or other such tools. If your package uses the C API, then ABI
    (application binary interface) stability of NumPy is important. NumPy’s ABI is
    forward but not backward compatible. This means: binaries compiled against a given
    version of NumPy will still run correctly with newer NumPy versions, but not with
    older versions.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing against the NumPy main branch or pre-releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For large, actively maintained packages that depend on NumPy, we recommend
    testing against the development version of NumPy in CI. To make this easy, nightly
    builds are provided as wheels at [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/).
    Example install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This helps detect regressions in NumPy that need fixing before the next NumPy
    release. Furthermore, we recommend to raise errors on warnings in CI for this
    job, either all warnings or otherwise at least `DeprecationWarning` and `FutureWarning`.
    This gives you an early warning about changes in NumPy to adapt your code.
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding a dependency on NumPy'
  prefs: []
  type: TYPE_NORMAL
- en: Build-time dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  prefs: []
  type: TYPE_NORMAL
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  prefs: []
  type: TYPE_NORMAL
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior can be customized for example by adding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  prefs: []
  type: TYPE_NORMAL
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  prefs: []
  type: TYPE_NORMAL
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  prefs: []
  type: TYPE_NORMAL
- en: 'as of now, it is usually as easy as including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime dependency & version ranges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  prefs: []
  type: TYPE_NORMAL
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  prefs: []
  type: TYPE_NORMAL
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding NumPy’s versioning and API/ABI stability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy uses a standard, [**PEP 440**](https://peps.python.org/pep-0440/) compliant,
    versioning scheme: `major.minor.bugfix`. A *major* release is highly unusual (NumPy
    is still at version `1.xx`) and if it happens it will likely indicate an ABI break.
    *Minor* versions are released regularly, typically every 6 months. Minor versions
    contain new features, deprecations, and removals of previously deprecated code.
    *Bugfix* releases are made even more frequently; they do not contain any new features
    or deprecations.'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know that NumPy, like Python itself and most other well known
    scientific Python projects, does **not** use semantic versioning. Instead, backwards
    incompatible API changes require deprecation warnings for at least two releases.
    For more details, see [NEP 23 — Backwards compatibility and deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)").
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy has both a Python API and a C API. The C API can be used directly or
    via Cython, f2py, or other such tools. If your package uses the C API, then ABI
    (application binary interface) stability of NumPy is important. NumPy’s ABI is
    forward but not backward compatible. This means: binaries compiled against a given
    version of NumPy will still run correctly with newer NumPy versions, but not with
    older versions.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing against the NumPy main branch or pre-releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For large, actively maintained packages that depend on NumPy, we recommend
    testing against the development version of NumPy in CI. To make this easy, nightly
    builds are provided as wheels at [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/).
    Example install command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This helps detect regressions in NumPy that need fixing before the next NumPy
    release. Furthermore, we recommend to raise errors on warnings in CI for this
    job, either all warnings or otherwise at least `DeprecationWarning` and `FutureWarning`.
    This gives you an early warning about changes in NumPy to adapt your code.
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding a dependency on NumPy'
  prefs: []
  type: TYPE_NORMAL
- en: Build-time dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  prefs: []
  type: TYPE_NORMAL
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  prefs: []
  type: TYPE_NORMAL
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior can be customized for example by adding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  prefs: []
  type: TYPE_NORMAL
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  prefs: []
  type: TYPE_NORMAL
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  prefs: []
  type: TYPE_NORMAL
- en: 'as of now, it is usually as easy as including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime dependency & version ranges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  prefs: []
  type: TYPE_NORMAL
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  prefs: []
  type: TYPE_NORMAL
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  prefs: []
  type: TYPE_NORMAL
- en: Build-time dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  prefs: []
  type: TYPE_NORMAL
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  prefs: []
  type: TYPE_NORMAL
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behavior can be customized for example by adding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  prefs: []
  type: TYPE_NORMAL
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  prefs: []
  type: TYPE_NORMAL
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  prefs: []
  type: TYPE_NORMAL
- en: 'as of now, it is usually as easy as including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime dependency & version ranges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  prefs: []
  type: TYPE_NORMAL
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  prefs: []
  type: TYPE_NORMAL
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  prefs: []
  type: TYPE_NORMAL
