- en: NumPy 1.21.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.21.0 发行说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.21.0-notes.html](https://numpy.org/doc/1.26/release/1.21.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.21.0-notes.html](https://numpy.org/doc/1.26/release/1.21.0-notes.html)
- en: The NumPy 1.21.0 release highlights are
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.21.0 版本的亮点是
- en: continued SIMD work covering more functions and platforms,
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续的 SIMD 工作，涵盖更多函数和平台，
- en: initial work on the new dtype infrastructure and casting,
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 dtype 基础架构和类型转换的初步工作，
- en: universal2 wheels for Python 3.8 and Python 3.9 on Mac,
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.8 和 Python 3.9 的通用 wheels 在 Mac 上可用，
- en: improved documentation,
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了文档，
- en: improved annotations,
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了注释，
- en: new `PCG64DXSM` bitgenerator for random numbers.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的`PCG64DXSM`位生成器用于随机数。
- en: In addition there are the usual large number of bug fixes and other improvements.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 另外还有大量的错误修复和其他改进。
- en: The Python versions supported for this release are 3.7-3.9\. Official support
    for Python 3.10 will be added when it is released.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本支持的 Python 版本为 3.7-3.9。Python 3.10 发布后将添加官方支持。
- en: Warning
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: There are unresolved problems compiling NumPy 1.20.0 with gcc-11.1.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 gcc-11.1 编译 NumPy 1.20.0 时存在未解决的问题。
- en: Optimization level *-O3* results in many incorrect warnings when running the
    tests.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化级别 *-O3* 在运行测试时会产生许多不正确的警告。
- en: On some hardware NumPY will hang in an infinite loop.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些硬件上，NumPY 会陷入一个无限循环。
- en: New functions
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加[`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模并行的上下文中使用`PCG64` `BitGenerator` 已显示出统计弱点，这在 numpy 1.17 版本发布时并不明显。大多数用户永远不会观察到这种弱点，并且可以继续安全地使用`PCG64`。
    我们引入了一个新的`PCG64DXSM` `BitGenerator`，它将最终成为未来版本中`default_rng`使用的新默认`BitGenerator`实现。`PCG64DXSM`解决了统计上的弱点，同时保留了`PCG64`的性能和特征。
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息请参见 [升级 PCG64 到 PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)。
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
- en: Expired deprecations
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过时的弃用项
- en: The `shape` argument [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape`参数 [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") 不能再作为`dims`关键字参数传递。（在 NumPy 1.16 版本中已弃用。）'
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_GenericFunction`已被禁用。 它在 NumPy 1.19 版本中已被弃用。用户应该直接使用 Python API 调用
    ufunc。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_SetUsesArraysAsData`已被禁用。它在 NumPy 1.19 版本中已被弃用。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`PolyBase`已被移除（在 numpy 1.9.0 中弃用）。请改用抽象的`ABCPolyBase`类。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
- en: The unused `PolyError` and `PolyDomainError` exceptions are removed.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已删除未使用的`PolyError`和`PolyDomainError`异常。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
- en: Deprecations
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: The `.dtype` attribute must return a `dtype`
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.dtype`属性必须返回一个`dtype`'
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给`np.dtype`或作为`dtype=obj`参数的对象的`.dtype`属性不是dtype，则现在将发出`DeprecationWarning`。
    NumPy将停止尝试递归地强制转换`.dtype`的结果。
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.convolve`和`numpy.correlate`的不完全匹配已弃用'
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")和[`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate")在函数中找到不区分大小写和/或不完全匹配的`mode`参数时现在会发出警告。 对于`mode`参数，传递完整的`"same"`、`"valid"`、`"full"`字符串，而不是`"s"`、`"v"`、`"f"`。'
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
- en: '`np.typeDict` has been formally deprecated'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.typeDict`现已正式弃用'
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.typeDict`是`np.sctypeDict`的已弃用别名，已经弃用了14年以上了（[6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)）。获取`np.typeDict`时将会发出弃用警告。'
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
- en: Exceptions will be raised during array-like creation
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建类似数组时将引发异常
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象在访问特殊属性`__array__`或`__array_interface__`时引发异常时，通常会忽略此异常。 当异常不是AttributeError时，现在会发出警告。
    要消除警告，必须调整引发异常的类型以引发`AttributeError`。
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
- en: Four `ndarray.ctypes` methods have been deprecated
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 四个`ndarray.ctypes`方法已弃用
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes")对象的四种方法已被弃用，因为它们是各自属性的（未记录的）实现工件。'
- en: 'The methods in question are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关的方法包括：
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_data`（使用`_ctypes.data`代替）'
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_shape`（使用`_ctypes.shape`代替）'
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_strides`（使用`_ctypes.strides`代替）'
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_as_parameter`（使用`_ctypes._as_parameter_`代替）'
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
- en: Expired deprecations
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用
- en: The `shape` argument [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape`参数不能再作为`dims`关键字参数传递给[`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index")。 （在NumPy 1.16中已弃用。）'
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_GenericFunction`已被禁用。它在NumPy 1.19中已被弃用。用户应该直接使用Python API调用ufunc。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_SetUsesArraysAsData`已被禁用。它在NumPy 1.19中已被弃用。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除已弃用的`PolyBase`和未使用的`PolyError`和`PolyDomainError`
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `PolyBase` 已被移除（自 numpy 1.9.0 版本起废弃）。请改用抽象类 `ABCPolyBase`。
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外, 从 [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") 中删除了未使用的 `PolyError` 和 `PolyDomainError` 异常。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
- en: Compatibility notes
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Error type changes in universal functions
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用函数中的错误类型变化
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，通用函数现在可能会对非法输入抛出不同的错误。主要的改变是用更合适的 `TypeError` 替代了 `RuntimeError`。当在同一调用中存在多个错误时，NumPy现在可能会抛出不同的错误。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` argument validation'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__` 参数验证'
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 现在会在调用 `__array_ufunc__` 之前部分验证参数。以前，当已知会进行派发时，可以传递无效的参数（例如不存在的关键字参数）。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` and additional positional arguments'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__` 和其他位置参数'
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，所有位置传递的参数都会检查 `__array_ufunc__` 的支持。在 `reduce`、`accumulate` 和 `reduceat`
    的情况下，所有参数都可以通过位置传递。这意味着当它们通过位置传递时，它们以前可能已经被要求通过 `__array_ufunc__` 处理该通用函数调用。由于这取决于参数是通过位置还是通过关键字传递的方式，现在NumPy只会对输入和输出数组进行派发。例如，NumPy永远不会对降维中的
    `where` 数组进行派发，如 `np.add.reduce`。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: Validate input values in `Generator.uniform`
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证 `Generator.uniform` 的输入值
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 `np.random.Generator.uniform` 中的 `high - low >= 0`，如果 `low > high` 则引发 `ValueError`。先前，无序输入是允许的，并且会静默交换，所以如果
    `low > high`，生成的值是 `high + (low - high) * random()`。
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
- en: '`/usr/include` removed from default include paths'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认包含路径中删除 `/usr/include`
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy.distutils`构建包时，默认的包含路径不再包含`/usr/include`。这条路径通常由编译器添加，硬编码可能会引起问题。如果这引起了问题，请提一个
    issue。在 PR 18658 中有一个解决方法。
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
- en: Changes to comparisons with `dtype=...`
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较操作符 `dtype=...` 的变化
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '当比较通用函数（如 `equal`、`less` 等）使用 `dtype=`（或 `signature`）参数时，将来这将表示所需的输出 dtype。这意味着:'
- en: np.equal(2, 3, dtype=object)
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(2, 3, dtype=object)
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '将来，如下情况下将会发出 `FutureWarning` 并返回一个 `object` 数组:'
- en: np.equal(None, None, dtype=object)
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(None, None, dtype=object)
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `np.array(None)` 已经是一个对象数组，所以将返回一个 `FutureWarning`。(对于其他一些 dtype 也是如此。)
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比较通常只返回布尔数组，因此在将来提供任何其他dtype将始终引发错误，并现在会给出 `DeprecationWarning`。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Changes to `dtype` and `signature` arguments in ufuncs
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在ufuncs中对 `dtype` 和 `signature` 参数的更改
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数参数 `dtype` 和 `signature` 也适用于 `np.add.reduce` 等减少函数（它是 `np.sum` 的实现）在提供的
    `dtype` 不是“基本”dtype时现在会发出警告。
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy几乎总是忽略这些输入的元数据、字节顺序或时间单位。现在，NumPy将始终忽略它并在字节顺序或时间单位改变时引发错误。以下是将产生错误的最重要的更改示例。在某些情况下，先前存储的信息不被忽略，现在都会引发错误：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 `np.sum` 这样内部使用它们的函数也是如此。这个改变是为了在NumPy内部实现一致的处理。
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了这些问题，在大多数情况下，例如通过 `dtype=np.timedelta64` 传递，这清楚地表示了一个没有任何单位或字节顺序定义的一般
    `timedelta64`。如果需要精确指定输出dtype，则可以通过转换输入或使用*out=*来提供输出数组来执行。
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，NumPy可能会选择允许在此处提供精确的输出 `dtype`，这将在之前加上一个 `FutureWarning`。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ufunc `signature=...` 和 `dtype=` 的泛化和 `casting`
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ufunc(1.0, 1.0, signature=...)` 或 `np.ufunc(1.0, 1.0, dtype=...)` 的行为现在在1.21与1.20中可能会产生不同的循环，因为推广的变化。当先前使用
    `signature` 时，对输入的强制转换检查被放宽了，这可能导致不安全地对输入进行降级，特别是如果与 `casting="unsafe"` 结合使用。'
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在强制转换是安全的。如果只提供了部分签名，例如使用 `signature=("float64", None, None)`，这可能导致找不到循环（错误）。在这种情况下，有必要提供完整的签名以强制转换输入。如果使用
    `dtype="float64"` 或者只设置输出（例如 `signature=(None, None, "float64")`），则不变。我们预计很少有用户会受到此更改的影响。
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步地，`dtype="float64"`的含义已经略有修改，现在严格地只强制正确的输出（而不是输入）DTypes。这意味着现在它总是等价于：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: （如果ufunc有两个输入和一个输出）。由于这可能导致在某些情况下找不到循环，因此NumPy通常也会搜索循环：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个搜索失败。在将来，可以定制此行为以实现更复杂的ufunc的预期结果。（对于某些通用函数，如 `np.ldexp` 输入可以有不同的DTypes。）
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
- en: Distutils forces strict floating point model on clang
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils在clang上强制使用严格的浮点模型
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用clang编译时，NumPy distutils现在将始终添加`-ffp-exception-behavior=strict`编译器标志。 Clang默认为非严格版本，这允许编译器生成不正确设置浮点警告/错误的代码。
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-19049](https://github.com/numpy/numpy/pull/19049)）
- en: C API changes
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API变更
- en: Use of `ufunc->type_resolver` and “type tuple”
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`ufunc->type_resolver`和“类型元组”
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在在调用类型解析器函数之前对“类型元组”参数进行规范化。 请注意，使用此类型解析器的行为是遗留行为，并且NumPy在可能的情况下不会执行此操作。
    如果执行`ufunc->type_resolver`或`PyUFunc_DefaultTypeResolver`，则强烈不推荐，现在会规范化类型元组。 请注意，这不会影响提供类型解析器，预计在大多数情况下仍将继续工作。
    如果您有意外使用类型解析器的情况，请通知NumPy开发人员，以便找到解决方案。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: New Features
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个mypy插件，用于处理特定平台的`numpy.number`精度
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提供了一个[mypy](http://mypy-lang.org/)插件，用于自动分配某些[`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number")子类（包括[`int_`](../reference/arrays.scalars.html#numpy.int_ "numpy.int_")、[`intp`](../reference/arrays.scalars.html#numpy.intp
    "numpy.intp")和[`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong")）的（平台相关）精度。
    查看关于[标量类型](../reference/arrays.scalars.html#arrays-scalars-built-in)的文档，全面了解受影响的类。
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然插件的使用是完全可选的，但如果没有插件，则上述类的精度将被推断为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.11中)")。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到Mypy的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-17843](https://github.com/numpy/numpy/pull/17843)）
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让mypy插件管理扩展精度的`numpy.number`子类
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy](http://mypy-lang.org/)插件，在[ numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843)中引入，已扩展：插件现已删除不适用于相关平台的平台特定扩展精度类型的注释。
    例如，当不可用时，将删除[`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")。'
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 没有插件*all*扩展精度类型将在Mypy看来，在所有平台上都可用。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到Mypy的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-18322](https://github.com/numpy/numpy/pull/18322)）
- en: New `min_digits` argument for printing float values
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印浮点值的新`min_digits`参数。
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于dragon4浮点打印函数[`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")和[`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")，添加了一个新的`min_digits`参数。这个关键字确保在unique=True模式下打印时，至少会打印给定数量的数字，即使额外的数字对于唯一指定值是不必要的。它是precision参数的对应物，后者设置要打印的最大数字数量。在fixed
    precision模式下unique=False，它没有效果，precision参数固定数字数量。
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
- en: f2py now recognizes Fortran abstract interface blocks
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py现在可以识别Fortran抽象接口块了。
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py")现在可以解析抽象接口块了。'
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
- en: BLAS and LAPACK configuration via environment variables
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过环境变量配置BLAS和LAPACK。
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`NPY_BLAS_LIBS`和`NPY_LAPACK_LIBS`环境变量来绕过已安装的BLAS和LAPACK库的自动检测。相反，将直接使用这些环境变量中的链接标志，并假定语言为F77。这在已知自动构建中确切已知已安装的BLAS和LAPACK时特别有用。一个用例是通过存根库链接在运行时替换实际实现。
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了`NPY_CBLAS_LIBS`（除了`NPY_BLAS_LIBS`之外还是可选的），则会使用它，通过定义`HAVE_CBLAS`并将环境变量内容附加到链接标志中。
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
- en: A runtime-subcriptable alias has been added for `ndarray`
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray`现在有一个可在运行时订阅的别名。'
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了`numpy.typing.NDArray`，它是`np.ndarray[Any, np.dtype[~Scalar]]`的运行时订阅别名。新的类型别名可用于注释具有给定dtype和未指定形状的数组。¹
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ¹截至1.21版本，NumPy不支持数组形状的注释，但预计将来会有所改变（参见[**PEP 646**](https://peps.python.org/pep-0646/)）。
- en: Examples
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
- en: Improvements
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Arbitrary `period` option for `numpy.unwrap`
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.unwrap`的任意`period`选项。'
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 解包相位的间隔大小不再限制为`2 * pi`。这对于解包度数特别有用，但也可用于其他间隔。
- en: '[PRE6]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
- en: '`np.unique` now returns single `NaN`'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique`现在返回单个`NaN`'
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当`np.unique`在具有多个`NaN`条目的数组上操作时，返回的数组包含每个在原始数组中为`NaN`的条目的一个`NaN`。现在改进为返回数组仅包含最后一个元素为`NaN`的`NaN`。
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复数数组，所有 `NaN` 值都被视为等价（无论 `NaN` 是位于实部还是虚部）。作为返回数组的代表，被选择为字典顺序最小的值 - 请参考 `np.sort`
    了解复数数组的字典顺序是如何定义的。
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Generator.rayleigh` 和 `Generator.geometric` 的性能得到了改进'
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator` 中 Rayleigh 和几何随机变量生成的性能得到了改进。这两者都是指数随机变量的变换，慢速基于对数的反向 cdf 变换已被基于
    Ziggurat 的指数变量生成器所取代。'
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改会在产生这两个分布的变量时打破生成的变量流。
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
- en: Placeholder annotations have been improved
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替代品注释已得到改进
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 所有替代品注释，以前标记为 `typing.Any`，已得到改进。在适当的情况下，它们已被明确的函数定义、类或其他杂项对象替换。
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
- en: Performance improvements
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进
- en: Improved performance in integer division of NumPy arrays
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了 NumPy 数组的整数除法性能
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的整数除法现在在除数为常数时使用 [libdivide](https://libdivide.com/)。通过使用 libdivide
    和其他轻微优化，速度大大提升。`//` 运算符和 `np.floor_divide` 利用了这些新更改。
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
- en: Improve performance of `np.save` and `np.load` for small arrays
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高了 `np.save` 和 `np.load` 对于小数组的性能
- en: '`np.save` is now a lot faster for small arrays.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小数组，`np.save` 现在速度更快。
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小数组，`np.load` 速度也更快，但只在序列化版本 >= `(3, 0)` 时。
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者是通过删除仅适用于 Python 2 的检查来完成的，同时仍然与可能由 Python 2 创建的数组保持兼容性。
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
- en: Changes
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") 输出类现在与输入类匹配'
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入到 [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") 的 [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 子类被使用时，它们将被传递到这些函数中。输出现在也将是相同的子类。
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
- en: Enable Accelerate Framework
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用 Accelerate 框架
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着macOS 11.3版本的发布，当使用加速框架的BLAS和LAPACK实现时，numpy遇到的几种不同的问题应该得到解决。这个改变将在macOS上启用加速框架作为一个选项。如果发现其他问题，请使用开发者反馈助手工具([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/))提出
    bug 报告。我们打算及时解决遇到的问题，并计划继续支持和更新我们的BLAS和LAPACK库。
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
- en: New functions
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `PCG64` `BitGenerator` 在大规模并行环境中已经显示出统计上的问题，这些问题在numpy 1.17版本首次发布时并不明显。大多数用户永远也不会观察到这种弱点，可以继续安全地使用
    `PCG64`。我们引入了一个新的 `PCG64DXSM` `BitGenerator`，它最终将成为未来版本中 `default_rng` 使用的新默认
    `BitGenerator` 实现。`PCG64DXSM` 解决了统计上的问题，同时保留了 `PCG64` 的性能和功能。
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见 [将PCG64升级为PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    。
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `PCG64` `BitGenerator` 在大规模并行环境中已经显示出统计上的问题，这些问题在numpy 1.17版本首次发布时并不明显。大多数用户永远也不会观察到这种弱点，可以继续安全地使用
    `PCG64`。我们引入了一个新的 `PCG64DXSM` `BitGenerator`，它最终将成为未来版本中 `default_rng` 使用的新默认
    `BitGenerator` 实现。`PCG64DXSM` 解决了统计上的问题，同时保留了 `PCG64` 的性能和功能。
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见 [将PCG64升级为PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    。
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
- en: Expired deprecations
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用标记
- en: The `shape` argument [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape` 参数 [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") 不能再被作为 `dims` 关键字参数传递。（在NumPy 1.16版本中被弃用。）'
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_GenericFunction`已被禁用。它在NumPy 1.19中已被弃用。用户应该直接使用Python API调用ufunc。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （[gh-18697](https://github.com/numpy/numpy/pull/18697)）
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`PyUFunc_SetUsesArraysAsData`已被禁用。在NumPy 1.19中已被弃用。
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （[gh-18697](https://github.com/numpy/numpy/pull/18697)）
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类`PolyBase`已被移除（在numpy 1.9.0中已被弃用）。请改用抽象类`ABCPolyBase`。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （[gh-18963](https://github.com/numpy/numpy/pull/18963)）
- en: The unused `PolyError` and `PolyDomainError` exceptions are removed.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未使用的`PolyError`和`PolyDomainError`异常被移除。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （[gh-18963](https://github.com/numpy/numpy/pull/18963)）
- en: Deprecations
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: The `.dtype` attribute must return a `dtype`
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.dtype`属性必须返回一个`dtype`'
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给`np.dtype`或作为`dtype=obj`参数的对象的`.dtype`属性不是dtype，则会发出`DeprecationWarning`。NumPy将停止尝试递归强制转换`.dtype`的结果。
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-13578](https://github.com/numpy/numpy/pull/13578)）
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.convolve`和`numpy.correlate`的不精确匹配已被弃用'
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数中找到`mode`参数不区分大小写和/或存在不精确匹配时，`convolve`和`correlate`现在会发出警告。对于`mode`参数，传递完整的`"same"`，`"valid"`，`"full"`字符串，而不是`"s"`，`"v"`，`"f"`。
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-17492](https://github.com/numpy/numpy/pull/17492)）
- en: '`np.typeDict` has been formally deprecated'
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.typeDict`已被正式弃用'
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.typeDict`是`np.sctypeDict`的弃用别名，并且已经是如此超过14年了（[6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)）。现在获取`np.typeDict`时将会发出弃用警告。'
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-17586](https://github.com/numpy/numpy/pull/17586)）
- en: Exceptions will be raised during array-like creation
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在类数组创建期间将会引发异常
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象在访问特殊属性`__array__`或`__array_interface__`时引发异常时，通常会忽略该异常。现在，当异常不是AttributeError时会发出警告。要消除警告，引发异常的类型必须调整以引发`AttributeError`。
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-19001](https://github.com/numpy/numpy/pull/19001)）
- en: Four `ndarray.ctypes` methods have been deprecated
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 四个`ndarray.ctypes`方法已经被弃用
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 四个[`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes")对象的方法已被弃用，因为它们是（未记录的）各自属性的实现产物。
- en: 'The methods in question are:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的方法包括：
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_data`（请使用`_ctypes.data`代替）'
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_shape`（请使用`_ctypes.shape`代替）'
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_strides`（请使用`_ctypes.strides`代替）'
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ctypes.get_as_parameter`（请使用`_ctypes._as_parameter_`代替）'
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-19031](https://github.com/numpy/numpy/pull/19031)）
- en: The `.dtype` attribute must return a `dtype`
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`.dtype`属性必须返回一个`dtype`'
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '`np.typeDict` has been formally deprecated'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Four `ndarray.ctypes` methods have been deprecated
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods in question are:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shape` argument [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 类`PolyBase`已被移除（在numpy 1.9.0中已弃用）。请改用抽象的`ABCPolyBase`类。
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从 [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")中移除了未使用的`PolyError`和`PolyDomainError`异常。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除已弃用的`PolyBase`和未使用的`PolyError`和`PolyDomainError`
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 类`PolyBase`已被移除（在numpy 1.9.0中已弃用）。请改用抽象的`ABCPolyBase`类。
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从[`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")中移除了未使用的`PolyError`和`PolyDomainError`异常。
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
- en: Compatibility notes
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性注释
- en: Error type changes in universal functions
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用函数中的错误类型更改
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 通用功能现在在某些情况下可能对无效输入引发不同的错误。主要变化在于`RuntimeError`被更合适的`TypeError`所取代。当同一调用中存在多个错误时，NumPy现在可能会引发不同的错误。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` argument validation'
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__`参数验证'
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在将在调用`__array_ufunc__`之前部分验证参数。以前，当已知将进行分发时，可能会传递无效参数（例如不存在的关键字参数）。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` and additional positional arguments'
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__`和额外的位置参数'
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，所有位置传递的参数都会检查是否支持`__array_ufunc__`。在`reduce`，`accumulate`和`reduceat`的情况下，所有参数都可以按位置传递。这意味着当它们按位置传递时，它们以前可能已被要求通过`__array_ufunc__`处理ufunc调用。由于这取决于参数的传递方式（按位置还是关键字传递），NumPy现在只会在输入和输出数组上分发。例如，NumPy永远不会在类似`np.add.reduce`的缩减中分发到`where`数组上。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: Validate input values in `Generator.uniform`
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证`Generator.uniform`中的输入值
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`np.random.Generator.uniform`中的`high - low >= 0`。若`low > high`，则引发`ValueError`。以前，接受并悄悄交换顺序的输入，因此，若`low
    > high`，生成的值为`high + (low - high) * random()`。
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
- en: '`/usr/include` removed from default include paths'
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从默认包含路径中删除`/usr/include`
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy.distutils`构建包时，默认包含路径不再包括`/usr/include`。此路径通常由编译器添加，硬编码它可能会出现问题。如果这造成问题，请提交一个问题。PR
    18658中有一个解决方法记录。
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
- en: Changes to comparisons with `dtype=...`
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与`dtype=...`比较的更改
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当将比较 ufuncs（`equal`、`less`等）的`dtype=`（或`signature`）参数用于时，这将在将来表示所需的输出 dtype。这意味着：
- en: np.equal(2, 3, dtype=object)
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(2, 3, dtype=object)
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 将在将来发出`FutureWarning`，表示它将返回一个 `object` 数组，这目前发生在：
- en: np.equal(None, None, dtype=object)
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(None, None, dtype=object)
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`np.array(None)`已经是一个 object 数组。（对于一些其他dtypes也是一样。）
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比较通常只返回布尔数组，在将来提供任何其他dtype将总是导致错误，并现在会发出 `DeprecationWarning`。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Changes to `dtype` and `signature` arguments in ufuncs
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufuncs 中 `dtype` 和 `signature` 参数的更改
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`dtype` 和 `signature` 这两个参数也适用于像 `np.add.reduce` 这样的缩减函数（它是 `np.sum` 的实现），现在当提供的`dtype`不是“基本”dtype时，会发出警告。'
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 几乎总是忽略这些输入的元数据、字节顺序或时间单位。现在 NumPy 将总是忽略并在字节顺序或时间单位发生变化时引发错误。以下是会导致错误的重要更改示例。在一些情况下，以前存储的信息不会被忽略，在所有这些情况下都会引发错误：
- en: '[PRE7]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像`np.sum`这样在内部使用这些的函数也是一样。这个变化是为了在 NumPy 中实现一致的处理。
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到了这些情况，在大多数情况下，例如传递`dtype=np.timedelta64`，它清晰地表示一个没有任何单位或字节顺序定义的通用`timedelta64`。如果需要精确指定输出
    dtype，可以通过转换输入或使用*out=* 来提供输出数组。
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 可能选择允许在未来在这里提供一个精确的输出`dtype`，这将先发出 `FutureWarning`。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ufunc `signature=...` 和 `dtype=` 的泛化和转换
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ufunc(1.0, 1.0, signature=...)` 或 `np.ufunc(1.0, 1.0, dtype=...)` 的行为现在在1.21中可能与1.20中不同，因为有关提升的改变。当先前使用`signature`时，输入的强制检查被放宽，这可能导致不安全的进行输入向下转换，尤其是当与`casting="unsafe"`结合使用时。'
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保证转换是安全的。如果只提供了部分签名，例如使用`signature=("float64", None, None)`，这可能导致找不到循环（错误）。在这种情况下，必须提供完整的签名来强制转换输入。如果使用`dtype="float64"`或者仅设置输出（例如`signature=(None,
    None, "float64")`）则不会改变。我们预计很少有用户会受到这种改变的影响。
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`dtype="float64"` 的含义已经稍有修改，现在严格地只强制执行正确的输出（而不是输入） DTypes。这意味着现在它总是等价于：
- en: '[PRE8]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: （如果ufunc有两个输入和一个输出）。由于这可能导致在某些情况下找不到循环，因此NumPy通常也会搜索循环：
- en: '[PRE9]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一次搜索失败。将来，这个行为可能可以定制化，以实现对更复杂的通用函数的期望结果。（对于一些通用函数，比如`np.ldexp`，输入可能具有不同的DTypes。）
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
- en: Distutils forces strict floating point model on clang
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils在clang上强制使用严格浮点模型
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用clang编译时，NumPy distutils现在将始终添加`-ffp-exception-behavior=strict`编译器标志。Clang的默认版本是非严格版本，允许编译器生成不正确设置浮点警告/错误的代码。
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
- en: Error type changes in universal functions
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用函数中错误类型的更改
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，通用函数可能会对无效输入引发不同的错误。主要的改变应该是将`RuntimeError`替换为更合适的`TypeError`。当在同一次调用中出现多个错误时，NumPy现在可能会引发不同的错误。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` argument validation'
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__` 参数验证'
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在会在调用`__array_ufunc__`之前部分验证参数。以前，当已知要进行分派时，可能传递无效的参数（例如不存在的关键字参数）。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: '`__array_ufunc__` and additional positional arguments'
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_ufunc__`和额外的位置参数'
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，所有按位置传递的参数都会检查`__array_ufunc__`的支持。对于`reduce`、`accumulate`和`reduceat`，所有参数都可以按位置传递。这意味着当它们被按位置传递时，它们以前可能被要求通过`__array_ufunc__`处理ufunc调用。由于这取决于参数是按位置还是按关键字传递的方式，NumPy现在只会对输入和输出数组进行分派。例如，在像`np.add.reduce`这样的缩减中，NumPy永远不会对`where`数组进行分派。
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
- en: Validate input values in `Generator.uniform`
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`Generator.uniform`中验证输入值
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在`np.random.Generator.uniform`中验证了`high - low >= 0`。如果`low > high`，则引发`ValueError`。以前，接受了无序输入并进行了悄悄交换，所以如果`low
    > high`，生成的值是`high + (low - high) * random()`。
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
- en: '`/usr/include` removed from default include paths'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认包含路径中移除了`/usr/include`
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy.distutils`构建包时，默认的包含路径不再包括`/usr/include`。这个路径通常由编译器添加，硬编码它可能会有问题。如果这导致问题，请提出问题。在PR
    18658中有一个解决方法。
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
- en: Changes to comparisons with `dtype=...`
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于`dtype=...`的比较进行了更改
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于比较ufuncs(`equal`, `less`,等)的`dtype=`(或`signature`)参数时，这将在未来表示期望的输出dtype。这意味着：
- en: np.equal(2, 3, dtype=object)
  id: totrans-309
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(2, 3, dtype=object)
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，将针对将要返回`object`数组的情况发出`FutureWarning`警告，目前已经发生在：
- en: np.equal(None, None, dtype=object)
  id: totrans-311
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: np.equal(None, None, dtype=object)
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`np.array(None)`已经是一个对象数组。（对于一些其他dtype也是如此）。
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比较通常只返回布尔数组，未来提供任何其他dtype都会导致错误，并现在会发出`DeprecationWarning`。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Changes to `dtype` and `signature` arguments in ufuncs
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ufuncs中`dtype`和`signature`参数的更改
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数参数`dtype`和`signature`，也适用于缩约，如`np.add.reduce`（它是`np.sum`的实现），当提供的`dtype`不是“基本”dtype时，现在会发出警告。
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎总是忽略这些输入的元数据、字节顺序或时间单位。现在NumPy将始终忽略它，并在字节顺序或时间单位发生更改时引发错误。以下是可能导致错误的最重要的变化示例。在某些情况下，之前存储的信息未被忽略，在所有这些信息中现在都会引发错误：
- en: '[PRE10]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于像`np.sum`这样在内部使用这些的函数。这种变化是为了在NumPy中实现一致的处理而必需的。
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到这种情况，在大多数情况下，例如传递 `dtype=np.timedelta64`，清楚指明一个没有定义单元或字节顺序的通用`timedelta64`。如果需要精确指定输出dtype，可以通过转换输入或使用*out=*提供输出数组来做到。
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 未来NumPy可能会选择在此提供确切的输出`dtype`，这将先于`FutureWarning`警告。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用函数`signature=...`和`dtype=`的泛化以及`casting`
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.21版本中，与1.20版本相比，对于`np.ufunc(1.0, 1.0, signature=...)`或`np.ufunc(1.0, 1.0,
    dtype=...)`可能产生不同的循环，因为提升发生了改变。之前使用`signature`时，输入的强制转换检查会得到放松，这可能导致安全地向下转换输入，特别是与`casting="unsafe"`一起使用时。
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在强制转换是安全的。如果仅部分提供了签名，例如使用`signature=（"float64"，None，None）`，这可能导致找不到循环（错误）。在这种情况下，有必要提供完整的签名来强制转换输入。如果使用了`dtype="float64"`或仅设置了输出（例如`signature=（None，None，"float64"）`），这是不变的。我们预计很少有用户会受到此更改的影响。
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步，`dtype="float64"`的含义已经稍微修改，现在严格执行正确的输出DTypes。这意味着它现在总是等效于：
- en: '[PRE11]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '(如果 ufunc 有两个输入和一个输出)。由于这在某些情况下可能导致找不到循环，NumPy 通常也会搜索循环:'
- en: '[PRE12]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一次搜索失败。将来，可能会定制此行为以获得更复杂的 ufunc 的预期结果。(对于某些通用函数，例如 `np.ldexp`，输入可以具有不同的数据类型。)
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
- en: Distutils forces strict floating point model on clang
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils 强制在 clang 上使用严格的浮点模型
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 clang 进行编译时，NumPy distutils 现在总会添加`-ffp-exception-behavior=strict`编译器标志。Clang
    默认使用非严格版本，允许编译器生成未正确设置浮点警告/错误的代码。
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19049](https://github.com/numpy/numpy/pull/19049)
- en: C API changes
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API 更改
- en: Use of `ufunc->type_resolver` and “type tuple”
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `ufunc->type_resolver` 和“类型元组”
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 现在在调用类型解析器函数之前将“类型元组”参数标准化。请注意，在使用这种类型解析器的情况是遗留行为，如果可能，NumPy 将不这样做。强烈不建议调用`ufunc->type_resolver`或`PyUFunc_DefaultTypeResolver`，如果这样做将强制执行标准化的类型元组。请注意，这不影响提供类型解析器，它预期在大多数情况下仍能工作。如果您对调用类型解析器有意外用例，请通知
    NumPy 开发人员，以便找到解决方案。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: Use of `ufunc->type_resolver` and “type tuple”
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `ufunc->type_resolver` 和“类型元组”
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 现在在调用类型解析器函数之前将“类型元组”参数标准化。请注意，在使用这种类型解析器的情况是遗留行为，如果可能，NumPy 将不这样做。强烈不建议调用`ufunc->type_resolver`或`PyUFunc_DefaultTypeResolver`，如果这样做将强制执行标准化的类型元组。请注意，这不影响提供类型解析器，它预期在大多数情况下仍能工作。如果您对调用类型解析器有意外用例，请通知
    NumPy 开发人员，以便找到解决方案。
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
- en: New Features
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个用于处理平台特定 `numpy.number` 精度的 mypy 插件
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用 [mypy](http://mypy-lang.org/) 插件自动分配某些[`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number")子类的（平台相关）精度，包括[`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_")、[`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")和[`longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong")等。请参阅[标量类型](../reference/arrays.scalars.html#arrays-scalars-built-in)部分的文档，以全面了解受影响的类。
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管使用插件是完全可选的，但如果不使用它，则上述类的精度将被推断为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.11 中)")。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到他们的 mypy [配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)
    中：
- en: '[PRE13]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让 mypy 插件来管理扩展精度的 `numpy.number` 子类
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843) 中引入的 [mypy](http://mypy-lang.org/)
    插件已经扩展：该插件现在会删除特定平台上不可用的特定扩展精度类型的注释。例如，在不可用时，它将删除 [`float128`](../reference/arrays.scalars.html#numpy.float128
    "numpy.float128")。
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 没有插件的话，就会在 mypy 看来，所有的扩展精度类型在所有平台上都是可用的。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到他们的 mypy [配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)
    中：
- en: '[PRE14]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
- en: New `min_digits` argument for printing float values
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印浮点数值的新 `min_digits` 参数
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dragon4`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") 和 [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") 浮点打印函数中添加了一个新的 `min_digits` 参数。该关键字参数保证在 unique=True
    模式下打印时，至少会打印给定数量的数字，即使这些额外的数字在唯一指定值时是不必要的。它是设置要打印的最大数字数量的精度参数的对应物。在 fixed precision
    模式下，当 unique=False 时，它没有效果，精度参数固定数字的数量。'
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
- en: f2py now recognizes Fortran abstract interface blocks
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py 现在能够识别 Fortran 的抽象接口块了
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") 现在可以解析抽象接口块。'
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
- en: BLAS and LAPACK configuration via environment variables
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过环境变量配置 BLAS 和 LAPACK。
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `NPY_BLAS_LIBS` 和 `NPY_LAPACK_LIBS` 环境变量可以绕过已安装的 BLAS 和 LAPACK 库的自动检测。而是直接使用这些环境变量中的链接标志，并且假定语言为
    F77。这在已知精确安装了哪些 BLAS 和 LAPACK 的自动化构建中特别有用。一个用例是通过存根库链接在运行时替换实际实现。
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了 `NPY_CBLAS_LIBS`（作为 `NPY_BLAS_LIBS` 的可选项），这也将被使用，通过定义 `HAVE_CBLAS` 并将环境变量内容附加到链接标志中。
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-18737](https://github.com/numpy/numpy/pull/18737)）
- en: A runtime-subcriptable alias has been added for `ndarray`
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了对`ndarray`的运行时可订阅别名
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 已经添加了`numpy.typing.NDArray`，它是`np.ndarray[Any, np.dtype[~Scalar]]`的运行时可订阅别名。这个新类型别名可以用于注释具有给定dtype和未指定形状的数组。
    ¹
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: ¹截至1.21版本，NumPy不支持数组形状的注释，但预计将来会有所改变（参见[**PEP 646**](https://peps.python.org/pep-0646/)）。
- en: Examples
  id: totrans-368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-18935](https://github.com/numpy/numpy/pull/18935)）
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了处理平台特定的`numpy.number`精度的mypy插件
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提供了一个[mypy](http://mypy-lang.org/)插件，用于自动分配某些[`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number")子类的（平台相关的）精度，包括[`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_")、[`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")和[`longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong")等类型。请参阅[标量类型](../reference/arrays.scalars.html#arrays-scalars-built-in)文档，了解受影响的类的全面概述。
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然使用插件完全是可选的，但如果不使用插件，上述类的精度将被推断为[`Any`](https://docs.python.org/zh-cn/3/library/typing.html#typing.Any
    "(in Python v3.11)")。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到mypy的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE16]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-17843](https://github.com/numpy/numpy/pull/17843)）
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让mypy插件管理扩展精度`numpy.number`子类
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843) 中引入的[mypy](http://mypy-lang.org/)插件已经扩展：该插件现在会删除平台特定的扩展精度类型的注释，这些类型对于相关平台是不可用的。例如，当不可用时，它会删除[`float128`](../reference/arrays.scalars.html#numpy.float128
    "numpy.float128")。
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这个插件，mypy认为*所有*扩展精度类型在所有平台上都可用。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到mypy的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE17]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: （[gh-18322](https://github.com/numpy/numpy/pull/18322)）
- en: New `min_digits` argument for printing float values
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为打印浮点值添加了新的`min_digits`参数
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragon4` 浮点打印函数 [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") 和 [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") 添加了一个新的 `min_digits` 参数。这个参数在 unique=True 模式下打印时保证至少打印给定数量的数字，即使额外的数字对于唯一指定值是不必要的。它是将最大打印位数设置为精度参数的对应项。在
    unique=False 的固定精度模式下，它没有效果，精度参数固定位数。'
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-18629](https://github.com/numpy/numpy/pull/18629)\)
- en: f2py now recognizes Fortran abstract interface blocks
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`f2py` 现在可以识别 Fortran 抽象接口块'
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") 现在可以解析抽象接口块。'
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-18695](https://github.com/numpy/numpy/pull/18695)\)
- en: BLAS and LAPACK configuration via environment variables
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过环境变量配置 BLAS 和 LAPACK
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `NPY_BLAS_LIBS` 和 `NPY_LAPACK_LIBS` 环境变量，可以绕过对已安装的 BLAS 和 LAPACK 库的自动检测。相反，这些环境变量中的链接标志将直接使用，并且语言被假定为
    F77。这在已明确知道已安装的 BLAS 和 LAPACK 的自动化构建中特别有用。一个使用案例是通过 stub 库链接在运行时替换实际实现。
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了 `NPY_CBLAS_LIBS`（除了 `NPY_BLAS_LIBS`），则也将使用它，通过定义 `HAVE_CBLAS` 并将环境变量内容追加到链接标志中。
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-18737](https://github.com/numpy/numpy/pull/18737)\)
- en: A runtime-subcriptable alias has been added for `ndarray`
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个运行时子脚本别名用于 `ndarray`
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.typing.NDArray` 已添加，是 `np.ndarray[Any, np.dtype[~Scalar]]` 的运行时子脚本别名。可以使用这个新的类型别名为具有给定数据类型和未指定形状的数组进行注释。
    ¹'
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 目前，NumPy 不支持对数组形状进行标注（截至 1.21 版本），但预计将来会改变（参见[**PEP 646**](https://peps.python.org/pep-0646/)）。
- en: Examples
  id: totrans-396
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE18]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-18935](https://github.com/numpy/numpy/pull/18935)\)
- en: Examples
  id: totrans-399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE19]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-18935](https://github.com/numpy/numpy/pull/18935)\)
- en: Improvements
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Arbitrary `period` option for `numpy.unwrap`
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.unwrap` 的任意 `period` 选项'
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 解包相位的区间大小不再限制为 `2 * pi`。这对于解包度数特别有用，但也可以用于其他区间。
- en: '[PRE20]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: \([gh-16987](https://github.com/numpy/numpy/pull/16987)\)
- en: '`np.unique` now returns single `NaN`'
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique` 现在只返回单个 `NaN`'
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `np.unique` 在具有多个 `NaN` 条目的数组上操作时，其返回值会为原始数组中每个 `NaN` 条目包含一个 `NaN`。现在已经改进，返回的数组仅包含最后一个
    `NaN`。
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复数数组，所有的 `NaN` 值都被视为等价（无论 `NaN` 是否在实部或虚部）。作为返回数组的代表，按字典顺序选择最小的一个 - 有关复数数组的字典顺序如何定义，请参见
    `np.sort`。
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Generator.rayleigh` 和 `Generator.geometric` 的性能提高了'
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator` 中的 Rayleigh 和几何随机变量生成的性能已经提高。这两者都是指数随机变量的转换，而慢速基于对数的逆 cdf 转换已被基于
    Ziggurat 的指数变量生成器替换。'
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化破坏了从这些分布中生成的变量流。
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
- en: Placeholder annotations have been improved
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 占位符注释已经改进
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前标注为 `typing.Any` 的占位符注释都已经改进。在适当的情况下，它们已被明确的函数定义、类或其他杂项对象替换。
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
- en: Arbitrary `period` option for `numpy.unwrap`
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.unwrap` 的任意 `period` 选项'
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 相位展开的间隔大小不再限制为 `2 * pi`。这对于展开度数特别有用，但也可用于其他间隔。
- en: '[PRE21]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
- en: '`np.unique` now returns single `NaN`'
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique` 现在返回单个 `NaN`'
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `np.unique` 在具有多个 `NaN` 条目的数组上操作时，其返回包括原始数组中每个 `NaN` 条目的 `NaN`。现在改进为返回的数组只包含一个
    `NaN`，作为最后一个元素。
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复数数组，所有的 `NaN` 值都被视为等价（无论 `NaN` 是否在实部或虚部）。作为返回数组的代表，按字典顺序选择最小的一个 - 有关复数数组的字典顺序如何定义，请参见
    `np.sort`。
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Generator.rayleigh` 和 `Generator.geometric` 的性能提高了'
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generator` 中的 Rayleigh 和几何随机变量生成的性能已经提高。这两者都是指数随机变量的转换，而慢速基于对数的逆 cdf 转换已被基于
    Ziggurat 的指数变量生成器替换。'
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化破坏了从这些分布中生成的变量流。
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
- en: Placeholder annotations have been improved
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 占位符注释已经改进
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 所有先前标注为 `typing.Any` 的占位符注释都已经改进。在适当的情况下，它们已被明确的函数定义、类或其他杂项对象替换。
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
- en: Performance improvements
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进
- en: Improved performance in integer division of NumPy arrays
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了NumPy数组的整数除法性能
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的整数除法现在在除数为常数时使用[libdivide](https://libdivide.com/)。使用libdivide和其他次要优化，速度大大提高。`//`操作符和`np.floor_divide`也使用了新的改动。
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
- en: Improve performance of `np.save` and `np.load` for small arrays
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了对小数组的`np.save`和`np.load`的性能
- en: '`np.save` is now a lot faster for small arrays.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 小数组的`np.save`现在也快了很多。
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.load`在对版本 >=`(3, 0)`进行序列化时也更快了。'
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是通过删除仅适用于Python 2的检查来完成的，同时仍与可能由Python 2创建的数组保持兼容。
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
- en: Improved performance in integer division of NumPy arrays
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了NumPy数组的整数除法性能
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的整数除法现在在除数为常数时使用[libdivide](https://libdivide.com/)。使用libdivide和其他次要优化，速度大大提高。`//`操作符和`np.floor_divide`也使用了新的改动。
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
- en: Improve performance of `np.save` and `np.load` for small arrays
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了小数组的`np.save`和`np.load`的性能
- en: '`np.save` is now a lot faster for small arrays.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 小数组的`np.save`现在也快了很多。
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.load`在对版本 >=`(3, 0)`进行序列化时也更快了。'
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是通过删除仅适用于Python 2的检查来完成的，同时仍与可能由Python 2创建的数组保持兼容。
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
- en: Changes
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") 的输出类现在与输入类匹配。'
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")子类用作`piecewise`的输入时，它们也会传递给函数。输出现在也将是相同的子类。
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
- en: Enable Accelerate Framework
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用加速框架
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 随着macOS 11.3的发布，使用加速框架的BLAS和LAPACK实现时NumPy遇到的几个不同问题应该得到解决。此更改在macOS上启用了加速框架作为选项。如果发现其他问题，请使用开发人员反馈助手工具（[https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)）向加速框架提交Bug报告。我们打算及时解决问题，并计划继续支持和更新我们的BLAS和LAPACK库。
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") 的输出类现在与输入类匹配。'
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")子类用于输入到[`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise")时，它们将被传递到这些函数。现在输出将与输入相同的子类。
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
- en: Enable Accelerate Framework
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用加速框架
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 随着macOS 11.3的发布，numpy在使用加速框架的BLAS和LAPACK实现时遇到的多种问题应该得到解决。此更改在macOS上启用了加速框架作为一个选项。如果发现其他问题，请使用开发者反馈助手工具（[https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)）提交bug报告给加速框架。我们打算及时解决问题，并计划继续支持和更新我们的BLAS和LAPACK库。
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
