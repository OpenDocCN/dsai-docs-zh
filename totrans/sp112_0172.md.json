["```py\nscipy.interpolate.griddata(points, values, xi, method='linear', fill_value=nan, rescale=False)\n```", "```py\n>>> import numpy as np\n>>> def func(x, y):\n...     return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2 \n```", "```py\n>>> grid_x, grid_y = np.mgrid[0:1:100j, 0:1:200j] \n```", "```py\n>>> rng = np.random.default_rng()\n>>> points = rng.random((1000, 2))\n>>> values = func(points[:,0], points[:,1]) \n```", "```py\n>>> from scipy.interpolate import griddata\n>>> grid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')\n>>> grid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')\n>>> grid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic') \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> plt.subplot(221)\n>>> plt.imshow(func(grid_x, grid_y).T, extent=(0,1,0,1), origin='lower')\n>>> plt.plot(points[:,0], points[:,1], 'k.', ms=1)\n>>> plt.title('Original')\n>>> plt.subplot(222)\n>>> plt.imshow(grid_z0.T, extent=(0,1,0,1), origin='lower')\n>>> plt.title('Nearest')\n>>> plt.subplot(223)\n>>> plt.imshow(grid_z1.T, extent=(0,1,0,1), origin='lower')\n>>> plt.title('Linear')\n>>> plt.subplot(224)\n>>> plt.imshow(grid_z2.T, extent=(0,1,0,1), origin='lower')\n>>> plt.title('Cubic')\n>>> plt.gcf().set_size_inches(6, 6)\n>>> plt.show() \n```"]