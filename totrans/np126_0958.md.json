["```py\nfrom numpy.random import PCG64\n\nbg = PCG64(12345678903141592653589793) \n```", "```py\nfrom numpy.random import PCG64, SeedSequence\n\n# Get the user's seed somehow, maybe through `argparse`.\n# If the user did not provide a seed, it should return `None`.\nseed = get_user_seed()\nss = SeedSequence(seed)\nprint('seed = {}'.format(ss.entropy))\nbg = PCG64(ss) \n```", "```py\nfrom numpy.random import PCG64, SeedSequence\n\n# High quality initial entropy\nentropy = 0x87351080e25cb0fad77a44a3be03b491\nbase_seq = SeedSequence(entropy)\nchild_seqs = base_seq.spawn(12)    # a list of 12 SeedSequences\ngenerators = [PCG64(seq) for seq in child_seqs] \n```", "```py\nfrom numpy.random import PCG64, SeedSequence\n# High quality initial entropy\nentropy = 0x87351080e25cb0fad77a44a3be03b491\nbase_bitgen = PCG64(entropy)\ngenerators = base_bitgen.spawn(12) \n```", "```py\nfrom numpy.random import PCG64, SeedSequence\n\n# High quality initial entropy\nentropy = 0x87351080e25cb0fad77a44a3be03b491\nsequences = [SeedSequence((entropy, worker_id)) for worker_id in range(12)]\ngenerators = [PCG64(seq) for seq in sequences] \n```"]