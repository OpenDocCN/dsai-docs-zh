- en: Understanding Meson
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Meson
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html](https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html](https://docs.scipy.org/doc/scipy-1.12.0/building/understanding_meson.html)
- en: 'Building SciPy relies on the following tools, which can be considered part
    of the build system:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SciPy依赖于以下工具，这些工具可视为构建系统的一部分：
- en: '`meson`: the Meson build system, installable as a pure Python package from
    PyPI or conda-forge'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meson`：Meson构建系统，可作为纯Python包从PyPI或conda-forge安装'
- en: '`ninja`: the build tool invoked by Meson to do the actual building (e.g. invoking
    compilers). Installable also from PyPI (on all common platforms) or conda-forge.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ninja`：Meson调用的实际构建工具（例如，调用编译器）。也可以从PyPI（所有常见平台）或conda-forge安装。'
- en: '`pkg-config`: the tool used for discovering dependencies (in particular BLAS/LAPACK).
    Available on conda-forge (and Homebrew, Chocolatey, and Linux package managers),
    but not packaged on PyPI.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pkg-config`：用于发现依赖项（特别是BLAS/LAPACK）的工具。在conda-forge（以及Homebrew、Chocolatey和Linux包管理器）可用，但未在PyPI上打包。'
- en: '`meson-python`: the Python build backend (i.e., the thing that gets invoked
    via a hook in `pyproject.toml` by a build frontend like `pip` or `pypa/build`).
    This is a thin layer on top of Meson, with as main roles (a) interface with build
    frontends, and (b) produce sdists and wheels with valid file names and metadata.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meson-python`：Python构建后端（即通过`pyproject.toml`中的钩子由`pip`或`pypa/build`调用的东西）。这是Meson之上的一个薄层，主要作用是（a）与构建前端接口，以及（b）生成具有有效文件名和元数据的sdists和wheels。'
- en: 'Building with Meson happens in stages:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Meson进行构建分为几个阶段：
- en: A configure stage (`meson setup`) to detect compilers, dependencies and build
    options, and create the build directory and `build.ninja` file,
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置阶段（`meson setup`）用于检测编译器、依赖项和构建选项，并创建构建目录和`build.ninja`文件，
- en: A compile stage (`meson compile` or `ninja`), where the extension modules that
    are part of a built SciPy package get compiled,
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译阶段（`meson compile`或`ninja`），在这里编译作为构建SciPy包的一部分的扩展模块，
- en: An install stage (`meson install`) to install the installable files from the
    source and build directories to the target install directory,
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装阶段（`meson install`）用于从源和构建目录安装可安装文件到目标安装目录，
- en: Meson has a good build dependency tracking system, so invoking a build for a
    second time will rebuild only targets for which any sources or dependencies have
    changed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Meson拥有良好的构建依赖跟踪系统，因此第二次调用构建将仅重新构建任何源或依赖项发生更改的目标。
- en: To learn more about Meson
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解更多关于Meson的信息
- en: Meson has [very good documentation](https://mesonbuild.com/); it pays off to
    read it, and is often the best source of answers for “how to do X”. Furthermore,
    an extensive pdf book on Meson can be obtained for free at [https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html](https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Meson拥有[非常好的文档](https://mesonbuild.com/)；阅读它是值得的，通常也是“如何做X”的最佳答案来源。此外，可以免费获取Meson的详尽pdf书籍，网址为[https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html](https://nibblestew.blogspot.com/2021/12/this-year-receive-gift-of-free-meson.html)。
- en: To learn more about the design principles Meson uses, the recent talks linked
    from [mesonbuild.com/Videos](https://mesonbuild.com/Videos.html) are also a good
    resource.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解Meson使用的设计原则的更多信息，最近链接的讲座从[mesonbuild.com/Videos](https://mesonbuild.com/Videos.html)也是一个很好的资源。
- en: Explanation of build stages
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建阶段的解释
- en: '*This is for teaching purposes only; there should be no need to execute these
    stages separately. The dev.py scripts in the root of the repo also contains these
    steps and may be studied for insights.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*这仅供教学目的；不应单独执行这些阶段。根目录中的dev.py脚本也包含这些步骤，并且可以用于深入研究。*'
- en: 'Assume we’re starting from a clean repo and a fully set up conda environment:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们从一个干净的repo和完全设置好的conda环境开始：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To now run the configure stage of the build and instruct Meson to put the build
    artifacts in `build/` and a local install under `build-install/` relative to the
    root of the repo, do:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行构建的配置阶段，并指示Meson将构建工件放在相对于repo根目录的`build/`和本地安装在`build-install/`下，请执行：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To then run the compile stage of the build, do:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行构建的编译阶段，请执行：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the command above, `-C` is followed by the name of the build directory. You
    can have multiple build directories at the same time. Meson is fully out-of-place,
    so those builds will not interfere with each other. You can for example have a
    GCC build, a Clang build and a debug build in different directories.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，`-C`后面跟着构建目录的名称。您可以同时拥有多个构建目录。Meson是完全非原位的，因此这些构建不会相互干扰。例如，您可以在不同的目录中拥有GCC构建、Clang构建和调试构建。
- en: 'To then install SciPy into the prefix (`build-install/` here, but note that
    that’s just an arbitrary name we picked here):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将SciPy安装到前缀（`build-install/`这里，但请注意这只是我们随意选择的名称）：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It will then install to `build-install/lib/python3.11/site-packages/scipy`,
    which is not on your Python path, so to add it do (*again, this is for learning
    purposes, using ``PYTHONPATH`` explicitly is typically not the best idea*):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将安装到`build-install/lib/python3.11/site-packages/scipy`，这不在您的Python路径中，所以要添加它（*再次强调，这是为了学习目的，显式使用`PYTHONPATH`通常不是最佳选择*）：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we should be able to import `scipy` and run the tests. Remembering that
    we need to move out of the root of the repo to ensure we pick up the package and
    not the local `scipy/` source directory:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能够导入`scipy`并运行测试。请记住，我们需要移出仓库的根目录，以确保我们使用的是包而不是本地的`scipy/`源目录。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The above runs the tests for a single module, `constants`. Other ways of running
    the tests should also work, for example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令运行单个模块`constants`的测试。还有其他运行测试的方法，例如：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The full test suite should pass, without any build warnings on Linux (with the
    GCC version for which `-Werror` is enforced in CI at least) and with at most a
    moderate amount of warnings on other platforms.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的测试套件应该通过，在Linux上没有任何构建警告（至少在CI中强制使用`-Werror`的GCC版本），在其他平台上最多只能有少量警告。
