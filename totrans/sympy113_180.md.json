["```py\n>>> from sympy import zeros, symbols\n>>> from sympy.physics.mechanics import *\n>>> q1, q2, q3, u1, u2, u3 = dynamicsymbols('q1, q2, q3, u1, u2, u3')\n>>> F, T = dynamicsymbols('F, T')\n>>> l, k, c, g, kT = symbols('l, k, c, g, kT')\n>>> ma, mb, mc, IBzz= symbols('ma, mb, mc, IBzz') \n```", "```py\n>>> wall = RigidBody('N')\n>>> block = Particle('A', mass=ma)\n>>> compound_pend = RigidBody('B', mass=mb)\n>>> compound_pend.central_inertia = inertia(compound_pend.frame, 0, 0, IBzz)\n>>> simple_pend = Particle('C', mass=mc)\n>>> system = System.from_newtonian(wall)\n>>> system.add_bodies(block, compound_pend, simple_pend) \n```", "```py\n>>> block_frame = ReferenceFrame('A')\n>>> block.masscenter.set_vel(block_frame, 0)\n>>> slider = PrismaticJoint('J1', wall, block, coordinates=q1, speeds=u1,\n...                         child_interframe=block_frame)\n>>> rev1 = PinJoint('J2', block, compound_pend, coordinates=q2, speeds=u2,\n...                 joint_axis=wall.z, child_point=l*2/3*compound_pend.y,\n...                 parent_interframe=block_frame)\n>>> simple_pend_frame = ReferenceFrame('C')\n>>> simple_pend.masscenter.set_vel(simple_pend_frame, 0)\n>>> rev2 = PinJoint('J3', compound_pend, simple_pend, coordinates=q3,\n...                 speeds=u3, joint_axis=compound_pend.z,\n...                 parent_point=-l/3*compound_pend.y,\n...                 child_point=l*simple_pend_frame.y,\n...                 child_interframe=simple_pend_frame)\n\n>>> system.add_joints(slider, rev1, rev2) \n```", "```py\n>>> system.apply_uniform_gravity(-g * wall.y)\n>>> system.add_loads(Force(block, F * wall.x))\n>>> spring_damper_path = LinearPathway(wall.masscenter, block.masscenter)\n>>> system.add_actuators(\n...     LinearSpring(k, spring_damper_path),\n...     LinearDamper(c, spring_damper_path),\n...     TorqueActuator(T, wall.z, compound_pend, wall),\n...     TorqueActuator(kT * q3, wall.z, compound_pend, simple_pend_frame),\n... ) \n```", "```py\n>>> system.form_eoms(explicit_kinematics=True)\nMatrix([\n[                                -c*u1(t) - k*q1(t) + 2*l*mb*u2(t)**2*sin(q2(t))/3 - l*mc*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t)))*Derivative(u3(t), t) - l*mc*(-sin(q2(t))*cos(q3(t)) - sin(q3(t))*cos(q2(t)))*(u2(t) + u3(t))**2 + l*mc*u2(t)**2*sin(q2(t)) - (2*l*mb*cos(q2(t))/3 + mc*(l*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t))) + l*cos(q2(t))))*Derivative(u2(t), t) - (ma + mb + mc)*Derivative(u1(t), t) + F(t)],\n[-2*g*l*mb*sin(q2(t))/3 - g*l*mc*(sin(q2(t))*cos(q3(t)) + sin(q3(t))*cos(q2(t))) - g*l*mc*sin(q2(t)) + l**2*mc*(u2(t) + u3(t))**2*sin(q3(t)) - l**2*mc*u2(t)**2*sin(q3(t)) - mc*(l**2*cos(q3(t)) + l**2)*Derivative(u3(t), t) - (2*l*mb*cos(q2(t))/3 + mc*(l*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t))) + l*cos(q2(t))))*Derivative(u1(t), t) - (IBzz + 4*l**2*mb/9 + mc*(2*l**2*cos(q3(t)) + 2*l**2))*Derivative(u2(t), t) + T(t)],\n[                                                                                                                                                                        -g*l*mc*(sin(q2(t))*cos(q3(t)) + sin(q3(t))*cos(q2(t))) - kT*q3(t) - l**2*mc*u2(t)**2*sin(q3(t)) - l**2*mc*Derivative(u3(t), t) - l*mc*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t)))*Derivative(u1(t), t) - mc*(l**2*cos(q3(t)) + l**2)*Derivative(u2(t), t)]])\n\n>>> system.mass_matrix_full\nMatrix([\n[1, 0, 0,                                                                                            0,                                                                                            0,                                                     0],\n[0, 1, 0,                                                                                            0,                                                                                            0,                                                     0],\n[0, 0, 1,                                                                                            0,                                                                                            0,                                                     0],\n[0, 0, 0,                                                                                 ma + mb + mc, 2*l*mb*cos(q2(t))/3 + mc*(l*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t))) + l*cos(q2(t))), l*mc*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t)))],\n[0, 0, 0, 2*l*mb*cos(q2(t))/3 + mc*(l*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t))) + l*cos(q2(t))),                                         IBzz + 4*l**2*mb/9 + mc*(2*l**2*cos(q3(t)) + 2*l**2),                           mc*(l**2*cos(q3(t)) + l**2)],\n[0, 0, 0,                                        l*mc*(-sin(q2(t))*sin(q3(t)) + cos(q2(t))*cos(q3(t))),                                                                  mc*(l**2*cos(q3(t)) + l**2),                                               l**2*mc]])\n\n>>> system.forcing_full\nMatrix([\n[                                                                                                                                                                           u1(t)],\n[                                                                                                                                                                           u2(t)],\n[                                                                                                                                                                           u3(t)],\n[                  -c*u1(t) - k*q1(t) + 2*l*mb*u2(t)**2*sin(q2(t))/3 - l*mc*(-sin(q2(t))*cos(q3(t)) - sin(q3(t))*cos(q2(t)))*(u2(t) + u3(t))**2 + l*mc*u2(t)**2*sin(q2(t)) + F(t)],\n[-2*g*l*mb*sin(q2(t))/3 - g*l*mc*(sin(q2(t))*cos(q3(t)) + sin(q3(t))*cos(q2(t))) - g*l*mc*sin(q2(t)) + l**2*mc*(u2(t) + u3(t))**2*sin(q3(t)) - l**2*mc*u2(t)**2*sin(q3(t)) + T(t)],\n[                                                                                -g*l*mc*(sin(q2(t))*cos(q3(t)) + sin(q3(t))*cos(q2(t))) - kT*q3(t) - l**2*mc*u2(t)**2*sin(q3(t))]]) \n```"]