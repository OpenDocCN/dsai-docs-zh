- en: Working with text data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文本数据
- en: 原文：[https://pandas.pydata.org/docs/user_guide/text.html](https://pandas.pydata.org/docs/user_guide/text.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/text.html](https://pandas.pydata.org/docs/user_guide/text.html)
- en: '## Text data types'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 文本数据类型'
- en: 'There are two ways to store text data in pandas:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中有两种存储文本数据的方式：
- en: '`object` -dtype NumPy array.'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object` -dtype NumPy 数组。'
- en: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") extension type.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") 扩展类型。'
- en: We recommend using [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") to store text data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")来存储文本数据。
- en: 'Prior to pandas 1.0, `object` dtype was the only option. This was unfortunate
    for many reasons:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 1.0 之前，`object` dtype 是唯一的选项。这在很多方面都是不幸的：
- en: You can accidentally store a *mixture* of strings and non-strings in an `object`
    dtype array. It’s better to have a dedicated dtype.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会在`object` dtype数组中意外存储*字符串和非字符串的混合*。最好有一个专用的dtype。
- en: '`object` dtype breaks dtype-specific operations like [`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes"). There isn’t a clear way to select *just* text
    while excluding non-text but still object-dtype columns.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object` dtype会破坏dtype特定的操作，比如[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")。没有明确的方法可以仅选择文本而排除非文本但仍为object-dtype的列。'
- en: When reading code, the contents of an `object` dtype array is less clear than
    `'string'`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在阅读代码时，`object` dtype数组的内容比`'string'`不够清晰。
- en: Currently, the performance of `object` dtype arrays of strings and [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") are about the same. We expect future enhancements
    to significantly increase the performance and lower the memory overhead of [`StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，字符串和[`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")的`object` dtype数组的性能大致相同。我们期待未来的增强将显著提高[`StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")的性能并降低内存开销。
- en: Warning
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`StringArray` is currently considered experimental. The implementation and
    parts of the API may change without warning.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringArray` 目前被视为实验性质。实现和部分 API 可能会在没有警告的情况下发生变化。'
- en: For backwards-compatibility, `object` dtype remains the default type we infer
    a list of strings to
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们仍然将`object` dtype作为我们推断字符串列表的默认类型。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To explicitly request `string` dtype, specify the `dtype`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确请求`string` dtype，请指定`dtype`
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Or `astype` after the `Series` or `DataFrame` is created
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或在创建`Series`或`DataFrame`之后进行`astype`
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also use [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")/`"string"` as the dtype on non-string data and it will be
    converted to `string` dtype:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在非字符串数据上使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")/`"string"`作为dtype，并将其转换为`string` dtype：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'or convert from existing pandas data:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从现有的 pandas 数据中转换：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '### Behavior differences'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '### 行为差异'
- en: These are places where the behavior of `StringDtype` objects differ from `object`
    dtype
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`StringDtype`对象与`object` dtype不同的地方
- en: For `StringDtype`, [string accessor methods](../reference/series.html#api-series-str)
    that return **numeric** output will always return a nullable integer dtype, rather
    than either int or float dtype, depending on the presence of NA values. Methods
    returning **boolean** output will return a nullable boolean dtype.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `StringDtype`，返回**数字**输出的[string访问器方法](../reference/series.html#api-series-str)将始终返回可空整数dtype，而不是根据NA值的存在返回int或float
    dtype。返回**布尔值**输出的方法将返回可空布尔dtype。
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Both outputs are `Int64` dtype. Compare that with object-dtype
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个输出都是`Int64` dtype。与object-dtype进行比较
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When NA values are present, the output dtype is float64\. Similarly for methods
    returning boolean values.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当存在NA值时，输出dtype为float64。对于返回布尔值的方法也是如此。
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Some string methods, like [`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode") are not available on `StringArray` because `StringArray`
    only holds strings, not bytes.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些字符串方法，比如[`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")在`StringArray`上不可用，因为`StringArray`只保存字符串，而不是字节。
- en: In comparison operations, [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") and `Series` backed by a `StringArray` will return
    an object with [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype"), rather than a `bool` dtype object. Missing values in a
    `StringArray` will propagate in comparison operations, rather than always comparing
    unequal like `numpy.nan`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在比较操作中，[`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")和由`StringArray`支持的`Series`将返回一个具有[`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype")的对象，而不是`bool` dtype对象。在`StringArray`中的缺失值将在比较操作中传播，而不总是像`numpy.nan`那样比较不相等。
- en: 'Everything else that follows in the rest of this document applies equally to
    `string` and `object` dtype.  ## String methods'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '本文档其余部分中的所有内容同样适用于`string`和`object` dtype。  ## 字符串方法'
- en: 'Series and Index are equipped with a set of string processing methods that
    make it easy to operate on each element of the array. Perhaps most importantly,
    these methods exclude missing/NA values automatically. These are accessed via
    the `str` attribute and generally have names matching the equivalent (scalar)
    built-in string methods:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Series和Index配备了一组字符串处理方法，使得可以轻松操作数组的每个元素。最重要的是，这些方法会自动排除缺失/NA值。这些方法通过`str`属性访问，通常与等效的（标量）内置字符串方法名称匹配：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The string methods on Index are especially useful for cleaning up or transforming
    DataFrame columns. For instance, you may have columns with leading or trailing
    whitespace:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Index上的字符串方法特别适用于清理或转换DataFrame列。例如，您可能有带有前导或尾随空格的列：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since `df.columns` is an Index object, we can use the `.str` accessor
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`df.columns`是一个Index对象，我们可以使用`.str`访问器
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These string methods can then be used to clean up the columns as needed. Here
    we are removing leading and trailing whitespaces, lower casing all names, and
    replacing any remaining whitespaces with underscores:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用这些字符串方法根据需要清理列。在这里，我们删除前导和尾随空格，将所有名称转换为小写，并用下划线替换任何剩余的空格：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have a `Series` where lots of elements are repeated (i.e. the number
    of unique elements in the `Series` is a lot smaller than the length of the `Series`),
    it can be faster to convert the original `Series` to one of type `category` and
    then use `.str.<method>` or `.dt.<property>` on that. The performance difference
    comes from the fact that, for `Series` of type `category`, the string operations
    are done on the `.categories` and not on each element of the `Series`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个`Series`，其中许多元素重复（即`Series`中的唯一元素数量远小于`Series`的长度），将原始`Series`转换为`category`类型之后，使用`.str.<method>`或`.dt.<property>`可能更快。性能差异来自于`category`类型的`Series`上的字符串操作是在`.categories`上执行的，而不是在`Series`的每个元素上执行。
- en: 'Please note that a `Series` of type `category` with string `.categories` has
    some limitations in comparison to `Series` of type string (e.g. you can’t add
    strings to each other: `s + " " + s` won’t work if `s` is a `Series` of type `category`).
    Also, `.str` methods which operate on elements of type `list` are not available
    on such a `Series`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，具有字符串`.categories`的`category`类型`Series`与字符串类型的`Series`相比存在一些限制（例如，如果`s`是`category`类型的`Series`，则无法将字符串相加：`s
    + " " + s`不起作用）。此外，对于这样的`Series`，不可用于操作`list`类型元素的`.str`方法。
- en: Warning
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The type of the Series is inferred and the allowed types (i.e. strings).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Series的类型是推断的，并且允许的类型（即字符串）。
- en: 'Generally speaking, the `.str` accessor is intended to work only on strings.
    With very few exceptions, other uses are not supported, and may be disabled at
    a later point.  ## Splitting and replacing strings'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '一般来说，`.str`访问器仅用于字符串。除了极少数例外情况外，不支持其他用途，并且可能在以后被禁用。  ## 拆分和替换字符串'
- en: 'Methods like `split` return a Series of lists:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 像`split`这样的方法返回一个列表的Series：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Elements in the split lists can be accessed using `get` or `[]` notation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`get`或`[]`符号访问拆分列表中的元素：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It is easy to expand this to return a DataFrame using `expand`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以轻松扩展此操作以使用`expand`返回DataFrame。
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When original `Series` has [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), the output columns will all be [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当原始`Series`具有[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")时，输出列也将全部是[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")。
- en: 'It is also possible to limit the number of splits:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以限制拆分的数量：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`rsplit` is similar to `split` except it works in the reverse direction, i.e.,
    from the end of the string to the beginning of the string:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`rsplit`类似于`split`，只是它是从字符串末尾到字符串开头的方向进行操作：'
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`replace` optionally uses [regular expressions](https://docs.python.org/3/library/re.html):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`方法可以选择使用[正则表达式](https://docs.python.org/3/library/re.html)：'
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Changed in version 2.0.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改。
- en: 'Single character pattern with `regex=True` will also be treated as regular
    expressions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`regex=True`的单个字符模式也将被视为正则表达式：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you want literal replacement of a string (equivalent to [`str.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace
    "(in Python v3.12)")), you can set the optional `regex` parameter to `False`,
    rather than escaping each character. In this case both `pat` and `repl` must be
    strings:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要对字符串进行字面替换（相当于[`str.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace
    "(在 Python v3.12 中)")），您可以将可选的`regex`参数设置为`False`，而不是转义每个字符。在这种情况下，`pat`和`repl`都必须是字符串：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `replace` method can also take a callable as replacement. It is called on
    every `pat` using [`re.sub()`](https://docs.python.org/3/library/re.html#re.sub
    "(in Python v3.12)"). The callable should expect one positional argument (a regex
    object) and return a string.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`方法还可以接受一个可调用对象作为替换。它会对每个`pat`使用[`re.sub()`](https://docs.python.org/3/library/re.html#re.sub
    "(在 Python v3.12 中)")进行调用。可调用对象应该期望一个位置参数（一个正则表达式对象）并返回一个字符串。'
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `replace` method also accepts a compiled regular expression object from
    [`re.compile()`](https://docs.python.org/3/library/re.html#re.compile "(in Python
    v3.12)") as a pattern. All flags should be included in the compiled regular expression
    object.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`方法还接受来自[`re.compile()`](https://docs.python.org/3/library/re.html#re.compile
    "(在 Python v3.12 中)")的编译的正则表达式对象作为模式。所有标志应包含在编译的正则表达式对象中。'
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Including a `flags` argument when calling `replace` with a compiled regular
    expression object will raise a `ValueError`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用带有编译的正则表达式对象的`replace`时包含一个`flags`参数将引发`ValueError`。
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`removeprefix` and `removesuffix` have the same effect as `str.removeprefix`
    and `str.removesuffix` added in Python 3.9 <[https://docs.python.org/3/library/stdtypes.html#str.removeprefix](https://docs.python.org/3/library/stdtypes.html#str.removeprefix)>`__:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeprefix`和`removesuffix`与Python 3.9中添加的`str.removeprefix`和`str.removesuffix`具有相同的效果
    <[https://docs.python.org/3/library/stdtypes.html#str.removeprefix](https://docs.python.org/3/library/stdtypes.html#str.removeprefix)>`__：'
- en: New in version 1.4.0.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.0版本中新增。
- en: '[PRE24]  ## Concatenation'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]  ## 连接'
- en: There are several ways to concatenate a `Series` or `Index`, either with itself
    or others, all based on [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat"), resp. `Index.str.cat`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以连接`Series`或`Index`，可以是与自身或其他对象连接，都基于[`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat")，或者`Index.str.cat`。
- en: Concatenating a single Series into a string
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将单个Series连接成字符串
- en: 'The content of a `Series` (or `Index`) can be concatenated:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`（或`Index`）的内容可以进行连接：'
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If not specified, the keyword `sep` for the separator defaults to the empty
    string, `sep=''''`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定，用于分隔符的关键字`sep`默认为空字符串，`sep=''`：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'By default, missing values are ignored. Using `na_rep`, they can be given a
    representation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，会忽略缺失值。使用`na_rep`，可以为缺失值指定一个表示：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Concatenating a Series and something list-like into a Series
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和类似列表的东西连接成一个Series
- en: The first argument to [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") can be a list-like object, provided that it matches the
    length of the calling `Series` (or `Index`).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat")的第一个参数可以是类似列表的对象，只要它与调用的`Series`（或`Index`）的长度匹配即可。'
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Missing values on either side will result in missing values in the result as
    well, *unless* `na_rep` is specified:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 任一侧存在缺失值都会导致结果中也存在缺失值，*除非*指定了`na_rep`：
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Concatenating a Series and something array-like into a Series
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和类似数组的东西连接成一个Series
- en: The parameter `others` can also be two-dimensional. In this case, the number
    or rows must match the lengths of the calling `Series` (or `Index`).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`others`也可以是二维的。在这种情况下，行数必须与调用的`Series`（或`Index`）的长度匹配。
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Concatenating a Series and an indexed object into a Series, with alignment
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和一个带索引的对象连接成一个Series，并进行对齐
- en: For concatenation with a `Series` or `DataFrame`, it is possible to align the
    indexes before concatenation by setting the `join`-keyword.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与`Series`或`DataFrame`连接，可以通过设置`join`关键字来在连接之前对齐索引。
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The usual options are available for `join` (one of `'left', 'outer', 'inner',
    'right'`). In particular, alignment also means that the different lengths do not
    need to coincide anymore.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`，可以使用常规选项之一（`'left', 'outer', 'inner', 'right'`）。特别是，对齐也意味着不同长度不再需要一致。
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The same alignment can be used when `others` is a `DataFrame`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当`others`是一个`DataFrame`时，可以使用相同的对齐：
- en: '[PRE33]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Concatenating a Series and many objects into a Series
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个系列和许多对象连接成一个系列
- en: 'Several array-like items (specifically: `Series`, `Index`, and 1-dimensional
    variants of `np.ndarray`) can be combined in a list-like container (including
    iterators, `dict`-views, etc.).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 几个类似数组的项目（特别是：`Series`、`Index`和`np.ndarray`的一维变体）可以组合在一个类似列表的容器中（包括迭代器、`dict`-视图等）。
- en: '[PRE34]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'All elements without an index (e.g. `np.ndarray`) within the passed list-like
    must match in length to the calling `Series` (or `Index`), but `Series` and `Index`
    may have arbitrary length (as long as alignment is not disabled with `join=None`):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的类似列表中没有索引的所有元素（例如`np.ndarray`）必须与调用的`Series`（或`Index`）的长度匹配，但`Series`和`Index`的长度可以是任意的（只要不使用`join=None`禁用对齐）：
- en: '[PRE35]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If using `join=''right''` on a list-like of `others` that contains different
    indexes, the union of these indexes will be used as the basis for the final concatenation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在一个包含不同索引的`others`列表上使用`join='right'`，这些索引的并集将被用作最终连接的基础：
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Indexing with `.str`
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`.str`进行索引
- en: You can use `[]` notation to directly index by position locations. If you index
    past the end of the string, the result will be a `NaN`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`[]`表示法直接按位置索引。如果索引超出字符串的末尾，结果将是一个`NaN`。
- en: '[PRE37]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Extracting substrings
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取子字符串
- en: '### Extract first match in each subject (extract)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '### 提取每个主题中的第一个匹配项（extract）'
- en: The `extract` method accepts a [regular expression](https://docs.python.org/3/library/re.html)
    with at least one capture group.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract`方法接受至少一个捕获组的[正则表达式](https://docs.python.org/3/library/re.html)。'
- en: Extracting a regular expression with more than one group returns a DataFrame
    with one column per group.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 提取具有多个组的正则表达式将返回一个每个组一列的DataFrame。
- en: '[PRE38]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Elements that do not match return a row filled with `NaN`. Thus, a Series of
    messy strings can be “converted” into a like-indexed Series or DataFrame of cleaned-up
    or more useful strings, without necessitating `get()` to access tuples or `re.match`
    objects. The dtype of the result is always object, even if no match is found and
    the result only contains `NaN`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不匹配的元素返回一个填充有`NaN`的行。因此，一系列混乱的字符串可以被“转换”为一个具有相同索引的清理或更有用的字符串的系列或`DataFrame`，而不需要使用`get()`来访问元组或`re.match`对象。结果的数据类型始终为对象，即使没有找到匹配项，结果仅包含`NaN`。
- en: Named groups like
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 命名组如
- en: '[PRE39]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: and optional groups like
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 和可选组如
- en: '[PRE40]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: can also be used. Note that any capture group names in the regular expression
    will be used for column names; otherwise capture group numbers will be used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用。请注意，正则表达式中的任何捕获组名称将用作列名；否则将使用捕获组编号。
- en: Extracting a regular expression with one group returns a `DataFrame` with one
    column if `expand=True`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个组的正则表达式提取返回一个列的`DataFrame`，如果`expand=True`。
- en: '[PRE41]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: It returns a Series if `expand=False`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则返回一个Series。
- en: '[PRE42]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Calling on an `Index` with a regex with exactly one capture group returns a
    `DataFrame` with one column if `expand=True`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用正则表达式调用带有一个捕获组的`Index`，如果`expand=True`，则返回一个列的`DataFrame`。
- en: '[PRE43]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: It returns an `Index` if `expand=False`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则返回一个`Index`。
- en: '[PRE44]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Calling on an `Index` with a regex with more than one capture group returns
    a `DataFrame` if `expand=True`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有多个捕获组的正则表达式调用`Index`，如果`expand=True`，则返回一个`DataFrame`。
- en: '[PRE45]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: It raises `ValueError` if `expand=False`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则引发`ValueError`。
- en: '[PRE46]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The table below summarizes the behavior of `extract(expand=False)` (input subject
    in first column, number of groups in regex in first row)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了`extract(expand=False)`的行为（第一列为输入主题，正则表达式中的组数为第一行）
- en: '|  | 1 group | >1 group |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '|  | 1组 | >1组 |'
- en: '| Index | Index | ValueError |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| Index | Index | ValueError |'
- en: '| Series | Series | DataFrame |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| Series | Series | DataFrame |'
- en: Extract all matches in each subject (extractall)
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取每个主题中的所有匹配项（extractall）
- en: Unlike `extract` (which returns only the first match),
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 与仅返回第一个匹配项的`extract`不同，
- en: '[PRE47]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: the `extractall` method returns every match. The result of `extractall` is always
    a `DataFrame` with a `MultiIndex` on its rows. The last level of the `MultiIndex`
    is named `match` and indicates the order in the subject.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`extractall`方法返回每个匹配项。`extractall`的结果始终是一个带有`MultiIndex`的`DataFrame`。`MultiIndex`的最后一级命名为`match`，表示主题中的顺序。'
- en: '[PRE48]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: When each subject string in the Series has exactly one match,
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当系列中的每个主题字符串恰好有一个匹配时，
- en: '[PRE49]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: then `extractall(pat).xs(0, level='match')` gives the same result as `extract(pat)`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`extractall(pat).xs(0, level='match')`与`extract(pat)`给出相同的结果。
- en: '[PRE50]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`Index` also supports `.str.extractall`. It returns a `DataFrame` which has
    the same result as a `Series.str.extractall` with a default index (starts from
    0).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index`还支持`.str.extractall`。它返回一个与具有默认索引（从0开始）的`Series.str.extractall`具有相同结果的`DataFrame`。'
- en: '[PRE51]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Testing for strings that match or contain a pattern
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试匹配或包含模式的字符串
- en: 'You can check whether elements contain a pattern:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查元素是否包含模式：
- en: '[PRE52]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Or whether elements match a pattern:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者元素是否匹配模式：
- en: '[PRE53]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The distinction between `match`, `fullmatch`, and `contains` is strictness:
    `fullmatch` tests whether the entire string matches the regular expression; `match`
    tests whether there is a match of the regular expression that begins at the first
    character of the string; and `contains` tests whether there is a match of the
    regular expression at any position within the string.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`、`fullmatch`和`contains`之间的区别在于严格性：`fullmatch`测试整个字符串是否与正则表达式匹配；`match`测试正则表达式是否在字符串的第一个字符处匹配；`contains`测试字符串中是否在任何位置匹配正则表达式。'
- en: The corresponding functions in the `re` package for these three match modes
    are [re.fullmatch](https://docs.python.org/3/library/re.html#re.fullmatch), [re.match](https://docs.python.org/3/library/re.html#re.match),
    and [re.search](https://docs.python.org/3/library/re.html#re.search), respectively.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种匹配模式在`re`包中对应的函数分别是[re.fullmatch](https://docs.python.org/3/library/re.html#re.fullmatch)，[re.match](https://docs.python.org/3/library/re.html#re.match)和[re.search](https://docs.python.org/3/library/re.html#re.search)。
- en: 'Methods like `match`, `fullmatch`, `contains`, `startswith`, and `endswith`
    take an extra `na` argument so missing values can be considered True or False:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`、`fullmatch`、`contains`、`startswith`和`endswith`等方法接受额外的`na`参数，因此缺失值可以被视为True或False：'
- en: '[PRE55]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '## Creating indicator variables'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建指示变量'
- en: 'You can extract dummy variables from string columns. For example if they are
    separated by a `''|''`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从字符串列中提取虚拟变量。例如，如果它们由`'|'`分隔：
- en: '[PRE56]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: String `Index` also supports `get_dummies` which returns a `MultiIndex`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串`Index`还支持`get_dummies`，它返回一个`MultiIndex`。
- en: '[PRE57]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies").
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见[`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies")。
- en: Method summary
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法摘要
- en: '| Method | Description |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") | Concatenate strings |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") | 连接字符串 |'
- en: '| [`split()`](../reference/api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split") | Split strings on delimiter |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`split()`](../reference/api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split") | 使用分隔符拆分字符串 |'
- en: '| [`rsplit()`](../reference/api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit") | Split strings on delimiter working from the end
    of the string |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit()`](../reference/api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit") | 从字符串末尾开始使用分隔符拆分字符串 |'
- en: '| [`get()`](../reference/api/pandas.Series.str.get.html#pandas.Series.str.get
    "pandas.Series.str.get") | Index into each element (retrieve i-th element) |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`get()`](../reference/api/pandas.Series.str.get.html#pandas.Series.str.get
    "pandas.Series.str.get") | 索引到每个元素（检索第i个元素） |'
- en: '| [`join()`](../reference/api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join") | Join strings in each element of the Series with passed
    separator |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`join()`](../reference/api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join") | 使用传递的分隔符连接Series中每个元素的字符串 |'
- en: '| [`get_dummies()`](../reference/api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies") | Split strings on the delimiter returning DataFrame
    of dummy variables |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`get_dummies()`](../reference/api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies") | 使用分隔符拆分字符串，返回包含虚拟变量的DataFrame |'
- en: '| [`contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") | Return boolean array if each string contains pattern/regex
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") | 如果每个字符串包含模式/正则表达式，则返回布尔数组 |'
- en: '| [`replace()`](../reference/api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace") | Replace occurrences of pattern/regex/string with
    some other string or the return value of a callable given the occurrence |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [`replace()`](../reference/api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace") | 用其他字符串或可调用对象的返回值替换模式/正则表达式/字符串的出现 |'
- en: '| [`removeprefix()`](../reference/api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix") | Remove prefix from string, i.e. only remove
    if string starts with prefix. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`removeprefix()`](../reference/api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix") | 从字符串中移除前缀，即仅在字符串以前缀开头时才移除。 |'
- en: '| [`removesuffix()`](../reference/api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix") | Remove suffix from string, i.e. only remove
    if string ends with suffix. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`removesuffix()`](../reference/api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix") | 从字符串中移除后缀，即仅在字符串以后缀结尾时才移除。 |'
- en: '| [`repeat()`](../reference/api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat") | Duplicate values (`s.str.repeat(3)` equivalent to
    `x * 3`) |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat()`](../reference/api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat") | 复制值（`s.str.repeat(3)` 等同于 `x * 3`） |'
- en: '| [`pad()`](../reference/api/pandas.Series.str.pad.html#pandas.Series.str.pad
    "pandas.Series.str.pad") | Add whitespace to left, right, or both sides of strings
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`pad()`](../reference/api/pandas.Series.str.pad.html#pandas.Series.str.pad
    "pandas.Series.str.pad") | 在字符串的左侧、右侧或两侧添加空格 |'
- en: '| [`center()`](../reference/api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center") | Equivalent to `str.center` |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`center()`](../reference/api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center") | 等同于 `str.center` |'
- en: '| [`ljust()`](../reference/api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust") | Equivalent to `str.ljust` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`ljust()`](../reference/api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust") | 等同于 `str.ljust` |'
- en: '| [`rjust()`](../reference/api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust") | Equivalent to `str.rjust` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust()`](../reference/api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust") | 等同于 `str.rjust` |'
- en: '| [`zfill()`](../reference/api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill") | Equivalent to `str.zfill` |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill()`](../reference/api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill") | 等同于 `str.zfill` |'
- en: '| [`wrap()`](../reference/api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap") | Split long strings into lines with length less than
    a given width |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`wrap()`](../reference/api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap") | 将长字符串拆分为长度小于给定宽度的行 |'
- en: '| [`slice()`](../reference/api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice") | Slice each string in the Series |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`slice()`](../reference/api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice") | 对 Series 中的每个字符串进行切片 |'
- en: '| [`slice_replace()`](../reference/api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace") | Replace slice in each string with passed
    value |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`slice_replace()`](../reference/api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace") | 用传递的值替换每个字符串中的切片 |'
- en: '| [`count()`](../reference/api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count") | Count occurrences of pattern |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`count()`](../reference/api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count") | 计算模式的出现次数 |'
- en: '| [`startswith()`](../reference/api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith") | Equivalent to `str.startswith(pat)` for each
    element |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| [`startswith()`](../reference/api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith") | 对每个元素等同于 `str.startswith(pat)` |'
- en: '| [`endswith()`](../reference/api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith") | Equivalent to `str.endswith(pat)` for each element
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith()`](../reference/api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith") | 对每个元素等同于 `str.endswith(pat)` |'
- en: '| [`findall()`](../reference/api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall") | Compute list of all occurrences of pattern/regex
    for each string |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| [`findall()`](../reference/api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall") | 计算每个字符串中模式/正则表达式的所有出现 |'
- en: '| [`match()`](../reference/api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match") | Call `re.match` on each element, returning matched
    groups as list |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`match()`](../reference/api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match") | 对每个元素调用 `re.match`，返回匹配的组列表 |'
- en: '| [`extract()`](../reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract") | Call `re.search` on each element, returning DataFrame
    with one row for each element and one column for each regex capture group |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`extract()`](../reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract") | 对每个元素调用`re.search`，返回一个DataFrame，每个元素一行，每个正则表达式捕获组一列
    |'
- en: '| [`extractall()`](../reference/api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall") | Call `re.findall` on each element, returning
    DataFrame with one row for each match and one column for each regex capture group
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`extractall()`](../reference/api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall") | 对每个元素调用`re.findall`，返回一个DataFrame，每个匹配项一行，每个正则表达式捕获组一列
    |'
- en: '| [`len()`](../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len") | Compute string lengths |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`len()`](../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len") | 计算字符串长度 |'
- en: '| [`strip()`](../reference/api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip") | Equivalent to `str.strip` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`strip()`](../reference/api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip") | 等同于 `str.strip` |'
- en: '| [`rstrip()`](../reference/api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip") | Equivalent to `str.rstrip` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip()`](../reference/api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip") | 等同于 `str.rstrip` |'
- en: '| [`lstrip()`](../reference/api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip") | Equivalent to `str.lstrip` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`lstrip()`](../reference/api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip") | 等同于 `str.lstrip` |'
- en: '| [`partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") | Equivalent to `str.partition` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") | 等同于 `str.partition` |'
- en: '| [`rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") | Equivalent to `str.rpartition` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") | 等同于 `str.rpartition` |'
- en: '| [`lower()`](../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower") | Equivalent to `str.lower` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`lower()`](../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower") | 等同于 `str.lower` |'
- en: '| [`casefold()`](../reference/api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold") | Equivalent to `str.casefold` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`casefold()`](../reference/api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold") | 等同于 `str.casefold` |'
- en: '| [`upper()`](../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper") | Equivalent to `str.upper` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`upper()`](../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper") | 等同于 `str.upper` |'
- en: '| [`find()`](../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") | Equivalent to `str.find` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`find()`](../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") | 等同于 `str.find` |'
- en: '| [`rfind()`](../reference/api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind") | Equivalent to `str.rfind` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind()`](../reference/api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind") | 等同于 `str.rfind` |'
- en: '| [`index()`](../reference/api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index") | Equivalent to `str.index` |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`index()`](../reference/api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index") | 等同于 `str.index` |'
- en: '| [`rindex()`](../reference/api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex") | Equivalent to `str.rindex` |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`rindex()`](../reference/api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex") | 等同于 `str.rindex` |'
- en: '| [`capitalize()`](../reference/api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize") | Equivalent to `str.capitalize` |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`capitalize()`](../reference/api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize") | 等同于 `str.capitalize` |'
- en: '| [`swapcase()`](../reference/api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase") | Equivalent to `str.swapcase` |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase()`](../reference/api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase") | 等同于 `str.swapcase` |'
- en: '| [`normalize()`](../reference/api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize") | Return Unicode normal form. Equivalent to `unicodedata.normalize`
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`normalize()`](../reference/api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize") | 返回Unicode正规形式。等同于`unicodedata.normalize` |'
- en: '| [`translate()`](../reference/api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate") | Equivalent to `str.translate` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`translate()`](../reference/api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate") | 等同于 `str.translate` |'
- en: '| [`isalnum()`](../reference/api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum") | Equivalent to `str.isalnum` |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum()`](../reference/api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum") | 等同于 `str.isalnum` |'
- en: '| [`isalpha()`](../reference/api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha") | Equivalent to `str.isalpha` |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha()`](../reference/api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha") | 等同于 `str.isalpha` |'
- en: '| [`isdigit()`](../reference/api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit") | Equivalent to `str.isdigit` |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit()`](../reference/api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit") | 等同于 `str.isdigit` |'
- en: '| [`isspace()`](../reference/api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace") | Equivalent to `str.isspace` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`isspace()`](../reference/api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace") | 等同于 `str.isspace` |'
- en: '| [`islower()`](../reference/api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower") | Equivalent to `str.islower` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`islower()`](../reference/api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower") | 等同于 `str.islower` |'
- en: '| [`isupper()`](../reference/api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper") | Equivalent to `str.isupper` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`isupper()`](../reference/api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper") | 等同于 `str.isupper` |'
- en: '| [`istitle()`](../reference/api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle") | Equivalent to `str.istitle` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`istitle()`](../reference/api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle") | 等同于 `str.istitle` |'
- en: '| [`isnumeric()`](../reference/api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric") | Equivalent to `str.isnumeric` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`isnumeric()`](../reference/api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric") | 等同于 `str.isnumeric` |'
- en: '| [`isdecimal()`](../reference/api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal") | Equivalent to `str.isdecimal` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal()`](../reference/api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal") | 等同于 `str.isdecimal` |'
- en: '## Text data types'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '## 文本数据类型'
- en: 'There are two ways to store text data in pandas:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中有两种存储文本数据的方式：
- en: '`object` -dtype NumPy array.'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object` -dtype NumPy 数组。'
- en: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") extension type.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") 扩展类型。'
- en: We recommend using [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") to store text data.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")来存储文本数据。
- en: 'Prior to pandas 1.0, `object` dtype was the only option. This was unfortunate
    for many reasons:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 1.0 之前，`object` dtype 是唯一的选择。这在很多方面都是不幸的：
- en: You can accidentally store a *mixture* of strings and non-strings in an `object`
    dtype array. It’s better to have a dedicated dtype.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`object` dtype数组中可能会意外存储字符串和非字符串的*混合*。最好使用专用的dtype。
- en: '`object` dtype breaks dtype-specific operations like [`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes"). There isn’t a clear way to select *just* text
    while excluding non-text but still object-dtype columns.'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object` dtype会破坏dtype特定的操作，比如[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")。没有明确的方法可以仅选择文本而排除非文本但仍为object-dtype的列。'
- en: When reading code, the contents of an `object` dtype array is less clear than
    `'string'`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读代码时，`object` dtype数组的内容不如`'string'`清晰。
- en: Currently, the performance of `object` dtype arrays of strings and [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") are about the same. We expect future enhancements
    to significantly increase the performance and lower the memory overhead of [`StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray").
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`object` dtype 类型的字符串数组和[`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")的性能大致相同。我们期待未来的增强将显著提高[`StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")的性能并降低内存开销。
- en: Warning
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`StringArray` is currently considered experimental. The implementation and
    parts of the API may change without warning.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`StringArray`目前被视为实验性质。实现和部分API可能会在没有警告的情况下发生变化。'
- en: For backwards-compatibility, `object` dtype remains the default type we infer
    a list of strings to
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们推断字符串列表的默认类型仍然是`object` dtype
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: To explicitly request `string` dtype, specify the `dtype`
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确请求`string` dtype，请指定`dtype`
- en: '[PRE59]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Or `astype` after the `Series` or `DataFrame` is created
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Series`或`DataFrame`之后使用`astype`
- en: '[PRE60]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You can also use [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")/`"string"` as the dtype on non-string data and it will be
    converted to `string` dtype:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在非字符串数据上使用[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")/`"string"`作为dtype，它将被转换为`string` dtype：
- en: '[PRE61]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'or convert from existing pandas data:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 或者从现有的pandas数据转换：
- en: '[PRE62]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '### Behavior differences'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '### 行为差异'
- en: These are places where the behavior of `StringDtype` objects differ from `object`
    dtype
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`StringDtype`对象的行为与`object` dtype不同的地方
- en: For `StringDtype`, [string accessor methods](../reference/series.html#api-series-str)
    that return **numeric** output will always return a nullable integer dtype, rather
    than either int or float dtype, depending on the presence of NA values. Methods
    returning **boolean** output will return a nullable boolean dtype.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`StringDtype`，返回**numeric**输出的[string访问器方法](../reference/series.html#api-series-str)将始终返回可空整数dtype，而不是根据NA值的存在而返回int或float
    dtype。返回**boolean**输出的方法将返回可空布尔dtype。
- en: '[PRE63]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Both outputs are `Int64` dtype. Compare that with object-dtype
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个输出都是`Int64` dtype。与object-dtype进行比较
- en: '[PRE64]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: When NA values are present, the output dtype is float64\. Similarly for methods
    returning boolean values.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当存在NA值时，输出dtype为float64。返回布尔值的方法也是如此。
- en: '[PRE65]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Some string methods, like [`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode") are not available on `StringArray` because `StringArray`
    only holds strings, not bytes.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些字符串方法，比如[`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")在`StringArray`上不可用，因为`StringArray`只保存字符串，而不是字节。
- en: In comparison operations, [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") and `Series` backed by a `StringArray` will return
    an object with [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype"), rather than a `bool` dtype object. Missing values in a
    `StringArray` will propagate in comparison operations, rather than always comparing
    unequal like `numpy.nan`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在比较操作中，[`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")和由`StringArray`支持的`Series`将返回一个带有[`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype")的对象，而不是`bool` dtype对象。在`StringArray`中的缺失值将在比较操作中传播，而不像`numpy.nan`那样总是比较不相等。
- en: 'Everything else that follows in the rest of this document applies equally to
    `string` and `object` dtype.  ### Behavior differences'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档其余部分中的其他内容同样适用于`string`和`object` dtype。### 行为差异
- en: These are places where the behavior of `StringDtype` objects differ from `object`
    dtype
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`StringDtype`对象的行为与`object` dtype不同的地方
- en: For `StringDtype`, [string accessor methods](../reference/series.html#api-series-str)
    that return **numeric** output will always return a nullable integer dtype, rather
    than either int or float dtype, depending on the presence of NA values. Methods
    returning **boolean** output will return a nullable boolean dtype.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`StringDtype`，返回**numeric**输出的[string访问器方法](../reference/series.html#api-series-str)将始终返回可空整数dtype，而不是根据NA值的存在而返回int或float
    dtype。返回**boolean**输出的方法将返回可空布尔dtype。
- en: '[PRE66]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Both outputs are `Int64` dtype. Compare that with object-dtype
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 两个输出都是`Int64` dtype。与object-dtype进行比较
- en: '[PRE67]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: When NA values are present, the output dtype is float64\. Similarly for methods
    returning boolean values.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当存在NA值时，输出dtype为float64。返回布尔值的方法也是如此。
- en: '[PRE68]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Some string methods, like [`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode") are not available on `StringArray` because `StringArray`
    only holds strings, not bytes.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些字符串方法，比如[`Series.str.decode()`](../reference/api/pandas.Series.str.decode.html#pandas.Series.str.decode
    "pandas.Series.str.decode")在`StringArray`上不可用，因为`StringArray`只保存字符串，而不是字节。
- en: In comparison operations, [`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray") and `Series` backed by a `StringArray` will return
    an object with [`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype"), rather than a `bool` dtype object. Missing values in a
    `StringArray` will propagate in comparison operations, rather than always comparing
    unequal like `numpy.nan`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在比较操作中，由`StringArray`支持的[`arrays.StringArray`](../reference/api/pandas.arrays.StringArray.html#pandas.arrays.StringArray
    "pandas.arrays.StringArray")和`Series`将返回一个具有[`BooleanDtype`](../reference/api/pandas.BooleanDtype.html#pandas.BooleanDtype
    "pandas.BooleanDtype")的对象，而不是`bool` dtype对象。在`StringArray`中的缺失值将在比较操作中传播，而不像`numpy.nan`那样总是比较不相等。
- en: Everything else that follows in the rest of this document applies equally to
    `string` and `object` dtype.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档其余部分中的所有内容同样适用于`string`和`object` dtype。
- en: '## String methods'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '## 字符串方法'
- en: 'Series and Index are equipped with a set of string processing methods that
    make it easy to operate on each element of the array. Perhaps most importantly,
    these methods exclude missing/NA values automatically. These are accessed via
    the `str` attribute and generally have names matching the equivalent (scalar)
    built-in string methods:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Series和Index配备了一组字符串处理方法，使得在数组的每个元素上操作变得容易。也许最重要的是，这些方法会自动排除缺失/NA值。这些方法通过`str`属性访问，通常具有与等效（标量）内置字符串方法匹配的名称：
- en: '[PRE69]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The string methods on Index are especially useful for cleaning up or transforming
    DataFrame columns. For instance, you may have columns with leading or trailing
    whitespace:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 索引上的字符串方法特别适用于清理或转换DataFrame列。例如，您可能有带有前导或尾随空格的列：
- en: '[PRE71]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Since `df.columns` is an Index object, we can use the `.str` accessor
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`df.columns`是一个Index对象，我们可以使用`.str`访问器
- en: '[PRE72]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'These string methods can then be used to clean up the columns as needed. Here
    we are removing leading and trailing whitespaces, lower casing all names, and
    replacing any remaining whitespaces with underscores:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用这些字符串方法根据需要清理列。在这里，我们删除前导和尾随空格，将所有���称转换为小写，并用下划线替换任何剩余的空格：
- en: '[PRE73]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have a `Series` where lots of elements are repeated (i.e. the number
    of unique elements in the `Series` is a lot smaller than the length of the `Series`),
    it can be faster to convert the original `Series` to one of type `category` and
    then use `.str.<method>` or `.dt.<property>` on that. The performance difference
    comes from the fact that, for `Series` of type `category`, the string operations
    are done on the `.categories` and not on each element of the `Series`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个`Series`，其中有很多重复的元素（即`Series`中唯一元素的数量远小于`Series`的长度），将原始`Series`转换为`category`类型，然后在其上使用`.str.<method>`或`.dt.<property>`可能会更快。性能差异在于，对于`category`类型的`Series`，字符串操作是在`.categories`上而不是在`Series`的每个元素上进行的。
- en: 'Please note that a `Series` of type `category` with string `.categories` has
    some limitations in comparison to `Series` of type string (e.g. you can’t add
    strings to each other: `s + " " + s` won’t work if `s` is a `Series` of type `category`).
    Also, `.str` methods which operate on elements of type `list` are not available
    on such a `Series`.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，具有字符串`.categories`的`category`类型的`Series`与字符串类型的`Series`相比存在一些限制（例如，如果`s`是`category`类型的`Series`，则无法将字符串添加到彼此：`s
    + " " + s`不起作用）。此外，对`list`类型元素进行操作的`.str`方法在此类`Series`上不可用。
- en: Warning
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The type of the Series is inferred and the allowed types (i.e. strings).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 系列的类型是推断的，允许的类型为（即字符串）。
- en: Generally speaking, the `.str` accessor is intended to work only on strings.
    With very few exceptions, other uses are not supported, and may be disabled at
    a later point.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`.str`访问器仅用于处理字符串。除了极少数例外情况外，不支持其他用途，并且可能在以后被禁用。
- en: '## Splitting and replacing strings'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '## 拆分和替换字符串'
- en: 'Methods like `split` return a Series of lists:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 像`split`这样的方法会返回一个列表的Series：
- en: '[PRE74]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Elements in the split lists can be accessed using `get` or `[]` notation:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`get`或`[]`表示法访问拆分列表中的元素：
- en: '[PRE75]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: It is easy to expand this to return a DataFrame using `expand`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`expand`很容易扩展到返回DataFrame。
- en: '[PRE76]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: When original `Series` has [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype"), the output columns will all be [`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype") as well.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 当原始`Series`具有[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")时，输出列也将全部是[`StringDtype`](../reference/api/pandas.StringDtype.html#pandas.StringDtype
    "pandas.StringDtype")。
- en: 'It is also possible to limit the number of splits:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以限制拆分的数量：
- en: '[PRE77]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '`rsplit` is similar to `split` except it works in the reverse direction, i.e.,
    from the end of the string to the beginning of the string:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`rsplit`类似于`split`，只是它是从字符串的末尾到字符串的开头的方向工作：'
- en: '[PRE78]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '`replace` optionally uses [regular expressions](https://docs.python.org/3/library/re.html):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`可选使用[正则表达式](https://docs.python.org/3/library/re.html)：'
- en: '[PRE79]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Changed in version 2.0.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0���的更改。
- en: 'Single character pattern with `regex=True` will also be treated as regular
    expressions:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`regex=True`的单个字符模式也将被视为正则表达式：
- en: '[PRE80]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'If you want literal replacement of a string (equivalent to [`str.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace
    "(in Python v3.12)")), you can set the optional `regex` parameter to `False`,
    rather than escaping each character. In this case both `pat` and `repl` must be
    strings:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要对字符串进行字面替换（相当于[`str.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace
    "(in Python v3.12)")），可以将可选的`regex`参数设置为`False`，而不是转义每个字符。在这种情况下，`pat`和`repl`都必须是字符串：
- en: '[PRE81]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The `replace` method can also take a callable as replacement. It is called on
    every `pat` using [`re.sub()`](https://docs.python.org/3/library/re.html#re.sub
    "(in Python v3.12)"). The callable should expect one positional argument (a regex
    object) and return a string.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`方法还可以将可调用对象作为替换。它会使用[`re.sub()`](https://docs.python.org/3/library/re.html#re.sub
    "(in Python v3.12)")对每个`pat`进行调用。可调用对象应该期望一个位置参数（一个正则表达式对象）并返回一个字符串。'
- en: '[PRE82]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The `replace` method also accepts a compiled regular expression object from
    [`re.compile()`](https://docs.python.org/3/library/re.html#re.compile "(in Python
    v3.12)") as a pattern. All flags should be included in the compiled regular expression
    object.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace`方法还接受从[`re.compile()`](https://docs.python.org/3/library/re.html#re.compile
    "(in Python v3.12)")编译的正则表达式对象作为模式。所有标志应包含在编译的正则表达式对象中。'
- en: '[PRE83]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Including a `flags` argument when calling `replace` with a compiled regular
    expression object will raise a `ValueError`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用编译的正则表达式对象调用`replace`时包含`flags`参数将引发`ValueError`。
- en: '[PRE84]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '`removeprefix` and `removesuffix` have the same effect as `str.removeprefix`
    and `str.removesuffix` added in Python 3.9 <[https://docs.python.org/3/library/stdtypes.html#str.removeprefix](https://docs.python.org/3/library/stdtypes.html#str.removeprefix)>`__:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeprefix`和`removesuffix`与Python 3.9中添加的`str.removeprefix`和`str.removesuffix`具有相同的效果
    <[https://docs.python.org/3/library/stdtypes.html#str.removeprefix](https://docs.python.org/3/library/stdtypes.html#str.removeprefix)>`__：'
- en: New in version 1.4.0.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.0中的新功能。
- en: '[PRE85]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '## Concatenation'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '## 连接'
- en: There are several ways to concatenate a `Series` or `Index`, either with itself
    or others, all based on [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat"), resp. `Index.str.cat`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以连接`Series`或`Index`，无论是与自身还是其他对象，都基于[`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat")或`Index.str.cat`。
- en: Concatenating a single Series into a string
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将单个Series连接成字符串
- en: 'The content of a `Series` (or `Index`) can be concatenated:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 可以连接`Series`（或`Index`）的内容：
- en: '[PRE86]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If not specified, the keyword `sep` for the separator defaults to the empty
    string, `sep=''''`:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定，分隔符的关键字`sep`默认为空字符串，`sep=''`：
- en: '[PRE87]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'By default, missing values are ignored. Using `na_rep`, they can be given a
    representation:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，缺失值会被忽略。使用`na_rep`，它们可以被赋予一个表示：
- en: '[PRE88]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Concatenating a Series and something list-like into a Series
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Series和类似列表的内容连接成Series
- en: The first argument to [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") can be a list-like object, provided that it matches the
    length of the calling `Series` (or `Index`).
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat")的第一个参数可以是类似列表的对象，只要它与调用的`Series`（或`Index`）的长度匹配。'
- en: '[PRE89]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Missing values on either side will result in missing values in the result as
    well, *unless* `na_rep` is specified:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 任一侧的缺失值也会导致结果中的缺失值，*除非*指定了`na_rep`：
- en: '[PRE90]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Concatenating a Series and something array-like into a Series
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Series和类似数组的内容连接成Series
- en: The parameter `others` can also be two-dimensional. In this case, the number
    or rows must match the lengths of the calling `Series` (or `Index`).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`others`也可以是二维的。在这种情况下，行数必须与调用的`Series`（或`Index`）的长度匹配。
- en: '[PRE91]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Concatenating a Series and an indexed object into a Series, with alignment
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Series和索引对象连接成Series，进行对齐
- en: For concatenation with a `Series` or `DataFrame`, it is possible to align the
    indexes before concatenation by setting the `join`-keyword.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与`Series`或`DataFrame`连接，可以通过设置`join`关键字来在连接之前对齐索引。
- en: '[PRE92]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The usual options are available for `join` (one of `'left', 'outer', 'inner',
    'right'`). In particular, alignment also means that the different lengths do not
    need to coincide anymore.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`的常见选项（其中之一为`'left', 'outer', 'inner', 'right'`）都是可用的。特别是，对齐也意味着不同长度不再需要一致。
- en: '[PRE93]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The same alignment can be used when `others` is a `DataFrame`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当`others`是一个`DataFrame`时，可以使用相同的对齐方式：
- en: '[PRE94]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Concatenating a Series and many objects into a Series
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和多个对象连接成一个Series
- en: 'Several array-like items (specifically: `Series`, `Index`, and 1-dimensional
    variants of `np.ndarray`) can be combined in a list-like container (including
    iterators, `dict`-views, etc.).'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 几个类似数组的项目（具体来说：`Series`，`Index`和`np.ndarray`的一维变体）可以组合在一个类似列表的容器中（包括迭代器，`dict`视图等）。
- en: '[PRE95]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'All elements without an index (e.g. `np.ndarray`) within the passed list-like
    must match in length to the calling `Series` (or `Index`), but `Series` and `Index`
    may have arbitrary length (as long as alignment is not disabled with `join=None`):'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的类似列表中没有索引的所有元素（例如`np.ndarray`）必须与调用的`Series`（或`Index`）的长度匹配，但`Series`和`Index`的长度可以是任意的（只要不使用`join=None`禁用对齐）：
- en: '[PRE96]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'If using `join=''right''` on a list-like of `others` that contains different
    indexes, the union of these indexes will be used as the basis for the final concatenation:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在包含不同索引的`others`列表上使用`join='right'`，则这些索引的并集将被用作最终连接的基础：
- en: '[PRE97]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Concatenating a single Series into a string
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个单独的Series连接成一个字符串
- en: 'The content of a `Series` (or `Index`) can be concatenated:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 可以连接`Series`（或`Index`）的内容：
- en: '[PRE98]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'If not specified, the keyword `sep` for the separator defaults to the empty
    string, `sep=''''`:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定，分隔符的关键字`sep`默认为空字符串，`sep=''`：
- en: '[PRE99]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'By default, missing values are ignored. Using `na_rep`, they can be given a
    representation:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，缺失值会被忽略。使用`na_rep`，它们可以被赋予一个表示：
- en: '[PRE100]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Concatenating a Series and something list-like into a Series
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和类似列表的东西连接成一个Series
- en: The first argument to [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") can be a list-like object, provided that it matches the
    length of the calling `Series` (or `Index`).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat")的第一个参数可以是一个类似列表的对象，只要它与调用的`Series`（或`Index`）的长度匹配即可。'
- en: '[PRE101]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Missing values on either side will result in missing values in the result as
    well, *unless* `na_rep` is specified:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 任一侧的缺失值也会导致结果中的缺失值，*除非*指定了`na_rep`：
- en: '[PRE102]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Concatenating a Series and something array-like into a Series
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和类似数组的东西连接成一个Series
- en: The parameter `others` can also be two-dimensional. In this case, the number
    or rows must match the lengths of the calling `Series` (or `Index`).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`others`也可以是二维的。在这种情况下，行数必须与调用的`Series`（或`Index`）的长度相匹配。
- en: '[PRE103]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Concatenating a Series and an indexed object into a Series, with alignment
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和一个带索引的对象连接成一个Series，带有对齐
- en: For concatenation with a `Series` or `DataFrame`, it is possible to align the
    indexes before concatenation by setting the `join`-keyword.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与`Series`或`DataFrame`连接，可以通过设置`join`关键字来在连接之前对齐索引。
- en: '[PRE104]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The usual options are available for `join` (one of `'left', 'outer', 'inner',
    'right'`). In particular, alignment also means that the different lengths do not
    need to coincide anymore.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`join`的常见选项（其中之一为`'left', 'outer', 'inner', 'right'`）都是可用的。特别是，对齐也意味着不同长度不再需要一致。
- en: '[PRE105]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The same alignment can be used when `others` is a `DataFrame`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当`others`是一个`DataFrame`时，可以使用相同的对齐方式：
- en: '[PRE106]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Concatenating a Series and many objects into a Series
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将一个Series和多个对象连接成一个Series
- en: 'Several array-like items (specifically: `Series`, `Index`, and 1-dimensional
    variants of `np.ndarray`) can be combined in a list-like container (including
    iterators, `dict`-views, etc.).'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 几个类似数组的项目（具体来说：`Series`，`Index`和`np.ndarray`的一维变体）可以组合在一个类似列表的容器中（包括迭代器，`dict`视图等）。
- en: '[PRE107]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'All elements without an index (e.g. `np.ndarray`) within the passed list-like
    must match in length to the calling `Series` (or `Index`), but `Series` and `Index`
    may have arbitrary length (as long as alignment is not disabled with `join=None`):'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 传递的类似列表中没有索引的所有元素（例如`np.ndarray`）必须与调用的`Series`（或`Index`）的长度匹配，但`Series`和`Index`的长度可以是任意的（只要不使用`join=None`禁用对齐）：
- en: '[PRE108]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'If using `join=''right''` on a list-like of `others` that contains different
    indexes, the union of these indexes will be used as the basis for the final concatenation:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在包含不同索引的`others`列表上使用`join='right'`，则这些索引的并集将被用作最终连接的基础：
- en: '[PRE109]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Indexing with `.str`
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`.str`进行索引
- en: You can use `[]` notation to directly index by position locations. If you index
    past the end of the string, the result will be a `NaN`.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `[]` 符号直接按位置索引。如果索引超出字符串的末尾，结果将是一个 `NaN`。
- en: '[PRE110]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Extracting substrings
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取子字符串
- en: '### Extract first match in each subject (extract)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '### 提取每个主题中的第一个匹配项（extract）'
- en: The `extract` method accepts a [regular expression](https://docs.python.org/3/library/re.html)
    with at least one capture group.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract` 方法接受至少一个捕获组的 [正则表达式](https://docs.python.org/3/library/re.html)。'
- en: Extracting a regular expression with more than one group returns a DataFrame
    with one column per group.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 提取具有多个组的正则表达式将返回一个每组一列的 DataFrame。
- en: '[PRE111]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Elements that do not match return a row filled with `NaN`. Thus, a Series of
    messy strings can be “converted” into a like-indexed Series or DataFrame of cleaned-up
    or more useful strings, without necessitating `get()` to access tuples or `re.match`
    objects. The dtype of the result is always object, even if no match is found and
    the result only contains `NaN`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 不匹配的元素返回一个填充有 `NaN` 的行。因此，一系列混乱的字符串可以“转换”为一个具有相同索引的已清理或更有用的字符串的 Series 或 DataFrame，而无需使用
    `get()` 访问元组或 `re.match` 对象。结果的 dtype 始终为 object，即使未找到匹配项，结果仅包含 `NaN`。
- en: Named groups like
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 命名组如
- en: '[PRE112]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: and optional groups like
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 和可选组
- en: '[PRE113]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: can also be used. Note that any capture group names in the regular expression
    will be used for column names; otherwise capture group numbers will be used.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用。请注意，正则表达式中的任何捕获组名称将用于列名；否则将使用捕获组编号。
- en: Extracting a regular expression with one group returns a `DataFrame` with one
    column if `expand=True`.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 提取具有一个组的正则表达式将返回一个列的 DataFrame，如果 `expand=True`。
- en: '[PRE114]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: It returns a Series if `expand=False`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `expand=False`，则返回一个 Series。
- en: '[PRE115]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Calling on an `Index` with a regex with exactly one capture group returns a
    `DataFrame` with one column if `expand=True`.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有正好一个捕获组的正则表达式的 `Index` 调用，如果 `expand=True`，则返回一个列。
- en: '[PRE116]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: It returns an `Index` if `expand=False`.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `expand=False`，则返回一个 `Index`。
- en: '[PRE117]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Calling on an `Index` with a regex with more than one capture group returns
    a `DataFrame` if `expand=True`.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有多个捕获组的正则表达式的 `Index` 调用，如果 `expand=True`，则返回一个 DataFrame。
- en: '[PRE118]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: It raises `ValueError` if `expand=False`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `expand=False`，则引发 `ValueError`。
- en: '[PRE119]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: The table below summarizes the behavior of `extract(expand=False)` (input subject
    in first column, number of groups in regex in first row)
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了 `extract(expand=False)` 的行为（输入主题在第一列，正则表达式中的组数在第一行）
- en: '|  | 1 group | >1 group |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '|  | 1 组 | >1 组 |'
- en: '| Index | Index | ValueError |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| Index | Index | ValueError |'
- en: '| Series | Series | DataFrame |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| Series | Series | DataFrame |'
- en: Extract all matches in each subject (extractall)
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取每个主题中的所有匹配项（extractall）
- en: Unlike `extract` (which returns only the first match),
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 与仅返回第一个匹配项的 `extract` 不同，
- en: '[PRE120]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: the `extractall` method returns every match. The result of `extractall` is always
    a `DataFrame` with a `MultiIndex` on its rows. The last level of the `MultiIndex`
    is named `match` and indicates the order in the subject.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`extractall` 方法返回每个匹配项。`extractall` 的结果始终是一个具有行上的 `MultiIndex` 的 DataFrame。`MultiIndex`
    的最后一级命名为 `match`，表示主题中的顺序。'
- en: '[PRE121]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: When each subject string in the Series has exactly one match,
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Series 中的每个主题字符串恰好有一个匹配项时，
- en: '[PRE122]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: then `extractall(pat).xs(0, level='match')` gives the same result as `extract(pat)`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `extractall(pat).xs(0, level='match')` 给出与 `extract(pat)` 相同的结果。
- en: '[PRE123]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '`Index` also supports `.str.extractall`. It returns a `DataFrame` which has
    the same result as a `Series.str.extractall` with a default index (starts from
    0).'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index` 还支持 `.str.extractall`。它返回一个 `DataFrame`，其结果与具有默认索引（从 0 开始）的 `Series.str.extractall`
    相同。'
- en: '[PRE124]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '### Extract first match in each subject (extract)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '### 提取每个主题中的第一个匹配项（extract）'
- en: The `extract` method accepts a [regular expression](https://docs.python.org/3/library/re.html)
    with at least one capture group.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`extract` 方法接受至少一个捕获组的 [正则表达式](https://docs.python.org/3/library/re.html)。'
- en: Extracting a regular expression with more than one group returns a DataFrame
    with one column per group.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 提取具有多个组的正则表达式将返回一个每组一列的 DataFrame。
- en: '[PRE125]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Elements that do not match return a row filled with `NaN`. Thus, a Series of
    messy strings can be “converted” into a like-indexed Series or DataFrame of cleaned-up
    or more useful strings, without necessitating `get()` to access tuples or `re.match`
    objects. The dtype of the result is always object, even if no match is found and
    the result only contains `NaN`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 不匹配的元素返回一个填充有 `NaN` 的行。因此，一系列混乱的字符串可以“转换”为一个具有相同索引的已清理或更有用的字符串的 Series 或 DataFrame，而无需使用
    `get()` 访问元组或 `re.match` 对象。结果的 dtype 始终为 object，即使未找到匹配项，结果仅包含 `NaN`。
- en: Named groups like
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 命名组如
- en: '[PRE126]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: and optional groups like
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 和可选���
- en: '[PRE127]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: can also be used. Note that any capture group names in the regular expression
    will be used for column names; otherwise capture group numbers will be used.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用。请注意，正则表达式中的任何捕获组名称将用于列名；否则将使用捕获组编号。
- en: Extracting a regular expression with one group returns a `DataFrame` with one
    column if `expand=True`.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个组提取正则表达式，如果`expand=True`，则返回一个列的`DataFrame`。
- en: '[PRE128]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: It returns a Series if `expand=False`.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则返回一个Series。
- en: '[PRE129]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Calling on an `Index` with a regex with exactly one capture group returns a
    `DataFrame` with one column if `expand=True`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有正好一个捕获组的正则表达式调用`Index`，如果`expand=True`，则返回一个列的`DataFrame`。
- en: '[PRE130]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: It returns an `Index` if `expand=False`.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则返回一个`Index`。
- en: '[PRE131]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Calling on an `Index` with a regex with more than one capture group returns
    a `DataFrame` if `expand=True`.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 对具有多个捕获组的正则表达式调用`Index`，如果`expand=True`，则返回一个`DataFrame`。
- en: '[PRE132]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: It raises `ValueError` if `expand=False`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expand=False`，则会引发`ValueError`。
- en: '[PRE133]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: The table below summarizes the behavior of `extract(expand=False)` (input subject
    in first column, number of groups in regex in first row)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了`extract(expand=False)`的行为（第一列为输入主题，第一行为正则表达式中的组数）
- en: '|  | 1 group | >1 group |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '|  | 1组 | >1组 |'
- en: '| Index | Index | ValueError |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| Index | Index | ValueError |'
- en: '| Series | Series | DataFrame |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| Series | Series | DataFrame |'
- en: Extract all matches in each subject (extractall)
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取每个主题中的所有匹配（extractall）
- en: Unlike `extract` (which returns only the first match),
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 与仅返回第一个匹配的`extract`不同，
- en: '[PRE134]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: the `extractall` method returns every match. The result of `extractall` is always
    a `DataFrame` with a `MultiIndex` on its rows. The last level of the `MultiIndex`
    is named `match` and indicates the order in the subject.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`extractall`方法返回每个匹配。`extractall`的结果始终是具有其行上的`MultiIndex`的`DataFrame`。`MultiIndex`的最后一级命名为`match`，表示主题中的顺序。'
- en: '[PRE135]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: When each subject string in the Series has exactly one match,
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 当Series中的每个主题字符串正好有一个匹配时，
- en: '[PRE136]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: then `extractall(pat).xs(0, level='match')` gives the same result as `extract(pat)`.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`extractall(pat).xs(0, level='match')`给出���`extract(pat)`相同的结果。
- en: '[PRE137]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '`Index` also supports `.str.extractall`. It returns a `DataFrame` which has
    the same result as a `Series.str.extractall` with a default index (starts from
    0).'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index`也支持`.str.extractall`。它返回一个`DataFrame`，其结果与具有默认索引（从0开始）的`Series.str.extractall`相同。'
- en: '[PRE138]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Testing for strings that match or contain a pattern
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试匹配或包含模式的字符串
- en: 'You can check whether elements contain a pattern:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查元素是否包含模式：
- en: '[PRE139]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Or whether elements match a pattern:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 或者元素是否匹配模式：
- en: '[PRE140]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Note
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The distinction between `match`, `fullmatch`, and `contains` is strictness:
    `fullmatch` tests whether the entire string matches the regular expression; `match`
    tests whether there is a match of the regular expression that begins at the first
    character of the string; and `contains` tests whether there is a match of the
    regular expression at any position within the string.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`、`fullmatch`和`contains`之间的区别是严格性：`fullmatch`测试整个字符串是否与正则表达式匹配；`match`测试字符串的第一个字符是否有正则表达式的匹配；`contains`测试字符串中是否有正则表达式的匹配。'
- en: The corresponding functions in the `re` package for these three match modes
    are [re.fullmatch](https://docs.python.org/3/library/re.html#re.fullmatch), [re.match](https://docs.python.org/3/library/re.html#re.match),
    and [re.search](https://docs.python.org/3/library/re.html#re.search), respectively.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种匹配模式的`re`包中对应的函数分别是[re.fullmatch](https://docs.python.org/3/library/re.html#re.fullmatch)、[re.match](https://docs.python.org/3/library/re.html#re.match)和[re.search](https://docs.python.org/3/library/re.html#re.search)。
- en: 'Methods like `match`, `fullmatch`, `contains`, `startswith`, and `endswith`
    take an extra `na` argument so missing values can be considered True or False:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`match`、`fullmatch`、`contains`、`startswith`和`endswith`等方法接受额外的`na`参数，以便将缺失值视为True或False：'
- en: '[PRE142]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '## Creating indicator variables'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '## 创建指示变量'
- en: 'You can extract dummy variables from string columns. For example if they are
    separated by a `''|''`:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从字符串列中提取虚拟变量。例如，如果它们由`'|'`分隔：
- en: '[PRE143]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: String `Index` also supports `get_dummies` which returns a `MultiIndex`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串`Index`也支持`get_dummies`，它返回一个`MultiIndex`。
- en: '[PRE144]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: See also [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies").
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies")。
- en: Method summary
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法摘要
- en: '| Method | Description |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") | Concatenate strings |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| [`cat()`](../reference/api/pandas.Series.str.cat.html#pandas.Series.str.cat
    "pandas.Series.str.cat") | 连接字符串 |'
- en: '| [`split()`](../reference/api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split") | Split strings on delimiter |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| [`split()`](../reference/api/pandas.Series.str.split.html#pandas.Series.str.split
    "pandas.Series.str.split") | 在分隔符上拆分字符串 |'
- en: '| [`rsplit()`](../reference/api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit") | Split strings on delimiter working from the end
    of the string |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit()`](../reference/api/pandas.Series.str.rsplit.html#pandas.Series.str.rsplit
    "pandas.Series.str.rsplit") | 在字符串上的分隔符上工作，从字符串的末尾开始分割 |'
- en: '| [`get()`](../reference/api/pandas.Series.str.get.html#pandas.Series.str.get
    "pandas.Series.str.get") | Index into each element (retrieve i-th element) |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| [`get()`](../reference/api/pandas.Series.str.get.html#pandas.Series.str.get
    "pandas.Series.str.get") | 索引到每个元素（检索第i个元素） |'
- en: '| [`join()`](../reference/api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join") | Join strings in each element of the Series with passed
    separator |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| [`join()`](../reference/api/pandas.Series.str.join.html#pandas.Series.str.join
    "pandas.Series.str.join") | 使用传递的分隔符将Series中每个元素的字符串连接起来 |'
- en: '| [`get_dummies()`](../reference/api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies") | Split strings on the delimiter returning DataFrame
    of dummy variables |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| [`get_dummies()`](../reference/api/pandas.Series.str.get_dummies.html#pandas.Series.str.get_dummies
    "pandas.Series.str.get_dummies") | 在分隔符上拆分字符串，返回虚拟变量的DataFrame |'
- en: '| [`contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") | Return boolean array if each string contains pattern/regex
    |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| [`contains()`](../reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains
    "pandas.Series.str.contains") | 如果每个字符串包含模式/正则表达式，则返回布尔数组 |'
- en: '| [`replace()`](../reference/api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace") | Replace occurrences of pattern/regex/string with
    some other string or the return value of a callable given the occurrence |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| [`replace()`](../reference/api/pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace") | 用其他字符串或可调用函数的返回值替换模式/正则表达式/字符串的出现 |'
- en: '| [`removeprefix()`](../reference/api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix") | Remove prefix from string, i.e. only remove
    if string starts with prefix. |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| [`removeprefix()`](../reference/api/pandas.Series.str.removeprefix.html#pandas.Series.str.removeprefix
    "pandas.Series.str.removeprefix") | 从字符串中删除前缀，即仅在字符串以前缀开头时才删除。 |'
- en: '| [`removesuffix()`](../reference/api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix") | Remove suffix from string, i.e. only remove
    if string ends with suffix. |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| [`removesuffix()`](../reference/api/pandas.Series.str.removesuffix.html#pandas.Series.str.removesuffix
    "pandas.Series.str.removesuffix") | 从字符串中删除后缀，即仅在字符串以后缀结尾时才删除。 |'
- en: '| [`repeat()`](../reference/api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat") | Duplicate values (`s.str.repeat(3)` equivalent to
    `x * 3`) |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat()`](../reference/api/pandas.Series.str.repeat.html#pandas.Series.str.repeat
    "pandas.Series.str.repeat") | 复制值（`s.str.repeat(3)`等同于`x * 3`） |'
- en: '| [`pad()`](../reference/api/pandas.Series.str.pad.html#pandas.Series.str.pad
    "pandas.Series.str.pad") | Add whitespace to left, right, or both sides of strings
    |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| [`pad()`](../reference/api/pandas.Series.str.pad.html#pandas.Series.str.pad
    "pandas.Series.str.pad") | 在字符串的左侧、右侧或两侧添加空格 |'
- en: '| [`center()`](../reference/api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center") | Equivalent to `str.center` |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`center()`](../reference/api/pandas.Series.str.center.html#pandas.Series.str.center
    "pandas.Series.str.center") | 等同于`str.center` |'
- en: '| [`ljust()`](../reference/api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust") | Equivalent to `str.ljust` |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| [`ljust()`](../reference/api/pandas.Series.str.ljust.html#pandas.Series.str.ljust
    "pandas.Series.str.ljust") | 等同于`str.ljust` |'
- en: '| [`rjust()`](../reference/api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust") | Equivalent to `str.rjust` |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust()`](../reference/api/pandas.Series.str.rjust.html#pandas.Series.str.rjust
    "pandas.Series.str.rjust") | 等同于`str.rjust` |'
- en: '| [`zfill()`](../reference/api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill") | Equivalent to `str.zfill` |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill()`](../reference/api/pandas.Series.str.zfill.html#pandas.Series.str.zfill
    "pandas.Series.str.zfill") | 等同于`str.zfill` |'
- en: '| [`wrap()`](../reference/api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap") | Split long strings into lines with length less than
    a given width |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`wrap()`](../reference/api/pandas.Series.str.wrap.html#pandas.Series.str.wrap
    "pandas.Series.str.wrap") | 将长字符串拆分为长度小于给定宽度的行 |'
- en: '| [`slice()`](../reference/api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice") | Slice each string in the Series |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`slice()`](../reference/api/pandas.Series.str.slice.html#pandas.Series.str.slice
    "pandas.Series.str.slice") | 切片Series中的每个字符串 |'
- en: '| [`slice_replace()`](../reference/api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace") | Replace slice in each string with passed
    value |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`slice_replace()`](../reference/api/pandas.Series.str.slice_replace.html#pandas.Series.str.slice_replace
    "pandas.Series.str.slice_replace") | 用传递的值替换每个字符串中的切片 |'
- en: '| [`count()`](../reference/api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count") | Count occurrences of pattern |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`count()`](../reference/api/pandas.Series.str.count.html#pandas.Series.str.count
    "pandas.Series.str.count") | 计算模式出现的次数 |'
- en: '| [`startswith()`](../reference/api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith") | Equivalent to `str.startswith(pat)` for each
    element |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [`startswith()`](../reference/api/pandas.Series.str.startswith.html#pandas.Series.str.startswith
    "pandas.Series.str.startswith") | 对每个元素等同于`str.startswith(pat)` |'
- en: '| [`endswith()`](../reference/api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith") | Equivalent to `str.endswith(pat)` for each element
    |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith()`](../reference/api/pandas.Series.str.endswith.html#pandas.Series.str.endswith
    "pandas.Series.str.endswith") | 对每个元素等同于`str.endswith(pat)` |'
- en: '| [`findall()`](../reference/api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall") | Compute list of all occurrences of pattern/regex
    for each string |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`findall()`](../reference/api/pandas.Series.str.findall.html#pandas.Series.str.findall
    "pandas.Series.str.findall") | 计算每个字符串的模式/正则表达式的所有出现的列表 |'
- en: '| [`match()`](../reference/api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match") | Call `re.match` on each element, returning matched
    groups as list |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| [`match()`](../reference/api/pandas.Series.str.match.html#pandas.Series.str.match
    "pandas.Series.str.match") | 对每个元素调用`re.match`，返回匹配的组成列表 |'
- en: '| [`extract()`](../reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract") | Call `re.search` on each element, returning DataFrame
    with one row for each element and one column for each regex capture group |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| [`extract()`](../reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract
    "pandas.Series.str.extract") | 对每个元素调用`re.search`，返回一个DataFrame，每个元素一行，每个正则表达式捕获组一列
    |'
- en: '| [`extractall()`](../reference/api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall") | Call `re.findall` on each element, returning
    DataFrame with one row for each match and one column for each regex capture group
    |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [`extractall()`](../reference/api/pandas.Series.str.extractall.html#pandas.Series.str.extractall
    "pandas.Series.str.extractall") | 对每个元素调用`re.findall`，返回一个DataFrame，每个匹配一行，每个正则表达式捕获组一列
    |'
- en: '| [`len()`](../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len") | Compute string lengths |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| [`len()`](../reference/api/pandas.Series.str.len.html#pandas.Series.str.len
    "pandas.Series.str.len") | 计算字符串长度 |'
- en: '| [`strip()`](../reference/api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip") | Equivalent to `str.strip` |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| [`strip()`](../reference/api/pandas.Series.str.strip.html#pandas.Series.str.strip
    "pandas.Series.str.strip") | 等同于`str.strip` |'
- en: '| [`rstrip()`](../reference/api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip") | Equivalent to `str.rstrip` |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip()`](../reference/api/pandas.Series.str.rstrip.html#pandas.Series.str.rstrip
    "pandas.Series.str.rstrip") | 等同于`str.rstrip` |'
- en: '| [`lstrip()`](../reference/api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip") | Equivalent to `str.lstrip` |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| [`lstrip()`](../reference/api/pandas.Series.str.lstrip.html#pandas.Series.str.lstrip
    "pandas.Series.str.lstrip") | 等同于`str.lstrip` |'
- en: '| [`partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") | Equivalent to `str.partition` |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| [`partition()`](../reference/api/pandas.Series.str.partition.html#pandas.Series.str.partition
    "pandas.Series.str.partition") | 等同于`str.partition` |'
- en: '| [`rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") | Equivalent to `str.rpartition` |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| [`rpartition()`](../reference/api/pandas.Series.str.rpartition.html#pandas.Series.str.rpartition
    "pandas.Series.str.rpartition") | 等同于`str.rpartition` |'
- en: '| [`lower()`](../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower") | Equivalent to `str.lower` |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| [`lower()`](../reference/api/pandas.Series.str.lower.html#pandas.Series.str.lower
    "pandas.Series.str.lower") | 等同于`str.lower` |'
- en: '| [`casefold()`](../reference/api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold") | Equivalent to `str.casefold` |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| [`casefold()`](../reference/api/pandas.Series.str.casefold.html#pandas.Series.str.casefold
    "pandas.Series.str.casefold") | 等同于`str.casefold` |'
- en: '| [`upper()`](../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper") | Equivalent to `str.upper` |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
  zh: '| [`upper()`](../reference/api/pandas.Series.str.upper.html#pandas.Series.str.upper
    "pandas.Series.str.upper") | 等同于`str.upper` |'
- en: '| [`find()`](../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") | Equivalent to `str.find` |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| [`find()`](../reference/api/pandas.Series.str.find.html#pandas.Series.str.find
    "pandas.Series.str.find") | 等同于 `str.find` |'
- en: '| [`rfind()`](../reference/api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind") | Equivalent to `str.rfind` |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind()`](../reference/api/pandas.Series.str.rfind.html#pandas.Series.str.rfind
    "pandas.Series.str.rfind") | 等同于 `str.rfind` |'
- en: '| [`index()`](../reference/api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index") | Equivalent to `str.index` |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| [`index()`](../reference/api/pandas.Series.str.index.html#pandas.Series.str.index
    "pandas.Series.str.index") | 等同于 `str.index` |'
- en: '| [`rindex()`](../reference/api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex") | Equivalent to `str.rindex` |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| [`rindex()`](../reference/api/pandas.Series.str.rindex.html#pandas.Series.str.rindex
    "pandas.Series.str.rindex") | 等同于 `str.rindex` |'
- en: '| [`capitalize()`](../reference/api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize") | Equivalent to `str.capitalize` |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| [`capitalize()`](../reference/api/pandas.Series.str.capitalize.html#pandas.Series.str.capitalize
    "pandas.Series.str.capitalize") | 等同于 `str.capitalize` |'
- en: '| [`swapcase()`](../reference/api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase") | Equivalent to `str.swapcase` |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase()`](../reference/api/pandas.Series.str.swapcase.html#pandas.Series.str.swapcase
    "pandas.Series.str.swapcase") | 等同于 `str.swapcase` |'
- en: '| [`normalize()`](../reference/api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize") | Return Unicode normal form. Equivalent to `unicodedata.normalize`
    |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| [`normalize()`](../reference/api/pandas.Series.str.normalize.html#pandas.Series.str.normalize
    "pandas.Series.str.normalize") | 返回 Unicode 正规形式。等同于 `unicodedata.normalize` |'
- en: '| [`translate()`](../reference/api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate") | Equivalent to `str.translate` |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| [`translate()`](../reference/api/pandas.Series.str.translate.html#pandas.Series.str.translate
    "pandas.Series.str.translate") | 等同于 `str.translate` |'
- en: '| [`isalnum()`](../reference/api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum") | Equivalent to `str.isalnum` |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum()`](../reference/api/pandas.Series.str.isalnum.html#pandas.Series.str.isalnum
    "pandas.Series.str.isalnum") | 等同于 `str.isalnum` |'
- en: '| [`isalpha()`](../reference/api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha") | Equivalent to `str.isalpha` |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha()`](../reference/api/pandas.Series.str.isalpha.html#pandas.Series.str.isalpha
    "pandas.Series.str.isalpha") | 等同于 `str.isalpha` |'
- en: '| [`isdigit()`](../reference/api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit") | Equivalent to `str.isdigit` |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit()`](../reference/api/pandas.Series.str.isdigit.html#pandas.Series.str.isdigit
    "pandas.Series.str.isdigit") | 等同于 `str.isdigit` |'
- en: '| [`isspace()`](../reference/api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace") | Equivalent to `str.isspace` |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| [`isspace()`](../reference/api/pandas.Series.str.isspace.html#pandas.Series.str.isspace
    "pandas.Series.str.isspace") | 等同于 `str.isspace` |'
- en: '| [`islower()`](../reference/api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower") | Equivalent to `str.islower` |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| [`islower()`](../reference/api/pandas.Series.str.islower.html#pandas.Series.str.islower
    "pandas.Series.str.islower") | 等同于 `str.islower` |'
- en: '| [`isupper()`](../reference/api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper") | Equivalent to `str.isupper` |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| [`isupper()`](../reference/api/pandas.Series.str.isupper.html#pandas.Series.str.isupper
    "pandas.Series.str.isupper") | 等同于 `str.isupper` |'
- en: '| [`istitle()`](../reference/api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle") | Equivalent to `str.istitle` |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
  zh: '| [`istitle()`](../reference/api/pandas.Series.str.istitle.html#pandas.Series.str.istitle
    "pandas.Series.str.istitle") | 等同于 `str.istitle` |'
- en: '| [`isnumeric()`](../reference/api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric") | Equivalent to `str.isnumeric` |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| [`isnumeric()`](../reference/api/pandas.Series.str.isnumeric.html#pandas.Series.str.isnumeric
    "pandas.Series.str.isnumeric") | 等同于 `str.isnumeric` |'
- en: '| [`isdecimal()`](../reference/api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal") | Equivalent to `str.isdecimal` |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal()`](../reference/api/pandas.Series.str.isdecimal.html#pandas.Series.str.isdecimal
    "pandas.Series.str.isdecimal") | 等同于 `str.isdecimal` |'
