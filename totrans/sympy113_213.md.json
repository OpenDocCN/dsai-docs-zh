["```py\nclass sympy.physics.quantum.operator.DifferentialOperator(*args, **kwargs)\n```", "```py\n>>> from sympy import Derivative, Function, Symbol\n>>> from sympy.physics.quantum.operator import DifferentialOperator\n>>> from sympy.physics.quantum.state import Wavefunction\n>>> from sympy.physics.quantum.qapply import qapply\n>>> f = Function('f')\n>>> x = Symbol('x')\n>>> d = DifferentialOperator(1/x*Derivative(f(x), x), f(x))\n>>> w = Wavefunction(x**2, x)\n>>> d.function\nf(x)\n>>> d.variables\n(x,)\n>>> qapply(d*w)\nWavefunction(2, x) \n```", "```py\nproperty expr\n```", "```py\n>>> from sympy.physics.quantum.operator import DifferentialOperator\n>>> from sympy import Function, Symbol, Derivative\n>>> x = Symbol('x')\n>>> f = Function('f')\n>>> d = DifferentialOperator(Derivative(f(x), x), f(x))\n>>> d.expr\nDerivative(f(x), x)\n>>> y = Symbol('y')\n>>> d = DifferentialOperator(Derivative(f(x, y), x) +\n...                          Derivative(f(x, y), y), f(x, y))\n>>> d.expr\nDerivative(f(x, y), x) + Derivative(f(x, y), y) \n```", "```py\nproperty free_symbols\n```", "```py\nproperty function\n```", "```py\n>>> from sympy.physics.quantum.operator import DifferentialOperator\n>>> from sympy import Function, Symbol, Derivative\n>>> x = Symbol('x')\n>>> f = Function('f')\n>>> d = DifferentialOperator(Derivative(f(x), x), f(x))\n>>> d.function\nf(x)\n>>> y = Symbol('y')\n>>> d = DifferentialOperator(Derivative(f(x, y), x) +\n...                          Derivative(f(x, y), y), f(x, y))\n>>> d.function\nf(x, y) \n```", "```py\nproperty variables\n```", "```py\n>>> from sympy.physics.quantum.operator import DifferentialOperator\n>>> from sympy import Symbol, Function, Derivative\n>>> x = Symbol('x')\n>>> f = Function('f')\n>>> d = DifferentialOperator(1/x*Derivative(f(x), x), f(x))\n>>> d.variables\n(x,)\n>>> y = Symbol('y')\n>>> d = DifferentialOperator(Derivative(f(x, y), x) +\n...                          Derivative(f(x, y), y), f(x, y))\n>>> d.variables\n(x, y) \n```", "```py\nclass sympy.physics.quantum.operator.HermitianOperator(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import Dagger, HermitianOperator\n>>> H = HermitianOperator('H')\n>>> Dagger(H)\nH \n```", "```py\nclass sympy.physics.quantum.operator.IdentityOperator(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import IdentityOperator\n>>> IdentityOperator()\nI \n```", "```py\nclass sympy.physics.quantum.operator.Operator(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import Operator\n>>> from sympy import I\n>>> A = Operator('A')\n>>> A\nA\n>>> A.hilbert_space\nH\n>>> A.label\n(A,)\n>>> A.is_commutative\nFalse \n```", "```py\n>>> B = Operator('B')\n>>> C = 2*A*A + I*B\n>>> C\n2*A**2 + I*B \n```", "```py\n>>> A.is_commutative\nFalse\n>>> B.is_commutative\nFalse\n>>> A*B == B*A\nFalse \n```", "```py\n>>> e = (A+B)**3\n>>> e.expand()\nA*B*A + A*B**2 + A**2*B + A**3 + B*A*B + B*A**2 + B**2*A + B**3 \n```", "```py\n>>> A.inv()\nA**(-1)\n>>> A*A.inv()\n1 \n```", "```py\nclass sympy.physics.quantum.operator.OuterProduct(*args, **old_assumptions)\n```", "```py\n>>> from sympy.physics.quantum import Ket, Bra, OuterProduct, Dagger\n>>> from sympy.physics.quantum import Operator\n\n>>> k = Ket('k')\n>>> b = Bra('b')\n>>> op = OuterProduct(k, b)\n>>> op\n|k><b|\n>>> op.hilbert_space\nH\n>>> op.ket\n|k>\n>>> op.bra\n<b|\n>>> Dagger(op)\n|b><k| \n```", "```py\n>>> k*b\n|k><b| \n```", "```py\n>>> A = Operator('A')\n>>> A*k*b\nA*|k>*<b| \n```", "```py\n>>> A*(k*b)\nA*|k><b| \n```", "```py\nproperty bra\n```", "```py\nproperty ket\n```", "```py\nclass sympy.physics.quantum.operator.UnitaryOperator(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum import Dagger, UnitaryOperator\n>>> U = UnitaryOperator('U')\n>>> U*Dagger(U)\n1 \n```"]