- en: numpy.matmul
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.matmul.html](https://numpy.org/doc/1.26/reference/generated/numpy.matmul.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Matrix product of two arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1, x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input arrays, scalars not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that matches the signature *(n,k),(k,m)->(n,m)*. If not provided or None, a freshly-allocated
    array is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.16: Now handles ufunc kwargs'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The matrix product of the inputs. This is a scalar only when both x1, x2 are
    1-d vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If the last dimension of *x1* is not the same size as the second-to-last dimension
    of *x2*.
  prefs: []
  type: TYPE_NORMAL
- en: If a scalar value is passed in.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`vdot`](numpy.vdot.html#numpy.vdot "numpy.vdot")'
  prefs: []
  type: TYPE_NORMAL
- en: Complex-conjugating dot product.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tensordot`](numpy.tensordot.html#numpy.tensordot "numpy.tensordot")'
  prefs: []
  type: TYPE_NORMAL
- en: Sum products over arbitrary axes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`einsum`](numpy.einsum.html#numpy.einsum "numpy.einsum")'
  prefs: []
  type: TYPE_NORMAL
- en: Einstein summation convention.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dot`](numpy.dot.html#numpy.dot "numpy.dot")'
  prefs: []
  type: TYPE_NORMAL
- en: alternative matrix product with different broadcasting rules.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The behavior depends on the arguments in the following way.
  prefs: []
  type: TYPE_NORMAL
- en: If both arguments are 2-D they are multiplied like conventional matrices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If either argument is N-D, N > 2, it is treated as a stack of matrices residing
    in the last two indexes and broadcast accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to
    its dimensions. After matrix multiplication the prepended 1 is removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the second argument is 1-D, it is promoted to a matrix by appending a 1 to
    its dimensions. After matrix multiplication the appended 1 is removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matmul` differs from `dot` in two important ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiplication by scalars is not allowed, use `*` instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stacks of matrices are broadcast together as if the matrices were elements,
    respecting the signature `(n,k),(k,m)->(n,m)`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The matmul function implements the semantics of the `@` operator introduced
    in Python 3.5 following [**PEP 465**](https://peps.python.org/pep-0465/).
  prefs: []
  type: TYPE_NORMAL
- en: It uses an optimized BLAS library when possible (see [`numpy.linalg`](../routines.linalg.html#module-numpy.linalg
    "numpy.linalg")).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For 2-D arrays it is the matrix product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For 2-D mixed with 1-D, the result is the usual.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Broadcasting is conventional for stacks of arrays
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Vector, vector returns the scalar inner product, but neither argument is complex-conjugated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Scalar multiplication raises an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `@` operator can be used as a shorthand for `np.matmul` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
