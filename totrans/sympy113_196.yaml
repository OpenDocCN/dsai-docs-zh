- en: Wrapping Geometry (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/api/wrapping_geometry.html](https://docs.sympy.org/latest/modules/physics/mechanics/api/wrapping_geometry.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Geometry objects for use by wrapping pathways.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A solid (infinite) cylindrical object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**radius** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The radius of the cylinder.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: A point through which the cylinder’s axis passes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The axis along which the cylinder is aligned.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A wrapping geometry that allows for circular arcs to be defined between pairs
    of points. These paths are always geodetic (the shortest possible) in the sense
    that they will be a straight line on the unwrapped cylinder’s surface. However,
    it is also possible for a direction to be specified, i.e. paths can be influenced
    such that they either wrap along the shortest side or the longest side of the
    cylinder. To define these directions, rotations are in the positive direction
    following the right-hand rule.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `WrappingCylinder` instance, a `Symbol` denoting its radius, a
    `Vector` defining its axis, and a `Point` through which its axis passes are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A cylinder with radius `r`, and axis parallel to `N.x` passing through `pO`
    can be instantiated with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`WrappingSphere`](#sympy.physics.mechanics.wrapping_geometry.WrappingSphere
    "sympy.physics.mechanics.wrapping_geometry.WrappingSphere")'
  prefs: []
  type: TYPE_NORMAL
- en: Spherical geometry where the wrapping direction is always geodetic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Axis along which the cylinder is aligned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The vectors parallel to the geodesic at the two end points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point from which the geodesic originates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point at which the geodesic terminates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The shortest distance between two points on a geometry’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Point from which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Point to which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The geodesic length, i.e. the shortest arc along the surface of a cylinder,
    connecting two points. It can be calculated using Pythagoras’ theorem. The first
    short side is the distance between the two points on the cylinder’s surface parallel
    to the cylinder’s axis. The second short side is the arc of a circle between the
    two points of the cylinder’s surface perpendicular to the cylinder’s axis. The
    resulting hypotenuse is the geodesic length.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A geodesic length can only be calculated between two points on the cylinder’s
    surface. Firstly, a `WrappingCylinder` instance must be created along with two
    points that will lie on its surface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s assume that `p1` is located at `N.x + r*N.y` relative to `pO` and that
    `p2` is located at `r*(cos(q)*N.y + sin(q)*N.z)` relative to `pO`, where `q(t)`
    is a generalized coordinate specifying the angle rotated around the `N.x` axis
    according to the right-hand rule where `N.y` is zero. These positions can be set
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The geodesic length, which is in this case a is the hypotenuse of a right triangle
    where the other two side lengths are `1` (parallel to the cylinder’s axis) and
    `r*q(t)` (parallel to the cylinder’s cross section), can be calculated using the
    `geodesic_length` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If the `geodesic_length` method is passed an argument `Point` that doesn’t lie
    on the sphere’s surface then a `ValueError` is raised because it’s not possible
    to calculate a value in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A point through which the cylinder’s axis passes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if a point is on the cylinder’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point for which it’s to be ascertained if it’s on the cylinder’s surface
    or not. This point’s position relative to the cylinder’s axis must be a simple
    expression involving the radius of the sphere, otherwise this check will likely
    not work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Radius of the cylinder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for all geometry classes to inherit from.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class cannot be directly instantiated by users. However, it
    can be used to created custom geometry types through subclassing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The vectors parallel to the geodesic at the two end points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point from which the geodesic originates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point at which the geodesic terminates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shortest distance between two points on a geometry’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point from which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point to which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The point with which the geometry is associated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if a point is on the geometry’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point for which it’s to be ascertained if it’s on the geometry’s surface
    or not.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: A solid spherical object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**radius** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Radius of the sphere. This symbol must represent a value that is positive and
    constant, i.e. it cannot be a dynamic symbol, nor can it be an expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: A point at which the sphere is centered.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A wrapping geometry that allows for circular arcs to be defined between pairs
    of points. These paths are always geodetic (the shortest possible).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `WrappingSphere` instance, a `Symbol` denoting its radius and `Point`
    at which its center will be located are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A sphere with radius `r` centered on `pO` can be instantiated with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`WrappingCylinder`](#sympy.physics.mechanics.wrapping_geometry.WrappingCylinder
    "sympy.physics.mechanics.wrapping_geometry.WrappingCylinder")'
  prefs: []
  type: TYPE_NORMAL
- en: Cylindrical geometry where the wrapping direction can be defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The vectors parallel to the geodesic at the two end points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point from which the geodesic originates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point at which the geodesic terminates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns the shortest distance between two points on the sphere’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Point from which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**point_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Point to which the geodesic length should be calculated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The geodesic length, i.e. the shortest arc along the surface of a sphere, connecting
    two points can be calculated using the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: \[l = \arccos\left(\mathbf{v}_1 \cdot \mathbf{v}_2\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\mathbf{v}_1\) and \(\mathbf{v}_2\) are the unit vectors from the sphere’s
    center to the first and second points on the sphere’s surface respectively. Note
    that the actual path that the geodesic will take is undefined when the two points
    are directly opposite one another.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A geodesic length can only be calculated between two points on the sphere’s
    surface. Firstly, a `WrappingSphere` instance must be created along with two points
    that will lie on its surface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s assume that `p1` lies at a distance of `r` in the `N.x` direction from
    `pO` and that `p2` is located on the sphere’s surface in the `N.y + N.z` direction
    from `pO`. These positions can be set with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The geodesic length, which is in this case is a quarter of the sphere’s circumference,
    can be calculated using the `geodesic_length` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If the `geodesic_length` method is passed an argument, the `Point` that doesn’t
    lie on the sphere’s surface then a `ValueError` is raised because it’s not possible
    to calculate a value in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A point on which the sphere is centered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if a point is on the sphere’s surface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: The point for which it’s to be ascertained if it’s on the sphere’s surface or
    not. This point’s position relative to the sphere’s center must be a simple expression
    involving the radius of the sphere, otherwise this check will likely not work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Radius of the sphere.
  prefs: []
  type: TYPE_NORMAL
