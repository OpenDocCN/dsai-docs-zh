- en: numpy.fromstring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fromstring.html](https://numpy.org/doc/1.26/reference/generated/numpy.fromstring.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A new 1-D array initialized from text data in a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**string**str'
  prefs: []
  type: TYPE_NORMAL
- en: A string containing the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data type of the array; default: float. For binary input data, the data
    must be in exactly this format. Most builtin numeric types are supported and extension
    types may be supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.18.0: Complex dtypes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**count**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Read this number of [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype") elements
    from the data. If this is negative (the default), the count will be determined
    from the length of the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**sep**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The string separating numbers in the data; extra whitespace between elements
    is also ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.14: Passing `sep=''''`, the default, is deprecated
    since it will trigger the deprecated binary mode of this function. This mode interprets
    [`string`](https://docs.python.org/3/library/string.html#module-string "(in Python
    v3.11)") as binary bytes, rather than ASCII text with decimal numbers, an operation
    which is better spelt `frombuffer(string, dtype, count)`. If [`string`](https://docs.python.org/3/library/string.html#module-string
    "(in Python v3.11)") contains unicode text, the binary mode of [`fromstring`](#numpy.fromstring
    "numpy.fromstring") will first encode it into bytes using utf-8, which will not
    produce sane results.'
  prefs: []
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arr**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The constructed array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If the string is not the correct size to satisfy the requested [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") and *count*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`frombuffer`](numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer"),
    [`fromfile`](numpy.fromfile.html#numpy.fromfile "numpy.fromfile"), [`fromiter`](numpy.fromiter.html#numpy.fromiter
    "numpy.fromiter")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
