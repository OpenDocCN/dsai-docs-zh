- en: Joints Framework in Physics/Mechanics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物理/力学中的关节框架
- en: Original text：[https://docs.sympy.org/latest/modules/physics/mechanics/joints.html](https://docs.sympy.org/latest/modules/physics/mechanics/joints.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/mechanics/joints.html](https://docs.sympy.org/latest/modules/physics/mechanics/joints.html)
- en: '[`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")
    provides a joints framework. This system consists of two parts. The first are
    the [`joints`](api/joint.html#module-sympy.physics.mechanics.joint "sympy.physics.mechanics.joint")
    themselves, which are used to create connections between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody"). The second part is the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System"), which is used to form the equations
    of motion. Both of these parts are doing what we can call “book-keeping”: keeping
    track of the relationships between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody").'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.physics.mechanics`](index.html#module-sympy.physics.mechanics "sympy.physics.mechanics")
    提供了一个关节框架。这个系统由两部分组成。第一部分是关节 [`joints`](api/joint.html#module-sympy.physics.mechanics.joint
    "sympy.physics.mechanics.joint") 本身，用于创建 [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") 之间的连接。第二部分是 [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System")，用于形成运动方程。这两部分都在进行所谓的“簿记”，跟踪 [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") 之间的关系。'
- en: Joints in Physics/Mechanics
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理/力学中的关节
- en: The general task of the [`joints`](api/joint.html#module-sympy.physics.mechanics.joint
    "sympy.physics.mechanics.joint") is creating kinematic relationships between [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody"). A joint is generally described
    as shown in the image below.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`joints`](api/joint.html#module-sympy.physics.mechanics.joint "sympy.physics.mechanics.joint")
    的一般任务是创建 [`bodies`](api/part_bod.html#sympy.physics.mechanics.rigidbody.RigidBody
    "sympy.physics.mechanics.rigidbody.RigidBody") 之间的运动关系。如下图所示，关节通常描述如下。'
- en: '[![../../../_images/joint_explanation.svg](../Images/87632518439056224e13d474ebbe991d.png)](../../../_images/joint_explanation.svg)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[![../../../_images/joint_explanation.svg](../Images/87632518439056224e13d474ebbe991d.png)](../../../_images/joint_explanation.svg)'
- en: 'As can be seen in this image, each joint needs several objects in order to
    define the relationships. First off it needs two bodies: the parent body (shown
    in green) and the child body (shown in blue). The transformation made by the joint
    is defined between the joint attachments of both bodies. A joint attachment of
    a body consists of a point and a body-fixed frame. In the parent body the point
    is called `parent_point` and the frame `parent_interframe`. For the child body
    these are called `child_point` and `child_interframe`. For most joints it is the
    case that when the generalized coordinates are zero, that there is no rotation
    or translation between the parent and child joint attachments. So the `child_point`
    is at the same location as the `parent_point` and the `child_interframe` is in
    the same orientation as the `parent_interframe`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这幅图所示，每个关节都需要多个对象来定义它们之间的关系。首先，它需要两个物体：父物体（绿色显示）和子物体（蓝色显示）。关节所做的转换是在两个物体的关节附着之间定义的。物体的关节附着由点和固定于物体的坐标系组成。在父物体中，这个点称为`parent_point`，坐标系称为`parent_interframe`。在子物体中，它们分别称为`child_point`和`child_interframe`。对于大多数关节而言，当广义坐标为零时，父物体和子物体的关节附着之间没有旋转或平移。因此，`child_point`与`parent_point`位于相同位置，`child_interframe`与`parent_interframe`具有相同的方向。
- en: For describing the joint transformation the joint generally needs [`dynamicsymbols()`](../vector/api/functions.html#sympy.physics.vector.dynamicsymbols
    "sympy.physics.vector.dynamicsymbols") for the generalized coordinates and speeds.
    Some joints like the [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint"), [`PrismaticJoint`](api/joint.html#sympy.physics.mechanics.joint.PrismaticJoint
    "sympy.physics.mechanics.joint.PrismaticJoint") also require a `joint_axis`, which
    consists of the same components in the `parent_interframe` and `child_interframe`.
    This means that if for example the joint axis is defined in the `parent_interframe`
    as \(2\hat{p}_x + 4\hat{p}_y + 3\hat{p}_z\), then this will also be \(2\hat{c}_x
    + 4\hat{c}_y + 3\hat{c}_z\) in the `child_interframe`. Practically this means
    that in the case of the [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint"), also shown below, the `joint_axis`
    is the axis of rotation, with the generalized coordinate \(q\) as the angle of
    rotation and the generalized speed \(u\) as the angular velocity.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了描述关节变换，关节通常需要[`dynamicsymbols()`](../vector/api/functions.html#sympy.physics.vector.dynamicsymbols
    "sympy.physics.vector.dynamicsymbols")用于广义坐标和速度。一些关节如[`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint")、[`PrismaticJoint`](api/joint.html#sympy.physics.mechanics.joint.PrismaticJoint
    "sympy.physics.mechanics.joint.PrismaticJoint")还需要`joint_axis`，它由`parent_interframe`和`child_interframe`中相同的分量组成。这意味着，例如，如果关节轴在`parent_interframe`中定义为\(2\hat{p}_x
    + 4\hat{p}_y + 3\hat{p}_z\)，那么在`child_interframe`中也将是\(2\hat{c}_x + 4\hat{c}_y
    + 3\hat{c}_z\)。实际上，这意味着在[`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint")的情况下，也如下所示，`joint_axis`是旋转轴，广义坐标\(q\)是旋转角度，广义速度\(u\)是角速度。
- en: '[![../../../_images/PinJoint.svg](../Images/0bd3c23b3b27b0d6b9db374e8f79bd9a.png)](../../../_images/PinJoint.svg)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![../../../_images/PinJoint.svg](../Images/0bd3c23b3b27b0d6b9db374e8f79bd9a.png)](../../../_images/PinJoint.svg)'
- en: With the information listed above, the joint defines the following relationships.
    It first defines the kinematic differential equations, which relate the generalized
    coordinates to the generalized speeds. Next, it orients the parent and child body
    with respect to each other. After which it also defines their velocity relationships.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述信息，关节定义了以下关系。首先定义了运动微分方程，将广义坐标与广义速度联系起来。接下来，它将父体和子体相互定向。之后，它还定义了它们的速度关系。
- en: The code below shows the creation of a [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint") as shown above with arbitrary linked
    position vectors. In this code the attachment points are set using vectors, which
    define the attachment point with respect to the body’s mass center. The intermediate
    frames are not set, so those are the same as the body’s frame.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码显示了一个与上述相同的[`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint")的创建，其中使用了任意连接位置向量。在此代码中，附着点是使用向量设置的，这些向量定义了相对于体质心的附着点。中间框架未设置，因此这些与体的框架相同。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: System in Physics/Mechanics
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理/力学系统
- en: After defining the entire system you can use the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System") to parse the system and form the equations
    of motion. In this process the [`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System") only does the “book-keeping” of the joints.
    It uses another method, like the [`KanesMethod`](api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod"), as its backend for forming the equations
    of motion.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义完整系统之后，可以使用[`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System")来解析系统并形成运动方程。在这个过程中，[`System`](api/system.html#sympy.physics.mechanics.system.System
    "sympy.physics.mechanics.system.System")仅对关节进行“记账”。它使用另一种方法，如[`KanesMethod`](api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod")，作为其形成运动方程的后端。
- en: In the code below we form the equations of motion of the single [`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint") shown previously.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码中，我们形成了之前展示的单个[`PinJoint`](api/joint.html#sympy.physics.mechanics.joint.PinJoint
    "sympy.physics.mechanics.joint.PinJoint")的运动方程。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
