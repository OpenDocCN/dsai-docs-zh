- en: scipy.linalg.bandwidth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.bandwidth.html#scipy.linalg.bandwidth)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the lower and upper bandwidth of a 2D numeric array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Input array of size (N, M)
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lu**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: 2-tuple of ints indicating the lower and upper bandwidth. A zero denotes no
    sub- or super-diagonal on that side (triangular), and, say for N rows (N-1) means
    that side is full. Same example applies to the upper triangular part with (M-1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If the dtype of the array is not supported, in particular, NumPy float16, float128
    and complex256 dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This helper function simply runs over the array looking for the nonzero entries
    whether there exists a banded structure in the array or not. Hence, the performance
    depends on the density of nonzero entries and also memory-layout. Fortran- or
    C- contiguous arrays are handled best and otherwise suffers from extra random
    memory access cost.
  prefs: []
  type: TYPE_NORMAL
- en: The strategy is to look for only untested band elements in the upper and lower
    triangular parts separately; depending on the memory layout we scan row-wise or
    column-wise. Moreover, say we are scanning rows and in the 6th row, 4th entry
    is nonzero then, on the succeeding rows the horizontal search is done only up
    to that band entries since we know that band is occupied. Therefore, a completely
    dense matrix scan cost is in the the order of n.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
