["```py\n>>> from sympy import *\n>>> n, k = symbols('n,k')\n>>> (n**2 + 1).is_hypergeometric(n)\nTrue \n```", "```py\n>>> factorial(n).is_hypergeometric(n)\nTrue\n>>> binomial(n, k).is_hypergeometric(n)\nTrue\n>>> rf(n, k).is_hypergeometric(n)\nTrue\n>>> ff(n, k).is_hypergeometric(n)\nTrue\n>>> gamma(n).is_hypergeometric(n)\nTrue\n>>> (2**n).is_hypergeometric(n)\nTrue \n```", "```py\n>>> binomial(n, k).is_hypergeometric(k)\nTrue\n>>> rf(n, k).is_hypergeometric(k)\nTrue\n>>> ff(n, k).is_hypergeometric(k)\nTrue \n```", "```py\n>>> factorial(2*n).is_hypergeometric(n)\nTrue\n>>> binomial(3*n+1, k).is_hypergeometric(n)\nTrue\n>>> rf(n+1, k-1).is_hypergeometric(n)\nTrue\n>>> ff(n-1, k+1).is_hypergeometric(n)\nTrue\n>>> gamma(5*n).is_hypergeometric(n)\nTrue\n>>> (2**(n-7)).is_hypergeometric(n)\nTrue \n```", "```py\n>>> factorial(n**2).is_hypergeometric(n)\nFalse\n>>> (2**(n**3 + 1)).is_hypergeometric(n)\nFalse \n```", "```py\n>>> hypersimp(factorial(2*n), n)\n2*(n + 1)*(2*n + 1)\n>>> hypersimp(factorial(n**2), n) \n```", "```py\nclass sympy.concrete.summations.Sum(function, *symbols, **assumptions)\n```", "```py\n>>> from sympy.abc import i, k, m, n, x\n>>> from sympy import Sum, factorial, oo, IndexedBase, Function\n>>> Sum(k, (k, 1, m))\nSum(k, (k, 1, m))\n>>> Sum(k, (k, 1, m)).doit()\nm**2/2 + m/2\n>>> Sum(k**2, (k, 1, m))\nSum(k**2, (k, 1, m))\n>>> Sum(k**2, (k, 1, m)).doit()\nm**3/3 + m**2/2 + m/6\n>>> Sum(x**k, (k, 0, oo))\nSum(x**k, (k, 0, oo))\n>>> Sum(x**k, (k, 0, oo)).doit()\nPiecewise((1/(1 - x), Abs(x) < 1), (Sum(x**k, (k, 0, oo)), True))\n>>> Sum(x**k/factorial(k), (k, 0, oo)).doit()\nexp(x) \n```", "```py\n>>> f = Function('f')\n>>> Sum(f(n), (n, 0, 3)).doit()\nf(0) + f(1) + f(2) + f(3)\n>>> Sum(f(n), (n, 0, oo)).doit()\nSum(f(n), (n, 0, oo))\n>>> f = IndexedBase('f')\n>>> Sum(f[n]**2, (n, 0, 3)).doit()\nf[0]**2 + f[1]**2 + f[2]**2 + f[3]**2 \n```", "```py\n>>> S = Sum(i, (i, 1, n)).doit()\n>>> S\nn**2/2 + n/2\n>>> S.subs(n, -4)\n6\n>>> Sum(i, (i, 1, -4)).doit()\n6\n>>> Sum(-i, (i, -3, 0)).doit()\n6 \n```", "```py\n>>> S1 = Sum(i**2, (i, m, m+n-1)).doit()\n>>> S1\nm**2*n + m*n**2 - m*n + n**3/3 - n**2/2 + n/6\n>>> S2 = Sum(i**2, (i, m+n, m-1)).doit()\n>>> S2\n-m**2*n - m*n**2 + m*n - n**3/3 + n**2/2 - n/6\n>>> S1 + S2\n0\n>>> S3 = Sum(i, (i, m, m-1)).doit()\n>>> S3\n0 \n```", "```py\neuler_maclaurin(m=0, n=0, eps=0, eval_integral=True)\n```", "```py\n>>> from sympy.abc import k, a, b\n>>> from sympy import Sum\n>>> Sum(1/k, (k, 2, 5)).doit().evalf()\n1.28333333333333\n>>> s, e = Sum(1/k, (k, 2, 5)).euler_maclaurin()\n>>> s\n-log(2) + 7/20 + log(5)\n>>> from sympy import sstr\n>>> print(sstr((s.evalf(), e.evalf()), full_prec=True))\n(1.26629073187415, 0.0175000000000000) \n```", "```py\n>>> s, e = Sum(1/k, (k, a, b)).euler_maclaurin()\n>>> s\n-log(a) + log(b) + 1/(2*b) + 1/(2*a)\n>>> e\nAbs(1/(12*b**2) - 1/(12*a**2)) \n```", "```py\n>>> Sum(k, (k, 2, b)).euler_maclaurin()\n(b**2/2 + b/2 - 1, 0)\n>>> Sum(k, (k, 2, b)).doit()\nb**2/2 + b/2 - 1 \n```", "```py\neval_zeta_function(f, limits)\n```", "```py\nis_absolutely_convergent()\n```", "```py\n>>> from sympy import Sum, Symbol, oo\n>>> n = Symbol('n', integer=True)\n>>> Sum((-1)**n, (n, 1, oo)).is_absolutely_convergent()\nFalse\n>>> Sum((-1)**n/n**2, (n, 1, oo)).is_absolutely_convergent()\nTrue \n```", "```py\nis_convergent()\n```", "```py\n>>> from sympy import factorial, S, Sum, Symbol, oo\n>>> n = Symbol('n', integer=True)\n>>> Sum(n/(n - 1), (n, 4, 7)).is_convergent()\nTrue\n>>> Sum(n/(2*n + 1), (n, 1, oo)).is_convergent()\nFalse\n>>> Sum(factorial(n)/5**n, (n, 1, oo)).is_convergent()\nFalse\n>>> Sum(1/n**(S(6)/5), (n, 1, oo)).is_convergent()\nTrue \n```", "```py\nreverse_order(*indices)\n```", "```py\n>>> from sympy import Sum\n>>> from sympy.abc import x, y, a, b, c, d \n```", "```py\n>>> Sum(x, (x, 0, 3)).reverse_order(x)\nSum(-x, (x, 4, -1))\n>>> Sum(x*y, (x, 1, 5), (y, 0, 6)).reverse_order(x, y)\nSum(x*y, (x, 6, 0), (y, 7, -1))\n>>> Sum(x, (x, a, b)).reverse_order(x)\nSum(-x, (x, b + 1, a - 1))\n>>> Sum(x, (x, a, b)).reverse_order(0)\nSum(-x, (x, b + 1, a - 1)) \n```", "```py\n>>> S = Sum(x**2, (x, a, b), (x, c, d))\n>>> S\nSum(x**2, (x, a, b), (x, c, d))\n>>> S0 = S.reverse_order(0)\n>>> S0\nSum(-x**2, (x, b + 1, a - 1), (x, c, d))\n>>> S1 = S0.reverse_order(1)\n>>> S1\nSum(x**2, (x, b + 1, a - 1), (x, d + 1, c - 1)) \n```", "```py\n>>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(x, 1)\nSum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n>>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x)\nSum(x*y, (x, b + 1, a - 1), (y, 6, 1)) \n```", "```py\nclass sympy.concrete.products.Product(function, *symbols, **assumptions)\n```", "```py\n>>> from sympy.abc import a, b, i, k, m, n, x\n>>> from sympy import Product, oo\n>>> Product(k, (k, 1, m))\nProduct(k, (k, 1, m))\n>>> Product(k, (k, 1, m)).doit()\nfactorial(m)\n>>> Product(k**2,(k, 1, m))\nProduct(k**2, (k, 1, m))\n>>> Product(k**2,(k, 1, m)).doit()\nfactorial(m)**2 \n```", "```py\n>>> W = Product(2*i/(2*i-1) * 2*i/(2*i+1), (i, 1, oo))\n>>> W\nProduct(4*i**2/((2*i - 1)*(2*i + 1)), (i, 1, oo)) \n```", "```py\n>>> W.doit()\nProduct(4*i**2/((2*i - 1)*(2*i + 1)), (i, 1, oo)) \n```", "```py\n>>> from sympy import limit\n>>> W2 = Product(2*i/(2*i-1)*2*i/(2*i+1), (i, 1, n))\n>>> W2\nProduct(4*i**2/((2*i - 1)*(2*i + 1)), (i, 1, n))\n>>> W2e = W2.doit()\n>>> W2e\n4**n*factorial(n)**2/(2**(2*n)*RisingFactorial(1/2, n)*RisingFactorial(3/2, n))\n>>> limit(W2e, n, oo)\npi/2 \n```", "```py\n>>> from sympy import combsimp, pi, gamma, simplify\n>>> P = pi * x * Product(1 - x**2/k**2, (k, 1, n))\n>>> P = P.subs(x, pi/2)\n>>> P\npi**2*Product(1 - pi**2/(4*k**2), (k, 1, n))/2\n>>> Pe = P.doit()\n>>> Pe\npi**2*RisingFactorial(1 - pi/2, n)*RisingFactorial(1 + pi/2, n)/(2*factorial(n)**2)\n>>> limit(Pe, n, oo).gammasimp()\nsin(pi**2/2)\n>>> Pe.rewrite(gamma)\n(-1)**n*pi**2*gamma(pi/2)*gamma(n + 1 + pi/2)/(2*gamma(1 + pi/2)*gamma(-n + pi/2)*gamma(n + 1)**2) \n```", "```py\n>>> Product(1/i, (i, 6, 1)).doit()\n120\n>>> Product(i, (i, 2, 5)).doit()\n120 \n```", "```py\n>>> Product(i, (i, n, n-1)).doit()\n1 \n```", "```py\n>>> P = Product(2, (i, 10, n)).doit()\n>>> P\n2**(n - 9)\n>>> P.subs(n, 5)\n1/16\n>>> Product(2, (i, 10, 5)).doit()\n1/16\n>>> 1/Product(2, (i, 6, 9)).doit()\n1/16 \n```", "```py\n>>> P1 = Product(x, (i, a, b)).doit()\n>>> P1\nx**(-a + b + 1)\n>>> P2 = Product(x, (i, b+1, a-1)).doit()\n>>> P2\nx**(a - b - 1)\n>>> simplify(P1 * P2)\n1 \n```", "```py\n>>> P1 = Product(i, (i, b, a)).doit()\n>>> P1\nRisingFactorial(b, a - b + 1)\n>>> P2 = Product(i, (i, a+1, b-1)).doit()\n>>> P2\nRisingFactorial(a + 1, -a + b - 1)\n>>> P1 * P2\nRisingFactorial(b, a - b + 1)*RisingFactorial(a + 1, -a + b - 1)\n>>> combsimp(P1 * P2)\n1 \n```", "```py\nis_convergent()\n```", "```py\n>>> from sympy import Product, Symbol, cos, pi, exp, oo\n>>> n = Symbol('n', integer=True)\n>>> Product(n/(n + 1), (n, 1, oo)).is_convergent()\nFalse\n>>> Product(1/n**2, (n, 1, oo)).is_convergent()\nFalse\n>>> Product(cos(pi/n), (n, 1, oo)).is_convergent()\nTrue\n>>> Product(exp(-n**2), (n, 1, oo)).is_convergent()\nFalse \n```", "```py\nreverse_order(*indices)\n```", "```py\n>>> from sympy import gamma, Product, simplify, Sum\n>>> from sympy.abc import x, y, a, b, c, d\n>>> P = Product(x, (x, a, b))\n>>> Pr = P.reverse_order(x)\n>>> Pr\nProduct(1/x, (x, b + 1, a - 1))\n>>> Pr = Pr.doit()\n>>> Pr\n1/RisingFactorial(b + 1, a - b - 1)\n>>> simplify(Pr.rewrite(gamma))\nPiecewise((gamma(b + 1)/gamma(a), b > -1), ((-1)**(-a + b + 1)*gamma(1 - a)/gamma(-b), True))\n>>> P = P.doit()\n>>> P\nRisingFactorial(a, -a + b + 1)\n>>> simplify(P.rewrite(gamma))\nPiecewise((gamma(b + 1)/gamma(a), a > 0), ((-1)**(-a + b + 1)*gamma(1 - a)/gamma(-b), True)) \n```", "```py\n>>> S = Sum(x*y, (x, a, b), (y, c, d))\n>>> S\nSum(x*y, (x, a, b), (y, c, d))\n>>> S0 = S.reverse_order(0)\n>>> S0\nSum(-x*y, (x, b + 1, a - 1), (y, c, d))\n>>> S1 = S0.reverse_order(1)\n>>> S1\nSum(x*y, (x, b + 1, a - 1), (y, d + 1, c - 1)) \n```", "```py\n>>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(x, 1)\nSum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n>>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x)\nSum(x*y, (x, b + 1, a - 1), (y, 6, 1)) \n```", "```py\nclass sympy.concrete.expr_with_intlimits.ExprWithIntLimits(function, *symbols, **assumptions)\n```", "```py\nchange_index(var, trafo, newvar=None)\n```", "```py\n>>> from sympy import Sum, Product, simplify\n>>> from sympy.abc import x, y, a, b, c, d, u, v, i, j, k, l \n```", "```py\n>>> S = Sum(x, (x, a, b))\n>>> S.doit()\n-a**2/2 + a/2 + b**2/2 + b/2 \n```", "```py\n>>> Sn = S.change_index(x, x + 1, y)\n>>> Sn\nSum(y - 1, (y, a + 1, b + 1))\n>>> Sn.doit()\n-a**2/2 + a/2 + b**2/2 + b/2 \n```", "```py\n>>> Sn = S.change_index(x, -x, y)\n>>> Sn\nSum(-y, (y, -b, -a))\n>>> Sn.doit()\n-a**2/2 + a/2 + b**2/2 + b/2 \n```", "```py\n>>> Sn = S.change_index(x, x+u)\n>>> Sn\nSum(-u + x, (x, a + u, b + u))\n>>> Sn.doit()\n-a**2/2 - a*u + a/2 + b**2/2 + b*u + b/2 - u*(-a + b + 1) + u\n>>> simplify(Sn.doit())\n-a**2/2 + a/2 + b**2/2 + b/2 \n```", "```py\n>>> Sn = S.change_index(x, -x - u, y)\n>>> Sn\nSum(-u - y, (y, -b - u, -a - u))\n>>> Sn.doit()\n-a**2/2 - a*u + a/2 + b**2/2 + b*u + b/2 - u*(-a + b + 1) + u\n>>> simplify(Sn.doit())\n-a**2/2 + a/2 + b**2/2 + b/2 \n```", "```py\n>>> P = Product(i*j**2, (i, a, b), (j, c, d))\n>>> P\nProduct(i*j**2, (i, a, b), (j, c, d))\n>>> P2 = P.change_index(i, i+3, k)\n>>> P2\nProduct(j**2*(k - 3), (k, a + 3, b + 3), (j, c, d))\n>>> P3 = P2.change_index(j, -j, l)\n>>> P3\nProduct(l**2*(k - 3), (k, a + 3, b + 3), (l, -d, -c)) \n```", "```py\n>>> Sn = S.change_index(x, u*x+v, y)\n>>> Sn\nSum((-v + y)/u, (y, b*u + v, a*u + v))\n>>> Sn.doit()\n-v*(a*u - b*u + 1)/u + (a**2*u**2/2 + a*u*v + a*u/2 - b**2*u**2/2 - b*u*v + b*u/2 + v)/u\n>>> simplify(Sn.doit())\na**2*u/2 + a/2 - b**2*u/2 + b/2 \n```", "```py\nproperty has_empty_sequence\n```", "```py\n>>> from sympy import Sum, Product, Symbol\n>>> m = Symbol('m')\n>>> Sum(m, (m, 1, 0)).has_empty_sequence\nTrue \n```", "```py\n>>> Sum(m, (m, 1, 1)).has_empty_sequence\nFalse \n```", "```py\n>>> M = Symbol('M', integer=True, positive=True)\n>>> Product(m, (m, 1, M)).has_empty_sequence\nFalse \n```", "```py\n>>> Product(m, (m, 2, M)).has_empty_sequence \n```", "```py\n>>> Product(m, (m, M + 1, M)).has_empty_sequence\nTrue \n```", "```py\n>>> N = Symbol('N', integer=True, positive=True)\n>>> Sum(m, (m, N, M)).has_empty_sequence \n```", "```py\n>>> N = Symbol('N', integer=True, negative=True)\n>>> Sum(m, (m, N, M)).has_empty_sequence\nFalse \n```", "```py\nindex(x)\n```", "```py\n>>> from sympy.abc import x, y, a, b, c, d\n>>> from sympy import Sum, Product\n>>> Sum(x*y, (x, a, b), (y, c, d)).index(x)\n0\n>>> Sum(x*y, (x, a, b), (y, c, d)).index(y)\n1\n>>> Product(x*y, (x, a, b), (y, c, d)).index(x)\n0\n>>> Product(x*y, (x, a, b), (y, c, d)).index(y)\n1 \n```", "```py\nreorder(*arg)\n```", "```py\n>>> from sympy import Sum, Product\n>>> from sympy.abc import x, y, z, a, b, c, d, e, f \n```", "```py\n>>> Sum(x*y, (x, a, b), (y, c, d)).reorder((x, y))\nSum(x*y, (y, c, d), (x, a, b)) \n```", "```py\n>>> Sum(x*y*z, (x, a, b), (y, c, d), (z, e, f)).reorder((x, y), (x, z), (y, z))\nSum(x*y*z, (z, e, f), (y, c, d), (x, a, b)) \n```", "```py\n>>> P = Product(x*y*z, (x, a, b), (y, c, d), (z, e, f))\n>>> P.reorder((x, y), (x, z), (y, z))\nProduct(x*y*z, (z, e, f), (y, c, d), (x, a, b)) \n```", "```py\n>>> Sum(x**2, (x, a, b), (x, c, d)).reorder((0, 1))\nSum(x**2, (x, c, d), (x, a, b)) \n```", "```py\n>>> Sum(x*y, (x, a, b), (y, c, d)).reorder((y, x))\nSum(x*y, (y, c, d), (x, a, b))\n>>> Sum(x*y, (x, a, b), (y, c, d)).reorder((y, 0))\nSum(x*y, (y, c, d), (x, a, b)) \n```", "```py\nreorder_limit(x, y)\n```", "```py\n>>> from sympy.abc import x, y, z, a, b, c, d, e, f\n>>> from sympy import Sum, Product \n```", "```py\n>>> Sum(x*y*z, (x, a, b), (y, c, d), (z, e, f)).reorder_limit(0, 2)\nSum(x*y*z, (z, e, f), (y, c, d), (x, a, b))\n>>> Sum(x**2, (x, a, b), (x, c, d)).reorder_limit(1, 0)\nSum(x**2, (x, c, d), (x, a, b)) \n```", "```py\n>>> Product(x*y*z, (x, a, b), (y, c, d), (z, e, f)).reorder_limit(0, 2)\nProduct(x*y*z, (z, e, f), (y, c, d), (x, a, b)) \n```", "```py\nsympy.concrete.summations.summation(f, *symbols, **kwargs)\n```", "```py\n b\n                          ____\n                          \\   `\nsummation(f, (i, a, b)) =  )    f\n                          /___,\n                          i = a \n```", "```py\n.. rubric:: Examples \n```", "```py\n>>> from sympy import summation, oo, symbols, log\n>>> i, n, m = symbols('i n m', integer=True) \n```", "```py\n>>> summation(2*i - 1, (i, 1, n))\nn**2\n>>> summation(1/2**i, (i, 0, oo))\n2\n>>> summation(1/log(n)**n, (n, 2, oo))\nSum(log(n)**(-n), (n, 2, oo))\n>>> summation(i, (i, 0, n), (n, 0, m))\nm**3/6 + m**2/2 + m/3 \n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import factorial\n>>> summation(x**n/factorial(n), (n, 0, oo))\nexp(x) \n```", "```py\nsympy.concrete.products.product(*args, **kwargs)\n```", "```py\n b\n                           _____\nproduct(f(n), (i, a, b)) = |   | f(n)\n                           |   |\n                           i = a \n```", "```py\n.. rubric:: Examples \n```", "```py\n>>> from sympy import product, symbols\n>>> i, n, m, k = symbols('i n m k', integer=True) \n```", "```py\n>>> product(i, (i, 1, k))\nfactorial(k)\n>>> product(m, (i, 1, k))\nm**k\n>>> product(i, (i, 1, k), (k, 1, n))\nProduct(factorial(k), (k, 1, n)) \n```", "```py\nsympy.concrete.gosper.gosper_normal(f, g, n, polys=True)\n```", "```py\n>>> from sympy.concrete.gosper import gosper_normal\n>>> from sympy.abc import n \n```", "```py\n>>> gosper_normal(4*n+5, 2*(4*n+1)*(2*n+3), n, polys=False)\n(1/4, n + 3/2, n + 1/4) \n```", "```py\nsympy.concrete.gosper.gosper_term(f, n)\n```", "```py\n>>> from sympy.concrete.gosper import gosper_term\n>>> from sympy import factorial\n>>> from sympy.abc import n \n```", "```py\n>>> gosper_term((4*n + 1)*factorial(n)/factorial(2*n + 1), n)\n(-n - 1/2)/(n + 1/4) \n```", "```py\nsympy.concrete.gosper.gosper_sum(f, k)\n```", "```py\n>>> from sympy.concrete.gosper import gosper_sum\n>>> from sympy import factorial\n>>> from sympy.abc import n, k \n```", "```py\n>>> f = (4*k + 1)*factorial(k)/factorial(2*k + 1)\n>>> gosper_sum(f, (k, 0, n))\n(-factorial(n) + 2*factorial(2*n + 1))/factorial(2*n + 1)\n>>> _.subs(n, 2) == sum(f.subs(k, i) for i in [0, 1, 2])\nTrue\n>>> gosper_sum(f, (k, 3, n))\n(-60*factorial(n) + factorial(2*n + 1))/(60*factorial(2*n + 1))\n>>> _.subs(n, 5) == sum(f.subs(k, i) for i in [3, 4, 5])\nTrue \n```"]