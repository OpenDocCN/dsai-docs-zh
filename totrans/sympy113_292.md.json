["```py\nclass sympy.categories.Object(name, **assumptions)\n```", "```py\nclass sympy.categories.Morphism(domain, codomain)\n```", "```py\nproperty codomain\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> f.codomain\nObject(\"B\") \n```", "```py\ncompose(other)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> g * f\nCompositeMorphism((NamedMorphism(Object(\"A\"), Object(\"B\"), \"f\"),\nNamedMorphism(Object(\"B\"), Object(\"C\"), \"g\")))\n>>> (g * f).domain\nObject(\"A\")\n>>> (g * f).codomain\nObject(\"C\") \n```", "```py\nproperty domain\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> f.domain\nObject(\"A\") \n```", "```py\nclass sympy.categories.NamedMorphism(domain, codomain, name)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> f\nNamedMorphism(Object(\"A\"), Object(\"B\"), \"f\")\n>>> f.name\n'f' \n```", "```py\nproperty name\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> f.name\n'f' \n```", "```py\nclass sympy.categories.CompositeMorphism(*components)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, CompositeMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> g * f\nCompositeMorphism((NamedMorphism(Object(\"A\"), Object(\"B\"), \"f\"),\nNamedMorphism(Object(\"B\"), Object(\"C\"), \"g\")))\n>>> CompositeMorphism(f, g) == g * f\nTrue \n```", "```py\nproperty codomain\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> (g * f).codomain\nObject(\"C\") \n```", "```py\nproperty components\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> (g * f).components\n(NamedMorphism(Object(\"A\"), Object(\"B\"), \"f\"),\nNamedMorphism(Object(\"B\"), Object(\"C\"), \"g\")) \n```", "```py\nproperty domain\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> (g * f).domain\nObject(\"A\") \n```", "```py\nflatten(new_name)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> (g * f).flatten(\"h\")\nNamedMorphism(Object(\"A\"), Object(\"C\"), \"h\") \n```", "```py\nclass sympy.categories.IdentityMorphism(domain)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, IdentityMorphism\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> id_A = IdentityMorphism(A)\n>>> id_B = IdentityMorphism(B)\n>>> f * id_A == f\nTrue\n>>> id_B * f == f\nTrue \n```", "```py\nclass sympy.categories.Category(name, objects=EmptySet, commutative_diagrams=EmptySet)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram, Category\n>>> from sympy import FiniteSet\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g])\n>>> K = Category(\"K\", commutative_diagrams=[d])\n>>> K.commutative_diagrams == FiniteSet(d)\nTrue \n```", "```py\nproperty commutative_diagrams\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram, Category\n>>> from sympy import FiniteSet\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g])\n>>> K = Category(\"K\", commutative_diagrams=[d])\n>>> K.commutative_diagrams == FiniteSet(d)\nTrue \n```", "```py\nproperty name\n```", "```py\n>>> from sympy.categories import Category\n>>> K = Category(\"K\")\n>>> K.name\n'K' \n```", "```py\nproperty objects\n```", "```py\n>>> from sympy.categories import Object, Category\n>>> from sympy import FiniteSet\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> K = Category(\"K\", FiniteSet(A, B))\n>>> K.objects\nClass({Object(\"A\"), Object(\"B\")}) \n```", "```py\nclass sympy.categories.Diagram(*args)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy import pprint, default_sort_key\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g])\n>>> premises_keys = sorted(d.premises.keys(), key=default_sort_key)\n>>> pprint(premises_keys, use_unicode=False)\n[g*f:A-->C, id:A-->A, id:B-->B, id:C-->C, f:A-->B, g:B-->C]\n>>> pprint(d.premises, use_unicode=False)\n{g*f:A-->C: EmptySet, id:A-->A: EmptySet, id:B-->B: EmptySet,\n id:C-->C: EmptySet, f:A-->B: EmptySet, g:B-->C: EmptySet}\n>>> d = Diagram([f, g], {g * f: \"unique\"})\n>>> pprint(d.conclusions,use_unicode=False)\n{g*f:A-->C: {unique}} \n```", "```py\nproperty conclusions\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import IdentityMorphism, Diagram\n>>> from sympy import FiniteSet\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g])\n>>> IdentityMorphism(A) in d.premises.keys()\nTrue\n>>> g * f in d.premises.keys()\nTrue\n>>> d = Diagram([f, g], {g * f: \"unique\"})\n>>> d.conclusions[g * f] == FiniteSet(\"unique\")\nTrue \n```", "```py\nhom(A, B)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy import pretty\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g], {g * f: \"unique\"})\n>>> print(pretty(d.hom(A, C), use_unicode=False))\n({g*f:A-->C}, {g*f:A-->C}) \n```", "```py\nis_subdiagram(diagram)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g], {g * f: \"unique\"})\n>>> d1 = Diagram([f])\n>>> d.is_subdiagram(d1)\nTrue\n>>> d1.is_subdiagram(d)\nFalse \n```", "```py\nproperty objects\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g])\n>>> d.objects\n{Object(\"A\"), Object(\"B\"), Object(\"C\")} \n```", "```py\nproperty premises\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import IdentityMorphism, Diagram\n>>> from sympy import pretty\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> id_A = IdentityMorphism(A)\n>>> id_B = IdentityMorphism(B)\n>>> d = Diagram([f])\n>>> print(pretty(d.premises, use_unicode=False))\n{id:A-->A: EmptySet, id:B-->B: EmptySet, f:A-->B: EmptySet} \n```", "```py\nsubdiagram_from_objects(objects)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy import FiniteSet\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g], {f: \"unique\", g*f: \"veryunique\"})\n>>> d1 = d.subdiagram_from_objects(FiniteSet(A, B))\n>>> d1 == Diagram([f], {f: \"unique\"})\nTrue \n```", "```py\nclass sympy.categories.diagram_drawing.DiagramGrid(diagram, groups=None, **hints)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import Diagram, DiagramGrid\n>>> from sympy import pprint\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g]) \n```", "```py\n>>> grid = DiagramGrid(diagram)\n>>> (grid.width, grid.height)\n(2, 2)\n>>> pprint(grid)\nA  B\n\n C \n```", "```py\n>>> D = Object(\"D\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> h = NamedMorphism(D, A, \"h\")\n>>> k = NamedMorphism(D, B, \"k\")\n>>> diagram = Diagram([f, g, h, k]) \n```", "```py\n>>> grid = DiagramGrid(diagram)\n>>> pprint(grid)\nA  B  D\n\n C \n```", "```py\n>>> grid = DiagramGrid(diagram, groups=[[A, D], B, C])\n>>> pprint(grid)\nB     C\n\nA  D \n```", "```py\n>>> E = Object(\"E\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> h = NamedMorphism(C, D, \"h\")\n>>> i = NamedMorphism(D, E, \"i\")\n>>> diagram = Diagram([f, g, h, i]) \n```", "```py\n>>> grid = DiagramGrid(diagram)\n>>> pprint(grid)\nA  B\n\n C  D\n\n E \n```", "```py\n>>> grid = DiagramGrid(diagram, layout=\"sequential\")\n>>> pprint(grid)\nA  B  C  D  E \n```", "```py\n>>> grid = DiagramGrid(diagram, layout=\"sequential\", transpose=True)\n>>> pprint(grid)\nA\n\nB\n\nC\n\nD\n\nE \n```", "```py\nproperty height\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import Diagram, DiagramGrid\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g])\n>>> grid = DiagramGrid(diagram)\n>>> grid.height\n2 \n```", "```py\nproperty morphisms\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import Diagram, DiagramGrid\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g])\n>>> grid = DiagramGrid(diagram)\n>>> grid.morphisms\n{NamedMorphism(Object(\"A\"), Object(\"B\"), \"f\"): EmptySet,\nNamedMorphism(Object(\"B\"), Object(\"C\"), \"g\"): EmptySet} \n```", "```py\nproperty width\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism\n>>> from sympy.categories import Diagram, DiagramGrid\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g])\n>>> grid = DiagramGrid(diagram)\n>>> grid.width\n2 \n```", "```py\nclass sympy.categories.diagram_drawing.ArrowStringDescription(unit, curving, curving_amount, looping_start, looping_end, horizontal_direction, vertical_direction, label_position, label)\n```", "```py\n>>> from sympy.categories.diagram_drawing import ArrowStringDescription\n>>> astr = ArrowStringDescription(\n... unit=\"mm\", curving=None, curving_amount=None,\n... looping_start=None, looping_end=None, horizontal_direction=\"d\",\n... vertical_direction=\"r\", label_position=\"_\", label=\"f\")\n>>> print(str(astr))\n\\ar[dr]_{f} \n```", "```py\n>>> astr = ArrowStringDescription(\n... unit=\"mm\", curving=\"^\", curving_amount=12,\n... looping_start=None, looping_end=None, horizontal_direction=\"d\",\n... vertical_direction=\"r\", label_position=\"_\", label=\"f\")\n>>> print(str(astr))\n\\ar@/^12mm/[dr]_{f} \n```", "```py\n>>> astr = ArrowStringDescription(\n... unit=\"mm\", curving=None, curving_amount=None,\n... looping_start=\"u\", looping_end=\"l\", horizontal_direction=\"\",\n... vertical_direction=\"\", label_position=\"_\", label=\"f\")\n>>> print(str(astr))\n\\ar@(u,l)[]_{f} \n```", "```py\n>>> astr = ArrowStringDescription(\n... unit=\"mm\", curving=\"^\", curving_amount=12,\n... looping_start=None, looping_end=None, horizontal_direction=\"d\",\n... vertical_direction=\"r\", label_position=\"_\", label=\"f\")\n>>> astr.label_displacement = \">\"\n>>> print(str(astr))\n\\ar@/^12mm/[dr]_>{f} \n```", "```py\n>>> astr = ArrowStringDescription(\n... unit=\"mm\", curving=\"^\", curving_amount=12,\n... looping_start=None, looping_end=None, horizontal_direction=\"d\",\n... vertical_direction=\"r\", label_position=\"_\", label=\"f\")\n>>> astr.arrow_style = \"{-->}\"\n>>> print(str(astr))\n\\ar@/^12mm/@{-->}[dr]_{f} \n```", "```py\nclass sympy.categories.diagram_drawing.XypicDiagramDrawer\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy.categories import DiagramGrid, XypicDiagramDrawer\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g], {g * f: \"unique\"}) \n```", "```py\n>>> grid = DiagramGrid(diagram) \n```", "```py\n>>> drawer = XypicDiagramDrawer()\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar[d]_{g\\circ f} \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\n>>> def formatter(astr):\n...   astr.label = r\"\\exists !\" + astr.label\n...   astr.arrow_style = \"{-->}\"\n>>> drawer.arrow_formatters[\"unique\"] = formatter\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar@{-->}[d]_{\\exists !g\\circ f} \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\n>>> def default_formatter(astr):\n...   astr.label_displacement = \"(0.45)\"\n>>> drawer.default_arrow_formatter = default_formatter\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar@{-->}[d]_(0.45){\\exists !g\\circ f} \\ar[r]^(0.45){f} & B \\ar[ld]^(0.45){g} \\\\\nC &\n} \n```", "```py\n>>> D = Object(\"D\")\n>>> E = Object(\"E\")\n>>> h = NamedMorphism(D, A, \"h\")\n>>> k = NamedMorphism(D, B, \"k\")\n>>> diagram = Diagram([f, g, h, k])\n>>> grid = DiagramGrid(diagram)\n>>> drawer = XypicDiagramDrawer()\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar[r]_{f} & B \\ar[d]^{g} & D \\ar[l]^{k} \\ar@/_3mm/[ll]_{h} \\\\\n& C &\n} \n```", "```py\n>>> drawer.unit = \"cm\"\n>>> drawer.default_curving_amount = 1\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar[r]_{f} & B \\ar[d]^{g} & D \\ar[l]^{k} \\ar@/_1cm/[ll]_{h} \\\\\n& C &\n} \n```", "```py\n>>> drawer.default_curving_step = 1\n>>> h1 = NamedMorphism(A, D, \"h1\")\n>>> diagram = Diagram([f, g, h, k, h1])\n>>> grid = DiagramGrid(diagram)\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar[r]_{f} \\ar@/^1cm/[rr]^{h_{1}} & B \\ar[d]^{g} & D \\ar[l]^{k} \\ar@/_2cm/[ll]_{h} \\\\\n& C &\n} \n```", "```py\ndraw(diagram, grid, masked=None, diagram_format='')\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy.categories import DiagramGrid, XypicDiagramDrawer\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g], {g * f: \"unique\"}) \n```", "```py\n>>> grid = DiagramGrid(diagram) \n```", "```py\n>>> drawer = XypicDiagramDrawer()\n>>> print(drawer.draw(diagram, grid))\n\\xymatrix{\nA \\ar[d]_{g\\circ f} \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\n>>> print(drawer.draw(diagram, grid, masked=[g * f]))\n\\xymatrix{\nA \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\n>>> print(drawer.draw(diagram, grid, diagram_format=\"@+1cm\"))\n\\xymatrix@+1cm{\nA \\ar[d]_{g\\circ f} \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\nsympy.categories.diagram_drawing.xypic_draw_diagram(diagram, masked=None, diagram_format='', groups=None, **hints)\n```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy.categories import xypic_draw_diagram\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> diagram = Diagram([f, g], {g * f: \"unique\"})\n>>> print(xypic_draw_diagram(diagram))\n\\xymatrix{\nA \\ar[d]_{g\\circ f} \\ar[r]^{f} & B \\ar[ld]^{g} \\\\\nC &\n} \n```", "```py\nsympy.categories.diagram_drawing.preview_diagram(diagram, masked=None, diagram_format='', groups=None, output='png', viewer=None, euler=True, **hints)\n```", "```pyviewer, and ``euler```", "```py\n>>> from sympy.categories import Object, NamedMorphism, Diagram\n>>> from sympy.categories import preview_diagram\n>>> A = Object(\"A\")\n>>> B = Object(\"B\")\n>>> C = Object(\"C\")\n>>> f = NamedMorphism(A, B, \"f\")\n>>> g = NamedMorphism(B, C, \"g\")\n>>> d = Diagram([f, g], {g * f: \"unique\"})\n>>> preview_diagram(d) \n```"]