["```py\nscipy.linalg.solve_circulant(c, b, singular='raise', tol=None, caxis=-1, baxis=0, outaxis=0)\n```", "```py\nx = ifft(fft(b) / fft(c)) \n```", "```py\ntol = abs_eigs.max() * abs_eigs.size * np.finfo(np.float64).eps \n```", "```py\n>>> import numpy as np\n>>> from scipy.linalg import solve_circulant, solve, circulant, lstsq \n```", "```py\n>>> c = np.array([2, 2, 4])\n>>> b = np.array([1, 2, 3])\n>>> solve_circulant(c, b)\narray([ 0.75, -0.25,  0.25]) \n```", "```py\n>>> solve(circulant(c), b)\narray([ 0.75, -0.25,  0.25]) \n```", "```py\n>>> c = np.array([1, 1, 0, 0])\n>>> b = np.array([1, 2, 3, 4]) \n```", "```py\n>>> solve_circulant(c, b, singular='lstsq')\narray([ 0.25,  1.25,  2.25,  1.25]) \n```", "```py\n>>> x, resid, rnk, s = lstsq(circulant(c), b)\n>>> x\narray([ 0.25,  1.25,  2.25,  1.25]) \n```", "```py\n>>> c = np.array([[1.5, 2, 3, 0, 0], [1, 1, 4, 3, 2]])\n>>> b = np.arange(15).reshape(-1, 5) \n```", "```py\n>>> x = solve_circulant(c[:, np.newaxis, :], b, baxis=-1, outaxis=-1)\n>>> x.shape\n(2, 3, 5)\n>>> np.set_printoptions(precision=3)  # For compact output of numbers.\n>>> x\narray([[[-0.118,  0.22 ,  1.277, -0.142,  0.302],\n [ 0.651,  0.989,  2.046,  0.627,  1.072],\n [ 1.42 ,  1.758,  2.816,  1.396,  1.841]],\n [[ 0.401,  0.304,  0.694, -0.867,  0.377],\n [ 0.856,  0.758,  1.149, -0.412,  0.831],\n [ 1.31 ,  1.213,  1.603,  0.042,  1.286]]]) \n```", "```py\n>>> solve_circulant(c[1], b[1, :])\narray([ 0.856,  0.758,  1.149, -0.412,  0.831]) \n```"]