- en: Compressed sparse graph routines (scipy.sparse.csgraph)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩稀疏图例程（scipy.sparse.csgraph）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.csgraph.html#module-scipy.sparse.csgraph](https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.csgraph.html#module-scipy.sparse.csgraph)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.csgraph.html#module-scipy.sparse.csgraph](https://docs.scipy.org/doc/scipy-1.12.0/reference/sparse.csgraph.html#module-scipy.sparse.csgraph)
- en: Fast graph algorithms based on sparse matrix representations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 基于稀疏矩阵表示的快速图算法。
- en: Contents
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容
- en: '| [`connected_components`](generated/scipy.sparse.csgraph.connected_components.html#scipy.sparse.csgraph.connected_components
    "scipy.sparse.csgraph.connected_components")(csgraph[, directed, ...]) | Analyze
    the connected components of a sparse graph |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`connected_components`](generated/scipy.sparse.csgraph.connected_components.html#scipy.sparse.csgraph.connected_components
    "scipy.sparse.csgraph.connected_components")(csgraph[, directed, ...]) | 分析稀疏图的连通分量
    |'
- en: '| [`laplacian`](generated/scipy.sparse.csgraph.laplacian.html#scipy.sparse.csgraph.laplacian
    "scipy.sparse.csgraph.laplacian")(csgraph[, normed, return_diag, ...]) | Return
    the Laplacian of a directed graph. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`laplacian`](generated/scipy.sparse.csgraph.laplacian.html#scipy.sparse.csgraph.laplacian
    "scipy.sparse.csgraph.laplacian")(csgraph[, normed, return_diag, ...]) | 返回有向图的拉普拉斯矩阵。
    |'
- en: '| [`shortest_path`](generated/scipy.sparse.csgraph.shortest_path.html#scipy.sparse.csgraph.shortest_path
    "scipy.sparse.csgraph.shortest_path")(csgraph[, method, directed, ...]) | Perform
    a shortest-path graph search on a positive directed or undirected graph. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`shortest_path`](generated/scipy.sparse.csgraph.shortest_path.html#scipy.sparse.csgraph.shortest_path
    "scipy.sparse.csgraph.shortest_path")(csgraph[, method, directed, ...]) | 在正向有向或无向图上执行最短路径图搜索。
    |'
- en: '| [`dijkstra`](generated/scipy.sparse.csgraph.dijkstra.html#scipy.sparse.csgraph.dijkstra
    "scipy.sparse.csgraph.dijkstra")(csgraph[, directed, indices, ...]) | Dijkstra
    algorithm using Fibonacci Heaps |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`dijkstra`](generated/scipy.sparse.csgraph.dijkstra.html#scipy.sparse.csgraph.dijkstra
    "scipy.sparse.csgraph.dijkstra")(csgraph[, directed, indices, ...]) | 使用斐波那契堆的迪杰斯特拉算法
    |'
- en: '| [`floyd_warshall`](generated/scipy.sparse.csgraph.floyd_warshall.html#scipy.sparse.csgraph.floyd_warshall
    "scipy.sparse.csgraph.floyd_warshall")(csgraph[, directed, ...]) | Compute the
    shortest path lengths using the Floyd-Warshall algorithm |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`floyd_warshall`](generated/scipy.sparse.csgraph.floyd_warshall.html#scipy.sparse.csgraph.floyd_warshall
    "scipy.sparse.csgraph.floyd_warshall")(csgraph[, directed, ...]) | 使用弗洛伊德-沃舍尔算法计算最短路径长度
    |'
- en: '| [`bellman_ford`](generated/scipy.sparse.csgraph.bellman_ford.html#scipy.sparse.csgraph.bellman_ford
    "scipy.sparse.csgraph.bellman_ford")(csgraph[, directed, indices, ...]) | Compute
    the shortest path lengths using the Bellman-Ford algorithm. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`bellman_ford`](generated/scipy.sparse.csgraph.bellman_ford.html#scipy.sparse.csgraph.bellman_ford
    "scipy.sparse.csgraph.bellman_ford")(csgraph[, directed, indices, ...]) | 使用贝尔曼-福特算法计算最短路径长度。
    |'
- en: '| [`johnson`](generated/scipy.sparse.csgraph.johnson.html#scipy.sparse.csgraph.johnson
    "scipy.sparse.csgraph.johnson")(csgraph[, directed, indices, ...]) | Compute the
    shortest path lengths using Johnson''s algorithm. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`johnson`](generated/scipy.sparse.csgraph.johnson.html#scipy.sparse.csgraph.johnson
    "scipy.sparse.csgraph.johnson")(csgraph[, directed, indices, ...]) | 使用约翰逊算法计算最短路径长度。
    |'
- en: '| [`breadth_first_order`](generated/scipy.sparse.csgraph.breadth_first_order.html#scipy.sparse.csgraph.breadth_first_order
    "scipy.sparse.csgraph.breadth_first_order")(csgraph, i_start[, ...]) | Return
    a breadth-first ordering starting with specified node. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`breadth_first_order`](generated/scipy.sparse.csgraph.breadth_first_order.html#scipy.sparse.csgraph.breadth_first_order
    "scipy.sparse.csgraph.breadth_first_order")(csgraph, i_start[, ...]) | 返回以指定节点开始的广度优先排序。
    |'
- en: '| [`depth_first_order`](generated/scipy.sparse.csgraph.depth_first_order.html#scipy.sparse.csgraph.depth_first_order
    "scipy.sparse.csgraph.depth_first_order")(csgraph, i_start[, ...]) | Return a
    depth-first ordering starting with specified node. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`depth_first_order`](generated/scipy.sparse.csgraph.depth_first_order.html#scipy.sparse.csgraph.depth_first_order
    "scipy.sparse.csgraph.depth_first_order")(csgraph, i_start[, ...]) | 返回以指定节点开始的深度优先排序。
    |'
- en: '| [`breadth_first_tree`](generated/scipy.sparse.csgraph.breadth_first_tree.html#scipy.sparse.csgraph.breadth_first_tree
    "scipy.sparse.csgraph.breadth_first_tree")(csgraph, i_start[, directed]) | Return
    the tree generated by a breadth-first search |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`breadth_first_tree`](generated/scipy.sparse.csgraph.breadth_first_tree.html#scipy.sparse.csgraph.breadth_first_tree
    "scipy.sparse.csgraph.breadth_first_tree")(csgraph, i_start[, directed]) | 返回广度优先搜索生成的树。
    |'
- en: '| [`depth_first_tree`](generated/scipy.sparse.csgraph.depth_first_tree.html#scipy.sparse.csgraph.depth_first_tree
    "scipy.sparse.csgraph.depth_first_tree")(csgraph, i_start[, directed]) | Return
    a tree generated by a depth-first search. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`depth_first_tree`](generated/scipy.sparse.csgraph.depth_first_tree.html#scipy.sparse.csgraph.depth_first_tree
    "scipy.sparse.csgraph.depth_first_tree")(csgraph, i_start[, directed]) | 返回深度优先搜索生成的树。
    |'
- en: '| [`minimum_spanning_tree`](generated/scipy.sparse.csgraph.minimum_spanning_tree.html#scipy.sparse.csgraph.minimum_spanning_tree
    "scipy.sparse.csgraph.minimum_spanning_tree")(csgraph[, overwrite]) | Return a
    minimum spanning tree of an undirected graph |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '[`minimum_spanning_tree`](generated/scipy.sparse.csgraph.minimum_spanning_tree.html#scipy.sparse.csgraph.minimum_spanning_tree
    "scipy.sparse.csgraph.minimum_spanning_tree")(csgraph[, overwrite]) | 返回无向图的最小生成树。'
- en: '| [`reverse_cuthill_mckee`](generated/scipy.sparse.csgraph.reverse_cuthill_mckee.html#scipy.sparse.csgraph.reverse_cuthill_mckee
    "scipy.sparse.csgraph.reverse_cuthill_mckee")(graph[, symmetric_mode]) | Returns
    the permutation array that orders a sparse CSR or CSC matrix in Reverse-Cuthill
    McKee ordering. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '[`reverse_cuthill_mckee`](generated/scipy.sparse.csgraph.reverse_cuthill_mckee.html#scipy.sparse.csgraph.reverse_cuthill_mckee
    "scipy.sparse.csgraph.reverse_cuthill_mckee")(graph[, symmetric_mode]) | 返回一个排列数组，按照Reverse-Cuthill
    McKee顺序排列稀疏CSR或CSC矩阵。'
- en: '| [`maximum_flow`](generated/scipy.sparse.csgraph.maximum_flow.html#scipy.sparse.csgraph.maximum_flow
    "scipy.sparse.csgraph.maximum_flow")(csgraph, source, sink) | Maximize the flow
    between two vertices in a graph. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '[`maximum_flow`](generated/scipy.sparse.csgraph.maximum_flow.html#scipy.sparse.csgraph.maximum_flow
    "scipy.sparse.csgraph.maximum_flow")(csgraph, source, sink) | 在图中的两个顶点之间最大化流量。'
- en: '| [`maximum_bipartite_matching`](generated/scipy.sparse.csgraph.maximum_bipartite_matching.html#scipy.sparse.csgraph.maximum_bipartite_matching
    "scipy.sparse.csgraph.maximum_bipartite_matching")(graph[, perm_type]) | Returns
    a matching of a bipartite graph whose cardinality is as least that of any given
    matching of the graph. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '[`maximum_bipartite_matching`](generated/scipy.sparse.csgraph.maximum_bipartite_matching.html#scipy.sparse.csgraph.maximum_bipartite_matching
    "scipy.sparse.csgraph.maximum_bipartite_matching")(graph[, perm_type]) | 返回一个二分图的匹配，其基数至少与图的任何给定匹配的基数相同。'
- en: '| [`min_weight_full_bipartite_matching`](generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html#scipy.sparse.csgraph.min_weight_full_bipartite_matching
    "scipy.sparse.csgraph.min_weight_full_bipartite_matching")(...[, ...]) | Returns
    the minimum weight full matching of a bipartite graph. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '[`min_weight_full_bipartite_matching`](generated/scipy.sparse.csgraph.min_weight_full_bipartite_matching.html#scipy.sparse.csgraph.min_weight_full_bipartite_matching
    "scipy.sparse.csgraph.min_weight_full_bipartite_matching")(...[, ...]) | 返回二分图的最小权重完全匹配。'
- en: '| [`structural_rank`](generated/scipy.sparse.csgraph.structural_rank.html#scipy.sparse.csgraph.structural_rank
    "scipy.sparse.csgraph.structural_rank")(graph) | Compute the structural rank of
    a graph (matrix) with a given sparsity pattern. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '[`structural_rank`](generated/scipy.sparse.csgraph.structural_rank.html#scipy.sparse.csgraph.structural_rank
    "scipy.sparse.csgraph.structural_rank")(graph) | 计算给定稀疏模式图（矩阵）的结构秩。'
- en: '| [`NegativeCycleError`](generated/scipy.sparse.csgraph.NegativeCycleError.html#scipy.sparse.csgraph.NegativeCycleError
    "scipy.sparse.csgraph.NegativeCycleError")([message]) |  |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '[`NegativeCycleError`](generated/scipy.sparse.csgraph.NegativeCycleError.html#scipy.sparse.csgraph.NegativeCycleError
    "scipy.sparse.csgraph.NegativeCycleError")([message]) |  |'
- en: '| [`construct_dist_matrix`](generated/scipy.sparse.csgraph.construct_dist_matrix.html#scipy.sparse.csgraph.construct_dist_matrix
    "scipy.sparse.csgraph.construct_dist_matrix")(graph, predecessors[, ...]) | Construct
    distance matrix from a predecessor matrix |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '[`construct_dist_matrix`](generated/scipy.sparse.csgraph.construct_dist_matrix.html#scipy.sparse.csgraph.construct_dist_matrix
    "scipy.sparse.csgraph.construct_dist_matrix")(graph, predecessors[, ...]) | 从前任矩阵构建距离矩阵。'
- en: '| [`csgraph_from_dense`](generated/scipy.sparse.csgraph.csgraph_from_dense.html#scipy.sparse.csgraph.csgraph_from_dense
    "scipy.sparse.csgraph.csgraph_from_dense")(graph[, null_value, ...]) | Construct
    a CSR-format sparse graph from a dense matrix. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '[`csgraph_from_dense`](generated/scipy.sparse.csgraph.csgraph_from_dense.html#scipy.sparse.csgraph.csgraph_from_dense
    "scipy.sparse.csgraph.csgraph_from_dense")(graph[, null_value, ...]) | 从密集矩阵构建CSR格式稀疏图。'
- en: '| [`csgraph_from_masked`](generated/scipy.sparse.csgraph.csgraph_from_masked.html#scipy.sparse.csgraph.csgraph_from_masked
    "scipy.sparse.csgraph.csgraph_from_masked")(graph) | Construct a CSR-format graph
    from a masked array. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '[`csgraph_from_masked`](generated/scipy.sparse.csgraph.csgraph_from_masked.html#scipy.sparse.csgraph.csgraph_from_masked
    "scipy.sparse.csgraph.csgraph_from_masked")(graph) | 从掩码数组构建CSR格式图。'
- en: '| [`csgraph_masked_from_dense`](generated/scipy.sparse.csgraph.csgraph_masked_from_dense.html#scipy.sparse.csgraph.csgraph_masked_from_dense
    "scipy.sparse.csgraph.csgraph_masked_from_dense")(graph[, ...]) | Construct a
    masked array graph representation from a dense matrix. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '[`csgraph_masked_from_dense`](generated/scipy.sparse.csgraph.csgraph_masked_from_dense.html#scipy.sparse.csgraph.csgraph_masked_from_dense
    "scipy.sparse.csgraph.csgraph_masked_from_dense")(graph[, ...]) | 从密集矩阵构建掩码数组图表示。'
- en: '| [`csgraph_to_dense`](generated/scipy.sparse.csgraph.csgraph_to_dense.html#scipy.sparse.csgraph.csgraph_to_dense
    "scipy.sparse.csgraph.csgraph_to_dense")(csgraph[, null_value]) | Convert a sparse
    graph representation to a dense representation |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`csgraph_to_dense`](generated/scipy.sparse.csgraph.csgraph_to_dense.html#scipy.sparse.csgraph.csgraph_to_dense
    "scipy.sparse.csgraph.csgraph_to_dense")(csgraph[, null_value]) | 将稀疏图表示转换为密集表示
    |'
- en: '| [`csgraph_to_masked`](generated/scipy.sparse.csgraph.csgraph_to_masked.html#scipy.sparse.csgraph.csgraph_to_masked
    "scipy.sparse.csgraph.csgraph_to_masked")(csgraph) | Convert a sparse graph representation
    to a masked array representation |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`csgraph_to_masked`](generated/scipy.sparse.csgraph.csgraph_to_masked.html#scipy.sparse.csgraph.csgraph_to_masked
    "scipy.sparse.csgraph.csgraph_to_masked")(csgraph) | 将稀疏图表示转换为掩码数组表示 |'
- en: '| [`reconstruct_path`](generated/scipy.sparse.csgraph.reconstruct_path.html#scipy.sparse.csgraph.reconstruct_path
    "scipy.sparse.csgraph.reconstruct_path")(csgraph, predecessors[, ...]) | Construct
    a tree from a graph and a predecessor list. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`reconstruct_path`](generated/scipy.sparse.csgraph.reconstruct_path.html#scipy.sparse.csgraph.reconstruct_path
    "scipy.sparse.csgraph.reconstruct_path")(csgraph, predecessors[, ...]) | 从图和前任列表构造树。
    |'
- en: Graph Representations
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表示
- en: 'This module uses graphs which are stored in a matrix format. A graph with N
    nodes can be represented by an (N x N) adjacency matrix G. If there is a connection
    from node i to node j, then G[i, j] = w, where w is the weight of the connection.
    For nodes i and j which are not connected, the value depends on the representation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块使用以矩阵格式存储的图。具有N个节点的图可以由(N x N)邻接矩阵G表示。如果从节点i到节点j存在连接，则G[i, j] = w，其中w是连接的权重。对于未连接的节点i和j，其值取决于表示方式：
- en: for dense array representations, non-edges are represented by G[i, j] = 0, infinity,
    or NaN.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于密集数组表示，非边由G[i, j] = 0, 无穷大或NaN表示。
- en: for dense masked representations (of type np.ma.MaskedArray), non-edges are
    represented by masked values. This can be useful when graphs with zero-weight
    edges are desired.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于密集掩码表示（类型为np.ma.MaskedArray），非边由掩码值表示。当需要具有零权重边的图时，这将非常有用。
- en: for sparse array representations, non-edges are represented by non-entries in
    the matrix. This sort of sparse representation also allows for edges with zero
    weights.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于稀疏数组表示，非边由矩阵中的非条目表示。这种稀疏表示还允许具有零权重的边。
- en: 'As a concrete example, imagine that you would like to represent the following
    undirected graph:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个具体的例子，想象一下，您希望表示以下无向图：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This graph has three nodes, where node 0 and 1 are connected by an edge of
    weight 2, and nodes 0 and 2 are connected by an edge of weight 1. We can construct
    the dense, masked, and sparse representations as follows, keeping in mind that
    an undirected graph is represented by a symmetric matrix:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此图具有三个节点，其中节点0和1由权重为2的边连接，并且节点0和2由权重为1的边连接。我们可以构建如下的密集、掩码和稀疏表示，记住无向图由对称矩阵表示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This becomes more difficult when zero edges are significant. For example, consider
    the situation when we slightly modify the above graph:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当零边具有重要意义时，这变得更加困难。例如，考虑稍微修改上述图的情况：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is identical to the previous graph, except nodes 0 and 2 are connected
    by an edge of zero weight. In this case, the dense representation above leads
    to ambiguities: how can non-edges be represented if zero is a meaningful value?
    In this case, either a masked or sparse representation must be used to eliminate
    the ambiguity:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上述图相同，除了节点0和2由零权重边连接。在这种情况下，上述的密集表示会导致歧义：如果零是一个有意义的值，那么如何表示非边？在这种情况下，必须使用掩码或稀疏表示来消除歧义：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we have used a utility routine from the csgraph submodule in order to convert
    the dense representation to a sparse representation which can be understood by
    the algorithms in submodule. By viewing the data array, we can see that the zero
    values are explicitly encoded in the graph.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了来自`csgraph`子模块的实用程序例程，以便将密集表示转换为可以被子模块中的算法理解的稀疏表示。通过查看数据数组，我们可以看到零值在图中是明确编码的。
- en: Directed vs. undirected
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有向 vs. 无向
- en: 'Matrices may represent either directed or undirected graphs. This is specified
    throughout the csgraph module by a boolean keyword. Graphs are assumed to be directed
    by default. In a directed graph, traversal from node i to node j can be accomplished
    over the edge G[i, j], but not the edge G[j, i]. Consider the following dense
    graph:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵可以表示有向或无向图。这在 csgraph 模块中通过布尔关键字指定。默认情况下假定图是有向的。在有向图中，从节点 i 到节点 j 的遍历可以通过边
    G[i, j] 完成，但不能通过边 G[j, i] 完成。考虑下面的稠密图：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When `directed=True` we get the graph:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `directed=True` 时，我们得到如下图：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In a non-directed graph, traversal from node i to node j can be accomplished
    over either G[i, j] or G[j, i]. If both edges are not null, and the two have unequal
    weights, then the smaller of the two is used.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在非定向图中，从节点 i 到节点 j 的遍历可以通过 G[i, j] 或 G[j, i] 之一完成。如果两条边都不为空，并且它们的权重不相等，则选择较小的那条。
- en: 'So for the same graph, when `directed=False` we get the graph:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于相同的图，当 `directed=False` 时，我们得到如下图：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that a symmetric matrix will represent an undirected graph, regardless
    of whether the ‘directed’ keyword is set to True or False. In this case, using
    `directed=True` generally leads to more efficient computation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，对称矩阵将表示无向图，无论‘directed’关键字设置为True还是False。在这种情况下，通常使用 `directed=True`
    可以更高效地进行计算。
- en: The routines in this module accept as input either scipy.sparse representations
    (csr, csc, or lil format), masked representations, or dense representations with
    non-edges indicated by zeros, infinities, and NaN entries.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块中的例程接受作为输入的 scipy.sparse 表示（csr、csc 或 lil 格式）、带有掩码的表示或通过零、无穷大和 NaN 条目表示的密集表示的表示非边缘。
