- en: numpy.lib.mixins.NDArrayOperatorsMixin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.lib.mixins.NDArrayOperatorsMixin
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mixin defining all operator special methods using __array_ufunc__.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用__array_ufunc__定义所有操作符特殊方法的混合类。
- en: This class implements the special methods for almost all of Python’s builtin
    operators defined in the [`operator`](https://docs.python.org/3/library/operator.html#module-operator
    "(in Python v3.11)") module, including comparisons (`==`, `>`, etc.) and arithmetic
    (`+`, `*`, `-`, etc.), by deferring to the `__array_ufunc__` method, which subclasses
    must implement.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该类实现了Python几乎所有内置操作符的特殊方法，在[`operator`](https://docs.python.org/3/library/operator.html#module-operator
    "(in Python v3.11)")模块中定义，包括比较（`==`，`>`等）和算术（`+`，`*`，`-`等），通过推迟到`__array_ufunc__`方法，这些子类必须实现。
- en: It is useful for writing classes that do not inherit from [`numpy.ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), but that should support arithmetic and numpy universal functions
    like arrays as described in [A Mechanism for Overriding Ufuncs](https://numpy.org/neps/nep-0013-ufunc-overrides.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它对于编写不继承自[`numpy.ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray")的类非常有用，但应支持算术和numpy通用函数，就像在[A
    Mechanism for Overriding Ufuncs](https://numpy.org/neps/nep-0013-ufunc-overrides.html)中描述的那样。
- en: 'As an trivial example, consider this implementation of an `ArrayLike` class
    that simply wraps a NumPy array and ensures that the result of any arithmetic
    operation is also an `ArrayLike` object:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的例子，考虑这个`ArrayLike`类的实现，它只是简单地包装了一个NumPy数组，并确保任何算术操作的结果也是一个`ArrayLike`对象：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In interactions between `ArrayLike` objects and numbers or numpy arrays, the
    result is always another `ArrayLike`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ArrayLike`对象和数字或numpy数组之间的交互中，结果总是另一个`ArrayLike`：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that unlike `numpy.ndarray`, `ArrayLike` does not allow operations with
    arbitrary, unrecognized types. This ensures that interactions with ArrayLike preserve
    a well-defined casting hierarchy.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`numpy.ndarray`不同，`ArrayLike`不允许使用任意未识别类型进行操作。这确保了与ArrayLike的交互保持良好定义的类型转换层次结构。
- en: New in version 1.13.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版中新推出。
