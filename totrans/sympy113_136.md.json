["```py\nsympy.vector.matrix_to_vector(matrix, system)\n```", "```py\n>>> from sympy import ImmutableMatrix as Matrix\n>>> m = Matrix([1, 2, 3])\n>>> from sympy.vector import CoordSys3D, matrix_to_vector\n>>> C = CoordSys3D('C')\n>>> v = matrix_to_vector(m, C)\n>>> v\nC.i + 2*C.j + 3*C.k\n>>> v.to_matrix(C) == m\nTrue \n```", "```py\nsympy.vector.express(expr, system, system2=None, variables=False)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy import Symbol, cos, sin\n>>> N = CoordSys3D('N')\n>>> q = Symbol('q')\n>>> B = N.orient_new_axis('B', q, N.k)\n>>> from sympy.vector import express\n>>> express(B.i, N)\n(cos(q))*N.i + (sin(q))*N.j\n>>> express(N.x, B, variables=True)\nB.x*cos(q) - B.y*sin(q)\n>>> d = N.i.outer(N.i)\n>>> express(d, B, N) == (cos(q))*(B.i|N.i) + (-sin(q))*(B.j|N.i)\nTrue \n```", "```py\nsympy.vector.curl(vect, doit=True)\n```", "```py\n>>> from sympy.vector import CoordSys3D, curl\n>>> R = CoordSys3D('R')\n>>> v1 = R.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k\n>>> curl(v1)\n0\n>>> v2 = R.x*R.y*R.z*R.i\n>>> curl(v2)\nR.x*R.y*R.j + (-R.x*R.z)*R.k \n```", "```py\nsympy.vector.divergence(vect, doit=True)\n```", "```py\n>>> from sympy.vector import CoordSys3D, divergence\n>>> R = CoordSys3D('R')\n>>> v1 = R.x*R.y*R.z * (R.i+R.j+R.k) \n```", "```py\n>>> divergence(v1)\nR.x*R.y + R.x*R.z + R.y*R.z\n>>> v2 = 2*R.y*R.z*R.j\n>>> divergence(v2)\n2*R.z \n```", "```py\nsympy.vector.gradient(scalar_field, doit=True)\n```", "```py\n>>> from sympy.vector import CoordSys3D, gradient\n>>> R = CoordSys3D('R')\n>>> s1 = R.x*R.y*R.z\n>>> gradient(s1)\nR.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k\n>>> s2 = 5*R.x**2*R.z\n>>> gradient(s2)\n10*R.x*R.z*R.i + 5*R.x**2*R.k \n```", "```py\nsympy.vector.is_conservative(field)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy.vector import is_conservative\n>>> R = CoordSys3D('R')\n>>> is_conservative(R.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k)\nTrue\n>>> is_conservative(R.z*R.j)\nFalse \n```", "```py\nsympy.vector.is_solenoidal(field)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy.vector import is_solenoidal\n>>> R = CoordSys3D('R')\n>>> is_solenoidal(R.y*R.z*R.i + R.x*R.z*R.j + R.x*R.y*R.k)\nTrue\n>>> is_solenoidal(R.y * R.j)\nFalse \n```", "```py\nsympy.vector.scalar_potential(field, coord_sys)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy.vector import scalar_potential, gradient\n>>> R = CoordSys3D('R')\n>>> scalar_potential(R.k, R) == R.z\nTrue\n>>> scalar_field = 2*R.x**2*R.y*R.z\n>>> grad_field = gradient(scalar_field)\n>>> scalar_potential(grad_field, R)\n2*R.x**2*R.y*R.z \n```", "```py\nsympy.vector.scalar_potential_difference(field, coord_sys, point1, point2)\n```", "```py\n>>> from sympy.vector import CoordSys3D\n>>> from sympy.vector import scalar_potential_difference\n>>> R = CoordSys3D('R')\n>>> P = R.origin.locate_new('P', R.x*R.i + R.y*R.j + R.z*R.k)\n>>> vectfield = 4*R.x*R.y*R.i + 2*R.x**2*R.j\n>>> scalar_potential_difference(vectfield, R, R.origin, P)\n2*R.x**2*R.y\n>>> Q = R.origin.locate_new('O', 3*R.i + R.j + 2*R.k)\n>>> scalar_potential_difference(vectfield, R, P, Q)\n-2*R.x**2*R.y + 18 \n```", "```py\nsympy.vector.integrals.vector_integrate(field, *region)\n```", "```py\n>>> from sympy.vector import CoordSys3D, ParametricRegion, vector_integrate\n>>> from sympy.abc import x, y, t\n>>> C = CoordSys3D('C') \n```", "```py\n>>> region = ParametricRegion((t, t**2), (t, 1, 5))\n>>> vector_integrate(C.x*C.i, region)\n12 \n```", "```py\n>>> from sympy.geometry import Point, Circle, Triangle\n>>> c = Circle(Point(0, 2), 5)\n>>> vector_integrate(C.x**2 + C.y**2, c)\n290*pi\n>>> triangle = Triangle(Point(-2, 3), Point(2, 3), Point(0, 5))\n>>> vector_integrate(3*C.x**2*C.y*C.i + C.j, triangle)\n-8 \n```", "```py\n>>> from sympy.vector import ImplicitRegion\n>>> c2 = ImplicitRegion((x, y), (x - 2)**2 + (y - 1)**2 - 9)\n>>> vector_integrate(1, c2)\n6*pi \n```", "```py\n>>> vector_integrate(12*C.y**3, (C.y, 1, 3))\n240\n>>> vector_integrate(C.x**2*C.z, C.x)\nC.x**3*C.z/3\n>>> vector_integrate(C.x*C.i - C.y*C.k, C.x)\n(Integral(C.x, C.x))*C.i + (Integral(-C.y, C.x))*C.k\n>>> _.doit()\nC.x**2/2*C.i + (-C.x*C.y)*C.k \n```"]