- en: pandas.core.groupby.SeriesGroupBy.transform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.transform.html](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.transform.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Call function producing a same-indexed Series on each group.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a Series having the same indexes as the original object filled with
    the transformed values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**function, str'
  prefs: []
  type: TYPE_NORMAL
- en: Function to apply to each group. See the Notes section below for requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accepted inputs are:'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numba JIT function with `engine='numba'` specified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only passing a single function is supported with this engine. If the `'numba'`
    engine is chosen, the function must be a user defined function with `values` and
    `index` as the first and second arguments respectively in the function signature.
    Each group’s index will be passed to the user defined function and optionally
    available for use.
  prefs: []
  type: TYPE_NORMAL
- en: If a string is chosen, then it needs to be the name of the groupby method you
    want to use.
  prefs: []
  type: TYPE_NORMAL
- en: '***args**'
  prefs: []
  type: TYPE_NORMAL
- en: Positional arguments to pass to func.
  prefs: []
  type: TYPE_NORMAL
- en: '**engine**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: '`''cython''` : Runs the function through C-extensions from cython.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''numba''` : Runs the function through JIT compiled code from numba.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` : Defaults to `''cython''` or the global setting `compute.use_numba`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**engine_kwargs**dict, default None'
  prefs: []
  type: TYPE_NORMAL
- en: For `'cython'` engine, there are no accepted `engine_kwargs`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `''numba''` engine, the engine can accept `nopython`, `nogil` and `parallel`
    dictionary keys. The values must either be `True` or `False`. The default `engine_kwargs`
    for the `''numba''` engine is `{''nopython'': True, ''nogil'': False, ''parallel'':
    False}` and will be applied to the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments to be passed into func.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.groupby.apply`'
  prefs: []
  type: TYPE_NORMAL
- en: Apply function `func` group-wise and combine the results together.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.groupby.aggregate`'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregate using one or more operations over the specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.transform`'
  prefs: []
  type: TYPE_NORMAL
- en: Call `func` on self producing a Series with the same axis shape as self.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Each group is endowed the attribute ‘name’ in case you need to know which group
    you are working on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current implementation imposes three requirements on f:'
  prefs: []
  type: TYPE_NORMAL
- en: f must return a value that either has the same shape as the input subframe or
    can be broadcast to the shape of the input subframe. For example, if f returns
    a scalar it will be broadcast to have the same shape as the input subframe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if this is a DataFrame, f must support application column-by-column in the subframe.
    If f also supports application to the entire subframe, then a fast path is used
    starting from the second chunk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: f must not mutate groups. Mutation is not supported and may produce unexpected
    results. See [Mutating with User Defined Function (UDF) methods](../../user_guide/gotchas.html#gotchas-udf-mutation)
    for more details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using `engine='numba'`, there will be no “fall back” behavior internally.
    The group data and group index will be passed as numpy arrays to the JITed user
    defined function, and no alternative execution attempts will be tried.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.0: The resulting dtype will reflect the return value
    of the passed `func`, see the examples below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.0: When using `.transform` on a grouped DataFrame and
    the transformation function returns a DataFrame, pandas now aligns the result’s
    index with the input’s index. You can call `.to_numpy()` on the result of the
    transformation function to avoid alignment.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Broadcast result of the transformation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Changed in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting dtype will reflect the return value of the passed `func`, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
