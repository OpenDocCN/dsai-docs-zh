["```py\nscipy.ndimage.distance_transform_bf(input, metric='euclidean', sampling=None, return_distances=True, return_indices=False, distances=None, indices=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.ndimage import distance_transform_bf\n>>> import matplotlib.pyplot as plt\n>>> from mpl_toolkits.axes_grid1 import ImageGrid \n```", "```py\n>>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n...     # fill circular area with 1\n...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n...     circle_shape = np.sqrt(circle) < radius\n...     image[circle_shape] = fillvalue\n...     return image\n>>> image = np.zeros((100, 100), dtype=np.uint8)\n>>> image[35:65, 20:80] = 1\n>>> image = add_circle(28, 65, 10, image)\n>>> image = add_circle(37, 30, 10, image)\n>>> image = add_circle(70, 45, 20, image)\n>>> image = add_circle(45, 80, 10, image) \n```", "```py\n>>> fig = plt.figure(figsize=(8, 8))  # set up the figure structure\n>>> grid = ImageGrid(fig, 111, nrows_ncols=(2, 2), axes_pad=(0.4, 0.3),\n...                  label_mode=\"1\", share_all=True,\n...                  cbar_location=\"right\", cbar_mode=\"each\",\n...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n>>> for ax in grid:\n...     ax.axis('off')  # remove axes from images \n```", "```py\n>>> binary_image = grid[0].imshow(image, cmap='gray')\n>>> cbar_binary_image = grid.cbar_axes[0].colorbar(binary_image)\n>>> cbar_binary_image.set_ticks([0, 1])\n>>> grid[0].set_title(\"Binary image: foreground in white\") \n```", "```py\n>>> distance_transform_euclidean = distance_transform_bf(image)\n>>> euclidean_transform = grid[1].imshow(distance_transform_euclidean,\n...                                      cmap='gray')\n>>> cbar_euclidean = grid.cbar_axes[1].colorbar(euclidean_transform)\n>>> colorbar_ticks = [0, 10, 20]\n>>> cbar_euclidean.set_ticks(colorbar_ticks)\n>>> grid[1].set_title(\"Euclidean distance\") \n```", "```py\n>>> distance_transform_taxicab = distance_transform_bf(image,\n...                                                    metric='taxicab')\n>>> taxicab_transformation = grid[2].imshow(distance_transform_taxicab,\n...                                         cmap='gray')\n>>> cbar_taxicab = grid.cbar_axes[2].colorbar(taxicab_transformation)\n>>> cbar_taxicab.set_ticks(colorbar_ticks)\n>>> grid[2].set_title(\"Taxicab distance\") \n```", "```py\n>>> distance_transform_cb = distance_transform_bf(image,\n...                                               metric='chessboard')\n>>> chessboard_transformation = grid[3].imshow(distance_transform_cb,\n...                                            cmap='gray')\n>>> cbar_taxicab = grid.cbar_axes[3].colorbar(chessboard_transformation)\n>>> cbar_taxicab.set_ticks(colorbar_ticks)\n>>> grid[3].set_title(\"Chessboard distance\")\n>>> plt.show() \n```"]