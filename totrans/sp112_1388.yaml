- en: Compiler selection and customizing a build
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译器选择和定制构建
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html](https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html](https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html)
- en: Selecting a specific compiler
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择特定的编译器
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 支持标准的环境变量 `CC`, `CXX` 和 `FC` 来选择特定的 C、C++ 和/或 Fortran 编译器。这些环境变量在[Meson
    文档中的参考表中](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables)有详细说明。
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., `meson setup`). An incremental rebuild
    does not react to changes in environment variables - you have to run `git clean
    -xdf` and do a full rebuild, or run `meson setup --reconfigure`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，环境变量仅在清理构建时才会被应用，因为它们会影响配置阶段（即 `meson setup`）。增量重建不会对环境变量的更改做出反应 - 您必须运行
    `git clean -xdf` 并进行完整重建，或者运行 `meson setup --reconfigure`。
- en: Adding a custom compiler or linker flag
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义编译器或链接器标志
- en: 'Meson by design prefers builds being configured through command-line options
    passed to `meson setup`. It provides many built-in options:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 的设计偏向通过传递给 `meson setup` 的命令行选项配置构建。它提供了许多内置选项：
- en: For enabling a debug build and the optimization level, see the next section
    on “build types”,
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要启用调试构建和优化级别，请参见下一节关于“构建类型”的内容，
- en: Enabling `-Werror` in a portable manner is done via `-Dwerror=true`,
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以便以便携带的方式启用 `-Werror`，可以通过 `-Dwerror=true` 完成，
- en: Enabling warning levels is done via `-Dwarning_level=<val>`, with `<val>` one
    of `{0, 1, 2, 3, everything}`,
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用警告级别的方法是通过 `-Dwarning_level=<val>` 完成，其中 `<val>` 可选值为 `{0, 1, 2, 3, everything}`，
- en: There are many other builtin options, from activating Visual Studio (`-Dvsenv=true`)
    and building with link time optimization (`-Db_lto`) to changing the default C++
    language level (`-Dcpp_std='c++17'`) or linker flags (`-Dcpp_link_args='-Wl,-z,defs'`).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有许多其他内置选项，例如激活 Visual Studio (`-Dvsenv=true`) 和使用链接时优化 (`-Db_lto`)，或者更改默认的
    C++ 语言级别 (`-Dcpp_std='c++17'`) 或链接器标志 (`-Dcpp_link_args='-Wl,-z,defs'`)。
- en: For a comprehensive overview of options, see [Meson’s builtin options docs page](https://mesonbuild.com/Builtin-options.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多选项，请参阅[Meson 内置选项文档页面](https://mesonbuild.com/Builtin-options.html)。
- en: Meson also supports the standard environment variables `CFLAGS`, `CXXFLAGS`,
    `FFLAGS` and `LDFLAGS` to inject extra flags - with the same caveat as in the
    previous section about those environment variables being picked up only for a
    clean build and not an incremental build.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 还支持标准的环境变量 `CFLAGS`, `CXXFLAGS`, `FFLAGS` 和 `LDFLAGS` 以注入额外的标志 - 与前一节中相同的警告一样，这些环境变量仅在清理构建时才会被接受，而不是增量构建。
- en: Using different build types with Meson
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Meson 进行不同的构建类型
- en: Meson provides different build types while configuring the project. You can
    see the available options for build types in [the “core options” section of the
    Meson documentation](https://mesonbuild.com/Builtin-options.html#core-options).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 在配置项目时提供了不同的构建类型。您可以在[Meson 文档的“核心选项”部分](https://mesonbuild.com/Builtin-options.html#core-options)中查看可用的构建类型选项。
- en: 'Assuming that you are building from scratch (do `git clean -xdf` if needed),
    you can configure the build as following to use the `debug` build type:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您是从头开始构建的（如果需要，请执行 `git clean -xdf`），您可以按以下步骤配置构建以使用 `debug` 构建类型：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, you can use the `dev.py` interface for further building, installing and
    testing SciPy:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用 `dev.py` 接口进一步构建、安装和测试 SciPy：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will work because after initial configuration, Meson will remember the
    config options.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这将有效，因为在初始配置之后，Meson 将记住配置选项。
- en: Controlling build parallelism
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制构建并行性
- en: 'By default, `ninja` will launch `2*n_cpu + 2`, with `n_cpu` the number of physical
    CPU cores, parallel build jobs. This is fine in the vast majority of cases, and
    results in close to optimal build times. In some cases, on machines with a small
    amount of RAM relative to the number of CPU cores, this leads to a job running
    out of memory. In case that happens, lower the number of jobs `N` such that you
    have at least 2 GB RAM per job. For example, to launch 6 jobs:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ninja` 将启动 `2*n_cpu + 2` 个并行构建作业，其中 `n_cpu` 是物理 CPU 核心数。在绝大多数情况下，这是可以接受的，并且可以获得接近最优的构建时间。但在某些情况下，当机器的
    RAM 相对于 CPU 核心数较少时，可能会导致作业内存不足。如果发生这种情况，请降低作业数 `N`，以确保每个作业至少有 2 GB RAM。例如，启动 6
    个作业：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use GCC and Clang builds in parallel
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行使用 GCC 和 Clang 进行构建
- en: It may be useful to have several builds of SciPy in the same repo, for example
    to compare the differences between two compilers for diagnosing an issue. As discussed,
    Meson is fully out-of-place, so different builds will not interfere with each
    other. We assume in the rest of this section that GCC is the default. For example,
    let us build using GCC and Clang.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个仓库中拥有几个不同的 SciPy 构建可能非常有用，例如用于比较两个编译器之间的差异以诊断问题。如前所述，Meson 完全是非就地构建，因此不同的构建不会互相干扰。在本节的其余部分中，我们假设
    GCC 是默认的。例如，让我们使用 GCC 和 Clang 进行构建。
- en: 'Build with GCC:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 GCC 进行构建：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using the above command, meson will build with the (default) GCC compilers in
    the `build` directory, and install to the `build-install` directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令，Meson 将使用（默认的）GCC 编译器在 `build` 目录中进行构建，并安装到 `build-install` 目录中。
- en: 'Build with Clang:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Clang 进行构建：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the above commands, Meson will build with the Clang, Clang++ and Gfortran
    compilers in the `build-clang` directory, and then install SciPy into `build-clang-install`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令，Meson 将使用 Clang、Clang++ 和 Gfortran 编译器在 `build-clang` 目录中进行构建，并将 SciPy
    安装到 `build-clang-install` 中。
- en: Meson will remember the compiler selection for the `build-clang` directory and
    it cannot be changed, so each future invocation of `python dev.py --build-dir=build-clang
    <command>` it will automatically use Clang.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Meson 将记住 `build-clang` 目录下的编译器选择，并且无法更改，因此每次未来调用 `python dev.py --build-dir=build-clang
    <command>` 时将自动使用 Clang。
- en: 'Tip: use an alias to make this easier to use, e.g., `alias dev-clang="python
    dev.py --build-dir=build-clang"` and then `dev-clang build`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用别名可以使这个过程更加简便，例如 `alias dev-clang="python dev.py --build-dir=build-clang"`，然后执行
    `dev-clang build`。
- en: 'A common reason to have two builds is to compare between them. For example,
    to run the `scipy.linalg` tests for builds with both compilers, do:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有两个构建的常见原因是进行比较。例如，要在两个编译器的构建中运行 `scipy.linalg` 测试，请执行：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
