- en: numpy.fft.irfftn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfftn.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.irfftn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Computes the inverse of [`rfftn`](numpy.fft.rfftn.html#numpy.fft.rfftn "numpy.fft.rfftn").
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the N-dimensional discrete Fourier Transform
    for real input over any number of axes in an M-dimensional array by means of the
    Fast Fourier Transform (FFT). In other words, `irfftn(rfftn(a), a.shape) == a`
    to within numerical accuracy. (The `a.shape` is necessary like `len(a)` is for
    [`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft"), and for the
    same reason.)
  prefs: []
  type: TYPE_NORMAL
- en: The input should be ordered in the same way as is returned by [`rfftn`](numpy.fft.rfftn.html#numpy.fft.rfftn
    "numpy.fft.rfftn"), i.e. as for [`irfft`](numpy.fft.irfft.html#numpy.fft.irfft
    "numpy.fft.irfft") for the final transformation axis, and as for [`ifftn`](numpy.fft.ifftn.html#numpy.fft.ifftn
    "numpy.fft.ifftn") along all the other axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Shape (length of each transformed axis) of the output (`s[0]` refers to axis
    0, `s[1]` to axis 1, etc.). *s* is also the number of input points used along
    this axis, except for the last axis, where `s[-1]//2+1` points of the input are
    used. Along any axis, if the shape indicated by *s* is smaller than that of the
    input, the input is cropped. If it is larger, the input is padded with zeros.
    If *s* is not given, the shape of the input along the axes specified by axes is
    used. Except for the last axis which is taken to be `2*(m-1)` where `m` is the
    length of the input along that axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axes**sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axes over which to compute the inverse FFT. If not given, the last *len(s)*
    axes are used, or all axes if *s* is also not specified. Repeated indices in *axes*
    means that the inverse transform over that axis is performed multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axes indicated by
    *axes*, or by a combination of *s* or *a*, as explained in the parameters section
    above. The length of each transformed axis is as given by the corresponding element
    of *s*, or the length of the input in every axis except for the last one if *s*
    is not given. In the final transformed axis the length of the output when *s*
    is not given is `2*(m-1)` where `m` is the length of the final transformed axis
    of the input. To get an odd number of output points in the final axis, *s* must
    be specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If *s* and *axes* have different length.
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If an element of *axes* is larger than than the number of axes of *a*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfftn`](numpy.fft.rfftn.html#numpy.fft.rfftn "numpy.fft.rfftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The forward n-dimensional FFT of real input, of which [`ifftn`](numpy.fft.ifftn.html#numpy.fft.ifftn
    "numpy.fft.ifftn") is the inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](../routines.fft.html#module-numpy.fft "numpy.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The one-dimensional FFT, with definitions and conventions used.
  prefs: []
  type: TYPE_NORMAL
- en: '[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the one-dimensional FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`irfft2`](numpy.fft.irfft2.html#numpy.fft.irfft2 "numpy.fft.irfft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the two-dimensional FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`fft`](../routines.fft.html#module-numpy.fft "numpy.fft") for definitions
    and conventions used.
  prefs: []
  type: TYPE_NORMAL
- en: See [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft") for definitions
    and conventions used for real input.
  prefs: []
  type: TYPE_NORMAL
- en: The correct interpretation of the hermitian input depends on the shape of the
    original data, as given by *s*. This is because each input shape could correspond
    to either an odd or even length signal. By default, [`irfftn`](#numpy.fft.irfftn
    "numpy.fft.irfftn") assumes an even output length which puts the last entry at
    the Nyquist frequency; aliasing with its symmetric counterpart. When performing
    the final complex to real transform, the last value is thus treated as purely
    real. To avoid losing information, the correct shape of the real input **must**
    be given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
