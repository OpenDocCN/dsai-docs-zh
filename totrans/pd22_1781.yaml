- en: pandas.io.formats.style.Styler.pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.pipe.html](https://pandas.pydata.org/docs/reference/api/pandas.io.formats.style.Styler.pipe.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply `func(self, *args, **kwargs)`, and return the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**function'
  prefs: []
  type: TYPE_NORMAL
- en: Function to apply to the Styler. Alternatively, a `(callable, keyword)` tuple
    where `keyword` is a string indicating the keyword of `callable` that expects
    the Styler.
  prefs: []
  type: TYPE_NORMAL
- en: '***args**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Arguments passed to func.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of keyword arguments passed into `func`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: object
  prefs: []
  type: TYPE_NORMAL
- en: The value returned by `func`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.pipe`'
  prefs: []
  type: TYPE_NORMAL
- en: Analogous method for DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Styler.apply`](pandas.io.formats.style.Styler.apply.html#pandas.io.formats.style.Styler.apply
    "pandas.io.formats.style.Styler.apply")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a CSS-styling function column-wise, row-wise, or table-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Like `DataFrame.pipe()`, this method can simplify the application of several
    user-defined functions to a styler. Instead of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'users can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In particular, this allows users to define functions that take a styler object,
    along with other parameters, and return the styler after making styling changes
    (such as calling [`Styler.apply()`](pandas.io.formats.style.Styler.apply.html#pandas.io.formats.style.Styler.apply
    "pandas.io.formats.style.Styler.apply") or [`Styler.set_properties()`](pandas.io.formats.style.Styler.set_properties.html#pandas.io.formats.style.Styler.set_properties
    "pandas.io.formats.style.Styler.set_properties")).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use**'
  prefs: []
  type: TYPE_NORMAL
- en: A common usage pattern is to pre-define styling operations which can be easily
    applied to a generic styler in a single `pipe` call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/df_pipe_hl.png](../Images/846404205204d102dad4d7dd2853366a.png)'
  prefs: []
  type: TYPE_IMG
- en: Since the method returns a `Styler` object it can be chained with other methods
    as if applying the underlying highlighters directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/df_pipe_hl2.png](../Images/e331484ee54ef76809fbe0b864f5dce7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Advanced Use**'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes it may be necessary to pre-define styling functions, but in the case
    where those functions rely on the styler, data or context. Since `Styler.use`
    and `Styler.export` are designed to be non-data dependent, they cannot be used
    for this purpose. Additionally the `Styler.apply` and `Styler.format` type methods
    are not context aware, so a solution is to use `pipe` to dynamically wrap this
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we want to code a generic styling function that highlights the final
    level of a MultiIndex. The number of levels in the Index is dynamic so we need
    the `Styler` context to define the level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/df_pipe_applymap.png](../Images/374c032aa260a91efec601dd093e3605.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally suppose we want to highlight a column header if there is any missing
    data in that column. In this case we need the data object itself to determine
    the effect on the column headers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/df_pipe_applydata.png](../Images/37700d5ea1a650005b4b87f6ba2aeae8.png)'
  prefs: []
  type: TYPE_IMG
