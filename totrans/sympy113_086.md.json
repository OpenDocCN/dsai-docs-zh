["```py\nsympy.simplify.simplify.simplify(expr, ratio=1.7, measure=<function count_ops>, rational=False, inverse=False, doit=True, **kwargs)\n```", "```py\n>>> from sympy import simplify, cos, sin\n>>> from sympy.abc import x, y\n>>> a = (x + x**2)/(x*sin(y)**2 + x*cos(y)**2)\n>>> a\n(x**2 + x)/(x*sin(y)**2 + x*cos(y)**2)\n>>> simplify(a)\nx + 1 \n```", "```py\n>>> from sympy import trigsimp, cancel\n>>> trigsimp(a)\n(x**2 + x)/x\n>>> cancel(_)\nx + 1 \n```", "```py\n>>> from sympy import sqrt, simplify, count_ops, oo\n>>> root = 1/(sqrt(2)+3) \n```", "```py\n>>> simplify(root, ratio=1) == root\nTrue \n```", "```py\n>>> count_ops(simplify(root, ratio=oo)) > count_ops(root)\nTrue \n```", "```py\n>>> from sympy import symbols, log\n>>> a, b = symbols('a b', positive=True)\n>>> g = log(a) + log(b) + log(a)*log(1/b)\n>>> h = simplify(g)\n>>> h\nlog(a*b**(1 - log(a)))\n>>> count_ops(g)\n8\n>>> count_ops(h)\n5 \n```", "```py\n>>> print(count_ops(g, visual=True))\n2*ADD + DIV + 4*LOG + MUL\n>>> print(count_ops(h, visual=True))\n2*LOG + MUL + POW + SUB \n```", "```py\n>>> from sympy import Symbol, S\n>>> def my_measure(expr):\n...     POW = Symbol('POW')\n...     # Discourage powers by giving POW a weight of 10\n...     count = count_ops(expr, visual=True).subs(POW, 10)\n...     # Every other operation gets a weight of 1 (the default)\n...     count = count.replace(Symbol, type(S.One))\n...     return count\n>>> my_measure(g)\n8\n>>> my_measure(h)\n14\n>>> 15./8 > 1.7 # 1.7 is the default ratio\nTrue\n>>> simplify(g, measure=my_measure)\n-log(a)*log(b) + log(a) + log(b) \n```", "```py\nsympy.simplify.simplify.separatevars(expr, symbols=[], dict=False, force=False)\n```", "```py\n>>> from sympy.abc import x, y, z, alpha\n>>> from sympy import separatevars, sin\n>>> separatevars((x*y)**y)\n(x*y)**y\n>>> separatevars((x*y)**y, force=True)\nx**y*y**y \n```", "```py\n>>> e = 2*x**2*z*sin(y)+2*z*x**2\n>>> separatevars(e)\n2*x**2*z*(sin(y) + 1)\n>>> separatevars(e, symbols=(x, y), dict=True)\n{'coeff': 2*z, x: x**2, y: sin(y) + 1}\n>>> separatevars(e, [x, y, alpha], dict=True)\n{'coeff': 2*z, alpha: 1, x: x**2, y: sin(y) + 1} \n```", "```py\n>>> separatevars(x + x*y - 3*x**2)\n-x*(3*x - y - 1) \n```", "```py\n>>> eq = 2*x + y*sin(x)\n>>> separatevars(eq) == eq\nTrue\n>>> separatevars(2*x + y*sin(x), symbols=(x, y), dict=True) is None\nTrue \n```", "```py\nsympy.simplify.simplify.nthroot(expr, n, max_len=4, prec=15)\n```", "```py\n>>> from sympy.simplify.simplify import nthroot\n>>> from sympy import sqrt\n>>> nthroot(90 + 34*sqrt(7), 3)\nsqrt(7) + 3 \n```", "```py\nsympy.simplify.simplify.kroneckersimp(expr)\n```", "```py\n>>> from sympy import KroneckerDelta, kroneckersimp\n>>> from sympy.abc import i\n>>> kroneckersimp(1 + KroneckerDelta(0, i) * KroneckerDelta(1, i))\n1 \n```", "```py\nsympy.simplify.simplify.besselsimp(expr)\n```", "```py\n>>> from sympy import besselj, besseli, besselsimp, polar_lift, I, S\n>>> from sympy.abc import z, nu\n>>> besselsimp(besselj(nu, z*polar_lift(-1)))\nexp(I*pi*nu)*besselj(nu, z)\n>>> besselsimp(besseli(nu, z*polar_lift(-I)))\nexp(-I*pi*nu/2)*besselj(nu, z)\n>>> besselsimp(besseli(S(-1)/2, z))\nsqrt(2)*cosh(z)/(sqrt(pi)*sqrt(z))\n>>> besselsimp(z*besseli(0, z) + z*(besseli(2, z))/2 + besseli(1, z))\n3*z*besseli(0, z)/2 \n```", "```py\nsympy.simplify.simplify.hypersimp(f, k)\n```", "```py\nsympy.simplify.simplify.hypersimilar(f, g, k)\n```", "```py\nsympy.simplify.simplify.nsimplify(expr, constants=(), tolerance=None, full=False, rational=None, rational_conversion='base10')\n```", "```py\n>>> from sympy import nsimplify, sqrt, GoldenRatio, exp, I, pi\n>>> nsimplify(4/(1+sqrt(5)), [GoldenRatio])\n-2 + 2*GoldenRatio\n>>> nsimplify((1/(exp(3*pi*I/5)+1)))\n1/2 - I*sqrt(sqrt(5)/10 + 1/4)\n>>> nsimplify(I**I, [pi])\nexp(-pi/2)\n>>> nsimplify(pi, tolerance=0.01)\n22/7 \n```", "```py\n>>> nsimplify(0.333333333333333, rational=True, rational_conversion='exact')\n6004799503160655/18014398509481984\n>>> nsimplify(0.333333333333333, rational=True)\n1/3 \n```", "```py\nsympy.simplify.simplify.posify(eq)\n```", "```py\n>>> from sympy import posify, Symbol, log, solve\n>>> from sympy.abc import x\n>>> posify(x + Symbol('p', positive=True) + Symbol('n', negative=True))\n(_x + n + p, {_x: x}) \n```", "```py\n>>> eq = 1/x\n>>> log(eq).expand()\nlog(1/x)\n>>> log(posify(eq)[0]).expand()\n-log(_x)\n>>> p, rep = posify(eq)\n>>> log(p).expand().subs(rep)\n-log(x) \n```", "```py\n>>> eq = x**2 - 4\n>>> solve(eq, x)\n[-2, 2]\n>>> eq_x, reps = posify([eq, x]); eq_x\n[_x**2 - 4, _x]\n>>> solve(*eq_x)\n[2] \n```", "```py\nsympy.simplify.simplify.logcombine(expr, force=False)\n```", "```py\n>>> from sympy import Symbol, symbols, log, logcombine, I\n>>> from sympy.abc import a, x, y, z\n>>> logcombine(a*log(x) + log(y) - log(z))\na*log(x) + log(y) - log(z)\n>>> logcombine(a*log(x) + log(y) - log(z), force=True)\nlog(x**a*y/z)\n>>> x,y,z = symbols('x,y,z', positive=True)\n>>> a = Symbol('a', real=True)\n>>> logcombine(a*log(x) + log(y) - log(z))\nlog(x**a*y/z) \n```", "```py\n>>> eq = (2 + 3*I)*log(x)\n>>> logcombine(eq, force=True) == eq\nTrue\n>>> logcombine(eq.expand(), force=True)\nlog(x**2) + I*log(x**3) \n```", "```py\nsympy.simplify.radsimp.radsimp(expr, symbolic=True, max_terms=4)\n```", "```py\n>>> from sympy import radsimp, sqrt, Symbol, pprint\n>>> from sympy import factor_terms, fraction, signsimp\n>>> from sympy.simplify.radsimp import collect_sqrt\n>>> from sympy.abc import a, b, c \n```", "```py\n>>> radsimp(1/(2 + sqrt(2)))\n(2 - sqrt(2))/2\n>>> x,y = map(Symbol, 'xy')\n>>> e = ((2 + 2*sqrt(2))*x + (2 + sqrt(8))*y)/(2 + sqrt(2))\n>>> radsimp(e)\nsqrt(2)*(x + y) \n```", "```py\n>>> r2 = sqrt(2)\n>>> r5 = sqrt(5)\n>>> ans = radsimp(1/(y*r2 + x*r2 + a*r5 + b*r5)); pprint(ans)\n ___       ___       ___       ___\n \\/ 5 *a + \\/ 5 *b - \\/ 2 *x - \\/ 2 *y\n------------------------------------------\n 2               2      2              2\n5*a  + 10*a*b + 5*b  - 2*x  - 4*x*y - 2*y \n```", "```py\n>>> n, d = fraction(ans)\n>>> pprint(factor_terms(signsimp(collect_sqrt(n))/d, radical=True))\n ___             ___\n \\/ 5 *(a + b) - \\/ 2 *(x + y)\n------------------------------------------\n 2               2      2              2\n5*a  + 10*a*b + 5*b  - 2*x  - 4*x*y - 2*y \n```", "```py\n>>> radsimp(sqrt(2)*x + sqrt(2))\nsqrt(2)*x + sqrt(2) \n```", "```py\n>>> eq = 1/(a + b*sqrt(c))\n>>> eq.subs(a, b*sqrt(c))\n1/(2*b*sqrt(c))\n>>> radsimp(eq).subs(a, b*sqrt(c))\nnan \n```", "```py\n>>> radsimp(eq, symbolic=False)\n1/(a + b*sqrt(c)) \n```", "```py\nsympy.simplify.radsimp.rad_rationalize(num, den)\n```", "```py\n>>> from sympy import sqrt\n>>> from sympy.simplify.radsimp import rad_rationalize\n>>> rad_rationalize(sqrt(3), 1 + sqrt(2)/3)\n(-sqrt(3) + sqrt(6)/3, -7/9) \n```", "```py\nsympy.simplify.radsimp.collect(expr, syms, func=None, evaluate=None, exact=False, distribute_order_term=True)\n```", "```py\n>>> from sympy import S, collect, expand, factor, Wild\n>>> from sympy.abc import a, b, c, x, y \n```", "```py\n>>> collect(a*x**2 + b*x**2 + a*x - b*x + c, x)\nc + x**2*(a + b) + x*(a - b) \n```", "```py\n>>> d = collect(a*x**2 + b*x**2 + a*x - b*x + c, x, evaluate=False)\n>>> d[x**2]\na + b\n>>> d[x]\na - b\n>>> d[S.One]\nc \n```", "```py\n>>> collect(x**2 + y*x**2 + x*y + y + a*y, [x, y])\nx**2*(y + 1) + x*y + y*(a + 1) \n```", "```py\n>>> from sympy import sin, log\n>>> collect(a*sin(2*x) + b*sin(2*x), sin(2*x))\n(a + b)*sin(2*x)\n\n>>> collect(a*x*log(x) + b*(x*log(x)), x*log(x))\nx*(a + b)*log(x) \n```", "```py\n>>> w = Wild('w1')\n>>> collect(a*x**y - b*x**y, w**y)\nx**y*(a - b) \n```", "```py\n>>> collect(a*x**c + b*x**c, x)\na*x**c + b*x**c\n>>> collect(a*x**c + b*x**c, x**c)\nx**c*(a + b) \n```", "```py\n>>> collect(a*x**(2*c) + b*x**(2*c), x**c)\nx**(2*c)*(a + b) \n```", "```py\n>>> from sympy import exp\n>>> collect(a*exp(2*x) + b*exp(2*x), exp(x))\n(a + b)*exp(2*x) \n```", "```py\n>>> collect(a*x**7 + b*x**7, x, exact=True)\na*x**7 + b*x**7\n>>> collect(a*x**7 + b*x**7, x**7, exact=True)\nx**7*(a + b) \n```", "```py\n>>> collect(x*exp(x) + sin(x)*y + sin(x)*2 + 3*x, x, exact=None)\nx*exp(x) + 3*x + (y + 2)*sin(x)\n>>> collect(a*x*y + x*y + b*x + x, [x, y], exact=None)\nx*y*(a + 1) + x*(b + 1) \n```", "```py\n>>> from sympy import Derivative as D, collect, Function\n>>> f = Function('f') (x)\n\n>>> collect(a*D(f,x) + b*D(f,x), D(f,x))\n(a + b)*Derivative(f(x), x)\n\n>>> collect(a*D(D(f,x),x) + b*D(D(f,x),x), f)\n(a + b)*Derivative(f(x), (x, 2))\n\n>>> collect(a*D(D(f,x),x) + b*D(D(f,x),x), D(f,x), exact=True)\na*Derivative(f(x), (x, 2)) + b*Derivative(f(x), (x, 2))\n\n>>> collect(a*D(f,x) + b*D(f,x) + a*f + b*f, f)\n(a + b)*f(x) + (a + b)*Derivative(f(x), x) \n```", "```py\n>>> collect(a*D(D(f,x),x)**2 + b*D(D(f,x),x)**2, D(f,x))\n(a + b)*Derivative(f(x), (x, 2))**2 \n```", "```py\n>>> f = expand((x + a + 1)**3)\n\n>>> collect(f, x, factor)\nx**3 + 3*x**2*(a + 1) + 3*x*(a + 1)**2 + (a + 1)**3 \n```", "```py\nsympy.simplify.radsimp.rcollect(expr, *vars)\n```", "```py\n>>> from sympy.simplify import rcollect\n>>> from sympy.abc import x, y \n```", "```py\n>>> expr = (x**2*y + x*y + x + y)/(x + y) \n```", "```py\n>>> rcollect(expr, y)\n(x + y*(x**2 + x + 1))/(x + y) \n```", "```py\nsympy.simplify.radsimp.collect_sqrt(expr, evaluate=None)\n```", "```py\n>>> from sympy import sqrt\n>>> from sympy.simplify.radsimp import collect_sqrt\n>>> from sympy.abc import a, b \n```", "```py\n>>> r2, r3, r5 = [sqrt(i) for i in [2, 3, 5]]\n>>> collect_sqrt(a*r2 + b*r2)\nsqrt(2)*(a + b)\n>>> collect_sqrt(a*r2 + b*r2 + a*r3 + b*r3)\nsqrt(2)*(a + b) + sqrt(3)*(a + b)\n>>> collect_sqrt(a*r2 + b*r2 + a*r3 + b*r5)\nsqrt(3)*a + sqrt(5)*b + sqrt(2)*(a + b) \n```", "```py\n>>> collect_sqrt(a*r2 + b*r2 + a*r3 + b*r5, evaluate=False)\n((sqrt(3)*a, sqrt(5)*b, sqrt(2)*(a + b)), 3)\n>>> collect_sqrt(a*sqrt(2) + b, evaluate=False)\n((b, sqrt(2)*a), 1)\n>>> collect_sqrt(a + b, evaluate=False)\n((a + b,), 0) \n```", "```py\nsympy.simplify.radsimp.collect_const(expr, *vars, Numbers=True)\n```", "```py\n>>> from sympy import sqrt\n>>> from sympy.abc import s, x, y, z\n>>> from sympy.simplify.radsimp import collect_const\n>>> collect_const(sqrt(3) + sqrt(3)*(1 + sqrt(2)))\nsqrt(3)*(sqrt(2) + 2)\n>>> collect_const(sqrt(3)*s + sqrt(7)*s + sqrt(3) + sqrt(7))\n(sqrt(3) + sqrt(7))*(s + 1)\n>>> s = sqrt(2) + 2\n>>> collect_const(sqrt(3)*s + sqrt(3) + sqrt(7)*s + sqrt(7))\n(sqrt(2) + 3)*(sqrt(3) + sqrt(7))\n>>> collect_const(sqrt(3)*s + sqrt(3) + sqrt(7)*s + sqrt(7), sqrt(3))\nsqrt(7) + sqrt(3)*(sqrt(2) + 3) + sqrt(7)*(sqrt(2) + 2) \n```", "```py\n>>> collect_const(x - y - z)\nx - (y + z)\n>>> collect_const(-y - z)\n-(y + z)\n>>> collect_const(2*x - 2*y - 2*z, 2)\n2*(x - y - z)\n>>> collect_const(2*x - 2*y - 2*z, -2)\n2*x - 2*(y + z) \n```", "```py\nsympy.simplify.radsimp.fraction(expr, exact=False)\n```", "```py\n>>> from sympy import fraction, Rational, Symbol\n>>> from sympy.abc import x, y \n```", "```py\n>>> fraction(x/y)\n(x, y)\n>>> fraction(x)\n(x, 1) \n```", "```py\n>>> fraction(1/y**2)\n(1, y**2) \n```", "```py\n>>> fraction(x*y/2)\n(x*y, 2)\n>>> fraction(Rational(1, 2))\n(1, 2) \n```", "```py\n>>> k = Symbol('k', negative=True)\n>>> fraction(x * y**k)\n(x, y**(-k)) \n```", "```py\n>>> from sympy import exp, Mul\n>>> fraction(2*x**(-y))\n(2, x**y) \n```", "```py\n>>> fraction(exp(-x))\n(1, exp(x)) \n```", "```py\n>>> fraction(exp(-x), exact=True)\n(exp(-x), 1) \n```", "```py\n>>> u = Mul(2, x + 1, evaluate=False)\n>>> fraction(u)\n(2*x + 2, 1)\n>>> fraction(u, exact=True)\n(2*(x  + 1), 1) \n```", "```py\nsympy.simplify.ratsimp.ratsimp(expr)\n```", "```py\n>>> from sympy import ratsimp\n>>> from sympy.abc import x, y\n>>> ratsimp(1/x + 1/y)\n(x + y)/(x*y) \n```", "```py\nsympy.simplify.ratsimp.ratsimpmodprime(expr, G, *gens, quick=True, polynomial=False, **args)\n```", "```py\n>>> from sympy.simplify.ratsimp import ratsimpmodprime\n>>> from sympy.abc import x, y\n>>> eq = (x + y**5 + y)/(x - y)\n>>> ratsimpmodprime(eq, [x*y**5 - x - y], x, y, order='lex')\n(-x**2 - x*y - x - y)/(-x**2 + x*y) \n```", "```py\nsympy.simplify.trigsimp.trigsimp(expr, inverse=False, **opts)\n```", "```py\n>>> from sympy import trigsimp, sin, cos, log\n>>> from sympy.abc import x\n>>> e = 2*sin(x)**2 + 2*cos(x)**2\n>>> trigsimp(e)\n2 \n```", "```py\n>>> trigsimp(log(e))\nlog(2) \n```", "```py\n>>> from sympy import coth, tanh\n>>> t = 3*tanh(x)**7 - 2/coth(x)**7\n>>> trigsimp(t, method='old') == t\nTrue\n>>> trigsimp(t)\ntanh(x)**7 \n```", "```py\nsympy.simplify.powsimp.powsimp(expr, deep=False, combine='all', force=False, measure=<function count_ops>)\n```", "```py\n a   a          a                          2x      x\nx * y  =>  (x*y)   as well as things like 2   =>  4 \n```", "```py\n a   b      (a + b)\nx * x  =>  x \n```", "```py\n>>> from sympy import powsimp, exp, log, symbols\n>>> from sympy.abc import x, y, z, n\n>>> powsimp(x**y*x**z*y**z, combine='all')\nx**(y + z)*y**z\n>>> powsimp(x**y*x**z*y**z, combine='exp')\nx**(y + z)*y**z\n>>> powsimp(x**y*x**z*y**z, combine='base', force=True)\nx**y*(x*y)**z \n```", "```py\n>>> powsimp(x**z*x**y*n**z*n**y, combine='all', force=True)\n(n*x)**(y + z)\n>>> powsimp(x**z*x**y*n**z*n**y, combine='exp')\nn**(y + z)*x**(y + z)\n>>> powsimp(x**z*x**y*n**z*n**y, combine='base', force=True)\n(n*x)**y*(n*x)**z \n```", "```py\n>>> x, y = symbols('x y', positive=True)\n>>> powsimp(log(exp(x)*exp(y)))\nlog(exp(x)*exp(y))\n>>> powsimp(log(exp(x)*exp(y)), deep=True)\nx + y \n```", "```py\n>>> from sympy import sqrt\n>>> x, y = symbols('x y') \n```", "```py\n>>> a=sqrt(x*sqrt(y))\n>>> a*a**3 == a**4\nTrue \n```", "```py\n>>> a**4 # auto expands to a Mul, no longer a Pow\nx**2*y\n>>> _*a # so Mul doesn't combine them\nx**2*y*sqrt(x*sqrt(y))\n>>> powsimp(_) # but powsimp will\n(x*sqrt(y))**(5/2)\n>>> powsimp(x*y*a) # but won't when doing so would violate assumptions\nx*y*sqrt(x*sqrt(y)) \n```", "```py\nsympy.simplify.powsimp.powdenest(eq, force=False, polar=False)\n```", "```py\n>>> from sympy.abc import a, b, x, y, z\n>>> from sympy import Symbol, exp, log, sqrt, symbols, powdenest \n```", "```py\n>>> powdenest((x**(2*a/3))**(3*x))\n(x**(2*a/3))**(3*x)\n>>> powdenest(exp(3*x*log(2)))\n2**(3*x) \n```", "```py\n>>> powdenest(sqrt(x**2))\nsqrt(x**2) \n```", "```py\n>>> p = symbols('p', positive=True)\n>>> powdenest(sqrt(p**2))\np \n```", "```py\n>>> i, j = symbols('i,j', integer=True)\n>>> powdenest((x**x)**(i + j)) # -X-> (x**x)**i*(x**x)**j\nx**(x*(i + j)) \n```", "```py\n>>> powdenest(exp(3*y*log(x)))\nx**(3*y)\n>>> powdenest(exp(y*(log(a) + log(b))))\n(a*b)**y\n>>> powdenest(exp(3*(log(a) + log(b))))\na**3*b**3 \n```", "```py\n>>> i = Symbol('i', integer=True)\n>>> powdenest(((x**(2*i))**(3*y))**x)\n((x**(2*i))**(3*y))**x\n>>> powdenest(((x**(2*i))**(3*y))**x, force=True)\nx**(6*i*x*y) \n```", "```py\n>>> powdenest(((x**(2*a/3))**(3*y/i))**x)\n((x**(2*a/3))**(3*y/i))**x\n>>> powdenest((x**(2*i)*y**(4*i))**z, force=True)\n(x*y**2)**(2*i*z) \n```", "```py\n>>> n = Symbol('n', negative=True) \n```", "```py\n>>> powdenest((x**i)**y, force=True)\nx**(i*y)\n>>> powdenest((n**i)**x, force=True)\n(n**i)**x \n```", "```py\nsympy.simplify.combsimp.combsimp(expr)\n```", "```py\n>>> from sympy.simplify import combsimp\n>>> from sympy import factorial, binomial, symbols\n>>> n, k = symbols('n k', integer = True) \n```", "```py\n>>> combsimp(factorial(n)/factorial(n - 3))\nn*(n - 2)*(n - 1)\n>>> combsimp(binomial(n+1, k+1)/binomial(n, k))\n(n + 1)/(k + 1) \n```", "```py\nsympy.simplify.sqrtdenest.sqrtdenest(expr, max_iter=3)\n```", "```py\n>>> from sympy.simplify.sqrtdenest import sqrtdenest\n>>> from sympy import sqrt\n>>> sqrtdenest(sqrt(5 + 2 * sqrt(6)))\nsqrt(2) + sqrt(3) \n```", "```py\nsympy.simplify.cse_main.cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canonical', ignore=(), list=True)\n```", "```py\n>>> from sympy import cse, SparseMatrix\n>>> from sympy.abc import x, y, z, w\n>>> cse(((w + x + y + z)*(w + y + z))/(w + x)**3)\n([(x0, y + z), (x1, w + x)], [(w + x0)*(x0 + x1)/x1**3]) \n```", "```py\n>>> m = SparseMatrix([x + y, x + y + z])\n>>> cse([(x+y)**2, x + y + z, y + z, x + z + y, m])\n([(x0, x + y), (x1, x0 + z)], [x0**2, x1, y + z, x1, Matrix([\n[x0],\n[x1]])]) \n```", "```py\n>>> isinstance(_[1][-1], SparseMatrix)\nTrue \n```", "```py\n>>> cse([y**2*(x + 1), 3*y**2*(x + 1)], ignore=(y,))\n([(x0, x + 1)], [x0*y**2, 3*x0*y**2]) \n```", "```py\n>>> cse(x)\n([], [x])\n>>> cse(x, list=False)\n([], x) \n```", "```py\nsympy.simplify.cse_main.opt_cse(exprs, order='canonical')\n```", "```py\n>>> from sympy.simplify.cse_main import opt_cse\n>>> from sympy.abc import x\n>>> opt_subs = opt_cse([x**-2])\n>>> k, v = list(opt_subs.keys())[0], list(opt_subs.values())[0]\n>>> print((k, v.as_unevaluated_basic()))\n(x**(-2), 1/(x**2)) \n```", "```py\nsympy.simplify.cse_main.tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=())\n```", "```py\nsympy.simplify.hyperexpand.hyperexpand(f, allow_hyper=False, rewrite='default', place=None)\n```", "```py\n>>> from sympy.simplify.hyperexpand import hyperexpand\n>>> from sympy.functions import hyper\n>>> from sympy.abc import z\n>>> hyperexpand(hyper([], [], z))\nexp(z) \n```", "```py\n>>> hyperexpand(1 + hyper([1, 1, 1], [], z))\nhyper((1, 1, 1), (), z) + 1 \n```", "```py\nclass sympy.simplify.epathtools.EPath(path)\n```", "```py\nliteral   ::= /[A-Za-z_][A-Za-z_0-9]*/\nnumber    ::= /-?\\d+/\ntype      ::= literal\nattribute ::= literal \"?\"\nall       ::= \"*\"\nslice     ::= \"[\" number? (\":\" number? (\":\" number?)?)? \"]\"\nrange     ::= all | slice\nquery     ::= (type | attribute) (\"|\" (type | attribute))*\nselector  ::= range | query range?\npath      ::= \"/\" selector (\"/\" selector)* \n```", "```py\napply(expr, func, args=None, kwargs=None)\n```", "```py\n>>> from sympy.simplify.epathtools import EPath\n>>> from sympy import sin, cos, E\n>>> from sympy.abc import x, y, z, t \n```", "```py\n>>> path = EPath(\"/*/[0]/Symbol\")\n>>> expr = [((x, 1), 2), ((3, y), z)] \n```", "```py\n>>> path.apply(expr, lambda expr: expr**2)\n[((x**2, 1), 2), ((3, y**2), z)] \n```", "```py\n>>> path = EPath(\"/*/*/Symbol\")\n>>> expr = t + sin(x + 1) + cos(x + y + E) \n```", "```py\n>>> path.apply(expr, lambda expr: 2*expr)\nt + sin(2*x + 1) + cos(2*x + 2*y + E) \n```", "```py\nselect(expr)\n```", "```py\n>>> from sympy.simplify.epathtools import EPath\n>>> from sympy import sin, cos, E\n>>> from sympy.abc import x, y, z, t \n```", "```py\n>>> path = EPath(\"/*/[0]/Symbol\")\n>>> expr = [((x, 1), 2), ((3, y), z)] \n```", "```py\n>>> path.select(expr)\n[x, y] \n```", "```py\n>>> path = EPath(\"/*/*/Symbol\")\n>>> expr = t + sin(x + 1) + cos(x + y + E) \n```", "```py\n>>> path.select(expr)\n[x, x, y] \n```", "```py\nsympy.simplify.epathtools.epath(path, expr=None, func=None, args=None, kwargs=None)\n```", "```py\n>>> from sympy.simplify.epathtools import epath\n>>> from sympy import sin, cos, E\n>>> from sympy.abc import x, y, z, t \n```", "```py\n>>> path = \"/*/[0]/Symbol\"\n>>> expr = [((x, 1), 2), ((3, y), z)] \n```", "```py\n>>> epath(path, expr)\n[x, y]\n>>> epath(path, expr, lambda expr: expr**2)\n[((x**2, 1), 2), ((3, y**2), z)] \n```", "```py\n>>> path = \"/*/*/Symbol\"\n>>> expr = t + sin(x + 1) + cos(x + y + E) \n```", "```py\n>>> epath(path, expr)\n[x, x, y]\n>>> epath(path, expr, lambda expr: 2*expr)\nt + sin(2*x + 1) + cos(2*x + 2*y + E) \n```"]