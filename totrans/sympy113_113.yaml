- en: Dense Matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/matrices/dense.html](https://docs.sympy.org/latest/modules/matrices/dense.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`MutableDenseMatrix`](#sympy.matrices.dense.MutableDenseMatrix "sympy.matrices.dense.MutableDenseMatrix")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Matrix implementation based on DomainMatrix as the internal representation
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the LDL Decomposition (L, D) of matrix A, such that L * D * L.H == A
    if hermitian flag is True, or L * D * L.T == A if hermitian is False. This method
    eliminates the use of square root. Further this ensures that all the diagonal
    entries of L are 1. A must be a Hermitian positive-definite matrix if hermitian
    is True, or a symmetric matrix otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The matrix can have complex entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.matrices.dense.DenseMatrix.cholesky`](#sympy.matrices.dense.DenseMatrix.cholesky
    "sympy.matrices.dense.DenseMatrix.cholesky"), [`sympy.matrices.matrixbase.MatrixBase.LUdecomposition`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LUdecomposition
    "sympy.matrices.matrixbase.MatrixBase.LUdecomposition"), [`QRdecomposition`](matrices.html#sympy.matrices.matrixbase.MatrixBase.QRdecomposition
    "sympy.matrices.matrixbase.MatrixBase.QRdecomposition")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Returns an Immutable version of this Matrix
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns a mutable version of this matrix
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Cholesky-type decomposition L of a matrix A such that L * L.H ==
    A if hermitian flag is True, or L * L.T == A if hermitian is False.
  prefs: []
  type: TYPE_NORMAL
- en: A must be a Hermitian positive-definite matrix if hermitian is True, or a symmetric
    matrix if it is False.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The matrix can have complex entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Non-hermitian Cholesky-type decomposition may be useful when the matrix is not
    positive-definite.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.matrices.dense.DenseMatrix.LDLdecomposition`](#sympy.matrices.dense.DenseMatrix.LDLdecomposition
    "sympy.matrices.dense.DenseMatrix.LDLdecomposition"), [`sympy.matrices.matrixbase.MatrixBase.LUdecomposition`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LUdecomposition
    "sympy.matrices.matrixbase.MatrixBase.LUdecomposition"), [`QRdecomposition`](matrices.html#sympy.matrices.matrixbase.MatrixBase.QRdecomposition
    "sympy.matrices.matrixbase.MatrixBase.QRdecomposition")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Solves `Ax = B`, where A is a lower triangular matrix.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`upper_triangular_solve`](#sympy.matrices.dense.DenseMatrix.upper_triangular_solve
    "sympy.matrices.dense.DenseMatrix.upper_triangular_solve"), [`gauss_jordan_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.gauss_jordan_solve
    "sympy.matrices.matrixbase.MatrixBase.gauss_jordan_solve"), [`cholesky_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.cholesky_solve
    "sympy.matrices.matrixbase.MatrixBase.cholesky_solve"), [`diagonal_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.diagonal_solve
    "sympy.matrices.matrixbase.MatrixBase.diagonal_solve"), [`LDLsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LDLsolve
    "sympy.matrices.matrixbase.MatrixBase.LDLsolve"), [`LUsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve"), [`QRsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.QRsolve
    "sympy.matrices.matrixbase.MatrixBase.QRsolve"), [`pinv_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.pinv_solve
    "sympy.matrices.matrixbase.MatrixBase.pinv_solve"), [`cramer_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.cramer_solve
    "sympy.matrices.matrixbase.MatrixBase.cramer_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Solves `Ax = B`, where A is an upper triangular matrix.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lower_triangular_solve`](#sympy.matrices.dense.DenseMatrix.lower_triangular_solve
    "sympy.matrices.dense.DenseMatrix.lower_triangular_solve"), [`gauss_jordan_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.gauss_jordan_solve
    "sympy.matrices.matrixbase.MatrixBase.gauss_jordan_solve"), [`cholesky_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.cholesky_solve
    "sympy.matrices.matrixbase.MatrixBase.cholesky_solve"), [`diagonal_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.diagonal_solve
    "sympy.matrices.matrixbase.MatrixBase.diagonal_solve"), [`LDLsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LDLsolve
    "sympy.matrices.matrixbase.MatrixBase.LDLsolve"), [`LUsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.LUsolve
    "sympy.matrices.matrixbase.MatrixBase.LUsolve"), [`QRsolve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.QRsolve
    "sympy.matrices.matrixbase.MatrixBase.QRsolve"), [`pinv_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.pinv_solve
    "sympy.matrices.matrixbase.MatrixBase.pinv_solve"), [`cramer_solve`](matrices.html#sympy.matrices.matrixbase.MatrixBase.cramer_solve
    "sympy.matrices.matrixbase.MatrixBase.cramer_solve")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Applies simplify to the elements of a matrix in place.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a shortcut for M.applyfunc(lambda x: simplify(x, ratio, measure))'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.simplify.simplify.simplify`](../simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Create an immutable version of a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
