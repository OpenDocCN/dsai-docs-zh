- en: For downstream package authors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于下游软件包的作者
- en: 原文：[https://numpy.org/doc/1.26/dev/depending_on_numpy.html](https://numpy.org/doc/1.26/dev/depending_on_numpy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/dev/depending_on_numpy.html](https://numpy.org/doc/1.26/dev/depending_on_numpy.html)
- en: This document aims to explain some best practices for authoring a package that
    depends on NumPy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在解释编写依赖于NumPy的软件包的一些最佳实践。
- en: Understanding NumPy’s versioning and API/ABI stability
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解NumPy的版本和API/ABI稳定性
- en: 'NumPy uses a standard, [**PEP 440**](https://peps.python.org/pep-0440/) compliant,
    versioning scheme: `major.minor.bugfix`. A *major* release is highly unusual (NumPy
    is still at version `1.xx`) and if it happens it will likely indicate an ABI break.
    *Minor* versions are released regularly, typically every 6 months. Minor versions
    contain new features, deprecations, and removals of previously deprecated code.
    *Bugfix* releases are made even more frequently; they do not contain any new features
    or deprecations.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy使用符合[**PEP 440**](https://peps.python.org/pep-0440/)规范的版本方案：`major.minor.bugfix`。*Major*版本是非常不寻常的（NumPy仍然是版本`1.xx`），如果发生这种情况，可能表示ABI中断。*Minor*版本定期发布，通常每6个月发布一次。次要版本包含新功能、废弃项和以前废弃的代码的移除。*Bugfix*版本更频繁发布；它们不包含任何新功能或废弃项。
- en: It is important to know that NumPy, like Python itself and most other well known
    scientific Python projects, does **not** use semantic versioning. Instead, backwards
    incompatible API changes require deprecation warnings for at least two releases.
    For more details, see [NEP 23 — Backwards compatibility and deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)").
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 需要了解的重要信息是，NumPy和Python本身以及大多数其他众所周知的科学Python项目**不使用**语义化版本。相反，向后不兼容的API更改需要至少两个版本的废弃警告。更多细节请参见[NEP
    23 — Backwards compatibility and deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)")。
- en: 'NumPy has both a Python API and a C API. The C API can be used directly or
    via Cython, f2py, or other such tools. If your package uses the C API, then ABI
    (application binary interface) stability of NumPy is important. NumPy’s ABI is
    forward but not backward compatible. This means: binaries compiled against a given
    version of NumPy will still run correctly with newer NumPy versions, but not with
    older versions.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy具有Python API和C API。C API可以直接使用或通过Cython、f2py或其他类似工具使用。如果你的软件包使用C API，那么NumPy的ABI（应用程序二进制接口）的稳定性就很重要。NumPy的ABI是向前但不是向后兼容的。这意味着：针对某个给定版本的NumPy编译的二进制文件仍可以与更新的NumPy版本正确运行，但不能与旧版本一起运行。
- en: Testing against the NumPy main branch or pre-releases
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对NumPy的主分支或预发布版本进行测试
- en: 'For large, actively maintained packages that depend on NumPy, we recommend
    testing against the development version of NumPy in CI. To make this easy, nightly
    builds are provided as wheels at [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/).
    Example install command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖于NumPy的大型且活跃维护的软件包，我们建议使用CI来对开发版本的NumPy进行测试。为了方便起见，每晚都会提供构建版本的NumPy。可以在[https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)获取。示例安装命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This helps detect regressions in NumPy that need fixing before the next NumPy
    release. Furthermore, we recommend to raise errors on warnings in CI for this
    job, either all warnings or otherwise at least `DeprecationWarning` and `FutureWarning`.
    This gives you an early warning about changes in NumPy to adapt your code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于检测在下一个NumPy发布之前需要修复的NumPy回归。此外，我们建议在CI中对此作业的警告中引发错误，无论是全部警告还是至少`DeprecationWarning`和`FutureWarning`。这会提前警告NumPy的更改，以便调整您的代码。
- en: '## Adding a dependency on NumPy'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '## 添加NumPy依赖项'
- en: Build-time dependency
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建时依赖项
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.25之前，NumPy C-API是*不*向后兼容的。这意味着当使用早于1.25的NumPy版本进行编译时，您必须使用您希望支持的最旧版本进行编译。可以使用[oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/)来完成。请参阅[NumPy
    1.24文档](https://numpy.org/doc/1.24/dev/depending_on_numpy.html)。
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个软件包直接使用NumPy C API，或者使用依赖于它的其他工具（如Cython或Pythran），那么NumPy就是该软件包的*构建时*依赖项。
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，NumPy将暴露一个与最旧兼容Python版本支持的最旧NumPy版本向后兼容的API。NumPy 1.25.0支持Python 3.9及更高版本，NumPy
    1.19是第一个支持Python 3.9的版本。因此，我们保证在使用默认值时，NumPy 1.25将暴露与NumPy 1.19兼容的C-API（确切版本在NumPy内部头文件中设置）。
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy也对所有次要版本具有向前兼容性，但是主要版本将需要重新编译。
- en: 'The default behavior can be customized for example by adding:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为可以通过添加以下内容进行自定义：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个需要NumPy C-API的扩展模块中（使用相应的`-D`编译器标志）之前包含任何NumPy头文件。这主要在于，如果您需要使用新添加的API，那么可能无法与旧版本兼容。
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，您希望默认情况下编译为当前安装的NumPy版本，您可以添加：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户通过`-DNPY_TARGET_VERSION`覆盖默认值。此定义对于每个扩展模块（使用`import_array()`）必须一致，并且也适用于umath模块。
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您针对NumPy进行编译时，您应该向`pyproject.toml`添加适当的版本限制（请参阅PEP 517）。由于您的扩展将不与新的NumPy主要版本兼容，并且可能与非常旧的版本不兼容，因此这是必需的。
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于conda-forge软件包，请参阅[此处](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy)。
- en: 'as of now, it is usually as easy as including:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，通常只需包括：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到NumPy 1.25时，NumPy 2.0预计将成为NumPy的下一个版本。预计NumPy 2.0发布将需要不同的固定版本，因为NumPy 2+将需要以便与NumPy
    1.x和2.x兼容。
- en: Runtime dependency & version ranges
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行时依赖和版本范围
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy本身和许多核心科学Python软件包已经就放弃对旧Python和NumPy版本的支持达成一致：[NEP 29 — 推荐Python和NumPy版本支持作为社区政策标准](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(在NumPy增强提案中)").我们建议所有依赖于NumPy的软件包遵循NEP 29中的建议。
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*运行时依赖项*，请在`setup.py`中使用`install_requires`指定版本范围（假设您使用`numpy.distutils`或`setuptools`进行构建）。
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数依赖于NumPy的库不需要设置上限版本范围：NumPy会小心保持向后兼容性。
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你（a）是一个保证频繁发布的项目，（b）使用了大量NumPy的API功能，以及（c）担心NumPy的变化可能会破坏你的代码，你可以设置一个上限`<MAJOR.MINOR
    + N`，其中N不少于3，`MAJOR.MINOR`是NumPy的当前发布版本[ [*] ](#id3)。如果你使用NumPy C API（直接或通过Cython），你还可以固定当前主要版本，以防止ABI（应用程序二进制接口）破坏。请注意，设置NumPy的上限可能会影响库与其他更新包一起安装的能力。
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy有更多关于如何构建轮子以及处理构建时和运行时依赖关系的文档[这里](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing)。
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和SciPy的轮子构建 CI 也可能作为参考，可以在[这里找到NumPy的](https://github.com/MacPython/numpy-wheels)，以及[这里找到SciPy的](https://github.com/MacPython/scipy-wheels)。
- en: Understanding NumPy’s versioning and API/ABI stability
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解NumPy的版本控制和API/ABI稳定性
- en: 'NumPy uses a standard, [**PEP 440**](https://peps.python.org/pep-0440/) compliant,
    versioning scheme: `major.minor.bugfix`. A *major* release is highly unusual (NumPy
    is still at version `1.xx`) and if it happens it will likely indicate an ABI break.
    *Minor* versions are released regularly, typically every 6 months. Minor versions
    contain new features, deprecations, and removals of previously deprecated code.
    *Bugfix* releases are made even more frequently; they do not contain any new features
    or deprecations.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy使用标准的，[**PEP 440**](https://peps.python.org/pep-0440/)兼容的版本控制方案：`major.minor.bugfix`。*重大*发布是非常不寻常的（NumPy目前仍然是版本`1.xx`），如果发生，很可能表示ABI破坏。*次要*版本定期发布，通常每6个月一次。次要版本包含新功能、弃用功能，以及移除之前弃用的代码。*Bugfix*发布更频繁；它们不包含任何新功能或弃用。
- en: It is important to know that NumPy, like Python itself and most other well known
    scientific Python projects, does **not** use semantic versioning. Instead, backwards
    incompatible API changes require deprecation warnings for at least two releases.
    For more details, see [NEP 23 — Backwards compatibility and deprecation policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)").
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，NumPy，以及Python本身和大多数其他知名的科学Python项目，**不**使用语义版本控制。相反，不兼容的API更改需要至少在两个发布版本中提供弃用警告。更多详情，请参见[NEP
    23 — 向后兼容性和废弃策略](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(在NumPy增强提案中)")。
- en: 'NumPy has both a Python API and a C API. The C API can be used directly or
    via Cython, f2py, or other such tools. If your package uses the C API, then ABI
    (application binary interface) stability of NumPy is important. NumPy’s ABI is
    forward but not backward compatible. This means: binaries compiled against a given
    version of NumPy will still run correctly with newer NumPy versions, but not with
    older versions.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy有Python API和C API。C API可以直接使用，也可以通过Cython、f2py或其他类似工具使用。如果你的包使用C API，那么NumPy的ABI（应用程序二进制接口）稳定性非常重要。NumPy的ABI是向前而不向后兼容的。这意味着：针对特定NumPy版本编译的二进制文件将会在新的NumPy版本中正确运行，但不会在旧版本中正确运行。
- en: Testing against the NumPy main branch or pre-releases
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对NumPy主分支或预发行版进行测试
- en: 'For large, actively maintained packages that depend on NumPy, we recommend
    testing against the development version of NumPy in CI. To make this easy, nightly
    builds are provided as wheels at [https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/).
    Example install command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖NumPy的大型、积极维护的包，我们建议在CI中对NumPy的开发版本进行测试。为了方便起见，夜间构建作为轮子提供在[https://anaconda.org/scientific-python-nightly-wheels/](https://anaconda.org/scientific-python-nightly-wheels/)。示例安装命令：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This helps detect regressions in NumPy that need fixing before the next NumPy
    release. Furthermore, we recommend to raise errors on warnings in CI for this
    job, either all warnings or otherwise at least `DeprecationWarning` and `FutureWarning`.
    This gives you an early warning about changes in NumPy to adapt your code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于检测需要在下一个 NumPy 发布之前进行修复的 NumPy 中的回归。此外，我们建议在 CI 中对此作业中的警告引发错误，包括所有警告或至少
    `DeprecationWarning` 和 `FutureWarning`。这样可以及早警示您需要调整代码以适应 NumPy 中的更改。
- en: '## Adding a dependency on NumPy'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '## 添加对 NumPy 的依赖'
- en: Build-time dependency
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建时依赖
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.25 之前，NumPy C-API *不* 向后兼容。这意味着，在使用早于 1.25 的 NumPy 版本进行编译时，您必须使用您希望支持的最旧版本。可以通过使用
    [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/) 来完成。请参阅
    [NumPy 1.24 文档](https://numpy.org/doc/1.24/dev/depending_on_numpy.html)。
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果包直接使用 NumPy C API，或者使用一些其他依赖于它的工具，比如 Cython 或 Pythran，那么 NumPy 就是包的 *构建时*
    依赖关系。
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，NumPy 将公开一个与最旧的兼容 Python 版本支持的最旧 NumPy 版本向后兼容的 API。NumPy 1.25.0 支持 Python
    3.9 及更高版本，而 NumPy 1.19 是第一个支持 Python 3.9 的版本。因此，我们保证在使用默认设置时，NumPy 1.25 将公开与 NumPy
    1.19 兼容的 C-API（确切版本设置在 NumPy 内部头文件中）。
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 也对所有次要发布版向前兼容，但主要发布版将需要重新编译。
- en: 'The default behavior can be customized for example by adding:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为可以通过例如添加来定制：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何需要 NumPy C-API 的扩展模块中，包括任何 NumPy 头文件（或等效的 `-D` 编译器标志）。这主要是有用的，如果您需要使用新增的
    API，但同时无法与旧版本兼容。
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，默认情况下希望以当前安装的 NumPy 版本进行编译，可以添加：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户通过 `-DNPY_TARGET_VERSION` 来覆盖默认设置。该定义对于每个扩展模块（使用 `import_array()`）必须是一致的，并且也适用于
    umath 模块。
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您针对 NumPy 进行编译时，应该向您的 `pyproject.toml`（参见 PEP 517）添加适当的版本限制。由于您的扩展可能与新的 NumPy
    主要版本不兼容，并且可能与非常旧的版本也不兼容。
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 conda-forge 包，请参见 [此处](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy)。
- en: 'as of now, it is usually as easy as including:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，通常情况下只需包含：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.25 时，NumPy 2.0 预计是下一个 NumPy 发布版本。预计 NumPy 2.0 发布将需要不同的固定，因为 NumPy
    2+ 将需要兼容 NumPy 1.x 和 2.x。
- en: Runtime dependency & version ranges
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行时依赖 & 版本范围
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy本身和许多核心科学Python包都已经同意了一个关于放弃支持旧Python和NumPy版本的时间表：[NEP 29 — 推荐Python和NumPy版本支持作为社区政策标准](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29)。我们建议所有依赖NumPy的软件包遵循NEP
    29的建议。
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*运行时依赖*，使用`setup.py`中的`install_requires`来指定版本范围（假设您使用`numpy.distutils`或`setuptools`来构建）。
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数依赖于NumPy的库不需要设置一个上限版本：NumPy会小心地保留向后兼容性。
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果您是（a）一个保证频繁发布的项目，（b）使用了NumPy API的大部分功能，和（c）担心NumPy的变化可能会破坏您的代码，您可以设置`<主要.次要+N`的上限界限，N不小于3，并且`主要.次要`是当前NumPy版本[[*]](#id3)。如果您使用NumPy
    C API（直接或通过Cython），您也可以固定当前主要版本以防止ABI破坏。请注意，设置NumPy的上限可能会[影响您的库与其他更新的软件包一起安装的能力](https://iscinumpy.dev/post/bound-version-constraints/)。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy有更多关于如何构建wheel并处理其构建时和运行时依赖关系的文档[在这里](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing)。
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和SciPy的wheel构建CI也可能是一个很好的参考，可以在[这里找到NumPy的](https://github.com/MacPython/numpy-wheels)，在[这里找到SciPy的](https://github.com/MacPython/scipy-wheels)。
- en: Build-time dependency
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建时的依赖
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before NumPy 1.25, the NumPy C-API was *not* backwards compatible. This means
    that when compiling with a NumPy version earlier than 1.25 you have to compile
    with the oldest version you wish to support. This can be done by using [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/).
    Please see the [NumPy 1.24 documentation](https://numpy.org/doc/1.24/dev/depending_on_numpy.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.25之前，NumPy C-API是*不*向后兼容的。这意味着在使用早于1.25的NumPy版本进行编译时，您必须用您希望支持的最老版本进行编译。这可以通过使用[oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy/)来实现。请参阅[NumPy
    1.24文档](https://numpy.org/doc/1.24/dev/depending_on_numpy.html)。
- en: If a package either uses the NumPy C API directly or it uses some other tool
    that depends on it like Cython or Pythran, NumPy is a *build-time* dependency
    of the package.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个软件包直接使用NumPy C API，或者使用其他依赖于它的工具，如Cython或Pythran，NumPy就是软件包的*构建时*依赖。
- en: By default, NumPy will expose an API that is backwards compatible with the oldest
    NumPy version that supports the currently oldest compatible Python version. NumPy
    1.25.0 supports Python 3.9 and higher and NumPy 1.19 is the first version to support
    Python 3.9\. Thus, we guarantee that, when using defaults, NumPy 1.25 will expose
    a C-API compatible with NumPy 1.19. (the exact version is set within NumPy-internal
    header files).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，NumPy将暴露一个与支持当前最老的Python版本的最老的兼容NumPy版本兼容的API。NumPy 1.25.0支持Python 3.9及更高版本，而NumPy
    1.19是第一个支持Python 3.9的版本。因此，我们保证，当使用默认设置时，NumPy 1.25将暴露一个与NumPy 1.19兼容的C-API（确切的版本在NumPy内部头文件中设置）。
- en: NumPy is also forward compatible for all minor releases, but a major release
    will require recompilation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy对于所有次要版本都是向前兼容的，但一个主要版本将需要重新编译。
- en: 'The default behavior can be customized for example by adding:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为可以通过添加以下内容来自定义，例如：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: before including any NumPy headers (or the equivalent `-D` compiler flag) in
    every extension module that requires the NumPy C-API. This is mainly useful if
    you need to use newly added API at the cost of not being compatible with older
    versions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个需要NumPy C-API的扩展模块中（或使用等效的`-D`编译器标志）之前包含任何NumPy头文件。如果你需要使用新添加的API，这主要是有用的，尽管代价是不兼容旧版本。
- en: 'If for some reason you wish to compile for the currently installed NumPy version
    by default you can add:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因你希望默认编译为当前安装的NumPy版本，你可以添加：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Which allows a user to override the default via `-DNPY_TARGET_VERSION`. This
    define must be consistent for each extension module (use of `import_array()`)
    and also applies to the umath module.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户通过`-DNPY_TARGET_VERSION`来覆盖默认值。每个扩展模块（使用`import_array()`）必须保持一致，并且也适用于umath模块。
- en: When you compile against NumPy, you should add the proper version restrictions
    to your `pyproject.toml` (see PEP 517). Since your extension will not be compatible
    with a new major release of NumPy and may not be compatible with very old versions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编译针对NumPy时，应该在`pyproject.toml`中添加适当的版本限制（参见PEP 517）。因为你的扩展将不兼容新的NumPy主要发布，并且可能不兼容非常旧的版本。
- en: For conda-forge packages, please see [here](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于conda-forge包，请查看[这里](https://conda-forge.org/docs/maintainer/knowledge_base.html#building-against-numpy)。
- en: 'as of now, it is usually as easy as including:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 目前来说，通常只需包含以下内容即可：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of NumPy 1.25, NumPy 2.0 is expected to be the next release of NumPy.
    The NumPy 2.0 release is expected to require a different pin, since NumPy 2+ will
    be needed in order to be compatible with both NumPy 1.x and 2.x.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 截至NumPy 1.25，NumPy 2.0 有望是下一个NumPy版本。NumPy 2.0 发布预计需要不同的固定，因为需要NumPy 2+ 才能兼容NumPy
    1.x和2.x。
- en: Runtime dependency & version ranges
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行时依赖和版本范围
- en: 'NumPy itself and many core scientific Python packages have agreed on a schedule
    for dropping support for old Python and NumPy versions: [NEP 29 — Recommend Python
    and NumPy version support as a community policy standard](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We recommend all packages depending on NumPy
    to follow the recommendations in NEP 29.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy本身和许多核心科学Python包已经就放弃支持旧的Python和NumPy版本的时间表达成一致：[NEP 29 — 推荐Python和NumPy版本支持作为社区政策标准](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)")。我们建议所有依赖于NumPy的包遵循NEP 29 中的建议。
- en: For *run-time dependencies*, specify version bounds using `install_requires`
    in `setup.py` (assuming you use `numpy.distutils` or `setuptools` to build).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*运行时依赖*，请在`setup.py`中使用`install_requires`指定版本范围（假设你使用`numpy.distutils`或`setuptools`进行构建）。
- en: 'Most libraries that rely on NumPy will not need to set an upper version bound:
    NumPy is careful to preserve backward-compatibility.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数依赖NumPy的库不需要设置上限版本：NumPy会谨慎保留向后兼容性。
- en: That said, if you are (a) a project that is guaranteed to release frequently,
    (b) use a large part of NumPy’s API surface, and (c) is worried that changes in
    NumPy may break your code, you can set an upper bound of `<MAJOR.MINOR + N` with
    N no less than 3, and `MAJOR.MINOR` being the current release of NumPy [[*]](#id3).
    If you use the NumPy C API (directly or via Cython), you can also pin the current
    major version to prevent ABI breakage. Note that setting an upper bound on NumPy
    may [affect the ability of your library to be installed alongside other, newer
    packages](https://iscinumpy.dev/post/bound-version-constraints/).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，如果你（a）是一个保证频繁发布的项目，（b）使用了NumPy的大部分API，（c）担心NumPy的更改可能会破坏你的代码，你可以将上限设置为
    `<MAJOR.MINOR + N`，其中N不少于3，并且`MAJOR.MINOR`是当前NumPy版本 [[*]](#id3)。如果你使用NumPy C
    API（直接使用或通过Cython），你也可以固定当前主要版本以防止ABI破坏。请注意，设置NumPy的上限可能会[影响你的库与其他更新的包能否同时安装](https://iscinumpy.dev/post/bound-version-constraints/)。
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy has more documentation on how it builds wheels and deals with its build-time
    and runtime dependencies [here](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy有更多关于如何构建wheel和处理构建时和运行时依赖的文档，请查看[这里](https://scipy.github.io/devdocs/dev/core-dev/index.html#distributing)。
- en: NumPy and SciPy wheel build CI may also be useful as a reference, it can be
    found [here for NumPy](https://github.com/MacPython/numpy-wheels) and [here for
    SciPy](https://github.com/MacPython/scipy-wheels).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和SciPy的wheel构建CI也可能有用作为参考，可以在[这里找到NumPy](https://github.com/MacPython/numpy-wheels)和[这里找到SciPy](https://github.com/MacPython/scipy-wheels)。
