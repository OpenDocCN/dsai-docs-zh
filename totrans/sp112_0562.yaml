- en: scipy.signal.kaiserord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.kaiserord.html#scipy.signal.kaiserord](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.kaiserord.html#scipy.signal.kaiserord)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Determine the filter window parameters for the Kaiser window method.
  prefs: []
  type: TYPE_NORMAL
- en: The parameters returned by this function are generally used to create a finite
    impulse response filter using the window method, with either [`firwin`](scipy.signal.firwin.html#scipy.signal.firwin
    "scipy.signal.firwin") or [`firwin2`](scipy.signal.firwin2.html#scipy.signal.firwin2
    "scipy.signal.firwin2").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ripple**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upper bound for the deviation (in dB) of the magnitude of the filter’s frequency
    response from that of the desired filter (not including frequencies in any transition
    intervals). That is, if w is the frequency expressed as a fraction of the Nyquist
    frequency, A(w) is the actual frequency response of the filter and D(w) is the
    desired frequency response, the design requirement is that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: for 0 <= w <= 1 and w not in a transition interval.
  prefs: []
  type: TYPE_NORMAL
- en: '**width**float'
  prefs: []
  type: TYPE_NORMAL
- en: Width of transition region, normalized so that 1 corresponds to pi radians /
    sample. That is, the frequency is expressed as a fraction of the Nyquist frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numtaps**int'
  prefs: []
  type: TYPE_NORMAL
- en: The length of the Kaiser window.
  prefs: []
  type: TYPE_NORMAL
- en: '**beta**float'
  prefs: []
  type: TYPE_NORMAL
- en: The beta parameter for the Kaiser window.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`kaiser_beta`](scipy.signal.kaiser_beta.html#scipy.signal.kaiser_beta "scipy.signal.kaiser_beta"),
    [`kaiser_atten`](scipy.signal.kaiser_atten.html#scipy.signal.kaiser_atten "scipy.signal.kaiser_atten")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to obtain the Kaiser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal.windows.kaiser(numtaps, beta, sym=True)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signal.get_window(beta, numtaps)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signal.get_window((''kaiser'', beta), numtaps)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The empirical equations discovered by Kaiser are used.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: Oppenheim, Schafer, “Discrete-Time Signal Processing”, pp.475-476.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Kaiser window method to design a lowpass FIR filter for a signal
    that is sampled at 1000 Hz.
  prefs: []
  type: TYPE_NORMAL
- en: We want at least 65 dB rejection in the stop band, and in the pass band the
    gain should vary no more than 0.5%.
  prefs: []
  type: TYPE_NORMAL
- en: We want a cutoff frequency of 175 Hz, with a transition between the pass band
    and the stop band of 24 Hz. That is, in the band [0, 163], the gain varies no
    more than 0.5%, and in the band [187, 500], the signal is attenuated by at least
    65 dB.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Kaiser method accepts just a single parameter to control the pass band ripple
    and the stop band rejection, so we use the more restrictive of the two. In this
    case, the pass band ripple is 0.005, or 46.02 dB, so we will use 65 dB as the
    design parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Use [`kaiserord`](#scipy.signal.kaiserord "scipy.signal.kaiserord") to determine
    the length of the filter and the parameter for the Kaiser window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use [`firwin`](scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")
    to create the FIR filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Compute the frequency response of the filter. `w` is the array of frequencies,
    and `h` is the corresponding complex array of frequency responses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Compute the deviation of the magnitude of the filter’s response from that of
    the ideal lowpass filter. Values in the transition region are set to `nan`, so
    they won’t appear in the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Plot the deviation. A close look at the left end of the stop band shows that
    the requirement for 65 dB attenuation is violated in the first lobe by about 0.125
    dB. This is not unusual for the Kaiser window method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-kaiserord-1.png](../Images/b6b7240c75f8a62e2f0eab5981d30abb.png)'
  prefs: []
  type: TYPE_IMG
