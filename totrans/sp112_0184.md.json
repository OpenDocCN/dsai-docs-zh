["```py\nclass scipy.interpolate.BSpline(t, c, k, extrapolate=True, axis=0)\n```", "```py\n>>> def B(x, k, i, t):\n...    if k == 0:\n...       return 1.0 if t[i] <= x < t[i+1] else 0.0\n...    if t[i+k] == t[i]:\n...       c1 = 0.0\n...    else:\n...       c1 = (x - t[i])/(t[i+k] - t[i]) * B(x, k-1, i, t)\n...    if t[i+k+1] == t[i+1]:\n...       c2 = 0.0\n...    else:\n...       c2 = (t[i+k+1] - x)/(t[i+k+1] - t[i+1]) * B(x, k-1, i+1, t)\n...    return c1 + c2 \n```", "```py\n>>> def bspline(x, t, c, k):\n...    n = len(t) - k - 1\n...    assert (n >= k+1) and (len(c) >= n)\n...    return sum(c[i] * B(x, k, i, t) for i in range(n)) \n```", "```py\n>>> from scipy.interpolate import BSpline\n>>> k = 2\n>>> t = [0, 1, 2, 3, 4, 5, 6]\n>>> c = [-1, 2, 0, -1]\n>>> spl = BSpline(t, c, k)\n>>> spl(2.5)\narray(1.375)\n>>> bspline(2.5, t, c, k)\n1.375 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> fig, ax = plt.subplots()\n>>> xx = np.linspace(1.5, 4.5, 50)\n>>> ax.plot(xx, [bspline(x, t, c ,k) for x in xx], 'r-', lw=3, label='naive')\n>>> ax.plot(xx, spl(xx), 'b-', lw=4, alpha=0.7, label='BSpline')\n>>> ax.grid(True)\n>>> ax.legend(loc='best')\n>>> plt.show() \n```"]