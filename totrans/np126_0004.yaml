- en: NumPy quickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/user/quickstart.html](https://numpy.org/doc/1.26/user/quickstart.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll need to know a bit of Python. For a refresher, see the [Python tutorial](https://docs.python.org/tutorial/).
  prefs: []
  type: TYPE_NORMAL
- en: To work the examples, you’ll need `matplotlib` installed in addition to NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Learner profile**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a quick overview of arrays in NumPy. It demonstrates how n-dimensional
    (\(n>=2\)) arrays are represented and can be manipulated. In particular, if you
    don’t know how to apply common functions to n-dimensional arrays (without using
    for-loops), or if you want to understand axis and shape properties for n-dimensional
    arrays, this article might be of help.
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning Objectives**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading, you should be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the difference between one-, two- and n-dimensional arrays in NumPy;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to apply some linear algebra operations to n-dimensional arrays
    without using for-loops;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand axis and shape properties for n-dimensional arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## The Basics'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy’s main object is the homogeneous multidimensional array. It is a table
    of elements (usually numbers), all of the same type, indexed by a tuple of non-negative
    integers. In NumPy dimensions are called *axes*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the array for the coordinates of a point in 3D space, `[1, 2, 1]`,
    has one axis. That axis has 3 elements in it, so we say it has a length of 3\.
    In the example pictured below, the array has 2 axes. The first axis has a length
    of 2, the second axis has a length of 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy’s array class is called `ndarray`. It is also known by the alias `array`.
    Note that `numpy.array` is not the same as the Standard Python Library class `array.array`,
    which only handles one-dimensional arrays and offers less functionality. The more
    important attributes of an `ndarray` object are:'
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.ndim
  prefs: []
  type: TYPE_NORMAL
- en: the number of axes (dimensions) of the array.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.shape
  prefs: []
  type: TYPE_NORMAL
- en: the dimensions of the array. This is a tuple of integers indicating the size
    of the array in each dimension. For a matrix with *n* rows and *m* columns, `shape`
    will be `(n,m)`. The length of the `shape` tuple is therefore the number of axes,
    `ndim`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.size
  prefs: []
  type: TYPE_NORMAL
- en: the total number of elements of the array. This is equal to the product of the
    elements of `shape`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.dtype
  prefs: []
  type: TYPE_NORMAL
- en: an object describing the type of the elements in the array. One can create or
    specify dtype’s using standard Python types. Additionally NumPy provides types
    of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.itemsize
  prefs: []
  type: TYPE_NORMAL
- en: the size in bytes of each element of the array. For example, an array of elements
    of type `float64` has `itemsize` 8 (=64/8), while one of type `complex32` has
    `itemsize` 4 (=32/8). It is equivalent to `ndarray.dtype.itemsize`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.data
  prefs: []
  type: TYPE_NORMAL
- en: the buffer containing the actual elements of the array. Normally, we won’t need
    to use this attribute because we will access the elements in an array using indexing
    facilities.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '### Array Creation'
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to create arrays.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can create an array from a regular Python list or tuple using
    the `array` function. The type of the resulting array is deduced from the type
    of the elements in the sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A frequent error consists in calling `array` with multiple arguments, rather
    than providing a single sequence as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`array` transforms sequences of sequences into two-dimensional arrays, sequences
    of sequences of sequences into three-dimensional arrays, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of the array can also be explicitly specified at creation time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Often, the elements of an array are originally unknown, but its size is known.
    Hence, NumPy offers several functions to create arrays with initial placeholder
    content. These minimize the necessity of growing arrays, an expensive operation.
  prefs: []
  type: TYPE_NORMAL
- en: The function `zeros` creates an array full of zeros, the function `ones` creates
    an array full of ones, and the function `empty` creates an array whose initial
    content is random and depends on the state of the memory. By default, the dtype
    of the created array is `float64`, but it can be specified via the key word argument
    `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To create sequences of numbers, NumPy provides the `arange` function which is
    analogous to the Python built-in `range`, but returns an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When `arange` is used with floating point arguments, it is generally not possible
    to predict the number of elements obtained, due to the finite floating point precision.
    For this reason, it is usually better to use the function `linspace` that receives
    as an argument the number of elements that we want, instead of the step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros "numpy.zeros"),
    [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like"),
    [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"), [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like
    "numpy.ones_like"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`arange`](../reference/generated/numpy.arange.html#numpy.arange
    "numpy.arange"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), *numpy.random.Generator.rand*, *numpy.random.Generator.randn*,
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile
    "numpy.fromfile")'
  prefs: []
  type: TYPE_NORMAL
- en: Printing Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you print an array, NumPy displays it in a similar way to nested lists,
    but with the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: the last axis is printed from left to right,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the second-to-last is printed from top to bottom,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the rest are also printed from top to bottom, with each slice separated from
    the next by an empty line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-dimensional arrays are then printed as rows, bidimensionals as matrices
    and tridimensionals as lists of matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See [below](#quickstart-shape-manipulation) to get more details on `reshape`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an array is too large to be printed, NumPy automatically skips the central
    part of the array and only prints the corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To disable this behaviour and force NumPy to print the entire array, you can
    change the printing options using `set_printoptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '### Basic Operations'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators on arrays apply *elementwise*. A new array is created and
    filled with the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike in many matrix languages, the product operator `*` operates elementwise
    in NumPy arrays. The matrix product can be performed using the `@` operator (in
    python >=3.5) or the `dot` function or method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Some operations, such as `+=` and `*=`, act in place to modify an existing array
    rather than create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When operating with arrays of different types, the type of the resulting array
    corresponds to the more general or precise one (a behavior known as upcasting).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Many unary operations, such as computing the sum of all the elements in the
    array, are implemented as methods of the `ndarray` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, these operations apply to the array as though it were a list of
    numbers, regardless of its shape. However, by specifying the `axis` parameter
    you can apply an operation along the specified axis of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Universal Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy provides familiar mathematical functions such as sin, cos, and exp. In
    NumPy, these are called “universal functions” (`ufunc`). Within NumPy, these functions
    operate elementwise on an array, producing an array as output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`apply_along_axis`](../reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis
    "numpy.apply_along_axis"), [`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax
    "numpy.argmax"), [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin
    "numpy.argmin"), [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`average`](../reference/generated/numpy.average.html#numpy.average
    "numpy.average"), [`bincount`](../reference/generated/numpy.bincount.html#numpy.bincount
    "numpy.bincount"), [`ceil`](../reference/generated/numpy.ceil.html#numpy.ceil
    "numpy.ceil"), [`clip`](../reference/generated/numpy.clip.html#numpy.clip "numpy.clip"),
    [`conj`](../reference/generated/numpy.conj.html#numpy.conj "numpy.conj"), [`corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"), [`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"),
    [`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`diff`](../reference/generated/numpy.diff.html#numpy.diff "numpy.diff"), [`dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), [`floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`invert`](../reference/generated/numpy.invert.html#numpy.invert "numpy.invert"),
    [`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean "numpy.mean"),
    [`median`](../reference/generated/numpy.median.html#numpy.median "numpy.median"),
    [`min`](../reference/generated/numpy.min.html#numpy.min "numpy.min"), [`minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`re`](https://docs.python.org/3/library/re.html#module-re "(in Python v3.11)"),
    [`round`](../reference/generated/numpy.round.html#numpy.round "numpy.round"),
    [`sort`](../reference/generated/numpy.sort.html#numpy.sort "numpy.sort"), [`std`](../reference/generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum"),
    [`trace`](../reference/generated/numpy.trace.html#numpy.trace "numpy.trace"),
    [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose "numpy.transpose"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot"), [`vectorize`](../reference/generated/numpy.vectorize.html#numpy.vectorize
    "numpy.vectorize"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Indexing, Slicing and Iterating'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-dimensional** arrays can be indexed, sliced and iterated over, much like
    [lists](https://docs.python.org/tutorial/introduction.html#lists) and other Python
    sequences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Multidimensional** arrays can have one index per axis. These indices are
    given in a tuple separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When fewer indices are provided than the number of axes, the missing indices
    are considered complete slices`:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The expression within brackets in `b[i]` is treated as an `i` followed by as
    many instances of `:` as needed to represent the remaining axes. NumPy also allows
    you to write this using dots as `b[i, ...]`.
  prefs: []
  type: TYPE_NORMAL
- en: The **dots** (`...`) represent as many colons as needed to produce a complete
    indexing tuple. For example, if `x` is an array with 5 axes, then
  prefs: []
  type: TYPE_NORMAL
- en: '`x[1, 2, ...]` is equivalent to `x[1, 2, :, :, :]`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[..., 3]` to `x[:, :, :, :, 3]` and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[4, ..., 5, :]` to `x[4, :, :, 5, :]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Iterating** over multidimensional arrays is done with respect to the first
    axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if one wants to perform an operation on each element in the array,
    one can use the `flat` attribute which is an [iterator](https://docs.python.org/tutorial/classes.html#iterators)
    over all the elements of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Indexing on ndarrays](basics.indexing.html#basics-indexing), [Indexing routines](../reference/arrays.indexing.html#arrays-indexing)
    (reference), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ndenumerate`](../reference/generated/numpy.ndenumerate.html#numpy.ndenumerate
    "numpy.ndenumerate"), [`indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices")  ## Shape Manipulation'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the shape of an array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An array has a shape given by the number of elements along each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape of an array can be changed with various commands. Note that the following
    three commands all return a modified array, but do not change the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The order of the elements in the array resulting from `ravel` is normally “C-style”,
    that is, the rightmost index “changes the fastest”, so the element after `a[0,
    0]` is `a[0, 1]`. If the array is reshaped to some other shape, again the array
    is treated as “C-style”. NumPy normally creates arrays stored in this order, so
    `ravel` will usually not need to copy its argument, but if the array was made
    by taking slices of another array or created with unusual options, it may need
    to be copied. The functions `ravel` and `reshape` can also be instructed, using
    an optional argument, to use FORTRAN-style arrays, in which the leftmost index
    changes the fastest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape")
    function returns its argument with a modified shape, whereas the [`ndarray.resize`](../reference/generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize") method modifies the array itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If a dimension is given as `-1` in a reshaping operation, the other dimensions
    are automatically calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.shape`](../reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape"), [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape"), [`resize`](../reference/generated/numpy.resize.html#numpy.resize
    "numpy.resize"), [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Stacking together different arrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several arrays can be stacked together along different axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The function [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack") stacks 1D arrays as columns into a 2D array. It is equivalent
    to [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack")
    only for 2D arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the function [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is equivalent to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") for any input arrays. In fact, [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is an alias for [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In general, for arrays with more than two dimensions, [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") stacks along their second axes, [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") stacks along their first axes, and [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") allows for an optional arguments giving the number of the
    axis along which the concatenation should happen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: In complex cases, [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")
    and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_") are useful
    for creating arrays by stacking numbers along one axis. They allow the use of
    range literals `:`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When used with arrays as arguments, [`r_`](../reference/generated/numpy.r_.html#numpy.r_
    "numpy.r_") and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_")
    are similar to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") and [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") in their default behavior, but allow for an optional argument
    giving the number of the axis along which to concatenate.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack"),
    [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack "numpy.vstack"),
    [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting one array into several smaller ones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit"),
    you can split an array along its horizontal axis, either by specifying the number
    of equally shaped arrays to return, or by specifying the columns after which the
    division should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")
    splits along the vertical axis, and [`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split") allows one to specify along which axis to split.  ## Copies
    and Views'
  prefs: []
  type: TYPE_NORMAL
- en: 'When operating and manipulating arrays, their data is sometimes copied into
    a new array and sometimes not. This is often a source of confusion for beginners.
    There are three cases:'
  prefs: []
  type: TYPE_NORMAL
- en: No Copy at All
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple assignments make no copy of objects or their data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Python passes mutable objects as references, so function calls make no copy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: View or Shallow Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different array objects can share the same data. The `view` method creates a
    new array object that looks at the same data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Slicing an array returns a view of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Deep Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `copy` method makes a complete copy of the array and its data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes `copy` should be called after slicing if the original array is not
    required anymore. For example, suppose `a` is a huge intermediate result and the
    final result `b` only contains a small fraction of `a`, a deep copy should be
    made when constructing `b` with slicing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: If `b = a[:100]` is used instead, `a` is referenced by `b` and will persist
    in memory even if `del a` is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Functions and Methods Overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a list of some useful NumPy functions and methods names ordered in categories.
    See [Routines](../reference/routines.html#routines) for the full list.
  prefs: []
  type: TYPE_NORMAL
- en: Array Creation
  prefs: []
  type: TYPE_NORMAL
- en: '[`arange`](../reference/generated/numpy.arange.html#numpy.arange "numpy.arange"),
    [`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`copy`](../reference/generated/numpy.copy.html#numpy.copy "numpy.copy"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`eye`](../reference/generated/numpy.eye.html#numpy.eye "numpy.eye"),
    [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile"),
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`identity`](../reference/generated/numpy.identity.html#numpy.identity
    "numpy.identity"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), [`logspace`](../reference/generated/numpy.logspace.html#numpy.logspace
    "numpy.logspace"), [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid
    "numpy.mgrid"), [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid
    "numpy.ogrid"), [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"),
    [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros
    "numpy.zeros"), [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like
    "numpy.zeros_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Conversions
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.astype`](../reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype"), [`atleast_1d`](../reference/generated/numpy.atleast_1d.html#numpy.atleast_1d
    "numpy.atleast_1d"), [`atleast_2d`](../reference/generated/numpy.atleast_2d.html#numpy.atleast_2d
    "numpy.atleast_2d"), [`atleast_3d`](../reference/generated/numpy.atleast_3d.html#numpy.atleast_3d
    "numpy.atleast_3d"), [`mat`](../reference/generated/numpy.mat.html#numpy.mat "numpy.mat")'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulations
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split"), [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`diagonal`](../reference/generated/numpy.diagonal.html#numpy.diagonal
    "numpy.diagonal"), [`dsplit`](../reference/generated/numpy.dsplit.html#numpy.dsplit
    "numpy.dsplit"), [`dstack`](../reference/generated/numpy.dstack.html#numpy.dstack
    "numpy.dstack"), [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit
    "numpy.hsplit"), [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack"), [`ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item"), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel "numpy.ravel"),
    [`repeat`](../reference/generated/numpy.repeat.html#numpy.repeat "numpy.repeat"),
    [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`resize`](../reference/generated/numpy.resize.html#numpy.resize "numpy.resize"),
    [`squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"),
    [`swapaxes`](../reference/generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes"),
    [`take`](../reference/generated/numpy.take.html#numpy.take "numpy.take"), [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit
    "numpy.vsplit"), [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Ordering
  prefs: []
  type: TYPE_NORMAL
- en: '[`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin "numpy.argmin"),
    [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`min`](../reference/generated/numpy.min.html#numpy.min
    "numpy.min"), [`ptp`](../reference/generated/numpy.ptp.html#numpy.ptp "numpy.ptp"),
    [`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort")'
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs: []
  type: TYPE_NORMAL
- en: '[`choose`](../reference/generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`compress`](../reference/generated/numpy.compress.html#numpy.compress "numpy.compress"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`ndarray.fill`](../reference/generated/numpy.ndarray.fill.html#numpy.ndarray.fill
    "numpy.ndarray.fill"), [`imag`](../reference/generated/numpy.imag.html#numpy.imag
    "numpy.imag"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`put`](../reference/generated/numpy.put.html#numpy.put "numpy.put"), [`putmask`](../reference/generated/numpy.putmask.html#numpy.putmask
    "numpy.putmask"), [`real`](../reference/generated/numpy.real.html#numpy.real "numpy.real"),
    [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Statistics
  prefs: []
  type: TYPE_NORMAL
- en: '[`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean
    "numpy.mean"), [`std`](../reference/generated/numpy.std.html#numpy.std "numpy.std"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Linear Algebra
  prefs: []
  type: TYPE_NORMAL
- en: '[`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`dot`](../reference/generated/numpy.dot.html#numpy.dot "numpy.dot"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`linalg.svd`](../reference/generated/numpy.linalg.svd.html#numpy.linalg.svd
    "numpy.linalg.svd"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot")'
  prefs: []
  type: TYPE_NORMAL
- en: Less Basic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Broadcasting rules'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting allows universal functions to deal in a meaningful way with inputs
    that do not have exactly the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: The first rule of broadcasting is that if all input arrays do not have the same
    number of dimensions, a “1” will be repeatedly prepended to the shapes of the
    smaller arrays until all the arrays have the same number of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The second rule of broadcasting ensures that arrays with a size of 1 along a
    particular dimension act as if they had the size of the array with the largest
    shape along that dimension. The value of the array element is assumed to be the
    same along that dimension for the “broadcast” array.
  prefs: []
  type: TYPE_NORMAL
- en: After application of the broadcasting rules, the sizes of all arrays must match.
    More details can be found in [Broadcasting](basics.broadcasting.html#basics-broadcasting).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced indexing and index tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy offers more indexing facilities than regular Python sequences. In addition
    to indexing by integers and slices, as we saw before, arrays can be indexed by
    arrays of integers and arrays of booleans.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Arrays of Indices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: When the indexed array `a` is multidimensional, a single array of indices refers
    to the first dimension of `a`. The following example shows this behavior by converting
    an image of labels into a color image using a palette.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We can also give indexes for more than one dimension. The arrays of indices
    for each dimension must have the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In Python, `arr[i, j]` is exactly the same as `arr[(i, j)]`—so we can put `i`
    and `j` in a `tuple` and then do the indexing with that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: However, we can not do this by putting `i` and `j` into an array, because this
    array will be interpreted as indexing the first dimension of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Another common use of indexing with arrays is the search of the maximum value
    of time-dependent series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use indexing with arrays as a target to assign to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'However, when the list of indices contains repetitions, the assignment is done
    several times, leaving behind the last value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This is reasonable enough, but watch out if you want to use Python’s `+=` construct,
    as it may not do what you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Even though 0 occurs twice in the list of indices, the 0th element is only incremented
    once. This is because Python requires `a += 1` to be equivalent to `a = a + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Boolean Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we index arrays with arrays of (integer) indices we are providing the list
    of indices to pick. With boolean indices the approach is different; we explicitly
    choose which items in the array we want and which ones we don’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most natural way one can think of for boolean indexing is to use boolean
    arrays that have *the same shape* as the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This property can be very useful in assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'You can look at the following example to see how to use boolean indexing to
    generate an image of the [Mandelbrot set](https://en.wikipedia.org/wiki/Mandelbrot_set):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-1.png](../Images/f14ba9a03da211bbacbafc982923e1f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second way of indexing with booleans is more similar to integer indexing;
    for each dimension of the array we give a 1D boolean array selecting the slices
    we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note that the length of the 1D boolean array must coincide with the length of
    the dimension (or axis) you want to slice. In the previous example, `b1` has length
    3 (the number of *rows* in `a`), and `b2` (of length 4) is suitable to index the
    2nd axis (columns) of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: The ix_() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [`ix_`](../reference/generated/numpy.ix_.html#numpy.ix_ "numpy.ix_") function
    can be used to combine different vectors so as to obtain the result for each n-uplet.
    For example, if you want to compute all the a+b*c for all the triplets taken from
    each of the vectors a, b and c:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also implement the reduce as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'and then use it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of this version of reduce compared to the normal ufunc.reduce
    is that it makes use of the [broadcasting rules](#broadcasting-rules) in order
    to avoid creating an argument array the size of the output times the number of
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Structured arrays](basics.rec.html#structured-arrays).
  prefs: []
  type: TYPE_NORMAL
- en: Tricks and Tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we give a list of short and useful tips.
  prefs: []
  type: TYPE_NORMAL
- en: “Automatic” Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the dimensions of an array, you can omit one of the sizes which will
    then be deduced automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Vector Stacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'How do we construct a 2D array from a list of equally-sized row vectors? In
    MATLAB this is quite easy: if `x` and `y` are two vectors of the same length you
    only need do `m=[x;y]`. In NumPy this works via the functions `column_stack`,
    `dstack`, `hstack` and `vstack`, depending on the dimension in which the stacking
    is to be done. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The logic behind those functions in more than two dimensions can be strange.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy for MATLAB users](numpy-for-matlab-users.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NumPy `histogram` function applied to an array returns a pair of vectors:
    the histogram of the array and a vector of the bin edges. Beware: `matplotlib`
    also has a function to build histograms (called `hist`, as in Matlab) that differs
    from the one in NumPy. The main difference is that `pylab.hist` plots the histogram
    automatically, while `numpy.histogram` only generates the data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-2.png](../Images/6e8a719f3f733b746d4f0762a37ae4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: With Matplotlib >=3.4 you can also use `plt.stairs(n, bins)`.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [Python tutorial](https://docs.python.org/tutorial/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy reference](../reference/index.html#reference)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy Tutorial](https://docs.scipy.org/doc/scipy/tutorial/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy Lecture Notes](https://scipy-lectures.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [matlab, R, IDL, NumPy/SciPy dictionary](http://mathesaurus.sf.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[tutorial-svd](https://numpy.org/numpy-tutorials/content/tutorial-svd.html
    "(in NumPy tutorials)")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll need to know a bit of Python. For a refresher, see the [Python tutorial](https://docs.python.org/tutorial/).
  prefs: []
  type: TYPE_NORMAL
- en: To work the examples, you’ll need `matplotlib` installed in addition to NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Learner profile**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a quick overview of arrays in NumPy. It demonstrates how n-dimensional
    (\(n>=2\)) arrays are represented and can be manipulated. In particular, if you
    don’t know how to apply common functions to n-dimensional arrays (without using
    for-loops), or if you want to understand axis and shape properties for n-dimensional
    arrays, this article might be of help.
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning Objectives**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading, you should be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the difference between one-, two- and n-dimensional arrays in NumPy;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to apply some linear algebra operations to n-dimensional arrays
    without using for-loops;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand axis and shape properties for n-dimensional arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## The Basics'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy’s main object is the homogeneous multidimensional array. It is a table
    of elements (usually numbers), all of the same type, indexed by a tuple of non-negative
    integers. In NumPy dimensions are called *axes*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the array for the coordinates of a point in 3D space, `[1, 2, 1]`,
    has one axis. That axis has 3 elements in it, so we say it has a length of 3\.
    In the example pictured below, the array has 2 axes. The first axis has a length
    of 2, the second axis has a length of 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy’s array class is called `ndarray`. It is also known by the alias `array`.
    Note that `numpy.array` is not the same as the Standard Python Library class `array.array`,
    which only handles one-dimensional arrays and offers less functionality. The more
    important attributes of an `ndarray` object are:'
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.ndim
  prefs: []
  type: TYPE_NORMAL
- en: the number of axes (dimensions) of the array.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.shape
  prefs: []
  type: TYPE_NORMAL
- en: the dimensions of the array. This is a tuple of integers indicating the size
    of the array in each dimension. For a matrix with *n* rows and *m* columns, `shape`
    will be `(n,m)`. The length of the `shape` tuple is therefore the number of axes,
    `ndim`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.size
  prefs: []
  type: TYPE_NORMAL
- en: the total number of elements of the array. This is equal to the product of the
    elements of `shape`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.dtype
  prefs: []
  type: TYPE_NORMAL
- en: an object describing the type of the elements in the array. One can create or
    specify dtype’s using standard Python types. Additionally NumPy provides types
    of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.itemsize
  prefs: []
  type: TYPE_NORMAL
- en: the size in bytes of each element of the array. For example, an array of elements
    of type `float64` has `itemsize` 8 (=64/8), while one of type `complex32` has
    `itemsize` 4 (=32/8). It is equivalent to `ndarray.dtype.itemsize`.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray.data
  prefs: []
  type: TYPE_NORMAL
- en: the buffer containing the actual elements of the array. Normally, we won’t need
    to use this attribute because we will access the elements in an array using indexing
    facilities.
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '### Array Creation'
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to create arrays.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can create an array from a regular Python list or tuple using
    the `array` function. The type of the resulting array is deduced from the type
    of the elements in the sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: A frequent error consists in calling `array` with multiple arguments, rather
    than providing a single sequence as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '`array` transforms sequences of sequences into two-dimensional arrays, sequences
    of sequences of sequences into three-dimensional arrays, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of the array can also be explicitly specified at creation time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Often, the elements of an array are originally unknown, but its size is known.
    Hence, NumPy offers several functions to create arrays with initial placeholder
    content. These minimize the necessity of growing arrays, an expensive operation.
  prefs: []
  type: TYPE_NORMAL
- en: The function `zeros` creates an array full of zeros, the function `ones` creates
    an array full of ones, and the function `empty` creates an array whose initial
    content is random and depends on the state of the memory. By default, the dtype
    of the created array is `float64`, but it can be specified via the key word argument
    `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: To create sequences of numbers, NumPy provides the `arange` function which is
    analogous to the Python built-in `range`, but returns an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'When `arange` is used with floating point arguments, it is generally not possible
    to predict the number of elements obtained, due to the finite floating point precision.
    For this reason, it is usually better to use the function `linspace` that receives
    as an argument the number of elements that we want, instead of the step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros "numpy.zeros"),
    [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like"),
    [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"), [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like
    "numpy.ones_like"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`arange`](../reference/generated/numpy.arange.html#numpy.arange
    "numpy.arange"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), *numpy.random.Generator.rand*, *numpy.random.Generator.randn*,
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile
    "numpy.fromfile")'
  prefs: []
  type: TYPE_NORMAL
- en: Printing Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you print an array, NumPy displays it in a similar way to nested lists,
    but with the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: the last axis is printed from left to right,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the second-to-last is printed from top to bottom,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the rest are also printed from top to bottom, with each slice separated from
    the next by an empty line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-dimensional arrays are then printed as rows, bidimensionals as matrices
    and tridimensionals as lists of matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: See [below](#quickstart-shape-manipulation) to get more details on `reshape`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an array is too large to be printed, NumPy automatically skips the central
    part of the array and only prints the corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: To disable this behaviour and force NumPy to print the entire array, you can
    change the printing options using `set_printoptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '### Basic Operations'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators on arrays apply *elementwise*. A new array is created and
    filled with the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike in many matrix languages, the product operator `*` operates elementwise
    in NumPy arrays. The matrix product can be performed using the `@` operator (in
    python >=3.5) or the `dot` function or method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Some operations, such as `+=` and `*=`, act in place to modify an existing array
    rather than create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: When operating with arrays of different types, the type of the resulting array
    corresponds to the more general or precise one (a behavior known as upcasting).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Many unary operations, such as computing the sum of all the elements in the
    array, are implemented as methods of the `ndarray` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, these operations apply to the array as though it were a list of
    numbers, regardless of its shape. However, by specifying the `axis` parameter
    you can apply an operation along the specified axis of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Universal Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy provides familiar mathematical functions such as sin, cos, and exp. In
    NumPy, these are called “universal functions” (`ufunc`). Within NumPy, these functions
    operate elementwise on an array, producing an array as output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`apply_along_axis`](../reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis
    "numpy.apply_along_axis"), [`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax
    "numpy.argmax"), [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin
    "numpy.argmin"), [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`average`](../reference/generated/numpy.average.html#numpy.average
    "numpy.average"), [`bincount`](../reference/generated/numpy.bincount.html#numpy.bincount
    "numpy.bincount"), [`ceil`](../reference/generated/numpy.ceil.html#numpy.ceil
    "numpy.ceil"), [`clip`](../reference/generated/numpy.clip.html#numpy.clip "numpy.clip"),
    [`conj`](../reference/generated/numpy.conj.html#numpy.conj "numpy.conj"), [`corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"), [`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"),
    [`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`diff`](../reference/generated/numpy.diff.html#numpy.diff "numpy.diff"), [`dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), [`floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`invert`](../reference/generated/numpy.invert.html#numpy.invert "numpy.invert"),
    [`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean "numpy.mean"),
    [`median`](../reference/generated/numpy.median.html#numpy.median "numpy.median"),
    [`min`](../reference/generated/numpy.min.html#numpy.min "numpy.min"), [`minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`re`](https://docs.python.org/3/library/re.html#module-re "(in Python v3.11)"),
    [`round`](../reference/generated/numpy.round.html#numpy.round "numpy.round"),
    [`sort`](../reference/generated/numpy.sort.html#numpy.sort "numpy.sort"), [`std`](../reference/generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum"),
    [`trace`](../reference/generated/numpy.trace.html#numpy.trace "numpy.trace"),
    [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose "numpy.transpose"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot"), [`vectorize`](../reference/generated/numpy.vectorize.html#numpy.vectorize
    "numpy.vectorize"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Indexing, Slicing and Iterating'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-dimensional** arrays can be indexed, sliced and iterated over, much like
    [lists](https://docs.python.org/tutorial/introduction.html#lists) and other Python
    sequences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '**Multidimensional** arrays can have one index per axis. These indices are
    given in a tuple separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: When fewer indices are provided than the number of axes, the missing indices
    are considered complete slices`:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The expression within brackets in `b[i]` is treated as an `i` followed by as
    many instances of `:` as needed to represent the remaining axes. NumPy also allows
    you to write this using dots as `b[i, ...]`.
  prefs: []
  type: TYPE_NORMAL
- en: The **dots** (`...`) represent as many colons as needed to produce a complete
    indexing tuple. For example, if `x` is an array with 5 axes, then
  prefs: []
  type: TYPE_NORMAL
- en: '`x[1, 2, ...]` is equivalent to `x[1, 2, :, :, :]`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[..., 3]` to `x[:, :, :, :, 3]` and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[4, ..., 5, :]` to `x[4, :, :, 5, :]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '**Iterating** over multidimensional arrays is done with respect to the first
    axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if one wants to perform an operation on each element in the array,
    one can use the `flat` attribute which is an [iterator](https://docs.python.org/tutorial/classes.html#iterators)
    over all the elements of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Indexing on ndarrays](basics.indexing.html#basics-indexing), [Indexing routines](../reference/arrays.indexing.html#arrays-indexing)
    (reference), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ndenumerate`](../reference/generated/numpy.ndenumerate.html#numpy.ndenumerate
    "numpy.ndenumerate"), [`indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices")'
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '### Array Creation'
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to create arrays.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can create an array from a regular Python list or tuple using
    the `array` function. The type of the resulting array is deduced from the type
    of the elements in the sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: A frequent error consists in calling `array` with multiple arguments, rather
    than providing a single sequence as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '`array` transforms sequences of sequences into two-dimensional arrays, sequences
    of sequences of sequences into three-dimensional arrays, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The type of the array can also be explicitly specified at creation time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Often, the elements of an array are originally unknown, but its size is known.
    Hence, NumPy offers several functions to create arrays with initial placeholder
    content. These minimize the necessity of growing arrays, an expensive operation.
  prefs: []
  type: TYPE_NORMAL
- en: The function `zeros` creates an array full of zeros, the function `ones` creates
    an array full of ones, and the function `empty` creates an array whose initial
    content is random and depends on the state of the memory. By default, the dtype
    of the created array is `float64`, but it can be specified via the key word argument
    `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: To create sequences of numbers, NumPy provides the `arange` function which is
    analogous to the Python built-in `range`, but returns an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'When `arange` is used with floating point arguments, it is generally not possible
    to predict the number of elements obtained, due to the finite floating point precision.
    For this reason, it is usually better to use the function `linspace` that receives
    as an argument the number of elements that we want, instead of the step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros "numpy.zeros"),
    [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like"),
    [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"), [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like
    "numpy.ones_like"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`arange`](../reference/generated/numpy.arange.html#numpy.arange
    "numpy.arange"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), *numpy.random.Generator.rand*, *numpy.random.Generator.randn*,
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile
    "numpy.fromfile")'
  prefs: []
  type: TYPE_NORMAL
- en: Printing Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you print an array, NumPy displays it in a similar way to nested lists,
    but with the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: the last axis is printed from left to right,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the second-to-last is printed from top to bottom,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the rest are also printed from top to bottom, with each slice separated from
    the next by an empty line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-dimensional arrays are then printed as rows, bidimensionals as matrices
    and tridimensionals as lists of matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See [below](#quickstart-shape-manipulation) to get more details on `reshape`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If an array is too large to be printed, NumPy automatically skips the central
    part of the array and only prints the corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: To disable this behaviour and force NumPy to print the entire array, you can
    change the printing options using `set_printoptions`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '### Basic Operations'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic operators on arrays apply *elementwise*. A new array is created and
    filled with the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike in many matrix languages, the product operator `*` operates elementwise
    in NumPy arrays. The matrix product can be performed using the `@` operator (in
    python >=3.5) or the `dot` function or method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Some operations, such as `+=` and `*=`, act in place to modify an existing array
    rather than create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: When operating with arrays of different types, the type of the resulting array
    corresponds to the more general or precise one (a behavior known as upcasting).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Many unary operations, such as computing the sum of all the elements in the
    array, are implemented as methods of the `ndarray` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, these operations apply to the array as though it were a list of
    numbers, regardless of its shape. However, by specifying the `axis` parameter
    you can apply an operation along the specified axis of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Universal Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy provides familiar mathematical functions such as sin, cos, and exp. In
    NumPy, these are called “universal functions” (`ufunc`). Within NumPy, these functions
    operate elementwise on an array, producing an array as output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`apply_along_axis`](../reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis
    "numpy.apply_along_axis"), [`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax
    "numpy.argmax"), [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin
    "numpy.argmin"), [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`average`](../reference/generated/numpy.average.html#numpy.average
    "numpy.average"), [`bincount`](../reference/generated/numpy.bincount.html#numpy.bincount
    "numpy.bincount"), [`ceil`](../reference/generated/numpy.ceil.html#numpy.ceil
    "numpy.ceil"), [`clip`](../reference/generated/numpy.clip.html#numpy.clip "numpy.clip"),
    [`conj`](../reference/generated/numpy.conj.html#numpy.conj "numpy.conj"), [`corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"), [`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"),
    [`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`diff`](../reference/generated/numpy.diff.html#numpy.diff "numpy.diff"), [`dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), [`floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`invert`](../reference/generated/numpy.invert.html#numpy.invert "numpy.invert"),
    [`lexsort`](../reference/generated/numpy.lexsort.html#numpy.lexsort "numpy.lexsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean "numpy.mean"),
    [`median`](../reference/generated/numpy.median.html#numpy.median "numpy.median"),
    [`min`](../reference/generated/numpy.min.html#numpy.min "numpy.min"), [`minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`re`](https://docs.python.org/3/library/re.html#module-re "(in Python v3.11)"),
    [`round`](../reference/generated/numpy.round.html#numpy.round "numpy.round"),
    [`sort`](../reference/generated/numpy.sort.html#numpy.sort "numpy.sort"), [`std`](../reference/generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum"),
    [`trace`](../reference/generated/numpy.trace.html#numpy.trace "numpy.trace"),
    [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose "numpy.transpose"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot"), [`vectorize`](../reference/generated/numpy.vectorize.html#numpy.vectorize
    "numpy.vectorize"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Indexing, Slicing and Iterating'
  prefs: []
  type: TYPE_NORMAL
- en: '**One-dimensional** arrays can be indexed, sliced and iterated over, much like
    [lists](https://docs.python.org/tutorial/introduction.html#lists) and other Python
    sequences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '**Multidimensional** arrays can have one index per axis. These indices are
    given in a tuple separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: When fewer indices are provided than the number of axes, the missing indices
    are considered complete slices`:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: The expression within brackets in `b[i]` is treated as an `i` followed by as
    many instances of `:` as needed to represent the remaining axes. NumPy also allows
    you to write this using dots as `b[i, ...]`.
  prefs: []
  type: TYPE_NORMAL
- en: The **dots** (`...`) represent as many colons as needed to produce a complete
    indexing tuple. For example, if `x` is an array with 5 axes, then
  prefs: []
  type: TYPE_NORMAL
- en: '`x[1, 2, ...]` is equivalent to `x[1, 2, :, :, :]`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[..., 3]` to `x[:, :, :, :, 3]` and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[4, ..., 5, :]` to `x[4, :, :, 5, :]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '**Iterating** over multidimensional arrays is done with respect to the first
    axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if one wants to perform an operation on each element in the array,
    one can use the `flat` attribute which is an [iterator](https://docs.python.org/tutorial/classes.html#iterators)
    over all the elements of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Indexing on ndarrays](basics.indexing.html#basics-indexing), [Indexing routines](../reference/arrays.indexing.html#arrays-indexing)
    (reference), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ndenumerate`](../reference/generated/numpy.ndenumerate.html#numpy.ndenumerate
    "numpy.ndenumerate"), [`indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices")'
  prefs: []
  type: TYPE_NORMAL
- en: '## Shape Manipulation'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the shape of an array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An array has a shape given by the number of elements along each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape of an array can be changed with various commands. Note that the following
    three commands all return a modified array, but do not change the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: The order of the elements in the array resulting from `ravel` is normally “C-style”,
    that is, the rightmost index “changes the fastest”, so the element after `a[0,
    0]` is `a[0, 1]`. If the array is reshaped to some other shape, again the array
    is treated as “C-style”. NumPy normally creates arrays stored in this order, so
    `ravel` will usually not need to copy its argument, but if the array was made
    by taking slices of another array or created with unusual options, it may need
    to be copied. The functions `ravel` and `reshape` can also be instructed, using
    an optional argument, to use FORTRAN-style arrays, in which the leftmost index
    changes the fastest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape")
    function returns its argument with a modified shape, whereas the [`ndarray.resize`](../reference/generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize") method modifies the array itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'If a dimension is given as `-1` in a reshaping operation, the other dimensions
    are automatically calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.shape`](../reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape"), [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape"), [`resize`](../reference/generated/numpy.resize.html#numpy.resize
    "numpy.resize"), [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Stacking together different arrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several arrays can be stacked together along different axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The function [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack") stacks 1D arrays as columns into a 2D array. It is equivalent
    to [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack")
    only for 2D arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the function [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is equivalent to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") for any input arrays. In fact, [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is an alias for [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: In general, for arrays with more than two dimensions, [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") stacks along their second axes, [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") stacks along their first axes, and [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") allows for an optional arguments giving the number of the
    axis along which the concatenation should happen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: In complex cases, [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")
    and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_") are useful
    for creating arrays by stacking numbers along one axis. They allow the use of
    range literals `:`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: When used with arrays as arguments, [`r_`](../reference/generated/numpy.r_.html#numpy.r_
    "numpy.r_") and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_")
    are similar to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") and [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") in their default behavior, but allow for an optional argument
    giving the number of the axis along which to concatenate.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack"),
    [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack "numpy.vstack"),
    [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting one array into several smaller ones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit"),
    you can split an array along its horizontal axis, either by specifying the number
    of equally shaped arrays to return, or by specifying the columns after which the
    division should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")
    splits along the vertical axis, and [`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split") allows one to specify along which axis to split.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the shape of an array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An array has a shape given by the number of elements along each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape of an array can be changed with various commands. Note that the following
    three commands all return a modified array, but do not change the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The order of the elements in the array resulting from `ravel` is normally “C-style”,
    that is, the rightmost index “changes the fastest”, so the element after `a[0,
    0]` is `a[0, 1]`. If the array is reshaped to some other shape, again the array
    is treated as “C-style”. NumPy normally creates arrays stored in this order, so
    `ravel` will usually not need to copy its argument, but if the array was made
    by taking slices of another array or created with unusual options, it may need
    to be copied. The functions `ravel` and `reshape` can also be instructed, using
    an optional argument, to use FORTRAN-style arrays, in which the leftmost index
    changes the fastest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape")
    function returns its argument with a modified shape, whereas the [`ndarray.resize`](../reference/generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize") method modifies the array itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'If a dimension is given as `-1` in a reshaping operation, the other dimensions
    are automatically calculated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.shape`](../reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape"), [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape
    "numpy.reshape"), [`resize`](../reference/generated/numpy.resize.html#numpy.resize
    "numpy.resize"), [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel")'
  prefs: []
  type: TYPE_NORMAL
- en: '### Stacking together different arrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several arrays can be stacked together along different axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'The function [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack") stacks 1D arrays as columns into a 2D array. It is equivalent
    to [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack")
    only for 2D arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, the function [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is equivalent to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") for any input arrays. In fact, [`row_stack`](../reference/generated/numpy.row_stack.html#numpy.row_stack
    "numpy.row_stack") is an alias for [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: In general, for arrays with more than two dimensions, [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") stacks along their second axes, [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") stacks along their first axes, and [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") allows for an optional arguments giving the number of the
    axis along which the concatenation should happen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: In complex cases, [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")
    and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_") are useful
    for creating arrays by stacking numbers along one axis. They allow the use of
    range literals `:`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: When used with arrays as arguments, [`r_`](../reference/generated/numpy.r_.html#numpy.r_
    "numpy.r_") and [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_")
    are similar to [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack") and [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack") in their default behavior, but allow for an optional argument
    giving the number of the axis along which to concatenate.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack "numpy.hstack"),
    [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack "numpy.vstack"),
    [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_")'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting one array into several smaller ones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit"),
    you can split an array along its horizontal axis, either by specifying the number
    of equally shaped arrays to return, or by specifying the columns after which the
    division should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")
    splits along the vertical axis, and [`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split") allows one to specify along which axis to split.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Copies and Views'
  prefs: []
  type: TYPE_NORMAL
- en: 'When operating and manipulating arrays, their data is sometimes copied into
    a new array and sometimes not. This is often a source of confusion for beginners.
    There are three cases:'
  prefs: []
  type: TYPE_NORMAL
- en: No Copy at All
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple assignments make no copy of objects or their data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Python passes mutable objects as references, so function calls make no copy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: View or Shallow Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different array objects can share the same data. The `view` method creates a
    new array object that looks at the same data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Slicing an array returns a view of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Deep Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `copy` method makes a complete copy of the array and its data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes `copy` should be called after slicing if the original array is not
    required anymore. For example, suppose `a` is a huge intermediate result and the
    final result `b` only contains a small fraction of `a`, a deep copy should be
    made when constructing `b` with slicing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: If `b = a[:100]` is used instead, `a` is referenced by `b` and will persist
    in memory even if `del a` is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Functions and Methods Overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a list of some useful NumPy functions and methods names ordered in categories.
    See [Routines](../reference/routines.html#routines) for the full list.
  prefs: []
  type: TYPE_NORMAL
- en: Array Creation
  prefs: []
  type: TYPE_NORMAL
- en: '[`arange`](../reference/generated/numpy.arange.html#numpy.arange "numpy.arange"),
    [`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`copy`](../reference/generated/numpy.copy.html#numpy.copy "numpy.copy"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`eye`](../reference/generated/numpy.eye.html#numpy.eye "numpy.eye"),
    [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile"),
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`identity`](../reference/generated/numpy.identity.html#numpy.identity
    "numpy.identity"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), [`logspace`](../reference/generated/numpy.logspace.html#numpy.logspace
    "numpy.logspace"), [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid
    "numpy.mgrid"), [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid
    "numpy.ogrid"), [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"),
    [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros
    "numpy.zeros"), [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like
    "numpy.zeros_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Conversions
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.astype`](../reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype"), [`atleast_1d`](../reference/generated/numpy.atleast_1d.html#numpy.atleast_1d
    "numpy.atleast_1d"), [`atleast_2d`](../reference/generated/numpy.atleast_2d.html#numpy.atleast_2d
    "numpy.atleast_2d"), [`atleast_3d`](../reference/generated/numpy.atleast_3d.html#numpy.atleast_3d
    "numpy.atleast_3d"), [`mat`](../reference/generated/numpy.mat.html#numpy.mat "numpy.mat")'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulations
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split"), [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`diagonal`](../reference/generated/numpy.diagonal.html#numpy.diagonal
    "numpy.diagonal"), [`dsplit`](../reference/generated/numpy.dsplit.html#numpy.dsplit
    "numpy.dsplit"), [`dstack`](../reference/generated/numpy.dstack.html#numpy.dstack
    "numpy.dstack"), [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit
    "numpy.hsplit"), [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack"), [`ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item"), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel "numpy.ravel"),
    [`repeat`](../reference/generated/numpy.repeat.html#numpy.repeat "numpy.repeat"),
    [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`resize`](../reference/generated/numpy.resize.html#numpy.resize "numpy.resize"),
    [`squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"),
    [`swapaxes`](../reference/generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes"),
    [`take`](../reference/generated/numpy.take.html#numpy.take "numpy.take"), [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit
    "numpy.vsplit"), [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Ordering
  prefs: []
  type: TYPE_NORMAL
- en: '[`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin "numpy.argmin"),
    [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`min`](../reference/generated/numpy.min.html#numpy.min
    "numpy.min"), [`ptp`](../reference/generated/numpy.ptp.html#numpy.ptp "numpy.ptp"),
    [`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort")'
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs: []
  type: TYPE_NORMAL
- en: '[`choose`](../reference/generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`compress`](../reference/generated/numpy.compress.html#numpy.compress "numpy.compress"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`ndarray.fill`](../reference/generated/numpy.ndarray.fill.html#numpy.ndarray.fill
    "numpy.ndarray.fill"), [`imag`](../reference/generated/numpy.imag.html#numpy.imag
    "numpy.imag"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`put`](../reference/generated/numpy.put.html#numpy.put "numpy.put"), [`putmask`](../reference/generated/numpy.putmask.html#numpy.putmask
    "numpy.putmask"), [`real`](../reference/generated/numpy.real.html#numpy.real "numpy.real"),
    [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Statistics
  prefs: []
  type: TYPE_NORMAL
- en: '[`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean
    "numpy.mean"), [`std`](../reference/generated/numpy.std.html#numpy.std "numpy.std"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Linear Algebra
  prefs: []
  type: TYPE_NORMAL
- en: '[`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`dot`](../reference/generated/numpy.dot.html#numpy.dot "numpy.dot"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`linalg.svd`](../reference/generated/numpy.linalg.svd.html#numpy.linalg.svd
    "numpy.linalg.svd"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot")'
  prefs: []
  type: TYPE_NORMAL
- en: No Copy at All
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Simple assignments make no copy of objects or their data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Python passes mutable objects as references, so function calls make no copy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: View or Shallow Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different array objects can share the same data. The `view` method creates a
    new array object that looks at the same data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Slicing an array returns a view of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Deep Copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `copy` method makes a complete copy of the array and its data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes `copy` should be called after slicing if the original array is not
    required anymore. For example, suppose `a` is a huge intermediate result and the
    final result `b` only contains a small fraction of `a`, a deep copy should be
    made when constructing `b` with slicing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: If `b = a[:100]` is used instead, `a` is referenced by `b` and will persist
    in memory even if `del a` is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Functions and Methods Overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a list of some useful NumPy functions and methods names ordered in categories.
    See [Routines](../reference/routines.html#routines) for the full list.
  prefs: []
  type: TYPE_NORMAL
- en: Array Creation
  prefs: []
  type: TYPE_NORMAL
- en: '[`arange`](../reference/generated/numpy.arange.html#numpy.arange "numpy.arange"),
    [`array`](../reference/generated/numpy.array.html#numpy.array "numpy.array"),
    [`copy`](../reference/generated/numpy.copy.html#numpy.copy "numpy.copy"), [`empty`](../reference/generated/numpy.empty.html#numpy.empty
    "numpy.empty"), [`empty_like`](../reference/generated/numpy.empty_like.html#numpy.empty_like
    "numpy.empty_like"), [`eye`](../reference/generated/numpy.eye.html#numpy.eye "numpy.eye"),
    [`fromfile`](../reference/generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile"),
    [`fromfunction`](../reference/generated/numpy.fromfunction.html#numpy.fromfunction
    "numpy.fromfunction"), [`identity`](../reference/generated/numpy.identity.html#numpy.identity
    "numpy.identity"), [`linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), [`logspace`](../reference/generated/numpy.logspace.html#numpy.logspace
    "numpy.logspace"), [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid
    "numpy.mgrid"), [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid
    "numpy.ogrid"), [`ones`](../reference/generated/numpy.ones.html#numpy.ones "numpy.ones"),
    [`ones_like`](../reference/generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), [`zeros`](../reference/generated/numpy.zeros.html#numpy.zeros
    "numpy.zeros"), [`zeros_like`](../reference/generated/numpy.zeros_like.html#numpy.zeros_like
    "numpy.zeros_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Conversions
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.astype`](../reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype"), [`atleast_1d`](../reference/generated/numpy.atleast_1d.html#numpy.atleast_1d
    "numpy.atleast_1d"), [`atleast_2d`](../reference/generated/numpy.atleast_2d.html#numpy.atleast_2d
    "numpy.atleast_2d"), [`atleast_3d`](../reference/generated/numpy.atleast_3d.html#numpy.atleast_3d
    "numpy.atleast_3d"), [`mat`](../reference/generated/numpy.mat.html#numpy.mat "numpy.mat")'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulations
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_split`](../reference/generated/numpy.array_split.html#numpy.array_split
    "numpy.array_split"), [`column_stack`](../reference/generated/numpy.column_stack.html#numpy.column_stack
    "numpy.column_stack"), [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`diagonal`](../reference/generated/numpy.diagonal.html#numpy.diagonal
    "numpy.diagonal"), [`dsplit`](../reference/generated/numpy.dsplit.html#numpy.dsplit
    "numpy.dsplit"), [`dstack`](../reference/generated/numpy.dstack.html#numpy.dstack
    "numpy.dstack"), [`hsplit`](../reference/generated/numpy.hsplit.html#numpy.hsplit
    "numpy.hsplit"), [`hstack`](../reference/generated/numpy.hstack.html#numpy.hstack
    "numpy.hstack"), [`ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item"), [`newaxis`](../reference/constants.html#numpy.newaxis "numpy.newaxis"),
    [`ravel`](../reference/generated/numpy.ravel.html#numpy.ravel "numpy.ravel"),
    [`repeat`](../reference/generated/numpy.repeat.html#numpy.repeat "numpy.repeat"),
    [`reshape`](../reference/generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`resize`](../reference/generated/numpy.resize.html#numpy.resize "numpy.resize"),
    [`squeeze`](../reference/generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"),
    [`swapaxes`](../reference/generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes"),
    [`take`](../reference/generated/numpy.take.html#numpy.take "numpy.take"), [`transpose`](../reference/generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`vsplit`](../reference/generated/numpy.vsplit.html#numpy.vsplit
    "numpy.vsplit"), [`vstack`](../reference/generated/numpy.vstack.html#numpy.vstack
    "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs: []
  type: TYPE_NORMAL
- en: '[`all`](../reference/generated/numpy.all.html#numpy.all "numpy.all"), [`any`](../reference/generated/numpy.any.html#numpy.any
    "numpy.any"), [`nonzero`](../reference/generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`where`](../reference/generated/numpy.where.html#numpy.where
    "numpy.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Ordering
  prefs: []
  type: TYPE_NORMAL
- en: '[`argmax`](../reference/generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](../reference/generated/numpy.argmin.html#numpy.argmin "numpy.argmin"),
    [`argsort`](../reference/generated/numpy.argsort.html#numpy.argsort "numpy.argsort"),
    [`max`](../reference/generated/numpy.max.html#numpy.max "numpy.max"), [`min`](../reference/generated/numpy.min.html#numpy.min
    "numpy.min"), [`ptp`](../reference/generated/numpy.ptp.html#numpy.ptp "numpy.ptp"),
    [`searchsorted`](../reference/generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](../reference/generated/numpy.sort.html#numpy.sort
    "numpy.sort")'
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs: []
  type: TYPE_NORMAL
- en: '[`choose`](../reference/generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`compress`](../reference/generated/numpy.compress.html#numpy.compress "numpy.compress"),
    [`cumprod`](../reference/generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](../reference/generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"),
    [`inner`](../reference/generated/numpy.inner.html#numpy.inner "numpy.inner"),
    [`ndarray.fill`](../reference/generated/numpy.ndarray.fill.html#numpy.ndarray.fill
    "numpy.ndarray.fill"), [`imag`](../reference/generated/numpy.imag.html#numpy.imag
    "numpy.imag"), [`prod`](../reference/generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`put`](../reference/generated/numpy.put.html#numpy.put "numpy.put"), [`putmask`](../reference/generated/numpy.putmask.html#numpy.putmask
    "numpy.putmask"), [`real`](../reference/generated/numpy.real.html#numpy.real "numpy.real"),
    [`sum`](../reference/generated/numpy.sum.html#numpy.sum "numpy.sum")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Statistics
  prefs: []
  type: TYPE_NORMAL
- en: '[`cov`](../reference/generated/numpy.cov.html#numpy.cov "numpy.cov"), [`mean`](../reference/generated/numpy.mean.html#numpy.mean
    "numpy.mean"), [`std`](../reference/generated/numpy.std.html#numpy.std "numpy.std"),
    [`var`](../reference/generated/numpy.var.html#numpy.var "numpy.var")'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Linear Algebra
  prefs: []
  type: TYPE_NORMAL
- en: '[`cross`](../reference/generated/numpy.cross.html#numpy.cross "numpy.cross"),
    [`dot`](../reference/generated/numpy.dot.html#numpy.dot "numpy.dot"), [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer"), [`linalg.svd`](../reference/generated/numpy.linalg.svd.html#numpy.linalg.svd
    "numpy.linalg.svd"), [`vdot`](../reference/generated/numpy.vdot.html#numpy.vdot
    "numpy.vdot")'
  prefs: []
  type: TYPE_NORMAL
- en: Less Basic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Broadcasting rules'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting allows universal functions to deal in a meaningful way with inputs
    that do not have exactly the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: The first rule of broadcasting is that if all input arrays do not have the same
    number of dimensions, a “1” will be repeatedly prepended to the shapes of the
    smaller arrays until all the arrays have the same number of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The second rule of broadcasting ensures that arrays with a size of 1 along a
    particular dimension act as if they had the size of the array with the largest
    shape along that dimension. The value of the array element is assumed to be the
    same along that dimension for the “broadcast” array.
  prefs: []
  type: TYPE_NORMAL
- en: 'After application of the broadcasting rules, the sizes of all arrays must match.
    More details can be found in [Broadcasting](basics.broadcasting.html#basics-broadcasting).  ###
    Broadcasting rules'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting allows universal functions to deal in a meaningful way with inputs
    that do not have exactly the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: The first rule of broadcasting is that if all input arrays do not have the same
    number of dimensions, a “1” will be repeatedly prepended to the shapes of the
    smaller arrays until all the arrays have the same number of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The second rule of broadcasting ensures that arrays with a size of 1 along a
    particular dimension act as if they had the size of the array with the largest
    shape along that dimension. The value of the array element is assumed to be the
    same along that dimension for the “broadcast” array.
  prefs: []
  type: TYPE_NORMAL
- en: After application of the broadcasting rules, the sizes of all arrays must match.
    More details can be found in [Broadcasting](basics.broadcasting.html#basics-broadcasting).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced indexing and index tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy offers more indexing facilities than regular Python sequences. In addition
    to indexing by integers and slices, as we saw before, arrays can be indexed by
    arrays of integers and arrays of booleans.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Arrays of Indices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: When the indexed array `a` is multidimensional, a single array of indices refers
    to the first dimension of `a`. The following example shows this behavior by converting
    an image of labels into a color image using a palette.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: We can also give indexes for more than one dimension. The arrays of indices
    for each dimension must have the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: In Python, `arr[i, j]` is exactly the same as `arr[(i, j)]`—so we can put `i`
    and `j` in a `tuple` and then do the indexing with that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: However, we can not do this by putting `i` and `j` into an array, because this
    array will be interpreted as indexing the first dimension of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Another common use of indexing with arrays is the search of the maximum value
    of time-dependent series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use indexing with arrays as a target to assign to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'However, when the list of indices contains repetitions, the assignment is done
    several times, leaving behind the last value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'This is reasonable enough, but watch out if you want to use Python’s `+=` construct,
    as it may not do what you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Even though 0 occurs twice in the list of indices, the 0th element is only incremented
    once. This is because Python requires `a += 1` to be equivalent to `a = a + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Boolean Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we index arrays with arrays of (integer) indices we are providing the list
    of indices to pick. With boolean indices the approach is different; we explicitly
    choose which items in the array we want and which ones we don’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most natural way one can think of for boolean indexing is to use boolean
    arrays that have *the same shape* as the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'This property can be very useful in assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'You can look at the following example to see how to use boolean indexing to
    generate an image of the [Mandelbrot set](https://en.wikipedia.org/wiki/Mandelbrot_set):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-1.png](../Images/f14ba9a03da211bbacbafc982923e1f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second way of indexing with booleans is more similar to integer indexing;
    for each dimension of the array we give a 1D boolean array selecting the slices
    we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Note that the length of the 1D boolean array must coincide with the length of
    the dimension (or axis) you want to slice. In the previous example, `b1` has length
    3 (the number of *rows* in `a`), and `b2` (of length 4) is suitable to index the
    2nd axis (columns) of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: The ix_() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [`ix_`](../reference/generated/numpy.ix_.html#numpy.ix_ "numpy.ix_") function
    can be used to combine different vectors so as to obtain the result for each n-uplet.
    For example, if you want to compute all the a+b*c for all the triplets taken from
    each of the vectors a, b and c:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also implement the reduce as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'and then use it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of this version of reduce compared to the normal ufunc.reduce
    is that it makes use of the [broadcasting rules](#broadcasting-rules) in order
    to avoid creating an argument array the size of the output times the number of
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Structured arrays](basics.rec.html#structured-arrays).
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Arrays of Indices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: When the indexed array `a` is multidimensional, a single array of indices refers
    to the first dimension of `a`. The following example shows this behavior by converting
    an image of labels into a color image using a palette.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: We can also give indexes for more than one dimension. The arrays of indices
    for each dimension must have the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: In Python, `arr[i, j]` is exactly the same as `arr[(i, j)]`—so we can put `i`
    and `j` in a `tuple` and then do the indexing with that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: However, we can not do this by putting `i` and `j` into an array, because this
    array will be interpreted as indexing the first dimension of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Another common use of indexing with arrays is the search of the maximum value
    of time-dependent series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use indexing with arrays as a target to assign to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'However, when the list of indices contains repetitions, the assignment is done
    several times, leaving behind the last value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'This is reasonable enough, but watch out if you want to use Python’s `+=` construct,
    as it may not do what you expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Even though 0 occurs twice in the list of indices, the 0th element is only incremented
    once. This is because Python requires `a += 1` to be equivalent to `a = a + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with Boolean Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we index arrays with arrays of (integer) indices we are providing the list
    of indices to pick. With boolean indices the approach is different; we explicitly
    choose which items in the array we want and which ones we don’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most natural way one can think of for boolean indexing is to use boolean
    arrays that have *the same shape* as the original array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'This property can be very useful in assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'You can look at the following example to see how to use boolean indexing to
    generate an image of the [Mandelbrot set](https://en.wikipedia.org/wiki/Mandelbrot_set):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-1.png](../Images/f14ba9a03da211bbacbafc982923e1f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second way of indexing with booleans is more similar to integer indexing;
    for each dimension of the array we give a 1D boolean array selecting the slices
    we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Note that the length of the 1D boolean array must coincide with the length of
    the dimension (or axis) you want to slice. In the previous example, `b1` has length
    3 (the number of *rows* in `a`), and `b2` (of length 4) is suitable to index the
    2nd axis (columns) of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: The ix_() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [`ix_`](../reference/generated/numpy.ix_.html#numpy.ix_ "numpy.ix_") function
    can be used to combine different vectors so as to obtain the result for each n-uplet.
    For example, if you want to compute all the a+b*c for all the triplets taken from
    each of the vectors a, b and c:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also implement the reduce as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'and then use it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of this version of reduce compared to the normal ufunc.reduce
    is that it makes use of the [broadcasting rules](#broadcasting-rules) in order
    to avoid creating an argument array the size of the output times the number of
    vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing with strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Structured arrays](basics.rec.html#structured-arrays).
  prefs: []
  type: TYPE_NORMAL
- en: Tricks and Tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we give a list of short and useful tips.
  prefs: []
  type: TYPE_NORMAL
- en: “Automatic” Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the dimensions of an array, you can omit one of the sizes which will
    then be deduced automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Vector Stacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'How do we construct a 2D array from a list of equally-sized row vectors? In
    MATLAB this is quite easy: if `x` and `y` are two vectors of the same length you
    only need do `m=[x;y]`. In NumPy this works via the functions `column_stack`,
    `dstack`, `hstack` and `vstack`, depending on the dimension in which the stacking
    is to be done. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: The logic behind those functions in more than two dimensions can be strange.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy for MATLAB users](numpy-for-matlab-users.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NumPy `histogram` function applied to an array returns a pair of vectors:
    the histogram of the array and a vector of the bin edges. Beware: `matplotlib`
    also has a function to build histograms (called `hist`, as in Matlab) that differs
    from the one in NumPy. The main difference is that `pylab.hist` plots the histogram
    automatically, while `numpy.histogram` only generates the data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-2.png](../Images/6e8a719f3f733b746d4f0762a37ae4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: With Matplotlib >=3.4 you can also use `plt.stairs(n, bins)`.
  prefs: []
  type: TYPE_NORMAL
- en: “Automatic” Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the dimensions of an array, you can omit one of the sizes which will
    then be deduced automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Vector Stacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'How do we construct a 2D array from a list of equally-sized row vectors? In
    MATLAB this is quite easy: if `x` and `y` are two vectors of the same length you
    only need do `m=[x;y]`. In NumPy this works via the functions `column_stack`,
    `dstack`, `hstack` and `vstack`, depending on the dimension in which the stacking
    is to be done. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: The logic behind those functions in more than two dimensions can be strange.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy for MATLAB users](numpy-for-matlab-users.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NumPy `histogram` function applied to an array returns a pair of vectors:
    the histogram of the array and a vector of the bin edges. Beware: `matplotlib`
    also has a function to build histograms (called `hist`, as in Matlab) that differs
    from the one in NumPy. The main difference is that `pylab.hist` plots the histogram
    automatically, while `numpy.histogram` only generates the data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/quickstart-2.png](../Images/6e8a719f3f733b746d4f0762a37ae4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: With Matplotlib >=3.4 you can also use `plt.stairs(n, bins)`.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [Python tutorial](https://docs.python.org/tutorial/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy reference](../reference/index.html#reference)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy Tutorial](https://docs.scipy.org/doc/scipy/tutorial/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SciPy Lecture Notes](https://scipy-lectures.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [matlab, R, IDL, NumPy/SciPy dictionary](http://mathesaurus.sf.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[tutorial-svd](https://numpy.org/numpy-tutorials/content/tutorial-svd.html
    "(in NumPy tutorials)")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
