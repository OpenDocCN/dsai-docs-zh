- en: numpy.log1p
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.log1p.html](https://numpy.org/doc/1.26/reference/generated/numpy.log1p.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the natural logarithm of one plus the input array, element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Calculates `log(1 + x)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input values.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Natural logarithm of *1 + x*, element-wise. This is a scalar if *x* is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`expm1`](numpy.expm1.html#numpy.expm1 "numpy.expm1")'
  prefs: []
  type: TYPE_NORMAL
- en: '`exp(x) - 1`, the inverse of [`log1p`](#numpy.log1p "numpy.log1p").'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For real-valued input, [`log1p`](#numpy.log1p "numpy.log1p") is accurate also
    for *x* so small that *1 + x == 1* in floating-point accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Logarithm is a multivalued function: for each *x* there is an infinite number
    of *z* such that *exp(z) = 1 + x*. The convention is to return the *z* whose imaginary
    part lies in *[-pi, pi]*.'
  prefs: []
  type: TYPE_NORMAL
- en: For real-valued input data types, [`log1p`](#numpy.log1p "numpy.log1p") always
    returns real output. For each value that cannot be expressed as a real number
    or infinity, it yields `nan` and sets the *invalid* floating point error flag.
  prefs: []
  type: TYPE_NORMAL
- en: For complex-valued input, [`log1p`](#numpy.log1p "numpy.log1p") is a complex
    analytical function that has a branch cut *[-inf, -1]* and is continuous from
    above on it. [`log1p`](#numpy.log1p "numpy.log1p") handles the floating-point
    negative zero as an infinitesimal negative number, conforming to the C99 standard.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: M. Abramowitz and I.A. Stegun, “Handbook of Mathematical Functions”, 10th printing,
    1964, pp. 67. [https://personal.math.ubc.ca/~cbm/aands/page_67.htm](https://personal.math.ubc.ca/~cbm/aands/page_67.htm)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Logarithm”. [https://en.wikipedia.org/wiki/Logarithm](https://en.wikipedia.org/wiki/Logarithm)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
