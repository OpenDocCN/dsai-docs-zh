- en: numpy.nanmean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nanmean.html](https://numpy.org/doc/1.26/reference/generated/numpy.nanmean.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the arithmetic mean along the specified axis, ignoring NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the average of the array elements. The average is taken over the flattened
    array by default, otherwise over the specified axis. [`float64`](../arrays.scalars.html#numpy.float64
    "numpy.float64") intermediate and return values are used for integer inputs.
  prefs: []
  type: TYPE_NORMAL
- en: For all-NaN slices, NaN is returned and a *RuntimeWarning* is raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing numbers whose mean is desired. If *a* is not an array, a conversion
    is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{int, tuple of int, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the means are computed. The default is to compute the
    mean of the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type to use in computing the mean. For integer inputs, the default is [`float64`](../arrays.scalars.html#numpy.float64
    "numpy.float64"); for inexact inputs, it is the same as the input dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. The default is `None`;
    if provided, it must have the same shape as the expected output, but the type
    will be cast if necessary. See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*.
  prefs: []
  type: TYPE_NORMAL
- en: If the value is anything but the default, then *keepdims* will be passed through
    to the [`mean`](numpy.mean.html#numpy.mean "numpy.mean") or [`sum`](numpy.sum.html#numpy.sum
    "numpy.sum") methods of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"). If the sub-classes methods does not implement *keepdims* any
    exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in the mean. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m**ndarray, see dtype parameter above'
  prefs: []
  type: TYPE_NORMAL
- en: If *out=None*, returns a new array containing the mean values, otherwise a reference
    to the output array is returned. Nan is returned for slices that contain only
    NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`average`](numpy.average.html#numpy.average "numpy.average")'
  prefs: []
  type: TYPE_NORMAL
- en: Weighted average
  prefs: []
  type: TYPE_NORMAL
- en: '[`mean`](numpy.mean.html#numpy.mean "numpy.mean")'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic mean taken while not ignoring NaNs
  prefs: []
  type: TYPE_NORMAL
- en: '[`var`](numpy.var.html#numpy.var "numpy.var"), [`nanvar`](numpy.nanvar.html#numpy.nanvar
    "numpy.nanvar")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The arithmetic mean is the sum of the non-NaN elements along the axis divided
    by the number of non-NaN elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for floating-point input, the mean is computed using the same precision
    the input has. Depending on the input data, this can cause the results to be inaccurate,
    especially for [`float32`](../arrays.scalars.html#numpy.float32 "numpy.float32").
    Specifying a higher-precision accumulator using the [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") keyword can alleviate this issue.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
