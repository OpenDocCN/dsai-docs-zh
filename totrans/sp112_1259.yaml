- en: scipy.stats.moment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.moment.html#scipy.stats.moment](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.moment.html#scipy.stats.moment)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the nth moment about the mean for a sample.
  prefs: []
  type: TYPE_NORMAL
- en: A moment is a specific quantitative measure of the shape of a set of points.
    It is often used to calculate coefficients of skewness and kurtosis due to its
    close relationship with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**moment**int or array_like of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of central moment that is returned. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: If an int, the axis of the input along which to compute the statistic. The statistic
    of each axis-slice (e.g. row) of the input will appear in a corresponding element
    of the output. If `None`, the input will be raveled before computing the statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘omit’, ‘raise’}'
  prefs: []
  type: TYPE_NORMAL
- en: Defines how to handle input NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: '`propagate`: if a NaN is present in the axis slice (e.g. row) along which the
    statistic is computed, the corresponding entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`omit`: NaNs will be omitted when performing the calculation. If insufficient
    data remains in the axis slice along which the statistic is computed, the corresponding
    entry of the output will be NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise`: if a NaN is present, a `ValueError` will be raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**center**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The point about which moments are taken. This can be the sample mean, the origin,
    or any other be point. If *None* (default) compute the center as the sample mean.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n-th moment about the `center`**ndarray or float'
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate moment along the given axis or over all values if axis is None.
    The denominator for the moment calculation is the number of observations, no degrees
    of freedom correction is done.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`kurtosis`](scipy.stats.kurtosis.html#scipy.stats.kurtosis "scipy.stats.kurtosis"),
    [`skew`](scipy.stats.skew.html#scipy.stats.skew "scipy.stats.skew"), [`describe`](scipy.stats.describe.html#scipy.stats.describe
    "scipy.stats.describe")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The k-th moment of a data sample is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[m_k = \frac{1}{n} \sum_{i = 1}^n (x_i - c)^k\]
  prefs: []
  type: TYPE_NORMAL
- en: Where *n* is the number of samples, and *c* is the center around which the moment
    is calculated. This function uses exponentiation by squares [[1]](#r00091e1d8697-1)
    for efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, if *a* is an empty array (`a.size == 0`), array [`moment`](#scipy.stats.moment
    "scipy.stats.moment") with one element (*moment.size == 1*) is treated the same
    as scalar [`moment`](#scipy.stats.moment "scipy.stats.moment") (`np.isscalar(moment)`).
    This might produce arrays of unexpected shape.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in SciPy 1.9, `np.matrix` inputs (not recommended for new code) are
    converted to `np.ndarray` before the calculation is performed. In this case, the
    output will be a scalar or `np.ndarray` of appropriate shape rather than a 2D
    `np.matrix`. Similarly, while masked elements of masked arrays are ignored, the
    output will be a scalar or `np.ndarray` rather than a masked array with `mask=False`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://eli.thegreenplace.net/2009/03/21/efficient-integer-exponentiation-algorithms](https://eli.thegreenplace.net/2009/03/21/efficient-integer-exponentiation-algorithms)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
