- en: scipy.signal.welch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.welch.html#scipy.signal.welch](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.welch.html#scipy.signal.welch)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Estimate power spectral density using Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: Welch’s method [[1]](#r34b375daf612-1) computes an estimate of the power spectral
    density by dividing the data into overlapping segments, computing a modified periodogram
    for each segment and averaging the periodograms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of the *x* time series. Defaults to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
    Defaults to a Hann window.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment. Defaults to None, but if window is str or tuple, is
    set to 256, and if window is array_like, is set to the length of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments. If *None*, `noverlap = nperseg
    // 2`. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfft**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used, if a zero padded FFT is desired. If *None*, the FFT
    length is *nperseg*. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**detrend**str or function or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies how to detrend each segment. If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend
    "scipy.signal.detrend") is a string, it is passed as the *type* argument to the
    [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    function. If it is a function, it takes a segment and returns a detrended segment.
    If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    is *False*, no detrending is done. Defaults to ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_onesided**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, return a one-sided spectrum for real data. If *False* return a two-sided
    spectrum. Defaults to *True*, but for complex data, a two-sided spectrum is always
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**scaling**{ ‘density’, ‘spectrum’ }, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Selects between computing the power spectral density (‘density’) where *Pxx*
    has units of V**2/Hz and computing the power spectrum (‘spectrum’) where *Pxx*
    has units of V**2, if *x* is measured in V and *fs* is measured in Hz. Defaults
    to ‘density’
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the periodogram is computed; the default is over the last axis
    (i.e. `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**average**{ ‘mean’, ‘median’ }, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Method to use when averaging periodograms. Defaults to ‘mean’.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of sample frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pxx**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Power spectral density or power spectrum of x.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`periodogram`](scipy.signal.periodogram.html#scipy.signal.periodogram "scipy.signal.periodogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Simple, optionally modified periodogram
  prefs: []
  type: TYPE_NORMAL
- en: '[`lombscargle`](scipy.signal.lombscargle.html#scipy.signal.lombscargle "scipy.signal.lombscargle")'
  prefs: []
  type: TYPE_NORMAL
- en: Lomb-Scargle periodogram for unevenly sampled data
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: An appropriate amount of overlap will depend on the choice of window and on
    your requirements. For the default Hann window an overlap of 50% is a reasonable
    trade off between accurately estimating the signal power, while not over counting
    any of the data. Narrower windows may require a larger overlap.
  prefs: []
  type: TYPE_NORMAL
- en: If *noverlap* is 0, this method is equivalent to Bartlett’s method [[2]](#r34b375daf612-2).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'P. Welch, “The use of the fast Fourier transform for the estimation of power
    spectra: A method based on time averaging over short, modified periodograms”,
    IEEE Trans. Audio Electroacoust. vol. 15, pp. 70-73, 1967.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: M.S. Bartlett, “Periodogram Analysis and Continuous Spectra”, Biometrika, vol.
    37, pp. 1-16, 1950.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate a test signal, a 2 Vrms sine wave at 1234 Hz, corrupted by 0.001 V**2/Hz
    of white noise sampled at 10 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute and plot the power spectral density.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-welch-1_00_00.png](../Images/ea5122404a372a7e5b4b25a0203618c6.png)'
  prefs: []
  type: TYPE_IMG
- en: If we average the last half of the spectral density, to exclude the peak, we
    can recover the noise power on the signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now compute and plot the power spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-welch-1_01_00.png](../Images/fc11eae1edf796f91d71d3e733a6c499.png)'
  prefs: []
  type: TYPE_IMG
- en: The peak height in the power spectrum is an estimate of the RMS amplitude.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If we now introduce a discontinuity in the signal, by increasing the amplitude
    of a small portion of the signal by 50, we can see the corruption of the mean
    average power spectral density, but using a median average better estimates the
    normal behaviour.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-welch-1_02_00.png](../Images/cc5fd01805fd92352e634aa99ac0de2a.png)'
  prefs: []
  type: TYPE_IMG
