- en: Array creation routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.array-creation.html](https://numpy.org/doc/1.26/reference/routines.array-creation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array creation](../user/basics.creation.html#arrays-creation)'
  prefs: []
  type: TYPE_NORMAL
- en: From shape or value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | Return a new array with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | Return a 2-D array with ones on the diagonal and zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | Return an array of ones with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | Return an array of zeros with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | Return a new array of given shape and type, filled with *fill_value*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | Return a full array with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: From existing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | Create an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | Return an array copy of the given object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | Interpret a buffer as a 1-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | Create a NumPy array from an object implementing the `__dlpack__` protocol.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | Construct an array by executing a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | Create a new 1-dimensional array from an iterable object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  prefs: []
  type: TYPE_TB
- en: '## Creating record arrays (`numpy.rec`)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.rec` is the preferred alias for `numpy.core.records`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | Construct a record array
    from a wide-variety of objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | Create a record array
    from a (flat) list of arrays |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | Create a recarray from
    a list of records in text form. |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | Create a record array
    from binary data |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | Create an array from
    binary file data |  ## Creating character arrays ([`numpy.char`](routines.char.html#module-numpy.char
    "numpy.char"))'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") is the preferred
    alias for `numpy.core.defchararray`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | Convert the input to
    a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.chararray"),
    copying the data only if necessary. |'
  prefs: []
  type: TYPE_TB
- en: Numerical ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | Return evenly spaced numbers over a specified interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | Return numbers spaced evenly on a log scale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | Return numbers spaced evenly on a log scale (a geometric progression). |'
  prefs: []
  type: TYPE_TB
- en: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | Return a list of coordinate matrices from coordinate vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | An instance
    which returns a dense multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: Building matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | Create a two-dimensional array with the flattened input as a diagonal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | An array with ones at and below the given diagonal and zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | Lower
    triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | Upper
    triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: The Matrix class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | Build a matrix object from a string, nested sequence, or array. |'
  prefs: []
  type: TYPE_TB
- en: From shape or value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`empty`](generated/numpy.empty.html#numpy.empty "numpy.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`empty_like`](generated/numpy.empty_like.html#numpy.empty_like "numpy.empty_like")(prototype[, dtype, order, subok, ...])
    | Return a new array with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eye`](generated/numpy.eye.html#numpy.eye "numpy.eye")(N[, M, k, dtype, order, like])
    | Return a 2-D array with ones on the diagonal and zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| [`identity`](generated/numpy.identity.html#numpy.identity "numpy.identity")(n[, dtype, like])
    | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ones`](generated/numpy.ones.html#numpy.ones "numpy.ones")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ones_like`](generated/numpy.ones_like.html#numpy.ones_like "numpy.ones_like")(a[, dtype, order, subok, shape])
    | Return an array of ones with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zeros`](generated/numpy.zeros.html#numpy.zeros "numpy.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zeros_like`](generated/numpy.zeros_like.html#numpy.zeros_like "numpy.zeros_like")(a[, dtype, order, subok, shape])
    | Return an array of zeros with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`full`](generated/numpy.full.html#numpy.full "numpy.full")(shape, fill_value[, dtype, order, like])
    | Return a new array of given shape and type, filled with *fill_value*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`full_like`](generated/numpy.full_like.html#numpy.full_like "numpy.full_like")(a, fill_value[, dtype, order, ...])
    | Return a full array with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: From existing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`array`](generated/numpy.array.html#numpy.array "numpy.array")(object[, dtype, copy, order, subok, ...])
    | Create an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  prefs: []
  type: TYPE_TB
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy")(a[, order, subok])
    | Return an array copy of the given object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`frombuffer`](generated/numpy.frombuffer.html#numpy.frombuffer "numpy.frombuffer")(buffer[, dtype, count, offset, like])
    | Interpret a buffer as a 1-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack "numpy.from_dlpack")(x, /)
    | Create a NumPy array from an object implementing the `__dlpack__` protocol.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromfile`](generated/numpy.fromfile.html#numpy.fromfile "numpy.fromfile")(file[, dtype, count, sep, offset, like])
    | Construct an array from data in a text or binary file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromfunction`](generated/numpy.fromfunction.html#numpy.fromfunction "numpy.fromfunction")(function, shape, *[, dtype, like])
    | Construct an array by executing a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromiter`](generated/numpy.fromiter.html#numpy.fromiter "numpy.fromiter")(iter, dtype[, count, like])
    | Create a new 1-dimensional array from an iterable object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromstring`](generated/numpy.fromstring.html#numpy.fromstring "numpy.fromstring")(string[, dtype, count, like])
    | A new 1-D array initialized from text data in a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loadtxt`](generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")(fname[, dtype, comments, delimiter, ...])
    | Load data from a text file. |'
  prefs: []
  type: TYPE_TB
- en: '## Creating record arrays (`numpy.rec`)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.rec` is the preferred alias for `numpy.core.records`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`core.records.array`](generated/numpy.core.records.array.html#numpy.core.records.array
    "numpy.core.records.array")(obj[, dtype, shape, ...]) | Construct a record array
    from a wide-variety of objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromarrays`](generated/numpy.core.records.fromarrays.html#numpy.core.records.fromarrays
    "numpy.core.records.fromarrays")(arrayList[, dtype, ...]) | Create a record array
    from a (flat) list of arrays |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromrecords`](generated/numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")(recList[, dtype, ...]) | Create a recarray from
    a list of records in text form. |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromstring`](generated/numpy.core.records.fromstring.html#numpy.core.records.fromstring
    "numpy.core.records.fromstring")(datastring[, dtype, ...]) | Create a record array
    from binary data |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.records.fromfile`](generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile")(fd[, dtype, shape, ...]) | Create an array from
    binary file data |'
  prefs: []
  type: TYPE_TB
- en: '## Creating character arrays ([`numpy.char`](routines.char.html#module-numpy.char
    "numpy.char"))'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.char`](routines.char.html#module-numpy.char "numpy.char") is the preferred
    alias for `numpy.core.defchararray`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`core.defchararray.array`](generated/numpy.core.defchararray.array.html#numpy.core.defchararray.array
    "numpy.core.defchararray.array")(obj[, itemsize, ...]) | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.chararray"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`core.defchararray.asarray`](generated/numpy.core.defchararray.asarray.html#numpy.core.defchararray.asarray
    "numpy.core.defchararray.asarray")(obj[, itemsize, ...]) | Convert the input to
    a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.chararray"),
    copying the data only if necessary. |'
  prefs: []
  type: TYPE_TB
- en: Numerical ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`arange`](generated/numpy.arange.html#numpy.arange "numpy.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`linspace`](generated/numpy.linspace.html#numpy.linspace "numpy.linspace")(start, stop[, num, endpoint, ...])
    | Return evenly spaced numbers over a specified interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logspace`](generated/numpy.logspace.html#numpy.logspace "numpy.logspace")(start, stop[, num, endpoint, base, ...])
    | Return numbers spaced evenly on a log scale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geomspace`](generated/numpy.geomspace.html#numpy.geomspace "numpy.geomspace")(start, stop[, num, endpoint, ...])
    | Return numbers spaced evenly on a log scale (a geometric progression). |'
  prefs: []
  type: TYPE_TB
- en: '| [`meshgrid`](generated/numpy.meshgrid.html#numpy.meshgrid "numpy.meshgrid")(*xi[, copy, sparse, indexing])
    | Return a list of coordinate matrices from coordinate vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mgrid`](generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid") | An instance
    which returns a dense multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: '| [`ogrid`](generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid") | An instance
    which returns an open multi-dimensional "meshgrid". |'
  prefs: []
  type: TYPE_TB
- en: Building matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`diag`](generated/numpy.diag.html#numpy.diag "numpy.diag")(v[, k]) | Extract
    a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagflat`](generated/numpy.diagflat.html#numpy.diagflat "numpy.diagflat")(v[, k])
    | Create a two-dimensional array with the flattened input as a diagonal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tri`](generated/numpy.tri.html#numpy.tri "numpy.tri")(N[, M, k, dtype, like])
    | An array with ones at and below the given diagonal and zeros elsewhere. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tril`](generated/numpy.tril.html#numpy.tril "numpy.tril")(m[, k]) | Lower
    triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`triu`](generated/numpy.triu.html#numpy.triu "numpy.triu")(m[, k]) | Upper
    triangle of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`vander`](generated/numpy.vander.html#numpy.vander "numpy.vander")(x[, N, increasing])
    | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: The Matrix class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`mat`](generated/numpy.mat.html#numpy.mat "numpy.mat")(data[, dtype]) |
    Interpret the input as a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bmat`](generated/numpy.bmat.html#numpy.bmat "numpy.bmat")(obj[, ldict, gdict])
    | Build a matrix object from a string, nested sequence, or array. |'
  prefs: []
  type: TYPE_TB
