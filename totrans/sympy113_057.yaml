- en: Permutations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排列
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/permutations.html](https://docs.sympy.org/latest/modules/combinatorics/permutations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/combinatorics/permutations.html](https://docs.sympy.org/latest/modules/combinatorics/permutations.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A permutation, alternatively known as an ‘arrangement number’ or ‘ordering’
    is an arrangement of the elements of an ordered list into a one-to-one mapping
    with itself. The permutation of a given arrangement is given by indicating the
    positions of the elements after re-arrangement [[R80]](#r80). For example, if
    one started with elements `[x, y, a, b]` (in that order) and they were reordered
    as `[x, y, b, a]` then the permutation would be `[0, 1, 3, 2]`. Notice that (in
    SymPy) the first element is always referred to as 0 and the permutation uses the
    indices of the elements in the original ordering, not the elements `(a, b, ...)`
    themselves.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个排列，又称为“排列数”或“顺序”，是将有序列表的元素重新排列成与自身的一一映射。给定一个排列的安排是指在重新排列后元素的位置：[[R80]](#r80)。例如，如果开始时元素为
    `[x, y, a, b]`（按照这个顺序），并且将它们重新排序为 `[x, y, b, a]`，那么排列就是 `[0, 1, 3, 2]`。请注意（在 SymPy
    中），第一个元素总是被称为 0，排列使用原始排序中元素的索引，而不是元素本身 `(a, b, ...)`。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Permutations Notation
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 排列表示法
- en: Permutations are commonly represented in disjoint cycle or array forms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 排列通常用不相交循环或数组形式表示。
- en: Array Notation And 2-line Form
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数组表示法和二行形式
- en: 'In the 2-line form, the elements and their final positions are shown as a matrix
    with 2 rows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在二行形式中，元素及其最终位置被显示为一个具有2行的矩阵：
- en: '[0 1 2 … n-1] [p(0) p(1) p(2) … p(n-1)]'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[0 1 2 … n-1] [p(0) p(1) p(2) … p(n-1)]'
- en: 'Since the first line is always `range(n)`, where n is the size of p, it is
    sufficient to represent the permutation by the second line, referred to as the
    “array form” of the permutation. This is entered in brackets as the argument to
    the Permutation class:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于第一行总是 `range(n)`，其中 n 是 p 的大小，仅用第二行表示排列已足以，称为排列的“数组形式”，用方括号作为 Permutation
    类的参数输入：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Given i in range(p.size), the permutation maps i to i^p
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 i 在范围(p.size)内，排列将 i 映射到 i^p
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The composite of two permutations p*q means first apply p, then q, so i^(p*q)
    = (i^p)^q which is i^p^q according to Python precedence rules:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 两个排列 p*q 的复合意味着首先应用 p，然后 q，因此 i^(p*q) = (i^p)^q，根据 Python 的优先规则是 i^p^q：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One can use also the notation p(i) = i^p, but then the composition rule is
    (p*q)(i) = q(p(i)), not p(q(i)):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 p(i) = i^p 的表示法，但是复合规则是 (p*q)(i) = q(p(i))，而不是 p(q(i))：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Disjoint Cycle Notation
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不相交循环表示法
- en: In disjoint cycle notation, only the elements that have shifted are indicated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在不相交循环表示法中，只指示了已移动的元素。
- en: For example, [1, 3, 2, 0] can be represented as (0, 1, 3)(2). This can be understood
    from the 2 line format of the given permutation. In the 2-line form, [0 1 2 3]
    [1 3 2 0]
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[1, 3, 2, 0] 可以表示为 (0, 1, 3)(2)。这可以从给定排列的二行格式理解。在二行形式中，[0 1 2 3] [1 3 2 0]
- en: 'The element in the 0th position is 1, so 0 -> 1\. The element in the 1st position
    is three, so 1 -> 3\. And the element in the third position is again 0, so 3 ->
    0\. Thus, 0 -> 1 -> 3 -> 0, and 2 -> 2\. Thus, this can be represented as 2 cycles:
    (0, 1, 3)(2). In common notation, singular cycles are not explicitly written as
    they can be inferred implicitly.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第 0 位置的元素是 1，所以 0 -> 1\. 第 1 位置的元素是三，所以 1 -> 3\. 而第三位置的元素再次是 0，所以 3 -> 0\. 因此，0
    -> 1 -> 3 -> 0，而 2 -> 2\. 因此，这可以表示为 2 个循环：(0, 1, 3)(2)。通常的表示法中，单个循环不会显式写出，因为可以隐含推断。
- en: 'Only the relative ordering of elements in a cycle matter:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 只有循环中元素的相对顺序才有意义：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The disjoint cycle notation is convenient when representing permutations that
    have several cycles in them:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不相交循环表示法在表示具有多个循环的排列时很方便：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It also provides some economy in entry when computing products of permutations
    that are written in disjoint cycle notation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算以不相交循环表示法书写的排列乘积时，这也提供了一些输入的经济性：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Caution: when the cycles have common elements between them then the order in
    which the permutations are applied matters. This module applies the permutations
    from *left to right*.'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'Caution: 当循环之间存在共同元素时，排列的应用顺序至关重要。此模块按照*从左到右*的顺序应用排列。'
- en: ''
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the above case, (1,2) is computed before (2,3). As 0 -> 0, 0 -> 0, element
    in position 0 is 0. As 1 -> 2, 2 -> 3, element in position 1 is 3. As 2 -> 1,
    1 -> 1, element in position 2 is 1. As 3 -> 3, 3 -> 2, element in position 3 is
    2.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在上述情况中，(1,2) 在 (2,3) 之前计算。由于 0 -> 0，0 -> 0，第 0 位置的元素是 0。由于 1 -> 2，2 -> 3，第 1
    位置的元素是 3。由于 2 -> 1，1 -> 1，第 2 位置的元素是 1。由于 3 -> 3，3 -> 2，第 3 位置的元素是 2。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If the first and second elements had been swapped first, followed by the swapping
    of the second and third, the result would have been [0, 2, 3, 1]. If, you want
    to apply the cycles in the conventional right to left order, call the function
    with arguments in reverse order as demonstrated below:'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Entering a singleton in a permutation is a way to indicate the size of the permutation.
    The `size` keyword can also be used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Array-form entry:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Cyclic-form entry:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Caution: no singleton containing an element larger than the largest in any
    previous cycle can be entered. This is an important difference in how Permutation
    and Cycle handle the `__call__` syntax. A singleton argument at the start of a
    Permutation performs instantiation of the Permutation and is permitted:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A singleton entered after instantiation is a call to the permutation – a function
    call – and if the argument is out of range it will trigger an error. For this
    reason, it is better to start the cycle with the singleton:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The following fails because there is no element 3:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is ok: only the call to an out of range singleton is prohibited; otherwise
    the permutation autosizes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Equality Testing
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'The array forms must be the same in order for permutations to be equal:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Identity Permutation
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'The identity permutation is a permutation in which no element is out of place.
    It can be entered in a variety of ways. All the following create an identity permutation
    of size 4:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Watch out for entering the range *inside* a set of brackets (which is cycle
    notation):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Permutation Printing
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things to note about how Permutations are printed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.6: Configuring Permutation printing by setting `Permutation.print_cyclic`
    is deprecated. Users should use the `perm_cyclic` flag to the printers, as described
    below.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 1) If you prefer one form (array or cycle) over another, you can set `init_printing`
    with the `perm_cyclic` flag.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '2) Regardless of the setting, a list of elements in the array for cyclic form
    can be obtained and either of those can be copied and supplied as the argument
    to Permutation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '3) Printing is economical in that as little as possible is printed while retaining
    all information about the size of the permutation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The 2 was not printed but it is still there as can be seen with the array_form
    and size methods:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Short Introduction To Other Methods
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The permutation can act as a bijective function, telling what element is located
    at a given position
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The full cyclic form (including singletons) can be obtained:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Any permutation can be factored into transpositions of pairs of elements:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The number of permutations on a set of n elements is given by n! and is called
    the cardinality.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A given permutation has a rank among all the possible permutations of the same
    elements, but what that rank is depends on how the permutations are enumerated.
    (There are a number of different methods of doing so.) The lexicographic rank
    is given by the rank method and this rank is used to increment a permutation with
    addition/subtraction:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的排列在相同元素的所有可能排列中有一个秩，但这个秩取决于排列是如何枚举的。 (有许多不同的方法可以做到这一点。) 字典排序秩由 `rank` 方法给出，这个秩用于通过加法/减法增加排列：
- en: '[PRE29]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The product of two permutations p and q is defined as their composition as functions,
    (p*q)(i) = q(p(i)) [[R84]](#r84).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 两个排列 p 和 q 的乘积定义为它们作为函数的组合，(p*q)(i) = q(p(i)) [[R84]](#r84)。
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The permutation can be ‘applied’ to any list-like object, not only Permutations:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 排列可以“应用”于任何类似列表的对象，不仅限于排列：
- en: '[PRE31]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you have a list of arbitrary elements, the corresponding permutation can
    be found with the from_sequence method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个任意元素的列表，可以使用 `from_sequence` 方法找到相应的排列：
- en: '[PRE32]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Checking If A Permutation Is Contained In A Group
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 检查排列是否包含在群组中
- en: Generally if you have a group of permutations G on n symbols, and you’re checking
    if a permutation on less than n symbols is part of that group, the check will
    fail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你有一个包含 n 个符号的排列群组 G，并且你要检查小于 n 个符号的排列是否属于该群组，则检查将失败。
- en: 'Here is an example for n=5 and we check if the cycle (1,2,3) is in G:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个 n=5 的例子，我们检查循环 (1,2,3) 是否在 G 中：
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The check for p2 above will fail.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上面的 p2 检查将失败。
- en: Checking if p1 is in G works because SymPy knows G is a group on 5 symbols,
    and p1 is also on 5 symbols (its largest element is 5).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 p1 是否在 G 中有效，因为 SymPy 知道 G 是一个包含 5 个符号的群组，而 p1 也是在 5 个符号上（其最大元素是 5）。
- en: For `a1`, the `.list(6)` call will extend the permutation to 5 symbols, so the
    test will work as well. In the case of `a2` the permutation is being extended
    to 5 symbols by using a singleton, and in the case of `a3` it’s extended through
    the constructor argument `size=6`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `a1`，`.list(6)` 调用将排列扩展到 5 个符号，因此测试也将成功。在 `a2` 的情况下，通过使用单例将排列扩展到 5 个符号，而在
    `a3` 的情况下，通过构造函数参数 `size=6` 进行扩展。
- en: 'There is another way to do this, which is to tell the `contains` method that
    the number of symbols the group is on does not need to match perfectly the number
    of symbols for the permutation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种方法，即告诉 `contains` 方法，群组的符号数不需要完全匹配排列的符号数：
- en: '[PRE34]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This can be via the `strict` argument to the `contains` method, and SymPy will
    try to extend the permutation on its own and then perform the containment check.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`strict`参数传递给`contains`方法，SymPy 将尝试自行扩展排列，然后执行包含性检查。
- en: See also
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Cycle`](#sympy.combinatorics.permutations.Cycle "sympy.combinatorics.permutations.Cycle")'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Cycle`](#sympy.combinatorics.permutations.Cycle "sympy.combinatorics.permutations.Cycle")'
- en: References
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R79](#id3)]'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R79](#id3)]'
- en: 'Skiena, S. ‘Permutations.’ 1.1 in Implementing Discrete Mathematics Combinatorics
    and Graph Theory with Mathematica. Reading, MA: Addison-Wesley, pp. 3-16, 1990.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'Skiena, S. 在 Implementing Discrete Mathematics Combinatorics and Graph Theory
    with Mathematica 一书中的 1.1 章节。Reading, MA: Addison-Wesley, pp. 3-16, 1990。'
- en: '[R80] ([1](#id1),[2](#id4))'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[R80] ([1](#id1),[2](#id4))'
- en: 'Knuth, D. E. The Art of Computer Programming, Vol. 4: Combinatorial Algorithms,
    1st ed. Reading, MA: Addison-Wesley, 2011.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'Knuth, D. E. 在 The Art of Computer Programming, Vol. 4: Combinatorial Algorithms
    一书中，第一版。Reading, MA: Addison-Wesley, 2011.'
- en: '[[R81](#id5)]'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R81](#id5)]'
- en: Wendy Myrvold and Frank Ruskey. 2001\. Ranking and unranking permutations in
    linear time. Inf. Process. Lett. 79, 6 (September 2001), 281-284\. DOI=10.1016/S0020-0190(01)00141-7
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Wendy Myrvold 和 Frank Ruskey. 2001\. 在 Inf. Process. Lett. 中的 79 卷，6 期 (2001年9月)，281-284\.
    DOI=10.1016/S0020-0190(01)00141-7
- en: '[[R82](#id6)]'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R82](#id6)]'
- en: D. L. Kreher, D. R. Stinson ‘Combinatorial Algorithms’ CRC Press, 1999
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: D. L. Kreher, D. R. Stinson 在 CRC Press 出版的 Combinatorial Algorithms，1999年
- en: '[[R83](#id7)]'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R83](#id7)]'
- en: 'Graham, R. L.; Knuth, D. E.; and Patashnik, O. Concrete Mathematics: A Foundation
    for Computer Science, 2nd ed. Reading, MA: Addison-Wesley, 1994.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'Graham, R. L.; Knuth, D. E.; and Patashnik, O. 在 Concrete Mathematics: A Foundation
    for Computer Science，第二版。Reading, MA: Addison-Wesley, 1994.'
- en: '[R84] ([1](#id2),[2](#id8))'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[R84] ([1](#id2),[2](#id8))'
- en: '[https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse](https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse](https://en.wikipedia.org/w/index.php?oldid=499948155#Product_and_inverse)'
- en: '[[R85](#id9)]'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R85](#id9)]'
- en: '[https://en.wikipedia.org/wiki/Lehmer_code](https://en.wikipedia.org/wiki/Lehmer_code)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Lehmer_code](https://en.wikipedia.org/wiki/Lehmer_code)'
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Apply the permutation to an expression.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将排列应用于表达式。
- en: 'Parameters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**i** : Expr'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**i** : Expr'
- en: It should be an integer between \(0\) and \(n-1\) where \(n\) is the size of
    the permutation.
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它应该是一个介于\(0\)和\(n-1\)之间的整数，其中\(n\)是排列的大小。
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If it is a symbol or a symbolic expression that can have integer values, an
    `AppliedPermutation` object will be returned which can represent an unevaluated
    function.
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果它是一个可以取整数值的符号或符号表达式，将返回一个`AppliedPermutation`对象，该对象可以表示一个未评估的函数。
- en: Notes
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Any permutation can be defined as a bijective function \(\sigma : \{ 0, 1,
    \dots, n-1 \} \rightarrow \{ 0, 1, \dots, n-1 \}\) where \(n\) denotes the size
    of the permutation.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '任何排列可以定义为一个双射函数\(\sigma : \{ 0, 1, \dots, n-1 \} \rightarrow \{ 0, 1, \dots,
    n-1 \}\)，其中\(n\)表示排列的大小。'
- en: The definition may even be extended for any set with distinctive elements, such
    that the permutation can even be applied for real numbers or such, however, it
    is not implemented for now for computational reasons and the integrity with the
    group theory module.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以将定义扩展到具有不同元素的任何集合，以便排列可以应用于实数或类似的情况，但是出于计算原因和与群论模块的完整性考虑，目前未实施。
- en: This function is similar to the `__call__` magic, however, `__call__` magic
    already has some other applications like permuting an array or attaching new cycles,
    which would not always be mathematically consistent.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数类似于`__call__`魔术方法，但`__call__`魔术方法已经具有某些其他应用，如排列数组或附加新循环，这并不总是数学上一致的。
- en: This also guarantees that the return type is a SymPy integer, which guarantees
    the safety to use assumptions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这也确保了返回类型是SymPy整数，这保证了使用假设的安全性。
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return a copy of the attribute _array_form Examples ========
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 返回属性_array_form的副本 示例 ========
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Returns the positions of ascents in a permutation, ie, the location where p[i]
    < p[i+1]
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列中上升的位置，即满足p[i] < p[i+1]的位置。
- en: Examples
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE39]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: See also
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
- en: '[PRE40]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Returns all the elements of a permutation
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的所有元素
- en: Examples
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE41]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Returns the number of all possible permutations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有可能排列的数量。
- en: Examples
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE43]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: See also
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
- en: '[PRE44]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Return the commutator of `self` and `x`: `~x*~self*x*self`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`self`和`x`的交换子：`~x*~self*x*self`
- en: If f and g are part of a group, G, then the commutator of f and g is the group
    identity iff f and g commute, i.e. fg == gf.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果f和g是群G的一部分，则f和g的对易子是群恒等式当且仅当f和g交换，即fg == gf。
- en: Examples
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: References
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R86](#id10)]'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R86](#id10)]'
- en: '[https://en.wikipedia.org/wiki/Commutator](https://en.wikipedia.org/wiki/Commutator)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://zh.wikipedia.org/wiki/对易子](https://zh.wikipedia.org/wiki/对易子)'
- en: '[PRE47]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Checks if the elements are commuting.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 检查元素是否对易。
- en: Examples
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE48]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return the cycle structure of the permutation as a dictionary indicating the
    multiplicity of each cycle length.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的循环结构，作为指示每个循环长度的多重性的字典。
- en: Examples
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE50]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Returns the number of cycles contained in the permutation (including singletons).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列中包含的循环数（包括单例）。
- en: Examples
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE52]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: See also
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.functions.combinatorial.numbers.stirling`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.stirling
    "sympy.functions.combinatorial.numbers.stirling")'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.functions.combinatorial.numbers.stirling`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.stirling
    "sympy.functions.combinatorial.numbers.stirling")'
- en: '[PRE53]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This is used to convert to the cyclic notation from the canonical notation.
    Singletons are omitted.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用于从规范表示转换为循环表示。单例将被省略。
- en: Examples
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE54]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`array_form`](#sympy.combinatorics.permutations.Permutation.array_form "sympy.combinatorics.permutations.Permutation.array_form"),
    [`full_cyclic_form`](#sympy.combinatorics.permutations.Permutation.full_cyclic_form
    "sympy.combinatorics.permutations.Permutation.full_cyclic_form")'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`array_form`](#sympy.combinatorics.permutations.Permutation.array_form "sympy.combinatorics.permutations.Permutation.array_form"),
    [`full_cyclic_form`](#sympy.combinatorics.permutations.Permutation.full_cyclic_form
    "sympy.combinatorics.permutations.Permutation.full_cyclic_form")'
- en: '[PRE55]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Returns the positions of descents in a permutation, ie, the location where p[i]
    > p[i+1]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列中下降位置，即满足p[i] > p[i+1]的位置。
- en: Examples
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE56]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: See also
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
- en: '[PRE57]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Calculates the permutation from the inversion vector.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从反转向量计算排列。
- en: Examples
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE58]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return the permutation needed to obtain `i` from the sorted elements of `i`.
    If custom sorting is desired, a key can be given.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回使`i`从排序元素`i`中获取所需排列。如果需要自定义排序，则可以提供一个键。
- en: Examples
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return permutation in cyclic form including singletons.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 返回包含单例的循环形式排列。
- en: Examples
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE63]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Computes the adjacency distance between two permutations.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个排列之间的邻接距离。
- en: Explanation
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This metric counts the number of times a pair i,j of jobs is adjacent in both
    p and p’. If n_adj is this quantity then the adjacency distance is n - n_adj -
    1 [1]
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此度量衡计算作业对`i,j`在p和p'中邻接的次数。如果n_adj为此数量，则邻接距离为n - n_adj - 1 [1]
- en: '[1] Reeves, Colin R. Landscapes, Operators and Heuristic search, Annals of
    Operational Research, 86, pp 473-490\. (1999)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 里夫斯（Reeves, Colin R.）, Landscaes, Operators and Heuristic search, Annals
    of Operational Research, 86, pp 473-490\. (1999)'
- en: Examples
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE65]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: See also
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix")'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix")'
- en: '[PRE66]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Computes the adjacency matrix of a permutation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 计算排列的邻接矩阵。
- en: Explanation
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If job i is adjacent to job j in a permutation p then we set m[i, j] = 1 where
    m is the adjacency matrix of p.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果作业`i`在排列`p`中邻接到作业`j`，则我们将m[i, j] = 1，其中m是p的邻接矩阵。
- en: Examples
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE67]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: See also
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
- en: '[PRE68]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Computes the positional distance between two permutations.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个排列之间的位置距离。
- en: Examples
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE69]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
- en: '[PRE70]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Computes the precedence distance between two permutations.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两个排列之间的优先度距离。
- en: Explanation
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Suppose p and p’ represent n jobs. The precedence metric counts the number of
    times a job j is preceded by job i in both p and p’. This metric is commutative.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 p 和 p' 代表 n 个作业。优先度度量统计作业 j 在 p 和 p' 中被作业 i 先于的次数。此度量是可交换的。
- en: Examples
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE71]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: See also
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_precedence_matrix`](#sympy.combinatorics.permutations.Permutation.get_precedence_matrix
    "sympy.combinatorics.permutations.Permutation.get_precedence_matrix"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
- en: '[PRE72]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Gets the precedence matrix. This is used for computing the distance between
    two permutations.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 获取优先度矩阵。这用于计算两个排列之间的距离。
- en: Examples
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE73]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: See also
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_precedence_distance`](#sympy.combinatorics.permutations.Permutation.get_precedence_distance
    "sympy.combinatorics.permutations.Permutation.get_precedence_distance"), [`get_adjacency_matrix`](#sympy.combinatorics.permutations.Permutation.get_adjacency_matrix
    "sympy.combinatorics.permutations.Permutation.get_adjacency_matrix"), [`get_adjacency_distance`](#sympy.combinatorics.permutations.Permutation.get_adjacency_distance
    "sympy.combinatorics.permutations.Permutation.get_adjacency_distance")'
- en: '[PRE74]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Returns the index of a permutation.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的索引。
- en: The index of a permutation is the sum of all subscripts j such that p[j] is
    greater than p[j+1].
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 排列的索引是所有下标 j 的和，使得 p[j] 大于 p[j+1]。
- en: Examples
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE75]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Return the inversion vector of the permutation.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的逆序向量。
- en: The inversion vector consists of elements whose value indicates the number of
    elements in the permutation that are lesser than it and lie on its right hand
    side.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 逆序向量包含元素，其值表示排列中小于它并位于其右侧的元素数。
- en: The inversion vector is the same as the Lehmer encoding of a permutation.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 逆序向量与排列的 Lehmer 编码相同。
- en: Examples
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE77]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The inversion vector increases lexicographically with the rank of the permutation,
    the -ith element cycling through 0..i.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 逆序向量随排列的秩递增词典顺序遍历，第 i 个元素循环 0..i。
- en: '[PRE78]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: See also
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`from_inversion_vector`](#sympy.combinatorics.permutations.Permutation.from_inversion_vector
    "sympy.combinatorics.permutations.Permutation.from_inversion_vector")'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[`from_inversion_vector`](#sympy.combinatorics.permutations.Permutation.from_inversion_vector
    "sympy.combinatorics.permutations.Permutation.from_inversion_vector")'
- en: '[PRE79]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Computes the number of inversions of a permutation.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 计算排列的逆序数。
- en: Explanation
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: An inversion is where i > j but p[i] < p[j].
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 逆序是指 i > j 但是 p[i] < p[j]。
- en: For small length of p, it iterates over all i and j values and calculates the
    number of inversions. For large length of p, it uses a variation of merge sort
    to calculate the number of inversions.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 p 的长度较小，它遍历所有的 i 和 j 值并计算逆序数。对于 p 的长度较大，它使用归并排序的变体来计算逆序数。
- en: Examples
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE80]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: See also
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max")'
- en: References
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R87](#id11)]'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R87](#id11)]'
- en: '[https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm](https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm](https://www.cp.eng.chula.ac.th/~prabhas//teaching/algo/algo2008/count-inv.htm)'
- en: '[PRE81]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Checks to see if the permutation is a set with zero elements
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 检查置换是否为包含零元素的集合
- en: Examples
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE82]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: See also
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_Singleton`](#sympy.combinatorics.permutations.Permutation.is_Singleton
    "sympy.combinatorics.permutations.Permutation.is_Singleton")'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_Singleton`](#sympy.combinatorics.permutations.Permutation.is_Singleton
    "sympy.combinatorics.permutations.Permutation.is_Singleton")'
- en: '[PRE83]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Returns True if the Permutation is an identity permutation.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果置换是单位置换，则返回 True。
- en: Examples
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE84]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: See also
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order")'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order")'
- en: '[PRE85]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Checks to see if the permutation contains only one number and is thus the only
    possible permutation of this set of numbers
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 检查置换是否仅包含一个数字，因此是该数字集的唯一可能置换。
- en: Examples
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE86]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: See also
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_Empty`](#sympy.combinatorics.permutations.Permutation.is_Empty "sympy.combinatorics.permutations.Permutation.is_Empty")'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_Empty`](#sympy.combinatorics.permutations.Permutation.is_Empty "sympy.combinatorics.permutations.Permutation.is_Empty")'
- en: '[PRE87]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Checks if a permutation is even.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 检查置换是否为偶置换。
- en: Examples
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE88]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: See also
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_odd`](#sympy.combinatorics.permutations.Permutation.is_odd "sympy.combinatorics.permutations.Permutation.is_odd")'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_odd`](#sympy.combinatorics.permutations.Permutation.is_odd "sympy.combinatorics.permutations.Permutation.is_odd")'
- en: '[PRE89]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Checks if a permutation is odd.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 检查置换是否为奇置换。
- en: Examples
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE90]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: See also
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`is_even`](#sympy.combinatorics.permutations.Permutation.is_even "sympy.combinatorics.permutations.Permutation.is_even")'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`is_even`](#sympy.combinatorics.permutations.Permutation.is_even "sympy.combinatorics.permutations.Permutation.is_even")'
- en: '[PRE91]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Return as a permutation the shuffling of range(n) using the Josephus scheme
    in which every m-th item is selected until all have been chosen. The returned
    permutation has elements listed by the order in which they were selected.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Josephus 方案对范围(n)进行置换，并返回置换为每个 m-th 项选取直到所有项都被选择的顺序列出的元素的置换。
- en: The parameter `s` stops the selection process when there are `s` items remaining
    and these are selected by continuing the selection, counting by 1 rather than
    by `m`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `s` 在剩下 `s` 个项目并继续选择时停止选择过程，而不是按 `m` 计数。
- en: 'Consider selecting every 3rd item from 6 until only 2 remain:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑从 6 中每 3 个选一个，直到剩下 2 个：
- en: '[PRE92]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Examples
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE93]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: References
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R88](#id12)]'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R88](#id12)]'
- en: '[https://en.wikipedia.org/wiki/Flavius_Josephus](https://en.wikipedia.org/wiki/Flavius_Josephus)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Flavius_Josephus](https://en.wikipedia.org/wiki/Flavius_Josephus)'
- en: '[[R89](#id13)]'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R89](#id13)]'
- en: '[https://en.wikipedia.org/wiki/Josephus_problem](https://en.wikipedia.org/wiki/Josephus_problem)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Josephus_problem](https://en.wikipedia.org/wiki/Josephus_problem)'
- en: '[[R90](#id14)]'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R90](#id14)]'
- en: '[https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html](https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html](https://web.archive.org/web/20171008094331/http://www.wou.edu/~burtonl/josephus.html)'
- en: '[PRE94]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Returns the number of integers moved by a permutation.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回置换移动的整数数量。
- en: Examples
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE95]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: See also
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`support`](#sympy.combinatorics.permutations.Permutation.support "sympy.combinatorics.permutations.Permutation.support"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`support`](#sympy.combinatorics.permutations.Permutation.support "sympy.combinatorics.permutations.Permutation.support"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
- en: '[PRE96]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Return the permutation as an explicit list, possibly trimming unmoved elements
    if size is less than the maximum element in the permutation; if this is desired,
    setting `size=-1` will guarantee such trimming.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 将置换作为显式列表返回，如果 size 小于置换中的最大元素，则可能会截断未移动的元素；如果需要此功能，设置 `size=-1` 将保证这样的截断。
- en: Examples
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE97]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Passing a length too small will trim trailing, unchanged elements in the permutation:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 传递一个太小的长度将截断置换中未更改的尾部元素：
- en: '[PRE98]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: The maximum element moved by the permutation.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 置换移动的最大元素。
- en: Examples
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE100]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: See also
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[`min`](#sympy.combinatorics.permutations.Permutation.min "sympy.combinatorics.permutations.Permutation.min"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
- en: '[PRE101]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The minimum element moved by the permutation.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 置换移动的最小元素。
- en: Examples
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE102]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: See also
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[`max`](#sympy.combinatorics.permutations.Permutation.max "sympy.combinatorics.permutations.Permutation.max"),
    [`descents`](#sympy.combinatorics.permutations.Permutation.descents "sympy.combinatorics.permutations.Permutation.descents"),
    [`ascents`](#sympy.combinatorics.permutations.Permutation.ascents "sympy.combinatorics.permutations.Permutation.ascents"),
    [`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
- en: '[PRE103]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: other*~self, self and other have _array_form
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: other*~self，self 和 other 有 _array_form
- en: '[PRE104]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Returns the next permutation in lexicographical order. If self is the last permutation
    in lexicographical order it returns None. See [4] section 2.4.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 返回字典顺序中的下一个置换。如果 self 是字典顺序中的最后一个置换，则返回 None。见 [4] 第 2.4 节。
- en: Examples
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE105]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: See also
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex")'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex")'
- en: '[PRE106]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Returns the next permutation in nonlex order [3]. If self is the last permutation
    in this order it returns None.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 返回非字典顺序中的下一个置换 [3]。如果 self 是该顺序中的最后一个置换，则返回 None。
- en: Examples
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE107]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: See also
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
- en: '[PRE108]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Returns the next permutation in Trotter-Johnson order. If self is the last permutation
    it returns None. See [4] section 2.4\. If it is desired to generate all such permutations,
    they can be generated in order more quickly with the `generate_bell` function.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Trotter-Johnson顺序中的下一个排列。如果self是最后一个排列，则返回None。参见[4]第2.4节。如果希望生成所有这样的排列，则可以使用`generate_bell`函数更快地按顺序生成。
- en: Examples
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE109]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: See also
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`sympy.utilities.iterables.generate_bell`](../utilities/iterables.html#sympy.utilities.iterables.generate_bell
    "sympy.utilities.iterables.generate_bell")'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`sympy.utilities.iterables.generate_bell`](../utilities/iterables.html#sympy.utilities.iterables.generate_bell
    "sympy.utilities.iterables.generate_bell")'
- en: '[PRE110]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Computes the order of a permutation.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 计算排列的阶。
- en: When the permutation is raised to the power of its order it equals the identity
    permutation.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 当排列数被其阶数的幂次时，它等于单位排列。
- en: Examples
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE111]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: See also
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`identity`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.identity
    "sympy.combinatorics.perm_groups.PermutationGroup.identity"), [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality
    "sympy.combinatorics.permutations.Permutation.cardinality"), [`length`](#sympy.combinatorics.permutations.Permutation.length
    "sympy.combinatorics.permutations.Permutation.length"), [`rank`](#sympy.combinatorics.permutations.Permutation.rank
    "sympy.combinatorics.permutations.Permutation.rank"), [`size`](#sympy.combinatorics.permutations.Permutation.size
    "sympy.combinatorics.permutations.Permutation.size")'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`identity`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.identity
    "sympy.combinatorics.perm_groups.PermutationGroup.identity"), [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality
    "sympy.combinatorics.permutations.Permutation.cardinality"), [`length`](#sympy.combinatorics.permutations.Permutation.length
    "sympy.combinatorics.permutations.Permutation.length"), [`rank`](#sympy.combinatorics.permutations.Permutation.rank
    "sympy.combinatorics.permutations.Permutation.rank"), [`size`](#sympy.combinatorics.permutations.Permutation.size
    "sympy.combinatorics.permutations.Permutation.size")'
- en: '[PRE112]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Computes the parity of a permutation.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 计算排列的奇偶性。
- en: Explanation
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The parity of a permutation reflects the parity of the number of inversions
    in the permutation, i.e., the number of pairs of x and y such that `x > y` but
    `p[x] < p[y]`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 排列的奇偶性反映了排列中逆序对的奇偶性，即满足`x > y`但`p[x] < p[y]`的x和y对的数量。
- en: Examples
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE113]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: See also
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`_af_parity`](#sympy.combinatorics.permutations._af_parity "sympy.combinatorics.permutations._af_parity")'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`_af_parity`](#sympy.combinatorics.permutations._af_parity "sympy.combinatorics.permutations._af_parity")'
- en: '[PRE114]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Generates a random permutation of length `n`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 生成长度为`n`的随机排列。
- en: Uses the underlying Python pseudo-random number generator.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础Python伪随机数生成器。
- en: Examples
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE115]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Returns the lexicographic rank of the permutation.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的字典序排名。
- en: Examples
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE117]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: See also
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex"),
    [`unrank_lex`](#sympy.combinatorics.permutations.Permutation.unrank_lex "sympy.combinatorics.permutations.Permutation.unrank_lex"),
    [`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`size`](#sympy.combinatorics.permutations.Permutation.size "sympy.combinatorics.permutations.Permutation.size")'
- en: '[PRE118]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: This is a linear time ranking algorithm that does not enforce lexicographic
    order [3].
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种线性时间的排名算法，不强制使用字典顺序 [3]。
- en: Examples
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE119]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: See also
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`unrank_nonlex`](#sympy.combinatorics.permutations.Permutation.unrank_nonlex
    "sympy.combinatorics.permutations.Permutation.unrank_nonlex")'
- en: '[PRE120]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Returns the Trotter Johnson rank, which we get from the minimal change algorithm.
    See [4] section 2.4.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特罗特-约翰逊排名，该排名来自最小变更算法。请参见 [4] 第2.4节。
- en: Examples
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE121]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: See also
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`unrank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
- en: '[PRE122]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Resize the permutation to the new size `n`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 调整排列大小为新的大小 `n`。
- en: 'Parameters:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**n** : int'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : 整数'
- en: The new size of the permutation.
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 排列的新大小。
- en: 'Raises:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 异常：
- en: '**ValueError**'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '**数值错误**'
- en: If the permutation cannot be resized to the given size. This may only happen
    when resized to a smaller size than the original.
  id: totrans-390
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果无法将排列调整到给定的大小。这只会在调整为比原始大小更小的大小时发生。
- en: Examples
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE123]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Increasing the size of a permutation:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 增加排列的大小：
- en: '[PRE124]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Decreasing the size of the permutation:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 减小排列的大小：
- en: '[PRE125]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'If resizing to the specific size breaks the cycles:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调整到特定大小会破坏循环：
- en: '[PRE126]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Return product of Permutations [a, b, c, …] as the Permutation whose ith value
    is a(b(c(i))).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列 [a, b, c, …] 的乘积，其第i个值为 a(b(c(i)))。
- en: a, b, c, … can be Permutation objects or tuples.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: a, b, c, … 可以是 Permutation 对象或元组。
- en: Examples
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE128]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'This handles the operands in reverse order compared to the `*` operator:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 与`*`操作符相比，以相反的顺序处理操作数：
- en: '[PRE130]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Notes
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'All items in the sequence will be parsed by Permutation as necessary as long
    as the first item is a Permutation:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 只要第一个项目是一个排列，序列中的所有项目将由 Permutation 解析为必需的。
- en: '[PRE131]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: The reverse order of arguments will raise a TypeError.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的反向顺序将引发类型错误。
- en: '[PRE132]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: same as rmul, but the elements of args are Permutation objects which have _array_form
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 与 rmul 相同，但 args 的元素是具有 _array_form 的 Permutation 对象。
- en: '[PRE133]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Returns the runs of a permutation.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列的运行。
- en: An ascending sequence in a permutation is called a run [5].
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 排列中的升序序列称为一个运行 [5]。
- en: Examples
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE134]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Gives the signature of the permutation needed to place the elements of the permutation
    in canonical order.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 给出将排列元素按照规范顺序排列所需的排列特征。
- en: The signature is calculated as (-1)^<number of inversions>
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 签名计算为(-1)^<逆序数>。
- en: Examples
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE136]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: See also
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`inversions`](#sympy.combinatorics.permutations.Permutation.inversions "sympy.combinatorics.permutations.Permutation.inversions")'
- en: '[PRE137]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Returns the number of elements in the permutation.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 返回排列中元素的数量。
- en: Examples
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE138]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: See also
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank")'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cardinality`](#sympy.combinatorics.permutations.Permutation.cardinality "sympy.combinatorics.permutations.Permutation.cardinality"),
    [`length`](#sympy.combinatorics.permutations.Permutation.length "sympy.combinatorics.permutations.Permutation.length"),
    [`order`](#sympy.combinatorics.permutations.Permutation.order "sympy.combinatorics.permutations.Permutation.order"),
    [`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank")'
- en: '[PRE139]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Return the elements in permutation, P, for which P[i] != i.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 返回置换 P 中使得 P[i] != i 的元素。
- en: Examples
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE140]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Return the permutation decomposed into a list of transpositions.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 返回分解为换位列表的置换。
- en: Explanation
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: It is always possible to express a permutation as the product of transpositions,
    see [1]
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 可以始终将置换表示为换位的乘积，参见 [1]
- en: Examples
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE142]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: References
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R91](#id15)]'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R91](#id15)]'
- en: '[https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties](https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties)'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties](https://en.wikipedia.org/wiki/Transposition_%28mathematics%29#Properties)'
- en: '[PRE143]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Lexicographic permutation unranking.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 字典顺序排列的置换不排序。
- en: Examples
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE144]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: See also
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex")'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank`](#sympy.combinatorics.permutations.Permutation.rank "sympy.combinatorics.permutations.Permutation.rank"),
    [`next_lex`](#sympy.combinatorics.permutations.Permutation.next_lex "sympy.combinatorics.permutations.Permutation.next_lex")'
- en: '[PRE145]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: This is a linear time unranking algorithm that does not respect lexicographic
    order [3].
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不遵守词典顺序的线性时间不排序算法 [3]。
- en: Examples
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE146]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: See also
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex")'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[`next_nonlex`](#sympy.combinatorics.permutations.Permutation.next_nonlex "sympy.combinatorics.permutations.Permutation.next_nonlex"),
    [`rank_nonlex`](#sympy.combinatorics.permutations.Permutation.rank_nonlex "sympy.combinatorics.permutations.Permutation.rank_nonlex")'
- en: '[PRE147]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Trotter Johnson permutation unranking. See [4] section 2.4.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: Trotter Johnson 置换不排序。参见 [4] 第 2.4 节。
- en: Examples
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE148]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: See also
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rank_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.rank_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.rank_trotterjohnson"), [`next_trotterjohnson`](#sympy.combinatorics.permutations.Permutation.next_trotterjohnson
    "sympy.combinatorics.permutations.Permutation.next_trotterjohnson")'
- en: '[PRE149]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Wrapper around dict which provides the functionality of a disjoint cycle.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 封装了提供不相交循环功能的 dict。
- en: Explanation
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'A cycle shows the rule to use to move subsets of elements to obtain a permutation.
    The Cycle class is more flexible than Permutation in that 1) all elements need
    not be present in order to investigate how multiple cycles act in sequence and
    2) it can contain singletons:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 一个循环显示了用于移动元素子集以获得置换的规则。Cycle 类比 Permutation 更灵活，因为 1) 不需要所有元素都出现以调查多个循环如何按顺序操作，2)
    它可以包含单例：
- en: '[PRE150]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'A Cycle will automatically parse a cycle given as a tuple on the rhs:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Cycle 将自动解析作为 rhs 上给定元组的周期：
- en: '[PRE151]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The identity cycle, Cycle(), can be used to start a product:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 单位循环，Cycle()，可用于启动产品：
- en: '[PRE152]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'The array form of a Cycle can be obtained by calling the list method (or passing
    it to the list function) and all elements from 0 will be shown:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用列表方法（或将其传递给列表函数），可以获得 Cycle 的数组形式，并显示所有从 0 开始的元素：
- en: '[PRE153]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'If a larger (or smaller) range is desired use the list method and provide the
    desired size – but the Cycle cannot be truncated to a size smaller than the largest
    element that is out of place:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更大（或更小）的范围，请使用列表方法并提供所需的大小 - 但是 Cycle 不能被截断为比顺序错位的最大元素更小的大小：
- en: '[PRE154]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Singletons are not shown when printing with one exception: the largest element
    is always shown – as a singleton if necessary:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 除了最大元素始终显示为单个元素外，在打印时不显示单例：
- en: '[PRE155]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The array form can be used to instantiate a Permutation so other properties
    of the permutation can be investigated:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用数组形式来实例化一个置换，以便研究置换的其他属性：
- en: '[PRE156]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Notes
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The underlying structure of the Cycle is a dictionary and although the __iter__
    method has been redefined to give the array form of the cycle, the underlying
    dictionary items are still available with the such methods as items():'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: Cycle的基本结构是一个字典，尽管__iter__方法已被重新定义为给出循环的数组形式，但底层字典项目仍然可通过items()等方法使用：
- en: '[PRE157]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: See also
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
- en: '[PRE158]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Return the cycles as an explicit list starting from 0 up to the greater of the
    largest value in the cycles and size.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 返回循环作为从0开始直到循环中最大值和大小中较大者的显式列表。
- en: Truncation of trailing unmoved items will occur when size is less than the maximum
    element in the cycle; if this is desired, setting `size=-1` will guarantee such
    trimming.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 当大小小于循环中的最大元素时，将截断尾部未移动的项目；如果需要此操作，请设置`size=-1`来保证这样的修剪。
- en: Examples
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE159]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'Passing a length too small will trim trailing, unchanged elements in the permutation:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递的长度太小，则会修剪置换中未改变的尾部元素：
- en: '[PRE160]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Computes the parity of a permutation in array form.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 计算数组形式置换的奇偶性。
- en: Explanation
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The parity of a permutation reflects the parity of the number of inversions
    in the permutation, i.e., the number of pairs of x and y such that x > y but p[x]
    < p[y].
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 置换的奇偶性反映了置换中倒置对的奇偶性，即x > y但p[x] < p[y]的对数。
- en: Examples
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE162]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: See also
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Permutation`](#sympy.combinatorics.permutations.Permutation "sympy.combinatorics.permutations.Permutation")'
- en: '## Generators'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '## 生成器'
- en: '[PRE163]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Generates the symmetric group of order n, Sn.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 生成阶为n的对称群Sn。
- en: Examples
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE164]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Generates the cyclic group of order n, Cn.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 生成阶为n的循环群Cn。
- en: Examples
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE166]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: See also
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`dihedral`](#sympy.combinatorics.generators.dihedral "sympy.combinatorics.generators.dihedral")'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dihedral`](#sympy.combinatorics.generators.dihedral "sympy.combinatorics.generators.dihedral")'
- en: '[PRE167]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Generates the alternating group of order n, An.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 生成阶为n的交替群An。
- en: Examples
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE168]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Generates the dihedral group of order 2n, Dn.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 生成阶为2n的二面角群Dn。
- en: The result is given as a subgroup of Sn, except for the special cases n=1 (the
    group S2) and n=2 (the Klein 4-group) where that’s not possible and embeddings
    in S2 and S4 respectively are given.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 结果作为Sn的一个子群给出，除了特殊情况n=1（群S2）和n=2（Klein 4-群）不可能和在S2和S4中的嵌入外。
- en: Examples
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE170]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: See also
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`cyclic`](#sympy.combinatorics.generators.cyclic "sympy.combinatorics.generators.cyclic")'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cyclic`](#sympy.combinatorics.generators.cyclic "sympy.combinatorics.generators.cyclic")'
