- en: numpy.fft.hfft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html](https://numpy.org/doc/1.26/reference/generated/numpy.fft.hfft.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the FFT of a signal that has Hermitian symmetry, i.e., a real spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transformed axis of the output. For *n* output points, `n//2 +
    1` input points are necessary. If the input is longer than this, it is cropped.
    If it is shorter than this, it is padded with zeros. If *n* is not given, it is
    taken to be `2*(m-1)` where `m` is the length of the input along the axis specified
    by *axis*.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`numpy.fft`](../routines.fft.html#module-numpy.fft
    "numpy.fft")). Default is “backward”. Indicates which direction of the forward/backward
    pair of transforms is scaled and with what normalization factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.20.0: The “backward”, “forward” values were added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is *n*, or, if *n* is not given, `2*m - 2` where `m` is the length of the
    transformed axis of the input. To get an odd number of output points, *n* must
    be specified, for instance as `2*m - 1` in the typical case,
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is not a valid axis of *a*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfft`](numpy.fft.rfft.html#numpy.fft.rfft "numpy.fft.rfft")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the one-dimensional FFT for real input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft "numpy.fft.ihfft")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of [`hfft`](#numpy.fft.hfft "numpy.fft.hfft").
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`hfft`](#numpy.fft.hfft "numpy.fft.hfft")/[`ihfft`](numpy.fft.ihfft.html#numpy.fft.ihfft
    "numpy.fft.ihfft") are a pair analogous to [`rfft`](numpy.fft.rfft.html#numpy.fft.rfft
    "numpy.fft.rfft")/[`irfft`](numpy.fft.irfft.html#numpy.fft.irfft "numpy.fft.irfft"),
    but for the opposite case: here the signal has Hermitian symmetry in the time
    domain and is real in the frequency domain. So here it’s [`hfft`](#numpy.fft.hfft
    "numpy.fft.hfft") for which you must supply the length of the result if it is
    to be odd.'
  prefs: []
  type: TYPE_NORMAL
- en: 'even: `ihfft(hfft(a, 2*len(a) - 2)) == a`, within roundoff error,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'odd: `ihfft(hfft(a, 2*len(a) - 1)) == a`, within roundoff error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The correct interpretation of the hermitian input depends on the length of the
    original data, as given by *n*. This is because each input shape could correspond
    to either an odd or even length signal. By default, [`hfft`](#numpy.fft.hfft "numpy.fft.hfft")
    assumes an even output length which puts the last entry at the Nyquist frequency;
    aliasing with its symmetric counterpart. By Hermitian symmetry, the value is thus
    treated as purely real. To avoid losing information, the shape of the full signal
    **must** be given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
