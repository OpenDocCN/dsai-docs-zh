- en: Index objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/indexing.html](https://pandas.pydata.org/docs/reference/indexing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Index'
  prefs: []
  type: TYPE_NORMAL
- en: '**Many of these methods or variants thereof are available on the objects that
    contain an index (Series/DataFrame) and those should most likely be used before
    calling these methods directly.**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index")([data, dtype, copy, name, tupleize_cols])
    | Immutable sequence used for indexing and alignment. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.values`](api/pandas.Index.values.html#pandas.Index.values "pandas.Index.values")
    | Return an array representing the data in the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_increasing`](api/pandas.Index.is_monotonic_increasing.html#pandas.Index.is_monotonic_increasing
    "pandas.Index.is_monotonic_increasing") | Return a boolean if the values are equal
    or increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_decreasing`](api/pandas.Index.is_monotonic_decreasing.html#pandas.Index.is_monotonic_decreasing
    "pandas.Index.is_monotonic_decreasing") | Return a boolean if the values are equal
    or decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_unique`](api/pandas.Index.is_unique.html#pandas.Index.is_unique
    "pandas.Index.is_unique") | Return if the index has unique values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.has_duplicates`](api/pandas.Index.has_duplicates.html#pandas.Index.has_duplicates
    "pandas.Index.has_duplicates") | Check if the Index has duplicate values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.hasnans`](api/pandas.Index.hasnans.html#pandas.Index.hasnans "pandas.Index.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dtype`](api/pandas.Index.dtype.html#pandas.Index.dtype "pandas.Index.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.inferred_type`](api/pandas.Index.inferred_type.html#pandas.Index.inferred_type
    "pandas.Index.inferred_type") | Return a string of the type inferred from the
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.shape`](api/pandas.Index.shape.html#pandas.Index.shape "pandas.Index.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.name`](api/pandas.Index.name.html#pandas.Index.name "pandas.Index.name")
    | Return Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.names`](api/pandas.Index.names.html#pandas.Index.names "pandas.Index.names")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nbytes`](api/pandas.Index.nbytes.html#pandas.Index.nbytes "pandas.Index.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ndim`](api/pandas.Index.ndim.html#pandas.Index.ndim "pandas.Index.ndim")
    | Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.size`](api/pandas.Index.size.html#pandas.Index.size "pandas.Index.size")
    | Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.empty`](api/pandas.Index.empty.html#pandas.Index.empty "pandas.Index.empty")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.T`](api/pandas.Index.T.html#pandas.Index.T "pandas.Index.T") | Return
    the transpose, which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.memory_usage`](api/pandas.Index.memory_usage.html#pandas.Index.memory_usage
    "pandas.Index.memory_usage")([deep]) | Memory usage of the values. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.all`](api/pandas.Index.all.html#pandas.Index.all "pandas.Index.all")(*args, **kwargs)
    | Return whether all elements are Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.any`](api/pandas.Index.any.html#pandas.Index.any "pandas.Index.any")(*args, **kwargs)
    | Return whether any element is Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmin`](api/pandas.Index.argmin.html#pandas.Index.argmin "pandas.Index.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmax`](api/pandas.Index.argmax.html#pandas.Index.argmax "pandas.Index.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.copy`](api/pandas.Index.copy.html#pandas.Index.copy "pandas.Index.copy")([name, deep])
    | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.delete`](api/pandas.Index.delete.html#pandas.Index.delete "pandas.Index.delete")(loc)
    | Make new Index with passed location(-s) deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop`](api/pandas.Index.drop.html#pandas.Index.drop "pandas.Index.drop")(labels[, errors])
    | Make new Index with passed list of labels deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop_duplicates`](api/pandas.Index.drop_duplicates.html#pandas.Index.drop_duplicates
    "pandas.Index.drop_duplicates")(*[, keep]) | Return Index with duplicate values
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.duplicated`](api/pandas.Index.duplicated.html#pandas.Index.duplicated
    "pandas.Index.duplicated")([keep]) | Indicate duplicate index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.equals`](api/pandas.Index.equals.html#pandas.Index.equals "pandas.Index.equals")(other)
    | Determine if two Index object are equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.factorize`](api/pandas.Index.factorize.html#pandas.Index.factorize
    "pandas.Index.factorize")([sort, use_na_sentinel]) | Encode the object as an enumerated
    type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.identical`](api/pandas.Index.identical.html#pandas.Index.identical
    "pandas.Index.identical")(other) | Similar to equals, but checks that object attributes
    and types are also equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.insert`](api/pandas.Index.insert.html#pandas.Index.insert "pandas.Index.insert")(loc, item)
    | Make new Index inserting new item at location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_`](api/pandas.Index.is_.html#pandas.Index.is_ "pandas.Index.is_")(other)
    | More flexible, faster check like `is` but that works through views. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_boolean`](api/pandas.Index.is_boolean.html#pandas.Index.is_boolean
    "pandas.Index.is_boolean")() | (DEPRECATED) Check if the Index only consists of
    booleans. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_categorical`](api/pandas.Index.is_categorical.html#pandas.Index.is_categorical
    "pandas.Index.is_categorical")() | (DEPRECATED) Check if the Index holds categorical
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_floating`](api/pandas.Index.is_floating.html#pandas.Index.is_floating
    "pandas.Index.is_floating")() | (DEPRECATED) Check if the Index is a floating
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_integer`](api/pandas.Index.is_integer.html#pandas.Index.is_integer
    "pandas.Index.is_integer")() | (DEPRECATED) Check if the Index only consists of
    integers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_interval`](api/pandas.Index.is_interval.html#pandas.Index.is_interval
    "pandas.Index.is_interval")() | (DEPRECATED) Check if the Index holds Interval
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_numeric`](api/pandas.Index.is_numeric.html#pandas.Index.is_numeric
    "pandas.Index.is_numeric")() | (DEPRECATED) Check if the Index only consists of
    numeric data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_object`](api/pandas.Index.is_object.html#pandas.Index.is_object
    "pandas.Index.is_object")() | (DEPRECATED) Check if the Index is of the object
    dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.min`](api/pandas.Index.min.html#pandas.Index.min "pandas.Index.min")([axis, skipna])
    | Return the minimum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.max`](api/pandas.Index.max.html#pandas.Index.max "pandas.Index.max")([axis, skipna])
    | Return the maximum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.reindex`](api/pandas.Index.reindex.html#pandas.Index.reindex "pandas.Index.reindex")(target[, method, level, ...])
    | Create index with target''s values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.rename`](api/pandas.Index.rename.html#pandas.Index.rename "pandas.Index.rename")(name, *[, inplace])
    | Alter Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.repeat`](api/pandas.Index.repeat.html#pandas.Index.repeat "pandas.Index.repeat")(repeats[, axis])
    | Repeat elements of a Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.where`](api/pandas.Index.where.html#pandas.Index.where "pandas.Index.where")(cond[, other])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.take`](api/pandas.Index.take.html#pandas.Index.take "pandas.Index.take")(indices[, axis, allow_fill, ...])
    | Return a new Index of the values selected by the indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.putmask`](api/pandas.Index.putmask.html#pandas.Index.putmask "pandas.Index.putmask")(mask, value)
    | Return a new Index of the values set with the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.unique`](api/pandas.Index.unique.html#pandas.Index.unique "pandas.Index.unique")([level])
    | Return unique values in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nunique`](api/pandas.Index.nunique.html#pandas.Index.nunique "pandas.Index.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.value_counts`](api/pandas.Index.value_counts.html#pandas.Index.value_counts
    "pandas.Index.value_counts")([normalize, sort, ...]) | Return a Series containing
    counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: Compatibility with MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.set_names`](api/pandas.Index.set_names.html#pandas.Index.set_names
    "pandas.Index.set_names")(names, *[, level, inplace]) | Set Index or MultiIndex
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.droplevel`](api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel")([level]) | Return index with requested level(s) removed.
    |'
  prefs: []
  type: TYPE_TB
- en: Missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.fillna`](api/pandas.Index.fillna.html#pandas.Index.fillna "pandas.Index.fillna")([value, downcast])
    | Fill NA/NaN values with the specified value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dropna`](api/pandas.Index.dropna.html#pandas.Index.dropna "pandas.Index.dropna")([how])
    | Return Index without NA/NaN values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isna`](api/pandas.Index.isna.html#pandas.Index.isna "pandas.Index.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.notna`](api/pandas.Index.notna.html#pandas.Index.notna "pandas.Index.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.astype`](api/pandas.Index.astype.html#pandas.Index.astype "pandas.Index.astype")(dtype[, copy])
    | Create an Index with values cast to dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.item`](api/pandas.Index.item.html#pandas.Index.item "pandas.Index.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.map`](api/pandas.Index.map.html#pandas.Index.map "pandas.Index.map")(mapper[, na_action])
    | Map values using an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ravel`](api/pandas.Index.ravel.html#pandas.Index.ravel "pandas.Index.ravel")([order])
    | Return a view on self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_list`](api/pandas.Index.to_list.html#pandas.Index.to_list "pandas.Index.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_series`](api/pandas.Index.to_series.html#pandas.Index.to_series
    "pandas.Index.to_series")([index, name]) | Create a Series with both index and
    values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_frame`](api/pandas.Index.to_frame.html#pandas.Index.to_frame "pandas.Index.to_frame")([index, name])
    | Create a DataFrame with a column containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.view`](api/pandas.Index.view.html#pandas.Index.view "pandas.Index.view")([cls])
    |  |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.argsort`](api/pandas.Index.argsort.html#pandas.Index.argsort "pandas.Index.argsort")(*args, **kwargs)
    | Return the integer indices that would sort the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.searchsorted`](api/pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.sort_values`](api/pandas.Index.sort_values.html#pandas.Index.sort_values
    "pandas.Index.sort_values")(*[, return_indexer, ...]) | Return a sorted copy of
    the index. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.shift`](api/pandas.Index.shift.html#pandas.Index.shift "pandas.Index.shift")([periods, freq])
    | Shift index by desired number of time frequency increments. |'
  prefs: []
  type: TYPE_TB
- en: Combining / joining / set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.append`](api/pandas.Index.append.html#pandas.Index.append "pandas.Index.append")(other)
    | Append a collection of Index options together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.join`](api/pandas.Index.join.html#pandas.Index.join "pandas.Index.join")(other, *[, how, level, ...])
    | Compute join_index and indexers to conform data structures to the new index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.intersection`](api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection")(other[, sort]) | Form the intersection of two Index
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.union`](api/pandas.Index.union.html#pandas.Index.union "pandas.Index.union")(other[, sort])
    | Form the union of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.difference`](api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference")(other[, sort]) | Return a new Index with elements of
    index not in other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.symmetric_difference`](api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference")(other[, ...]) | Compute the symmetric difference
    of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.asof`](api/pandas.Index.asof.html#pandas.Index.asof "pandas.Index.asof")(label)
    | Return the label from the index, or, if not present, the previous one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.asof_locs`](api/pandas.Index.asof_locs.html#pandas.Index.asof_locs
    "pandas.Index.asof_locs")(where, mask) | Return the locations (indices) of labels
    in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer`](api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer")(target[, method, limit, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_for`](api/pandas.Index.get_indexer_for.html#pandas.Index.get_indexer_for
    "pandas.Index.get_indexer_for")(target) | Guaranteed return of an indexer even
    when non-unique. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_non_unique`](api/pandas.Index.get_indexer_non_unique.html#pandas.Index.get_indexer_non_unique
    "pandas.Index.get_indexer_non_unique")(target) | Compute indexer and mask for
    new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_level_values`](api/pandas.Index.get_level_values.html#pandas.Index.get_level_values
    "pandas.Index.get_level_values")(level) | Return an Index of values for requested
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_loc`](api/pandas.Index.get_loc.html#pandas.Index.get_loc "pandas.Index.get_loc")(key)
    | Get integer location, slice or boolean mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_slice_bound`](api/pandas.Index.get_slice_bound.html#pandas.Index.get_slice_bound
    "pandas.Index.get_slice_bound")(label, side) | Calculate slice bound that corresponds
    to given label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isin`](api/pandas.Index.isin.html#pandas.Index.isin "pandas.Index.isin")(values[, level])
    | Return a boolean array where the index values are in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_indexer`](api/pandas.Index.slice_indexer.html#pandas.Index.slice_indexer
    "pandas.Index.slice_indexer")([start, end, step]) | Compute the slice indexer
    for input labels and step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_locs`](api/pandas.Index.slice_locs.html#pandas.Index.slice_locs
    "pandas.Index.slice_locs")([start, end, step]) | Compute slice locations for input
    labels. |'
  prefs: []
  type: TYPE_TB
- en: '## Numeric Index'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`RangeIndex`](api/pandas.RangeIndex.html#pandas.RangeIndex "pandas.RangeIndex")([start, stop, step, dtype, copy, ...])
    | Immutable Index implementing a monotonic integer range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.start`](api/pandas.RangeIndex.start.html#pandas.RangeIndex.start
    "pandas.RangeIndex.start") | The value of the start parameter (`0` if this was
    not supplied). |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.stop`](api/pandas.RangeIndex.stop.html#pandas.RangeIndex.stop
    "pandas.RangeIndex.stop") | The value of the stop parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.step`](api/pandas.RangeIndex.step.html#pandas.RangeIndex.step
    "pandas.RangeIndex.step") | The value of the step parameter (`1` if this was not
    supplied). |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.from_range`](api/pandas.RangeIndex.from_range.html#pandas.RangeIndex.from_range
    "pandas.RangeIndex.from_range")(data[, name, dtype]) | Create [`pandas.RangeIndex`](api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") from a `range` object. |  ## CategoricalIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex`](api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex")([data, categories, ...]) | Index based on an underlying
    [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical").
    |'
  prefs: []
  type: TYPE_TB
- en: Categorical components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.codes`](api/pandas.CategoricalIndex.codes.html#pandas.CategoricalIndex.codes
    "pandas.CategoricalIndex.codes") | The category codes of this categorical index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.categories`](api/pandas.CategoricalIndex.categories.html#pandas.CategoricalIndex.categories
    "pandas.CategoricalIndex.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.ordered`](api/pandas.CategoricalIndex.ordered.html#pandas.CategoricalIndex.ordered
    "pandas.CategoricalIndex.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.rename_categories`](api/pandas.CategoricalIndex.rename_categories.html#pandas.CategoricalIndex.rename_categories
    "pandas.CategoricalIndex.rename_categories")(*args, ...) | Rename categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.reorder_categories`](api/pandas.CategoricalIndex.reorder_categories.html#pandas.CategoricalIndex.reorder_categories
    "pandas.CategoricalIndex.reorder_categories")(*args, ...) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.add_categories`](api/pandas.CategoricalIndex.add_categories.html#pandas.CategoricalIndex.add_categories
    "pandas.CategoricalIndex.add_categories")(*args, **kwargs) | Add new categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_categories`](api/pandas.CategoricalIndex.remove_categories.html#pandas.CategoricalIndex.remove_categories
    "pandas.CategoricalIndex.remove_categories")(*args, ...) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_unused_categories`](api/pandas.CategoricalIndex.remove_unused_categories.html#pandas.CategoricalIndex.remove_unused_categories
    "pandas.CategoricalIndex.remove_unused_categories")(...) | Remove categories which
    are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.set_categories`](api/pandas.CategoricalIndex.set_categories.html#pandas.CategoricalIndex.set_categories
    "pandas.CategoricalIndex.set_categories")(*args, **kwargs) | Set the categories
    to the specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_ordered`](api/pandas.CategoricalIndex.as_ordered.html#pandas.CategoricalIndex.as_ordered
    "pandas.CategoricalIndex.as_ordered")(*args, **kwargs) | Set the Categorical to
    be ordered. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_unordered`](api/pandas.CategoricalIndex.as_unordered.html#pandas.CategoricalIndex.as_unordered
    "pandas.CategoricalIndex.as_unordered")(*args, **kwargs) | Set the Categorical
    to be unordered. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.map`](api/pandas.CategoricalIndex.map.html#pandas.CategoricalIndex.map
    "pandas.CategoricalIndex.map")(mapper[, na_action]) | Map values using input an
    input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.equals`](api/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals
    "pandas.CategoricalIndex.equals")(other) | Determine if two CategoricalIndex objects
    contain the same elements. |  ## IntervalIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`IntervalIndex`](api/pandas.IntervalIndex.html#pandas.IntervalIndex "pandas.IntervalIndex")(data[, closed, dtype, copy, ...])
    | Immutable index of intervals that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: IntervalIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`IntervalIndex.from_arrays`](api/pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays
    "pandas.IntervalIndex.from_arrays")(left, right[, ...]) | Construct from two arrays
    defining the left and right bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_tuples`](api/pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples
    "pandas.IntervalIndex.from_tuples")(data[, closed, ...]) | Construct an IntervalIndex
    from an array-like of tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_breaks`](api/pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks
    "pandas.IntervalIndex.from_breaks")(breaks[, closed, ...]) | Construct an IntervalIndex
    from an array of splits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.left`](api/pandas.IntervalIndex.left.html#pandas.IntervalIndex.left
    "pandas.IntervalIndex.left") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.right`](api/pandas.IntervalIndex.right.html#pandas.IntervalIndex.right
    "pandas.IntervalIndex.right") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.mid`](api/pandas.IntervalIndex.mid.html#pandas.IntervalIndex.mid
    "pandas.IntervalIndex.mid") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.closed`](api/pandas.IntervalIndex.closed.html#pandas.IntervalIndex.closed
    "pandas.IntervalIndex.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.length`](api/pandas.IntervalIndex.length.html#pandas.IntervalIndex.length
    "pandas.IntervalIndex.length") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.values`](api/pandas.IntervalIndex.values.html#pandas.IntervalIndex.values
    "pandas.IntervalIndex.values") | Return an array representing the data in the
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_empty`](api/pandas.IntervalIndex.is_empty.html#pandas.IntervalIndex.is_empty
    "pandas.IntervalIndex.is_empty") | Indicates if an interval is empty, meaning
    it contains no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_non_overlapping_monotonic`](api/pandas.IntervalIndex.is_non_overlapping_monotonic.html#pandas.IntervalIndex.is_non_overlapping_monotonic
    "pandas.IntervalIndex.is_non_overlapping_monotonic") | Return a boolean whether
    the IntervalArray is non-overlapping and monotonic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_overlapping`](api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") | Return True if the IntervalIndex has
    overlapping intervals, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_loc`](api/pandas.IntervalIndex.get_loc.html#pandas.IntervalIndex.get_loc
    "pandas.IntervalIndex.get_loc")(key) | Get integer location, slice or boolean
    mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_indexer`](api/pandas.IntervalIndex.get_indexer.html#pandas.IntervalIndex.get_indexer
    "pandas.IntervalIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.set_closed`](api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed")(*args, **kwargs) | Return an identical IntervalArray
    closed on the specified side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.contains`](api/pandas.IntervalIndex.contains.html#pandas.IntervalIndex.contains
    "pandas.IntervalIndex.contains")(*args, **kwargs) | Check elementwise if the Intervals
    contain the value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.overlaps`](api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps")(*args, **kwargs) | Check elementwise if an Interval
    overlaps the values in the IntervalArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.to_tuples`](api/pandas.IntervalIndex.to_tuples.html#pandas.IntervalIndex.to_tuples
    "pandas.IntervalIndex.to_tuples")(*args, **kwargs) | Return an ndarray (if self
    is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left,
    right). |  ## MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")([levels, codes, sortorder, ...])
    | A multi-level, or hierarchical, index object for pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.from_arrays`](api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays")(arrays[, sortorder, ...]) | Convert arrays to
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_tuples`](api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples")(tuples[, sortorder, ...]) | Convert list of tuples
    to MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_product`](api/pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product")(iterables[, ...]) | Make a MultiIndex from the
    cartesian product of multiple iterables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_frame`](api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame")(df[, sortorder, names]) | Make a MultiIndex from
    a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.names`](api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") | Names of levels in MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levels`](api/pandas.MultiIndex.levels.html#pandas.MultiIndex.levels
    "pandas.MultiIndex.levels") | Levels of the MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.codes`](api/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes
    "pandas.MultiIndex.codes") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.nlevels`](api/pandas.MultiIndex.nlevels.html#pandas.MultiIndex.nlevels
    "pandas.MultiIndex.nlevels") | Integer number of levels in this MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levshape`](api/pandas.MultiIndex.levshape.html#pandas.MultiIndex.levshape
    "pandas.MultiIndex.levshape") | A tuple with the length of each level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.dtypes`](api/pandas.MultiIndex.dtypes.html#pandas.MultiIndex.dtypes
    "pandas.MultiIndex.dtypes") | Return the dtypes as a Series for the underlying
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.set_levels`](api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels")(levels, *[, level, ...]) | Set new levels on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.set_codes`](api/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes")(codes, *[, level, ...]) | Set new codes on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_flat_index`](api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index")() | Convert a MultiIndex to an Index of Tuples
    containing the level values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_frame`](api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame")([index, name, ...]) | Create a DataFrame with the
    levels of the MultiIndex as columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.sortlevel`](api/pandas.MultiIndex.sortlevel.html#pandas.MultiIndex.sortlevel
    "pandas.MultiIndex.sortlevel")([level, ascending, ...]) | Sort MultiIndex at the
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.droplevel`](api/pandas.MultiIndex.droplevel.html#pandas.MultiIndex.droplevel
    "pandas.MultiIndex.droplevel")([level]) | Return index with requested level(s)
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.swaplevel`](api/pandas.MultiIndex.swaplevel.html#pandas.MultiIndex.swaplevel
    "pandas.MultiIndex.swaplevel")([i, j]) | Swap level i with level j. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.reorder_levels`](api/pandas.MultiIndex.reorder_levels.html#pandas.MultiIndex.reorder_levels
    "pandas.MultiIndex.reorder_levels")(order) | Rearrange levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.remove_unused_levels`](api/pandas.MultiIndex.remove_unused_levels.html#pandas.MultiIndex.remove_unused_levels
    "pandas.MultiIndex.remove_unused_levels")() | Create new MultiIndex from current
    that removes unused levels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.drop`](api/pandas.MultiIndex.drop.html#pandas.MultiIndex.drop
    "pandas.MultiIndex.drop")(codes[, level, errors]) | Make a new [`pandas.MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with the passed list of codes deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.copy`](api/pandas.MultiIndex.copy.html#pandas.MultiIndex.copy
    "pandas.MultiIndex.copy")([names, deep, name]) | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.append`](api/pandas.MultiIndex.append.html#pandas.MultiIndex.append
    "pandas.MultiIndex.append")(other) | Append a collection of Index options together.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.truncate`](api/pandas.MultiIndex.truncate.html#pandas.MultiIndex.truncate
    "pandas.MultiIndex.truncate")([before, after]) | Slice index between two labels
    / tuples, return new MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.get_loc`](api/pandas.MultiIndex.get_loc.html#pandas.MultiIndex.get_loc
    "pandas.MultiIndex.get_loc")(key) | Get location for a label or a tuple of labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_locs`](api/pandas.MultiIndex.get_locs.html#pandas.MultiIndex.get_locs
    "pandas.MultiIndex.get_locs")(seq) | Get location for a sequence of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_loc_level`](api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level")(key[, level, ...]) | Get location and sliced
    index for requested label(s)/level(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_indexer`](api/pandas.MultiIndex.get_indexer.html#pandas.MultiIndex.get_indexer
    "pandas.MultiIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_level_values`](api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")(level) | Return vector of label values for
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IndexSlice`](api/pandas.IndexSlice.html#pandas.IndexSlice "pandas.IndexSlice")
    | Create an object to more easily perform multi-index slicing. |  ## DatetimeIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex`](api/pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex")([data, freq, tz, normalize, ...])
    | Immutable ndarray-like of datetime64 data. |'
  prefs: []
  type: TYPE_TB
- en: Time/date components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.year`](api/pandas.DatetimeIndex.year.html#pandas.DatetimeIndex.year
    "pandas.DatetimeIndex.year") | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month`](api/pandas.DatetimeIndex.month.html#pandas.DatetimeIndex.month
    "pandas.DatetimeIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day`](api/pandas.DatetimeIndex.day.html#pandas.DatetimeIndex.day
    "pandas.DatetimeIndex.day") | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.hour`](api/pandas.DatetimeIndex.hour.html#pandas.DatetimeIndex.hour
    "pandas.DatetimeIndex.hour") | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.minute`](api/pandas.DatetimeIndex.minute.html#pandas.DatetimeIndex.minute
    "pandas.DatetimeIndex.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.second`](api/pandas.DatetimeIndex.second.html#pandas.DatetimeIndex.second
    "pandas.DatetimeIndex.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.microsecond`](api/pandas.DatetimeIndex.microsecond.html#pandas.DatetimeIndex.microsecond
    "pandas.DatetimeIndex.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.nanosecond`](api/pandas.DatetimeIndex.nanosecond.html#pandas.DatetimeIndex.nanosecond
    "pandas.DatetimeIndex.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.date`](api/pandas.DatetimeIndex.date.html#pandas.DatetimeIndex.date
    "pandas.DatetimeIndex.date") | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.time`](api/pandas.DatetimeIndex.time.html#pandas.DatetimeIndex.time
    "pandas.DatetimeIndex.time") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.timetz`](api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofyear`](api/pandas.DatetimeIndex.dayofyear.html#pandas.DatetimeIndex.dayofyear
    "pandas.DatetimeIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_year`](api/pandas.DatetimeIndex.day_of_year.html#pandas.DatetimeIndex.day_of_year
    "pandas.DatetimeIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofweek`](api/pandas.DatetimeIndex.dayofweek.html#pandas.DatetimeIndex.dayofweek
    "pandas.DatetimeIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_week`](api/pandas.DatetimeIndex.day_of_week.html#pandas.DatetimeIndex.day_of_week
    "pandas.DatetimeIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.weekday`](api/pandas.DatetimeIndex.weekday.html#pandas.DatetimeIndex.weekday
    "pandas.DatetimeIndex.weekday") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.quarter`](api/pandas.DatetimeIndex.quarter.html#pandas.DatetimeIndex.quarter
    "pandas.DatetimeIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz`](api/pandas.DatetimeIndex.tz.html#pandas.DatetimeIndex.tz
    "pandas.DatetimeIndex.tz") | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freq`](api/pandas.DatetimeIndex.freq.html#pandas.DatetimeIndex.freq
    "pandas.DatetimeIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freqstr`](api/pandas.DatetimeIndex.freqstr.html#pandas.DatetimeIndex.freqstr
    "pandas.DatetimeIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_start`](api/pandas.DatetimeIndex.is_month_start.html#pandas.DatetimeIndex.is_month_start
    "pandas.DatetimeIndex.is_month_start") | Indicates whether the date is the first
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_end`](api/pandas.DatetimeIndex.is_month_end.html#pandas.DatetimeIndex.is_month_end
    "pandas.DatetimeIndex.is_month_end") | Indicates whether the date is the last
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_start`](api/pandas.DatetimeIndex.is_quarter_start.html#pandas.DatetimeIndex.is_quarter_start
    "pandas.DatetimeIndex.is_quarter_start") | Indicator for whether the date is the
    first day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_end`](api/pandas.DatetimeIndex.is_quarter_end.html#pandas.DatetimeIndex.is_quarter_end
    "pandas.DatetimeIndex.is_quarter_end") | Indicator for whether the date is the
    last day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_start`](api/pandas.DatetimeIndex.is_year_start.html#pandas.DatetimeIndex.is_year_start
    "pandas.DatetimeIndex.is_year_start") | Indicate whether the date is the first
    day of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_end`](api/pandas.DatetimeIndex.is_year_end.html#pandas.DatetimeIndex.is_year_end
    "pandas.DatetimeIndex.is_year_end") | Indicate whether the date is the last day
    of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_leap_year`](api/pandas.DatetimeIndex.is_leap_year.html#pandas.DatetimeIndex.is_leap_year
    "pandas.DatetimeIndex.is_leap_year") | Boolean indicator if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.inferred_freq`](api/pandas.DatetimeIndex.inferred_freq.html#pandas.DatetimeIndex.inferred_freq
    "pandas.DatetimeIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.indexer_at_time`](api/pandas.DatetimeIndex.indexer_at_time.html#pandas.DatetimeIndex.indexer_at_time
    "pandas.DatetimeIndex.indexer_at_time")(time[, asof]) | Return index locations
    of values at particular time of day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.indexer_between_time`](api/pandas.DatetimeIndex.indexer_between_time.html#pandas.DatetimeIndex.indexer_between_time
    "pandas.DatetimeIndex.indexer_between_time")(...[, ...]) | Return index locations
    of values between particular times of day. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.normalize`](api/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize
    "pandas.DatetimeIndex.normalize")(*args, **kwargs) | Convert times to midnight.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.strftime`](api/pandas.DatetimeIndex.strftime.html#pandas.DatetimeIndex.strftime
    "pandas.DatetimeIndex.strftime")(date_format) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.snap`](api/pandas.DatetimeIndex.snap.html#pandas.DatetimeIndex.snap
    "pandas.DatetimeIndex.snap")([freq]) | Snap time stamps to nearest occurring frequency.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_convert`](api/pandas.DatetimeIndex.tz_convert.html#pandas.DatetimeIndex.tz_convert
    "pandas.DatetimeIndex.tz_convert")(tz) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_localize`](api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize")(tz[, ambiguous, ...]) | Localize tz-naive
    Datetime Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.round`](api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.floor`](api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.ceil`](api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month_name`](api/pandas.DatetimeIndex.month_name.html#pandas.DatetimeIndex.month_name
    "pandas.DatetimeIndex.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_name`](api/pandas.DatetimeIndex.day_name.html#pandas.DatetimeIndex.day_name
    "pandas.DatetimeIndex.day_name")(*args, **kwargs) | Return the day names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.as_unit`](api/pandas.DatetimeIndex.as_unit.html#pandas.DatetimeIndex.as_unit
    "pandas.DatetimeIndex.as_unit")(*args, **kwargs) | Convert to a dtype with the
    given unit resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_period`](api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_pydatetime`](api/pandas.DatetimeIndex.to_pydatetime.html#pandas.DatetimeIndex.to_pydatetime
    "pandas.DatetimeIndex.to_pydatetime")(*args, **kwargs) | Return an ndarray of
    `datetime.datetime` objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_series`](api/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series
    "pandas.DatetimeIndex.to_series")([index, name]) | Create a Series with both index
    and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_frame`](api/pandas.DatetimeIndex.to_frame.html#pandas.DatetimeIndex.to_frame
    "pandas.DatetimeIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.mean`](api/pandas.DatetimeIndex.mean.html#pandas.DatetimeIndex.mean
    "pandas.DatetimeIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.std`](api/pandas.DatetimeIndex.std.html#pandas.DatetimeIndex.std
    "pandas.DatetimeIndex.std")(*args, **kwargs) | Return sample standard deviation
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: TimedeltaIndex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex`](api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex "pandas.TimedeltaIndex")([data, unit, freq, closed, ...])
    | Immutable Index of timedelta64 data. |'
  prefs: []
  type: TYPE_TB
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.days`](api/pandas.TimedeltaIndex.days.html#pandas.TimedeltaIndex.days
    "pandas.TimedeltaIndex.days") | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.seconds`](api/pandas.TimedeltaIndex.seconds.html#pandas.TimedeltaIndex.seconds
    "pandas.TimedeltaIndex.seconds") | Number of seconds (>= 0 and less than 1 day)
    for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.microseconds`](api/pandas.TimedeltaIndex.microseconds.html#pandas.TimedeltaIndex.microseconds
    "pandas.TimedeltaIndex.microseconds") | Number of microseconds (>= 0 and less
    than 1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.nanoseconds`](api/pandas.TimedeltaIndex.nanoseconds.html#pandas.TimedeltaIndex.nanoseconds
    "pandas.TimedeltaIndex.nanoseconds") | Number of nanoseconds (>= 0 and less than
    1 microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.components`](api/pandas.TimedeltaIndex.components.html#pandas.TimedeltaIndex.components
    "pandas.TimedeltaIndex.components") | Return a DataFrame of the individual resolution
    components of the Timedeltas. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.inferred_freq`](api/pandas.TimedeltaIndex.inferred_freq.html#pandas.TimedeltaIndex.inferred_freq
    "pandas.TimedeltaIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.as_unit`](api/pandas.TimedeltaIndex.as_unit.html#pandas.TimedeltaIndex.as_unit
    "pandas.TimedeltaIndex.as_unit")(unit) | Convert to a dtype with the given unit
    resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_pytimedelta`](api/pandas.TimedeltaIndex.to_pytimedelta.html#pandas.TimedeltaIndex.to_pytimedelta
    "pandas.TimedeltaIndex.to_pytimedelta")(*args, **kwargs) | Return an ndarray of
    datetime.timedelta objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_series`](api/pandas.TimedeltaIndex.to_series.html#pandas.TimedeltaIndex.to_series
    "pandas.TimedeltaIndex.to_series")([index, name]) | Create a Series with both
    index and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.round`](api/pandas.TimedeltaIndex.round.html#pandas.TimedeltaIndex.round
    "pandas.TimedeltaIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.floor`](api/pandas.TimedeltaIndex.floor.html#pandas.TimedeltaIndex.floor
    "pandas.TimedeltaIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.ceil`](api/pandas.TimedeltaIndex.ceil.html#pandas.TimedeltaIndex.ceil
    "pandas.TimedeltaIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_frame`](api/pandas.TimedeltaIndex.to_frame.html#pandas.TimedeltaIndex.to_frame
    "pandas.TimedeltaIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.mean`](api/pandas.TimedeltaIndex.mean.html#pandas.TimedeltaIndex.mean
    "pandas.TimedeltaIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: PeriodIndex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`PeriodIndex`](api/pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex")([data, ordinal, freq, dtype, ...])
    | Immutable ndarray holding ordinal values indicating regular periods in time.
    |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.day`](api/pandas.PeriodIndex.day.html#pandas.PeriodIndex.day
    "pandas.PeriodIndex.day") | The days of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofweek`](api/pandas.PeriodIndex.dayofweek.html#pandas.PeriodIndex.dayofweek
    "pandas.PeriodIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_week`](api/pandas.PeriodIndex.day_of_week.html#pandas.PeriodIndex.day_of_week
    "pandas.PeriodIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofyear`](api/pandas.PeriodIndex.dayofyear.html#pandas.PeriodIndex.dayofyear
    "pandas.PeriodIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_year`](api/pandas.PeriodIndex.day_of_year.html#pandas.PeriodIndex.day_of_year
    "pandas.PeriodIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.days_in_month`](api/pandas.PeriodIndex.days_in_month.html#pandas.PeriodIndex.days_in_month
    "pandas.PeriodIndex.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.daysinmonth`](api/pandas.PeriodIndex.daysinmonth.html#pandas.PeriodIndex.daysinmonth
    "pandas.PeriodIndex.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.end_time`](api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time") | Get the Timestamp for the end of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freq`](api/pandas.PeriodIndex.freq.html#pandas.PeriodIndex.freq
    "pandas.PeriodIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freqstr`](api/pandas.PeriodIndex.freqstr.html#pandas.PeriodIndex.freqstr
    "pandas.PeriodIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.hour`](api/pandas.PeriodIndex.hour.html#pandas.PeriodIndex.hour
    "pandas.PeriodIndex.hour") | The hour of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.is_leap_year`](api/pandas.PeriodIndex.is_leap_year.html#pandas.PeriodIndex.is_leap_year
    "pandas.PeriodIndex.is_leap_year") | Logical indicating if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.minute`](api/pandas.PeriodIndex.minute.html#pandas.PeriodIndex.minute
    "pandas.PeriodIndex.minute") | The minute of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.month`](api/pandas.PeriodIndex.month.html#pandas.PeriodIndex.month
    "pandas.PeriodIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.quarter`](api/pandas.PeriodIndex.quarter.html#pandas.PeriodIndex.quarter
    "pandas.PeriodIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.qyear`](api/pandas.PeriodIndex.qyear.html#pandas.PeriodIndex.qyear
    "pandas.PeriodIndex.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.second`](api/pandas.PeriodIndex.second.html#pandas.PeriodIndex.second
    "pandas.PeriodIndex.second") | The second of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.start_time`](api/pandas.PeriodIndex.start_time.html#pandas.PeriodIndex.start_time
    "pandas.PeriodIndex.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.week`](api/pandas.PeriodIndex.week.html#pandas.PeriodIndex.week
    "pandas.PeriodIndex.week") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekday`](api/pandas.PeriodIndex.weekday.html#pandas.PeriodIndex.weekday
    "pandas.PeriodIndex.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekofyear`](api/pandas.PeriodIndex.weekofyear.html#pandas.PeriodIndex.weekofyear
    "pandas.PeriodIndex.weekofyear") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.year`](api/pandas.PeriodIndex.year.html#pandas.PeriodIndex.year
    "pandas.PeriodIndex.year") | The year of the period. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.asfreq`](api/pandas.PeriodIndex.asfreq.html#pandas.PeriodIndex.asfreq
    "pandas.PeriodIndex.asfreq")([freq, how]) | Convert the PeriodArray to the specified
    frequency freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.strftime`](api/pandas.PeriodIndex.strftime.html#pandas.PeriodIndex.strftime
    "pandas.PeriodIndex.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.to_timestamp`](api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp")([freq, how]) | Cast to DatetimeArray/Index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_fields`](api/pandas.PeriodIndex.from_fields.html#pandas.PeriodIndex.from_fields
    "pandas.PeriodIndex.from_fields")(*[, year, quarter, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_ordinals`](api/pandas.PeriodIndex.from_ordinals.html#pandas.PeriodIndex.from_ordinals
    "pandas.PeriodIndex.from_ordinals")(ordinals, *, freq) |  |'
  prefs: []
  type: TYPE_TB
- en: Index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Many of these methods or variants thereof are available on the objects that
    contain an index (Series/DataFrame) and those should most likely be used before
    calling these methods directly.**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Index`](api/pandas.Index.html#pandas.Index "pandas.Index")([data, dtype, copy, name, tupleize_cols])
    | Immutable sequence used for indexing and alignment. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.values`](api/pandas.Index.values.html#pandas.Index.values "pandas.Index.values")
    | Return an array representing the data in the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_increasing`](api/pandas.Index.is_monotonic_increasing.html#pandas.Index.is_monotonic_increasing
    "pandas.Index.is_monotonic_increasing") | Return a boolean if the values are equal
    or increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_decreasing`](api/pandas.Index.is_monotonic_decreasing.html#pandas.Index.is_monotonic_decreasing
    "pandas.Index.is_monotonic_decreasing") | Return a boolean if the values are equal
    or decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_unique`](api/pandas.Index.is_unique.html#pandas.Index.is_unique
    "pandas.Index.is_unique") | Return if the index has unique values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.has_duplicates`](api/pandas.Index.has_duplicates.html#pandas.Index.has_duplicates
    "pandas.Index.has_duplicates") | Check if the Index has duplicate values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.hasnans`](api/pandas.Index.hasnans.html#pandas.Index.hasnans "pandas.Index.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dtype`](api/pandas.Index.dtype.html#pandas.Index.dtype "pandas.Index.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.inferred_type`](api/pandas.Index.inferred_type.html#pandas.Index.inferred_type
    "pandas.Index.inferred_type") | Return a string of the type inferred from the
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.shape`](api/pandas.Index.shape.html#pandas.Index.shape "pandas.Index.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.name`](api/pandas.Index.name.html#pandas.Index.name "pandas.Index.name")
    | Return Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.names`](api/pandas.Index.names.html#pandas.Index.names "pandas.Index.names")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nbytes`](api/pandas.Index.nbytes.html#pandas.Index.nbytes "pandas.Index.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ndim`](api/pandas.Index.ndim.html#pandas.Index.ndim "pandas.Index.ndim")
    | Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.size`](api/pandas.Index.size.html#pandas.Index.size "pandas.Index.size")
    | Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.empty`](api/pandas.Index.empty.html#pandas.Index.empty "pandas.Index.empty")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.T`](api/pandas.Index.T.html#pandas.Index.T "pandas.Index.T") | Return
    the transpose, which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.memory_usage`](api/pandas.Index.memory_usage.html#pandas.Index.memory_usage
    "pandas.Index.memory_usage")([deep]) | Memory usage of the values. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.all`](api/pandas.Index.all.html#pandas.Index.all "pandas.Index.all")(*args, **kwargs)
    | Return whether all elements are Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.any`](api/pandas.Index.any.html#pandas.Index.any "pandas.Index.any")(*args, **kwargs)
    | Return whether any element is Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmin`](api/pandas.Index.argmin.html#pandas.Index.argmin "pandas.Index.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmax`](api/pandas.Index.argmax.html#pandas.Index.argmax "pandas.Index.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.copy`](api/pandas.Index.copy.html#pandas.Index.copy "pandas.Index.copy")([name, deep])
    | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.delete`](api/pandas.Index.delete.html#pandas.Index.delete "pandas.Index.delete")(loc)
    | Make new Index with passed location(-s) deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop`](api/pandas.Index.drop.html#pandas.Index.drop "pandas.Index.drop")(labels[, errors])
    | Make new Index with passed list of labels deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop_duplicates`](api/pandas.Index.drop_duplicates.html#pandas.Index.drop_duplicates
    "pandas.Index.drop_duplicates")(*[, keep]) | Return Index with duplicate values
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.duplicated`](api/pandas.Index.duplicated.html#pandas.Index.duplicated
    "pandas.Index.duplicated")([keep]) | Indicate duplicate index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.equals`](api/pandas.Index.equals.html#pandas.Index.equals "pandas.Index.equals")(other)
    | Determine if two Index object are equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.factorize`](api/pandas.Index.factorize.html#pandas.Index.factorize
    "pandas.Index.factorize")([sort, use_na_sentinel]) | Encode the object as an enumerated
    type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.identical`](api/pandas.Index.identical.html#pandas.Index.identical
    "pandas.Index.identical")(other) | Similar to equals, but checks that object attributes
    and types are also equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.insert`](api/pandas.Index.insert.html#pandas.Index.insert "pandas.Index.insert")(loc, item)
    | Make new Index inserting new item at location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_`](api/pandas.Index.is_.html#pandas.Index.is_ "pandas.Index.is_")(other)
    | More flexible, faster check like `is` but that works through views. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_boolean`](api/pandas.Index.is_boolean.html#pandas.Index.is_boolean
    "pandas.Index.is_boolean")() | (DEPRECATED) Check if the Index only consists of
    booleans. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_categorical`](api/pandas.Index.is_categorical.html#pandas.Index.is_categorical
    "pandas.Index.is_categorical")() | (DEPRECATED) Check if the Index holds categorical
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_floating`](api/pandas.Index.is_floating.html#pandas.Index.is_floating
    "pandas.Index.is_floating")() | (DEPRECATED) Check if the Index is a floating
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_integer`](api/pandas.Index.is_integer.html#pandas.Index.is_integer
    "pandas.Index.is_integer")() | (DEPRECATED) Check if the Index only consists of
    integers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_interval`](api/pandas.Index.is_interval.html#pandas.Index.is_interval
    "pandas.Index.is_interval")() | (DEPRECATED) Check if the Index holds Interval
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_numeric`](api/pandas.Index.is_numeric.html#pandas.Index.is_numeric
    "pandas.Index.is_numeric")() | (DEPRECATED) Check if the Index only consists of
    numeric data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_object`](api/pandas.Index.is_object.html#pandas.Index.is_object
    "pandas.Index.is_object")() | (DEPRECATED) Check if the Index is of the object
    dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.min`](api/pandas.Index.min.html#pandas.Index.min "pandas.Index.min")([axis, skipna])
    | Return the minimum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.max`](api/pandas.Index.max.html#pandas.Index.max "pandas.Index.max")([axis, skipna])
    | Return the maximum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.reindex`](api/pandas.Index.reindex.html#pandas.Index.reindex "pandas.Index.reindex")(target[, method, level, ...])
    | Create index with target''s values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.rename`](api/pandas.Index.rename.html#pandas.Index.rename "pandas.Index.rename")(name, *[, inplace])
    | Alter Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.repeat`](api/pandas.Index.repeat.html#pandas.Index.repeat "pandas.Index.repeat")(repeats[, axis])
    | Repeat elements of a Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.where`](api/pandas.Index.where.html#pandas.Index.where "pandas.Index.where")(cond[, other])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.take`](api/pandas.Index.take.html#pandas.Index.take "pandas.Index.take")(indices[, axis, allow_fill, ...])
    | Return a new Index of the values selected by the indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.putmask`](api/pandas.Index.putmask.html#pandas.Index.putmask "pandas.Index.putmask")(mask, value)
    | Return a new Index of the values set with the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.unique`](api/pandas.Index.unique.html#pandas.Index.unique "pandas.Index.unique")([level])
    | Return unique values in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nunique`](api/pandas.Index.nunique.html#pandas.Index.nunique "pandas.Index.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.value_counts`](api/pandas.Index.value_counts.html#pandas.Index.value_counts
    "pandas.Index.value_counts")([normalize, sort, ...]) | Return a Series containing
    counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: Compatibility with MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.set_names`](api/pandas.Index.set_names.html#pandas.Index.set_names
    "pandas.Index.set_names")(names, *[, level, inplace]) | Set Index or MultiIndex
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.droplevel`](api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel")([level]) | Return index with requested level(s) removed.
    |'
  prefs: []
  type: TYPE_TB
- en: Missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.fillna`](api/pandas.Index.fillna.html#pandas.Index.fillna "pandas.Index.fillna")([value, downcast])
    | Fill NA/NaN values with the specified value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dropna`](api/pandas.Index.dropna.html#pandas.Index.dropna "pandas.Index.dropna")([how])
    | Return Index without NA/NaN values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isna`](api/pandas.Index.isna.html#pandas.Index.isna "pandas.Index.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.notna`](api/pandas.Index.notna.html#pandas.Index.notna "pandas.Index.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.astype`](api/pandas.Index.astype.html#pandas.Index.astype "pandas.Index.astype")(dtype[, copy])
    | Create an Index with values cast to dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.item`](api/pandas.Index.item.html#pandas.Index.item "pandas.Index.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.map`](api/pandas.Index.map.html#pandas.Index.map "pandas.Index.map")(mapper[, na_action])
    | Map values using an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ravel`](api/pandas.Index.ravel.html#pandas.Index.ravel "pandas.Index.ravel")([order])
    | Return a view on self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_list`](api/pandas.Index.to_list.html#pandas.Index.to_list "pandas.Index.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_series`](api/pandas.Index.to_series.html#pandas.Index.to_series
    "pandas.Index.to_series")([index, name]) | Create a Series with both index and
    values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_frame`](api/pandas.Index.to_frame.html#pandas.Index.to_frame "pandas.Index.to_frame")([index, name])
    | Create a DataFrame with a column containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.view`](api/pandas.Index.view.html#pandas.Index.view "pandas.Index.view")([cls])
    |  |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.argsort`](api/pandas.Index.argsort.html#pandas.Index.argsort "pandas.Index.argsort")(*args, **kwargs)
    | Return the integer indices that would sort the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.searchsorted`](api/pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.sort_values`](api/pandas.Index.sort_values.html#pandas.Index.sort_values
    "pandas.Index.sort_values")(*[, return_indexer, ...]) | Return a sorted copy of
    the index. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.shift`](api/pandas.Index.shift.html#pandas.Index.shift "pandas.Index.shift")([periods, freq])
    | Shift index by desired number of time frequency increments. |'
  prefs: []
  type: TYPE_TB
- en: Combining / joining / set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.append`](api/pandas.Index.append.html#pandas.Index.append "pandas.Index.append")(other)
    | Append a collection of Index options together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.join`](api/pandas.Index.join.html#pandas.Index.join "pandas.Index.join")(other, *[, how, level, ...])
    | Compute join_index and indexers to conform data structures to the new index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.intersection`](api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection")(other[, sort]) | Form the intersection of two Index
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.union`](api/pandas.Index.union.html#pandas.Index.union "pandas.Index.union")(other[, sort])
    | Form the union of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.difference`](api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference")(other[, sort]) | Return a new Index with elements of
    index not in other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.symmetric_difference`](api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference")(other[, ...]) | Compute the symmetric difference
    of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.asof`](api/pandas.Index.asof.html#pandas.Index.asof "pandas.Index.asof")(label)
    | Return the label from the index, or, if not present, the previous one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.asof_locs`](api/pandas.Index.asof_locs.html#pandas.Index.asof_locs
    "pandas.Index.asof_locs")(where, mask) | Return the locations (indices) of labels
    in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer`](api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer")(target[, method, limit, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_for`](api/pandas.Index.get_indexer_for.html#pandas.Index.get_indexer_for
    "pandas.Index.get_indexer_for")(target) | Guaranteed return of an indexer even
    when non-unique. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_non_unique`](api/pandas.Index.get_indexer_non_unique.html#pandas.Index.get_indexer_non_unique
    "pandas.Index.get_indexer_non_unique")(target) | Compute indexer and mask for
    new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_level_values`](api/pandas.Index.get_level_values.html#pandas.Index.get_level_values
    "pandas.Index.get_level_values")(level) | Return an Index of values for requested
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_loc`](api/pandas.Index.get_loc.html#pandas.Index.get_loc "pandas.Index.get_loc")(key)
    | Get integer location, slice or boolean mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_slice_bound`](api/pandas.Index.get_slice_bound.html#pandas.Index.get_slice_bound
    "pandas.Index.get_slice_bound")(label, side) | Calculate slice bound that corresponds
    to given label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isin`](api/pandas.Index.isin.html#pandas.Index.isin "pandas.Index.isin")(values[, level])
    | Return a boolean array where the index values are in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_indexer`](api/pandas.Index.slice_indexer.html#pandas.Index.slice_indexer
    "pandas.Index.slice_indexer")([start, end, step]) | Compute the slice indexer
    for input labels and step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_locs`](api/pandas.Index.slice_locs.html#pandas.Index.slice_locs
    "pandas.Index.slice_locs")([start, end, step]) | Compute slice locations for input
    labels. |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.values`](api/pandas.Index.values.html#pandas.Index.values "pandas.Index.values")
    | Return an array representing the data in the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_increasing`](api/pandas.Index.is_monotonic_increasing.html#pandas.Index.is_monotonic_increasing
    "pandas.Index.is_monotonic_increasing") | Return a boolean if the values are equal
    or increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_monotonic_decreasing`](api/pandas.Index.is_monotonic_decreasing.html#pandas.Index.is_monotonic_decreasing
    "pandas.Index.is_monotonic_decreasing") | Return a boolean if the values are equal
    or decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_unique`](api/pandas.Index.is_unique.html#pandas.Index.is_unique
    "pandas.Index.is_unique") | Return if the index has unique values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.has_duplicates`](api/pandas.Index.has_duplicates.html#pandas.Index.has_duplicates
    "pandas.Index.has_duplicates") | Check if the Index has duplicate values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.hasnans`](api/pandas.Index.hasnans.html#pandas.Index.hasnans "pandas.Index.hasnans")
    | Return True if there are any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dtype`](api/pandas.Index.dtype.html#pandas.Index.dtype "pandas.Index.dtype")
    | Return the dtype object of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.inferred_type`](api/pandas.Index.inferred_type.html#pandas.Index.inferred_type
    "pandas.Index.inferred_type") | Return a string of the type inferred from the
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.shape`](api/pandas.Index.shape.html#pandas.Index.shape "pandas.Index.shape")
    | Return a tuple of the shape of the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.name`](api/pandas.Index.name.html#pandas.Index.name "pandas.Index.name")
    | Return Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.names`](api/pandas.Index.names.html#pandas.Index.names "pandas.Index.names")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nbytes`](api/pandas.Index.nbytes.html#pandas.Index.nbytes "pandas.Index.nbytes")
    | Return the number of bytes in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ndim`](api/pandas.Index.ndim.html#pandas.Index.ndim "pandas.Index.ndim")
    | Number of dimensions of the underlying data, by definition 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.size`](api/pandas.Index.size.html#pandas.Index.size "pandas.Index.size")
    | Return the number of elements in the underlying data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.empty`](api/pandas.Index.empty.html#pandas.Index.empty "pandas.Index.empty")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.T`](api/pandas.Index.T.html#pandas.Index.T "pandas.Index.T") | Return
    the transpose, which is by definition self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.memory_usage`](api/pandas.Index.memory_usage.html#pandas.Index.memory_usage
    "pandas.Index.memory_usage")([deep]) | Memory usage of the values. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.all`](api/pandas.Index.all.html#pandas.Index.all "pandas.Index.all")(*args, **kwargs)
    | Return whether all elements are Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.any`](api/pandas.Index.any.html#pandas.Index.any "pandas.Index.any")(*args, **kwargs)
    | Return whether any element is Truthy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmin`](api/pandas.Index.argmin.html#pandas.Index.argmin "pandas.Index.argmin")([axis, skipna])
    | Return int position of the smallest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.argmax`](api/pandas.Index.argmax.html#pandas.Index.argmax "pandas.Index.argmax")([axis, skipna])
    | Return int position of the largest value in the Series. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.copy`](api/pandas.Index.copy.html#pandas.Index.copy "pandas.Index.copy")([name, deep])
    | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.delete`](api/pandas.Index.delete.html#pandas.Index.delete "pandas.Index.delete")(loc)
    | Make new Index with passed location(-s) deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop`](api/pandas.Index.drop.html#pandas.Index.drop "pandas.Index.drop")(labels[, errors])
    | Make new Index with passed list of labels deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.drop_duplicates`](api/pandas.Index.drop_duplicates.html#pandas.Index.drop_duplicates
    "pandas.Index.drop_duplicates")(*[, keep]) | Return Index with duplicate values
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.duplicated`](api/pandas.Index.duplicated.html#pandas.Index.duplicated
    "pandas.Index.duplicated")([keep]) | Indicate duplicate index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.equals`](api/pandas.Index.equals.html#pandas.Index.equals "pandas.Index.equals")(other)
    | Determine if two Index object are equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.factorize`](api/pandas.Index.factorize.html#pandas.Index.factorize
    "pandas.Index.factorize")([sort, use_na_sentinel]) | Encode the object as an enumerated
    type or categorical variable. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.identical`](api/pandas.Index.identical.html#pandas.Index.identical
    "pandas.Index.identical")(other) | Similar to equals, but checks that object attributes
    and types are also equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.insert`](api/pandas.Index.insert.html#pandas.Index.insert "pandas.Index.insert")(loc, item)
    | Make new Index inserting new item at location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_`](api/pandas.Index.is_.html#pandas.Index.is_ "pandas.Index.is_")(other)
    | More flexible, faster check like `is` but that works through views. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_boolean`](api/pandas.Index.is_boolean.html#pandas.Index.is_boolean
    "pandas.Index.is_boolean")() | (DEPRECATED) Check if the Index only consists of
    booleans. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_categorical`](api/pandas.Index.is_categorical.html#pandas.Index.is_categorical
    "pandas.Index.is_categorical")() | (DEPRECATED) Check if the Index holds categorical
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_floating`](api/pandas.Index.is_floating.html#pandas.Index.is_floating
    "pandas.Index.is_floating")() | (DEPRECATED) Check if the Index is a floating
    type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_integer`](api/pandas.Index.is_integer.html#pandas.Index.is_integer
    "pandas.Index.is_integer")() | (DEPRECATED) Check if the Index only consists of
    integers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_interval`](api/pandas.Index.is_interval.html#pandas.Index.is_interval
    "pandas.Index.is_interval")() | (DEPRECATED) Check if the Index holds Interval
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_numeric`](api/pandas.Index.is_numeric.html#pandas.Index.is_numeric
    "pandas.Index.is_numeric")() | (DEPRECATED) Check if the Index only consists of
    numeric data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.is_object`](api/pandas.Index.is_object.html#pandas.Index.is_object
    "pandas.Index.is_object")() | (DEPRECATED) Check if the Index is of the object
    dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.min`](api/pandas.Index.min.html#pandas.Index.min "pandas.Index.min")([axis, skipna])
    | Return the minimum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.max`](api/pandas.Index.max.html#pandas.Index.max "pandas.Index.max")([axis, skipna])
    | Return the maximum value of the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.reindex`](api/pandas.Index.reindex.html#pandas.Index.reindex "pandas.Index.reindex")(target[, method, level, ...])
    | Create index with target''s values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.rename`](api/pandas.Index.rename.html#pandas.Index.rename "pandas.Index.rename")(name, *[, inplace])
    | Alter Index or MultiIndex name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.repeat`](api/pandas.Index.repeat.html#pandas.Index.repeat "pandas.Index.repeat")(repeats[, axis])
    | Repeat elements of a Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.where`](api/pandas.Index.where.html#pandas.Index.where "pandas.Index.where")(cond[, other])
    | Replace values where the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.take`](api/pandas.Index.take.html#pandas.Index.take "pandas.Index.take")(indices[, axis, allow_fill, ...])
    | Return a new Index of the values selected by the indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.putmask`](api/pandas.Index.putmask.html#pandas.Index.putmask "pandas.Index.putmask")(mask, value)
    | Return a new Index of the values set with the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.unique`](api/pandas.Index.unique.html#pandas.Index.unique "pandas.Index.unique")([level])
    | Return unique values in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.nunique`](api/pandas.Index.nunique.html#pandas.Index.nunique "pandas.Index.nunique")([dropna])
    | Return number of unique elements in the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.value_counts`](api/pandas.Index.value_counts.html#pandas.Index.value_counts
    "pandas.Index.value_counts")([normalize, sort, ...]) | Return a Series containing
    counts of unique values. |'
  prefs: []
  type: TYPE_TB
- en: Compatibility with MultiIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.set_names`](api/pandas.Index.set_names.html#pandas.Index.set_names
    "pandas.Index.set_names")(names, *[, level, inplace]) | Set Index or MultiIndex
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.droplevel`](api/pandas.Index.droplevel.html#pandas.Index.droplevel
    "pandas.Index.droplevel")([level]) | Return index with requested level(s) removed.
    |'
  prefs: []
  type: TYPE_TB
- en: Missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.fillna`](api/pandas.Index.fillna.html#pandas.Index.fillna "pandas.Index.fillna")([value, downcast])
    | Fill NA/NaN values with the specified value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.dropna`](api/pandas.Index.dropna.html#pandas.Index.dropna "pandas.Index.dropna")([how])
    | Return Index without NA/NaN values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isna`](api/pandas.Index.isna.html#pandas.Index.isna "pandas.Index.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.notna`](api/pandas.Index.notna.html#pandas.Index.notna "pandas.Index.notna")()
    | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.astype`](api/pandas.Index.astype.html#pandas.Index.astype "pandas.Index.astype")(dtype[, copy])
    | Create an Index with values cast to dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.item`](api/pandas.Index.item.html#pandas.Index.item "pandas.Index.item")()
    | Return the first element of the underlying data as a Python scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.map`](api/pandas.Index.map.html#pandas.Index.map "pandas.Index.map")(mapper[, na_action])
    | Map values using an input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.ravel`](api/pandas.Index.ravel.html#pandas.Index.ravel "pandas.Index.ravel")([order])
    | Return a view on self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_list`](api/pandas.Index.to_list.html#pandas.Index.to_list "pandas.Index.to_list")()
    | Return a list of the values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_series`](api/pandas.Index.to_series.html#pandas.Index.to_series
    "pandas.Index.to_series")([index, name]) | Create a Series with both index and
    values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.to_frame`](api/pandas.Index.to_frame.html#pandas.Index.to_frame "pandas.Index.to_frame")([index, name])
    | Create a DataFrame with a column containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.view`](api/pandas.Index.view.html#pandas.Index.view "pandas.Index.view")([cls])
    |  |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.argsort`](api/pandas.Index.argsort.html#pandas.Index.argsort "pandas.Index.argsort")(*args, **kwargs)
    | Return the integer indices that would sort the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.searchsorted`](api/pandas.Index.searchsorted.html#pandas.Index.searchsorted
    "pandas.Index.searchsorted")(value[, side, sorter]) | Find indices where elements
    should be inserted to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.sort_values`](api/pandas.Index.sort_values.html#pandas.Index.sort_values
    "pandas.Index.sort_values")(*[, return_indexer, ...]) | Return a sorted copy of
    the index. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.shift`](api/pandas.Index.shift.html#pandas.Index.shift "pandas.Index.shift")([periods, freq])
    | Shift index by desired number of time frequency increments. |'
  prefs: []
  type: TYPE_TB
- en: Combining / joining / set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.append`](api/pandas.Index.append.html#pandas.Index.append "pandas.Index.append")(other)
    | Append a collection of Index options together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.join`](api/pandas.Index.join.html#pandas.Index.join "pandas.Index.join")(other, *[, how, level, ...])
    | Compute join_index and indexers to conform data structures to the new index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.intersection`](api/pandas.Index.intersection.html#pandas.Index.intersection
    "pandas.Index.intersection")(other[, sort]) | Form the intersection of two Index
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.union`](api/pandas.Index.union.html#pandas.Index.union "pandas.Index.union")(other[, sort])
    | Form the union of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.difference`](api/pandas.Index.difference.html#pandas.Index.difference
    "pandas.Index.difference")(other[, sort]) | Return a new Index with elements of
    index not in other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.symmetric_difference`](api/pandas.Index.symmetric_difference.html#pandas.Index.symmetric_difference
    "pandas.Index.symmetric_difference")(other[, ...]) | Compute the symmetric difference
    of two Index objects. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`Index.asof`](api/pandas.Index.asof.html#pandas.Index.asof "pandas.Index.asof")(label)
    | Return the label from the index, or, if not present, the previous one. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.asof_locs`](api/pandas.Index.asof_locs.html#pandas.Index.asof_locs
    "pandas.Index.asof_locs")(where, mask) | Return the locations (indices) of labels
    in the index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer`](api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer")(target[, method, limit, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_for`](api/pandas.Index.get_indexer_for.html#pandas.Index.get_indexer_for
    "pandas.Index.get_indexer_for")(target) | Guaranteed return of an indexer even
    when non-unique. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_indexer_non_unique`](api/pandas.Index.get_indexer_non_unique.html#pandas.Index.get_indexer_non_unique
    "pandas.Index.get_indexer_non_unique")(target) | Compute indexer and mask for
    new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_level_values`](api/pandas.Index.get_level_values.html#pandas.Index.get_level_values
    "pandas.Index.get_level_values")(level) | Return an Index of values for requested
    level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_loc`](api/pandas.Index.get_loc.html#pandas.Index.get_loc "pandas.Index.get_loc")(key)
    | Get integer location, slice or boolean mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.get_slice_bound`](api/pandas.Index.get_slice_bound.html#pandas.Index.get_slice_bound
    "pandas.Index.get_slice_bound")(label, side) | Calculate slice bound that corresponds
    to given label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.isin`](api/pandas.Index.isin.html#pandas.Index.isin "pandas.Index.isin")(values[, level])
    | Return a boolean array where the index values are in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_indexer`](api/pandas.Index.slice_indexer.html#pandas.Index.slice_indexer
    "pandas.Index.slice_indexer")([start, end, step]) | Compute the slice indexer
    for input labels and step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Index.slice_locs`](api/pandas.Index.slice_locs.html#pandas.Index.slice_locs
    "pandas.Index.slice_locs")([start, end, step]) | Compute slice locations for input
    labels. |'
  prefs: []
  type: TYPE_TB
- en: '## Numeric Index'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`RangeIndex`](api/pandas.RangeIndex.html#pandas.RangeIndex "pandas.RangeIndex")([start, stop, step, dtype, copy, ...])
    | Immutable Index implementing a monotonic integer range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.start`](api/pandas.RangeIndex.start.html#pandas.RangeIndex.start
    "pandas.RangeIndex.start") | The value of the start parameter (`0` if this was
    not supplied). |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.stop`](api/pandas.RangeIndex.stop.html#pandas.RangeIndex.stop
    "pandas.RangeIndex.stop") | The value of the stop parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.step`](api/pandas.RangeIndex.step.html#pandas.RangeIndex.step
    "pandas.RangeIndex.step") | The value of the step parameter (`1` if this was not
    supplied). |'
  prefs: []
  type: TYPE_TB
- en: '| [`RangeIndex.from_range`](api/pandas.RangeIndex.from_range.html#pandas.RangeIndex.from_range
    "pandas.RangeIndex.from_range")(data[, name, dtype]) | Create [`pandas.RangeIndex`](api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex") from a `range` object. |'
  prefs: []
  type: TYPE_TB
- en: '## CategoricalIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex`](api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex")([data, categories, ...]) | Index based on an underlying
    [`Categorical`](api/pandas.Categorical.html#pandas.Categorical "pandas.Categorical").
    |'
  prefs: []
  type: TYPE_TB
- en: Categorical components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.codes`](api/pandas.CategoricalIndex.codes.html#pandas.CategoricalIndex.codes
    "pandas.CategoricalIndex.codes") | The category codes of this categorical index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.categories`](api/pandas.CategoricalIndex.categories.html#pandas.CategoricalIndex.categories
    "pandas.CategoricalIndex.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.ordered`](api/pandas.CategoricalIndex.ordered.html#pandas.CategoricalIndex.ordered
    "pandas.CategoricalIndex.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.rename_categories`](api/pandas.CategoricalIndex.rename_categories.html#pandas.CategoricalIndex.rename_categories
    "pandas.CategoricalIndex.rename_categories")(*args, ...) | Rename categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.reorder_categories`](api/pandas.CategoricalIndex.reorder_categories.html#pandas.CategoricalIndex.reorder_categories
    "pandas.CategoricalIndex.reorder_categories")(*args, ...) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.add_categories`](api/pandas.CategoricalIndex.add_categories.html#pandas.CategoricalIndex.add_categories
    "pandas.CategoricalIndex.add_categories")(*args, **kwargs) | Add new categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_categories`](api/pandas.CategoricalIndex.remove_categories.html#pandas.CategoricalIndex.remove_categories
    "pandas.CategoricalIndex.remove_categories")(*args, ...) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_unused_categories`](api/pandas.CategoricalIndex.remove_unused_categories.html#pandas.CategoricalIndex.remove_unused_categories
    "pandas.CategoricalIndex.remove_unused_categories")(...) | Remove categories which
    are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.set_categories`](api/pandas.CategoricalIndex.set_categories.html#pandas.CategoricalIndex.set_categories
    "pandas.CategoricalIndex.set_categories")(*args, **kwargs) | Set the categories
    to the specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_ordered`](api/pandas.CategoricalIndex.as_ordered.html#pandas.CategoricalIndex.as_ordered
    "pandas.CategoricalIndex.as_ordered")(*args, **kwargs) | Set the Categorical to
    be ordered. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_unordered`](api/pandas.CategoricalIndex.as_unordered.html#pandas.CategoricalIndex.as_unordered
    "pandas.CategoricalIndex.as_unordered")(*args, **kwargs) | Set the Categorical
    to be unordered. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.map`](api/pandas.CategoricalIndex.map.html#pandas.CategoricalIndex.map
    "pandas.CategoricalIndex.map")(mapper[, na_action]) | Map values using input an
    input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.equals`](api/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals
    "pandas.CategoricalIndex.equals")(other) | Determine if two CategoricalIndex objects
    contain the same elements. |'
  prefs: []
  type: TYPE_TB
- en: Categorical components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.codes`](api/pandas.CategoricalIndex.codes.html#pandas.CategoricalIndex.codes
    "pandas.CategoricalIndex.codes") | The category codes of this categorical index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.categories`](api/pandas.CategoricalIndex.categories.html#pandas.CategoricalIndex.categories
    "pandas.CategoricalIndex.categories") | The categories of this categorical. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.ordered`](api/pandas.CategoricalIndex.ordered.html#pandas.CategoricalIndex.ordered
    "pandas.CategoricalIndex.ordered") | Whether the categories have an ordered relationship.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.rename_categories`](api/pandas.CategoricalIndex.rename_categories.html#pandas.CategoricalIndex.rename_categories
    "pandas.CategoricalIndex.rename_categories")(*args, ...) | Rename categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.reorder_categories`](api/pandas.CategoricalIndex.reorder_categories.html#pandas.CategoricalIndex.reorder_categories
    "pandas.CategoricalIndex.reorder_categories")(*args, ...) | Reorder categories
    as specified in new_categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.add_categories`](api/pandas.CategoricalIndex.add_categories.html#pandas.CategoricalIndex.add_categories
    "pandas.CategoricalIndex.add_categories")(*args, **kwargs) | Add new categories.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_categories`](api/pandas.CategoricalIndex.remove_categories.html#pandas.CategoricalIndex.remove_categories
    "pandas.CategoricalIndex.remove_categories")(*args, ...) | Remove the specified
    categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.remove_unused_categories`](api/pandas.CategoricalIndex.remove_unused_categories.html#pandas.CategoricalIndex.remove_unused_categories
    "pandas.CategoricalIndex.remove_unused_categories")(...) | Remove categories which
    are not used. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.set_categories`](api/pandas.CategoricalIndex.set_categories.html#pandas.CategoricalIndex.set_categories
    "pandas.CategoricalIndex.set_categories")(*args, **kwargs) | Set the categories
    to the specified new categories. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_ordered`](api/pandas.CategoricalIndex.as_ordered.html#pandas.CategoricalIndex.as_ordered
    "pandas.CategoricalIndex.as_ordered")(*args, **kwargs) | Set the Categorical to
    be ordered. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.as_unordered`](api/pandas.CategoricalIndex.as_unordered.html#pandas.CategoricalIndex.as_unordered
    "pandas.CategoricalIndex.as_unordered")(*args, **kwargs) | Set the Categorical
    to be unordered. |'
  prefs: []
  type: TYPE_TB
- en: Modifying and computations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`CategoricalIndex.map`](api/pandas.CategoricalIndex.map.html#pandas.CategoricalIndex.map
    "pandas.CategoricalIndex.map")(mapper[, na_action]) | Map values using input an
    input mapping or function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CategoricalIndex.equals`](api/pandas.CategoricalIndex.equals.html#pandas.CategoricalIndex.equals
    "pandas.CategoricalIndex.equals")(other) | Determine if two CategoricalIndex objects
    contain the same elements. |'
  prefs: []
  type: TYPE_TB
- en: '## IntervalIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`IntervalIndex`](api/pandas.IntervalIndex.html#pandas.IntervalIndex "pandas.IntervalIndex")(data[, closed, dtype, copy, ...])
    | Immutable index of intervals that are closed on the same side. |'
  prefs: []
  type: TYPE_TB
- en: IntervalIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`IntervalIndex.from_arrays`](api/pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays
    "pandas.IntervalIndex.from_arrays")(left, right[, ...]) | Construct from two arrays
    defining the left and right bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_tuples`](api/pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples
    "pandas.IntervalIndex.from_tuples")(data[, closed, ...]) | Construct an IntervalIndex
    from an array-like of tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_breaks`](api/pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks
    "pandas.IntervalIndex.from_breaks")(breaks[, closed, ...]) | Construct an IntervalIndex
    from an array of splits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.left`](api/pandas.IntervalIndex.left.html#pandas.IntervalIndex.left
    "pandas.IntervalIndex.left") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.right`](api/pandas.IntervalIndex.right.html#pandas.IntervalIndex.right
    "pandas.IntervalIndex.right") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.mid`](api/pandas.IntervalIndex.mid.html#pandas.IntervalIndex.mid
    "pandas.IntervalIndex.mid") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.closed`](api/pandas.IntervalIndex.closed.html#pandas.IntervalIndex.closed
    "pandas.IntervalIndex.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.length`](api/pandas.IntervalIndex.length.html#pandas.IntervalIndex.length
    "pandas.IntervalIndex.length") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.values`](api/pandas.IntervalIndex.values.html#pandas.IntervalIndex.values
    "pandas.IntervalIndex.values") | Return an array representing the data in the
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_empty`](api/pandas.IntervalIndex.is_empty.html#pandas.IntervalIndex.is_empty
    "pandas.IntervalIndex.is_empty") | Indicates if an interval is empty, meaning
    it contains no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_non_overlapping_monotonic`](api/pandas.IntervalIndex.is_non_overlapping_monotonic.html#pandas.IntervalIndex.is_non_overlapping_monotonic
    "pandas.IntervalIndex.is_non_overlapping_monotonic") | Return a boolean whether
    the IntervalArray is non-overlapping and monotonic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_overlapping`](api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") | Return True if the IntervalIndex has
    overlapping intervals, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_loc`](api/pandas.IntervalIndex.get_loc.html#pandas.IntervalIndex.get_loc
    "pandas.IntervalIndex.get_loc")(key) | Get integer location, slice or boolean
    mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_indexer`](api/pandas.IntervalIndex.get_indexer.html#pandas.IntervalIndex.get_indexer
    "pandas.IntervalIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.set_closed`](api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed")(*args, **kwargs) | Return an identical IntervalArray
    closed on the specified side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.contains`](api/pandas.IntervalIndex.contains.html#pandas.IntervalIndex.contains
    "pandas.IntervalIndex.contains")(*args, **kwargs) | Check elementwise if the Intervals
    contain the value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.overlaps`](api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps")(*args, **kwargs) | Check elementwise if an Interval
    overlaps the values in the IntervalArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.to_tuples`](api/pandas.IntervalIndex.to_tuples.html#pandas.IntervalIndex.to_tuples
    "pandas.IntervalIndex.to_tuples")(*args, **kwargs) | Return an ndarray (if self
    is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left,
    right). |'
  prefs: []
  type: TYPE_TB
- en: IntervalIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`IntervalIndex.from_arrays`](api/pandas.IntervalIndex.from_arrays.html#pandas.IntervalIndex.from_arrays
    "pandas.IntervalIndex.from_arrays")(left, right[, ...]) | Construct from two arrays
    defining the left and right bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_tuples`](api/pandas.IntervalIndex.from_tuples.html#pandas.IntervalIndex.from_tuples
    "pandas.IntervalIndex.from_tuples")(data[, closed, ...]) | Construct an IntervalIndex
    from an array-like of tuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.from_breaks`](api/pandas.IntervalIndex.from_breaks.html#pandas.IntervalIndex.from_breaks
    "pandas.IntervalIndex.from_breaks")(breaks[, closed, ...]) | Construct an IntervalIndex
    from an array of splits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.left`](api/pandas.IntervalIndex.left.html#pandas.IntervalIndex.left
    "pandas.IntervalIndex.left") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.right`](api/pandas.IntervalIndex.right.html#pandas.IntervalIndex.right
    "pandas.IntervalIndex.right") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.mid`](api/pandas.IntervalIndex.mid.html#pandas.IntervalIndex.mid
    "pandas.IntervalIndex.mid") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.closed`](api/pandas.IntervalIndex.closed.html#pandas.IntervalIndex.closed
    "pandas.IntervalIndex.closed") | String describing the inclusive side the intervals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.length`](api/pandas.IntervalIndex.length.html#pandas.IntervalIndex.length
    "pandas.IntervalIndex.length") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.values`](api/pandas.IntervalIndex.values.html#pandas.IntervalIndex.values
    "pandas.IntervalIndex.values") | Return an array representing the data in the
    Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_empty`](api/pandas.IntervalIndex.is_empty.html#pandas.IntervalIndex.is_empty
    "pandas.IntervalIndex.is_empty") | Indicates if an interval is empty, meaning
    it contains no points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_non_overlapping_monotonic`](api/pandas.IntervalIndex.is_non_overlapping_monotonic.html#pandas.IntervalIndex.is_non_overlapping_monotonic
    "pandas.IntervalIndex.is_non_overlapping_monotonic") | Return a boolean whether
    the IntervalArray is non-overlapping and monotonic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.is_overlapping`](api/pandas.IntervalIndex.is_overlapping.html#pandas.IntervalIndex.is_overlapping
    "pandas.IntervalIndex.is_overlapping") | Return True if the IntervalIndex has
    overlapping intervals, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_loc`](api/pandas.IntervalIndex.get_loc.html#pandas.IntervalIndex.get_loc
    "pandas.IntervalIndex.get_loc")(key) | Get integer location, slice or boolean
    mask for requested label. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.get_indexer`](api/pandas.IntervalIndex.get_indexer.html#pandas.IntervalIndex.get_indexer
    "pandas.IntervalIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.set_closed`](api/pandas.IntervalIndex.set_closed.html#pandas.IntervalIndex.set_closed
    "pandas.IntervalIndex.set_closed")(*args, **kwargs) | Return an identical IntervalArray
    closed on the specified side. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.contains`](api/pandas.IntervalIndex.contains.html#pandas.IntervalIndex.contains
    "pandas.IntervalIndex.contains")(*args, **kwargs) | Check elementwise if the Intervals
    contain the value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.overlaps`](api/pandas.IntervalIndex.overlaps.html#pandas.IntervalIndex.overlaps
    "pandas.IntervalIndex.overlaps")(*args, **kwargs) | Check elementwise if an Interval
    overlaps the values in the IntervalArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IntervalIndex.to_tuples`](api/pandas.IntervalIndex.to_tuples.html#pandas.IntervalIndex.to_tuples
    "pandas.IntervalIndex.to_tuples")(*args, **kwargs) | Return an ndarray (if self
    is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left,
    right). |'
  prefs: []
  type: TYPE_TB
- en: '## MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex "pandas.MultiIndex")([levels, codes, sortorder, ...])
    | A multi-level, or hierarchical, index object for pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.from_arrays`](api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays")(arrays[, sortorder, ...]) | Convert arrays to
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_tuples`](api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples")(tuples[, sortorder, ...]) | Convert list of tuples
    to MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_product`](api/pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product")(iterables[, ...]) | Make a MultiIndex from the
    cartesian product of multiple iterables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_frame`](api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame")(df[, sortorder, names]) | Make a MultiIndex from
    a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.names`](api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") | Names of levels in MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levels`](api/pandas.MultiIndex.levels.html#pandas.MultiIndex.levels
    "pandas.MultiIndex.levels") | Levels of the MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.codes`](api/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes
    "pandas.MultiIndex.codes") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.nlevels`](api/pandas.MultiIndex.nlevels.html#pandas.MultiIndex.nlevels
    "pandas.MultiIndex.nlevels") | Integer number of levels in this MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levshape`](api/pandas.MultiIndex.levshape.html#pandas.MultiIndex.levshape
    "pandas.MultiIndex.levshape") | A tuple with the length of each level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.dtypes`](api/pandas.MultiIndex.dtypes.html#pandas.MultiIndex.dtypes
    "pandas.MultiIndex.dtypes") | Return the dtypes as a Series for the underlying
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.set_levels`](api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels")(levels, *[, level, ...]) | Set new levels on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.set_codes`](api/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes")(codes, *[, level, ...]) | Set new codes on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_flat_index`](api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index")() | Convert a MultiIndex to an Index of Tuples
    containing the level values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_frame`](api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame")([index, name, ...]) | Create a DataFrame with the
    levels of the MultiIndex as columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.sortlevel`](api/pandas.MultiIndex.sortlevel.html#pandas.MultiIndex.sortlevel
    "pandas.MultiIndex.sortlevel")([level, ascending, ...]) | Sort MultiIndex at the
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.droplevel`](api/pandas.MultiIndex.droplevel.html#pandas.MultiIndex.droplevel
    "pandas.MultiIndex.droplevel")([level]) | Return index with requested level(s)
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.swaplevel`](api/pandas.MultiIndex.swaplevel.html#pandas.MultiIndex.swaplevel
    "pandas.MultiIndex.swaplevel")([i, j]) | Swap level i with level j. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.reorder_levels`](api/pandas.MultiIndex.reorder_levels.html#pandas.MultiIndex.reorder_levels
    "pandas.MultiIndex.reorder_levels")(order) | Rearrange levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.remove_unused_levels`](api/pandas.MultiIndex.remove_unused_levels.html#pandas.MultiIndex.remove_unused_levels
    "pandas.MultiIndex.remove_unused_levels")() | Create new MultiIndex from current
    that removes unused levels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.drop`](api/pandas.MultiIndex.drop.html#pandas.MultiIndex.drop
    "pandas.MultiIndex.drop")(codes[, level, errors]) | Make a new [`pandas.MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with the passed list of codes deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.copy`](api/pandas.MultiIndex.copy.html#pandas.MultiIndex.copy
    "pandas.MultiIndex.copy")([names, deep, name]) | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.append`](api/pandas.MultiIndex.append.html#pandas.MultiIndex.append
    "pandas.MultiIndex.append")(other) | Append a collection of Index options together.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.truncate`](api/pandas.MultiIndex.truncate.html#pandas.MultiIndex.truncate
    "pandas.MultiIndex.truncate")([before, after]) | Slice index between two labels
    / tuples, return new MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.get_loc`](api/pandas.MultiIndex.get_loc.html#pandas.MultiIndex.get_loc
    "pandas.MultiIndex.get_loc")(key) | Get location for a label or a tuple of labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_locs`](api/pandas.MultiIndex.get_locs.html#pandas.MultiIndex.get_locs
    "pandas.MultiIndex.get_locs")(seq) | Get location for a sequence of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_loc_level`](api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level")(key[, level, ...]) | Get location and sliced
    index for requested label(s)/level(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_indexer`](api/pandas.MultiIndex.get_indexer.html#pandas.MultiIndex.get_indexer
    "pandas.MultiIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_level_values`](api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")(level) | Return vector of label values for
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IndexSlice`](api/pandas.IndexSlice.html#pandas.IndexSlice "pandas.IndexSlice")
    | Create an object to more easily perform multi-index slicing. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex constructors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.from_arrays`](api/pandas.MultiIndex.from_arrays.html#pandas.MultiIndex.from_arrays
    "pandas.MultiIndex.from_arrays")(arrays[, sortorder, ...]) | Convert arrays to
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_tuples`](api/pandas.MultiIndex.from_tuples.html#pandas.MultiIndex.from_tuples
    "pandas.MultiIndex.from_tuples")(tuples[, sortorder, ...]) | Convert list of tuples
    to MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_product`](api/pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product
    "pandas.MultiIndex.from_product")(iterables[, ...]) | Make a MultiIndex from the
    cartesian product of multiple iterables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.from_frame`](api/pandas.MultiIndex.from_frame.html#pandas.MultiIndex.from_frame
    "pandas.MultiIndex.from_frame")(df[, sortorder, names]) | Make a MultiIndex from
    a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.names`](api/pandas.MultiIndex.names.html#pandas.MultiIndex.names
    "pandas.MultiIndex.names") | Names of levels in MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levels`](api/pandas.MultiIndex.levels.html#pandas.MultiIndex.levels
    "pandas.MultiIndex.levels") | Levels of the MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.codes`](api/pandas.MultiIndex.codes.html#pandas.MultiIndex.codes
    "pandas.MultiIndex.codes") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.nlevels`](api/pandas.MultiIndex.nlevels.html#pandas.MultiIndex.nlevels
    "pandas.MultiIndex.nlevels") | Integer number of levels in this MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.levshape`](api/pandas.MultiIndex.levshape.html#pandas.MultiIndex.levshape
    "pandas.MultiIndex.levshape") | A tuple with the length of each level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.dtypes`](api/pandas.MultiIndex.dtypes.html#pandas.MultiIndex.dtypes
    "pandas.MultiIndex.dtypes") | Return the dtypes as a Series for the underlying
    MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.set_levels`](api/pandas.MultiIndex.set_levels.html#pandas.MultiIndex.set_levels
    "pandas.MultiIndex.set_levels")(levels, *[, level, ...]) | Set new levels on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.set_codes`](api/pandas.MultiIndex.set_codes.html#pandas.MultiIndex.set_codes
    "pandas.MultiIndex.set_codes")(codes, *[, level, ...]) | Set new codes on MultiIndex.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_flat_index`](api/pandas.MultiIndex.to_flat_index.html#pandas.MultiIndex.to_flat_index
    "pandas.MultiIndex.to_flat_index")() | Convert a MultiIndex to an Index of Tuples
    containing the level values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.to_frame`](api/pandas.MultiIndex.to_frame.html#pandas.MultiIndex.to_frame
    "pandas.MultiIndex.to_frame")([index, name, ...]) | Create a DataFrame with the
    levels of the MultiIndex as columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.sortlevel`](api/pandas.MultiIndex.sortlevel.html#pandas.MultiIndex.sortlevel
    "pandas.MultiIndex.sortlevel")([level, ascending, ...]) | Sort MultiIndex at the
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.droplevel`](api/pandas.MultiIndex.droplevel.html#pandas.MultiIndex.droplevel
    "pandas.MultiIndex.droplevel")([level]) | Return index with requested level(s)
    removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.swaplevel`](api/pandas.MultiIndex.swaplevel.html#pandas.MultiIndex.swaplevel
    "pandas.MultiIndex.swaplevel")([i, j]) | Swap level i with level j. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.reorder_levels`](api/pandas.MultiIndex.reorder_levels.html#pandas.MultiIndex.reorder_levels
    "pandas.MultiIndex.reorder_levels")(order) | Rearrange levels using input order.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.remove_unused_levels`](api/pandas.MultiIndex.remove_unused_levels.html#pandas.MultiIndex.remove_unused_levels
    "pandas.MultiIndex.remove_unused_levels")() | Create new MultiIndex from current
    that removes unused levels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.drop`](api/pandas.MultiIndex.drop.html#pandas.MultiIndex.drop
    "pandas.MultiIndex.drop")(codes[, level, errors]) | Make a new [`pandas.MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") with the passed list of codes deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.copy`](api/pandas.MultiIndex.copy.html#pandas.MultiIndex.copy
    "pandas.MultiIndex.copy")([names, deep, name]) | Make a copy of this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.append`](api/pandas.MultiIndex.append.html#pandas.MultiIndex.append
    "pandas.MultiIndex.append")(other) | Append a collection of Index options together.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.truncate`](api/pandas.MultiIndex.truncate.html#pandas.MultiIndex.truncate
    "pandas.MultiIndex.truncate")([before, after]) | Slice index between two labels
    / tuples, return new MultiIndex. |'
  prefs: []
  type: TYPE_TB
- en: MultiIndex selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`MultiIndex.get_loc`](api/pandas.MultiIndex.get_loc.html#pandas.MultiIndex.get_loc
    "pandas.MultiIndex.get_loc")(key) | Get location for a label or a tuple of labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_locs`](api/pandas.MultiIndex.get_locs.html#pandas.MultiIndex.get_locs
    "pandas.MultiIndex.get_locs")(seq) | Get location for a sequence of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_loc_level`](api/pandas.MultiIndex.get_loc_level.html#pandas.MultiIndex.get_loc_level
    "pandas.MultiIndex.get_loc_level")(key[, level, ...]) | Get location and sliced
    index for requested label(s)/level(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_indexer`](api/pandas.MultiIndex.get_indexer.html#pandas.MultiIndex.get_indexer
    "pandas.MultiIndex.get_indexer")(target[, method, ...]) | Compute indexer and
    mask for new index given the current index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MultiIndex.get_level_values`](api/pandas.MultiIndex.get_level_values.html#pandas.MultiIndex.get_level_values
    "pandas.MultiIndex.get_level_values")(level) | Return vector of label values for
    requested level. |'
  prefs: []
  type: TYPE_TB
- en: '| [`IndexSlice`](api/pandas.IndexSlice.html#pandas.IndexSlice "pandas.IndexSlice")
    | Create an object to more easily perform multi-index slicing. |'
  prefs: []
  type: TYPE_TB
- en: '## DatetimeIndex'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex`](api/pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex")([data, freq, tz, normalize, ...])
    | Immutable ndarray-like of datetime64 data. |'
  prefs: []
  type: TYPE_TB
- en: Time/date components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.year`](api/pandas.DatetimeIndex.year.html#pandas.DatetimeIndex.year
    "pandas.DatetimeIndex.year") | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month`](api/pandas.DatetimeIndex.month.html#pandas.DatetimeIndex.month
    "pandas.DatetimeIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day`](api/pandas.DatetimeIndex.day.html#pandas.DatetimeIndex.day
    "pandas.DatetimeIndex.day") | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.hour`](api/pandas.DatetimeIndex.hour.html#pandas.DatetimeIndex.hour
    "pandas.DatetimeIndex.hour") | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.minute`](api/pandas.DatetimeIndex.minute.html#pandas.DatetimeIndex.minute
    "pandas.DatetimeIndex.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.second`](api/pandas.DatetimeIndex.second.html#pandas.DatetimeIndex.second
    "pandas.DatetimeIndex.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.microsecond`](api/pandas.DatetimeIndex.microsecond.html#pandas.DatetimeIndex.microsecond
    "pandas.DatetimeIndex.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.nanosecond`](api/pandas.DatetimeIndex.nanosecond.html#pandas.DatetimeIndex.nanosecond
    "pandas.DatetimeIndex.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.date`](api/pandas.DatetimeIndex.date.html#pandas.DatetimeIndex.date
    "pandas.DatetimeIndex.date") | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.time`](api/pandas.DatetimeIndex.time.html#pandas.DatetimeIndex.time
    "pandas.DatetimeIndex.time") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.timetz`](api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofyear`](api/pandas.DatetimeIndex.dayofyear.html#pandas.DatetimeIndex.dayofyear
    "pandas.DatetimeIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_year`](api/pandas.DatetimeIndex.day_of_year.html#pandas.DatetimeIndex.day_of_year
    "pandas.DatetimeIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofweek`](api/pandas.DatetimeIndex.dayofweek.html#pandas.DatetimeIndex.dayofweek
    "pandas.DatetimeIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_week`](api/pandas.DatetimeIndex.day_of_week.html#pandas.DatetimeIndex.day_of_week
    "pandas.DatetimeIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.weekday`](api/pandas.DatetimeIndex.weekday.html#pandas.DatetimeIndex.weekday
    "pandas.DatetimeIndex.weekday") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.quarter`](api/pandas.DatetimeIndex.quarter.html#pandas.DatetimeIndex.quarter
    "pandas.DatetimeIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz`](api/pandas.DatetimeIndex.tz.html#pandas.DatetimeIndex.tz
    "pandas.DatetimeIndex.tz") | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freq`](api/pandas.DatetimeIndex.freq.html#pandas.DatetimeIndex.freq
    "pandas.DatetimeIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freqstr`](api/pandas.DatetimeIndex.freqstr.html#pandas.DatetimeIndex.freqstr
    "pandas.DatetimeIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_start`](api/pandas.DatetimeIndex.is_month_start.html#pandas.DatetimeIndex.is_month_start
    "pandas.DatetimeIndex.is_month_start") | Indicates whether the date is the first
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_end`](api/pandas.DatetimeIndex.is_month_end.html#pandas.DatetimeIndex.is_month_end
    "pandas.DatetimeIndex.is_month_end") | Indicates whether the date is the last
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_start`](api/pandas.DatetimeIndex.is_quarter_start.html#pandas.DatetimeIndex.is_quarter_start
    "pandas.DatetimeIndex.is_quarter_start") | Indicator for whether the date is the
    first day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_end`](api/pandas.DatetimeIndex.is_quarter_end.html#pandas.DatetimeIndex.is_quarter_end
    "pandas.DatetimeIndex.is_quarter_end") | Indicator for whether the date is the
    last day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_start`](api/pandas.DatetimeIndex.is_year_start.html#pandas.DatetimeIndex.is_year_start
    "pandas.DatetimeIndex.is_year_start") | Indicate whether the date is the first
    day of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_end`](api/pandas.DatetimeIndex.is_year_end.html#pandas.DatetimeIndex.is_year_end
    "pandas.DatetimeIndex.is_year_end") | Indicate whether the date is the last day
    of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_leap_year`](api/pandas.DatetimeIndex.is_leap_year.html#pandas.DatetimeIndex.is_leap_year
    "pandas.DatetimeIndex.is_leap_year") | Boolean indicator if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.inferred_freq`](api/pandas.DatetimeIndex.inferred_freq.html#pandas.DatetimeIndex.inferred_freq
    "pandas.DatetimeIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.indexer_at_time`](api/pandas.DatetimeIndex.indexer_at_time.html#pandas.DatetimeIndex.indexer_at_time
    "pandas.DatetimeIndex.indexer_at_time")(time[, asof]) | Return index locations
    of values at particular time of day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.indexer_between_time`](api/pandas.DatetimeIndex.indexer_between_time.html#pandas.DatetimeIndex.indexer_between_time
    "pandas.DatetimeIndex.indexer_between_time")(...[, ...]) | Return index locations
    of values between particular times of day. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.normalize`](api/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize
    "pandas.DatetimeIndex.normalize")(*args, **kwargs) | Convert times to midnight.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.strftime`](api/pandas.DatetimeIndex.strftime.html#pandas.DatetimeIndex.strftime
    "pandas.DatetimeIndex.strftime")(date_format) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.snap`](api/pandas.DatetimeIndex.snap.html#pandas.DatetimeIndex.snap
    "pandas.DatetimeIndex.snap")([freq]) | Snap time stamps to nearest occurring frequency.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_convert`](api/pandas.DatetimeIndex.tz_convert.html#pandas.DatetimeIndex.tz_convert
    "pandas.DatetimeIndex.tz_convert")(tz) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_localize`](api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize")(tz[, ambiguous, ...]) | Localize tz-naive
    Datetime Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.round`](api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.floor`](api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.ceil`](api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month_name`](api/pandas.DatetimeIndex.month_name.html#pandas.DatetimeIndex.month_name
    "pandas.DatetimeIndex.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_name`](api/pandas.DatetimeIndex.day_name.html#pandas.DatetimeIndex.day_name
    "pandas.DatetimeIndex.day_name")(*args, **kwargs) | Return the day names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.as_unit`](api/pandas.DatetimeIndex.as_unit.html#pandas.DatetimeIndex.as_unit
    "pandas.DatetimeIndex.as_unit")(*args, **kwargs) | Convert to a dtype with the
    given unit resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_period`](api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_pydatetime`](api/pandas.DatetimeIndex.to_pydatetime.html#pandas.DatetimeIndex.to_pydatetime
    "pandas.DatetimeIndex.to_pydatetime")(*args, **kwargs) | Return an ndarray of
    `datetime.datetime` objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_series`](api/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series
    "pandas.DatetimeIndex.to_series")([index, name]) | Create a Series with both index
    and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_frame`](api/pandas.DatetimeIndex.to_frame.html#pandas.DatetimeIndex.to_frame
    "pandas.DatetimeIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.mean`](api/pandas.DatetimeIndex.mean.html#pandas.DatetimeIndex.mean
    "pandas.DatetimeIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.std`](api/pandas.DatetimeIndex.std.html#pandas.DatetimeIndex.std
    "pandas.DatetimeIndex.std")(*args, **kwargs) | Return sample standard deviation
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: Time/date components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.year`](api/pandas.DatetimeIndex.year.html#pandas.DatetimeIndex.year
    "pandas.DatetimeIndex.year") | The year of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month`](api/pandas.DatetimeIndex.month.html#pandas.DatetimeIndex.month
    "pandas.DatetimeIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day`](api/pandas.DatetimeIndex.day.html#pandas.DatetimeIndex.day
    "pandas.DatetimeIndex.day") | The day of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.hour`](api/pandas.DatetimeIndex.hour.html#pandas.DatetimeIndex.hour
    "pandas.DatetimeIndex.hour") | The hours of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.minute`](api/pandas.DatetimeIndex.minute.html#pandas.DatetimeIndex.minute
    "pandas.DatetimeIndex.minute") | The minutes of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.second`](api/pandas.DatetimeIndex.second.html#pandas.DatetimeIndex.second
    "pandas.DatetimeIndex.second") | The seconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.microsecond`](api/pandas.DatetimeIndex.microsecond.html#pandas.DatetimeIndex.microsecond
    "pandas.DatetimeIndex.microsecond") | The microseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.nanosecond`](api/pandas.DatetimeIndex.nanosecond.html#pandas.DatetimeIndex.nanosecond
    "pandas.DatetimeIndex.nanosecond") | The nanoseconds of the datetime. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.date`](api/pandas.DatetimeIndex.date.html#pandas.DatetimeIndex.date
    "pandas.DatetimeIndex.date") | Returns numpy array of python [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.time`](api/pandas.DatetimeIndex.time.html#pandas.DatetimeIndex.time
    "pandas.DatetimeIndex.time") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.timetz`](api/pandas.DatetimeIndex.timetz.html#pandas.DatetimeIndex.timetz
    "pandas.DatetimeIndex.timetz") | Returns numpy array of [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time
    "(in Python v3.12)") objects with timezones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofyear`](api/pandas.DatetimeIndex.dayofyear.html#pandas.DatetimeIndex.dayofyear
    "pandas.DatetimeIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_year`](api/pandas.DatetimeIndex.day_of_year.html#pandas.DatetimeIndex.day_of_year
    "pandas.DatetimeIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.dayofweek`](api/pandas.DatetimeIndex.dayofweek.html#pandas.DatetimeIndex.dayofweek
    "pandas.DatetimeIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_of_week`](api/pandas.DatetimeIndex.day_of_week.html#pandas.DatetimeIndex.day_of_week
    "pandas.DatetimeIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.weekday`](api/pandas.DatetimeIndex.weekday.html#pandas.DatetimeIndex.weekday
    "pandas.DatetimeIndex.weekday") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.quarter`](api/pandas.DatetimeIndex.quarter.html#pandas.DatetimeIndex.quarter
    "pandas.DatetimeIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz`](api/pandas.DatetimeIndex.tz.html#pandas.DatetimeIndex.tz
    "pandas.DatetimeIndex.tz") | Return the timezone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freq`](api/pandas.DatetimeIndex.freq.html#pandas.DatetimeIndex.freq
    "pandas.DatetimeIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.freqstr`](api/pandas.DatetimeIndex.freqstr.html#pandas.DatetimeIndex.freqstr
    "pandas.DatetimeIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_start`](api/pandas.DatetimeIndex.is_month_start.html#pandas.DatetimeIndex.is_month_start
    "pandas.DatetimeIndex.is_month_start") | Indicates whether the date is the first
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_month_end`](api/pandas.DatetimeIndex.is_month_end.html#pandas.DatetimeIndex.is_month_end
    "pandas.DatetimeIndex.is_month_end") | Indicates whether the date is the last
    day of the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_start`](api/pandas.DatetimeIndex.is_quarter_start.html#pandas.DatetimeIndex.is_quarter_start
    "pandas.DatetimeIndex.is_quarter_start") | Indicator for whether the date is the
    first day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_quarter_end`](api/pandas.DatetimeIndex.is_quarter_end.html#pandas.DatetimeIndex.is_quarter_end
    "pandas.DatetimeIndex.is_quarter_end") | Indicator for whether the date is the
    last day of a quarter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_start`](api/pandas.DatetimeIndex.is_year_start.html#pandas.DatetimeIndex.is_year_start
    "pandas.DatetimeIndex.is_year_start") | Indicate whether the date is the first
    day of a year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_year_end`](api/pandas.DatetimeIndex.is_year_end.html#pandas.DatetimeIndex.is_year_end
    "pandas.DatetimeIndex.is_year_end") | Indicate whether the date is the last day
    of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.is_leap_year`](api/pandas.DatetimeIndex.is_leap_year.html#pandas.DatetimeIndex.is_leap_year
    "pandas.DatetimeIndex.is_leap_year") | Boolean indicator if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.inferred_freq`](api/pandas.DatetimeIndex.inferred_freq.html#pandas.DatetimeIndex.inferred_freq
    "pandas.DatetimeIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Selecting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.indexer_at_time`](api/pandas.DatetimeIndex.indexer_at_time.html#pandas.DatetimeIndex.indexer_at_time
    "pandas.DatetimeIndex.indexer_at_time")(time[, asof]) | Return index locations
    of values at particular time of day. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.indexer_between_time`](api/pandas.DatetimeIndex.indexer_between_time.html#pandas.DatetimeIndex.indexer_between_time
    "pandas.DatetimeIndex.indexer_between_time")(...[, ...]) | Return index locations
    of values between particular times of day. |'
  prefs: []
  type: TYPE_TB
- en: Time-specific operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.normalize`](api/pandas.DatetimeIndex.normalize.html#pandas.DatetimeIndex.normalize
    "pandas.DatetimeIndex.normalize")(*args, **kwargs) | Convert times to midnight.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.strftime`](api/pandas.DatetimeIndex.strftime.html#pandas.DatetimeIndex.strftime
    "pandas.DatetimeIndex.strftime")(date_format) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.snap`](api/pandas.DatetimeIndex.snap.html#pandas.DatetimeIndex.snap
    "pandas.DatetimeIndex.snap")([freq]) | Snap time stamps to nearest occurring frequency.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_convert`](api/pandas.DatetimeIndex.tz_convert.html#pandas.DatetimeIndex.tz_convert
    "pandas.DatetimeIndex.tz_convert")(tz) | Convert tz-aware Datetime Array/Index
    from one time zone to another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.tz_localize`](api/pandas.DatetimeIndex.tz_localize.html#pandas.DatetimeIndex.tz_localize
    "pandas.DatetimeIndex.tz_localize")(tz[, ambiguous, ...]) | Localize tz-naive
    Datetime Array/Index to tz-aware Datetime Array/Index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.round`](api/pandas.DatetimeIndex.round.html#pandas.DatetimeIndex.round
    "pandas.DatetimeIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.floor`](api/pandas.DatetimeIndex.floor.html#pandas.DatetimeIndex.floor
    "pandas.DatetimeIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.ceil`](api/pandas.DatetimeIndex.ceil.html#pandas.DatetimeIndex.ceil
    "pandas.DatetimeIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.month_name`](api/pandas.DatetimeIndex.month_name.html#pandas.DatetimeIndex.month_name
    "pandas.DatetimeIndex.month_name")(*args, **kwargs) | Return the month names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.day_name`](api/pandas.DatetimeIndex.day_name.html#pandas.DatetimeIndex.day_name
    "pandas.DatetimeIndex.day_name")(*args, **kwargs) | Return the day names with
    specified locale. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.as_unit`](api/pandas.DatetimeIndex.as_unit.html#pandas.DatetimeIndex.as_unit
    "pandas.DatetimeIndex.as_unit")(*args, **kwargs) | Convert to a dtype with the
    given unit resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_period`](api/pandas.DatetimeIndex.to_period.html#pandas.DatetimeIndex.to_period
    "pandas.DatetimeIndex.to_period")(*args, **kwargs) | Cast to PeriodArray/PeriodIndex
    at a particular frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_pydatetime`](api/pandas.DatetimeIndex.to_pydatetime.html#pandas.DatetimeIndex.to_pydatetime
    "pandas.DatetimeIndex.to_pydatetime")(*args, **kwargs) | Return an ndarray of
    `datetime.datetime` objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_series`](api/pandas.DatetimeIndex.to_series.html#pandas.DatetimeIndex.to_series
    "pandas.DatetimeIndex.to_series")([index, name]) | Create a Series with both index
    and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.to_frame`](api/pandas.DatetimeIndex.to_frame.html#pandas.DatetimeIndex.to_frame
    "pandas.DatetimeIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`DatetimeIndex.mean`](api/pandas.DatetimeIndex.mean.html#pandas.DatetimeIndex.mean
    "pandas.DatetimeIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DatetimeIndex.std`](api/pandas.DatetimeIndex.std.html#pandas.DatetimeIndex.std
    "pandas.DatetimeIndex.std")(*args, **kwargs) | Return sample standard deviation
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: TimedeltaIndex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex`](api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex "pandas.TimedeltaIndex")([data, unit, freq, closed, ...])
    | Immutable Index of timedelta64 data. |'
  prefs: []
  type: TYPE_TB
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.days`](api/pandas.TimedeltaIndex.days.html#pandas.TimedeltaIndex.days
    "pandas.TimedeltaIndex.days") | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.seconds`](api/pandas.TimedeltaIndex.seconds.html#pandas.TimedeltaIndex.seconds
    "pandas.TimedeltaIndex.seconds") | Number of seconds (>= 0 and less than 1 day)
    for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.microseconds`](api/pandas.TimedeltaIndex.microseconds.html#pandas.TimedeltaIndex.microseconds
    "pandas.TimedeltaIndex.microseconds") | Number of microseconds (>= 0 and less
    than 1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.nanoseconds`](api/pandas.TimedeltaIndex.nanoseconds.html#pandas.TimedeltaIndex.nanoseconds
    "pandas.TimedeltaIndex.nanoseconds") | Number of nanoseconds (>= 0 and less than
    1 microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.components`](api/pandas.TimedeltaIndex.components.html#pandas.TimedeltaIndex.components
    "pandas.TimedeltaIndex.components") | Return a DataFrame of the individual resolution
    components of the Timedeltas. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.inferred_freq`](api/pandas.TimedeltaIndex.inferred_freq.html#pandas.TimedeltaIndex.inferred_freq
    "pandas.TimedeltaIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.as_unit`](api/pandas.TimedeltaIndex.as_unit.html#pandas.TimedeltaIndex.as_unit
    "pandas.TimedeltaIndex.as_unit")(unit) | Convert to a dtype with the given unit
    resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_pytimedelta`](api/pandas.TimedeltaIndex.to_pytimedelta.html#pandas.TimedeltaIndex.to_pytimedelta
    "pandas.TimedeltaIndex.to_pytimedelta")(*args, **kwargs) | Return an ndarray of
    datetime.timedelta objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_series`](api/pandas.TimedeltaIndex.to_series.html#pandas.TimedeltaIndex.to_series
    "pandas.TimedeltaIndex.to_series")([index, name]) | Create a Series with both
    index and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.round`](api/pandas.TimedeltaIndex.round.html#pandas.TimedeltaIndex.round
    "pandas.TimedeltaIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.floor`](api/pandas.TimedeltaIndex.floor.html#pandas.TimedeltaIndex.floor
    "pandas.TimedeltaIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.ceil`](api/pandas.TimedeltaIndex.ceil.html#pandas.TimedeltaIndex.ceil
    "pandas.TimedeltaIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_frame`](api/pandas.TimedeltaIndex.to_frame.html#pandas.TimedeltaIndex.to_frame
    "pandas.TimedeltaIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.mean`](api/pandas.TimedeltaIndex.mean.html#pandas.TimedeltaIndex.mean
    "pandas.TimedeltaIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.days`](api/pandas.TimedeltaIndex.days.html#pandas.TimedeltaIndex.days
    "pandas.TimedeltaIndex.days") | Number of days for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.seconds`](api/pandas.TimedeltaIndex.seconds.html#pandas.TimedeltaIndex.seconds
    "pandas.TimedeltaIndex.seconds") | Number of seconds (>= 0 and less than 1 day)
    for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.microseconds`](api/pandas.TimedeltaIndex.microseconds.html#pandas.TimedeltaIndex.microseconds
    "pandas.TimedeltaIndex.microseconds") | Number of microseconds (>= 0 and less
    than 1 second) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.nanoseconds`](api/pandas.TimedeltaIndex.nanoseconds.html#pandas.TimedeltaIndex.nanoseconds
    "pandas.TimedeltaIndex.nanoseconds") | Number of nanoseconds (>= 0 and less than
    1 microsecond) for each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.components`](api/pandas.TimedeltaIndex.components.html#pandas.TimedeltaIndex.components
    "pandas.TimedeltaIndex.components") | Return a DataFrame of the individual resolution
    components of the Timedeltas. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.inferred_freq`](api/pandas.TimedeltaIndex.inferred_freq.html#pandas.TimedeltaIndex.inferred_freq
    "pandas.TimedeltaIndex.inferred_freq") | Tries to return a string representing
    a frequency generated by infer_freq. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.as_unit`](api/pandas.TimedeltaIndex.as_unit.html#pandas.TimedeltaIndex.as_unit
    "pandas.TimedeltaIndex.as_unit")(unit) | Convert to a dtype with the given unit
    resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_pytimedelta`](api/pandas.TimedeltaIndex.to_pytimedelta.html#pandas.TimedeltaIndex.to_pytimedelta
    "pandas.TimedeltaIndex.to_pytimedelta")(*args, **kwargs) | Return an ndarray of
    datetime.timedelta objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_series`](api/pandas.TimedeltaIndex.to_series.html#pandas.TimedeltaIndex.to_series
    "pandas.TimedeltaIndex.to_series")([index, name]) | Create a Series with both
    index and values equal to the index keys. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.round`](api/pandas.TimedeltaIndex.round.html#pandas.TimedeltaIndex.round
    "pandas.TimedeltaIndex.round")(*args, **kwargs) | Perform round operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.floor`](api/pandas.TimedeltaIndex.floor.html#pandas.TimedeltaIndex.floor
    "pandas.TimedeltaIndex.floor")(*args, **kwargs) | Perform floor operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.ceil`](api/pandas.TimedeltaIndex.ceil.html#pandas.TimedeltaIndex.ceil
    "pandas.TimedeltaIndex.ceil")(*args, **kwargs) | Perform ceil operation on the
    data to the specified freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`TimedeltaIndex.to_frame`](api/pandas.TimedeltaIndex.to_frame.html#pandas.TimedeltaIndex.to_frame
    "pandas.TimedeltaIndex.to_frame")([index, name]) | Create a DataFrame with a column
    containing the Index. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`TimedeltaIndex.mean`](api/pandas.TimedeltaIndex.mean.html#pandas.TimedeltaIndex.mean
    "pandas.TimedeltaIndex.mean")(*[, skipna, axis]) | Return the mean value of the
    Array. |'
  prefs: []
  type: TYPE_TB
- en: PeriodIndex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`PeriodIndex`](api/pandas.PeriodIndex.html#pandas.PeriodIndex "pandas.PeriodIndex")([data, ordinal, freq, dtype, ...])
    | Immutable ndarray holding ordinal values indicating regular periods in time.
    |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.day`](api/pandas.PeriodIndex.day.html#pandas.PeriodIndex.day
    "pandas.PeriodIndex.day") | The days of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofweek`](api/pandas.PeriodIndex.dayofweek.html#pandas.PeriodIndex.dayofweek
    "pandas.PeriodIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_week`](api/pandas.PeriodIndex.day_of_week.html#pandas.PeriodIndex.day_of_week
    "pandas.PeriodIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofyear`](api/pandas.PeriodIndex.dayofyear.html#pandas.PeriodIndex.dayofyear
    "pandas.PeriodIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_year`](api/pandas.PeriodIndex.day_of_year.html#pandas.PeriodIndex.day_of_year
    "pandas.PeriodIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.days_in_month`](api/pandas.PeriodIndex.days_in_month.html#pandas.PeriodIndex.days_in_month
    "pandas.PeriodIndex.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.daysinmonth`](api/pandas.PeriodIndex.daysinmonth.html#pandas.PeriodIndex.daysinmonth
    "pandas.PeriodIndex.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.end_time`](api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time") | Get the Timestamp for the end of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freq`](api/pandas.PeriodIndex.freq.html#pandas.PeriodIndex.freq
    "pandas.PeriodIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freqstr`](api/pandas.PeriodIndex.freqstr.html#pandas.PeriodIndex.freqstr
    "pandas.PeriodIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.hour`](api/pandas.PeriodIndex.hour.html#pandas.PeriodIndex.hour
    "pandas.PeriodIndex.hour") | The hour of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.is_leap_year`](api/pandas.PeriodIndex.is_leap_year.html#pandas.PeriodIndex.is_leap_year
    "pandas.PeriodIndex.is_leap_year") | Logical indicating if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.minute`](api/pandas.PeriodIndex.minute.html#pandas.PeriodIndex.minute
    "pandas.PeriodIndex.minute") | The minute of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.month`](api/pandas.PeriodIndex.month.html#pandas.PeriodIndex.month
    "pandas.PeriodIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.quarter`](api/pandas.PeriodIndex.quarter.html#pandas.PeriodIndex.quarter
    "pandas.PeriodIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.qyear`](api/pandas.PeriodIndex.qyear.html#pandas.PeriodIndex.qyear
    "pandas.PeriodIndex.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.second`](api/pandas.PeriodIndex.second.html#pandas.PeriodIndex.second
    "pandas.PeriodIndex.second") | The second of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.start_time`](api/pandas.PeriodIndex.start_time.html#pandas.PeriodIndex.start_time
    "pandas.PeriodIndex.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.week`](api/pandas.PeriodIndex.week.html#pandas.PeriodIndex.week
    "pandas.PeriodIndex.week") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekday`](api/pandas.PeriodIndex.weekday.html#pandas.PeriodIndex.weekday
    "pandas.PeriodIndex.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekofyear`](api/pandas.PeriodIndex.weekofyear.html#pandas.PeriodIndex.weekofyear
    "pandas.PeriodIndex.weekofyear") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.year`](api/pandas.PeriodIndex.year.html#pandas.PeriodIndex.year
    "pandas.PeriodIndex.year") | The year of the period. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.asfreq`](api/pandas.PeriodIndex.asfreq.html#pandas.PeriodIndex.asfreq
    "pandas.PeriodIndex.asfreq")([freq, how]) | Convert the PeriodArray to the specified
    frequency freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.strftime`](api/pandas.PeriodIndex.strftime.html#pandas.PeriodIndex.strftime
    "pandas.PeriodIndex.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.to_timestamp`](api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp")([freq, how]) | Cast to DatetimeArray/Index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_fields`](api/pandas.PeriodIndex.from_fields.html#pandas.PeriodIndex.from_fields
    "pandas.PeriodIndex.from_fields")(*[, year, quarter, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_ordinals`](api/pandas.PeriodIndex.from_ordinals.html#pandas.PeriodIndex.from_ordinals
    "pandas.PeriodIndex.from_ordinals")(ordinals, *, freq) |  |'
  prefs: []
  type: TYPE_TB
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.day`](api/pandas.PeriodIndex.day.html#pandas.PeriodIndex.day
    "pandas.PeriodIndex.day") | The days of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofweek`](api/pandas.PeriodIndex.dayofweek.html#pandas.PeriodIndex.dayofweek
    "pandas.PeriodIndex.dayofweek") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_week`](api/pandas.PeriodIndex.day_of_week.html#pandas.PeriodIndex.day_of_week
    "pandas.PeriodIndex.day_of_week") | The day of the week with Monday=0, Sunday=6.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.dayofyear`](api/pandas.PeriodIndex.dayofyear.html#pandas.PeriodIndex.dayofyear
    "pandas.PeriodIndex.dayofyear") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.day_of_year`](api/pandas.PeriodIndex.day_of_year.html#pandas.PeriodIndex.day_of_year
    "pandas.PeriodIndex.day_of_year") | The ordinal day of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.days_in_month`](api/pandas.PeriodIndex.days_in_month.html#pandas.PeriodIndex.days_in_month
    "pandas.PeriodIndex.days_in_month") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.daysinmonth`](api/pandas.PeriodIndex.daysinmonth.html#pandas.PeriodIndex.daysinmonth
    "pandas.PeriodIndex.daysinmonth") | The number of days in the month. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.end_time`](api/pandas.PeriodIndex.end_time.html#pandas.PeriodIndex.end_time
    "pandas.PeriodIndex.end_time") | Get the Timestamp for the end of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freq`](api/pandas.PeriodIndex.freq.html#pandas.PeriodIndex.freq
    "pandas.PeriodIndex.freq") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.freqstr`](api/pandas.PeriodIndex.freqstr.html#pandas.PeriodIndex.freqstr
    "pandas.PeriodIndex.freqstr") | Return the frequency object as a string if it''s
    set, otherwise None. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.hour`](api/pandas.PeriodIndex.hour.html#pandas.PeriodIndex.hour
    "pandas.PeriodIndex.hour") | The hour of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.is_leap_year`](api/pandas.PeriodIndex.is_leap_year.html#pandas.PeriodIndex.is_leap_year
    "pandas.PeriodIndex.is_leap_year") | Logical indicating if the date belongs to
    a leap year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.minute`](api/pandas.PeriodIndex.minute.html#pandas.PeriodIndex.minute
    "pandas.PeriodIndex.minute") | The minute of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.month`](api/pandas.PeriodIndex.month.html#pandas.PeriodIndex.month
    "pandas.PeriodIndex.month") | The month as January=1, December=12. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.quarter`](api/pandas.PeriodIndex.quarter.html#pandas.PeriodIndex.quarter
    "pandas.PeriodIndex.quarter") | The quarter of the date. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.qyear`](api/pandas.PeriodIndex.qyear.html#pandas.PeriodIndex.qyear
    "pandas.PeriodIndex.qyear") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.second`](api/pandas.PeriodIndex.second.html#pandas.PeriodIndex.second
    "pandas.PeriodIndex.second") | The second of the period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.start_time`](api/pandas.PeriodIndex.start_time.html#pandas.PeriodIndex.start_time
    "pandas.PeriodIndex.start_time") | Get the Timestamp for the start of the period.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.week`](api/pandas.PeriodIndex.week.html#pandas.PeriodIndex.week
    "pandas.PeriodIndex.week") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekday`](api/pandas.PeriodIndex.weekday.html#pandas.PeriodIndex.weekday
    "pandas.PeriodIndex.weekday") | The day of the week with Monday=0, Sunday=6. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.weekofyear`](api/pandas.PeriodIndex.weekofyear.html#pandas.PeriodIndex.weekofyear
    "pandas.PeriodIndex.weekofyear") | The week ordinal of the year. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.year`](api/pandas.PeriodIndex.year.html#pandas.PeriodIndex.year
    "pandas.PeriodIndex.year") | The year of the period. |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`PeriodIndex.asfreq`](api/pandas.PeriodIndex.asfreq.html#pandas.PeriodIndex.asfreq
    "pandas.PeriodIndex.asfreq")([freq, how]) | Convert the PeriodArray to the specified
    frequency freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.strftime`](api/pandas.PeriodIndex.strftime.html#pandas.PeriodIndex.strftime
    "pandas.PeriodIndex.strftime")(*args, **kwargs) | Convert to Index using specified
    date_format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.to_timestamp`](api/pandas.PeriodIndex.to_timestamp.html#pandas.PeriodIndex.to_timestamp
    "pandas.PeriodIndex.to_timestamp")([freq, how]) | Cast to DatetimeArray/Index.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_fields`](api/pandas.PeriodIndex.from_fields.html#pandas.PeriodIndex.from_fields
    "pandas.PeriodIndex.from_fields")(*[, year, quarter, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`PeriodIndex.from_ordinals`](api/pandas.PeriodIndex.from_ordinals.html#pandas.PeriodIndex.from_ordinals
    "pandas.PeriodIndex.from_ordinals")(ordinals, *, freq) |  |'
  prefs: []
  type: TYPE_TB
