- en: Releasing a version
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布一个版本
- en: 原文：[https://numpy.org/doc/1.26/dev/releasing.html](https://numpy.org/doc/1.26/dev/releasing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/dev/releasing.html](https://numpy.org/doc/1.26/dev/releasing.html)
- en: The following guides include detailed information on how to prepare a NumPy
    release.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指南详细介绍了如何准备 NumPy 的发布。
- en: '## How to prepare a release'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何准备发布'
- en: These instructions give an overview of what is necessary to build binary releases
    for NumPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明提供了构建 NumPy 二进制发布版本所需的概述。
- en: Current build and release info
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前的构建和发布信息
- en: 'Useful info can be found in the following locations:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关以下位置可以找到有用的信息：
- en: '**Source tree**'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码**'
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
- en: '**NumPy docs**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy 文档**'
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
- en: '**Release scripts**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发行脚本**'
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
- en: Supported platforms and versions
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的平台和版本
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29)概述了支持的Python版本；2020年上半年，支持Python
    >= 3.6\. 我们每次合并代码到主分支时都会对所有这些版本进行测试。部分版本可能提供了二进制安装包（详见下文）。'
- en: '**OS X**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X**'
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的 OS X 版本 >= 10.9 ，有关 Python 版本的支持情况请参见 [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29)。我们为与
    Python.org Python、系统提供的 Python、homebrew 和 macports 兼容的 OS X 上构建了二进制 wheel 文件 ——
    参见此 [OSX wheel 构建摘要](https://github.com/MacPython/wiki/wiki/Spinning-wheels) 以获取详细信息。
- en: '**Windows**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在 Windows 上构建 32 位和 64 位的 wheel 文件。支持 Windows 7, 8 和 10 。我们使用 [mingw-w64 工具链](https://mingwpy.github.io)、[cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    和 GitHub actions 来构建 NumPy。
- en: '**Linux**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为 NumPy 构建和发布了 [manylinux2014](https://www.python.org/dev/peps/pep-0513) 的
    wheel 文件。许多 Linux 发行版包括了他们自己构建的二进制 NumPy 版本。
- en: '**BSD / Solaris**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BSD / Solaris**'
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有提供二进制文件，但已经有关于 Solaris 和 BSD 的成功构建报告。
- en: Tool chain
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具链
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在云基础设施上构建所有的 wheel 文件 —— 因此这份编译器列表仅供本地构建的信息和调试参考。详见[numpy wheels](https://github.com/MacPython/numpy-wheels)存储库中的
    `.travis.yml` 脚本，其中含有已过时的创建构建脚本的来源，使用 multibuild 工具。
- en: Compilers
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译器
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个平台上，使用与 Python 本身构建时相同的 gcc 版本。目前如下：
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS X 构建目前在 travis 上使用 *clang*。当针对 Python.org 安装包构建时，似乎可以安全地从 travis-ci 的 OS
    X 10.9 虚拟机上构建适用于 OSX >= 10.6 的二进制 wheel；
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 构建使用 [mingw-w64 工具链](https://mingwpy.github.io)；
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Manylinux2014 wheels 使用 Manylinux docker 镜像提供的 gcc。
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要 Cython 来构建二进制文件。Cython 将 NumPy 分发中的 `.pyx` 文件编译为 `.c` 文件。
- en: OpenBLAS
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenBLAS
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 wheels 链接到通过 [openblas-libs](https://github.com/MacPython/openblas-libs)
    仓库提供的 [OpenBLAS](https://github.com/xianyi/OpenBLAS) 版本。共享对象（或 DLL）与 wheel 一起发布，重命名以防止与文件系统中可能存在的其他
    OpenBLAS 共享对象的名称冲突。
- en: Building source archives and wheels
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建源代码存档和 wheels
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy wheels 和 sdist 现在使用 cibuildwheel 和 github actions 构建。
- en: Building docs
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建文档
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再构建 pdf 文件，只有 html 文档。需要上传到文档服务器的 `numpy-html.zip` 可以使用 `spin docs dist`
    构建。
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要将必要的文档构建依赖项安装到开发环境中，请运行 `pip install -r doc_requirements.txt`。
- en: Uploading to PyPI
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 上传到 PyPI
- en: The only application needed for uploading is
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上传所需的唯一应用程序是
- en: twine (pip).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: twine （pip）。
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个 PyPI 令牌，最好将其保存在一个钥匙链上。请参阅 twine 的 [keyring](https://twine.readthedocs.io/en/stable/#keyring-support)
    文档以了解如何做到这一点。
- en: Generating author/PR lists
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成作者和 PR 列表
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要个人访问令牌 [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)，以便脚本可以访问
    github NumPy 仓库。
- en: gitpython (pip)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gitpython（pip）
- en: pygithub (pip)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pygithub（pip）
- en: What is released
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布的内容
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wheels** 我们目前支持 Windows、OSX 和 Linux 上的 Python 3.8-3.10。'
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：32 位和 64 位的 wheels 使用 Github actions 构建；
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSX：使用 Github actions 构建的 x64_86 和 arm64 OSX wheels；
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：使用 Github actions 构建的 x64_86 和 aarch64 Manylinux2014 wheels。
- en: '**Other** Release notes and changelog'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他** 发布说明和变更日志'
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码分发** 我们以 .tar.gz 格式构建源代码发布版。'
- en: Release process
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布流程
- en: Agree on a release schedule
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确定发布计划
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的发布计划是一个 beta 版本、两个发布候选版本和一个最终版本。最好先在邮件列表上讨论时间，以便人们及时提交他们的代码、合并文档 wiki 编辑等。确定日期后，在主分支上创建一个新的
    maintenance/x.y.z 分支，并为下一个版本添加新的空白发布说明，并更新 Trac 里程碑。
- en: Make sure current branch builds a package correctly
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确保当前分支正确构建一个软件包
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PR 标题以 `REL` 开头时，CI 构建 wheels。在发布之前，您最后的 PR 应该标记为这样，并且所有测试都应该通过。您也可以执行以下操作：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关构建过程的详细信息，最好阅读下面的逐步说明。
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将针对beta版、发布候选版和最终发布版进行重复。
- en: Check deprecations
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查弃用项
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在[制作发布分支](#branching)之前，应检查所有应该删除的弃用代码是否实际删除，所有新的弃用说明都应在文档字符串或弃用警告中说明代码将在哪个版本被移除。
- en: Check the C API version number
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查C API版本号
- en: The C API version needs to be tracked in three places
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: C API版本需要在三个地方跟踪
- en: numpy/core/setup_common.py
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py
- en: numpy/core/code_generators/cversions.txt
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/code_generators/cversions.txt
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h
- en: There are three steps to the process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程有三个步骤。
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果API发生了变化，请在setup_common.py中增加C_API_VERSION。仅当针对当前API编译的任何代码与上一个已发布的NumPy版本向后兼容时，API才未改变。对C结构的任何更改或对公共接口的添加将使新API不向后兼容。
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果步骤1中的C_API_VERSION已更改，或者API的哈希值已更改，需要更新cversions.txt文件。要检查哈希值，请运行脚本numpy/core/cversions.py，并注意打印的API哈希值。如果该哈希值与numpy/core/code_generators/cversions.txt中的最后一个哈希值不匹配，那么哈希值已更改。使用相应的C_API_VERSION和哈希值，在cversions.txt中添加新条目。如果API版本没有更改，但哈希值不同，则需要注释掉该API版本的先前条目。例如，在NumPy
    1.9中添加了注释，这改变了哈希值，但API与1.8中的相同。哈希值用作API变更的检查，但并非是最终确定其是否变更的依据。
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果步骤1和2执行正确，编译发布不应该出现“在构建开始时检测到API不匹配”的警告。
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h将需要一个新的NPY_X_Y_API_VERSION宏，其中X和Y是版本的主要和次要版本号。只有当包含文件中的一些函数或宏被弃用时，才需要增加给该宏的值，从上一版本增加即可。
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py中的C ABI版本号仅适用于主要版本的更新。
- en: Check the release notes
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查发布说明
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[towncrier](https://pypi.org/project/towncrier/)构建发布说明并提交更改。这将从`doc/release/upcoming_changes`中删除所有片段，并添加`doc/release/<version>-note.rst`。
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: towncrier build –version “<version>” git commit -m”Create release note”
- en: Check that the release notes are up-to-date.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布说明是否最新。
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[Highlight](#branching)部分更新发布说明。提及以下一些内容：
- en: major new features
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要新功能
- en: deprecated and removed features
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用和删除的功能
- en: supported Python versions
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的Python版本
- en: for SciPy, supported NumPy version(s)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于SciPy，支持的NumPy版本
- en: outlook for the near future
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不久的将来展望
- en: Step-by-step directions
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步指引
- en: This is a walkthrough of the NumPy 1.21.0 release on Linux, modified for building
    with GitHub Actions and cibuildwheels and uploading to the [anaconda.org staging
    repository for NumPy](https://anaconda.org/multibuild-wheels-staging/numpy). The
    commands can be copied into the command line, but be sure to replace 1.21.0 by
    the correct version. This should be read together with the [general release guide](#prepare-release).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对在 Linux 上进行的 NumPy 1.21.0 发布的演练，修改为使用 GitHub Actions 和 cibuildwheels 构建，并上传到[NumPy
    的 anaconda.org 暂存库](https://anaconda.org/multibuild-wheels-staging/numpy)。命令可以复制到命令行中，但一定要将
    1.21.0 替换为正确的版本。应与[通用发布指南](#prepare-release)一起阅读。
- en: Facility preparation
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施准备
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始发布之前，请使用 `*_requirements.txt` 文件确保您拥有所需的软件。大多数软件都可以使用 pip 安装，但某些软件将需要 apt-get、dnf
    或您的系统用于软件的任何其他方式。您还需要一个 GitHub 个人访问令牌（PAT）来推送文档。有几种方法可以简化流程：
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 可以设置使用密钥环来存储您的 GitHub 个人访问令牌。在线搜索详细信息。
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用 `keyring` 应用程序存储 twine 的 PyPI 密码。查看在线 twine 文档以获取详细信息。
- en: Release preparation
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布准备
- en: Add/drop Python versions
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加/删除 Python 版本
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加或删除 Python 版本时，需要编辑三个文件：
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.github/workflows/wheels.yml # 用于 github cibuildwheel'
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.travis.yml # 用于 cibuildwheel aarch64 构建'
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setup.py # 用于分类器和最低版本检查。'
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支上进行这些更改，并在必要时进行回溯。在提交摘要中使用 *BLD:* 前缀（构建标签）将导致运行轮子构建，以便对更改进行测试。我们目前在第一个 Python
    rc 之后的多个 Linux 平台和 cibuildwheel 支持的 Python 版本中发布轮子。对于 Python 3.11，我们能够在 rc1 公告发布后的一周内发布。
- en: Backport Pull Requests
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回溯拉取请求
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为此发布的更改必须回溯到维护/1.21.x 分支。
- en: Update release documentation
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新发布文档
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布之前通常需要更新或创建四个文档：
- en: The changelog
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更日志
- en: The release-notes
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布说明
- en: The `.mailmap` file
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mailmap` 文件'
- en: The `doc/source/release.rst` file
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件 `doc/source/release.rst`
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改应作为针对维护分支的普通 PR 进行。发布后，除了 `doc/source/release.rst` 外，所有文件都需要向主分支进行向前移植。
- en: Generate the changelog
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成变更日志
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 变更日志是使用变更日志工具生成的：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `GITHUB` 包含您的 GitHub 访问令牌。文本需要检查非标准贡献者名称，并删除 dependabot 条目。还要删除可能存在于 PR 标题中的任何链接，因为它们在
    markdown 中不易转换，用等宽文本替换它们。非标准的贡献者名称应通过更新 `.mailmap` 文件来修复，这是一项艰巨的工作。最好在达到此点之前进行几次试运行，并使用
    GitHub 问题对恶意用户发出提醒，以获取所需信息。
- en: Finish the release notes
  id: totrans-114
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发布说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是系列中的第一个发布，则将生成发布说明，查看`doc/release/upcoming_changes/README.rst`中的发布说明以查看如何操作。生成发布说明还会删除`doc/release/upcoming_changes/`中的所有新闻片段文件。
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的发布说明总是需要一些修复，引言需要编写，重要的更改应该被指出。对于补丁发布，可能还会追加更改日志文本，但对于初始版本不会，因为它太长。查看以前的发布说明以了解如何操作。请注意，如果存在顶部的`:orphan:`标记，需要更改为`..
    currentmodule:: numpy`，并且需要更新`doc/source/release.rst`索引文件。'
- en: Check the `pavement.py` file
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查`pavement.py`文件
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`pavement.py`文件指向正确的发布说明。应该在上次发布后进行更新，但如果没有，请现在进行修复：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Release walkthrough
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布演示
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在下面的代码段中，`upstream`指GitHub上的根存储库，`origin`指其在您个人GitHub存储库中的派生。如果您没有派生存储库，而是在本地克隆了它，则可能需要进行调整。您还可以编辑`.git/config`并添加`upstream`（如果尚未存在）。
- en: 1\. Prepare the release commit
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 准备发布提交
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 检查用于发布的分支，确保它是最新的，并清理存储库：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Sanity check:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 理智检查：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 标记发布并推送标签。这需要对numpy存储库有写权限：
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要由于错误删除标签：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. Build wheels
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 构建轮子
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 通过cibuildwheel生成轮子（首选）
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程开始时标记构建将通过cibuildwheel触发轮子生成，并将轮子和sdist上传到暂存存储库。在GitHub操作中运行（对于所有基于x86和macOS
    arm64的轮子）大约需要1小时15分钟。在travis上运行（对于aarch64）需要更少的时间。您可以在[暂存存储库](https://anaconda.org/multibuild-wheels-staging/numpy/files)上查看已上传的文件，但请注意它与您所看到的运行作业并不完全同步。
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望手动触发轮子生成，可以这样做：
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub操作-> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)上有“运行工作流”按钮，点击它并选择要构建的标签
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上有一个“更多选项”按钮，点击它并选择要构建的分支。看起来没有构建标签的选项。
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果轮子生成失败是由于不相关的原因，你可以单独重新运行：
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub操作中选择[Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)，点击包含您想要重新运行的构建的提交。左侧有轮子生成的列表，选择您想要重新运行的那个，然后在生成的页面上点击逆时针箭头按钮。
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上选择失败的构建，这将带您到该构建的travis作业。点击重新启动作业按钮。
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您需要重新运行作业，则需要删除anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files)中已上传的文件（如果有的话）。旧文件将不会被覆盖。
- en: 3\. Download wheels
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 下载轮子
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有轮子都已成功构建和分阶段时，使用`tools/download-wheels.py`脚本从Anaconda分阶段目录下载它们：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 4\. Generate the README files
  id: totrans-144
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 生成README文件
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要在所有安装程序被下载后完成，但在更新路面文件以进行持续开发之前完成：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5\. 将维护分支重置为开发状态（跳过预发布）
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建下一个版本的发布说明并编辑它们以设置版本。这些说明将是一个框架，内容很少：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的发布说明添加到文档发布列表中，并在`pavement.py`中更新`RELEASE_NOTES`变量：
- en: '[PRE10]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Commit the result:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 提交结果：
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 6\. Upload to PyPI
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6\. 上传到PyPI
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`twine`上传到PyPI。最近的`twine`版本是在最近的PyPI更改后需要的，这里使用的版本是`3.4.1`：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个命令在中间中断，您可能需要选择性地上传剩余的文件，因为PyPI不允许相同的文件上传两次。应该最后上传源文件，以避免在此过程中pip用户访问文件时可能出现的同步问题，这会导致pip从源代码构建而不是下载二进制wheel。PyPI只允许单个源分发，这里我们选择了zip归档。
- en: 7\. Upload files to github
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7\. 将文件上传到github
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases)，那里应该有一个`v1.21.0
    tag`，点击它并点击该标签的编辑按钮。有两种添加文件的方法，使用可编辑的文本窗口和作为二进制上传。首先编辑`release/README.md`，该文件是使用pandoc从rst版本翻译的。需要修复的内容：如果包括，来自changelog的PR行被包裹并需要解包，链接应更改为等宽文本。然后将内容复制到剪贴板并粘贴到文本窗口中。可能需要多次尝试才能看起来正确。然后
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`release/installers/numpy-1.21.0.tar.gz`上传为二进制文件。
- en: Upload `release/README.rst` as a binary file.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`release/README.rst`上传为二进制文件。
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`doc/changelog/1.21.0-changelog.rst`上传为二进制文件。
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是预发布，请勾选预发布按钮。
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底部点击`{发布，更新}发布`按钮。
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 8\. 将文档上传到numpy.org（跳过预发布）
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need a GitHub personal access token to push the update.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个GitHub个人访问令牌来推送更新。
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步仅适用于最终版本，对于预发布和大多数补丁发布，可以跳过。`make merge-doc`将`numpy/doc`仓库克隆到`doc/build/merge`并用新文档更新它：
- en: '[PRE13]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布系列是一个新的，你需要在`doc/build/merge/index.html`首页的“在这里插入”注释后添加一个新部分：
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更新版本切换器 json 文件以添加新版本，并更新标记为*(stable)*的版本：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，只需要更新`zip`链接的标签名称。因为我们不再生成`pdf`文件，如果有的话，去掉`pdf`文件的那行：
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中“测试运行”新的文档，以确保链接有效：
- en: '[PRE17]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Update the stable link and update:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 更新稳定链接并更新：
- en: '[PRE18]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一切似乎令人满意后，更新、提交并上传更改：
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9\. 在 numpy.org 上宣布发布（预发布除外）
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经 forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org)：
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有的发布，转到页面底部添加一行链接。查看以前的链接作为示例。
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于循环中的`*.0`发布，在顶部添加一个新部分，简要描述新功能，并将新闻链接指向它。
- en: 'commit and push:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 提交并推送：
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Go to your Github fork and make a pull request.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 转到你的 Github fork 并创建一个 pull request。
- en: 10\. Announce to mailing lists
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10\. 在邮件列表上宣布
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在 numpy-discussion、scipy-devel、scipy-user 和 python-announce-list 邮件列表上宣布发布。查看以前的公告以获取基本模板。贡献者和
    PR 名单与上面生成的发布说明相同。如果交叉发布，请确保 python-announce-list 是密件抄送，以便回复不会发送到该列表。
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11\. 发布后任务（预发布除外）
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 检出主分支并将文档更改前向加入：
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Go to GitHub and make a PR.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 GitHub 提交 PR。
- en: 12\. Update oldest-supported-numpy
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12\. 更新 oldest-supported-numpy
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个版本是第一个支持新的 Python 版本，或者第一个为新平台或 PyPy 版本提供轮子的版本，应该更新[https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)中的版本固定。要么提交一个带有`setup.cfg`更改的
    PR，要么提交一个带有所需更改信息的问题。
- en: '## Branch walkthrough'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '## 分支演练'
- en: This guide contains a walkthrough of branching NumPy 1.21.x on Linux. The commands
    can be copied into the command line, but be sure to replace 1.21 and 1.22 by the
    correct versions. It is good practice to make `.mailmap` as current as possible
    before making the branch, that may take several weeks.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南包含了在 Linux 上分支 NumPy 1.21.x 的操作步骤。命令可以复制到命令行，但请务必根据实际版本替换 1.21 和 1.22。在制作分支之前，尽可能使`.mailmap`尽可能新是个好习惯，可能需要几周的时间。
- en: This should be read together with the [general release guide](#prepare-release).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该与[通用发布指南](#prepare-release)一起阅读。
- en: Branching
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: Make the branch
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建分支
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这只需要在开始一个新的维护分支时才需要。由于 NumPy 现在依赖标签来确定版本，在主分支中开始新的开发周期需要一个有注释的标签。操作如下：
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果推送失败，因为新的 PR 已经合并，执行如下操作：
- en: '[PRE24]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 并且重复推送。一旦推送成功，请打标签：
- en: '[PRE25]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'then make the new branch and push it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建新的分支并推送：
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Prepare the main branch for further development
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 准备主分支进行进一步开发
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 PR 分支以准备主分支进行进一步开发：
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Delete the release note fragments:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 删除发布说明碎片：
- en: '[PRE28]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的发行说明骨架并添加到索引中：
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`pavement.py`并更新`RELEASE_NOTES`变量以指向新的说明：
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`cversions.txt`以添加当前发行版。在这个早期阶段，不需要担心新的哈希值，只需在之前的做法后面添加注释即可：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Check your work, commit it, and push:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的工作，提交并推送：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now make a pull request.  ## How to prepare a release'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个拉取请求。## 如何准备一个发行版
- en: These instructions give an overview of what is necessary to build binary releases
    for NumPy.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明概述了构建NumPy二进制版本所需的必要步骤。
- en: Current build and release info
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前的构建和发��信息
- en: 'Useful info can be found in the following locations:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有关有用的信息，请参见以下位置：
- en: '**Source tree**'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码树**'
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
- en: '**NumPy docs**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy文档**'
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
- en: '**Release scripts**'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发行脚本**'
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
- en: Supported platforms and versions
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的平台和版本
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29)概述了支持的Python版本；在2020年上半年，这将是Python
    >= 3.6\. 我们每次将代码合并到主代码库时，都会对所有这些版本的NumPy进行测试。二进制安装程序可能仅适用于其中一部分版本（请见下文）。'
- en: '**OS X**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X**'
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的OS X版本为10.9及以上，有关Python版本支持，请参见[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29)（在NumPy
    Enhancement Proposals中）。我们构建了与Python.org Python、系统Python、homebrew和macports兼容的OSX二进制wheel文件-有关详细信息，请参见此[OSX
    wheel构建摘要](https://github.com/MacPython/wiki/wiki/Spinning-wheels)。
- en: '**Windows**'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在Windows上构建了32位和64位的wheel文件。支持Windows 7、8和10。我们使用[mingw-w64工具链](https://mingwpy.github.io)，[cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)和GitHub
    actions来构建NumPy。
- en: '**Linux**'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于NumPy，我们构建并发布了[manylinux2014](https://www.python.org/dev/peps/pep-0513)的wheel文件。许多Linux发行版中已经包含了自己的NumPy二进制版本。
- en: '**BSD / Solaris**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BSD / Solaris**'
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不提供二进制文件，但已经有反馈表示在Solaris和BSD上成功构建。
- en: Tool chain
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具链
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在云计算环境中构建所有的wheel文件，所以这个编译器列表仅供信息和本地构建调试使用。使用multibuild可以在[numpy wheels](https://github.com/MacPython/numpy-wheels)
    存储库的`.travis.yml`脚本中找到过时的构建脚本。
- en: Compilers
  id: totrans-249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译器
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在各个平台上，使用的gcc版本与Python本身使用的版本相同。目前情况如下：
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前travis上的OS X构建使用*clang*。当针对Python.org安装程序构建时，似乎可以安全地从travis-ci OSX 10.9虚拟机构建OSX
    >= 10.6的二进制wheels；
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows构建使用[mingw-w64工具链](https://mingwpy.github.io)；
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Manylinux2014 wheels使用Manylinux docker镜像上提供的gcc。
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要Cython来构建二进制文件。Cython将NumPy分发中的`.pyx`文件编译成`.c`文件。
- en: OpenBLAS
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenBLAS
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的wheels链接到通过[openblas-libs](https://github.com/MacPython/openblas-libs)仓库提供的[OpenBLAS](https://github.com/xianyi/OpenBLAS)的一个版本。共享对象（或DLL）与wheels一起发布，重命名以防止与文件系统中可能存在的其他OpenBLAS共享对象发生重名冲突。
- en: Building source archives and wheels
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建源代码存档和wheels
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的wheels和sdist现在使用cibuildwheel与github actions构建。
- en: Building docs
  id: totrans-259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成文档
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再构建pdf文件，只有html文档。上传到文档服务器所需的`numpy-html.zip`可以使用`spin docs dist`构建。
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的开发环境中安装必要的文档构建依赖项，请运行`pip install -r doc_requirements.txt`。
- en: Uploading to PyPI
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 上传到PyPI
- en: The only application needed for uploading is
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 上传所需的唯一应用程序是
- en: twine (pip).
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: twine(pip)。
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个PyPI令牌，最好放在钥匙链上。请参阅twine [keyring](https://twine.readthedocs.io/en/stable/#keyring-support)文档，了解如何操作。
- en: Generating author/PR lists
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成作者/PR列表
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个[https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)，以便脚本可以访问github的NumPy仓库。
- en: gitpython (pip)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gitpython(pip)
- en: pygithub (pip)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pygithub(pip)
- en: What is released
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布了什么
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wheels** 我们目前支持Windows、OSX和Linux上的Python 3.8-3.10。'
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：32位和64位wheels使用Github actions构建；
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSX：x64_86和arm64 OSX wheels使用Github actions构建；
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：x64_86和aarch64 Manylinux2014 wheels使用Github actions构建。
- en: '**Other** Release notes and changelog'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他** 发布说明和更新日志'
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码发布** 我们以.tar.gz格式构建源发布。'
- en: Release process
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布流程
- en: Agree on a release schedule
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确定发布计划
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的发布计划是一个beta版、两个候选版本和一个最终版。最好先在邮件列表上讨论时间，以便人们能及时提交他们的提交，合并文档wiki编辑等。在确定日期后，创建一个新的maintenance/x.y.z分支，在主分支中添加新的空发布说明版本，并更新Trac
    Milestones。
- en: Make sure current branch builds a package correctly
  id: totrans-280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确保当前分支正确构建一个包
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当PR标题以`REL`开头时，CI会构建wheels。在发布之前，你的最后一个PR应该这样标记，并且所有的测试都应该通过。你也可以：
- en: '[PRE33]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 关于构建过程的详细信息，最好阅读下面的逐步指南。
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤会重复进行 beta 版本，候选发布版本和最终发布版本。
- en: Check deprecations
  id: totrans-286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查废弃
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作[发布分支](#branching)之前，应检查所有应移除的已废弃代码是否实际上已移除，并且所有新的弃用会在文档字符串或弃用警告中说明代码将在哪个版本中移除。
- en: Check the C API version number
  id: totrans-288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查 C API 版本号
- en: The C API version needs to be tracked in three places
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: C API 版本需要在三个地方跟踪
- en: numpy/core/setup_common.py
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py
- en: numpy/core/code_generators/cversions.txt
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/code_generators/cversions.txt
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h
- en: There are three steps to the process.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程有三个步骤。
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 API 已更改，请在 setup_common.py 中递增 C_API_VERSION。只有在与上一个发布的 NumPy 版本具有向后兼容性的任何代码编译后，API
    才不会更改。对 C 结构的任何更改或添加到公共接口将使新 API 不具备向后兼容性。
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一步中的 C_API_VERSION 已更改，或者 API 的哈希已更改，则需要更新 cversions.txt 文件。要检查哈希，请运行脚本 numpy/core/cversions.py
    并注意打印的 API 哈希。如果该哈希与 numpy/core/code_generators/cversions.txt 中的最后一个哈希不匹配，则该哈希已更改。使用适当的
    C_API_VERSION 和哈希，向 cversions.txt 添加一个新条目。如果 API 版本未更改，但哈希不同，则需要注释掉该 API 版本的先前条目。例如，在
    NumPy 1.9 中添加了注释，这改变了哈希，但 API 与 1.8 中的相同。哈希用作 API 更改的检查，但不是确定性的。
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果步骤 1 和 2 正确执行，编译发布不会出现“在构建开始时检测到 API 不匹配”的警告。
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h 将需要一个新的 NPY_X_Y_API_VERSION 宏，其中 X 和
    Y 是发布的主要和次要版本号。只有在包含文件中的一些函数或宏已被废弃时，才需要将该宏的赋值与上一个版本的赋值增加。
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py 中的 C ABI 版本号仅应在主要发布中更新。
- en: Check the release notes
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查发布说明
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [towncrier](https://pypi.org/project/towncrier/) 构建发布说明并提交更改。这将删除所有来自`doc/release/upcoming_changes`
    的片段，并添加`doc/release/<version>-note.rst`。
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: towncrier 建立 –version “<version>” git commit -m”创建发布说明”
- en: Check that the release notes are up-to-date.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布说明是否最新。
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布说明中更新一个“亮点”部分。提及以下一些内容：
- en: major new features
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要新功能
- en: deprecated and removed features
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已废弃和移除的功能
- en: supported Python versions
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的 Python 版本
- en: for SciPy, supported NumPy version(s)
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 SciPy，支持的 NumPy 版本
- en: outlook for the near future
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近期的展望
- en: Current build and release info
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前构建和发布信息
- en: 'Useful info can be found in the following locations:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 有用信息可在以下位置找到：
- en: '**Source tree**'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码树**'
- en: '[INSTALL.rst](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装说明](https://github.com/numpy/numpy/blob/main/INSTALL.rst)'
- en: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pavement.py](https://github.com/numpy/numpy/blob/main/pavement.py)'
- en: '**NumPy docs**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy 文档**'
- en: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst](https://github.com/numpy/numpy/blob/main/doc/HOWTO_RELEASE.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/RELEASE_WALKTHROUGH.rst)'
- en: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst](https://github.com/numpy/numpy/blob/main/doc/BRANCH_WALKTHROUGH.rst)'
- en: '**Release scripts**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布脚本**'
- en: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/numpy/numpy-vendor](https://github.com/numpy/numpy-vendor)'
- en: Supported platforms and versions
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的平台和版本
- en: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(in
    NumPy Enhancement Proposals)") outlines which Python versions are supported; For
    the first half of 2020, this will be Python >= 3.6\. We test NumPy against all
    these versions every time we merge code to main. Binary installers may be available
    for a subset of these versions (see below).'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29 "(在
    NumPy Enhancement Proposals 中)") 概述了支持的 Python 版本；2020 年上半年，这将是 Python >= 3.6。我们每次将代码合并到主分支时，都会针对所有这些版本进行
    NumPy 测试。可能会为这些版本的子集提供二进制安装程序（请参阅下文）。'
- en: '**OS X**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X**'
- en: OS X versions >= 10.9 are supported, for Python version support see [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(in NumPy Enhancement Proposals)"). We build binary wheels for OSX that are compatible
    with Python.org Python, system Python, homebrew and macports - see this [OSX wheel
    building summary](https://github.com/MacPython/wiki/wiki/Spinning-wheels) for
    details.
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持的 OS X 版本 >= 10.9，有关 Python 版本支持，请参阅 [NEP 29](https://numpy.org/neps/nep-0029-deprecation_policy.html#nep29
    "(在 NumPy Enhancement Proposals 中)")。我们为与 Python.org Python、系统 Python、homebrew
    和 macports 兼容的 OSX 构建二进制 wheels - 有关详情，请参阅这个 [OSX wheel 构建摘要](https://github.com/MacPython/wiki/wiki/Spinning-wheels)。
- en: '**Windows**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported.
    We build NumPy using the [mingw-w64 toolchain](https://mingwpy.github.io), [cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    and GitHub actions.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在 Windows 上构建 32 位和 64 位 wheels。支持 Windows 7、8 和 10。我们使用 [mingw-w64 工具链](https://mingwpy.github.io)、[cibuildwheels](https://cibuildwheel.readthedocs.io/en/stable/)
    和 GitHub actions 构建 NumPy。
- en: '**Linux**'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: We build and ship [manylinux2014](https://www.python.org/dev/peps/pep-0513)
    wheels for NumPy. Many Linux distributions include their own binary builds of
    NumPy.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为 NumPy 构建并发布 [manylinux2014](https://www.python.org/dev/peps/pep-0513) wheels。许多
    Linux 发行版包含其自己的 NumPy 二进制版本。
- en: '**BSD / Solaris**'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BSD / Solaris**'
- en: No binaries are provided, but successful builds on Solaris and BSD have been
    reported.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不提供二进制文件，但已报告在 Solaris 和 BSD 上成功构建。
- en: Tool chain
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具链
- en: We build all our wheels on cloud infrastructure - so this list of compilers
    is for information and debugging builds locally. See the `.travis.yml` script
    in the [numpy wheels](https://github.com/MacPython/numpy-wheels) repo for an outdated
    source of the build recipes using multibuild.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在云基础设施上构建所有的 wheels - 因此，这个编译器列表仅供信息和本地调试构建使用。查看 [numpy wheels](https://github.com/MacPython/numpy-wheels)
    仓库中的 `.travis.yml` 脚本，获取使用 multibuild 的构建配方的已过时源。
- en: Compilers
  id: totrans-332
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译器
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Python 在每个平台上构建时都使用与其相同的 gcc 版本。
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，在 travis 上，OS X 构建使用 *clang*。从 travis-ci 的 OS X 10.9 虚拟机构建针对 Python.org 安装器的
    Python >= 10.6 的二进制 wheels 似乎是安全的；
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 构建使用 [mingw-w64 工具链](https://mingwpy.github.io)；
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Manylinux2014 wheels 使用 Manylinux docker 镜像中提供的 gcc。
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要 Cython 来构建二进制文件。Cython 将 NumPy 分发中的 `.pyx` 文件编译为 `.c` 文件。
- en: OpenBLAS
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenBLAS
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的组件链接到通过 [openblas-libs](https://github.com/MacPython/openblas-libs) 仓库提供的
    [OpenBLAS](https://github.com/xianyi/OpenBLAS) 版本。共享对象（或 DLL）随组件一起提供，并已重命名，以防止与可能存在于文件系统中的其他
    OpenBLAS 共享对象发生名称冲突。
- en: Building source archives and wheels
  id: totrans-340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建源存档和组件
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 组件和源存档现在使用 github actions 进行 cibuildwheel 构建。
- en: Building docs
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建文档
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再构建 pdf 文件，只有 html 文档。需要上传到文档服务器的 `numpy-html.zip` 可以使用 `spin docs dist`
    构建。
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所需的文档构建依赖项安装到开发环境中，请运行 `pip install -r doc_requirements.txt`。
- en: Uploading to PyPI
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 上传到 PyPI
- en: The only application needed for uploading is
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 上传所需的唯一应用程序是
- en: twine (pip).
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: twine (pip).
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个 PyPI 令牌，最好保存在钥匙链上。请参阅 twine [keyring](https://twine.readthedocs.io/en/stable/#keyring-support)
    文档了解如何做到这一点。
- en: Generating author/PR lists
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成作者/PR 列表
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要个人访问令牌 [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)，以便脚本可以访问
    github NumPy 存储库。
- en: gitpython (pip)
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gitpython (pip)
- en: pygithub (pip)
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pygithub (pip)
- en: Compilers
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编译器
- en: 'The same gcc version is used as the one with which Python itself is built on
    each platform. At the moment this means:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个平台上都使用与 Python 本身构建时相同的 gcc 版本。目前这意味着：
- en: OS X builds on travis currently use *clang*. It appears that binary wheels for
    OSX >= 10.6 can be safely built from the travis-ci OSX 10.9 VMs when building
    against the Python from the Python.org installers;
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前在 travis 上构建的 OS X 使用 *clang*。似乎可以安全地从 travis-ci OSX 10.9 VMs 构建对 Python.org
    安装程序中的 Python 的 OSX >= 10.6 的二进制组件；
- en: Windows builds use the [mingw-w64 toolchain](https://mingwpy.github.io);
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 构建使用 [mingw-w64 工具链](https://mingwpy.github.io);
- en: Manylinux2014 wheels use the gcc provided on the Manylinux docker images.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Manylinux2014 组件使用 Manylinux docker 映像中提供的 gcc。
- en: You will need Cython for building the binaries. Cython compiles the `.pyx` files
    in the NumPy distribution to `.c` files.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要 Cython 来构建二进制组件。Cython 将 NumPy 发行版中的 `.pyx` 文件编译为 `.c` 文件。
- en: OpenBLAS
  id: totrans-359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OpenBLAS
- en: All the wheels link to a version of [OpenBLAS](https://github.com/xianyi/OpenBLAS)
    supplied via the [openblas-libs](https://github.com/MacPython/openblas-libs) repo.
    The shared object (or DLL) is shipped with in the wheel, renamed to prevent name
    collisions with other OpenBLAS shared objects that may exist in the filesystem.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的组件链接到通过 [openblas-libs](https://github.com/MacPython/openblas-libs) 仓库提供的
    [OpenBLAS](https://github.com/xianyi/OpenBLAS) 版本。共享对象（或 DLL）随组件一起提供，并已重命名，以防止与可能存在于文件系统中的其他
    OpenBLAS 共享对象发生名称冲突。
- en: Building source archives and wheels
  id: totrans-361
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建源存档和组件
- en: The NumPy wheels and sdist are now built using cibuildwheel with github actions.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 组件和源存档现在使用 github actions 进行 cibuildwheel 构建。
- en: Building docs
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建文档
- en: We are no longer building pdf files, only html docs. The `numpy-html.zip` needed
    to upload to the doc server can be built with `spin docs dist`.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再构建 pdf 文件，只有 html 文档。需要上传到文档服务器的 `numpy-html.zip` 可以使用 `spin docs dist`
    构建。
- en: To install the necessary doc build dependencies into your development environment,
    run `pip install -r doc_requirements.txt`.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 要将所需的文档构建依赖项安装到开发环境中，请运行 `pip install -r doc_requirements.txt`。
- en: Uploading to PyPI
  id: totrans-366
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 上传到 PyPI
- en: The only application needed for uploading is
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 上传所需的唯一应用程序是
- en: twine (pip).
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: twine (pip).
- en: You will also need a PyPI token, which is best kept on a keyring. See the twine
    [keyring](https://twine.readthedocs.io/en/stable/#keyring-support) documentation
    for how to do that.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要一个 PyPI 令牌，最好保存在钥匙链上。请参阅 twine [keyring](https://twine.readthedocs.io/en/stable/#keyring-support)
    文档了解如何做到这一点。
- en: Generating author/PR lists
  id: totrans-370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成作者/PR 列表
- en: You will need a personal access token [https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)
    so that scripts can access the github NumPy repository.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要一个个人访问令牌以便脚本可以访问 github NumPy 仓库[https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)。
- en: gitpython (pip)
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gitpython (pip)
- en: pygithub (pip)
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pygithub (pip)
- en: What is released
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发行内容
- en: '**Wheels** We currently support Python 3.8-3.10 on Windows, OSX, and Linux.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮子** 我们当前支持 Python 3.8-3.10 在 Windows、OSX 和 Linux 上。'
- en: 'Windows: 32-bit and 64-bit wheels built using Github actions;'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：使用 Github actions 构建的 32 位和 64 位轮子；
- en: 'OSX: x64_86 and arm64 OSX wheels built using Github actions;'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSX：使用 Github actions 构建的 x64_86 和 arm64 OSX 轮子；
- en: 'Linux: x64_86 and aarch64 Manylinux2014 wheels built using Github actions.'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux：x64_86 和 aarch64 使用 Github actions 构建的 Manylinux2014 轮子。
- en: '**Other** Release notes and changelog'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他** 发行说明和更改日志'
- en: '**Source distribution** We build source releases in the .tar.gz format.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源分发** 我们以 .tar.gz 格式构建源发布。'
- en: Release process
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发行过程
- en: Agree on a release schedule
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对发布时间表达成一致意见
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的发布时间表是一个 beta 版，两个候选发布版本和一个最终发布版。最好首先在邮件列表上讨论时间表，以便人们能够及时提交他们的代码，合并文档 wiki
    编辑等。设定日期后，创建一个新的维护/x.y.z 分支，在主分支中为下一个版本添加新的空发布说明并更新 Trac 里程碑。
- en: Make sure current branch builds a package correctly
  id: totrans-384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确保当前分支正确构建软件包
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PR 标题以 `REL` 开头时，CI 会构建轮子。在发布前，你的最后一个 PR 应该标记为如此，并且所有测试都应该通过。你也可以做如下操作：
- en: '[PRE34]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 有关构建过程的详细信息最好阅读下面的逐步说明。
- en: Note
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 下列步骤将为 beta 版、候选发布版本和最终发布版本重复进行。
- en: Check deprecations
  id: totrans-390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查弃用
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [创建发布分支](#branching) 之前，应该检查所有应该删除的弃用代码是否实际上已经删除，并且所有新的弃用都应该在文档字符串或弃用警告中说明代码将在哪个版本中被移除。
- en: Check the C API version number
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查 C API 版本号
- en: The C API version needs to be tracked in three places
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: C API 版本需要在三个地方跟踪
- en: numpy/core/setup_common.py
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py
- en: numpy/core/code_generators/cversions.txt
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/code_generators/cversions.txt
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h
- en: There are three steps to the process.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程分为三个步骤。
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 API 已更改，请在 setup_common.py 中递增 C_API_VERSION。只有当前 API 编译的任何代码都与上一个发布的 NumPy
    版本向后兼容时，API 才不会更改。任何对 C 结构的更改或对公共接口的增加都会使新的 API 不向后兼容。
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一步中的C_API_VERSION已更改，或者API的哈希已更改，则需要更新cversions.txt文件。要检查哈希值，请运行 numpy/core/cversions.py
    脚本，并注意打印的API哈希。如果该哈希与 numpy/core/code_generators/cversions.txt 中的最后一个哈希不匹配，则哈希已更改。使用适当的C_API_VERSION和哈希，将新条目添加到cversions.txt。如果API版本没有更改，但哈希值不同，则需要注释掉以前针对该API版本的条目。例如，在NumPy
    1.9中添加了注解，这更改了哈希值，但API与1.8中相同。哈希用作API更改的检查，但不是最终确定。
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果步骤1和2执行正确，编译发布版时不会出现“API不匹配检测”的警告。
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h 将需要一个新的NPY_X_Y_API_VERSION宏，其中X和Y是发布的主要和次要版本号。如果包含文件中的某些功能或宏已被弃用，则只需将分配给该宏的值从前一个版本递增即可。
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py 中的C ABI版本号应仅在主要发布版中进行更新。
- en: Check the release notes
  id: totrans-403
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查发布说明
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [towncrier](https://pypi.org/project/towncrier/) 构建发布说明并提交更改。这将从 `doc/release/upcoming_changes`
    中移除所有片段，并添加 `doc/release/<version>-note.rst`。
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-405
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: towncrier build –version “<version>” git commit -m”创建发布说明”
- en: Check that the release notes are up-to-date.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布说明是否最新。
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 使用突出部分更新发布说明。提及以下一些内容：
- en: major new features
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要新功能
- en: deprecated and removed features
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用和删除的功能
- en: supported Python versions
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的Python版本
- en: for SciPy, supported NumPy version(s)
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于SciPy，支持的NumPy版本
- en: outlook for the near future
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近期展望
- en: Agree on a release schedule
  id: totrans-413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 同意发布时间表
- en: A typical release schedule is one beta, two release candidates and a final release.
    It’s best to discuss the timing on the mailing list first, in order for people
    to get their commits in on time, get doc wiki edits merged, etc. After a date
    is set, create a new maintenance/x.y.z branch, add new empty release notes for
    the next version in the main branch and update the Trac Milestones.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的发布时间表是一个beta版，两个候选发布版和一个最终发布版。最好首先在邮件列表中讨论时间安排，以便人们及时提交其提交，合并文档维基编辑等。确定日期后，创建新的
    maintenance/x.y.z 分支，在主要分支中添加新的空的下一个版本的发布说明，并更新Trac里程碑。
- en: Make sure current branch builds a package correctly
  id: totrans-415
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确保当前分支正确构建软件包
- en: 'The CI builds wheels when a PR header begins with `REL`. Your last PR before
    releasing should be so marked and all the tests should pass. You can also do:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 当PR标题以 `REL` 开头时，CI将构建wheels。在发布之前，您的最后一个PR应标记为此，所有测试应通过。您也可以执行以下操作：
- en: '[PRE35]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For details of the build process itself, it is best to read the Step-by-Step
    Directions below.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 对于构建过程本身的详细信息，最好阅读下面的逐步说明。
- en: Note
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The following steps are repeated for the beta(s), release candidates(s) and
    the final release.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将重复适用于 beta版、候选发布版和终版发布版。
- en: Check deprecations
  id: totrans-421
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查废弃内容
- en: Before [the release branch is made](#branching), it should be checked that all
    deprecated code that should be removed is actually removed, and all new deprecations
    say in the docstring or deprecation warning what version the code will be removed.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建[发布分支](#branching)之前，应检查所有应该移除的废弃代码是否确实已移除，并且所有新的废弃代码都说在文档字符串或废弃警告中代码将在哪个版本中移除。
- en: Check the C API version number
  id: totrans-423
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查C API版本号
- en: The C API version needs to be tracked in three places
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: C API版本需要在三个地方进行跟踪
- en: numpy/core/setup_common.py
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py
- en: numpy/core/code_generators/cversions.txt
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/code_generators/cversions.txt
- en: numpy/core/include/numpy/numpyconfig.h
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h
- en: There are three steps to the process.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程分为三个步骤。
- en: If the API has changed, increment the C_API_VERSION in setup_common.py. The
    API is unchanged only if any code compiled against the current API will be backward
    compatible with the last released NumPy version. Any changes to C structures or
    additions to the public interface will make the new API not backward compatible.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果API已更改，请在setup_common.py中增加C_API_VERSION。只有当前API编译的任何代码与上一个发布的NumPy版本向后兼容时，API才不会更改。对C结构的任何更改或公共接口的任何添加将使新API不向后兼容。
- en: If the C_API_VERSION in the first step has changed, or if the hash of the API
    has changed, the cversions.txt file needs to be updated. To check the hash, run
    the script numpy/core/cversions.py and note the API hash that is printed. If that
    hash does not match the last hash in numpy/core/code_generators/cversions.txt
    the hash has changed. Using both the appropriate C_API_VERSION and hash, add a
    new entry to cversions.txt. If the API version was not changed, but the hash differs,
    you will need to comment out the previous entry for that API version. For instance,
    in NumPy 1.9 annotations were added, which changed the hash, but the API was the
    same as in 1.8\. The hash serves as a check for API changes, but it is not definitive.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一步中的C_API_VERSION已更改，或者API的哈希值已更改，则需要更新cversions.txt文件。要检查哈希值，请运行脚本numpy/core/cversions.py，并注意打印的API哈希值。如果该哈希值与numpy/core/code_generators/cversions.txt中的最后一个哈希值不匹配，则表示哈希值已更改。使用适当的C_API_VERSION和哈希值，向cversions.txt添加新条目。如果API版本没有更改，但哈希值不同，则需要注释掉该API版本的先前条目。例如，在NumPy
    1.9中添加了注释，这更改了哈希值，但API与1.8中的相同。哈希值用作API更改的检查，但并不是决定性的。
- en: If steps 1 and 2 are done correctly, compiling the release should not give a
    warning “API mismatch detect at the beginning of the build”.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果步骤1和步骤2正确完成，编译发布不应该出现警告“在构建开始时检测到API不匹配”。
- en: The numpy/core/include/numpy/numpyconfig.h will need a new NPY_X_Y_API_VERSION
    macro, where X and Y are the major and minor version numbers of the release. The
    value given to that macro only needs to be increased from the previous version
    if some of the functions or macros in the include files were deprecated.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: numpy/core/include/numpy/numpyconfig.h将需要一个新的NPY_X_Y_API_VERSION宏，其中X和Y是发布的主要和次要版本号。只需增加此宏的值，如果包含文件中的一些函数或宏已被弃用。
- en: The C ABI version number in numpy/core/setup_common.py should only be updated
    for a major release.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: numpy/core/setup_common.py中的C ABI版本号应仅在主要版本发布时更新。
- en: Check the release notes
  id: totrans-434
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查发布说明
- en: Use [towncrier](https://pypi.org/project/towncrier/) to build the release note
    and commit the changes. This will remove all the fragments from `doc/release/upcoming_changes`
    and add `doc/release/<version>-note.rst`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[towncrier](https://pypi.org/project/towncrier/)创建发布说明并提交更改。这将从`doc/release/upcoming_changes`中删除所有片段并添加`doc/release/<version>-note.rst`。
- en: towncrier build –version “<version>” git commit -m”Create release note”
  id: totrans-436
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: towncrier build –version "<version>" git commit -m”创建发布说明”
- en: Check that the release notes are up-to-date.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布说明是否最新。
- en: 'Update the release notes with a Highlights section. Mention some of the following:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 使用突出部分更新发布说明。提到以下一些内容：
- en: major new features
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要新功能
- en: deprecated and removed features
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弃用和移除的功能
- en: supported Python versions
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的Python版本
- en: for SciPy, supported NumPy version(s)
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于SciPy，支持的NumPy版本
- en: outlook for the near future
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展望不久的未来
- en: Step-by-step directions
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐步指导
- en: This is a walkthrough of the NumPy 1.21.0 release on Linux, modified for building
    with GitHub Actions and cibuildwheels and uploading to the [anaconda.org staging
    repository for NumPy](https://anaconda.org/multibuild-wheels-staging/numpy). The
    commands can be copied into the command line, but be sure to replace 1.21.0 by
    the correct version. This should be read together with the [general release guide](#prepare-release).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Linux上对NumPy 1.21.0版本的一次漫游，为了使用GitHub Actions和cibuildwheels进行构建，并上传到[NumPy的anaconda.org暂存库](https://anaconda.org/multibuild-wheels-staging/numpy)。这些命令可以复制到命令行中，但一定要确保用正确的版本替换1.21.0。这应该与[一般发布指南](#prepare-release)一起阅读。
- en: Facility preparation
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施准备
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始制作发布之前，使用`*_requirements.txt`文件确保您拥有所需的软件。大多数软件都可以使用pip安装，但有些将需要apt-get、dnf或您系统使用的其他软件。您还需要一个GitHub个人访问令牌（PAT）来推送文档。有几种方法可以简化流程：
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git可以设置使用密钥环来存储您的GitHub个人访问令牌。在网上搜索详细信息。
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`keyring`应用程序来存储twine的PyPI密码。有关详细信息，请参阅在线twine文档。
- en: Release preparation
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布准备
- en: Add/drop Python versions
  id: totrans-451
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加/删除Python版本
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 添加或删除Python版本时，需要编辑三个文件：
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.github/workflows/wheels.yml # 用于GitHub cibuildwheel'
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.travis.yml # 用于cibuildwheel aarch64构建'
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setup.py # 用于分类器和最低版本检查。'
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 对于必要情况，这些更改应在普通的主分支PR中进行备份。使用*BLD:*前缀（构建标签）的提交摘要将导致wheel构建运行，因此更改将被测试。我们目前在Python
    rc发布后一旦manylinux和cibuildwheel支持它，就会对新的Python版本发布wheels。对于Python 3.11，我们能够在rc1公告发布一周后发布。
- en: Backport Pull Requests
  id: totrans-457
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回溯拉取请求
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 已标记为此发布的更改必须被回溯到maintenance/1.21.x分支。
- en: Update release documentation
  id: totrans-459
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新发布文档
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行发布之前通常需要更新或创建四个文档：
- en: The changelog
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新记录
- en: The release-notes
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布说明
- en: The `.mailmap` file
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mailmap`文件'
- en: The `doc/source/release.rst` file
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc/source/release.rst`文件'
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改应作为针对维护分支的普通PR进行。发布后，除了`doc/source/release.rst`之外的所有文件都需要被前向移植到主分支。
- en: Generate the changelog
  id: totrans-466
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成更改日志
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 更改日志是使用更改日志工具生成的：
- en: '[PRE36]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`GITHUB`包含您的GitHub访问令牌。文本将需要检查非标准的贡献者名称，并删除dependabot条目。最好删除可能存在于PR标题中的任何链接，因为它们在markdown中无法很好地转化，用等宽文本替换它们。非标准的贡献者名称应通过更新`.mailmap`文件进行修正，这是一项大量的工作。最好在达到这一点之前进行几次试运行，并使用GitHub问题ping那些恶意行为者以获得所需的信息。
- en: Finish the release notes
  id: totrans-470
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发布说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个系列中的第一个发布，将生成发布说明，请参阅`doc/release/upcoming_changes/README.rst`中的发布说明以了解如何操作。生成发布说明也会删除`doc/release/upcoming_changes/`中的所有新闻片段文件。
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的发布说明始终需要一些修复，需要编写简介，并应该突出显示重大更改。对于补丁发布，changelog 文本可能也会被附加，但对于初始发布则不会，因为它太长了。查看以前的发布说明以了解如何操作。请注意，如果有顶部的
    `:orphan:` 标记，则需要将其更改为 `.. currentmodule:: numpy`，并需要更新 `doc/source/release.rst`
    索引文件。'
- en: Check the `pavement.py` file
  id: totrans-473
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查 `pavement.py` 文件
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 pavement.py 文件是否指向了正确的发布说明。它应该在上次发布之后已经更新，但如果没有，请立即修复：
- en: '[PRE37]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Release walkthrough
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布的步骤
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在下面的代码片段中，`upstream` 指的是 GitHub 上的根存储库，`origin` 指的是您个人 GitHub 存储库中的分支。如果您没有从存储库中派生出一个分支，而只是在本地克隆了它，您可能需要进行一些修改。您还可以编辑
    `.git/config` 并添加 `upstream`，如果它还没有出现的话。
- en: 1\. Prepare the release commit
  id: totrans-478
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 准备发布提交
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 检出发布的分支，确保它是最新的，并清理仓库：
- en: '[PRE38]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Sanity check:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 审查
- en: '[PRE39]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 给发布打上标签并推送标签。这需要对 numpy 仓库有写权限：
- en: '[PRE40]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您由于错误而需要删除标签：
- en: '[PRE41]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 2\. Build wheels
  id: totrans-487
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 构建 wheels
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-488
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 通过 cibuildwheel 构建 wheels（首选方法）
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程开始时标记构建将会触发会通过 cibuildwheel 构建 wheel 并将 wheels 和一个 sdist 上传到暂存库。在 github
    actions 上的 CI 运行（对于所有基于 x86 的和 macOS arm64 的 wheels）大约需要 1 1/4 小时。在 travis 上（对于
    aarch64）的 CI 运行需要较少的时间。您可以在[暂存库](https://anaconda.org/multibuild-wheels-staging/numpy/files)中检查已上传的文件，但请注意它与您所看到的运行任务的实时同步程度不是很高。
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望手动触发一个 wheel 构建，可以这样做：
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    上有一个“Run workflow”的按钮，点击它并选择要构建的标签
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [travis](https://app.travis-ci.com/github/numpy/numpy) 上有一个“More Options”的按钮，点击它并选择一个要构建的分支。似乎没有构建标签的选项。
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个 wheel 构建由于不相关原因失败，您可以单独重新运行它：
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 github actions 中选择[Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)点击包含要重新运行的构建的提交。在左边有一个
    wheel 构建的列表，选择您要重新运行的构建，并在生成的页面上点击逆时针方向的箭头按钮。
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [travis](https://app.travis-ci.com/github/numpy/numpy) 上选择失败的构建，这将带您进入该构建的
    travis 作业。点击重新开始作业按钮。
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您需要重新运行作业，则需要删除上传的文件（如果有的话），在 anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files)
    中，旧文件不会被覆盖。
- en: 3\. Download wheels
  id: totrans-497
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 下载轮子
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有轮子成功构建并暂存后，使用 `tools/download-wheels.py` 脚本从 Anaconda 暂存目录下载它们：
- en: '[PRE42]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 4\. Generate the README files
  id: totrans-500
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 生成 README 文件
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要在所有安装程序都被下载后进行，但是在 pavement 文件更新为持续开发之前：
- en: '[PRE43]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5\. 将维护分支重置为开发状态（对于预发布版本跳过）
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 为下一个版本创建发布说明并编辑它们以设置版本。这些说明将是骨架，并且内容很少：
- en: '[PRE44]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 将新版本说明添加到文档发布列表中，并更新 `pavement.py` 中的 `RELEASE_NOTES` 变量：
- en: '[PRE45]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Commit the result:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 提交结果：
- en: '[PRE46]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 6\. Upload to PyPI
  id: totrans-510
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6\. 上传到PyPI
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `twine` 将其上传到 PyPI。最近的 PyPI 更改后需要一个最新版本的 `twine`，这里使用的是版本 `3.4.1`：
- en: '[PRE47]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个命令在中途中断，您可能需要有选择地上传剩余的文件，因为 PyPI 不允许同一文件上传两次。应最后上传源文件以避免同步问题，这可能会导致 pip
    用户在此过程中访问文件时出现 pip 从源代码构建而不是下载二进制 wheels。PyPI仅允许单个源分发，这里我们选择了zip归档文件。
- en: 7\. Upload files to github
  id: totrans-514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7\. 将文件上传到github
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases)，应该有一个
    `v1.21.0 tag`，点击它并点击该标签的编辑按钮。有两种方法可以添加文件，使用可编辑的文本窗口和作为二进制上传。首先编辑从 rst 版本使用 pandoc
    转换的 `release/README.md`。需要修复的内容：如果包括，来自更改日志的 PR 行将被包装，需要解包，链接应改为等宽文本。然后将内容复制到剪贴板并粘贴到文本窗口中。可能需要多次尝试才能让它看起来正确。然后
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `release/installers/numpy-1.21.0.tar.gz` 上传为二进制文件。
- en: Upload `release/README.rst` as a binary file.
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `release/README.rst` 上传为二进制文件。
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `doc/changelog/1.21.0-changelog.rst` 上传为二进制文件。
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是一个预发布版本，请勾选预发布按钮。
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底部点击`{发布，更新}发布`按钮。
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 8\. 将文档上传到 numpy.org（对于预发布跳过）
- en: Note
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒
- en: You will need a GitHub personal access token to push the update.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要一个GitHub个人访问令牌来推送更新。
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤仅适用于最终发布，对于预发布和大多数补丁发布可以跳过。`make merge-doc`会将 `numpy/doc` 仓库克隆到 `doc/build/merge`，并使用新文档进行更新：
- en: '[PRE48]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布系列是新的，您将需要在 `doc/build/merge/index.html` 首页的“insert here”注释下添加一个新部分：
- en: '[PRE49]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更新version-switcher json文件以添加新版本并更新标记为*(稳定)*的版本：
- en: '[PRE50]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，只需将`zip`链接更新为新的标签名称。由于我们不再生成`pdf`文件，如果有，删除`pdf`文件的行：
- en: '[PRE51]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中“测试运行”新文档，以确保链接有效：
- en: '[PRE52]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Update the stable link and update:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 更新稳定的链接并更新：
- en: '[PRE53]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来令人满意之后，更新、提交并上传更改：
- en: '[PRE54]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-538
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9\. 在numpy.org上发布发布公告（预发布时跳过）
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经fork了[https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org)：
- en: '[PRE55]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有发布，转到页面底部添加一个一行链接。查看以前的链接示例。
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于循环中的`*.0`发布，向顶部添加一个新的部分，简要描述新功能并将新闻链接指向它。
- en: 'commit and push:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 提交并推送：
- en: '[PRE56]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Go to your Github fork and make a pull request.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 转到你的Github分支并发起一个拉取请求。
- en: 10\. Announce to mailing lists
  id: totrans-546
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10\. 在邮件列表上发布公告
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 发布应该在numpy-discussion、scipy-devel、scipy-user和python-announce-list邮件列表上宣布。查看以前的公告获得基本模板。贡献者和PR列表与上面的发布说明生成的相同。如果你交叉发布，请确保python-announce-list是BCC，这样答复不会发送到该列表。
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-548
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11\. 发布后任务（预发布时跳过）
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 检出main并推送文档更改：
- en: '[PRE57]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Go to GitHub and make a PR.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 转到GitHub并发起一个PR。
- en: 12\. Update oldest-supported-numpy
  id: totrans-552
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12\. 更新oldest-supported-numpy
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个版本是支持新Python版本的第一个版本，或者是提供新平台或PyPy版本的第一个版本，[https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)中的版本固定应该被更新。要么提交带有`setup.cfg`修改的PR，要么提出一个需要改变信息的问题。
- en: Facility preparation
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施准备
- en: 'Before beginning to make a release, use the `*_requirements.txt` files to ensure
    that you have the needed software. Most software can be installed with pip, but
    some will require apt-get, dnf, or whatever your system uses for software. You
    will also need a GitHub personal access token (PAT) to push the documentation.
    There are a few ways to streamline things:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始发布之前，请使用`*_requirements.txt`文件确保你有所需的软件。大多数软件可以用pip安装，但有些需要apt-get，dnf或你的系统用于软件的任何内容。你还需要一个GitHub个人访问令牌（PAT）来推送文档。有几种方式可以简化事情：
- en: Git can be set up to use a keyring to store your GitHub personal access token.
    Search online for the details.
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以设置Git来使用一个钥匙环来存储你的GitHub个人访问令牌。搜索网上的详细信息。
- en: You can use the `keyring` app to store the PyPI password for twine. See the
    online twine documentation for details.
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用`keyring`应用程序来存储twine的PyPI密码。请查看twine在线文档获取详细信息。
- en: Release preparation
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布准备
- en: Add/drop Python versions
  id: totrans-559
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加/删除Python版本
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加或删除Python版本时，需要编辑三个文件：
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.github/workflows/wheels.yml # 用于github cibuildwheel'
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.travis.yml # 用于cibuildwheel aarch64构建'
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setup.py # 用于分类器和最低版本检查。'
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支上制作这些更改，并且如有必要，则回溯。在提交摘要中使用 *BLD:* 前缀（构建标签）将导致运行wheel构建，以便测试更改。我们目前在首个 Python
    rc 之后发布新 Python 版本的 wheels，一旦 manylinux 和 cibuildwheel 支持它。对于 Python 3.11，我们能够在
    rc1 发布后的一周内发布。
- en: Backport Pull Requests
  id: totrans-565
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回溯 Pull Requests
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 已标记为此版本的更改必须回溯到 maintenance/1.21.x 分支。
- en: Update release documentation
  id: totrans-567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新发布文档
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 发布前通常需要更新或创建四个文档：
- en: The changelog
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: changelog
- en: The release-notes
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布说明
- en: The `.mailmap` file
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mailmap` 文件'
- en: The `doc/source/release.rst` file
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc/source/release.rst` 文件'
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改应作为针对 maintenance 分支的普通 PR 进行。发布后，除了 `doc/source/release.rst` 文件外，所有文件都需要向主分支合并。
- en: Generate the changelog
  id: totrans-574
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成changelog
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: changelog 是使用 changelog 工具生成的：
- en: '[PRE58]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `GITHUB` 包含您的 GitHub 访问令牌。需要检查文本以查找非标准的贡献者名称，并删除 dependabot 条目。此外，最好删除可能存在于
    PR 标题中的任何链接，因为它们在转换为 Markdown 时表现不佳，用等宽文本替换它们。非标准的贡献者名称应通过更新 `.mailmap` 文件来修复，这是很多工作。最好在达到这一点之前进行几次试运行，并使用
    GitHub 问题通知违规者获取所需的信息。
- en: Finish the release notes
  id: totrans-578
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发布说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是系列中的第一个发布，将生成发布说明，请参阅 `doc/release/upcoming_changes/README.rst` 中的发布说明，以了解如何做到这一点。生成发布说明还将删除
    `doc/release/upcoming_changes/` 中的所有新闻片段文件。
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的发布说明始终需要一些修复，介绍需要撰写，并且重大更改应该被突出显示。对于补丁发布，changelog 文本也可以被附加，但对于初始发布则不用，因为太长了。查看以前的发布说明，以了解如何做到这一点。请注意，顶部的
    `:orphan:` 标记（如果存在）将需要更改为 `.. currentmodule:: numpy`，并且 `doc/source/release.rst`
    索引文件将需要更新。'
- en: Check the `pavement.py` file
  id: totrans-581
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查 `pavement.py` 文件
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 pavement.py 文件是否指向正确的发布说明。它应该在上次发布后已被更新，但如果没有，请立即修复：
- en: '[PRE59]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Add/drop Python versions
  id: totrans-584
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加/删除 Python 版本
- en: 'When adding or dropping Python versions, three files need to be edited:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加或删除Python版本时，需要编辑三个文件：
- en: '.github/workflows/wheels.yml # for github cibuildwheel'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.github/workflows/wheels.yml # 用于 github cibuildwheel'
- en: '.travis.yml # for cibuildwheel aarch64 builds'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '.travis.yml # 用于 cibuildwheel aarch64 构建'
- en: 'setup.py # for classifier and minimum version check.'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'setup.py # 用于分类器和最低版本检查。'
- en: Make these changes in an ordinary PR against main and backport if necessary.
    Using the *BLD:* prefix (build label) for the commit summary will cause the wheel
    builds to be run so that the changes will be tested, We currently release wheels
    for new Python versions after the first Python rc once manylinux and cibuildwheel
    support it. For Python 3.11 we were able to release within a week of the rc1 announcement.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通PR中进行这些更改，并在必要时回溯。在提交摘要中使用*BLD:*前缀（构建标签）将导致运行轮子构建，以便进行测试，我们当前在Python rc发布后发布新Python版本的轮子，一旦manylinux和cibuildwheel支持它。对于Python
    3.11，我们能够在rc1发布公告后一周内发布。
- en: Backport Pull Requests
  id: totrans-590
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回溯拉取请求
- en: Changes that have been marked for this release must be backported to the maintenance/1.21.x
    branch.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 为本版本标记的更改必须回溯到maintenance/1.21.x分支。
- en: Update release documentation
  id: totrans-592
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新发行文档
- en: 'Four documents usually need to be updated or created before making a release:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布之前通常需要更新或创建四个文档：
- en: The changelog
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成changelog
- en: The release-notes
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发行说明
- en: The `.mailmap` file
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.mailmap`文件'
- en: The `doc/source/release.rst` file
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doc/source/release.rst`文件'
- en: These changes should be made as an ordinary PR against the maintenance branch.
    After release all files except `doc/source/release.rst` will need to be forward
    ported to the main branch.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改应作为普通PR针对maintenance分支进行。发布后，除`doc/source/release.rst`之外的所有文件都需要被前向移植到main分支。
- en: Generate the changelog
  id: totrans-599
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成changelog
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 生成changelog使用changelog工具：
- en: '[PRE60]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '`GITHUB`中包含您的GitHub访问令牌。需要检查文本中是否存在非标准贡献者名称，并删除dependabot条目。删除可能存在于PR标题中的任何链接也是个好主意，因为它们在markdown中翻译效果不佳，用单间隔文本替换它们。非标准贡献者名称应通过更新`.mailmap`文件来修复，这是一项很多工作。最好在达到这一点之前进行几次试运行，并使用GitHub问题ping到恶意行为者以获取所需信息。'
- en: Finish the release notes
  id: totrans-603
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发行说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是系列中的第一个发布版本，则生成发行说明，请参阅`doc/release/upcoming_changes/README.rst`中的发布说明查看如何完成此操作。生成发行说明也将删除`doc/release/upcoming_changes/`中的所有新闻片段文件。
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的发行说明总是需要一些修复，需要编写简介，并应指出重大更改。对于补丁版本，changelog文本也可能被附加，但对于初始发布来说太长了。检查以前的发行说明可以看到这是如何完成的。注意，如果存在顶部的`:orphan:`标记，需要改为`..
    currentmodule:: numpy`，并且需要更新`doc/source/release.rst`索引文件。'
- en: Check the `pavement.py` file
  id: totrans-606
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查`pavement.py`文件
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`pavement.py`文件是否指向正确的发行说明。它应该在上次发布后已更新，但如果没有，现在修复它：
- en: '[PRE61]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Generate the changelog
  id: totrans-609
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 生成changelog
- en: 'The changelog is generated using the changelog tool:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 生成changelog使用changelog工具：
- en: '[PRE62]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: where `GITHUB` contains your GitHub access token. The text will need to be checked
    for non-standard contributor names and dependabot entries removed. It is also
    a good idea to remove any links that may be present in the PR titles as they don’t
    translate well to markdown, replace them with monospaced text. The non-standard
    contributor names should be fixed by updating the `.mailmap` file, which is a
    lot of work. It is best to make several trial runs before reaching this point
    and ping the malefactors using a GitHub issue to get the needed information.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `GITHUB` 包含你的 GitHub 访问令牌。需要检查文本中是否有非标准的贡献者姓名，并删除 dependabot 的条目。此外，还应该删除
    PR 标题中可能存在的任何链接，因为它们无法很好地转换为 Markdown，用等宽字体文本替换它们。非标准的贡献者姓名应该通过更新 `.mailmap` 文件进行修复，这是一项很大的工作。最好在达到这一点之前进行几次试验运行，并使用
    GitHub issue 提醒犯错误的人获取所需信息。
- en: Finish the release notes
  id: totrans-613
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 完成发布说明
- en: If this is the first release in a series the release note is generated, see
    the release note in `doc/release/upcoming_changes/README.rst` to see how to do
    this. Generating the release notes will also delete all the news fragment files
    in `doc/release/upcoming_changes/`.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个系列中的第一个发布，则生成发布说明，参见 `doc/release/upcoming_changes/README.rst` 中的发布说明如何生成。生成发布说明还会删除
    `doc/release/upcoming_changes/` 中的所有 news fragment 文件。
- en: 'The generated release note will always need some fixups, the introduction will
    need to be written, and significant changes should be called out. For patch releases
    the changelog text may also be appended, but not for the initial release as it
    is too long. Check previous release notes to see how this is done. Note that the
    `:orphan:` markup at the top, if present, will need changing to `.. currentmodule::
    numpy` and the `doc/source/release.rst` index file will need updating.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '生成的发布说明始终需要进行一些修正，需要编写简介，并突出显示重要更改。对于补丁发布，还可以追加更改日志文字，但对于初始发布则不需要，因为它太长了。查看以前的发布说明以了解如何处理。请注意，如果存在顶部的
    `:orphan:` 标记，则需要更改为 `.. currentmodule:: numpy`，并且需要更新 `doc/source/release.rst`
    索引文件。'
- en: Check the `pavement.py` file
  id: totrans-616
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 检查 `pavement.py` 文件
- en: 'Check that the pavement.py file points to the correct release notes. It should
    have been updated after the last release, but if not, fix it now:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 pavement.py 文件是否指向了正确的发布说明。它应该在上次发布后进行了更新，但如果没有，请立即修复：
- en: '[PRE63]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Release walkthrough
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布步骤
- en: Note that in the code snippets below, `upstream` refers to the root repository
    on GitHub and `origin` to its fork in your personal GitHub repositories. You may
    need to make adjustments if you have not forked the repository but simply cloned
    it locally. You can also edit `.git/config` and add `upstream` if it isn’t already
    present.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在下面的代码片段中，`upstream` 指的是 GitHub 上的根仓库，`origin` 指的是你个人 GitHub 仓库上的 fork。如果你没有
    fork 仓库，而是仅仅在本地克隆了仓库，那么你可能需要进行调整。如果 `.git/config` 中没有 `upstream`，你还可以编辑它并添加上。
- en: 1\. Prepare the release commit
  id: totrans-621
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 准备发布提交
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 检出发布的分支，确保它是最新的，并清除仓库：
- en: '[PRE64]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Sanity check:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性检查：
- en: '[PRE65]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 给发布打标签并推送标签。这需要对 numpy 仓库有写入权限：
- en: '[PRE66]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要删除由于错误而创建的标签：
- en: '[PRE67]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 2\. Build wheels
  id: totrans-630
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 构建 wheels
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-631
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 通过 cibuildwheel 构建 wheels（首选）
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程开始时给构建打上标签，将会触发通过 cibuildwheel 构建 wheel 并将 wheels 和 sdist 上传到 staging 仓库。通过
    github actions 进行的 CI 运行（针对所有基于 x86 的和 macOS 的 arm64 wheels）需要大约 1 1/4 小时。针对 aarch64
    的 travis 上的 CI 运行所需时间较短。你可以在[staging 仓库](https://anaconda.org/multibuild-wheels-staging/numpy/files)中检查上传的文件，但请注意它与正在运行的作业的运行情况不是非常同步。
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望手动触发构建 wheel，可以这样做：
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    中有一个“Run workflow”按钮，点击它并选择要构建的标签
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上有一个“更多选项”按钮，点击它并选择要构建的分支。看起来没有构建标签的选项。
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因为与其它原因而导致轮子构建失败，您可以单独重新运行它：
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在github actions中选择[Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)，点击包含您想重新运行的构建的提交。左侧有一个轮子构建列表，选择您想要重新运行的构建，在生成的页面上点击逆时针箭头按钮。
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上选择失败的构建，这将带您到该构建的travis
    job。点击重新启动作业按钮。
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果确实需要重新运行作业，您需要删除anaconda [分段存储库](https://anaconda.org/multibuild-wheels-staging/numpy/files)中已上传的文件。旧文件不会被覆盖。
- en: 3\. Download wheels
  id: totrans-640
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 下载wheels
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有的wheels都已经成功构建并进行了分段处理后，使用`tools/download-wheels.py`脚本从Anaconda分段目录下载它们：
- en: '[PRE68]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 4\. Generate the README files
  id: totrans-643
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 生成README文件
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要在下载所有安装程序之后完成，但在更新pavement文件以进行持续开发之前：
- en: '[PRE69]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-646
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5\. 将维护分支重置为开发状态（prereleases可略过）
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 为下一个发布创建发布说明，并进行编辑以设置版本。这些说明将作为骨架，内容较少：
- en: '[PRE70]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '将新的发布说明添加到文档发布列表中，并更新`pavement.py`中的`RELEASE_NOTES`变量:'
- en: '[PRE71]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Commit the result:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 提交结果：
- en: '[PRE72]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 6\. Upload to PyPI
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6\. 上传到PyPI
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`twine`上传到PyPI。最近PyPI更改后需要一个最新版本的`twine`，这里使用的是版本`3.4.1`：
- en: '[PRE73]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个命令在中途中断，您可能需要选择性地上传剩余的文件，因为PyPI不允许上传相同的文件两次。应该最后上传源文件，以避免同步问题，当pip用户在此过程中访问文件时可能发生同步问题，导致pip构建源文件而非下载二进制wheel。PyPI只允许单个源分发,
    在这里我们选择了zip归档。
- en: 7\. Upload files to github
  id: totrans-657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7\. 上传文件到github
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases)，应该有一个`v1.21.0
    tag`，点击它并点击该标签的编辑按钮。有两种方式可以添加文件，一种是使用可编辑的文本窗口，另一种是使用二进制上传。首先编辑从rst版本使用pandoc翻译而来的`release/README.md`。需要修复的问题：如果包括，来自修改日志的PR行被换行包裹，需要取消换行包裹，链接应改为等宽文本。然后将内容复制到剪贴板，粘贴到文本窗口中。可能需要尝试几次才能让它看起来正确。然后
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传`release/installers/numpy-1.21.0.tar.gz`作为二进制文件。
- en: Upload `release/README.rst` as a binary file.
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传`release/README.rst`作为二进制文件。
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传`doc/changelog/1.21.0-changelog.rst`作为二进制文件。
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是预发布版本，请选中预发布按钮。
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击页面底部的`{Publish,Update} release`按钮。
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-664
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 8\. 将文档上传到numpy.org（跳过预发布）
- en: Note
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need a GitHub personal access token to push the update.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个GitHub个人访问令牌来推送更新。
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤只适用于最终发布，对于预发布和大多数补丁发布，可以跳过`make merge-doc`克隆`numpy/doc`存储库到`doc/build/merge`并使用新文档更新它：
- en: '[PRE74]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布系列是新的，你需要在“insert here”注释后立即在`doc/build/merge/index.html`首页添加一个新的章节：
- en: '[PRE75]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更新版本切换器json文件以添加新版本并更新标记为*（stable）*的版本：
- en: '[PRE76]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，只有`zip`链接应该使用新的标签名称更新。由于我们不再生成`pdf`文件，如果存在的话，删除`pdf`文件的行：
- en: '[PRE77]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在浏览器中“测试运行”新文档，确保链接有效：
- en: '[PRE78]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Update the stable link and update:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 更新稳定链接和更新：
- en: '[PRE79]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来令人满意后，更新、提交和上传更改：
- en: '[PRE80]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-681
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9\. 在numpy.org上宣布发布（跳过预发布）
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设您已经fork了[https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org)：
- en: '[PRE81]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有发布版本，转到页面底部并添加一行链接。看看以前的链接作为例子。
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于循环中的`*.0`版本，在顶部添加一个新的章节，并简要介绍新功能，并将新闻链接指向它。
- en: 'commit and push:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 提交并推送：
- en: '[PRE82]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Go to your Github fork and make a pull request.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 转到你的Github分支并创建一个PR。
- en: 10\. Announce to mailing lists
  id: totrans-689
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10\. 在邮件列表中宣布
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 发布应该在numpy-discussion, scipy-devel, scipy-user和python-announce-list邮件列表上宣布。查看以前的公告以获取基本模板。贡献者和PR列表与上面生成的发布说明相同。如果交叉发布，请确保python-announce-list是BCC，这样回复将不会发送到该列表。
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-691
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11\. 发布后任务（跳过预发布）
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到主分支并向前推送文档更改：
- en: '[PRE83]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Go to GitHub and make a PR.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 转到GitHub并创建PR。
- en: 12\. Update oldest-supported-numpy
  id: totrans-695
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12\. 更新oldest-supported-numpy
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此发布是第一个支持新的Python版本，或者第一个为新平台或PyPy版本提供wheels的版本，应该更新[https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)中的版本设置。要么提交带有`setup.cfg`更改的PR，要么发布一个包含所需更改信息的问题。
- en: 1\. Prepare the release commit
  id: totrans-697
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 准备发布提交
- en: 'Checkout the branch for the release, make sure it is up to date, and clean
    the repository:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到发布分支，确保它是最新的，并清理存储库：
- en: '[PRE84]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Sanity check:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 检查：
- en: '[PRE85]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Tag the release and push the tag. This requires write permission for the numpy
    repository:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 给发布打上标签并推送标签。这需要对numpy存储库的写入权限：
- en: '[PRE86]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'If you need to delete the tag due to error:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要因错误删除标签：
- en: '[PRE87]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 2\. Build wheels
  id: totrans-706
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 构建wheels
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-707
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 通过cibuildwheel构建wheels（首选）
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: Build wheels via cibuildwheel (preferred)
  id: totrans-716
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Tagging the build at the beginning of this process will trigger a wheel build
    via cibuildwheel and upload wheels and an sdist to the staging repo. The CI run
    on github actions (for all x86-based and macOS arm64 wheels) takes about 1 1/4
    hours. The CI run on travis (for aarch64) takes less time. You can check for uploaded
    files at the [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    but note that it is not closely synched with what you see of the running jobs.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to manually trigger a wheel build, you can do so:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: On github actions -> [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    there is a “Run workflow” button, click on it and choose the tag to build
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) there is a “More Options”
    button, click on it and choose a branch to build. There does not appear to be
    an option to build a tag.
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If a wheel build fails for unrelated reasons, you can rerun it individually:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: On github actions select [Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)
    click on the commit that contains the build you want to rerun. On the left there
    is a list of wheel builds, select the one you want to rerun and on the resulting
    page hit the counterclockwise arrows button.
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在github动作中选择[Wheel builder](https://github.com/numpy/numpy/actions/workflows/wheels.yml)，点击包含您要重新运行的构建的提交。在左侧有一个轮子构建列表，选择您要重新运行的构建，在生成的页面上点击逆时针箭头按钮。
- en: On [travis](https://app.travis-ci.com/github/numpy/numpy) select the failing
    build, which will take you to the travis job for that build. Hit the restart job
    button.
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[travis](https://app.travis-ci.com/github/numpy/numpy)上选择失败的构建，这将带您到该构建的travis作业。点击重新开始作业按钮。
- en: Note that if you do need to rerun jobs, you will need to delete the uploaded
    file, if any, in the anaconda [staging repository](https://anaconda.org/multibuild-wheels-staging/numpy/files),
    The old files will not be overwritten.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果需要重新运行作业，您需要删除在anaconda的[存储库](https://anaconda.org/multibuild-wheels-staging/numpy/files)中上传的任何文件。旧文件将不会被覆盖。
- en: 3\. Download wheels
  id: totrans-725
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 3\. 下载轮子
- en: 'When the wheels have all been successfully built and staged, download them
    from the Anaconda staging directory using the `tools/download-wheels.py` script:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有轮子都成功构建并暂存时，使用`tools/download-wheels.py`脚本从Anaconda暂存目录下载它们：
- en: '[PRE88]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 4\. Generate the README files
  id: totrans-728
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 4\. 生成README文件
- en: 'This needs to be done after all installers are downloaded, but before the pavement
    file is updated for continued development:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要在下载所有安装程序之后完成，但在更新pavement文件以继续开发之前完成：
- en: '[PRE89]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 5\. Reset the maintenance branch into a development state (skip for prereleases)
  id: totrans-731
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 5\. 将维护分支重置为开发状态（预发布跳过）
- en: 'Create release notes for next release and edit them to set the version. These
    notes will be a skeleton and have little content:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 为下一个发布创建发布说明，并编辑以设置版本。这些说明将是一个骨架，并且内容很少：
- en: '[PRE90]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Add new release notes to the documentation release list and update the `RELEASE_NOTES`
    variable in `pavement.py`:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新发布说明到文档发布列表中，并更新`pavement.py`中的`RELEASE_NOTES`变量：
- en: '[PRE91]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Commit the result:'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 提交结果：
- en: '[PRE92]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 6\. Upload to PyPI
  id: totrans-738
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 6\. 上传到PyPI
- en: 'Upload to PyPI using `twine`. A recent version of `twine` of is needed after
    recent PyPI changes, version `3.4.1` was used here:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`twine`上传到PyPI。由于PyPI最近的更改，需要使用最新版本的`twine`，此处使用的版本是`3.4.1`：
- en: '[PRE93]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: If one of the commands breaks in the middle, you may need to selectively upload
    the remaining files because PyPI does not allow the same file to be uploaded twice.
    The source file should be uploaded last to avoid synchronization problems that
    might occur if pip users access the files while this is in process, causing pip
    to build from source rather than downloading a binary wheel. PyPI only allows
    a single source distribution, here we have chosen the zip archive.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中一个命令在中间中断，您可能需要选择性地上传剩余的文件，因为PyPI不允许相同的文件上传两次。为了避免同步问题，最后应该上传源文件，即使pip用户在此过程中访问文件，也不会引起从源代码构建而不是下载二进制轮子。PyPI只允许单个源分发，我们选择了zip存档。
- en: 7\. Upload files to github
  id: totrans-742
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 7\. 将文件上传到github
- en: 'Go to [https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases),
    there should be a `v1.21.0 tag`, click on it and hit the edit button for that
    tag. There are two ways to add files, using an editable text window and as binary
    uploads. Start by editing the `release/README.md` that is translated from the
    rst version using pandoc. Things that will need fixing: PR lines from the changelog,
    if included, are wrapped and need unwrapping, links should be changed to monospaced
    text. Then copy the contents to the clipboard and paste them into the text window.
    It may take several tries to get it look right. Then'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://github.com/numpy/numpy/releases](https://github.com/numpy/numpy/releases)，那里应该有一个`v1.21.0
    tag`，点击它并点击该标签的编辑按钮。有两种方法可以添加文件，一种是使用可编辑的文本窗口，另一种是使用二进制上传。首先编辑从rst版本使用pandoc翻译的`release/README.md`。需要修复的问题：如果包括PR行，则需要调整，链接应更改为等宽文本。然后复制内容到剪贴板，并粘贴到文本窗口中。可能需要多次尝试才能让它看起来正确。然后
- en: Upload `release/installers/numpy-1.21.0.tar.gz` as a binary file.
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以二进制文件上传`release/installers/numpy-1.21.0.tar.gz`。
- en: Upload `release/README.rst` as a binary file.
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以二进制文件上传`release/README.rst`。
- en: Upload `doc/changelog/1.21.0-changelog.rst` as a binary file.
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以二进制文件上传`doc/changelog/1.21.0-changelog.rst`。
- en: Check the pre-release button if this is a pre-releases.
  id: totrans-747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是一个预发布版本，请勾选预发布按钮。
- en: Hit the `{Publish,Update} release` button at the bottom.
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底部点击`{发布，更新}发布`按钮。
- en: 8\. Upload documents to numpy.org (skip for prereleases)
  id: totrans-749
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 8\. 将文档上传到numpy.org（预发布跳过）
- en: Note
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need a GitHub personal access token to push the update.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要 GitHub 个人访问令牌来推送更新。
- en: 'This step is only needed for final releases and can be skipped for pre-releases
    and most patch releases. `make merge-doc` clones the `numpy/doc` repo into `doc/build/merge`
    and updates it with the new documentation:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤仅适用于最终发布，并可跳过预发布和大多数补丁发布。 `make merge-doc` 将 `numpy/doc` 存储库克隆到 `doc/build/merge`
    并使用新文档更新它：
- en: '[PRE94]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'If the release series is a new one, you will need to add a new section to the
    `doc/build/merge/index.html` front page just after the “insert here” comment:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布系列是新的，则需要在 `doc/build/merge/index.html` 首页的“在此处插入”注释后添加新的部分：
- en: '[PRE95]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Further, update the version-switcher json file to add the new release and update
    the version marked *(stable)*:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，更新版本切换器 json 文件以添加新版本并更新标记为 *(稳定)* 的版本：
- en: '[PRE96]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Otherwise, only the `zip` link should be updated with the new tag name. Since
    we are no longer generating `pdf` files, remove the line for the `pdf` files if
    present:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，仅应使用新的标记名称更新 `zip` 链接。由于我们不再生成 `pdf` 文件，如果存在，删除 `pdf` 文件的行：
- en: '[PRE97]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'You can “test run” the new documentation in a browser to make sure the links
    work:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在浏览器中“测试运行”新文档，以确保链接正常：
- en: '[PRE98]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Update the stable link and update:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 更新稳定链接并更新：
- en: '[PRE99]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Once everything seems satisfactory, update, commit and upload the changes:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来令人满意后，更新、提交并上传更改：
- en: '[PRE100]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 9\. Announce the release on numpy.org (skip for prereleases)
  id: totrans-766
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 9\. 在 numpy.org 上宣布发布（跳过预发布）
- en: 'This assumes that you have forked [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org):'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设您已经派生了 [https://github.com/numpy/numpy.org](https://github.com/numpy/numpy.org)：
- en: '[PRE101]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: For all releases, go to the bottom of the page and add a one line link. Look
    to the previous links for example.
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有发布版本，请转到页面底部并添加一行链接。参考以前的链接示例。
- en: For the `*.0` release in a cycle, add a new section at the top with a short
    description of the new features and point the news link to it.
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于循环中的 `*.0` 发布，在顶部添加一个新特性的简短描述并将新闻链接指向它。
- en: 'commit and push:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 提交并推送：
- en: '[PRE102]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Go to your Github fork and make a pull request.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的 Github 派生版本并提出拉取请求。
- en: 10\. Announce to mailing lists
  id: totrans-774
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 10\. 在邮件列表上宣布
- en: The release should be announced on the numpy-discussion, scipy-devel, scipy-user,
    and python-announce-list mailing lists. Look at previous announcements for the
    basic template. The contributor and PR lists are the same as generated for the
    release notes above. If you crosspost, make sure that python-announce-list is
    BCC so that replies will not be sent to that list.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 发布应该在 numpy-discussion、scipy-devel、scipy-user 和 python-announce-list 邮件列表上宣布。查看以前的公告以获取基本模板。贡献者和
    PR 列表与上述发布说明生成的相同。如果跨帖，请确保 python-announce-list 是密件抄送，以便回复不会发送到该列表。
- en: 11\. Post-release tasks (skip for prereleases)
  id: totrans-776
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 11\. 发布后任务（对于预发布，请跳过）
- en: 'Checkout main and forward port the documentation changes:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 检出主分支并将文档更改向前移植：
- en: '[PRE103]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Go to GitHub and make a PR.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 GitHub 并创建一个 PR。
- en: 12\. Update oldest-supported-numpy
  id: totrans-780
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 12\. 更新 oldest-supported-numpy
- en: If this release is the first one to support a new Python version, or the first
    to provide wheels for a new platform or PyPy version, the version pinnings in
    [https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)
    should be updated. Either submit a PR with changes to `setup.cfg` there, or open
    an issue with info on needed changes.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此版本是第一个支持新的 Python 版本，或者第一个为新平台或 PyPy 版本提供 wheels，那么[https://github.com/scipy/oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy)中的版本固定应该更新。要么提交对那里的
    `setup.cfg` 的更改的 PR，要么在需要更改的信息上开启一个问题。
- en: '## Branch walkthrough'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '## 分支演示'
- en: This guide contains a walkthrough of branching NumPy 1.21.x on Linux. The commands
    can be copied into the command line, but be sure to replace 1.21 and 1.22 by the
    correct versions. It is good practice to make `.mailmap` as current as possible
    before making the branch, that may take several weeks.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南包含在 Linux 上分支 NumPy 1.21.x 的步骤。可以将命令复制到命令行中，但一定要将 1.21 和 1.22 替换为正确的版本。在制作分支之前，尽可能使
    `.mailmap` 最新，这可能需要几周时间。
- en: This should be read together with the [general release guide](#prepare-release).
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 这应与[通用发布指南](#prepare-release)一起阅读。
- en: Branching
  id: totrans-785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: Make the branch
  id: totrans-786
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 制作分支
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在启动新的维护分支时才需要。因为 NumPy 现在依赖于标签来确定版本，所以在主分支中启动新的开发周期需要一个带注释的标签。操作如下：
- en: '[PRE104]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 如果推送失败，因为新的 PR 已经合并，执行以下操作：
- en: '[PRE105]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 并重复推送。一旦推送成功，对其进行标记：
- en: '[PRE106]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'then make the new branch and push it:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建新分支并推送它：
- en: '[PRE107]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Prepare the main branch for further development
  id: totrans-795
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为主分支做进一步的开发准备
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 PR 分支来为主分支做进一步的开发准备：
- en: '[PRE108]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Delete the release note fragments:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 删除发布注释片段：
- en: '[PRE109]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的发布注释框架并添加到索引中：
- en: '[PRE110]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`pavement.py`，并将`RELEASE_NOTES`变量更新为指向新的注释：
- en: '[PRE111]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`cversions.txt`以添加当前发布。在这个早期阶段不用担心新的哈希，只需按照以前的惯例添加注释即可：
- en: '[PRE112]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Check your work, commit it, and push:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的工作，提交并推送：
- en: '[PRE113]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Now make a pull request.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个拉取请求。
- en: Branching
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: Make the branch
  id: totrans-810
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建分支
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在启动新的维护分支时需要这样做。因为 NumPy 现在依赖标签来确定版本，所以在主分支中开始新的开发周期需要有一个带注释的标签。操作如下：
- en: '[PRE114]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 如果推送失败，因为新的 PR 已经合并，执行以下操作：
- en: '[PRE115]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 并重复推送。一旦推送成功，对其进行标记：
- en: '[PRE116]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'then make the new branch and push it:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建新分支并推送：
- en: '[PRE117]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Prepare the main branch for further development
  id: totrans-819
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为主分支做进一步的开发准备
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 PR 分支来为主分支做进一步的开发准备：
- en: '[PRE118]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Delete the release note fragments:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 删除发布注释片段：
- en: '[PRE119]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的发布注释框架并添加到索引中：
- en: '[PRE120]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`pavement.py`，并将`RELEASE_NOTES`变量更新为指向新的注释：
- en: '[PRE121]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`cversions.txt`以添加当前发布。在这个早期阶段不用担心新的哈希，只需按照以前的惯例添加注释即可：
- en: '[PRE122]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Check your work, commit it, and push:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的工作，提交并推送：
- en: '[PRE123]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Now make a pull request.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个拉取请求。
- en: Make the branch
  id: totrans-833
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建分支
- en: 'This is only needed when starting a new maintenance branch. Because NumPy now
    depends on tags to determine the version, the start of a new development cycle
    in the main branch needs an annotated tag. That is done as follows:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在启动新的维护分支时需要这样做。因为 NumPy 现在依赖标签来确定版本，所以在主分支中开始新的开发周期需要有一个带注释的标签。操作如下：
- en: '[PRE124]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'If the push fails because new PRs have been merged, do:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 如果推送失败，因为新的 PR 已经合并，执行以下操作：
- en: '[PRE125]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'and repeat the push. Once the push succeeds, tag it:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 并重复推送。一旦推送成功，对其进行标记：
- en: '[PRE126]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'then make the new branch and push it:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建新分支并推送它：
- en: '[PRE127]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Prepare the main branch for further development
  id: totrans-842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为主分支做进一步的开发准备
- en: 'Make a PR branch to prepare main for further development:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 PR 分支来为主分支做进一步的开发准备：
- en: '[PRE128]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Delete the release note fragments:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 删除发布注释片段：
- en: '[PRE129]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Create the new release notes skeleton and add to index:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的发布注释框架并添加到索引中：
- en: '[PRE130]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Update `pavement.py` and update the `RELEASE_NOTES` variable to point to the
    new notes:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`pavement.py`，并将`RELEASE_NOTES`变量更新为指向新的注释：
- en: '[PRE131]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Update `cversions.txt` to add current release. There should be no new hash
    to worry about at this early point, just add a comment following previous practice:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`cversions.txt`以添加当前发布。在这个早期阶段不用担心新的哈希，只需按照以前的惯例添加注释即可：
- en: '[PRE132]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Check your work, commit it, and push:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的工作，提交并推送：
- en: '[PRE133]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Now make a pull request.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个拉取请求。
