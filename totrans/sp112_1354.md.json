["```py\nscipy.stats.boxcox_normmax(x, brack=None, method='pearsonr', optimizer=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = stats.loggamma.rvs(5, size=30, random_state=rng) + 5\n>>> y, lmax_mle = stats.boxcox(x)\n>>> lmax_pearsonr = stats.boxcox_normmax(x) \n```", "```py\n>>> lmax_mle\n2.217563431465757\n>>> lmax_pearsonr\n2.238318660200961\n>>> stats.boxcox_normmax(x, method='all')\narray([2.23831866, 2.21756343]) \n```", "```py\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111)\n>>> prob = stats.boxcox_normplot(x, -10, 10, plot=ax)\n>>> ax.axvline(lmax_mle, color='r')\n>>> ax.axvline(lmax_pearsonr, color='g', ls='--') \n```", "```py\n>>> plt.show() \n```", "```py\n>>> from scipy import optimize\n>>> options = {'xatol': 1e-12}  # absolute tolerance on `x`\n>>> def optimizer(fun):\n...     return optimize.minimize_scalar(fun, bounds=(6, 7),\n...                                     method=\"bounded\", options=options)\n>>> stats.boxcox_normmax(x, optimizer=optimizer)\n6.000... \n```"]