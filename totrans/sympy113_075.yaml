- en: Special
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/functions/special.html](https://docs.sympy.org/latest/modules/functions/special.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Dirac Delta and Related Discontinuous Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The DiracDelta function and its derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: DiracDelta is not an ordinary function. It can be rigorously defined either
    as a distribution or as a measure.
  prefs: []
  type: TYPE_NORMAL
- en: DiracDelta only makes sense in definite integrals, and in particular, integrals
    of the form `Integral(f(x)*DiracDelta(x - x0), (x, a, b))`, where it equals `f(x0)`
    if `a <= x0 <= b` and `0` otherwise. Formally, DiracDelta acts in some ways like
    a function that is `0` everywhere except at `0`, but in many ways it also does
    not. It can often be useful to treat DiracDelta in formal ways, building up and
    manipulating expressions with delta functions (which may eventually be integrated),
    but care must be taken to not treat it as a real function. SymPy’s `oo` is similar.
    It only truly makes sense formally in certain contexts (such as integration limits),
    but SymPy allows its use everywhere, and it tries to be consistent with operations
    on it (like `1/oo`), but it is easy to get into trouble and get wrong results
    if `oo` is treated too much like a number. Similarly, if DiracDelta is treated
    too much like a function, it is easy to get wrong or nonsensical results.
  prefs: []
  type: TYPE_NORMAL
- en: 'DiracDelta function has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: \(\frac{d}{d x} \theta(x) = \delta(x)\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\int_{-\infty}^\infty \delta(x - a)f(x)\, dx = f(a)\) and \(\int_{a- \epsilon}^{a+\epsilon}
    \delta(x - a)f(x)\, dx = f(a)\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\delta(x) = 0\) for all \(x \neq 0\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\delta(g(x)) = \sum_i \frac{\delta(x - x_i)}{\|g'(x_i)\|}\) where \(x_i\)
    are the roots of \(g\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\delta(-x) = \delta(x)\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Derivatives of `k`-th order of DiracDelta have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: \(\delta(x, k) = 0\) for all \(x \neq 0\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\delta(-x, k) = -\delta(x, k)\) for odd \(k\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\delta(-x, k) = \delta(x, k)\) for even \(k\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Heaviside`](#sympy.functions.special.delta_functions.Heaviside "sympy.functions.special.delta_functions.Heaviside"),
    [`sympy.simplify.simplify.simplify`](../simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify"), [`is_simple`](#sympy.functions.special.delta_functions.DiracDelta.is_simple
    "sympy.functions.special.delta_functions.DiracDelta.is_simple"), [`sympy.functions.special.tensor_functions.KroneckerDelta`](#sympy.functions.special.tensor_functions.KroneckerDelta
    "sympy.functions.special.tensor_functions.KroneckerDelta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R342](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/DeltaFunction.html](https://mathworld.wolfram.com/DeltaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returns a simplified form or a value of DiracDelta depending on the argument
    passed by the DiracDelta object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: order of derivative
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**arg** : argument passed to DiracDelta'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The `eval()` method is automatically called when the `DiracDelta` class is about
    to be instantiated and it returns either some simplified instance or the unevaluated
    instance depending on the argument passed. In other words, `eval()` method is
    not needed to be called explicitly, it is being called and evaluated once the
    object is called.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of a DiracDelta Function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: degree of derivative
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between `diff()` and `fdiff()` is: `diff()` is the user-level
    function and `fdiff()` is an object method. `fdiff()` is a convenience method
    available in the `Function` class. It returns the derivative of the function without
    considering the chain rule. `diff(function, x)` calls `Function._eval_derivative`
    which in turn calls `fdiff()` internally to compute the derivative of the function.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tells whether the argument(args[0]) of DiracDelta is a linear expression in
    *x*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : can be a symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.simplify.simplify.simplify`](../simplify/simplify.html#sympy.simplify.simplify.simplify
    "sympy.simplify.simplify.simplify"), [`DiracDelta`](#sympy.functions.special.delta_functions.DiracDelta
    "sympy.functions.special.delta_functions.DiracDelta")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Heaviside step function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The Heaviside step function has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: \(\frac{d}{d x} \theta(x) = \delta(x)\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '\(\theta(x) = \begin{cases} 0 & \text{for}\: x < 0 \\ \frac{1}{2} & \text{for}\:
    x = 0 \\1 & \text{for}\: x > 0 \end{cases}\)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: \(\frac{d}{d x} \max(x, 0) = \theta(x)\)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heaviside(x) is printed as \(\theta(x)\) with the SymPy LaTeX printer.
  prefs: []
  type: TYPE_NORMAL
- en: The value at 0 is set differently in different fields. SymPy uses 1/2, which
    is a convention from electronics and signal processing, and is consistent with
    solving improper integrals by Fourier transform and convolution.
  prefs: []
  type: TYPE_NORMAL
- en: To specify a different value of Heaviside at `x=0`, a second argument can be
    given. Using `Heaviside(x, nan)` gives an expression that will evaluate to nan
    for x=0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.9: `Heaviside(0)` now returns 1/2 (before: undefined)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DiracDelta`](#sympy.functions.special.delta_functions.DiracDelta "sympy.functions.special.delta_functions.DiracDelta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R343](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/HeavisideStepFunction.html](https://mathworld.wolfram.com/HeavisideStepFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R344](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/1.16#iv](https://dlmf.nist.gov/1.16#iv)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns a simplified form or a value of Heaviside depending on the argument
    passed by the Heaviside object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : argument passed by Heaviside object'
  prefs: []
  type: TYPE_NORMAL
- en: '**H0** : value of Heaviside(0)'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The `eval()` method is automatically called when the `Heaviside` class is about
    to be instantiated and it returns either some simplified instance or the unevaluated
    instance depending on the argument passed. In other words, `eval()` method is
    not needed to be called explicitly, it is being called and evaluated once the
    object is called.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of a Heaviside Function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: order of derivative
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Args without default S.Half
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Singularity functions are a class of discontinuous functions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Singularity functions take a variable, an offset, and an exponent as arguments.
    These functions are represented using Macaulay brackets as:'
  prefs: []
  type: TYPE_NORMAL
- en: SingularityFunction(x, a, n) := <x - a>^n
  prefs: []
  type: TYPE_NORMAL
- en: The singularity function will automatically evaluate to `Derivative(DiracDelta(x
    - a), x, -n - 1)` if `n < 0` and `(x - a)**n*Heaviside(x - a, 1)` if `n >= 0`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The methods `rewrite(DiracDelta)`, `rewrite(Heaviside)`, and `rewrite('HeavisideDiracDelta')`
    returns the same output. One can use any of these methods according to their choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DiracDelta`](#sympy.functions.special.delta_functions.DiracDelta "sympy.functions.special.delta_functions.DiracDelta"),
    [`Heaviside`](#sympy.functions.special.delta_functions.Heaviside "sympy.functions.special.delta_functions.Heaviside")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R345](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Singularity_function](https://en.wikipedia.org/wiki/Singularity_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns a simplified form or a value of Singularity Function depending on the
    argument passed by the object.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The `eval()` method is automatically called when the `SingularityFunction` class
    is about to be instantiated and it returns either some simplified instance or
    the unevaluated instance depending on the argument passed. In other words, `eval()`
    method is not needed to be called explicitly, it is being called and evaluated
    once the object is called.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of a DiracDelta Function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between `diff()` and `fdiff()` is: `diff()` is the user-level
    function and `fdiff()` is an object method. `fdiff()` is a convenience method
    available in the `Function` class. It returns the derivative of the function without
    considering the chain rule. `diff(function, x)` calls `Function._eval_derivative`
    which in turn calls `fdiff()` internally to compute the derivative of the function.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Gamma, Beta and Related Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The gamma function
  prefs: []
  type: TYPE_NORMAL
- en: \[\Gamma(x) := \int^{\infty}_{0} t^{x-1} e^{-t} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The `gamma` function implements the function which passes through the values
    of the factorial function (i.e., \(\Gamma(n) = (n - 1)!\) when n is an integer).
    More generally, \(\Gamma(z)\) is defined in the whole complex plane except at
    the negative integers where there are simple poles.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The `gamma` function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the `gamma` function to arbitrary precision on
    the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R346](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gamma_function](https://en.wikipedia.org/wiki/Gamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R347](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/5](https://dlmf.nist.gov/5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R348](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/GammaFunction.html](https://mathworld.wolfram.com/GammaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R349](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Gamma/](https://functions.wolfram.com/GammaBetaErf/Gamma/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The `loggamma` function implements the logarithm of the gamma function (i.e.,
    \(\log\Gamma(x)\)).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Several special values are known. For numerical integral arguments we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'And for symbolic values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For half-integral values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'And general rational arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loggamma` function has the following limits towards infinity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loggamma` function obeys the mirror symmetry if \(x \in \mathbb{C} \setminus
    \{-\infty, 0\}\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the `loggamma` function to arbitrary precision
    on the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R350](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gamma_function](https://en.wikipedia.org/wiki/Gamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R351](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/5](https://dlmf.nist.gov/5)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R352](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogGammaFunction.html](https://mathworld.wolfram.com/LogGammaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R353](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/LogGamma/](https://functions.wolfram.com/GammaBetaErf/LogGamma/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The function `polygamma(n, z)` returns `log(gamma(z)).diff(n + 1)`.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a meromorphic function on \(\mathbb{C}\) and defined as the \((n+1)\)-th
    derivative of the logarithm of the gamma function:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\psi^{(n)} (z) := \frac{\mathrm{d}^{n+1}}{\mathrm{d} z^{n+1}} \log\Gamma(z).\]
  prefs: []
  type: TYPE_NORMAL
- en: 'For \(n\) not a nonnegative integer the generalization by Espinosa and Moll
    [[R358]](#r358) is used:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\psi(s,z) = \frac{\zeta'(s+1, z) + (\gamma + \psi(-s)) \zeta(s+1, z)} {\Gamma(-s)}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We can rewrite `polygamma` functions in terms of harmonic numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R354](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Polygamma_function](https://en.wikipedia.org/wiki/Polygamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R355](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/PolygammaFunction.html](https://mathworld.wolfram.com/PolygammaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R356](#id16)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/PolyGamma/](https://functions.wolfram.com/GammaBetaErf/PolyGamma/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R357](#id17)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/PolyGamma2/](https://functions.wolfram.com/GammaBetaErf/PolyGamma2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[R358] ([1](#id13),[2](#id18))'
  prefs: []
  type: TYPE_NORMAL
- en: O. Espinosa and V. Moll, “A generalized polygamma function”, *Integral Transforms
    and Special Functions* (2004), 101-115.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `digamma` function is the first derivative of the `loggamma` function
  prefs: []
  type: TYPE_NORMAL
- en: \[\psi(x) := \frac{\mathrm{d}}{\mathrm{d} z} \log\Gamma(z) = \frac{\Gamma'(z)}{\Gamma(z)
    }.\]
  prefs: []
  type: TYPE_NORMAL
- en: In this case, `digamma(z) = polygamma(0, z)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'To retain `digamma` as it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R359](#id19)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Digamma_function](https://en.wikipedia.org/wiki/Digamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R360](#id20)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/DigammaFunction.html](https://mathworld.wolfram.com/DigammaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R361](#id21)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/PolyGamma2/](https://functions.wolfram.com/GammaBetaErf/PolyGamma2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `trigamma` function is the second derivative of the `loggamma` function
  prefs: []
  type: TYPE_NORMAL
- en: \[\psi^{(1)}(z) := \frac{\mathrm{d}^{2}}{\mathrm{d} z^{2}} \log\Gamma(z).\]
  prefs: []
  type: TYPE_NORMAL
- en: In this case, `trigamma(z) = polygamma(1, z)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'To retain `trigamma` as it is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R362](#id22)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigamma_function](https://en.wikipedia.org/wiki/Trigamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R363](#id23)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/TrigammaFunction.html](https://mathworld.wolfram.com/TrigammaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R364](#id24)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/PolyGamma2/](https://functions.wolfram.com/GammaBetaErf/PolyGamma2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: It can be defined as the meromorphic continuation of
  prefs: []
  type: TYPE_NORMAL
- en: \[\Gamma(s, x) := \int_x^\infty t^{s-1} e^{-t} \mathrm{d}t = \Gamma(s) - \gamma(s,
    x).\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\gamma(s, x)\) is the lower incomplete gamma function, [`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma
    "sympy.functions.special.gamma_functions.lowergamma"). This can be shown to be
    the same as
  prefs: []
  type: TYPE_NORMAL
- en: \[\Gamma(s, x) = \Gamma(s) - \frac{x^s}{s} {}_1F_1\left({s \atop s+1} \middle|
    -x\right),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \({}_1F_1\) is the (confluent) hypergeometric function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The upper incomplete gamma function is also essentially equivalent to the generalized
    exponential integral:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{E}_{n}(x) = \int_{1}^{\infty}{\frac{e^{-xt}}{t^n} \, dt} = x^{n-1}\Gamma(1-n,x).\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R365](#id25)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Incomplete_gamma_function#Upper_incomplete_gamma_function](https://en.wikipedia.org/wiki/Incomplete_gamma_function#Upper_incomplete_gamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R366](#id26)]'
  prefs: []
  type: TYPE_NORMAL
- en: Abramowitz, Milton; Stegun, Irene A., eds. (1965), Chapter 6, Section 5, Handbook
    of Mathematical Functions with Formulas, Graphs, and Mathematical Tables
  prefs: []
  type: TYPE_NORMAL
- en: '[[R367](#id27)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/8](https://dlmf.nist.gov/8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R368](#id28)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Gamma2/](https://functions.wolfram.com/GammaBetaErf/Gamma2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R369](#id29)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Gamma3/](https://functions.wolfram.com/GammaBetaErf/Gamma3/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R370](#id30)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exponential_integral#Relation_with_other_functions](https://en.wikipedia.org/wiki/Exponential_integral#Relation_with_other_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: It can be defined as the meromorphic continuation of
  prefs: []
  type: TYPE_NORMAL
- en: \[\gamma(s, x) := \int_0^x t^{s-1} e^{-t} \mathrm{d}t = \Gamma(s) - \Gamma(s,
    x).\]
  prefs: []
  type: TYPE_NORMAL
- en: This can be shown to be the same as
  prefs: []
  type: TYPE_NORMAL
- en: \[\gamma(s, x) = \frac{x^s}{s} {}_1F_1\left({s \atop s+1} \middle| -x\right),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \({}_1F_1\) is the (confluent) hypergeometric function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: Euler Beta function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R371](#id31)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Incomplete_gamma_function#Lower_incomplete_gamma_function](https://en.wikipedia.org/wiki/Incomplete_gamma_function#Lower_incomplete_gamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R372](#id32)]'
  prefs: []
  type: TYPE_NORMAL
- en: Abramowitz, Milton; Stegun, Irene A., eds. (1965), Chapter 6, Section 5, Handbook
    of Mathematical Functions with Formulas, Graphs, and Mathematical Tables
  prefs: []
  type: TYPE_NORMAL
- en: '[[R373](#id33)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/8](https://dlmf.nist.gov/8)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R374](#id34)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Gamma2/](https://functions.wolfram.com/GammaBetaErf/Gamma2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R375](#id35)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Gamma3/](https://functions.wolfram.com/GammaBetaErf/Gamma3/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The multivariate gamma function is a generalization of the gamma function
  prefs: []
  type: TYPE_NORMAL
- en: \[\Gamma_p(z) = \pi^{p(p-1)/4}\prod_{k=1}^p \Gamma[z + (1 - k)/2].\]
  prefs: []
  type: TYPE_NORMAL
- en: In a special case, `multigamma(x, 1) = gamma(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : order or dimension of the multivariate gamma function'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing `multigamma` in terms of the `gamma` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma"),
    [`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma"),
    [`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma"),
    [`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma"),
    [`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma"),
    [`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma"),
    [`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma"),
    [`sympy.functions.special.beta_functions.beta`](#sympy.functions.special.beta_functions.beta
    "sympy.functions.special.beta_functions.beta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R376](#id36)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Multivariate_gamma_function](https://en.wikipedia.org/wiki/Multivariate_gamma_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The beta integral is called the Eulerian integral of the first kind by Legendre:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{B}(x,y) \int^{1}_{0} t^{x-1} (1-t)^{y-1} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The Beta function or Euler’s first integral is closely associated with the
    gamma function. The Beta function is often used in probability theory and mathematical
    statistics. It satisfies properties like:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\mathrm{B}(a,1) = \frac{1}{a} \\ \mathrm{B}(a,b) = \mathrm{B}(b,a)
    \\ \mathrm{B}(a,b) = \frac{\Gamma(a) \Gamma(b)}{\Gamma(a+b)}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore for integral values of \(a\) and \(b\):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{B} = \frac{(a-1)! (b-1)!}{(a+b-1)!}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'A special case of the Beta function when \(x = y\) is the Central Beta function.
    It satisfies properties like:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{B}(x) = 2^{1 - 2x}\mathrm{B}(x, \frac{1}{2}) \mathrm{B}(x) = 2^{1
    - 2x} cos(\pi x) \mathrm{B}(\frac{1}{2} - x, x) \mathrm{B}(x) = \int_{0}^{1} \frac{t^x}{(1
    + t)^{2x}} dt \mathrm{B}(x) = \frac{2}{x} \prod_{n = 1}^{\infty} \frac{n(n + 2x)}{(n
    + x)^2}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The Beta function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to both \(x\) and \(y\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Beta function to arbitrary precision for any
    complex numbers x and y:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gamma`](#sympy.functions.special.gamma_functions.gamma "sympy.functions.special.gamma_functions.gamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lowergamma`](#sympy.functions.special.gamma_functions.lowergamma "sympy.functions.special.gamma_functions.lowergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Lower incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polygamma`](#sympy.functions.special.gamma_functions.polygamma "sympy.functions.special.gamma_functions.polygamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Polygamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`loggamma`](#sympy.functions.special.gamma_functions.loggamma "sympy.functions.special.gamma_functions.loggamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Log Gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`digamma`](#sympy.functions.special.gamma_functions.digamma "sympy.functions.special.gamma_functions.digamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Digamma function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trigamma`](#sympy.functions.special.gamma_functions.trigamma "sympy.functions.special.gamma_functions.trigamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigamma function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R377](#id37)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Beta_function](https://en.wikipedia.org/wiki/Beta_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R378](#id38)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/BetaFunction.html](https://mathworld.wolfram.com/BetaFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R379](#id39)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/5.12](https://dlmf.nist.gov/5.12)  ## Error Functions
    and Fresnel Integrals'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The Gauss error function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erf}(x) = \frac{2}{\sqrt{\pi}} \int_0^x e^{-t^2} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'In general one can pull out factors of -1 and \(I\) from the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'The error function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the error function to arbitrary precision on the
    whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R380](#id40)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Error_function](https://en.wikipedia.org/wiki/Error_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R381](#id41)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/7](https://dlmf.nist.gov/7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R382](#id42)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Erf.html](https://mathworld.wolfram.com/Erf.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R383](#id43)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Erf](https://functions.wolfram.com/GammaBetaErf/Erf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Complementary Error Function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erfc}(x) = \frac{2}{\sqrt{\pi}} \int_x^\infty e^{-t^2} \mathrm{d}t\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The error function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: It also follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the complementary error function to arbitrary precision
    on the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R384](#id44)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Error_function](https://en.wikipedia.org/wiki/Error_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R385](#id45)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/7](https://dlmf.nist.gov/7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R386](#id46)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Erfc.html](https://mathworld.wolfram.com/Erfc.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R387](#id47)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Erfc](https://functions.wolfram.com/GammaBetaErf/Erfc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The function erfi is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erfi}(x) = \frac{2}{\sqrt{\pi}} \int_0^x e^{t^2} \mathrm{d}t\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'In general one can pull out factors of -1 and \(I\) from the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the imaginary error function to arbitrary precision
    on the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R388](#id48)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Error_function](https://en.wikipedia.org/wiki/Error_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R389](#id49)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/Erfi.html](https://mathworld.wolfram.com/Erfi.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R390](#id50)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Erfi](https://functions.wolfram.com/GammaBetaErf/Erfi)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erf2}(x, y) = \frac{2}{\sqrt{\pi}} \int_x^y e^{-t^2} \mathrm{d}t\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'In general one can pull out factors of -1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'The error function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\), \(y\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R391](#id51)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/Erf2/](https://functions.wolfram.com/GammaBetaErf/Erf2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Inverse Error Function. The erfinv function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erf}(x) = y \quad \Rightarrow \quad \mathrm{erfinv}(y) = x\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the inverse error function to arbitrary precision
    on [-1, 1]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R392](#id52)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Error_function#Inverse_functions](https://en.wikipedia.org/wiki/Error_function#Inverse_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R393](#id53)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/InverseErf/](https://functions.wolfram.com/GammaBetaErf/InverseErf/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Inverse Complementary Error Function. The erfcinv function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erfc}(x) = y \quad \Rightarrow \quad \mathrm{erfcinv}(y) = x\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2inv`](#sympy.functions.special.error_functions.erf2inv "sympy.functions.special.error_functions.erf2inv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R394](#id54)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Error_function#Inverse_functions](https://en.wikipedia.org/wiki/Error_function#Inverse_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R395](#id55)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/InverseErfc/](https://functions.wolfram.com/GammaBetaErf/InverseErfc/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Two-argument Inverse error function. The erf2inv function is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{erf2}(x, w) = y \quad \Rightarrow \quad \mathrm{erf2inv}(x, y) = w\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(x\) and \(y\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf`](#sympy.functions.special.error_functions.erf "sympy.functions.special.error_functions.erf")'
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfc`](#sympy.functions.special.error_functions.erfc "sympy.functions.special.error_functions.erfc")'
  prefs: []
  type: TYPE_NORMAL
- en: Complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfi`](#sympy.functions.special.error_functions.erfi "sympy.functions.special.error_functions.erfi")'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erf2`](#sympy.functions.special.error_functions.erf2 "sympy.functions.special.error_functions.erf2")'
  prefs: []
  type: TYPE_NORMAL
- en: Two-argument error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfinv`](#sympy.functions.special.error_functions.erfinv "sympy.functions.special.error_functions.erfinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse error function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`erfcinv`](#sympy.functions.special.error_functions.erfcinv "sympy.functions.special.error_functions.erfcinv")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse complementary error function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R396](#id56)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/InverseErf2/](https://functions.wolfram.com/GammaBetaErf/InverseErf2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Base class for the Fresnel integrals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Fresnel integral S.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{S}(z) = \int_0^z \sin{\frac{\pi}{2} t^2} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: It is an entire function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'In general one can pull out factors of -1 and \(i\) from the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'The Fresnel S integral obeys the mirror symmetry \(\overline{S(z)} = S(\bar{z})\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining the Fresnel functions via an integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Fresnel integral to arbitrary precision on
    the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fresnelc`](#sympy.functions.special.error_functions.fresnelc "sympy.functions.special.error_functions.fresnelc")'
  prefs: []
  type: TYPE_NORMAL
- en: Fresnel cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R397](#id57)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fresnel_integral](https://en.wikipedia.org/wiki/Fresnel_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R398](#id58)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/7](https://dlmf.nist.gov/7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R399](#id59)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FresnelIntegrals.html](https://mathworld.wolfram.com/FresnelIntegrals.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R400](#id60)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/FresnelS](https://functions.wolfram.com/GammaBetaErf/FresnelS)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R401](#id61)]'
  prefs: []
  type: TYPE_NORMAL
- en: The converging factors for the fresnel integrals by John W. Wrench Jr. and Vicki
    Alley
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Fresnel integral C.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{C}(z) = \int_0^z \cos{\frac{\pi}{2} t^2} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: It is an entire function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'In general one can pull out factors of -1 and \(i\) from the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'The Fresnel C integral obeys the mirror symmetry \(\overline{C(z)} = C(\bar{z})\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining the Fresnel functions via an integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Fresnel integral to arbitrary precision on
    the whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fresnels`](#sympy.functions.special.error_functions.fresnels "sympy.functions.special.error_functions.fresnels")'
  prefs: []
  type: TYPE_NORMAL
- en: Fresnel sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R402](#id62)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fresnel_integral](https://en.wikipedia.org/wiki/Fresnel_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R403](#id63)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/7](https://dlmf.nist.gov/7)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R404](#id64)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FresnelIntegrals.html](https://mathworld.wolfram.com/FresnelIntegrals.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R405](#id65)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/FresnelC](https://functions.wolfram.com/GammaBetaErf/FresnelC)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R406](#id66)]'
  prefs: []
  type: TYPE_NORMAL
- en: The converging factors for the fresnel integrals by John W. Wrench Jr. and Vicki
    Alley
  prefs: []
  type: TYPE_NORMAL
- en: Exponential, Logarithmic and Trigonometric Integrals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: The classical exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For use in SymPy, this function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ei}(x) = \sum_{n=1}^\infty \frac{x^n}{n\, n!} + \log(x) + \gamma,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\gamma\) is the Euler-Mascheroni constant.
  prefs: []
  type: TYPE_NORMAL
- en: If \(x\) is a polar number, this defines an analytic function on the Riemann
    surface of the logarithm. Otherwise this defines an analytic function in the cut
    plane \(\mathbb{C} \setminus (-\infty, 0]\).
  prefs: []
  type: TYPE_NORMAL
- en: '**Background**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The name exponential integral comes from the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ei}(x) = \int_{-\infty}^x \frac{e^t}{t} \mathrm{d}t\]
  prefs: []
  type: TYPE_NORMAL
- en: If the integral is interpreted as a Cauchy principal value, this statement holds
    for \(x > 0\) and \(\operatorname{Ei}(x)\) as defined above.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields a real value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand the analytic continuation is not real:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'The exponential integral has a logarithmic branch point at the origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'The exponential integral is related to many other special functions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: Upper incomplete gamma function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R407](#id67)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/6.6](https://dlmf.nist.gov/6.6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R408](#id68)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exponential_integral](https://en.wikipedia.org/wiki/Exponential_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R409](#id69)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abramowitz & Stegun, section 5: [https://web.archive.org/web/20201128173312/http://people.math.sfu.ca/~cbm/aands/page_228.htm](https://web.archive.org/web/20201128173312/http://people.math.sfu.ca/~cbm/aands/page_228.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Generalized exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{E}_\nu(z) = z^{\nu - 1} \Gamma(1 - \nu, z),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\Gamma(1 - \nu, z)\) is the upper incomplete gamma function (`uppergamma`).
  prefs: []
  type: TYPE_NORMAL
- en: Hence for \(z\) with positive real part we have
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{E}_\nu(z) = \int_1^\infty \frac{e^{-zt}}{t^\nu} \mathrm{d}t,\]
  prefs: []
  type: TYPE_NORMAL
- en: which explains the name.
  prefs: []
  type: TYPE_NORMAL
- en: The representation as an incomplete gamma function provides an analytic continuation
    for \(\operatorname{E}_\nu(z)\). If \(\nu\) is a non-positive integer, the exponential
    integral is thus an unbranched function of \(z\), otherwise there is a branch
    point at the origin. Refer to the incomplete gamma function documentation for
    details of the branching behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation is supported. Differentiation with respect to \(z\) further
    explains the name: for integral orders, the exponential integral is an iterated
    integral of the exponential function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(\nu\) has no classical expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'At non-postive integer orders, the exponential integral reduces to the exponential
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'At half-integers it reduces to error functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'At positive integer orders it can be rewritten in terms of exponentials and
    `expint(1, z)`. Use `expand_func()` to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'The generalised exponential integral is essentially equivalent to the incomplete
    gamma function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'As such it is branched at the origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Another related function called exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: The classical case, returns expint(1, z).
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`uppergamma`](#sympy.functions.special.gamma_functions.uppergamma "sympy.functions.special.gamma_functions.uppergamma")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R410](#id70)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/8.19](https://dlmf.nist.gov/8.19)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R411](#id71)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/GammaBetaErf/ExpIntegralE/](https://functions.wolfram.com/GammaBetaErf/ExpIntegralE/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R412](#id72)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exponential_integral](https://en.wikipedia.org/wiki/Exponential_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Classical case of the generalized exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `expint(1, z)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: The classical logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For use in SymPy, this function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{li}(x) = \int_0^x \frac{1}{\log(t)} \mathrm{d}t \,.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining the `li` function via an integral: >>> from sympy import integrate
    >>> integrate(li(z)) z*li(z) - Ei(2*log(z))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'The logarithmic integral can also be defined in terms of `Ei`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the logarithmic integral to arbitrary precision
    on the whole complex plane (except the singular points):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even compute Soldner’s constant by the help of mpmath:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'Further transformations include rewriting `li` in terms of the trigonometric
    integrals `Si`, `Ci`, `Shi` and `Chi`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R413](#id73)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logarithmic_integral](https://en.wikipedia.org/wiki/Logarithmic_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R414](#id74)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogarithmicIntegral.html](https://mathworld.wolfram.com/LogarithmicIntegral.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R415](#id75)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/6](https://dlmf.nist.gov/6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R416](#id76)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/SoldnersConstant.html](https://mathworld.wolfram.com/SoldnersConstant.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: The offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For use in SymPy, this function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Li}(x) = \operatorname{li}(x) - \operatorname{li}(2)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: 'The following special value is known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'The shifted logarithmic integral can be written in terms of \(li(z)\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the logarithmic integral to arbitrary precision
    on the whole complex plane (except the singular points):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R417](#id77)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Logarithmic_integral](https://en.wikipedia.org/wiki/Logarithmic_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R418](#id78)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LogarithmicIntegral.html](https://mathworld.wolfram.com/LogarithmicIntegral.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R419](#id79)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/6](https://dlmf.nist.gov/6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Si}(z) = \int_0^z \frac{\sin{t}}{t} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: It is an entire function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: 'The sine integral is an antiderivative of \(sin(z)/z\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'It is unbranched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'Sine integral behaves much like ordinary sine under multiplication by `I`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be expressed in terms of exponential integrals, but beware that
    the latter is branched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be rewritten in the form of sinc function (by definition):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinc`](elementary.html#sympy.functions.elementary.trigonometric.sinc "sympy.functions.elementary.trigonometric.sinc")'
  prefs: []
  type: TYPE_NORMAL
- en: unnormalized sinc function
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R420](#id80)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_integral](https://en.wikipedia.org/wiki/Trigonometric_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined for positive \(x\) by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ci}(x) = \gamma + \log{x} + \int_0^x \frac{\cos{t} - 1}{t} \mathrm{d}t
    = -\int_x^\infty \frac{\cos{t}}{t} \mathrm{d}t,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\gamma\) is the Euler-Mascheroni constant.
  prefs: []
  type: TYPE_NORMAL
- en: We have
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ci}(z) = -\frac{\operatorname{E}_1\left(e^{i\pi/2} z\right)
    + \operatorname{E}_1\left(e^{-i \pi/2} z\right)}{2}\]
  prefs: []
  type: TYPE_NORMAL
- en: which holds for all polar \(z\) and thus provides an analytic continuation to
    the Riemann surface of the logarithm.
  prefs: []
  type: TYPE_NORMAL
- en: The formula also holds as stated for \(z \in \mathbb{C}\) with \(\Re(z) > 0\).
    By lifting to the principal branch, we obtain an analytic function on the cut
    complex plane.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'The cosine integral is a primitive of \(\cos(z)/z\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'It has a logarithmic branch point at the origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'The cosine integral behaves somewhat like ordinary \(\cos\) under multiplication
    by \(i\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be expressed in terms of exponential integrals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R421](#id81)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_integral](https://en.wikipedia.org/wiki/Trigonometric_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Sinh integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Shi}(z) = \int_0^z \frac{\sinh{t}}{t} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: It is an entire function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'The Sinh integral is a primitive of \(\sinh(z)/z\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: 'It is unbranched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'The \(\sinh\) integral behaves much like ordinary \(\sinh\) under multiplication
    by \(i\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be expressed in terms of exponential integrals, but beware that
    the latter is branched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Chi`](#sympy.functions.special.error_functions.Chi "sympy.functions.special.error_functions.Chi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R422](#id82)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_integral](https://en.wikipedia.org/wiki/Trigonometric_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Cosh integral.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined for positive \(x\) by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Chi}(x) = \gamma + \log{x} + \int_0^x \frac{\cosh{t} - 1}{t}
    \mathrm{d}t,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\gamma\) is the Euler-Mascheroni constant.
  prefs: []
  type: TYPE_NORMAL
- en: We have
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Chi}(z) = \operatorname{Ci}\left(e^{i \pi/2}z\right) - i\frac{\pi}{2},\]
  prefs: []
  type: TYPE_NORMAL
- en: which holds for all polar \(z\) and thus provides an analytic continuation to
    the Riemann surface of the logarithm. By lifting to the principal branch we obtain
    an analytic function on the cut complex plane.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'The \(\cosh\) integral is a primitive of \(\cosh(z)/z\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: 'It has a logarithmic branch point at the origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'The \(\cosh\) integral behaves somewhat like ordinary \(\cosh\) under multiplication
    by \(i\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be expressed in terms of exponential integrals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Si`](#sympy.functions.special.error_functions.Si "sympy.functions.special.error_functions.Si")'
  prefs: []
  type: TYPE_NORMAL
- en: Sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ci`](#sympy.functions.special.error_functions.Ci "sympy.functions.special.error_functions.Ci")'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Shi`](#sympy.functions.special.error_functions.Shi "sympy.functions.special.error_functions.Shi")'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic sine integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ei`](#sympy.functions.special.error_functions.Ei "sympy.functions.special.error_functions.Ei")'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`expint`](#sympy.functions.special.error_functions.expint "sympy.functions.special.error_functions.expint")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`E1`](#sympy.functions.special.error_functions.E1 "sympy.functions.special.error_functions.E1")'
  prefs: []
  type: TYPE_NORMAL
- en: Special case of the generalised exponential integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`li`](#sympy.functions.special.error_functions.li "sympy.functions.special.error_functions.li")'
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Li`](#sympy.functions.special.error_functions.Li "sympy.functions.special.error_functions.Li")'
  prefs: []
  type: TYPE_NORMAL
- en: Offset logarithmic integral.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R423](#id83)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_integral](https://en.wikipedia.org/wiki/Trigonometric_integral)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Bessel Type Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for Bessel-type functions.
  prefs: []
  type: TYPE_NORMAL
- en: This class is meant to reduce code duplication. All Bessel-type functions can
    1) be differentiated, with the derivatives expressed in terms of similar functions,
    and 2) be rewritten in terms of other Bessel-type functions.
  prefs: []
  type: TYPE_NORMAL
- en: Here, Bessel-type functions are assumed to have one complex parameter.
  prefs: []
  type: TYPE_NORMAL
- en: To use this base class, define class attributes `_a` and `_b` such that `2*F_n'
    = -_a*F_{n+1} + b*F_{n-1}`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: The argument of the Bessel-type function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: The order of the Bessel-type function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Bessel \(J\) function of order \(\nu\) is defined to be the function satisfying
    Bessel’s differential equation
  prefs: []
  type: TYPE_NORMAL
- en: \[z^2 \frac{\mathrm{d}^2 w}{\mathrm{d}z^2} + z \frac{\mathrm{d}w}{\mathrm{d}z}
    + (z^2 - \nu^2) w = 0,\]
  prefs: []
  type: TYPE_NORMAL
- en: with Laurent expansion
  prefs: []
  type: TYPE_NORMAL
- en: \[J_\nu(z) = z^\nu \left(\frac{1}{\Gamma(\nu + 1) 2^\nu} + O(z^2) \right),\]
  prefs: []
  type: TYPE_NORMAL
- en: if \(\nu\) is not a negative integer. If \(\nu=-n \in \mathbb{Z}_{<0}\) *is*
    a negative integer, then the definition is
  prefs: []
  type: TYPE_NORMAL
- en: \[J_{-n}(z) = (-1)^n J_n(z).\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Bessel function object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite in terms of spherical Bessel functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: 'Access the parameter and argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely"),
    [`besseli`](#sympy.functions.special.bessel.besseli "sympy.functions.special.bessel.besseli"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R424](#id84)]'
  prefs: []
  type: TYPE_NORMAL
- en: Abramowitz, Milton; Stegun, Irene A., eds. (1965), “Chapter 9”, Handbook of
    Mathematical Functions with Formulas, Graphs, and Mathematical Tables
  prefs: []
  type: TYPE_NORMAL
- en: '[[R425](#id85)]'
  prefs: []
  type: TYPE_NORMAL
- en: Luke, Y. L. (1969), The Special Functions and Their Approximations, Volume 1
  prefs: []
  type: TYPE_NORMAL
- en: '[[R426](#id86)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bessel_function](https://en.wikipedia.org/wiki/Bessel_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R427](#id87)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/BesselJ/](https://functions.wolfram.com/Bessel-TypeFunctions/BesselJ/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Bessel \(Y\) function of order \(\nu\) is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[Y_\nu(z) = \lim_{\mu \to \nu} \frac{J_\mu(z) \cos(\pi \mu) - J_{-\mu}(z)}{\sin(\pi
    \mu)},\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(J_\mu(z)\) is the Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: It is a solution to Bessel’s equation, and linearly independent from \(J_\nu\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`besseli`](#sympy.functions.special.bessel.besseli "sympy.functions.special.bessel.besseli"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R428](#id88)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/BesselY/](https://functions.wolfram.com/Bessel-TypeFunctions/BesselY/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Modified Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Bessel \(I\) function is a solution to the modified Bessel equation
  prefs: []
  type: TYPE_NORMAL
- en: \[z^2 \frac{\mathrm{d}^2 w}{\mathrm{d}z^2} + z \frac{\mathrm{d}w}{\mathrm{d}z}
    + (z^2 + \nu^2)^2 w = 0.\]
  prefs: []
  type: TYPE_NORMAL
- en: It can be defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[I_\nu(z) = i^{-\nu} J_\nu(iz),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(J_\nu(z)\) is the Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R429](#id89)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/BesselI/](https://functions.wolfram.com/Bessel-TypeFunctions/BesselI/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Modified Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Bessel \(K\) function of order \(\nu\) is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[K_\nu(z) = \lim_{\mu \to \nu} \frac{\pi}{2} \frac{I_{-\mu}(z) -I_\mu(z)}{\sin(\pi
    \mu)},\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(I_\mu(z)\) is the modified Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: It is a solution of the modified Bessel equation, and linearly independent from
    \(Y_\nu\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`besseli`](#sympy.functions.special.bessel.besseli "sympy.functions.special.bessel.besseli"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R430](#id90)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/BesselK/](https://functions.wolfram.com/Bessel-TypeFunctions/BesselK/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Hankel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[H_\nu^{(1)} = J_\nu(z) + iY_\nu(z),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(J_\nu(z)\) is the Bessel function of the first kind, and \(Y_\nu(z)\)
    is the Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: It is a solution to Bessel’s equation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hankel2`](#sympy.functions.special.bessel.hankel2 "sympy.functions.special.bessel.hankel2"),
    [`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R431](#id91)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/HankelH1/](https://functions.wolfram.com/Bessel-TypeFunctions/HankelH1/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Hankel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[H_\nu^{(2)} = J_\nu(z) - iY_\nu(z),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(J_\nu(z)\) is the Bessel function of the first kind, and \(Y_\nu(z)\)
    is the Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: It is a solution to Bessel’s equation, and linearly independent from \(H_\nu^{(1)}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hankel1`](#sympy.functions.special.bessel.hankel1 "sympy.functions.special.bessel.hankel1"),
    [`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R432](#id92)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Bessel-TypeFunctions/HankelH2/](https://functions.wolfram.com/Bessel-TypeFunctions/HankelH2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Spherical Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is a solution to the spherical Bessel equation
  prefs: []
  type: TYPE_NORMAL
- en: \[z^2 \frac{\mathrm{d}^2 w}{\mathrm{d}z^2} + 2z \frac{\mathrm{d}w}{\mathrm{d}z}
    + (z^2 - \nu(\nu + 1)) w = 0.\]
  prefs: []
  type: TYPE_NORMAL
- en: It can be defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[j_\nu(z) = \sqrt{\frac{\pi}{2z}} J_{\nu + \frac{1}{2}}(z),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(J_\nu(z)\) is the Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'The spherical Bessel functions of integral order are calculated using the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: \[j_n(z) = f_n(z) \sin{z} + (-1)^{n+1} f_{-n-1}(z) \cos{z},\]
  prefs: []
  type: TYPE_NORMAL
- en: where the coefficients \(f_n(z)\) are available as [`sympy.polys.orthopolys.spherical_bessel_fn()`](../polys/reference.html#sympy.polys.orthopolys.spherical_bessel_fn
    "sympy.polys.orthopolys.spherical_bessel_fn").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk"),
    [`yn`](#sympy.functions.special.bessel.yn "sympy.functions.special.bessel.yn")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R433](#id93)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/10.47](https://dlmf.nist.gov/10.47)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: Spherical Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function is another solution to the spherical Bessel equation, and linearly
    independent from \(j_n\). It can be defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[y_\nu(z) = \sqrt{\frac{\pi}{2z}} Y_{\nu + \frac{1}{2}}(z),\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(Y_\nu(z)\) is the Bessel function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'For integral orders \(n\), \(y_n\) is calculated using the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y_n(z) = (-1)^{n+1} j_{-n-1}(z)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk"),
    [`jn`](#sympy.functions.special.bessel.jn "sympy.functions.special.bessel.jn")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R434](#id94)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/10.47](https://dlmf.nist.gov/10.47)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Zeros of the spherical Bessel function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: order of Bessel function
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**k** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: number of zeros to return
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This returns an array of zeros of \(jn\) up to the \(k\)-th zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'method = “sympy”: uses [mpmath.besseljzero](https://mpmath.org/doc/current/functions/bessel.html#mpmath.besseljzero)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'method = “scipy”: uses the [SciPy’s sph_jn](https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.jn_zeros.html)
    and [newton](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.newton.html)
    to find all roots, which is faster than computing the zeros using a general numerical
    solver, but it requires SciPy and only works with low precision floating point
    numbers. (The function used with method=”sympy” is a recent addition to mpmath;
    before that a general solver was used.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jn`](#sympy.functions.special.bessel.jn "sympy.functions.special.bessel.jn"),
    [`yn`](#sympy.functions.special.bessel.yn "sympy.functions.special.bessel.yn"),
    [`besselj`](#sympy.functions.special.bessel.besselj "sympy.functions.special.bessel.besselj"),
    [`besselk`](#sympy.functions.special.bessel.besselk "sympy.functions.special.bessel.besselk"),
    [`bessely`](#sympy.functions.special.bessel.bessely "sympy.functions.special.bessel.bessely")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: The Marcum Q-function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Marcum Q-function is defined by the meromorphic continuation of
  prefs: []
  type: TYPE_NORMAL
- en: \[Q_m(a, b) = a^{- m + 1} \int_{b}^{\infty} x^{m} e^{- \frac{a^{2}}{2} - \frac{x^{2}}{2}}
    I_{m - 1}\left(a x\right)\, dx\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: 'Special values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(a\) and \(b\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R435](#id95)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Marcum_Q-function](https://en.wikipedia.org/wiki/Marcum_Q-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R436](#id96)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MarcumQ-Function.html](https://mathworld.wolfram.com/MarcumQ-Function.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Airy Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for Airy functions.
  prefs: []
  type: TYPE_NORMAL
- en: This class is meant to reduce code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: The Airy function \(\operatorname{Ai}\) of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Airy function \(\operatorname{Ai}(z)\) is defined to be the function satisfying
    Airy’s differential equation
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{\mathrm{d}^2 w(z)}{\mathrm{d}z^2} - z w(z) = 0.\]
  prefs: []
  type: TYPE_NORMAL
- en: Equivalently, for real \(z\)
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ai}(z) := \frac{1}{\pi} \int_0^\infty \cos\left(\frac{t^3}{3}
    + z t\right) \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Airy function object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'The Airy function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Airy function to arbitrary precision on the
    whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite \(\operatorname{Ai}(z)\) in terms of hypergeometric functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybi`](#sympy.functions.special.bessel.airybi "sympy.functions.special.bessel.airybi")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyaiprime`](#sympy.functions.special.bessel.airyaiprime "sympy.functions.special.bessel.airyaiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybiprime`](#sympy.functions.special.bessel.airybiprime "sympy.functions.special.bessel.airybiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R437](#id97)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Airy_function](https://en.wikipedia.org/wiki/Airy_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R438](#id98)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/9](https://dlmf.nist.gov/9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R439](#id99)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://encyclopediaofmath.org/wiki/Airy_functions](https://encyclopediaofmath.org/wiki/Airy_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R440](#id100)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/AiryFunctions.html](https://mathworld.wolfram.com/AiryFunctions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: The Airy function \(\operatorname{Bi}\) of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Airy function \(\operatorname{Bi}(z)\) is defined to be the function satisfying
    Airy’s differential equation
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{\mathrm{d}^2 w(z)}{\mathrm{d}z^2} - z w(z) = 0.\]
  prefs: []
  type: TYPE_NORMAL
- en: Equivalently, for real \(z\)
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Bi}(z) := \frac{1}{\pi} \int_0^\infty \exp\left(-\frac{t^3}{3}
    + z t\right) + \sin\left(\frac{t^3}{3} + z t\right) \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Airy function object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: 'The Airy function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Airy function to arbitrary precision on the
    whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite \(\operatorname{Bi}(z)\) in terms of hypergeometric functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyai`](#sympy.functions.special.bessel.airyai "sympy.functions.special.bessel.airyai")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyaiprime`](#sympy.functions.special.bessel.airyaiprime "sympy.functions.special.bessel.airyaiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybiprime`](#sympy.functions.special.bessel.airybiprime "sympy.functions.special.bessel.airybiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R441](#id101)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Airy_function](https://en.wikipedia.org/wiki/Airy_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R442](#id102)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/9](https://dlmf.nist.gov/9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R443](#id103)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://encyclopediaofmath.org/wiki/Airy_functions](https://encyclopediaofmath.org/wiki/Airy_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R444](#id104)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/AiryFunctions.html](https://mathworld.wolfram.com/AiryFunctions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: The derivative \(\operatorname{Ai}^\prime\) of the Airy function of the first
    kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Airy function \(\operatorname{Ai}^\prime(z)\) is defined to be the function
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Ai}^\prime(z) := \frac{\mathrm{d} \operatorname{Ai}(z)}{\mathrm{d}
    z}.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Airy function object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'The Airy function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Airy function to arbitrary precision on the
    whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite \(\operatorname{Ai}^\prime(z)\) in terms of hypergeometric functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyai`](#sympy.functions.special.bessel.airyai "sympy.functions.special.bessel.airyai")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybi`](#sympy.functions.special.bessel.airybi "sympy.functions.special.bessel.airybi")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybiprime`](#sympy.functions.special.bessel.airybiprime "sympy.functions.special.bessel.airybiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R445](#id105)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Airy_function](https://en.wikipedia.org/wiki/Airy_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R446](#id106)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/9](https://dlmf.nist.gov/9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R447](#id107)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://encyclopediaofmath.org/wiki/Airy_functions](https://encyclopediaofmath.org/wiki/Airy_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R448](#id108)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/AiryFunctions.html](https://mathworld.wolfram.com/AiryFunctions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: The derivative \(\operatorname{Bi}^\prime\) of the Airy function of the first
    kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Airy function \(\operatorname{Bi}^\prime(z)\) is defined to be the function
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Bi}^\prime(z) := \frac{\mathrm{d} \operatorname{Bi}(z)}{\mathrm{d}
    z}.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Airy function object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: 'Several special values are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: 'The Airy function obeys the mirror symmetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'Differentiation with respect to \(z\) is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: 'Series expansion is also supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: 'We can numerically evaluate the Airy function to arbitrary precision on the
    whole complex plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: 'Rewrite \(\operatorname{Bi}^\prime(z)\) in terms of hypergeometric functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyai`](#sympy.functions.special.bessel.airyai "sympy.functions.special.bessel.airyai")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airybi`](#sympy.functions.special.bessel.airybi "sympy.functions.special.bessel.airybi")'
  prefs: []
  type: TYPE_NORMAL
- en: Airy function of the second kind.
  prefs: []
  type: TYPE_NORMAL
- en: '[`airyaiprime`](#sympy.functions.special.bessel.airyaiprime "sympy.functions.special.bessel.airyaiprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of the Airy function of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R449](#id109)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Airy_function](https://en.wikipedia.org/wiki/Airy_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R450](#id110)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/9](https://dlmf.nist.gov/9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R451](#id111)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://encyclopediaofmath.org/wiki/Airy_functions](https://encyclopediaofmath.org/wiki/Airy_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R452](#id112)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/AiryFunctions.html](https://mathworld.wolfram.com/AiryFunctions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: B-Splines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: The \(n\)-th B-spline at \(x\) of degree \(d\) with knots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: degree of bspline
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**knots** : list of integer values'
  prefs: []
  type: TYPE_NORMAL
- en: list of knots points of bspline
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**n** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: \(n\)-th B-spline
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: B-Splines are piecewise polynomials of degree \(d\). They are defined on a set
    of knots, which is a sequence of integers or floats.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The 0th degree splines have a value of 1 on a single interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: For a given `(d, knots)` there are `len(knots)-d-1` B-splines defined, that
    are indexed by `n` (starting at 0).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a cubic B-spline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: 'By repeating knot points, you can introduce discontinuities in the B-splines
    and their derivatives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'It is quite time consuming to construct and evaluate B-splines. If you need
    to evaluate a B-spline many times, it is best to lambdify them first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bspline_basis_set`](#sympy.functions.special.bsplines.bspline_basis_set "sympy.functions.special.bsplines.bspline_basis_set")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R453](#id113)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/B-spline](https://en.wikipedia.org/wiki/B-spline)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: Return the `len(knots)-d-1` B-splines at *x* of degree *d* with *knots*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: degree of bspline
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**knots** : list of integers'
  prefs: []
  type: TYPE_NORMAL
- en: list of knots points of bspline
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a list of piecewise polynomials that are the `len(knots)-d-1`
    B-splines of degree *d* for the given knots. This function calls `bspline_basis(d,
    knots, n, x)` for different values of *n*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bspline_basis`](#sympy.functions.special.bsplines.bspline_basis "sympy.functions.special.bsplines.bspline_basis")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: Return spline of degree *d*, passing through the given *X* and *Y* values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d** : integer'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of Bspline strictly greater than equal to one
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : symbol'
  prefs: []
  type: TYPE_NORMAL
- en: '**X** : list of strictly increasing real values'
  prefs: []
  type: TYPE_NORMAL
- en: list of X coordinates through which the spline passes
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Y** : list of real values'
  prefs: []
  type: TYPE_NORMAL
- en: list of corresponding Y coordinates through which the spline passes
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a piecewise function such that each part is a polynomial
    of degree not greater than *d*. The value of *d* must be 1 or greater and the
    values of *X* must be strictly increasing.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bspline_basis_set`](#sympy.functions.special.bsplines.bspline_basis_set "sympy.functions.special.bsplines.bspline_basis_set"),
    [`interpolating_poly`](../polys/reference.html#sympy.polys.specialpolys.interpolating_poly
    "sympy.polys.specialpolys.interpolating_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: '## Riemann Zeta and Related Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Hurwitz zeta function (or Riemann zeta function).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For \(\operatorname{Re}(a) > 0\) and \(\operatorname{Re}(s) > 1\), this function
    is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\zeta(s, a) = \sum_{n=0}^\infty \frac{1}{(n + a)^s},\]
  prefs: []
  type: TYPE_NORMAL
- en: where the standard choice of argument for \(n + a\) is used. For fixed \(a\)
    not a nonpositive integer the Hurwitz zeta function admits a meromorphic continuation
    to all of \(\mathbb{C}\); it is an unbranched function with a simple pole at \(s
    = 1\).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hurwitz zeta function is a special case of the Lerch transcendent:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\zeta(s, a) = \Phi(1, s, a).\]
  prefs: []
  type: TYPE_NORMAL
- en: This formula defines an analytic continuation for all possible values of \(s\)
    and \(a\) (also \(\operatorname{Re}(a) < 0\)), see the documentation of [`lerchphi`](#sympy.functions.special.zeta_functions.lerchphi
    "sympy.functions.special.zeta_functions.lerchphi") for a description of the branching
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: If no value is passed for \(a\) a default value of \(a = 1\) is assumed, yielding
    the Riemann zeta function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For \(a = 1\) the Hurwitz zeta function reduces to the famous Riemann zeta
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\zeta(s, 1) = \zeta(s) = \sum_{n=1}^\infty \frac{1}{n^s}.\]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: 'The Riemann zeta function can also be expressed using the Dirichlet eta function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: 'The Riemann zeta function at nonnegative even and negative integer values is
    related to the Bernoulli numbers and polynomials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: 'The specific formulae are:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\zeta(2n) = -\frac{(2\pi i)^{2n} B_{2n}}{2(2n)!}\]\[\zeta(-n,a) = -\frac{B_{n+1}(a)}{n+1}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'No closed-form expressions are known at positive odd integers, but numerical
    evaluation is possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'The derivative of \(\zeta(s, a)\) with respect to \(a\) can be computed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: 'However the derivative with respect to \(s\) has no useful closed form expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: 'The Hurwitz zeta function can be expressed in terms of the Lerch transcendent,
    [`lerchphi`](#sympy.functions.special.zeta_functions.lerchphi "sympy.functions.special.zeta_functions.lerchphi"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dirichlet_eta`](#sympy.functions.special.zeta_functions.dirichlet_eta "sympy.functions.special.zeta_functions.dirichlet_eta"),
    [`lerchphi`](#sympy.functions.special.zeta_functions.lerchphi "sympy.functions.special.zeta_functions.lerchphi"),
    [`polylog`](#sympy.functions.special.zeta_functions.polylog "sympy.functions.special.zeta_functions.polylog")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R454](#id114)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/25.11](https://dlmf.nist.gov/25.11)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R455](#id115)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hurwitz_zeta_function](https://en.wikipedia.org/wiki/Hurwitz_zeta_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Dirichlet eta function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For \(\operatorname{Re}(s) > 0\) and \(0 < x \le 1\), this function is defined
    as
  prefs: []
  type: TYPE_NORMAL
- en: \[\eta(s, a) = \sum_{n=0}^\infty \frac{(-1)^n}{(n+a)^s}.\]
  prefs: []
  type: TYPE_NORMAL
- en: It admits a unique analytic continuation to all of \(\mathbb{C}\) for any fixed
    \(a\) not a nonpositive integer. It is an entire, unbranched function.
  prefs: []
  type: TYPE_NORMAL
- en: It can be expressed using the Hurwitz zeta function as
  prefs: []
  type: TYPE_NORMAL
- en: \[\eta(s, a) = \zeta(s,a) - 2^{1-s} \zeta\left(s, \frac{a+1}{2}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: and using the generalized Genocchi function as
  prefs: []
  type: TYPE_NORMAL
- en: \[\eta(s, a) = \frac{G(1-s, a)}{2(s-1)}.\]
  prefs: []
  type: TYPE_NORMAL
- en: In both cases the limiting value of \(\log2 - \psi(a) + \psi\left(\frac{a+1}{2}\right)\)
    is used when \(s = 1\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeta`](#sympy.functions.special.zeta_functions.zeta "sympy.functions.special.zeta_functions.zeta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R456](#id116)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Dirichlet_eta_function](https://en.wikipedia.org/wiki/Dirichlet_eta_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R457](#id117)]'
  prefs: []
  type: TYPE_NORMAL
- en: Peter Luschny, “An introduction to the Bernoulli function”, [https://arxiv.org/abs/2009.06743](https://arxiv.org/abs/2009.06743)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Polylogarithm function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For \(|z| < 1\) and \(s \in \mathbb{C}\), the polylogarithm is defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Li}_s(z) = \sum_{n=1}^\infty \frac{z^n}{n^s},\]
  prefs: []
  type: TYPE_NORMAL
- en: where the standard branch of the argument is used for \(n\). It admits an analytic
    continuation which is branched at \(z=1\) (notably not on the sheet of initial
    definition), \(z=0\) and \(z=\infty\).
  prefs: []
  type: TYPE_NORMAL
- en: The name polylogarithm comes from the fact that for \(s=1\), the polylogarithm
    is related to the ordinary logarithm (see examples), and that
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Li}_{s+1}(z) = \int_0^z \frac{\operatorname{Li}_s(t)}{t} \mathrm{d}t.\]
  prefs: []
  type: TYPE_NORMAL
- en: 'The polylogarithm is a special case of the Lerch transcendent:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{Li}_{s}(z) = z \Phi(z, s, 1).\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'For \(z \in \{0, 1, -1\}\), the polylogarithm is automatically expressed using
    other functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: 'If \(s\) is a negative integer, \(0\) or \(1\), the polylogarithm can be expressed
    using elementary functions. This can be done using `expand_func()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: 'The derivative with respect to \(z\) can be computed in closed form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: 'The polylogarithm can be expressed in terms of the lerch transcendent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeta`](#sympy.functions.special.zeta_functions.zeta "sympy.functions.special.zeta_functions.zeta"),
    [`lerchphi`](#sympy.functions.special.zeta_functions.lerchphi "sympy.functions.special.zeta_functions.lerchphi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: Lerch transcendent (Lerch phi function).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For \(\operatorname{Re}(a) > 0\), \(|z| < 1\) and \(s \in \mathbb{C}\), the
    Lerch transcendent is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\Phi(z, s, a) = \sum_{n=0}^\infty \frac{z^n}{(n + a)^s},\]
  prefs: []
  type: TYPE_NORMAL
- en: where the standard branch of the argument is used for \(n + a\), and by analytic
    continuation for other values of the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: A commonly used related function is the Lerch zeta function, defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[L(q, s, a) = \Phi(e^{2\pi i q}, s, a).\]
  prefs: []
  type: TYPE_NORMAL
- en: '**Analytic Continuation and Branching Behavior**'
  prefs: []
  type: TYPE_NORMAL
- en: It can be shown that
  prefs: []
  type: TYPE_NORMAL
- en: \[\Phi(z, s, a) = z\Phi(z, s, a+1) + a^{-s}.\]
  prefs: []
  type: TYPE_NORMAL
- en: This provides the analytic continuation to \(\operatorname{Re}(a) \le 0\).
  prefs: []
  type: TYPE_NORMAL
- en: Assume now \(\operatorname{Re}(a) > 0\). The integral representation
  prefs: []
  type: TYPE_NORMAL
- en: \[\Phi_0(z, s, a) = \int_0^\infty \frac{t^{s-1} e^{-at}}{1 - ze^{-t}} \frac{\mathrm{d}t}{\Gamma(s)}\]
  prefs: []
  type: TYPE_NORMAL
- en: provides an analytic continuation to \(\mathbb{C} - [1, \infty)\). Finally,
    for \(x \in (1, \infty)\) we find
  prefs: []
  type: TYPE_NORMAL
- en: \[\lim_{\epsilon \to 0^+} \Phi_0(x + i\epsilon, s, a) -\lim_{\epsilon \to 0^+}
    \Phi_0(x - i\epsilon, s, a) = \frac{2\pi i \log^{s-1}{x}}{x^a \Gamma(s)},\]
  prefs: []
  type: TYPE_NORMAL
- en: using the standard branch for both \(\log{x}\) and \(\log{\log{x}}\) (a branch
    of \(\log{\log{x}}\) is needed to evaluate \(\log{x}^{s-1}\)). This concludes
    the analytic continuation. The Lerch transcendent is thus branched at \(z \in
    \{0, 1, \infty\}\) and \(a \in \mathbb{Z}_{\le 0}\). For fixed \(z, a\) outside
    these branch points, it is an entire function of \(s\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The Lerch transcendent is a fairly general function, for this reason it does
    not automatically evaluate to simpler functions. Use `expand_func()` to achieve
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'If \(z=1\), the Lerch transcendent reduces to the Hurwitz zeta function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: 'More generally, if \(z\) is a root of unity, the Lerch transcendent reduces
    to a sum of Hurwitz zeta functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: 'If \(a=1\), the Lerch transcendent reduces to the polylogarithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: 'More generally, if \(a\) is rational, the Lerch transcendent reduces to a sum
    of polylogarithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: 'The derivatives with respect to \(z\) and \(a\) can be computed in closed form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`polylog`](#sympy.functions.special.zeta_functions.polylog "sympy.functions.special.zeta_functions.polylog"),
    [`zeta`](#sympy.functions.special.zeta_functions.zeta "sympy.functions.special.zeta_functions.zeta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R458](#id118)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bateman, H.; Erdelyi, A. (1953), Higher Transcendental Functions, Vol. I, New
    York: McGraw-Hill. Section 1.11.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R459](#id119)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/25.14](https://dlmf.nist.gov/25.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R460](#id120)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lerch_transcendent](https://en.wikipedia.org/wiki/Lerch_transcendent)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: Represents Stieltjes constants, \(\gamma_{k}\) that occur in Laurent Series
    expansion of the Riemann zeta function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: 'The zero’th stieltjes constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: 'For generalized stieltjes constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: 'Constants are only defined for integers >= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R461](#id121)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Stieltjes_constants](https://en.wikipedia.org/wiki/Stieltjes_constants)'
  prefs: []
  type: TYPE_NORMAL
- en: Hypergeometric Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: The generalized hypergeometric function is defined by a series where the ratios
    of successive terms are a rational function of the summation index. When convergent,
    it is continued analytically to the largest possible domain.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The hypergeometric function depends on two vectors of parameters, called the
    numerator parameters \(a_p\), and the denominator parameters \(b_q\). It also
    has an argument \(z\). The series definition is
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}{}_pF_q\left(\begin{matrix} a_1, \cdots, a_p \\ b_1, \cdots,
    b_q \end{matrix} \middle| z \right) = \sum_{n=0}^\infty \frac{(a_1)_n \cdots (a_p)_n}{(b_1)_n
    \cdots (b_q)_n} \frac{z^n}{n!},\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \((a)_n = (a)(a+1)\cdots(a+n-1)\) denotes the rising factorial.
  prefs: []
  type: TYPE_NORMAL
- en: If one of the \(b_q\) is a non-positive integer then the series is undefined
    unless one of the \(a_p\) is a larger (i.e., smaller in magnitude) non-positive
    integer. If none of the \(b_q\) is a non-positive integer and one of the \(a_p\)
    is a non-positive integer, then the series reduces to a polynomial. To simplify
    the following discussion, we assume that none of the \(a_p\) or \(b_q\) is a non-positive
    integer. For more details, see the references.
  prefs: []
  type: TYPE_NORMAL
- en: The series converges for all \(z\) if \(p \le q\), and thus defines an entire
    single-valued function in this case. If \(p = q+1\) the series converges for \(|z|
    < 1\), and can be continued analytically into a half-plane. If \(p > q+1\) the
    series is divergent for all \(z\).
  prefs: []
  type: TYPE_NORMAL
- en: Please note the hypergeometric function constructor currently does *not* check
    if the parameters actually yield a well-defined function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters \(a_p\) and \(b_q\) can be passed as arbitrary iterables, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also pretty printing (it looks better using Unicode):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters must always be iterables, even if they are vectors of length
    one or zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: 'But of course they may be variables (but if they depend on \(x\) then you should
    not expect much implemented functionality):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: 'The hypergeometric function generalizes many named special functions. The function
    `hyperexpand()` tries to express a hypergeometric function using named special
    functions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `expand_func()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: 'More examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also sometimes `hyperexpand()` parametric functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.simplify.hyperexpand`](../simplify/simplify.html#module-sympy.simplify.hyperexpand
    "sympy.simplify.hyperexpand"), [`gamma`](#sympy.functions.special.gamma_functions.gamma
    "sympy.functions.special.gamma_functions.gamma"), [`meijerg`](#sympy.functions.special.hyper.meijerg
    "sympy.functions.special.hyper.meijerg")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R462](#id122)]'
  prefs: []
  type: TYPE_NORMAL
- en: Luke, Y. L. (1969), The Special Functions and Their Approximations, Volume 1
  prefs: []
  type: TYPE_NORMAL
- en: '[[R463](#id123)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Generalized_hypergeometric_function](https://en.wikipedia.org/wiki/Generalized_hypergeometric_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Numerator parameters of the hypergeometric function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: Argument of the hypergeometric function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: Denominator parameters of the hypergeometric function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Return a condition on z under which the series converges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: A quantity related to the convergence of the series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Compute the radius of convergence of the defining series.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Note that even if this is not `oo`, the function may still be evaluated outside
    of the radius of convergence by analytic continuation. But if this is zero, then
    the function is not actually defined anywhere else.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: The Meijer G-function is defined by a Mellin-Barnes type integral that resembles
    an inverse Mellin transform. It generalizes the hypergeometric functions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The Meijer G-function depends on four sets of parameters. There are “*numerator
    parameters*” \(a_1, \ldots, a_n\) and \(a_{n+1}, \ldots, a_p\), and there are
    “*denominator parameters*” \(b_1, \ldots, b_m\) and \(b_{m+1}, \ldots, b_q\).
    Confusingly, it is traditionally denoted as follows (note the position of \(m\),
    \(n\), \(p\), \(q\), and how they relate to the lengths of the four parameter
    vectors):'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}G_{p,q}^{m,n} \left(\begin{matrix}a_1, \cdots, a_n & a_{n+1},
    \cdots, a_p \\ b_1, \cdots, b_m & b_{m+1}, \cdots, b_q \end{matrix} \middle| z
    \right).\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: However, in SymPy the four parameter vectors are always available separately
    (see examples), so that there is no need to keep track of the decorating sub-
    and super-scripts on the G symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'The G function is defined as the following integral:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{1}{2 \pi i} \int_L \frac{\prod_{j=1}^m \Gamma(b_j - s) \prod_{j=1}^n
    \Gamma(1 - a_j + s)}{\prod_{j=m+1}^q \Gamma(1- b_j +s) \prod_{j=n+1}^p \Gamma(a_j
    - s)} z^s \mathrm{d}s,\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\Gamma(z)\) is the gamma function. There are three possible contours
    which we will not describe in detail here (see the references). If the integral
    converges along more than one of them, the definitions agree. The contours all
    separate the poles of \(\Gamma(1-a_j+s)\) from the poles of \(\Gamma(b_k-s)\),
    so in particular the G function is undefined if \(a_j - b_k \in \mathbb{Z}_{>0}\)
    for some \(j \le n\) and \(k \le m\).
  prefs: []
  type: TYPE_NORMAL
- en: The conditions under which one of the contours yields a convergent integral
    are complicated and we do not state them here, see the references.
  prefs: []
  type: TYPE_NORMAL
- en: Please note currently the Meijer G-function constructor does *not* check any
    convergence conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pass the parameters either as four separate vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: 'Or as two nested vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: As with the hypergeometric function, the parameters may be passed as arbitrary
    iterables. Vectors of length zero and one also have to be passed as iterables.
    The parameters need not be constants, but if they depend on the argument then
    not much implemented functionality should be expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the subvectors of parameters are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: 'The Meijer G-function generalizes the hypergeometric functions. In some cases
    it can be expressed in terms of hypergeometric functions, using Slater’s theorem.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus the Meijer G-function also subsumes many named functions as special cases.
    You can use `expand_func()` or `hyperexpand()` to (try to) rewrite a Meijer G-function
    in terms of named special functions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hyper`](#sympy.functions.special.hyper.hyper "sympy.functions.special.hyper.hyper"),
    [`sympy.simplify.hyperexpand`](../simplify/simplify.html#module-sympy.simplify.hyperexpand
    "sympy.simplify.hyperexpand")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R464](#id124)]'
  prefs: []
  type: TYPE_NORMAL
- en: Luke, Y. L. (1969), The Special Functions and Their Approximations, Volume 1
  prefs: []
  type: TYPE_NORMAL
- en: '[[R465](#id125)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Meijer_G-function](https://en.wikipedia.org/wiki/Meijer_G-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: First set of numerator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Second set of numerator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Combined numerator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: Argument of the Meijer G-function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: First set of denominator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: Second set of denominator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: Combined denominator parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: A quantity related to the convergence region of the integral, c.f. references.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: Return a number \(P\) such that \(G(x*exp(I*P)) == G(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: Get the defining integrand D(s).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: Returns true if expression has numeric data only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: A quantity related to the convergence region of the integral, c.f. references.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the Appell hypergeometric function of two variables as:'
  prefs: []
  type: TYPE_NORMAL
- en: \[F_1(a,b_1,b_2,c,x,y) = \sum_{m=0}^{\infty} \sum_{n=0}^{\infty} \frac{(a)_{m+n}
    (b_1)_m (b_2)_n}{(c)_{m+n}} \frac{x^m y^n}{m! n!}.\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R466](#id126)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Appell_series](https://en.wikipedia.org/wiki/Appell_series)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R467](#id127)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/HypergeometricFunctions/AppellF1/](https://functions.wolfram.com/HypergeometricFunctions/AppellF1/)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Elliptic integrals'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: The complete elliptic integral of the first kind, defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[K(m) = F\left(\tfrac{\pi}{2}\middle| m\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(F\left(z\middle| m\right)\) is the Legendre incomplete elliptic integral
    of the first kind.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The function \(K(m)\) is a single-valued function on the complex plane with
    branch cut along the interval \((1, \infty)\).
  prefs: []
  type: TYPE_NORMAL
- en: Note that our notation defines the incomplete elliptic integral in terms of
    the parameter \(m\) instead of the elliptic modulus (eccentricity) \(k\). In this
    case, the parameter \(m\) is defined as \(m=k^2\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`elliptic_f`](#sympy.functions.special.elliptic_integrals.elliptic_f "sympy.functions.special.elliptic_integrals.elliptic_f")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R468](#id128)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Elliptic_integrals](https://en.wikipedia.org/wiki/Elliptic_integrals)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R469](#id129)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticK](https://functions.wolfram.com/EllipticIntegrals/EllipticK)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: The Legendre incomplete elliptic integral of the first kind, defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[F\left(z\middle| m\right) = \int_0^z \frac{dt}{\sqrt{1 - m \sin^2 t}}\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function reduces to a complete elliptic integral of the first kind, \(K(m)\),
    when \(z = \pi/2\).
  prefs: []
  type: TYPE_NORMAL
- en: Note that our notation defines the incomplete elliptic integral in terms of
    the parameter \(m\) instead of the elliptic modulus (eccentricity) \(k\). In this
    case, the parameter \(m\) is defined as \(m=k^2\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`elliptic_k`](#sympy.functions.special.elliptic_integrals.elliptic_k "sympy.functions.special.elliptic_integrals.elliptic_k")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R470](#id130)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Elliptic_integrals](https://en.wikipedia.org/wiki/Elliptic_integrals)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R471](#id131)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticF](https://functions.wolfram.com/EllipticIntegrals/EllipticF)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Called with two arguments \(z\) and \(m\), evaluates the incomplete elliptic
    integral of the second kind, defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[E\left(z\middle| m\right) = \int_0^z \sqrt{1 - m \sin^2 t} dt\]
  prefs: []
  type: TYPE_NORMAL
- en: Called with a single argument \(m\), evaluates the Legendre complete elliptic
    integral of the second kind
  prefs: []
  type: TYPE_NORMAL
- en: \[E(m) = E\left(\tfrac{\pi}{2}\middle| m\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The function \(E(m)\) is a single-valued function on the complex plane with
    branch cut along the interval \((1, \infty)\).
  prefs: []
  type: TYPE_NORMAL
- en: Note that our notation defines the incomplete elliptic integral in terms of
    the parameter \(m\) instead of the elliptic modulus (eccentricity) \(k\). In this
    case, the parameter \(m\) is defined as \(m=k^2\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R472](#id132)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Elliptic_integrals](https://en.wikipedia.org/wiki/Elliptic_integrals)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R473](#id133)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticE2](https://functions.wolfram.com/EllipticIntegrals/EllipticE2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R474](#id134)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticE](https://functions.wolfram.com/EllipticIntegrals/EllipticE)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Called with three arguments \(n\), \(z\) and \(m\), evaluates the Legendre incomplete
    elliptic integral of the third kind, defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\Pi\left(n; z\middle| m\right) = \int_0^z \frac{dt} {\left(1 - n \sin^2 t\right)
    \sqrt{1 - m \sin^2 t}}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Called with two arguments \(n\) and \(m\), evaluates the complete elliptic
    integral of the third kind:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\Pi\left(n\middle| m\right) = \Pi\left(n; \tfrac{\pi}{2}\middle| m\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Note that our notation defines the incomplete elliptic integral in terms of
    the parameter \(m\) instead of the elliptic modulus (eccentricity) \(k\). In this
    case, the parameter \(m\) is defined as \(m=k^2\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R475](#id135)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Elliptic_integrals](https://en.wikipedia.org/wiki/Elliptic_integrals)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R476](#id136)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticPi3](https://functions.wolfram.com/EllipticIntegrals/EllipticPi3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R477](#id137)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/EllipticIntegrals/EllipticPi](https://functions.wolfram.com/EllipticIntegrals/EllipticPi)  ##
    Mathieu Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for Mathieu functions.
  prefs: []
  type: TYPE_NORMAL
- en: This class is meant to reduce code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: The Mathieu Sine function \(S(a,q,z)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is one solution of the Mathieu differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y(x)^{\prime\prime} + (a - 2 q \cos(2 x)) y(x) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: The other solution is the Mathieu Cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieuc`](#sympy.functions.special.mathieu_functions.mathieuc "sympy.functions.special.mathieu_functions.mathieuc")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieusprime`](#sympy.functions.special.mathieu_functions.mathieusprime
    "sympy.functions.special.mathieu_functions.mathieusprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu sine function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieucprime`](#sympy.functions.special.mathieu_functions.mathieucprime
    "sympy.functions.special.mathieu_functions.mathieucprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R478](#id138)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathieu_function](https://en.wikipedia.org/wiki/Mathieu_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R479](#id139)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/28](https://dlmf.nist.gov/28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R480](#id140)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MathieuFunction.html](https://mathworld.wolfram.com/MathieuFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R481](#id141)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuS/](https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuS/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: The Mathieu Cosine function \(C(a,q,z)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is one solution of the Mathieu differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y(x)^{\prime\prime} + (a - 2 q \cos(2 x)) y(x) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: The other solution is the Mathieu Sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieus`](#sympy.functions.special.mathieu_functions.mathieus "sympy.functions.special.mathieu_functions.mathieus")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu sine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieusprime`](#sympy.functions.special.mathieu_functions.mathieusprime
    "sympy.functions.special.mathieu_functions.mathieusprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu sine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieucprime`](#sympy.functions.special.mathieu_functions.mathieucprime
    "sympy.functions.special.mathieu_functions.mathieucprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu cosine function
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R482](#id142)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathieu_function](https://en.wikipedia.org/wiki/Mathieu_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R483](#id143)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/28](https://dlmf.nist.gov/28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R484](#id144)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MathieuFunction.html](https://mathworld.wolfram.com/MathieuFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R485](#id145)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuC/](https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuC/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: The derivative \(S^{\prime}(a,q,z)\) of the Mathieu Sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is one solution of the Mathieu differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y(x)^{\prime\prime} + (a - 2 q \cos(2 x)) y(x) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: The other solution is the Mathieu Cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieus`](#sympy.functions.special.mathieu_functions.mathieus "sympy.functions.special.mathieu_functions.mathieus")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu sine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieuc`](#sympy.functions.special.mathieu_functions.mathieuc "sympy.functions.special.mathieu_functions.mathieuc")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu cosine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieucprime`](#sympy.functions.special.mathieu_functions.mathieucprime
    "sympy.functions.special.mathieu_functions.mathieucprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu cosine function
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R486](#id146)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathieu_function](https://en.wikipedia.org/wiki/Mathieu_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R487](#id147)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/28](https://dlmf.nist.gov/28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R488](#id148)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MathieuFunction.html](https://mathworld.wolfram.com/MathieuFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R489](#id149)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuSPrime/](https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuSPrime/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: The derivative \(C^{\prime}(a,q,z)\) of the Mathieu Cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is one solution of the Mathieu differential equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \[y(x)^{\prime\prime} + (a - 2 q \cos(2 x)) y(x) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: The other solution is the Mathieu Sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieus`](#sympy.functions.special.mathieu_functions.mathieus "sympy.functions.special.mathieu_functions.mathieus")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu sine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieuc`](#sympy.functions.special.mathieu_functions.mathieuc "sympy.functions.special.mathieu_functions.mathieuc")'
  prefs: []
  type: TYPE_NORMAL
- en: Mathieu cosine function
  prefs: []
  type: TYPE_NORMAL
- en: '[`mathieusprime`](#sympy.functions.special.mathieu_functions.mathieusprime
    "sympy.functions.special.mathieu_functions.mathieusprime")'
  prefs: []
  type: TYPE_NORMAL
- en: Derivative of Mathieu sine function
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R490](#id150)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathieu_function](https://en.wikipedia.org/wiki/Mathieu_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R491](#id151)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/28](https://dlmf.nist.gov/28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R492](#id152)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/MathieuFunction.html](https://mathworld.wolfram.com/MathieuFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R493](#id153)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuCPrime/](https://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuCPrime/)  ##
    Orthogonal Polynomials'
  prefs: []
  type: TYPE_NORMAL
- en: This module mainly implements special orthogonal polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: See also functions.combinatorial.numbers which contains some combinatorial polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Jacobi Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Jacobi polynomial \(P_n^{\left(\alpha, \beta\right)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`jacobi(n, alpha, beta, x)` gives the \(n\)th Jacobi polynomial in \(x\), \(P_n^{\left(\alpha,
    \beta\right)}(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Jacobi polynomials are orthogonal on \([-1, 1]\) with respect to the weight
    \(\left(1-x\right)^\alpha \left(1+x\right)^\beta\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R494](#id154)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Jacobi_polynomials](https://en.wikipedia.org/wiki/Jacobi_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R495](#id155)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/JacobiPolynomial.html](https://mathworld.wolfram.com/JacobiPolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R496](#id156)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/JacobiP/](https://functions.wolfram.com/Polynomials/JacobiP/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: Jacobi polynomial \(P_n^{\left(\alpha, \beta\right)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : integer degree of polynomial'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : alpha value'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : beta value'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : symbol'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`jacobi_normalized(n, alpha, beta, x)` gives the \(n\)th Jacobi polynomial
    in \(x\), \(P_n^{\left(\alpha, \beta\right)}(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Jacobi polynomials are orthogonal on \([-1, 1]\) with respect to the weight
    \(\left(1-x\right)^\alpha \left(1+x\right)^\beta\).
  prefs: []
  type: TYPE_NORMAL
- en: 'This functions returns the polynomials normilzed:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\int_{-1}^{1} P_m^{\left(\alpha, \beta\right)}(x) P_n^{\left(\alpha, \beta\right)}(x)
    (1-x)^{\alpha} (1+x)^{\beta} \mathrm{d}x = \delta_{m,n}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R497](#id157)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Jacobi_polynomials](https://en.wikipedia.org/wiki/Jacobi_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R498](#id158)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/JacobiPolynomial.html](https://mathworld.wolfram.com/JacobiPolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R499](#id159)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/JacobiP/](https://functions.wolfram.com/Polynomials/JacobiP/)'
  prefs: []
  type: TYPE_NORMAL
- en: Gegenbauer Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: Gegenbauer polynomial \(C_n^{\left(\alpha\right)}(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`gegenbauer(n, alpha, x)` gives the \(n\)th Gegenbauer polynomial in \(x\),
    \(C_n^{\left(\alpha\right)}(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Gegenbauer polynomials are orthogonal on \([-1, 1]\) with respect to the
    weight \(\left(1-x^2\right)^{\alpha-\frac{1}{2}}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R500](#id160)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Gegenbauer_polynomials](https://en.wikipedia.org/wiki/Gegenbauer_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R501](#id161)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/GegenbauerPolynomial.html](https://mathworld.wolfram.com/GegenbauerPolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R502](#id162)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/GegenbauerC3/](https://functions.wolfram.com/Polynomials/GegenbauerC3/)'
  prefs: []
  type: TYPE_NORMAL
- en: Chebyshev Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: Chebyshev polynomial of the first kind, \(T_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`chebyshevt(n, x)` gives the \(n\)th Chebyshev polynomial (of the first kind)
    in \(x\), \(T_n(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Chebyshev polynomials of the first kind are orthogonal on \([-1, 1]\) with
    respect to the weight \(\frac{1}{\sqrt{1-x^2}}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R503](#id163)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Chebyshev_polynomial](https://en.wikipedia.org/wiki/Chebyshev_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R504](#id164)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html](https://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R505](#id165)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ChebyshevPolynomialoftheSecondKind.html](https://mathworld.wolfram.com/ChebyshevPolynomialoftheSecondKind.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R506](#id166)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/ChebyshevT/](https://functions.wolfram.com/Polynomials/ChebyshevT/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R507](#id167)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/ChebyshevU/](https://functions.wolfram.com/Polynomials/ChebyshevU/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: Chebyshev polynomial of the second kind, \(U_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`chebyshevu(n, x)` gives the \(n\)th Chebyshev polynomial of the second kind
    in x, \(U_n(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Chebyshev polynomials of the second kind are orthogonal on \([-1, 1]\) with
    respect to the weight \(\sqrt{1-x^2}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R508](#id168)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Chebyshev_polynomial](https://en.wikipedia.org/wiki/Chebyshev_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R509](#id169)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html](https://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R510](#id170)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ChebyshevPolynomialoftheSecondKind.html](https://mathworld.wolfram.com/ChebyshevPolynomialoftheSecondKind.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R511](#id171)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/ChebyshevT/](https://functions.wolfram.com/Polynomials/ChebyshevT/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R512](#id172)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/ChebyshevU/](https://functions.wolfram.com/Polynomials/ChebyshevU/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '`chebyshev_root(n, k)` returns the \(k\)th root (indexed from zero) of the
    \(n\)th Chebyshev polynomial of the first kind; that is, if \(0 \le k < n\), `chebyshevt(n,
    chebyshevt_root(n, k)) == 0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '`chebyshevu_root(n, k)` returns the \(k\)th root (indexed from zero) of the
    \(n\)th Chebyshev polynomial of the second kind; that is, if \(0 \le k < n\),
    `chebyshevu(n, chebyshevu_root(n, k)) == 0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: Legendre Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '`legendre(n, x)` gives the \(n\)th Legendre polynomial of \(x\), \(P_n(x)\)'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Legendre polynomials are orthogonal on \([-1, 1]\) with respect to the constant
    weight 1\. They satisfy \(P_n(1) = 1\) for all \(n\); further, \(P_n\) is odd
    for odd \(n\) and even for even \(n\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R513](#id173)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Legendre_polynomial](https://en.wikipedia.org/wiki/Legendre_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R514](#id174)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LegendrePolynomial.html](https://mathworld.wolfram.com/LegendrePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R515](#id175)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LegendreP/](https://functions.wolfram.com/Polynomials/LegendreP/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R516](#id176)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LegendreP2/](https://functions.wolfram.com/Polynomials/LegendreP2/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '`assoc_legendre(n, m, x)` gives \(P_n^m(x)\), where \(n\) and \(m\) are the
    degree and order or an expression which is related to the nth order Legendre polynomial,
    \(P_n(x)\) in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: \[P_n^m(x) = (-1)^m (1 - x^2)^{\frac{m}{2}} \frac{\mathrm{d}^m P_n(x)}{\mathrm{d}
    x^m}\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Associated Legendre polynomials are orthogonal on \([-1, 1]\) with:'
  prefs: []
  type: TYPE_NORMAL
- en: weight \(= 1\) for the same \(m\) and different \(n\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: weight \(= \frac{1}{1-x^2}\) for the same \(n\) and different \(m\).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R517](#id177)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Associated_Legendre_polynomials](https://en.wikipedia.org/wiki/Associated_Legendre_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R518](#id178)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LegendrePolynomial.html](https://mathworld.wolfram.com/LegendrePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R519](#id179)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LegendreP/](https://functions.wolfram.com/Polynomials/LegendreP/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R520](#id180)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LegendreP2/](https://functions.wolfram.com/Polynomials/LegendreP2/)'
  prefs: []
  type: TYPE_NORMAL
- en: Hermite Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '`hermite(n, x)` gives the \(n\)th Hermite polynomial in \(x\), \(H_n(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The Hermite polynomials are orthogonal on \((-\infty, \infty)\) with respect
    to the weight \(\exp\left(-x^2\right)\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R521](#id181)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hermite_polynomial](https://en.wikipedia.org/wiki/Hermite_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R522](#id182)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/HermitePolynomial.html](https://mathworld.wolfram.com/HermitePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R523](#id183)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/HermiteH/](https://functions.wolfram.com/Polynomials/HermiteH/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '`hermite_prob(n, x)` gives the \(n\)th probabilist’s Hermite polynomial in
    \(x\), \(He_n(x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The probabilist’s Hermite polynomials are orthogonal on \((-\infty, \infty)\)
    with respect to the weight \(\exp\left(-\frac{x^2}{2}\right)\). They are monic
    polynomials, related to the plain Hermite polynomials ([`hermite`](#sympy.functions.special.polynomials.hermite
    "sympy.functions.special.polynomials.hermite")) by
  prefs: []
  type: TYPE_NORMAL
- en: \[He_n(x) = 2^{-n/2} H_n(x/\sqrt{2})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: 'The sum of absolute values of coefficients of \(He_n(x)\) is the number of
    matchings in the complete graph \(K_n\) or telephone number, A000085 in the OEIS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R524](#id184)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hermite_polynomial](https://en.wikipedia.org/wiki/Hermite_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R525](#id185)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/HermitePolynomial.html](https://mathworld.wolfram.com/HermitePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Laguerre Polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Returns the \(n\)th Laguerre polynomial in \(x\), \(L_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of Laguerre polynomial. Must be \(n \ge 0\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`assoc_laguerre`](#sympy.functions.special.polynomials.assoc_laguerre "sympy.functions.special.polynomials.assoc_laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R526](#id186)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Laguerre_polynomial](https://en.wikipedia.org/wiki/Laguerre_polynomial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R527](#id187)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/LaguerrePolynomial.html](https://mathworld.wolfram.com/LaguerrePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R528](#id188)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LaguerreL/](https://functions.wolfram.com/Polynomials/LaguerreL/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R529](#id189)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LaguerreL3/](https://functions.wolfram.com/Polynomials/LaguerreL3/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: Returns the \(n\)th generalized Laguerre polynomial in \(x\), \(L_n(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of Laguerre polynomial. Must be \(n \ge 0\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alpha** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary expression. For `alpha=0` regular Laguerre polynomials will be generated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`jacobi`](#sympy.functions.special.polynomials.jacobi "sympy.functions.special.polynomials.jacobi"),
    [`gegenbauer`](#sympy.functions.special.polynomials.gegenbauer "sympy.functions.special.polynomials.gegenbauer"),
    [`chebyshevt`](#sympy.functions.special.polynomials.chebyshevt "sympy.functions.special.polynomials.chebyshevt"),
    [`chebyshevt_root`](#sympy.functions.special.polynomials.chebyshevt_root "sympy.functions.special.polynomials.chebyshevt_root"),
    [`chebyshevu`](#sympy.functions.special.polynomials.chebyshevu "sympy.functions.special.polynomials.chebyshevu"),
    [`chebyshevu_root`](#sympy.functions.special.polynomials.chebyshevu_root "sympy.functions.special.polynomials.chebyshevu_root"),
    [`legendre`](#sympy.functions.special.polynomials.legendre "sympy.functions.special.polynomials.legendre"),
    [`assoc_legendre`](#sympy.functions.special.polynomials.assoc_legendre "sympy.functions.special.polynomials.assoc_legendre"),
    [`hermite`](#sympy.functions.special.polynomials.hermite "sympy.functions.special.polynomials.hermite"),
    [`hermite_prob`](#sympy.functions.special.polynomials.hermite_prob "sympy.functions.special.polynomials.hermite_prob"),
    [`laguerre`](#sympy.functions.special.polynomials.laguerre "sympy.functions.special.polynomials.laguerre"),
    [`sympy.polys.orthopolys.jacobi_poly`](../polys/reference.html#sympy.polys.orthopolys.jacobi_poly
    "sympy.polys.orthopolys.jacobi_poly"), [`sympy.polys.orthopolys.gegenbauer_poly`](../polys/reference.html#sympy.polys.orthopolys.gegenbauer_poly
    "sympy.polys.orthopolys.gegenbauer_poly"), [`sympy.polys.orthopolys.chebyshevt_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevt_poly
    "sympy.polys.orthopolys.chebyshevt_poly"), [`sympy.polys.orthopolys.chebyshevu_poly`](../polys/reference.html#sympy.polys.orthopolys.chebyshevu_poly
    "sympy.polys.orthopolys.chebyshevu_poly"), [`sympy.polys.orthopolys.hermite_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_poly
    "sympy.polys.orthopolys.hermite_poly"), [`sympy.polys.orthopolys.hermite_prob_poly`](../polys/reference.html#sympy.polys.orthopolys.hermite_prob_poly
    "sympy.polys.orthopolys.hermite_prob_poly"), [`sympy.polys.orthopolys.legendre_poly`](../polys/reference.html#sympy.polys.orthopolys.legendre_poly
    "sympy.polys.orthopolys.legendre_poly"), [`sympy.polys.orthopolys.laguerre_poly`](../polys/reference.html#sympy.polys.orthopolys.laguerre_poly
    "sympy.polys.orthopolys.laguerre_poly")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R530](#id190)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Laguerre_polynomial#Generalized_Laguerre_polynomials](https://en.wikipedia.org/wiki/Laguerre_polynomial#Generalized_Laguerre_polynomials)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R531](#id191)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html](https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R532](#id192)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LaguerreL/](https://functions.wolfram.com/Polynomials/LaguerreL/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R533](#id193)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/LaguerreL3/](https://functions.wolfram.com/Polynomials/LaguerreL3/)'
  prefs: []
  type: TYPE_NORMAL
- en: Spherical Harmonics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: Spherical harmonics defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[Y_n^m(\theta, \varphi) := \sqrt{\frac{(2n+1)(n-m)!}{4\pi(n+m)!}} \exp(i m
    \varphi) \mathrm{P}_n^m\left(\cos(\theta)\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`Ynm()` gives the spherical harmonic function of order \(n\) and \(m\) in \(\theta\)
    and \(\varphi\), \(Y_n^m(\theta, \varphi)\). The four parameters are as follows:
    \(n \geq 0\) an integer and \(m\) an integer such that \(-n \leq m \leq n\) holds.
    The two angles are real-valued with \(\theta \in [0, \pi]\) and \(\varphi \in
    [0, 2\pi]\).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: 'Several symmetries are known, for the order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: 'As well as for the angles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: 'For specific integers \(n\) and \(m\) we can evaluate the harmonics to more
    useful expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: 'We can differentiate the functions with respect to both angles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: 'Further we can compute the complex conjugation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: 'To get back the well known expressions in spherical coordinates, we use full
    expansion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ynm_c`](#sympy.functions.special.spherical_harmonics.Ynm_c "sympy.functions.special.spherical_harmonics.Ynm_c"),
    [`Znm`](#sympy.functions.special.spherical_harmonics.Znm "sympy.functions.special.spherical_harmonics.Znm")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R534](#id194)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Spherical_harmonics](https://en.wikipedia.org/wiki/Spherical_harmonics)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R535](#id195)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/SphericalHarmonic.html](https://mathworld.wolfram.com/SphericalHarmonic.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R536](#id196)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/SphericalHarmonicY/](https://functions.wolfram.com/Polynomials/SphericalHarmonicY/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R537](#id197)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/14.30](https://dlmf.nist.gov/14.30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Conjugate spherical harmonics defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\overline{Y_n^m(\theta, \varphi)} := (-1)^m Y_n^{-m}(\theta, \varphi).\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: 'For specific integers \(n\) and \(m\) we can evaluate the harmonics to more
    useful expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ynm`](#sympy.functions.special.spherical_harmonics.Ynm "sympy.functions.special.spherical_harmonics.Ynm"),
    [`Znm`](#sympy.functions.special.spherical_harmonics.Znm "sympy.functions.special.spherical_harmonics.Znm")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R538](#id198)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Spherical_harmonics](https://en.wikipedia.org/wiki/Spherical_harmonics)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R539](#id199)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/SphericalHarmonic.html](https://mathworld.wolfram.com/SphericalHarmonic.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R540](#id200)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/SphericalHarmonicY/](https://functions.wolfram.com/Polynomials/SphericalHarmonicY/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Real spherical harmonics defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}Z_n^m(\theta, \varphi) := \begin{cases} \frac{Y_n^m(\theta, \varphi)
    + \overline{Y_n^m(\theta, \varphi)}}{\sqrt{2}} &\quad m > 0 \\ Y_n^m(\theta, \varphi)
    &\quad m = 0 \\ \frac{Y_n^m(\theta, \varphi) - \overline{Y_n^m(\theta, \varphi)}}{i
    \sqrt{2}} &\quad m < 0 \\ \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: which gives in simplified form
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}Z_n^m(\theta, \varphi) = \begin{cases} \frac{Y_n^m(\theta, \varphi)
    + (-1)^m Y_n^{-m}(\theta, \varphi)}{\sqrt{2}} &\quad m > 0 \\ Y_n^m(\theta, \varphi)
    &\quad m = 0 \\ \frac{Y_n^m(\theta, \varphi) - (-1)^m Y_n^{-m}(\theta, \varphi)}{i
    \sqrt{2}} &\quad m < 0 \\ \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: 'For specific integers n and m we can evaluate the harmonics to more useful
    expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Ynm`](#sympy.functions.special.spherical_harmonics.Ynm "sympy.functions.special.spherical_harmonics.Ynm"),
    [`Ynm_c`](#sympy.functions.special.spherical_harmonics.Ynm_c "sympy.functions.special.spherical_harmonics.Ynm_c")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R541](#id201)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Spherical_harmonics](https://en.wikipedia.org/wiki/Spherical_harmonics)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R542](#id202)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/SphericalHarmonic.html](https://mathworld.wolfram.com/SphericalHarmonic.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R543](#id203)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/Polynomials/SphericalHarmonicY/](https://functions.wolfram.com/Polynomials/SphericalHarmonicY/)'
  prefs: []
  type: TYPE_NORMAL
- en: Tensor Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Represent the Levi-Civita symbol.
  prefs: []
  type: TYPE_NORMAL
- en: This is a compatibility wrapper to `LeviCivita()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`LeviCivita`](#sympy.functions.special.tensor_functions.LeviCivita "sympy.functions.special.tensor_functions.LeviCivita")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate Levi-Civita symbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: Represent the Levi-Civita symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: For even permutations of indices it returns 1, for odd permutations -1, and
    for everything else (a repeated index) it returns 0.
  prefs: []
  type: TYPE_NORMAL
- en: Thus it represents an alternating pseudotensor.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Eijk`](#sympy.functions.special.tensor_functions.Eijk "sympy.functions.special.tensor_functions.Eijk")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: The discrete, or Kronecker, delta function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**i** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The first index of the delta function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**j** : Number, Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: The second index of the delta function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A function that takes in two integers \(i\) and \(j\). It returns \(0\) if \(i\)
    and \(j\) are not equal, or it returns \(1\) if \(i\) and \(j\) are equal.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'An example with integer indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbolic indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval`](#sympy.functions.special.tensor_functions.KroneckerDelta.eval "sympy.functions.special.tensor_functions.KroneckerDelta.eval"),
    [`DiracDelta`](#sympy.functions.special.delta_functions.DiracDelta "sympy.functions.special.delta_functions.DiracDelta")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R544](#id204)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Kronecker_delta](https://en.wikipedia.org/wiki/Kronecker_delta)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: Evaluates the discrete delta function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: indirect doctest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if indices are either both above or below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta can be non-zero above fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"), [`is_only_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi"),
    [`is_only_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta can be non-zero below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"), [`is_only_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi"),
    [`is_only_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta is restricted to above fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"), [`is_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"), [`is_only_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: True if Delta is restricted to below fermi.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi"), [`is_below_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi"), [`is_only_above_fermi`](#sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi
    "sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index which is preferred to substitute in the final expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The index to substitute is the index with less information regarding fermi level.
    If indices contain the same information, ‘a’ is preferred before ‘b’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`preferred_index`](#sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index
    "sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Returns the index which is preferred to keep in the final expression.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The preferred index is the index with more information regarding fermi level.
    If indices contain the same information, ‘a’ is preferred before ‘b’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`killable_index`](#sympy.functions.special.tensor_functions.KroneckerDelta.killable_index
    "sympy.functions.special.tensor_functions.KroneckerDelta.killable_index")'
  prefs: []
  type: TYPE_NORMAL
