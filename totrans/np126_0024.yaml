- en: numpy.ndarray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: An array object represents a multidimensional, homogeneous array of fixed-size
    items. An associated data-type object describes the format of each element in
    the array (its byte-order, how many bytes it occupies in memory, whether it is
    an integer, a floating point number, or something else, etc.)
  prefs: []
  type: TYPE_NORMAL
- en: Arrays should be constructed using [`array`](numpy.array.html#numpy.array "numpy.array"),
    [`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros") or [`empty`](numpy.empty.html#numpy.empty
    "numpy.empty") (refer to the See Also section below). The parameters given here
    refer to a low-level method (*ndarray(…)*) for instantiating an array.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, refer to the [`numpy`](../index.html#module-numpy "numpy")
    module and examine the methods and attributes of an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(for the __new__ method; see Notes below)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**tuple of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of created array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Any object that can be interpreted as a numpy data type.
  prefs: []
  type: TYPE_NORMAL
- en: '**buffer**object exposing buffer interface, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used to fill the array with data.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Offset of array data in buffer.
  prefs: []
  type: TYPE_NORMAL
- en: '**strides**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Strides of data in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Row-major (C-style) or column-major (Fortran-style) order.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array`](numpy.array.html#numpy.array "numpy.array")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`zeros`](numpy.zeros.html#numpy.zeros "numpy.zeros")'
  prefs: []
  type: TYPE_NORMAL
- en: Create an array, each element of which is zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[`empty`](numpy.empty.html#numpy.empty "numpy.empty")'
  prefs: []
  type: TYPE_NORMAL
- en: Create an array, but leave its allocated memory unchanged (i.e., it contains
    “garbage”).
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  prefs: []
  type: TYPE_NORMAL
- en: Create a data-type.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.typing.NDArray`](../typing.html#numpy.typing.NDArray "numpy.typing.NDArray")'
  prefs: []
  type: TYPE_NORMAL
- en: An ndarray alias [generic](https://docs.python.org/3/glossary.html#term-generic-type
    "(in Python v3.11)") w.r.t. its [`dtype.type`](numpy.dtype.type.html#numpy.dtype.type
    "numpy.dtype.type").
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two modes of creating an array using `__new__`:'
  prefs: []
  type: TYPE_NORMAL
- en: If *buffer* is None, then only [`shape`](numpy.shape.html#numpy.shape "numpy.shape"),
    [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), and *order* are used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If *buffer* is an object exposing the buffer interface, then all keywords are
    interpreted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No `__init__` method is needed because the array is fully initialized after
    the `__new__` method.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: These examples illustrate the low-level [`ndarray`](#numpy.ndarray "numpy.ndarray")
    constructor. Refer to the *See Also* section above for easier ways of constructing
    an ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: 'First mode, *buffer* is None:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Second mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: View of the transposed array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`data`](numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")buffer'
  prefs: []
  type: TYPE_NORMAL
- en: Python buffer object pointing to the start of the array’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")dtype object'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type of the array’s elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flags`](numpy.ndarray.flags.html#numpy.ndarray.flags "numpy.ndarray.flags")dict'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the memory layout of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flat`](numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")numpy.flatiter
    object'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D iterator over the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The imaginary part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The real part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements in the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`itemsize`](numpy.ndarray.itemsize.html#numpy.ndarray.itemsize "numpy.ndarray.itemsize")int'
  prefs: []
  type: TYPE_NORMAL
- en: Length of one array element in bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbytes`](numpy.ndarray.nbytes.html#numpy.ndarray.nbytes "numpy.ndarray.nbytes")int'
  prefs: []
  type: TYPE_NORMAL
- en: Total bytes consumed by the elements of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndim`](numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")tuple of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`strides`](numpy.ndarray.strides.html#numpy.ndarray.strides "numpy.ndarray.strides")tuple
    of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of bytes to step in each dimension when traversing an array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ctypes`](numpy.ndarray.ctypes.html#numpy.ndarray.ctypes "numpy.ndarray.ctypes")ctypes
    object'
  prefs: []
  type: TYPE_NORMAL
- en: An object to simplify the interaction of the array with the ctypes module.
  prefs: []
  type: TYPE_NORMAL
- en: '[`base`](numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Base object if memory is from some other object.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`all`](numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](numpy.ndarray.argmax.html#numpy.ndarray.argmax "numpy.ndarray.argmax")([axis, out, keepdims])
    | Return indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](numpy.ndarray.argmin.html#numpy.ndarray.argmin "numpy.ndarray.argmin")([axis, out, keepdims])
    | Return indices of the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argpartition`](numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](numpy.ndarray.argsort.html#numpy.ndarray.argsort "numpy.ndarray.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](numpy.ndarray.astype.html#numpy.ndarray.astype "numpy.ndarray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`byteswap`](numpy.ndarray.byteswap.html#numpy.ndarray.byteswap "numpy.ndarray.byteswap")([inplace])
    | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`choose`](numpy.ndarray.choose.html#numpy.ndarray.choose "numpy.ndarray.choose")(choices[, out, mode])
    | Use an index array to construct a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compress`](numpy.ndarray.compress.html#numpy.ndarray.compress "numpy.ndarray.compress")(condition[, axis, out])
    | Return selected slices of this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](numpy.ndarray.conjugate.html#numpy.ndarray.conjugate "numpy.ndarray.conjugate")()
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumprod`](numpy.ndarray.cumprod.html#numpy.ndarray.cumprod "numpy.ndarray.cumprod")([axis, dtype, out])
    | Return the cumulative product of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumsum`](numpy.ndarray.cumsum.html#numpy.ndarray.cumsum "numpy.ndarray.cumsum")([axis, dtype, out])
    | Return the cumulative sum of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](numpy.ndarray.diagonal.html#numpy.ndarray.diagonal "numpy.ndarray.diagonal")([offset, axis1, axis2])
    | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dump`](numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dumps`](numpy.ndarray.dumps.html#numpy.ndarray.dumps "numpy.ndarray.dumps")()
    | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill`](numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatten`](numpy.ndarray.flatten.html#numpy.ndarray.flatten "numpy.ndarray.flatten")([order])
    | Return a copy of the array collapsed into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getfield`](numpy.ndarray.getfield.html#numpy.ndarray.getfield "numpy.ndarray.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`item`](numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itemset`](numpy.ndarray.itemset.html#numpy.ndarray.itemset "numpy.ndarray.itemset")(*args)
    | Insert scalar into an array (scalar is cast to array''s dtype, if possible)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, where])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, where])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`newbyteorder`](numpy.ndarray.newbyteorder.html#numpy.ndarray.newbyteorder
    "numpy.ndarray.newbyteorder")([new_order]) | Return the array with the same data
    viewed with a different byte order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](numpy.ndarray.nonzero.html#numpy.ndarray.nonzero "numpy.ndarray.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](numpy.ndarray.partition.html#numpy.ndarray.partition "numpy.ndarray.partition")(kth[, axis, kind, order])
    | Rearranges the elements in the array in such a way that the value of the element
    in kth position is in the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prod`](numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | Return the product of the array elements over the given axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`ptp`](numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put`](numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](numpy.ndarray.ravel.html#numpy.ndarray.ravel "numpy.ndarray.ravel")([order])
    | Return a flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](numpy.ndarray.repeat.html#numpy.ndarray.repeat "numpy.ndarray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](numpy.ndarray.reshape.html#numpy.ndarray.reshape "numpy.ndarray.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](numpy.ndarray.resize.html#numpy.ndarray.resize "numpy.ndarray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](numpy.ndarray.round.html#numpy.ndarray.round "numpy.ndarray.round")([decimals, out])
    | Return *a* with each element rounded to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setfield`](numpy.ndarray.setfield.html#numpy.ndarray.setfield "numpy.ndarray.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setflags`](numpy.ndarray.setflags.html#numpy.ndarray.setflags "numpy.ndarray.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort`](numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`squeeze`](numpy.ndarray.squeeze.html#numpy.ndarray.squeeze "numpy.ndarray.squeeze")([axis])
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, keepdims, where])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, initial, where])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapaxes`](numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes "numpy.ndarray.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take`](numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes "numpy.ndarray.tobytes")([order])
    | Construct Python bytes containing the raw data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tofile`](numpy.ndarray.tofile.html#numpy.ndarray.tofile "numpy.ndarray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolist`](numpy.ndarray.tolist.html#numpy.ndarray.tolist "numpy.ndarray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tostring`](numpy.ndarray.tostring.html#numpy.ndarray.tostring "numpy.ndarray.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes"), with exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](numpy.ndarray.trace.html#numpy.ndarray.trace "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](numpy.ndarray.transpose.html#numpy.ndarray.transpose "numpy.ndarray.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, keepdims, where])
    | Returns the variance of the array elements, along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`view`](numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| **dot** |  |'
  prefs: []
  type: TYPE_TB
