- en: scipy.signal.check_COLA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.check_COLA.html#scipy.signal.check_COLA](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.check_COLA.html#scipy.signal.check_COLA)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Check whether the Constant OverLap Add (COLA) constraint is met.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The allowed variance of a bin’s weighted sum from the median bin sum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**verdict**bool'
  prefs: []
  type: TYPE_NORMAL
- en: '*True* if chosen combination satisfies COLA within *tol*, *False* otherwise'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA")'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether the Nonzero Overlap Add (NOLA) constraint is met
  prefs: []
  type: TYPE_NORMAL
- en: '[`stft`](scipy.signal.stft.html#scipy.signal.stft "scipy.signal.stft")'
  prefs: []
  type: TYPE_NORMAL
- en: Short Time Fourier Transform
  prefs: []
  type: TYPE_NORMAL
- en: '[`istft`](scipy.signal.istft.html#scipy.signal.istft "scipy.signal.istft")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Short Time Fourier Transform
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: In order to enable inversion of an STFT via the inverse STFT in [`istft`](scipy.signal.istft.html#scipy.signal.istft
    "scipy.signal.istft"), it is sufficient that the signal windowing obeys the constraint
    of “Constant OverLap Add” (COLA). This ensures that every point in the input data
    is equally weighted, thereby avoiding aliasing and allowing full reconstruction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of windows that satisfy COLA:'
  prefs: []
  type: TYPE_NORMAL
- en: Rectangular window at overlap of 0, 1/2, 2/3, 3/4, …
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bartlett window at overlap of 1/2, 3/4, 5/6, …
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hann window at 1/2, 2/3, 3/4, …
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any Blackman family window at 2/3 overlap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any window with `noverlap = nperseg-1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A very comprehensive list of other windows may be found in [[2]](#ra15974cde8a2-2),
    wherein the COLA condition is satisfied when the “Amplitude Flatness” is unity.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Julius O. Smith III, “Spectral Audio Signal Processing”, W3K Publishing, 2011,ISBN
    978-0-9745607-3-1.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: G. Heinzel, A. Ruediger and R. Schilling, “Spectrum and spectral density estimation
    by the Discrete Fourier transform (DFT), including a comprehensive list of window
    functions and some new at-top windows”, 2002, [http://hdl.handle.net/11858/00-001M-0000-0013-557A-5](http://hdl.handle.net/11858/00-001M-0000-0013-557A-5)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm COLA condition for rectangular window of 75% (3/4) overlap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'COLA is not true for 25% (1/4) overlap, though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '“Symmetrical” Hann window (for filter design) is not COLA:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '“Periodic” or “DFT-even” Hann window (for FFT analysis) is COLA for overlap
    of 1/2, 2/3, 3/4, etc.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
