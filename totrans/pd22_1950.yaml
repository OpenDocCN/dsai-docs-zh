- en: Version 0.21.0 (October 27, 2017)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/whatsnew/v0.21.0.html](https://pandas.pydata.org/docs/whatsnew/v0.21.0.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a major release from 0.20.3 and includes a number of API changes, deprecations,
    new features, enhancements, and performance improvements along with a large number
    of bug fixes. We recommend that all users upgrade to this version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Highlights include:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with [Apache Parquet](https://parquet.apache.org/), including a
    new top-level [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet") function and [`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") method, see [here](#whatsnew-0210-enhancements-parquet).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New user-facing `pandas.api.types.CategoricalDtype` for specifying categoricals
    independent of the data, see [here](#whatsnew-0210-enhancements-categorical-dtype).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The behavior of `sum` and `prod` on all-NaN Series/DataFrames is now consistent
    and no longer depends on whether [bottleneck](https://bottleneck.readthedocs.io)
    is installed, and `sum` and `prod` on empty Series now return NaN instead of 0,
    see [here](#whatsnew-0210-api-breaking-bottleneck).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility fixes for pypy, see [here](#whatsnew-0210-pypy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additions to the `drop`, `reindex` and `rename` API to make them more consistent,
    see [here](#whatsnew-0210-enhancements-drop-api).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addition of the new methods `DataFrame.infer_objects` (see [here](#whatsnew-0210-enhancements-infer-objects))
    and `GroupBy.pipe` (see [here](#whatsnew-0210-enhancements-groupby-pipe)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with a list of labels, where one or more of the labels is missing,
    is deprecated and will raise a KeyError in a future version, see [here](#whatsnew-0210-api-breaking-loc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the [API Changes](#whatsnew-0210-api-breaking) and [deprecations](#whatsnew-0210-deprecations)
    before updating.
  prefs: []
  type: TYPE_NORMAL
- en: What’s new in v0.21.0
  prefs: []
  type: TYPE_NORMAL
- en: '[New features](#new-features)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Integration with Apache Parquet file format](#integration-with-apache-parquet-file-format)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `infer_objects` type conversion](#method-infer-objects-type-conversion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Improved warnings when attempting to create columns](#improved-warnings-when-attempting-to-create-columns)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Method `drop` now also accepts index/columns keywords](#method-drop-now-also-accepts-index-columns-keywords)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Methods `rename`, `reindex` now also accept axis keyword](#methods-rename-reindex-now-also-accept-axis-keyword)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CategoricalDtype` for specifying categoricals](#categoricaldtype-for-specifying-categoricals)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`GroupBy` objects now have a `pipe` method](#groupby-objects-now-have-a-pipe-method)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Categorical.rename_categories` accepts a dict-like](#categorical-rename-categories-accepts-a-dict-like)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other enhancements](#other-enhancements)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Backwards incompatible API changes](#backwards-incompatible-api-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dependencies have increased minimum versions](#dependencies-have-increased-minimum-versions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN](#sum-prod-of-all-nan-or-empty-series-dataframes-is-now-consistently-nan)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Indexing with a list with missing labels is deprecated](#indexing-with-a-list-with-missing-labels-is-deprecated)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NA naming changes](#na-naming-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Iteration of Series/Index will now return Python scalars](#iteration-of-series-index-will-now-return-python-scalars)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Indexing with a Boolean Index](#indexing-with-a-boolean-index)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PeriodIndex` resampling](#periodindex-resampling)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Improved error handling during item assignment in pd.eval](#improved-error-handling-during-item-assignment-in-pd-eval)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dtype conversions](#dtype-conversions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MultiIndex constructor with a single level](#multiindex-constructor-with-a-single-level)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[UTC localization with Series](#utc-localization-with-series)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Consistency of range functions](#consistency-of-range-functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[No automatic Matplotlib converters](#no-automatic-matplotlib-converters)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other API changes](#other-api-changes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deprecations](#deprecations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Series.select and DataFrame.select](#series-select-and-dataframe-select)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Series.argmax and Series.argmin](#series-argmax-and-series-argmin)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Removal of prior version deprecations/changes](#removal-of-prior-version-deprecations-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Performance improvements](#performance-improvements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation changes](#documentation-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bug fixes](#bug-fixes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conversion](#conversion)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Indexing](#indexing)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IO](#io)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plotting](#plotting)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GroupBy/resample/rolling](#groupby-resample-rolling)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sparse](#sparse)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reshaping](#reshaping)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Numeric](#numeric)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Categorical](#categorical)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyPy](#pypy)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other](#other)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contributors](#contributors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## New features'
  prefs: []
  type: TYPE_NORMAL
- en: '### Integration with Apache Parquet file format'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with [Apache Parquet](https://parquet.apache.org/), including a
    new top-level [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet") and [`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") method, see [here](../user_guide/io.html#io-parquet)
    ([GH 15838](https://github.com/pandas-dev/pandas/issues/15838), [GH 17438](https://github.com/pandas-dev/pandas/issues/17438)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Apache Parquet](https://parquet.apache.org/) provides a cross-language, binary
    file format for reading and writing data frames efficiently. Parquet is designed
    to faithfully serialize and de-serialize `DataFrame` s, supporting all of the
    pandas dtypes, including extension dtypes such as datetime with timezones.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality depends on either the [pyarrow](http://arrow.apache.org/docs/python/)
    or [fastparquet](https://fastparquet.readthedocs.io/en/latest/) library. For more
    details, see [the IO docs on Parquet](../user_guide/io.html#io-parquet).  ###
    Method `infer_objects` type conversion'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods have been added to perform dtype inference
    on object columns, replacing some of the functionality of the deprecated `convert_objects`
    method. See the documentation [here](../user_guide/basics.html#basics-object-conversion)
    for more details. ([GH 11221](https://github.com/pandas-dev/pandas/issues/11221))
  prefs: []
  type: TYPE_NORMAL
- en: 'This method only performs soft conversions on object columns, converting Python
    objects to native types, but not any coercive conversions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that column `'C'` was not converted - only scalar numeric types will be
    converted to a new type. Other types of conversion should be accomplished using
    the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function (or [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime"), [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]  ### Improved warnings when attempting to create columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'New users are often puzzled by the relationship between column operations and
    attribute access on `DataFrame` instances ([GH 7175](https://github.com/pandas-dev/pandas/issues/7175)).
    One specific instance of this confusion is attempting to create a new column by
    setting an attribute on the `DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This does not raise any obvious exceptions, but also does not create a new
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting a list-like data structure into a new attribute now raises a `UserWarning`
    about the potential for unexpected behavior. See [Attribute Access](../user_guide/indexing.html#indexing-attribute-access).  ###
    Method `drop` now also accepts index/columns keywords'
  prefs: []
  type: TYPE_NORMAL
- en: The [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method has gained `index`/`columns` keywords as an alternative
    to specifying the `axis`. This is similar to the behavior of `reindex` ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]  ### Methods `rename`, `reindex` now also accept axis keyword'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") and [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") methods have gained the `axis` keyword to specify
    the axis to target with the operation ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s `rename`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And `reindex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The “index, columns” style continues to work as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We *highly* encourage using named arguments to avoid confusion when using either
    style.  ### `CategoricalDtype` for specifying categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.api.types.CategoricalDtype` has been added to the public API and expanded
    to include the `categories` and `ordered` attributes. A `CategoricalDtype` can
    be used to specify the set of categories and orderedness of an array, independent
    of the data. This can be useful for example, when converting string data to a
    `Categorical` ([GH 14711](https://github.com/pandas-dev/pandas/issues/14711),
    [GH 15078](https://github.com/pandas-dev/pandas/issues/15078), [GH 16015](https://github.com/pandas-dev/pandas/issues/16015),
    [GH 17643](https://github.com/pandas-dev/pandas/issues/17643)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'One place that deserves special mention is in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"). Previously, with `dtype={''col'': ''category''}`, the returned
    values and categories would always be strings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice the “object” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: With a `CategoricalDtype` of all numerics, datetimes, or timedeltas, we can
    automatically convert to the correct type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The values have been correctly interpreted as integers.
  prefs: []
  type: TYPE_NORMAL
- en: The `.dtype` property of a `Categorical`, `CategoricalIndex` or a `Series` with
    categorical type will now return an instance of `CategoricalDtype`. While the
    repr has changed, `str(CategoricalDtype())` is still the string `'category'`.
    We’ll take this moment to remind users that the *preferred* way to detect categorical
    data is to use [`pandas.api.types.is_categorical_dtype()`](../reference/api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype"), and not `str(dtype) == 'category'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the [CategoricalDtype docs](../user_guide/categorical.html#categorical-categoricaldtype)
    for more.  ### `GroupBy` objects now have a `pipe` method'
  prefs: []
  type: TYPE_NORMAL
- en: '`GroupBy` objects now have a `pipe` method, similar to the one on `DataFrame`
    and `Series`, that allow for functions that take a `GroupBy` to be composed in
    a clean, readable syntax. ([GH 17871](https://github.com/pandas-dev/pandas/issues/17871))'
  prefs: []
  type: TYPE_NORMAL
- en: For a concrete example on combining `.groupby` and `.pipe` , imagine having
    a DataFrame with columns for stores, products, revenue and sold quantity. We’d
    like to do a groupwise calculation of *prices* (i.e. revenue/quantity) per store
    and per product. We could do this in a multi-step operation, but expressing it
    in terms of piping can make the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we set the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to find prices per store/product, we can simply do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'See the [documentation](../user_guide/groupby.html#groupby-pipe) for more.  ###
    `Categorical.rename_categories` accepts a dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: '[`rename_categories()`](../reference/api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories") now accepts a dict-like argument for `new_categories`.
    The previous categories are looked up in the dictionary’s keys and replaced if
    found. The behavior of missing and extra keys is the same as in [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: To assist with upgrading pandas, `rename_categories` treats `Series` as list-like.
    Typically, Series are considered to be dict-like (e.g. in `.rename`, `.map`).
    In a future version of pandas `rename_categories` will change to treat them as
    dict-like. Follow the warning message’s recommendations for writing future-proof
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]  ### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: New functions or methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Resampler.nearest()`](../reference/api/pandas.core.resample.Resampler.nearest.html#pandas.core.resample.Resampler.nearest
    "pandas.core.resample.Resampler.nearest") is added to support nearest-neighbor
    upsampling ([GH 17496](https://github.com/pandas-dev/pandas/issues/17496)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") has
    added support for a `to_frame` method ([GH 15230](https://github.com/pandas-dev/pandas/issues/15230)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added a `skipna` parameter to [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") to support type inference in the presence of missing
    values ([GH 17059](https://github.com/pandas-dev/pandas/issues/17059)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_dict()`](../reference/api/pandas.Series.to_dict.html#pandas.Series.to_dict
    "pandas.Series.to_dict") and [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") now support an `into` keyword which allows you to
    specify the `collections.Mapping` subclass that you would like returned. The default
    is `dict`, which is backwards compatible. ([GH 16122](https://github.com/pandas-dev/pandas/issues/16122))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") now support the `inplace` parameter. ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_pickle()`](../reference/api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle") and [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle") have gained a `protocol` parameter ([GH 16252](https://github.com/pandas-dev/pandas/issues/16252)).
    By default, this parameter is set to [HIGHEST_PROTOCOL](https://docs.python.org/3/library/pickle.html#data-stream-format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") has gained the `nthreads` parameter for multi-threaded
    operations ([GH 16359](https://github.com/pandas-dev/pandas/issues/16359))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") and [`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") have gained an `inplace` argument. ([GH 15388](https://github.com/pandas-dev/pandas/issues/15388))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    has gained a `margins_name` parameter to define the name of the row / column that
    will contain the totals when `margins=True`. ([GH 15972](https://github.com/pandas-dev/pandas/issues/15972))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    now accepts a `chunksize` parameter that can be used when `lines=True`. If `chunksize`
    is passed, read_json now returns an iterator which reads in `chunksize` lines
    with each iteration. ([GH 17048](https://github.com/pandas-dev/pandas/issues/17048))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    and [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") now accept a `compression` argument which allows them
    to transparently handle compressed files. ([GH 17798](https://github.com/pandas-dev/pandas/issues/17798))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Improved the import time of pandas by about 2.25x. ([GH 16764](https://github.com/pandas-dev/pandas/issues/16764))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for [PEP 519 – Adding a file system path protocol](https://www.python.org/dev/peps/pep-0519/)
    on most readers (e.g. [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")) and writers (e.g. [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")) ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `__fspath__` method to `pd.HDFStore`, `pd.ExcelFile`, and `pd.ExcelWriter`
    to work properly with the file system path protocol ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate` argument for [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") now checks whether a merge is one-to-one, one-to-many, many-to-one,
    or many-to-many. If a merge is found to not be an example of specified merge type,
    an exception of type `MergeError` will be raised. For more, see [here](../user_guide/merging.html#merging-validation)
    ([GH 16270](https://github.com/pandas-dev/pandas/issues/16270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [PEP 518](https://www.python.org/dev/peps/pep-0518/) (`pyproject.toml`)
    to the build system ([GH 16745](https://github.com/pandas-dev/pandas/issues/16745))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RangeIndex.append()` now returns a `RangeIndex` object when possible ([GH
    16212](https://github.com/pandas-dev/pandas/issues/16212))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") and [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") with `inplace=True` now return `None` while renaming
    the axis inplace. ([GH 15704](https://github.com/pandas-dev/pandas/issues/15704))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`api.types.infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") now infers decimals. ([GH 15690](https://github.com/pandas-dev/pandas/issues/15690))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") now accepts scalar values for include/exclude
    as well as list-like. ([GH 16855](https://github.com/pandas-dev/pandas/issues/16855))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘YS’ in addition to ‘AS’ as an alias for start
    of year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘Y’ in addition to ‘A’ as an alias for end of
    year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.add_prefix()`](../reference/api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix") and [`DataFrame.add_suffix()`](../reference/api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix") now accept strings containing the ‘%’ character.
    ([GH 17151](https://github.com/pandas-dev/pandas/issues/17151))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write methods that infer compression ([`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table"), [`read_pickle()`](../reference/api/pandas.read_pickle.html#pandas.read_pickle
    "pandas.read_pickle"), and [`to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")) can now infer from path-like objects, such as `pathlib.Path`.
    ([GH 17206](https://github.com/pandas-dev/pandas/issues/17206))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    now recognizes much more of the most frequently used date (datetime) formats in
    SAS7BDAT files. ([GH 15871](https://github.com/pandas-dev/pandas/issues/15871))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") and [`Series.items()`](../reference/api/pandas.Series.items.html#pandas.Series.items
    "pandas.Series.items") are now present in both Python 2 and 3 and is lazy in all
    cases. ([GH 13918](https://github.com/pandas-dev/pandas/issues/13918), [GH 17213](https://github.com/pandas-dev/pandas/issues/17213))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.io.formats.style.Styler.where()` has been implemented as a convenience
    for `pandas.io.formats.style.Styler.applymap()`. ([GH 17474](https://github.com/pandas-dev/pandas/issues/17474))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.is_monotonic_decreasing()` has been implemented. Previously returned
    `False` in all cases. ([GH 16554](https://github.com/pandas-dev/pandas/issues/16554))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") raises `ImportError` with a better message if `xlrd` is not
    installed. ([GH 17613](https://github.com/pandas-dev/pandas/issues/17613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") will preserve the original order of `**kwargs` for
    Python 3.6+ users instead of sorting the column names. ([GH 14207](https://github.com/pandas-dev/pandas/issues/14207))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex"), [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"), [`Index.get_indexer()`](../reference/api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer") now support list-like argument for `tolerance`. ([GH
    17367](https://github.com/pandas-dev/pandas/issues/17367))  ## Backwards incompatible
    API changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Dependencies have increased minimum versions'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 15206](https://github.com/pandas-dev/pandas/issues/15206),
    [GH 15543](https://github.com/pandas-dev/pandas/issues/15543), [GH 15214](https://github.com/pandas-dev/pandas/issues/15214)).
    If installed, we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Numpy | 1.9.0 | X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Matplotlib | 1.4.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Scipy | 0.14.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Bottleneck | 1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Additionally, support has been dropped for Python 3.4 ([GH 15251](https://github.com/pandas-dev/pandas/issues/15251)).  ###
    Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The changes described here have been partially reverted. See the [v0.22.0 Whatsnew](v0.22.0.html#whatsnew-0220)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of `sum` and `prod` on all-NaN Series/DataFrames no longer depends
    on whether [bottleneck](https://bottleneck.readthedocs.io) is installed, and return
    value of `sum` and `prod` on an empty Series has changed ([GH 9422](https://github.com/pandas-dev/pandas/issues/9422),
    [GH 15507](https://github.com/pandas-dev/pandas/issues/15507)).
  prefs: []
  type: TYPE_NORMAL
- en: Calling `sum` or `prod` on an empty or all-`NaN` `Series`, or columns of a `DataFrame`,
    will result in `NaN`. See the [docs](../user_guide/missing_data.html#missing-data-calculations).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITHOUT `bottleneck` installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITH `bottleneck`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior, without regard to the bottleneck installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this also changes the sum of an empty `Series`. Previously this always
    returned 0 regardless of a `bottleneck` installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'but for consistency with the all-NaN case, this was changed to return 0 as
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]  ### Indexing with a list with missing labels is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, selecting with a list of labels, where one or more labels were missing
    would always succeed, returning `NaN` for missing labels. This will now show a
    `FutureWarning`. In the future this will raise a `KeyError` ([GH 15747](https://github.com/pandas-dev/pandas/issues/15747)).
    This warning will trigger on a `DataFrame` or a `Series` for using `.loc[]` or
    `[[]]` when passing a list-of-labels with at least 1 missing label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The idiomatic way to achieve selecting potentially not-found elements is via
    `.reindex()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Selection with all keys found is unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]  ### NA naming changes'
  prefs: []
  type: TYPE_NORMAL
- en: In order to promote more consistency among the pandas API, we have added additional
    top-level functions [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
    and [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")
    that are aliases for [`isnull()`](../reference/api/pandas.isnull.html#pandas.isnull
    "pandas.isnull") and [`notnull()`](../reference/api/pandas.notnull.html#pandas.notnull
    "pandas.notnull"). The naming scheme is now more consistent with methods like
    `.dropna()` and `.fillna()`. Furthermore in all cases where `.isnull()` and `.notnull()`
    methods are defined, these have additional methods named `.isna()` and `.notna()`,
    these are included for classes `Categorical`, `Index`, `Series`, and `DataFrame`.
    ([GH 15001](https://github.com/pandas-dev/pandas/issues/15001)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration option `pd.options.mode.use_inf_as_null` is deprecated, and
    `pd.options.mode.use_inf_as_na` is added as a replacement.  ### Iteration of Series/Index
    will now return Python scalars'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when using certain iteration methods for a `Series` with dtype `int`
    or `float`, you would receive a `numpy` scalar, e.g. a `np.int64`, rather than
    a Python `int`. Issue ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))
    corrected this for `Series.tolist()` and `list(Series)`. This change makes all
    iteration methods consistent, in particular, for `__iter__()` and `.map()`; note
    that this only affects int/float dtypes. ([GH 13236](https://github.com/pandas-dev/pandas/issues/13236),
    [GH 13258](https://github.com/pandas-dev/pandas/issues/13258), [GH 14216](https://github.com/pandas-dev/pandas/issues/14216)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore this will now correctly box the results of iteration for [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]  ### Indexing with a Boolean Index'
  prefs: []
  type: TYPE_NORMAL
- en: Previously when passing a boolean `Index` to `.loc`, if the index of the `Series/DataFrame`
    had `boolean` labels, you would get a label based selection, potentially duplicating
    result labels, rather than a boolean indexing selection (where `True` selects
    elements), this was inconsistent how a boolean numpy array indexed. The new behavior
    is to act like a boolean numpy array indexer. ([GH 17738](https://github.com/pandas-dev/pandas/issues/17738))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, previously if you had an index that was non-numeric (e.g. strings),
    then a boolean Index would raise a `KeyError`. This will now be treated as a boolean
    indexer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]  ### `PeriodIndex` resampling'
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of pandas, resampling a `Series`/`DataFrame` indexed by
    a `PeriodIndex` returned a `DatetimeIndex` in some cases ([GH 12884](https://github.com/pandas-dev/pandas/issues/12884)).
    Resampling to a multiplied frequency now returns a `PeriodIndex` ([GH 15944](https://github.com/pandas-dev/pandas/issues/15944)).
    As a minor enhancement, resampling a `PeriodIndex` can now handle `NaT` values
    ([GH 13224](https://github.com/pandas-dev/pandas/issues/13224))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Upsampling and calling `.ohlc()` previously returned a `Series`, basically identical
    to calling `.asfreq()`. OHLC upsampling now returns a DataFrame with columns `open`,
    `high`, `low` and `close` ([GH 13083](https://github.com/pandas-dev/pandas/issues/13083)).
    This is consistent with downsampling and `DatetimeIndex` behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]  ### Improved error handling during item assignment in pd.eval'
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval") will
    now raise a `ValueError` when item assignment malfunctions, or inplace operations
    are specified, but there is no item assignment in the expression ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, if you attempted the following expression, you would get a not
    very helpful error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very long way of saying numpy arrays don’t support string-item indexing.
    With this change, the error message is now this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'It also used to be possible to evaluate expressions inplace, even if there
    was no item assignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this input does not make much sense because the output is not being
    assigned to the target. Now, a `ValueError` will be raised when such an input
    is passed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]  ### Dtype conversions'
  prefs: []
  type: TYPE_NORMAL
- en: Previously assignments, `.where()` and `.fillna()` with a `bool` assignment,
    would coerce to same the type (e.g. int / float), or raise for datetimelikes.
    These will now preserve the bools with `object` dtypes. ([GH 16821](https://github.com/pandas-dev/pandas/issues/16821)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Previously, as assignment to a datetimelike with a non-datetimelike would coerce
    the non-datetime-like item being assigned ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: These now coerce to `object` dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Inconsistent behavior in `.where()` with datetimelikes which would raise rather
    than coerce to `object` ([GH 16402](https://github.com/pandas-dev/pandas/issues/16402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))  ###
    MultiIndex constructor with a single level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MultiIndex` constructors no longer squeezes a MultiIndex with all length-one
    levels down to a regular `Index`. This affects all the `MultiIndex` constructors.
    ([GH 17178](https://github.com/pandas-dev/pandas/issues/17178))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Length 1 levels are no longer special-cased. They behave exactly as if you
    had length 2+ levels, so a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") is always returned from all of the `MultiIndex` constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]  ### UTC localization with Series'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") did not localize datetime `Series` data when `utc=True`
    was passed. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") will correctly localize `Series` with a `datetime64[ns,
    UTC]` dtype to be consistent with how list-like and `Index` data are handled.
    ([GH 6415](https://github.com/pandas-dev/pandas/issues/6415)).
  prefs: []
  type: TYPE_NORMAL
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, DataFrames with datetime columns that were parsed by [`read_sql_table()`](../reference/api/pandas.read_sql_table.html#pandas.read_sql_table
    "pandas.read_sql_table") and [`read_sql_query()`](../reference/api/pandas.read_sql_query.html#pandas.read_sql_query
    "pandas.read_sql_query") will also be localized to UTC only if the original SQL
    columns were timezone aware datetime columns.  ### Consistency of range functions'
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous versions, there were some inconsistencies between the various range
    functions: [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range"), [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"), and [`interval_range()`](../reference/api/pandas.interval_range.html#pandas.interval_range
    "pandas.interval_range"). ([GH 17471](https://github.com/pandas-dev/pandas/issues/17471)).'
  prefs: []
  type: TYPE_NORMAL
- en: One of the inconsistent behaviors occurred when the `start`, `end` and `period`
    parameters were all specified, potentially leading to ambiguous ranges. When all
    three parameters were passed, `interval_range` ignored the `period` parameter,
    `period_range` ignored the `end` parameter, and the other range functions raised.
    To promote consistency among the range functions, and avoid potentially ambiguous
    ranges, `interval_range` and `period_range` will now raise when all three parameters
    are passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, the endpoint parameter `end` was not included in the intervals
    produced by `interval_range`. However, all other range functions include `end`
    in their output. To promote consistency among the range functions, `interval_range`
    will now include `end` as the right endpoint of the final interval, except if
    `freq` is specified in a way which skips `end`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]  ### No automatic Matplotlib converters'
  prefs: []
  type: TYPE_NORMAL
- en: 'pandas no longer registers our `date`, `time`, `datetime`, `datetime64`, and
    `Period` converters with matplotlib when pandas is imported. Matplotlib plot methods
    (`plt.plot`, `ax.plot`, …), will not nicely format the x-axis for `DatetimeIndex`
    or `PeriodIndex` values. You must explicitly register these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas built-in `Series.plot` and `DataFrame.plot` *will* register these converters
    on first-use ([GH 17710](https://github.com/pandas-dev/pandas/issues/17710)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This change has been temporarily reverted in pandas 0.21.1, for more details
    see [here](v0.21.1.html#whatsnew-0211-converters).  ### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: The Categorical constructor no longer accepts a scalar for the `categories`
    keyword. ([GH 16022](https://github.com/pandas-dev/pandas/issues/16022))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a non-existent attribute on a closed `HDFStore` will now raise an
    `AttributeError` rather than a `ClosedFileError` ([GH 16301](https://github.com/pandas-dev/pandas/issues/16301))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now issues a `UserWarning` if the `names` parameter contains duplicates ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now treats `''null''` and `''n/a''` strings as missing values by default ([GH
    16471](https://github.com/pandas-dev/pandas/issues/16471), [GH 16078](https://github.com/pandas-dev/pandas/issues/16078))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.HDFStore`’s string representation is now faster and less detailed.
    For the previous behavior, use `pandas.HDFStore.info()`. ([GH 16503](https://github.com/pandas-dev/pandas/issues/16503)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression defaults in HDF stores now follow pytables standards. Default is
    no compression and if `complib` is missing and `complevel` > 0 `zlib` is used
    ([GH 15943](https://github.com/pandas-dev/pandas/issues/15943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.get_indexer_non_unique()` now returns a ndarray indexer rather than
    an `Index`; this is consistent with `Index.get_indexer()` ([GH 16819](https://github.com/pandas-dev/pandas/issues/16819))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the `@slow` decorator from `pandas._testing`, which caused issues for
    some downstream packages’ test suites. Use `@pytest.mark.slow` instead, which
    achieves the same thing ([GH 16850](https://github.com/pandas-dev/pandas/issues/16850))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved definition of `MergeError` to the `pandas.errors` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signature of [`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") has been changed from `set_axis(axis, labels)` to
    `set_axis(labels, axis=0)`, for consistency with the rest of the API. The old
    signature is deprecated and will show a `FutureWarning` ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") and [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") will now raise a `TypeError` when used with `object` dtypes,
    instead of a `ValueError` ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    is now immutable, and will now raise an `AttributeError` when a user tries to
    assign a new value to the `ordinal` or `freq` attributes ([GH 17116](https://github.com/pandas-dev/pandas/issues/17116)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") when passed a tz-aware `origin=` kwarg will now raise a
    more informative `ValueError` rather than a `TypeError` ([GH 16842](https://github.com/pandas-dev/pandas/issues/16842))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now raises a `ValueError` when format includes `%W` or `%U`
    without also including day of the week and calendar year ([GH 16774](https://github.com/pandas-dev/pandas/issues/16774))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renamed non-functional `index` to `index_col` in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") to improve API consistency ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") caused boolean labels `False` and `True` to be treated
    as labels 0 and 1 respectively when dropping indices from a numeric index. This
    will now raise a ValueError ([GH 16877](https://github.com/pandas-dev/pandas/issues/16877))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restricted DateOffset keyword arguments. Previously, `DateOffset` subclasses
    allowed arbitrary keyword arguments which could lead to unexpected behavior. Now,
    only valid arguments will be accepted. ([GH 17176](https://github.com/pandas-dev/pandas/issues/17176)).  ##
    Deprecations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.from_csv()` and `Series.from_csv()` have been deprecated in favor
    of [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    ([GH 4191](https://github.com/pandas-dev/pandas/issues/4191))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated `sheetname` in favor of `sheet_name` for consistency
    with `.to_excel()` ([GH 10559](https://github.com/pandas-dev/pandas/issues/10559)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated `parse_cols` in favor of `usecols` for consistency
    with [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    ([GH 4988](https://github.com/pandas-dev/pandas/issues/4988))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    has deprecated the `tupleize_cols` argument. Column tuples will always be converted
    to a `MultiIndex` ([GH 17060](https://github.com/pandas-dev/pandas/issues/17060))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") has deprecated the `tupleize_cols` argument. MultiIndex
    columns will be always written as rows in the CSV file ([GH 17060](https://github.com/pandas-dev/pandas/issues/17060))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `convert` parameter has been deprecated in the `.take()` method, as it was
    not being respected ([GH 16948](https://github.com/pandas-dev/pandas/issues/16948))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.options.html.border` has been deprecated in favor of `pd.options.display.html.border`
    ([GH 15793](https://github.com/pandas-dev/pandas/issues/15793)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SeriesGroupBy.nth()` has deprecated `True` in favor of `''all''` for its kwarg
    `dropna` ([GH 11038](https://github.com/pandas-dev/pandas/issues/11038)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.as_blocks()` is deprecated, as this is exposing the internal implementation
    ([GH 17302](https://github.com/pandas-dev/pandas/issues/17302))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.TimeGrouper` is deprecated in favor of [`pandas.Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper") ([GH 16747](https://github.com/pandas-dev/pandas/issues/16747))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cdate_range` has been deprecated in favor of [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), which has gained `weekmask` and `holidays` parameters for
    building custom frequency date ranges. See the [documentation](../user_guide/timeseries.html#timeseries-custom-freq-ranges)
    for more details ([GH 17596](https://github.com/pandas-dev/pandas/issues/17596))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passing `categories` or `ordered` kwargs to [`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") is deprecated, in favor of passing a [CategoricalDtype](#whatsnew-0210-enhancements-categorical-dtype)
    ([GH 17636](https://github.com/pandas-dev/pandas/issues/17636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.get_value` and `.set_value` on `Series`, `DataFrame`, `Panel`, `SparseSeries`,
    and `SparseDataFrame` are deprecated in favor of using `.iat[]` or `.at[]` accessors
    ([GH 15269](https://github.com/pandas-dev/pandas/issues/15269))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a non-existent column in `.to_excel(..., columns=)` is deprecated and
    will raise a `KeyError` in the future ([GH 17295](https://github.com/pandas-dev/pandas/issues/17295))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise_on_error` parameter to [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where"), [`Series.mask()`](../reference/api/pandas.Series.mask.html#pandas.Series.mask
    "pandas.Series.mask"), [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where"), [`DataFrame.mask()`](../reference/api/pandas.DataFrame.mask.html#pandas.DataFrame.mask
    "pandas.DataFrame.mask") is deprecated, in favor of `errors=` ([GH 14968](https://github.com/pandas-dev/pandas/issues/14968))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") and [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") to alter index or column *labels* is now deprecated
    in favor of using `.rename`. `rename_axis` may still be used to alter the name
    of the index or columns ([GH 17833](https://github.com/pandas-dev/pandas/issues/17833)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reindex_axis()` has been deprecated in favor of [`reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"). See [here](#whatsnew-0210-enhancements-rename-reindex-axis)
    for more ([GH 17833](https://github.com/pandas-dev/pandas/issues/17833)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Series.select and DataFrame.select'
  prefs: []
  type: TYPE_NORMAL
- en: The `Series.select()` and `DataFrame.select()` methods are deprecated in favor
    of using `df.loc[labels.map(crit)]` ([GH 12401](https://github.com/pandas-dev/pandas/issues/12401))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]  ### Series.argmax and Series.argmin'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") and [`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") have been deprecated in favor of [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") and [`Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"), respectively ([GH 16830](https://github.com/pandas-dev/pandas/issues/16830)).
  prefs: []
  type: TYPE_NORMAL
- en: For compatibility with NumPy arrays, `pd.Series` implements `argmax` and `argmin`.
    Since pandas 0.13.0, `argmax` has been an alias for [`pandas.Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax"), and `argmin` has been an alias for [`pandas.Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"). They return the *label* of the maximum or minimum, rather
    than the *position*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve deprecated the current behavior of `Series.argmax` and `Series.argmin`.
    Using either of these will emit a `FutureWarning`. Use [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") if you want the label of the maximum. Use `Series.values.argmax()`
    if you want the position of the maximum. Likewise for the minimum. In a future
    release `Series.argmax` and `Series.argmin` will return the position of the maximum
    or minimum.  ## Removal of prior version deprecations/changes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has dropped the `has_index_names` parameter ([GH 10967](https://github.com/pandas-dev/pandas/issues/10967))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.height` configuration has been dropped ([GH 3663](https://github.com/pandas-dev/pandas/issues/3663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.line_width` configuration has been dropped ([GH 2881](https://github.com/pandas-dev/pandas/issues/2881))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.mpl_style` configuration has been dropped ([GH 12190](https://github.com/pandas-dev/pandas/issues/12190))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index` has dropped the `.sym_diff()` method in favor of `.symmetric_difference()`
    ([GH 12591](https://github.com/pandas-dev/pandas/issues/12591))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical` has dropped the `.order()` and `.sort()` methods in favor of
    `.sort_values()` ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval") and
    [`DataFrame.eval()`](../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") have changed the default of `inplace` from `None` to
    `False` ([GH 11149](https://github.com/pandas-dev/pandas/issues/11149))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function `get_offset_name` has been dropped in favor of the `.freqstr` attribute
    for an offset ([GH 11834](https://github.com/pandas-dev/pandas/issues/11834))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pandas no longer tests for compatibility with hdf5-files created with pandas
    < 0.11 ([GH 17404](https://github.com/pandas-dev/pandas/issues/17404)).  ## Performance
    improvements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of instantiating `SparseDataFrame` ([GH 16773](https://github.com/pandas-dev/pandas/issues/16773))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.dt`](../reference/api/pandas.Series.dt.html#pandas.Series.dt "pandas.Series.dt")
    no longer performs frequency inference, yielding a large speedup when accessing
    the attribute ([GH 17210](https://github.com/pandas-dev/pandas/issues/17210))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`set_categories()`](../reference/api/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories
    "pandas.Series.cat.set_categories") by not materializing the values ([GH 17508](https://github.com/pandas-dev/pandas/issues/17508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.microsecond`](../reference/api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") no longer re-computes on attribute access ([GH
    17331](https://github.com/pandas-dev/pandas/issues/17331))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of the [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") for data that is already categorical dtype ([GH 17513](https://github.com/pandas-dev/pandas/issues/17513))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improved performance of `RangeIndex.min()` and `RangeIndex.max()` by using
    `RangeIndex` properties to perform the computations ([GH 17607](https://github.com/pandas-dev/pandas/issues/17607))  ##
    Documentation changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several `NaT` method docstrings (e.g. `NaT.ctime()`) were incorrect ([GH 17327](https://github.com/pandas-dev/pandas/issues/17327))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The documentation has had references to versions < v0.17 removed and cleaned
    up ([GH 17442](https://github.com/pandas-dev/pandas/issues/17442), [GH 17442](https://github.com/pandas-dev/pandas/issues/17442),
    [GH 17404](https://github.com/pandas-dev/pandas/issues/17404) & [GH 17504](https://github.com/pandas-dev/pandas/issues/17504))  ##
    Bug fixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in assignment against datetime-like data with `int` may incorrectly convert
    to datetime-like ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the return type of `IntervalIndex.is_non_overlapping_monotonic` to be
    a Python `bool` for consistency with similar attributes/methods. Previously returned
    a `numpy.bool_`. ([GH 17237](https://github.com/pandas-dev/pandas/issues/17237))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex.is_non_overlapping_monotonic` when intervals are closed
    on both sides and overlap at a point ([GH 16560](https://github.com/pandas-dev/pandas/issues/16560))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") returns frame when `inplace=True` and `value` is dict
    ([GH 16156](https://github.com/pandas-dev/pandas/issues/16156))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.weekday_name` returning a UTC-based weekday name when localized
    to a timezone ([GH 17354](https://github.com/pandas-dev/pandas/issues/17354))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.replace` when replacing `tzinfo` around DST changes ([GH 15683](https://github.com/pandas-dev/pandas/issues/15683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timedelta` construction and arithmetic that would not propagate the
    `Overflow` exception ([GH 17367](https://github.com/pandas-dev/pandas/issues/17367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") converting to object dtype when passed extension type
    classes (`DatetimeTZDtype`, `CategoricalDtype`) rather than instances. Now a `TypeError`
    is raised when a class is passed ([GH 17780](https://github.com/pandas-dev/pandas/issues/17780)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") in which elements were not always being coerced to numeric
    when `errors='coerce'` ([GH 17007](https://github.com/pandas-dev/pandas/issues/17007),
    [GH 17125](https://github.com/pandas-dev/pandas/issues/17125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` and `Series` constructors where `range` objects are converted
    to `int32` dtype on Windows instead of `int64` ([GH 16804](https://github.com/pandas-dev/pandas/issues/16804))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When called with a null slice (e.g. `df.iloc[:]`), the `.iloc` and `.loc` indexers
    return a shallow copy of the original object. Previously they returned the original
    object. ([GH 13873](https://github.com/pandas-dev/pandas/issues/13873)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When called on an unsorted `MultiIndex`, the `loc` indexer now will raise `UnsortedIndexError`
    only if proper slicing is used on non-sorted levels ([GH 16734](https://github.com/pandas-dev/pandas/issues/16734)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression in 0.20.3 when indexing with a string on a `TimedeltaIndex`
    ([GH 16896](https://github.com/pandas-dev/pandas/issues/16896)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `TimedeltaIndex.get_loc()` handling of `np.timedelta64` inputs ([GH 16909](https://github.com/pandas-dev/pandas/issues/16909)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `MultiIndex.sort_index()` ordering when `ascending` argument is a list,
    but not all levels are specified, or are in a different order ([GH 16934](https://github.com/pandas-dev/pandas/issues/16934)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug where indexing with `np.inf` caused an `OverflowError` to be raised
    ([GH 16957](https://github.com/pandas-dev/pandas/issues/16957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in reindexing on an empty `CategoricalIndex` ([GH 16770](https://github.com/pandas-dev/pandas/issues/16770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes `DataFrame.loc` for setting with alignment and tz-aware `DatetimeIndex`
    ([GH 16889](https://github.com/pandas-dev/pandas/issues/16889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoids `IndexError` when passing an Index or Series to `.iloc` with older numpy
    ([GH 17193](https://github.com/pandas-dev/pandas/issues/17193))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow unicode empty strings as placeholders in multilevel columns in Python
    2 ([GH 17099](https://github.com/pandas-dev/pandas/issues/17099))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.iloc` when used with inplace addition or assignment and an int indexer
    on a `MultiIndex` causing the wrong indexes to be read from and written to ([GH
    17148](https://github.com/pandas-dev/pandas/issues/17148))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.isin()` in which checking membership in empty `Series` objects raised
    an error ([GH 16991](https://github.com/pandas-dev/pandas/issues/16991))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `CategoricalIndex` reindexing in which specified indices containing duplicates
    were not being respected ([GH 17323](https://github.com/pandas-dev/pandas/issues/17323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in intersection of `RangeIndex` with negative step ([GH 17296](https://github.com/pandas-dev/pandas/issues/17296))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex` where performing a scalar lookup fails for included right
    endpoints of non-overlapping monotonic decreasing indexes ([GH 16417](https://github.com/pandas-dev/pandas/issues/16417),
    [GH 17271](https://github.com/pandas-dev/pandas/issues/17271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.first_valid_index()`](../reference/api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index") and [`DataFrame.last_valid_index()`](../reference/api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index") when no valid entry ([GH 17400](https://github.com/pandas-dev/pandas/issues/17400))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") when called with a callable, incorrectly alters the name
    of the `Series`, rather than the name of the `Index`. ([GH 17407](https://github.com/pandas-dev/pandas/issues/17407))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `String.str_get()` raises `IndexError` instead of inserting NaNs when
    using a negative index. ([GH 17704](https://github.com/pandas-dev/pandas/issues/17704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") when reading a timezone aware index from `fixed` format HDFStore
    ([GH 17618](https://github.com/pandas-dev/pandas/issues/17618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which columns were not being thoroughly de-duplicated ([GH
    17060](https://github.com/pandas-dev/pandas/issues/17060))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which specified column names were not being thoroughly de-duplicated
    ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which non integer values for the header argument generated
    an unhelpful / unrelated error message ([GH 16338](https://github.com/pandas-dev/pandas/issues/16338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management issues in exception handling, under
    certain conditions, would cause the interpreter to segfault ([GH 14696](https://github.com/pandas-dev/pandas/issues/14696),
    [GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with `low_memory=False` in which a CSV with at
    least one column > 2GB in size would incorrectly raise a `MemoryError` ([GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with a single-element list `header` would return
    a `DataFrame` of all NaN values ([GH 7757](https://github.com/pandas-dev/pandas/issues/7757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") defaulting to ‘ascii’ encoding in Python 3, instead
    of ‘utf-8’ ([GH 17097](https://github.com/pandas-dev/pandas/issues/17097))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where value labels could not be read when using an iterator
    ([GH 16923](https://github.com/pandas-dev/pandas/issues/16923))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where the index was not set ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") where import check fails when run in multiple threads ([GH
    16928](https://github.com/pandas-dev/pandas/issues/16928))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") where automatic delimiter detection caused a `TypeError` to
    be thrown when a bad line was encountered rather than the correct error message
    ([GH 13374](https://github.com/pandas-dev/pandas/issues/13374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `notebook=True` where DataFrames with named indices
    or non-MultiIndex indices had undesired horizontal or vertical alignment for column
    or row labels, respectively ([GH 16792](https://github.com/pandas-dev/pandas/issues/16792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") in which there was no validation of the `justify`
    parameter ([GH 17527](https://github.com/pandas-dev/pandas/issues/17527))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.select()`](../reference/api/pandas.HDFStore.select.html#pandas.HDFStore.select
    "pandas.HDFStore.select") when reading a contiguous mixed-data table featuring
    VLArray ([GH 17021](https://github.com/pandas-dev/pandas/issues/17021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `to_json()` where several conditions (including objects with unprintable
    symbols, objects with deep recursion, overlong labels) caused segfaults instead
    of raising the appropriate exception ([GH 14256](https://github.com/pandas-dev/pandas/issues/14256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in plotting methods using `secondary_y` and `fontsize` not setting secondary
    axis font size ([GH 12565](https://github.com/pandas-dev/pandas/issues/12565))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when plotting `timedelta` and `datetime` dtypes on y-axis ([GH 16953](https://github.com/pandas-dev/pandas/issues/16953))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line plots no longer assume monotonic x data when calculating xlims, they show
    the entire lines now even for unsorted x data. ([GH 11310](https://github.com/pandas-dev/pandas/issues/11310),
    [GH 11471](https://github.com/pandas-dev/pandas/issues/11471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With matplotlib 2.0.0 and above, calculation of x limits for line plots is left
    to matplotlib, so that its new default settings are applied. ([GH 15495](https://github.com/pandas-dev/pandas/issues/15495))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.plot.bar` or `DataFrame.plot.bar` with `y` not respecting user-passed
    `color` ([GH 16822](https://github.com/pandas-dev/pandas/issues/16822))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug causing `plotting.parallel_coordinates` to reset the random seed when using
    random colors ([GH 17525](https://github.com/pandas-dev/pandas/issues/17525))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `DataFrame.resample(...).size()` where an empty `DataFrame` did not return
    a `Series` ([GH 14962](https://github.com/pandas-dev/pandas/issues/14962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`infer_freq()`](../reference/api/pandas.infer_freq.html#pandas.infer_freq
    "pandas.infer_freq") causing indices with 2-day gaps during the working week to
    be wrongly inferred as business daily ([GH 16624](https://github.com/pandas-dev/pandas/issues/16624))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).quantile()` which incorrectly used different defaults
    than [`Series.quantile()`](../reference/api/pandas.Series.quantile.html#pandas.Series.quantile
    "pandas.Series.quantile") and [`DataFrame.quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile") ([GH 9413](https://github.com/pandas-dev/pandas/issues/9413),
    [GH 16211](https://github.com/pandas-dev/pandas/issues/16211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.transform()` that would coerce boolean dtypes back to float
    ([GH 16875](https://github.com/pandas-dev/pandas/issues/16875))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.resample(...).apply()` where an empty `Series` modified the source
    index and did not return the name of a `Series` ([GH 14313](https://github.com/pandas-dev/pandas/issues/14313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).apply(...)` with a `DataFrame` with a `DatetimeIndex`,
    a `window` of a timedelta-convertible and `min_periods >= 1` ([GH 15305](https://github.com/pandas-dev/pandas/issues/15305))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where index and column keys were not recognized correctly
    when the number of keys equaled the number of elements on the groupby axis ([GH
    16859](https://github.com/pandas-dev/pandas/issues/16859))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.nunique()` with `TimeGrouper` which cannot handle `NaT` correctly
    ([GH 17575](https://github.com/pandas-dev/pandas/issues/17575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where a single level selection from a `MultiIndex`
    unexpectedly sorts ([GH 17537](https://github.com/pandas-dev/pandas/issues/17537))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where spurious warning is raised when `Grouper` object
    is used to override ambiguous column name ([GH 17383](https://github.com/pandas-dev/pandas/issues/17383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `TimeGrouper` differs when passes as a list and as a scalar ([GH 17530](https://github.com/pandas-dev/pandas/issues/17530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` raises `AttributeError` when a dictionary is passed in
    as data ([GH 16905](https://github.com/pandas-dev/pandas/issues/16905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame.fillna()` not filling all NaNs when frame was instantiated
    from SciPy sparse matrix ([GH 16112](https://github.com/pandas-dev/pandas/issues/16112))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.unstack()` and `SparseDataFrame.stack()` ([GH 16614](https://github.com/pandas-dev/pandas/issues/16614),
    [GH 15045](https://github.com/pandas-dev/pandas/issues/15045))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `make_sparse()` treating two numeric/boolean data, which have same bits,
    as same when array `dtype` is `object` ([GH 17574](https://github.com/pandas-dev/pandas/issues/17574))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.all()` and `SparseArray.any()` are now implemented to handle `SparseArray`,
    these were used but not implemented ([GH 17570](https://github.com/pandas-dev/pandas/issues/17570))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Joining/Merging with a non unique `PeriodIndex` raised a `TypeError` ([GH 16871](https://github.com/pandas-dev/pandas/issues/16871))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where non-aligned series of integers were casted to float ([GH
    17005](https://github.com/pandas-dev/pandas/issues/17005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in merging with categorical dtypes with datetimelikes incorrectly raised
    a `TypeError` ([GH 16900](https://github.com/pandas-dev/pandas/issues/16900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when using `isin()` on a large object series and large comparison array
    ([GH 16012](https://github.com/pandas-dev/pandas/issues/16012))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression from 0.20, [`Series.aggregate()`](../reference/api/pandas.Series.aggregate.html#pandas.Series.aggregate
    "pandas.Series.aggregate") and [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate") allow dictionaries as return values again ([GH 16741](https://github.com/pandas-dev/pandas/issues/16741))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes dtype of result with integer dtype input, from [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") when called with `margins=True` ([GH 17013](https://github.com/pandas-dev/pandas/issues/17013))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where passing two `Series` with the same name raised a `KeyError`
    ([GH 13279](https://github.com/pandas-dev/pandas/issues/13279))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin"), [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax"), and their counterparts on `DataFrame` and groupby objects
    work correctly with floating point data that contains infinite values ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    where checking a tuple of strings raised a `TypeError` ([GH 17108](https://github.com/pandas-dev/pandas/issues/17108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    where order of result index was unpredictable if it contained non-comparable elements
    ([GH 17344](https://github.com/pandas-dev/pandas/issues/17344))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression when sorting by multiple columns on a `datetime64` dtype `Series`
    with `NaT` values ([GH 16836](https://github.com/pandas-dev/pandas/issues/16836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") where the result’s columns did not preserve the categorical
    dtype of `columns` when `dropna` was `False` ([GH 17842](https://github.com/pandas-dev/pandas/issues/17842))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.drop_duplicates` where dropping with non-unique column names
    raised a `ValueError` ([GH 17836](https://github.com/pandas-dev/pandas/issues/17836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `unstack()` which, when called on a list of levels, would discard the
    `fillna` argument ([GH 13971](https://github.com/pandas-dev/pandas/issues/13971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the alignment of `range` objects and other list-likes with `DataFrame`
    leading to operations being performed row-wise instead of column-wise ([GH 17901](https://github.com/pandas-dev/pandas/issues/17901))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `.clip()` with `axis=1` and a list-like for `threshold` is passed; previously
    this raised `ValueError` ([GH 15390](https://github.com/pandas-dev/pandas/issues/15390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") and [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") now treat NA values for upper and lower arguments as
    `None` instead of raising `ValueError` ([GH 17276](https://github.com/pandas-dev/pandas/issues/17276)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") when called with a categorical ([GH 16639](https://github.com/pandas-dev/pandas/issues/16639))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the categorical constructor with empty values and categories causing
    the `.categories` to be an empty `Float64Index` rather than an empty `Index` with
    object dtype ([GH 17248](https://github.com/pandas-dev/pandas/issues/17248))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in categorical operations with [Series.cat](../user_guide/categorical.html#categorical-cat)
    not preserving the original Series’ name ([GH 17509](https://github.com/pandas-dev/pandas/issues/17509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") failing for categorical columns with boolean/int data
    types ([GH 17187](https://github.com/pandas-dev/pandas/issues/17187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in constructing a `Categorical`/`CategoricalDtype` when the specified `categories`
    are of categorical type ([GH 17884](https://github.com/pandas-dev/pandas/issues/17884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### PyPy'
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility with PyPy in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with `usecols=[<unsorted ints>]` and [`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json
    "pandas.read_json") ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split tests into cases for CPython and PyPy where needed, which highlights the
    fragility of index matching with `float('nan')`, `np.nan` and `NAT` ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix [`DataFrame.memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") to support PyPy. Objects on PyPy do not have
    a fixed size, so an approximation is used instead ([GH 17228](https://github.com/pandas-dev/pandas/issues/17228))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug where some inplace operators were not being wrapped and produced a copy
    when invoked ([GH 12962](https://github.com/pandas-dev/pandas/issues/12962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in [`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval")
    where the `inplace` parameter was being incorrectly handled ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))  ##
    Contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A total of 206 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 3553x +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aaron Barber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Gleave +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AdamShamlian +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adrian Liaw +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Velasco +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Yee +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex B +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Lubbock +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Marchenko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Rychyk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol K +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andreas Winkler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew 亮
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: André Jonasson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becky Sweger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Berkay +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bob Haffner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bran Yang
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brian Tu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brock Mendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carol Willing +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carter Green +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chankey Pathak +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Billington
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Filo Gorgolewski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Kerr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris M +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Mazzullo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Prinoth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Stade-Schuldt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Moehl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DSM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Chen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Grady
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Himmelstein
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dave Willmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Cook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Gwynne
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Read +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dillon Niederhut +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Douglas Rudd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Stein +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik Fredriksen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Florian Wilhelm +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floris Kint +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forbidden Donut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabe F +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin Rajaiah +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giulio Pepe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guilherme Beltramini
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillem Borrell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hanmin Qin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hendrik Makait +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hugues Valois
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hussain Tamboli +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iva Miholic +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Novotný +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Rudolph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean Helie +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean-Baptiste Schiratti +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean-Mathieu Deschenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Knupp +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Tratner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JennaVergeynst
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JimStearns206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Nothman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John W. O’Brien
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Crall +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Mease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jonathan J. Helmus +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JosephWagner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Juarez Bochi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Julian Kuhlmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karel De Brabandere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kassandra Keeton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keiron Pizzey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keith Webber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kirk Hansen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licht Takeuchi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lucas Kushner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mahdi Ben Jelloul +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makarov Andrey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malgorzata Turzanska +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marc Garcia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Margaret Sy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MarsGuy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Bark +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Roeschke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mehmet Ali “Mali” Akmanalp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Gasvoda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Penkov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Milo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Morgan Stuart +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Morgan243 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nathan Ford +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick Eubank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick Garvey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oleg Shteynbuk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P-Tillmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pankaj Pandey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick Luo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick O’Melveny
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Reidy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paula +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peter Quackenbush
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peter Yanovich +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phillip Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pierre Haessig
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pradyumna Reddy Chinthala
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prasanjit Prakash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RobinFiveWords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan Hendrickson
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sam Foo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sangwoong Yoon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Gibbons +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimonBaron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steven Cutting +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudeep +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sylvia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T N +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas A Caswell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim Swast +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tong SHEN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utkarsh Upadhyay +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vincent La +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vivek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WANG Aiyong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WBare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wes McKinney
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XF +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yi Liu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yosuke Nakabayashi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aaron315 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abarber4gh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aernlund +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: agustín méndez +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: andymaheshw +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ante328 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aviolov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bpraggastis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cbertinato +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cclauss +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chernrick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dkamm +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dwkenefick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: economy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: faic +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fding253 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: guygoldberg +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hhuuggoo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: huashuai +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ian
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iulia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaredsnyder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jbrockmendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jdeschenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jebob +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jschendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: keitakurita
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kernc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kiwirob +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kjford
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linebp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lloydkirk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: louispotok +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: majiang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: manikbhandari +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: margotphoenix +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: matthiashuschle +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mattip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mjlove12 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nmartensen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas-docs-bot +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parchd-1 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: philipphanemann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rdk1024 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reidy-p +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ri938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ruiann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rvernica +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s-weigand +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scotthavard92 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: skwbc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: step4me +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tobycheese +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: topper-123 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tsdlovell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ysau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'zzgao +  ## New features'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Integration with Apache Parquet file format'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with [Apache Parquet](https://parquet.apache.org/), including a
    new top-level [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet") and [`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") method, see [here](../user_guide/io.html#io-parquet)
    ([GH 15838](https://github.com/pandas-dev/pandas/issues/15838), [GH 17438](https://github.com/pandas-dev/pandas/issues/17438)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Apache Parquet](https://parquet.apache.org/) provides a cross-language, binary
    file format for reading and writing data frames efficiently. Parquet is designed
    to faithfully serialize and de-serialize `DataFrame` s, supporting all of the
    pandas dtypes, including extension dtypes such as datetime with timezones.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality depends on either the [pyarrow](http://arrow.apache.org/docs/python/)
    or [fastparquet](https://fastparquet.readthedocs.io/en/latest/) library. For more
    details, see [the IO docs on Parquet](../user_guide/io.html#io-parquet).  ###
    Method `infer_objects` type conversion'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods have been added to perform dtype inference
    on object columns, replacing some of the functionality of the deprecated `convert_objects`
    method. See the documentation [here](../user_guide/basics.html#basics-object-conversion)
    for more details. ([GH 11221](https://github.com/pandas-dev/pandas/issues/11221))
  prefs: []
  type: TYPE_NORMAL
- en: 'This method only performs soft conversions on object columns, converting Python
    objects to native types, but not any coercive conversions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note that column `'C'` was not converted - only scalar numeric types will be
    converted to a new type. Other types of conversion should be accomplished using
    the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function (or [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime"), [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]  ### Improved warnings when attempting to create columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'New users are often puzzled by the relationship between column operations and
    attribute access on `DataFrame` instances ([GH 7175](https://github.com/pandas-dev/pandas/issues/7175)).
    One specific instance of this confusion is attempting to create a new column by
    setting an attribute on the `DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This does not raise any obvious exceptions, but also does not create a new
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting a list-like data structure into a new attribute now raises a `UserWarning`
    about the potential for unexpected behavior. See [Attribute Access](../user_guide/indexing.html#indexing-attribute-access).  ###
    Method `drop` now also accepts index/columns keywords'
  prefs: []
  type: TYPE_NORMAL
- en: The [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method has gained `index`/`columns` keywords as an alternative
    to specifying the `axis`. This is similar to the behavior of `reindex` ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]  ### Methods `rename`, `reindex` now also accept axis keyword'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") and [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") methods have gained the `axis` keyword to specify
    the axis to target with the operation ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s `rename`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'And `reindex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The “index, columns” style continues to work as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We *highly* encourage using named arguments to avoid confusion when using either
    style.  ### `CategoricalDtype` for specifying categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.api.types.CategoricalDtype` has been added to the public API and expanded
    to include the `categories` and `ordered` attributes. A `CategoricalDtype` can
    be used to specify the set of categories and orderedness of an array, independent
    of the data. This can be useful for example, when converting string data to a
    `Categorical` ([GH 14711](https://github.com/pandas-dev/pandas/issues/14711),
    [GH 15078](https://github.com/pandas-dev/pandas/issues/15078), [GH 16015](https://github.com/pandas-dev/pandas/issues/16015),
    [GH 17643](https://github.com/pandas-dev/pandas/issues/17643)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'One place that deserves special mention is in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"). Previously, with `dtype={''col'': ''category''}`, the returned
    values and categories would always be strings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Notice the “object” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: With a `CategoricalDtype` of all numerics, datetimes, or timedeltas, we can
    automatically convert to the correct type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The values have been correctly interpreted as integers.
  prefs: []
  type: TYPE_NORMAL
- en: The `.dtype` property of a `Categorical`, `CategoricalIndex` or a `Series` with
    categorical type will now return an instance of `CategoricalDtype`. While the
    repr has changed, `str(CategoricalDtype())` is still the string `'category'`.
    We’ll take this moment to remind users that the *preferred* way to detect categorical
    data is to use [`pandas.api.types.is_categorical_dtype()`](../reference/api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype"), and not `str(dtype) == 'category'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the [CategoricalDtype docs](../user_guide/categorical.html#categorical-categoricaldtype)
    for more.  ### `GroupBy` objects now have a `pipe` method'
  prefs: []
  type: TYPE_NORMAL
- en: '`GroupBy` objects now have a `pipe` method, similar to the one on `DataFrame`
    and `Series`, that allow for functions that take a `GroupBy` to be composed in
    a clean, readable syntax. ([GH 17871](https://github.com/pandas-dev/pandas/issues/17871))'
  prefs: []
  type: TYPE_NORMAL
- en: For a concrete example on combining `.groupby` and `.pipe` , imagine having
    a DataFrame with columns for stores, products, revenue and sold quantity. We’d
    like to do a groupwise calculation of *prices* (i.e. revenue/quantity) per store
    and per product. We could do this in a multi-step operation, but expressing it
    in terms of piping can make the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we set the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to find prices per store/product, we can simply do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'See the [documentation](../user_guide/groupby.html#groupby-pipe) for more.  ###
    `Categorical.rename_categories` accepts a dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: '[`rename_categories()`](../reference/api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories") now accepts a dict-like argument for `new_categories`.
    The previous categories are looked up in the dictionary’s keys and replaced if
    found. The behavior of missing and extra keys is the same as in [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: To assist with upgrading pandas, `rename_categories` treats `Series` as list-like.
    Typically, Series are considered to be dict-like (e.g. in `.rename`, `.map`).
    In a future version of pandas `rename_categories` will change to treat them as
    dict-like. Follow the warning message’s recommendations for writing future-proof
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]  ### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: New functions or methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Resampler.nearest()`](../reference/api/pandas.core.resample.Resampler.nearest.html#pandas.core.resample.Resampler.nearest
    "pandas.core.resample.Resampler.nearest") is added to support nearest-neighbor
    upsampling ([GH 17496](https://github.com/pandas-dev/pandas/issues/17496)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") has
    added support for a `to_frame` method ([GH 15230](https://github.com/pandas-dev/pandas/issues/15230)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added a `skipna` parameter to [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") to support type inference in the presence of missing
    values ([GH 17059](https://github.com/pandas-dev/pandas/issues/17059)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_dict()`](../reference/api/pandas.Series.to_dict.html#pandas.Series.to_dict
    "pandas.Series.to_dict") and [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") now support an `into` keyword which allows you to
    specify the `collections.Mapping` subclass that you would like returned. The default
    is `dict`, which is backwards compatible. ([GH 16122](https://github.com/pandas-dev/pandas/issues/16122))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") now support the `inplace` parameter. ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_pickle()`](../reference/api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle") and [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle") have gained a `protocol` parameter ([GH 16252](https://github.com/pandas-dev/pandas/issues/16252)).
    By default, this parameter is set to [HIGHEST_PROTOCOL](https://docs.python.org/3/library/pickle.html#data-stream-format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") has gained the `nthreads` parameter for multi-threaded
    operations ([GH 16359](https://github.com/pandas-dev/pandas/issues/16359))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") and [`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") have gained an `inplace` argument. ([GH 15388](https://github.com/pandas-dev/pandas/issues/15388))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    has gained a `margins_name` parameter to define the name of the row / column that
    will contain the totals when `margins=True`. ([GH 15972](https://github.com/pandas-dev/pandas/issues/15972))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    now accepts a `chunksize` parameter that can be used when `lines=True`. If `chunksize`
    is passed, read_json now returns an iterator which reads in `chunksize` lines
    with each iteration. ([GH 17048](https://github.com/pandas-dev/pandas/issues/17048))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    and [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") now accept a `compression` argument which allows them
    to transparently handle compressed files. ([GH 17798](https://github.com/pandas-dev/pandas/issues/17798))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Improved the import time of pandas by about 2.25x. ([GH 16764](https://github.com/pandas-dev/pandas/issues/16764))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for [PEP 519 – Adding a file system path protocol](https://www.python.org/dev/peps/pep-0519/)
    on most readers (e.g. [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")) and writers (e.g. [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")) ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `__fspath__` method to `pd.HDFStore`, `pd.ExcelFile`, and `pd.ExcelWriter`
    to work properly with the file system path protocol ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate` argument for [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") now checks whether a merge is one-to-one, one-to-many, many-to-one,
    or many-to-many. If a merge is found to not be an example of specified merge type,
    an exception of type `MergeError` will be raised. For more, see [here](../user_guide/merging.html#merging-validation)
    ([GH 16270](https://github.com/pandas-dev/pandas/issues/16270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [PEP 518](https://www.python.org/dev/peps/pep-0518/) (`pyproject.toml`)
    to the build system ([GH 16745](https://github.com/pandas-dev/pandas/issues/16745))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RangeIndex.append()` now returns a `RangeIndex` object when possible ([GH
    16212](https://github.com/pandas-dev/pandas/issues/16212))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") and [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") with `inplace=True` now return `None` while renaming
    the axis inplace. ([GH 15704](https://github.com/pandas-dev/pandas/issues/15704))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`api.types.infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") now infers decimals. ([GH 15690](https://github.com/pandas-dev/pandas/issues/15690))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") now accepts scalar values for include/exclude
    as well as list-like. ([GH 16855](https://github.com/pandas-dev/pandas/issues/16855))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘YS’ in addition to ‘AS’ as an alias for start
    of year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘Y’ in addition to ‘A’ as an alias for end of
    year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.add_prefix()`](../reference/api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix") and [`DataFrame.add_suffix()`](../reference/api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix") now accept strings containing the ‘%’ character.
    ([GH 17151](https://github.com/pandas-dev/pandas/issues/17151))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write methods that infer compression ([`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table"), [`read_pickle()`](../reference/api/pandas.read_pickle.html#pandas.read_pickle
    "pandas.read_pickle"), and [`to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")) can now infer from path-like objects, such as `pathlib.Path`.
    ([GH 17206](https://github.com/pandas-dev/pandas/issues/17206))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    now recognizes much more of the most frequently used date (datetime) formats in
    SAS7BDAT files. ([GH 15871](https://github.com/pandas-dev/pandas/issues/15871))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") and [`Series.items()`](../reference/api/pandas.Series.items.html#pandas.Series.items
    "pandas.Series.items") are now present in both Python 2 and 3 and is lazy in all
    cases. ([GH 13918](https://github.com/pandas-dev/pandas/issues/13918), [GH 17213](https://github.com/pandas-dev/pandas/issues/17213))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.io.formats.style.Styler.where()` has been implemented as a convenience
    for `pandas.io.formats.style.Styler.applymap()`. ([GH 17474](https://github.com/pandas-dev/pandas/issues/17474))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.is_monotonic_decreasing()` has been implemented. Previously returned
    `False` in all cases. ([GH 16554](https://github.com/pandas-dev/pandas/issues/16554))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") raises `ImportError` with a better message if `xlrd` is not
    installed. ([GH 17613](https://github.com/pandas-dev/pandas/issues/17613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") will preserve the original order of `**kwargs` for
    Python 3.6+ users instead of sorting the column names. ([GH 14207](https://github.com/pandas-dev/pandas/issues/14207))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex"), [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"), [`Index.get_indexer()`](../reference/api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer") now support list-like argument for `tolerance`. ([GH
    17367](https://github.com/pandas-dev/pandas/issues/17367))  ### Integration with
    Apache Parquet file format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with [Apache Parquet](https://parquet.apache.org/), including a
    new top-level [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet") and [`DataFrame.to_parquet()`](../reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet") method, see [here](../user_guide/io.html#io-parquet)
    ([GH 15838](https://github.com/pandas-dev/pandas/issues/15838), [GH 17438](https://github.com/pandas-dev/pandas/issues/17438)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Apache Parquet](https://parquet.apache.org/) provides a cross-language, binary
    file format for reading and writing data frames efficiently. Parquet is designed
    to faithfully serialize and de-serialize `DataFrame` s, supporting all of the
    pandas dtypes, including extension dtypes such as datetime with timezones.'
  prefs: []
  type: TYPE_NORMAL
- en: This functionality depends on either the [pyarrow](http://arrow.apache.org/docs/python/)
    or [fastparquet](https://fastparquet.readthedocs.io/en/latest/) library. For more
    details, see [the IO docs on Parquet](../user_guide/io.html#io-parquet).
  prefs: []
  type: TYPE_NORMAL
- en: '### Method `infer_objects` type conversion'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.infer_objects()`](../reference/api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects") and [`Series.infer_objects()`](../reference/api/pandas.Series.infer_objects.html#pandas.Series.infer_objects
    "pandas.Series.infer_objects") methods have been added to perform dtype inference
    on object columns, replacing some of the functionality of the deprecated `convert_objects`
    method. See the documentation [here](../user_guide/basics.html#basics-object-conversion)
    for more details. ([GH 11221](https://github.com/pandas-dev/pandas/issues/11221))
  prefs: []
  type: TYPE_NORMAL
- en: 'This method only performs soft conversions on object columns, converting Python
    objects to native types, but not any coercive conversions. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Note that column `'C'` was not converted - only scalar numeric types will be
    converted to a new type. Other types of conversion should be accomplished using
    the [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") function (or [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime"), [`to_timedelta()`](../reference/api/pandas.to_timedelta.html#pandas.to_timedelta
    "pandas.to_timedelta")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '### Improved warnings when attempting to create columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'New users are often puzzled by the relationship between column operations and
    attribute access on `DataFrame` instances ([GH 7175](https://github.com/pandas-dev/pandas/issues/7175)).
    One specific instance of this confusion is attempting to create a new column by
    setting an attribute on the `DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'This does not raise any obvious exceptions, but also does not create a new
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Setting a list-like data structure into a new attribute now raises a `UserWarning`
    about the potential for unexpected behavior. See [Attribute Access](../user_guide/indexing.html#indexing-attribute-access).
  prefs: []
  type: TYPE_NORMAL
- en: '### Method `drop` now also accepts index/columns keywords'
  prefs: []
  type: TYPE_NORMAL
- en: The [`drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") method has gained `index`/`columns` keywords as an alternative
    to specifying the `axis`. This is similar to the behavior of `reindex` ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '### Methods `rename`, `reindex` now also accept axis keyword'
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename") and [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex") methods have gained the `axis` keyword to specify
    the axis to target with the operation ([GH 12392](https://github.com/pandas-dev/pandas/issues/12392)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s `rename`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'And `reindex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The “index, columns” style continues to work as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: We *highly* encourage using named arguments to avoid confusion when using either
    style.
  prefs: []
  type: TYPE_NORMAL
- en: '### `CategoricalDtype` for specifying categoricals'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.api.types.CategoricalDtype` has been added to the public API and expanded
    to include the `categories` and `ordered` attributes. A `CategoricalDtype` can
    be used to specify the set of categories and orderedness of an array, independent
    of the data. This can be useful for example, when converting string data to a
    `Categorical` ([GH 14711](https://github.com/pandas-dev/pandas/issues/14711),
    [GH 15078](https://github.com/pandas-dev/pandas/issues/15078), [GH 16015](https://github.com/pandas-dev/pandas/issues/16015),
    [GH 17643](https://github.com/pandas-dev/pandas/issues/17643)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'One place that deserves special mention is in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"). Previously, with `dtype={''col'': ''category''}`, the returned
    values and categories would always be strings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Notice the “object” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: With a `CategoricalDtype` of all numerics, datetimes, or timedeltas, we can
    automatically convert to the correct type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The values have been correctly interpreted as integers.
  prefs: []
  type: TYPE_NORMAL
- en: The `.dtype` property of a `Categorical`, `CategoricalIndex` or a `Series` with
    categorical type will now return an instance of `CategoricalDtype`. While the
    repr has changed, `str(CategoricalDtype())` is still the string `'category'`.
    We’ll take this moment to remind users that the *preferred* way to detect categorical
    data is to use [`pandas.api.types.is_categorical_dtype()`](../reference/api/pandas.api.types.is_categorical_dtype.html#pandas.api.types.is_categorical_dtype
    "pandas.api.types.is_categorical_dtype"), and not `str(dtype) == 'category'`.
  prefs: []
  type: TYPE_NORMAL
- en: See the [CategoricalDtype docs](../user_guide/categorical.html#categorical-categoricaldtype)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### `GroupBy` objects now have a `pipe` method'
  prefs: []
  type: TYPE_NORMAL
- en: '`GroupBy` objects now have a `pipe` method, similar to the one on `DataFrame`
    and `Series`, that allow for functions that take a `GroupBy` to be composed in
    a clean, readable syntax. ([GH 17871](https://github.com/pandas-dev/pandas/issues/17871))'
  prefs: []
  type: TYPE_NORMAL
- en: For a concrete example on combining `.groupby` and `.pipe` , imagine having
    a DataFrame with columns for stores, products, revenue and sold quantity. We’d
    like to do a groupwise calculation of *prices* (i.e. revenue/quantity) per store
    and per product. We could do this in a multi-step operation, but expressing it
    in terms of piping can make the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we set the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to find prices per store/product, we can simply do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See the [documentation](../user_guide/groupby.html#groupby-pipe) for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### `Categorical.rename_categories` accepts a dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: '[`rename_categories()`](../reference/api/pandas.Series.cat.rename_categories.html#pandas.Series.cat.rename_categories
    "pandas.Series.cat.rename_categories") now accepts a dict-like argument for `new_categories`.
    The previous categories are looked up in the dictionary’s keys and replaced if
    found. The behavior of missing and extra keys is the same as in [`DataFrame.rename()`](../reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: To assist with upgrading pandas, `rename_categories` treats `Series` as list-like.
    Typically, Series are considered to be dict-like (e.g. in `.rename`, `.map`).
    In a future version of pandas `rename_categories` will change to treat them as
    dict-like. Follow the warning message’s recommendations for writing future-proof
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '### Other enhancements'
  prefs: []
  type: TYPE_NORMAL
- en: New functions or methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Resampler.nearest()`](../reference/api/pandas.core.resample.Resampler.nearest.html#pandas.core.resample.Resampler.nearest
    "pandas.core.resample.Resampler.nearest") is added to support nearest-neighbor
    upsampling ([GH 17496](https://github.com/pandas-dev/pandas/issues/17496)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") has
    added support for a `to_frame` method ([GH 15230](https://github.com/pandas-dev/pandas/issues/15230)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added a `skipna` parameter to [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") to support type inference in the presence of missing
    values ([GH 17059](https://github.com/pandas-dev/pandas/issues/17059)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_dict()`](../reference/api/pandas.Series.to_dict.html#pandas.Series.to_dict
    "pandas.Series.to_dict") and [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") now support an `into` keyword which allows you to
    specify the `collections.Mapping` subclass that you would like returned. The default
    is `dict`, which is backwards compatible. ([GH 16122](https://github.com/pandas-dev/pandas/issues/16122))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") now support the `inplace` parameter. ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_pickle()`](../reference/api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle") and [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle") have gained a `protocol` parameter ([GH 16252](https://github.com/pandas-dev/pandas/issues/16252)).
    By default, this parameter is set to [HIGHEST_PROTOCOL](https://docs.python.org/3/library/pickle.html#data-stream-format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") has gained the `nthreads` parameter for multi-threaded
    operations ([GH 16359](https://github.com/pandas-dev/pandas/issues/16359))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") and [`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") have gained an `inplace` argument. ([GH 15388](https://github.com/pandas-dev/pandas/issues/15388))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    has gained a `margins_name` parameter to define the name of the row / column that
    will contain the totals when `margins=True`. ([GH 15972](https://github.com/pandas-dev/pandas/issues/15972))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    now accepts a `chunksize` parameter that can be used when `lines=True`. If `chunksize`
    is passed, read_json now returns an iterator which reads in `chunksize` lines
    with each iteration. ([GH 17048](https://github.com/pandas-dev/pandas/issues/17048))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    and [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") now accept a `compression` argument which allows them
    to transparently handle compressed files. ([GH 17798](https://github.com/pandas-dev/pandas/issues/17798))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Improved the import time of pandas by about 2.25x. ([GH 16764](https://github.com/pandas-dev/pandas/issues/16764))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for [PEP 519 – Adding a file system path protocol](https://www.python.org/dev/peps/pep-0519/)
    on most readers (e.g. [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")) and writers (e.g. [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")) ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `__fspath__` method to `pd.HDFStore`, `pd.ExcelFile`, and `pd.ExcelWriter`
    to work properly with the file system path protocol ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate` argument for [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") now checks whether a merge is one-to-one, one-to-many, many-to-one,
    or many-to-many. If a merge is found to not be an example of specified merge type,
    an exception of type `MergeError` will be raised. For more, see [here](../user_guide/merging.html#merging-validation)
    ([GH 16270](https://github.com/pandas-dev/pandas/issues/16270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [PEP 518](https://www.python.org/dev/peps/pep-0518/) (`pyproject.toml`)
    to the build system ([GH 16745](https://github.com/pandas-dev/pandas/issues/16745))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RangeIndex.append()` now returns a `RangeIndex` object when possible ([GH
    16212](https://github.com/pandas-dev/pandas/issues/16212))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") and [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") with `inplace=True` now return `None` while renaming
    the axis inplace. ([GH 15704](https://github.com/pandas-dev/pandas/issues/15704))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`api.types.infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") now infers decimals. ([GH 15690](https://github.com/pandas-dev/pandas/issues/15690))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") now accepts scalar values for include/exclude
    as well as list-like. ([GH 16855](https://github.com/pandas-dev/pandas/issues/16855))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘YS’ in addition to ‘AS’ as an alias for start
    of year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘Y’ in addition to ‘A’ as an alias for end of
    year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.add_prefix()`](../reference/api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix") and [`DataFrame.add_suffix()`](../reference/api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix") now accept strings containing the ‘%’ character.
    ([GH 17151](https://github.com/pandas-dev/pandas/issues/17151))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write methods that infer compression ([`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table"), [`read_pickle()`](../reference/api/pandas.read_pickle.html#pandas.read_pickle
    "pandas.read_pickle"), and [`to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")) can now infer from path-like objects, such as `pathlib.Path`.
    ([GH 17206](https://github.com/pandas-dev/pandas/issues/17206))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    now recognizes much more of the most frequently used date (datetime) formats in
    SAS7BDAT files. ([GH 15871](https://github.com/pandas-dev/pandas/issues/15871))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") and [`Series.items()`](../reference/api/pandas.Series.items.html#pandas.Series.items
    "pandas.Series.items") are now present in both Python 2 and 3 and is lazy in all
    cases. ([GH 13918](https://github.com/pandas-dev/pandas/issues/13918), [GH 17213](https://github.com/pandas-dev/pandas/issues/17213))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.io.formats.style.Styler.where()` has been implemented as a convenience
    for `pandas.io.formats.style.Styler.applymap()`. ([GH 17474](https://github.com/pandas-dev/pandas/issues/17474))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.is_monotonic_decreasing()` has been implemented. Previously returned
    `False` in all cases. ([GH 16554](https://github.com/pandas-dev/pandas/issues/16554))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") raises `ImportError` with a better message if `xlrd` is not
    installed. ([GH 17613](https://github.com/pandas-dev/pandas/issues/17613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") will preserve the original order of `**kwargs` for
    Python 3.6+ users instead of sorting the column names. ([GH 14207](https://github.com/pandas-dev/pandas/issues/14207))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex"), [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"), [`Index.get_indexer()`](../reference/api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer") now support list-like argument for `tolerance`. ([GH
    17367](https://github.com/pandas-dev/pandas/issues/17367))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New functions or methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[`Resampler.nearest()`](../reference/api/pandas.core.resample.Resampler.nearest.html#pandas.core.resample.Resampler.nearest
    "pandas.core.resample.Resampler.nearest") is added to support nearest-neighbor
    upsampling ([GH 17496](https://github.com/pandas-dev/pandas/issues/17496)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index") has
    added support for a `to_frame` method ([GH 15230](https://github.com/pandas-dev/pandas/issues/15230)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Added a `skipna` parameter to [`infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") to support type inference in the presence of missing
    values ([GH 17059](https://github.com/pandas-dev/pandas/issues/17059)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_dict()`](../reference/api/pandas.Series.to_dict.html#pandas.Series.to_dict
    "pandas.Series.to_dict") and [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") now support an `into` keyword which allows you to
    specify the `collections.Mapping` subclass that you would like returned. The default
    is `dict`, which is backwards compatible. ([GH 16122](https://github.com/pandas-dev/pandas/issues/16122))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") now support the `inplace` parameter. ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.to_pickle()`](../reference/api/pandas.Series.to_pickle.html#pandas.Series.to_pickle
    "pandas.Series.to_pickle") and [`DataFrame.to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle") have gained a `protocol` parameter ([GH 16252](https://github.com/pandas-dev/pandas/issues/16252)).
    By default, this parameter is set to [HIGHEST_PROTOCOL](https://docs.python.org/3/library/pickle.html#data-stream-format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_feather()`](../reference/api/pandas.read_feather.html#pandas.read_feather
    "pandas.read_feather") has gained the `nthreads` parameter for multi-threaded
    operations ([GH 16359](https://github.com/pandas-dev/pandas/issues/16359))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") and [`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") have gained an `inplace` argument. ([GH 15388](https://github.com/pandas-dev/pandas/issues/15388))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    has gained a `margins_name` parameter to define the name of the row / column that
    will contain the totals when `margins=True`. ([GH 15972](https://github.com/pandas-dev/pandas/issues/15972))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    now accepts a `chunksize` parameter that can be used when `lines=True`. If `chunksize`
    is passed, read_json now returns an iterator which reads in `chunksize` lines
    with each iteration. ([GH 17048](https://github.com/pandas-dev/pandas/issues/17048))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json "pandas.read_json")
    and [`to_json()`](../reference/api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json") now accept a `compression` argument which allows them
    to transparently handle compressed files. ([GH 17798](https://github.com/pandas-dev/pandas/issues/17798))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various enhancements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Improved the import time of pandas by about 2.25x. ([GH 16764](https://github.com/pandas-dev/pandas/issues/16764))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for [PEP 519 – Adding a file system path protocol](https://www.python.org/dev/peps/pep-0519/)
    on most readers (e.g. [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")) and writers (e.g. [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")) ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a `__fspath__` method to `pd.HDFStore`, `pd.ExcelFile`, and `pd.ExcelWriter`
    to work properly with the file system path protocol ([GH 13823](https://github.com/pandas-dev/pandas/issues/13823)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `validate` argument for [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") now checks whether a merge is one-to-one, one-to-many, many-to-one,
    or many-to-many. If a merge is found to not be an example of specified merge type,
    an exception of type `MergeError` will be raised. For more, see [here](../user_guide/merging.html#merging-validation)
    ([GH 16270](https://github.com/pandas-dev/pandas/issues/16270))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for [PEP 518](https://www.python.org/dev/peps/pep-0518/) (`pyproject.toml`)
    to the build system ([GH 16745](https://github.com/pandas-dev/pandas/issues/16745))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RangeIndex.append()` now returns a `RangeIndex` object when possible ([GH
    16212](https://github.com/pandas-dev/pandas/issues/16212))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") and [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") with `inplace=True` now return `None` while renaming
    the axis inplace. ([GH 15704](https://github.com/pandas-dev/pandas/issues/15704))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`api.types.infer_dtype()`](../reference/api/pandas.api.types.infer_dtype.html#pandas.api.types.infer_dtype
    "pandas.api.types.infer_dtype") now infers decimals. ([GH 15690](https://github.com/pandas-dev/pandas/issues/15690))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.select_dtypes()`](../reference/api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes") now accepts scalar values for include/exclude
    as well as list-like. ([GH 16855](https://github.com/pandas-dev/pandas/issues/16855))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘YS’ in addition to ‘AS’ as an alias for start
    of year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") now accepts ‘Y’ in addition to ‘A’ as an alias for end of
    year. ([GH 9313](https://github.com/pandas-dev/pandas/issues/9313))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.add_prefix()`](../reference/api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix") and [`DataFrame.add_suffix()`](../reference/api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix") now accept strings containing the ‘%’ character.
    ([GH 17151](https://github.com/pandas-dev/pandas/issues/17151))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write methods that infer compression ([`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv"), [`read_table()`](../reference/api/pandas.read_table.html#pandas.read_table
    "pandas.read_table"), [`read_pickle()`](../reference/api/pandas.read_pickle.html#pandas.read_pickle
    "pandas.read_pickle"), and [`to_pickle()`](../reference/api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")) can now infer from path-like objects, such as `pathlib.Path`.
    ([GH 17206](https://github.com/pandas-dev/pandas/issues/17206))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_sas()`](../reference/api/pandas.read_sas.html#pandas.read_sas "pandas.read_sas")
    now recognizes much more of the most frequently used date (datetime) formats in
    SAS7BDAT files. ([GH 15871](https://github.com/pandas-dev/pandas/issues/15871))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.items()`](../reference/api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items") and [`Series.items()`](../reference/api/pandas.Series.items.html#pandas.Series.items
    "pandas.Series.items") are now present in both Python 2 and 3 and is lazy in all
    cases. ([GH 13918](https://github.com/pandas-dev/pandas/issues/13918), [GH 17213](https://github.com/pandas-dev/pandas/issues/17213))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.io.formats.style.Styler.where()` has been implemented as a convenience
    for `pandas.io.formats.style.Styler.applymap()`. ([GH 17474](https://github.com/pandas-dev/pandas/issues/17474))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiIndex.is_monotonic_decreasing()` has been implemented. Previously returned
    `False` in all cases. ([GH 16554](https://github.com/pandas-dev/pandas/issues/16554))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") raises `ImportError` with a better message if `xlrd` is not
    installed. ([GH 17613](https://github.com/pandas-dev/pandas/issues/17613))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.assign()`](../reference/api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign") will preserve the original order of `**kwargs` for
    Python 3.6+ users instead of sorting the column names. ([GH 14207](https://github.com/pandas-dev/pandas/issues/14207))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex"), [`DataFrame.reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"), [`Index.get_indexer()`](../reference/api/pandas.Index.get_indexer.html#pandas.Index.get_indexer
    "pandas.Index.get_indexer") now support list-like argument for `tolerance`. ([GH
    17367](https://github.com/pandas-dev/pandas/issues/17367))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Backwards incompatible API changes'
  prefs: []
  type: TYPE_NORMAL
- en: '### Dependencies have increased minimum versions'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 15206](https://github.com/pandas-dev/pandas/issues/15206),
    [GH 15543](https://github.com/pandas-dev/pandas/issues/15543), [GH 15214](https://github.com/pandas-dev/pandas/issues/15214)).
    If installed, we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Numpy | 1.9.0 | X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Matplotlib | 1.4.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Scipy | 0.14.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Bottleneck | 1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: 'Additionally, support has been dropped for Python 3.4 ([GH 15251](https://github.com/pandas-dev/pandas/issues/15251)).  ###
    Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The changes described here have been partially reverted. See the [v0.22.0 Whatsnew](v0.22.0.html#whatsnew-0220)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of `sum` and `prod` on all-NaN Series/DataFrames no longer depends
    on whether [bottleneck](https://bottleneck.readthedocs.io) is installed, and return
    value of `sum` and `prod` on an empty Series has changed ([GH 9422](https://github.com/pandas-dev/pandas/issues/9422),
    [GH 15507](https://github.com/pandas-dev/pandas/issues/15507)).
  prefs: []
  type: TYPE_NORMAL
- en: Calling `sum` or `prod` on an empty or all-`NaN` `Series`, or columns of a `DataFrame`,
    will result in `NaN`. See the [docs](../user_guide/missing_data.html#missing-data-calculations).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITHOUT `bottleneck` installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITH `bottleneck`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior, without regard to the bottleneck installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this also changes the sum of an empty `Series`. Previously this always
    returned 0 regardless of a `bottleneck` installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'but for consistency with the all-NaN case, this was changed to return 0 as
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]  ### Indexing with a list with missing labels is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, selecting with a list of labels, where one or more labels were missing
    would always succeed, returning `NaN` for missing labels. This will now show a
    `FutureWarning`. In the future this will raise a `KeyError` ([GH 15747](https://github.com/pandas-dev/pandas/issues/15747)).
    This warning will trigger on a `DataFrame` or a `Series` for using `.loc[]` or
    `[[]]` when passing a list-of-labels with at least 1 missing label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: The idiomatic way to achieve selecting potentially not-found elements is via
    `.reindex()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Selection with all keys found is unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]  ### NA naming changes'
  prefs: []
  type: TYPE_NORMAL
- en: In order to promote more consistency among the pandas API, we have added additional
    top-level functions [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
    and [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")
    that are aliases for [`isnull()`](../reference/api/pandas.isnull.html#pandas.isnull
    "pandas.isnull") and [`notnull()`](../reference/api/pandas.notnull.html#pandas.notnull
    "pandas.notnull"). The naming scheme is now more consistent with methods like
    `.dropna()` and `.fillna()`. Furthermore in all cases where `.isnull()` and `.notnull()`
    methods are defined, these have additional methods named `.isna()` and `.notna()`,
    these are included for classes `Categorical`, `Index`, `Series`, and `DataFrame`.
    ([GH 15001](https://github.com/pandas-dev/pandas/issues/15001)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration option `pd.options.mode.use_inf_as_null` is deprecated, and
    `pd.options.mode.use_inf_as_na` is added as a replacement.  ### Iteration of Series/Index
    will now return Python scalars'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when using certain iteration methods for a `Series` with dtype `int`
    or `float`, you would receive a `numpy` scalar, e.g. a `np.int64`, rather than
    a Python `int`. Issue ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))
    corrected this for `Series.tolist()` and `list(Series)`. This change makes all
    iteration methods consistent, in particular, for `__iter__()` and `.map()`; note
    that this only affects int/float dtypes. ([GH 13236](https://github.com/pandas-dev/pandas/issues/13236),
    [GH 13258](https://github.com/pandas-dev/pandas/issues/13258), [GH 14216](https://github.com/pandas-dev/pandas/issues/14216)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore this will now correctly box the results of iteration for [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]  ### Indexing with a Boolean Index'
  prefs: []
  type: TYPE_NORMAL
- en: Previously when passing a boolean `Index` to `.loc`, if the index of the `Series/DataFrame`
    had `boolean` labels, you would get a label based selection, potentially duplicating
    result labels, rather than a boolean indexing selection (where `True` selects
    elements), this was inconsistent how a boolean numpy array indexed. The new behavior
    is to act like a boolean numpy array indexer. ([GH 17738](https://github.com/pandas-dev/pandas/issues/17738))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, previously if you had an index that was non-numeric (e.g. strings),
    then a boolean Index would raise a `KeyError`. This will now be treated as a boolean
    indexer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]  ### `PeriodIndex` resampling'
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of pandas, resampling a `Series`/`DataFrame` indexed by
    a `PeriodIndex` returned a `DatetimeIndex` in some cases ([GH 12884](https://github.com/pandas-dev/pandas/issues/12884)).
    Resampling to a multiplied frequency now returns a `PeriodIndex` ([GH 15944](https://github.com/pandas-dev/pandas/issues/15944)).
    As a minor enhancement, resampling a `PeriodIndex` can now handle `NaT` values
    ([GH 13224](https://github.com/pandas-dev/pandas/issues/13224))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Upsampling and calling `.ohlc()` previously returned a `Series`, basically identical
    to calling `.asfreq()`. OHLC upsampling now returns a DataFrame with columns `open`,
    `high`, `low` and `close` ([GH 13083](https://github.com/pandas-dev/pandas/issues/13083)).
    This is consistent with downsampling and `DatetimeIndex` behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]  ### Improved error handling during item assignment in pd.eval'
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval") will
    now raise a `ValueError` when item assignment malfunctions, or inplace operations
    are specified, but there is no item assignment in the expression ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, if you attempted the following expression, you would get a not
    very helpful error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very long way of saying numpy arrays don’t support string-item indexing.
    With this change, the error message is now this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'It also used to be possible to evaluate expressions inplace, even if there
    was no item assignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this input does not make much sense because the output is not being
    assigned to the target. Now, a `ValueError` will be raised when such an input
    is passed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]  ### Dtype conversions'
  prefs: []
  type: TYPE_NORMAL
- en: Previously assignments, `.where()` and `.fillna()` with a `bool` assignment,
    would coerce to same the type (e.g. int / float), or raise for datetimelikes.
    These will now preserve the bools with `object` dtypes. ([GH 16821](https://github.com/pandas-dev/pandas/issues/16821)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Previously, as assignment to a datetimelike with a non-datetimelike would coerce
    the non-datetime-like item being assigned ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: These now coerce to `object` dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Inconsistent behavior in `.where()` with datetimelikes which would raise rather
    than coerce to `object` ([GH 16402](https://github.com/pandas-dev/pandas/issues/16402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))  ###
    MultiIndex constructor with a single level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MultiIndex` constructors no longer squeezes a MultiIndex with all length-one
    levels down to a regular `Index`. This affects all the `MultiIndex` constructors.
    ([GH 17178](https://github.com/pandas-dev/pandas/issues/17178))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Length 1 levels are no longer special-cased. They behave exactly as if you
    had length 2+ levels, so a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") is always returned from all of the `MultiIndex` constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]  ### UTC localization with Series'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") did not localize datetime `Series` data when `utc=True`
    was passed. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") will correctly localize `Series` with a `datetime64[ns,
    UTC]` dtype to be consistent with how list-like and `Index` data are handled.
    ([GH 6415](https://github.com/pandas-dev/pandas/issues/6415)).
  prefs: []
  type: TYPE_NORMAL
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, DataFrames with datetime columns that were parsed by [`read_sql_table()`](../reference/api/pandas.read_sql_table.html#pandas.read_sql_table
    "pandas.read_sql_table") and [`read_sql_query()`](../reference/api/pandas.read_sql_query.html#pandas.read_sql_query
    "pandas.read_sql_query") will also be localized to UTC only if the original SQL
    columns were timezone aware datetime columns.  ### Consistency of range functions'
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous versions, there were some inconsistencies between the various range
    functions: [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range"), [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"), and [`interval_range()`](../reference/api/pandas.interval_range.html#pandas.interval_range
    "pandas.interval_range"). ([GH 17471](https://github.com/pandas-dev/pandas/issues/17471)).'
  prefs: []
  type: TYPE_NORMAL
- en: One of the inconsistent behaviors occurred when the `start`, `end` and `period`
    parameters were all specified, potentially leading to ambiguous ranges. When all
    three parameters were passed, `interval_range` ignored the `period` parameter,
    `period_range` ignored the `end` parameter, and the other range functions raised.
    To promote consistency among the range functions, and avoid potentially ambiguous
    ranges, `interval_range` and `period_range` will now raise when all three parameters
    are passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, the endpoint parameter `end` was not included in the intervals
    produced by `interval_range`. However, all other range functions include `end`
    in their output. To promote consistency among the range functions, `interval_range`
    will now include `end` as the right endpoint of the final interval, except if
    `freq` is specified in a way which skips `end`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]  ### No automatic Matplotlib converters'
  prefs: []
  type: TYPE_NORMAL
- en: 'pandas no longer registers our `date`, `time`, `datetime`, `datetime64`, and
    `Period` converters with matplotlib when pandas is imported. Matplotlib plot methods
    (`plt.plot`, `ax.plot`, …), will not nicely format the x-axis for `DatetimeIndex`
    or `PeriodIndex` values. You must explicitly register these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas built-in `Series.plot` and `DataFrame.plot` *will* register these converters
    on first-use ([GH 17710](https://github.com/pandas-dev/pandas/issues/17710)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This change has been temporarily reverted in pandas 0.21.1, for more details
    see [here](v0.21.1.html#whatsnew-0211-converters).  ### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: The Categorical constructor no longer accepts a scalar for the `categories`
    keyword. ([GH 16022](https://github.com/pandas-dev/pandas/issues/16022))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a non-existent attribute on a closed `HDFStore` will now raise an
    `AttributeError` rather than a `ClosedFileError` ([GH 16301](https://github.com/pandas-dev/pandas/issues/16301))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now issues a `UserWarning` if the `names` parameter contains duplicates ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now treats `''null''` and `''n/a''` strings as missing values by default ([GH
    16471](https://github.com/pandas-dev/pandas/issues/16471), [GH 16078](https://github.com/pandas-dev/pandas/issues/16078))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.HDFStore`’s string representation is now faster and less detailed.
    For the previous behavior, use `pandas.HDFStore.info()`. ([GH 16503](https://github.com/pandas-dev/pandas/issues/16503)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression defaults in HDF stores now follow pytables standards. Default is
    no compression and if `complib` is missing and `complevel` > 0 `zlib` is used
    ([GH 15943](https://github.com/pandas-dev/pandas/issues/15943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.get_indexer_non_unique()` now returns a ndarray indexer rather than
    an `Index`; this is consistent with `Index.get_indexer()` ([GH 16819](https://github.com/pandas-dev/pandas/issues/16819))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the `@slow` decorator from `pandas._testing`, which caused issues for
    some downstream packages’ test suites. Use `@pytest.mark.slow` instead, which
    achieves the same thing ([GH 16850](https://github.com/pandas-dev/pandas/issues/16850))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved definition of `MergeError` to the `pandas.errors` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signature of [`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") has been changed from `set_axis(axis, labels)` to
    `set_axis(labels, axis=0)`, for consistency with the rest of the API. The old
    signature is deprecated and will show a `FutureWarning` ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") and [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") will now raise a `TypeError` when used with `object` dtypes,
    instead of a `ValueError` ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    is now immutable, and will now raise an `AttributeError` when a user tries to
    assign a new value to the `ordinal` or `freq` attributes ([GH 17116](https://github.com/pandas-dev/pandas/issues/17116)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") when passed a tz-aware `origin=` kwarg will now raise a
    more informative `ValueError` rather than a `TypeError` ([GH 16842](https://github.com/pandas-dev/pandas/issues/16842))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now raises a `ValueError` when format includes `%W` or `%U`
    without also including day of the week and calendar year ([GH 16774](https://github.com/pandas-dev/pandas/issues/16774))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renamed non-functional `index` to `index_col` in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") to improve API consistency ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") caused boolean labels `False` and `True` to be treated
    as labels 0 and 1 respectively when dropping indices from a numeric index. This
    will now raise a ValueError ([GH 16877](https://github.com/pandas-dev/pandas/issues/16877))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restricted DateOffset keyword arguments. Previously, `DateOffset` subclasses
    allowed arbitrary keyword arguments which could lead to unexpected behavior. Now,
    only valid arguments will be accepted. ([GH 17176](https://github.com/pandas-dev/pandas/issues/17176)).  ###
    Dependencies have increased minimum versions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have updated our minimum supported versions of dependencies ([GH 15206](https://github.com/pandas-dev/pandas/issues/15206),
    [GH 15543](https://github.com/pandas-dev/pandas/issues/15543), [GH 15214](https://github.com/pandas-dev/pandas/issues/15214)).
    If installed, we now require:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum Version | Required |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Numpy | 1.9.0 | X |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Matplotlib | 1.4.3 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Scipy | 0.14.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Bottleneck | 1.0.0 |  |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Additionally, support has been dropped for Python 3.4 ([GH 15251](https://github.com/pandas-dev/pandas/issues/15251)).
  prefs: []
  type: TYPE_NORMAL
- en: '### Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The changes described here have been partially reverted. See the [v0.22.0 Whatsnew](v0.22.0.html#whatsnew-0220)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of `sum` and `prod` on all-NaN Series/DataFrames no longer depends
    on whether [bottleneck](https://bottleneck.readthedocs.io) is installed, and return
    value of `sum` and `prod` on an empty Series has changed ([GH 9422](https://github.com/pandas-dev/pandas/issues/9422),
    [GH 15507](https://github.com/pandas-dev/pandas/issues/15507)).
  prefs: []
  type: TYPE_NORMAL
- en: Calling `sum` or `prod` on an empty or all-`NaN` `Series`, or columns of a `DataFrame`,
    will result in `NaN`. See the [docs](../user_guide/missing_data.html#missing-data-calculations).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITHOUT `bottleneck` installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously WITH `bottleneck`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior, without regard to the bottleneck installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this also changes the sum of an empty `Series`. Previously this always
    returned 0 regardless of a `bottleneck` installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'but for consistency with the all-NaN case, this was changed to return 0 as
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '### Indexing with a list with missing labels is deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, selecting with a list of labels, where one or more labels were missing
    would always succeed, returning `NaN` for missing labels. This will now show a
    `FutureWarning`. In the future this will raise a `KeyError` ([GH 15747](https://github.com/pandas-dev/pandas/issues/15747)).
    This warning will trigger on a `DataFrame` or a `Series` for using `.loc[]` or
    `[[]]` when passing a list-of-labels with at least 1 missing label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: The idiomatic way to achieve selecting potentially not-found elements is via
    `.reindex()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Selection with all keys found is unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '### NA naming changes'
  prefs: []
  type: TYPE_NORMAL
- en: In order to promote more consistency among the pandas API, we have added additional
    top-level functions [`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna")
    and [`notna()`](../reference/api/pandas.notna.html#pandas.notna "pandas.notna")
    that are aliases for [`isnull()`](../reference/api/pandas.isnull.html#pandas.isnull
    "pandas.isnull") and [`notnull()`](../reference/api/pandas.notnull.html#pandas.notnull
    "pandas.notnull"). The naming scheme is now more consistent with methods like
    `.dropna()` and `.fillna()`. Furthermore in all cases where `.isnull()` and `.notnull()`
    methods are defined, these have additional methods named `.isna()` and `.notna()`,
    these are included for classes `Categorical`, `Index`, `Series`, and `DataFrame`.
    ([GH 15001](https://github.com/pandas-dev/pandas/issues/15001)).
  prefs: []
  type: TYPE_NORMAL
- en: The configuration option `pd.options.mode.use_inf_as_null` is deprecated, and
    `pd.options.mode.use_inf_as_na` is added as a replacement.
  prefs: []
  type: TYPE_NORMAL
- en: '### Iteration of Series/Index will now return Python scalars'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, when using certain iteration methods for a `Series` with dtype `int`
    or `float`, you would receive a `numpy` scalar, e.g. a `np.int64`, rather than
    a Python `int`. Issue ([GH 10904](https://github.com/pandas-dev/pandas/issues/10904))
    corrected this for `Series.tolist()` and `list(Series)`. This change makes all
    iteration methods consistent, in particular, for `__iter__()` and `.map()`; note
    that this only affects int/float dtypes. ([GH 13236](https://github.com/pandas-dev/pandas/issues/13236),
    [GH 13258](https://github.com/pandas-dev/pandas/issues/13258), [GH 14216](https://github.com/pandas-dev/pandas/issues/14216)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore this will now correctly box the results of iteration for [`DataFrame.to_dict()`](../reference/api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict") as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '### Indexing with a Boolean Index'
  prefs: []
  type: TYPE_NORMAL
- en: Previously when passing a boolean `Index` to `.loc`, if the index of the `Series/DataFrame`
    had `boolean` labels, you would get a label based selection, potentially duplicating
    result labels, rather than a boolean indexing selection (where `True` selects
    elements), this was inconsistent how a boolean numpy array indexed. The new behavior
    is to act like a boolean numpy array indexer. ([GH 17738](https://github.com/pandas-dev/pandas/issues/17738))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, previously if you had an index that was non-numeric (e.g. strings),
    then a boolean Index would raise a `KeyError`. This will now be treated as a boolean
    indexer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Current behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '### `PeriodIndex` resampling'
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of pandas, resampling a `Series`/`DataFrame` indexed by
    a `PeriodIndex` returned a `DatetimeIndex` in some cases ([GH 12884](https://github.com/pandas-dev/pandas/issues/12884)).
    Resampling to a multiplied frequency now returns a `PeriodIndex` ([GH 15944](https://github.com/pandas-dev/pandas/issues/15944)).
    As a minor enhancement, resampling a `PeriodIndex` can now handle `NaT` values
    ([GH 13224](https://github.com/pandas-dev/pandas/issues/13224))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Upsampling and calling `.ohlc()` previously returned a `Series`, basically identical
    to calling `.asfreq()`. OHLC upsampling now returns a DataFrame with columns `open`,
    `high`, `low` and `close` ([GH 13083](https://github.com/pandas-dev/pandas/issues/13083)).
    This is consistent with downsampling and `DatetimeIndex` behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '### Improved error handling during item assignment in pd.eval'
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval") will
    now raise a `ValueError` when item assignment malfunctions, or inplace operations
    are specified, but there is no item assignment in the expression ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Previously, if you attempted the following expression, you would get a not
    very helpful error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very long way of saying numpy arrays don’t support string-item indexing.
    With this change, the error message is now this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'It also used to be possible to evaluate expressions inplace, even if there
    was no item assignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this input does not make much sense because the output is not being
    assigned to the target. Now, a `ValueError` will be raised when such an input
    is passed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '### Dtype conversions'
  prefs: []
  type: TYPE_NORMAL
- en: Previously assignments, `.where()` and `.fillna()` with a `bool` assignment,
    would coerce to same the type (e.g. int / float), or raise for datetimelikes.
    These will now preserve the bools with `object` dtypes. ([GH 16821](https://github.com/pandas-dev/pandas/issues/16821)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Previously, as assignment to a datetimelike with a non-datetimelike would coerce
    the non-datetime-like item being assigned ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: These now coerce to `object` dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Inconsistent behavior in `.where()` with datetimelikes which would raise rather
    than coerce to `object` ([GH 16402](https://github.com/pandas-dev/pandas/issues/16402))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### MultiIndex constructor with a single level'
  prefs: []
  type: TYPE_NORMAL
- en: The `MultiIndex` constructors no longer squeezes a MultiIndex with all length-one
    levels down to a regular `Index`. This affects all the `MultiIndex` constructors.
    ([GH 17178](https://github.com/pandas-dev/pandas/issues/17178))
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Length 1 levels are no longer special-cased. They behave exactly as if you
    had length 2+ levels, so a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") is always returned from all of the `MultiIndex` constructors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '### UTC localization with Series'
  prefs: []
  type: TYPE_NORMAL
- en: Previously, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") did not localize datetime `Series` data when `utc=True`
    was passed. Now, [`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") will correctly localize `Series` with a `datetime64[ns,
    UTC]` dtype to be consistent with how list-like and `Index` data are handled.
    ([GH 6415](https://github.com/pandas-dev/pandas/issues/6415)).
  prefs: []
  type: TYPE_NORMAL
- en: Previous behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: New behavior
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, DataFrames with datetime columns that were parsed by [`read_sql_table()`](../reference/api/pandas.read_sql_table.html#pandas.read_sql_table
    "pandas.read_sql_table") and [`read_sql_query()`](../reference/api/pandas.read_sql_query.html#pandas.read_sql_query
    "pandas.read_sql_query") will also be localized to UTC only if the original SQL
    columns were timezone aware datetime columns.
  prefs: []
  type: TYPE_NORMAL
- en: '### Consistency of range functions'
  prefs: []
  type: TYPE_NORMAL
- en: 'In previous versions, there were some inconsistencies between the various range
    functions: [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), [`period_range()`](../reference/api/pandas.period_range.html#pandas.period_range
    "pandas.period_range"), [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"), and [`interval_range()`](../reference/api/pandas.interval_range.html#pandas.interval_range
    "pandas.interval_range"). ([GH 17471](https://github.com/pandas-dev/pandas/issues/17471)).'
  prefs: []
  type: TYPE_NORMAL
- en: One of the inconsistent behaviors occurred when the `start`, `end` and `period`
    parameters were all specified, potentially leading to ambiguous ranges. When all
    three parameters were passed, `interval_range` ignored the `period` parameter,
    `period_range` ignored the `end` parameter, and the other range functions raised.
    To promote consistency among the range functions, and avoid potentially ambiguous
    ranges, `interval_range` and `period_range` will now raise when all three parameters
    are passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, the endpoint parameter `end` was not included in the intervals
    produced by `interval_range`. However, all other range functions include `end`
    in their output. To promote consistency among the range functions, `interval_range`
    will now include `end` as the right endpoint of the final interval, except if
    `freq` is specified in a way which skips `end`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previous behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'New behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '### No automatic Matplotlib converters'
  prefs: []
  type: TYPE_NORMAL
- en: 'pandas no longer registers our `date`, `time`, `datetime`, `datetime64`, and
    `Period` converters with matplotlib when pandas is imported. Matplotlib plot methods
    (`plt.plot`, `ax.plot`, …), will not nicely format the x-axis for `DatetimeIndex`
    or `PeriodIndex` values. You must explicitly register these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas built-in `Series.plot` and `DataFrame.plot` *will* register these converters
    on first-use ([GH 17710](https://github.com/pandas-dev/pandas/issues/17710)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This change has been temporarily reverted in pandas 0.21.1, for more details
    see [here](v0.21.1.html#whatsnew-0211-converters).
  prefs: []
  type: TYPE_NORMAL
- en: '### Other API changes'
  prefs: []
  type: TYPE_NORMAL
- en: The Categorical constructor no longer accepts a scalar for the `categories`
    keyword. ([GH 16022](https://github.com/pandas-dev/pandas/issues/16022))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a non-existent attribute on a closed `HDFStore` will now raise an
    `AttributeError` rather than a `ClosedFileError` ([GH 16301](https://github.com/pandas-dev/pandas/issues/16301))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now issues a `UserWarning` if the `names` parameter contains duplicates ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    now treats `''null''` and `''n/a''` strings as missing values by default ([GH
    16471](https://github.com/pandas-dev/pandas/issues/16471), [GH 16078](https://github.com/pandas-dev/pandas/issues/16078))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas.HDFStore`’s string representation is now faster and less detailed.
    For the previous behavior, use `pandas.HDFStore.info()`. ([GH 16503](https://github.com/pandas-dev/pandas/issues/16503)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression defaults in HDF stores now follow pytables standards. Default is
    no compression and if `complib` is missing and `complevel` > 0 `zlib` is used
    ([GH 15943](https://github.com/pandas-dev/pandas/issues/15943))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index.get_indexer_non_unique()` now returns a ndarray indexer rather than
    an `Index`; this is consistent with `Index.get_indexer()` ([GH 16819](https://github.com/pandas-dev/pandas/issues/16819))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the `@slow` decorator from `pandas._testing`, which caused issues for
    some downstream packages’ test suites. Use `@pytest.mark.slow` instead, which
    achieves the same thing ([GH 16850](https://github.com/pandas-dev/pandas/issues/16850))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved definition of `MergeError` to the `pandas.errors` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The signature of [`Series.set_axis()`](../reference/api/pandas.Series.set_axis.html#pandas.Series.set_axis
    "pandas.Series.set_axis") and [`DataFrame.set_axis()`](../reference/api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis") has been changed from `set_axis(axis, labels)` to
    `set_axis(labels, axis=0)`, for consistency with the rest of the API. The old
    signature is deprecated and will show a `FutureWarning` ([GH 14636](https://github.com/pandas-dev/pandas/issues/14636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") and [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") will now raise a `TypeError` when used with `object` dtypes,
    instead of a `ValueError` ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    is now immutable, and will now raise an `AttributeError` when a user tries to
    assign a new value to the `ordinal` or `freq` attributes ([GH 17116](https://github.com/pandas-dev/pandas/issues/17116)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") when passed a tz-aware `origin=` kwarg will now raise a
    more informative `ValueError` rather than a `TypeError` ([GH 16842](https://github.com/pandas-dev/pandas/issues/16842))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") now raises a `ValueError` when format includes `%W` or `%U`
    without also including day of the week and calendar year ([GH 16774](https://github.com/pandas-dev/pandas/issues/16774))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renamed non-functional `index` to `index_col` in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") to improve API consistency ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.drop()`](../reference/api/pandas.DataFrame.drop.html#pandas.DataFrame.drop
    "pandas.DataFrame.drop") caused boolean labels `False` and `True` to be treated
    as labels 0 and 1 respectively when dropping indices from a numeric index. This
    will now raise a ValueError ([GH 16877](https://github.com/pandas-dev/pandas/issues/16877))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricted DateOffset keyword arguments. Previously, `DateOffset` subclasses
    allowed arbitrary keyword arguments which could lead to unexpected behavior. Now,
    only valid arguments will be accepted. ([GH 17176](https://github.com/pandas-dev/pandas/issues/17176)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Deprecations'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.from_csv()` and `Series.from_csv()` have been deprecated in favor
    of [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    ([GH 4191](https://github.com/pandas-dev/pandas/issues/4191))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated `sheetname` in favor of `sheet_name` for consistency
    with `.to_excel()` ([GH 10559](https://github.com/pandas-dev/pandas/issues/10559)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has deprecated `parse_cols` in favor of `usecols` for consistency
    with [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    ([GH 4988](https://github.com/pandas-dev/pandas/issues/4988))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv "pandas.read_csv")
    has deprecated the `tupleize_cols` argument. Column tuples will always be converted
    to a `MultiIndex` ([GH 17060](https://github.com/pandas-dev/pandas/issues/17060))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") has deprecated the `tupleize_cols` argument. MultiIndex
    columns will be always written as rows in the CSV file ([GH 17060](https://github.com/pandas-dev/pandas/issues/17060))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `convert` parameter has been deprecated in the `.take()` method, as it was
    not being respected ([GH 16948](https://github.com/pandas-dev/pandas/issues/16948))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.options.html.border` has been deprecated in favor of `pd.options.display.html.border`
    ([GH 15793](https://github.com/pandas-dev/pandas/issues/15793)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SeriesGroupBy.nth()` has deprecated `True` in favor of `''all''` for its kwarg
    `dropna` ([GH 11038](https://github.com/pandas-dev/pandas/issues/11038)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.as_blocks()` is deprecated, as this is exposing the internal implementation
    ([GH 17302](https://github.com/pandas-dev/pandas/issues/17302))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.TimeGrouper` is deprecated in favor of [`pandas.Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper") ([GH 16747](https://github.com/pandas-dev/pandas/issues/16747))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cdate_range` has been deprecated in favor of [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), which has gained `weekmask` and `holidays` parameters for
    building custom frequency date ranges. See the [documentation](../user_guide/timeseries.html#timeseries-custom-freq-ranges)
    for more details ([GH 17596](https://github.com/pandas-dev/pandas/issues/17596))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: passing `categories` or `ordered` kwargs to [`Series.astype()`](../reference/api/pandas.Series.astype.html#pandas.Series.astype
    "pandas.Series.astype") is deprecated, in favor of passing a [CategoricalDtype](#whatsnew-0210-enhancements-categorical-dtype)
    ([GH 17636](https://github.com/pandas-dev/pandas/issues/17636))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.get_value` and `.set_value` on `Series`, `DataFrame`, `Panel`, `SparseSeries`,
    and `SparseDataFrame` are deprecated in favor of using `.iat[]` or `.at[]` accessors
    ([GH 15269](https://github.com/pandas-dev/pandas/issues/15269))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing a non-existent column in `.to_excel(..., columns=)` is deprecated and
    will raise a `KeyError` in the future ([GH 17295](https://github.com/pandas-dev/pandas/issues/17295))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raise_on_error` parameter to [`Series.where()`](../reference/api/pandas.Series.where.html#pandas.Series.where
    "pandas.Series.where"), [`Series.mask()`](../reference/api/pandas.Series.mask.html#pandas.Series.mask
    "pandas.Series.mask"), [`DataFrame.where()`](../reference/api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where"), [`DataFrame.mask()`](../reference/api/pandas.DataFrame.mask.html#pandas.DataFrame.mask
    "pandas.DataFrame.mask") is deprecated, in favor of `errors=` ([GH 14968](https://github.com/pandas-dev/pandas/issues/14968))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using [`DataFrame.rename_axis()`](../reference/api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis") and [`Series.rename_axis()`](../reference/api/pandas.Series.rename_axis.html#pandas.Series.rename_axis
    "pandas.Series.rename_axis") to alter index or column *labels* is now deprecated
    in favor of using `.rename`. `rename_axis` may still be used to alter the name
    of the index or columns ([GH 17833](https://github.com/pandas-dev/pandas/issues/17833)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reindex_axis()` has been deprecated in favor of [`reindex()`](../reference/api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex"). See [here](#whatsnew-0210-enhancements-rename-reindex-axis)
    for more ([GH 17833](https://github.com/pandas-dev/pandas/issues/17833)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Series.select and DataFrame.select'
  prefs: []
  type: TYPE_NORMAL
- en: The `Series.select()` and `DataFrame.select()` methods are deprecated in favor
    of using `df.loc[labels.map(crit)]` ([GH 12401](https://github.com/pandas-dev/pandas/issues/12401))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]  ### Series.argmax and Series.argmin'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") and [`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") have been deprecated in favor of [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") and [`Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"), respectively ([GH 16830](https://github.com/pandas-dev/pandas/issues/16830)).
  prefs: []
  type: TYPE_NORMAL
- en: For compatibility with NumPy arrays, `pd.Series` implements `argmax` and `argmin`.
    Since pandas 0.13.0, `argmax` has been an alias for [`pandas.Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax"), and `argmin` has been an alias for [`pandas.Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"). They return the *label* of the maximum or minimum, rather
    than the *position*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve deprecated the current behavior of `Series.argmax` and `Series.argmin`.
    Using either of these will emit a `FutureWarning`. Use [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") if you want the label of the maximum. Use `Series.values.argmax()`
    if you want the position of the maximum. Likewise for the minimum. In a future
    release `Series.argmax` and `Series.argmin` will return the position of the maximum
    or minimum.  ### Series.select and DataFrame.select'
  prefs: []
  type: TYPE_NORMAL
- en: The `Series.select()` and `DataFrame.select()` methods are deprecated in favor
    of using `df.loc[labels.map(crit)]` ([GH 12401](https://github.com/pandas-dev/pandas/issues/12401))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '### Series.argmax and Series.argmin'
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax") and [`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin") have been deprecated in favor of [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") and [`Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"), respectively ([GH 16830](https://github.com/pandas-dev/pandas/issues/16830)).
  prefs: []
  type: TYPE_NORMAL
- en: For compatibility with NumPy arrays, `pd.Series` implements `argmax` and `argmin`.
    Since pandas 0.13.0, `argmax` has been an alias for [`pandas.Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax"), and `argmin` has been an alias for [`pandas.Series.idxmin()`](../reference/api/pandas.Series.idxmin.html#pandas.Series.idxmin
    "pandas.Series.idxmin"). They return the *label* of the maximum or minimum, rather
    than the *position*.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve deprecated the current behavior of `Series.argmax` and `Series.argmin`.
    Using either of these will emit a `FutureWarning`. Use [`Series.idxmax()`](../reference/api/pandas.Series.idxmax.html#pandas.Series.idxmax
    "pandas.Series.idxmax") if you want the label of the maximum. Use `Series.values.argmax()`
    if you want the position of the maximum. Likewise for the minimum. In a future
    release `Series.argmax` and `Series.argmin` will return the position of the maximum
    or minimum.
  prefs: []
  type: TYPE_NORMAL
- en: '## Removal of prior version deprecations/changes'
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel") has dropped the `has_index_names` parameter ([GH 10967](https://github.com/pandas-dev/pandas/issues/10967))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.height` configuration has been dropped ([GH 3663](https://github.com/pandas-dev/pandas/issues/3663))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.line_width` configuration has been dropped ([GH 2881](https://github.com/pandas-dev/pandas/issues/2881))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pd.options.display.mpl_style` configuration has been dropped ([GH 12190](https://github.com/pandas-dev/pandas/issues/12190))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Index` has dropped the `.sym_diff()` method in favor of `.symmetric_difference()`
    ([GH 12591](https://github.com/pandas-dev/pandas/issues/12591))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Categorical` has dropped the `.order()` and `.sort()` methods in favor of
    `.sort_values()` ([GH 12882](https://github.com/pandas-dev/pandas/issues/12882))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval") and
    [`DataFrame.eval()`](../reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval") have changed the default of `inplace` from `None` to
    `False` ([GH 11149](https://github.com/pandas-dev/pandas/issues/11149))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function `get_offset_name` has been dropped in favor of the `.freqstr` attribute
    for an offset ([GH 11834](https://github.com/pandas-dev/pandas/issues/11834))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas no longer tests for compatibility with hdf5-files created with pandas
    < 0.11 ([GH 17404](https://github.com/pandas-dev/pandas/issues/17404)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Performance improvements'
  prefs: []
  type: TYPE_NORMAL
- en: Improved performance of instantiating `SparseDataFrame` ([GH 16773](https://github.com/pandas-dev/pandas/issues/16773))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.dt`](../reference/api/pandas.Series.dt.html#pandas.Series.dt "pandas.Series.dt")
    no longer performs frequency inference, yielding a large speedup when accessing
    the attribute ([GH 17210](https://github.com/pandas-dev/pandas/issues/17210))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`set_categories()`](../reference/api/pandas.Series.cat.set_categories.html#pandas.Series.cat.set_categories
    "pandas.Series.cat.set_categories") by not materializing the values ([GH 17508](https://github.com/pandas-dev/pandas/issues/17508))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Timestamp.microsecond`](../reference/api/pandas.Timestamp.microsecond.html#pandas.Timestamp.microsecond
    "pandas.Timestamp.microsecond") no longer re-computes on attribute access ([GH
    17331](https://github.com/pandas-dev/pandas/issues/17331))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of the [`CategoricalIndex`](../reference/api/pandas.CategoricalIndex.html#pandas.CategoricalIndex
    "pandas.CategoricalIndex") for data that is already categorical dtype ([GH 17513](https://github.com/pandas-dev/pandas/issues/17513))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of `RangeIndex.min()` and `RangeIndex.max()` by using `RangeIndex`
    properties to perform the computations ([GH 17607](https://github.com/pandas-dev/pandas/issues/17607))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Documentation changes'
  prefs: []
  type: TYPE_NORMAL
- en: Several `NaT` method docstrings (e.g. `NaT.ctime()`) were incorrect ([GH 17327](https://github.com/pandas-dev/pandas/issues/17327))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The documentation has had references to versions < v0.17 removed and cleaned
    up ([GH 17442](https://github.com/pandas-dev/pandas/issues/17442), [GH 17442](https://github.com/pandas-dev/pandas/issues/17442),
    [GH 17404](https://github.com/pandas-dev/pandas/issues/17404) & [GH 17504](https://github.com/pandas-dev/pandas/issues/17504))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Bug fixes'
  prefs: []
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in assignment against datetime-like data with `int` may incorrectly convert
    to datetime-like ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the return type of `IntervalIndex.is_non_overlapping_monotonic` to be
    a Python `bool` for consistency with similar attributes/methods. Previously returned
    a `numpy.bool_`. ([GH 17237](https://github.com/pandas-dev/pandas/issues/17237))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex.is_non_overlapping_monotonic` when intervals are closed
    on both sides and overlap at a point ([GH 16560](https://github.com/pandas-dev/pandas/issues/16560))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") returns frame when `inplace=True` and `value` is dict
    ([GH 16156](https://github.com/pandas-dev/pandas/issues/16156))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.weekday_name` returning a UTC-based weekday name when localized
    to a timezone ([GH 17354](https://github.com/pandas-dev/pandas/issues/17354))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.replace` when replacing `tzinfo` around DST changes ([GH 15683](https://github.com/pandas-dev/pandas/issues/15683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timedelta` construction and arithmetic that would not propagate the
    `Overflow` exception ([GH 17367](https://github.com/pandas-dev/pandas/issues/17367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") converting to object dtype when passed extension type
    classes (`DatetimeTZDtype`, `CategoricalDtype`) rather than instances. Now a `TypeError`
    is raised when a class is passed ([GH 17780](https://github.com/pandas-dev/pandas/issues/17780)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") in which elements were not always being coerced to numeric
    when `errors='coerce'` ([GH 17007](https://github.com/pandas-dev/pandas/issues/17007),
    [GH 17125](https://github.com/pandas-dev/pandas/issues/17125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` and `Series` constructors where `range` objects are converted
    to `int32` dtype on Windows instead of `int64` ([GH 16804](https://github.com/pandas-dev/pandas/issues/16804))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When called with a null slice (e.g. `df.iloc[:]`), the `.iloc` and `.loc` indexers
    return a shallow copy of the original object. Previously they returned the original
    object. ([GH 13873](https://github.com/pandas-dev/pandas/issues/13873)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When called on an unsorted `MultiIndex`, the `loc` indexer now will raise `UnsortedIndexError`
    only if proper slicing is used on non-sorted levels ([GH 16734](https://github.com/pandas-dev/pandas/issues/16734)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression in 0.20.3 when indexing with a string on a `TimedeltaIndex`
    ([GH 16896](https://github.com/pandas-dev/pandas/issues/16896)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `TimedeltaIndex.get_loc()` handling of `np.timedelta64` inputs ([GH 16909](https://github.com/pandas-dev/pandas/issues/16909)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `MultiIndex.sort_index()` ordering when `ascending` argument is a list,
    but not all levels are specified, or are in a different order ([GH 16934](https://github.com/pandas-dev/pandas/issues/16934)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug where indexing with `np.inf` caused an `OverflowError` to be raised
    ([GH 16957](https://github.com/pandas-dev/pandas/issues/16957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in reindexing on an empty `CategoricalIndex` ([GH 16770](https://github.com/pandas-dev/pandas/issues/16770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes `DataFrame.loc` for setting with alignment and tz-aware `DatetimeIndex`
    ([GH 16889](https://github.com/pandas-dev/pandas/issues/16889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoids `IndexError` when passing an Index or Series to `.iloc` with older numpy
    ([GH 17193](https://github.com/pandas-dev/pandas/issues/17193))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow unicode empty strings as placeholders in multilevel columns in Python
    2 ([GH 17099](https://github.com/pandas-dev/pandas/issues/17099))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.iloc` when used with inplace addition or assignment and an int indexer
    on a `MultiIndex` causing the wrong indexes to be read from and written to ([GH
    17148](https://github.com/pandas-dev/pandas/issues/17148))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.isin()` in which checking membership in empty `Series` objects raised
    an error ([GH 16991](https://github.com/pandas-dev/pandas/issues/16991))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `CategoricalIndex` reindexing in which specified indices containing duplicates
    were not being respected ([GH 17323](https://github.com/pandas-dev/pandas/issues/17323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in intersection of `RangeIndex` with negative step ([GH 17296](https://github.com/pandas-dev/pandas/issues/17296))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex` where performing a scalar lookup fails for included right
    endpoints of non-overlapping monotonic decreasing indexes ([GH 16417](https://github.com/pandas-dev/pandas/issues/16417),
    [GH 17271](https://github.com/pandas-dev/pandas/issues/17271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.first_valid_index()`](../reference/api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index") and [`DataFrame.last_valid_index()`](../reference/api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index") when no valid entry ([GH 17400](https://github.com/pandas-dev/pandas/issues/17400))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") when called with a callable, incorrectly alters the name
    of the `Series`, rather than the name of the `Index`. ([GH 17407](https://github.com/pandas-dev/pandas/issues/17407))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `String.str_get()` raises `IndexError` instead of inserting NaNs when
    using a negative index. ([GH 17704](https://github.com/pandas-dev/pandas/issues/17704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") when reading a timezone aware index from `fixed` format HDFStore
    ([GH 17618](https://github.com/pandas-dev/pandas/issues/17618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which columns were not being thoroughly de-duplicated ([GH
    17060](https://github.com/pandas-dev/pandas/issues/17060))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which specified column names were not being thoroughly de-duplicated
    ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which non integer values for the header argument generated
    an unhelpful / unrelated error message ([GH 16338](https://github.com/pandas-dev/pandas/issues/16338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management issues in exception handling, under
    certain conditions, would cause the interpreter to segfault ([GH 14696](https://github.com/pandas-dev/pandas/issues/14696),
    [GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with `low_memory=False` in which a CSV with at
    least one column > 2GB in size would incorrectly raise a `MemoryError` ([GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with a single-element list `header` would return
    a `DataFrame` of all NaN values ([GH 7757](https://github.com/pandas-dev/pandas/issues/7757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") defaulting to ‘ascii’ encoding in Python 3, instead
    of ‘utf-8’ ([GH 17097](https://github.com/pandas-dev/pandas/issues/17097))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where value labels could not be read when using an iterator
    ([GH 16923](https://github.com/pandas-dev/pandas/issues/16923))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where the index was not set ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") where import check fails when run in multiple threads ([GH
    16928](https://github.com/pandas-dev/pandas/issues/16928))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") where automatic delimiter detection caused a `TypeError` to
    be thrown when a bad line was encountered rather than the correct error message
    ([GH 13374](https://github.com/pandas-dev/pandas/issues/13374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `notebook=True` where DataFrames with named indices
    or non-MultiIndex indices had undesired horizontal or vertical alignment for column
    or row labels, respectively ([GH 16792](https://github.com/pandas-dev/pandas/issues/16792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") in which there was no validation of the `justify`
    parameter ([GH 17527](https://github.com/pandas-dev/pandas/issues/17527))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.select()`](../reference/api/pandas.HDFStore.select.html#pandas.HDFStore.select
    "pandas.HDFStore.select") when reading a contiguous mixed-data table featuring
    VLArray ([GH 17021](https://github.com/pandas-dev/pandas/issues/17021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `to_json()` where several conditions (including objects with unprintable
    symbols, objects with deep recursion, overlong labels) caused segfaults instead
    of raising the appropriate exception ([GH 14256](https://github.com/pandas-dev/pandas/issues/14256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in plotting methods using `secondary_y` and `fontsize` not setting secondary
    axis font size ([GH 12565](https://github.com/pandas-dev/pandas/issues/12565))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when plotting `timedelta` and `datetime` dtypes on y-axis ([GH 16953](https://github.com/pandas-dev/pandas/issues/16953))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line plots no longer assume monotonic x data when calculating xlims, they show
    the entire lines now even for unsorted x data. ([GH 11310](https://github.com/pandas-dev/pandas/issues/11310),
    [GH 11471](https://github.com/pandas-dev/pandas/issues/11471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With matplotlib 2.0.0 and above, calculation of x limits for line plots is left
    to matplotlib, so that its new default settings are applied. ([GH 15495](https://github.com/pandas-dev/pandas/issues/15495))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.plot.bar` or `DataFrame.plot.bar` with `y` not respecting user-passed
    `color` ([GH 16822](https://github.com/pandas-dev/pandas/issues/16822))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug causing `plotting.parallel_coordinates` to reset the random seed when using
    random colors ([GH 17525](https://github.com/pandas-dev/pandas/issues/17525))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `DataFrame.resample(...).size()` where an empty `DataFrame` did not return
    a `Series` ([GH 14962](https://github.com/pandas-dev/pandas/issues/14962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`infer_freq()`](../reference/api/pandas.infer_freq.html#pandas.infer_freq
    "pandas.infer_freq") causing indices with 2-day gaps during the working week to
    be wrongly inferred as business daily ([GH 16624](https://github.com/pandas-dev/pandas/issues/16624))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).quantile()` which incorrectly used different defaults
    than [`Series.quantile()`](../reference/api/pandas.Series.quantile.html#pandas.Series.quantile
    "pandas.Series.quantile") and [`DataFrame.quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile") ([GH 9413](https://github.com/pandas-dev/pandas/issues/9413),
    [GH 16211](https://github.com/pandas-dev/pandas/issues/16211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.transform()` that would coerce boolean dtypes back to float
    ([GH 16875](https://github.com/pandas-dev/pandas/issues/16875))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.resample(...).apply()` where an empty `Series` modified the source
    index and did not return the name of a `Series` ([GH 14313](https://github.com/pandas-dev/pandas/issues/14313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).apply(...)` with a `DataFrame` with a `DatetimeIndex`,
    a `window` of a timedelta-convertible and `min_periods >= 1` ([GH 15305](https://github.com/pandas-dev/pandas/issues/15305))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where index and column keys were not recognized correctly
    when the number of keys equaled the number of elements on the groupby axis ([GH
    16859](https://github.com/pandas-dev/pandas/issues/16859))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.nunique()` with `TimeGrouper` which cannot handle `NaT` correctly
    ([GH 17575](https://github.com/pandas-dev/pandas/issues/17575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where a single level selection from a `MultiIndex`
    unexpectedly sorts ([GH 17537](https://github.com/pandas-dev/pandas/issues/17537))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where spurious warning is raised when `Grouper` object
    is used to override ambiguous column name ([GH 17383](https://github.com/pandas-dev/pandas/issues/17383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `TimeGrouper` differs when passes as a list and as a scalar ([GH 17530](https://github.com/pandas-dev/pandas/issues/17530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` raises `AttributeError` when a dictionary is passed in
    as data ([GH 16905](https://github.com/pandas-dev/pandas/issues/16905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame.fillna()` not filling all NaNs when frame was instantiated
    from SciPy sparse matrix ([GH 16112](https://github.com/pandas-dev/pandas/issues/16112))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.unstack()` and `SparseDataFrame.stack()` ([GH 16614](https://github.com/pandas-dev/pandas/issues/16614),
    [GH 15045](https://github.com/pandas-dev/pandas/issues/15045))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `make_sparse()` treating two numeric/boolean data, which have same bits,
    as same when array `dtype` is `object` ([GH 17574](https://github.com/pandas-dev/pandas/issues/17574))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.all()` and `SparseArray.any()` are now implemented to handle `SparseArray`,
    these were used but not implemented ([GH 17570](https://github.com/pandas-dev/pandas/issues/17570))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Joining/Merging with a non unique `PeriodIndex` raised a `TypeError` ([GH 16871](https://github.com/pandas-dev/pandas/issues/16871))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where non-aligned series of integers were casted to float ([GH
    17005](https://github.com/pandas-dev/pandas/issues/17005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in merging with categorical dtypes with datetimelikes incorrectly raised
    a `TypeError` ([GH 16900](https://github.com/pandas-dev/pandas/issues/16900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when using `isin()` on a large object series and large comparison array
    ([GH 16012](https://github.com/pandas-dev/pandas/issues/16012))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression from 0.20, [`Series.aggregate()`](../reference/api/pandas.Series.aggregate.html#pandas.Series.aggregate
    "pandas.Series.aggregate") and [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate") allow dictionaries as return values again ([GH 16741](https://github.com/pandas-dev/pandas/issues/16741))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes dtype of result with integer dtype input, from [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") when called with `margins=True` ([GH 17013](https://github.com/pandas-dev/pandas/issues/17013))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where passing two `Series` with the same name raised a `KeyError`
    ([GH 13279](https://github.com/pandas-dev/pandas/issues/13279))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin"), [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax"), and their counterparts on `DataFrame` and groupby objects
    work correctly with floating point data that contains infinite values ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    where checking a tuple of strings raised a `TypeError` ([GH 17108](https://github.com/pandas-dev/pandas/issues/17108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    where order of result index was unpredictable if it contained non-comparable elements
    ([GH 17344](https://github.com/pandas-dev/pandas/issues/17344))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression when sorting by multiple columns on a `datetime64` dtype `Series`
    with `NaT` values ([GH 16836](https://github.com/pandas-dev/pandas/issues/16836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") where the result’s columns did not preserve the categorical
    dtype of `columns` when `dropna` was `False` ([GH 17842](https://github.com/pandas-dev/pandas/issues/17842))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.drop_duplicates` where dropping with non-unique column names
    raised a `ValueError` ([GH 17836](https://github.com/pandas-dev/pandas/issues/17836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `unstack()` which, when called on a list of levels, would discard the
    `fillna` argument ([GH 13971](https://github.com/pandas-dev/pandas/issues/13971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the alignment of `range` objects and other list-likes with `DataFrame`
    leading to operations being performed row-wise instead of column-wise ([GH 17901](https://github.com/pandas-dev/pandas/issues/17901))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `.clip()` with `axis=1` and a list-like for `threshold` is passed; previously
    this raised `ValueError` ([GH 15390](https://github.com/pandas-dev/pandas/issues/15390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") and [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") now treat NA values for upper and lower arguments as
    `None` instead of raising `ValueError` ([GH 17276](https://github.com/pandas-dev/pandas/issues/17276)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") when called with a categorical ([GH 16639](https://github.com/pandas-dev/pandas/issues/16639))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the categorical constructor with empty values and categories causing
    the `.categories` to be an empty `Float64Index` rather than an empty `Index` with
    object dtype ([GH 17248](https://github.com/pandas-dev/pandas/issues/17248))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in categorical operations with [Series.cat](../user_guide/categorical.html#categorical-cat)
    not preserving the original Series’ name ([GH 17509](https://github.com/pandas-dev/pandas/issues/17509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") failing for categorical columns with boolean/int data
    types ([GH 17187](https://github.com/pandas-dev/pandas/issues/17187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in constructing a `Categorical`/`CategoricalDtype` when the specified `categories`
    are of categorical type ([GH 17884](https://github.com/pandas-dev/pandas/issues/17884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### PyPy'
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility with PyPy in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with `usecols=[<unsorted ints>]` and [`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json
    "pandas.read_json") ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split tests into cases for CPython and PyPy where needed, which highlights the
    fragility of index matching with `float('nan')`, `np.nan` and `NAT` ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix [`DataFrame.memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") to support PyPy. Objects on PyPy do not have
    a fixed size, so an approximation is used instead ([GH 17228](https://github.com/pandas-dev/pandas/issues/17228))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug where some inplace operators were not being wrapped and produced a copy
    when invoked ([GH 12962](https://github.com/pandas-dev/pandas/issues/12962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval")
    where the `inplace` parameter was being incorrectly handled ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in assignment against datetime-like data with `int` may incorrectly convert
    to datetime-like ([GH 14145](https://github.com/pandas-dev/pandas/issues/14145))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in assignment against `int64` data with `np.ndarray` with `float64` dtype
    may keep `int64` dtype ([GH 14001](https://github.com/pandas-dev/pandas/issues/14001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the return type of `IntervalIndex.is_non_overlapping_monotonic` to be
    a Python `bool` for consistency with similar attributes/methods. Previously returned
    a `numpy.bool_`. ([GH 17237](https://github.com/pandas-dev/pandas/issues/17237))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex.is_non_overlapping_monotonic` when intervals are closed
    on both sides and overlap at a point ([GH 16560](https://github.com/pandas-dev/pandas/issues/16560))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna") returns frame when `inplace=True` and `value` is dict
    ([GH 16156](https://github.com/pandas-dev/pandas/issues/16156))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.weekday_name` returning a UTC-based weekday name when localized
    to a timezone ([GH 17354](https://github.com/pandas-dev/pandas/issues/17354))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timestamp.replace` when replacing `tzinfo` around DST changes ([GH 15683](https://github.com/pandas-dev/pandas/issues/15683))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Timedelta` construction and arithmetic that would not propagate the
    `Overflow` exception ([GH 17367](https://github.com/pandas-dev/pandas/issues/17367))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`astype()`](../reference/api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype") converting to object dtype when passed extension type
    classes (`DatetimeTZDtype`, `CategoricalDtype`) rather than instances. Now a `TypeError`
    is raised when a class is passed ([GH 17780](https://github.com/pandas-dev/pandas/issues/17780)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`to_numeric()`](../reference/api/pandas.to_numeric.html#pandas.to_numeric
    "pandas.to_numeric") in which elements were not always being coerced to numeric
    when `errors='coerce'` ([GH 17007](https://github.com/pandas-dev/pandas/issues/17007),
    [GH 17125](https://github.com/pandas-dev/pandas/issues/17125))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame` and `Series` constructors where `range` objects are converted
    to `int32` dtype on Windows instead of `int64` ([GH 16804](https://github.com/pandas-dev/pandas/issues/16804))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When called with a null slice (e.g. `df.iloc[:]`), the `.iloc` and `.loc` indexers
    return a shallow copy of the original object. Previously they returned the original
    object. ([GH 13873](https://github.com/pandas-dev/pandas/issues/13873)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When called on an unsorted `MultiIndex`, the `loc` indexer now will raise `UnsortedIndexError`
    only if proper slicing is used on non-sorted levels ([GH 16734](https://github.com/pandas-dev/pandas/issues/16734)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression in 0.20.3 when indexing with a string on a `TimedeltaIndex`
    ([GH 16896](https://github.com/pandas-dev/pandas/issues/16896)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `TimedeltaIndex.get_loc()` handling of `np.timedelta64` inputs ([GH 16909](https://github.com/pandas-dev/pandas/issues/16909)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix `MultiIndex.sort_index()` ordering when `ascending` argument is a list,
    but not all levels are specified, or are in a different order ([GH 16934](https://github.com/pandas-dev/pandas/issues/16934)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes bug where indexing with `np.inf` caused an `OverflowError` to be raised
    ([GH 16957](https://github.com/pandas-dev/pandas/issues/16957))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in reindexing on an empty `CategoricalIndex` ([GH 16770](https://github.com/pandas-dev/pandas/issues/16770))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes `DataFrame.loc` for setting with alignment and tz-aware `DatetimeIndex`
    ([GH 16889](https://github.com/pandas-dev/pandas/issues/16889))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoids `IndexError` when passing an Index or Series to `.iloc` with older numpy
    ([GH 17193](https://github.com/pandas-dev/pandas/issues/17193))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow unicode empty strings as placeholders in multilevel columns in Python
    2 ([GH 17099](https://github.com/pandas-dev/pandas/issues/17099))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.iloc` when used with inplace addition or assignment and an int indexer
    on a `MultiIndex` causing the wrong indexes to be read from and written to ([GH
    17148](https://github.com/pandas-dev/pandas/issues/17148))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.isin()` in which checking membership in empty `Series` objects raised
    an error ([GH 16991](https://github.com/pandas-dev/pandas/issues/16991))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `CategoricalIndex` reindexing in which specified indices containing duplicates
    were not being respected ([GH 17323](https://github.com/pandas-dev/pandas/issues/17323))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in intersection of `RangeIndex` with negative step ([GH 17296](https://github.com/pandas-dev/pandas/issues/17296))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `IntervalIndex` where performing a scalar lookup fails for included right
    endpoints of non-overlapping monotonic decreasing indexes ([GH 16417](https://github.com/pandas-dev/pandas/issues/16417),
    [GH 17271](https://github.com/pandas-dev/pandas/issues/17271))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.first_valid_index()`](../reference/api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index") and [`DataFrame.last_valid_index()`](../reference/api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index") when no valid entry ([GH 17400](https://github.com/pandas-dev/pandas/issues/17400))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`Series.rename()`](../reference/api/pandas.Series.rename.html#pandas.Series.rename
    "pandas.Series.rename") when called with a callable, incorrectly alters the name
    of the `Series`, rather than the name of the `Index`. ([GH 17407](https://github.com/pandas-dev/pandas/issues/17407))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `String.str_get()` raises `IndexError` instead of inserting NaNs when
    using a negative index. ([GH 17704](https://github.com/pandas-dev/pandas/issues/17704))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") when reading a timezone aware index from `fixed` format HDFStore
    ([GH 17618](https://github.com/pandas-dev/pandas/issues/17618))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which columns were not being thoroughly de-duplicated ([GH
    17060](https://github.com/pandas-dev/pandas/issues/17060))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which specified column names were not being thoroughly de-duplicated
    ([GH 17095](https://github.com/pandas-dev/pandas/issues/17095))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which non integer values for the header argument generated
    an unhelpful / unrelated error message ([GH 16338](https://github.com/pandas-dev/pandas/issues/16338))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") in which memory management issues in exception handling, under
    certain conditions, would cause the interpreter to segfault ([GH 14696](https://github.com/pandas-dev/pandas/issues/14696),
    [GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with `low_memory=False` in which a CSV with at
    least one column > 2GB in size would incorrectly raise a `MemoryError` ([GH 16798](https://github.com/pandas-dev/pandas/issues/16798)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") when called with a single-element list `header` would return
    a `DataFrame` of all NaN values ([GH 7757](https://github.com/pandas-dev/pandas/issues/7757))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv") defaulting to ‘ascii’ encoding in Python 3, instead
    of ‘utf-8’ ([GH 17097](https://github.com/pandas-dev/pandas/issues/17097))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where value labels could not be read when using an iterator
    ([GH 16923](https://github.com/pandas-dev/pandas/issues/16923))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_stata()`](../reference/api/pandas.read_stata.html#pandas.read_stata
    "pandas.read_stata") where the index was not set ([GH 16342](https://github.com/pandas-dev/pandas/issues/16342))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") where import check fails when run in multiple threads ([GH
    16928](https://github.com/pandas-dev/pandas/issues/16928))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") where automatic delimiter detection caused a `TypeError` to
    be thrown when a bad line was encountered rather than the correct error message
    ([GH 13374](https://github.com/pandas-dev/pandas/issues/13374))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") with `notebook=True` where DataFrames with named indices
    or non-MultiIndex indices had undesired horizontal or vertical alignment for column
    or row labels, respectively ([GH 16792](https://github.com/pandas-dev/pandas/issues/16792))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.to_html()`](../reference/api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html") in which there was no validation of the `justify`
    parameter ([GH 17527](https://github.com/pandas-dev/pandas/issues/17527))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`HDFStore.select()`](../reference/api/pandas.HDFStore.select.html#pandas.HDFStore.select
    "pandas.HDFStore.select") when reading a contiguous mixed-data table featuring
    VLArray ([GH 17021](https://github.com/pandas-dev/pandas/issues/17021))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `to_json()` where several conditions (including objects with unprintable
    symbols, objects with deep recursion, overlong labels) caused segfaults instead
    of raising the appropriate exception ([GH 14256](https://github.com/pandas-dev/pandas/issues/14256))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in plotting methods using `secondary_y` and `fontsize` not setting secondary
    axis font size ([GH 12565](https://github.com/pandas-dev/pandas/issues/12565))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when plotting `timedelta` and `datetime` dtypes on y-axis ([GH 16953](https://github.com/pandas-dev/pandas/issues/16953))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line plots no longer assume monotonic x data when calculating xlims, they show
    the entire lines now even for unsorted x data. ([GH 11310](https://github.com/pandas-dev/pandas/issues/11310),
    [GH 11471](https://github.com/pandas-dev/pandas/issues/11471))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With matplotlib 2.0.0 and above, calculation of x limits for line plots is left
    to matplotlib, so that its new default settings are applied. ([GH 15495](https://github.com/pandas-dev/pandas/issues/15495))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.plot.bar` or `DataFrame.plot.bar` with `y` not respecting user-passed
    `color` ([GH 16822](https://github.com/pandas-dev/pandas/issues/16822))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug causing `plotting.parallel_coordinates` to reset the random seed when using
    random colors ([GH 17525](https://github.com/pandas-dev/pandas/issues/17525))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GroupBy/resample/rolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `DataFrame.resample(...).size()` where an empty `DataFrame` did not return
    a `Series` ([GH 14962](https://github.com/pandas-dev/pandas/issues/14962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`infer_freq()`](../reference/api/pandas.infer_freq.html#pandas.infer_freq
    "pandas.infer_freq") causing indices with 2-day gaps during the working week to
    be wrongly inferred as business daily ([GH 16624](https://github.com/pandas-dev/pandas/issues/16624))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).quantile()` which incorrectly used different defaults
    than [`Series.quantile()`](../reference/api/pandas.Series.quantile.html#pandas.Series.quantile
    "pandas.Series.quantile") and [`DataFrame.quantile()`](../reference/api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile") ([GH 9413](https://github.com/pandas-dev/pandas/issues/9413),
    [GH 16211](https://github.com/pandas-dev/pandas/issues/16211))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.transform()` that would coerce boolean dtypes back to float
    ([GH 16875](https://github.com/pandas-dev/pandas/issues/16875))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `Series.resample(...).apply()` where an empty `Series` modified the source
    index and did not return the name of a `Series` ([GH 14313](https://github.com/pandas-dev/pandas/issues/14313))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `.rolling(...).apply(...)` with a `DataFrame` with a `DatetimeIndex`,
    a `window` of a timedelta-convertible and `min_periods >= 1` ([GH 15305](https://github.com/pandas-dev/pandas/issues/15305))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where index and column keys were not recognized correctly
    when the number of keys equaled the number of elements on the groupby axis ([GH
    16859](https://github.com/pandas-dev/pandas/issues/16859))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `groupby.nunique()` with `TimeGrouper` which cannot handle `NaT` correctly
    ([GH 17575](https://github.com/pandas-dev/pandas/issues/17575))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where a single level selection from a `MultiIndex`
    unexpectedly sorts ([GH 17537](https://github.com/pandas-dev/pandas/issues/17537))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.groupby` where spurious warning is raised when `Grouper` object
    is used to override ambiguous column name ([GH 17383](https://github.com/pandas-dev/pandas/issues/17383))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `TimeGrouper` differs when passes as a list and as a scalar ([GH 17530](https://github.com/pandas-dev/pandas/issues/17530))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `SparseSeries` raises `AttributeError` when a dictionary is passed in
    as data ([GH 16905](https://github.com/pandas-dev/pandas/issues/16905))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseDataFrame.fillna()` not filling all NaNs when frame was instantiated
    from SciPy sparse matrix ([GH 16112](https://github.com/pandas-dev/pandas/issues/16112))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `SparseSeries.unstack()` and `SparseDataFrame.stack()` ([GH 16614](https://github.com/pandas-dev/pandas/issues/16614),
    [GH 15045](https://github.com/pandas-dev/pandas/issues/15045))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `make_sparse()` treating two numeric/boolean data, which have same bits,
    as same when array `dtype` is `object` ([GH 17574](https://github.com/pandas-dev/pandas/issues/17574))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseArray.all()` and `SparseArray.any()` are now implemented to handle `SparseArray`,
    these were used but not implemented ([GH 17570](https://github.com/pandas-dev/pandas/issues/17570))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reshaping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Joining/Merging with a non unique `PeriodIndex` raised a `TypeError` ([GH 16871](https://github.com/pandas-dev/pandas/issues/16871))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where non-aligned series of integers were casted to float ([GH
    17005](https://github.com/pandas-dev/pandas/issues/17005))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in merging with categorical dtypes with datetimelikes incorrectly raised
    a `TypeError` ([GH 16900](https://github.com/pandas-dev/pandas/issues/16900))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug when using `isin()` on a large object series and large comparison array
    ([GH 16012](https://github.com/pandas-dev/pandas/issues/16012))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression from 0.20, [`Series.aggregate()`](../reference/api/pandas.Series.aggregate.html#pandas.Series.aggregate
    "pandas.Series.aggregate") and [`DataFrame.aggregate()`](../reference/api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate") allow dictionaries as return values again ([GH 16741](https://github.com/pandas-dev/pandas/issues/16741))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes dtype of result with integer dtype input, from [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") when called with `margins=True` ([GH 17013](https://github.com/pandas-dev/pandas/issues/17013))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") where passing two `Series` with the same name raised a `KeyError`
    ([GH 13279](https://github.com/pandas-dev/pandas/issues/13279))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.argmin()`](../reference/api/pandas.Series.argmin.html#pandas.Series.argmin
    "pandas.Series.argmin"), [`Series.argmax()`](../reference/api/pandas.Series.argmax.html#pandas.Series.argmax
    "pandas.Series.argmax"), and their counterparts on `DataFrame` and groupby objects
    work correctly with floating point data that contains infinite values ([GH 13595](https://github.com/pandas-dev/pandas/issues/13595)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`unique()`](../reference/api/pandas.unique.html#pandas.unique "pandas.unique")
    where checking a tuple of strings raised a `TypeError` ([GH 17108](https://github.com/pandas-dev/pandas/issues/17108))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    where order of result index was unpredictable if it contained non-comparable elements
    ([GH 17344](https://github.com/pandas-dev/pandas/issues/17344))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes regression when sorting by multiple columns on a `datetime64` dtype `Series`
    with `NaT` values ([GH 16836](https://github.com/pandas-dev/pandas/issues/16836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") where the result’s columns did not preserve the categorical
    dtype of `columns` when `dropna` was `False` ([GH 17842](https://github.com/pandas-dev/pandas/issues/17842))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `DataFrame.drop_duplicates` where dropping with non-unique column names
    raised a `ValueError` ([GH 17836](https://github.com/pandas-dev/pandas/issues/17836))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in `unstack()` which, when called on a list of levels, would discard the
    `fillna` argument ([GH 13971](https://github.com/pandas-dev/pandas/issues/13971))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the alignment of `range` objects and other list-likes with `DataFrame`
    leading to operations being performed row-wise instead of column-wise ([GH 17901](https://github.com/pandas-dev/pandas/issues/17901))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in `.clip()` with `axis=1` and a list-like for `threshold` is passed; previously
    this raised `ValueError` ([GH 15390](https://github.com/pandas-dev/pandas/issues/15390))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.clip()`](../reference/api/pandas.Series.clip.html#pandas.Series.clip
    "pandas.Series.clip") and [`DataFrame.clip()`](../reference/api/pandas.DataFrame.clip.html#pandas.DataFrame.clip
    "pandas.DataFrame.clip") now treat NA values for upper and lower arguments as
    `None` instead of raising `ValueError` ([GH 17276](https://github.com/pandas-dev/pandas/issues/17276)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug in [`Series.isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") when called with a categorical ([GH 16639](https://github.com/pandas-dev/pandas/issues/16639))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in the categorical constructor with empty values and categories causing
    the `.categories` to be an empty `Float64Index` rather than an empty `Index` with
    object dtype ([GH 17248](https://github.com/pandas-dev/pandas/issues/17248))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in categorical operations with [Series.cat](../user_guide/categorical.html#categorical-cat)
    not preserving the original Series’ name ([GH 17509](https://github.com/pandas-dev/pandas/issues/17509))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`DataFrame.merge()`](../reference/api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge") failing for categorical columns with boolean/int data
    types ([GH 17187](https://github.com/pandas-dev/pandas/issues/17187))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in constructing a `Categorical`/`CategoricalDtype` when the specified `categories`
    are of categorical type ([GH 17884](https://github.com/pandas-dev/pandas/issues/17884)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### PyPy'
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility with PyPy in [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv") with `usecols=[<unsorted ints>]` and [`read_json()`](../reference/api/pandas.read_json.html#pandas.read_json
    "pandas.read_json") ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split tests into cases for CPython and PyPy where needed, which highlights the
    fragility of index matching with `float('nan')`, `np.nan` and `NAT` ([GH 17351](https://github.com/pandas-dev/pandas/issues/17351))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix [`DataFrame.memory_usage()`](../reference/api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage") to support PyPy. Objects on PyPy do not have
    a fixed size, so an approximation is used instead ([GH 17228](https://github.com/pandas-dev/pandas/issues/17228))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bug where some inplace operators were not being wrapped and produced a copy
    when invoked ([GH 12962](https://github.com/pandas-dev/pandas/issues/12962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug in [`eval()`](../reference/api/pandas.eval.html#pandas.eval "pandas.eval")
    where the `inplace` parameter was being incorrectly handled ([GH 16732](https://github.com/pandas-dev/pandas/issues/16732))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Contributors'
  prefs: []
  type: TYPE_NORMAL
- en: A total of 206 people contributed patches to this release. People with a “+”
    by their names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: 3553x +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aaron Barber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Gleave +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adam Smith +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AdamShamlian +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adrian Liaw +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Velasco +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alan Yee +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex B +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Lubbock +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Marchenko +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Rychyk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amol K +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andreas Winkler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Andrew 亮
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: André Jonasson +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Becky Sweger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Berkay +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bob Haffner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bran Yang
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brian Tu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brock Mendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carol Willing +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carter Green +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chankey Pathak +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Billington
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Filo Gorgolewski +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Kerr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris M +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Mazzullo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Prinoth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christian Stade-Schuldt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Moehl +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DSM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Chen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Grady
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Himmelstein
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dave Willmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Cook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Gwynne
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Read +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dillon Niederhut +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Douglas Rudd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Stein +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik Fredriksen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Florian Wilhelm +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floris Kint +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forbidden Donut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gabe F +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giftlin Rajaiah +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giulio Pepe +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guilherme Beltramini
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guillem Borrell +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hanmin Qin +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hendrik Makait +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hugues Valois
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hussain Tamboli +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iva Miholic +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Novotný +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jan Rudolph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean Helie +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean-Baptiste Schiratti +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean-Mathieu Deschenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Knupp +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Reback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jeff Tratner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JennaVergeynst
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JimStearns206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joel Nothman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: John W. O’Brien
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Crall +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jon Mease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jonathan J. Helmus +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joris Van den Bossche
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JosephWagner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Juarez Bochi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Julian Kuhlmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Karel De Brabandere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kassandra Keeton +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keiron Pizzey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keith Webber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kirk Hansen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Licht Takeuchi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lucas Kushner +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mahdi Ben Jelloul +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makarov Andrey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malgorzata Turzanska +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marc Garcia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Margaret Sy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MarsGuy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matt Bark +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matthew Roeschke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mehmet Ali “Mali” Akmanalp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Gasvoda +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Michael Penkov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Milo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Morgan Stuart +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Morgan243 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nathan Ford +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick Eubank
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick Garvey +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oleg Shteynbuk +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: P-Tillmann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pankaj Pandey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick Luo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patrick O’Melveny
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paul Reidy +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paula +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peter Quackenbush
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Peter Yanovich +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phillip Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pierre Haessig
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pietro Battiston
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pradyumna Reddy Chinthala
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prasanjit Prakash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RobinFiveWords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ryan Hendrickson
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sam Foo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sangwoong Yoon +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simon Gibbons +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimonBaron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steven Cutting +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sudeep +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sylvia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T N +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thomas A Caswell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim Swast +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Augspurger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tong SHEN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuan +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utkarsh Upadhyay +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vincent La +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vivek +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WANG Aiyong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WBare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wes McKinney
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XF +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yi Liu +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yosuke Nakabayashi +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aaron315 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: abarber4gh +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aernlund +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: agustín méndez +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: andymaheshw +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ante328 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aviolov +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bpraggastis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cbertinato +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cclauss +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chernrick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: chris-b1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dkamm +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dwkenefick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: economy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: faic +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fding253 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gfyoung
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: guygoldberg +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hhuuggoo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: huashuai +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ian
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iulia +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jaredsnyder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jbrockmendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jdeschenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jebob +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jschendel +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: keitakurita
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kernc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kiwirob +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kjford
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linebp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lloydkirk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: louispotok +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: majiang +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: manikbhandari +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: margotphoenix +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: matthiashuschle +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mattip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mjlove12 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nmartensen +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas-docs-bot +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parchd-1 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: philipphanemann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rdk1024 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reidy-p +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ri938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ruiann +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rvernica +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s-weigand +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scotthavard92 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: skwbc +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: step4me +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tobycheese +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: topper-123 +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tsdlovell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ysau +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zzgao +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
