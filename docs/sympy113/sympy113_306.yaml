- en: Docstrings Style Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档字符串风格指南
- en: Original text：[https://docs.sympy.org/latest/contributing/docstring.html](https://docs.sympy.org/latest/contributing/docstring.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/contributing/docstring.html](https://docs.sympy.org/latest/contributing/docstring.html)
- en: '## General Guidelines'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 通用指南'
- en: To contribute to SymPy’s docstrings, please read these guidelines in full.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要贡献给SymPy的文档字符串，请完整阅读这些准则。
- en: A documentation string (docstring) is a string literal that occurs as the first
    statement in a module, function, class, or method definition. Such a docstring
    becomes the `__doc__` special attribute of that object.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串（docstring）是模块、函数、类或方法定义中作为第一条语句出现的字符串文字。这样的文档字符串将成为该对象的`__doc__`特殊属性。
- en: '**Example**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: 'Here is a basic docstring:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个基本的文档字符串：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every public function, class, method, and module should have a docstring that
    describes what it does. Documentation that is specific to a function or class
    in the module should be in the docstring of that function or class. The module
    level docstring should discuss the purpose and scope of the module, and give a
    high-level example of how to use the functions or classes in the module. A module
    docstring is the docstring at the very top of the file, for example, the docstring
    for [solvers.ode](https://github.com/sympy/sympy/blob/85e684f782c71d247b13af71f2f134a9d894507e/sympy/solvers/ode.py).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个公共函数、类、方法和模块应具有描述其功能的文档字符串。对于模块中的函数或类特有的文档应位于该函数或类的文档字符串中。模块级别的文档字符串应讨论模块的目的和范围，并提供如何使用模块中的函数或类的高级示例。模块文档字符串是文件顶部的文档字符串，例如，[solvers.ode](https://github.com/sympy/sympy/blob/85e684f782c71d247b13af71f2f134a9d894507e/sympy/solvers/ode.py)
    的文档字符串。
- en: A public function is one that is intended to be used by the end-user, or the
    public. Documentation is important for public functions because they will be seen
    and used by many people.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 公共函数是打算由最终用户或公众使用的函数。对于公共函数，文档非常重要，因为它们将被许多人看到和使用。
- en: A private function, on the other hand, is one that is only intended to be used
    in the code in SymPy itself. Although it is less important to document private
    functions, it also helps to have docstrings on private functions to help other
    SymPy developers understand how to use the function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，私有函数是指仅打算在SymPy代码中使用的函数。虽然在私有函数上撰写文档不那么重要，但在私有函数上撰写文档也有助于其他SymPy开发人员理解如何使用该函数。
- en: It may not always be clear what is a public function and what is a private function.
    If a function begins with an underscore, it is private, and if a function is included
    in `__init__.py` it is public, but the converse is not always true, so sometimes
    you have to decide based on context. In general, if you are unsure, having documentation
    on a function is better than not having documentation, regardless if it is public
    or private.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时不太清楚什么是公共函数，什么是私有函数。如果函数以下划线开头，则为私有函数；如果函数包含在`__init__.py`中，则为公共函数，但反之并非总是如此，因此有时必须根据上下文决定。总体而言，如果不确定，对函数进行文档记录总比不进行文档记录要好。
- en: Docstrings should contain information aimed at users of the function. Comments
    specific to the code or other notes that would only distract users should go in
    comments in the code, not in docstrings.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串应包含针对函数使用者的信息。特定于代码的评论或其他可能仅会分散用户注意力的注释应放在代码的注释中，而不是文档字符串中。
- en: Every docstring should have examples that show how the function works. Examples
    are the most important part of a docstring. A single example showing input and
    output to a function can be more helpful than a paragraph of descriptive text.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文档字符串应包含展示函数工作方式的示例。示例是文档字符串中最重要的部分。展示函数的输入和输出的单个示例可能比描述性文本段落更有帮助。
- en: Remember that the primary consumers of docstrings are other human beings, not
    machines, so it is important to describe what the function does in plain English.
    Likewise, examples of how to use the function should be designed for human readers,
    not just for the doctest machinery.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，文档字符串的主要使用者是其他人类，而不是机器，因此用简单的英语描述函数的功能非常重要。同样，如何使用函数的示例应设计给人类读者，而不仅仅是为了doctest机制。
- en: Keep in mind that while Sphinx is the primary way users consume docstrings,
    and therefore the first platform to keep in mind while writing docstrings (especially
    for public functions), it is not the only way users consume docstrings. You can
    also view docstrings using `help()` or `?` in IPython. When using `help()`, for
    instance, it will show you all of the docstrings on private methods. Additionally,
    anyone reading the source code directly will see every docstring.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，虽然Sphinx是用户消费文档字符串的主要方式，因此在编写文档字符串时（特别是对于公共函数），它是首先要考虑的平台，但并非用户消费文档字符串的唯一方式。您还可以在IPython中使用`help()`或`?`来查看文档字符串。例如，在使用`help()`时，它将显示所有私有方法的文档字符串。此外，直接阅读源代码的任何人都将看到每个文档字符串。
- en: All public functions, classes, and methods and their corresponding docstrings
    should be imported into the Sphinx docs, instructions on which can be found at
    the end of this guide.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有公共函数、类和方法及其相应的文档字符串应导入到Sphinx文档中，关于这一点的说明可以在本指南末尾找到。
- en: '## Formatting'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '## 格式化'
- en: Docstrings are are written in [reStructuredText](https://docutils.sourceforge.io/rst.html)
    format extended by [Sphinx](https://www.sphinx-doc.org/en/master/). Here is a
    concise guide to [Quick reStructuredText](https://docutils.sourceforge.io/docs/user/rst/quickref.html).
    More in-depth information about using reStructuredText can be found in the [Sphinx
    Documentation](https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串是用[reStructuredText](https://docutils.sourceforge.io/rst.html)格式编写的，并由[Sphinx](https://www.sphinx-doc.org/en/master/)扩展。这里是关于[Quick
    reStructuredText](https://docutils.sourceforge.io/docs/user/rst/quickref.html)的简明指南。有关使用reStructuredText的更详细信息可以在[Sphinx文档](https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html)中找到。
- en: 'In order for Sphinx to render docstrings nicely in the HTML documentation,
    some formatting guidelines should be followed when writing docstrings:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Sphinx在HTML文档中漂亮地呈现文档字符串，编写文档字符串时应遵循一些格式化指南：
- en: Always use “””triple double quotes””” around docstrings. Use r”””raw triple
    double quotes””” if you use any backslashes in your docstrings.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终在文档字符串周围使用“””三重双引号”””。如果在文档字符串中使用任何反斜杠，则使用 r”””原始三重双引号”””。
- en: Include a blank line before the docstring’s closing quotes.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文档字符串的关闭引号之前包含一个空行。
- en: Lines should not be longer than 80 characters.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行不应超过80个字符。
- en: Always write class-level docstrings under the class definition line, as that
    is better to read in the source code.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请始终将类级别的文档字符串写在类定义行下面，因为在源代码中更易读。
- en: The various methods on the class can be mentioned in the docstring or examples
    if they are important, but details on them should go in the docstring for the
    method itself.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类的各种方法很重要，则可以在文档字符串或示例中提及它们，但有关详细信息应在方法本身的文档字符串中。
- en: 'Be aware that :: creates code blocks, which are rarely used in the docstrings.
    Any code example with example Python should be put in a doctest. Always check
    that the final version as rendered by Sphinx looks correct in the HTML.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，::创建代码块，文档字符串中很少使用。任何带有示例Python代码的代码示例应放在doctest中。始终检查由Sphinx渲染的最终版本在HTML中的显示是否正确。
- en: In order to make section underlining work nicely in docstrings, [numpydoc Sphinx
    extension](https://pypi.org/project/numpydoc/) is used.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使文档字符串中的部分下划线工作得很好，使用了[numpydoc Sphinx扩展](https://pypi.org/project/numpydoc/)。
- en: 'Always double check that you have formatted your docstring correctly:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请始终仔细检查您的文档字符串格式是否正确：
- en: Make sure that your docstring is imported into Sphinx.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的文档字符串已导入到Sphinx中。
- en: Build the Sphinx docs (`cd doc; make html`).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Sphinx文档（`cd doc; make html`）。
- en: Make sure that Sphinx doesn’t output any errors.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Sphinx没有输出任何错误。
- en: Open the page in `_build/html` and make sure that it is formatted correctly.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `_build/html` 中的页面，并确保格式正确。
- en: Sections
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分
- en: 'In SymPy’s docstrings, it is preferred that function, class, and method docstrings
    consist of the following sections in this order:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在SymPy的文档字符串中，建议函数、类和方法文档字符串按以下顺序包含以下部分：
- en: Single-Sentence Summary
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单句总结
- en: Explanation
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释
- en: Examples
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 示例
- en: Parameters
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参数
- en: See Also
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另请参阅
- en: References
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参考资料
- en: The Single-Sentence Summary and Examples sections are **required** for every
    docstring. Docstrings will not pass review if these sections are not included.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单句总结和示例部分是**必需的**每个文档字符串。如果不包括这些部分，文档字符串将无法通过审查。
- en: Do not change the names of these supported sections, for example, the heading
    “Examples” as a plural should be used even if there is only one example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不要更改这些支持的部分的名称，例如，“Examples”作为复数应该使用，即使只有一个示例。
- en: SymPy will continue to support all of the section headings listed in the [NumPy
    Docstring Guide](https://numpydoc.readthedocs.io/en/latest/format.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy将继续支持[NumPy文档字符串指南](https://numpydoc.readthedocs.io/en/latest/format.html)中列出的所有部分标题。
- en: Headings should be underlined with the same length in equals signs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 标题应该用等号来下划线，长度相同。
- en: If a section is not required and that information for the function in question
    is unnecessary, do not use it. Unnecessary sections and cluttered docstrings can
    make a function harder to understand. Aim for the minimal amount of information
    required to understand the function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个部分不是必需的，并且对于所讨论的函数的信息是不必要的，请不要使用它。不必要的部分和杂乱的文档字符串会使函数更难理解。目标是提供理解该函数所需的最少信息。
- en: 1\. Single-Sentence Summary
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 单句摘要
- en: This section is **required** for every docstring. A docstring will not pass
    review if it is not included. No heading is necessary for this section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本节对每个文档字符串都是**必需**的。如果不包括该节，则文档字符串将无法通过审查。不需要为本节添加标题。
- en: This section consists of a one-line sentence ending in a period that describes
    the function, class, or method’s effect.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以句点结尾的一行简短句子，描述函数、类或方法的效果。
- en: 'Deprecation warnings should go directly after the Single-Sentence Summary,
    so as to notify users right away. Deprecation warnings should be written as a
    `deprecated` in the Sphinx directive:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 废弃警告应该直接放在单句摘要后面，以便立即通知用户。废弃警告应该以Sphinx指令中的`deprecated`形式书写：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See [Documenting a deprecation](deprecations.html#deprecation-documentation)
    for more details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节请参见[文档中的废弃](deprecations.html#deprecation-documentation)。
- en: 2\. Explanation Section
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 解释部分
- en: This section is encouraged. If you choose to include an Explanation section
    in your docstring, it should be labeled with the heading “Explanation” underlined
    with the same length in equals signs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励使用本节。如果选择在文档字符串中包含一个解释部分，应该用等号来下划线，长度相同地标记为“Explanation”。
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This section consists of a more elaborate description of what the function,
    class, or method does when the concise Single-Sentence Summary will not suffice.
    This section should be used to clarify functionality in several sentences or paragraphs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当简短的单句摘要不够详细时，本节包含了更详细的描述，说明函数、类或方法的功能。本节应用于几句或几段来澄清功能。
- en: '### 3\. Examples Section'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '### 3\. 示例部分'
- en: This section is **required** for every docstring. A docstring will not pass
    review if it is not included. It should be labeled with the heading “Examples”
    (even if there is only one example) underlined with the same length in equals
    signs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本节对每个文档字符串都是**必需**的。如果不包括该节，则文档字符串将无法通过审查。应该用等号来下划线，长度相同地标记为“Examples”（即使只有一个示例）。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This section consists of examples that show how the function works, called doctests.
    Doctests should be complicated enough that they fully demonstrate the API and
    functionality of the function, but simple enough that a user can understand them
    without too much thought. The perfect doctest tells the user exactly what they
    need to know about the function without reading any other part of the docstring.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含展示函数如何工作的示例，称为doctests。Doctests应该足够复杂，以完全展示函数的API和功能，但也足够简单，使用户可以轻松理解。完美的doctest确切地告诉用户关于函数的一切，而不需要阅读文档字符串的其他部分。
- en: There should always be a blank line before the doctest. When multiple examples
    are provided, they should be separated by blank lines. Comments explaining the
    examples should have blank lines both above and below them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在doctest之前应始终有一个空行。提供多个示例时，它们应该用空行分隔开。解释示例的注释应该在其上下都有空行。
- en: Do not think of doctests as tests. Think of them as examples that happen to
    be tested. They should demonstrate the API of the function to the user (i.e.,
    what the input parameters look like, what the output looks like, and what it does).
    If you only want to test something, add a test to the relevant `test_*.py file`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将doctest视为测试。将它们视为恰好被测试的示例。它们应该展示函数的API给用户（即输入参数的样子，输出的样子，以及它的作用）。如果只想测试某些内容，请将测试添加到相关的`test_*.py`文件中。
- en: You can use the `./bin/coverage_doctest.py` script to test the doctest coverage
    of a file or module. Run the doctests with `./bin/doctest`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`./bin/coverage_doctest.py`脚本来测试文件或模块的doctest覆盖率。使用`./bin/doctest`来运行doctest。
- en: You should only skip the testing of an example if it is impossible to test it.
    If necessary, testing of an example can be skipped by adding a special comment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在不可能测试示例时，才应跳过其测试。如果必要，可以通过添加特殊注释来跳过示例的测试。
- en: '**Example**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If an example is longer than 80 characters, it should be line wrapped. Examples
    should be line wrapped so that they are still valid Python code, using `...` continuation
    as in a Python prompt. For example, from the ODE module documentation:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果示例超过 80 个字符，则应进行换行。示例应该被换行，以便它们仍然是有效的 Python 代码，使用 `...` 作为 Python 提示中的继续符号。例如，来自
    ODE 模块文档：
- en: '**Example**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here `dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x), f(x), hint='1st_exact')`
    is too long, so we line break it after a comma so that it is readable, and put
    `...` on the continuation lines. If this is not done correctly, the doctests will
    fail.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x), f(x), hint='1st_exact')`
    太长了，因此我们在逗号后进行换行以便其可读性，并在连续行上放置 `...`。如果这样做不正确，doctest 将失败。
- en: The output of a command can also be line wrapped. No `...` should be used in
    this case. The doctester automatically accepts output that is line wrapped.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出也可以换行。在这种情况下，不应使用 `...`。doctester 自动接受换行的输出。
- en: '**Example**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In a doctest, write imports like `sympy import ...` instead of `import sympy`
    or `from sympy import *`. To define symbols, use `from sympy.abc import x`, unless
    the name is not in `sympy.abc` (for instance, if it has assumptions), in which
    case use `symbols` like `x, y = symbols('x y')`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 doctest 中，像 `sympy import ...` 这样写入导入，而不是 `import sympy` 或 `from sympy import
    *`。要定义符号，请使用 `from sympy.abc import x`，除非名称不在 `sympy.abc` 中（例如，如果它具有假设），在这种情况下，使用
    `symbols`，如 `x, y = symbols('x y')`。
- en: In general, you should run `./bin/doctest` to make sure your examples run correctly,
    and fix them if they do not.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应运行 `./bin/doctest` 来确保您的示例正确运行，并在不正确时进行修复。
- en: 4\. Parameters Section
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 参数部分
- en: This section is encouraged. If you choose to include a Parameters section in
    your docstring, it should be labeled with the heading “Parameters” underlined
    with the same length in equals signs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励包含此部分。如果选择在文档字符串中包含参数部分，则应以等号长度下划线为标签“参数”。
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you have parameters listed in parentheses after a function, class, or method
    name, you must include a parameters section.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在函数、类或方法名称后括号中列出参数，则必须包含一个参数部分。
- en: This section consists of descriptions of the function arguments, keywords, and
    their respective types.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分包含函数参数、关键字及其各自类型的描述。
- en: Enclose variables in double backticks. The colon must be preceded by a space,
    or omitted if the type is absent. For the parameter types, be as precise as possible.
    If it is not necessary to specify a keyword argument, use `optional`. Optional
    keyword parameters have default values, which are displayed as part of the function
    signature. They can also be detailed in the description.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量用双反引号括起来。冒号前必须有一个空格，或者如果类型不存在则可以省略冒号。对于参数类型，尽可能精确。如果不需要指定关键字参数，请使用 `optional`。可选关键字参数具有默认值，这些默认值显示为函数签名的一部分。它们也可以在描述中详细说明。
- en: When a parameter can only assume one of a fixed set of values, those values
    can be listed in braces, with the default appearing first. When two or more input
    parameters have exactly the same type, shape, and description, they can be combined.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当参数只能假定一组固定值中的一个时，这些值可以用大括号列出，其中默认值首先出现。当两个或更多输入参数具有完全相同的类型、形状和描述时，它们可以合并。
- en: If the Parameters section is not formatted correctly, the documentation build
    will render incorrectly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数部分格式不正确，则文档构建将呈现不正确。
- en: If you wish to include a Returns section, write it as its own section with its
    own heading.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望包含返回部分，请将其编写为具有自己标题的单独部分。
- en: '**Example**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: 'Here is an example of a correctly formatted Parameters section:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个正确格式化的参数部分示例：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '### 5\. See Also Section'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '### 5\. 参见部分'
- en: This section is encouraged. If you choose to include a See Also section in your
    docstring, it should be labeled with the heading “See Also” underlined with the
    same length in equals signs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励包含此部分。如果选择在文档字符串中包含参见部分，则应以等号长度下划线为标签“参见”。
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This section consists of a listing of related functions, classes, and methods.
    The related items can be described with a concise fragment (not a full sentence)
    if desired, but this is not required. If the description spans more than one line,
    subsequent lines must be indented.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分包含相关函数、类和方法的列表。如果需要，相关项可以用简洁的片段描述（不需要完整句子）。如果描述跨越多行，则必须缩进后续行。
- en: The See Also section should only be used to reference other SymPy objects. Anything
    that is a link should be embedded as a hyperlink in the text of the docstring
    instead; see the References section for details.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “参见”部分应仅用于引用其他 SymPy 对象。任何链接都应嵌入到文本的文档字符串中，详见参考文献部分。
- en: Do not reference classes with `class:Classname`, `` class:`Classname` ``, or
    `` :class:`Classname` ``, but rather only by their class name.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 不要引用 `class:Classname`、`` class:`Classname` `` 或 `` :class:`Classname` `` 类型，而只引用它们的类名。
- en: '**Examples**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: 'Here is a correctly formatted See Also section with concise descriptions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个带有简短描述的正确格式的“参见”部分示例：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is a correctly formatted See Also section with just a list of names:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只包含名称列表的正确格式的“参见”部分示例：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 6\. References Section
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 参考文献部分
- en: This section is encouraged. If you choose to include a References section in
    your docstring, it should be labeled with the heading “References” underlined
    with the same length in equals signs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励包含此部分。如果您选择在文档字符串中包含一个参考文献部分，它应该用标题“参考文献”标记，并在下方用等号长度划线。
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This section consists of a list of references cited anywhere in the previous
    sections. Any reference to other SymPy objects should go in the See Also section
    instead.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分由在前面各节中引用的参考文献列表组成。任何对其他 SymPy 对象的引用应放在“参见”部分。
- en: The References section should include online resources, paper citations, and/or
    any other printed resource giving general information about the function. References
    are meant to augment the docstring, but should not be required to understand it.
    References are numbered, starting from one, in the order in which they are cited.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献部分应包括在线资源、论文引用和/或任何其他提供有关函数一般信息的印刷资源。参考文献旨在增强文档字符串，但不应要求理解它。参考文献按引用顺序编号，从一开始。
- en: For online resources, only link to freely accessible and stable online resources
    such as Wikipedia, Wolfram MathWorld, and the NIST Digital Library of Mathematical
    Functions (DLMF), which are unlikely to suffer from hyperlink rot.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在线资源，只链接到免费且稳定的在线资源，如维基百科、Wolfram MathWorld 和 NIST 数学函数数字图书馆（DLMF），这些资源不太可能出现超链接失效。
- en: 'References for papers should include, in this order: reference citation, author
    name, title of work, journal or publication, year published, page number.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 论文的参考文献应按照以下顺序包括：引用编号、作者姓名、作品标题、期刊或出版物、出版年份、页码。
- en: If there is a DOI (Digital Object Identifier), include it in the citation and
    make sure it is a clickable hyperlink.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有 DOI（数字对象标识符），请在引用中包含并确保它是可点击的超链接。
- en: '**Examples**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: 'Here is a References section that cites a printed resource:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是引用了印刷资源的参考文献部分示例：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is a References section that cites printed and online resources:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是引用印刷和在线资源的参考文献部分示例：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Sample Docstring
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样本文档字符串
- en: 'Here is an example of a correctly formatted docstring:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个正确格式的文档字符串示例：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Docstrings for Classes that are Mathematical Functions
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学函数类的文档字符串
- en: 'SymPy is unusual in that it also has classes that are mathematical functions.
    The docstrings for classes that are mathematical functions should include details
    specific to this kind of class, as noted below:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 不同寻常之处在于它还有作为数学函数的类。数学函数类的文档字符串应包括特定于此类别的详细信息，如下所述：
- en: 'The Explanation section should include a mathematical definition of the function.
    This should use LaTeX math. Use $$ for [inline math](documentation-style-guide.html#style-guide-math-formatting)
    and .. math:: for display math, which should be used for the main definition.
    The variable names in the formulas should match the names of the parameters, and
    the LaTeX formatting should match the LaTeX pretty printing used by SymPy. As
    relevant, the mathematical definitions should mention their domain of definition,
    especially if the domain is different from the complex numbers.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '解释部分应包括函数的数学定义。这应该使用 LaTeX 数学公式。对于[内联数学](documentation-style-guide.html#style-guide-math-formatting)，使用
    $$，对于主要定义，使用 .. math:: 来显示数学公式。公式中的变量名应与参数名匹配，并且 LaTeX 格式应与 SymPy 使用的 LaTeX 漂亮打印格式匹配。在适当的情况下，数学定义应说明其定义域，特别是如果定义域与复数不同。'
- en: If there are multiple conventions in the literature for a function, make sure
    to clearly specify which convention SymPy uses.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文献中对一个函数有多种约定，请确保清楚指明 SymPy 使用的是哪种约定。
- en: The Explanation section may also include some important mathematical facts about
    the function. These can alternately be demonstrated in the Examples section. Mathematical
    discussions should not be too long, as users can check the references for more
    details.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释部分还可以包括有关函数的一些重要数学事实。这些也可以在示例部分中进行演示。数学讨论不应太长，因为用户可以查阅参考资料获取更多细节。
- en: The docstring does not need to discuss every implementation detail such as at
    which operations are defined on the function or at which points it evaluates in
    the “eval” method. Important or illuminating instances of these can be shown in
    the Examples section.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档字符串不需要讨论每个实现细节，例如在“eval”方法中定义了哪些操作或在哪些点上进行评估。这些重要或有启发性的实例可以在示例部分中展示。
- en: The docstring should go on the class level (right under the line that has “class”).
    The “eval” method should not have a docstring.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档字符串应该放在类级别（紧挨着包含“class”一行的位置）。“eval” 方法不应有文档字符串。
- en: Private methods on the class, that is, any method that starts with an underscore,
    do not need to be documented. They can still be documented if you like, but note
    that these docstrings are not pulled into the Sphinx documentation, so they will
    only be seen by developers who are reading the code, so if there is anything very
    important that you want to mention here, it should go in the class-level docstring
    as well.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类的私有方法，即以下划线开头的任何方法，不需要进行文档化。如果你愿意，它们仍然可以被文档化，但请注意这些文档字符串不会被导入 Sphinx 文档中，因此只有阅读代码的开发人员才能看到。因此，如果有任何非常重要的内容要提及，应该放在类级别的文档字符串中。
- en: Best Practices for Writing Docstrings
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写文档字符串的最佳实践
- en: When writing docstrings, please follow all of the same formatting, style, and
    tone preferences as when writing narrative documentation. For guidelines, see
    [Best Practices for Writing Documentation](documentation-style-guide.html#style-guide-best-practices-for-writing-documentation),
    Formatting, Style, and Tone.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写文档字符串时，请遵循与编写叙述文档时相同的格式、风格和语气偏好。有关指南，请参阅[编写文档的最佳实践](documentation-style-guide.html#style-guide-best-practices-for-writing-documentation)，格式、风格和语气。
- en: Importing Docstrings into the Sphinx Documentation
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将文档字符串导入 Sphinx 文档
- en: 'Here are excerpts from the `doc/src/modules/geometry` directory that imports
    the relevant docstrings from geometry module into documentation:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是从`doc/src/modules/geometry`目录中导入几段相关文档字符串到文档中的摘录：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'First namespace is set to particular submodule (file) with `.. module::` directive,
    then docstrings are imported with `.. autoclass::` or `.. autofunction::` relative
    to that submodule (file). Other methods are either cumbersome to use (using full
    paths for all objects) or break something (importing relative to main module using
    `.. module:: sympy.geometry` breaks viewcode Sphinx extension). All files in `doc/src/modules/`
    should use this format.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '第一个命名空间设置为特定子模块（文件）使用 `.. module::` 指令，然后使用 `.. autoclass::` 或 `.. autofunction::`
    相对于该子模块（文件）导入文档字符串。其他方法要么使用所有对象的完整路径太麻烦，要么会破坏某些功能（使用 `.. module:: sympy.geometry`
    相对于主模块导入破坏了 viewcode Sphinx 扩展）。`doc/src/modules/` 中的所有文件应该使用这种格式。'
- en: '## Cross-Referencing'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '## 交叉引用'
- en: 'Any text that references another SymPy function should be formatted so that
    a cross-reference link to that function’s documentation is created automatically.
    This is done using the RST cross-reference syntax. There are two different kinds
    of objects that have conventions here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 任何引用另一个 SymPy 函数的文本都应该格式化，以便自动创建对该函数文档的交叉引用链接。这是使用 RST 交叉引用语法完成的。这里有两种不同的对象在这里有惯例：
- en: 1\. Objects that are included in `from sympy import *`, for example, `sympy.acos`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 被包含在 `from sympy import *` 中的对象，例如，`sympy.acos`。
- en: For these, use `` :obj:`~.acos()` ``. The `~` makes it so that the text in the
    rendered HTML only shows `acos` instead of the fully qualified name `sympy.functions.elementary.trigonometric.acos`.
    (This will encourage importing names from the global `sympy` namespace instead
    of a specific submodule.) The `.` makes it so that the function name is found
    automatically. (If Sphinx gives a warning that there are multiple names found,
    replace the `.` with the full name. For example, `` :obj:`~sympy.solvers.solvers.solve()`
    ``.) Adding a trailing pair of parentheses is a convention for indicating the
    name is a function, method, or class.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，使用 `` :obj:`~.acos()` ``。`~` 让渲染后的 HTML 中只显示 `acos` 而不是完全限定名称 `sympy.functions.elementary.trigonometric.acos`。（这鼓励从全局
    `sympy` 命名空间导入名称而不是特定的子模块。）`.` 使函数名被自动找到。（如果 Sphinx 给出多个名称找到的警告，请用完整名称替换 `.`。例如，``
    :obj:`~sympy.solvers.solvers.solve()` ``。）添加一对括号表示这个名字是一个函数、方法或类的约定。
- en: You may also use a more specific type indicator instead of `obj` (see [https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)).
    However, `obj` will always work, and sometimes SymPy names are not the type you
    might expect them to be. For example, mathematical function objects such as `sin`
    are not actually a Python function, rather they are a Python class, therefore
    `` :func:`~.sin` `` will not work.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用更具体的类型指示符，而不是 `obj`（参见 [https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)）。然而，`obj`
    总是有效的，有时候 SymPy 的名称并不是你期望的类型。例如，数学函数对象如 `sin` 实际上不是 Python 函数，而是 Python 类，因此 ``
    :func:`~.sin` `` 将不起作用。
- en: 2\. Objects that are not included in `from sympy import *`, for example, `sympy.physics.vector.dynamicsymbols`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 不包含在 `from sympy import *` 中的对象，例如，`sympy.physics.vector.dynamicsymbols`。
- en: This can be public API objects from submodules that are not included in the
    main `sympy/__init__.py`, such as the physics submodule, or private API objects
    that are not necessarily intended to be used by end-users (but should still be
    documented). In this case, you must show the fully qualified name, so do not use
    the `~.` syntax. For example, `` :obj:`sympy.physics.vector.dynamicsymbols()`
    ``.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是不包括在主 `sympy/__init__.py` 中的子模块中的公共 API 对象，例如物理子模块，或者不一定要由最终用户使用的私有 API
    对象（但仍然需要文档化）。在这种情况下，你必须显示完全限定名称，因此不要使用 `~.` 语法。例如，`` :obj:`sympy.physics.vector.dynamicsymbols()`
    ``。
- en: You may also write custom text that links to the documentation for something
    using the following syntax `` :obj:`custom text<object>` ``. For example, `` :obj:`the
    sine function <.sin>` `` produces the text “the sine function” that links to the
    documentation for `sin`. Note that the `~` character should not be used here.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以编写自定义文本，链接到某些东西的文档使用以下语法 `` :obj:`custom text<object>` ``。例如，`` :obj:`正弦函数
    <.sin>` `` 会产生文本“正弦函数”，链接到 `sin` 的文档。请注意，这里不应该使用 `~` 字符。
- en: Note that references in the [See Also](#style-guide-see-also) section of the
    docstrings do not require the `:obj:` syntax.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在文档字符串的 [另请参见](#style-guide-see-also) 部分中的引用不需要 `:obj:` 语法。
- en: 'If the resulting cross reference is written incorrectly, Sphinx will error
    when building the docs with an error like:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生成的交叉引用写错了，Sphinx 在构建文档时会出现错误，例如：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here are some troubleshooting tips to fix the errors:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些故障排除的提示来修复错误：
- en: Make sure you have used the correct syntax, as described above.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已经按照上述描述使用了正确的语法。
- en: Make sure you spelled the function name correctly.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你拼写了函数名正确。
- en: Check if the function you are trying to cross-reference is actually included
    in the Sphinx documentation. If it is not, Sphinx will not be able to create a
    reference for it. In that case, you should add it to the appropriate RST file
    as described in the [Docstring Guidelines](#style-guide-docstring-guidelines).
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查您试图交叉引用的函数是否确实包含在Sphinx文档中。如果没有，Sphinx将无法为其创建引用。在这种情况下，您应将其添加到相应的RST文件中，如[Docstring
    Guidelines](#style-guide-docstring-guidelines)中所述。
- en: If the function or object is not included in `from sympy import *`, you will
    need to use the fully qualified name, like `sympy.submodule.submodule.function`
    instead of just `function`.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果函数或对象未包含在`from sympy import *`中，则需要使用完全限定名称，例如`sympy.submodule.submodule.function`而不是仅仅`function`。
- en: A fully qualified name must include the full submodule for a function all the
    way down to the file. For example, `sympy.physics.vector.ReferenceFrame` will
    not work (even though you can access it that way in code). It has to be `sympy.physics.vector.frame.ReferenceFrame`.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全限定名称必须包括功能直至文件的完整子模块。例如，`sympy.physics.vector.ReferenceFrame`将不起作用（即使您可以在代码中以这种方式访问它）。它必须是`sympy.physics.vector.frame.ReferenceFrame`。
- en: If the thing you are referring to does not actually have somewhere to link to,
    do not use the `:obj:` syntax. Instead, mark it as code using double backticks.
    Examples of things that cannot be linked to are Python built in functions like
    `int` or `NotImplementedError`, functions from other modules outside of SymPy
    like `matplotlib.plot`, and variable or parameter names that are specific to the
    text at hand. In general, if the object cannot be accessed as `sympy.something.something.object`,
    it cannot be cross-referenced and you should not use the `:obj:` syntax.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您要引用的内容实际上没有可以链接的地方，请勿使用`:obj:`语法。而是使用双反引号将其标记为代码。不能链接到的示例包括Python内置函数如`int`或`NotImplementedError`，SymPy外的其他模块的函数如`matplotlib.plot`，以及特定于手头文本的变量或参数名称。一般来说，如果无法访问对象作为`sympy.something.something.object`，则无法交叉引用，不应使用`:obj:`语法。
- en: If you are using are using one of the [type specific](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)
    identifiers like `:func:`, be sure that the type for it is correct. `:func:` only
    refers to Python functions. For classes, you need to use `:class:`, and for methods
    on a class you need to use `:method:`. In general, it is recommended to use `:obj:`,
    as this will work for any type of object.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用[类型特定](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)标识符之一，比如`:func:`，请确保其类型正确。`:func:`仅适用于Python函数。对于类，请使用`:class:`，对于类的方法，请使用`:method:`。一般来说，建议使用`:obj:`，因为这适用于任何类型的对象。
- en: If you cannot get the cross-referencing syntax to work, go ahead and submit
    the pull request as is and ask the reviewers for help.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果无法使交叉引用语法工作，请继续提交原样拉取请求，并请求审阅者帮助。
- en: 'You may also see errors like:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会看到类似以下的错误：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: for instance, from using `` :obj:`~.subs` ``. This means that the `.` is not
    sufficient to find the function, because there are multiple names in SymPy named
    `subs`. In this case, you need to use the fully qualified name. You can still
    use `~` to make it shortened in the final text, like `` :obj:`~sympy.core.basic.Basic.subs`
    ``.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用``:obj:`~.subs` ``。这意味着`.`不足以找到函数，因为SymPy中有多个名为`subs`的名称。在这种情况下，您需要使用完全限定名称。您仍然可以使用`~`来在最终文本中缩短它，例如``:obj:`~sympy.core.basic.Basic.subs`
    ``。
- en: The line numbers for warnings in Python files are relative to the top of the
    docstring, not the file itself. The line numbers are often not completely correct,
    so you will generally have to search the docstring for the part that the warning
    is referring to. This is due to a bug in Sphinx.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Python文件中警告的行号是相对于docstring顶部而不是文件本身的。行号通常不完全正确，因此您通常需要搜索docstring以找到警告所指的部分。这是由于Sphinx中的一个bug。
