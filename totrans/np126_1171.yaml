- en: NumPy 1.12.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.12.0版本发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.12.0-notes.html](https://numpy.org/doc/1.26/release/1.12.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.12.0-notes.html](https://numpy.org/doc/1.26/release/1.12.0-notes.html)
- en: This release supports Python 2.7 and 3.4 - 3.6.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本支持Python 2.7和3.4-3.6。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The NumPy 1.12.0 release contains a large number of fixes and improvements,
    but few that stand out above all others. That makes picking out the highlights
    somewhat arbitrary but the following may be of particular interest or indicate
    areas likely to have future consequences.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.12.0版本包含大量修复和改进，但没有一个在所有其他方面都突出。这使得选择亮点有点随意，但以下内容可能特别感兴趣，或者指示可能会产生未来后果的领域。
- en: Order of operations in `np.einsum` can now be optimized for large speed improvements.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.einsum`中的操作顺序现在可以优化，以获得大幅度的速度提升。'
- en: New `signature` argument to `np.vectorize` for vectorizing with core dimensions.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.vectorize`的新`signature`参数，用于向量化核心维度。'
- en: The `keepdims` argument was added to many functions.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向许多函数添加了`keepdims`参数。
- en: New context manager for testing warnings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于测试警告的新上下文管理器
- en: Support for BLIS in numpy.distutils
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于numpy.distutils的BLIS支持
- en: Much improved support for PyPy (not yet finished)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对PyPy的支持大大改善（尚未完成）
- en: Dropped Support
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再支持
- en: Support for Python 2.6, 3.2, and 3.3 has been dropped.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Python 2.6、3.2和3.3已被停止。
- en: Added Support
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增加的支持
- en: Support for PyPy 2.7 v5.6.0 has been added. While not complete (nditer `updateifcopy`
    is not supported yet), this is a milestone for PyPy’s C-API compatibility layer.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对PyPy 2.7 v5.6.0的支持。尽管尚不完整（nditer `updateifcopy`尚不支持），这是PyPy的C-API兼容层的一个里程碑。
- en: Build System Changes
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建系统更改
- en: Library order is preserved, instead of being reordered to match that of the
    directories.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库顺序被保留，而不是被重新排序以匹配目录的顺序。
- en: Deprecations
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Assignment of ndarray object’s `data` attribute
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray对象的`data`属性赋值
- en: Assigning the ‘data’ attribute is an inherently unsafe operation as pointed
    out in gh-7083\. Such a capability will be removed in the future.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如gh-7083中指出的，赋值‘data’属性是一种固有的不安全操作。这种能力将来会被移除。
- en: Unsafe int casting of the num attribute in `linspace`
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`linspace`中对num属性的不安全强制转换
- en: '`np.linspace` now raises DeprecationWarning when num cannot be safely interpreted
    as an integer.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当num不能安全地解释为整数时，`np.linspace`现在会引发DeprecationWarning。
- en: Insufficient bit width parameter to `binary_repr`
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`binary_repr`的位宽参数不足
- en: If a ‘width’ parameter is passed into `binary_repr` that is insufficient to
    represent the number in base 2 (positive) or 2’s complement (negative) form, the
    function used to silently ignore the parameter and return a representation using
    the minimal number of bits needed for the form in question. Such behavior is now
    considered unsafe from a user perspective and will raise an error in the future.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将“width”参数传递到`binary_repr`中，这是不足以表示数字的二进制（正）或2的补码（负）形式，函数将令人安静地忽略这个参数，返回使用所需形式的最小位数的表示。这种行为现在被认为从用户的角度来看是不安全的，并在将来会引发错误。
- en: Future Changes
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变化
- en: In 1.13 NAT will always compare False except for `NAT != NAT`, which will be
    True. In short, NAT will behave like NaN
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.13版本中，NAT除了`NAT != NAT`之外都将始终比较为False，这将是True。简而言之，NAT的行为将类似于NaN。
- en: In 1.13 `np.average` will preserve subclasses, to match the behavior of most
    other numpy functions such as np.mean. In particular, this means calls which returned
    a scalar may return a 0-d subclass object instead.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在1.13版本中，`np.average`将保留子类，以匹配大多数其他numpy函数（如np.mean）的行为。特别是，意味着返回标量的调用可能返回一个0-d子类对象。 '
- en: Multiple-field manipulation of structured arrays
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段操作
- en: 'In 1.13 the behavior of structured arrays involving multiple fields will change
    in two ways:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版本中，涉及多个字段的结构化数组的行为将以两种方式发生变化：
- en: First, indexing a structured array with multiple fields (eg, `arr[['f1', 'f3']]`)
    will return a view into the original array in 1.13, instead of a copy. Note the
    returned view will have extra padding bytes corresponding to intervening fields
    in the original array, unlike the copy in 1.12, which will affect code such as
    `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在1.13版本中，使用多个字段索引结构化数组（例如，`arr[['f1', 'f3']]`）将返回原始数组的视图，而不是副本。请注意，返回的视图将具有与原始数组中的中间字段对应的额外填充字节，与1.12中的副本不同，这将影响`arr[['f1',
    'f3']].view(newdtype)`等代码。
- en: 'Second, for numpy versions 1.6 to 1.12 assignment between structured arrays
    occurs “by field name”: Fields in the destination array are set to the identically-named
    field in the source array or to 0 if the source does not have a field:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，对于 numpy 版本 1.6 到 1.12，结构化数组之间的赋值发生“按字段名称”：目标数组中的字段设置为源数组中相同命名字段，或者如果源数组没有该字段，则设置为
    0：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In 1.13 assignment will instead occur “by position”: The Nth field of the destination
    will be set to the Nth field of the source regardless of field name. The old behavior
    can be obtained by using indexing to reorder the fields before assignment, e.g.,
    `b[[''x'', ''y'']] = a[[''y'', ''x'']]`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.13 中，赋值将改为“按位置”进行：目标的第 N 个字段将被设置为源的第 N 个字段，而不考虑字段名称。可以通过使用索引重新排序字段来获取旧的行为，例如，`b[['x',
    'y']] = a[['y', 'x']]`。
- en: Compatibility notes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性注意事项
- en: DeprecationWarning to error
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DeprecationWarning 变为错误
- en: Indexing with floats raises `IndexError`, e.g., a[0, 0.0].
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用浮点数进行索引引发`IndexError`，例如`a[0, 0.0]`。
- en: Indexing with non-integer array_like raises `IndexError`, e.g., `a['1', '2']`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用非整数 array_like 进行索引引发`IndexError`，例如`a['1', '2']`
- en: Indexing with multiple ellipsis raises `IndexError`, e.g., `a[..., ...]`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号进行索引会引发`IndexError`，例如`a[..., ...]`。
- en: Non-integers used as index values raise `TypeError`, e.g., in `reshape`, `take`,
    and specifying reduce axis.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非整数用作索引值会引发`TypeError`，例如在`reshape`、`take`和指定 reduce axis 中。
- en: FutureWarning to changed behavior
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FutureWarning 变为更改的行为
- en: '`np.full` now returns an array of the fill-value’s dtype if no dtype is given,
    instead of defaulting to float.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有指定 dtype，则`np.full`现在将返回填充值的 dtype 数组，而不是默认为浮点数。
- en: '`np.average` will emit a warning if the argument is a subclass of ndarray,
    as the subclass will be preserved starting in 1.13\. (see Future Changes)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`np.average`的参数是 ndarray 的子类，将发出警告，因为子类将从 1.13 开始被保留。（请参阅未来更改）
- en: '`power` and `**` raise errors for integer to negative integer powers'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`power`和`**`对负整数幂的整数引发错误'
- en: The previous behavior depended on whether numpy scalar integers or numpy integer
    arrays were involved.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的行为取决于涉及 numpy 标量整数还是 numpy 整数数组。
- en: For arrays
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组
- en: Zero to negative integer powers returned least integral value.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零到负整数次幂返回最小的整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1、-1 都对负整数次幂返回正确的值。
- en: The remaining integers returned zero when raised to negative integer powers.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余的整数在提升为负整数幂时返回零。
- en: For scalars
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标量
- en: Zero to negative integer powers returned least integral value.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零到负整数次幂返回最小的整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1、-1 都对负整数次幂返回正确的值。
- en: The remaining integers sometimes returned zero, sometimes the correct float
    depending on the integer type combination.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余的整数有时返回零，有时返回正确的浮点数，这取决于整数类型组合。
- en: All of these cases now raise a `ValueError` except for those integer combinations
    whose common type is float, for instance uint64 and int8\. It was felt that a
    simple rule was the best way to go rather than have special exceptions for the
    integer units. If you need negative powers, use an inexact type.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些情况现在都会引发`ValueError`，除了那些公共类型为浮点数的整数组合，例如 uint64 和 int8。人们认为，制定一个简单的规则是最好的选择，而不是为整数单元准备特殊的异常。如果你需要负指数，使用不精确的类型。
- en: Relaxed stride checking is the default
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放宽的步幅检查是默认情况
- en: This will have some impact on code that assumed that `F_CONTIGUOUS` and `C_CONTIGUOUS`
    were mutually exclusive and could be set to determine the default order for arrays
    that are now both.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对假定`F_CONTIGUOUS`和`C_CONTIGUOUS`互斥并且可以设置以确定现在都具有的数组的默认顺序的代码产生一些影响。
- en: The `np.percentile` ‘midpoint’ interpolation method fixed for exact indices
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.percentile` ‘midpoint’ 插值方法对于精确索引已经修复'
- en: The ‘midpoint’ interpolator now gives the same result as ‘lower’ and ‘higher’
    when the two coincide. Previous behavior of ‘lower’ + 0.5 is fixed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当两者重合时，‘midpoint’插值器现在会给出与‘lower’和‘higher’相同的结果。修复了‘lower’ + 0.5 的以前行为。
- en: '`keepdims` kwarg is passed through to user-class methods'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims` kwarg 传递给用户类方法'
- en: 'numpy functions that take a `keepdims` kwarg now pass the value through to
    the corresponding methods on ndarray sub-classes. Previously the `keepdims` keyword
    would be silently dropped. These functions now have the following behavior:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用`keepdims` kwarg 的 numpy 函数会将该值传递给 ndarray 子类的相应方法。以前，`keepdims`关键字会被悄悄丢弃。这些函数现在具有以下行为：
- en: If user does not provide `keepdims`, no keyword is passed to the underlying
    method.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户没有提供`keepdims`，则不会传递关键字给底层方法。
- en: Any user-provided value of `keepdims` is passed through as a keyword argument
    to the method.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何用户提供的 `keepdims` 值都作为关键字参数传递给方法。
- en: This will raise in the case where the method does not support a `keepdims` kwarg
    and the user explicitly passes in `keepdims`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法不支持 `keepdims` 关键字参数并且用户明确传递 `keepdims` 时，这将引发异常。
- en: 'The following functions are changed: `sum`, `product`, `sometrue`, `alltrue`,
    `any`, `all`, `amax`, `amin`, `prod`, `mean`, `std`, `var`, `nanmin`, `nanmax`,
    `nansum`, `nanprod`, `nanmean`, `nanmedian`, `nanvar`, `nanstd`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 修改了以下函数：`sum`，`product`，`sometrue`，`alltrue`，`any`，`all`，`amax`，`amin`，`prod`，`mean`，`std`，`var`，`nanmin`，`nanmax`，`nansum`，`nanprod`，`nanmean`，`nanmedian`，`nanvar`，`nanstd`
- en: '`bitwise_and` identity changed'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bitwise_and` 标识已更改'
- en: The previous identity was 1, it is now -1\. See entry in Improvements for more
    explanation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的标识是 1，现在是 -1。更多解释请参见改进条目。
- en: ma.median warns and returns nan when unmasked invalid values are encountered
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当遇到未屏蔽的无效值时，*ma.median* 发出警告并返回 nan
- en: Similar to unmasked median the masked median *ma.median* now emits a Runtime
    warning and returns *NaN* in slices where an unmasked *NaN* is present.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与未屏蔽中位数类似，现在 *ma.median* 会在存在未屏蔽的 *NaN* 的切片中发出运行时警告，并返回 *NaN*。
- en: Greater consistency in `assert_almost_equal`
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_almost_equal` 中更一致'
- en: 'The precision check for scalars has been changed to match that for arrays.
    It is now:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '标量的精度检查已更改以匹配数组的精度检查。现在是:'
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that this is looser than previously documented, but agrees with the previous
    implementation used in `assert_array_almost_equal`. Due to the change in implementation
    some very delicate tests may fail that did not fail before.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这比以前文档中记录的要宽松，但与以前在 `assert_array_almost_equal` 中使用的实现一致。由于实现的更改，一些非常微妙的测试可能会失败，而以前没有失败。
- en: '`NoseTester` behaviour of warnings during testing'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NoseTester` 在测试期间的警告行为'
- en: When `raise_warnings="develop"` is given, all uncaught warnings will now be
    considered a test failure. Previously only selected ones were raised. Warnings
    which are not caught or raised (mostly when in release mode) will be shown once
    during the test cycle similar to the default python settings.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 `raise_warnings="develop"`，现在所有未捕获的警告都将被视为测试失败。先前只有选择的警告被引发。未捕获或引发的警告（主要是在发布模式下时）将在测试周期中显示一次，类似于默认的
    Python 设置。
- en: '`assert_warns` and `deprecated` decorator more specific'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_warns` 和 `deprecated` 装饰器更具体'
- en: The `assert_warns` function and context manager are now more specific to the
    given warning category. This increased specificity leads to them being handled
    according to the outer warning settings. This means that no warning may be raised
    in cases where a wrong category warning is given and ignored outside the context.
    Alternatively the increased specificity may mean that warnings that were incorrectly
    ignored will now be shown or raised. See also the new `suppress_warnings` context
    manager. The same is true for the `deprecated` decorator.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_warns` 函数和上下文管理器现在更具体于给定的警告类别。这种增加的特异性导致它们被根据外部警告设置处理。这意味着在给定和在上下文之外被忽略的错误类别警告产生时不会引发任何警告。另外，增加的特异性可能意味着不再会显示或引发错误地被忽略的警告。也请参阅新的
    `suppress_warnings` 上下文管理器。`deprecated` 装饰器也是如此。'
- en: C API
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: No changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 无改动。
- en: New Features
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Writeable keyword argument for `as_strided`
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`as_strided` 的 `writeable` 关键字参数'
- en: '`np.lib.stride_tricks.as_strided` now has a `writeable` keyword argument. It
    can be set to False when no write operation to the returned array is expected
    to avoid accidental unpredictable writes.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.lib.stride_tricks.as_strided` 现在有一个 `writeable` 关键字参数。当预期不进行返回数组的写操作时，可以将其设置为
    False，以避免意外的无法预测的写入。'
- en: '`axes` keyword argument for `rot90`'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rot90` 的 `axes` 关键字参数'
- en: The `axes` keyword argument in `rot90` determines the plane in which the array
    is rotated. It defaults to `axes=(0,1)` as in the original function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`rot90` 中的 `axes` 关键字参数确定数组旋转的平面。默认为 `axes=(0,1)`，与原始函数相同。'
- en: Generalized `flip`
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用的 `flip`
- en: '`flipud` and `fliplr` reverse the elements of an array along axis=0 and axis=1
    respectively. The newly added `flip` function reverses the elements of an array
    along any given axis.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`flipud` 和 `fliplr` 分别沿 axis=0 和 axis=1 反转数组的元素。新添加的 `flip` 函数沿给定轴反转数组的元素。'
- en: '`np.count_nonzero` now has an `axis` parameter, allowing non-zero counts to
    be generated on more than just a flattened array object.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.count_nonzero` 现在有一个 `axis` 参数，允许在不仅仅是扁平数组对象上生成非零计数。'
- en: BLIS support in `numpy.distutils`
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 中的 BLIS 支持'
- en: Building against the BLAS implementation provided by the BLIS library is now
    supported. See the `[blis]` section in `site.cfg.example` (in the root of the
    numpy repo or source distribution).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在支持使用由 BLIS 库提供的 BLAS 实现进行构建。请参见 numpy 存储库或源分发包根目录中的 `site.cfg.example`（在 `[blis]`
    部分）。
- en: Hook in `numpy/__init__.py` to run distribution-specific checks
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy/__init__.py` 中连接到运行特定分发检查的钩子
- en: Binary distributions of numpy may need to run specific hardware checks or load
    specific libraries during numpy initialization. For example, if we are distributing
    numpy with a BLAS library that requires SSE2 instructions, we would like to check
    the machine on which numpy is running does have SSE2 in order to give an informative
    error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: numpy 的二进制分发可能需要在 numpy 初始化期间运行特定硬件检查或加载特定库。例如，如果我们将 numpy 与需要 SSE2 指令的 BLAS
    库一起分发，我们希望检查运行 numpy 的计算机是否具有 SSE2 以提供有关错误的信息。
- en: Add a hook in `numpy/__init__.py` to import a `numpy/_distributor_init.py` file
    that will remain empty (bar a docstring) in the standard numpy source, but that
    can be overwritten by people making binary distributions of numpy.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `numpy/__init__.py` 中添加了连接到导入 `numpy/_distributor_init.py` 文件的钩子，该文件将保留为空（除了文档字符串）在标准
    numpy 源中，但可以被制作 numpy 二进制分发的人覆盖。
- en: New nanfunctions `nancumsum` and `nancumprod` added
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的 nan 函数 `nancumsum` 和 `nancumprod`
- en: Nan-functions `nancumsum` and `nancumprod` have been added to compute `cumsum`
    and `cumprod` by ignoring nans.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`nancumsum` 和 `nancumprod` 函数已添加，可以忽略 NaN 值计算 `cumsum` 和 `cumprod`。'
- en: '`np.interp` can now interpolate complex values'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.interp` 现在可以插值复数值'
- en: '`np.lib.interp(x, xp, fp)` now allows the interpolated array `fp` to be complex
    and will interpolate at `complex128` precision.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.lib.interp(x, xp, fp)` 现在允许插值数组 `fp` 是复数，并将以 `complex128` 精度进行插值。'
- en: New polynomial evaluation function `polyvalfromroots` added
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的多项式评估函数 `polyvalfromroots`
- en: The new function `polyvalfromroots` evaluates a polynomial at given points from
    the roots of the polynomial. This is useful for higher order polynomials, where
    expansion into polynomial coefficients is inaccurate at machine precision.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `polyvalfromroots` 在多项式的根给定点求值。这对于高阶多项式很有用，在机器精度下将多项式展开成系数是不准确的。
- en: New array creation function `geomspace` added
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的数组创建函数 `geomspace` 已添加
- en: 'The new function `geomspace` generates a geometric sequence. It is similar
    to `logspace`, but with start and stop specified directly: `geomspace(start, stop)`
    behaves the same as `logspace(log10(start), log10(stop))`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `geomspace` 生成几何序列。它类似于 `logspace`，但直接指定了起始和停止值：`geomspace(start, stop)`
    与 `logspace(log10(start), log10(stop))` 作用相同。
- en: New context manager for testing warnings
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于测试警告的新上下文管理器
- en: A new context manager `suppress_warnings` has been added to the testing utils.
    This context manager is designed to help reliably test warnings. Specifically
    to reliably filter/ignore warnings. Ignoring warnings by using an “ignore” filter
    in Python versions before 3.4.x can quickly result in these (or similar) warnings
    not being tested reliably.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 新的上下文管理器 `suppress_warnings` 已添加到测试工具中。该上下文管理器旨在帮助可靠地测试警告，特别是可靠地过滤/忽略警告。在 Python
    3.4.x 之前的版本中使用“ignore”过滤器快速导致这些（或类似的）警告无法可靠地进行测试。
- en: The context manager allows to filter (as well as record) warnings similar to
    the `catch_warnings` context, but allows for easier specificity. Also printing
    warnings that have not been filtered or nesting the context manager will work
    as expected. Additionally, it is possible to use the context manager as a decorator
    which can be useful when multiple tests give need to hide the same warning.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该上下文管理器允许过滤（以及记录）类似于 `catch_warnings` 上下文的警告，但更容易具体化。此外，打印未被过滤或嵌套上下文管理器的警告将如预期般工作。此外，当多个测试需要隐藏相同的警告时，将上下文管理器用作装饰器将非常有用。
- en: New masked array functions `ma.convolve` and `ma.correlate` added
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的掩码数组函数 `ma.convolve` 和 `ma.correlate` 已添加
- en: These functions wrapped the non-masked versions, but propagate through masked
    values. There are two different propagation modes. The default causes masked values
    to contaminate the result with masks, but the other mode only outputs masks if
    there is no alternative.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数包装了非掩码版本，但会传播掩码值。有两种不同的传播模式。默认情况下，掩码值会使结果受到掩码的影响，但另一种模式只有在没有替代值时才输出掩码。
- en: New `float_power` ufunc
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 `float_power` ufunc
- en: The new `float_power` ufunc is like the `power` function except all computation
    is done in a minimum precision of float64\. There was a long discussion on the
    numpy mailing list of how to treat integers to negative integer powers and a popular
    proposal was that the `__pow__` operator should always return results of at least
    float64 precision. The `float_power` function implements that option. Note that
    it does not support object arrays.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`float_power` ufunc类似于`power`函数，但所有计算都使用至少float64的最低精度进行。关于如何处理整数的负整数幂进行了长时间的讨论，一个受欢迎的提议是`__pow__`操作符应始终返回至少float64精度的结果。`float_power`函数实现了该选项。请注意，它不支持对象数组。
- en: '`np.loadtxt` now supports a single integer as `usecol` argument'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在支持一个整数作为`usecol`参数。'
- en: Instead of using `usecol=(n,)` to read the nth column of a file it is now allowed
    to use `usecol=n`. Also the error message is more user friendly when a non-integer
    is passed as a column index.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在允许不使用`usecol=(n,)`来读取文件的第n列，而是允许使用`usecol=n`。当作为列索引传递非整数时，错误消息更加友好。
- en: Improved automated bin estimators for `histogram`
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`histogram`改进了自动bin估计器
- en: Added ‘doane’ and ‘sqrt’ estimators to `histogram` via the `bins` argument.
    Added support for range-restricted histograms with automated bin estimation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`bins`参数，为`histogram`添加了‘doane’和‘sqrt’估计器。增加了对自动bin估计的范围限制直方图的支持。
- en: '`np.roll` can now roll multiple axes at the same time'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.roll`现在可以同时滚动多个轴'
- en: The `shift` and `axis` arguments to `roll` are now broadcast against each other,
    and each specified axis is shifted accordingly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`roll`的`shift`和`axis`参数现在相互广播，并相应地移位每个指定的轴。'
- en: The `__complex__` method has been implemented for the ndarrays
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法`__complex__`已经为ndarrays实现。
- en: Calling `complex()` on a size 1 array will now cast to a python complex.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`complex()`时，大小为1的数组现在将转换为Python复数。
- en: '`pathlib.Path` objects now supported'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持`pathlib.Path`对象
- en: The standard `np.load`, `np.save`, `np.loadtxt`, `np.savez`, and similar functions
    can now take `pathlib.Path` objects as an argument instead of a filename or open
    file object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的`np.load`，`np.save`，`np.loadtxt`，`np.savez`等函数现在可以接受`pathlib.Path`对象作为参数，而不是文件名或打开的文件对象。
- en: New `bits` attribute for `np.finfo`
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.finfo`的新`bits`属性'
- en: This makes `np.finfo` consistent with `np.iinfo` which already has that attribute.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这使`np.finfo`与已经具有该属性的`np.iinfo`一致。
- en: New `signature` argument to `np.vectorize`
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.vectorize`的新`signature`参数'
- en: This argument allows for vectorizing user defined functions with core dimensions,
    in the style of NumPy’s [generalized universal functions](../reference/c-api/generalized-ufuncs.html#c-api-generalized-ufuncs).
    This allows for vectorizing a much broader class of functions. For example, an
    arbitrary distance metric that combines two vectors to produce a scalar could
    be vectorized with `signature='(n),(n)->()'`. See `np.vectorize` for full details.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数允许使用类似于NumPy [generalized universal functions](../reference/c-api/generalized-ufuncs.html#c-api-generalized-ufuncs)的核心维度将用户定义的函数向量化。这允许向量化更广泛类别的函数。例如，将两个向量组合成一个标量的任意距离度量可以通过`signature='(n),(n)->()'`来向量化。详细信息请参阅`np.vectorize`。
- en: Emit py3kwarnings for division of integer arrays
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发出对整数数组的py3k警告
- en: 'To help people migrate their code bases from Python 2 to Python 3, the python
    interpreter has a handy option -3, which issues warnings at runtime. One of its
    warnings is for integer division:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为帮助人们将他们的代码从Python 2迁移到Python 3，python解释器有一个方便的选项-3，可以在运行时发出警告。其中一个警告是关于整数除法：
- en: '[PRE2]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Python 3, the new integer division semantics also apply to numpy arrays.
    With this version, numpy will emit a similar warning:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3中，新的整数除法语义也适用于numpy数组。通过这个版本，numpy会发出类似的警告：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: numpy.sctypes now includes bytes on Python3 too
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy.sctypes现在也在Python3上包括bytes
- en: Previously, it included str (bytes) and unicode on Python2, but only str (unicode)
    on Python3.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，在Python2上包括str（bytes）和unicode，在Python3上只有str（unicode）。
- en: Improvements
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`bitwise_and` identity changed'
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bitwise_and`标识已更改'
- en: The previous identity was 1 with the result that all bits except the LSB were
    masked out when the reduce method was used. The new identity is -1, which should
    work properly on twos complement machines as all bits will be set to one.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的标识是1，导致在使用reduce方法时除最低有效位外所有位都被屏蔽。新的标识是-1，在补码机器上应该能够正确工作，因为所有位将被设置为1。
- en: Generalized Ufuncs will now unlock the GIL
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc现在将解锁GIL
- en: Generalized Ufuncs, including most of the linalg module, will now unlock the
    Python global interpreter lock.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 广义ufunc，包括大部分linalg模块，现在将解锁Python全局解释器锁。
- en: Caches in *np.fft* are now bounded in total size and item count
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.fft*中的缓存现在在总大小和项目计数上受到限制'
- en: The caches in *np.fft* that speed up successive FFTs of the same length can
    no longer grow without bounds. They have been replaced with LRU (least recently
    used) caches that automatically evict no longer needed items if either the memory
    size or item count limit has been reached.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '*np.fft*中的缓存，加速了相同长度的连续FFT，现在不能无限增长。它们被LRU（最近最少使用）缓存所取代，如果达到内存大小或项目计数限制，它们将自动清除不再需要的项目。'
- en: Improved handling of zero-width string/unicode dtypes
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了对零宽字符串/Unicode数据类型的处理
- en: Fixed several interfaces that explicitly disallowed arrays with zero-width string
    dtypes (i.e. `dtype('S0')` or `dtype('U0')`, and fixed several bugs where such
    dtypes were not handled properly. In particular, changed `ndarray.__new__` to
    not implicitly convert `dtype('S0')` to `dtype('S1')` (and likewise for unicode)
    when creating new arrays.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了明确禁止具有零宽字符串数据类型的数组（即`dtype('S0')`或`dtype('U0')`）的几个接口，并修复了处理此类数据类型时未正确处理的几个错误。特别是，更改`ndarray.__new__`，以使其在创建新数组时不会自动将`dtype('S0')`转换为`dtype('S1')`（反之亦然），并为unicode类型也是如此。
- en: Integer ufuncs vectorized with AVX2
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AVX2矢量化的整数ufunc
- en: If the cpu supports it at runtime the basic integer ufuncs now use AVX2 instructions.
    This feature is currently only available when compiled with GCC.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果CPU在运行时支持它，则基本整数ufunc现在使用AVX2指令。目前，只有在使用GCC编译时才能使用此功能。
- en: Order of operations optimization in `np.einsum`
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: np.einsum中的操作顺序进行了优化
- en: '`np.einsum` now supports the `optimize` argument which will optimize the order
    of contraction. For example, `np.einsum` would complete the chain dot example
    `np.einsum(‘ij,jk,kl->il’, a, b, c)` in a single pass which would scale like `N^4`;
    however, when `optimize=True` `np.einsum` will create an intermediate array to
    reduce this scaling to `N^3` or effectively `np.dot(a, b).dot(c)`. Usage of intermediate
    tensors to reduce scaling has been applied to the general einsum summation notation.
    See `np.einsum_path` for more details.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: np.einsum现在支持`optimize`参数，可以优化收缩的顺序。例如，`np.einsum`将在单次传递中完成链点示例`np.einsum(‘ij,jk,kl->il’,
    a, b, c)`，其规模为`N^4`；然而，当`optimize=True`时，`np.einsum`将创建一个中间数组，将此规模减小到`N^3`或有效地`np.dot(a,
    b).dot(c)`。使用中间张量减少规模已经应用于一般的einsum求和符号。有关更多详细信息，请参见`np.einsum_path`。
- en: quicksort has been changed to an introsort
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速排序已更改为introsort
- en: The quicksort kind of `np.sort` and `np.argsort` is now an introsort which is
    regular quicksort but changing to a heapsort when not enough progress is made.
    This retains the good quicksort performance while changing the worst case runtime
    from `O(N^2)` to `O(N*log(N))`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: np.sort和np.argsort的quicksort类型现在是introsort，这是常规quicksort，但在进展不足时改变为heapsort。这保留了quicksort的良好性能，同时将最坏情况运行时间从`O(N^2)`更改为`O(N*log(N))`。
- en: '`ediff1d` improved performance and subclass handling'
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ediff1d提高了性能和子类处理
- en: The ediff1d function uses an array instead on a flat iterator for the subtraction.
    When to_begin or to_end is not None, the subtraction is performed in place to
    eliminate a copy operation. A side effect is that certain subclasses are handled
    better, namely astropy.Quantity, since the complete array is created, wrapped,
    and then begin and end values are set, instead of using concatenate.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ediff1d函数使用数组而不是平坦的迭代器进行减法。当to_begin或to_end不为None时，执行原地减法以消除复制操作。副作用是某些子类的处理更好，即astropy.Quantity，因为创建了完整的数组，然后包装，然后设置了开始和结束值，而不是使用concatenate。
- en: Improved precision of `ndarray.mean` for float16 arrays
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了float16数组的`ndarray.mean`的精度
- en: The computation of the mean of float16 arrays is now carried out in float32
    for improved precision. This should be useful in packages such as Theano where
    the precision of float16 is adequate and its smaller footprint is desirable.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在以float32执行float16数组的均值计算，以提高精度。这在Theano等包中应该很有用，其中float16的精度是足够的，而其较小的占用空间是可取的。
- en: Changes
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: All array-like methods are now called with keyword arguments in fromnumeric.py
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所有类似数组的方法现在在fromnumeric.py中使用关键字参数调用
- en: Internally, many array-like methods in fromnumeric.py were being called with
    positional arguments instead of keyword arguments as their external signatures
    were doing. This caused a complication in the downstream ‘pandas’ library that
    encountered an issue with ‘numpy’ compatibility. Now, all array-like methods in
    this module are called with keyword arguments instead.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在fromnumeric.py中，许多类似数组的方法在内部用位置参数而不是关键字参数调用，因为它们的外部签名是这样的。这在下游的‘pandas’库中引起了复杂性，遇到了‘numpy’兼容性的问题。现在，这个模块中的所有类似数组的方法都使用关键字参数调用。
- en: Operations on np.memmap objects return numpy arrays in most cases
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大多数情况下，np.memmap对象上的操作会返回numpy数组
- en: Previously operations on a memmap object would misleadingly return a memmap
    instance even if the result was actually not memmapped. For example, `arr + 1`
    or `arr + arr` would return memmap instances, although no memory from the output
    array is memmapped. Version 1.12 returns ordinary numpy arrays from these operations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以前对memmap对象的操作会误导性地返回一个memmap实例，即使结果实际上并非memmap。例如，`arr + 1`或`arr + arr`将返回memmap实例，尽管输出数组的内存没有被映射。1.12版本将从这些操作中返回普通的numpy数组。
- en: Also, reduction of a memmap (e.g. `.sum(axis=None`) now returns a numpy scalar
    instead of a 0d memmap.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对memmap的减少（例如`.sum(axis=None`）现在返回一个numpy标量，而不是0d的memmap。
- en: stacklevel of warnings increased
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加警告的stacklevel
- en: The stacklevel for python based warnings was increased so that most warnings
    will report the offending line of the user code instead of the line the warning
    itself is given. Passing of stacklevel is now tested to ensure that new warnings
    will receive the `stacklevel` argument.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于Python的警告，stacklevel被增加，以便大多数警告将报告用户代码的有问题行而不是警告本身的行。现在测试传递stacklevel以确保新警告将接收`stacklevel`参数。
- en: This causes warnings with the “default” or “module” filter to be shown once
    for every offending user code line or user module instead of only once. On python
    versions before 3.4, this can cause warnings to appear that were falsely ignored
    before, which may be surprising especially in test suits.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致“default”或“module”过滤器的警告在每个有问题的用户代码行或用户模块上都显示一次，而不是只显示一次。在3.4版本之前的Python版本中，这可能导致以前被错误地忽略的警告出现，这可能会让人感到惊讶，特别是在测试套件中。
- en: Highlights
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: The NumPy 1.12.0 release contains a large number of fixes and improvements,
    but few that stand out above all others. That makes picking out the highlights
    somewhat arbitrary but the following may be of particular interest or indicate
    areas likely to have future consequences.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.12.0版本包含大量修复和改进，但没有几个是特别突出的。这使得挑选亮点有点随意，但以下内容可能特别引起兴趣，或者表明可能会产生未来影响的领域。
- en: Order of operations in `np.einsum` can now be optimized for large speed improvements.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.einsum`中操作的顺序现在可以针对大的速度改进进行优化。'
- en: New `signature` argument to `np.vectorize` for vectorizing with core dimensions.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.vectorize`的新的`signature`参数，以便使用核心维度进行矢量化。'
- en: The `keepdims` argument was added to many functions.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多函数中添加了`keepdims`参数。
- en: New context manager for testing warnings
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于测试警告的新上下文管理器
- en: Support for BLIS in numpy.distutils
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils中对BLIS的支持
- en: Much improved support for PyPy (not yet finished)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对PyPy的支持得到了大大改进（尚未完成）
- en: Dropped Support
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持已停止
- en: Support for Python 2.6, 3.2, and 3.3 has been dropped.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Python 2.6、3.2和3.3已经取消。
- en: Added Support
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已增加的支持
- en: Support for PyPy 2.7 v5.6.0 has been added. While not complete (nditer `updateifcopy`
    is not supported yet), this is a milestone for PyPy’s C-API compatibility layer.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已添加对PyPy 2.7 v5.6.0的支持。尽管尚不完整（nditer `updateifcopy`尚不支持），但这对于PyPy的C-API兼容层是一个里程碑。
- en: Build System Changes
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建系统的改变
- en: Library order is preserved, instead of being reordered to match that of the
    directories.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库的顺序被保留，而不是重新排序以匹配目录顺序。
- en: Deprecations
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已弃用
- en: Assignment of ndarray object’s `data` attribute
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray对象的`data`属性赋值
- en: Assigning the ‘data’ attribute is an inherently unsafe operation as pointed
    out in gh-7083\. Such a capability will be removed in the future.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值‘data’属性是一个本质上不安全的操作，如gh-7083中指出的那样。这样的功能将在将来被移除。
- en: Unsafe int casting of the num attribute in `linspace`
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linspace`中num属性的不安全整数转换'
- en: '`np.linspace` now raises DeprecationWarning when num cannot be safely interpreted
    as an integer.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当num无法安全解释为整数时，`np.linspace`现在会触发DeprecationWarning。
- en: Insufficient bit width parameter to `binary_repr`
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`binary_repr`的位宽参数不足'
- en: If a ‘width’ parameter is passed into `binary_repr` that is insufficient to
    represent the number in base 2 (positive) or 2’s complement (negative) form, the
    function used to silently ignore the parameter and return a representation using
    the minimal number of bits needed for the form in question. Such behavior is now
    considered unsafe from a user perspective and will raise an error in the future.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向`binary_repr`传递一个“宽度”参数，该参数不足以表示基于2进制的数字（正数或2的补码形式的负数）所需的位数，函数将静默忽略该参数，并返回使用所需形式的最小位数的表示。这样的行为现在从用户角度被认为是不安全的，并将在将来引发错误。
- en: Assignment of ndarray object’s `data` attribute
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对ndarray对象的`data`属性进行赋值
- en: Assigning the ‘data’ attribute is an inherently unsafe operation as pointed
    out in gh-7083\. Such a capability will be removed in the future.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值‘data’属性是一种天生不安全的操作，正如在gh-7083中所指出的那样。这样的能力将在将来被移除。
- en: Unsafe int casting of the num attribute in `linspace`
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`linspace`中num属性进行不安全的整数类型转换
- en: '`np.linspace` now raises DeprecationWarning when num cannot be safely interpreted
    as an integer.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当num无法安全解释为整数时，`np.linspace`现在会引发DeprecationWarning。
- en: Insufficient bit width parameter to `binary_repr`
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`binary_repr`的位数参数不足'
- en: If a ‘width’ parameter is passed into `binary_repr` that is insufficient to
    represent the number in base 2 (positive) or 2’s complement (negative) form, the
    function used to silently ignore the parameter and return a representation using
    the minimal number of bits needed for the form in question. Such behavior is now
    considered unsafe from a user perspective and will raise an error in the future.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`binary_repr`传入一个“宽度”参数，该参数无法表示正数的二进制（或负数的二进制补码）形式所需的位数，函数会静默忽略该参数，并返回一个使用所需形式的最少位数表示的结果。从用户角度来看，这样的行为现在被视为不安全，将来会引发错误。
- en: Future Changes
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将来的变化
- en: In 1.13 NAT will always compare False except for `NAT != NAT`, which will be
    True. In short, NAT will behave like NaN
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.13版中，NAT将总是比较False，除了`NAT != NAT`，它将会返回True。简而言之，NAT将表现得像NaN。
- en: In 1.13 `np.average` will preserve subclasses, to match the behavior of most
    other numpy functions such as np.mean. In particular, this means calls which returned
    a scalar may return a 0-d subclass object instead.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.13版中，`np.average`将保留子类，以匹配大多数其他numpy函数的行为，如np.mean。特别地，这意味着返回标量的调用可能会返回一个0维的子类对象。
- en: Multiple-field manipulation of structured arrays
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段操作
- en: 'In 1.13 the behavior of structured arrays involving multiple fields will change
    in two ways:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版中，涉及多个字段的结构化数组的行为将以两种方式发生变化：
- en: First, indexing a structured array with multiple fields (eg, `arr[['f1', 'f3']]`)
    will return a view into the original array in 1.13, instead of a copy. Note the
    returned view will have extra padding bytes corresponding to intervening fields
    in the original array, unlike the copy in 1.12, which will affect code such as
    `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在1.13版中对具有多个字段的结构化数组进行索引（例如，`arr[['f1', 'f3']]`）将返回原始数组的视图，而不是副本。注意返回的视图将具有原始数组中的中间字段对应的额外填充字节，不同于1.12中的副本，这将影响诸如`arr[['f1',
    'f3']].view(newdtype)`的代码。
- en: 'Second, for numpy versions 1.6 to 1.12 assignment between structured arrays
    occurs “by field name”: Fields in the destination array are set to the identically-named
    field in the source array or to 0 if the source does not have a field:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在numpy版本1.6至1.12之间，结构化数组之间的赋值将以“按字段名称”进行：目标数组中的字段将设置为源数组中同名的字段，或者如果源数组中没有该字段，则设置为0：
- en: '[PRE4]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In 1.13 assignment will instead occur “by position”: The Nth field of the destination
    will be set to the Nth field of the source regardless of field name. The old behavior
    can be obtained by using indexing to reorder the fields before assignment, e.g.,
    `b[[''x'', ''y'']] = a[[''y'', ''x'']]`.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版中，赋值将以“按位置”进行：目标的第N个字段将被设置为源的第N个字段，不管字段名称如何。可以通过在赋值之前使用索引对字段重新排序来获得旧的行为，例如，`b[['x',
    'y']] = a[['y', 'x']]`。
- en: Multiple-field manipulation of structured arrays
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化数组的多字段操作
- en: 'In 1.13 the behavior of structured arrays involving multiple fields will change
    in two ways:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版中，涉及多个字段的结构化数组的行为将以两种方式发生变化：
- en: First, indexing a structured array with multiple fields (eg, `arr[['f1', 'f3']]`)
    will return a view into the original array in 1.13, instead of a copy. Note the
    returned view will have extra padding bytes corresponding to intervening fields
    in the original array, unlike the copy in 1.12, which will affect code such as
    `arr[['f1', 'f3']].view(newdtype)`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用多个字段的结构化数组进行索引（例如，`arr[['f1'，'f3']]`）将在1.13中返回原始数组的视图，而不是副本。 请注意，返回的视图将具有与原始数组中介入字段对应的额外填充字节，与1.12中的副本不同，这将影响诸如`arr[['f1'，'f3']]
    .view（newdtype）`之类的代码。
- en: 'Second, for numpy versions 1.6 to 1.12 assignment between structured arrays
    occurs “by field name”: Fields in the destination array are set to the identically-named
    field in the source array or to 0 if the source does not have a field:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，在numpy版本1.6到1.12之间，结构化数组之间的赋值“按字段名”进行：目标数组中的字段被设置为源数组中同名字段，如果源没有字段，则设置为0：
- en: '[PRE5]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In 1.13 assignment will instead occur “by position”: The Nth field of the destination
    will be set to the Nth field of the source regardless of field name. The old behavior
    can be obtained by using indexing to reorder the fields before assignment, e.g.,
    `b[[''x'', ''y'']] = a[[''y'', ''x'']]`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.13版本中，赋值将“按位置”进行：目标的第N个字段将被设置为源的第N个字段，而不考虑字段名称。 可以通过使用索引重新排序字段来获得旧的行为，例如，`b[['x'，'y']]
    = a[['y'，'x']]`。
- en: Compatibility notes
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性注意事项
- en: DeprecationWarning to error
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用警告改为错误
- en: Indexing with floats raises `IndexError`, e.g., a[0, 0.0].
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用浮点数进行索引引发`IndexError`，例如，a[0，0.0]。
- en: Indexing with non-integer array_like raises `IndexError`, e.g., `a['1', '2']`
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非整数array_like进行索引引发`IndexError`，例如，`a['1'，'2']`
- en: Indexing with multiple ellipsis raises `IndexError`, e.g., `a[..., ...]`.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号进行索引引发`IndexError`，例如，`a[..., ...]`。
- en: Non-integers used as index values raise `TypeError`, e.g., in `reshape`, `take`,
    and specifying reduce axis.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非整数作为索引值引发`TypeError`，例如，在`reshape`，`take`和指定减小轴的地方。
- en: FutureWarning to changed behavior
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来警告改为更改的行为
- en: '`np.full` now returns an array of the fill-value’s dtype if no dtype is given,
    instead of defaulting to float.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未给出dtype，则`np.full`现在返回填充值dtype的数组，而不是默认为浮点数。
- en: '`np.average` will emit a warning if the argument is a subclass of ndarray,
    as the subclass will be preserved starting in 1.13\. (see Future Changes)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是ndarray的子类，`np.average`将发出警告，因为从1.13开始将保留子类。 （见未来更改）
- en: '`power` and `**` raise errors for integer to negative integer powers'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于整数的负指数，`power`和`**`引发错误
- en: The previous behavior depended on whether numpy scalar integers or numpy integer
    arrays were involved.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的行为取决于涉及numpy标量整数或numpy整数数组。
- en: For arrays
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组
- en: Zero to negative integer powers returned least integral value.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将零求负整数幂将返回最小整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正负1都返回了正确的负整数幂。
- en: The remaining integers returned zero when raised to negative integer powers.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的整数在提高负整数幂时有时返回零，有时返回正确的浮点数，这取决于整数类型的组合。
- en: For scalars
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标量
- en: Zero to negative integer powers returned least integral value.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将零求负整数幂将返回最小整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正负1都返回了正确的负整数幂。
- en: The remaining integers sometimes returned zero, sometimes the correct float
    depending on the integer type combination.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩下的整数有时返回零，有时返回正确的浮点数，具体取决于整数类型的组合。
- en: All of these cases now raise a `ValueError` except for those integer combinations
    whose common type is float, for instance uint64 and int8\. It was felt that a
    simple rule was the best way to go rather than have special exceptions for the
    integer units. If you need negative powers, use an inexact type.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些情况除了那些公共类型为浮点数的整数组合之外都会引发`ValueError`，例如uint64和int8。人们觉得一个简单的规则比为整数单元制定特殊的例外更好。
    如果您需要负指数，请使用不精确的类型。
- en: Relaxed stride checking is the default
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 宽松的步长检查是默认的
- en: This will have some impact on code that assumed that `F_CONTIGUOUS` and `C_CONTIGUOUS`
    were mutually exclusive and could be set to determine the default order for arrays
    that are now both.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对假定`F_CONTIGUOUS`和`C_CONTIGUOUS`互斥，并且可设置为确定现在都是的数组的默认顺序的代码产生一些影响。
- en: The `np.percentile` ‘midpoint’ interpolation method fixed for exact indices
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于`np.percentile`'midpoint'插值方法已修复以匹配准确的索引
- en: The ‘midpoint’ interpolator now gives the same result as ‘lower’ and ‘higher’
    when the two coincide. Previous behavior of ‘lower’ + 0.5 is fixed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当两者相同时，'midpoint'插值器现在给出与'lower'和'higher'相同的结果。 以前的'lower' + 0.5的行为已修正。
- en: '`keepdims` kwarg is passed through to user-class methods'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims` kwarg传递给用户类方法'
- en: 'numpy functions that take a `keepdims` kwarg now pass the value through to
    the corresponding methods on ndarray sub-classes. Previously the `keepdims` keyword
    would be silently dropped. These functions now have the following behavior:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将带有`keepdims`关键字参数的numpy函数的值传递给ndarray子类的相应方法。之前，`keepdims`关键字参数将被静默丢弃。这些函数现在具有以下行为：
- en: If user does not provide `keepdims`, no keyword is passed to the underlying
    method.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户没有提供`keepdims`，则不会将任何关键字传递给底层方法。
- en: Any user-provided value of `keepdims` is passed through as a keyword argument
    to the method.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何用户提供的`keepdims`的值都将作为关键字参数传递给方法。
- en: This will raise in the case where the method does not support a `keepdims` kwarg
    and the user explicitly passes in `keepdims`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法不支持`keepdims`关键字参数，并且用户明确传入`keepdims`时，此操作将引发错误。
- en: 'The following functions are changed: `sum`, `product`, `sometrue`, `alltrue`,
    `any`, `all`, `amax`, `amin`, `prod`, `mean`, `std`, `var`, `nanmin`, `nanmax`,
    `nansum`, `nanprod`, `nanmean`, `nanmedian`, `nanvar`, `nanstd`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 下列函数已更改：`sum`，`product`，`sometrue`，`alltrue`，`any`，`all`，`amax`，`amin`，`prod`，`mean`，`std`，`var`，`nanmin`，`nanmax`，`nansum`，`nanprod`，`nanmean`，`nanmedian`，`nanvar`，`nanstd`
- en: '`bitwise_and` identity changed'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bitwise_and`标识已更改'
- en: The previous identity was 1, it is now -1\. See entry in Improvements for more
    explanation.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的标识为1，现在为-1。有关更多解释，请参见改进条目。
- en: ma.median warns and returns nan when unmasked invalid values are encountered
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当遇到未屏蔽的无效值时，`ma.median`会发出警告并返回`nan`。
- en: Similar to unmasked median the masked median *ma.median* now emits a Runtime
    warning and returns *NaN* in slices where an unmasked *NaN* is present.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于未屏蔽的中位数，*ma.median*现在在存在未屏蔽的*NaN*的片段中发出运行时警告并返回*NaN*。
- en: Greater consistency in `assert_almost_equal`
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`assert_almost_equal`中更具一致性
- en: 'The precision check for scalars has been changed to match that for arrays.
    It is now:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 标量的精度检查已更改以匹配数组的精度检查。现在是：
- en: '[PRE6]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that this is looser than previously documented, but agrees with the previous
    implementation used in `assert_array_almost_equal`. Due to the change in implementation
    some very delicate tests may fail that did not fail before.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这比先前记录的更宽松，但与`assert_array_almost_equal`中使用的先前实现一致。由于实现的更改，一些非常微妙的测试可能会失败，而以前不会失败。
- en: '`NoseTester` behaviour of warnings during testing'
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NoseTester`测试期间的警告行为'
- en: When `raise_warnings="develop"` is given, all uncaught warnings will now be
    considered a test failure. Previously only selected ones were raised. Warnings
    which are not caught or raised (mostly when in release mode) will be shown once
    during the test cycle similar to the default python settings.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定了`raise_warnings="develop"`，那么所有未捕获的警告现在都将被视为测试失败。之前只有一些警告被引发。没有被捕获或引发的警告（在发布模式下大多数情况下）将在测试周期中显示一次，类似于默认的python设置。
- en: '`assert_warns` and `deprecated` decorator more specific'
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_warns`和`deprecated`装饰器更具体'
- en: The `assert_warns` function and context manager are now more specific to the
    given warning category. This increased specificity leads to them being handled
    according to the outer warning settings. This means that no warning may be raised
    in cases where a wrong category warning is given and ignored outside the context.
    Alternatively the increased specificity may mean that warnings that were incorrectly
    ignored will now be shown or raised. See also the new `suppress_warnings` context
    manager. The same is true for the `deprecated` decorator.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_warns`函数和上下文管理器现在更具体于给定的警告类别。这种增加的特异性导致它们根据外部警告设置进行处理。这意味着在给定错误类别警告并在上下文之外被忽略的情况下不会引发任何警告。或者增加的特异性可能意味着错误地被忽略的警告现在将被显示或引发。另请参阅新的`suppress_warnings`上下文管理器。相同的情况也适用于`deprecated`装饰器。'
- en: C API
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: No changes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 没有改变。
- en: DeprecationWarning to error
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将DeprecationWarning更改为错误
- en: Indexing with floats raises `IndexError`, e.g., a[0, 0.0].
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浮点数进行索引会引发`IndexError`，例如，`a[0, 0.0]`。
- en: Indexing with non-integer array_like raises `IndexError`, e.g., `a['1', '2']`
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非整数`array_like`进行索引会引发`IndexError`，例如，`a['1', '2']`。
- en: Indexing with multiple ellipsis raises `IndexError`, e.g., `a[..., ...]`.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号进行索引会引发`IndexError`，例如，`a[..., ...]`。
- en: Non-integers used as index values raise `TypeError`, e.g., in `reshape`, `take`,
    and specifying reduce axis.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非整数作为索引值会引发`TypeError`，例如，在`reshape`，`take`和指定减轻轴时。
- en: FutureWarning to changed behavior
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来警告以更改行为
- en: '`np.full` now returns an array of the fill-value’s dtype if no dtype is given,
    instead of defaulting to float.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有给出dtype，则`np.full`现在会返回填充值的dtype数组，而不会默认为浮点数。
- en: '`np.average` will emit a warning if the argument is a subclass of ndarray,
    as the subclass will be preserved starting in 1.13\. (see Future Changes)'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果参数是ndarray的子类，`np.average`将发出警告，因为从1.13版开始将保留子类。（请参阅未来更改）
- en: '`power` and `**` raise errors for integer to negative integer powers'
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对整数取负整数次幂时，`power`和`**`会引发错误。
- en: The previous behavior depended on whether numpy scalar integers or numpy integer
    arrays were involved.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的行为取决于涉及numpy标量整数还是numpy整数数组。
- en: For arrays
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组
- en: Zero to negative integer powers returned least integral value.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零取负整数次幂时返回最小的整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1和-1都取负整数次幂都返回正确的值。
- en: The remaining integers returned zero when raised to negative integer powers.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余整数取负整数次幂时返回零。
- en: For scalars
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标量
- en: Zero to negative integer powers returned least integral value.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零取负整数次幂时返回最小的整数值。
- en: Both 1, -1 to negative integer powers returned correct values.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1和-1都取负整数次幂都返回正确的值。
- en: The remaining integers sometimes returned zero, sometimes the correct float
    depending on the integer type combination.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余整数有时返回零，有时根据整数类型组合返回正确的浮点数。
- en: All of these cases now raise a `ValueError` except for those integer combinations
    whose common type is float, for instance uint64 and int8\. It was felt that a
    simple rule was the best way to go rather than have special exceptions for the
    integer units. If you need negative powers, use an inexact type.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情况现在全部引发`ValueError`，除了那些整数组合的常见类型为浮点数的情况，例如uint64和int8。我们认为，简单的规则是最好的选择，而不是对整数单位进行特殊的例外处理。如果需要负数次幂，请使用不精确类型。
- en: Relaxed stride checking is the default
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 宽松的步幅检查是默认值。
- en: This will have some impact on code that assumed that `F_CONTIGUOUS` and `C_CONTIGUOUS`
    were mutually exclusive and could be set to determine the default order for arrays
    that are now both.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对假设`F_CONTIGUOUS`和`C_CONTIGUOUS`互斥并且可以设置为确定现在两者都是数组默认顺序的代码产生一些影响。
- en: The `np.percentile` ‘midpoint’ interpolation method fixed for exact indices
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.percentile`的“中点”插值方法已修复为确切索引'
- en: The ‘midpoint’ interpolator now gives the same result as ‘lower’ and ‘higher’
    when the two coincide. Previous behavior of ‘lower’ + 0.5 is fixed.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当“中点”插值器与“低点”和“高点”重合时，现在提供相同的结果。修复了“低点"+0.5的前期行为。
- en: '`keepdims` kwarg is passed through to user-class methods'
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims`关键字参数传递给用户类方法。'
- en: 'numpy functions that take a `keepdims` kwarg now pass the value through to
    the corresponding methods on ndarray sub-classes. Previously the `keepdims` keyword
    would be silently dropped. These functions now have the following behavior:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`keepdims`关键字参数的numpy函数现在会将该值传递给ndarray子类对应的方法。以前`keepdims`关键字参数会被静默丢弃。这些函数现在有以下行为：
- en: If user does not provide `keepdims`, no keyword is passed to the underlying
    method.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户没有提供`keepdims`，则不会向底层方法传递关键字。
- en: Any user-provided value of `keepdims` is passed through as a keyword argument
    to the method.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何用户提供的`keepdims`值都将作为关键字参数传递给方法。
- en: This will raise in the case where the method does not support a `keepdims` kwarg
    and the user explicitly passes in `keepdims`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法不支持`keepdims`关键字参数，并且用户明确传递`keepdims`的情况下，将引发异常。
- en: 'The following functions are changed: `sum`, `product`, `sometrue`, `alltrue`,
    `any`, `all`, `amax`, `amin`, `prod`, `mean`, `std`, `var`, `nanmin`, `nanmax`,
    `nansum`, `nanprod`, `nanmean`, `nanmedian`, `nanvar`, `nanstd`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数已更改：`sum`，`product`，`sometrue`，`alltrue`，`any`，`all`，`amax`，`amin`，`prod`，`mean`，`std`，`var`，`nanmin`，`nanmax`，`nansum`，`nanprod`，`nanmean`，`nanmedian`，`nanvar`，`nanstd`
- en: '`bitwise_and` identity changed'
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bitwise_and`的标识已更改'
- en: The previous identity was 1, it is now -1\. See entry in Improvements for more
    explanation.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的标识是1，现在是-1。有关更多解释，请参阅改进条目。
- en: ma.median warns and returns nan when unmasked invalid values are encountered
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当未掩码的无效值遇到时，ma.median会发出警告并返回nan。
- en: Similar to unmasked median the masked median *ma.median* now emits a Runtime
    warning and returns *NaN* in slices where an unmasked *NaN* is present.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于未掩码的中位数，掩码中位数*ma.median*现在在存在未掩码*NaN*的切片中发出运行时警告并返回*NaN*。
- en: Greater consistency in `assert_almost_equal`
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_almost_equal`中的一致性更大'
- en: 'The precision check for scalars has been changed to match that for arrays.
    It is now:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对标量的精度检查已更改为匹配数组的精度检查。现在是：
- en: '[PRE7]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that this is looser than previously documented, but agrees with the previous
    implementation used in `assert_array_almost_equal`. Due to the change in implementation
    some very delicate tests may fail that did not fail before.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这比以前的文档要宽松，但与以前在 `assert_array_almost_equal` 中使用的实现一致。由于实现的改变，一些非常微妙的测试可能会失败，而以前则不会失败。
- en: '`NoseTester` behaviour of warnings during testing'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NoseTester` 在测试过程中对警告的行为'
- en: When `raise_warnings="develop"` is given, all uncaught warnings will now be
    considered a test failure. Previously only selected ones were raised. Warnings
    which are not caught or raised (mostly when in release mode) will be shown once
    during the test cycle similar to the default python settings.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定 `raise_warnings="develop"` 时，所有未捕获的警告现在都会被视为测试失败。以前只有选定的警告会被提出。未捕获或提出的警告（主要是在发布模式下）将在测试周期内显示一次，类似于默认的Python设置。
- en: '`assert_warns` and `deprecated` decorator more specific'
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_warns` 和 `deprecated` 修饰器更具体'
- en: The `assert_warns` function and context manager are now more specific to the
    given warning category. This increased specificity leads to them being handled
    according to the outer warning settings. This means that no warning may be raised
    in cases where a wrong category warning is given and ignored outside the context.
    Alternatively the increased specificity may mean that warnings that were incorrectly
    ignored will now be shown or raised. See also the new `suppress_warnings` context
    manager. The same is true for the `deprecated` decorator.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_warns` 函数和上下文管理器现在更具体于给定的警告类别。增加的特异性导致它们根据外部警告设置进行处理。这意味着在给出并在上下文之外被忽略的情况下可能不会提出警告。另外，增加的特异性可能意味着之前错误被忽略的警告现在将被显示或提出。另请参阅新的
    `suppress_warnings` 上下文管理器。对于 `deprecated` 修饰器也是如此。'
- en: C API
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: No changes.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 没有变化。
- en: New Features
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: Writeable keyword argument for `as_strided`
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`as_strided` 的 `writeable` 关键字参数'
- en: '`np.lib.stride_tricks.as_strided` now has a `writeable` keyword argument. It
    can be set to False when no write operation to the returned array is expected
    to avoid accidental unpredictable writes.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.lib.stride_tricks.as_strided` 现在具有一个 `writeable` 关键字参数。当不希望对返回的数组进行写操作时，可以将其设置为
    False，以避免意外的不可预测的写入。'
- en: '`axes` keyword argument for `rot90`'
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rot90` 的 `axes` 关键字参数'
- en: The `axes` keyword argument in `rot90` determines the plane in which the array
    is rotated. It defaults to `axes=(0,1)` as in the original function.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`rot90` 中的 `axes` 关键字参数确定了数组旋转的平面。默认为 `axes=(0,1)`，与原始函数相同。'
- en: Generalized `flip`
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泛化的 `flip`
- en: '`flipud` and `fliplr` reverse the elements of an array along axis=0 and axis=1
    respectively. The newly added `flip` function reverses the elements of an array
    along any given axis.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`flipud` 和 `fliplr` 反转数组元素沿 axis=0 和 axis=1 分别。新添加的 `flip` 函数沿任何给定轴反转数组元素。'
- en: '`np.count_nonzero` now has an `axis` parameter, allowing non-zero counts to
    be generated on more than just a flattened array object.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.count_nonzero` 现在具有一个 `axis` 参数，允许在不仅仅是平坦数组对象上生成非零计数。'
- en: BLIS support in `numpy.distutils`
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy中的BLIS支持
- en: Building against the BLAS implementation provided by the BLIS library is now
    supported. See the `[blis]` section in `site.cfg.example` (in the root of the
    numpy repo or source distribution).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在支持使用BLIS库提供的BLAS实现构建。请参阅NumPy存储库或源分发包根目录中的 `site.cfg.example` 中的 `[blis]`
    部分。
- en: Hook in `numpy/__init__.py` to run distribution-specific checks
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 `numpy/__init__.py` 中添加挂钩以运行特定于分发的检查
- en: Binary distributions of numpy may need to run specific hardware checks or load
    specific libraries during numpy initialization. For example, if we are distributing
    numpy with a BLAS library that requires SSE2 instructions, we would like to check
    the machine on which numpy is running does have SSE2 in order to give an informative
    error.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的二进制分发可能需要在NumPy初始化期间运行特定硬件检查或加载特定库。例如，如果我们将带有要求SSE2指令的BLAS库的NumPy进行分发，我们希望检查NumPy运行的计算机是否具有SSE2，以便提供有意义的错误信息。
- en: Add a hook in `numpy/__init__.py` to import a `numpy/_distributor_init.py` file
    that will remain empty (bar a docstring) in the standard numpy source, but that
    can be overwritten by people making binary distributions of numpy.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `numpy/__init__.py` 中添加一个挂钩以导入 `numpy/_distributor_init.py` 文件，该文件将保持空白（除了一个文档字符串）在标准的NumPy源中，但在制作NumPy的二进制分发时可以被覆盖。
- en: New nanfunctions `nancumsum` and `nancumprod` added
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的NaN函数 `nancumsum` 和 `nancumprod`
- en: Nan-functions `nancumsum` and `nancumprod` have been added to compute `cumsum`
    and `cumprod` by ignoring nans.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了NaN函数 `nancumsum` 和 `nancumprod` 来计算 `cumsum` 和 `cumprod` 时忽略NaN值。
- en: '`np.interp` can now interpolate complex values'
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.lib.interp(x, xp, fp)` now allows the interpolated array `fp` to be complex
    and will interpolate at `complex128` precision.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: New polynomial evaluation function `polyvalfromroots` added
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new function `polyvalfromroots` evaluates a polynomial at given points from
    the roots of the polynomial. This is useful for higher order polynomials, where
    expansion into polynomial coefficients is inaccurate at machine precision.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: New array creation function `geomspace` added
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The new function `geomspace` generates a geometric sequence. It is similar
    to `logspace`, but with start and stop specified directly: `geomspace(start, stop)`
    behaves the same as `logspace(log10(start), log10(stop))`.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: New context manager for testing warnings
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new context manager `suppress_warnings` has been added to the testing utils.
    This context manager is designed to help reliably test warnings. Specifically
    to reliably filter/ignore warnings. Ignoring warnings by using an “ignore” filter
    in Python versions before 3.4.x can quickly result in these (or similar) warnings
    not being tested reliably.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: The context manager allows to filter (as well as record) warnings similar to
    the `catch_warnings` context, but allows for easier specificity. Also printing
    warnings that have not been filtered or nesting the context manager will work
    as expected. Additionally, it is possible to use the context manager as a decorator
    which can be useful when multiple tests give need to hide the same warning.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: New masked array functions `ma.convolve` and `ma.correlate` added
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These functions wrapped the non-masked versions, but propagate through masked
    values. There are two different propagation modes. The default causes masked values
    to contaminate the result with masks, but the other mode only outputs masks if
    there is no alternative.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: New `float_power` ufunc
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `float_power` ufunc is like the `power` function except all computation
    is done in a minimum precision of float64\. There was a long discussion on the
    numpy mailing list of how to treat integers to negative integer powers and a popular
    proposal was that the `__pow__` operator should always return results of at least
    float64 precision. The `float_power` function implements that option. Note that
    it does not support object arrays.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '`np.loadtxt` now supports a single integer as `usecol` argument'
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of using `usecol=(n,)` to read the nth column of a file it is now allowed
    to use `usecol=n`. Also the error message is more user friendly when a non-integer
    is passed as a column index.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Improved automated bin estimators for `histogram`
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added ‘doane’ and ‘sqrt’ estimators to `histogram` via the `bins` argument.
    Added support for range-restricted histograms with automated bin estimation.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '`np.roll` can now roll multiple axes at the same time'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `shift` and `axis` arguments to `roll` are now broadcast against each other,
    and each specified axis is shifted accordingly.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: The `__complex__` method has been implemented for the ndarrays
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 ndarrays 实现了`__complex__`方法
- en: Calling `complex()` on a size 1 array will now cast to a python complex.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 对大小为 1 的数组调用 `complex()` 现在将转换为 Python 复数。
- en: '`pathlib.Path` objects now supported'
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持`pathlib.Path`对象
- en: The standard `np.load`, `np.save`, `np.loadtxt`, `np.savez`, and similar functions
    can now take `pathlib.Path` objects as an argument instead of a filename or open
    file object.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 `np.load`、`np.save`、`np.loadtxt`、`np.savez` 和类似函数现在可以接受`pathlib.Path`对象作为参数，而不仅仅是文件名或打开的文件对象。
- en: New `bits` attribute for `np.finfo`
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.finfo`的新`bits`属性'
- en: This makes `np.finfo` consistent with `np.iinfo` which already has that attribute.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这使`np.finfo`与已经具有该属性的`np.iinfo`一致。
- en: New `signature` argument to `np.vectorize`
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.vectorize` 的新`signature`参数'
- en: This argument allows for vectorizing user defined functions with core dimensions,
    in the style of NumPy’s [generalized universal functions](../reference/c-api/generalized-ufuncs.html#c-api-generalized-ufuncs).
    This allows for vectorizing a much broader class of functions. For example, an
    arbitrary distance metric that combines two vectors to produce a scalar could
    be vectorized with `signature='(n),(n)->()'`. See `np.vectorize` for full details.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数允许以 NumPy 的[广义通用函数](../reference/c-api/generalized-ufuncs.html#c-api-generalized-ufuncs)的风格向量化用户定义的具有核心维度的函数。这允许对更广泛的函数类进行向量化。例如，可以使用`signature='(n),(n)->()'`向量化结合两个向量产生标量的任意距离度量。有关完整详情，请参阅`np.vectorize`。
- en: Emit py3kwarnings for division of integer arrays
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发出整数数组除法的 py3k 警告
- en: 'To help people migrate their code bases from Python 2 to Python 3, the python
    interpreter has a handy option -3, which issues warnings at runtime. One of its
    warnings is for integer division:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助人们将他们的代码基从 Python 2 迁移到 Python 3，python 解释器有一个方便的选项 -3，它会在运行时发出警告。其中一个警告是关于整数除法的：
- en: '[PRE8]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In Python 3, the new integer division semantics also apply to numpy arrays.
    With this version, numpy will emit a similar warning:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3 中，新的整数除法语义也适用于 numpy 数组。使用此版本，numpy 将发出类似的警告：
- en: '[PRE9]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: numpy.sctypes now includes bytes on Python3 too
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy.sctypes 现在在 Python3 上也包括 bytes
- en: Previously, it included str (bytes) and unicode on Python2, but only str (unicode)
    on Python3.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python2 中，它包括 str（字节）和 unicode，但在 Python3 中仅包括 str（unicode）。
- en: Writeable keyword argument for `as_strided`
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`as_strided` 的`writeable`关键字参数'
- en: '`np.lib.stride_tricks.as_strided` now has a `writeable` keyword argument. It
    can be set to False when no write operation to the returned array is expected
    to avoid accidental unpredictable writes.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.lib.stride_tricks.as_strided`现在具有一个`writeable`关键字参数。当不希望对返回的数组进行意外的不可预测的写操作时，可以将其设置为
    False。'
- en: '`axes` keyword argument for `rot90`'
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rot90` 的`axes`关键字参数'
- en: The `axes` keyword argument in `rot90` determines the plane in which the array
    is rotated. It defaults to `axes=(0,1)` as in the original function.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`rot90` 中的`axes`关键字参数确定了数组旋转的平面。它默认为`axes=(0,1)`，与原始函数相同。'
- en: Generalized `flip`
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义翻转
- en: '`flipud` and `fliplr` reverse the elements of an array along axis=0 and axis=1
    respectively. The newly added `flip` function reverses the elements of an array
    along any given axis.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`flipud` 和 `fliplr` 在 axis=0 和 axis=1 上分别沿数组反转元素。新添加的 `flip` 函数沿任何给定的轴反转数组元素。'
- en: '`np.count_nonzero` now has an `axis` parameter, allowing non-zero counts to
    be generated on more than just a flattened array object.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在`np.count_nonzero`具有一个`axis`参数，允许在非扁平化的数组对象上生成非零计数。
- en: BLIS support in `numpy.distutils`
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy.distutils 中的 BLIS 支持
- en: Building against the BLAS implementation provided by the BLIS library is now
    supported. See the `[blis]` section in `site.cfg.example` (in the root of the
    numpy repo or source distribution).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '现在支持使用 BLIS 库提供的 BLAS 实现进行构建。参见`numpy`存储库或源分发的根目录中的`site.cfg.example`中的`[blis]`部分。  '
- en: Hook in `numpy/__init__.py` to run distribution-specific checks
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 钩入`numpy/__init__.py`以运行特定于分布的检查
- en: Binary distributions of numpy may need to run specific hardware checks or load
    specific libraries during numpy initialization. For example, if we are distributing
    numpy with a BLAS library that requires SSE2 instructions, we would like to check
    the machine on which numpy is running does have SSE2 in order to give an informative
    error.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 numpy 的二进制分布，可能需要在 numpy 初始化期间运行特定的硬件检查或加载特定的库。例如，如果我们将 numpy 与需要 SSE2 指令的
    BLAS 库进行分发，我们希望检查运行 numpy 的机器是否具有 SSE2，以便提供有用的错误信息。
- en: Add a hook in `numpy/__init__.py` to import a `numpy/_distributor_init.py` file
    that will remain empty (bar a docstring) in the standard numpy source, but that
    can be overwritten by people making binary distributions of numpy.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在`numpy/__init__.py`中添加了一个钩子来导入一个`numpy/_distributor_init.py`文件，该文件将在标准numpy源码中仅保留一个docstring，但是可以被制作numpy的二进制发行版的人所覆盖。
- en: New nanfunctions `nancumsum` and `nancumprod` added
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的nan函数`nancumsum`和`nancumprod`
- en: Nan-functions `nancumsum` and `nancumprod` have been added to compute `cumsum`
    and `cumprod` by ignoring nans.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了忽略nan的`nancumsum`和`nancumprod`函数来计算`cumsum`和`cumprod`。
- en: '`np.interp` can now interpolate complex values'
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.interp`现在可以插值复数数值。'
- en: '`np.lib.interp(x, xp, fp)` now allows the interpolated array `fp` to be complex
    and will interpolate at `complex128` precision.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.lib.interp(x, xp, fp)`现在允许被插值的数组`fp`是复数，并且将以`complex128`的精度进行插值。'
- en: New polynomial evaluation function `polyvalfromroots` added
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了用于多项式求值的新函数`polyvalfromroots`
- en: The new function `polyvalfromroots` evaluates a polynomial at given points from
    the roots of the polynomial. This is useful for higher order polynomials, where
    expansion into polynomial coefficients is inaccurate at machine precision.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 新的函数`polyvalfromroots`在给定多项式的根的点上求多项式值。这对于高阶多项式很有用，在机器精度下展开成多项式系数是不准确的。
- en: New array creation function `geomspace` added
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的数组创建函数`geomspace`
- en: 'The new function `geomspace` generates a geometric sequence. It is similar
    to `logspace`, but with start and stop specified directly: `geomspace(start, stop)`
    behaves the same as `logspace(log10(start), log10(stop))`.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 新的函数`geomspace`生成几何序列。它类似于`logspace`，但直接指定了起始点和结束点：`geomspace(start, stop)`与`logspace(log10(start),
    log10(stop))`的行为相同。
- en: New context manager for testing warnings
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于测试警告的新上下文管理器
- en: A new context manager `suppress_warnings` has been added to the testing utils.
    This context manager is designed to help reliably test warnings. Specifically
    to reliably filter/ignore warnings. Ignoring warnings by using an “ignore” filter
    in Python versions before 3.4.x can quickly result in these (or similar) warnings
    not being tested reliably.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 测试工具中添加了一个新的上下文管理器`suppress_warnings`。这个上下文管理器旨在帮助可靠地测试警告。特别是可靠地过滤/忽略警告。在Python
    3.4.x之前的版本中使用“ignore”筛选器来忽略警告可能很快导致这些（或类似的）警告在测试中得不到可靠的测试。
- en: The context manager allows to filter (as well as record) warnings similar to
    the `catch_warnings` context, but allows for easier specificity. Also printing
    warnings that have not been filtered or nesting the context manager will work
    as expected. Additionally, it is possible to use the context manager as a decorator
    which can be useful when multiple tests give need to hide the same warning.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个上下文管理器允许过滤（以及记录）类似于`catch_warnings`上下文的警告，但允许更容易地具体化。未过滤的警告也会像预期的那样打印，或者嵌套这个上下文管理器也会按预期工作。另外，当多个测试需要隐藏相同的警告时，将上下文管理器用作装饰器也可能很有用。
- en: New masked array functions `ma.convolve` and `ma.correlate` added
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了新的掩盖数组函数`ma.convolve`和`ma.correlate`
- en: These functions wrapped the non-masked versions, but propagate through masked
    values. There are two different propagation modes. The default causes masked values
    to contaminate the result with masks, but the other mode only outputs masks if
    there is no alternative.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数包装了非掩盖版本，但会传播掩盖值。有两种不同的传播模式。默认情况下，掩盖值会使结果受到掩盖的影响，但是另一种模式只有在没有其他选择时才输出掩盖。
- en: New `float_power` ufunc
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的`float_power`ufunc
- en: The new `float_power` ufunc is like the `power` function except all computation
    is done in a minimum precision of float64\. There was a long discussion on the
    numpy mailing list of how to treat integers to negative integer powers and a popular
    proposal was that the `__pow__` operator should always return results of at least
    float64 precision. The `float_power` function implements that option. Note that
    it does not support object arrays.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`float_power`ufunc类似于`power`函数，只不过所有计算都至少以float64的精度进行。numpy邮件列表上讨论了如何处理整数的负整数幂，一个流行的提案是`__pow__`操作符应该始终返回至少float64精度的结果。`float_power`函数实现了这个选项。请注意，它不支持对象数组。
- en: '`np.loadtxt` now supports a single integer as `usecol` argument'
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在支持作为`usecol`参数的单个整数'
- en: Instead of using `usecol=(n,)` to read the nth column of a file it is now allowed
    to use `usecol=n`. Also the error message is more user friendly when a non-integer
    is passed as a column index.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 不再需要使用`usecol=(n,)`来读取文件的第n列，现在可以使用`usecol=n`。当将非整数作为列索引传递时，错误消息更加用户友好。
- en: Improved automated bin estimators for `histogram`
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added ‘doane’ and ‘sqrt’ estimators to `histogram` via the `bins` argument.
    Added support for range-restricted histograms with automated bin estimation.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '`np.roll` can now roll multiple axes at the same time'
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `shift` and `axis` arguments to `roll` are now broadcast against each other,
    and each specified axis is shifted accordingly.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: The `__complex__` method has been implemented for the ndarrays
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `complex()` on a size 1 array will now cast to a python complex.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`pathlib.Path` objects now supported'
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The standard `np.load`, `np.save`, `np.loadtxt`, `np.savez`, and similar functions
    can now take `pathlib.Path` objects as an argument instead of a filename or open
    file object.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: New `bits` attribute for `np.finfo`
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This makes `np.finfo` consistent with `np.iinfo` which already has that attribute.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: New `signature` argument to `np.vectorize`
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This argument allows for vectorizing user defined functions with core dimensions,
    in the style of NumPy’s [generalized universal functions](../reference/c-api/generalized-ufuncs.html#c-api-generalized-ufuncs).
    This allows for vectorizing a much broader class of functions. For example, an
    arbitrary distance metric that combines two vectors to produce a scalar could
    be vectorized with `signature='(n),(n)->()'`. See `np.vectorize` for full details.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Emit py3kwarnings for division of integer arrays
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To help people migrate their code bases from Python 2 to Python 3, the python
    interpreter has a handy option -3, which issues warnings at runtime. One of its
    warnings is for integer division:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In Python 3, the new integer division semantics also apply to numpy arrays.
    With this version, numpy will emit a similar warning:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: numpy.sctypes now includes bytes on Python3 too
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, it included str (bytes) and unicode on Python2, but only str (unicode)
    on Python3.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`bitwise_and` identity changed'
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous identity was 1 with the result that all bits except the LSB were
    masked out when the reduce method was used. The new identity is -1, which should
    work properly on twos complement machines as all bits will be set to one.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Generalized Ufuncs will now unlock the GIL
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generalized Ufuncs, including most of the linalg module, will now unlock the
    Python global interpreter lock.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Caches in *np.fft* are now bounded in total size and item count
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The caches in *np.fft* that speed up successive FFTs of the same length can
    no longer grow without bounds. They have been replaced with LRU (least recently
    used) caches that automatically evict no longer needed items if either the memory
    size or item count limit has been reached.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Improved handling of zero-width string/unicode dtypes
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed several interfaces that explicitly disallowed arrays with zero-width string
    dtypes (i.e. `dtype('S0')` or `dtype('U0')`, and fixed several bugs where such
    dtypes were not handled properly. In particular, changed `ndarray.__new__` to
    not implicitly convert `dtype('S0')` to `dtype('S1')` (and likewise for unicode)
    when creating new arrays.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Integer ufuncs vectorized with AVX2
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the cpu supports it at runtime the basic integer ufuncs now use AVX2 instructions.
    This feature is currently only available when compiled with GCC.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Order of operations optimization in `np.einsum`
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.einsum` now supports the `optimize` argument which will optimize the order
    of contraction. For example, `np.einsum` would complete the chain dot example
    `np.einsum(‘ij,jk,kl->il’, a, b, c)` in a single pass which would scale like `N^4`;
    however, when `optimize=True` `np.einsum` will create an intermediate array to
    reduce this scaling to `N^3` or effectively `np.dot(a, b).dot(c)`. Usage of intermediate
    tensors to reduce scaling has been applied to the general einsum summation notation.
    See `np.einsum_path` for more details.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: quicksort has been changed to an introsort
  id: totrans-393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The quicksort kind of `np.sort` and `np.argsort` is now an introsort which is
    regular quicksort but changing to a heapsort when not enough progress is made.
    This retains the good quicksort performance while changing the worst case runtime
    from `O(N^2)` to `O(N*log(N))`.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '`ediff1d` improved performance and subclass handling'
  id: totrans-395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ediff1d function uses an array instead on a flat iterator for the subtraction.
    When to_begin or to_end is not None, the subtraction is performed in place to
    eliminate a copy operation. A side effect is that certain subclasses are handled
    better, namely astropy.Quantity, since the complete array is created, wrapped,
    and then begin and end values are set, instead of using concatenate.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Improved precision of `ndarray.mean` for float16 arrays
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The computation of the mean of float16 arrays is now carried out in float32
    for improved precision. This should be useful in packages such as Theano where
    the precision of float16 is adequate and its smaller footprint is desirable.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '`bitwise_and` identity changed'
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous identity was 1 with the result that all bits except the LSB were
    masked out when the reduce method was used. The new identity is -1, which should
    work properly on twos complement machines as all bits will be set to one.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Generalized Ufuncs will now unlock the GIL
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generalized Ufuncs, including most of the linalg module, will now unlock the
    Python global interpreter lock.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Caches in *np.fft* are now bounded in total size and item count
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The caches in *np.fft* that speed up successive FFTs of the same length can
    no longer grow without bounds. They have been replaced with LRU (least recently
    used) caches that automatically evict no longer needed items if either the memory
    size or item count limit has been reached.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Improved handling of zero-width string/unicode dtypes
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed several interfaces that explicitly disallowed arrays with zero-width string
    dtypes (i.e. `dtype('S0')` or `dtype('U0')`, and fixed several bugs where such
    dtypes were not handled properly. In particular, changed `ndarray.__new__` to
    not implicitly convert `dtype('S0')` to `dtype('S1')` (and likewise for unicode)
    when creating new arrays.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: Integer ufuncs vectorized with AVX2
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the cpu supports it at runtime the basic integer ufuncs now use AVX2 instructions.
    This feature is currently only available when compiled with GCC.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Order of operations optimization in `np.einsum`
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.einsum` now supports the `optimize` argument which will optimize the order
    of contraction. For example, `np.einsum` would complete the chain dot example
    `np.einsum(‘ij,jk,kl->il’, a, b, c)` in a single pass which would scale like `N^4`;
    however, when `optimize=True` `np.einsum` will create an intermediate array to
    reduce this scaling to `N^3` or effectively `np.dot(a, b).dot(c)`. Usage of intermediate
    tensors to reduce scaling has been applied to the general einsum summation notation.
    See `np.einsum_path` for more details.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: quicksort has been changed to an introsort
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The quicksort kind of `np.sort` and `np.argsort` is now an introsort which is
    regular quicksort but changing to a heapsort when not enough progress is made.
    This retains the good quicksort performance while changing the worst case runtime
    from `O(N^2)` to `O(N*log(N))`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '`ediff1d` improved performance and subclass handling'
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ediff1d function uses an array instead on a flat iterator for the subtraction.
    When to_begin or to_end is not None, the subtraction is performed in place to
    eliminate a copy operation. A side effect is that certain subclasses are handled
    better, namely astropy.Quantity, since the complete array is created, wrapped,
    and then begin and end values are set, instead of using concatenate.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Improved precision of `ndarray.mean` for float16 arrays
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The computation of the mean of float16 arrays is now carried out in float32
    for improved precision. This should be useful in packages such as Theano where
    the precision of float16 is adequate and its smaller footprint is desirable.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All array-like methods are now called with keyword arguments in fromnumeric.py
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Internally, many array-like methods in fromnumeric.py were being called with
    positional arguments instead of keyword arguments as their external signatures
    were doing. This caused a complication in the downstream ‘pandas’ library that
    encountered an issue with ‘numpy’ compatibility. Now, all array-like methods in
    this module are called with keyword arguments instead.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Operations on np.memmap objects return numpy arrays in most cases
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously operations on a memmap object would misleadingly return a memmap
    instance even if the result was actually not memmapped. For example, `arr + 1`
    or `arr + arr` would return memmap instances, although no memory from the output
    array is memmapped. Version 1.12 returns ordinary numpy arrays from these operations.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Also, reduction of a memmap (e.g. `.sum(axis=None`) now returns a numpy scalar
    instead of a 0d memmap.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: stacklevel of warnings increased
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The stacklevel for python based warnings was increased so that most warnings
    will report the offending line of the user code instead of the line the warning
    itself is given. Passing of stacklevel is now tested to ensure that new warnings
    will receive the `stacklevel` argument.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: This causes warnings with the “default” or “module” filter to be shown once
    for every offending user code line or user module instead of only once. On python
    versions before 3.4, this can cause warnings to appear that were falsely ignored
    before, which may be surprising especially in test suits.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: All array-like methods are now called with keyword arguments in fromnumeric.py
  id: totrans-426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Internally, many array-like methods in fromnumeric.py were being called with
    positional arguments instead of keyword arguments as their external signatures
    were doing. This caused a complication in the downstream ‘pandas’ library that
    encountered an issue with ‘numpy’ compatibility. Now, all array-like methods in
    this module are called with keyword arguments instead.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Operations on np.memmap objects return numpy arrays in most cases
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously operations on a memmap object would misleadingly return a memmap
    instance even if the result was actually not memmapped. For example, `arr + 1`
    or `arr + arr` would return memmap instances, although no memory from the output
    array is memmapped. Version 1.12 returns ordinary numpy arrays from these operations.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Also, reduction of a memmap (e.g. `.sum(axis=None`) now returns a numpy scalar
    instead of a 0d memmap.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: stacklevel of warnings increased
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The stacklevel for python based warnings was increased so that most warnings
    will report the offending line of the user code instead of the line the warning
    itself is given. Passing of stacklevel is now tested to ensure that new warnings
    will receive the `stacklevel` argument.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: This causes warnings with the “default” or “module” filter to be shown once
    for every offending user code line or user module instead of only once. On python
    versions before 3.4, this can cause warnings to appear that were falsely ignored
    before, which may be surprising especially in test suits.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
