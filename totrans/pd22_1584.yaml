- en: pandas.core.window.expanding.Expanding.apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.window.expanding.Expanding.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.core.window.expanding.Expanding.apply.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the expanding custom aggregation function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**function'
  prefs: []
  type: TYPE_NORMAL
- en: Must produce a single value from an ndarray input if `raw=True` or a single
    value from a Series if `raw=False`. Can also accept a Numba JIT function with
    `engine='numba'` specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**raw**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: '`False` : passes each row or column as a Series to the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` : the passed function will receive ndarray objects instead. If you are
    just applying a NumPy reduction function this will achieve much better performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**engine**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: '`''cython''` : Runs rolling apply through C-extensions from cython.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''numba''` : Runs rolling apply through JIT compiled code from numba. Only
    available when `raw` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` : Defaults to `''cython''` or globally setting `compute.use_numba`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**engine_kwargs**dict, default None'
  prefs: []
  type: TYPE_NORMAL
- en: For `'cython'` engine, there are no accepted `engine_kwargs`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `''numba''` engine, the engine can accept `nopython`, `nogil` and `parallel`
    dictionary keys. The values must either be `True` or `False`. The default `engine_kwargs`
    for the `''numba''` engine is `{''nopython'': True, ''nogil'': False, ''parallel'':
    False}` and will be applied to both the `func` and the `apply` rolling aggregation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**args**tuple, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Positional arguments to be passed into func.
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**dict, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Keyword arguments to be passed into func.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Return type is the same as the original object with `np.float64` dtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.Series.expanding`](pandas.Series.expanding.html#pandas.Series.expanding
    "pandas.Series.expanding")'
  prefs: []
  type: TYPE_NORMAL
- en: Calling expanding with Series data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.expanding`](pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")'
  prefs: []
  type: TYPE_NORMAL
- en: Calling expanding with DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.Series.apply`](pandas.Series.apply.html#pandas.Series.apply "pandas.Series.apply")'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating apply for Series.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas.DataFrame.apply`](pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating apply for DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
