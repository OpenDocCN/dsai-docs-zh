- en: scipy.signal.sosfilt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.sosfilt.html#scipy.signal.sosfilt)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Filter data along one dimension using cascaded second-order sections.
  prefs: []
  type: TYPE_NORMAL
- en: Filter a data sequence, *x*, using a digital IIR filter defined by *sos*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**sos**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array of second-order filter coefficients, must have shape `(n_sections, 6)`.
    Each row corresponds to a second-order section, with the first three columns providing
    the numerator coefficients and the last three providing the denominator coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An N-dimensional input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of the input data array along which to apply the linear filter. The
    filter is applied to each subarray along this axis. Default is -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**zi**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial conditions for the cascaded filter delays. It is a (at least 2D) vector
    of shape `(n_sections, ..., 2, ...)`, where `..., 2, ...` denotes the shape of
    *x*, but with `x.shape[axis]` replaced by 2\. If *zi* is None or is not given
    then initial rest (i.e. all zeros) is assumed. Note that these initial conditions
    are *not* the same as the initial conditions given by [`lfiltic`](scipy.signal.lfiltic.html#scipy.signal.lfiltic
    "scipy.signal.lfiltic") or [`lfilter_zi`](scipy.signal.lfilter_zi.html#scipy.signal.lfilter_zi
    "scipy.signal.lfilter_zi").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The output of the digital filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**zf**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *zi* is None, this is not returned, otherwise, *zf* holds the final filter
    delay values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zpk2sos`](scipy.signal.zpk2sos.html#scipy.signal.zpk2sos "scipy.signal.zpk2sos"),
    [`sos2zpk`](scipy.signal.sos2zpk.html#scipy.signal.sos2zpk "scipy.signal.sos2zpk"),
    [`sosfilt_zi`](scipy.signal.sosfilt_zi.html#scipy.signal.sosfilt_zi "scipy.signal.sosfilt_zi"),
    [`sosfiltfilt`](scipy.signal.sosfiltfilt.html#scipy.signal.sosfiltfilt "scipy.signal.sosfiltfilt"),
    [`sosfreqz`](scipy.signal.sosfreqz.html#scipy.signal.sosfreqz "scipy.signal.sosfreqz")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The filter function is implemented as a series of second-order filters with
    direct-form II transposed structure. It is designed to minimize numerical precision
    errors for high-order filters.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot a 13th-order filter’s impulse response using both [`lfilter`](scipy.signal.lfilter.html#scipy.signal.lfilter
    "scipy.signal.lfilter") and [`sosfilt`](#scipy.signal.sosfilt "scipy.signal.sosfilt"),
    showing the instability that results from trying to do a 13th-order filter in
    a single stage (the numerical error pushes some poles outside of the unit circle):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-sosfilt-1.png](../Images/e253b920aaa502a3f2c8fe8d15967943.png)'
  prefs: []
  type: TYPE_IMG
