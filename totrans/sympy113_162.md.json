["```py\nclass sympy.physics.vector.point.Point(name)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> N = ReferenceFrame('N')\n>>> O = Point('O')\n>>> P = Point('P')\n>>> u1, u2, u3 = dynamicsymbols('u1 u2 u3')\n>>> O.set_vel(N, u1 * N.x + u2 * N.y + u3 * N.z)\n>>> O.acc(N)\nu1'*N.x + u2'*N.y + u3'*N.z \n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> from sympy import symbols\n>>> N = ReferenceFrame('N')\n>>> u1, u2 = dynamicsymbols('u1 u2')\n>>> A, B = symbols('A B', cls=Point)\n>>> type(A)\n<class 'sympy.physics.vector.point.Point'>\n>>> A.set_vel(N, u1 * N.x + u2 * N.y)\n>>> B.set_vel(N, u2 * N.x + u1 * N.y)\n>>> A.acc(N) - B.acc(N)\n(u1' - u2')*N.x + (-u1' + u2')*N.y \n```", "```py\na1pt_theory(otherpoint, outframe, interframe)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> from sympy.physics.vector import dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> q = dynamicsymbols('q')\n>>> q2 = dynamicsymbols('q2')\n>>> qd = dynamicsymbols('q', 1)\n>>> q2d = dynamicsymbols('q2', 1)\n>>> N = ReferenceFrame('N')\n>>> B = ReferenceFrame('B')\n>>> B.set_ang_vel(N, 5 * B.y)\n>>> O = Point('O')\n>>> P = O.locatenew('P', q * B.x + q2 * B.y)\n>>> P.set_vel(B, qd * B.x + q2d * B.y)\n>>> O.set_vel(N, 0)\n>>> P.a1pt_theory(O, N, B)\n(-25*q + q'')*B.x + q2''*B.y - 10*q'*B.z \n```", "```py\na2pt_theory(otherpoint, outframe, fixedframe)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> q = dynamicsymbols('q')\n>>> qd = dynamicsymbols('q', 1)\n>>> N = ReferenceFrame('N')\n>>> B = N.orientnew('B', 'Axis', [q, N.z])\n>>> O = Point('O')\n>>> P = O.locatenew('P', 10 * B.x)\n>>> O.set_vel(N, 5 * N.x)\n>>> P.a2pt_theory(O, N, B)\n- 10*q'**2*B.x + 10*q''*B.y \n```", "```py\nacc(frame)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p1.set_acc(N, 10 * N.x)\n>>> p1.acc(N)\n10*N.x \n```", "```py\nlocatenew(name, value)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, Point\n>>> N = ReferenceFrame('N')\n>>> P1 = Point('P1')\n>>> P2 = P1.locatenew('P2', 10 * N.x) \n```", "```py\npartial_velocity(frame, *gen_speeds)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, Point\n>>> from sympy.physics.vector import dynamicsymbols\n>>> N = ReferenceFrame('N')\n>>> A = ReferenceFrame('A')\n>>> p = Point('p')\n>>> u1, u2 = dynamicsymbols('u1, u2')\n>>> p.set_vel(N, u1 * N.x + u2 * A.y)\n>>> p.partial_velocity(N, u1)\nN.x\n>>> p.partial_velocity(N, u1, u2)\n(N.x, A.y) \n```", "```py\npos_from(otherpoint)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p2 = Point('p2')\n>>> p1.set_pos(p2, 10 * N.x)\n>>> p1.pos_from(p2)\n10*N.x \n```", "```py\nset_acc(frame, value)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p1.set_acc(N, 10 * N.x)\n>>> p1.acc(N)\n10*N.x \n```", "```py\nset_pos(otherpoint, value)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p2 = Point('p2')\n>>> p1.set_pos(p2, 10 * N.x)\n>>> p1.pos_from(p2)\n10*N.x \n```", "```py\nset_vel(frame, value)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p1.set_vel(N, 10 * N.x)\n>>> p1.vel(N)\n10*N.x \n```", "```py\nv1pt_theory(otherpoint, outframe, interframe)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> from sympy.physics.vector import dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> q = dynamicsymbols('q')\n>>> q2 = dynamicsymbols('q2')\n>>> qd = dynamicsymbols('q', 1)\n>>> q2d = dynamicsymbols('q2', 1)\n>>> N = ReferenceFrame('N')\n>>> B = ReferenceFrame('B')\n>>> B.set_ang_vel(N, 5 * B.y)\n>>> O = Point('O')\n>>> P = O.locatenew('P', q * B.x + q2 * B.y)\n>>> P.set_vel(B, qd * B.x + q2d * B.y)\n>>> O.set_vel(N, 0)\n>>> P.v1pt_theory(O, N, B)\nq'*B.x + q2'*B.y - 5*q*B.z \n```", "```py\nv2pt_theory(otherpoint, outframe, fixedframe)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> q = dynamicsymbols('q')\n>>> qd = dynamicsymbols('q', 1)\n>>> N = ReferenceFrame('N')\n>>> B = N.orientnew('B', 'Axis', [q, N.z])\n>>> O = Point('O')\n>>> P = O.locatenew('P', 10 * B.x)\n>>> O.set_vel(N, 5 * N.x)\n>>> P.v2pt_theory(O, N, B)\n5*N.x + 10*q'*B.y \n```", "```py\nvel(frame)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame, dynamicsymbols\n>>> N = ReferenceFrame('N')\n>>> p1 = Point('p1')\n>>> p1.set_vel(N, 10 * N.x)\n>>> p1.vel(N)\n10*N.x \n```", "```py\n>>> p = Point('p')\n>>> q = dynamicsymbols('q')\n>>> p.set_vel(N, 10 * N.x)\n>>> p2 = Point('p2')\n>>> p2.set_pos(p, q*N.x)\n>>> p2.vel(N)\n(Derivative(q(t), t) + 10)*N.x \n```", "```py\nsympy.physics.vector.functions.get_motion_params(frame, **kwargs)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, get_motion_params, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> from sympy import symbols\n>>> R = ReferenceFrame('R')\n>>> v1, v2, v3 = dynamicsymbols('v1 v2 v3')\n>>> v = v1*R.x + v2*R.y + v3*R.z\n>>> get_motion_params(R, position = v)\n(v1''*R.x + v2''*R.y + v3''*R.z, v1'*R.x + v2'*R.y + v3'*R.z, v1*R.x + v2*R.y + v3*R.z)\n>>> a, b, c = symbols('a b c')\n>>> v = a*R.x + b*R.y + c*R.z\n>>> get_motion_params(R, velocity = v)\n(0, a*R.x + b*R.y + c*R.z, a*t*R.x + b*t*R.y + c*t*R.z)\n>>> parameters = get_motion_params(R, acceleration = v)\n>>> parameters[1]\na*t*R.x + b*t*R.y + c*t*R.z\n>>> parameters[2]\na*t**2/2*R.x + b*t**2/2*R.y + c*t**2/2*R.z \n```", "```py\nsympy.physics.vector.functions.kinematic_equations(speeds, coords, rot_type, rot_order='')\n```", "```py\n>>> from sympy.physics.vector import dynamicsymbols\n>>> from sympy.physics.vector import kinematic_equations, vprint\n>>> u1, u2, u3 = dynamicsymbols('u1 u2 u3')\n>>> q1, q2, q3 = dynamicsymbols('q1 q2 q3')\n>>> vprint(kinematic_equations([u1,u2,u3], [q1,q2,q3], 'body', '313'),\n...     order=None)\n[-(u1*sin(q3) + u2*cos(q3))/sin(q2) + q1', -u1*cos(q3) + u2*sin(q3) + q2', (u1*sin(q3) + u2*cos(q3))*cos(q2)/sin(q2) - u3 + q3'] \n```", "```py\nsympy.physics.vector.functions.partial_velocity(vel_vecs, gen_speeds, frame)\n```", "```py\n>>> from sympy.physics.vector import Point, ReferenceFrame\n>>> from sympy.physics.vector import dynamicsymbols\n>>> from sympy.physics.vector import partial_velocity\n>>> u = dynamicsymbols('u')\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, u * N.x)\n>>> vel_vecs = [P.vel(N)]\n>>> gen_speeds = [u]\n>>> partial_velocity(vel_vecs, gen_speeds, N)\n[[N.x]] \n```"]