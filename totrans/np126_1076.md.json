["```py\nNPY_NAN\n```", "```py\nNPY_INFINITY\n```", "```py\nNPY_PZERO\n```", "```py\nNPY_NZERO\n```", "```py\nnpy_isnan(x)\n```", "```py\nnpy_isfinite(x)\n```", "```py\nnpy_isinf(x)\n```", "```py\nnpy_signbit(x)\n```", "```py\nnpy_copysign(x, y)\n```", "```py\nNPY_E\n```", "```py\nNPY_LOG2E\n```", "```py\nNPY_LOG10E\n```", "```py\nNPY_LOGE2\n```", "```py\nNPY_LOGE10\n```", "```py\nNPY_PI\n```", "```py\nNPY_PI_2\n```", "```py\nNPY_PI_4\n```", "```py\nNPY_1_PI\n```", "```py\nNPY_2_PI\n```", "```py\nNPY_EULER\n```", "```py\ndouble npy_nextafter(double x, double y)\n```", "```py\ndouble npy_spacing(double x)\n```", "```py\nvoid npy_set_floatstatus_divbyzero()\n```", "```py\nvoid npy_set_floatstatus_overflow()\n```", "```py\nvoid npy_set_floatstatus_underflow()\n```", "```py\nvoid npy_set_floatstatus_invalid()\n```", "```py\nint npy_get_floatstatus()\n```", "```py\nint npy_get_floatstatus_barrier(char*)\n```", "```py\nint npy_clear_floatstatus()\n```", "```py\nint npy_clear_floatstatus_barrier(char*)\n```", "```py\n/* a = 1 + 2i \\*/\nnpy_complex  a  =  npy_cpack(1,  2);\nnpy_complex  b;\n\nb  =  npy_log(a); \n```", "```py\n> >>> from numpy.distutils.misc_util import get_info\n> >>> info = get_info('npymath')\n> >>> _ = config.add_extension('foo', sources=['foo.c'], extra_info=info) \n> ```", "```py\n# Note that this will get easier in the future, when Meson has\n# support for numpy built in; most of this can then be replaced\n# by `dependency('numpy')`.\nincdir_numpy = run_command(py3,\n  [\n    '-c',\n    'import os; os.chdir(\"..\"); import numpy; print(numpy.get_include())'\n  ],\n  check: true\n).stdout().strip()\n\ninc_np = include_directories(incdir_numpy)\n\ncc = meson.get_compiler('c')\nnpymath_path = incdir_numpy / '..' / 'lib'\nnpymath_lib = cc.find_library('npymath', dirs: npymath_path)\n\npy3.extension_module('module_name',\n  ...\n  include_directories: inc_np,\n  dependencies: [npymath_lib], \n```", "```py\nnpy_half  sum(int  n,  npy_half  *array)  {\n  float  ret  =  0;\n  while(n--)  {\n  ret  +=  npy_half_to_float(*array++);\n  }\n  return  npy_float_to_half(ret);\n} \n```", "```py\nNPY_HALF_ZERO\n```", "```py\nNPY_HALF_PZERO\n```", "```py\nNPY_HALF_NZERO\n```", "```py\nNPY_HALF_ONE\n```", "```py\nNPY_HALF_NEGONE\n```", "```py\nNPY_HALF_PINF\n```", "```py\nNPY_HALF_NINF\n```", "```py\nNPY_HALF_NAN\n```", "```py\nfloat npy_half_to_float( h)\n```", "```py\ndouble npy_half_to_double( h)\n```", "```py\nnpy_float_to_half(float f)\n```", "```py\nnpy_double_to_half(double d)\n```", "```py\nint npy_half_eq( h1, h2)\n```", "```py\nint npy_half_ne( h1, h2)\n```", "```py\nint npy_half_le( h1, h2)\n```", "```py\nint npy_half_lt( h1, h2)\n```", "```py\nint npy_half_ge( h1, h2)\n```", "```py\nint npy_half_gt( h1, h2)\n```", "```py\nint npy_half_eq_nonan( h1, h2)\n```", "```py\nint npy_half_lt_nonan( h1, h2)\n```", "```py\nint npy_half_le_nonan( h1, h2)\n```", "```py\nint npy_half_iszero( h)\n```", "```py\nint npy_half_isnan( h)\n```", "```py\nint npy_half_isinf( h)\n```", "```py\nint npy_half_isfinite( h)\n```", "```py\nint npy_half_signbit( h)\n```", "```py\nnpy_half_copysign( x, y)\n```", "```py\nnpy_half_spacing( h)\n```", "```py\nnpy_half_nextafter( x, y)\n```", "```py\nnpy_floatbits_to_halfbits( f)\n```", "```py\nnpy_doublebits_to_halfbits( d)\n```", "```py\nnpy_halfbits_to_floatbits( h)\n```", "```py\nnpy_halfbits_to_doublebits( h)\n```", "```py\nNPY_NAN\n```", "```py\nNPY_INFINITY\n```", "```py\nNPY_PZERO\n```", "```py\nNPY_NZERO\n```", "```py\nnpy_isnan(x)\n```", "```py\nnpy_isfinite(x)\n```", "```py\nnpy_isinf(x)\n```", "```py\nnpy_signbit(x)\n```", "```py\nnpy_copysign(x, y)\n```", "```py\nNPY_E\n```", "```py\nNPY_LOG2E\n```", "```py\nNPY_LOG10E\n```", "```py\nNPY_LOGE2\n```", "```py\nNPY_LOGE10\n```", "```py\nNPY_PI\n```", "```py\nNPY_PI_2\n```", "```py\nNPY_PI_4\n```", "```py\nNPY_1_PI\n```", "```py\nNPY_2_PI\n```", "```py\nNPY_EULER\n```", "```py\ndouble npy_nextafter(double x, double y)\n```", "```py\ndouble npy_spacing(double x)\n```", "```py\nvoid npy_set_floatstatus_divbyzero()\n```", "```py\nvoid npy_set_floatstatus_overflow()\n```", "```py\nvoid npy_set_floatstatus_underflow()\n```", "```py\nvoid npy_set_floatstatus_invalid()\n```", "```py\nint npy_get_floatstatus()\n```", "```py\nint npy_get_floatstatus_barrier(char*)\n```", "```py\nint npy_clear_floatstatus()\n```", "```py\nint npy_clear_floatstatus_barrier(char*)\n```", "```py\n/* a = 1 + 2i \\*/\nnpy_complex  a  =  npy_cpack(1,  2);\nnpy_complex  b;\n\nb  =  npy_log(a); \n```", "```py\n> >>> from numpy.distutils.misc_util import get_info\n> >>> info = get_info('npymath')\n> >>> _ = config.add_extension('foo', sources=['foo.c'], extra_info=info) \n> ```", "```py\n# Note that this will get easier in the future, when Meson has\n# support for numpy built in; most of this can then be replaced\n# by `dependency('numpy')`.\nincdir_numpy = run_command(py3,\n  [\n    '-c',\n    'import os; os.chdir(\"..\"); import numpy; print(numpy.get_include())'\n  ],\n  check: true\n).stdout().strip()\n\ninc_np = include_directories(incdir_numpy)\n\ncc = meson.get_compiler('c')\nnpymath_path = incdir_numpy / '..' / 'lib'\nnpymath_lib = cc.find_library('npymath', dirs: npymath_path)\n\npy3.extension_module('module_name',\n  ...\n  include_directories: inc_np,\n  dependencies: [npymath_lib], \n```", "```py\nnpy_half  sum(int  n,  npy_half  *array)  {\n  float  ret  =  0;\n  while(n--)  {\n  ret  +=  npy_half_to_float(*array++);\n  }\n  return  npy_float_to_half(ret);\n} \n```", "```py\nNPY_HALF_ZERO\n```", "```py\nNPY_HALF_PZERO\n```", "```py\nNPY_HALF_NZERO\n```", "```py\nNPY_HALF_ONE\n```", "```py\nNPY_HALF_NEGONE\n```", "```py\nNPY_HALF_PINF\n```", "```py\nNPY_HALF_NINF\n```", "```py\nNPY_HALF_NAN\n```", "```py\nfloat npy_half_to_float( h)\n```", "```py\ndouble npy_half_to_double( h)\n```", "```py\nnpy_float_to_half(float f)\n```", "```py\nnpy_double_to_half(double d)\n```", "```py\nint npy_half_eq( h1, h2)\n```", "```py\nint npy_half_ne( h1, h2)\n```", "```py\nint npy_half_le( h1, h2)\n```", "```py\nint npy_half_lt( h1, h2)\n```", "```py\nint npy_half_ge( h1, h2)\n```", "```py\nint npy_half_gt( h1, h2)\n```", "```py\nint npy_half_eq_nonan( h1, h2)\n```", "```py\nint npy_half_lt_nonan( h1, h2)\n```", "```py\nint npy_half_le_nonan( h1, h2)\n```", "```py\nint npy_half_iszero( h)\n```", "```py\nint npy_half_isnan( h)\n```", "```py\nint npy_half_isinf( h)\n```", "```py\nint npy_half_isfinite( h)\n```", "```py\nint npy_half_signbit( h)\n```", "```py\nnpy_half_copysign( x, y)\n```", "```py\nnpy_half_spacing( h)\n```", "```py\nnpy_half_nextafter( x, y)\n```", "```py\nnpy_floatbits_to_halfbits( f)\n```", "```py\nnpy_doublebits_to_halfbits( d)\n```", "```py\nnpy_halfbits_to_floatbits( h)\n```", "```py\nnpy_halfbits_to_doublebits( h)\n```", "```py\nNPY_NAN\n```", "```py\nNPY_INFINITY\n```", "```py\nNPY_PZERO\n```", "```py\nNPY_NZERO\n```", "```py\nnpy_isnan(x)\n```", "```py\nnpy_isfinite(x)\n```", "```py\nnpy_isinf(x)\n```", "```py\nnpy_signbit(x)\n```", "```py\nnpy_copysign(x, y)\n```", "```py\nNPY_E\n```", "```py\nNPY_LOG2E\n```", "```py\nNPY_LOG10E\n```", "```py\nNPY_LOGE2\n```", "```py\nNPY_LOGE10\n```", "```py\nNPY_PI\n```", "```py\nNPY_PI_2\n```", "```py\nNPY_PI_4\n```", "```py\nNPY_1_PI\n```", "```py\nNPY_2_PI\n```", "```py\nNPY_EULER\n```", "```py\ndouble npy_nextafter(double x, double y)\n```", "```py\ndouble npy_spacing(double x)\n```", "```py\nvoid npy_set_floatstatus_divbyzero()\n```", "```py\nvoid npy_set_floatstatus_overflow()\n```", "```py\nvoid npy_set_floatstatus_underflow()\n```", "```py\nvoid npy_set_floatstatus_invalid()\n```", "```py\nint npy_get_floatstatus()\n```", "```py\nint npy_get_floatstatus_barrier(char*)\n```", "```py\nint npy_clear_floatstatus()\n```", "```py\nint npy_clear_floatstatus_barrier(char*)\n```", "```py\n/* a = 1 + 2i \\*/\nnpy_complex  a  =  npy_cpack(1,  2);\nnpy_complex  b;\n\nb  =  npy_log(a); \n```", "```py\n> >>> from numpy.distutils.misc_util import get_info\n> >>> info = get_info('npymath')\n> >>> _ = config.add_extension('foo', sources=['foo.c'], extra_info=info) \n> ```", "```py\n# Note that this will get easier in the future, when Meson has\n# support for numpy built in; most of this can then be replaced\n# by `dependency('numpy')`.\nincdir_numpy = run_command(py3,\n  [\n    '-c',\n    'import os; os.chdir(\"..\"); import numpy; print(numpy.get_include())'\n  ],\n  check: true\n).stdout().strip()\n\ninc_np = include_directories(incdir_numpy)\n\ncc = meson.get_compiler('c')\nnpymath_path = incdir_numpy / '..' / 'lib'\nnpymath_lib = cc.find_library('npymath', dirs: npymath_path)\n\npy3.extension_module('module_name',\n  ...\n  include_directories: inc_np,\n  dependencies: [npymath_lib], \n```", "```py\nnpy_half  sum(int  n,  npy_half  *array)  {\n  float  ret  =  0;\n  while(n--)  {\n  ret  +=  npy_half_to_float(*array++);\n  }\n  return  npy_float_to_half(ret);\n} \n```", "```py\nNPY_HALF_ZERO\n```", "```py\nNPY_HALF_PZERO\n```", "```py\nNPY_HALF_NZERO\n```", "```py\nNPY_HALF_ONE\n```", "```py\nNPY_HALF_NEGONE\n```", "```py\nNPY_HALF_PINF\n```", "```py\nNPY_HALF_NINF\n```", "```py\nNPY_HALF_NAN\n```", "```py\nfloat npy_half_to_float( h)\n```", "```py\ndouble npy_half_to_double( h)\n```", "```py\nnpy_float_to_half(float f)\n```", "```py\nnpy_double_to_half(double d)\n```", "```py\nint npy_half_eq( h1, h2)\n```", "```py\nint npy_half_ne( h1, h2)\n```", "```py\nint npy_half_le( h1, h2)\n```", "```py\nint npy_half_lt( h1, h2)\n```", "```py\nint npy_half_ge( h1, h2)\n```", "```py\nint npy_half_gt( h1, h2)\n```", "```py\nint npy_half_eq_nonan( h1, h2)\n```", "```py\nint npy_half_lt_nonan( h1, h2)\n```", "```py\nint npy_half_le_nonan( h1, h2)\n```", "```py\nint npy_half_iszero( h)\n```", "```py\nint npy_half_isnan( h)\n```", "```py\nint npy_half_isinf( h)\n```", "```py\nint npy_half_isfinite( h)\n```", "```py\nint npy_half_signbit( h)\n```", "```py\nnpy_half_copysign( x, y)\n```", "```py\nnpy_half_spacing( h)\n```", "```py\nnpy_half_nextafter( x, y)\n```", "```py\nnpy_floatbits_to_halfbits( f)\n```", "```py\nnpy_doublebits_to_halfbits( d)\n```", "```py\nnpy_halfbits_to_floatbits( h)\n```", "```py\nnpy_halfbits_to_doublebits( h)\n```"]