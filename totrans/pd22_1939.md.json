["```py\nIn [1]: animals = pd.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'],\n ...:                        'height': [9.1, 6.0, 9.5, 34.0],\n ...:                        'weight': [7.9, 7.5, 9.9, 198.0]})\n ...: \n\nIn [2]: animals\nOut[2]: \n kind  height  weight\n0  cat     9.1     7.9\n1  dog     6.0     7.5\n2  cat     9.5     9.9\n3  dog    34.0   198.0\n\n[4 rows x 3 columns]\n\nIn [3]: animals.groupby(\"kind\").agg(\n ...:    min_height=pd.NamedAgg(column='height', aggfunc='min'),\n ...:    max_height=pd.NamedAgg(column='height', aggfunc='max'),\n ...:    average_weight=pd.NamedAgg(column='weight', aggfunc=\"mean\"),\n ...: )\n ...: \nOut[3]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [4]: animals.groupby(\"kind\").agg(\n ...:    min_height=('height', 'min'),\n ...:    max_height=('height', 'max'),\n ...:    average_weight=('weight', 'mean'),\n ...: )\n ...: \nOut[4]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [5]: animals.groupby(\"kind\").height.agg(\n ...:    min_height=\"min\",\n ...:    max_height=\"max\",\n ...: )\n ...: \nOut[5]: \n min_height  max_height\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns] \n```", "```py\nIn [6]: animals.groupby('kind').height.agg([\n ...:    lambda x: x.iloc[0], lambda x: x.iloc[-1]\n ...: ])\n ...: \nOut[6]: \n <lambda_0>  <lambda_1>\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns]\n\nIn [7]: animals.groupby('kind').agg([\n ...:    lambda x: x.iloc[0] - x.iloc[1],\n ...:    lambda x: x.iloc[0] + x.iloc[1]\n ...: ])\n ...: \nOut[7]: \n height                weight \n <lambda_0> <lambda_1> <lambda_0> <lambda_1>\nkind \ncat        -0.4       18.6       -2.0       17.8\ndog       -28.0       40.0     -190.5      205.5\n\n[2 rows x 4 columns] \n```", "```py\nIn [8]: pd.MultiIndex.from_product([['a', 'abc'], range(500)])\nOut[8]: \nMultiIndex([(  'a',   0),\n (  'a',   1),\n (  'a',   2),\n (  'a',   3),\n (  'a',   4),\n (  'a',   5),\n (  'a',   6),\n (  'a',   7),\n (  'a',   8),\n (  'a',   9),\n ...\n ('abc', 490),\n ('abc', 491),\n ('abc', 492),\n ('abc', 493),\n ('abc', 494),\n ('abc', 495),\n ('abc', 496),\n ('abc', 497),\n ('abc', 498),\n ('abc', 499)],\n length=1000) \n```", "```py\nIn [1]: pd.MultiIndex.from_product([['a', 'abc'], range(5)])\nOut[1]: MultiIndex(levels=[['a', 'abc'], [0, 1, 2, 3]],\n ...:           codes=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]]) \n```", "```py\nfrom pandas.io.json import json_normalize\ndata = [{\n    'CreatedBy': {'Name': 'User001'},\n    'Lookup': {'TextField': 'Some text',\n               'UserField': {'Id': 'ID001', 'Name': 'Name001'}},\n    'Image': {'a': 'b'}\n}]\njson_normalize(data, max_level=1) \n```", "```py\nIn [9]: df = pd.DataFrame([{'var1': 'a,b,c', 'var2': 1},\n ...:                   {'var1': 'd,e,f', 'var2': 2}])\n ...: \n\nIn [10]: df\nOut[10]: \n var1  var2\n0  a,b,c     1\n1  d,e,f     2\n\n[2 rows x 2 columns] \n```", "```py\nIn [11]: df.assign(var1=df.var1.str.split(',')).explode('var1')\nOut[11]: \n var1  var2\n0    a     1\n0    b     1\n0    c     1\n1    d     2\n1    e     2\n1    f     2\n\n[6 rows x 2 columns] \n```", "```py\nIn [12]: df = pd.DataFrame([0], index=pd.DatetimeIndex(['2019-01-01'], tz='US/Pacific'))\n\nIn [13]: df\nOut[13]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [3]: df['2019-01-01 00:00:00+04:00':'2019-01-01 01:00:00+04:00']\nOut[3]:\n 0\n2019-01-01 00:00:00-08:00  0 \n```", "```py\nIn [14]: df['2019-01-01 12:00:00+04:00':'2019-01-01 13:00:00+04:00']\nOut[14]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [1]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ...:              codes=[[0, -1, 1, 2, 3, 4]])\n ...:\nOut[1]: MultiIndex(levels=[[nan, None, NaT, 128, 2]],\n codes=[[0, -1, 1, 2, 3, 4]])\n\nIn [2]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\nOut[2]: MultiIndex(levels=[[1, 2]],\n codes=[[0, -2]]) \n```", "```py\nIn [15]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ....:              codes=[[0, -1, 1, 2, 3, 4]])\n ....: \nOut[15]: \nMultiIndex([(nan,),\n (nan,),\n (nan,),\n (nan,),\n (128,),\n (  2,)],\n )\n\nIn [16]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[16], line 1\n----> 1 pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:364, in MultiIndex.__new__(cls, levels, codes, sortorder, names, dtype, copy, name, verify_integrity)\n  361     result.sortorder = sortorder\n  363 if verify_integrity:\n--> 364     new_codes = result._verify_integrity()\n  365     result._codes = new_codes\n  367 result._reset_identity()\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:451, in MultiIndex._verify_integrity(self, codes, levels, levels_to_verify)\n  445     raise ValueError(\n  446         f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n  447         f\"level ({len(level)}). NOTE: this index is in an \"\n  448         \"inconsistent state\"\n  449     )\n  450 if len(level_codes) and level_codes.min() < -1:\n--> 451     raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n  452 if not level.is_unique:\n  453     raise ValueError(\n  454         f\"Level values must be unique: {list(level)} on level {i}\"\n  455     )\n\nValueError: On level 0, code value (-2) < -1 \n```", "```py\nIn [17]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [18]: df\nOut[18]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns]\n\nIn [19]: def func(group):\n ....:    print(group.name)\n ....:    return group\n ....: \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [20]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 1])}) \n```", "```py\nIn [2]: type(pd.concat([df, df]))\npandas.core.sparse.frame.SparseDataFrame \n```", "```py\nIn [21]: type(pd.concat([df, df]))\nOut[21]: pandas.core.frame.DataFrame \n```", "```py\nIn [1]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [2]: s\nOut[2]:\n0      b'a'\n1     b'ba'\n2    b'cba'\ndtype: object\n\nIn [3]: s.str.startswith(b'a')\nOut[3]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [22]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [23]: s\nOut[23]: \n0      b'a'\n1     b'ba'\n2    b'cba'\nLength: 3, dtype: object\n\nIn [24]: s.str.startswith(b'a')\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[24], line 1\n----> 1 s.str.startswith(b'a')\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:136, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  131 if self._inferred_dtype not in allowed_types:\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n--> 136     raise TypeError(msg)\n  137 return func(self, *args, **kwargs)\n\nTypeError: Cannot use .str.startswith with values of inferred dtype 'bytes'. \n```", "```py\nIn [25]: cat = pd.Categorical([\"foo\", \"bar\", \"bar\", \"qux\"], ordered=True)\n\nIn [26]: df = pd.DataFrame({'payload': [-1, -2, -1, -2], 'col': cat})\n\nIn [27]: df\nOut[27]: \n payload  col\n0       -1  foo\n1       -2  bar\n2       -1  bar\n3       -2  qux\n\n[4 rows x 2 columns]\n\nIn [28]: df.dtypes\nOut[28]: \npayload       int64\ncol        category\nLength: 2, dtype: object \n```", "```py\nIn [5]: df.groupby('payload').first().col.dtype\nOut[5]: dtype('O') \n```", "```py\nIn [29]: df.groupby('payload').first().col.dtype\nOut[29]: CategoricalDtype(categories=['bar', 'foo', 'qux'], ordered=True, categories_dtype=object) \n```", "```py\nIn [1]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\n...\nValueError: can only call with other PeriodIndex-ed objects\n\nIn [2]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[2]: Int64Index([1, 2, 3], dtype='int64') \n```", "```py\nIn [3]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\nOut[3]: Index([1991-09-05, 1991-09-06, 1, 2, 3], dtype='object')\nIn [4]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[4]: Index([1, 2, 3], dtype='object') \n```", "```py\nIn [30]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [31]: df\nOut[31]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns] \n```", "```py\nIn [3]: df.groupby(\"a\").ffill()\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [32]: df.groupby(\"a\").ffill()\nOut[32]: \n b\n0  1\n1  2\n\n[2 rows x 1 columns] \n```", "```py\nIn [33]: df = pd.DataFrame({\"empty_col\": pd.Categorical([])})\n\nIn [34]: df\nOut[34]: \nEmpty DataFrame\nColumns: [empty_col]\nIndex: []\n\n[0 rows x 1 columns] \n```", "```py\nIn [3]: df.describe()\nOut[3]:\n        empty_col\ncount           0\nunique          0 \n```", "```py\nIn [35]: df.describe()\nOut[35]: \n empty_col\ncount          0\nunique         0\ntop          NaN\nfreq         NaN\n\n[4 rows x 1 columns] \n```", "```py\nIn [36]: ii = pd.IntervalIndex.from_tuples([(0, 4), (1, 5), (5, 8)])\n\nIn [37]: ii\nOut[37]: IntervalIndex([(0, 4], (1, 5], (5, 8]], dtype='interval[int64, right]') \n```", "```py\nIn [4]: pd.Interval(1, 2, closed='neither') in ii\nOut[4]: True\n\nIn [5]: pd.Interval(-10, 10, closed='both') in ii\nOut[5]: True \n```", "```py\nIn [38]: pd.Interval(1, 2, closed='neither') in ii\nOut[38]: False\n\nIn [39]: pd.Interval(-10, 10, closed='both') in ii\nOut[39]: False \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: array([0, 1])\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\nOut[7]: array([0, 1, 2]) \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: 1\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\n---------------------------------------------------------------------------\nKeyError: Interval(2, 6, closed='right') \n```", "```py\nIn [40]: s = pd.Series(list('abc'), index=ii)\n\nIn [41]: s\nOut[41]: \n(0, 4]    a\n(1, 5]    b\n(5, 8]    c\nLength: 3, dtype: object \n```", "```py\nIn [8]: s[pd.Interval(1, 5)]\nOut[8]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [9]: s.loc[pd.Interval(1, 5)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [42]: s[pd.Interval(1, 5)]\nOut[42]: 'b'\n\nIn [43]: s.loc[pd.Interval(1, 5)]\nOut[43]: 'b' \n```", "```py\nIn [9]: s[pd.Interval(2, 3)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [10]: s.loc[pd.Interval(2, 3)]\nOut[10]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [6]: s[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right')\n\nIn [7]: s.loc[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right') \n```", "```py\nIn [44]: idxr = s.index.overlaps(pd.Interval(2, 3))\n\nIn [45]: idxr\nOut[45]: array([ True,  True, False])\n\nIn [46]: s[idxr]\nOut[46]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object\n\nIn [47]: s.loc[idxr]\nOut[47]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object \n```", "```py\nIn [48]: s1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\n\nIn [49]: s2 = pd.Series([3, 4, 5], index=['d', 'c', 'b'])\n\nIn [50]: s1\nOut[50]: \na    1\nb    2\nc    3\nLength: 3, dtype: int64\n\nIn [51]: s2\nOut[51]: \nd    3\nc    4\nb    5\nLength: 3, dtype: int64 \n```", "```py\nIn [5]: np.power(s1, s2)\nOut[5]:\na      1\nb     16\nc    243\ndtype: int64 \n```", "```py\nIn [52]: np.power(s1, s2)\nOut[52]: \na     1.0\nb    32.0\nc    81.0\nd     NaN\nLength: 4, dtype: float64 \n```", "```py\nIn [53]: np.power(s1, s2.array)\nOut[53]: \na      1\nb     16\nc    243\nLength: 3, dtype: int64 \n```", "```py\nIn [54]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True) \n```", "```py\nIn [2]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True)\n\nIn [3]: cat.argsort()\nOut[3]: array([1, 2, 0])\n\nIn [4]: cat[cat.argsort()]\nOut[4]:\n[NaN, a, b]\ncategories (2, object): [a < b] \n```", "```py\nIn [55]: cat.argsort()\nOut[55]: array([2, 0, 1])\n\nIn [56]: cat[cat.argsort()]\nOut[56]: \n['a', 'b', NaN]\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [57]: data = [\n ....:    {'name': 'Joe', 'state': 'NY', 'age': 18},\n ....:    {'name': 'Jane', 'state': 'KY', 'age': 19, 'hobby': 'Minecraft'},\n ....:    {'name': 'Jean', 'state': 'OK', 'age': 20, 'finances': 'good'}\n ....: ]\n ....: \n```", "```py\nIn [1]: pd.DataFrame(data)\nOut[1]:\n   age finances      hobby  name state\n0   18      NaN        NaN   Joe    NY\n1   19      NaN  Minecraft  Jane    KY\n2   20     good        NaN  Jean    OK \n```", "```py\nIn [58]: pd.DataFrame(data)\nOut[58]: \n name state  age      hobby finances\n0   Joe    NY   18        NaN      NaN\n1  Jane    KY   19  Minecraft      NaN\n2  Jean    OK   20        NaN     good\n\n[3 rows x 5 columns] \n```", "```py\ndf = pd.SparseDataFrame({\"A\": [0, 0, 1, 2]})\ndf.dtypes \n```", "```py\nIn [59]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 0, 1, 2])})\n\nIn [60]: df.dtypes\nOut[60]: \nA    Sparse[int64, 0]\nLength: 1, dtype: object \n```", "```py\nIn [1]: animals = pd.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'],\n ...:                        'height': [9.1, 6.0, 9.5, 34.0],\n ...:                        'weight': [7.9, 7.5, 9.9, 198.0]})\n ...: \n\nIn [2]: animals\nOut[2]: \n kind  height  weight\n0  cat     9.1     7.9\n1  dog     6.0     7.5\n2  cat     9.5     9.9\n3  dog    34.0   198.0\n\n[4 rows x 3 columns]\n\nIn [3]: animals.groupby(\"kind\").agg(\n ...:    min_height=pd.NamedAgg(column='height', aggfunc='min'),\n ...:    max_height=pd.NamedAgg(column='height', aggfunc='max'),\n ...:    average_weight=pd.NamedAgg(column='weight', aggfunc=\"mean\"),\n ...: )\n ...: \nOut[3]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [4]: animals.groupby(\"kind\").agg(\n ...:    min_height=('height', 'min'),\n ...:    max_height=('height', 'max'),\n ...:    average_weight=('weight', 'mean'),\n ...: )\n ...: \nOut[4]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [5]: animals.groupby(\"kind\").height.agg(\n ...:    min_height=\"min\",\n ...:    max_height=\"max\",\n ...: )\n ...: \nOut[5]: \n min_height  max_height\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns] \n```", "```py\nIn [6]: animals.groupby('kind').height.agg([\n ...:    lambda x: x.iloc[0], lambda x: x.iloc[-1]\n ...: ])\n ...: \nOut[6]: \n <lambda_0>  <lambda_1>\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns]\n\nIn [7]: animals.groupby('kind').agg([\n ...:    lambda x: x.iloc[0] - x.iloc[1],\n ...:    lambda x: x.iloc[0] + x.iloc[1]\n ...: ])\n ...: \nOut[7]: \n height                weight \n <lambda_0> <lambda_1> <lambda_0> <lambda_1>\nkind \ncat        -0.4       18.6       -2.0       17.8\ndog       -28.0       40.0     -190.5      205.5\n\n[2 rows x 4 columns] \n```", "```py\nIn [8]: pd.MultiIndex.from_product([['a', 'abc'], range(500)])\nOut[8]: \nMultiIndex([(  'a',   0),\n (  'a',   1),\n (  'a',   2),\n (  'a',   3),\n (  'a',   4),\n (  'a',   5),\n (  'a',   6),\n (  'a',   7),\n (  'a',   8),\n (  'a',   9),\n ...\n ('abc', 490),\n ('abc', 491),\n ('abc', 492),\n ('abc', 493),\n ('abc', 494),\n ('abc', 495),\n ('abc', 496),\n ('abc', 497),\n ('abc', 498),\n ('abc', 499)],\n length=1000) \n```", "```py\nIn [1]: pd.MultiIndex.from_product([['a', 'abc'], range(5)])\nOut[1]: MultiIndex(levels=[['a', 'abc'], [0, 1, 2, 3]],\n ...:           codes=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]]) \n```", "```py\nfrom pandas.io.json import json_normalize\ndata = [{\n    'CreatedBy': {'Name': 'User001'},\n    'Lookup': {'TextField': 'Some text',\n               'UserField': {'Id': 'ID001', 'Name': 'Name001'}},\n    'Image': {'a': 'b'}\n}]\njson_normalize(data, max_level=1) \n```", "```py\nIn [9]: df = pd.DataFrame([{'var1': 'a,b,c', 'var2': 1},\n ...:                   {'var1': 'd,e,f', 'var2': 2}])\n ...: \n\nIn [10]: df\nOut[10]: \n var1  var2\n0  a,b,c     1\n1  d,e,f     2\n\n[2 rows x 2 columns] \n```", "```py\nIn [11]: df.assign(var1=df.var1.str.split(',')).explode('var1')\nOut[11]: \n var1  var2\n0    a     1\n0    b     1\n0    c     1\n1    d     2\n1    e     2\n1    f     2\n\n[6 rows x 2 columns] \n```", "```py\nIn [1]: animals = pd.DataFrame({'kind': ['cat', 'dog', 'cat', 'dog'],\n ...:                        'height': [9.1, 6.0, 9.5, 34.0],\n ...:                        'weight': [7.9, 7.5, 9.9, 198.0]})\n ...: \n\nIn [2]: animals\nOut[2]: \n kind  height  weight\n0  cat     9.1     7.9\n1  dog     6.0     7.5\n2  cat     9.5     9.9\n3  dog    34.0   198.0\n\n[4 rows x 3 columns]\n\nIn [3]: animals.groupby(\"kind\").agg(\n ...:    min_height=pd.NamedAgg(column='height', aggfunc='min'),\n ...:    max_height=pd.NamedAgg(column='height', aggfunc='max'),\n ...:    average_weight=pd.NamedAgg(column='weight', aggfunc=\"mean\"),\n ...: )\n ...: \nOut[3]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [4]: animals.groupby(\"kind\").agg(\n ...:    min_height=('height', 'min'),\n ...:    max_height=('height', 'max'),\n ...:    average_weight=('weight', 'mean'),\n ...: )\n ...: \nOut[4]: \n min_height  max_height  average_weight\nkind \ncat          9.1         9.5            8.90\ndog          6.0        34.0          102.75\n\n[2 rows x 3 columns] \n```", "```py\nIn [5]: animals.groupby(\"kind\").height.agg(\n ...:    min_height=\"min\",\n ...:    max_height=\"max\",\n ...: )\n ...: \nOut[5]: \n min_height  max_height\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns] \n```", "```py\nIn [6]: animals.groupby('kind').height.agg([\n ...:    lambda x: x.iloc[0], lambda x: x.iloc[-1]\n ...: ])\n ...: \nOut[6]: \n <lambda_0>  <lambda_1>\nkind \ncat          9.1         9.5\ndog          6.0        34.0\n\n[2 rows x 2 columns]\n\nIn [7]: animals.groupby('kind').agg([\n ...:    lambda x: x.iloc[0] - x.iloc[1],\n ...:    lambda x: x.iloc[0] + x.iloc[1]\n ...: ])\n ...: \nOut[7]: \n height                weight \n <lambda_0> <lambda_1> <lambda_0> <lambda_1>\nkind \ncat        -0.4       18.6       -2.0       17.8\ndog       -28.0       40.0     -190.5      205.5\n\n[2 rows x 4 columns] \n```", "```py\nIn [8]: pd.MultiIndex.from_product([['a', 'abc'], range(500)])\nOut[8]: \nMultiIndex([(  'a',   0),\n (  'a',   1),\n (  'a',   2),\n (  'a',   3),\n (  'a',   4),\n (  'a',   5),\n (  'a',   6),\n (  'a',   7),\n (  'a',   8),\n (  'a',   9),\n ...\n ('abc', 490),\n ('abc', 491),\n ('abc', 492),\n ('abc', 493),\n ('abc', 494),\n ('abc', 495),\n ('abc', 496),\n ('abc', 497),\n ('abc', 498),\n ('abc', 499)],\n length=1000) \n```", "```py\nIn [1]: pd.MultiIndex.from_product([['a', 'abc'], range(5)])\nOut[1]: MultiIndex(levels=[['a', 'abc'], [0, 1, 2, 3]],\n ...:           codes=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]]) \n```", "```py\nfrom pandas.io.json import json_normalize\ndata = [{\n    'CreatedBy': {'Name': 'User001'},\n    'Lookup': {'TextField': 'Some text',\n               'UserField': {'Id': 'ID001', 'Name': 'Name001'}},\n    'Image': {'a': 'b'}\n}]\njson_normalize(data, max_level=1) \n```", "```py\nIn [9]: df = pd.DataFrame([{'var1': 'a,b,c', 'var2': 1},\n ...:                   {'var1': 'd,e,f', 'var2': 2}])\n ...: \n\nIn [10]: df\nOut[10]: \n var1  var2\n0  a,b,c     1\n1  d,e,f     2\n\n[2 rows x 2 columns] \n```", "```py\nIn [11]: df.assign(var1=df.var1.str.split(',')).explode('var1')\nOut[11]: \n var1  var2\n0    a     1\n0    b     1\n0    c     1\n1    d     2\n1    e     2\n1    f     2\n\n[6 rows x 2 columns] \n```", "```py\nIn [12]: df = pd.DataFrame([0], index=pd.DatetimeIndex(['2019-01-01'], tz='US/Pacific'))\n\nIn [13]: df\nOut[13]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [3]: df['2019-01-01 00:00:00+04:00':'2019-01-01 01:00:00+04:00']\nOut[3]:\n 0\n2019-01-01 00:00:00-08:00  0 \n```", "```py\nIn [14]: df['2019-01-01 12:00:00+04:00':'2019-01-01 13:00:00+04:00']\nOut[14]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [1]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ...:              codes=[[0, -1, 1, 2, 3, 4]])\n ...:\nOut[1]: MultiIndex(levels=[[nan, None, NaT, 128, 2]],\n codes=[[0, -1, 1, 2, 3, 4]])\n\nIn [2]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\nOut[2]: MultiIndex(levels=[[1, 2]],\n codes=[[0, -2]]) \n```", "```py\nIn [15]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ....:              codes=[[0, -1, 1, 2, 3, 4]])\n ....: \nOut[15]: \nMultiIndex([(nan,),\n (nan,),\n (nan,),\n (nan,),\n (128,),\n (  2,)],\n )\n\nIn [16]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[16], line 1\n----> 1 pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:364, in MultiIndex.__new__(cls, levels, codes, sortorder, names, dtype, copy, name, verify_integrity)\n  361     result.sortorder = sortorder\n  363 if verify_integrity:\n--> 364     new_codes = result._verify_integrity()\n  365     result._codes = new_codes\n  367 result._reset_identity()\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:451, in MultiIndex._verify_integrity(self, codes, levels, levels_to_verify)\n  445     raise ValueError(\n  446         f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n  447         f\"level ({len(level)}). NOTE: this index is in an \"\n  448         \"inconsistent state\"\n  449     )\n  450 if len(level_codes) and level_codes.min() < -1:\n--> 451     raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n  452 if not level.is_unique:\n  453     raise ValueError(\n  454         f\"Level values must be unique: {list(level)} on level {i}\"\n  455     )\n\nValueError: On level 0, code value (-2) < -1 \n```", "```py\nIn [17]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [18]: df\nOut[18]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns]\n\nIn [19]: def func(group):\n ....:    print(group.name)\n ....:    return group\n ....: \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [20]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 1])}) \n```", "```py\nIn [2]: type(pd.concat([df, df]))\npandas.core.sparse.frame.SparseDataFrame \n```", "```py\nIn [21]: type(pd.concat([df, df]))\nOut[21]: pandas.core.frame.DataFrame \n```", "```py\nIn [1]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [2]: s\nOut[2]:\n0      b'a'\n1     b'ba'\n2    b'cba'\ndtype: object\n\nIn [3]: s.str.startswith(b'a')\nOut[3]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [22]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [23]: s\nOut[23]: \n0      b'a'\n1     b'ba'\n2    b'cba'\nLength: 3, dtype: object\n\nIn [24]: s.str.startswith(b'a')\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[24], line 1\n----> 1 s.str.startswith(b'a')\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:136, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  131 if self._inferred_dtype not in allowed_types:\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n--> 136     raise TypeError(msg)\n  137 return func(self, *args, **kwargs)\n\nTypeError: Cannot use .str.startswith with values of inferred dtype 'bytes'. \n```", "```py\nIn [25]: cat = pd.Categorical([\"foo\", \"bar\", \"bar\", \"qux\"], ordered=True)\n\nIn [26]: df = pd.DataFrame({'payload': [-1, -2, -1, -2], 'col': cat})\n\nIn [27]: df\nOut[27]: \n payload  col\n0       -1  foo\n1       -2  bar\n2       -1  bar\n3       -2  qux\n\n[4 rows x 2 columns]\n\nIn [28]: df.dtypes\nOut[28]: \npayload       int64\ncol        category\nLength: 2, dtype: object \n```", "```py\nIn [5]: df.groupby('payload').first().col.dtype\nOut[5]: dtype('O') \n```", "```py\nIn [29]: df.groupby('payload').first().col.dtype\nOut[29]: CategoricalDtype(categories=['bar', 'foo', 'qux'], ordered=True, categories_dtype=object) \n```", "```py\nIn [1]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\n...\nValueError: can only call with other PeriodIndex-ed objects\n\nIn [2]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[2]: Int64Index([1, 2, 3], dtype='int64') \n```", "```py\nIn [3]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\nOut[3]: Index([1991-09-05, 1991-09-06, 1, 2, 3], dtype='object')\nIn [4]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[4]: Index([1, 2, 3], dtype='object') \n```", "```py\nIn [30]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [31]: df\nOut[31]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns] \n```", "```py\nIn [3]: df.groupby(\"a\").ffill()\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [32]: df.groupby(\"a\").ffill()\nOut[32]: \n b\n0  1\n1  2\n\n[2 rows x 1 columns] \n```", "```py\nIn [33]: df = pd.DataFrame({\"empty_col\": pd.Categorical([])})\n\nIn [34]: df\nOut[34]: \nEmpty DataFrame\nColumns: [empty_col]\nIndex: []\n\n[0 rows x 1 columns] \n```", "```py\nIn [3]: df.describe()\nOut[3]:\n        empty_col\ncount           0\nunique          0 \n```", "```py\nIn [35]: df.describe()\nOut[35]: \n empty_col\ncount          0\nunique         0\ntop          NaN\nfreq         NaN\n\n[4 rows x 1 columns] \n```", "```py\nIn [36]: ii = pd.IntervalIndex.from_tuples([(0, 4), (1, 5), (5, 8)])\n\nIn [37]: ii\nOut[37]: IntervalIndex([(0, 4], (1, 5], (5, 8]], dtype='interval[int64, right]') \n```", "```py\nIn [4]: pd.Interval(1, 2, closed='neither') in ii\nOut[4]: True\n\nIn [5]: pd.Interval(-10, 10, closed='both') in ii\nOut[5]: True \n```", "```py\nIn [38]: pd.Interval(1, 2, closed='neither') in ii\nOut[38]: False\n\nIn [39]: pd.Interval(-10, 10, closed='both') in ii\nOut[39]: False \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: array([0, 1])\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\nOut[7]: array([0, 1, 2]) \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: 1\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\n---------------------------------------------------------------------------\nKeyError: Interval(2, 6, closed='right') \n```", "```py\nIn [40]: s = pd.Series(list('abc'), index=ii)\n\nIn [41]: s\nOut[41]: \n(0, 4]    a\n(1, 5]    b\n(5, 8]    c\nLength: 3, dtype: object \n```", "```py\nIn [8]: s[pd.Interval(1, 5)]\nOut[8]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [9]: s.loc[pd.Interval(1, 5)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [42]: s[pd.Interval(1, 5)]\nOut[42]: 'b'\n\nIn [43]: s.loc[pd.Interval(1, 5)]\nOut[43]: 'b' \n```", "```py\nIn [9]: s[pd.Interval(2, 3)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [10]: s.loc[pd.Interval(2, 3)]\nOut[10]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [6]: s[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right')\n\nIn [7]: s.loc[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right') \n```", "```py\nIn [44]: idxr = s.index.overlaps(pd.Interval(2, 3))\n\nIn [45]: idxr\nOut[45]: array([ True,  True, False])\n\nIn [46]: s[idxr]\nOut[46]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object\n\nIn [47]: s.loc[idxr]\nOut[47]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object \n```", "```py\nIn [48]: s1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\n\nIn [49]: s2 = pd.Series([3, 4, 5], index=['d', 'c', 'b'])\n\nIn [50]: s1\nOut[50]: \na    1\nb    2\nc    3\nLength: 3, dtype: int64\n\nIn [51]: s2\nOut[51]: \nd    3\nc    4\nb    5\nLength: 3, dtype: int64 \n```", "```py\nIn [5]: np.power(s1, s2)\nOut[5]:\na      1\nb     16\nc    243\ndtype: int64 \n```", "```py\nIn [52]: np.power(s1, s2)\nOut[52]: \na     1.0\nb    32.0\nc    81.0\nd     NaN\nLength: 4, dtype: float64 \n```", "```py\nIn [53]: np.power(s1, s2.array)\nOut[53]: \na      1\nb     16\nc    243\nLength: 3, dtype: int64 \n```", "```py\nIn [54]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True) \n```", "```py\nIn [2]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True)\n\nIn [3]: cat.argsort()\nOut[3]: array([1, 2, 0])\n\nIn [4]: cat[cat.argsort()]\nOut[4]:\n[NaN, a, b]\ncategories (2, object): [a < b] \n```", "```py\nIn [55]: cat.argsort()\nOut[55]: array([2, 0, 1])\n\nIn [56]: cat[cat.argsort()]\nOut[56]: \n['a', 'b', NaN]\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [57]: data = [\n ....:    {'name': 'Joe', 'state': 'NY', 'age': 18},\n ....:    {'name': 'Jane', 'state': 'KY', 'age': 19, 'hobby': 'Minecraft'},\n ....:    {'name': 'Jean', 'state': 'OK', 'age': 20, 'finances': 'good'}\n ....: ]\n ....: \n```", "```py\nIn [1]: pd.DataFrame(data)\nOut[1]:\n   age finances      hobby  name state\n0   18      NaN        NaN   Joe    NY\n1   19      NaN  Minecraft  Jane    KY\n2   20     good        NaN  Jean    OK \n```", "```py\nIn [58]: pd.DataFrame(data)\nOut[58]: \n name state  age      hobby finances\n0   Joe    NY   18        NaN      NaN\n1  Jane    KY   19  Minecraft      NaN\n2  Jean    OK   20        NaN     good\n\n[3 rows x 5 columns] \n```", "```py\nIn [12]: df = pd.DataFrame([0], index=pd.DatetimeIndex(['2019-01-01'], tz='US/Pacific'))\n\nIn [13]: df\nOut[13]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [3]: df['2019-01-01 00:00:00+04:00':'2019-01-01 01:00:00+04:00']\nOut[3]:\n 0\n2019-01-01 00:00:00-08:00  0 \n```", "```py\nIn [14]: df['2019-01-01 12:00:00+04:00':'2019-01-01 13:00:00+04:00']\nOut[14]: \n 0\n2019-01-01 00:00:00-08:00  0\n\n[1 rows x 1 columns] \n```", "```py\nIn [1]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ...:              codes=[[0, -1, 1, 2, 3, 4]])\n ...:\nOut[1]: MultiIndex(levels=[[nan, None, NaT, 128, 2]],\n codes=[[0, -1, 1, 2, 3, 4]])\n\nIn [2]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\nOut[2]: MultiIndex(levels=[[1, 2]],\n codes=[[0, -2]]) \n```", "```py\nIn [15]: pd.MultiIndex(levels=[[np.nan, None, pd.NaT, 128, 2]],\n ....:              codes=[[0, -1, 1, 2, 3, 4]])\n ....: \nOut[15]: \nMultiIndex([(nan,),\n (nan,),\n (nan,),\n (nan,),\n (128,),\n (  2,)],\n )\n\nIn [16]: pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[16], line 1\n----> 1 pd.MultiIndex(levels=[[1, 2]], codes=[[0, -2]])\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:364, in MultiIndex.__new__(cls, levels, codes, sortorder, names, dtype, copy, name, verify_integrity)\n  361     result.sortorder = sortorder\n  363 if verify_integrity:\n--> 364     new_codes = result._verify_integrity()\n  365     result._codes = new_codes\n  367 result._reset_identity()\n\nFile ~/work/pandas/pandas/pandas/core/indexes/multi.py:451, in MultiIndex._verify_integrity(self, codes, levels, levels_to_verify)\n  445     raise ValueError(\n  446         f\"On level {i}, code max ({level_codes.max()}) >= length of \"\n  447         f\"level ({len(level)}). NOTE: this index is in an \"\n  448         \"inconsistent state\"\n  449     )\n  450 if len(level_codes) and level_codes.min() < -1:\n--> 451     raise ValueError(f\"On level {i}, code value ({level_codes.min()}) < -1\")\n  452 if not level.is_unique:\n  453     raise ValueError(\n  454         f\"Level values must be unique: {list(level)} on level {i}\"\n  455     )\n\nValueError: On level 0, code value (-2) < -1 \n```", "```py\nIn [17]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [18]: df\nOut[18]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns]\n\nIn [19]: def func(group):\n ....:    print(group.name)\n ....:    return group\n ....: \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [3]: df.groupby('a').apply(func)\nx\ny\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [20]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 1])}) \n```", "```py\nIn [2]: type(pd.concat([df, df]))\npandas.core.sparse.frame.SparseDataFrame \n```", "```py\nIn [21]: type(pd.concat([df, df]))\nOut[21]: pandas.core.frame.DataFrame \n```", "```py\nIn [1]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [2]: s\nOut[2]:\n0      b'a'\n1     b'ba'\n2    b'cba'\ndtype: object\n\nIn [3]: s.str.startswith(b'a')\nOut[3]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [22]: s = pd.Series(np.array(['a', 'ba', 'cba'], 'S'), dtype=object)\n\nIn [23]: s\nOut[23]: \n0      b'a'\n1     b'ba'\n2    b'cba'\nLength: 3, dtype: object\n\nIn [24]: s.str.startswith(b'a')\n---------------------------------------------------------------------------\nTypeError  Traceback (most recent call last)\nCell In[24], line 1\n----> 1 s.str.startswith(b'a')\n\nFile ~/work/pandas/pandas/pandas/core/strings/accessor.py:136, in forbid_nonstring_types.<locals>._forbid_nonstring_types.<locals>.wrapper(self, *args, **kwargs)\n  131 if self._inferred_dtype not in allowed_types:\n  132     msg = (\n  133         f\"Cannot use .str.{func_name} with values of \"\n  134         f\"inferred dtype '{self._inferred_dtype}'.\"\n  135     )\n--> 136     raise TypeError(msg)\n  137 return func(self, *args, **kwargs)\n\nTypeError: Cannot use .str.startswith with values of inferred dtype 'bytes'. \n```", "```py\nIn [25]: cat = pd.Categorical([\"foo\", \"bar\", \"bar\", \"qux\"], ordered=True)\n\nIn [26]: df = pd.DataFrame({'payload': [-1, -2, -1, -2], 'col': cat})\n\nIn [27]: df\nOut[27]: \n payload  col\n0       -1  foo\n1       -2  bar\n2       -1  bar\n3       -2  qux\n\n[4 rows x 2 columns]\n\nIn [28]: df.dtypes\nOut[28]: \npayload       int64\ncol        category\nLength: 2, dtype: object \n```", "```py\nIn [5]: df.groupby('payload').first().col.dtype\nOut[5]: dtype('O') \n```", "```py\nIn [29]: df.groupby('payload').first().col.dtype\nOut[29]: CategoricalDtype(categories=['bar', 'foo', 'qux'], ordered=True, categories_dtype=object) \n```", "```py\nIn [1]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\n...\nValueError: can only call with other PeriodIndex-ed objects\n\nIn [2]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[2]: Int64Index([1, 2, 3], dtype='int64') \n```", "```py\nIn [3]: pd.period_range('19910905', periods=2).union(pd.Int64Index([1, 2, 3]))\nOut[3]: Index([1991-09-05, 1991-09-06, 1, 2, 3], dtype='object')\nIn [4]: pd.Index([], dtype=object).union(pd.Index([1, 2, 3]))\nOut[4]: Index([1, 2, 3], dtype='object') \n```", "```py\nIn [30]: df = pd.DataFrame({\"a\": [\"x\", \"y\"], \"b\": [1, 2]})\n\nIn [31]: df\nOut[31]: \n a  b\n0  x  1\n1  y  2\n\n[2 rows x 2 columns] \n```", "```py\nIn [3]: df.groupby(\"a\").ffill()\nOut[3]:\n   a  b\n0  x  1\n1  y  2 \n```", "```py\nIn [32]: df.groupby(\"a\").ffill()\nOut[32]: \n b\n0  1\n1  2\n\n[2 rows x 1 columns] \n```", "```py\nIn [33]: df = pd.DataFrame({\"empty_col\": pd.Categorical([])})\n\nIn [34]: df\nOut[34]: \nEmpty DataFrame\nColumns: [empty_col]\nIndex: []\n\n[0 rows x 1 columns] \n```", "```py\nIn [3]: df.describe()\nOut[3]:\n        empty_col\ncount           0\nunique          0 \n```", "```py\nIn [35]: df.describe()\nOut[35]: \n empty_col\ncount          0\nunique         0\ntop          NaN\nfreq         NaN\n\n[4 rows x 1 columns] \n```", "```py\nIn [36]: ii = pd.IntervalIndex.from_tuples([(0, 4), (1, 5), (5, 8)])\n\nIn [37]: ii\nOut[37]: IntervalIndex([(0, 4], (1, 5], (5, 8]], dtype='interval[int64, right]') \n```", "```py\nIn [4]: pd.Interval(1, 2, closed='neither') in ii\nOut[4]: True\n\nIn [5]: pd.Interval(-10, 10, closed='both') in ii\nOut[5]: True \n```", "```py\nIn [38]: pd.Interval(1, 2, closed='neither') in ii\nOut[38]: False\n\nIn [39]: pd.Interval(-10, 10, closed='both') in ii\nOut[39]: False \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: array([0, 1])\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\nOut[7]: array([0, 1, 2]) \n```", "```py\nIn [6]: ii.get_loc(pd.Interval(1, 5))\nOut[6]: 1\n\nIn [7]: ii.get_loc(pd.Interval(2, 6))\n---------------------------------------------------------------------------\nKeyError: Interval(2, 6, closed='right') \n```", "```py\nIn [40]: s = pd.Series(list('abc'), index=ii)\n\nIn [41]: s\nOut[41]: \n(0, 4]    a\n(1, 5]    b\n(5, 8]    c\nLength: 3, dtype: object \n```", "```py\nIn [8]: s[pd.Interval(1, 5)]\nOut[8]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [9]: s.loc[pd.Interval(1, 5)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [42]: s[pd.Interval(1, 5)]\nOut[42]: 'b'\n\nIn [43]: s.loc[pd.Interval(1, 5)]\nOut[43]: 'b' \n```", "```py\nIn [9]: s[pd.Interval(2, 3)]\nOut[9]:\n(0, 4]    a\n(1, 5]    b\ndtype: object\n\nIn [10]: s.loc[pd.Interval(2, 3)]\nOut[10]:\n(0, 4]    a\n(1, 5]    b\ndtype: object \n```", "```py\nIn [6]: s[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right')\n\nIn [7]: s.loc[pd.Interval(2, 3)]\n---------------------------------------------------------------------------\nKeyError: Interval(2, 3, closed='right') \n```", "```py\nIn [44]: idxr = s.index.overlaps(pd.Interval(2, 3))\n\nIn [45]: idxr\nOut[45]: array([ True,  True, False])\n\nIn [46]: s[idxr]\nOut[46]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object\n\nIn [47]: s.loc[idxr]\nOut[47]: \n(0, 4]    a\n(1, 5]    b\nLength: 2, dtype: object \n```", "```py\nIn [48]: s1 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])\n\nIn [49]: s2 = pd.Series([3, 4, 5], index=['d', 'c', 'b'])\n\nIn [50]: s1\nOut[50]: \na    1\nb    2\nc    3\nLength: 3, dtype: int64\n\nIn [51]: s2\nOut[51]: \nd    3\nc    4\nb    5\nLength: 3, dtype: int64 \n```", "```py\nIn [5]: np.power(s1, s2)\nOut[5]:\na      1\nb     16\nc    243\ndtype: int64 \n```", "```py\nIn [52]: np.power(s1, s2)\nOut[52]: \na     1.0\nb    32.0\nc    81.0\nd     NaN\nLength: 4, dtype: float64 \n```", "```py\nIn [53]: np.power(s1, s2.array)\nOut[53]: \na      1\nb     16\nc    243\nLength: 3, dtype: int64 \n```", "```py\nIn [54]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True) \n```", "```py\nIn [2]: cat = pd.Categorical(['b', None, 'a'], categories=['a', 'b'], ordered=True)\n\nIn [3]: cat.argsort()\nOut[3]: array([1, 2, 0])\n\nIn [4]: cat[cat.argsort()]\nOut[4]:\n[NaN, a, b]\ncategories (2, object): [a < b] \n```", "```py\nIn [55]: cat.argsort()\nOut[55]: array([2, 0, 1])\n\nIn [56]: cat[cat.argsort()]\nOut[56]: \n['a', 'b', NaN]\nCategories (2, object): ['a' < 'b'] \n```", "```py\nIn [57]: data = [\n ....:    {'name': 'Joe', 'state': 'NY', 'age': 18},\n ....:    {'name': 'Jane', 'state': 'KY', 'age': 19, 'hobby': 'Minecraft'},\n ....:    {'name': 'Jean', 'state': 'OK', 'age': 20, 'finances': 'good'}\n ....: ]\n ....: \n```", "```py\nIn [1]: pd.DataFrame(data)\nOut[1]:\n   age finances      hobby  name state\n0   18      NaN        NaN   Joe    NY\n1   19      NaN  Minecraft  Jane    KY\n2   20     good        NaN  Jean    OK \n```", "```py\nIn [58]: pd.DataFrame(data)\nOut[58]: \n name state  age      hobby finances\n0   Joe    NY   18        NaN      NaN\n1  Jane    KY   19  Minecraft      NaN\n2  Jean    OK   20        NaN     good\n\n[3 rows x 5 columns] \n```", "```py\ndf = pd.SparseDataFrame({\"A\": [0, 0, 1, 2]})\ndf.dtypes \n```", "```py\nIn [59]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 0, 1, 2])})\n\nIn [60]: df.dtypes\nOut[60]: \nA    Sparse[int64, 0]\nLength: 1, dtype: object \n```", "```py\ndf = pd.SparseDataFrame({\"A\": [0, 0, 1, 2]})\ndf.dtypes \n```", "```py\nIn [59]: df = pd.DataFrame({\"A\": pd.arrays.SparseArray([0, 0, 1, 2])})\n\nIn [60]: df.dtypes\nOut[60]: \nA    Sparse[int64, 0]\nLength: 1, dtype: object \n```"]