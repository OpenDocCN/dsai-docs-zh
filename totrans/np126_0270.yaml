- en: numpy.ufunc
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.ufunc
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html](https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html](https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Functions that operate element by element on whole arrays.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个数组上逐元素操作的函数。
- en: To see the documentation for a specific ufunc, use [`info`](numpy.info.html#numpy.info
    "numpy.info"). For example, `np.info(np.sin)`. Because ufuncs are written in C
    (for speed) and linked into Python with NumPy’s ufunc facility, Python’s help()
    function finds this page whenever help() is called on a ufunc.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看特定ufunc的文档，请使用[`info`](numpy.info.html#numpy.info "numpy.info")。例如，`np.info(np.sin)`。因为ufuncs是用C语言编写的（为了速度）并通过NumPy的ufunc功能链接到Python中，所以当在ufunc上调用help()时，Python的help()函数会找到这个页面。
- en: A detailed explanation of ufuncs can be found in the docs for [Universal functions
    (ufunc)](../ufuncs.html#ufuncs).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[通用函数（ufunc）](../ufuncs.html#ufuncs)文档中可以找到对ufunc的详细解释。
- en: '**Calling ufuncs:** `op(*x[, out], where=True, **kwargs)`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用ufuncs：** `op(*x[, out], where=True, **kwargs)`'
- en: Apply *op* to the arguments **x* elementwise, broadcasting the arguments.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数**x*逐元素应用*op*，广播参数。
- en: 'The broadcasting rules are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 广播规则为：
- en: Dimensions of length 1 may be prepended to either array.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度为1的维度可以添加到任一数组的前面。
- en: Arrays may be repeated along dimensions of length 1.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组可以沿着长度为1的维度重复。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***x**array_like'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '***x**array_like'
- en: Input arrays.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数组。
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**ndarray、None或ndarray和None的元组，可选'
- en: Alternate array object(s) in which to put the result; if provided, it must have
    a shape that the inputs broadcast to. A tuple of arrays (possible only as a keyword
    argument) must have length equal to the number of outputs; use None for uninitialized
    outputs to be allocated by the ufunc.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 放置结果的替代数组对象；如果提供，它必须具有输入广播到的形状。数组的元组（仅作为关键字参数）的长度必须等于输出的数量；对于要由ufunc分配的未初始化输出，请使用None。
- en: '**where**array_like, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**where**array_like，可选'
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此条件在输入上进行广播。在条件为True的位置，*out*数组将设置为ufunc结果。在其他位置，*out*数组将保留其原始值。请注意，如果通过默认的`out=None`创建了未初始化的*out*数组，则其中条件为False的位置将保持未初始化状态。
- en: '****kwargs**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '****kwargs**'
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他仅限关键字的参数，请参阅[ufunc文档](../ufuncs.html#ufuncs-kwargs)。
- en: 'Returns:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**r**ndarray or tuple of ndarray'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**r**ndarray或ndarray的元组'
- en: '*r* will have the shape that the arrays in *x* broadcast to; if *out* is provided,
    it will be returned. If not, *r* will be allocated and may contain uninitialized
    values. If the function has more than one output, then the result will be a tuple
    of arrays.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*r*将具有数组*x*广播到的形状；如果提供了*out*，则将返回它。如果没有，则将分配*r*并可能包含未初始化的值。如果函数有多个输出，则结果将是数组的元组。'
- en: 'Attributes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`identity`](numpy.identity.html#numpy.identity "numpy.identity")'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[`identity`](numpy.identity.html#numpy.identity "numpy.identity")'
- en: The identity value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 标识值。
- en: '[`nargs`](numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nargs`](numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")'
- en: The number of arguments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的数量。
- en: '[`nin`](numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nin`](numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")'
- en: The number of inputs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的数量。
- en: '[`nout`](numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nout`](numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")'
- en: The number of outputs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的数量。
- en: '[`ntypes`](numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ntypes`](numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")'
- en: The number of types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 类型的数量。
- en: '[`signature`](numpy.ufunc.signature.html#numpy.ufunc.signature "numpy.ufunc.signature")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`signature`](numpy.ufunc.signature.html#numpy.ufunc.signature "numpy.ufunc.signature")'
- en: Definition of the core elements a generalized ufunc operates on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 广义ufunc操作的核心元素的定义。
- en: '[`types`](numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`types`](numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")'
- en: Returns a list with types grouped input->output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个按输入->输出分组的类型列表。
- en: Methods
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`__call__`](numpy.ufunc.__call__.html#numpy.ufunc.__call__ "numpy.ufunc.__call__")(*args, **kwargs)
    | Call self as a function. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`__call__`](numpy.ufunc.__call__.html#numpy.ufunc.__call__ "numpy.ufunc.__call__")(*args, **kwargs)
    | 作为函数调用自身。 |'
- en: '| [`accumulate`](numpy.ufunc.accumulate.html#numpy.ufunc.accumulate "numpy.ufunc.accumulate")(array[, axis, dtype, out])
    | Accumulate the result of applying the operator to all elements. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`accumulate`](numpy.ufunc.accumulate.html#numpy.ufunc.accumulate "numpy.ufunc.accumulate")(array[, axis, dtype, out])
    | 累积将运算符应用于所有元素的结果。 |'
- en: '| [`at`](numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | Performs unbuffered in place operation on operand ''a'' for elements specified
    by ''indices''. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`at`](numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | 对由''indices''指定的元素在操作数''a''上执行无缓冲就地操作。 |'
- en: '| [`outer`](numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`outer`](numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | 将ufunc *op* 应用于所有(a, b)对，其中a在*A*中，b在*B*中。 |'
- en: '| [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, keepdims, ...])
    | Reduces [`array`](numpy.array.html#numpy.array "numpy.array")''s dimension by
    one, by applying ufunc along one axis. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, keepdims, ...])
    | 通过沿着一个轴应用ufunc来减少[`array`](numpy.array.html#numpy.array "numpy.array")的维度。 |'
- en: '| [`reduceat`](numpy.ufunc.reduceat.html#numpy.ufunc.reduceat "numpy.ufunc.reduceat")(array, indices[, axis, dtype, out])
    | Performs a (local) reduce with specified slices over a single axis. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`reduceat`](numpy.ufunc.reduceat.html#numpy.ufunc.reduceat "numpy.ufunc.reduceat")(array, indices[, axis, dtype, out])
    | 在单个轴上执行指定切片的（局部）reduce。 |'
- en: '| [`resolve_dtypes`](numpy.ufunc.resolve_dtypes.html#numpy.ufunc.resolve_dtypes
    "numpy.ufunc.resolve_dtypes")(dtypes, *[, signature, ...]) | Find the dtypes NumPy
    will use for the operation. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`resolve_dtypes`](numpy.ufunc.resolve_dtypes.html#numpy.ufunc.resolve_dtypes
    "numpy.ufunc.resolve_dtypes")(dtypes, *[, signature, ...]) | 查找NumPy将用于操作的数据类型。
    |'
