- en: scipy.sparse.csr_array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compressed Sparse Row array.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be instantiated in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: csr_array(D)
  prefs: []
  type: TYPE_NORMAL
- en: where D is a 2-D ndarray
  prefs: []
  type: TYPE_NORMAL
- en: csr_array(S)
  prefs: []
  type: TYPE_NORMAL
- en: with another sparse array or matrix S (equivalent to S.tocsr())
  prefs: []
  type: TYPE_NORMAL
- en: csr_array((M, N), [dtype])
  prefs: []
  type: TYPE_NORMAL
- en: to construct an empty array with shape (M, N) dtype is optional, defaulting
    to dtype=’d’.
  prefs: []
  type: TYPE_NORMAL
- en: csr_array((data, (row_ind, col_ind)), [shape=(M, N)])
  prefs: []
  type: TYPE_NORMAL
- en: where `data`, `row_ind` and `col_ind` satisfy the relationship `a[row_ind[k],
    col_ind[k]] = data[k]`.
  prefs: []
  type: TYPE_NORMAL
- en: csr_array((data, indices, indptr), [shape=(M, N)])
  prefs: []
  type: TYPE_NORMAL
- en: is the standard CSR representation where the column indices for row i are stored
    in `indices[indptr[i]:indptr[i+1]]` and their corresponding values are stored
    in `data[indptr[i]:indptr[i+1]]`. If the shape parameter is not supplied, the
    array dimensions are inferred from the index arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Sparse arrays can be used in arithmetic operations: they support addition,
    subtraction, multiplication, division, and matrix power.'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of the CSR format
  prefs: []
  type: TYPE_NORMAL
- en: efficient arithmetic operations CSR + CSR, CSR * CSR, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: efficient row slicing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fast matrix vector products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of the CSR format
  prefs: []
  type: TYPE_NORMAL
- en: slow column slicing operations (consider CSC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changes to the sparsity structure are expensive (consider LIL or DOK)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canonical Format
  prefs: []
  type: TYPE_NORMAL
- en: Within each row, indices are sorted by column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no duplicate entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Duplicate entries are summed together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example of how to construct a CSR array incrementally, the following
    snippet builds a term-document array from texts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: Data type of the array
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](scipy.sparse.csr_array.shape.html#scipy.sparse.csr_array.shape "scipy.sparse.csr_array.shape")2-tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of dimensions (this is always 2)
  prefs: []
  type: TYPE_NORMAL
- en: '[`nnz`](scipy.sparse.csr_array.nnz.html#scipy.sparse.csr_array.nnz "scipy.sparse.csr_array.nnz")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values, including explicit zeros.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](scipy.sparse.csr_array.size.html#scipy.sparse.csr_array.size "scipy.sparse.csr_array.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of stored values.
  prefs: []
  type: TYPE_NORMAL
- en: '**data**'
  prefs: []
  type: TYPE_NORMAL
- en: CSR format data array of the array
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**'
  prefs: []
  type: TYPE_NORMAL
- en: CSR format index array of the array
  prefs: []
  type: TYPE_NORMAL
- en: '**indptr**'
  prefs: []
  type: TYPE_NORMAL
- en: CSR format index pointer array of the array
  prefs: []
  type: TYPE_NORMAL
- en: '[`has_sorted_indices`](scipy.sparse.csr_array.has_sorted_indices.html#scipy.sparse.csr_array.has_sorted_indices
    "scipy.sparse.csr_array.has_sorted_indices")'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the indices are sorted
  prefs: []
  type: TYPE_NORMAL
- en: '[`has_canonical_format`](scipy.sparse.csr_array.has_canonical_format.html#scipy.sparse.csr_array.has_canonical_format
    "scipy.sparse.csr_array.has_canonical_format")'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the array/matrix has sorted indices and no duplicates
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](scipy.sparse.csr_array.T.html#scipy.sparse.csr_array.T "scipy.sparse.csr_array.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Transpose.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__len__`](scipy.sparse.csr_array.__len__.html#scipy.sparse.csr_array.__len__
    "scipy.sparse.csr_array.__len__")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsin`](scipy.sparse.csr_array.arcsin.html#scipy.sparse.csr_array.arcsin
    "scipy.sparse.csr_array.arcsin")() | Element-wise arcsin. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arcsinh`](scipy.sparse.csr_array.arcsinh.html#scipy.sparse.csr_array.arcsinh
    "scipy.sparse.csr_array.arcsinh")() | Element-wise arcsinh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctan`](scipy.sparse.csr_array.arctan.html#scipy.sparse.csr_array.arctan
    "scipy.sparse.csr_array.arctan")() | Element-wise arctan. |'
  prefs: []
  type: TYPE_TB
- en: '| [`arctanh`](scipy.sparse.csr_array.arctanh.html#scipy.sparse.csr_array.arctanh
    "scipy.sparse.csr_array.arctanh")() | Element-wise arctanh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](scipy.sparse.csr_array.argmax.html#scipy.sparse.csr_array.argmax
    "scipy.sparse.csr_array.argmax")([axis, out]) | Return indices of maximum elements
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](scipy.sparse.csr_array.argmin.html#scipy.sparse.csr_array.argmin
    "scipy.sparse.csr_array.argmin")([axis, out]) | Return indices of minimum elements
    along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asformat`](scipy.sparse.csr_array.asformat.html#scipy.sparse.csr_array.asformat
    "scipy.sparse.csr_array.asformat")(format[, copy]) | Return this array/matrix
    in the passed format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`asfptype`](scipy.sparse.csr_array.asfptype.html#scipy.sparse.csr_array.asfptype
    "scipy.sparse.csr_array.asfptype")() | Upcast array/matrix to a floating point
    format (if necessary) |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](scipy.sparse.csr_array.astype.html#scipy.sparse.csr_array.astype
    "scipy.sparse.csr_array.astype")(dtype[, casting, copy]) | Cast the array/matrix
    elements to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](scipy.sparse.csr_array.ceil.html#scipy.sparse.csr_array.ceil "scipy.sparse.csr_array.ceil")()
    | Element-wise ceil. |'
  prefs: []
  type: TYPE_TB
- en: '| [`check_format`](scipy.sparse.csr_array.check_format.html#scipy.sparse.csr_array.check_format
    "scipy.sparse.csr_array.check_format")([full_check]) | Check whether the array/matrix
    respects the CSR or CSC format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](scipy.sparse.csr_array.conj.html#scipy.sparse.csr_array.conj "scipy.sparse.csr_array.conj")([copy])
    | Element-wise complex conjugation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](scipy.sparse.csr_array.conjugate.html#scipy.sparse.csr_array.conjugate
    "scipy.sparse.csr_array.conjugate")([copy]) | Element-wise complex conjugation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](scipy.sparse.csr_array.copy.html#scipy.sparse.csr_array.copy "scipy.sparse.csr_array.copy")()
    | Returns a copy of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`count_nonzero`](scipy.sparse.csr_array.count_nonzero.html#scipy.sparse.csr_array.count_nonzero
    "scipy.sparse.csr_array.count_nonzero")() | Number of non-zero entries, equivalent
    to |'
  prefs: []
  type: TYPE_TB
- en: '| [`deg2rad`](scipy.sparse.csr_array.deg2rad.html#scipy.sparse.csr_array.deg2rad
    "scipy.sparse.csr_array.deg2rad")() | Element-wise deg2rad. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](scipy.sparse.csr_array.diagonal.html#scipy.sparse.csr_array.diagonal
    "scipy.sparse.csr_array.diagonal")([k]) | Returns the kth diagonal of the array/matrix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`dot`](scipy.sparse.csr_array.dot.html#scipy.sparse.csr_array.dot "scipy.sparse.csr_array.dot")(other)
    | Ordinary dot product |'
  prefs: []
  type: TYPE_TB
- en: '| [`eliminate_zeros`](scipy.sparse.csr_array.eliminate_zeros.html#scipy.sparse.csr_array.eliminate_zeros
    "scipy.sparse.csr_array.eliminate_zeros")() | Remove zero entries from the array/matrix
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](scipy.sparse.csr_array.expm1.html#scipy.sparse.csr_array.expm1
    "scipy.sparse.csr_array.expm1")() | Element-wise expm1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](scipy.sparse.csr_array.floor.html#scipy.sparse.csr_array.floor
    "scipy.sparse.csr_array.floor")() | Element-wise floor. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getH`](scipy.sparse.csr_array.getH.html#scipy.sparse.csr_array.getH "scipy.sparse.csr_array.getH")()
    | Return the Hermitian transpose of this array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_shape`](scipy.sparse.csr_array.get_shape.html#scipy.sparse.csr_array.get_shape
    "scipy.sparse.csr_array.get_shape")() | Get shape of a sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getcol`](scipy.sparse.csr_array.getcol.html#scipy.sparse.csr_array.getcol
    "scipy.sparse.csr_array.getcol")(j) | Returns a copy of column j of the array/matrix,
    as an (m x 1) sparse array/matrix (column vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`getformat`](scipy.sparse.csr_array.getformat.html#scipy.sparse.csr_array.getformat
    "scipy.sparse.csr_array.getformat")() | Sparse array/matrix storage format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getmaxprint`](scipy.sparse.csr_array.getmaxprint.html#scipy.sparse.csr_array.getmaxprint
    "scipy.sparse.csr_array.getmaxprint")() | Maximum number of elements to display
    when printed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getnnz`](scipy.sparse.csr_array.getnnz.html#scipy.sparse.csr_array.getnnz
    "scipy.sparse.csr_array.getnnz")([axis]) | Number of stored values, including
    explicit zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getrow`](scipy.sparse.csr_array.getrow.html#scipy.sparse.csr_array.getrow
    "scipy.sparse.csr_array.getrow")(i) | Returns a copy of row i of the array/matrix,
    as a (1 x n) sparse array/matrix (row vector). |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](scipy.sparse.csr_array.log1p.html#scipy.sparse.csr_array.log1p
    "scipy.sparse.csr_array.log1p")() | Element-wise log1p. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](scipy.sparse.csr_array.max.html#scipy.sparse.csr_array.max "scipy.sparse.csr_array.max")([axis, out])
    | Return the maximum of the array/matrix or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](scipy.sparse.csr_array.maximum.html#scipy.sparse.csr_array.maximum
    "scipy.sparse.csr_array.maximum")(other) | Element-wise maximum between this and
    another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.sparse.csr_array.mean.html#scipy.sparse.csr_array.mean "scipy.sparse.csr_array.mean")([axis, dtype, out])
    | Compute the arithmetic mean along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](scipy.sparse.csr_array.min.html#scipy.sparse.csr_array.min "scipy.sparse.csr_array.min")([axis, out])
    | Return the minimum of the array/matrix or maximum along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](scipy.sparse.csr_array.minimum.html#scipy.sparse.csr_array.minimum
    "scipy.sparse.csr_array.minimum")(other) | Element-wise minimum between this and
    another array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multiply`](scipy.sparse.csr_array.multiply.html#scipy.sparse.csr_array.multiply
    "scipy.sparse.csr_array.multiply")(other) | Point-wise multiplication by another
    array/matrix, vector, or scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmax`](scipy.sparse.csr_array.nanmax.html#scipy.sparse.csr_array.nanmax
    "scipy.sparse.csr_array.nanmax")([axis, out]) | Return the maximum of the array/matrix
    or maximum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanmin`](scipy.sparse.csr_array.nanmin.html#scipy.sparse.csr_array.nanmin
    "scipy.sparse.csr_array.nanmin")([axis, out]) | Return the minimum of the array/matrix
    or minimum along an axis, ignoring any NaNs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](scipy.sparse.csr_array.nonzero.html#scipy.sparse.csr_array.nonzero
    "scipy.sparse.csr_array.nonzero")() | Nonzero indices of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`power`](scipy.sparse.csr_array.power.html#scipy.sparse.csr_array.power
    "scipy.sparse.csr_array.power")(n[, dtype]) | This function performs element-wise
    power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prune`](scipy.sparse.csr_array.prune.html#scipy.sparse.csr_array.prune
    "scipy.sparse.csr_array.prune")() | Remove empty space after all non-zero elements.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`rad2deg`](scipy.sparse.csr_array.rad2deg.html#scipy.sparse.csr_array.rad2deg
    "scipy.sparse.csr_array.rad2deg")() | Element-wise rad2deg. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](scipy.sparse.csr_array.reshape.html#scipy.sparse.csr_array.reshape
    "scipy.sparse.csr_array.reshape")(self, shape[, order, copy]) | Gives a new shape
    to a sparse array/matrix without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](scipy.sparse.csr_array.resize.html#scipy.sparse.csr_array.resize
    "scipy.sparse.csr_array.resize")(*shape) | Resize the array/matrix in-place to
    dimensions given by `shape` |'
  prefs: []
  type: TYPE_TB
- en: '| [`rint`](scipy.sparse.csr_array.rint.html#scipy.sparse.csr_array.rint "scipy.sparse.csr_array.rint")()
    | Element-wise rint. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_shape`](scipy.sparse.csr_array.set_shape.html#scipy.sparse.csr_array.set_shape
    "scipy.sparse.csr_array.set_shape")(shape) | See [`reshape`](scipy.sparse.csr_array.reshape.html#scipy.sparse.csr_array.reshape
    "scipy.sparse.csr_array.reshape"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiag`](scipy.sparse.csr_array.setdiag.html#scipy.sparse.csr_array.setdiag
    "scipy.sparse.csr_array.setdiag")(values[, k]) | Set diagonal or off-diagonal
    elements of the array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sign`](scipy.sparse.csr_array.sign.html#scipy.sparse.csr_array.sign "scipy.sparse.csr_array.sign")()
    | Element-wise sign. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sin`](scipy.sparse.csr_array.sin.html#scipy.sparse.csr_array.sin "scipy.sparse.csr_array.sin")()
    | Element-wise sin. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinh`](scipy.sparse.csr_array.sinh.html#scipy.sparse.csr_array.sinh "scipy.sparse.csr_array.sinh")()
    | Element-wise sinh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort_indices`](scipy.sparse.csr_array.sort_indices.html#scipy.sparse.csr_array.sort_indices
    "scipy.sparse.csr_array.sort_indices")() | Sort the indices of this array/matrix
    *in place* |'
  prefs: []
  type: TYPE_TB
- en: '| [`sorted_indices`](scipy.sparse.csr_array.sorted_indices.html#scipy.sparse.csr_array.sorted_indices
    "scipy.sparse.csr_array.sorted_indices")() | Return a copy of this array/matrix
    with sorted indices |'
  prefs: []
  type: TYPE_TB
- en: '| [`sqrt`](scipy.sparse.csr_array.sqrt.html#scipy.sparse.csr_array.sqrt "scipy.sparse.csr_array.sqrt")()
    | Element-wise sqrt. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](scipy.sparse.csr_array.sum.html#scipy.sparse.csr_array.sum "scipy.sparse.csr_array.sum")([axis, dtype, out])
    | Sum the array/matrix elements over a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum_duplicates`](scipy.sparse.csr_array.sum_duplicates.html#scipy.sparse.csr_array.sum_duplicates
    "scipy.sparse.csr_array.sum_duplicates")() | Eliminate duplicate entries by adding
    them together |'
  prefs: []
  type: TYPE_TB
- en: '| [`tan`](scipy.sparse.csr_array.tan.html#scipy.sparse.csr_array.tan "scipy.sparse.csr_array.tan")()
    | Element-wise tan. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tanh`](scipy.sparse.csr_array.tanh.html#scipy.sparse.csr_array.tanh "scipy.sparse.csr_array.tanh")()
    | Element-wise tanh. |'
  prefs: []
  type: TYPE_TB
- en: '| [`toarray`](scipy.sparse.csr_array.toarray.html#scipy.sparse.csr_array.toarray
    "scipy.sparse.csr_array.toarray")([order, out]) | Return a dense ndarray representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobsr`](scipy.sparse.csr_array.tobsr.html#scipy.sparse.csr_array.tobsr
    "scipy.sparse.csr_array.tobsr")([blocksize, copy]) | Convert this array/matrix
    to Block Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocoo`](scipy.sparse.csr_array.tocoo.html#scipy.sparse.csr_array.tocoo
    "scipy.sparse.csr_array.tocoo")([copy]) | Convert this array/matrix to COOrdinate
    format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsc`](scipy.sparse.csr_array.tocsc.html#scipy.sparse.csr_array.tocsc
    "scipy.sparse.csr_array.tocsc")([copy]) | Convert this array/matrix to Compressed
    Sparse Column format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tocsr`](scipy.sparse.csr_array.tocsr.html#scipy.sparse.csr_array.tocsr
    "scipy.sparse.csr_array.tocsr")([copy]) | Convert this array/matrix to Compressed
    Sparse Row format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todense`](scipy.sparse.csr_array.todense.html#scipy.sparse.csr_array.todense
    "scipy.sparse.csr_array.todense")([order, out]) | Return a dense representation
    of this sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todia`](scipy.sparse.csr_array.todia.html#scipy.sparse.csr_array.todia
    "scipy.sparse.csr_array.todia")([copy]) | Convert this array/matrix to sparse
    DIAgonal format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`todok`](scipy.sparse.csr_array.todok.html#scipy.sparse.csr_array.todok
    "scipy.sparse.csr_array.todok")([copy]) | Convert this array/matrix to Dictionary
    Of Keys format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolil`](scipy.sparse.csr_array.tolil.html#scipy.sparse.csr_array.tolil
    "scipy.sparse.csr_array.tolil")([copy]) | Convert this array/matrix to List of
    Lists format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](scipy.sparse.csr_array.trace.html#scipy.sparse.csr_array.trace
    "scipy.sparse.csr_array.trace")([offset]) | Returns the sum along diagonals of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](scipy.sparse.csr_array.transpose.html#scipy.sparse.csr_array.transpose
    "scipy.sparse.csr_array.transpose")([axes, copy]) | Reverses the dimensions of
    the sparse array/matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trunc`](scipy.sparse.csr_array.trunc.html#scipy.sparse.csr_array.trunc
    "scipy.sparse.csr_array.trunc")() | Element-wise trunc. |'
  prefs: []
  type: TYPE_TB
- en: '| **__getitem__** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **__mul__** |  |'
  prefs: []
  type: TYPE_TB
