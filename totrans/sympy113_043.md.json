["```py\n>>> from __future__ import print_function\n>>> from sympy import *\n>>> x, x0, h = symbols('x, x_0, h')\n>>> Fi, Fip1, Fip2 = symbols('F_{i}, F_{i+1}, F_{i+2}')\n>>> n = 3 # there are the coefficients c_0=Fi, c_1=dF/dx, c_2=d**2F/dx**2\n>>> c = symbols('c:3')\n>>> def P(x, x0, c, n):\n...     return sum( ((1/factorial(i))*c[i] * (x-x0)**i for i in range(n)) ) \n```", "```py\n>>> R = Matrix([[Fi], [Fip1], [Fip2]]) \n```", "```py\n>>> m11 = P(x0 , x0, c, n).diff(c[0])\n>>> m12 = P(x0 , x0, c, n).diff(c[1])\n>>> m13 = P(x0 , x0, c, n).diff(c[2]) \n```", "```py\n>>> m21 = P(x0+h, x0, c, n).diff(c[0])\n>>> m22 = P(x0+h, x0, c, n).diff(c[1])\n>>> m23 = P(x0+h, x0, c, n).diff(c[2]) \n```", "```py\n>>> m31 = P(x0+2*h, x0, c, n).diff(c[0])\n>>> m32 = P(x0+2*h, x0, c, n).diff(c[1])\n>>> m33 = P(x0+2*h, x0, c, n).diff(c[2]) \n```", "```py\n>>> M = Matrix([[m11, m12, m13], [m21, m22, m23], [m31, m32, m33]]) \n```", "```py\n>>> X =  M.inv() * R \n```", "```py\n>>> print(together(X[1]))\n(4*F_{i+1} - F_{i+2} - 3*F_{i})/(2*h) \n```", "```py\n>>> from __future__ import print_function\n>>> from sympy import *\n>>> x, x0, h = symbols('x, x_i, h')\n>>> Fi, Fim1, Fip1 = symbols('F_{i}, F_{i-1}, F_{i+1}')\n>>> n = 3 # there are the coefficients c_0=Fi,  c_1=dF/h,  c_2=d**2F/h**2\n>>> c = symbols('c:3')\n>>> # define a polynomial of degree n\n>>> def P(x, x0, c, n):\n...    return sum( ((1/factorial(i))*c[i] * (x-x0)**i for i in range(n)) )\n>>> # now we make a matrix consisting of the coefficients\n>>> # of the c_i in the nth degree polynomial P\n>>> # coefficients of c_i evaluated at x_i\n>>> m11 = P(x0 , x0, c, n).diff(c[0])\n>>> m12 = P(x0 , x0, c, n).diff(c[1])\n>>> m13 = P(x0 , x0, c, n).diff(c[2])\n>>> # coefficients of c_i evaluated at x_i - h\n>>> m21 = P(x0-h, x0, c, n).diff(c[0])\n>>> m22 = P(x0-h, x0, c, n).diff(c[1])\n>>> m23 = P(x0-h, x0, c, n).diff(c[2])\n>>> # coefficients of c_i evaluated at x_i + h\n>>> m31 = P(x0+h, x0, c, n).diff(c[0])\n>>> m32 = P(x0+h, x0, c, n).diff(c[1])\n>>> m33 = P(x0+h, x0, c, n).diff(c[2])\n>>> # matrix of the coefficients is 3x3 in this case\n>>> M = Matrix([[m11, m12, m13], [m21, m22, m23], [m31, m32, m33]]) \n```", "```py\n>>> # matrix of the function values...actually a vector of right hand sides\n>>> R = Matrix([[Fi], [Fim1], [Fip1]])\n>>> # matrix form of the three equations for the c_i is M*X = R\n>>> # solution directly inverting the 3x3 matrix M:\n>>> X =  M.inv() * R\n>>> # note that all three coefficients make up the solution\n>>> # the first derivative is coefficient c_1 which is X[1].\n>>> print(\"The second-order accurate approximation for the first derivative is: \")\nThe second-order accurate approximation for the first derivative is:\n>>> print(together(X[1]))\n(F_{i+1} - F_{i-1})/(2*h) \n```", "```py\n>>> d = symbols('c:8')\n>>> dfdxcheck = (P(x0+h, x0, d, 8) - P(x0-h, x0, d, 8))/(2*h)\n>>> print(simplify(dfdxcheck)) # so the appropriate cancellation of terms involving `h` happens\nc1 + c3*h**2/6 + c5*h**4/120 + c7*h**6/5040 \n```", "```py\n>>> from __future__ import print_function\n>>> from sympy import *\n>>> x, xN, h = symbols('x, x_N, h')\n>>> FN, FNm1, FNm2 = symbols('F_{N}, F_{N-1}, F_{N-2}')\n>>> n = 8 # there are the coefficients c_0=Fi,  c_1=dF/h,  c_2=d**2F/h**2\n>>> c = symbols('c:8')\n>>> # define a polynomial of degree d\n>>> def P(x, x0, c, n):\n...     return sum( ((1/factorial(i))*c[i] * (x-x0)**i for i in range(n)) ) \n```", "```py\n>>> m11 = P(xN , xN, c, n).diff(c[0])\n>>> m12 = P(xN, xN, c, n).diff(c[1])\n>>> m13 = P(xN , xN, c, n).diff(c[2])\n>>> # coefficients of c_i evaluated at x_i - h\n>>> m21 = P(xN-h, xN, c, n).diff(c[0])\n>>> m22 = P(xN-h, xN, c, n).diff(c[1])\n>>> m23 = P(xN-h, xN, c, n).diff(c[2])\n>>> # coefficients of c_i evaluated at x_i + h\n>>> m31 = P(xN-2*h, xN, c, n).diff(c[0])\n>>> m32 = P(xN-2*h, xN, c, n).diff(c[1])\n>>> m33 = P(xN-2*h, xN, c, n).diff(c[2]) \n```", "```py\n>>> M = Matrix([[m11, m12, m13], [m21, m22, m23], [m31, m32, m33]])\n>>> # matrix of the function values...actually a vector of right hand sides\n>>> R = Matrix([[FN], [FNm1], [FNm2]]) \n```", "```py\n>>> X =  M.inv() * R \n```", "```py\n>>> print(\"The first derivative centered at the last point on the right is:\")\nThe first derivative centered at the last point on the right is:\n>>> print(together(X[1]))\n(-4*F_{N-1} + F_{N-2} + 3*F_{N})/(2*h) \n```"]