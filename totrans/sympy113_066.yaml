- en: Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/util.html](https://docs.sympy.org/latest/modules/combinatorics/util.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Order \(\{0, 1, \dots, n-1\}\) so that base points come first and in order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : the base'
  prefs: []
  type: TYPE_NORMAL
- en: '**degree** : the degree of the associated permutation group'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A list `base_ordering` such that `base_ordering[point]` is the
  prefs: []
  type: TYPE_NORMAL
- en: number of `point` in the ordering.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is used in backtrack searches, when we define a relation \(\ll\) on the
    underlying set for a permutation group of degree \(n\), \(\{0, 1, \dots, n-1\}\),
    so that if \((b_1, b_2, \dots, b_k)\) is a base we have \(b_i \ll b_j\) whenever
    \(i<j\) and \(b_i \ll a\) for all \(i\in\{1,2, \dots, k\}\) and \(a\) is not in
    the base. The idea is developed and applied to backtracking algorithms in [1],
    pp.108-132\. The points that are not in the base are taken in increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R95](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Checks for cycles of prime length p with n/2 < p < n-2.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Here \(n\) is the degree of the permutation. This is a helper function for the
    function is_alt_sym from sympy.combinatorics.perm_groups.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
    "sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Distribute the group elements `gens` by membership in basic stabilizers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : a sequence of points in \(\{0, 1, \dots, n-1\}\)'
  prefs: []
  type: TYPE_NORMAL
- en: '**gens** : a list of elements of a permutation group of degree \(n\).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: List of length \(k\), where \(k\) is the length of *base*. The \(i\)-th entry
    contains those elements in *gens* which fix the first \(i\) elements of *base*
    (so that the \(0\)-th entry is equal to *gens* itself). If no element fixes the
    first \(i\) elements of *base*, the \(i\)-th element is set to a list containing
    the identity element.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Notice that for a base \((b_1, b_2, \dots, b_k)\), the basic stabilizers are
    defined as \(G^{(i)} = G_{b_1, \dots, b_{i-1}}\) for \(i \in\{1, 2, \dots, k\}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_strong_gens_from_distr`](#sympy.combinatorics.util._strong_gens_from_distr
    "sympy.combinatorics.util._strong_gens_from_distr"), [`_orbits_transversals_from_bsgs`](#sympy.combinatorics.util._orbits_transversals_from_bsgs
    "sympy.combinatorics.util._orbits_transversals_from_bsgs"), [`_handle_precomputed_bsgs`](#sympy.combinatorics.util._handle_precomputed_bsgs
    "sympy.combinatorics.util._handle_precomputed_bsgs")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Calculate BSGS-related structures from those present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : the base'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens** : the strong generators'
  prefs: []
  type: TYPE_NORMAL
- en: '**transversals** : basic transversals'
  prefs: []
  type: TYPE_NORMAL
- en: '**basic_orbits** : basic orbits'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: (transversals, basic_orbits, strong_gens_distr)
  prefs: []
  type: TYPE_NORMAL
- en: where *transversals* are the basic transversals, *basic_orbits* are the basic
    orbits, and *strong_gens_distr* are the strong generators distributed by membership
    in basic stabilizers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The base and strong generating set must be provided; if any of the transversals,
    basic orbits or distributed strong generators are not provided, they will be calculated
    from the base and strong generating set.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_orbits_transversals_from_bsgs`](#sympy.combinatorics.util._orbits_transversals_from_bsgs
    "sympy.combinatorics.util._orbits_transversals_from_bsgs"), [`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Compute basic orbits and transversals from a base and strong generating set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : The base.'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens_distr** : Strong generators distributed by membership in basic
    stabilizers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**transversals_only** : bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: A flag switching between returning only the transversals and both orbits and
    transversals.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**slp** : bool, default: False'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, return a list of dictionaries containing the generator presentations
    of the elements of the transversals, i.e. the list of indices of generators from
    `strong_gens_distr[i]` such that their product is the relevant transversal element.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The generators are provided as distributed across the basic stabilizers. If
    the optional argument `transversals_only` is set to True, only the transversals
    are returned.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base"), [`_handle_precomputed_bsgs`](#sympy.combinatorics.util._handle_precomputed_bsgs
    "sympy.combinatorics.util._handle_precomputed_bsgs")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remove redundant generators from a strong generating set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : a base'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens** : a strong generating set relative to *base*'
  prefs: []
  type: TYPE_NORMAL
- en: '**basic_orbits** : basic orbits'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A strong generating set with respect to `base` which is a subset of
  prefs: []
  type: TYPE_NORMAL
- en: '`strong_gens`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This procedure is outlined in [1],p.95.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R96](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E. “Handbook of computational group theory”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Attempt to decompose a permutation using a (possibly partial) BSGS structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : permutation to be decomposed'
  prefs: []
  type: TYPE_NORMAL
- en: '**base** : sequence of points'
  prefs: []
  type: TYPE_NORMAL
- en: '**orbits** : list'
  prefs: []
  type: TYPE_NORMAL
- en: A list in which the `i`-th entry is an orbit of `base[i]` under some subgroup
    of the pointwise stabilizer of ` \(base[0], base[1], ..., base[i - 1]`\). The
    groups themselves are implicit in this function since the only information we
    need is encoded in the orbits and transversals
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**transversals** : list'
  prefs: []
  type: TYPE_NORMAL
- en: A list of orbit transversals associated with the orbits *orbits*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is done by treating the sequence `base` as an actual base, and the orbits
    `orbits` and transversals `transversals` as basic orbits and transversals relative
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: This process is called “sifting”. A sift is unsuccessful when a certain orbit
    element is not found or when after the sift the decomposition does not end with
    the identity element.
  prefs: []
  type: TYPE_NORMAL
- en: The argument `transversals` is a list of dictionaries that provides transversal
    elements for the orbits `orbits`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm is described in [1],pp.89-90\. The reason for returning both the
    current state of the element being decomposed and the level at which the sifting
    ends is that they provide important information for the randomized version of
    the Schreier-Sims algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims"), [`sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random`](perm_groups.html#sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random
    "sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R97](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Holt, D., Eick, B., O’Brien, E.”Handbook of computational group theory”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve strong generating set from generators of basic stabilizers.
  prefs: []
  type: TYPE_NORMAL
- en: This is just the union of the generators of the first and second basic stabilizers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**strong_gens_distr** : strong generators distributed by membership in basic
    stabilizers'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`_distribute_gens_by_base`](#sympy.combinatorics.util._distribute_gens_by_base
    "sympy.combinatorics.util._distribute_gens_by_base")'
  prefs: []
  type: TYPE_NORMAL
