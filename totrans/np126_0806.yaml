- en: numpy.ma.arange
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.arange.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return evenly spaced values within a given interval.
  prefs: []
  type: TYPE_NORMAL
- en: '`arange` can be called with a varying number of positional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`arange(stop)`: Values are generated within the half-open interval `[0, stop)`
    (in other words, the interval including *start* but excluding *stop*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arange(start, stop)`: Values are generated within the half-open interval `[start,
    stop)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arange(start, stop, step)` Values are generated within the half-open interval
    `[start, stop)`, with spacing between values given by `step`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For integer arguments the function is roughly equivalent to the Python built-in
    [`range`](https://docs.python.org/3/library/stdtypes.html#range "(in Python v3.11)"),
    but returns an ndarray rather than a `range` instance.
  prefs: []
  type: TYPE_NORMAL
- en: When using a non-integer step, such as 0.1, it is often better to use [`numpy.linspace`](numpy.linspace.html#numpy.linspace
    "numpy.linspace").
  prefs: []
  type: TYPE_NORMAL
- en: See the Warning sections below for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**start**integer or real, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Start of interval. The interval includes this value. The default start value
    is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**stop**integer or real'
  prefs: []
  type: TYPE_NORMAL
- en: End of interval. The interval does not include this value, except in some cases
    where *step* is not an integer and floating point round-off affects the length
    of *out*.
  prefs: []
  type: TYPE_NORMAL
- en: '**step**integer or real, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Spacing between values. For any output *out*, this is the distance between two
    adjacent values, `out[i+1] - out[i]`. The default step size is 1\. If *step* is
    specified as a position argument, *start* must also be given.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of the output array. If [`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")
    is not given, infer the data type from the other input arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arange**MaskedArray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of evenly spaced values.
  prefs: []
  type: TYPE_NORMAL
- en: For floating point arguments, the length of the result is `ceil((stop - start)/step)`.
    Because of floating point overflow, this rule may result in the last element of
    *out* being greater than *stop*.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The length of the output might not be numerically stable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another stability issue is due to the internal implementation of [`numpy.arange`](numpy.arange.html#numpy.arange
    "numpy.arange"). The actual step value used to populate the array is `dtype(start
    + step) - dtype(start)` and not *step*. Precision loss can occur here, due to
    casting or due to using floating points when *start* is much larger than *step*.
    This can lead to unexpected behaviour. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In such cases, the use of [`numpy.linspace`](numpy.linspace.html#numpy.linspace
    "numpy.linspace") should be preferred.
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in [`range`](https://docs.python.org/3/library/stdtypes.html#range
    "(in Python v3.11)") generates [Python built-in integers that have arbitrary size](https://docs.python.org/3/c-api/long.html
    "(in Python v3.11)"), while [`numpy.arange`](numpy.arange.html#numpy.arange "numpy.arange")
    produces [`numpy.int32`](../arrays.scalars.html#numpy.int32 "numpy.int32") or
    [`numpy.int64`](../arrays.scalars.html#numpy.int64 "numpy.int64") numbers. This
    may result in incorrect results for large integer values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.linspace`](numpy.linspace.html#numpy.linspace "numpy.linspace")'
  prefs: []
  type: TYPE_NORMAL
- en: Evenly spaced numbers with careful handling of endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ogrid`](numpy.ogrid.html#numpy.ogrid "numpy.ogrid")'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays of evenly spaced numbers in N-dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.mgrid`](numpy.mgrid.html#numpy.mgrid "numpy.mgrid")'
  prefs: []
  type: TYPE_NORMAL
- en: Grid-shaped arrays of evenly spaced numbers in N-dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[How to create arrays with regularly-spaced values](../../user/how-to-partition.html#how-to-partition)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
