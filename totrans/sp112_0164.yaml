- en: scipy.interpolate.krogh_interpolate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.krogh_interpolate.html#scipy.interpolate.krogh_interpolate](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.krogh_interpolate.html#scipy.interpolate.krogh_interpolate)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convenience function for polynomial interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: See [`KroghInterpolator`](scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator
    "scipy.interpolate.KroghInterpolator") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xi**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation points (known x-coordinates).
  prefs: []
  type: TYPE_NORMAL
- en: '**yi**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Known y-coordinates, of shape `(xi.size, R)`. Interpreted as vectors of length
    R, or scalars if R=1.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Point or points at which to evaluate the derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: '**der**int or list or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: How many derivatives to evaluate, or None for all potentially nonzero derivatives
    (that is, a number equal to the number of points), or a list of derivatives to
    evaluate. This number includes the function value as the ‘0th’ derivative.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis in the *yi* array corresponding to the x-coordinate values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**d**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: If the interpolator’s values are R-D then the returned array will be the number
    of derivatives by N by R. If *x* is a scalar, the middle dimension will be dropped;
    if the *yi* are scalars then the last dimension will be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`KroghInterpolator`](scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator
    "scipy.interpolate.KroghInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Krogh interpolator
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Construction of the interpolating polynomial is a relatively expensive process.
    If you want to evaluate it repeatedly consider using the class KroghInterpolator
    (which is what this function uses).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We can interpolate 2D observed data using Krogh interpolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-krogh_interpolate-1.png](../Images/4f5d6ce8ff0e1a84a362838d59338c68.png)'
  prefs: []
  type: TYPE_IMG
