- en: Viewing Inference Results in a Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/guides/view-results-in-terminal/`](https://docs.ultralytics.com/guides/view-results-in-terminal/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Sixel example of image in Terminal](img/9994e2105f45f327b8c774d6df05ed45.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from the [libsixel](https://saitoha.github.io/libsixel/) website.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When connecting to a remote machine, normally visualizing image results is not
    possible or requires moving data to a local device with a GUI. The VSCode integrated
    terminal allows for directly rendering images. This is a short demonstration on
    how to use this in conjunction with `ultralytics` with prediction results.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Only compatible with Linux and MacOS. Check the [VSCode repository](https://github.com/microsoft/vscode),
    check [Issue status](https://github.com/microsoft/vscode/issues/198622), or [documentation](https://code.visualstudio.com/docs)
    for updates about Windows support to view images in terminal with `sixel`.
  prefs: []
  type: TYPE_NORMAL
- en: The VSCode compatible protocols for viewing images using the integrated terminal
    are [`sixel`](https://en.wikipedia.org/wiki/Sixel) and [`iTerm`](https://iterm2.com/documentation-images.html).
    This guide will demonstrate use of the `sixel` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you must enable settings `terminal.integrated.enableImages` and `terminal.integrated.gpuAcceleration`
    in VSCode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![VSCode enable terminal images setting](img/7d96462727cf15ec4f9b59ce5f034c10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Install the `python-sixel` library in your virtual environment. This is a [fork](https://github.com/lubosz/python-sixel?tab=readme-ov-file)
    of the `PySixel` library, which is no longer maintained.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load a model and execute inference, then plot the results and store in a variable.
    See more about inference arguments and working with results on the predict mode
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See plot method parameters to see possible arguments to use.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, use OpenCV to convert the `numpy.ndarray` to `bytes` data. Then use `io.BytesIO`
    to make a "file-like" object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's possible to use other image extensions as well.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Only the object at index `1` that is returned is needed.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `SixelWriter` instance, and then use the `.draw()` method to draw the
    image in the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Example Inference Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![View Image in Terminal](img/7dc6e5994b13c63e1a6a37bbf6db4f73.png)'
  prefs: []
  type: TYPE_IMG
- en: Danger
  prefs: []
  type: TYPE_NORMAL
- en: Using this example with videos or animated GIF frames has **not** been tested.
    Attempt at your own risk.
  prefs: []
  type: TYPE_NORMAL
- en: Full Code Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It's possible to use other image extensions as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only the object at index `1` that is returned is needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See plot method parameters to see possible arguments to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may need to use `clear` to "erase" the view of the image in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can I view YOLO inference results in a VSCode terminal on macOS or Linux?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To view YOLO inference results in a VSCode terminal on macOS or Linux, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the necessary VSCode settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the sixel library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load your YOLO model and run inference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Convert the inference result image to bytes and display it in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For further details, visit the predict mode page.
  prefs: []
  type: TYPE_NORMAL
- en: Why does the sixel protocol only work on Linux and macOS?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sixel protocol is currently only supported on Linux and macOS because these
    platforms have native terminal capabilities compatible with sixel graphics. Windows
    support for terminal graphics using sixel is still under development. For updates
    on Windows compatibility, check the [VSCode Issue status](https://github.com/microsoft/vscode/issues/198622)
    and [documentation](https://code.visualstudio.com/docs).
  prefs: []
  type: TYPE_NORMAL
- en: What if I encounter issues with displaying images in the VSCode terminal?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you encounter issues displaying images in the VSCode terminal using sixel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure the necessary settings in VSCode are enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the sixel library installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check your image data conversion and plotting code for errors. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If problems persist, consult the [VSCode repository](https://github.com/microsoft/vscode),
    and visit the plot method parameters section for additional guidance.
  prefs: []
  type: TYPE_NORMAL
- en: Can YOLO display video inference results in the terminal using sixel?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Displaying video inference results or animated GIF frames using sixel in the
    terminal is currently untested and may not be supported. We recommend starting
    with static images and verifying compatibility. Attempt video results at your
    own risk, keeping in mind performance constraints. For more information on plotting
    inference results, visit the predict mode page.
  prefs: []
  type: TYPE_NORMAL
- en: How can I troubleshoot issues with the `python-sixel` library?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To troubleshoot issues with the `python-sixel` library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure the library is correctly installed in your virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that you have the necessary Python and system dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the [python-sixel GitHub repository](https://github.com/lubosz/python-sixel)
    for additional documentation and community support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check your code for potential errors, specifically the usage of `SixelWriter`
    and image data conversion steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For further assistance on working with YOLO models and sixel integration, see
    the export and predict mode documentation pages.
  prefs: []
  type: TYPE_NORMAL
