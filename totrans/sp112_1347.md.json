["```py\nscipy.stats.bootstrap(data, statistic, *, n_resamples=9999, batch=None, vectorized=None, paired=False, axis=0, confidence_level=0.95, alternative='two-sided', method='BCa', bootstrap_result=None, random_state=None)\n```", "```py\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> from scipy.stats import norm\n>>> dist = norm(loc=2, scale=4)  # our \"unknown\" distribution\n>>> data = dist.rvs(size=100, random_state=rng) \n```", "```py\n>>> std_true = dist.std()      # the true value of the statistic\n>>> print(std_true)\n4.0\n>>> std_sample = np.std(data)  # the sample statistic\n>>> print(std_sample)\n3.9460644295563863 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from scipy.stats import bootstrap\n>>> data = (data,)  # samples must be in a sequence\n>>> res = bootstrap(data, np.std, confidence_level=0.9,\n...                 random_state=rng)\n>>> fig, ax = plt.subplots()\n>>> ax.hist(res.bootstrap_distribution, bins=25)\n>>> ax.set_title('Bootstrap Distribution')\n>>> ax.set_xlabel('statistic value')\n>>> ax.set_ylabel('frequency')\n>>> plt.show() \n```", "```py\n>>> res.standard_error\n0.24427002125829136\n>>> res.standard_error == np.std(res.bootstrap_distribution, ddof=1)\nTrue \n```", "```py\n>>> x = np.linspace(3, 5)\n>>> pdf = norm.pdf(x, loc=std_sample, scale=res.standard_error)\n>>> fig, ax = plt.subplots()\n>>> ax.hist(res.bootstrap_distribution, bins=25, density=True)\n>>> ax.plot(x, pdf)\n>>> ax.set_title('Normal Approximation of the Bootstrap Distribution')\n>>> ax.set_xlabel('statistic value')\n>>> ax.set_ylabel('pdf')\n>>> plt.show() \n```", "```py\n>>> norm.interval(0.9, loc=std_sample, scale=res.standard_error)\n(3.5442759991341726, 4.3478528599786) \n```", "```py\n>>> print(res.confidence_interval)\nConfidenceInterval(low=3.57655333533867, high=4.382043696342881) \n```", "```py\n>>> n_trials = 1000\n>>> ci_contains_true_std = 0\n>>> for i in range(n_trials):\n...    data = (dist.rvs(size=100, random_state=rng),)\n...    ci = bootstrap(data, np.std, confidence_level=0.9, n_resamples=1000,\n...                   random_state=rng).confidence_interval\n...    if ci[0] < std_true < ci[1]:\n...        ci_contains_true_std += 1\n>>> print(ci_contains_true_std)\n875 \n```", "```py\n>>> data = (dist.rvs(size=(n_trials, 100), random_state=rng),)\n>>> res = bootstrap(data, np.std, axis=-1, confidence_level=0.9,\n...                 n_resamples=1000, random_state=rng)\n>>> ci_l, ci_u = res.confidence_interval \n```", "```py\n>>> print(ci_l[995:])\n[3.77729695 3.75090233 3.45829131 3.34078217 3.48072829]\n>>> print(ci_u[995:])\n[4.88316666 4.86924034 4.32032996 4.2822427  4.59360598] \n```", "```py\n>>> print(np.sum((ci_l < std_true) & (std_true < ci_u)))\n900 \n```", "```py\n>>> from scipy.stats import mood\n>>> def my_statistic(sample1, sample2, axis):\n...     statistic, _ = mood(sample1, sample2, axis=-1)\n...     return statistic \n```", "```py\n>>> sample1 = norm.rvs(scale=1, size=100, random_state=rng)\n>>> sample2 = norm.rvs(scale=2, size=100, random_state=rng)\n>>> data = (sample1, sample2)\n>>> res = bootstrap(data, my_statistic, method='basic', random_state=rng)\n>>> print(mood(sample1, sample2)[0])  # element 0 is the statistic\n-5.521109549096542\n>>> print(res.confidence_interval)\nConfidenceInterval(low=-7.255994487314675, high=-4.016202624747605) \n```", "```py\n>>> print(res.standard_error)\n0.8344963846318795 \n```", "```py\n>>> from scipy.stats import pearsonr\n>>> n = 100\n>>> x = np.linspace(0, 10, n)\n>>> y = x + rng.uniform(size=n)\n>>> print(pearsonr(x, y)[0])  # element 0 is the statistic\n0.9962357936065914 \n```", "```py\n>>> def my_statistic(x, y):\n...     return pearsonr(x, y)[0] \n```", "```py\n>>> res = bootstrap((x, y), my_statistic, vectorized=False, paired=True,\n...                 random_state=rng)\n>>> print(res.confidence_interval)\nConfidenceInterval(low=0.9950085825848624, high=0.9971212407917498) \n```", "```py\n>>> len(res.bootstrap_distribution)\n9999\n>>> res = bootstrap((x, y), my_statistic, vectorized=False, paired=True,\n...                 n_resamples=1001, random_state=rng,\n...                 bootstrap_result=res)\n>>> len(res.bootstrap_distribution)\n11000 \n```", "```py\n>>> res2 = bootstrap((x, y), my_statistic, vectorized=False, paired=True,\n...                  n_resamples=0, random_state=rng, bootstrap_result=res,\n...                  method='percentile', confidence_level=0.9)\n>>> np.testing.assert_equal(res2.bootstrap_distribution,\n...                         res.bootstrap_distribution)\n>>> res.confidence_interval\nConfidenceInterval(low=0.9950035351407804, high=0.9971170323404578) \n```"]