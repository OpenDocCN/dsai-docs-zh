["```py\nsympy.combinatorics.util._base_ordering(base, degree)\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> from sympy.combinatorics.util import _base_ordering\n>>> S = SymmetricGroup(4)\n>>> S.schreier_sims()\n>>> _base_ordering(S.base, S.degree)\n[0, 1, 2, 3] \n```", "```py\nsympy.combinatorics.util._check_cycles_alt_sym(perm)\n```", "```py\n>>> from sympy.combinatorics.util import _check_cycles_alt_sym\n>>> from sympy.combinatorics import Permutation\n>>> a = Permutation([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12]])\n>>> _check_cycles_alt_sym(a)\nFalse\n>>> b = Permutation([[0, 1, 2, 3, 4, 5, 6], [7, 8, 9, 10]])\n>>> _check_cycles_alt_sym(b)\nTrue \n```", "```py\nsympy.combinatorics.util._distribute_gens_by_base(base, gens)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> from sympy.combinatorics.util import _distribute_gens_by_base\n>>> D = DihedralGroup(3)\n>>> D.schreier_sims()\n>>> D.strong_gens\n[(0 1 2), (0 2), (1 2)]\n>>> D.base\n[0, 1]\n>>> _distribute_gens_by_base(D.base, D.strong_gens)\n[[(0 1 2), (0 2), (1 2)],\n [(1 2)]] \n```", "```py\nsympy.combinatorics.util._handle_precomputed_bsgs(base, strong_gens, transversals=None, basic_orbits=None, strong_gens_distr=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> from sympy.combinatorics.util import _handle_precomputed_bsgs\n>>> D = DihedralGroup(3)\n>>> D.schreier_sims()\n>>> _handle_precomputed_bsgs(D.base, D.strong_gens,\n... basic_orbits=D.basic_orbits)\n([{0: (2), 1: (0 1 2), 2: (0 2)}, {1: (2), 2: (1 2)}], [[0, 1, 2], [1, 2]], [[(0 1 2), (0 2), (1 2)], [(1 2)]]) \n```", "```py\nsympy.combinatorics.util._orbits_transversals_from_bsgs(base, strong_gens_distr, transversals_only=False, slp=False)\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> from sympy.combinatorics.util import _distribute_gens_by_base\n>>> S = SymmetricGroup(3)\n>>> S.schreier_sims()\n>>> strong_gens_distr = _distribute_gens_by_base(S.base, S.strong_gens)\n>>> (S.base, strong_gens_distr)\n([0, 1], [[(0 1 2), (2)(0 1), (1 2)], [(1 2)]]) \n```", "```py\nsympy.combinatorics.util._remove_gens(base, strong_gens, basic_orbits=None, strong_gens_distr=None)\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> from sympy.combinatorics.util import _remove_gens\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> S = SymmetricGroup(15)\n>>> base, strong_gens = S.schreier_sims_incremental()\n>>> new_gens = _remove_gens(base, strong_gens)\n>>> len(new_gens)\n14\n>>> _verify_bsgs(S, base, new_gens)\nTrue \n```", "```py\nsympy.combinatorics.util._strip(g, base, orbits, transversals)\n```", "```py\n>>> from sympy.combinatorics import Permutation, SymmetricGroup\n>>> from sympy.combinatorics.util import _strip\n>>> S = SymmetricGroup(5)\n>>> S.schreier_sims()\n>>> g = Permutation([0, 2, 3, 1, 4])\n>>> _strip(g, S.base, S.basic_orbits, S.basic_transversals)\n((4), 5) \n```", "```py\nsympy.combinatorics.util._strong_gens_from_distr(strong_gens_distr)\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> from sympy.combinatorics.util import (_strong_gens_from_distr,\n... _distribute_gens_by_base)\n>>> S = SymmetricGroup(3)\n>>> S.schreier_sims()\n>>> S.strong_gens\n[(0 1 2), (2)(0 1), (1 2)]\n>>> strong_gens_distr = _distribute_gens_by_base(S.base, S.strong_gens)\n>>> _strong_gens_from_distr(strong_gens_distr)\n[(0 1 2), (2)(0 1), (1 2)] \n```"]