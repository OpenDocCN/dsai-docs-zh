- en: numpy.ma.MaskedArray.ptp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.MaskedArray.ptp.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.MaskedArray.ptp.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return (maximum - minimum) along the given dimension (i.e. peak-to-peak value).
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`ptp`](numpy.ptp.html#numpy.ptp "numpy.ptp") preserves the data type of the
    array. This means the return value for an input of signed integers with n bits
    (e.g. *np.int8*, *np.int16*, etc) is also a signed integer with n bits. In that
    case, peak-to-peak values greater than `2**(n-1)-1` will be returned as negative
    values. An example with a work-around is shown below.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{None, int}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which to find the peaks. If None (default) the flattened array is
    used.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**{None, array_like}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternative output array in which to place the result. It must have the same
    shape and buffer length as the expected output but the type will be cast if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**scalar or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value used to fill in the masked values.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ptp**ndarray.'
  prefs: []
  type: TYPE_NORMAL
- en: A new array holding the result, unless `out` was specified, in which case a
    reference to `out` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This example shows that a negative value can be returned when the input is an
    array of signed integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A work-around is to use the *view()* method to view the result as unsigned
    integers with the same bit width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
