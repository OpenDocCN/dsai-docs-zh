- en: NumPy 1.9.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.9.0发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.9.0-notes.html](https://numpy.org/doc/1.26/release/1.9.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.9.0-notes.html](https://numpy.org/doc/1.26/release/1.9.0-notes.html)
- en: This release supports Python 2.6 - 2.7 and 3.2 - 3.4.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该版本支持Python 2.6 - 2.7和3.2 - 3.4。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Numerous performance improvements in various areas, most notably indexing and
    operations on small arrays are significantly faster. Indexing operations now also
    release the GIL.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各个领域进行了许多性能改进，尤其是对小数组的索引和操作明显更快。现在索引操作也会释放GIL。
- en: Addition of *nanmedian* and *nanpercentile* rounds out the nanfunction set.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了*nanmedian*和*nanpercentile*，完善了nanfunction集。
- en: Dropped Support
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不再支持
- en: The oldnumeric and numarray modules have been removed.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧的numeric和numarray模块已被移除。
- en: The doc/pyrex and doc/cython directories have been removed.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: doc/pyrex和doc/cython目录已被移除。
- en: The doc/numpybook directory has been removed.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: doc/numpybook目录已被移除。
- en: The numpy/testing/numpytest.py file has been removed together with the importall
    function it contained.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/testing/numpytest.py文件已被移除，以及其中包含的importall函数。
- en: Future Changes
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变化
- en: The numpy/polynomial/polytemplate.py file will be removed in NumPy 1.10.0.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/polynomial/polytemplate.py文件将在NumPy 1.10.0中被移除。
- en: Default casting for inplace operations will change to ‘same_kind’ in Numpy 1.10.0\.
    This will certainly break some code that is currently ignoring the warning.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，就地操作的强制转换将在Numpy 1.10.0中更改为‘same_kind’。这肯定会破坏一些当前忽略警告的代码。
- en: Relaxed stride checking will be the default in 1.10.0
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在1.10.0中，宽松的步幅检查将成为默认设置
- en: String version checks will break because, e.g., ‘1.9’ > ‘1.10’ is True. A NumpyVersion
    class has been added that can be used for such comparisons.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串版本检查将中断，例如，‘1.9’ > ‘1.10’为True。已添加了一个NumpyVersion类，可用于此类比较。
- en: The diagonal and diag functions will return writeable views in 1.10.0
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对角线和diag函数将在1.10.0中返回可写视图
- en: The *S* and/or *a* dtypes may be changed to represent Python strings instead
    of bytes, in Python 3 these two types are very different.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*S*和/或*a* dtypes可能会更改以表示Python字符串而不是字节，在Python 3中，这两种类型非常不同。'
- en: Compatibility notes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The diagonal and diag functions return readonly views.
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对角线和diag函数返回只读视图。
- en: In NumPy 1.8, the diagonal and diag functions returned readonly copies, in NumPy
    1.9 they return readonly views, and in 1.10 they will return writeable views.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.8中，对角线和diag函数返回只读副本，在NumPy 1.9中它们返回只读视图，在1.10中它们将返回可写视图。
- en: Special scalar float values don’t cause upcast to double anymore
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊标量浮点值不再导致向上转换为双精度
- en: In previous numpy versions operations involving floating point scalars containing
    special values `NaN`, `Inf` and `-Inf` caused the result type to be at least `float64`.
    As the special values can be represented in the smallest available floating point
    type, the upcast is not performed anymore.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的numpy版本中，涉及包含特殊值`NaN`、`Inf`和`-Inf`的浮点标量的操作导致结果类型至少为`float64`。由于特殊值可以在最小可用浮点类型中表示，因此不再执行向上转换。
- en: 'For example the dtype of:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
- en: now remains `float32` instead of being cast to `float64`. Operations involving
    non-special values have not been changed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保持为`float32`而不是转换为`float64`。涉及非特殊值的操作未发生变化。
- en: Percentile output changes
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数输出变化
- en: If given more than one percentile to compute numpy.percentile returns an array
    instead of a list. A single percentile still returns a scalar. The array is equivalent
    to converting the list returned in older versions to an array via `np.array`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定多个要计算的百分位数，numpy.percentile返回一个数组而不是列表。单个百分位数仍然返回一个标量。该数组等同于通过`np.array`将旧版本返回的列表转换为数组。
- en: If the `overwrite_input` option is used the input is only partially instead
    of fully sorted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`overwrite_input`选项，则输入仅部分排序而不是完全排序。
- en: ndarray.tofile exception type
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray.tofile异常类型
- en: All `tofile` exceptions are now `IOError`, some were previously `ValueError`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`tofile`异常现在都是`IOError`，以前有些是`ValueError`。
- en: Invalid fill value exceptions
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效的填充值异常
- en: 'Two changes to numpy.ma.core._check_fill_value:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对numpy.ma.core._check_fill_value进行了两个更改：
- en: When the fill value is a string and the array type is not one of ‘OSUV’, TypeError
    is raised instead of the default fill value being used.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值为字符串且数组类型不是‘OSUV’之一时，会引发TypeError而不是使用默认填充值。
- en: When the fill value overflows the array type, TypeError is raised instead of
    OverflowError.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值溢出数组类型时，会引发TypeError而不是OverflowError。
- en: Polynomial Classes no longer derived from PolyBase
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再从 PolyBase 派生
- en: This may cause problems with folks who depended on the polynomial classes being
    derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase.
    Strictly speaking, there should be a deprecation involved, but no external code
    making use of the old baseclass could be found.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致依赖于多项式类从 PolyBase 派生的人遇到问题。它们现在都是从抽象基类 ABCPolyBase 派生的。严格来说，应该涉及到弃用，但没有找到使用旧基类的外部代码。
- en: Using numpy.random.binomial may change the RNG state vs. numpy < 1.9
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 numpy.random.binomial 可能会改变 RNG 状态与 numpy < 1.9
- en: A bug in one of the algorithms to generate a binomial random variate has been
    fixed. This change will likely alter the number of random draws performed, and
    hence the sequence location will be different after a call to distribution.c::rk_binomial_btpe.
    Any tests which rely on the RNG being in a known state should be checked and/or
    updated as a result.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 已修复生成二项式随机变量算法中的一个错误。这个更改可能会改变执行的随机抽样次数，因此在调用 distribution.c::rk_binomial_btpe
    后，序列位置将不同。任何依赖于 RNG 处于已知状态的测试应该被检查和/或更新。
- en: Random seed enforced to be a 32 bit unsigned integer
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机种子强制为 32 位无符号整数
- en: '`np.random.seed` and `np.random.RandomState` now throw a `ValueError` if the
    seed cannot safely be converted to 32 bit unsigned integers. Applications that
    now fail can be fixed by masking the higher 32 bit values to zero: `seed = seed
    & 0xFFFFFFFF`. This is what is done silently in older versions so the random stream
    remains the same.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `np.random.seed` 和 `np.random.RandomState` 的种子不能安全地转换为 32 位无符号整数，则现在会抛出 `ValueError`。现在失败的应用程序可以通过将高
    32 位值掩码为零来修复：`seed = seed & 0xFFFFFFFF`。这在旧版本中是默默地完成的，因此随机流保持不变。
- en: Argmin and argmax out argument
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Argmin 和 argmax 的 out 参数
- en: The `out` argument to `np.argmin` and `np.argmax` and their equivalent C-API
    functions is now checked to match the desired output shape exactly. If the check
    fails a `ValueError` instead of `TypeError` is raised.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.argmin` 和 `np.argmax` 及其等效的 C-API 函数的 `out` 参数现在被检查以确保精确匹配所需的输出形状。如果检查失败，则会引发
    `ValueError` 而不是 `TypeError`。'
- en: Einsum
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum
- en: Remove unnecessary broadcasting notation restrictions. `np.einsum('ijk,j->ijk',
    A, B)` can also be written as `np.einsum('ij...,j->ij...', A, B)` (ellipsis is
    no longer required on ‘j’)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 移除不必要的广播符号限制。`np.einsum('ijk,j->ijk', A, B)` 也可以写成 `np.einsum('ij...,j->ij...',
    A, B)`（省略号在‘j’上不再需要）
- en: Indexing
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引
- en: 'The NumPy indexing has seen a complete rewrite in this version. This makes
    most advanced integer indexing operations much faster and should have no other
    implications. However some subtle changes and deprecations were introduced in
    advanced indexing operations:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 索引在这个版本中进行了完全重写。这使得大多数高级整数索引操作更快，并且不应该有其他影响。然而，在高级索引操作中引入了一些微妙的变化和弃用：
- en: Boolean indexing into scalar arrays will always return a new 1-d array. This
    means that `array(1)[array(True)]` gives `array([1])` and not the original array.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对标量数组进行布尔索引将始终返回一个新的 1 维数组。这意味着 `array(1)[array(True)]` 返回 `array([1])` 而不是原始数组。
- en: Advanced indexing into one dimensional arrays used to have (undocumented) special
    handling regarding repeating the value array in assignments when the shape of
    the value array was too small or did not match. Code using this will raise an
    error. For compatibility you can use `arr.flat[index] = values`, which uses the
    old code branch. (for example `a = np.ones(10); a[np.arange(10)] = [1, 2, 3]`)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一维数组进行高级索引以前有（未记录的）特殊处理，关于在值数组的形状太小或不匹配时如何重复值数组在赋值中。使用这种方法的代码将引发错误。为了兼容性，您可以使用
    `arr.flat[index] = values`，它使用旧的代码分支。（例如 `a = np.ones(10); a[np.arange(10)] =
    [1, 2, 3]）
- en: The iteration order over advanced indexes used to be always C-order. In NumPy
    1.9\. the iteration order adapts to the inputs and is not guaranteed (with the
    exception of a *single* advanced index which is never reversed for compatibility
    reasons). This means that the result is undefined if multiple values are assigned
    to the same element. An example for this is `arr[[0, 0], [1, 1]] = [1, 2]`, which
    may set `arr[0, 1]` to either 1 or 2.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的迭代顺序过去总是 C 顺序。在 NumPy 1.9 中，迭代顺序会根据输入进行调整，并且不保证（除了一个*单一*的高级索引，出于兼容性原因永远不会被反转）。这意味着如果向同一元素分配多个值，则结果是未定义的。一个例子是
    `arr[[0, 0], [1, 1]] = [1, 2]`，这可能将 `arr[0, 1]` 设置为 1 或 2。
- en: Equivalent to the iteration order, the memory layout of the advanced indexing
    result is adapted for faster indexing and cannot be predicted.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与迭代顺序等效，高级索引结果的内存布局已调整以实现更快的索引，并且无法预测。
- en: All indexing operations return a view or a copy. No indexing operation will
    return the original array object. (For example `arr[...]`)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有索引操作都返回视图或副本。没有索引操作会返回原始数组对象。（例如`arr[...]`）
- en: In the future Boolean array-likes (such as lists of python bools) will always
    be treated as Boolean indexes and Boolean scalars (including python `True`) will
    be a legal *boolean* index. At this time, this is already the case for scalar
    arrays to allow the general `positive = a[a > 0]` to work when `a` is zero dimensional.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将来，布尔数组样式（例如python bools列表）将始终被视为布尔索引，布尔标量（包括python `True`）将成为合法的*boolean*索引。此时，对于标量数组，已经允许一般的`positive
    = a[a > 0]`在`a`为零维时起作用。
- en: In NumPy 1.8 it was possible to use `array(True)` and `array(False)` equivalent
    to 1 and 0 if the result of the operation was a scalar. This will raise an error
    in NumPy 1.9 and, as noted above, treated as a boolean index in the future.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NumPy 1.8中，如果操作的结果是标量，可以使用`array(True)`和`array(False)`分别等同于1和0。在NumPy 1.9中将引发错误，并且如上所述，在将来将被视为布尔索引。
- en: All non-integer array-likes are deprecated, object arrays of custom integer
    like objects may have to be cast explicitly.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有非整数数组样式都已被弃用，自定义整数对象的对象数组可能需要显式转换。
- en: The error reporting for advanced indexing is more informative, however the error
    type has changed in some cases. (Broadcasting errors of indexing arrays are reported
    as `IndexError`)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的错误报告更加详细，但在某些情况下错误类型已更改。（索引数组的广播错误报告为`IndexError`）
- en: Indexing with more then one ellipsis (`...`) is deprecated.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号(`...`)进行索引已被弃用。
- en: Non-integer reduction axis indexes are deprecated
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非整数缩减轴索引已被弃用
- en: Non-integer axis indexes to reduction ufuncs like *add.reduce* or *sum* are
    deprecated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像*add.reduce*或*sum*这样的缩减ufuncs，非整数轴索引已被弃用。
- en: '`promote_types` and string dtype'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`promote_types`和字符串dtype'
- en: '`promote_types` function now returns a valid string length when given an integer
    or float dtype as one argument and a string dtype as another argument. Previously
    it always returned the input string dtype, even if it wasn’t long enough to store
    the max integer/float value converted to a string.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个参数为整数或浮点dtype，另一个参数为字符串dtype时，`promote_types`函数现在返回有效的字符串长度。以前，即使输入的字符串dtype长度不足以存储转换为字符串的最大整数/浮点值，它总是返回输入的字符串dtype。
- en: '`can_cast` and string dtype'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`can_cast`和字符串dtype'
- en: '`can_cast` function now returns False in “safe” casting mode for integer/float
    dtype and string dtype if the string dtype length is not long enough to store
    the max integer/float value converted to a string. Previously `can_cast` in “safe”
    mode returned True for integer/float dtype and a string dtype of any length.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串dtype的长度不足以存储转换为字符串的最大整数/浮点值，则`can_cast`函数现在在“安全”转换模式下返回False，对于整数/浮点dtype和字符串dtype。以前，在“安全”模式下，`can_cast`对于整数/浮点dtype和任何长度的字符串dtype返回True。
- en: astype and string dtype
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype和字符串dtype
- en: The `astype` method now returns an error if the string dtype to cast to is not
    long enough in “safe” casting mode to hold the max value of integer/float array
    that is being casted. Previously the casting was allowed even if the result was
    truncated.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要转换为的字符串dtype在“安全”转换模式下不足以容纳正在转换的整数/浮点数组的最大值，则`astype`方法现在会返回错误。以前，即使结果被截断，也允许转换。
- en: '*npyio.recfromcsv* keyword arguments change'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*关键字参数已更改'
- en: '*npyio.recfromcsv* no longer accepts the undocumented *update* keyword, which
    used to override the *dtype* keyword.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*不再接受未记录的*update*关键字，该关键字曾用于覆盖*dtype*关键字。'
- en: The `doc/swig` directory moved
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移动'
- en: The `doc/swig` directory has been moved to `tools/swig`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移至`tools/swig`。'
- en: The `npy_3kcompat.h` header changed
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`npy_3kcompat.h`头文件已更改'
- en: The unused `simple_capsule_dtor` function has been removed from `npy_3kcompat.h`.
    Note that this header is not meant to be used outside of numpy; other projects
    should be using their own copy of this file when needed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用的`simple_capsule_dtor`函数已从`npy_3kcompat.h`中移除。请注意，此头文件不应在numpy之外使用；其他项目在需要时应使用自己的副本。
- en: Negative indices in C-Api `sq_item` and `sq_ass_item` sequence methods
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-Api `sq_item`和`sq_ass_item`序列方法中的负索引
- en: When directly accessing the `sq_item` or `sq_ass_item` PyObject slots for item
    getting, negative indices will not be supported anymore. `PySequence_GetItem`
    and `PySequence_SetItem` however fix negative indices so that they can be used
    there.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接访问`sq_item`或`sq_ass_item` PyObject插槽以获取项目时，将不再支持负索引。然而，`PySequence_GetItem`和`PySequence_SetItem`可以修复负索引，以便在那里使用。
- en: NDIter
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NDIter
- en: When `NpyIter_RemoveAxis` is now called, the iterator range will be reset.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用`NpyIter_RemoveAxis`时，迭代器范围将被重置。
- en: When a multi index is being tracked and an iterator is not buffered, it is possible
    to use `NpyIter_RemoveAxis`. In this case an iterator can shrink in size. Because
    the total size of an iterator is limited, the iterator may be too large before
    these calls. In this case its size will be set to `-1` and an error issued not
    at construction time but when removing the multi index, setting the iterator range,
    or getting the next function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当跟踪多索引并且迭代器没有被缓冲时，可以使用`NpyIter_RemoveAxis`。在这种情况下，迭代器的大小可能会缩小。因为迭代器的总大小是有限的，在这些调用之前，迭代器可能会太大。在这种情况下，其大小将被设置为`-1`，并且在构造时不会发出错误，而是在移除多索引、设置迭代器范围或获取下一个函数时发出错误。
- en: This has no effect on currently working code, but highlights the necessity of
    checking for an error return if these conditions can occur. In most cases the
    arrays being iterated are as large as the iterator so that such a problem cannot
    occur.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这对当前工作的代码没有影响，但强调了如果这些条件可能发生时需要检查错误返回的必要性。在大多数情况下，被迭代的数组和迭代器一样大，因此不会出现这样的问题。
- en: This change was already applied to the 1.8.1 release.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改已经应用于1.8.1版本。
- en: '`zeros_like` for string dtypes now returns empty strings'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在，对于字符串dtype，`zeros_like`将返回空字符串
- en: To match the *zeros* function *zeros_like* now returns an array initialized
    with empty strings instead of an array filled with *‘0’*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配*zeros*函数，*zeros_like*现在返回一个用空字符串初始化的数组，而不是一个填充了*‘0’*的数组。
- en: New Features
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: Percentile supports more interpolation options
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数支持更多的插值选项
- en: '`np.percentile` now has the interpolation keyword argument to specify in which
    way points should be interpolated if the percentiles fall between two values.
    See the documentation for the available options.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile`现在具有插值关键字参数，用于指定百分位数落在两个值之间时应如何插值。请查看文档以获取可用选项。'
- en: Generalized axis support for median and percentile
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中位数和百分位数的通用轴支持
- en: '`np.median` and `np.percentile` now support generalized axis arguments like
    ufunc reductions do since 1.7\. One can now say axis=(index, index) to pick a
    list of axes for the reduction. The `keepdims` keyword argument was also added
    to allow convenient broadcasting to arrays of the original shape.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.7版本以来，`np.median`和`np.percentile`现在支持类似ufunc reductions的通用轴参数。现在可以使用axis=(index,
    index)来选择要减少的轴列表。还添加了`keepdims`关键字参数，以便将广播到原始形状的数组。
- en: Dtype parameter added to `np.linspace` and `np.logspace`
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linspace`和`np.logspace`中添加了dtype参数'
- en: The returned data type from the `linspace` and `logspace` functions can now
    be specified using the dtype parameter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用dtype参数指定`linspace`和`logspace`函数返回的数据类型。
- en: More general `np.triu` and `np.tril` broadcasting
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更通用的`np.triu`和`np.tril`广播
- en: For arrays with `ndim` exceeding 2, these functions will now apply to the final
    two axes instead of raising an exception.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`ndim`超过2的数组，这些函数现在将应用于最后两个轴，而不是引发异常。
- en: '`tobytes` alias for `tostring` method'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tobytes`方法的别名为`tostring`'
- en: '`ndarray.tobytes` and `MaskedArray.tobytes` have been added as aliases for
    `tostring` which exports arrays as `bytes`. This is more consistent in Python
    3 where `str` and `bytes` are not the same.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.tobytes`和`MaskedArray.tobytes`已添加为`tostring`的别名，用于将数组导出为`bytes`。这在Python
    3中更一致，因为`str`和`bytes`不相同。'
- en: Build system
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the ppc64le and OpenRISC architecture.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对ppc64le和OpenRISC架构的实验性支持。
- en: Compatibility to python `numbers` module
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与python `numbers`模块的兼容性
- en: All numerical numpy types are now registered with the type hierarchy in the
    python `numbers` module.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值numpy类型现在都在python `numbers`模块中注册了类型层次结构。
- en: '`increasing` parameter added to `np.vander`'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.vander`中添加了`increasing`参数'
- en: The ordering of the columns of the Vandermonde matrix can be specified with
    this new boolean argument.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用这个新的布尔参数指定范德蒙矩阵的列的顺序。
- en: '`unique_counts` parameter added to `np.unique`'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique`中添加了`unique_counts`参数'
- en: The number of times each unique item comes up in the input can now be obtained
    as an optional return value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以作为可选返回值获取输入中每个唯一项出现的次数。
- en: Support for median and percentile in nanfunctions
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: nanfunctions中支持中位数和百分位数。
- en: The `np.nanmedian` and `np.nanpercentile` functions behave like the median and
    percentile functions except that NaNs are ignored.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.nanmedian`和`np.nanpercentile`函数的行为类似于中位数和百分位数函数，只是会忽略NaN值。'
- en: NumpyVersion class added
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了NumpyVersion类。
- en: 'The class may be imported from numpy.lib and can be used for version comparison
    when the numpy version goes to 1.10.devel. For example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当numpy版本升级到1.10.devel时，可以从numpy.lib中导入该类，并用于版本比较。例如：
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Allow saving arrays with large number of named columns
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许保存具有大量命名列的数组。
- en: The numpy storage format 1.0 only allowed the array header to have a total size
    of 65535 bytes. This can be exceeded by structured arrays with a large number
    of columns. A new format 2.0 has been added which extends the header size to 4
    GiB. *np.save* will automatically save in 2.0 format if the data requires it,
    else it will always use the more compatible 1.0 format.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: numpy存储格式1.0只允许数组头部的总大小为65535字节。结构化数组的列数较多时可能会超过这个限制。新增了格式2.0，将头部大小扩展到4 GiB。如果数据需要，*np.save*将自动保存为2.0格式，否则将始终使用更兼容的1.0格式。
- en: Full broadcasting support for `np.cross`
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.cross`的完全广播支持。'
- en: '`np.cross` now properly broadcasts its two input arrays, even if they have
    different number of dimensions. In earlier versions this would result in either
    an error being raised, or wrong results computed.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.cross`现在正确地广播其两个输入数组，即使它们具有不同的维度数量。在早期版本中，这可能会导致引发错误或计算错误的结果。'
- en: Improvements
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Better numerical stability for sum in some cases
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下，对sum的数值稳定性进行了改进。
- en: Pairwise summation is now used in the sum method, but only along the fast axis
    and for groups of the values <= 8192 in length. This should also improve the accuracy
    of var and std in some common cases.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: sum方法现在使用成对求和，但仅沿着快速轴，并且对长度<=8192的值组进行。这也应该改善某些常见情况下var和std的准确性。
- en: Percentile implemented in terms of `np.partition`
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数实现基于`np.partition`。
- en: '`np.percentile` has been implemented in terms of `np.partition` which only
    partially sorts the data via a selection algorithm. This improves the time complexity
    from `O(nlog(n))` to `O(n)`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile`已经实现为`np.partition`，该方法仅通过选择算法部分排序数据。这将时间复杂度从`O(nlog(n))`改进为`O(n)`。'
- en: Performance improvement for `np.array`
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.array`的性能改进。'
- en: The performance of converting lists containing arrays to arrays using `np.array`
    has been improved. It is now equivalent in speed to `np.vstack(list)`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.array`将包含数组的列表转换为数组的性能已经改进。现在在速度上等同于`np.vstack(list)`。
- en: Performance improvement for `np.searchsorted`
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.searchsorted`的性能改进。'
- en: For the built-in numeric types, `np.searchsorted` no longer relies on the data
    type’s `compare` function to perform the search, but is now implemented by type
    specific functions. Depending on the size of the inputs, this can result in performance
    improvements over 2x.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置数值类型，`np.searchsorted`不再依赖于数据类型的`compare`函数来执行搜索，而是通过特定类型的函数实现。根据输入的大小，这可能会带来超过2倍的性能改进。
- en: Optional reduced verbosity for np.distutils
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: np.distutils的可选减少冗余度。
- en: Set `numpy.distutils.system_info.system_info.verbosity = 0` and then calls to
    `numpy.distutils.system_info.get_info('blas_opt')` will not print anything on
    the output. This is mostly for other packages using numpy.distutils.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`numpy.distutils.system_info.system_info.verbosity = 0`，然后调用`numpy.distutils.system_info.get_info('blas_opt')`将不会在输出中打印任何内容。这主要是为了其他使用numpy.distutils的包。
- en: Covariance check in `np.random.multivariate_normal`
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`np.random.multivariate_normal`中进行协方差检查。
- en: A `RuntimeWarning` warning is raised when the covariance matrix is not positive-semidefinite.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当协方差矩阵不是半正定时，会引发`RuntimeWarning`警告。
- en: Polynomial Classes no longer template based
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再基于模板。
- en: The polynomial classes have been refactored to use an abstract base class rather
    than a template in order to implement a common interface. This makes importing
    the polynomial package faster as the classes do not need to be compiled on import.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式类已经重构为使用抽象基类而不是模板，以实现一个共同的接口。这使得导入多项式包更快，��为在导入时不需要编译类。
- en: More GIL releases
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多的GIL释放。
- en: Several more functions now release the Global Interpreter Lock allowing more
    efficient parallelization using the `threading` module. Most notably the GIL is
    now released for fancy indexing, `np.where` and the `random` module now uses a
    per-state lock instead of the GIL.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 几个更多的函数现在释放全局解释器锁，允许使用 `threading` 模块更有效地并行化。特别是 GIL 现在会在 fancy indexing、`np.where`
    和 `random` 模块中释放，现在使用每个状态锁而不是 GIL。
- en: MaskedArray support for more complicated base classes
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MaskedArray 对更复杂的基类的支持
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, `repr` and `str` should now work more reliably.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的假设基类的行为类似于普通数组的假设正在被移除。特别是，`repr` 和 `str` 现在应该更可靠地工作。
- en: C-API
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Deprecations
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Non-integer scalars for sequence repetition
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非整数标量用于序列重复
- en: Using non-integer numpy scalars to repeat python sequences is deprecated. For
    example `np.float_(2) * [1]` will be an error in the future.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非整数 numpy 标量重复 python 序列已被弃用。例如 `np.float_(2) * [1]` 将在未来出错。
- en: '`select` input deprecations'
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`select` 输入已被弃用'
- en: The integer and empty input to `select` is deprecated. In the future only boolean
    arrays will be valid conditions and an empty `condlist` will be considered an
    input error instead of returning the default.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `select` 的整数和空输入已被弃用。将来只有布尔数组将是有效条件，而空的 `condlist` 将被视为输入错误而不是返回默认值。
- en: '`rank` function'
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rank` 函数'
- en: The `rank` function has been deprecated to avoid confusion with `numpy.linalg.matrix_rank`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`rank` 函数已被弃用，以避免与 `numpy.linalg.matrix_rank` 混淆。'
- en: Object array equality comparisons
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象数组的相等比较
- en: 'In the future object array comparisons both *==* and *np.equal* will not make
    use of identity checks anymore. For example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，对象数组的比较 *==* 和 *np.equal* 将不再使用身份检查。例如：
- en: '[PRE1]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: will consistently return False (and in the future an error) even if the array
    in *a* and *b* was the same object.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即使数组在 *a* 和 *b* 中是相同对象，也将始终返回 False（并在将来出错）。
- en: The equality operator *==* will in the future raise errors like *np.equal* if
    broadcasting or element comparisons, etc. fails.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 等号运算符 *==* 将来会像 *np.equal* 一样引发错误，如果广播或元素比较等失败。
- en: Comparison with *arr == None* will in the future do an elementwise comparison
    instead of just returning False. Code should be using *arr is None*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *arr == None* 的比较将来会进行逐元素比较，而不仅仅返回 False。代码应该使用 *arr is None*。
- en: All of these changes will give Deprecation- or FutureWarnings at this time.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些更改现在都会在此时给出 Deprecation- 或 FutureWarnings。
- en: C-API
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: The utility function npy_PyFile_Dup and npy_PyFile_DupClose are broken by the
    internal buffering python 3 applies to its file objects. To fix this two new functions
    npy_PyFile_Dup2 and npy_PyFile_DupClose2 are declared in npy_3kcompat.h and the
    old functions are deprecated. Due to the fragile nature of these functions it
    is recommended to instead use the python API when possible.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 实用函数 npy_PyFile_Dup 和 npy_PyFile_DupClose 被内部缓冲 python 3 应用于其文件对象所破坏。为了解决这个问题，在
    npy_3kcompat.h 中声明了两个新函数 npy_PyFile_Dup2 和 npy_PyFile_DupClose2，并弃用了旧函数。由于这些函数的脆弱性，建议尽可能使用
    python API。
- en: This change was already applied to the 1.8.1 release.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改已应用于 1.8.1 版本。
- en: Highlights
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Numerous performance improvements in various areas, most notably indexing and
    operations on small arrays are significantly faster. Indexing operations now also
    release the GIL.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各个领域进行了许多性能改进，尤其是对小数组的索引和操作明显更快。现在索引操作也会释放 GIL。
- en: Addition of *nanmedian* and *nanpercentile* rounds out the nanfunction set.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*nanmedian* 和 *nanpercentile* 的添加完善了 nanfunction 集合。'
- en: Dropped Support
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已停止支持
- en: The oldnumeric and numarray modules have been removed.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: oldnumeric 和 numarray 模块已被移除。
- en: The doc/pyrex and doc/cython directories have been removed.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: doc/pyrex 和 doc/cython 目录已被删除。
- en: The doc/numpybook directory has been removed.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: doc/numpybook 目录已被删除。
- en: The numpy/testing/numpytest.py file has been removed together with the importall
    function it contained.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/testing/numpytest.py 文件已与其包含的 importall 函数一起被删除。
- en: Future Changes
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的更改
- en: The numpy/polynomial/polytemplate.py file will be removed in NumPy 1.10.0.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy/polynomial/polytemplate.py 文件将在 NumPy 1.10.0 中被移除。
- en: Default casting for inplace operations will change to ‘same_kind’ in Numpy 1.10.0\.
    This will certainly break some code that is currently ignoring the warning.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认的就地操作类型转换将在 Numpy 1.10.0 中更改为 ‘same_kind’。这肯定会破坏一些当前忽略警告的代码。
- en: Relaxed stride checking will be the default in 1.10.0
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 1.10.0 中，宽松的步幅检查将成为默认设置。
- en: String version checks will break because, e.g., ‘1.9’ > ‘1.10’ is True. A NumpyVersion
    class has been added that can be used for such comparisons.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串版本检查会出现问题，例如，‘1.9’ > ‘1.10’ 为 True。已添加了一个 NumpyVersion 类，可用于此类比较。
- en: The diagonal and diag functions will return writeable views in 1.10.0
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对角线和 diag 函数将在 1.10.0 中返回可写视图
- en: The *S* and/or *a* dtypes may be changed to represent Python strings instead
    of bytes, in Python 3 these two types are very different.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*S* 和/或 *a* 数据类型可能会更改以表示 Python 字符串而不是字节，在 Python 3 中，这两种类型非常不同。'
- en: Compatibility notes
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The diagonal and diag functions return readonly views.
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对角线和 diag 函数返回可写视图。
- en: In NumPy 1.8, the diagonal and diag functions returned readonly copies, in NumPy
    1.9 they return readonly views, and in 1.10 they will return writeable views.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.8 中，对角线和 diag 函数返回只读副本，在 NumPy 1.9 中它们返回只读视图，在 1.10 中它们将返回可写视图。
- en: Special scalar float values don’t cause upcast to double anymore
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊标量浮点值不再导致向上转换为双精度
- en: In previous numpy versions operations involving floating point scalars containing
    special values `NaN`, `Inf` and `-Inf` caused the result type to be at least `float64`.
    As the special values can be represented in the smallest available floating point
    type, the upcast is not performed anymore.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的 numpy 版本中，涉及包含特殊值 `NaN`、`Inf` 和 `-Inf` 的浮点标量的操作导致结果类型至少为 `float64`。由于特殊值可以用最小可用的浮点类型表示，因此不再执行向上转换。
- en: 'For example the dtype of:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
- en: now remains `float32` instead of being cast to `float64`. Operations involving
    non-special values have not been changed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在仍然保持为 `float32` 而不是转换为 `float64`。涉及非特殊值的操作未更改。
- en: Percentile output changes
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数输出更改
- en: If given more than one percentile to compute numpy.percentile returns an array
    instead of a list. A single percentile still returns a scalar. The array is equivalent
    to converting the list returned in older versions to an array via `np.array`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定多个要计算的百分位数，numpy.percentile 返回一个数组而不是列表。单个百分位数仍然返回一个标量。该数组等同于通过 `np.array`
    将旧版本返回的列表转换为数组。
- en: If the `overwrite_input` option is used the input is only partially instead
    of fully sorted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `overwrite_input` 选项，则输入仅部分而不是完全排序。
- en: ndarray.tofile exception type
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray.tofile 异常类型
- en: All `tofile` exceptions are now `IOError`, some were previously `ValueError`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 `tofile` 异常现在都是 `IOError`，以前有些是 `ValueError`。
- en: Invalid fill value exceptions
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效填充值异常
- en: 'Two changes to numpy.ma.core._check_fill_value:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对 numpy.ma.core._check_fill_value 进行了两个更改：
- en: When the fill value is a string and the array type is not one of ‘OSUV’, TypeError
    is raised instead of the default fill value being used.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值为字符串且数组类型不是 ‘OSUV’ 之一时，会引发 TypeError 而不是使用默认填充值。
- en: When the fill value overflows the array type, TypeError is raised instead of
    OverflowError.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值溢出数组类型时，会引发 TypeError 而不是 OverflowError。
- en: Polynomial Classes no longer derived from PolyBase
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再从 PolyBase 派生
- en: This may cause problems with folks who depended on the polynomial classes being
    derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase.
    Strictly speaking, there should be a deprecation involved, but no external code
    making use of the old baseclass could be found.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致依赖于多项式类从 PolyBase 派生的人遇到问题。它们现在都是从抽象基类 ABCPolyBase 派生的。严格来说，应该涉及弃用，但找不到使用旧基类的外部代码。
- en: Using numpy.random.binomial may change the RNG state vs. numpy < 1.9
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 numpy.random.binomial 可能会改变 RNG 状态与 numpy < 1.9 的情况。
- en: A bug in one of the algorithms to generate a binomial random variate has been
    fixed. This change will likely alter the number of random draws performed, and
    hence the sequence location will be different after a call to distribution.c::rk_binomial_btpe.
    Any tests which rely on the RNG being in a known state should be checked and/or
    updated as a result.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 已修复生成二项随机变量算法中的一个错误。此更改可能会改变执行的随机抽样数量，因此在调用 distribution.c::rk_binomial_btpe
    后，序列位置将不同。任何依赖于 RNG 处于已知状态的测试应该进行检查和/或更新。
- en: Random seed enforced to be a 32 bit unsigned integer
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机种子强制为 32 位无符号整数
- en: '`np.random.seed` and `np.random.RandomState` now throw a `ValueError` if the
    seed cannot safely be converted to 32 bit unsigned integers. Applications that
    now fail can be fixed by masking the higher 32 bit values to zero: `seed = seed
    & 0xFFFFFFFF`. This is what is done silently in older versions so the random stream
    remains the same.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.random.seed` 和 `np.random.RandomState` 现在如果种子不能安全地转换为 32 位无符号整数将抛出 `ValueError`。现在失败的应用程序可以通过将高
    32 位值掩码为零来修复：`seed = seed & 0xFFFFFFFF`。这在旧版本中是默默地完成的，以便随机流保持不变。'
- en: Argmin and argmax out argument
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Argmin` 和 `argmax` 输出参数'
- en: The `out` argument to `np.argmin` and `np.argmax` and their equivalent C-API
    functions is now checked to match the desired output shape exactly. If the check
    fails a `ValueError` instead of `TypeError` is raised.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.argmin` 和 `np.argmax` 及其等效的 C-API 函数的 `out` 参数现在会被检查以确保与期望的输出形状完全匹配。如果检查失败，将引发
    `ValueError` 而不是 `TypeError`。'
- en: Einsum
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum
- en: Remove unnecessary broadcasting notation restrictions. `np.einsum('ijk,j->ijk',
    A, B)` can also be written as `np.einsum('ij...,j->ij...', A, B)` (ellipsis is
    no longer required on ‘j’)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 删除不必要的广播符号限制。`np.einsum('ijk,j->ijk', A, B)` 也可以写成 `np.einsum('ij...,j->ij...',
    A, B)`（省略号在‘j’上不再是必需的）
- en: Indexing
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引
- en: 'The NumPy indexing has seen a complete rewrite in this version. This makes
    most advanced integer indexing operations much faster and should have no other
    implications. However some subtle changes and deprecations were introduced in
    advanced indexing operations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，NumPy 的索引已经完全重写。这使得大多数高级整数索引操作更快，并且不应该有其他影响。然而，在高级索引操作中引入了一些微妙的变化和弃用：
- en: Boolean indexing into scalar arrays will always return a new 1-d array. This
    means that `array(1)[array(True)]` gives `array([1])` and not the original array.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对标量数组进行布尔索引将始终返回一个新的一维数组。这意味着 `array(1)[array(True)]` 返回 `array([1])` 而不是原始数组。
- en: Advanced indexing into one dimensional arrays used to have (undocumented) special
    handling regarding repeating the value array in assignments when the shape of
    the value array was too small or did not match. Code using this will raise an
    error. For compatibility you can use `arr.flat[index] = values`, which uses the
    old code branch. (for example `a = np.ones(10); a[np.arange(10)] = [1, 2, 3]`)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一维数组进行高级索引以前有关于在值数组的形状太小或不匹配时重复值数组的特殊处理（未记录）。使用此代码将引发错误。为了兼容性，您可以使用 `arr.flat[index]
    = values`，它使用旧的代码分支。（例如 `a = np.ones(10); a[np.arange(10)] = [1, 2, 3]`）
- en: The iteration order over advanced indexes used to be always C-order. In NumPy
    1.9\. the iteration order adapts to the inputs and is not guaranteed (with the
    exception of a *single* advanced index which is never reversed for compatibility
    reasons). This means that the result is undefined if multiple values are assigned
    to the same element. An example for this is `arr[[0, 0], [1, 1]] = [1, 2]`, which
    may set `arr[0, 1]` to either 1 or 2.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的迭代顺序以前总是 C 顺序。在 NumPy 1.9 中，迭代顺序会根据输入进行调整，并且不保证（除了一个*单一*的高级索引，出于兼容性原因永远不会被反转）。这意味着如果将多个值分配给同一个元素，则结果是未定义的。一个例子是
    `arr[[0, 0], [1, 1]] = [1, 2]`，这可能将 `arr[0, 1]` 设置为 1 或 2。
- en: Equivalent to the iteration order, the memory layout of the advanced indexing
    result is adapted for faster indexing and cannot be predicted.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与迭代顺序类似，高级索引结果的内存布局会根据更快的索引进行调整，无法预测。
- en: All indexing operations return a view or a copy. No indexing operation will
    return the original array object. (For example `arr[...]`)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的索引操作都会返回一个视图或副本。没有任何索引操作会返回原始数组对象。（例如 `arr[...]`）
- en: In the future Boolean array-likes (such as lists of python bools) will always
    be treated as Boolean indexes and Boolean scalars (including python `True`) will
    be a legal *boolean* index. At this time, this is already the case for scalar
    arrays to allow the general `positive = a[a > 0]` to work when `a` is zero dimensional.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将来，布尔数组（如 python 布尔列表）将始终被视为布尔索引，布尔标量（包括 python `True`）将是合法的*布尔*索引。此时，对于标量数组，已经允许一般的
    `positive = a[a > 0]` 在 `a` 是零维时起作用。
- en: In NumPy 1.8 it was possible to use `array(True)` and `array(False)` equivalent
    to 1 and 0 if the result of the operation was a scalar. This will raise an error
    in NumPy 1.9 and, as noted above, treated as a boolean index in the future.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 NumPy 1.8 中，如果操作的结果是标量，可以使用 `array(True)` 和 `array(False)` 相当于 1 和 0。这在 NumPy
    1.9 中将引发错误，并且如上所述，将来会被视为布尔索引。
- en: All non-integer array-likes are deprecated, object arrays of custom integer
    like objects may have to be cast explicitly.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有非整数数组都已被弃用，自定义整数对象的对象数组可能需要显式转换。
- en: The error reporting for advanced indexing is more informative, however the error
    type has changed in some cases. (Broadcasting errors of indexing arrays are reported
    as `IndexError`)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的错误报告更加详细，但在某些情况下错误类型已经发生了变化。（广播索引数组的错误报告为`IndexError`）
- en: Indexing with more then one ellipsis (`...`) is deprecated.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号(`...`)进行索引已被弃用。
- en: Non-integer reduction axis indexes are deprecated
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非整数缩减轴索引已被弃用
- en: Non-integer axis indexes to reduction ufuncs like *add.reduce* or *sum* are
    deprecated.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 非整数轴索引到缩减ufuncs（如*add.reduce*或*sum*）已被弃用。
- en: '`promote_types` and string dtype'
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`promote_types`和字符串dtype'
- en: '`promote_types` function now returns a valid string length when given an integer
    or float dtype as one argument and a string dtype as another argument. Previously
    it always returned the input string dtype, even if it wasn’t long enough to store
    the max integer/float value converted to a string.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`promote_types`函数现在在给定整数或浮点dtype作为一个参数和字符串dtype作为另一个参数时返回有效的字符串长度。以前，即使输入的字符串dtype长度不足以存储转换为字符串的最大整数/浮点值，它也总是返回输入的字符串dtype。'
- en: '`can_cast` and string dtype'
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`can_cast`和字符串dtype'
- en: '`can_cast` function now returns False in “safe” casting mode for integer/float
    dtype and string dtype if the string dtype length is not long enough to store
    the max integer/float value converted to a string. Previously `can_cast` in “safe”
    mode returned True for integer/float dtype and a string dtype of any length.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串dtype长度不足以存储转换为字符串的最大整数/浮点值，则`can_cast`函数现在在“安全”转换模式下对整数/浮点dtype和字符串dtype返回False。以前，在“安全”模式下，`can_cast`对整数/浮点dtype和任何长度的字符串dtype返回True。
- en: astype and string dtype
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype和字符串dtype
- en: The `astype` method now returns an error if the string dtype to cast to is not
    long enough in “safe” casting mode to hold the max value of integer/float array
    that is being casted. Previously the casting was allowed even if the result was
    truncated.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要转换为的字符串dtype在“安全”转换模式下不足以容纳要转换的整数/浮点数组的最大值，则`astype`方法现在会返回错误。以前，即使结果被截断，也允许进行转换。
- en: '*npyio.recfromcsv* keyword arguments change'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*关键字参数更改'
- en: '*npyio.recfromcsv* no longer accepts the undocumented *update* keyword, which
    used to override the *dtype* keyword.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*不再接受未记录的*update*关键字，该关键字曾用于覆盖*dtype*关键字。'
- en: The `doc/swig` directory moved
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移动'
- en: The `doc/swig` directory has been moved to `tools/swig`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移动到`tools/swig`。'
- en: The `npy_3kcompat.h` header changed
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`npy_3kcompat.h`头文件已更改'
- en: The unused `simple_capsule_dtor` function has been removed from `npy_3kcompat.h`.
    Note that this header is not meant to be used outside of numpy; other projects
    should be using their own copy of this file when needed.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用的`simple_capsule_dtor`函数已从`npy_3kcompat.h`中删除。请注意，此头文件不应在numpy之外使用；其他项目在需要时应使用自己的文件副本。
- en: Negative indices in C-Api `sq_item` and `sq_ass_item` sequence methods
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API中`sq_item`和`sq_ass_item`序列方法中的负索引
- en: When directly accessing the `sq_item` or `sq_ass_item` PyObject slots for item
    getting, negative indices will not be supported anymore. `PySequence_GetItem`
    and `PySequence_SetItem` however fix negative indices so that they can be used
    there.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接访问`sq_item`或`sq_ass_item` PyObject插槽以获取项目时，将不再支持负索引。然而，`PySequence_GetItem`和`PySequence_SetItem`修复了负索引，以便可以在那里使用它们。
- en: NDIter
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NDIter
- en: When `NpyIter_RemoveAxis` is now called, the iterator range will be reset.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用`NpyIter_RemoveAxis`时，迭代器范围将被重置。
- en: When a multi index is being tracked and an iterator is not buffered, it is possible
    to use `NpyIter_RemoveAxis`. In this case an iterator can shrink in size. Because
    the total size of an iterator is limited, the iterator may be too large before
    these calls. In this case its size will be set to `-1` and an error issued not
    at construction time but when removing the multi index, setting the iterator range,
    or getting the next function.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当跟踪多索引并且迭代器未被缓冲时，可以使用`NpyIter_RemoveAxis`。在这种情况下，迭代器的大小可能会缩小。因为迭代器的总大小是有限的，在这些调用之前，迭代器可能会太大。在这种情况下，其大小将被设置为`-1`，并且在构造时不会发出错误，而是在移除多索引、设置迭代器范围或获取下一个函数时发出错误。
- en: This has no effect on currently working code, but highlights the necessity of
    checking for an error return if these conditions can occur. In most cases the
    arrays being iterated are as large as the iterator so that such a problem cannot
    occur.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这对当前正常工作的代码没有影响，但强调了如果这些条件可能发生时需要检查错误返回的必要性。在大多数情况下，被迭代的数组与迭代器一样大，因此不会出现这样的问题。
- en: This change was already applied to the 1.8.1 release.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改已经应用于1.8.1版本。
- en: '`zeros_like` for string dtypes now returns empty strings'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于字符串dtypes，`zeros_like`现在返回空字符串
- en: To match the *zeros* function *zeros_like* now returns an array initialized
    with empty strings instead of an array filled with *‘0’*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配*zeros*函数，*zeros_like*现在返回一个用空字符串初始化的数组，而不是一个填充了*‘0’*的数组。
- en: The diagonal and diag functions return readonly views.
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对角线和diag函数返回只读视图。
- en: In NumPy 1.8, the diagonal and diag functions returned readonly copies, in NumPy
    1.9 they return readonly views, and in 1.10 they will return writeable views.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.8中，对角线和diag函数返回只读副本，在NumPy 1.9中它们返回只读视图，在1.10中它们将返回可写视图。
- en: Special scalar float values don’t cause upcast to double anymore
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊标量浮点值不再导致向上转换为双精度
- en: In previous numpy versions operations involving floating point scalars containing
    special values `NaN`, `Inf` and `-Inf` caused the result type to be at least `float64`.
    As the special values can be represented in the smallest available floating point
    type, the upcast is not performed anymore.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的numpy版本中，涉及包含特殊值`NaN`、`Inf`和`-Inf`的浮点标量的操作导致结果类型至少为`float64`。由于特殊值可以在最小可用的浮点类型中表示，因此不再执行向上转换。
- en: 'For example the dtype of:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`np.array([1.], dtype=np.float32) * float(''nan'')`'
- en: now remains `float32` instead of being cast to `float64`. Operations involving
    non-special values have not been changed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保持为`float32`而不是转换为`float64`。涉及非特殊值的操作未更改。
- en: Percentile output changes
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数输出更改
- en: If given more than one percentile to compute numpy.percentile returns an array
    instead of a list. A single percentile still returns a scalar. The array is equivalent
    to converting the list returned in older versions to an array via `np.array`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定多个要计算的百分位数，numpy.percentile返回一个数组而不是列表。单个百分位数仍然返回一个标量。该数组等同于通过`np.array`将旧版本返回的列表转换为数组。
- en: If the `overwrite_input` option is used the input is only partially instead
    of fully sorted.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`overwrite_input`选项，则输入只部分排序而不是完全排序。
- en: ndarray.tofile exception type
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray.tofile异常类型
- en: All `tofile` exceptions are now `IOError`, some were previously `ValueError`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`tofile`异常现在都是`IOError`，以前有些是`ValueError`。
- en: Invalid fill value exceptions
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效的填充值异常
- en: 'Two changes to numpy.ma.core._check_fill_value:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: numpy.ma.core._check_fill_value的两个更改：
- en: When the fill value is a string and the array type is not one of ‘OSUV’, TypeError
    is raised instead of the default fill value being used.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值为字符串且数组类型不是‘OSUV’之一时，会引发TypeError而不是使用默认填充值。
- en: When the fill value overflows the array type, TypeError is raised instead of
    OverflowError.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当填充值溢出数组类型时，会引发TypeError而不是OverflowError。
- en: Polynomial Classes no longer derived from PolyBase
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再从PolyBase派生
- en: This may cause problems with folks who depended on the polynomial classes being
    derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase.
    Strictly speaking, there should be a deprecation involved, but no external code
    making use of the old baseclass could be found.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会导致依赖于多项式类从PolyBase派生的人遇到问题。它们现在都是从抽象基类ABCPolyBase派生的。严格来说，应该涉及到弃用，但找不到使用旧基类的外部代码。
- en: Using numpy.random.binomial may change the RNG state vs. numpy < 1.9
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用numpy.random.binomial可能会改变RNG状态与numpy < 1.9
- en: A bug in one of the algorithms to generate a binomial random variate has been
    fixed. This change will likely alter the number of random draws performed, and
    hence the sequence location will be different after a call to distribution.c::rk_binomial_btpe.
    Any tests which rely on the RNG being in a known state should be checked and/or
    updated as a result.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 已修复生成二项随机变量算法中的一个错误。此更改可能会改变执行的随机抽样数量，因此在调用distribution.c::rk_binomial_btpe后，序列位置将不同。任何依赖于RNG处于已知状态的测试应该被检查和/或更新。
- en: Random seed enforced to be a 32 bit unsigned integer
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机种子强制为32位无符号整数
- en: '`np.random.seed` and `np.random.RandomState` now throw a `ValueError` if the
    seed cannot safely be converted to 32 bit unsigned integers. Applications that
    now fail can be fixed by masking the higher 32 bit values to zero: `seed = seed
    & 0xFFFFFFFF`. This is what is done silently in older versions so the random stream
    remains the same.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`np.random.seed`和`np.random.RandomState`的种子无法安全地转换为32位无符号整数，则现在会抛出`ValueError`。现在失败的应用程序可以通过将高32位值屏蔽为零来修复：`seed
    = seed & 0xFFFFFFFF`。这在旧版本中是默默地完成的，因此随机流保持不变。
- en: Argmin and argmax out argument
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Argmin和argmax输出参数
- en: The `out` argument to `np.argmin` and `np.argmax` and their equivalent C-API
    functions is now checked to match the desired output shape exactly. If the check
    fails a `ValueError` instead of `TypeError` is raised.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.argmin`和`np.argmax`及其等效的C-API函数的`out`参数现在被检查以确切匹配所需的输出形状。如果检查失败，则会引发`ValueError`而不是`TypeError`。'
- en: Einsum
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum
- en: Remove unnecessary broadcasting notation restrictions. `np.einsum('ijk,j->ijk',
    A, B)` can also be written as `np.einsum('ij...,j->ij...', A, B)` (ellipsis is
    no longer required on ‘j’)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 删除不必要的广播符号限制。`np.einsum('ijk,j->ijk', A, B)`也可以写成`np.einsum('ij...,j->ij...',
    A, B)`（省略号在‘j’上不再需要）
- en: Indexing
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引
- en: 'The NumPy indexing has seen a complete rewrite in this version. This makes
    most advanced integer indexing operations much faster and should have no other
    implications. However some subtle changes and deprecations were introduced in
    advanced indexing operations:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy索引在这个版本中进行了完全重写。这使得大多数高级整数索引操作更快，并且不应该有其他影响。然而，在高级索引操作中引入了一些微妙的变化和弃用：
- en: Boolean indexing into scalar arrays will always return a new 1-d array. This
    means that `array(1)[array(True)]` gives `array([1])` and not the original array.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对标量数组进行布尔索引将始终返回一个新的1维数组。这意味着`array(1)[array(True)]`会给出`array([1])`而不是原始数组。
- en: Advanced indexing into one dimensional arrays used to have (undocumented) special
    handling regarding repeating the value array in assignments when the shape of
    the value array was too small or did not match. Code using this will raise an
    error. For compatibility you can use `arr.flat[index] = values`, which uses the
    old code branch. (for example `a = np.ones(10); a[np.arange(10)] = [1, 2, 3]`)
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引到一维数组在分配时对值数组的形状进行特殊处理，当值数组的形状太小或不匹配时，会出现（未记录的）特殊情况。使用此代码将引发错误。为了兼容性，您可以使用`arr.flat[index]
    = values`，它使用旧的代码分支。（例如`a = np.ones(10); a[np.arange(10)] = [1, 2, 3]）
- en: The iteration order over advanced indexes used to be always C-order. In NumPy
    1.9\. the iteration order adapts to the inputs and is not guaranteed (with the
    exception of a *single* advanced index which is never reversed for compatibility
    reasons). This means that the result is undefined if multiple values are assigned
    to the same element. An example for this is `arr[[0, 0], [1, 1]] = [1, 2]`, which
    may set `arr[0, 1]` to either 1 or 2.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的迭代顺序过去总是C顺序。在NumPy 1.9中，迭代顺序会根据输入进行调整，并且不保证（除了一个*单一*高级索引，出于兼容性原因永远不会被反转）。这意味着如果将多个值分配给相同的元素，则结果是未定义的。一个例子是`arr[[0,
    0], [1, 1]] = [1, 2]`，这可能将`arr[0, 1]`设置为1或2。
- en: Equivalent to the iteration order, the memory layout of the advanced indexing
    result is adapted for faster indexing and cannot be predicted.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与迭代顺序类似，高级索引结果的内存布局被调整以实现更快的索引，并且无法预测。
- en: All indexing operations return a view or a copy. No indexing operation will
    return the original array object. (For example `arr[...]`)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有索引操作都返回一个视图或副本。没有任何索引操作会返回原始数组对象。（例如`arr[...]`）
- en: In the future Boolean array-likes (such as lists of python bools) will always
    be treated as Boolean indexes and Boolean scalars (including python `True`) will
    be a legal *boolean* index. At this time, this is already the case for scalar
    arrays to allow the general `positive = a[a > 0]` to work when `a` is zero dimensional.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将来，布尔数组类似物（例如python布尔列表）将始终被视为布尔索引，布尔标量（包括python `True`）将是合法的*布尔*索引。此时，对于标量数组，这已经是这种情况，以允许一般的`positive
    = a[a > 0]`在`a`是零维时起作用。
- en: In NumPy 1.8 it was possible to use `array(True)` and `array(False)` equivalent
    to 1 and 0 if the result of the operation was a scalar. This will raise an error
    in NumPy 1.9 and, as noted above, treated as a boolean index in the future.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NumPy 1.8中，如果操作的结果是标量，可以使用`array(True)`和`array(False)`等同于1和0。在NumPy 1.9中，这将引发错误，并且如上所述，将来会被视为布尔索引。
- en: All non-integer array-likes are deprecated, object arrays of custom integer
    like objects may have to be cast explicitly.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有非整数数组类似物已被弃用，自定义整数类对象的对象数组可能必须显式转换。
- en: The error reporting for advanced indexing is more informative, however the error
    type has changed in some cases. (Broadcasting errors of indexing arrays are reported
    as `IndexError`)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级索引的错误报告更加详细，但在某些情况下错误类型已经发生了变化。（索引数组的广播错误报告为`IndexError`）
- en: Indexing with more then one ellipsis (`...`) is deprecated.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号（`...`）进行索引已被弃用。
- en: Non-integer reduction axis indexes are deprecated
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非整数缩减轴索引已被弃用
- en: Non-integer axis indexes to reduction ufuncs like *add.reduce* or *sum* are
    deprecated.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像*add.reduce*或*sum*这样的缩减ufunc的非整数轴索引已被弃用。
- en: '`promote_types` and string dtype'
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`promote_types`和字符串dtype'
- en: '`promote_types` function now returns a valid string length when given an integer
    or float dtype as one argument and a string dtype as another argument. Previously
    it always returned the input string dtype, even if it wasn’t long enough to store
    the max integer/float value converted to a string.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当给定一个整数或浮点数dtype作为一个参数，另一个参数作为字符串dtype时，`promote_types`函数现在返回一个有效的字符串长度。以前，即使输入的字���串dtype长度不足以存储转换为字符串的最大整数/浮点数值，它总是返回输入的字符串dtype。
- en: '`can_cast` and string dtype'
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`can_cast`和字符串dtype'
- en: '`can_cast` function now returns False in “safe” casting mode for integer/float
    dtype and string dtype if the string dtype length is not long enough to store
    the max integer/float value converted to a string. Previously `can_cast` in “safe”
    mode returned True for integer/float dtype and a string dtype of any length.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`can_cast`函数现在在整数/浮点数dtype和字符串dtype的“安全”转换模式下返回False，如果字符串dtype的长度不足以存储转换为字符串的最大整数/浮点数值。以前，在“安全”模式下，`can_cast`对整数/浮点数dtype和任何长度的字符串dtype返回True。'
- en: astype and string dtype
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: astype和字符串dtype
- en: The `astype` method now returns an error if the string dtype to cast to is not
    long enough in “safe” casting mode to hold the max value of integer/float array
    that is being casted. Previously the casting was allowed even if the result was
    truncated.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在“安全”转换模式下，如果要转换为的字符串dtype长度不足以容纳正在转换的整数/浮点数数组的最大值，则`astype`方法现在会返回错误。以前，即使结果被截断，也允许转换。
- en: '*npyio.recfromcsv* keyword arguments change'
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*关键字参数更改'
- en: '*npyio.recfromcsv* no longer accepts the undocumented *update* keyword, which
    used to override the *dtype* keyword.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '*npyio.recfromcsv*不再接受未记录的*update*关键字，该关键字曾用于覆盖*dtype*关键字。'
- en: The `doc/swig` directory moved
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移动'
- en: The `doc/swig` directory has been moved to `tools/swig`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`doc/swig`目录已移动到`tools/swig`。'
- en: The `npy_3kcompat.h` header changed
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`npy_3kcompat.h`头文件已更改'
- en: The unused `simple_capsule_dtor` function has been removed from `npy_3kcompat.h`.
    Note that this header is not meant to be used outside of numpy; other projects
    should be using their own copy of this file when needed.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用的`simple_capsule_dtor`函数已从`npy_3kcompat.h`中删除。请注意，此头文件不应在numpy之外使用；其他项目应在需要时使用自己的副本。
- en: Negative indices in C-Api `sq_item` and `sq_ass_item` sequence methods
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-Api中的负索引`sq_item`和`sq_ass_item`序列方法
- en: When directly accessing the `sq_item` or `sq_ass_item` PyObject slots for item
    getting, negative indices will not be supported anymore. `PySequence_GetItem`
    and `PySequence_SetItem` however fix negative indices so that they can be used
    there.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接访问`sq_item`或`sq_ass_item` PyObject插槽以获取项目时，不再支持负索引。然而，`PySequence_GetItem`和`PySequence_SetItem`修复了负索引，以便在那里使用。
- en: NDIter
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NDIter
- en: When `NpyIter_RemoveAxis` is now called, the iterator range will be reset.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当现在调用`NpyIter_RemoveAxis`时，迭代器范围将被重置。
- en: When a multi index is being tracked and an iterator is not buffered, it is possible
    to use `NpyIter_RemoveAxis`. In this case an iterator can shrink in size. Because
    the total size of an iterator is limited, the iterator may be too large before
    these calls. In this case its size will be set to `-1` and an error issued not
    at construction time but when removing the multi index, setting the iterator range,
    or getting the next function.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当跟踪多索引并且迭代器未被缓冲时，可以使用`NpyIter_RemoveAxis`。在这种情况下，迭代器的大小可能会缩小。由于迭代器的总大小是有限的，在这些调用之前，迭代器可能会太大。在这种情况下，其大小将设置为`-1`，并且在构造时不会发出错误，而是在删除多索引、设置迭代器范围或获取下一个函数时发出错误。
- en: This has no effect on currently working code, but highlights the necessity of
    checking for an error return if these conditions can occur. In most cases the
    arrays being iterated are as large as the iterator so that such a problem cannot
    occur.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这对当前正常工作的代码没有影响，但强调了如果这些条件可能发生，则需要检查错误返回的必要性。在大多数情况下，被迭代的数组与迭代器一样大，因此不会出现这样的问题。
- en: This change was already applied to the 1.8.1 release.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改已经应用到了1.8.1版本。
- en: '`zeros_like` for string dtypes now returns empty strings'
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于字符串dtype，`zeros_like`现在返回空字符串
- en: To match the *zeros* function *zeros_like* now returns an array initialized
    with empty strings instead of an array filled with *‘0’*.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配*zeros*函数，*zeros_like*现在返回一个用空字符串初始化的数组，而不是一个填充有*‘0’*的数组。
- en: New Features
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Percentile supports more interpolation options
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数支持更多的插值选项
- en: '`np.percentile` now has the interpolation keyword argument to specify in which
    way points should be interpolated if the percentiles fall between two values.
    See the documentation for the available options.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile`现在具有插值关键字参数，用于指定如果百分位数落在两个值之间时应该如何插值点。请查看文档以获取可用选项。'
- en: Generalized axis support for median and percentile
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中位数和百分位数的广义轴支持
- en: '`np.median` and `np.percentile` now support generalized axis arguments like
    ufunc reductions do since 1.7\. One can now say axis=(index, index) to pick a
    list of axes for the reduction. The `keepdims` keyword argument was also added
    to allow convenient broadcasting to arrays of the original shape.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.median`和`np.percentile`现在支持类似ufunc reductions的广义轴参数自1.7起。现在可以说axis=(index,
    index)来选择一个用于缩减的轴列表。还添加了`keepdims`关键字参数，以便方便地广播到原始形状的数组。'
- en: Dtype parameter added to `np.linspace` and `np.logspace`
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linspace`和`np.logspace`添加了dtype参数'
- en: The returned data type from the `linspace` and `logspace` functions can now
    be specified using the dtype parameter.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用dtype参数指定`linspace`和`logspace`函数返回的数据类型。
- en: More general `np.triu` and `np.tril` broadcasting
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更通用的`np.triu`和`np.tril`广播
- en: For arrays with `ndim` exceeding 2, these functions will now apply to the final
    two axes instead of raising an exception.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`ndim`超过2的数组，这些函数现在将应用于最后两个轴，而不是引发异常。
- en: '`tobytes` alias for `tostring` method'
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tobytes`方法的别名为`tostring`'
- en: '`ndarray.tobytes` and `MaskedArray.tobytes` have been added as aliases for
    `tostring` which exports arrays as `bytes`. This is more consistent in Python
    3 where `str` and `bytes` are not the same.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.tobytes`和`MaskedArray.tobytes`已添加为`tostring`的别名，用于将数组导出为`bytes`。这在Python
    3中更一致，因为`str`和`bytes`不相同。'
- en: Build system
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the ppc64le and OpenRISC architecture.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 增加了对ppc64le和OpenRISC架构的实验性支持。
- en: Compatibility to python `numbers` module
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 兼容性到python的`numbers`模块
- en: All numerical numpy types are now registered with the type hierarchy in the
    python `numbers` module.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值numpy类型现在都在python的`numbers`模块中注册到类型层次结构中。
- en: '`increasing` parameter added to `np.vander`'
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.vander`添加了`increasing`参数'
- en: The ordering of the columns of the Vandermonde matrix can be specified with
    this new boolean argument.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用这个新的布尔参数指定Vandermonde矩阵的列的顺序。
- en: '`unique_counts` parameter added to `np.unique`'
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique`添加了`unique_counts`参数'
- en: The number of times each unique item comes up in the input can now be obtained
    as an optional return value.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以作为可选返回值获得输入中每个唯一项出现的次数。
- en: Support for median and percentile in nanfunctions
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在nanfunctions中支持中位数和百分位数
- en: The `np.nanmedian` and `np.nanpercentile` functions behave like the median and
    percentile functions except that NaNs are ignored.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.nanmedian`和`np.nanpercentile`函数的行为类似于中位数和百分位数函数，只是忽略NaN。'
- en: NumpyVersion class added
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了NumpyVersion类
- en: 'The class may be imported from numpy.lib and can be used for version comparison
    when the numpy version goes to 1.10.devel. For example:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当numpy版本升级到1.10.devel时，该类可以从numpy.lib导入，并用于版本比较。例如：
- en: '[PRE2]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Allow saving arrays with large number of named columns
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许保存具有大量命名列的数组
- en: The numpy storage format 1.0 only allowed the array header to have a total size
    of 65535 bytes. This can be exceeded by structured arrays with a large number
    of columns. A new format 2.0 has been added which extends the header size to 4
    GiB. *np.save* will automatically save in 2.0 format if the data requires it,
    else it will always use the more compatible 1.0 format.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: numpy存储格式1.0只允许数组头部的总大小为65535字节。这可能会被具有大量列的结构化数组超过。添加了新的2.0格式，将头部大小扩展到4 GiB。如果数据需要，*np.save*将自动保存为2.0格式，否则将始终使用更兼容的1.0格式。
- en: Full broadcasting support for `np.cross`
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.cross`的完全广播支持'
- en: '`np.cross` now properly broadcasts its two input arrays, even if they have
    different number of dimensions. In earlier versions this would result in either
    an error being raised, or wrong results computed.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.cross`现在正确地广播其两个输入数组，即使它们具有不同的维度数量。在早期版本中，这将导致引发错误或计算错误的结果。'
- en: Percentile supports more interpolation options
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数支持更多的插值选项
- en: '`np.percentile` now has the interpolation keyword argument to specify in which
    way points should be interpolated if the percentiles fall between two values.
    See the documentation for the available options.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile`现在具有插值关键字参数，用于指定如果百分位数落在两个值之间时应该如何插值点。请查看文档以获取可用选项。'
- en: Generalized axis support for median and percentile
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中位数和百分位数的广义轴支持
- en: '`np.median` and `np.percentile` now support generalized axis arguments like
    ufunc reductions do since 1.7\. One can now say axis=(index, index) to pick a
    list of axes for the reduction. The `keepdims` keyword argument was also added
    to allow convenient broadcasting to arrays of the original shape.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.median` 和 `np.percentile` 现在支持类似于 ufunc reductions 的广义轴参数，自 1.7 版本开始。现在可以使用
    axis=(index, index) 来选择要减少的轴列表。`keepdims` 关键字参数也被添加，以便方便地广播到原始形状的数组。'
- en: Dtype parameter added to `np.linspace` and `np.logspace`
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linspace` 和 `np.logspace` 添加了 Dtype 参数。'
- en: The returned data type from the `linspace` and `logspace` functions can now
    be specified using the dtype parameter.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用 dtype ���数指定 `linspace` 和 `logspace` 函数返回的数据类型。
- en: More general `np.triu` and `np.tril` broadcasting
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更一般的 `np.triu` 和 `np.tril` 广播。
- en: For arrays with `ndim` exceeding 2, these functions will now apply to the final
    two axes instead of raising an exception.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `ndim` 超过 2 的数组，这些函数现在将应用于最后两个轴，而不是引发异常。
- en: '`tobytes` alias for `tostring` method'
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tobytes` 是 `tostring` 方法的别名。'
- en: '`ndarray.tobytes` and `MaskedArray.tobytes` have been added as aliases for
    `tostring` which exports arrays as `bytes`. This is more consistent in Python
    3 where `str` and `bytes` are not the same.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray.tobytes` 和 `MaskedArray.tobytes` 已添加为 `tostring` 的别名，用于将数组导出为 `bytes`。这在
    Python 3 中更一致，因为 `str` 和 `bytes` 不相同。'
- en: Build system
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the ppc64le and OpenRISC architecture.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对 ppc64le 和 OpenRISC 架构的实验性支持。
- en: Compatibility to python `numbers` module
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 python `numbers` 模块的兼容性
- en: All numerical numpy types are now registered with the type hierarchy in the
    python `numbers` module.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值 numpy 类型现在都在 python `numbers` 模块中注册。
- en: '`increasing` parameter added to `np.vander`'
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.vander` 添加了 `increasing` 参数。'
- en: The ordering of the columns of the Vandermonde matrix can be specified with
    this new boolean argument.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用这个新的布尔参数指定范德蒙德矩阵的列的顺序。
- en: '`unique_counts` parameter added to `np.unique`'
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique` 添加了 `unique_counts` 参数。'
- en: The number of times each unique item comes up in the input can now be obtained
    as an optional return value.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以作为可选返回值获取输入中每个唯一项出现的次数。
- en: Support for median and percentile in nanfunctions
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: nanfunctions 中支持中位数和百分位数。
- en: The `np.nanmedian` and `np.nanpercentile` functions behave like the median and
    percentile functions except that NaNs are ignored.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.nanmedian` 和 `np.nanpercentile` 函数的行为类似于中位数和百分位数函数，只是会忽略 NaN 值。'
- en: NumpyVersion class added
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了 NumpyVersion 类。
- en: 'The class may be imported from numpy.lib and can be used for version comparison
    when the numpy version goes to 1.10.devel. For example:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当 numpy 版本升级到 1.10.devel 时，该类可以从 numpy.lib 中导入，并用于版本比较。例如：
- en: '[PRE3]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Allow saving arrays with large number of named columns
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 允许保存具有大量命名列的数组。
- en: The numpy storage format 1.0 only allowed the array header to have a total size
    of 65535 bytes. This can be exceeded by structured arrays with a large number
    of columns. A new format 2.0 has been added which extends the header size to 4
    GiB. *np.save* will automatically save in 2.0 format if the data requires it,
    else it will always use the more compatible 1.0 format.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: numpy 存储格式 1.0 仅允许数组头部的总大小为 65535 字节。这可能会被具有大量列的结构化数组超过。添加了一个新的格式 2.0，将头部大小扩展到
    4 GiB。如果数据需要，*np.save* 将自动保存为 2.0 格式，否则将始终使用更兼容的 1.0 格式。
- en: Full broadcasting support for `np.cross`
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.cross` 的完全广播支持。'
- en: '`np.cross` now properly broadcasts its two input arrays, even if they have
    different number of dimensions. In earlier versions this would result in either
    an error being raised, or wrong results computed.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.cross` 现在正确地广播其两个输入数组，即使它们具有不同数量的维度。在早期版本中，这将导致引发错误或计算错误的结果。'
- en: Improvements
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: Better numerical stability for sum in some cases
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下，对于 sum 的更好数值稳定性。
- en: Pairwise summation is now used in the sum method, but only along the fast axis
    and for groups of the values <= 8192 in length. This should also improve the accuracy
    of var and std in some common cases.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 sum 方法中使用成对求和，但仅沿着快速轴和长度小于等于 8192 的值组。这也应该改善某些常见情况下 var 和 std 的准确性。
- en: Percentile implemented in terms of `np.partition`
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 百分位数是基于 `np.partition` 实现的。
- en: '`np.percentile` has been implemented in terms of `np.partition` which only
    partially sorts the data via a selection algorithm. This improves the time complexity
    from `O(nlog(n))` to `O(n)`.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile` 是基于 `np.partition` 实现的，它只通过选择算法部分排序数据。这将时间复杂度从 `O(nlog(n))`
    改进为 `O(n)`。'
- en: Performance improvement for `np.array`
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.array` 的性能改进。'
- en: The performance of converting lists containing arrays to arrays using `np.array`
    has been improved. It is now equivalent in speed to `np.vstack(list)`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.array`将包含数组的列表转换为数组的性能已经得到改进。现在在速度上等同于`np.vstack(list)`。
- en: Performance improvement for `np.searchsorted`
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.searchsorted`的性能改进'
- en: For the built-in numeric types, `np.searchsorted` no longer relies on the data
    type’s `compare` function to perform the search, but is now implemented by type
    specific functions. Depending on the size of the inputs, this can result in performance
    improvements over 2x.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置数值类型，`np.searchsorted`不再依赖于数据类型的`compare`函数来执行搜索，而是现在由特定类型的函数实现。根据输入的大小，这可能导致性能提升超过2倍。
- en: Optional reduced verbosity for np.distutils
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: np.distutils的可选减少冗余性
- en: Set `numpy.distutils.system_info.system_info.verbosity = 0` and then calls to
    `numpy.distutils.system_info.get_info('blas_opt')` will not print anything on
    the output. This is mostly for other packages using numpy.distutils.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`numpy.distutils.system_info.system_info.verbosity = 0`，然后调用`numpy.distutils.system_info.get_info('blas_opt')`将不会在输出中打印任何内容。这主要是为了其他使用numpy.distutils的包。
- en: Covariance check in `np.random.multivariate_normal`
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.random.multivariate_normal`中的协方差检查'
- en: A `RuntimeWarning` warning is raised when the covariance matrix is not positive-semidefinite.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 当协方差矩阵不是半正定时，会引发`RuntimeWarning`警告。
- en: Polynomial Classes no longer template based
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再基于模板
- en: The polynomial classes have been refactored to use an abstract base class rather
    than a template in order to implement a common interface. This makes importing
    the polynomial package faster as the classes do not need to be compiled on import.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式类已经重构为使用抽象基类而不是模板，以实现一个公共接口。这使得导入多项式包更快，因为在导入时不需要编译类。
- en: More GIL releases
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多的GIL释放
- en: Several more functions now release the Global Interpreter Lock allowing more
    efficient parallelization using the `threading` module. Most notably the GIL is
    now released for fancy indexing, `np.where` and the `random` module now uses a
    per-state lock instead of the GIL.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有更多函数释放全局解释器锁，允许使用`threading`模块更有效地并行化。最值得注意的是现在对花式索引、`np.where`和`random`模块释放了GIL，现在使用每个状态锁而不是GIL。
- en: MaskedArray support for more complicated base classes
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更复杂基类的MaskedArray支持
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, `repr` and `str` should now work more reliably.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 内置假设基类的行为类似于普通数组的假设正在被移除。特别是，`repr`和`str`现在应该更可靠地工作。
- en: C-API
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Better numerical stability for sum in some cases
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在某些情况下，对sum的数值稳定性更好
- en: Pairwise summation is now used in the sum method, but only along the fast axis
    and for groups of the values <= 8192 in length. This should also improve the accuracy
    of var and std in some common cases.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在sum方法中使用了Pairwise summation，但仅沿着快速轴，并且对长度<=8192的值组使用。这也应该改善一些常见情况下var和std的准确性。
- en: Percentile implemented in terms of `np.partition`
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以`np.partition`实现的百分位数
- en: '`np.percentile` has been implemented in terms of `np.partition` which only
    partially sorts the data via a selection algorithm. This improves the time complexity
    from `O(nlog(n))` to `O(n)`.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.percentile`已经实现为`np.partition`，它只通过选择算法部分排序数据。这将时间复杂度从`O(nlog(n))`改进为`O(n)`。'
- en: Performance improvement for `np.array`
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.array`的性能改进'
- en: The performance of converting lists containing arrays to arrays using `np.array`
    has been improved. It is now equivalent in speed to `np.vstack(list)`.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.array`将包含数组的列表转换为数组的性能已经得到改进。现在在速度上等同于`np.vstack(list)`。
- en: Performance improvement for `np.searchsorted`
  id: totrans-364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.searchsorted`的性能改进'
- en: For the built-in numeric types, `np.searchsorted` no longer relies on the data
    type’s `compare` function to perform the search, but is now implemented by type
    specific functions. Depending on the size of the inputs, this can result in performance
    improvements over 2x.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置数值类型，`np.searchsorted`不再依赖于数据类型的`compare`函数来执行搜索，而是现在由特定类型的函数实现。根据输入的大小，这可能导致性能提升超过2倍。
- en: Optional reduced verbosity for np.distutils
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: np.distutils的可选减少冗余性
- en: Set `numpy.distutils.system_info.system_info.verbosity = 0` and then calls to
    `numpy.distutils.system_info.get_info('blas_opt')` will not print anything on
    the output. This is mostly for other packages using numpy.distutils.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`numpy.distutils.system_info.system_info.verbosity = 0`，然后调用`numpy.distutils.system_info.get_info('blas_opt')`将不会在输出中打印任何内容。这主要是为了其他使用numpy.distutils的包。
- en: Covariance check in `np.random.multivariate_normal`
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.random.multivariate_normal`中的协方差检查'
- en: A `RuntimeWarning` warning is raised when the covariance matrix is not positive-semidefinite.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当协方差矩阵不是半正定时，会引发`RuntimeWarning`警告。
- en: Polynomial Classes no longer template based
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式类不再基于模板
- en: The polynomial classes have been refactored to use an abstract base class rather
    than a template in order to implement a common interface. This makes importing
    the polynomial package faster as the classes do not need to be compiled on import.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式类已经重构，使用抽象基类而不是模板，以实现一个通用接口。这使得导入多项式包更快，因为在导入时不需要编译这些类。
- en: More GIL releases
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多GIL释放
- en: Several more functions now release the Global Interpreter Lock allowing more
    efficient parallelization using the `threading` module. Most notably the GIL is
    now released for fancy indexing, `np.where` and the `random` module now uses a
    per-state lock instead of the GIL.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有几个函数释放全局解释器锁，允许使用`threading`模块更有效地并行化。特别是现在对花式索引、`np.where`和`random`模块释放了GIL，现在使用每个状态锁而不是GIL。
- en: MaskedArray support for more complicated base classes
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MaskedArray对更复杂的基类的支持
- en: Built-in assumptions that the baseclass behaved like a plain array are being
    removed. In particular, `repr` and `str` should now work more reliably.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 内置假设基类的行为类似于普通数组的假设正在被移除。特别是，`repr`和`str`现在应该更可靠地工作。
- en: C-API
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Deprecations
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Non-integer scalars for sequence repetition
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列重复的非整数标量
- en: Using non-integer numpy scalars to repeat python sequences is deprecated. For
    example `np.float_(2) * [1]` will be an error in the future.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非整数numpy标量重复python序列已被弃用。例如，`np.float_(2) * [1]`将在将来引发错误。
- en: '`select` input deprecations'
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`select`输入的弃用'
- en: The integer and empty input to `select` is deprecated. In the future only boolean
    arrays will be valid conditions and an empty `condlist` will be considered an
    input error instead of returning the default.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 对`select`的整数和空输入已被弃用。将来只有布尔数组将是有效条件，而空的`condlist`将被视为输入错误，而不是返回默认值。
- en: '`rank` function'
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rank`函数'
- en: The `rank` function has been deprecated to avoid confusion with `numpy.linalg.matrix_rank`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`rank`函数已被弃用，以避免与`numpy.linalg.matrix_rank`混淆。'
- en: Object array equality comparisons
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象数组的相等比较
- en: 'In the future object array comparisons both *==* and *np.equal* will not make
    use of identity checks anymore. For example:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，对象数组的比较*==*和*np.equal*都不再使用身份检查。例如：
- en: '[PRE4]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: will consistently return False (and in the future an error) even if the array
    in *a* and *b* was the same object.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 即使数组在*a*和*b*中是相同对象，也将始终返回False（并在将来引发错误）。
- en: The equality operator *==* will in the future raise errors like *np.equal* if
    broadcasting or element comparisons, etc. fails.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 等号运算符*==*将在将来引发类似*np.equal*的错误，如果广播或元素比较等失败。
- en: Comparison with *arr == None* will in the future do an elementwise comparison
    instead of just returning False. Code should be using *arr is None*.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 与*arr == None*的比较将来将执行逐元素比较，而不仅仅返回False。代码应该使用*arr is None*。
- en: All of these changes will give Deprecation- or FutureWarnings at this time.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些更改目前将产生弃用或未来警告。
- en: C-API
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: The utility function npy_PyFile_Dup and npy_PyFile_DupClose are broken by the
    internal buffering python 3 applies to its file objects. To fix this two new functions
    npy_PyFile_Dup2 and npy_PyFile_DupClose2 are declared in npy_3kcompat.h and the
    old functions are deprecated. Due to the fragile nature of these functions it
    is recommended to instead use the python API when possible.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`npy_PyFile_Dup`和`npy_PyFile_DupClose`这两个实用函数被内部缓冲破坏，这是由Python 3应用于其文件对象的缓冲机制引起的。为了解决这个问题，在`npy_3kcompat.h`中声明了两个新函数`npy_PyFile_Dup2`和`npy_PyFile_DupClose2`，同时弃用了旧函数。由于这些函数的脆弱性，建议尽可能使用Python
    API。'
- en: This change was already applied to the 1.8.1 release.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改已经应用于1.8.1版本。
- en: Non-integer scalars for sequence repetition
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 序列重复的非整数标量
- en: Using non-integer numpy scalars to repeat python sequences is deprecated. For
    example `np.float_(2) * [1]` will be an error in the future.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非整数numpy标量重复python序列已被弃用。例如，`np.float_(2) * [1]`将在将来引发错误。
- en: '`select` input deprecations'
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`select`输入的弃用'
- en: The integer and empty input to `select` is deprecated. In the future only boolean
    arrays will be valid conditions and an empty `condlist` will be considered an
    input error instead of returning the default.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 对`select`的整数和空输入已被弃用。将来只有布尔数组将是有效条件，而空的`condlist`将被视为输入错误，而不是返回默认值。
- en: '`rank` function'
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rank`函数'
- en: The `rank` function has been deprecated to avoid confusion with `numpy.linalg.matrix_rank`.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`rank` 函数已被弃用，以避免与 `numpy.linalg.matrix_rank` 混淆。'
- en: Object array equality comparisons
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象数组的相等比较
- en: 'In the future object array comparisons both *==* and *np.equal* will not make
    use of identity checks anymore. For example:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 未来，对象数组比较中 *==* 和 *np.equal* 都不再使用身份检查。例如：
- en: '[PRE5]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: will consistently return False (and in the future an error) even if the array
    in *a* and *b* was the same object.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 即使数组 *a* 和 *b* 是同一个对象，也会始终返回 False（并在未来引发错误）。
- en: The equality operator *==* will in the future raise errors like *np.equal* if
    broadcasting or element comparisons, etc. fails.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，等号运算符 *==* 如果广播或元素比较等操作失败，将会引发类似 *np.equal* 的错误。
- en: Comparison with *arr == None* will in the future do an elementwise comparison
    instead of just returning False. Code should be using *arr is None*.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *arr == None* 的比较将来会执行逐元素比较，而不仅仅返回 False。代码应该使用 *arr is None*。
- en: All of these changes will give Deprecation- or FutureWarnings at this time.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些改变目前都会产生 Deprecation- 或 FutureWarnings。
- en: C-API
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: The utility function npy_PyFile_Dup and npy_PyFile_DupClose are broken by the
    internal buffering python 3 applies to its file objects. To fix this two new functions
    npy_PyFile_Dup2 and npy_PyFile_DupClose2 are declared in npy_3kcompat.h and the
    old functions are deprecated. Due to the fragile nature of these functions it
    is recommended to instead use the python API when possible.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 实用函数 npy_PyFile_Dup 和 npy_PyFile_DupClose 受到 Python 3 对其文件对象应用的内部缓冲的影响而出现问题。为了解决这个问题，在
    npy_3kcompat.h 中声明了两个新函数 npy_PyFile_Dup2 和 npy_PyFile_DupClose2，并弃用了旧函数。由于这些函数的脆弱性，建议尽可能使用
    Python API。
- en: This change was already applied to the 1.8.1 release.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这个改变已经应用于 1.8.1 版本。
