- en: scipy.fftpack.hilbert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.hilbert.html#scipy.fftpack.hilbert](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fftpack.hilbert.html#scipy.fftpack.hilbert)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return Hilbert transform of a periodic sequence x.
  prefs: []
  type: TYPE_NORMAL
- en: 'If x_j and y_j are Fourier coefficients of periodic functions x and y, respectively,
    then:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array, should be periodic.
  prefs: []
  type: TYPE_NORMAL
- en: '**_cache**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary that contains the kernel used to do a convolution with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The transformed input.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.signal.hilbert`](scipy.signal.hilbert.html#scipy.signal.hilbert "scipy.signal.hilbert")'
  prefs: []
  type: TYPE_NORMAL
- en: Compute the analytic signal, using the Hilbert transform.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If `sum(x, axis=0) == 0` then `hilbert(ihilbert(x)) == x`.
  prefs: []
  type: TYPE_NORMAL
- en: For even len(x), the Nyquist mode of x is taken zero.
  prefs: []
  type: TYPE_NORMAL
- en: The sign of the returned transform does not have a factor -1 that is more often
    than not found in the definition of the Hilbert transform. Note also that [`scipy.signal.hilbert`](scipy.signal.hilbert.html#scipy.signal.hilbert
    "scipy.signal.hilbert") does have an extra -1 factor compared to this function.
  prefs: []
  type: TYPE_NORMAL
