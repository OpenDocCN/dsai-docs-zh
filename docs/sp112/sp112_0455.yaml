- en: scipy.optimize.brenth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.optimize.brenth
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brenth.html#scipy.optimize.brenth](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brenth.html#scipy.optimize.brenth)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brenth.html#scipy.optimize.brenth](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.brenth.html#scipy.optimize.brenth)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Find a root of a function in a bracketing interval using Brent’s method with
    hyperbolic extrapolation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Brent方法和双曲线外推法在括号区间中找到函数的根。
- en: A variation on the classic Brent routine to find a root of the function f between
    the arguments a and b that uses hyperbolic extrapolation instead of inverse quadratic
    extrapolation. Bus & Dekker (1975) guarantee convergence for this method, claiming
    that the upper bound of function evaluations here is 4 or 5 times that of bisection.
    f(a) and f(b) cannot have the same signs. Generally, on a par with the brent routine,
    but not as heavily tested. It is a safe version of the secant method that uses
    hyperbolic extrapolation. The version here is by Chuck Harris, and implements
    Algorithm M of [[BusAndDekker1975]](#r044260d935ec-busanddekker1975), where further
    details (convergence properties, additional remarks and such) can be found
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一种变体的经典Brent例程，用于在参数a和b之间找到函数f的根，其使用双曲线外推法而不是逆二次外推法。Bus＆Dekker（1975）保证了该方法的收敛性，并声称此处的函数评估上限是二分法的4或5倍。f(a)和f(b)不能具有相同的符号。通常与brent例程相当，但没有经过如此深入的测试。这是一种使用双曲线外推法的安全版本的弦截法。此处的版本由Chuck
    Harris编写，并实现了[[BusAndDekker1975]](#r044260d935ec-busanddekker1975)的算法M，其中可以找到进一步的细节（收敛特性、额外的备注等）。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**f**function'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**f**函数'
- en: Python function returning a number. f must be continuous, and f(a) and f(b)
    must have opposite signs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个数字的Python函数。f必须连续，并且f(a)和f(b)必须具有相反的符号。
- en: '**a**scalar'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**a**标量'
- en: One end of the bracketing interval [a,b].
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 括号区间的一端[a,b]。
- en: '**b**scalar'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**b**标量'
- en: The other end of the bracketing interval [a,b].
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 括号区间的另一端[a,b]。
- en: '**xtol**number, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**xtol**数字，可选'
- en: The computed root `x0` will satisfy `np.allclose(x, x0, atol=xtol, rtol=rtol)`,
    where `x` is the exact root. The parameter must be positive. As with [`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq
    "scipy.optimize.brentq"), for nice functions the method will often satisfy the
    above condition with `xtol/2` and `rtol/2`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的根`x0`将满足`np.allclose(x, x0, atol=xtol, rtol=rtol)`，其中`x`是精确的根。该参数必须为正数。与[`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq
    "scipy.optimize.brentq")一样，对于良好的函数，该方法通常会使用`xtol/2`和`rtol/2`满足上述条件。
- en: '**rtol**number, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol**数字，可选'
- en: The computed root `x0` will satisfy `np.allclose(x, x0, atol=xtol, rtol=rtol)`,
    where `x` is the exact root. The parameter cannot be smaller than its default
    value of `4*np.finfo(float).eps`. As with [`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq
    "scipy.optimize.brentq"), for nice functions the method will often satisfy the
    above condition with `xtol/2` and `rtol/2`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的根`x0`将满足`np.allclose(x, x0, atol=xtol, rtol=rtol)`，其中`x`是精确的根。该参数不能小于其默认值`4*np.finfo(float).eps`。与[`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq
    "scipy.optimize.brentq")一样，对于良好的函数，该方法通常会使用`xtol/2`和`rtol/2`满足上述条件。
- en: '**maxiter**int, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**maxiter**整数，可选'
- en: If convergence is not achieved in *maxiter* iterations, an error is raised.
    Must be >= 0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在*maxiter*次迭代中未达到收敛，则会引发错误。必须 >= 0。
- en: '**args**tuple, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**元组，可选'
- en: Containing extra arguments for the function *f*. *f* is called by `apply(f,
    (x)+args)`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 包含函数*f*的额外参数。通过`apply(f, (x)+args)`调用*f*。
- en: '**full_output**bool, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**full_output**布尔值，可选'
- en: If *full_output* is False, the root is returned. If *full_output* is True, the
    return value is `(x, r)`, where *x* is the root, and *r* is a [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*full_output*为False，则返回根。如果*full_output*为True，则返回值为`(x, r)`，其中*x*是根，*r*是一个[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")对象。
- en: '**disp**bool, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**disp**布尔值，可选'
- en: If True, raise RuntimeError if the algorithm didn’t converge. Otherwise, the
    convergence status is recorded in any [`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") return object.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则如果算法未收敛，则引发RuntimeError。否则，收敛状态记录在任何[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults")返回对象中。
- en: 'Returns:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**root**float'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**root**浮点数'
- en: Root of *f* between *a* and *b*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*f*在*a*和*b*之间的根。'
- en: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") (present if `full_output = True`)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**r**[`RootResults`](scipy.optimize.RootResults.html#scipy.optimize.RootResults
    "scipy.optimize.RootResults") (present if `full_output = True`)'
- en: Object containing information about the convergence. In particular, `r.converged`
    is True if the routine converged.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 包含收敛信息的对象。特别地，如果程序收敛，则 `r.converged` 为 True。
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`fmin`](scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin"),
    [`fmin_powell`](scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell "scipy.optimize.fmin_powell"),
    [`fmin_cg`](scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg "scipy.optimize.fmin_cg"),
    [`fmin_bfgs`](scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs "scipy.optimize.fmin_bfgs"),
    [`fmin_ncg`](scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg "scipy.optimize.fmin_ncg")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fmin`](scipy.optimize.fmin.html#scipy.optimize.fmin "scipy.optimize.fmin"),
    [`fmin_powell`](scipy.optimize.fmin_powell.html#scipy.optimize.fmin_powell "scipy.optimize.fmin_powell"),
    [`fmin_cg`](scipy.optimize.fmin_cg.html#scipy.optimize.fmin_cg "scipy.optimize.fmin_cg"),
    [`fmin_bfgs`](scipy.optimize.fmin_bfgs.html#scipy.optimize.fmin_bfgs "scipy.optimize.fmin_bfgs"),
    [`fmin_ncg`](scipy.optimize.fmin_ncg.html#scipy.optimize.fmin_ncg "scipy.optimize.fmin_ncg")'
- en: multivariate local optimizers
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 多元局部优化器
- en: '[`leastsq`](scipy.optimize.leastsq.html#scipy.optimize.leastsq "scipy.optimize.leastsq")'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[`leastsq`](scipy.optimize.leastsq.html#scipy.optimize.leastsq "scipy.optimize.leastsq")'
- en: nonlinear least squares minimizer
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 非线性最小二乘优化器
- en: '[`fmin_l_bfgs_b`](scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b"), [`fmin_tnc`](scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc"), [`fmin_cobyla`](scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fmin_l_bfgs_b`](scipy.optimize.fmin_l_bfgs_b.html#scipy.optimize.fmin_l_bfgs_b
    "scipy.optimize.fmin_l_bfgs_b"), [`fmin_tnc`](scipy.optimize.fmin_tnc.html#scipy.optimize.fmin_tnc
    "scipy.optimize.fmin_tnc"), [`fmin_cobyla`](scipy.optimize.fmin_cobyla.html#scipy.optimize.fmin_cobyla
    "scipy.optimize.fmin_cobyla")'
- en: constrained multivariate optimizers
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有约束的多元优化器
- en: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping"), [`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution"), [`brute`](scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[`basinhopping`](scipy.optimize.basinhopping.html#scipy.optimize.basinhopping
    "scipy.optimize.basinhopping"), [`differential_evolution`](scipy.optimize.differential_evolution.html#scipy.optimize.differential_evolution
    "scipy.optimize.differential_evolution"), [`brute`](scipy.optimize.brute.html#scipy.optimize.brute
    "scipy.optimize.brute")'
- en: global optimizers
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 全局优化器
- en: '[`fminbound`](scipy.optimize.fminbound.html#scipy.optimize.fminbound "scipy.optimize.fminbound"),
    [`brent`](scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent"),
    [`golden`](scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden"),
    [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket "scipy.optimize.bracket")'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fminbound`](scipy.optimize.fminbound.html#scipy.optimize.fminbound "scipy.optimize.fminbound"),
    [`brent`](scipy.optimize.brent.html#scipy.optimize.brent "scipy.optimize.brent"),
    [`golden`](scipy.optimize.golden.html#scipy.optimize.golden "scipy.optimize.golden"),
    [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket "scipy.optimize.bracket")'
- en: local scalar minimizers
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 局部标量最小化器
- en: '[`fsolve`](scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fsolve`](scipy.optimize.fsolve.html#scipy.optimize.fsolve "scipy.optimize.fsolve")'
- en: N-D root-finding
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: N元根查找
- en: '[`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq "scipy.optimize.brentq"),
    [`brenth`](#scipy.optimize.brenth "scipy.optimize.brenth"), [`ridder`](scipy.optimize.ridder.html#scipy.optimize.ridder
    "scipy.optimize.ridder"), [`bisect`](scipy.optimize.bisect.html#scipy.optimize.bisect
    "scipy.optimize.bisect"), [`newton`](scipy.optimize.newton.html#scipy.optimize.newton
    "scipy.optimize.newton")'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[`brentq`](scipy.optimize.brentq.html#scipy.optimize.brentq "scipy.optimize.brentq"),
    [`brenth`](#scipy.optimize.brenth "scipy.optimize.brenth"), [`ridder`](scipy.optimize.ridder.html#scipy.optimize.ridder
    "scipy.optimize.ridder"), [`bisect`](scipy.optimize.bisect.html#scipy.optimize.bisect
    "scipy.optimize.bisect"), [`newton`](scipy.optimize.newton.html#scipy.optimize.newton
    "scipy.optimize.newton")'
- en: 1-D root-finding
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一维根查找
- en: '[`fixed_point`](scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fixed_point`](scipy.optimize.fixed_point.html#scipy.optimize.fixed_point
    "scipy.optimize.fixed_point")'
- en: scalar fixed-point finder
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 标量固定点查找器
- en: References
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[BusAndDekker1975](#id1)]'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[[BusAndDekker1975](#id1)]'
- en: 'Bus, J. C. P., Dekker, T. J., “Two Efficient Algorithms with Guaranteed Convergence
    for Finding a Zero of a Function”, ACM Transactions on Mathematical Software,
    Vol. 1, Issue 4, Dec. 1975, pp. 330-345\. Section 3: “Algorithm M”. [DOI:10.1145/355656.355659](https://doi.org/10.1145/355656.355659)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'Bus, J. C. P., Dekker, T. J., “Two Efficient Algorithms with Guaranteed Convergence
    for Finding a Zero of a Function”, ACM Transactions on Mathematical Software,
    Vol. 1, Issue 4, Dec. 1975, pp. 330-345\. Section 3: “Algorithm M”. [DOI:10.1145/355656.355659](https://doi.org/10.1145/355656.355659)'
- en: Examples
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
