- en: Contributing to the documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/development/contributing_documentation.html](https://pandas.pydata.org/docs/development/contributing_documentation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Contributing to the documentation benefits everyone who uses pandas. We encourage
    you to help us improve the documentation, and you don’t have to be an expert on
    pandas to do so! In fact, there are sections of the docs that are worse off after
    being written by experts. If something in the docs doesn’t make sense to you,
    updating the relevant section after you figure it out is a great way to ensure
    it will help the next person. Please visit the [issues page](https://github.com/pandas-dev/pandas/issues?page=1&q=is%3Aopen+sort%3Aupdated-desc+label%3ADocs)
    for a full list of issues that are currently open regarding the Pandas documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[About the pandas documentation](#about-the-pandas-documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Updating a pandas docstring](#updating-a-pandas-docstring)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to build the pandas documentation](#how-to-build-the-pandas-documentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Requirements](#requirements)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building the documentation](#building-the-documentation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building main branch documentation](#building-main-branch-documentation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Previewing changes](#previewing-changes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About the pandas documentation](#id1)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation is written in **reStructuredText**, which is almost like writing
    in plain English, and built using [Sphinx](https://www.sphinx-doc.org/en/master/).
    The Sphinx Documentation has an excellent [introduction to reST](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html).
    Review the Sphinx docs to perform more complex changes to the documentation as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other important things to know about the docs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The pandas documentation consists of two parts: the docstrings in the code
    itself and the docs in this folder `doc/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docstrings provide a clear explanation of the usage of the individual functions,
    while the documentation in this folder consists of tutorial-like overviews per
    topic together with some other information (what’s new, installation, etc).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The docstrings follow a pandas convention, based on the **Numpy Docstring Standard**.
    Follow the [pandas docstring guide](contributing_docstring.html#docstring) for
    detailed instructions on how to write a correct docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas docstring guide](contributing_docstring.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About docstrings and standards](contributing_docstring.html#about-docstrings-and-standards)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing a docstring](contributing_docstring.html#writing-a-docstring)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sharing docstrings](contributing_docstring.html#sharing-docstrings)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tutorials make heavy use of the [IPython directive](https://matplotlib.org/sampledoc/ipython_directive.html)
    sphinx extension. This directive lets you put code in the documentation which
    will be run during the doc build. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'will be rendered as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Almost all code examples in the docs are run (and the output saved) during the
    doc build. This approach means that code examples will always be up to date, but
    it does make the doc building a bit more complex.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our API documentation files in `doc/source/reference` house the auto-generated
    documentation from the docstrings. For classes, there are a few subtleties around
    controlling which methods and attributes have pages auto-generated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have two autosummary templates for classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`_templates/autosummary/class.rst`. Use this when you want to automatically
    generate a page for every public method and attribute on the class. The `Attributes`
    and `Methods` sections will be automatically added to the class’ rendered documentation
    by numpydoc. See `DataFrame` for an example.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_templates/autosummary/class_without_autosummary`. Use this when you want
    to pick a subset of methods / attributes to auto-generate pages for. When using
    this template, you should include an `Attributes` and `Methods` section in the
    class docstring. See `CategoricalIndex` for an example.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Every method should be included in a `toctree` in one of the documentation files
    in `doc/source/reference`, else Sphinx will emit a warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The utility script `scripts/validate_docstrings.py` can be used to get a csv
    summary of the API documentation. And also validate common errors in the docstring
    of a specific class, function or method. The summary also compares the list of
    methods documented in the files in `doc/source/reference` (which is used to generate
    the [API Reference](https://pandas.pydata.org/pandas-docs/stable/api.html) page)
    and the actual public methods. This will identify methods documented in `doc/source/reference`
    that are not actually class methods, and existing methods that are not documented
    in `doc/source/reference`.
  prefs: []
  type: TYPE_NORMAL
- en: '[Updating a pandas docstring](#id2)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When improving a single function or method’s docstring, it is not necessarily
    needed to build the full documentation (see next section). However, there is a
    script that checks a docstring (for example for the `DataFrame.mean` method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This script will indicate some formatting errors if present, and will also run
    and test the examples included in the docstring. Check the [pandas docstring guide](contributing_docstring.html#docstring)
    for a detailed guide on how to format the docstring.
  prefs: []
  type: TYPE_NORMAL
- en: The examples in the docstring (‘doctests’) must be valid Python code, that in
    a deterministic way returns the presented output, and that can be copied and run
    by users. This can be checked with the script above, and is also tested on Travis.
    A failing doctest will be a blocker for merging a PR. Check the [examples](contributing_docstring.html#docstring-examples)
    section in the docstring guide for some tips and tricks to get the doctests passing.
  prefs: []
  type: TYPE_NORMAL
- en: When doing a PR with a docstring update, it is good to post the output of the
    validation script in a comment on github.
  prefs: []
  type: TYPE_NORMAL
- en: '## [How to build the pandas documentation](#id3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Requirements](#id4)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you need to have a development environment to be able to build pandas
    (see the docs on [creating a development environment](contributing_environment.html#contributing-environment)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Building the documentation](#id5)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So how do you build the docs? Navigate to your local `doc/` directory in the
    console and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then you can find the HTML output in the folder `doc/build/html/`.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you build the docs, it will take quite a while because it has
    to run all the code examples and build all the generated docstring pages. In subsequent
    evocations, sphinx will try to only build the pages that have been modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to do a full clean build, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can tell `make.py` to compile only a single section of the docs, greatly
    reducing the turn-around time for checking your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For comparison, a full documentation build may take 15 minutes, but a single
    section may take 15 seconds. Subsequent builds, which only process portions you
    have changed, will be faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build will automatically use the number of cores available on your machine
    to speed up the documentation build. You can override this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open the following file in a web browser to see the full documentation you just
    built `doc/build/html/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: And you’ll have the satisfaction of seeing your new and improved documentation!
  prefs: []
  type: TYPE_NORMAL
- en: '### [Building main branch documentation](#id6)'
  prefs: []
  type: TYPE_NORMAL
- en: When pull requests are merged into the pandas `main` branch, the main parts
    of the documentation are also built by Travis-CI. These docs are then hosted [here](https://pandas.pydata.org/docs/dev/),
    see also the [Continuous Integration](contributing_codebase.html#contributing-ci)
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Previewing changes](#id7)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once, the pull request is submitted, GitHub Actions will automatically build
    the documentation. To view the built site:'
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the `CI / Web and docs` check to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Details` next to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Artifacts` drop-down, click `docs` or `website` to download the site
    as a ZIP file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[About the pandas documentation](#id1)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation is written in **reStructuredText**, which is almost like writing
    in plain English, and built using [Sphinx](https://www.sphinx-doc.org/en/master/).
    The Sphinx Documentation has an excellent [introduction to reST](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html).
    Review the Sphinx docs to perform more complex changes to the documentation as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other important things to know about the docs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The pandas documentation consists of two parts: the docstrings in the code
    itself and the docs in this folder `doc/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docstrings provide a clear explanation of the usage of the individual functions,
    while the documentation in this folder consists of tutorial-like overviews per
    topic together with some other information (what’s new, installation, etc).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The docstrings follow a pandas convention, based on the **Numpy Docstring Standard**.
    Follow the [pandas docstring guide](contributing_docstring.html#docstring) for
    detailed instructions on how to write a correct docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas docstring guide](contributing_docstring.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About docstrings and standards](contributing_docstring.html#about-docstrings-and-standards)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing a docstring](contributing_docstring.html#writing-a-docstring)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sharing docstrings](contributing_docstring.html#sharing-docstrings)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The tutorials make heavy use of the [IPython directive](https://matplotlib.org/sampledoc/ipython_directive.html)
    sphinx extension. This directive lets you put code in the documentation which
    will be run during the doc build. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'will be rendered as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Almost all code examples in the docs are run (and the output saved) during the
    doc build. This approach means that code examples will always be up to date, but
    it does make the doc building a bit more complex.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our API documentation files in `doc/source/reference` house the auto-generated
    documentation from the docstrings. For classes, there are a few subtleties around
    controlling which methods and attributes have pages auto-generated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have two autosummary templates for classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`_templates/autosummary/class.rst`. Use this when you want to automatically
    generate a page for every public method and attribute on the class. The `Attributes`
    and `Methods` sections will be automatically added to the class’ rendered documentation
    by numpydoc. See `DataFrame` for an example.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_templates/autosummary/class_without_autosummary`. Use this when you want
    to pick a subset of methods / attributes to auto-generate pages for. When using
    this template, you should include an `Attributes` and `Methods` section in the
    class docstring. See `CategoricalIndex` for an example.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Every method should be included in a `toctree` in one of the documentation files
    in `doc/source/reference`, else Sphinx will emit a warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The utility script `scripts/validate_docstrings.py` can be used to get a csv
    summary of the API documentation. And also validate common errors in the docstring
    of a specific class, function or method. The summary also compares the list of
    methods documented in the files in `doc/source/reference` (which is used to generate
    the [API Reference](https://pandas.pydata.org/pandas-docs/stable/api.html) page)
    and the actual public methods. This will identify methods documented in `doc/source/reference`
    that are not actually class methods, and existing methods that are not documented
    in `doc/source/reference`.
  prefs: []
  type: TYPE_NORMAL
- en: '[Updating a pandas docstring](#id2)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When improving a single function or method’s docstring, it is not necessarily
    needed to build the full documentation (see next section). However, there is a
    script that checks a docstring (for example for the `DataFrame.mean` method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This script will indicate some formatting errors if present, and will also run
    and test the examples included in the docstring. Check the [pandas docstring guide](contributing_docstring.html#docstring)
    for a detailed guide on how to format the docstring.
  prefs: []
  type: TYPE_NORMAL
- en: The examples in the docstring (‘doctests’) must be valid Python code, that in
    a deterministic way returns the presented output, and that can be copied and run
    by users. This can be checked with the script above, and is also tested on Travis.
    A failing doctest will be a blocker for merging a PR. Check the [examples](contributing_docstring.html#docstring-examples)
    section in the docstring guide for some tips and tricks to get the doctests passing.
  prefs: []
  type: TYPE_NORMAL
- en: When doing a PR with a docstring update, it is good to post the output of the
    validation script in a comment on github.
  prefs: []
  type: TYPE_NORMAL
- en: '## [How to build the pandas documentation](#id3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Requirements](#id4)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you need to have a development environment to be able to build pandas
    (see the docs on [creating a development environment](contributing_environment.html#contributing-environment)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Building the documentation](#id5)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So how do you build the docs? Navigate to your local `doc/` directory in the
    console and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Then you can find the HTML output in the folder `doc/build/html/`.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you build the docs, it will take quite a while because it has
    to run all the code examples and build all the generated docstring pages. In subsequent
    evocations, sphinx will try to only build the pages that have been modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to do a full clean build, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can tell `make.py` to compile only a single section of the docs, greatly
    reducing the turn-around time for checking your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For comparison, a full documentation build may take 15 minutes, but a single
    section may take 15 seconds. Subsequent builds, which only process portions you
    have changed, will be faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build will automatically use the number of cores available on your machine
    to speed up the documentation build. You can override this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Open the following file in a web browser to see the full documentation you just
    built `doc/build/html/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: And you’ll have the satisfaction of seeing your new and improved documentation!
  prefs: []
  type: TYPE_NORMAL
- en: '### [Building main branch documentation](#id6)'
  prefs: []
  type: TYPE_NORMAL
- en: When pull requests are merged into the pandas `main` branch, the main parts
    of the documentation are also built by Travis-CI. These docs are then hosted [here](https://pandas.pydata.org/docs/dev/),
    see also the [Continuous Integration](contributing_codebase.html#contributing-ci)
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Requirements](#id4)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you need to have a development environment to be able to build pandas
    (see the docs on [creating a development environment](contributing_environment.html#contributing-environment)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Building the documentation](#id5)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So how do you build the docs? Navigate to your local `doc/` directory in the
    console and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then you can find the HTML output in the folder `doc/build/html/`.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you build the docs, it will take quite a while because it has
    to run all the code examples and build all the generated docstring pages. In subsequent
    evocations, sphinx will try to only build the pages that have been modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to do a full clean build, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can tell `make.py` to compile only a single section of the docs, greatly
    reducing the turn-around time for checking your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For comparison, a full documentation build may take 15 minutes, but a single
    section may take 15 seconds. Subsequent builds, which only process portions you
    have changed, will be faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build will automatically use the number of cores available on your machine
    to speed up the documentation build. You can override this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Open the following file in a web browser to see the full documentation you just
    built `doc/build/html/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: And you’ll have the satisfaction of seeing your new and improved documentation!
  prefs: []
  type: TYPE_NORMAL
- en: '### [Building main branch documentation](#id6)'
  prefs: []
  type: TYPE_NORMAL
- en: When pull requests are merged into the pandas `main` branch, the main parts
    of the documentation are also built by Travis-CI. These docs are then hosted [here](https://pandas.pydata.org/docs/dev/),
    see also the [Continuous Integration](contributing_codebase.html#contributing-ci)
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '[Previewing changes](#id7)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once, the pull request is submitted, GitHub Actions will automatically build
    the documentation. To view the built site:'
  prefs: []
  type: TYPE_NORMAL
- en: Wait for the `CI / Web and docs` check to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Details` next to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Artifacts` drop-down, click `docs` or `website` to download the site
    as a ZIP file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
