- en: numpy.broadcast_arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.broadcast_arrays.html](https://numpy.org/doc/1.26/reference/generated/numpy.broadcast_arrays.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Broadcast any number of arrays against each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`*args`**array_likes'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays to broadcast.
  prefs: []
  type: TYPE_NORMAL
- en: '**subok**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, then sub-classes will be passed-through, otherwise the returned arrays
    will be forced to be a base-class array (default).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**broadcasted**list of arrays'
  prefs: []
  type: TYPE_NORMAL
- en: These arrays are views on the original arrays. They are typically not contiguous.
    Furthermore, more than one element of a broadcasted array may refer to a single
    memory location. If you need to write to the arrays, make copies first. While
    you can set the `writable` flag True, writing to a single output value may end
    up changing more than one location in the output array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.17: The output is currently marked so that if written
    to, a deprecation warning will be emitted. A future version will set the `writable`
    flag False so writing to it will raise an error.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast`](numpy.broadcast.html#numpy.broadcast "numpy.broadcast")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_to`](numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`broadcast_shapes`](numpy.broadcast_shapes.html#numpy.broadcast_shapes "numpy.broadcast_shapes")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is a useful idiom for getting contiguous copies instead of non-contiguous
    views.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
