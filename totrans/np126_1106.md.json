["```py\narr.T.copy() \n```", "```py\nnp.uint8(-1)\nnp.array([3000], dtype=np.int8) \n```", "```py\narr = np.array([1])  # with any dtype/value\narr.fill(scalar)\n# is now identical to:\narr[0] = scalar \n```", "```py\narr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\nsubarray_fields = arr.astype(object)[0]\nsubarray = subarray_fields[0]  # \"f\" field\n\nnp.may_share_memory(subarray, arr) \n```", "```py\n>>> arr = np.array([1, 2, 3], dtype=\"long\")\n>>> new_dtype = np.dtype(\"longlong\")\n>>> new = np.asarray(arr, dtype=new_dtype)\n>>> new.dtype is new_dtype\nTrue\n>>> new is arr\nFalse \n```", "```py\n>>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n>>> print(P_y)\n1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2 \n```", "```py\n>>> P = np.polynomial.Polynomial([1, -1])  # default symbol is \"x\"\n>>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n>>> P * P_z\nTraceback (most recent call last)\n ...\nValueError: Polynomial symbols differ \n```", "```py\n>>> rg = np.random.default_rng(3728973198)\n>>> rg.random() \n```", "```py\n>>> orig_bit_gen = np.random.get_bit_generator()\n>>> np.random.set_bit_generator(rg.bit_generator)\n>>> np.random.normal() \n```", "```py\n>>> np.random.set_bit_generator(orig_bit_gen) \n```", "```py\nnp.array([2e300]).astype(np.float32)  # overflow for float32\nnp.array([np.inf]).astype(np.int64) \n```", "```py\narr = np.full(100, fill_value=1000, dtype=np.float64)\narr.astype(np.int8) \n```", "```py\narr.astype(np.int64).astype(np.int8) \n```", "```py\nRuntimeWarning: invalid value encountered in cast \n```", "```py\n>>> np.arange(2, dtype=str)\nTraceback (most recent call last)\n ...\nTypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>. \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32) \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: overflow encountered in floor_divide\narray([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n dtype=int32) \n```", "```py\narr.T.copy() \n```", "```py\nnp.uint8(-1)\nnp.array([3000], dtype=np.int8) \n```", "```py\narr.T.copy() \n```", "```py\nnp.uint8(-1)\nnp.array([3000], dtype=np.int8) \n```", "```py\narr = np.array([1])  # with any dtype/value\narr.fill(scalar)\n# is now identical to:\narr[0] = scalar \n```", "```py\narr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\nsubarray_fields = arr.astype(object)[0]\nsubarray = subarray_fields[0]  # \"f\" field\n\nnp.may_share_memory(subarray, arr) \n```", "```py\n>>> arr = np.array([1, 2, 3], dtype=\"long\")\n>>> new_dtype = np.dtype(\"longlong\")\n>>> new = np.asarray(arr, dtype=new_dtype)\n>>> new.dtype is new_dtype\nTrue\n>>> new is arr\nFalse \n```", "```py\narr = np.array([1])  # with any dtype/value\narr.fill(scalar)\n# is now identical to:\narr[0] = scalar \n```", "```py\narr = np.ones(3, dtype=[(\"f\", \"i\", 3)])\nsubarray_fields = arr.astype(object)[0]\nsubarray = subarray_fields[0]  # \"f\" field\n\nnp.may_share_memory(subarray, arr) \n```", "```py\n>>> arr = np.array([1, 2, 3], dtype=\"long\")\n>>> new_dtype = np.dtype(\"longlong\")\n>>> new = np.asarray(arr, dtype=new_dtype)\n>>> new.dtype is new_dtype\nTrue\n>>> new is arr\nFalse \n```", "```py\n>>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n>>> print(P_y)\n1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2 \n```", "```py\n>>> P = np.polynomial.Polynomial([1, -1])  # default symbol is \"x\"\n>>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n>>> P * P_z\nTraceback (most recent call last)\n ...\nValueError: Polynomial symbols differ \n```", "```py\n>>> rg = np.random.default_rng(3728973198)\n>>> rg.random() \n```", "```py\n>>> orig_bit_gen = np.random.get_bit_generator()\n>>> np.random.set_bit_generator(rg.bit_generator)\n>>> np.random.normal() \n```", "```py\n>>> np.random.set_bit_generator(orig_bit_gen) \n```", "```py\n>>> P_y = np.polynomial.Polynomial([1, 0, -1], symbol=\"y\")\n>>> print(P_y)\n1.0 + 0.0\u00b7y\u00b9 - 1.0\u00b7y\u00b2 \n```", "```py\n>>> P = np.polynomial.Polynomial([1, -1])  # default symbol is \"x\"\n>>> P_z = np.polynomial.Polynomial([1, 1], symbol=\"z\")\n>>> P * P_z\nTraceback (most recent call last)\n ...\nValueError: Polynomial symbols differ \n```", "```py\n>>> rg = np.random.default_rng(3728973198)\n>>> rg.random() \n```", "```py\n>>> orig_bit_gen = np.random.get_bit_generator()\n>>> np.random.set_bit_generator(rg.bit_generator)\n>>> np.random.normal() \n```", "```py\n>>> np.random.set_bit_generator(orig_bit_gen) \n```", "```py\nnp.array([2e300]).astype(np.float32)  # overflow for float32\nnp.array([np.inf]).astype(np.int64) \n```", "```py\narr = np.full(100, fill_value=1000, dtype=np.float64)\narr.astype(np.int8) \n```", "```py\narr.astype(np.int64).astype(np.int8) \n```", "```py\nRuntimeWarning: invalid value encountered in cast \n```", "```py\n>>> np.arange(2, dtype=str)\nTraceback (most recent call last)\n ...\nTypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>. \n```", "```py\nnp.array([2e300]).astype(np.float32)  # overflow for float32\nnp.array([np.inf]).astype(np.int64) \n```", "```py\narr = np.full(100, fill_value=1000, dtype=np.float64)\narr.astype(np.int8) \n```", "```py\narr.astype(np.int64).astype(np.int8) \n```", "```py\nRuntimeWarning: invalid value encountered in cast \n```", "```py\n>>> np.arange(2, dtype=str)\nTraceback (most recent call last)\n ...\nTypeError: arange() not supported for inputs with DType <class 'numpy.dtype[str_]'>. \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32) \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: overflow encountered in floor_divide\narray([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n dtype=int32) \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: divide by zero encountered in floor_divide\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32) \n```", "```py\n>>> np.array([np.iinfo(np.int32).min]*10, dtype=np.int32) // np.int32(-1)\n<stdin>:1: RuntimeWarning: overflow encountered in floor_divide\narray([-2147483648, -2147483648, -2147483648, -2147483648, -2147483648,\n -2147483648, -2147483648, -2147483648, -2147483648, -2147483648],\n dtype=int32) \n```"]