["```py\nIn [1]: index = pd.date_range(\"1/1/2000\", periods=8)\n\nIn [2]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [3]: df = pd.DataFrame(np.random.randn(8, 3), index=index, columns=[\"A\", \"B\", \"C\"]) \n```", "```py\nIn [4]: long_series = pd.Series(np.random.randn(1000))\n\nIn [5]: long_series.head()\nOut[5]: \n0   -1.157892\n1   -1.344312\n2    0.844885\n3    1.075770\n4   -0.109050\ndtype: float64\n\nIn [6]: long_series.tail(3)\nOut[6]: \n997   -0.289388\n998   -1.020544\n999    0.589993\ndtype: float64 \n```", "```py\nIn [7]: df[:2]\nOut[7]: \n A         B         C\n2000-01-01 -0.173215  0.119209 -1.044236\n2000-01-02 -0.861849 -2.104569 -0.494929\n\nIn [8]: df.columns = [x.lower() for x in df.columns]\n\nIn [9]: df\nOut[9]: \n a         b         c\n2000-01-01 -0.173215  0.119209 -1.044236\n2000-01-02 -0.861849 -2.104569 -0.494929\n2000-01-03  1.071804  0.721555 -0.706771\n2000-01-04 -1.039575  0.271860 -0.424972\n2000-01-05  0.567020  0.276232 -1.087401\n2000-01-06 -0.673690  0.113648 -1.478427\n2000-01-07  0.524988  0.404705  0.577046\n2000-01-08 -1.715002 -1.039268 -0.370647 \n```", "```py\nIn [10]: s.array\nOut[10]: \n<NumpyExtensionArray>\n[ 0.4691122999071863, -0.2828633443286633, -1.5090585031735124,\n -1.1356323710171934,  1.2121120250208506]\nLength: 5, dtype: float64\n\nIn [11]: s.index.array\nOut[11]: \n<NumpyExtensionArray>\n['a', 'b', 'c', 'd', 'e']\nLength: 5, dtype: object \n```", "```py\nIn [12]: s.to_numpy()\nOut[12]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121])\n\nIn [13]: np.asarray(s)\nOut[13]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121]) \n```", "```py\nIn [14]: ser = pd.Series(pd.date_range(\"2000\", periods=2, tz=\"CET\"))\n\nIn [15]: ser.to_numpy(dtype=object)\nOut[15]: \narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n Timestamp('2000-01-02 00:00:00+0100', tz='CET')], dtype=object) \n```", "```py\nIn [16]: ser.to_numpy(dtype=\"datetime64[ns]\")\nOut[16]: \narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00.000000000'],\n dtype='datetime64[ns]') \n```", "```py\nIn [17]: df.to_numpy()\nOut[17]: \narray([[-0.1732,  0.1192, -1.0442],\n [-0.8618, -2.1046, -0.4949],\n [ 1.0718,  0.7216, -0.7068],\n [-1.0396,  0.2719, -0.425 ],\n [ 0.567 ,  0.2762, -1.0874],\n [-0.6737,  0.1136, -1.4784],\n [ 0.525 ,  0.4047,  0.577 ],\n [-1.715 , -1.0393, -0.3706]]) \n```", "```py\npd.set_option(\"compute.use_bottleneck\", False)\npd.set_option(\"compute.use_numexpr\", False) \n```", "```py\nIn [18]: df = pd.DataFrame(\n ....:    {\n ....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n ....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n ....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n ....:    }\n ....: )\n ....: \n\nIn [19]: df\nOut[19]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [20]: row = df.iloc[1]\n\nIn [21]: column = df[\"two\"]\n\nIn [22]: df.sub(row, axis=\"columns\")\nOut[22]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [23]: df.sub(row, axis=1)\nOut[23]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [24]: df.sub(column, axis=\"index\")\nOut[24]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516\n\nIn [25]: df.sub(column, axis=0)\nOut[25]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516 \n```", "```py\nIn [26]: dfmi = df.copy()\n\nIn [27]: dfmi.index = pd.MultiIndex.from_tuples(\n ....:    [(1, \"a\"), (1, \"b\"), (1, \"c\"), (2, \"a\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [28]: dfmi.sub(column, axis=0, level=\"second\")\nOut[28]: \n one       two     three\nfirst second \n1     a      -0.377535  0.000000       NaN\n b      -1.569069  0.000000 -1.962513\n c      -0.783123  0.000000 -0.250933\n2     a            NaN -1.493173 -2.385688 \n```", "```py\nIn [29]: s = pd.Series(np.arange(10))\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\n3    3\n4    4\n5    5\n6    6\n7    7\n8    8\n9    9\ndtype: int64\n\nIn [31]: div, rem = divmod(s, 3)\n\nIn [32]: div\nOut[32]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    2\n7    2\n8    2\n9    3\ndtype: int64\n\nIn [33]: rem\nOut[33]: \n0    0\n1    1\n2    2\n3    0\n4    1\n5    2\n6    0\n7    1\n8    2\n9    0\ndtype: int64\n\nIn [34]: idx = pd.Index(np.arange(10))\n\nIn [35]: idx\nOut[35]: Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype='int64')\n\nIn [36]: div, rem = divmod(idx, 3)\n\nIn [37]: div\nOut[37]: Index([0, 0, 0, 1, 1, 1, 2, 2, 2, 3], dtype='int64')\n\nIn [38]: rem\nOut[38]: Index([0, 1, 2, 0, 1, 2, 0, 1, 2, 0], dtype='int64') \n```", "```py\nIn [39]: div, rem = divmod(s, [2, 2, 3, 3, 4, 4, 5, 5, 6, 6])\n\nIn [40]: div\nOut[40]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    1\n7    1\n8    1\n9    1\ndtype: int64\n\nIn [41]: rem\nOut[41]: \n0    0\n1    1\n2    2\n3    0\n4    0\n5    1\n6    1\n7    2\n8    2\n9    3\ndtype: int64 \n```", "```py\nIn [42]: df2 = df.copy()\n\nIn [43]: df2.loc[\"a\", \"three\"] = 1.0\n\nIn [44]: df\nOut[44]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [45]: df2\nOut[45]: \n one       two     three\na  1.394981  1.772517  1.000000\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [46]: df + df2\nOut[46]: \n one       two     three\na  2.789963  3.545034       NaN\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343\n\nIn [47]: df.add(df2, fill_value=0)\nOut[47]: \n one       two     three\na  2.789963  3.545034  1.000000\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343 \n```", "```py\nIn [48]: df.gt(df2)\nOut[48]: \n one    two  three\na  False  False  False\nb  False  False  False\nc  False  False  False\nd  False  False  False\n\nIn [49]: df2.ne(df)\nOut[49]: \n one    two  three\na  False  False   True\nb  False  False  False\nc  False  False  False\nd   True  False  False \n```", "```py\nIn [50]: (df > 0).all()\nOut[50]: \none      False\ntwo       True\nthree    False\ndtype: bool\n\nIn [51]: (df > 0).any()\nOut[51]: \none      True\ntwo      True\nthree    True\ndtype: bool \n```", "```py\nIn [52]: (df > 0).any().any()\nOut[52]: True \n```", "```py\nIn [53]: df.empty\nOut[53]: False\n\nIn [54]: pd.DataFrame(columns=list(\"ABC\")).empty\nOut[54]: True \n```", "```py\nIn [55]: if df:\n ....:    print(True)\n ....: \n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-55-318d08b2571a> in ?()\n----> 1 if df:\n  2     print(True)\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [56]: df and df2\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-56-b241b64bb471> in ?()\n----> 1 df and df2\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [57]: df + df == df * 2\nOut[57]: \n one   two  three\na   True  True  False\nb   True  True   True\nc   True  True   True\nd  False  True   True\n\nIn [58]: (df + df == df * 2).all()\nOut[58]: \none      False\ntwo       True\nthree    False\ndtype: bool \n```", "```py\nIn [59]: np.nan == np.nan\nOut[59]: False \n```", "```py\nIn [60]: (df + df).equals(df * 2)\nOut[60]: True \n```", "```py\nIn [61]: df1 = pd.DataFrame({\"col\": [\"foo\", 0, np.nan]})\n\nIn [62]: df2 = pd.DataFrame({\"col\": [np.nan, 0, \"foo\"]}, index=[2, 1, 0])\n\nIn [63]: df1.equals(df2)\nOut[63]: False\n\nIn [64]: df1.equals(df2.sort_index())\nOut[64]: True \n```", "```py\nIn [65]: pd.Series([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[65]: \n0     True\n1    False\n2    False\ndtype: bool\n\nIn [66]: pd.Index([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[66]: array([ True, False, False]) \n```", "```py\nIn [67]: pd.Series([\"foo\", \"bar\", \"baz\"]) == pd.Index([\"foo\", \"bar\", \"qux\"])\nOut[67]: \n0     True\n1     True\n2    False\ndtype: bool\n\nIn [68]: pd.Series([\"foo\", \"bar\", \"baz\"]) == np.array([\"foo\", \"bar\", \"qux\"])\nOut[68]: \n0     True\n1     True\n2    False\ndtype: bool \n```", "```py\nIn [69]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[69], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects\n\nIn [70]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[70], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects \n```", "```py\nIn [71]: df1 = pd.DataFrame(\n ....:    {\"A\": [1.0, np.nan, 3.0, 5.0, np.nan], \"B\": [np.nan, 2.0, 3.0, np.nan, 6.0]}\n ....: )\n ....: \n\nIn [72]: df2 = pd.DataFrame(\n ....:    {\n ....:        \"A\": [5.0, 2.0, 4.0, np.nan, 3.0, 7.0],\n ....:        \"B\": [np.nan, np.nan, 3.0, 4.0, 6.0, 8.0],\n ....:    }\n ....: )\n ....: \n\nIn [73]: df1\nOut[73]: \n A    B\n0  1.0  NaN\n1  NaN  2.0\n2  3.0  3.0\n3  5.0  NaN\n4  NaN  6.0\n\nIn [74]: df2\nOut[74]: \n A    B\n0  5.0  NaN\n1  2.0  NaN\n2  4.0  3.0\n3  NaN  4.0\n4  3.0  6.0\n5  7.0  8.0\n\nIn [75]: df1.combine_first(df2)\nOut[75]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [76]: def combiner(x, y):\n ....:    return np.where(pd.isna(x), y, x)\n ....: \n\nIn [77]: df1.combine(df2, combiner)\nOut[77]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [78]: df\nOut[78]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [79]: df.mean(0)\nOut[79]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [80]: df.mean(1)\nOut[80]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64 \n```", "```py\nIn [81]: df.sum(0, skipna=False)\nOut[81]: \none           NaN\ntwo      5.442353\nthree         NaN\ndtype: float64\n\nIn [82]: df.sum(axis=1, skipna=True)\nOut[82]: \na    3.167498\nb    2.204786\nc    3.401050\nd   -0.333828\ndtype: float64 \n```", "```py\nIn [83]: ts_stand = (df - df.mean()) / df.std()\n\nIn [84]: ts_stand.std()\nOut[84]: \none      1.0\ntwo      1.0\nthree    1.0\ndtype: float64\n\nIn [85]: xs_stand = df.sub(df.mean(1), axis=0).div(df.std(1), axis=0)\n\nIn [86]: xs_stand.std(1)\nOut[86]: \na    1.0\nb    1.0\nc    1.0\nd    1.0\ndtype: float64 \n```", "```py\nIn [87]: df.cumsum()\nOut[87]: \n one       two     three\na  1.394981  1.772517       NaN\nb  1.738035  3.684640 -0.050390\nc  2.433281  5.163008  1.177045\nd       NaN  5.442353  0.563873 \n```", "```py\nIn [88]: np.mean(df[\"one\"])\nOut[88]: 0.8110935116651192\n\nIn [89]: np.mean(df[\"one\"].to_numpy())\nOut[89]: nan \n```", "```py\nIn [90]: series = pd.Series(np.random.randn(500))\n\nIn [91]: series[20:500] = np.nan\n\nIn [92]: series[10:20] = 5\n\nIn [93]: series.nunique()\nOut[93]: 11 \n```", "```py\nIn [94]: series = pd.Series(np.random.randn(1000))\n\nIn [95]: series[::2] = np.nan\n\nIn [96]: series.describe()\nOut[96]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\nmax        3.160915\ndtype: float64\n\nIn [97]: frame = pd.DataFrame(np.random.randn(1000, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [98]: frame.iloc[::2] = np.nan\n\nIn [99]: frame.describe()\nOut[99]: \n a           b           c           d           e\ncount  500.000000  500.000000  500.000000  500.000000  500.000000\nmean     0.033387    0.030045   -0.043719   -0.051686    0.005979\nstd      1.017152    0.978743    1.025270    1.015988    1.006695\nmin     -3.000951   -2.637901   -3.303099   -3.159200   -3.188821\n25%     -0.647623   -0.576449   -0.712369   -0.691338   -0.691115\n50%      0.047578   -0.021499   -0.023888   -0.032652   -0.025363\n75%      0.729907    0.775880    0.618896    0.670047    0.649748\nmax      2.740139    2.752332    3.004229    2.728702    3.240991 \n```", "```py\nIn [100]: series.describe(percentiles=[0.05, 0.25, 0.75, 0.95])\nOut[100]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n5%        -1.645423\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\n95%        1.711409\nmax        3.160915\ndtype: float64 \n```", "```py\nIn [101]: s = pd.Series([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", np.nan, \"c\", \"d\", \"a\"])\n\nIn [102]: s.describe()\nOut[102]: \ncount     9\nunique    4\ntop       a\nfreq      5\ndtype: object \n```", "```py\nIn [103]: frame = pd.DataFrame({\"a\": [\"Yes\", \"Yes\", \"No\", \"No\"], \"b\": range(4)})\n\nIn [104]: frame.describe()\nOut[104]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000 \n```", "```py\nIn [105]: frame.describe(include=[\"object\"])\nOut[105]: \n a\ncount     4\nunique    2\ntop     Yes\nfreq      2\n\nIn [106]: frame.describe(include=[\"number\"])\nOut[106]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000\n\nIn [107]: frame.describe(include=\"all\")\nOut[107]: \n a         b\ncount     4  4.000000\nunique    2       NaN\ntop     Yes       NaN\nfreq      2       NaN\nmean    NaN  1.500000\nstd     NaN  1.290994\nmin     NaN  0.000000\n25%     NaN  0.750000\n50%     NaN  1.500000\n75%     NaN  2.250000\nmax     NaN  3.000000 \n```", "```py\nIn [108]: s1 = pd.Series(np.random.randn(5))\n\nIn [109]: s1\nOut[109]: \n0    1.118076\n1   -0.352051\n2   -1.242883\n3   -1.277155\n4   -0.641184\ndtype: float64\n\nIn [110]: s1.idxmin(), s1.idxmax()\nOut[110]: (3, 0)\n\nIn [111]: df1 = pd.DataFrame(np.random.randn(5, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [112]: df1\nOut[112]: \n A         B         C\n0 -0.327863 -0.946180 -0.137570\n1 -0.186235 -0.257213 -0.486567\n2 -0.507027 -0.871259 -0.111110\n3  2.000339 -2.430505  0.089759\n4 -0.321434 -0.033695  0.096271\n\nIn [113]: df1.idxmin(axis=0)\nOut[113]: \nA    2\nB    3\nC    1\ndtype: int64\n\nIn [114]: df1.idxmax(axis=1)\nOut[114]: \n0    C\n1    A\n2    C\n3    A\n4    C\ndtype: object \n```", "```py\nIn [115]: df3 = pd.DataFrame([2, 1, 1, 3, np.nan], columns=[\"A\"], index=list(\"edcba\"))\n\nIn [116]: df3\nOut[116]: \n A\ne  2.0\nd  1.0\nc  1.0\nb  3.0\na  NaN\n\nIn [117]: df3[\"A\"].idxmin()\nOut[117]: 'd' \n```", "```py\nIn [118]: data = np.random.randint(0, 7, size=50)\n\nIn [119]: data\nOut[119]: \narray([6, 6, 2, 3, 5, 3, 2, 5, 4, 5, 4, 3, 4, 5, 0, 2, 0, 4, 2, 0, 3, 2,\n 2, 5, 6, 5, 3, 4, 6, 4, 3, 5, 6, 4, 3, 6, 2, 6, 6, 2, 3, 4, 2, 1,\n 6, 2, 6, 1, 5, 4])\n\nIn [120]: s = pd.Series(data)\n\nIn [121]: s.value_counts()\nOut[121]: \n6    10\n2    10\n4     9\n3     8\n5     8\n0     3\n1     2\nName: count, dtype: int64 \n```", "```py\nIn [122]: data = {\"a\": [1, 2, 3, 4], \"b\": [\"x\", \"x\", \"y\", \"y\"]}\n\nIn [123]: frame = pd.DataFrame(data)\n\nIn [124]: frame.value_counts()\nOut[124]: \na  b\n1  x    1\n2  x    1\n3  y    1\n4  y    1\nName: count, dtype: int64 \n```", "```py\nIn [125]: s5 = pd.Series([1, 1, 3, 3, 3, 5, 5, 7, 7, 7])\n\nIn [126]: s5.mode()\nOut[126]: \n0    3\n1    7\ndtype: int64\n\nIn [127]: df5 = pd.DataFrame(\n .....:    {\n .....:        \"A\": np.random.randint(0, 7, size=50),\n .....:        \"B\": np.random.randint(-10, 15, size=50),\n .....:    }\n .....: )\n .....: \n\nIn [128]: df5.mode()\nOut[128]: \n A   B\n0  1.0  -9\n1  NaN  10\n2  NaN  13 \n```", "```py\nIn [129]: arr = np.random.randn(20)\n\nIn [130]: factor = pd.cut(arr, 4)\n\nIn [131]: factor\nOut[131]: \n[(-0.251, 0.464], (-0.968, -0.251], (0.464, 1.179], (-0.251, 0.464], (-0.968, -0.251], ..., (-0.251, 0.464], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251]]\nLength: 20\nCategories (4, interval[float64, right]): [(-0.968, -0.251] < (-0.251, 0.464] < (0.464, 1.179] <\n (1.179, 1.893]]\n\nIn [132]: factor = pd.cut(arr, [-5, -1, 0, 1, 5])\n\nIn [133]: factor\nOut[133]: \n[(0, 1], (-1, 0], (0, 1], (0, 1], (-1, 0], ..., (-1, 0], (-1, 0], (-1, 0], (-1, 0], (-1, 0]]\nLength: 20\nCategories (4, interval[int64, right]): [(-5, -1] < (-1, 0] < (0, 1] < (1, 5]] \n```", "```py\nIn [134]: arr = np.random.randn(30)\n\nIn [135]: factor = pd.qcut(arr, [0, 0.25, 0.5, 0.75, 1])\n\nIn [136]: factor\nOut[136]: \n[(0.569, 1.184], (-2.278, -0.301], (-2.278, -0.301], (0.569, 1.184], (0.569, 1.184], ..., (-0.301, 0.569], (1.184, 2.346], (1.184, 2.346], (-0.301, 0.569], (-2.278, -0.301]]\nLength: 30\nCategories (4, interval[float64, right]): [(-2.278, -0.301] < (-0.301, 0.569] < (0.569, 1.184] <\n (1.184, 2.346]] \n```", "```py\nIn [137]: arr = np.random.randn(20)\n\nIn [138]: factor = pd.cut(arr, [-np.inf, 0, np.inf])\n\nIn [139]: factor\nOut[139]: \n[(-inf, 0.0], (0.0, inf], (0.0, inf], (-inf, 0.0], (-inf, 0.0], ..., (-inf, 0.0], (-inf, 0.0], (-inf, 0.0], (0.0, inf], (0.0, inf]]\nLength: 20\nCategories (2, interval[float64, right]): [(-inf, 0.0] < (0.0, inf]] \n```", "```py\nIn [140]: def extract_city_name(df):\n .....: \"\"\"\n .....:    Chicago, IL -> Chicago for city_name column\n .....:    \"\"\"\n .....:    df[\"city_name\"] = df[\"city_and_code\"].str.split(\",\").str.get(0)\n .....:    return df\n .....: \n\nIn [141]: def add_country_name(df, country_name=None):\n .....: \"\"\"\n .....:    Chicago -> Chicago-US for city_name column\n .....:    \"\"\"\n .....:    col = \"city_name\"\n .....:    df[\"city_and_country\"] = df[col] + country_name\n .....:    return df\n .....: \n\nIn [142]: df_p = pd.DataFrame({\"city_and_code\": [\"Chicago, IL\"]}) \n```", "```py\nIn [143]: add_country_name(extract_city_name(df_p), country_name=\"US\")\nOut[143]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [144]: df_p.pipe(extract_city_name).pipe(add_country_name, country_name=\"US\")\nOut[144]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [147]: import statsmodels.formula.api as sm\n\nIn [148]: bb = pd.read_csv(\"data/baseball.csv\", index_col=\"id\")\n\nIn [149]: (\n .....:    bb.query(\"h > 0\")\n .....:    .assign(ln_h=lambda df: np.log(df.h))\n .....:    .pipe((sm.ols, \"data\"), \"hr ~ ln_h + year + g + C(lg)\")\n .....:    .fit()\n .....:    .summary()\n .....: )\n .....:\nOut[149]:\n<class 'statsmodels.iolib.summary.Summary'>\n\"\"\"\n OLS Regression Results\n==============================================================================\nDep. Variable:                     hr   R-squared:                       0.685\nModel:                            OLS   Adj. R-squared:                  0.665\nMethod:                 Least Squares   F-statistic:                     34.28\nDate:                Tue, 22 Nov 2022   Prob (F-statistic):           3.48e-15\nTime:                        05:34:17   Log-Likelihood:                -205.92\nNo. Observations:                  68   AIC:                             421.8\nDf Residuals:                      63   BIC:                             432.9\nDf Model:                           4\nCovariance Type:            nonrobust\n===============================================================================\n coef    std err          t      P>|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nIntercept   -8484.7720   4664.146     -1.819      0.074   -1.78e+04     835.780\nC(lg)[T.NL]    -2.2736      1.325     -1.716      0.091      -4.922       0.375\nln_h           -1.3542      0.875     -1.547      0.127      -3.103       0.395\nyear            4.2277      2.324      1.819      0.074      -0.417       8.872\ng               0.1841      0.029      6.258      0.000       0.125       0.243\n==============================================================================\nOmnibus:                       10.875   Durbin-Watson:                   1.999\nProb(Omnibus):                  0.004   Jarque-Bera (JB):               17.298\nSkew:                           0.537   Prob(JB):                     0.000175\nKurtosis:                       5.225   Cond. No.                     1.49e+07\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.49e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\"\"\" \n```", "```py\nIn [145]: df.apply(lambda x: np.mean(x))\nOut[145]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [146]: df.apply(lambda x: np.mean(x), axis=1)\nOut[146]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64\n\nIn [147]: df.apply(lambda x: x.max() - x.min())\nOut[147]: \none      1.051928\ntwo      1.632779\nthree    1.840607\ndtype: float64\n\nIn [148]: df.apply(np.cumsum)\nOut[148]: \n one       two     three\na  1.394981  1.772517       NaN\nb  1.738035  3.684640 -0.050390\nc  2.433281  5.163008  1.177045\nd       NaN  5.442353  0.563873\n\nIn [149]: df.apply(np.exp)\nOut[149]: \n one       two     three\na  4.034899  5.885648       NaN\nb  1.409244  6.767440  0.950858\nc  2.004201  4.385785  3.412466\nd       NaN  1.322262  0.541630 \n```", "```py\nIn [150]: df.apply(\"mean\")\nOut[150]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [151]: df.apply(\"mean\", axis=1)\nOut[151]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64 \n```", "```py\nIn [152]: tsdf = pd.DataFrame(\n .....:    np.random.randn(1000, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=1000),\n .....: )\n .....: \n\nIn [153]: tsdf.apply(lambda x: x.idxmax())\nOut[153]: \nA   2000-08-06\nB   2001-01-18\nC   2001-07-18\ndtype: datetime64[ns] \n```", "```py\nIn [154]: def subtract_and_divide(x, sub, divide=1):\n .....:    return (x - sub) / divide\n .....: \n\nIn [155]: df_udf = pd.DataFrame(np.ones((2, 2)))\n\nIn [156]: df_udf.apply(subtract_and_divide, args=(5,), divide=3)\nOut[156]: \n 0         1\n0 -1.333333 -1.333333\n1 -1.333333 -1.333333 \n```", "```py\nIn [157]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [158]: tsdf.iloc[3:7] = np.nan\n\nIn [159]: tsdf\nOut[159]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950\n\nIn [160]: tsdf.apply(pd.Series.interpolate)\nOut[160]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04 -1.098598 -0.889659  0.092225\n2000-01-05 -0.987349 -0.622526  0.321243\n2000-01-06 -0.876100 -0.355392  0.550262\n2000-01-07 -0.764851 -0.088259  0.779280\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950 \n```", "```py\nIn [161]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [162]: tsdf.iloc[3:7] = np.nan\n\nIn [163]: tsdf\nOut[163]: \n A         B         C\n2000-01-01  1.257606  1.004194  0.167574\n2000-01-02 -0.749892  0.288112 -0.757304\n2000-01-03 -0.207550 -0.298599  0.116018\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.814347 -0.257623  0.869226\n2000-01-09 -0.250663 -1.206601  0.896839\n2000-01-10  2.169758 -1.333363  0.283157 \n```", "```py\nIn [164]: tsdf.agg(lambda x: np.sum(x))\nOut[164]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\nIn [165]: tsdf.agg(\"sum\")\nOut[165]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\n# these are equivalent to a ``.sum()`` because we are aggregating\n# on a single function\nIn [166]: tsdf.sum()\nOut[166]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64 \n```", "```py\nIn [167]: tsdf[\"A\"].agg(\"sum\")\nOut[167]: 3.033606102414146 \n```", "```py\nIn [168]: tsdf.agg([\"sum\"])\nOut[168]: \n A         B        C\nsum  3.033606 -1.803879  1.57551 \n```", "```py\nIn [169]: tsdf.agg([\"sum\", \"mean\"])\nOut[169]: \n A         B         C\nsum   3.033606 -1.803879  1.575510\nmean  0.505601 -0.300647  0.262585 \n```", "```py\nIn [170]: tsdf[\"A\"].agg([\"sum\", \"mean\"])\nOut[170]: \nsum     3.033606\nmean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [171]: tsdf[\"A\"].agg([\"sum\", lambda x: x.mean()])\nOut[171]: \nsum         3.033606\n<lambda>    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [172]: def mymean(x):\n .....:    return x.mean()\n .....: \n\nIn [173]: tsdf[\"A\"].agg([\"sum\", mymean])\nOut[173]: \nsum       3.033606\nmymean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [174]: tsdf.agg({\"A\": \"mean\", \"B\": \"sum\"})\nOut[174]: \nA    0.505601\nB   -1.803879\ndtype: float64 \n```", "```py\nIn [175]: tsdf.agg({\"A\": [\"mean\", \"min\"], \"B\": \"sum\"})\nOut[175]: \n A         B\nmean  0.505601       NaN\nmin  -0.749892       NaN\nsum        NaN -1.803879 \n```", "```py\nIn [176]: from functools import partial\n\nIn [177]: q_25 = partial(pd.Series.quantile, q=0.25)\n\nIn [178]: q_25.__name__ = \"25%\"\n\nIn [179]: q_75 = partial(pd.Series.quantile, q=0.75)\n\nIn [180]: q_75.__name__ = \"75%\"\n\nIn [181]: tsdf.agg([\"count\", \"mean\", \"std\", \"min\", q_25, \"median\", q_75, \"max\"])\nOut[181]: \n A         B         C\ncount   6.000000  6.000000  6.000000\nmean    0.505601 -0.300647  0.262585\nstd     1.103362  0.887508  0.606860\nmin    -0.749892 -1.333363 -0.757304\n25%    -0.239885 -0.979600  0.128907\nmedian  0.303398 -0.278111  0.225365\n75%     1.146791  0.151678  0.722709\nmax     2.169758  1.004194  0.896839 \n```", "```py\nIn [182]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [183]: tsdf.iloc[3:7] = np.nan\n\nIn [184]: tsdf\nOut[184]: \n A         B         C\n2000-01-01 -0.428759 -0.864890 -0.675341\n2000-01-02 -0.168731  1.338144 -1.279321\n2000-01-03 -1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -1.240447 -0.201052\n2000-01-09 -0.157795  0.791197 -1.144209\n2000-01-10 -0.030876  0.371900  0.061932 \n```", "```py\nIn [185]: tsdf.transform(np.abs)\nOut[185]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [186]: tsdf.transform(\"abs\")\nOut[186]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [187]: tsdf.transform(lambda x: x.abs())\nOut[187]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [188]: np.abs(tsdf)\nOut[188]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [189]: tsdf[\"A\"].transform(np.abs)\nOut[189]: \n2000-01-01    0.428759\n2000-01-02    0.168731\n2000-01-03    1.621034\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06         NaN\n2000-01-07         NaN\n2000-01-08    0.254374\n2000-01-09    0.157795\n2000-01-10    0.030876\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [190]: tsdf.transform([np.abs, lambda x: x + 1])\nOut[190]: \n A                   B                   C \n absolute  <lambda>  absolute  <lambda>  absolute  <lambda>\n2000-01-01  0.428759  0.571241  0.864890  0.135110  0.675341  0.324659\n2000-01-02  0.168731  0.831269  1.338144  2.338144  1.279321 -0.279321\n2000-01-03  1.621034 -0.621034  0.438107  1.438107  0.903794  1.903794\n2000-01-04       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-08  0.254374  1.254374  1.240447 -0.240447  0.201052  0.798948\n2000-01-09  0.157795  0.842205  0.791197  1.791197  1.144209 -0.144209\n2000-01-10  0.030876  0.969124  0.371900  1.371900  0.061932  1.061932 \n```", "```py\nIn [191]: tsdf[\"A\"].transform([np.abs, lambda x: x + 1])\nOut[191]: \n absolute  <lambda>\n2000-01-01  0.428759  0.571241\n2000-01-02  0.168731  0.831269\n2000-01-03  1.621034 -0.621034\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374  1.254374\n2000-01-09  0.157795  0.842205\n2000-01-10  0.030876  0.969124 \n```", "```py\nIn [192]: tsdf.transform({\"A\": np.abs, \"B\": lambda x: x + 1})\nOut[192]: \n A         B\n2000-01-01  0.428759  0.135110\n2000-01-02  0.168731  2.338144\n2000-01-03  1.621034  1.438107\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374 -0.240447\n2000-01-09  0.157795  1.791197\n2000-01-10  0.030876  1.371900 \n```", "```py\nIn [193]: tsdf.transform({\"A\": np.abs, \"B\": [lambda x: x + 1, \"sqrt\"]})\nOut[193]: \n A         B \n absolute  <lambda>      sqrt\n2000-01-01  0.428759  0.135110       NaN\n2000-01-02  0.168731  2.338144  1.156782\n2000-01-03  1.621034  1.438107  0.661897\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -0.240447       NaN\n2000-01-09  0.157795  1.791197  0.889493\n2000-01-10  0.030876  1.371900  0.609836 \n```", "```py\nIn [194]: df4 = df.copy()\n\nIn [195]: df4\nOut[195]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [196]: def f(x):\n .....:    return len(str(x))\n .....: \n\nIn [197]: df4[\"one\"].map(f)\nOut[197]: \na    18\nb    19\nc    18\nd     3\nName: one, dtype: int64\n\nIn [198]: df4.map(f)\nOut[198]: \n one  two  three\na   18   17      3\nb   19   18     20\nc   18   18     16\nd    3   19     19 \n```", "```py\nIn [199]: s = pd.Series(\n .....:    [\"six\", \"seven\", \"six\", \"seven\", \"six\"], index=[\"a\", \"b\", \"c\", \"d\", \"e\"]\n .....: )\n .....: \n\nIn [200]: t = pd.Series({\"six\": 6.0, \"seven\": 7.0})\n\nIn [201]: s\nOut[201]: \na      six\nb    seven\nc      six\nd    seven\ne      six\ndtype: object\n\nIn [202]: s.map(t)\nOut[202]: \na    6.0\nb    7.0\nc    6.0\nd    7.0\ne    6.0\ndtype: float64 \n```", "```py\nIn [203]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [204]: s\nOut[204]: \na    1.695148\nb    1.328614\nc    1.234686\nd   -0.385845\ne   -1.326508\ndtype: float64\n\nIn [205]: s.reindex([\"e\", \"b\", \"f\", \"d\"])\nOut[205]: \ne   -1.326508\nb    1.328614\nf         NaN\nd   -0.385845\ndtype: float64 \n```", "```py\nIn [206]: df\nOut[206]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [207]: df.reindex(index=[\"c\", \"f\", \"b\"], columns=[\"three\", \"two\", \"one\"])\nOut[207]: \n three       two       one\nc  1.227435  1.478369  0.695246\nf       NaN       NaN       NaN\nb -0.050390  1.912123  0.343054 \n```", "```py\nIn [208]: rs = s.reindex(df.index)\n\nIn [209]: rs\nOut[209]: \na    1.695148\nb    1.328614\nc    1.234686\nd   -0.385845\ndtype: float64\n\nIn [210]: rs.index is df.index\nOut[210]: True \n```", "```py\nIn [211]: df.reindex([\"c\", \"f\", \"b\"], axis=\"index\")\nOut[211]: \n one       two     three\nc  0.695246  1.478369  1.227435\nf       NaN       NaN       NaN\nb  0.343054  1.912123 -0.050390\n\nIn [212]: df.reindex([\"three\", \"two\", \"one\"], axis=\"columns\")\nOut[212]: \n three       two       one\na       NaN  1.772517  1.394981\nb -0.050390  1.912123  0.343054\nc  1.227435  1.478369  0.695246\nd -0.613172  0.279344       NaN \n```", "```py\nIn [213]: df2 = df.reindex([\"a\", \"b\", \"c\"], columns=[\"one\", \"two\"])\n\nIn [214]: df3 = df2 - df2.mean()\n\nIn [215]: df2\nOut[215]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369\n\nIn [216]: df3\nOut[216]: \n one       two\na  0.583888  0.051514\nb -0.468040  0.191120\nc -0.115848 -0.242634\n\nIn [217]: df.reindex_like(df2)\nOut[217]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369 \n```", "```py\nIn [218]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [219]: s1 = s[:4]\n\nIn [220]: s2 = s[1:]\n\nIn [221]: s1.align(s2)\nOut[221]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e         NaN\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e    1.114285\n dtype: float64)\n\nIn [222]: s1.align(s2, join=\"inner\")\nOut[222]: \n(b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64)\n\nIn [223]: s1.align(s2, join=\"left\")\nOut[223]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64) \n```", "```py\nIn [224]: df.align(df2, join=\"inner\")\nOut[224]: \n(        one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [225]: df.align(df2, join=\"inner\", axis=0)\nOut[225]: \n(        one       two     three\n a  1.394981  1.772517       NaN\n b  0.343054  1.912123 -0.050390\n c  0.695246  1.478369  1.227435,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [226]: df.align(df2.iloc[0], axis=1)\nOut[226]: \n(        one     three       two\n a  1.394981       NaN  1.772517\n b  0.343054 -0.050390  1.912123\n c  0.695246  1.227435  1.478369\n d       NaN -0.613172  0.279344,\n one      1.394981\n three         NaN\n two      1.772517\n Name: a, dtype: float64) \n```", "```py\nIn [227]: rng = pd.date_range(\"1/3/2000\", periods=8)\n\nIn [228]: ts = pd.Series(np.random.randn(8), index=rng)\n\nIn [229]: ts2 = ts.iloc[[0, 3, 6]]\n\nIn [230]: ts\nOut[230]: \n2000-01-03    0.183051\n2000-01-04    0.400528\n2000-01-05   -0.015083\n2000-01-06    2.395489\n2000-01-07    1.414806\n2000-01-08    0.118428\n2000-01-09    0.733639\n2000-01-10   -0.936077\nFreq: D, dtype: float64\n\nIn [231]: ts2\nOut[231]: \n2000-01-03    0.183051\n2000-01-06    2.395489\n2000-01-09    0.733639\nFreq: 3D, dtype: float64\n\nIn [232]: ts2.reindex(ts.index)\nOut[232]: \n2000-01-03    0.183051\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07         NaN\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [233]: ts2.reindex(ts.index, method=\"ffill\")\nOut[233]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64\n\nIn [234]: ts2.reindex(ts.index, method=\"bfill\")\nOut[234]: \n2000-01-03    0.183051\n2000-01-04    2.395489\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    0.733639\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [235]: ts2.reindex(ts.index, method=\"nearest\")\nOut[235]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [236]: ts2.reindex(ts.index).ffill()\nOut[236]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [237]: ts2.reindex(ts.index, method=\"ffill\", limit=1)\nOut[237]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [238]: ts2.reindex(ts.index, method=\"ffill\", tolerance=\"1 day\")\nOut[238]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [239]: df\nOut[239]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [240]: df.drop([\"a\", \"d\"], axis=0)\nOut[240]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\n\nIn [241]: df.drop([\"one\"], axis=1)\nOut[241]: \n two     three\na  1.772517       NaN\nb  1.912123 -0.050390\nc  1.478369  1.227435\nd  0.279344 -0.613172 \n```", "```py\nIn [242]: df.reindex(df.index.difference([\"a\", \"d\"]))\nOut[242]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435 \n```", "```py\nIn [243]: s\nOut[243]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\ndtype: float64\n\nIn [244]: s.rename(str.upper)\nOut[244]: \nA   -0.186646\nB   -1.692424\nC   -0.303893\nD   -1.425662\nE    1.114285\ndtype: float64 \n```", "```py\nIn [245]: df.rename(\n .....:    columns={\"one\": \"foo\", \"two\": \"bar\"},\n .....:    index={\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"},\n .....: )\n .....: \nOut[245]: \n foo       bar     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [246]: df.rename({\"one\": \"foo\", \"two\": \"bar\"}, axis=\"columns\")\nOut[246]: \n foo       bar     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [247]: df.rename({\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"}, axis=\"index\")\nOut[247]: \n one       two     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [248]: s.rename(\"scalar-name\")\nOut[248]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\nName: scalar-name, dtype: float64 \n```", "```py\nIn [249]: df = pd.DataFrame(\n .....:    {\"x\": [1, 2, 3, 4, 5, 6], \"y\": [10, 20, 30, 40, 50, 60]},\n .....:    index=pd.MultiIndex.from_product(\n .....:        [[\"a\", \"b\", \"c\"], [1, 2]], names=[\"let\", \"num\"]\n .....:    ),\n .....: )\n .....: \n\nIn [250]: df\nOut[250]: \n x   y\nlet num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [251]: df.rename_axis(index={\"let\": \"abc\"})\nOut[251]: \n x   y\nabc num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [252]: df.rename_axis(index=str.upper)\nOut[252]: \n x   y\nLET NUM \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60 \n```", "```py\nIn [253]: df = pd.DataFrame(\n .....:    {\"col1\": np.random.randn(3), \"col2\": np.random.randn(3)}, index=[\"a\", \"b\", \"c\"]\n .....: )\n .....: \n\nIn [254]: for col in df:\n .....:    print(col)\n .....: \ncol1\ncol2 \n```", "```py\nIn [255]: df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"a\", \"b\", \"c\"]})\n\nIn [256]: for index, row in df.iterrows():\n .....:    row[\"a\"] = 10\n .....: \n\nIn [257]: df\nOut[257]: \n a  b\n0  1  a\n1  2  b\n2  3  c \n```", "```py\nIn [258]: for label, ser in df.items():\n .....:    print(label)\n .....:    print(ser)\n .....: \na\n0    1\n1    2\n2    3\nName: a, dtype: int64\nb\n0    a\n1    b\n2    c\nName: b, dtype: object \n```", "```py\nIn [259]: for row_index, row in df.iterrows():\n .....:    print(row_index, row, sep=\"\\n\")\n .....: \n0\na    1\nb    a\nName: 0, dtype: object\n1\na    2\nb    b\nName: 1, dtype: object\n2\na    3\nb    c\nName: 2, dtype: object \n```", "```py\nIn [260]: df_orig = pd.DataFrame([[1, 1.5]], columns=[\"int\", \"float\"])\n\nIn [261]: df_orig.dtypes\nOut[261]: \nint        int64\nfloat    float64\ndtype: object\n\nIn [262]: row = next(df_orig.iterrows())[1]\n\nIn [263]: row\nOut[263]: \nint      1.0\nfloat    1.5\nName: 0, dtype: float64 \n```", "```py\nIn [264]: row[\"int\"].dtype\nOut[264]: dtype('float64')\n\nIn [265]: df_orig[\"int\"].dtype\nOut[265]: dtype('int64') \n```", "```py\nIn [266]: df2 = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\nIn [267]: print(df2)\n x  y\n0  1  4\n1  2  5\n2  3  6\n\nIn [268]: print(df2.T)\n 0  1  2\nx  1  2  3\ny  4  5  6\n\nIn [269]: df2_t = pd.DataFrame({idx: values for idx, values in df2.iterrows()})\n\nIn [270]: print(df2_t)\n 0  1  2\nx  1  2  3\ny  4  5  6 \n```", "```py\nIn [271]: for row in df.itertuples():\n .....:    print(row)\n .....: \nPandas(Index=0, a=1, b='a')\nPandas(Index=1, a=2, b='b')\nPandas(Index=2, a=3, b='c') \n```", "```py\n# datetime\nIn [272]: s = pd.Series(pd.date_range(\"20130101 09:10:12\", periods=4))\n\nIn [273]: s\nOut[273]: \n0   2013-01-01 09:10:12\n1   2013-01-02 09:10:12\n2   2013-01-03 09:10:12\n3   2013-01-04 09:10:12\ndtype: datetime64[ns]\n\nIn [274]: s.dt.hour\nOut[274]: \n0    9\n1    9\n2    9\n3    9\ndtype: int32\n\nIn [275]: s.dt.second\nOut[275]: \n0    12\n1    12\n2    12\n3    12\ndtype: int32\n\nIn [276]: s.dt.day\nOut[276]: \n0    1\n1    2\n2    3\n3    4\ndtype: int32 \n```", "```py\nIn [277]: s[s.dt.day == 2]\nOut[277]: \n1   2013-01-02 09:10:12\ndtype: datetime64[ns] \n```", "```py\nIn [278]: stz = s.dt.tz_localize(\"US/Eastern\")\n\nIn [279]: stz\nOut[279]: \n0   2013-01-01 09:10:12-05:00\n1   2013-01-02 09:10:12-05:00\n2   2013-01-03 09:10:12-05:00\n3   2013-01-04 09:10:12-05:00\ndtype: datetime64[ns, US/Eastern]\n\nIn [280]: stz.dt.tz\nOut[280]: <DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD> \n```", "```py\nIn [281]: s.dt.tz_localize(\"UTC\").dt.tz_convert(\"US/Eastern\")\nOut[281]: \n0   2013-01-01 04:10:12-05:00\n1   2013-01-02 04:10:12-05:00\n2   2013-01-03 04:10:12-05:00\n3   2013-01-04 04:10:12-05:00\ndtype: datetime64[ns, US/Eastern] \n```", "```py\n# DatetimeIndex\nIn [282]: s = pd.Series(pd.date_range(\"20130101\", periods=4))\n\nIn [283]: s\nOut[283]: \n0   2013-01-01\n1   2013-01-02\n2   2013-01-03\n3   2013-01-04\ndtype: datetime64[ns]\n\nIn [284]: s.dt.strftime(\"%Y/%m/%d\")\nOut[284]: \n0    2013/01/01\n1    2013/01/02\n2    2013/01/03\n3    2013/01/04\ndtype: object \n```", "```py\n# PeriodIndex\nIn [285]: s = pd.Series(pd.period_range(\"20130101\", periods=4))\n\nIn [286]: s\nOut[286]: \n0    2013-01-01\n1    2013-01-02\n2    2013-01-03\n3    2013-01-04\ndtype: period[D]\n\nIn [287]: s.dt.strftime(\"%Y/%m/%d\")\nOut[287]: \n0    2013/01/01\n1    2013/01/02\n2    2013/01/03\n3    2013/01/04\ndtype: object \n```", "```py\n# period\nIn [288]: s = pd.Series(pd.period_range(\"20130101\", periods=4, freq=\"D\"))\n\nIn [289]: s\nOut[289]: \n0    2013-01-01\n1    2013-01-02\n2    2013-01-03\n3    2013-01-04\ndtype: period[D]\n\nIn [290]: s.dt.year\nOut[290]: \n0    2013\n1    2013\n2    2013\n3    2013\ndtype: int64\n\nIn [291]: s.dt.day\nOut[291]: \n0    1\n1    2\n2    3\n3    4\ndtype: int64 \n```", "```py\n# timedelta\nIn [292]: s = pd.Series(pd.timedelta_range(\"1 day 00:00:05\", periods=4, freq=\"s\"))\n\nIn [293]: s\nOut[293]: \n0   1 days 00:00:05\n1   1 days 00:00:06\n2   1 days 00:00:07\n3   1 days 00:00:08\ndtype: timedelta64[ns]\n\nIn [294]: s.dt.days\nOut[294]: \n0    1\n1    1\n2    1\n3    1\ndtype: int64\n\nIn [295]: s.dt.seconds\nOut[295]: \n0    5\n1    6\n2    7\n3    8\ndtype: int32\n\nIn [296]: s.dt.components\nOut[296]: \n days  hours  minutes  seconds  milliseconds  microseconds  nanoseconds\n0     1      0        0        5             0             0            0\n1     1      0        0        6             0             0            0\n2     1      0        0        7             0             0            0\n3     1      0        0        8             0             0            0 \n```", "```py\n> In [297]: s = pd.Series(\n>  .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n>  .....: )\n>  .....: \n> \n> In [298]: s.str.lower()\n> Out[298]: \n> 0       a\n> 1       b\n> 2       c\n> 3    aaba\n> 4    baca\n> 5    <NA>\n> 6    caba\n> 7     dog\n> 8     cat\n> dtype: string \n> ```", "```py\nIn [299]: df = pd.DataFrame(\n .....:    {\n .....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n .....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n .....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n .....:    }\n .....: )\n .....: \n\nIn [300]: unsorted_df = df.reindex(\n .....:    index=[\"a\", \"d\", \"c\", \"b\"], columns=[\"three\", \"two\", \"one\"]\n .....: )\n .....: \n\nIn [301]: unsorted_df\nOut[301]: \n three       two       one\na       NaN -1.152244  0.562973\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\n\n# DataFrame\nIn [302]: unsorted_df.sort_index()\nOut[302]: \n three       two       one\na       NaN -1.152244  0.562973\nb -0.098217  0.009797 -1.299504\nc  1.273388 -0.167123  0.640382\nd -0.252916 -0.109597       NaN\n\nIn [303]: unsorted_df.sort_index(ascending=False)\nOut[303]: \n three       two       one\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\na       NaN -1.152244  0.562973\n\nIn [304]: unsorted_df.sort_index(axis=1)\nOut[304]: \n one     three       two\na  0.562973       NaN -1.152244\nd       NaN -0.252916 -0.109597\nc  0.640382  1.273388 -0.167123\nb -1.299504 -0.098217  0.009797\n\n# Series\nIn [305]: unsorted_df[\"three\"].sort_index()\nOut[305]: \na         NaN\nb   -0.098217\nc    1.273388\nd   -0.252916\nName: three, dtype: float64 \n```", "```py\nIn [306]: s1 = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3], \"c\": [2, 3, 4]}).set_index(\n .....:    list(\"ab\")\n .....: )\n .....: \n\nIn [307]: s1\nOut[307]: \n c\na b \nB 1  2\na 2  3\nC 3  4 \n```", "```py\nIn [308]: s1.sort_index(level=\"a\")\nOut[308]: \n c\na b \nB 1  2\nC 3  4\na 2  3\n\nIn [309]: s1.sort_index(level=\"a\", key=lambda idx: idx.str.lower())\nOut[309]: \n c\na b \na 2  3\nB 1  2\nC 3  4 \n```", "```py\nIn [310]: df1 = pd.DataFrame(\n .....:    {\"one\": [2, 1, 1, 1], \"two\": [1, 3, 2, 4], \"three\": [5, 4, 3, 2]}\n .....: )\n .....: \n\nIn [311]: df1.sort_values(by=\"two\")\nOut[311]: \n one  two  three\n0    2    1      5\n2    1    2      3\n1    1    3      4\n3    1    4      2 \n```", "```py\nIn [312]: df1[[\"one\", \"two\", \"three\"]].sort_values(by=[\"one\", \"two\"])\nOut[312]: \n one  two  three\n2    1    2      3\n1    1    3      4\n3    1    4      2\n0    2    1      5 \n```", "```py\nIn [313]: s[2] = np.nan\n\nIn [314]: s.sort_values()\nOut[314]: \n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\n2    <NA>\n5    <NA>\ndtype: string\n\nIn [315]: s.sort_values(na_position=\"first\")\nOut[315]: \n2    <NA>\n5    <NA>\n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\ndtype: string \n```", "```py\nIn [316]: s1 = pd.Series([\"B\", \"a\", \"C\"]) \n```", "```py\nIn [317]: s1.sort_values()\nOut[317]: \n0    B\n2    C\n1    a\ndtype: object\n\nIn [318]: s1.sort_values(key=lambda x: x.str.lower())\nOut[318]: \n1    a\n0    B\n2    C\ndtype: object \n```", "```py\nIn [319]: df = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3]}) \n```", "```py\nIn [320]: df.sort_values(by=\"a\")\nOut[320]: \n a  b\n0  B  1\n2  C  3\n1  a  2\n\nIn [321]: df.sort_values(by=\"a\", key=lambda col: col.str.lower())\nOut[321]: \n a  b\n1  a  2\n0  B  1\n2  C  3 \n```", "```py\n# Build MultiIndex\nIn [322]: idx = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", 1), (\"a\", 2), (\"a\", 2), (\"b\", 2), (\"b\", 1), (\"b\", 1)]\n .....: )\n .....: \n\nIn [323]: idx.names = [\"first\", \"second\"]\n\n# Build DataFrame\nIn [324]: df_multi = pd.DataFrame({\"A\": np.arange(6, 0, -1)}, index=idx)\n\nIn [325]: df_multi\nOut[325]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1 \n```", "```py\nIn [326]: df_multi.sort_values(by=[\"second\", \"A\"])\nOut[326]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5 \n```", "```py\nIn [327]: ser = pd.Series([1, 2, 3])\n\nIn [328]: ser.searchsorted([0, 3])\nOut[328]: array([0, 2])\n\nIn [329]: ser.searchsorted([0, 4])\nOut[329]: array([0, 3])\n\nIn [330]: ser.searchsorted([1, 3], side=\"right\")\nOut[330]: array([1, 3])\n\nIn [331]: ser.searchsorted([1, 3], side=\"left\")\nOut[331]: array([0, 2])\n\nIn [332]: ser = pd.Series([3, 1, 2])\n\nIn [333]: ser.searchsorted([0, 3], sorter=np.argsort(ser))\nOut[333]: array([0, 2]) \n```", "```py\nIn [334]: s = pd.Series(np.random.permutation(10))\n\nIn [335]: s\nOut[335]: \n0    2\n1    0\n2    3\n3    7\n4    1\n5    5\n6    9\n7    6\n8    8\n9    4\ndtype: int64\n\nIn [336]: s.sort_values()\nOut[336]: \n1    0\n4    1\n0    2\n2    3\n9    4\n5    5\n7    6\n3    7\n8    8\n6    9\ndtype: int64\n\nIn [337]: s.nsmallest(3)\nOut[337]: \n1    0\n4    1\n0    2\ndtype: int64\n\nIn [338]: s.nlargest(3)\nOut[338]: \n6    9\n8    8\n3    7\ndtype: int64 \n```", "```py\nIn [339]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [-2, -1, 1, 10, 8, 11, -1],\n .....:        \"b\": list(\"abdceff\"),\n .....:        \"c\": [1.0, 2.0, 4.0, 3.2, np.nan, 3.0, 4.0],\n .....:    }\n .....: )\n .....: \n\nIn [340]: df.nlargest(3, \"a\")\nOut[340]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n\nIn [341]: df.nlargest(5, [\"a\", \"c\"])\nOut[341]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n2   1  d  4.0\n6  -1  f  4.0\n\nIn [342]: df.nsmallest(3, \"a\")\nOut[342]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n\nIn [343]: df.nsmallest(5, [\"a\", \"c\"])\nOut[343]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n2  1  d  4.0\n4  8  e  NaN \n```", "```py\nIn [344]: df1.columns = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", \"one\"), (\"a\", \"two\"), (\"b\", \"three\")]\n .....: )\n .....: \n\nIn [345]: df1.sort_values(by=(\"a\", \"two\"))\nOut[345]: \n a         b\n one two three\n0   2   1     5\n2   1   2     3\n1   1   3     4\n3   1   4     2 \n```", "```py\nIn [346]: dft = pd.DataFrame(\n .....:    {\n .....:        \"A\": np.random.rand(3),\n .....:        \"B\": 1,\n .....:        \"C\": \"foo\",\n .....:        \"D\": pd.Timestamp(\"20010102\"),\n .....:        \"E\": pd.Series([1.0] * 3).astype(\"float32\"),\n .....:        \"F\": False,\n .....:        \"G\": pd.Series([1] * 3, dtype=\"int8\"),\n .....:    }\n .....: )\n .....: \n\nIn [347]: dft\nOut[347]: \n A  B    C          D    E      F  G\n0  0.035962  1  foo 2001-01-02  1.0  False  1\n1  0.701379  1  foo 2001-01-02  1.0  False  1\n2  0.281885  1  foo 2001-01-02  1.0  False  1\n\nIn [348]: dft.dtypes\nOut[348]: \nA          float64\nB            int64\nC           object\nD    datetime64[s]\nE          float32\nF             bool\nG             int8\ndtype: object \n```", "```py\nIn [349]: dft[\"A\"].dtype\nOut[349]: dtype('float64') \n```", "```py\n# these ints are coerced to floats\nIn [350]: pd.Series([1, 2, 3, 4, 5, 6.0])\nOut[350]: \n0    1.0\n1    2.0\n2    3.0\n3    4.0\n4    5.0\n5    6.0\ndtype: float64\n\n# string data forces an ``object`` dtype\nIn [351]: pd.Series([1, 2, 3, 6.0, \"foo\"])\nOut[351]: \n0      1\n1      2\n2      3\n3    6.0\n4    foo\ndtype: object \n```", "```py\nIn [352]: dft.dtypes.value_counts()\nOut[352]: \nfloat64          1\nint64            1\nobject           1\ndatetime64[s]    1\nfloat32          1\nbool             1\nint8             1\nName: count, dtype: int64 \n```", "```py\nIn [353]: df1 = pd.DataFrame(np.random.randn(8, 1), columns=[\"A\"], dtype=\"float32\")\n\nIn [354]: df1\nOut[354]: \n A\n0  0.224364\n1  1.890546\n2  0.182879\n3  0.787847\n4 -0.188449\n5  0.667715\n6 -0.011736\n7 -0.399073\n\nIn [355]: df1.dtypes\nOut[355]: \nA    float32\ndtype: object\n\nIn [356]: df2 = pd.DataFrame(\n .....:    {\n .....:        \"A\": pd.Series(np.random.randn(8), dtype=\"float16\"),\n .....:        \"B\": pd.Series(np.random.randn(8)),\n .....:        \"C\": pd.Series(np.random.randint(0, 255, size=8), dtype=\"uint8\"),  # [0,255] (range of uint8)\n .....:    }\n .....: )\n .....: \n\nIn [357]: df2\nOut[357]: \n A         B    C\n0  0.823242  0.256090   26\n1  1.607422  1.426469   86\n2 -0.333740 -0.416203   46\n3 -0.063477  1.139976  212\n4 -1.014648 -1.193477   26\n5  0.678711  0.096706    7\n6 -0.040863 -1.956850  184\n7 -0.357422 -0.714337  206\n\nIn [358]: df2.dtypes\nOut[358]: \nA    float16\nB    float64\nC      uint8\ndtype: object \n```", "```py\nIn [359]: pd.DataFrame([1, 2], columns=[\"a\"]).dtypes\nOut[359]: \na    int64\ndtype: object\n\nIn [360]: pd.DataFrame({\"a\": [1, 2]}).dtypes\nOut[360]: \na    int64\ndtype: object\n\nIn [361]: pd.DataFrame({\"a\": 1}, index=list(range(2))).dtypes\nOut[361]: \na    int64\ndtype: object \n```", "```py\nIn [362]: frame = pd.DataFrame(np.array([1, 2])) \n```", "```py\nIn [363]: df3 = df1.reindex_like(df2).fillna(value=0.0) + df2\n\nIn [364]: df3\nOut[364]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [365]: df3.dtypes\nOut[365]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [366]: df3.to_numpy().dtype\nOut[366]: dtype('float64') \n```", "```py\nIn [367]: df3\nOut[367]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [368]: df3.dtypes\nOut[368]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\n# conversion of dtypes\nIn [369]: df3.astype(\"float32\").dtypes\nOut[369]: \nA    float32\nB    float32\nC    float32\ndtype: object \n```", "```py\nIn [370]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [371]: dft[[\"a\", \"b\"]] = dft[[\"a\", \"b\"]].astype(np.uint8)\n\nIn [372]: dft\nOut[372]: \n a  b  c\n0  1  4  7\n1  2  5  8\n2  3  6  9\n\nIn [373]: dft.dtypes\nOut[373]: \na    uint8\nb    uint8\nc    int64\ndtype: object \n```", "```py\nIn [374]: dft1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [375]: dft1 = dft1.astype({\"a\": np.bool_, \"c\": np.float64})\n\nIn [376]: dft1\nOut[376]: \n a  b    c\n0   True  4  7.0\n1  False  5  8.0\n2   True  6  9.0\n\nIn [377]: dft1.dtypes\nOut[377]: \na       bool\nb      int64\nc    float64\ndtype: object \n```", "```py\nIn [378]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [379]: dft.loc[:, [\"a\", \"b\"]].astype(np.uint8).dtypes\nOut[379]: \na    uint8\nb    uint8\ndtype: object\n\nIn [380]: dft.loc[:, [\"a\", \"b\"]] = dft.loc[:, [\"a\", \"b\"]].astype(np.uint8)\n\nIn [381]: dft.dtypes\nOut[381]: \na    int64\nb    int64\nc    int64\ndtype: object \n```", "```py\n> In [382]: import datetime\n> \n> In [383]: df = pd.DataFrame(\n>  .....:    [\n>  .....:        [1, 2],\n>  .....:        [\"a\", \"b\"],\n>  .....:        [datetime.datetime(2016, 3, 2), datetime.datetime(2016, 3, 2)],\n>  .....:    ]\n>  .....: )\n>  .....: \n> \n> In [384]: df = df.T\n> \n> In [385]: df\n> Out[385]: \n>  0  1                    2\n> 0  1  a  2016-03-02 00:00:00\n> 1  2  b  2016-03-02 00:00:00\n> \n> In [386]: df.dtypes\n> Out[386]: \n> 0    object\n> 1    object\n> 2    object\n> dtype: object \n> ```", "```py\n> In [387]: df.infer_objects().dtypes\n> Out[387]: \n> 0             int64\n> 1            object\n> 2    datetime64[ns]\n> dtype: object \n> ```", "```py\n    In [388]: m = [\"1.1\", 2, 3]\n\n    In [389]: pd.to_numeric(m)\n    Out[389]: array([1.1, 2\\. , 3\\. ]) \n    ```", "```py\n    In [390]: import datetime\n\n    In [391]: m = [\"2016-07-09\", datetime.datetime(2016, 3, 2)]\n\n    In [392]: pd.to_datetime(m)\n    Out[392]: DatetimeIndex(['2016-07-09', '2016-03-02'], dtype='datetime64[ns]', freq=None) \n    ```", "```py\n    In [393]: m = [\"5us\", pd.Timedelta(\"1day\")]\n\n    In [394]: pd.to_timedelta(m)\n    Out[394]: TimedeltaIndex(['0 days 00:00:00.000005', '1 days 00:00:00'], dtype='timedelta64[ns]', freq=None) \n    ```", "```py\nIn [395]: import datetime\n\nIn [396]: m = [\"apple\", datetime.datetime(2016, 3, 2)]\n\nIn [397]: pd.to_datetime(m, errors=\"coerce\")\nOut[397]: DatetimeIndex(['NaT', '2016-03-02'], dtype='datetime64[ns]', freq=None)\n\nIn [398]: m = [\"apple\", 2, 3]\n\nIn [399]: pd.to_numeric(m, errors=\"coerce\")\nOut[399]: array([nan,  2.,  3.])\n\nIn [400]: m = [\"apple\", pd.Timedelta(\"1day\")]\n\nIn [401]: pd.to_timedelta(m, errors=\"coerce\")\nOut[401]: TimedeltaIndex([NaT, '1 days'], dtype='timedelta64[ns]', freq=None) \n```", "```py\nIn [402]: m = [\"1\", 2, 3]\n\nIn [403]: pd.to_numeric(m, downcast=\"integer\")  # smallest signed int dtype\nOut[403]: array([1, 2, 3], dtype=int8)\n\nIn [404]: pd.to_numeric(m, downcast=\"signed\")  # same as 'integer'\nOut[404]: array([1, 2, 3], dtype=int8)\n\nIn [405]: pd.to_numeric(m, downcast=\"unsigned\")  # smallest unsigned int dtype\nOut[405]: array([1, 2, 3], dtype=uint8)\n\nIn [406]: pd.to_numeric(m, downcast=\"float\")  # smallest float dtype\nOut[406]: array([1., 2., 3.], dtype=float32) \n```", "```py\nIn [407]: import datetime\n\nIn [408]: df = pd.DataFrame([[\"2016-07-09\", datetime.datetime(2016, 3, 2)]] * 2, dtype=\"O\")\n\nIn [409]: df\nOut[409]: \n 0                    1\n0  2016-07-09  2016-03-02 00:00:00\n1  2016-07-09  2016-03-02 00:00:00\n\nIn [410]: df.apply(pd.to_datetime)\nOut[410]: \n 0          1\n0 2016-07-09 2016-03-02\n1 2016-07-09 2016-03-02\n\nIn [411]: df = pd.DataFrame([[\"1.1\", 2, 3]] * 2, dtype=\"O\")\n\nIn [412]: df\nOut[412]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [413]: df.apply(pd.to_numeric)\nOut[413]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [414]: df = pd.DataFrame([[\"5us\", pd.Timedelta(\"1day\")]] * 2, dtype=\"O\")\n\nIn [415]: df\nOut[415]: \n 0                1\n0  5us  1 days 00:00:00\n1  5us  1 days 00:00:00\n\nIn [416]: df.apply(pd.to_timedelta)\nOut[416]: \n 0      1\n0 0 days 00:00:00.000005 1 days\n1 0 days 00:00:00.000005 1 days \n```", "```py\nIn [417]: dfi = df3.astype(\"int32\")\n\nIn [418]: dfi[\"E\"] = 1\n\nIn [419]: dfi\nOut[419]: \n A  B    C  E\n0  1  0   26  1\n1  3  1   86  1\n2  0  0   46  1\n3  0  1  212  1\n4 -1 -1   26  1\n5  1  0    7  1\n6  0 -1  184  1\n7  0  0  206  1\n\nIn [420]: dfi.dtypes\nOut[420]: \nA    int32\nB    int32\nC    int32\nE    int64\ndtype: object\n\nIn [421]: casted = dfi[dfi > 0]\n\nIn [422]: casted\nOut[422]: \n A    B    C  E\n0  1.0  NaN   26  1\n1  3.0  1.0   86  1\n2  NaN  NaN   46  1\n3  NaN  1.0  212  1\n4  NaN  NaN   26  1\n5  1.0  NaN    7  1\n6  NaN  NaN  184  1\n7  NaN  NaN  206  1\n\nIn [423]: casted.dtypes\nOut[423]: \nA    float64\nB    float64\nC      int32\nE      int64\ndtype: object \n```", "```py\nIn [424]: dfa = df3.copy()\n\nIn [425]: dfa[\"A\"] = dfa[\"A\"].astype(\"float32\")\n\nIn [426]: dfa.dtypes\nOut[426]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\nIn [427]: casted = dfa[df2 > 0]\n\nIn [428]: casted\nOut[428]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2       NaN       NaN   46.0\n3       NaN  1.139976  212.0\n4       NaN       NaN   26.0\n5  1.346426  0.096706    7.0\n6       NaN       NaN  184.0\n7       NaN       NaN  206.0\n\nIn [429]: casted.dtypes\nOut[429]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [430]: df = pd.DataFrame(\n .....:    {\n .....:        \"string\": list(\"abc\"),\n .....:        \"int64\": list(range(1, 4)),\n .....:        \"uint8\": np.arange(3, 6).astype(\"u1\"),\n .....:        \"float64\": np.arange(4.0, 7.0),\n .....:        \"bool1\": [True, False, True],\n .....:        \"bool2\": [False, True, False],\n .....:        \"dates\": pd.date_range(\"now\", periods=3),\n .....:        \"category\": pd.Series(list(\"ABC\")).astype(\"category\"),\n .....:    }\n .....: )\n .....: \n\nIn [431]: df[\"tdeltas\"] = df.dates.diff()\n\nIn [432]: df[\"uint64\"] = np.arange(3, 6).astype(\"u8\")\n\nIn [433]: df[\"other_dates\"] = pd.date_range(\"20130101\", periods=3)\n\nIn [434]: df[\"tz_aware_dates\"] = pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\")\n\nIn [435]: df\nOut[435]: \n string  int64  uint8  ...  uint64  other_dates            tz_aware_dates\n0      a      1      3  ...       3   2013-01-01 2013-01-01 00:00:00-05:00\n1      b      2      4  ...       4   2013-01-02 2013-01-02 00:00:00-05:00\n2      c      3      5  ...       5   2013-01-03 2013-01-03 00:00:00-05:00\n\n[3 rows x 12 columns] \n```", "```py\nIn [436]: df.dtypes\nOut[436]: \nstring                                object\nint64                                  int64\nuint8                                  uint8\nfloat64                              float64\nbool1                                   bool\nbool2                                   bool\ndates                         datetime64[ns]\ncategory                            category\ntdeltas                      timedelta64[ns]\nuint64                                uint64\nother_dates                   datetime64[ns]\ntz_aware_dates    datetime64[ns, US/Eastern]\ndtype: object \n```", "```py\nIn [437]: df.select_dtypes(include=[bool])\nOut[437]: \n bool1  bool2\n0   True  False\n1  False   True\n2   True  False \n```", "```py\nIn [438]: df.select_dtypes(include=[\"bool\"])\nOut[438]: \n bool1  bool2\n0   True  False\n1  False   True\n2   True  False \n```", "```py\nIn [439]: df.select_dtypes(include=[\"number\", \"bool\"], exclude=[\"unsignedinteger\"])\nOut[439]: \n int64  float64  bool1  bool2 tdeltas\n0      1      4.0   True  False     NaT\n1      2      5.0  False   True  1 days\n2      3      6.0   True  False  1 days \n```", "```py\nIn [440]: df.select_dtypes(include=[\"object\"])\nOut[440]: \n string\n0      a\n1      b\n2      c \n```", "```py\nIn [441]: def subdtypes(dtype):\n .....:    subs = dtype.__subclasses__()\n .....:    if not subs:\n .....:        return dtype\n .....:    return [dtype, [subdtypes(dt) for dt in subs]]\n .....: \n```", "```py\nIn [442]: subdtypes(np.generic)\nOut[442]: \n[numpy.generic,\n [[numpy.number,\n [[numpy.integer,\n [[numpy.signedinteger,\n [numpy.int8,\n numpy.int16,\n numpy.int32,\n numpy.int64,\n numpy.longlong,\n numpy.timedelta64]],\n [numpy.unsignedinteger,\n [numpy.uint8,\n numpy.uint16,\n numpy.uint32,\n numpy.uint64,\n numpy.ulonglong]]]],\n [numpy.inexact,\n [[numpy.floating,\n [numpy.float16, numpy.float32, numpy.float64, numpy.longdouble]],\n [numpy.complexfloating,\n [numpy.complex64, numpy.complex128, numpy.clongdouble]]]]]],\n [numpy.flexible,\n [[numpy.character, [numpy.bytes_, numpy.str_]],\n [numpy.void, [numpy.record]]]],\n numpy.bool_,\n numpy.datetime64,\n numpy.object_]] \n```", "```py\nIn [4]: long_series = pd.Series(np.random.randn(1000))\n\nIn [5]: long_series.head()\nOut[5]: \n0   -1.157892\n1   -1.344312\n2    0.844885\n3    1.075770\n4   -0.109050\ndtype: float64\n\nIn [6]: long_series.tail(3)\nOut[6]: \n997   -0.289388\n998   -1.020544\n999    0.589993\ndtype: float64 \n```", "```py\nIn [7]: df[:2]\nOut[7]: \n A         B         C\n2000-01-01 -0.173215  0.119209 -1.044236\n2000-01-02 -0.861849 -2.104569 -0.494929\n\nIn [8]: df.columns = [x.lower() for x in df.columns]\n\nIn [9]: df\nOut[9]: \n a         b         c\n2000-01-01 -0.173215  0.119209 -1.044236\n2000-01-02 -0.861849 -2.104569 -0.494929\n2000-01-03  1.071804  0.721555 -0.706771\n2000-01-04 -1.039575  0.271860 -0.424972\n2000-01-05  0.567020  0.276232 -1.087401\n2000-01-06 -0.673690  0.113648 -1.478427\n2000-01-07  0.524988  0.404705  0.577046\n2000-01-08 -1.715002 -1.039268 -0.370647 \n```", "```py\nIn [10]: s.array\nOut[10]: \n<NumpyExtensionArray>\n[ 0.4691122999071863, -0.2828633443286633, -1.5090585031735124,\n -1.1356323710171934,  1.2121120250208506]\nLength: 5, dtype: float64\n\nIn [11]: s.index.array\nOut[11]: \n<NumpyExtensionArray>\n['a', 'b', 'c', 'd', 'e']\nLength: 5, dtype: object \n```", "```py\nIn [12]: s.to_numpy()\nOut[12]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121])\n\nIn [13]: np.asarray(s)\nOut[13]: array([ 0.4691, -0.2829, -1.5091, -1.1356,  1.2121]) \n```", "```py\nIn [14]: ser = pd.Series(pd.date_range(\"2000\", periods=2, tz=\"CET\"))\n\nIn [15]: ser.to_numpy(dtype=object)\nOut[15]: \narray([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),\n Timestamp('2000-01-02 00:00:00+0100', tz='CET')], dtype=object) \n```", "```py\nIn [16]: ser.to_numpy(dtype=\"datetime64[ns]\")\nOut[16]: \narray(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00.000000000'],\n dtype='datetime64[ns]') \n```", "```py\nIn [17]: df.to_numpy()\nOut[17]: \narray([[-0.1732,  0.1192, -1.0442],\n [-0.8618, -2.1046, -0.4949],\n [ 1.0718,  0.7216, -0.7068],\n [-1.0396,  0.2719, -0.425 ],\n [ 0.567 ,  0.2762, -1.0874],\n [-0.6737,  0.1136, -1.4784],\n [ 0.525 ,  0.4047,  0.577 ],\n [-1.715 , -1.0393, -0.3706]]) \n```", "```py\npd.set_option(\"compute.use_bottleneck\", False)\npd.set_option(\"compute.use_numexpr\", False) \n```", "```py\nIn [18]: df = pd.DataFrame(\n ....:    {\n ....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n ....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n ....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n ....:    }\n ....: )\n ....: \n\nIn [19]: df\nOut[19]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [20]: row = df.iloc[1]\n\nIn [21]: column = df[\"two\"]\n\nIn [22]: df.sub(row, axis=\"columns\")\nOut[22]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [23]: df.sub(row, axis=1)\nOut[23]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [24]: df.sub(column, axis=\"index\")\nOut[24]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516\n\nIn [25]: df.sub(column, axis=0)\nOut[25]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516 \n```", "```py\nIn [26]: dfmi = df.copy()\n\nIn [27]: dfmi.index = pd.MultiIndex.from_tuples(\n ....:    [(1, \"a\"), (1, \"b\"), (1, \"c\"), (2, \"a\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [28]: dfmi.sub(column, axis=0, level=\"second\")\nOut[28]: \n one       two     three\nfirst second \n1     a      -0.377535  0.000000       NaN\n b      -1.569069  0.000000 -1.962513\n c      -0.783123  0.000000 -0.250933\n2     a            NaN -1.493173 -2.385688 \n```", "```py\nIn [29]: s = pd.Series(np.arange(10))\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\n3    3\n4    4\n5    5\n6    6\n7    7\n8    8\n9    9\ndtype: int64\n\nIn [31]: div, rem = divmod(s, 3)\n\nIn [32]: div\nOut[32]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    2\n7    2\n8    2\n9    3\ndtype: int64\n\nIn [33]: rem\nOut[33]: \n0    0\n1    1\n2    2\n3    0\n4    1\n5    2\n6    0\n7    1\n8    2\n9    0\ndtype: int64\n\nIn [34]: idx = pd.Index(np.arange(10))\n\nIn [35]: idx\nOut[35]: Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype='int64')\n\nIn [36]: div, rem = divmod(idx, 3)\n\nIn [37]: div\nOut[37]: Index([0, 0, 0, 1, 1, 1, 2, 2, 2, 3], dtype='int64')\n\nIn [38]: rem\nOut[38]: Index([0, 1, 2, 0, 1, 2, 0, 1, 2, 0], dtype='int64') \n```", "```py\nIn [39]: div, rem = divmod(s, [2, 2, 3, 3, 4, 4, 5, 5, 6, 6])\n\nIn [40]: div\nOut[40]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    1\n7    1\n8    1\n9    1\ndtype: int64\n\nIn [41]: rem\nOut[41]: \n0    0\n1    1\n2    2\n3    0\n4    0\n5    1\n6    1\n7    2\n8    2\n9    3\ndtype: int64 \n```", "```py\nIn [42]: df2 = df.copy()\n\nIn [43]: df2.loc[\"a\", \"three\"] = 1.0\n\nIn [44]: df\nOut[44]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [45]: df2\nOut[45]: \n one       two     three\na  1.394981  1.772517  1.000000\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [46]: df + df2\nOut[46]: \n one       two     three\na  2.789963  3.545034       NaN\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343\n\nIn [47]: df.add(df2, fill_value=0)\nOut[47]: \n one       two     three\na  2.789963  3.545034  1.000000\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343 \n```", "```py\nIn [48]: df.gt(df2)\nOut[48]: \n one    two  three\na  False  False  False\nb  False  False  False\nc  False  False  False\nd  False  False  False\n\nIn [49]: df2.ne(df)\nOut[49]: \n one    two  three\na  False  False   True\nb  False  False  False\nc  False  False  False\nd   True  False  False \n```", "```py\nIn [50]: (df > 0).all()\nOut[50]: \none      False\ntwo       True\nthree    False\ndtype: bool\n\nIn [51]: (df > 0).any()\nOut[51]: \none      True\ntwo      True\nthree    True\ndtype: bool \n```", "```py\nIn [52]: (df > 0).any().any()\nOut[52]: True \n```", "```py\nIn [53]: df.empty\nOut[53]: False\n\nIn [54]: pd.DataFrame(columns=list(\"ABC\")).empty\nOut[54]: True \n```", "```py\nIn [55]: if df:\n ....:    print(True)\n ....: \n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-55-318d08b2571a> in ?()\n----> 1 if df:\n  2     print(True)\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [56]: df and df2\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-56-b241b64bb471> in ?()\n----> 1 df and df2\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [57]: df + df == df * 2\nOut[57]: \n one   two  three\na   True  True  False\nb   True  True   True\nc   True  True   True\nd  False  True   True\n\nIn [58]: (df + df == df * 2).all()\nOut[58]: \none      False\ntwo       True\nthree    False\ndtype: bool \n```", "```py\nIn [59]: np.nan == np.nan\nOut[59]: False \n```", "```py\nIn [60]: (df + df).equals(df * 2)\nOut[60]: True \n```", "```py\nIn [61]: df1 = pd.DataFrame({\"col\": [\"foo\", 0, np.nan]})\n\nIn [62]: df2 = pd.DataFrame({\"col\": [np.nan, 0, \"foo\"]}, index=[2, 1, 0])\n\nIn [63]: df1.equals(df2)\nOut[63]: False\n\nIn [64]: df1.equals(df2.sort_index())\nOut[64]: True \n```", "```py\nIn [65]: pd.Series([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[65]: \n0     True\n1    False\n2    False\ndtype: bool\n\nIn [66]: pd.Index([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[66]: array([ True, False, False]) \n```", "```py\nIn [67]: pd.Series([\"foo\", \"bar\", \"baz\"]) == pd.Index([\"foo\", \"bar\", \"qux\"])\nOut[67]: \n0     True\n1     True\n2    False\ndtype: bool\n\nIn [68]: pd.Series([\"foo\", \"bar\", \"baz\"]) == np.array([\"foo\", \"bar\", \"qux\"])\nOut[68]: \n0     True\n1     True\n2    False\ndtype: bool \n```", "```py\nIn [69]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[69], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects\n\nIn [70]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[70], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects \n```", "```py\nIn [71]: df1 = pd.DataFrame(\n ....:    {\"A\": [1.0, np.nan, 3.0, 5.0, np.nan], \"B\": [np.nan, 2.0, 3.0, np.nan, 6.0]}\n ....: )\n ....: \n\nIn [72]: df2 = pd.DataFrame(\n ....:    {\n ....:        \"A\": [5.0, 2.0, 4.0, np.nan, 3.0, 7.0],\n ....:        \"B\": [np.nan, np.nan, 3.0, 4.0, 6.0, 8.0],\n ....:    }\n ....: )\n ....: \n\nIn [73]: df1\nOut[73]: \n A    B\n0  1.0  NaN\n1  NaN  2.0\n2  3.0  3.0\n3  5.0  NaN\n4  NaN  6.0\n\nIn [74]: df2\nOut[74]: \n A    B\n0  5.0  NaN\n1  2.0  NaN\n2  4.0  3.0\n3  NaN  4.0\n4  3.0  6.0\n5  7.0  8.0\n\nIn [75]: df1.combine_first(df2)\nOut[75]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [76]: def combiner(x, y):\n ....:    return np.where(pd.isna(x), y, x)\n ....: \n\nIn [77]: df1.combine(df2, combiner)\nOut[77]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [18]: df = pd.DataFrame(\n ....:    {\n ....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n ....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n ....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n ....:    }\n ....: )\n ....: \n\nIn [19]: df\nOut[19]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [20]: row = df.iloc[1]\n\nIn [21]: column = df[\"two\"]\n\nIn [22]: df.sub(row, axis=\"columns\")\nOut[22]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [23]: df.sub(row, axis=1)\nOut[23]: \n one       two     three\na  1.051928 -0.139606       NaN\nb  0.000000  0.000000  0.000000\nc  0.352192 -0.433754  1.277825\nd       NaN -1.632779 -0.562782\n\nIn [24]: df.sub(column, axis=\"index\")\nOut[24]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516\n\nIn [25]: df.sub(column, axis=0)\nOut[25]: \n one  two     three\na -0.377535  0.0       NaN\nb -1.569069  0.0 -1.962513\nc -0.783123  0.0 -0.250933\nd       NaN  0.0 -0.892516 \n```", "```py\nIn [26]: dfmi = df.copy()\n\nIn [27]: dfmi.index = pd.MultiIndex.from_tuples(\n ....:    [(1, \"a\"), (1, \"b\"), (1, \"c\"), (2, \"a\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [28]: dfmi.sub(column, axis=0, level=\"second\")\nOut[28]: \n one       two     three\nfirst second \n1     a      -0.377535  0.000000       NaN\n b      -1.569069  0.000000 -1.962513\n c      -0.783123  0.000000 -0.250933\n2     a            NaN -1.493173 -2.385688 \n```", "```py\nIn [29]: s = pd.Series(np.arange(10))\n\nIn [30]: s\nOut[30]: \n0    0\n1    1\n2    2\n3    3\n4    4\n5    5\n6    6\n7    7\n8    8\n9    9\ndtype: int64\n\nIn [31]: div, rem = divmod(s, 3)\n\nIn [32]: div\nOut[32]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    2\n7    2\n8    2\n9    3\ndtype: int64\n\nIn [33]: rem\nOut[33]: \n0    0\n1    1\n2    2\n3    0\n4    1\n5    2\n6    0\n7    1\n8    2\n9    0\ndtype: int64\n\nIn [34]: idx = pd.Index(np.arange(10))\n\nIn [35]: idx\nOut[35]: Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype='int64')\n\nIn [36]: div, rem = divmod(idx, 3)\n\nIn [37]: div\nOut[37]: Index([0, 0, 0, 1, 1, 1, 2, 2, 2, 3], dtype='int64')\n\nIn [38]: rem\nOut[38]: Index([0, 1, 2, 0, 1, 2, 0, 1, 2, 0], dtype='int64') \n```", "```py\nIn [39]: div, rem = divmod(s, [2, 2, 3, 3, 4, 4, 5, 5, 6, 6])\n\nIn [40]: div\nOut[40]: \n0    0\n1    0\n2    0\n3    1\n4    1\n5    1\n6    1\n7    1\n8    1\n9    1\ndtype: int64\n\nIn [41]: rem\nOut[41]: \n0    0\n1    1\n2    2\n3    0\n4    0\n5    1\n6    1\n7    2\n8    2\n9    3\ndtype: int64 \n```", "```py\nIn [42]: df2 = df.copy()\n\nIn [43]: df2.loc[\"a\", \"three\"] = 1.0\n\nIn [44]: df\nOut[44]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [45]: df2\nOut[45]: \n one       two     three\na  1.394981  1.772517  1.000000\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [46]: df + df2\nOut[46]: \n one       two     three\na  2.789963  3.545034       NaN\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343\n\nIn [47]: df.add(df2, fill_value=0)\nOut[47]: \n one       two     three\na  2.789963  3.545034  1.000000\nb  0.686107  3.824246 -0.100780\nc  1.390491  2.956737  2.454870\nd       NaN  0.558688 -1.226343 \n```", "```py\nIn [48]: df.gt(df2)\nOut[48]: \n one    two  three\na  False  False  False\nb  False  False  False\nc  False  False  False\nd  False  False  False\n\nIn [49]: df2.ne(df)\nOut[49]: \n one    two  three\na  False  False   True\nb  False  False  False\nc  False  False  False\nd   True  False  False \n```", "```py\nIn [50]: (df > 0).all()\nOut[50]: \none      False\ntwo       True\nthree    False\ndtype: bool\n\nIn [51]: (df > 0).any()\nOut[51]: \none      True\ntwo      True\nthree    True\ndtype: bool \n```", "```py\nIn [52]: (df > 0).any().any()\nOut[52]: True \n```", "```py\nIn [53]: df.empty\nOut[53]: False\n\nIn [54]: pd.DataFrame(columns=list(\"ABC\")).empty\nOut[54]: True \n```", "```py\nIn [55]: if df:\n ....:    print(True)\n ....: \n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-55-318d08b2571a> in ?()\n----> 1 if df:\n  2     print(True)\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [56]: df and df2\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-56-b241b64bb471> in ?()\n----> 1 df and df2\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [57]: df + df == df * 2\nOut[57]: \n one   two  three\na   True  True  False\nb   True  True   True\nc   True  True   True\nd  False  True   True\n\nIn [58]: (df + df == df * 2).all()\nOut[58]: \none      False\ntwo       True\nthree    False\ndtype: bool \n```", "```py\nIn [59]: np.nan == np.nan\nOut[59]: False \n```", "```py\nIn [60]: (df + df).equals(df * 2)\nOut[60]: True \n```", "```py\nIn [61]: df1 = pd.DataFrame({\"col\": [\"foo\", 0, np.nan]})\n\nIn [62]: df2 = pd.DataFrame({\"col\": [np.nan, 0, \"foo\"]}, index=[2, 1, 0])\n\nIn [63]: df1.equals(df2)\nOut[63]: False\n\nIn [64]: df1.equals(df2.sort_index())\nOut[64]: True \n```", "```py\nIn [65]: pd.Series([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[65]: \n0     True\n1    False\n2    False\ndtype: bool\n\nIn [66]: pd.Index([\"foo\", \"bar\", \"baz\"]) == \"foo\"\nOut[66]: array([ True, False, False]) \n```", "```py\nIn [67]: pd.Series([\"foo\", \"bar\", \"baz\"]) == pd.Index([\"foo\", \"bar\", \"qux\"])\nOut[67]: \n0     True\n1     True\n2    False\ndtype: bool\n\nIn [68]: pd.Series([\"foo\", \"bar\", \"baz\"]) == np.array([\"foo\", \"bar\", \"qux\"])\nOut[68]: \n0     True\n1     True\n2    False\ndtype: bool \n```", "```py\nIn [69]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[69], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo', 'bar'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects\n\nIn [70]: pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\nCell In[70], line 1\n----> 1 pd.Series(['foo', 'bar', 'baz']) == pd.Series(['foo'])\n\nFile ~/work/pandas/pandas/pandas/core/ops/common.py:76, in _unpack_zerodim_and_defer.<locals>.new_method(self, other)\n  72             return NotImplemented\n  74 other = item_from_zerodim(other)\n---> 76 return method(self, other)\n\nFile ~/work/pandas/pandas/pandas/core/arraylike.py:40, in OpsMixin.__eq__(self, other)\n  38 @unpack_zerodim_and_defer(\"__eq__\")\n  39 def __eq__(self, other):\n---> 40     return self._cmp_method(other, operator.eq)\n\nFile ~/work/pandas/pandas/pandas/core/series.py:6114, in Series._cmp_method(self, other, op)\n  6111 res_name = ops.get_op_result_name(self, other)\n  6113 if isinstance(other, Series) and not self._indexed_same(other):\n-> 6114     raise ValueError(\"Can only compare identically-labeled Series objects\")\n  6116 lvalues = self._values\n  6117 rvalues = extract_array(other, extract_numpy=True, extract_range=True)\n\nValueError: Can only compare identically-labeled Series objects \n```", "```py\nIn [71]: df1 = pd.DataFrame(\n ....:    {\"A\": [1.0, np.nan, 3.0, 5.0, np.nan], \"B\": [np.nan, 2.0, 3.0, np.nan, 6.0]}\n ....: )\n ....: \n\nIn [72]: df2 = pd.DataFrame(\n ....:    {\n ....:        \"A\": [5.0, 2.0, 4.0, np.nan, 3.0, 7.0],\n ....:        \"B\": [np.nan, np.nan, 3.0, 4.0, 6.0, 8.0],\n ....:    }\n ....: )\n ....: \n\nIn [73]: df1\nOut[73]: \n A    B\n0  1.0  NaN\n1  NaN  2.0\n2  3.0  3.0\n3  5.0  NaN\n4  NaN  6.0\n\nIn [74]: df2\nOut[74]: \n A    B\n0  5.0  NaN\n1  2.0  NaN\n2  4.0  3.0\n3  NaN  4.0\n4  3.0  6.0\n5  7.0  8.0\n\nIn [75]: df1.combine_first(df2)\nOut[75]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [76]: def combiner(x, y):\n ....:    return np.where(pd.isna(x), y, x)\n ....: \n\nIn [77]: df1.combine(df2, combiner)\nOut[77]: \n A    B\n0  1.0  NaN\n1  2.0  2.0\n2  3.0  3.0\n3  5.0  4.0\n4  3.0  6.0\n5  7.0  8.0 \n```", "```py\nIn [78]: df\nOut[78]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [79]: df.mean(0)\nOut[79]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [80]: df.mean(1)\nOut[80]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64 \n```", "```py\nIn [81]: df.sum(0, skipna=False)\nOut[81]: \none           NaN\ntwo      5.442353\nthree         NaN\ndtype: float64\n\nIn [82]: df.sum(axis=1, skipna=True)\nOut[82]: \na    3.167498\nb    2.204786\nc    3.401050\nd   -0.333828\ndtype: float64 \n```", "```py\nIn [83]: ts_stand = (df - df.mean()) / df.std()\n\nIn [84]: ts_stand.std()\nOut[84]: \none      1.0\ntwo      1.0\nthree    1.0\ndtype: float64\n\nIn [85]: xs_stand = df.sub(df.mean(1), axis=0).div(df.std(1), axis=0)\n\nIn [86]: xs_stand.std(1)\nOut[86]: \na    1.0\nb    1.0\nc    1.0\nd    1.0\ndtype: float64 \n```", "```py\nIn [87]: df.cumsum()\nOut[87]: \n one       two     three\na  1.394981  1.772517       NaN\nb  1.738035  3.684640 -0.050390\nc  2.433281  5.163008  1.177045\nd       NaN  5.442353  0.563873 \n```", "```py\nIn [88]: np.mean(df[\"one\"])\nOut[88]: 0.8110935116651192\n\nIn [89]: np.mean(df[\"one\"].to_numpy())\nOut[89]: nan \n```", "```py\nIn [90]: series = pd.Series(np.random.randn(500))\n\nIn [91]: series[20:500] = np.nan\n\nIn [92]: series[10:20] = 5\n\nIn [93]: series.nunique()\nOut[93]: 11 \n```", "```py\nIn [94]: series = pd.Series(np.random.randn(1000))\n\nIn [95]: series[::2] = np.nan\n\nIn [96]: series.describe()\nOut[96]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\nmax        3.160915\ndtype: float64\n\nIn [97]: frame = pd.DataFrame(np.random.randn(1000, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [98]: frame.iloc[::2] = np.nan\n\nIn [99]: frame.describe()\nOut[99]: \n a           b           c           d           e\ncount  500.000000  500.000000  500.000000  500.000000  500.000000\nmean     0.033387    0.030045   -0.043719   -0.051686    0.005979\nstd      1.017152    0.978743    1.025270    1.015988    1.006695\nmin     -3.000951   -2.637901   -3.303099   -3.159200   -3.188821\n25%     -0.647623   -0.576449   -0.712369   -0.691338   -0.691115\n50%      0.047578   -0.021499   -0.023888   -0.032652   -0.025363\n75%      0.729907    0.775880    0.618896    0.670047    0.649748\nmax      2.740139    2.752332    3.004229    2.728702    3.240991 \n```", "```py\nIn [100]: series.describe(percentiles=[0.05, 0.25, 0.75, 0.95])\nOut[100]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n5%        -1.645423\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\n95%        1.711409\nmax        3.160915\ndtype: float64 \n```", "```py\nIn [101]: s = pd.Series([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", np.nan, \"c\", \"d\", \"a\"])\n\nIn [102]: s.describe()\nOut[102]: \ncount     9\nunique    4\ntop       a\nfreq      5\ndtype: object \n```", "```py\nIn [103]: frame = pd.DataFrame({\"a\": [\"Yes\", \"Yes\", \"No\", \"No\"], \"b\": range(4)})\n\nIn [104]: frame.describe()\nOut[104]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000 \n```", "```py\nIn [105]: frame.describe(include=[\"object\"])\nOut[105]: \n a\ncount     4\nunique    2\ntop     Yes\nfreq      2\n\nIn [106]: frame.describe(include=[\"number\"])\nOut[106]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000\n\nIn [107]: frame.describe(include=\"all\")\nOut[107]: \n a         b\ncount     4  4.000000\nunique    2       NaN\ntop     Yes       NaN\nfreq      2       NaN\nmean    NaN  1.500000\nstd     NaN  1.290994\nmin     NaN  0.000000\n25%     NaN  0.750000\n50%     NaN  1.500000\n75%     NaN  2.250000\nmax     NaN  3.000000 \n```", "```py\nIn [108]: s1 = pd.Series(np.random.randn(5))\n\nIn [109]: s1\nOut[109]: \n0    1.118076\n1   -0.352051\n2   -1.242883\n3   -1.277155\n4   -0.641184\ndtype: float64\n\nIn [110]: s1.idxmin(), s1.idxmax()\nOut[110]: (3, 0)\n\nIn [111]: df1 = pd.DataFrame(np.random.randn(5, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [112]: df1\nOut[112]: \n A         B         C\n0 -0.327863 -0.946180 -0.137570\n1 -0.186235 -0.257213 -0.486567\n2 -0.507027 -0.871259 -0.111110\n3  2.000339 -2.430505  0.089759\n4 -0.321434 -0.033695  0.096271\n\nIn [113]: df1.idxmin(axis=0)\nOut[113]: \nA    2\nB    3\nC    1\ndtype: int64\n\nIn [114]: df1.idxmax(axis=1)\nOut[114]: \n0    C\n1    A\n2    C\n3    A\n4    C\ndtype: object \n```", "```py\nIn [115]: df3 = pd.DataFrame([2, 1, 1, 3, np.nan], columns=[\"A\"], index=list(\"edcba\"))\n\nIn [116]: df3\nOut[116]: \n A\ne  2.0\nd  1.0\nc  1.0\nb  3.0\na  NaN\n\nIn [117]: df3[\"A\"].idxmin()\nOut[117]: 'd' \n```", "```py\nIn [118]: data = np.random.randint(0, 7, size=50)\n\nIn [119]: data\nOut[119]: \narray([6, 6, 2, 3, 5, 3, 2, 5, 4, 5, 4, 3, 4, 5, 0, 2, 0, 4, 2, 0, 3, 2,\n 2, 5, 6, 5, 3, 4, 6, 4, 3, 5, 6, 4, 3, 6, 2, 6, 6, 2, 3, 4, 2, 1,\n 6, 2, 6, 1, 5, 4])\n\nIn [120]: s = pd.Series(data)\n\nIn [121]: s.value_counts()\nOut[121]: \n6    10\n2    10\n4     9\n3     8\n5     8\n0     3\n1     2\nName: count, dtype: int64 \n```", "```py\nIn [122]: data = {\"a\": [1, 2, 3, 4], \"b\": [\"x\", \"x\", \"y\", \"y\"]}\n\nIn [123]: frame = pd.DataFrame(data)\n\nIn [124]: frame.value_counts()\nOut[124]: \na  b\n1  x    1\n2  x    1\n3  y    1\n4  y    1\nName: count, dtype: int64 \n```", "```py\nIn [125]: s5 = pd.Series([1, 1, 3, 3, 3, 5, 5, 7, 7, 7])\n\nIn [126]: s5.mode()\nOut[126]: \n0    3\n1    7\ndtype: int64\n\nIn [127]: df5 = pd.DataFrame(\n .....:    {\n .....:        \"A\": np.random.randint(0, 7, size=50),\n .....:        \"B\": np.random.randint(-10, 15, size=50),\n .....:    }\n .....: )\n .....: \n\nIn [128]: df5.mode()\nOut[128]: \n A   B\n0  1.0  -9\n1  NaN  10\n2  NaN  13 \n```", "```py\nIn [129]: arr = np.random.randn(20)\n\nIn [130]: factor = pd.cut(arr, 4)\n\nIn [131]: factor\nOut[131]: \n[(-0.251, 0.464], (-0.968, -0.251], (0.464, 1.179], (-0.251, 0.464], (-0.968, -0.251], ..., (-0.251, 0.464], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251]]\nLength: 20\nCategories (4, interval[float64, right]): [(-0.968, -0.251] < (-0.251, 0.464] < (0.464, 1.179] <\n (1.179, 1.893]]\n\nIn [132]: factor = pd.cut(arr, [-5, -1, 0, 1, 5])\n\nIn [133]: factor\nOut[133]: \n[(0, 1], (-1, 0], (0, 1], (0, 1], (-1, 0], ..., (-1, 0], (-1, 0], (-1, 0], (-1, 0], (-1, 0]]\nLength: 20\nCategories (4, interval[int64, right]): [(-5, -1] < (-1, 0] < (0, 1] < (1, 5]] \n```", "```py\nIn [134]: arr = np.random.randn(30)\n\nIn [135]: factor = pd.qcut(arr, [0, 0.25, 0.5, 0.75, 1])\n\nIn [136]: factor\nOut[136]: \n[(0.569, 1.184], (-2.278, -0.301], (-2.278, -0.301], (0.569, 1.184], (0.569, 1.184], ..., (-0.301, 0.569], (1.184, 2.346], (1.184, 2.346], (-0.301, 0.569], (-2.278, -0.301]]\nLength: 30\nCategories (4, interval[float64, right]): [(-2.278, -0.301] < (-0.301, 0.569] < (0.569, 1.184] <\n (1.184, 2.346]] \n```", "```py\nIn [137]: arr = np.random.randn(20)\n\nIn [138]: factor = pd.cut(arr, [-np.inf, 0, np.inf])\n\nIn [139]: factor\nOut[139]: \n[(-inf, 0.0], (0.0, inf], (0.0, inf], (-inf, 0.0], (-inf, 0.0], ..., (-inf, 0.0], (-inf, 0.0], (-inf, 0.0], (0.0, inf], (0.0, inf]]\nLength: 20\nCategories (2, interval[float64, right]): [(-inf, 0.0] < (0.0, inf]] \n```", "```py\nIn [94]: series = pd.Series(np.random.randn(1000))\n\nIn [95]: series[::2] = np.nan\n\nIn [96]: series.describe()\nOut[96]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\nmax        3.160915\ndtype: float64\n\nIn [97]: frame = pd.DataFrame(np.random.randn(1000, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [98]: frame.iloc[::2] = np.nan\n\nIn [99]: frame.describe()\nOut[99]: \n a           b           c           d           e\ncount  500.000000  500.000000  500.000000  500.000000  500.000000\nmean     0.033387    0.030045   -0.043719   -0.051686    0.005979\nstd      1.017152    0.978743    1.025270    1.015988    1.006695\nmin     -3.000951   -2.637901   -3.303099   -3.159200   -3.188821\n25%     -0.647623   -0.576449   -0.712369   -0.691338   -0.691115\n50%      0.047578   -0.021499   -0.023888   -0.032652   -0.025363\n75%      0.729907    0.775880    0.618896    0.670047    0.649748\nmax      2.740139    2.752332    3.004229    2.728702    3.240991 \n```", "```py\nIn [100]: series.describe(percentiles=[0.05, 0.25, 0.75, 0.95])\nOut[100]: \ncount    500.000000\nmean      -0.021292\nstd        1.015906\nmin       -2.683763\n5%        -1.645423\n25%       -0.699070\n50%       -0.069718\n75%        0.714483\n95%        1.711409\nmax        3.160915\ndtype: float64 \n```", "```py\nIn [101]: s = pd.Series([\"a\", \"a\", \"b\", \"b\", \"a\", \"a\", np.nan, \"c\", \"d\", \"a\"])\n\nIn [102]: s.describe()\nOut[102]: \ncount     9\nunique    4\ntop       a\nfreq      5\ndtype: object \n```", "```py\nIn [103]: frame = pd.DataFrame({\"a\": [\"Yes\", \"Yes\", \"No\", \"No\"], \"b\": range(4)})\n\nIn [104]: frame.describe()\nOut[104]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000 \n```", "```py\nIn [105]: frame.describe(include=[\"object\"])\nOut[105]: \n a\ncount     4\nunique    2\ntop     Yes\nfreq      2\n\nIn [106]: frame.describe(include=[\"number\"])\nOut[106]: \n b\ncount  4.000000\nmean   1.500000\nstd    1.290994\nmin    0.000000\n25%    0.750000\n50%    1.500000\n75%    2.250000\nmax    3.000000\n\nIn [107]: frame.describe(include=\"all\")\nOut[107]: \n a         b\ncount     4  4.000000\nunique    2       NaN\ntop     Yes       NaN\nfreq      2       NaN\nmean    NaN  1.500000\nstd     NaN  1.290994\nmin     NaN  0.000000\n25%     NaN  0.750000\n50%     NaN  1.500000\n75%     NaN  2.250000\nmax     NaN  3.000000 \n```", "```py\nIn [108]: s1 = pd.Series(np.random.randn(5))\n\nIn [109]: s1\nOut[109]: \n0    1.118076\n1   -0.352051\n2   -1.242883\n3   -1.277155\n4   -0.641184\ndtype: float64\n\nIn [110]: s1.idxmin(), s1.idxmax()\nOut[110]: (3, 0)\n\nIn [111]: df1 = pd.DataFrame(np.random.randn(5, 3), columns=[\"A\", \"B\", \"C\"])\n\nIn [112]: df1\nOut[112]: \n A         B         C\n0 -0.327863 -0.946180 -0.137570\n1 -0.186235 -0.257213 -0.486567\n2 -0.507027 -0.871259 -0.111110\n3  2.000339 -2.430505  0.089759\n4 -0.321434 -0.033695  0.096271\n\nIn [113]: df1.idxmin(axis=0)\nOut[113]: \nA    2\nB    3\nC    1\ndtype: int64\n\nIn [114]: df1.idxmax(axis=1)\nOut[114]: \n0    C\n1    A\n2    C\n3    A\n4    C\ndtype: object \n```", "```py\nIn [115]: df3 = pd.DataFrame([2, 1, 1, 3, np.nan], columns=[\"A\"], index=list(\"edcba\"))\n\nIn [116]: df3\nOut[116]: \n A\ne  2.0\nd  1.0\nc  1.0\nb  3.0\na  NaN\n\nIn [117]: df3[\"A\"].idxmin()\nOut[117]: 'd' \n```", "```py\nIn [118]: data = np.random.randint(0, 7, size=50)\n\nIn [119]: data\nOut[119]: \narray([6, 6, 2, 3, 5, 3, 2, 5, 4, 5, 4, 3, 4, 5, 0, 2, 0, 4, 2, 0, 3, 2,\n 2, 5, 6, 5, 3, 4, 6, 4, 3, 5, 6, 4, 3, 6, 2, 6, 6, 2, 3, 4, 2, 1,\n 6, 2, 6, 1, 5, 4])\n\nIn [120]: s = pd.Series(data)\n\nIn [121]: s.value_counts()\nOut[121]: \n6    10\n2    10\n4     9\n3     8\n5     8\n0     3\n1     2\nName: count, dtype: int64 \n```", "```py\nIn [122]: data = {\"a\": [1, 2, 3, 4], \"b\": [\"x\", \"x\", \"y\", \"y\"]}\n\nIn [123]: frame = pd.DataFrame(data)\n\nIn [124]: frame.value_counts()\nOut[124]: \na  b\n1  x    1\n2  x    1\n3  y    1\n4  y    1\nName: count, dtype: int64 \n```", "```py\nIn [125]: s5 = pd.Series([1, 1, 3, 3, 3, 5, 5, 7, 7, 7])\n\nIn [126]: s5.mode()\nOut[126]: \n0    3\n1    7\ndtype: int64\n\nIn [127]: df5 = pd.DataFrame(\n .....:    {\n .....:        \"A\": np.random.randint(0, 7, size=50),\n .....:        \"B\": np.random.randint(-10, 15, size=50),\n .....:    }\n .....: )\n .....: \n\nIn [128]: df5.mode()\nOut[128]: \n A   B\n0  1.0  -9\n1  NaN  10\n2  NaN  13 \n```", "```py\nIn [129]: arr = np.random.randn(20)\n\nIn [130]: factor = pd.cut(arr, 4)\n\nIn [131]: factor\nOut[131]: \n[(-0.251, 0.464], (-0.968, -0.251], (0.464, 1.179], (-0.251, 0.464], (-0.968, -0.251], ..., (-0.251, 0.464], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251], (-0.968, -0.251]]\nLength: 20\nCategories (4, interval[float64, right]): [(-0.968, -0.251] < (-0.251, 0.464] < (0.464, 1.179] <\n (1.179, 1.893]]\n\nIn [132]: factor = pd.cut(arr, [-5, -1, 0, 1, 5])\n\nIn [133]: factor\nOut[133]: \n[(0, 1], (-1, 0], (0, 1], (0, 1], (-1, 0], ..., (-1, 0], (-1, 0], (-1, 0], (-1, 0], (-1, 0]]\nLength: 20\nCategories (4, interval[int64, right]): [(-5, -1] < (-1, 0] < (0, 1] < (1, 5]] \n```", "```py\nIn [134]: arr = np.random.randn(30)\n\nIn [135]: factor = pd.qcut(arr, [0, 0.25, 0.5, 0.75, 1])\n\nIn [136]: factor\nOut[136]: \n[(0.569, 1.184], (-2.278, -0.301], (-2.278, -0.301], (0.569, 1.184], (0.569, 1.184], ..., (-0.301, 0.569], (1.184, 2.346], (1.184, 2.346], (-0.301, 0.569], (-2.278, -0.301]]\nLength: 30\nCategories (4, interval[float64, right]): [(-2.278, -0.301] < (-0.301, 0.569] < (0.569, 1.184] <\n (1.184, 2.346]] \n```", "```py\nIn [137]: arr = np.random.randn(20)\n\nIn [138]: factor = pd.cut(arr, [-np.inf, 0, np.inf])\n\nIn [139]: factor\nOut[139]: \n[(-inf, 0.0], (0.0, inf], (0.0, inf], (-inf, 0.0], (-inf, 0.0], ..., (-inf, 0.0], (-inf, 0.0], (-inf, 0.0], (0.0, inf], (0.0, inf]]\nLength: 20\nCategories (2, interval[float64, right]): [(-inf, 0.0] < (0.0, inf]] \n```", "```py\nIn [140]: def extract_city_name(df):\n .....: \"\"\"\n .....:    Chicago, IL -> Chicago for city_name column\n .....:    \"\"\"\n .....:    df[\"city_name\"] = df[\"city_and_code\"].str.split(\",\").str.get(0)\n .....:    return df\n .....: \n\nIn [141]: def add_country_name(df, country_name=None):\n .....: \"\"\"\n .....:    Chicago -> Chicago-US for city_name column\n .....:    \"\"\"\n .....:    col = \"city_name\"\n .....:    df[\"city_and_country\"] = df[col] + country_name\n .....:    return df\n .....: \n\nIn [142]: df_p = pd.DataFrame({\"city_and_code\": [\"Chicago, IL\"]}) \n```", "```py\nIn [143]: add_country_name(extract_city_name(df_p), country_name=\"US\")\nOut[143]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [144]: df_p.pipe(extract_city_name).pipe(add_country_name, country_name=\"US\")\nOut[144]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [147]: import statsmodels.formula.api as sm\n\nIn [148]: bb = pd.read_csv(\"data/baseball.csv\", index_col=\"id\")\n\nIn [149]: (\n .....:    bb.query(\"h > 0\")\n .....:    .assign(ln_h=lambda df: np.log(df.h))\n .....:    .pipe((sm.ols, \"data\"), \"hr ~ ln_h + year + g + C(lg)\")\n .....:    .fit()\n .....:    .summary()\n .....: )\n .....:\nOut[149]:\n<class 'statsmodels.iolib.summary.Summary'>\n\"\"\"\n OLS Regression Results\n==============================================================================\nDep. Variable:                     hr   R-squared:                       0.685\nModel:                            OLS   Adj. R-squared:                  0.665\nMethod:                 Least Squares   F-statistic:                     34.28\nDate:                Tue, 22 Nov 2022   Prob (F-statistic):           3.48e-15\nTime:                        05:34:17   Log-Likelihood:                -205.92\nNo. Observations:                  68   AIC:                             421.8\nDf Residuals:                      63   BIC:                             432.9\nDf Model:                           4\nCovariance Type:            nonrobust\n===============================================================================\n coef    std err          t      P>|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nIntercept   -8484.7720   4664.146     -1.819      0.074   -1.78e+04     835.780\nC(lg)[T.NL]    -2.2736      1.325     -1.716      0.091      -4.922       0.375\nln_h           -1.3542      0.875     -1.547      0.127      -3.103       0.395\nyear            4.2277      2.324      1.819      0.074      -0.417       8.872\ng               0.1841      0.029      6.258      0.000       0.125       0.243\n==============================================================================\nOmnibus:                       10.875   Durbin-Watson:                   1.999\nProb(Omnibus):                  0.004   Jarque-Bera (JB):               17.298\nSkew:                           0.537   Prob(JB):                     0.000175\nKurtosis:                       5.225   Cond. No.                     1.49e+07\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.49e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\"\"\" \n```", "```py\nIn [145]: df.apply(lambda x: np.mean(x))\nOut[145]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [146]: df.apply(lambda x: np.mean(x), axis=1)\nOut[146]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64\n\nIn [147]: df.apply(lambda x: x.max() - x.min())\nOut[147]: \none      1.051928\ntwo      1.632779\nthree    1.840607\ndtype: float64\n\nIn [148]: df.apply(np.cumsum)\nOut[148]: \n one       two     three\na  1.394981  1.772517       NaN\nb  1.738035  3.684640 -0.050390\nc  2.433281  5.163008  1.177045\nd       NaN  5.442353  0.563873\n\nIn [149]: df.apply(np.exp)\nOut[149]: \n one       two     three\na  4.034899  5.885648       NaN\nb  1.409244  6.767440  0.950858\nc  2.004201  4.385785  3.412466\nd       NaN  1.322262  0.541630 \n```", "```py\nIn [150]: df.apply(\"mean\")\nOut[150]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [151]: df.apply(\"mean\", axis=1)\nOut[151]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64 \n```", "```py\nIn [152]: tsdf = pd.DataFrame(\n .....:    np.random.randn(1000, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=1000),\n .....: )\n .....: \n\nIn [153]: tsdf.apply(lambda x: x.idxmax())\nOut[153]: \nA   2000-08-06\nB   2001-01-18\nC   2001-07-18\ndtype: datetime64[ns] \n```", "```py\nIn [154]: def subtract_and_divide(x, sub, divide=1):\n .....:    return (x - sub) / divide\n .....: \n\nIn [155]: df_udf = pd.DataFrame(np.ones((2, 2)))\n\nIn [156]: df_udf.apply(subtract_and_divide, args=(5,), divide=3)\nOut[156]: \n 0         1\n0 -1.333333 -1.333333\n1 -1.333333 -1.333333 \n```", "```py\nIn [157]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [158]: tsdf.iloc[3:7] = np.nan\n\nIn [159]: tsdf\nOut[159]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950\n\nIn [160]: tsdf.apply(pd.Series.interpolate)\nOut[160]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04 -1.098598 -0.889659  0.092225\n2000-01-05 -0.987349 -0.622526  0.321243\n2000-01-06 -0.876100 -0.355392  0.550262\n2000-01-07 -0.764851 -0.088259  0.779280\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950 \n```", "```py\nIn [161]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [162]: tsdf.iloc[3:7] = np.nan\n\nIn [163]: tsdf\nOut[163]: \n A         B         C\n2000-01-01  1.257606  1.004194  0.167574\n2000-01-02 -0.749892  0.288112 -0.757304\n2000-01-03 -0.207550 -0.298599  0.116018\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.814347 -0.257623  0.869226\n2000-01-09 -0.250663 -1.206601  0.896839\n2000-01-10  2.169758 -1.333363  0.283157 \n```", "```py\nIn [164]: tsdf.agg(lambda x: np.sum(x))\nOut[164]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\nIn [165]: tsdf.agg(\"sum\")\nOut[165]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\n# these are equivalent to a ``.sum()`` because we are aggregating\n# on a single function\nIn [166]: tsdf.sum()\nOut[166]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64 \n```", "```py\nIn [167]: tsdf[\"A\"].agg(\"sum\")\nOut[167]: 3.033606102414146 \n```", "```py\nIn [168]: tsdf.agg([\"sum\"])\nOut[168]: \n A         B        C\nsum  3.033606 -1.803879  1.57551 \n```", "```py\nIn [169]: tsdf.agg([\"sum\", \"mean\"])\nOut[169]: \n A         B         C\nsum   3.033606 -1.803879  1.575510\nmean  0.505601 -0.300647  0.262585 \n```", "```py\nIn [170]: tsdf[\"A\"].agg([\"sum\", \"mean\"])\nOut[170]: \nsum     3.033606\nmean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [171]: tsdf[\"A\"].agg([\"sum\", lambda x: x.mean()])\nOut[171]: \nsum         3.033606\n<lambda>    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [172]: def mymean(x):\n .....:    return x.mean()\n .....: \n\nIn [173]: tsdf[\"A\"].agg([\"sum\", mymean])\nOut[173]: \nsum       3.033606\nmymean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [174]: tsdf.agg({\"A\": \"mean\", \"B\": \"sum\"})\nOut[174]: \nA    0.505601\nB   -1.803879\ndtype: float64 \n```", "```py\nIn [175]: tsdf.agg({\"A\": [\"mean\", \"min\"], \"B\": \"sum\"})\nOut[175]: \n A         B\nmean  0.505601       NaN\nmin  -0.749892       NaN\nsum        NaN -1.803879 \n```", "```py\nIn [176]: from functools import partial\n\nIn [177]: q_25 = partial(pd.Series.quantile, q=0.25)\n\nIn [178]: q_25.__name__ = \"25%\"\n\nIn [179]: q_75 = partial(pd.Series.quantile, q=0.75)\n\nIn [180]: q_75.__name__ = \"75%\"\n\nIn [181]: tsdf.agg([\"count\", \"mean\", \"std\", \"min\", q_25, \"median\", q_75, \"max\"])\nOut[181]: \n A         B         C\ncount   6.000000  6.000000  6.000000\nmean    0.505601 -0.300647  0.262585\nstd     1.103362  0.887508  0.606860\nmin    -0.749892 -1.333363 -0.757304\n25%    -0.239885 -0.979600  0.128907\nmedian  0.303398 -0.278111  0.225365\n75%     1.146791  0.151678  0.722709\nmax     2.169758  1.004194  0.896839 \n```", "```py\nIn [182]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [183]: tsdf.iloc[3:7] = np.nan\n\nIn [184]: tsdf\nOut[184]: \n A         B         C\n2000-01-01 -0.428759 -0.864890 -0.675341\n2000-01-02 -0.168731  1.338144 -1.279321\n2000-01-03 -1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -1.240447 -0.201052\n2000-01-09 -0.157795  0.791197 -1.144209\n2000-01-10 -0.030876  0.371900  0.061932 \n```", "```py\nIn [185]: tsdf.transform(np.abs)\nOut[185]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [186]: tsdf.transform(\"abs\")\nOut[186]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [187]: tsdf.transform(lambda x: x.abs())\nOut[187]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [188]: np.abs(tsdf)\nOut[188]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [189]: tsdf[\"A\"].transform(np.abs)\nOut[189]: \n2000-01-01    0.428759\n2000-01-02    0.168731\n2000-01-03    1.621034\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06         NaN\n2000-01-07         NaN\n2000-01-08    0.254374\n2000-01-09    0.157795\n2000-01-10    0.030876\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [190]: tsdf.transform([np.abs, lambda x: x + 1])\nOut[190]: \n A                   B                   C \n absolute  <lambda>  absolute  <lambda>  absolute  <lambda>\n2000-01-01  0.428759  0.571241  0.864890  0.135110  0.675341  0.324659\n2000-01-02  0.168731  0.831269  1.338144  2.338144  1.279321 -0.279321\n2000-01-03  1.621034 -0.621034  0.438107  1.438107  0.903794  1.903794\n2000-01-04       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-08  0.254374  1.254374  1.240447 -0.240447  0.201052  0.798948\n2000-01-09  0.157795  0.842205  0.791197  1.791197  1.144209 -0.144209\n2000-01-10  0.030876  0.969124  0.371900  1.371900  0.061932  1.061932 \n```", "```py\nIn [191]: tsdf[\"A\"].transform([np.abs, lambda x: x + 1])\nOut[191]: \n absolute  <lambda>\n2000-01-01  0.428759  0.571241\n2000-01-02  0.168731  0.831269\n2000-01-03  1.621034 -0.621034\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374  1.254374\n2000-01-09  0.157795  0.842205\n2000-01-10  0.030876  0.969124 \n```", "```py\nIn [192]: tsdf.transform({\"A\": np.abs, \"B\": lambda x: x + 1})\nOut[192]: \n A         B\n2000-01-01  0.428759  0.135110\n2000-01-02  0.168731  2.338144\n2000-01-03  1.621034  1.438107\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374 -0.240447\n2000-01-09  0.157795  1.791197\n2000-01-10  0.030876  1.371900 \n```", "```py\nIn [193]: tsdf.transform({\"A\": np.abs, \"B\": [lambda x: x + 1, \"sqrt\"]})\nOut[193]: \n A         B \n absolute  <lambda>      sqrt\n2000-01-01  0.428759  0.135110       NaN\n2000-01-02  0.168731  2.338144  1.156782\n2000-01-03  1.621034  1.438107  0.661897\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -0.240447       NaN\n2000-01-09  0.157795  1.791197  0.889493\n2000-01-10  0.030876  1.371900  0.609836 \n```", "```py\nIn [194]: df4 = df.copy()\n\nIn [195]: df4\nOut[195]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [196]: def f(x):\n .....:    return len(str(x))\n .....: \n\nIn [197]: df4[\"one\"].map(f)\nOut[197]: \na    18\nb    19\nc    18\nd     3\nName: one, dtype: int64\n\nIn [198]: df4.map(f)\nOut[198]: \n one  two  three\na   18   17      3\nb   19   18     20\nc   18   18     16\nd    3   19     19 \n```", "```py\nIn [199]: s = pd.Series(\n .....:    [\"six\", \"seven\", \"six\", \"seven\", \"six\"], index=[\"a\", \"b\", \"c\", \"d\", \"e\"]\n .....: )\n .....: \n\nIn [200]: t = pd.Series({\"six\": 6.0, \"seven\": 7.0})\n\nIn [201]: s\nOut[201]: \na      six\nb    seven\nc      six\nd    seven\ne      six\ndtype: object\n\nIn [202]: s.map(t)\nOut[202]: \na    6.0\nb    7.0\nc    6.0\nd    7.0\ne    6.0\ndtype: float64 \n```", "```py\nIn [140]: def extract_city_name(df):\n .....: \"\"\"\n .....:    Chicago, IL -> Chicago for city_name column\n .....:    \"\"\"\n .....:    df[\"city_name\"] = df[\"city_and_code\"].str.split(\",\").str.get(0)\n .....:    return df\n .....: \n\nIn [141]: def add_country_name(df, country_name=None):\n .....: \"\"\"\n .....:    Chicago -> Chicago-US for city_name column\n .....:    \"\"\"\n .....:    col = \"city_name\"\n .....:    df[\"city_and_country\"] = df[col] + country_name\n .....:    return df\n .....: \n\nIn [142]: df_p = pd.DataFrame({\"city_and_code\": [\"Chicago, IL\"]}) \n```", "```py\nIn [143]: add_country_name(extract_city_name(df_p), country_name=\"US\")\nOut[143]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [144]: df_p.pipe(extract_city_name).pipe(add_country_name, country_name=\"US\")\nOut[144]: \n city_and_code city_name city_and_country\n0   Chicago, IL   Chicago        ChicagoUS \n```", "```py\nIn [147]: import statsmodels.formula.api as sm\n\nIn [148]: bb = pd.read_csv(\"data/baseball.csv\", index_col=\"id\")\n\nIn [149]: (\n .....:    bb.query(\"h > 0\")\n .....:    .assign(ln_h=lambda df: np.log(df.h))\n .....:    .pipe((sm.ols, \"data\"), \"hr ~ ln_h + year + g + C(lg)\")\n .....:    .fit()\n .....:    .summary()\n .....: )\n .....:\nOut[149]:\n<class 'statsmodels.iolib.summary.Summary'>\n\"\"\"\n OLS Regression Results\n==============================================================================\nDep. Variable:                     hr   R-squared:                       0.685\nModel:                            OLS   Adj. R-squared:                  0.665\nMethod:                 Least Squares   F-statistic:                     34.28\nDate:                Tue, 22 Nov 2022   Prob (F-statistic):           3.48e-15\nTime:                        05:34:17   Log-Likelihood:                -205.92\nNo. Observations:                  68   AIC:                             421.8\nDf Residuals:                      63   BIC:                             432.9\nDf Model:                           4\nCovariance Type:            nonrobust\n===============================================================================\n coef    std err          t      P>|t|      [0.025      0.975]\n-------------------------------------------------------------------------------\nIntercept   -8484.7720   4664.146     -1.819      0.074   -1.78e+04     835.780\nC(lg)[T.NL]    -2.2736      1.325     -1.716      0.091      -4.922       0.375\nln_h           -1.3542      0.875     -1.547      0.127      -3.103       0.395\nyear            4.2277      2.324      1.819      0.074      -0.417       8.872\ng               0.1841      0.029      6.258      0.000       0.125       0.243\n==============================================================================\nOmnibus:                       10.875   Durbin-Watson:                   1.999\nProb(Omnibus):                  0.004   Jarque-Bera (JB):               17.298\nSkew:                           0.537   Prob(JB):                     0.000175\nKurtosis:                       5.225   Cond. No.                     1.49e+07\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 1.49e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\"\"\" \n```", "```py\nIn [145]: df.apply(lambda x: np.mean(x))\nOut[145]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [146]: df.apply(lambda x: np.mean(x), axis=1)\nOut[146]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64\n\nIn [147]: df.apply(lambda x: x.max() - x.min())\nOut[147]: \none      1.051928\ntwo      1.632779\nthree    1.840607\ndtype: float64\n\nIn [148]: df.apply(np.cumsum)\nOut[148]: \n one       two     three\na  1.394981  1.772517       NaN\nb  1.738035  3.684640 -0.050390\nc  2.433281  5.163008  1.177045\nd       NaN  5.442353  0.563873\n\nIn [149]: df.apply(np.exp)\nOut[149]: \n one       two     three\na  4.034899  5.885648       NaN\nb  1.409244  6.767440  0.950858\nc  2.004201  4.385785  3.412466\nd       NaN  1.322262  0.541630 \n```", "```py\nIn [150]: df.apply(\"mean\")\nOut[150]: \none      0.811094\ntwo      1.360588\nthree    0.187958\ndtype: float64\n\nIn [151]: df.apply(\"mean\", axis=1)\nOut[151]: \na    1.583749\nb    0.734929\nc    1.133683\nd   -0.166914\ndtype: float64 \n```", "```py\nIn [152]: tsdf = pd.DataFrame(\n .....:    np.random.randn(1000, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=1000),\n .....: )\n .....: \n\nIn [153]: tsdf.apply(lambda x: x.idxmax())\nOut[153]: \nA   2000-08-06\nB   2001-01-18\nC   2001-07-18\ndtype: datetime64[ns] \n```", "```py\nIn [154]: def subtract_and_divide(x, sub, divide=1):\n .....:    return (x - sub) / divide\n .....: \n\nIn [155]: df_udf = pd.DataFrame(np.ones((2, 2)))\n\nIn [156]: df_udf.apply(subtract_and_divide, args=(5,), divide=3)\nOut[156]: \n 0         1\n0 -1.333333 -1.333333\n1 -1.333333 -1.333333 \n```", "```py\nIn [157]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [158]: tsdf.iloc[3:7] = np.nan\n\nIn [159]: tsdf\nOut[159]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950\n\nIn [160]: tsdf.apply(pd.Series.interpolate)\nOut[160]: \n A         B         C\n2000-01-01 -0.158131 -0.232466  0.321604\n2000-01-02 -1.810340 -3.105758  0.433834\n2000-01-03 -1.209847 -1.156793 -0.136794\n2000-01-04 -1.098598 -0.889659  0.092225\n2000-01-05 -0.987349 -0.622526  0.321243\n2000-01-06 -0.876100 -0.355392  0.550262\n2000-01-07 -0.764851 -0.088259  0.779280\n2000-01-08 -0.653602  0.178875  1.008298\n2000-01-09  1.007996  0.462824  0.254472\n2000-01-10  0.307473  0.600337  1.643950 \n```", "```py\nIn [161]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [162]: tsdf.iloc[3:7] = np.nan\n\nIn [163]: tsdf\nOut[163]: \n A         B         C\n2000-01-01  1.257606  1.004194  0.167574\n2000-01-02 -0.749892  0.288112 -0.757304\n2000-01-03 -0.207550 -0.298599  0.116018\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.814347 -0.257623  0.869226\n2000-01-09 -0.250663 -1.206601  0.896839\n2000-01-10  2.169758 -1.333363  0.283157 \n```", "```py\nIn [164]: tsdf.agg(lambda x: np.sum(x))\nOut[164]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\nIn [165]: tsdf.agg(\"sum\")\nOut[165]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64\n\n# these are equivalent to a ``.sum()`` because we are aggregating\n# on a single function\nIn [166]: tsdf.sum()\nOut[166]: \nA    3.033606\nB   -1.803879\nC    1.575510\ndtype: float64 \n```", "```py\nIn [167]: tsdf[\"A\"].agg(\"sum\")\nOut[167]: 3.033606102414146 \n```", "```py\nIn [168]: tsdf.agg([\"sum\"])\nOut[168]: \n A         B        C\nsum  3.033606 -1.803879  1.57551 \n```", "```py\nIn [169]: tsdf.agg([\"sum\", \"mean\"])\nOut[169]: \n A         B         C\nsum   3.033606 -1.803879  1.575510\nmean  0.505601 -0.300647  0.262585 \n```", "```py\nIn [170]: tsdf[\"A\"].agg([\"sum\", \"mean\"])\nOut[170]: \nsum     3.033606\nmean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [171]: tsdf[\"A\"].agg([\"sum\", lambda x: x.mean()])\nOut[171]: \nsum         3.033606\n<lambda>    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [172]: def mymean(x):\n .....:    return x.mean()\n .....: \n\nIn [173]: tsdf[\"A\"].agg([\"sum\", mymean])\nOut[173]: \nsum       3.033606\nmymean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [174]: tsdf.agg({\"A\": \"mean\", \"B\": \"sum\"})\nOut[174]: \nA    0.505601\nB   -1.803879\ndtype: float64 \n```", "```py\nIn [175]: tsdf.agg({\"A\": [\"mean\", \"min\"], \"B\": \"sum\"})\nOut[175]: \n A         B\nmean  0.505601       NaN\nmin  -0.749892       NaN\nsum        NaN -1.803879 \n```", "```py\nIn [176]: from functools import partial\n\nIn [177]: q_25 = partial(pd.Series.quantile, q=0.25)\n\nIn [178]: q_25.__name__ = \"25%\"\n\nIn [179]: q_75 = partial(pd.Series.quantile, q=0.75)\n\nIn [180]: q_75.__name__ = \"75%\"\n\nIn [181]: tsdf.agg([\"count\", \"mean\", \"std\", \"min\", q_25, \"median\", q_75, \"max\"])\nOut[181]: \n A         B         C\ncount   6.000000  6.000000  6.000000\nmean    0.505601 -0.300647  0.262585\nstd     1.103362  0.887508  0.606860\nmin    -0.749892 -1.333363 -0.757304\n25%    -0.239885 -0.979600  0.128907\nmedian  0.303398 -0.278111  0.225365\n75%     1.146791  0.151678  0.722709\nmax     2.169758  1.004194  0.896839 \n```", "```py\nIn [168]: tsdf.agg([\"sum\"])\nOut[168]: \n A         B        C\nsum  3.033606 -1.803879  1.57551 \n```", "```py\nIn [169]: tsdf.agg([\"sum\", \"mean\"])\nOut[169]: \n A         B         C\nsum   3.033606 -1.803879  1.575510\nmean  0.505601 -0.300647  0.262585 \n```", "```py\nIn [170]: tsdf[\"A\"].agg([\"sum\", \"mean\"])\nOut[170]: \nsum     3.033606\nmean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [171]: tsdf[\"A\"].agg([\"sum\", lambda x: x.mean()])\nOut[171]: \nsum         3.033606\n<lambda>    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [172]: def mymean(x):\n .....:    return x.mean()\n .....: \n\nIn [173]: tsdf[\"A\"].agg([\"sum\", mymean])\nOut[173]: \nsum       3.033606\nmymean    0.505601\nName: A, dtype: float64 \n```", "```py\nIn [174]: tsdf.agg({\"A\": \"mean\", \"B\": \"sum\"})\nOut[174]: \nA    0.505601\nB   -1.803879\ndtype: float64 \n```", "```py\nIn [175]: tsdf.agg({\"A\": [\"mean\", \"min\"], \"B\": \"sum\"})\nOut[175]: \n A         B\nmean  0.505601       NaN\nmin  -0.749892       NaN\nsum        NaN -1.803879 \n```", "```py\nIn [176]: from functools import partial\n\nIn [177]: q_25 = partial(pd.Series.quantile, q=0.25)\n\nIn [178]: q_25.__name__ = \"25%\"\n\nIn [179]: q_75 = partial(pd.Series.quantile, q=0.75)\n\nIn [180]: q_75.__name__ = \"75%\"\n\nIn [181]: tsdf.agg([\"count\", \"mean\", \"std\", \"min\", q_25, \"median\", q_75, \"max\"])\nOut[181]: \n A         B         C\ncount   6.000000  6.000000  6.000000\nmean    0.505601 -0.300647  0.262585\nstd     1.103362  0.887508  0.606860\nmin    -0.749892 -1.333363 -0.757304\n25%    -0.239885 -0.979600  0.128907\nmedian  0.303398 -0.278111  0.225365\n75%     1.146791  0.151678  0.722709\nmax     2.169758  1.004194  0.896839 \n```", "```py\nIn [182]: tsdf = pd.DataFrame(\n .....:    np.random.randn(10, 3),\n .....:    columns=[\"A\", \"B\", \"C\"],\n .....:    index=pd.date_range(\"1/1/2000\", periods=10),\n .....: )\n .....: \n\nIn [183]: tsdf.iloc[3:7] = np.nan\n\nIn [184]: tsdf\nOut[184]: \n A         B         C\n2000-01-01 -0.428759 -0.864890 -0.675341\n2000-01-02 -0.168731  1.338144 -1.279321\n2000-01-03 -1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -1.240447 -0.201052\n2000-01-09 -0.157795  0.791197 -1.144209\n2000-01-10 -0.030876  0.371900  0.061932 \n```", "```py\nIn [185]: tsdf.transform(np.abs)\nOut[185]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [186]: tsdf.transform(\"abs\")\nOut[186]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932\n\nIn [187]: tsdf.transform(lambda x: x.abs())\nOut[187]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [188]: np.abs(tsdf)\nOut[188]: \n A         B         C\n2000-01-01  0.428759  0.864890  0.675341\n2000-01-02  0.168731  1.338144  1.279321\n2000-01-03  1.621034  0.438107  0.903794\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374  1.240447  0.201052\n2000-01-09  0.157795  0.791197  1.144209\n2000-01-10  0.030876  0.371900  0.061932 \n```", "```py\nIn [189]: tsdf[\"A\"].transform(np.abs)\nOut[189]: \n2000-01-01    0.428759\n2000-01-02    0.168731\n2000-01-03    1.621034\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06         NaN\n2000-01-07         NaN\n2000-01-08    0.254374\n2000-01-09    0.157795\n2000-01-10    0.030876\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [190]: tsdf.transform([np.abs, lambda x: x + 1])\nOut[190]: \n A                   B                   C \n absolute  <lambda>  absolute  <lambda>  absolute  <lambda>\n2000-01-01  0.428759  0.571241  0.864890  0.135110  0.675341  0.324659\n2000-01-02  0.168731  0.831269  1.338144  2.338144  1.279321 -0.279321\n2000-01-03  1.621034 -0.621034  0.438107  1.438107  0.903794  1.903794\n2000-01-04       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-08  0.254374  1.254374  1.240447 -0.240447  0.201052  0.798948\n2000-01-09  0.157795  0.842205  0.791197  1.791197  1.144209 -0.144209\n2000-01-10  0.030876  0.969124  0.371900  1.371900  0.061932  1.061932 \n```", "```py\nIn [191]: tsdf[\"A\"].transform([np.abs, lambda x: x + 1])\nOut[191]: \n absolute  <lambda>\n2000-01-01  0.428759  0.571241\n2000-01-02  0.168731  0.831269\n2000-01-03  1.621034 -0.621034\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374  1.254374\n2000-01-09  0.157795  0.842205\n2000-01-10  0.030876  0.969124 \n```", "```py\nIn [192]: tsdf.transform({\"A\": np.abs, \"B\": lambda x: x + 1})\nOut[192]: \n A         B\n2000-01-01  0.428759  0.135110\n2000-01-02  0.168731  2.338144\n2000-01-03  1.621034  1.438107\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374 -0.240447\n2000-01-09  0.157795  1.791197\n2000-01-10  0.030876  1.371900 \n```", "```py\nIn [193]: tsdf.transform({\"A\": np.abs, \"B\": [lambda x: x + 1, \"sqrt\"]})\nOut[193]: \n A         B \n absolute  <lambda>      sqrt\n2000-01-01  0.428759  0.135110       NaN\n2000-01-02  0.168731  2.338144  1.156782\n2000-01-03  1.621034  1.438107  0.661897\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -0.240447       NaN\n2000-01-09  0.157795  1.791197  0.889493\n2000-01-10  0.030876  1.371900  0.609836 \n```", "```py\nIn [190]: tsdf.transform([np.abs, lambda x: x + 1])\nOut[190]: \n A                   B                   C \n absolute  <lambda>  absolute  <lambda>  absolute  <lambda>\n2000-01-01  0.428759  0.571241  0.864890  0.135110  0.675341  0.324659\n2000-01-02  0.168731  0.831269  1.338144  2.338144  1.279321 -0.279321\n2000-01-03  1.621034 -0.621034  0.438107  1.438107  0.903794  1.903794\n2000-01-04       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN       NaN       NaN       NaN\n2000-01-08  0.254374  1.254374  1.240447 -0.240447  0.201052  0.798948\n2000-01-09  0.157795  0.842205  0.791197  1.791197  1.144209 -0.144209\n2000-01-10  0.030876  0.969124  0.371900  1.371900  0.061932  1.061932 \n```", "```py\nIn [191]: tsdf[\"A\"].transform([np.abs, lambda x: x + 1])\nOut[191]: \n absolute  <lambda>\n2000-01-01  0.428759  0.571241\n2000-01-02  0.168731  0.831269\n2000-01-03  1.621034 -0.621034\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374  1.254374\n2000-01-09  0.157795  0.842205\n2000-01-10  0.030876  0.969124 \n```", "```py\nIn [192]: tsdf.transform({\"A\": np.abs, \"B\": lambda x: x + 1})\nOut[192]: \n A         B\n2000-01-01  0.428759  0.135110\n2000-01-02  0.168731  2.338144\n2000-01-03  1.621034  1.438107\n2000-01-04       NaN       NaN\n2000-01-05       NaN       NaN\n2000-01-06       NaN       NaN\n2000-01-07       NaN       NaN\n2000-01-08  0.254374 -0.240447\n2000-01-09  0.157795  1.791197\n2000-01-10  0.030876  1.371900 \n```", "```py\nIn [193]: tsdf.transform({\"A\": np.abs, \"B\": [lambda x: x + 1, \"sqrt\"]})\nOut[193]: \n A         B \n absolute  <lambda>      sqrt\n2000-01-01  0.428759  0.135110       NaN\n2000-01-02  0.168731  2.338144  1.156782\n2000-01-03  1.621034  1.438107  0.661897\n2000-01-04       NaN       NaN       NaN\n2000-01-05       NaN       NaN       NaN\n2000-01-06       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN\n2000-01-08  0.254374 -0.240447       NaN\n2000-01-09  0.157795  1.791197  0.889493\n2000-01-10  0.030876  1.371900  0.609836 \n```", "```py\nIn [194]: df4 = df.copy()\n\nIn [195]: df4\nOut[195]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [196]: def f(x):\n .....:    return len(str(x))\n .....: \n\nIn [197]: df4[\"one\"].map(f)\nOut[197]: \na    18\nb    19\nc    18\nd     3\nName: one, dtype: int64\n\nIn [198]: df4.map(f)\nOut[198]: \n one  two  three\na   18   17      3\nb   19   18     20\nc   18   18     16\nd    3   19     19 \n```", "```py\nIn [199]: s = pd.Series(\n .....:    [\"six\", \"seven\", \"six\", \"seven\", \"six\"], index=[\"a\", \"b\", \"c\", \"d\", \"e\"]\n .....: )\n .....: \n\nIn [200]: t = pd.Series({\"six\": 6.0, \"seven\": 7.0})\n\nIn [201]: s\nOut[201]: \na      six\nb    seven\nc      six\nd    seven\ne      six\ndtype: object\n\nIn [202]: s.map(t)\nOut[202]: \na    6.0\nb    7.0\nc    6.0\nd    7.0\ne    6.0\ndtype: float64 \n```", "```py\nIn [203]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [204]: s\nOut[204]: \na    1.695148\nb    1.328614\nc    1.234686\nd   -0.385845\ne   -1.326508\ndtype: float64\n\nIn [205]: s.reindex([\"e\", \"b\", \"f\", \"d\"])\nOut[205]: \ne   -1.326508\nb    1.328614\nf         NaN\nd   -0.385845\ndtype: float64 \n```", "```py\nIn [206]: df\nOut[206]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [207]: df.reindex(index=[\"c\", \"f\", \"b\"], columns=[\"three\", \"two\", \"one\"])\nOut[207]: \n three       two       one\nc  1.227435  1.478369  0.695246\nf       NaN       NaN       NaN\nb -0.050390  1.912123  0.343054 \n```", "```py\nIn [208]: rs = s.reindex(df.index)\n\nIn [209]: rs\nOut[209]: \na    1.695148\nb    1.328614\nc    1.234686\nd   -0.385845\ndtype: float64\n\nIn [210]: rs.index is df.index\nOut[210]: True \n```", "```py\nIn [211]: df.reindex([\"c\", \"f\", \"b\"], axis=\"index\")\nOut[211]: \n one       two     three\nc  0.695246  1.478369  1.227435\nf       NaN       NaN       NaN\nb  0.343054  1.912123 -0.050390\n\nIn [212]: df.reindex([\"three\", \"two\", \"one\"], axis=\"columns\")\nOut[212]: \n three       two       one\na       NaN  1.772517  1.394981\nb -0.050390  1.912123  0.343054\nc  1.227435  1.478369  0.695246\nd -0.613172  0.279344       NaN \n```", "```py\nIn [213]: df2 = df.reindex([\"a\", \"b\", \"c\"], columns=[\"one\", \"two\"])\n\nIn [214]: df3 = df2 - df2.mean()\n\nIn [215]: df2\nOut[215]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369\n\nIn [216]: df3\nOut[216]: \n one       two\na  0.583888  0.051514\nb -0.468040  0.191120\nc -0.115848 -0.242634\n\nIn [217]: df.reindex_like(df2)\nOut[217]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369 \n```", "```py\nIn [218]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [219]: s1 = s[:4]\n\nIn [220]: s2 = s[1:]\n\nIn [221]: s1.align(s2)\nOut[221]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e         NaN\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e    1.114285\n dtype: float64)\n\nIn [222]: s1.align(s2, join=\"inner\")\nOut[222]: \n(b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64)\n\nIn [223]: s1.align(s2, join=\"left\")\nOut[223]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64) \n```", "```py\nIn [224]: df.align(df2, join=\"inner\")\nOut[224]: \n(        one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [225]: df.align(df2, join=\"inner\", axis=0)\nOut[225]: \n(        one       two     three\n a  1.394981  1.772517       NaN\n b  0.343054  1.912123 -0.050390\n c  0.695246  1.478369  1.227435,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [226]: df.align(df2.iloc[0], axis=1)\nOut[226]: \n(        one     three       two\n a  1.394981       NaN  1.772517\n b  0.343054 -0.050390  1.912123\n c  0.695246  1.227435  1.478369\n d       NaN -0.613172  0.279344,\n one      1.394981\n three         NaN\n two      1.772517\n Name: a, dtype: float64) \n```", "```py\nIn [227]: rng = pd.date_range(\"1/3/2000\", periods=8)\n\nIn [228]: ts = pd.Series(np.random.randn(8), index=rng)\n\nIn [229]: ts2 = ts.iloc[[0, 3, 6]]\n\nIn [230]: ts\nOut[230]: \n2000-01-03    0.183051\n2000-01-04    0.400528\n2000-01-05   -0.015083\n2000-01-06    2.395489\n2000-01-07    1.414806\n2000-01-08    0.118428\n2000-01-09    0.733639\n2000-01-10   -0.936077\nFreq: D, dtype: float64\n\nIn [231]: ts2\nOut[231]: \n2000-01-03    0.183051\n2000-01-06    2.395489\n2000-01-09    0.733639\nFreq: 3D, dtype: float64\n\nIn [232]: ts2.reindex(ts.index)\nOut[232]: \n2000-01-03    0.183051\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07         NaN\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [233]: ts2.reindex(ts.index, method=\"ffill\")\nOut[233]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64\n\nIn [234]: ts2.reindex(ts.index, method=\"bfill\")\nOut[234]: \n2000-01-03    0.183051\n2000-01-04    2.395489\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    0.733639\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [235]: ts2.reindex(ts.index, method=\"nearest\")\nOut[235]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [236]: ts2.reindex(ts.index).ffill()\nOut[236]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [237]: ts2.reindex(ts.index, method=\"ffill\", limit=1)\nOut[237]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [238]: ts2.reindex(ts.index, method=\"ffill\", tolerance=\"1 day\")\nOut[238]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [239]: df\nOut[239]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [240]: df.drop([\"a\", \"d\"], axis=0)\nOut[240]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\n\nIn [241]: df.drop([\"one\"], axis=1)\nOut[241]: \n two     three\na  1.772517       NaN\nb  1.912123 -0.050390\nc  1.478369  1.227435\nd  0.279344 -0.613172 \n```", "```py\nIn [242]: df.reindex(df.index.difference([\"a\", \"d\"]))\nOut[242]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435 \n```", "```py\nIn [243]: s\nOut[243]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\ndtype: float64\n\nIn [244]: s.rename(str.upper)\nOut[244]: \nA   -0.186646\nB   -1.692424\nC   -0.303893\nD   -1.425662\nE    1.114285\ndtype: float64 \n```", "```py\nIn [245]: df.rename(\n .....:    columns={\"one\": \"foo\", \"two\": \"bar\"},\n .....:    index={\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"},\n .....: )\n .....: \nOut[245]: \n foo       bar     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [246]: df.rename({\"one\": \"foo\", \"two\": \"bar\"}, axis=\"columns\")\nOut[246]: \n foo       bar     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [247]: df.rename({\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"}, axis=\"index\")\nOut[247]: \n one       two     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [248]: s.rename(\"scalar-name\")\nOut[248]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\nName: scalar-name, dtype: float64 \n```", "```py\nIn [249]: df = pd.DataFrame(\n .....:    {\"x\": [1, 2, 3, 4, 5, 6], \"y\": [10, 20, 30, 40, 50, 60]},\n .....:    index=pd.MultiIndex.from_product(\n .....:        [[\"a\", \"b\", \"c\"], [1, 2]], names=[\"let\", \"num\"]\n .....:    ),\n .....: )\n .....: \n\nIn [250]: df\nOut[250]: \n x   y\nlet num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [251]: df.rename_axis(index={\"let\": \"abc\"})\nOut[251]: \n x   y\nabc num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [252]: df.rename_axis(index=str.upper)\nOut[252]: \n x   y\nLET NUM \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60 \n```", "```py\nIn [213]: df2 = df.reindex([\"a\", \"b\", \"c\"], columns=[\"one\", \"two\"])\n\nIn [214]: df3 = df2 - df2.mean()\n\nIn [215]: df2\nOut[215]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369\n\nIn [216]: df3\nOut[216]: \n one       two\na  0.583888  0.051514\nb -0.468040  0.191120\nc -0.115848 -0.242634\n\nIn [217]: df.reindex_like(df2)\nOut[217]: \n one       two\na  1.394981  1.772517\nb  0.343054  1.912123\nc  0.695246  1.478369 \n```", "```py\nIn [218]: s = pd.Series(np.random.randn(5), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [219]: s1 = s[:4]\n\nIn [220]: s2 = s[1:]\n\nIn [221]: s1.align(s2)\nOut[221]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e         NaN\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n e    1.114285\n dtype: float64)\n\nIn [222]: s1.align(s2, join=\"inner\")\nOut[222]: \n(b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64)\n\nIn [223]: s1.align(s2, join=\"left\")\nOut[223]: \n(a   -0.186646\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64,\n a         NaN\n b   -1.692424\n c   -0.303893\n d   -1.425662\n dtype: float64) \n```", "```py\nIn [224]: df.align(df2, join=\"inner\")\nOut[224]: \n(        one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [225]: df.align(df2, join=\"inner\", axis=0)\nOut[225]: \n(        one       two     three\n a  1.394981  1.772517       NaN\n b  0.343054  1.912123 -0.050390\n c  0.695246  1.478369  1.227435,\n one       two\n a  1.394981  1.772517\n b  0.343054  1.912123\n c  0.695246  1.478369) \n```", "```py\nIn [226]: df.align(df2.iloc[0], axis=1)\nOut[226]: \n(        one     three       two\n a  1.394981       NaN  1.772517\n b  0.343054 -0.050390  1.912123\n c  0.695246  1.227435  1.478369\n d       NaN -0.613172  0.279344,\n one      1.394981\n three         NaN\n two      1.772517\n Name: a, dtype: float64) \n```", "```py\nIn [227]: rng = pd.date_range(\"1/3/2000\", periods=8)\n\nIn [228]: ts = pd.Series(np.random.randn(8), index=rng)\n\nIn [229]: ts2 = ts.iloc[[0, 3, 6]]\n\nIn [230]: ts\nOut[230]: \n2000-01-03    0.183051\n2000-01-04    0.400528\n2000-01-05   -0.015083\n2000-01-06    2.395489\n2000-01-07    1.414806\n2000-01-08    0.118428\n2000-01-09    0.733639\n2000-01-10   -0.936077\nFreq: D, dtype: float64\n\nIn [231]: ts2\nOut[231]: \n2000-01-03    0.183051\n2000-01-06    2.395489\n2000-01-09    0.733639\nFreq: 3D, dtype: float64\n\nIn [232]: ts2.reindex(ts.index)\nOut[232]: \n2000-01-03    0.183051\n2000-01-04         NaN\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07         NaN\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [233]: ts2.reindex(ts.index, method=\"ffill\")\nOut[233]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64\n\nIn [234]: ts2.reindex(ts.index, method=\"bfill\")\nOut[234]: \n2000-01-03    0.183051\n2000-01-04    2.395489\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    0.733639\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10         NaN\nFreq: D, dtype: float64\n\nIn [235]: ts2.reindex(ts.index, method=\"nearest\")\nOut[235]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    2.395489\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    0.733639\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [236]: ts2.reindex(ts.index).ffill()\nOut[236]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05    0.183051\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08    2.395489\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [237]: ts2.reindex(ts.index, method=\"ffill\", limit=1)\nOut[237]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [238]: ts2.reindex(ts.index, method=\"ffill\", tolerance=\"1 day\")\nOut[238]: \n2000-01-03    0.183051\n2000-01-04    0.183051\n2000-01-05         NaN\n2000-01-06    2.395489\n2000-01-07    2.395489\n2000-01-08         NaN\n2000-01-09    0.733639\n2000-01-10    0.733639\nFreq: D, dtype: float64 \n```", "```py\nIn [239]: df\nOut[239]: \n one       two     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [240]: df.drop([\"a\", \"d\"], axis=0)\nOut[240]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\n\nIn [241]: df.drop([\"one\"], axis=1)\nOut[241]: \n two     three\na  1.772517       NaN\nb  1.912123 -0.050390\nc  1.478369  1.227435\nd  0.279344 -0.613172 \n```", "```py\nIn [242]: df.reindex(df.index.difference([\"a\", \"d\"]))\nOut[242]: \n one       two     three\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435 \n```", "```py\nIn [243]: s\nOut[243]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\ndtype: float64\n\nIn [244]: s.rename(str.upper)\nOut[244]: \nA   -0.186646\nB   -1.692424\nC   -0.303893\nD   -1.425662\nE    1.114285\ndtype: float64 \n```", "```py\nIn [245]: df.rename(\n .....:    columns={\"one\": \"foo\", \"two\": \"bar\"},\n .....:    index={\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"},\n .....: )\n .....: \nOut[245]: \n foo       bar     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [246]: df.rename({\"one\": \"foo\", \"two\": \"bar\"}, axis=\"columns\")\nOut[246]: \n foo       bar     three\na  1.394981  1.772517       NaN\nb  0.343054  1.912123 -0.050390\nc  0.695246  1.478369  1.227435\nd       NaN  0.279344 -0.613172\n\nIn [247]: df.rename({\"a\": \"apple\", \"b\": \"banana\", \"d\": \"durian\"}, axis=\"index\")\nOut[247]: \n one       two     three\napple   1.394981  1.772517       NaN\nbanana  0.343054  1.912123 -0.050390\nc       0.695246  1.478369  1.227435\ndurian       NaN  0.279344 -0.613172 \n```", "```py\nIn [248]: s.rename(\"scalar-name\")\nOut[248]: \na   -0.186646\nb   -1.692424\nc   -0.303893\nd   -1.425662\ne    1.114285\nName: scalar-name, dtype: float64 \n```", "```py\nIn [249]: df = pd.DataFrame(\n .....:    {\"x\": [1, 2, 3, 4, 5, 6], \"y\": [10, 20, 30, 40, 50, 60]},\n .....:    index=pd.MultiIndex.from_product(\n .....:        [[\"a\", \"b\", \"c\"], [1, 2]], names=[\"let\", \"num\"]\n .....:    ),\n .....: )\n .....: \n\nIn [250]: df\nOut[250]: \n x   y\nlet num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [251]: df.rename_axis(index={\"let\": \"abc\"})\nOut[251]: \n x   y\nabc num \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60\n\nIn [252]: df.rename_axis(index=str.upper)\nOut[252]: \n x   y\nLET NUM \na   1    1  10\n 2    2  20\nb   1    3  30\n 2    4  40\nc   1    5  50\n 2    6  60 \n```", "```py\nIn [253]: df = pd.DataFrame(\n .....:    {\"col1\": np.random.randn(3), \"col2\": np.random.randn(3)}, index=[\"a\", \"b\", \"c\"]\n .....: )\n .....: \n\nIn [254]: for col in df:\n .....:    print(col)\n .....: \ncol1\ncol2 \n```", "```py\nIn [255]: df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [\"a\", \"b\", \"c\"]})\n\nIn [256]: for index, row in df.iterrows():\n .....:    row[\"a\"] = 10\n .....: \n\nIn [257]: df\nOut[257]: \n a  b\n0  1  a\n1  2  b\n2  3  c \n```", "```py\nIn [258]: for label, ser in df.items():\n .....:    print(label)\n .....:    print(ser)\n .....: \na\n0    1\n1    2\n2    3\nName: a, dtype: int64\nb\n0    a\n1    b\n2    c\nName: b, dtype: object \n```", "```py\nIn [259]: for row_index, row in df.iterrows():\n .....:    print(row_index, row, sep=\"\\n\")\n .....: \n0\na    1\nb    a\nName: 0, dtype: object\n1\na    2\nb    b\nName: 1, dtype: object\n2\na    3\nb    c\nName: 2, dtype: object \n```", "```py\nIn [260]: df_orig = pd.DataFrame([[1, 1.5]], columns=[\"int\", \"float\"])\n\nIn [261]: df_orig.dtypes\nOut[261]: \nint        int64\nfloat    float64\ndtype: object\n\nIn [262]: row = next(df_orig.iterrows())[1]\n\nIn [263]: row\nOut[263]: \nint      1.0\nfloat    1.5\nName: 0, dtype: float64 \n```", "```py\nIn [264]: row[\"int\"].dtype\nOut[264]: dtype('float64')\n\nIn [265]: df_orig[\"int\"].dtype\nOut[265]: dtype('int64') \n```", "```py\nIn [266]: df2 = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\nIn [267]: print(df2)\n x  y\n0  1  4\n1  2  5\n2  3  6\n\nIn [268]: print(df2.T)\n 0  1  2\nx  1  2  3\ny  4  5  6\n\nIn [269]: df2_t = pd.DataFrame({idx: values for idx, values in df2.iterrows()})\n\nIn [270]: print(df2_t)\n 0  1  2\nx  1  2  3\ny  4  5  6 \n```", "```py\nIn [271]: for row in df.itertuples():\n .....:    print(row)\n .....: \nPandas(Index=0, a=1, b='a')\nPandas(Index=1, a=2, b='b')\nPandas(Index=2, a=3, b='c') \n```", "```py\nIn [258]: for label, ser in df.items():\n .....:    print(label)\n .....:    print(ser)\n .....: \na\n0    1\n1    2\n2    3\nName: a, dtype: int64\nb\n0    a\n1    b\n2    c\nName: b, dtype: object \n```", "```py\nIn [259]: for row_index, row in df.iterrows():\n .....:    print(row_index, row, sep=\"\\n\")\n .....: \n0\na    1\nb    a\nName: 0, dtype: object\n1\na    2\nb    b\nName: 1, dtype: object\n2\na    3\nb    c\nName: 2, dtype: object \n```", "```py\nIn [260]: df_orig = pd.DataFrame([[1, 1.5]], columns=[\"int\", \"float\"])\n\nIn [261]: df_orig.dtypes\nOut[261]: \nint        int64\nfloat    float64\ndtype: object\n\nIn [262]: row = next(df_orig.iterrows())[1]\n\nIn [263]: row\nOut[263]: \nint      1.0\nfloat    1.5\nName: 0, dtype: float64 \n```", "```py\nIn [264]: row[\"int\"].dtype\nOut[264]: dtype('float64')\n\nIn [265]: df_orig[\"int\"].dtype\nOut[265]: dtype('int64') \n```", "```py\nIn [266]: df2 = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]})\n\nIn [267]: print(df2)\n x  y\n0  1  4\n1  2  5\n2  3  6\n\nIn [268]: print(df2.T)\n 0  1  2\nx  1  2  3\ny  4  5  6\n\nIn [269]: df2_t = pd.DataFrame({idx: values for idx, values in df2.iterrows()})\n\nIn [270]: print(df2_t)\n 0  1  2\nx  1  2  3\ny  4  5  6 \n```", "```py\nIn [271]: for row in df.itertuples():\n .....:    print(row)\n .....: \nPandas(Index=0, a=1, b='a')\nPandas(Index=1, a=2, b='b')\nPandas(Index=2, a=3, b='c') \n```", "```py\n# datetime\nIn [272]: s = pd.Series(pd.date_range(\"20130101 09:10:12\", periods=4))\n\nIn [273]: s\nOut[273]: \n0   2013-01-01 09:10:12\n1   2013-01-02 09:10:12\n2   2013-01-03 09:10:12\n3   2013-01-04 09:10:12\ndtype: datetime64[ns]\n\nIn [274]: s.dt.hour\nOut[274]: \n0    9\n1    9\n2    9\n3    9\ndtype: int32\n\nIn [275]: s.dt.second\nOut[275]: \n0    12\n1    12\n2    12\n3    12\ndtype: int32\n\nIn [276]: s.dt.day\nOut[276]: \n0    1\n1    2\n2    3\n3    4\ndtype: int32 \n```", "```py\nIn [277]: s[s.dt.day == 2]\nOut[277]: \n1   2013-01-02 09:10:12\ndtype: datetime64[ns] \n```", "```py\nIn [278]: stz = s.dt.tz_localize(\"US/Eastern\")\n\nIn [279]: stz\nOut[279]: \n0   2013-01-01 09:10:12-05:00\n1   2013-01-02 09:10:12-05:00\n2   2013-01-03 09:10:12-05:00\n3   2013-01-04 09:10:12-05:00\ndtype: datetime64[ns, US/Eastern]\n\nIn [280]: stz.dt.tz\nOut[280]: <DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD> \n```", "```py\nIn [281]: s.dt.tz_localize(\"UTC\").dt.tz_convert(\"US/Eastern\")\nOut[281]: \n0   2013-01-01 04:10:12-05:00\n1   2013-01-02 04:10:12-05:00\n2   2013-01-03 04:10:12-05:00\n3   2013-01-04 04:10:12-05:00\ndtype: datetime64[ns, US/Eastern] \n```", "```py\n# DatetimeIndex\nIn [282]: s = pd.Series(pd.date_range(\"20130101\", periods=4))\n\nIn [283]: s\nOut[283]: \n0   2013-01-01\n1   2013-01-02\n2   2013-01-03\n3   2013-01-04\ndtype: datetime64[ns]\n\nIn [284]: s.dt.strftime(\"%Y/%m/%d\")\nOut[284]: \n0    2013/01/01\n1    2013/01/02\n2    2013/01/03\n3    2013/01/04\ndtype: object \n```", "```py\n# PeriodIndex\nIn [285]: s = pd.Series(pd.period_range(\"20130101\", periods=4))\n\nIn [286]: s\nOut[286]: \n0    2013-01-01\n1    2013-01-02\n2    2013-01-03\n3    2013-01-04\ndtype: period[D]\n\nIn [287]: s.dt.strftime(\"%Y/%m/%d\")\nOut[287]: \n0    2013/01/01\n1    2013/01/02\n2    2013/01/03\n3    2013/01/04\ndtype: object \n```", "```py\n# period\nIn [288]: s = pd.Series(pd.period_range(\"20130101\", periods=4, freq=\"D\"))\n\nIn [289]: s\nOut[289]: \n0    2013-01-01\n1    2013-01-02\n2    2013-01-03\n3    2013-01-04\ndtype: period[D]\n\nIn [290]: s.dt.year\nOut[290]: \n0    2013\n1    2013\n2    2013\n3    2013\ndtype: int64\n\nIn [291]: s.dt.day\nOut[291]: \n0    1\n1    2\n2    3\n3    4\ndtype: int64 \n```", "```py\n# timedelta\nIn [292]: s = pd.Series(pd.timedelta_range(\"1 day 00:00:05\", periods=4, freq=\"s\"))\n\nIn [293]: s\nOut[293]: \n0   1 days 00:00:05\n1   1 days 00:00:06\n2   1 days 00:00:07\n3   1 days 00:00:08\ndtype: timedelta64[ns]\n\nIn [294]: s.dt.days\nOut[294]: \n0    1\n1    1\n2    1\n3    1\ndtype: int64\n\nIn [295]: s.dt.seconds\nOut[295]: \n0    5\n1    6\n2    7\n3    8\ndtype: int32\n\nIn [296]: s.dt.components\nOut[296]: \n days  hours  minutes  seconds  milliseconds  microseconds  nanoseconds\n0     1      0        0        5             0             0            0\n1     1      0        0        6             0             0            0\n2     1      0        0        7             0             0            0\n3     1      0        0        8             0             0            0 \n```", "```py\n> In [297]: s = pd.Series(\n>  .....:    [\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"], dtype=\"string\"\n>  .....: )\n>  .....: \n> \n> In [298]: s.str.lower()\n> Out[298]: \n> 0       a\n> 1       b\n> 2       c\n> 3    aaba\n> 4    baca\n> 5    <NA>\n> 6    caba\n> 7     dog\n> 8     cat\n> dtype: string \n> ```", "```py\nIn [299]: df = pd.DataFrame(\n .....:    {\n .....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n .....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n .....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n .....:    }\n .....: )\n .....: \n\nIn [300]: unsorted_df = df.reindex(\n .....:    index=[\"a\", \"d\", \"c\", \"b\"], columns=[\"three\", \"two\", \"one\"]\n .....: )\n .....: \n\nIn [301]: unsorted_df\nOut[301]: \n three       two       one\na       NaN -1.152244  0.562973\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\n\n# DataFrame\nIn [302]: unsorted_df.sort_index()\nOut[302]: \n three       two       one\na       NaN -1.152244  0.562973\nb -0.098217  0.009797 -1.299504\nc  1.273388 -0.167123  0.640382\nd -0.252916 -0.109597       NaN\n\nIn [303]: unsorted_df.sort_index(ascending=False)\nOut[303]: \n three       two       one\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\na       NaN -1.152244  0.562973\n\nIn [304]: unsorted_df.sort_index(axis=1)\nOut[304]: \n one     three       two\na  0.562973       NaN -1.152244\nd       NaN -0.252916 -0.109597\nc  0.640382  1.273388 -0.167123\nb -1.299504 -0.098217  0.009797\n\n# Series\nIn [305]: unsorted_df[\"three\"].sort_index()\nOut[305]: \na         NaN\nb   -0.098217\nc    1.273388\nd   -0.252916\nName: three, dtype: float64 \n```", "```py\nIn [306]: s1 = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3], \"c\": [2, 3, 4]}).set_index(\n .....:    list(\"ab\")\n .....: )\n .....: \n\nIn [307]: s1\nOut[307]: \n c\na b \nB 1  2\na 2  3\nC 3  4 \n```", "```py\nIn [308]: s1.sort_index(level=\"a\")\nOut[308]: \n c\na b \nB 1  2\nC 3  4\na 2  3\n\nIn [309]: s1.sort_index(level=\"a\", key=lambda idx: idx.str.lower())\nOut[309]: \n c\na b \na 2  3\nB 1  2\nC 3  4 \n```", "```py\nIn [310]: df1 = pd.DataFrame(\n .....:    {\"one\": [2, 1, 1, 1], \"two\": [1, 3, 2, 4], \"three\": [5, 4, 3, 2]}\n .....: )\n .....: \n\nIn [311]: df1.sort_values(by=\"two\")\nOut[311]: \n one  two  three\n0    2    1      5\n2    1    2      3\n1    1    3      4\n3    1    4      2 \n```", "```py\nIn [312]: df1[[\"one\", \"two\", \"three\"]].sort_values(by=[\"one\", \"two\"])\nOut[312]: \n one  two  three\n2    1    2      3\n1    1    3      4\n3    1    4      2\n0    2    1      5 \n```", "```py\nIn [313]: s[2] = np.nan\n\nIn [314]: s.sort_values()\nOut[314]: \n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\n2    <NA>\n5    <NA>\ndtype: string\n\nIn [315]: s.sort_values(na_position=\"first\")\nOut[315]: \n2    <NA>\n5    <NA>\n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\ndtype: string \n```", "```py\nIn [316]: s1 = pd.Series([\"B\", \"a\", \"C\"]) \n```", "```py\nIn [317]: s1.sort_values()\nOut[317]: \n0    B\n2    C\n1    a\ndtype: object\n\nIn [318]: s1.sort_values(key=lambda x: x.str.lower())\nOut[318]: \n1    a\n0    B\n2    C\ndtype: object \n```", "```py\nIn [319]: df = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3]}) \n```", "```py\nIn [320]: df.sort_values(by=\"a\")\nOut[320]: \n a  b\n0  B  1\n2  C  3\n1  a  2\n\nIn [321]: df.sort_values(by=\"a\", key=lambda col: col.str.lower())\nOut[321]: \n a  b\n1  a  2\n0  B  1\n2  C  3 \n```", "```py\n# Build MultiIndex\nIn [322]: idx = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", 1), (\"a\", 2), (\"a\", 2), (\"b\", 2), (\"b\", 1), (\"b\", 1)]\n .....: )\n .....: \n\nIn [323]: idx.names = [\"first\", \"second\"]\n\n# Build DataFrame\nIn [324]: df_multi = pd.DataFrame({\"A\": np.arange(6, 0, -1)}, index=idx)\n\nIn [325]: df_multi\nOut[325]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1 \n```", "```py\nIn [326]: df_multi.sort_values(by=[\"second\", \"A\"])\nOut[326]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5 \n```", "```py\nIn [327]: ser = pd.Series([1, 2, 3])\n\nIn [328]: ser.searchsorted([0, 3])\nOut[328]: array([0, 2])\n\nIn [329]: ser.searchsorted([0, 4])\nOut[329]: array([0, 3])\n\nIn [330]: ser.searchsorted([1, 3], side=\"right\")\nOut[330]: array([1, 3])\n\nIn [331]: ser.searchsorted([1, 3], side=\"left\")\nOut[331]: array([0, 2])\n\nIn [332]: ser = pd.Series([3, 1, 2])\n\nIn [333]: ser.searchsorted([0, 3], sorter=np.argsort(ser))\nOut[333]: array([0, 2]) \n```", "```py\nIn [334]: s = pd.Series(np.random.permutation(10))\n\nIn [335]: s\nOut[335]: \n0    2\n1    0\n2    3\n3    7\n4    1\n5    5\n6    9\n7    6\n8    8\n9    4\ndtype: int64\n\nIn [336]: s.sort_values()\nOut[336]: \n1    0\n4    1\n0    2\n2    3\n9    4\n5    5\n7    6\n3    7\n8    8\n6    9\ndtype: int64\n\nIn [337]: s.nsmallest(3)\nOut[337]: \n1    0\n4    1\n0    2\ndtype: int64\n\nIn [338]: s.nlargest(3)\nOut[338]: \n6    9\n8    8\n3    7\ndtype: int64 \n```", "```py\nIn [339]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [-2, -1, 1, 10, 8, 11, -1],\n .....:        \"b\": list(\"abdceff\"),\n .....:        \"c\": [1.0, 2.0, 4.0, 3.2, np.nan, 3.0, 4.0],\n .....:    }\n .....: )\n .....: \n\nIn [340]: df.nlargest(3, \"a\")\nOut[340]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n\nIn [341]: df.nlargest(5, [\"a\", \"c\"])\nOut[341]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n2   1  d  4.0\n6  -1  f  4.0\n\nIn [342]: df.nsmallest(3, \"a\")\nOut[342]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n\nIn [343]: df.nsmallest(5, [\"a\", \"c\"])\nOut[343]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n2  1  d  4.0\n4  8  e  NaN \n```", "```py\nIn [344]: df1.columns = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", \"one\"), (\"a\", \"two\"), (\"b\", \"three\")]\n .....: )\n .....: \n\nIn [345]: df1.sort_values(by=(\"a\", \"two\"))\nOut[345]: \n a         b\n one two three\n0   2   1     5\n2   1   2     3\n1   1   3     4\n3   1   4     2 \n```", "```py\nIn [299]: df = pd.DataFrame(\n .....:    {\n .....:        \"one\": pd.Series(np.random.randn(3), index=[\"a\", \"b\", \"c\"]),\n .....:        \"two\": pd.Series(np.random.randn(4), index=[\"a\", \"b\", \"c\", \"d\"]),\n .....:        \"three\": pd.Series(np.random.randn(3), index=[\"b\", \"c\", \"d\"]),\n .....:    }\n .....: )\n .....: \n\nIn [300]: unsorted_df = df.reindex(\n .....:    index=[\"a\", \"d\", \"c\", \"b\"], columns=[\"three\", \"two\", \"one\"]\n .....: )\n .....: \n\nIn [301]: unsorted_df\nOut[301]: \n three       two       one\na       NaN -1.152244  0.562973\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\n\n# DataFrame\nIn [302]: unsorted_df.sort_index()\nOut[302]: \n three       two       one\na       NaN -1.152244  0.562973\nb -0.098217  0.009797 -1.299504\nc  1.273388 -0.167123  0.640382\nd -0.252916 -0.109597       NaN\n\nIn [303]: unsorted_df.sort_index(ascending=False)\nOut[303]: \n three       two       one\nd -0.252916 -0.109597       NaN\nc  1.273388 -0.167123  0.640382\nb -0.098217  0.009797 -1.299504\na       NaN -1.152244  0.562973\n\nIn [304]: unsorted_df.sort_index(axis=1)\nOut[304]: \n one     three       two\na  0.562973       NaN -1.152244\nd       NaN -0.252916 -0.109597\nc  0.640382  1.273388 -0.167123\nb -1.299504 -0.098217  0.009797\n\n# Series\nIn [305]: unsorted_df[\"three\"].sort_index()\nOut[305]: \na         NaN\nb   -0.098217\nc    1.273388\nd   -0.252916\nName: three, dtype: float64 \n```", "```py\nIn [306]: s1 = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3], \"c\": [2, 3, 4]}).set_index(\n .....:    list(\"ab\")\n .....: )\n .....: \n\nIn [307]: s1\nOut[307]: \n c\na b \nB 1  2\na 2  3\nC 3  4 \n```", "```py\nIn [308]: s1.sort_index(level=\"a\")\nOut[308]: \n c\na b \nB 1  2\nC 3  4\na 2  3\n\nIn [309]: s1.sort_index(level=\"a\", key=lambda idx: idx.str.lower())\nOut[309]: \n c\na b \na 2  3\nB 1  2\nC 3  4 \n```", "```py\nIn [310]: df1 = pd.DataFrame(\n .....:    {\"one\": [2, 1, 1, 1], \"two\": [1, 3, 2, 4], \"three\": [5, 4, 3, 2]}\n .....: )\n .....: \n\nIn [311]: df1.sort_values(by=\"two\")\nOut[311]: \n one  two  three\n0    2    1      5\n2    1    2      3\n1    1    3      4\n3    1    4      2 \n```", "```py\nIn [312]: df1[[\"one\", \"two\", \"three\"]].sort_values(by=[\"one\", \"two\"])\nOut[312]: \n one  two  three\n2    1    2      3\n1    1    3      4\n3    1    4      2\n0    2    1      5 \n```", "```py\nIn [313]: s[2] = np.nan\n\nIn [314]: s.sort_values()\nOut[314]: \n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\n2    <NA>\n5    <NA>\ndtype: string\n\nIn [315]: s.sort_values(na_position=\"first\")\nOut[315]: \n2    <NA>\n5    <NA>\n0       A\n3    Aaba\n1       B\n4    Baca\n6    CABA\n8     cat\n7     dog\ndtype: string \n```", "```py\nIn [316]: s1 = pd.Series([\"B\", \"a\", \"C\"]) \n```", "```py\nIn [317]: s1.sort_values()\nOut[317]: \n0    B\n2    C\n1    a\ndtype: object\n\nIn [318]: s1.sort_values(key=lambda x: x.str.lower())\nOut[318]: \n1    a\n0    B\n2    C\ndtype: object \n```", "```py\nIn [319]: df = pd.DataFrame({\"a\": [\"B\", \"a\", \"C\"], \"b\": [1, 2, 3]}) \n```", "```py\nIn [320]: df.sort_values(by=\"a\")\nOut[320]: \n a  b\n0  B  1\n2  C  3\n1  a  2\n\nIn [321]: df.sort_values(by=\"a\", key=lambda col: col.str.lower())\nOut[321]: \n a  b\n1  a  2\n0  B  1\n2  C  3 \n```", "```py\n# Build MultiIndex\nIn [322]: idx = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", 1), (\"a\", 2), (\"a\", 2), (\"b\", 2), (\"b\", 1), (\"b\", 1)]\n .....: )\n .....: \n\nIn [323]: idx.names = [\"first\", \"second\"]\n\n# Build DataFrame\nIn [324]: df_multi = pd.DataFrame({\"A\": np.arange(6, 0, -1)}, index=idx)\n\nIn [325]: df_multi\nOut[325]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1 \n```", "```py\nIn [326]: df_multi.sort_values(by=[\"second\", \"A\"])\nOut[326]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5 \n```", "```py\nIn [327]: ser = pd.Series([1, 2, 3])\n\nIn [328]: ser.searchsorted([0, 3])\nOut[328]: array([0, 2])\n\nIn [329]: ser.searchsorted([0, 4])\nOut[329]: array([0, 3])\n\nIn [330]: ser.searchsorted([1, 3], side=\"right\")\nOut[330]: array([1, 3])\n\nIn [331]: ser.searchsorted([1, 3], side=\"left\")\nOut[331]: array([0, 2])\n\nIn [332]: ser = pd.Series([3, 1, 2])\n\nIn [333]: ser.searchsorted([0, 3], sorter=np.argsort(ser))\nOut[333]: array([0, 2]) \n```", "```py\nIn [334]: s = pd.Series(np.random.permutation(10))\n\nIn [335]: s\nOut[335]: \n0    2\n1    0\n2    3\n3    7\n4    1\n5    5\n6    9\n7    6\n8    8\n9    4\ndtype: int64\n\nIn [336]: s.sort_values()\nOut[336]: \n1    0\n4    1\n0    2\n2    3\n9    4\n5    5\n7    6\n3    7\n8    8\n6    9\ndtype: int64\n\nIn [337]: s.nsmallest(3)\nOut[337]: \n1    0\n4    1\n0    2\ndtype: int64\n\nIn [338]: s.nlargest(3)\nOut[338]: \n6    9\n8    8\n3    7\ndtype: int64 \n```", "```py\nIn [339]: df = pd.DataFrame(\n .....:    {\n .....:        \"a\": [-2, -1, 1, 10, 8, 11, -1],\n .....:        \"b\": list(\"abdceff\"),\n .....:        \"c\": [1.0, 2.0, 4.0, 3.2, np.nan, 3.0, 4.0],\n .....:    }\n .....: )\n .....: \n\nIn [340]: df.nlargest(3, \"a\")\nOut[340]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n\nIn [341]: df.nlargest(5, [\"a\", \"c\"])\nOut[341]: \n a  b    c\n5  11  f  3.0\n3  10  c  3.2\n4   8  e  NaN\n2   1  d  4.0\n6  -1  f  4.0\n\nIn [342]: df.nsmallest(3, \"a\")\nOut[342]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n\nIn [343]: df.nsmallest(5, [\"a\", \"c\"])\nOut[343]: \n a  b    c\n0 -2  a  1.0\n1 -1  b  2.0\n6 -1  f  4.0\n2  1  d  4.0\n4  8  e  NaN \n```", "```py\nIn [344]: df1.columns = pd.MultiIndex.from_tuples(\n .....:    [(\"a\", \"one\"), (\"a\", \"two\"), (\"b\", \"three\")]\n .....: )\n .....: \n\nIn [345]: df1.sort_values(by=(\"a\", \"two\"))\nOut[345]: \n a         b\n one two three\n0   2   1     5\n2   1   2     3\n1   1   3     4\n3   1   4     2 \n```", "```py\nIn [346]: dft = pd.DataFrame(\n .....:    {\n .....:        \"A\": np.random.rand(3),\n .....:        \"B\": 1,\n .....:        \"C\": \"foo\",\n .....:        \"D\": pd.Timestamp(\"20010102\"),\n .....:        \"E\": pd.Series([1.0] * 3).astype(\"float32\"),\n .....:        \"F\": False,\n .....:        \"G\": pd.Series([1] * 3, dtype=\"int8\"),\n .....:    }\n .....: )\n .....: \n\nIn [347]: dft\nOut[347]: \n A  B    C          D    E      F  G\n0  0.035962  1  foo 2001-01-02  1.0  False  1\n1  0.701379  1  foo 2001-01-02  1.0  False  1\n2  0.281885  1  foo 2001-01-02  1.0  False  1\n\nIn [348]: dft.dtypes\nOut[348]: \nA          float64\nB            int64\nC           object\nD    datetime64[s]\nE          float32\nF             bool\nG             int8\ndtype: object \n```", "```py\nIn [349]: dft[\"A\"].dtype\nOut[349]: dtype('float64') \n```", "```py\n# these ints are coerced to floats\nIn [350]: pd.Series([1, 2, 3, 4, 5, 6.0])\nOut[350]: \n0    1.0\n1    2.0\n2    3.0\n3    4.0\n4    5.0\n5    6.0\ndtype: float64\n\n# string data forces an ``object`` dtype\nIn [351]: pd.Series([1, 2, 3, 6.0, \"foo\"])\nOut[351]: \n0      1\n1      2\n2      3\n3    6.0\n4    foo\ndtype: object \n```", "```py\nIn [352]: dft.dtypes.value_counts()\nOut[352]: \nfloat64          1\nint64            1\nobject           1\ndatetime64[s]    1\nfloat32          1\nbool             1\nint8             1\nName: count, dtype: int64 \n```", "```py\nIn [353]: df1 = pd.DataFrame(np.random.randn(8, 1), columns=[\"A\"], dtype=\"float32\")\n\nIn [354]: df1\nOut[354]: \n A\n0  0.224364\n1  1.890546\n2  0.182879\n3  0.787847\n4 -0.188449\n5  0.667715\n6 -0.011736\n7 -0.399073\n\nIn [355]: df1.dtypes\nOut[355]: \nA    float32\ndtype: object\n\nIn [356]: df2 = pd.DataFrame(\n .....:    {\n .....:        \"A\": pd.Series(np.random.randn(8), dtype=\"float16\"),\n .....:        \"B\": pd.Series(np.random.randn(8)),\n .....:        \"C\": pd.Series(np.random.randint(0, 255, size=8), dtype=\"uint8\"),  # [0,255] (range of uint8)\n .....:    }\n .....: )\n .....: \n\nIn [357]: df2\nOut[357]: \n A         B    C\n0  0.823242  0.256090   26\n1  1.607422  1.426469   86\n2 -0.333740 -0.416203   46\n3 -0.063477  1.139976  212\n4 -1.014648 -1.193477   26\n5  0.678711  0.096706    7\n6 -0.040863 -1.956850  184\n7 -0.357422 -0.714337  206\n\nIn [358]: df2.dtypes\nOut[358]: \nA    float16\nB    float64\nC      uint8\ndtype: object \n```", "```py\nIn [359]: pd.DataFrame([1, 2], columns=[\"a\"]).dtypes\nOut[359]: \na    int64\ndtype: object\n\nIn [360]: pd.DataFrame({\"a\": [1, 2]}).dtypes\nOut[360]: \na    int64\ndtype: object\n\nIn [361]: pd.DataFrame({\"a\": 1}, index=list(range(2))).dtypes\nOut[361]: \na    int64\ndtype: object \n```", "```py\nIn [362]: frame = pd.DataFrame(np.array([1, 2])) \n```", "```py\nIn [363]: df3 = df1.reindex_like(df2).fillna(value=0.0) + df2\n\nIn [364]: df3\nOut[364]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [365]: df3.dtypes\nOut[365]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [366]: df3.to_numpy().dtype\nOut[366]: dtype('float64') \n```", "```py\nIn [367]: df3\nOut[367]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [368]: df3.dtypes\nOut[368]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\n# conversion of dtypes\nIn [369]: df3.astype(\"float32\").dtypes\nOut[369]: \nA    float32\nB    float32\nC    float32\ndtype: object \n```", "```py\nIn [370]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [371]: dft[[\"a\", \"b\"]] = dft[[\"a\", \"b\"]].astype(np.uint8)\n\nIn [372]: dft\nOut[372]: \n a  b  c\n0  1  4  7\n1  2  5  8\n2  3  6  9\n\nIn [373]: dft.dtypes\nOut[373]: \na    uint8\nb    uint8\nc    int64\ndtype: object \n```", "```py\nIn [374]: dft1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [375]: dft1 = dft1.astype({\"a\": np.bool_, \"c\": np.float64})\n\nIn [376]: dft1\nOut[376]: \n a  b    c\n0   True  4  7.0\n1  False  5  8.0\n2   True  6  9.0\n\nIn [377]: dft1.dtypes\nOut[377]: \na       bool\nb      int64\nc    float64\ndtype: object \n```", "```py\nIn [378]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [379]: dft.loc[:, [\"a\", \"b\"]].astype(np.uint8).dtypes\nOut[379]: \na    uint8\nb    uint8\ndtype: object\n\nIn [380]: dft.loc[:, [\"a\", \"b\"]] = dft.loc[:, [\"a\", \"b\"]].astype(np.uint8)\n\nIn [381]: dft.dtypes\nOut[381]: \na    int64\nb    int64\nc    int64\ndtype: object \n```", "```py\n> In [382]: import datetime\n> \n> In [383]: df = pd.DataFrame(\n>  .....:    [\n>  .....:        [1, 2],\n>  .....:        [\"a\", \"b\"],\n>  .....:        [datetime.datetime(2016, 3, 2), datetime.datetime(2016, 3, 2)],\n>  .....:    ]\n>  .....: )\n>  .....: \n> \n> In [384]: df = df.T\n> \n> In [385]: df\n> Out[385]: \n>  0  1                    2\n> 0  1  a  2016-03-02 00:00:00\n> 1  2  b  2016-03-02 00:00:00\n> \n> In [386]: df.dtypes\n> Out[386]: \n> 0    object\n> 1    object\n> 2    object\n> dtype: object \n> ```", "```py\n> In [387]: df.infer_objects().dtypes\n> Out[387]: \n> 0             int64\n> 1            object\n> 2    datetime64[ns]\n> dtype: object \n> ```", "```py\n    In [388]: m = [\"1.1\", 2, 3]\n\n    In [389]: pd.to_numeric(m)\n    Out[389]: array([1.1, 2\\. , 3\\. ]) \n    ```", "```py\n    In [390]: import datetime\n\n    In [391]: m = [\"2016-07-09\", datetime.datetime(2016, 3, 2)]\n\n    In [392]: pd.to_datetime(m)\n    Out[392]: DatetimeIndex(['2016-07-09', '2016-03-02'], dtype='datetime64[ns]', freq=None) \n    ```", "```py\n    In [393]: m = [\"5us\", pd.Timedelta(\"1day\")]\n\n    In [394]: pd.to_timedelta(m)\n    Out[394]: TimedeltaIndex(['0 days 00:00:00.000005', '1 days 00:00:00'], dtype='timedelta64[ns]', freq=None) \n    ```", "```py\nIn [395]: import datetime\n\nIn [396]: m = [\"apple\", datetime.datetime(2016, 3, 2)]\n\nIn [397]: pd.to_datetime(m, errors=\"coerce\")\nOut[397]: DatetimeIndex(['NaT', '2016-03-02'], dtype='datetime64[ns]', freq=None)\n\nIn [398]: m = [\"apple\", 2, 3]\n\nIn [399]: pd.to_numeric(m, errors=\"coerce\")\nOut[399]: array([nan,  2.,  3.])\n\nIn [400]: m = [\"apple\", pd.Timedelta(\"1day\")]\n\nIn [401]: pd.to_timedelta(m, errors=\"coerce\")\nOut[401]: TimedeltaIndex([NaT, '1 days'], dtype='timedelta64[ns]', freq=None) \n```", "```py\nIn [402]: m = [\"1\", 2, 3]\n\nIn [403]: pd.to_numeric(m, downcast=\"integer\")  # smallest signed int dtype\nOut[403]: array([1, 2, 3], dtype=int8)\n\nIn [404]: pd.to_numeric(m, downcast=\"signed\")  # same as 'integer'\nOut[404]: array([1, 2, 3], dtype=int8)\n\nIn [405]: pd.to_numeric(m, downcast=\"unsigned\")  # smallest unsigned int dtype\nOut[405]: array([1, 2, 3], dtype=uint8)\n\nIn [406]: pd.to_numeric(m, downcast=\"float\")  # smallest float dtype\nOut[406]: array([1., 2., 3.], dtype=float32) \n```", "```py\nIn [407]: import datetime\n\nIn [408]: df = pd.DataFrame([[\"2016-07-09\", datetime.datetime(2016, 3, 2)]] * 2, dtype=\"O\")\n\nIn [409]: df\nOut[409]: \n 0                    1\n0  2016-07-09  2016-03-02 00:00:00\n1  2016-07-09  2016-03-02 00:00:00\n\nIn [410]: df.apply(pd.to_datetime)\nOut[410]: \n 0          1\n0 2016-07-09 2016-03-02\n1 2016-07-09 2016-03-02\n\nIn [411]: df = pd.DataFrame([[\"1.1\", 2, 3]] * 2, dtype=\"O\")\n\nIn [412]: df\nOut[412]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [413]: df.apply(pd.to_numeric)\nOut[413]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [414]: df = pd.DataFrame([[\"5us\", pd.Timedelta(\"1day\")]] * 2, dtype=\"O\")\n\nIn [415]: df\nOut[415]: \n 0                1\n0  5us  1 days 00:00:00\n1  5us  1 days 00:00:00\n\nIn [416]: df.apply(pd.to_timedelta)\nOut[416]: \n 0      1\n0 0 days 00:00:00.000005 1 days\n1 0 days 00:00:00.000005 1 days \n```", "```py\nIn [417]: dfi = df3.astype(\"int32\")\n\nIn [418]: dfi[\"E\"] = 1\n\nIn [419]: dfi\nOut[419]: \n A  B    C  E\n0  1  0   26  1\n1  3  1   86  1\n2  0  0   46  1\n3  0  1  212  1\n4 -1 -1   26  1\n5  1  0    7  1\n6  0 -1  184  1\n7  0  0  206  1\n\nIn [420]: dfi.dtypes\nOut[420]: \nA    int32\nB    int32\nC    int32\nE    int64\ndtype: object\n\nIn [421]: casted = dfi[dfi > 0]\n\nIn [422]: casted\nOut[422]: \n A    B    C  E\n0  1.0  NaN   26  1\n1  3.0  1.0   86  1\n2  NaN  NaN   46  1\n3  NaN  1.0  212  1\n4  NaN  NaN   26  1\n5  1.0  NaN    7  1\n6  NaN  NaN  184  1\n7  NaN  NaN  206  1\n\nIn [423]: casted.dtypes\nOut[423]: \nA    float64\nB    float64\nC      int32\nE      int64\ndtype: object \n```", "```py\nIn [424]: dfa = df3.copy()\n\nIn [425]: dfa[\"A\"] = dfa[\"A\"].astype(\"float32\")\n\nIn [426]: dfa.dtypes\nOut[426]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\nIn [427]: casted = dfa[df2 > 0]\n\nIn [428]: casted\nOut[428]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2       NaN       NaN   46.0\n3       NaN  1.139976  212.0\n4       NaN       NaN   26.0\n5  1.346426  0.096706    7.0\n6       NaN       NaN  184.0\n7       NaN       NaN  206.0\n\nIn [429]: casted.dtypes\nOut[429]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [359]: pd.DataFrame([1, 2], columns=[\"a\"]).dtypes\nOut[359]: \na    int64\ndtype: object\n\nIn [360]: pd.DataFrame({\"a\": [1, 2]}).dtypes\nOut[360]: \na    int64\ndtype: object\n\nIn [361]: pd.DataFrame({\"a\": 1}, index=list(range(2))).dtypes\nOut[361]: \na    int64\ndtype: object \n```", "```py\nIn [362]: frame = pd.DataFrame(np.array([1, 2])) \n```", "```py\nIn [363]: df3 = df1.reindex_like(df2).fillna(value=0.0) + df2\n\nIn [364]: df3\nOut[364]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [365]: df3.dtypes\nOut[365]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [366]: df3.to_numpy().dtype\nOut[366]: dtype('float64') \n```", "```py\nIn [367]: df3\nOut[367]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2 -0.150862 -0.416203   46.0\n3  0.724370  1.139976  212.0\n4 -1.203098 -1.193477   26.0\n5  1.346426  0.096706    7.0\n6 -0.052599 -1.956850  184.0\n7 -0.756495 -0.714337  206.0\n\nIn [368]: df3.dtypes\nOut[368]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\n# conversion of dtypes\nIn [369]: df3.astype(\"float32\").dtypes\nOut[369]: \nA    float32\nB    float32\nC    float32\ndtype: object \n```", "```py\nIn [370]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [371]: dft[[\"a\", \"b\"]] = dft[[\"a\", \"b\"]].astype(np.uint8)\n\nIn [372]: dft\nOut[372]: \n a  b  c\n0  1  4  7\n1  2  5  8\n2  3  6  9\n\nIn [373]: dft.dtypes\nOut[373]: \na    uint8\nb    uint8\nc    int64\ndtype: object \n```", "```py\nIn [374]: dft1 = pd.DataFrame({\"a\": [1, 0, 1], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [375]: dft1 = dft1.astype({\"a\": np.bool_, \"c\": np.float64})\n\nIn [376]: dft1\nOut[376]: \n a  b    c\n0   True  4  7.0\n1  False  5  8.0\n2   True  6  9.0\n\nIn [377]: dft1.dtypes\nOut[377]: \na       bool\nb      int64\nc    float64\ndtype: object \n```", "```py\nIn [378]: dft = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6], \"c\": [7, 8, 9]})\n\nIn [379]: dft.loc[:, [\"a\", \"b\"]].astype(np.uint8).dtypes\nOut[379]: \na    uint8\nb    uint8\ndtype: object\n\nIn [380]: dft.loc[:, [\"a\", \"b\"]] = dft.loc[:, [\"a\", \"b\"]].astype(np.uint8)\n\nIn [381]: dft.dtypes\nOut[381]: \na    int64\nb    int64\nc    int64\ndtype: object \n```", "```py\n> In [382]: import datetime\n> \n> In [383]: df = pd.DataFrame(\n>  .....:    [\n>  .....:        [1, 2],\n>  .....:        [\"a\", \"b\"],\n>  .....:        [datetime.datetime(2016, 3, 2), datetime.datetime(2016, 3, 2)],\n>  .....:    ]\n>  .....: )\n>  .....: \n> \n> In [384]: df = df.T\n> \n> In [385]: df\n> Out[385]: \n>  0  1                    2\n> 0  1  a  2016-03-02 00:00:00\n> 1  2  b  2016-03-02 00:00:00\n> \n> In [386]: df.dtypes\n> Out[386]: \n> 0    object\n> 1    object\n> 2    object\n> dtype: object \n> ```", "```py\n> In [387]: df.infer_objects().dtypes\n> Out[387]: \n> 0             int64\n> 1            object\n> 2    datetime64[ns]\n> dtype: object \n> ```", "```py\n    In [388]: m = [\"1.1\", 2, 3]\n\n    In [389]: pd.to_numeric(m)\n    Out[389]: array([1.1, 2\\. , 3\\. ]) \n    ```", "```py\n    In [390]: import datetime\n\n    In [391]: m = [\"2016-07-09\", datetime.datetime(2016, 3, 2)]\n\n    In [392]: pd.to_datetime(m)\n    Out[392]: DatetimeIndex(['2016-07-09', '2016-03-02'], dtype='datetime64[ns]', freq=None) \n    ```", "```py\n    In [393]: m = [\"5us\", pd.Timedelta(\"1day\")]\n\n    In [394]: pd.to_timedelta(m)\n    Out[394]: TimedeltaIndex(['0 days 00:00:00.000005', '1 days 00:00:00'], dtype='timedelta64[ns]', freq=None) \n    ```", "```py\nIn [395]: import datetime\n\nIn [396]: m = [\"apple\", datetime.datetime(2016, 3, 2)]\n\nIn [397]: pd.to_datetime(m, errors=\"coerce\")\nOut[397]: DatetimeIndex(['NaT', '2016-03-02'], dtype='datetime64[ns]', freq=None)\n\nIn [398]: m = [\"apple\", 2, 3]\n\nIn [399]: pd.to_numeric(m, errors=\"coerce\")\nOut[399]: array([nan,  2.,  3.])\n\nIn [400]: m = [\"apple\", pd.Timedelta(\"1day\")]\n\nIn [401]: pd.to_timedelta(m, errors=\"coerce\")\nOut[401]: TimedeltaIndex([NaT, '1 days'], dtype='timedelta64[ns]', freq=None) \n```", "```py\nIn [402]: m = [\"1\", 2, 3]\n\nIn [403]: pd.to_numeric(m, downcast=\"integer\")  # smallest signed int dtype\nOut[403]: array([1, 2, 3], dtype=int8)\n\nIn [404]: pd.to_numeric(m, downcast=\"signed\")  # same as 'integer'\nOut[404]: array([1, 2, 3], dtype=int8)\n\nIn [405]: pd.to_numeric(m, downcast=\"unsigned\")  # smallest unsigned int dtype\nOut[405]: array([1, 2, 3], dtype=uint8)\n\nIn [406]: pd.to_numeric(m, downcast=\"float\")  # smallest float dtype\nOut[406]: array([1., 2., 3.], dtype=float32) \n```", "```py\nIn [407]: import datetime\n\nIn [408]: df = pd.DataFrame([[\"2016-07-09\", datetime.datetime(2016, 3, 2)]] * 2, dtype=\"O\")\n\nIn [409]: df\nOut[409]: \n 0                    1\n0  2016-07-09  2016-03-02 00:00:00\n1  2016-07-09  2016-03-02 00:00:00\n\nIn [410]: df.apply(pd.to_datetime)\nOut[410]: \n 0          1\n0 2016-07-09 2016-03-02\n1 2016-07-09 2016-03-02\n\nIn [411]: df = pd.DataFrame([[\"1.1\", 2, 3]] * 2, dtype=\"O\")\n\nIn [412]: df\nOut[412]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [413]: df.apply(pd.to_numeric)\nOut[413]: \n 0  1  2\n0  1.1  2  3\n1  1.1  2  3\n\nIn [414]: df = pd.DataFrame([[\"5us\", pd.Timedelta(\"1day\")]] * 2, dtype=\"O\")\n\nIn [415]: df\nOut[415]: \n 0                1\n0  5us  1 days 00:00:00\n1  5us  1 days 00:00:00\n\nIn [416]: df.apply(pd.to_timedelta)\nOut[416]: \n 0      1\n0 0 days 00:00:00.000005 1 days\n1 0 days 00:00:00.000005 1 days \n```", "```py\nIn [417]: dfi = df3.astype(\"int32\")\n\nIn [418]: dfi[\"E\"] = 1\n\nIn [419]: dfi\nOut[419]: \n A  B    C  E\n0  1  0   26  1\n1  3  1   86  1\n2  0  0   46  1\n3  0  1  212  1\n4 -1 -1   26  1\n5  1  0    7  1\n6  0 -1  184  1\n7  0  0  206  1\n\nIn [420]: dfi.dtypes\nOut[420]: \nA    int32\nB    int32\nC    int32\nE    int64\ndtype: object\n\nIn [421]: casted = dfi[dfi > 0]\n\nIn [422]: casted\nOut[422]: \n A    B    C  E\n0  1.0  NaN   26  1\n1  3.0  1.0   86  1\n2  NaN  NaN   46  1\n3  NaN  1.0  212  1\n4  NaN  NaN   26  1\n5  1.0  NaN    7  1\n6  NaN  NaN  184  1\n7  NaN  NaN  206  1\n\nIn [423]: casted.dtypes\nOut[423]: \nA    float64\nB    float64\nC      int32\nE      int64\ndtype: object \n```", "```py\nIn [424]: dfa = df3.copy()\n\nIn [425]: dfa[\"A\"] = dfa[\"A\"].astype(\"float32\")\n\nIn [426]: dfa.dtypes\nOut[426]: \nA    float32\nB    float64\nC    float64\ndtype: object\n\nIn [427]: casted = dfa[df2 > 0]\n\nIn [428]: casted\nOut[428]: \n A         B      C\n0  1.047606  0.256090   26.0\n1  3.497968  1.426469   86.0\n2       NaN       NaN   46.0\n3       NaN  1.139976  212.0\n4       NaN       NaN   26.0\n5  1.346426  0.096706    7.0\n6       NaN       NaN  184.0\n7       NaN       NaN  206.0\n\nIn [429]: casted.dtypes\nOut[429]: \nA    float32\nB    float64\nC    float64\ndtype: object \n```", "```py\nIn [430]: df = pd.DataFrame(\n .....:    {\n .....:        \"string\": list(\"abc\"),\n .....:        \"int64\": list(range(1, 4)),\n .....:        \"uint8\": np.arange(3, 6).astype(\"u1\"),\n .....:        \"float64\": np.arange(4.0, 7.0),\n .....:        \"bool1\": [True, False, True],\n .....:        \"bool2\": [False, True, False],\n .....:        \"dates\": pd.date_range(\"now\", periods=3),\n .....:        \"category\": pd.Series(list(\"ABC\")).astype(\"category\"),\n .....:    }\n .....: )\n .....: \n\nIn [431]: df[\"tdeltas\"] = df.dates.diff()\n\nIn [432]: df[\"uint64\"] = np.arange(3, 6).astype(\"u8\")\n\nIn [433]: df[\"other_dates\"] = pd.date_range(\"20130101\", periods=3)\n\nIn [434]: df[\"tz_aware_dates\"] = pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\")\n\nIn [435]: df\nOut[435]: \n string  int64  uint8  ...  uint64  other_dates            tz_aware_dates\n0      a      1      3  ...       3   2013-01-01 2013-01-01 00:00:00-05:00\n1      b      2      4  ...       4   2013-01-02 2013-01-02 00:00:00-05:00\n2      c      3      5  ...       5   2013-01-03 2013-01-03 00:00:00-05:00\n\n[3 rows x 12 columns] \n```", "```py\nIn [436]: df.dtypes\nOut[436]: \nstring                                object\nint64                                  int64\nuint8                                  uint8\nfloat64                              float64\nbool1                                   bool\nbool2                                   bool\ndates                         datetime64[ns]\ncategory                            category\ntdeltas                      timedelta64[ns]\nuint64                                uint64\nother_dates                   datetime64[ns]\ntz_aware_dates    datetime64[ns, US/Eastern]\ndtype: object \n```", "```py\nIn [437]: df.select_dtypes(include=[bool])\nOut[437]: \n bool1  bool2\n0   True  False\n1  False   True\n2   True  False \n```", "```py\nIn [438]: df.select_dtypes(include=[\"bool\"])\nOut[438]: \n bool1  bool2\n0   True  False\n1  False   True\n2   True  False \n```", "```py\nIn [439]: df.select_dtypes(include=[\"number\", \"bool\"], exclude=[\"unsignedinteger\"])\nOut[439]: \n int64  float64  bool1  bool2 tdeltas\n0      1      4.0   True  False     NaT\n1      2      5.0  False   True  1 days\n2      3      6.0   True  False  1 days \n```", "```py\nIn [440]: df.select_dtypes(include=[\"object\"])\nOut[440]: \n string\n0      a\n1      b\n2      c \n```", "```py\nIn [441]: def subdtypes(dtype):\n .....:    subs = dtype.__subclasses__()\n .....:    if not subs:\n .....:        return dtype\n .....:    return [dtype, [subdtypes(dt) for dt in subs]]\n .....: \n```", "```py\nIn [442]: subdtypes(np.generic)\nOut[442]: \n[numpy.generic,\n [[numpy.number,\n [[numpy.integer,\n [[numpy.signedinteger,\n [numpy.int8,\n numpy.int16,\n numpy.int32,\n numpy.int64,\n numpy.longlong,\n numpy.timedelta64]],\n [numpy.unsignedinteger,\n [numpy.uint8,\n numpy.uint16,\n numpy.uint32,\n numpy.uint64,\n numpy.ulonglong]]]],\n [numpy.inexact,\n [[numpy.floating,\n [numpy.float16, numpy.float32, numpy.float64, numpy.longdouble]],\n [numpy.complexfloating,\n [numpy.complex64, numpy.complex128, numpy.clongdouble]]]]]],\n [numpy.flexible,\n [[numpy.character, [numpy.bytes_, numpy.str_]],\n [numpy.void, [numpy.record]]]],\n numpy.bool_,\n numpy.datetime64,\n numpy.object_]] \n```"]