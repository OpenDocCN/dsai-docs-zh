["```py\nscipy.spatial.geometric_slerp(start, end, t, tol=1e-07)\n```", "```py\n>>> import numpy as np\n>>> from scipy.spatial import geometric_slerp\n>>> import matplotlib.pyplot as plt\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111)\n>>> start = np.array([1, 0])\n>>> end = np.array([0, 1])\n>>> t_vals = np.linspace(0, 1, 4)\n>>> result = geometric_slerp(start,\n...                          end,\n...                          t_vals) \n```", "```py\n>>> ax.scatter(result[...,0], result[...,1], c='k')\n>>> circle = plt.Circle((0, 0), 1, color='grey')\n>>> ax.add_artist(circle)\n>>> ax.set_aspect('equal')\n>>> plt.show() \n```", "```py\n>>> opposite_pole = np.array([-1, 0])\n>>> with np.testing.suppress_warnings() as sup:\n...     sup.filter(UserWarning)\n...     geometric_slerp(start,\n...                     opposite_pole,\n...                     t_vals)\narray([[ 1.00000000e+00,  0.00000000e+00],\n [ 5.00000000e-01,  8.66025404e-01],\n [-5.00000000e-01,  8.66025404e-01],\n [-1.00000000e+00,  1.22464680e-16]]) \n```", "```py\n>>> from mpl_toolkits.mplot3d import proj3d\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111, projection='3d') \n```", "```py\n>>> u = np.linspace(0, 2 * np.pi, 100)\n>>> v = np.linspace(0, np.pi, 100)\n>>> x = np.outer(np.cos(u), np.sin(v))\n>>> y = np.outer(np.sin(u), np.sin(v))\n>>> z = np.outer(np.ones(np.size(u)), np.cos(v))\n>>> ax.plot_surface(x, y, z, color='y', alpha=0.1) \n```", "```py\n>>> start = np.array([1, 0, 0])\n>>> end = np.array([0, 0, 1])\n>>> t_vals = np.linspace(0, 1, 200)\n>>> result = geometric_slerp(start,\n...                          end,\n...                          t_vals)\n>>> ax.plot(result[...,0],\n...         result[...,1],\n...         result[...,2],\n...         c='k')\n>>> plt.show() \n```"]