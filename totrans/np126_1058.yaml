- en: numpy.distutils.ccompiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.distutils.ccompiler.html](https://numpy.org/doc/1.26/reference/generated/numpy.distutils.ccompiler.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Functions
  prefs: []
  type: TYPE_NORMAL
- en: '| [`CCompiler_compile`](numpy.distutils.ccompiler.CCompiler_compile.html#numpy.distutils.ccompiler.CCompiler_compile
    "numpy.distutils.ccompiler.CCompiler_compile")(self, sources[, ...]) | Compile
    one or more source files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_customize`](numpy.distutils.ccompiler.CCompiler_customize.html#numpy.distutils.ccompiler.CCompiler_customize
    "numpy.distutils.ccompiler.CCompiler_customize")(self, dist[, need_cxx]) | Do
    any platform-specific customization of a compiler instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_customize_cmd`](numpy.distutils.ccompiler.CCompiler_customize_cmd.html#numpy.distutils.ccompiler.CCompiler_customize_cmd
    "numpy.distutils.ccompiler.CCompiler_customize_cmd")(self, cmd[, ignore]) | Customize
    compiler using distutils command. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_cxx_compiler`](numpy.distutils.ccompiler.CCompiler_cxx_compiler.html#numpy.distutils.ccompiler.CCompiler_cxx_compiler
    "numpy.distutils.ccompiler.CCompiler_cxx_compiler")(self) | Return the C++ compiler.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_find_executables`](numpy.distutils.ccompiler.CCompiler_find_executables.html#numpy.distutils.ccompiler.CCompiler_find_executables
    "numpy.distutils.ccompiler.CCompiler_find_executables")(self) | Does nothing here,
    but is called by the get_version method and can be overridden by subclasses. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_get_version`](numpy.distutils.ccompiler.CCompiler_get_version.html#numpy.distutils.ccompiler.CCompiler_get_version
    "numpy.distutils.ccompiler.CCompiler_get_version")(self[, force, ok_status]) |
    Return compiler version, or None if compiler is not available. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_object_filenames`](numpy.distutils.ccompiler.CCompiler_object_filenames.html#numpy.distutils.ccompiler.CCompiler_object_filenames
    "numpy.distutils.ccompiler.CCompiler_object_filenames")(self, ...[, ...]) | Return
    the name of the object files for the given source files. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_show_customization`](numpy.distutils.ccompiler.CCompiler_show_customization.html#numpy.distutils.ccompiler.CCompiler_show_customization
    "numpy.distutils.ccompiler.CCompiler_show_customization")(self) | Print the compiler
    customizations to stdout. |'
  prefs: []
  type: TYPE_TB
- en: '| [`CCompiler_spawn`](numpy.distutils.ccompiler.CCompiler_spawn.html#numpy.distutils.ccompiler.CCompiler_spawn
    "numpy.distutils.ccompiler.CCompiler_spawn")(self, cmd[, display, env]) | Execute
    a command in a sub-process. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gen_lib_options`](numpy.distutils.ccompiler.gen_lib_options.html#numpy.distutils.ccompiler.gen_lib_options
    "numpy.distutils.ccompiler.gen_lib_options")(compiler, library_dirs, ...) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`new_compiler`](numpy.distutils.ccompiler.new_compiler.html#numpy.distutils.ccompiler.new_compiler
    "numpy.distutils.ccompiler.new_compiler")([plat, compiler, verbose, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`replace_method`](numpy.distutils.ccompiler.replace_method.html#numpy.distutils.ccompiler.replace_method
    "numpy.distutils.ccompiler.replace_method")(klass, method_name, func) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`simple_version_match`](numpy.distutils.ccompiler.simple_version_match.html#numpy.distutils.ccompiler.simple_version_match
    "numpy.distutils.ccompiler.simple_version_match")([pat, ignore, start]) | Simple
    matching of version numbers, for use in CCompiler and FCompiler. |'
  prefs: []
  type: TYPE_TB
