- en: scipy.sparse.rand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.rand.html#scipy.sparse.rand](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.sparse.rand.html#scipy.sparse.rand)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Generate a sparse matrix of the given shape and density with uniformly distributed
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a sparse matrix – not a sparse array. You are encouraged
    to use `random_array` to take advantage of the sparse array functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m, n**int'
  prefs: []
  type: TYPE_NORMAL
- en: shape of the matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**density**real, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'density of the generated matrix: density equal to one means a full matrix,
    density of 0 means a matrix with no non-zero items.'
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: sparse matrix format.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: type of the returned matrix values.
  prefs: []
  type: TYPE_NORMAL
- en: '**random_state**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"),'
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**sparse matrix'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`random`](scipy.sparse.random.html#scipy.sparse.random "scipy.sparse.random")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar function allowing a custom random data sampler
  prefs: []
  type: TYPE_NORMAL
- en: '[`random_array`](scipy.sparse.random_array.html#scipy.sparse.random_array "scipy.sparse.random_array")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to random() but returns a sparse array
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Only float types are supported for now.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
