- en: scipy.integrate.quad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute a definite integral.
  prefs: []
  type: TYPE_NORMAL
- en: Integrate func from *a* to *b* (possibly infinite interval) using a technique
    from the Fortran library QUADPACK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**{function, scipy.LowLevelCallable}'
  prefs: []
  type: TYPE_NORMAL
- en: A Python function or method to integrate. If *func* takes many arguments, it
    is integrated along the axis corresponding to the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user desires improved integration performance, then *f* may be a [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable") with one of the signatures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `user_data` is the data contained in the [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable"). In the call forms with `xx`, `n` is the length of the
    `xx` array which contains `xx[0] == x` and the rest of the items are numbers contained
    in the `args` argument of quad.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, certain ctypes call signatures are supported for backward compatibility,
    but those should not be used in new code.
  prefs: []
  type: TYPE_NORMAL
- en: '**a**float'
  prefs: []
  type: TYPE_NORMAL
- en: Lower limit of integration (use -numpy.inf for -infinity).
  prefs: []
  type: TYPE_NORMAL
- en: '**b**float'
  prefs: []
  type: TYPE_NORMAL
- en: Upper limit of integration (use numpy.inf for +infinity).
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments to pass to *func*.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Non-zero to return a dictionary of integration information. If non-zero, warning
    messages are also suppressed and the message is appended to the output tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '**complex_func**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indicate if the function’s (*func*) return type is real (`complex_func=False`:
    default) or complex (`complex_func=True`). In both cases, the function’s argument
    is real. If full_output is also non-zero, the *infodict*, *message*, and *explain*
    for the real and complex components are returned in a dictionary with keys “real
    output” and “imag output”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**float'
  prefs: []
  type: TYPE_NORMAL
- en: The integral of func from *a* to *b*.
  prefs: []
  type: TYPE_NORMAL
- en: '**abserr**float'
  prefs: []
  type: TYPE_NORMAL
- en: An estimate of the absolute error in the result.
  prefs: []
  type: TYPE_NORMAL
- en: '**infodict**dict'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary containing additional information.
  prefs: []
  type: TYPE_NORMAL
- en: message
  prefs: []
  type: TYPE_NORMAL
- en: A convergence message.
  prefs: []
  type: TYPE_NORMAL
- en: explain
  prefs: []
  type: TYPE_NORMAL
- en: Appended only with ‘cos’ or ‘sin’ weighting and infinite integration limits,
    it contains an explanation of the codes in infodict[‘ierlst’]
  prefs: []
  type: TYPE_NORMAL
- en: 'Other Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**epsabs**float or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute error tolerance. Default is 1.49e-8\. [`quad`](#scipy.integrate.quad
    "scipy.integrate.quad") tries to obtain an accuracy of `abs(i-result) <= max(epsabs,
    epsrel*abs(i))` where `i` = integral of *func* from *a* to *b*, and `result` is
    the numerical approximation. See *epsrel* below.
  prefs: []
  type: TYPE_NORMAL
- en: '**epsrel**float or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative error tolerance. Default is 1.49e-8. If `epsabs <= 0`, *epsrel* must
    be greater than both 5e-29 and `50 * (machine epsilon)`. See *epsabs* above.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**float or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An upper bound on the number of subintervals used in the adaptive algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '**points**(sequence of floats,ints), optional'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of break points in the bounded integration interval where local difficulties
    of the integrand may occur (e.g., singularities, discontinuities). The sequence
    does not have to be sorted. Note that this option cannot be used in conjunction
    with `weight`.
  prefs: []
  type: TYPE_NORMAL
- en: '**weight**float or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String indicating weighting function. Full explanation for this and the remaining
    arguments can be found below.
  prefs: []
  type: TYPE_NORMAL
- en: '**wvar**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Variables for use with weighting functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**wopts**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional input for reusing Chebyshev moments.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxp1**float or int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An upper bound on the number of Chebyshev moments.
  prefs: []
  type: TYPE_NORMAL
- en: '**limlst**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Upper bound on the number of cycles (>=3) for use with a sinusoidal weighting
    and an infinite end-point.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dblquad`](scipy.integrate.dblquad.html#scipy.integrate.dblquad "scipy.integrate.dblquad")'
  prefs: []
  type: TYPE_NORMAL
- en: double integral
  prefs: []
  type: TYPE_NORMAL
- en: '[`tplquad`](scipy.integrate.tplquad.html#scipy.integrate.tplquad "scipy.integrate.tplquad")'
  prefs: []
  type: TYPE_NORMAL
- en: triple integral
  prefs: []
  type: TYPE_NORMAL
- en: '[`nquad`](scipy.integrate.nquad.html#scipy.integrate.nquad "scipy.integrate.nquad")'
  prefs: []
  type: TYPE_NORMAL
- en: n-dimensional integrals (uses [`quad`](#scipy.integrate.quad "scipy.integrate.quad")
    recursively)
  prefs: []
  type: TYPE_NORMAL
- en: '[`fixed_quad`](scipy.integrate.fixed_quad.html#scipy.integrate.fixed_quad "scipy.integrate.fixed_quad")'
  prefs: []
  type: TYPE_NORMAL
- en: fixed-order Gaussian quadrature
  prefs: []
  type: TYPE_NORMAL
- en: '[`quadrature`](scipy.integrate.quadrature.html#scipy.integrate.quadrature "scipy.integrate.quadrature")'
  prefs: []
  type: TYPE_NORMAL
- en: adaptive Gaussian quadrature
  prefs: []
  type: TYPE_NORMAL
- en: '[`odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")'
  prefs: []
  type: TYPE_NORMAL
- en: ODE integrator
  prefs: []
  type: TYPE_NORMAL
- en: '[`ode`](scipy.integrate.ode.html#scipy.integrate.ode "scipy.integrate.ode")'
  prefs: []
  type: TYPE_NORMAL
- en: ODE integrator
  prefs: []
  type: TYPE_NORMAL
- en: '[`simpson`](scipy.integrate.simpson.html#scipy.integrate.simpson "scipy.integrate.simpson")'
  prefs: []
  type: TYPE_NORMAL
- en: integrator for sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`romb`](scipy.integrate.romb.html#scipy.integrate.romb "scipy.integrate.romb")'
  prefs: []
  type: TYPE_NORMAL
- en: integrator for sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.special`](../special.html#module-scipy.special "scipy.special")'
  prefs: []
  type: TYPE_NORMAL
- en: for coefficients and roots of orthogonal polynomials
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For valid results, the integral must converge; behavior for divergent integrals
    is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extra information for quad() inputs and outputs**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If full_output is non-zero, then the third output argument (infodict) is a
    dictionary with entries as tabulated below. For infinite limits, the range is
    transformed to (0,1) and the optional outputs are given with respect to this transformed
    range. Let M be the input argument limit and let K be infodict[‘last’]. The entries
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘neval’
  prefs: []
  type: TYPE_NORMAL
- en: The number of function evaluations.
  prefs: []
  type: TYPE_NORMAL
- en: ‘last’
  prefs: []
  type: TYPE_NORMAL
- en: The number, K, of subintervals produced in the subdivision process.
  prefs: []
  type: TYPE_NORMAL
- en: ‘alist’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length M, the first K elements of which are the left end points
    of the subintervals in the partition of the integration range.
  prefs: []
  type: TYPE_NORMAL
- en: ‘blist’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length M, the first K elements of which are the right end
    points of the subintervals.
  prefs: []
  type: TYPE_NORMAL
- en: ‘rlist’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length M, the first K elements of which are the integral approximations
    on the subintervals.
  prefs: []
  type: TYPE_NORMAL
- en: ‘elist’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length M, the first K elements of which are the moduli of
    the absolute error estimates on the subintervals.
  prefs: []
  type: TYPE_NORMAL
- en: ‘iord’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 integer array of length M, the first L elements of which are pointers
    to the error estimates over the subintervals with `L=K` if `K<=M/2+2` or `L=M+1-K`
    otherwise. Let I be the sequence `infodict['iord']` and let E be the sequence
    `infodict['elist']`. Then `E[I[1]], ..., E[I[L]]` forms a decreasing sequence.
  prefs: []
  type: TYPE_NORMAL
- en: If the input argument points is provided (i.e., it is not None), the following
    additional outputs are placed in the output dictionary. Assume the points sequence
    is of length P.
  prefs: []
  type: TYPE_NORMAL
- en: ‘pts’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length P+2 containing the integration limits and the break
    points of the intervals in ascending order. This is an array giving the subintervals
    over which integration will occur.
  prefs: []
  type: TYPE_NORMAL
- en: ‘level’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 integer array of length M (=limit), containing the subdivision levels
    of the subintervals, i.e., if (aa,bb) is a subinterval of `(pts[1], pts[2])` where
    `pts[0]` and `pts[2]` are adjacent elements of `infodict['pts']`, then (aa,bb)
    has level l if `|bb-aa| = |pts[2]-pts[1]| * 2**(-l)`.
  prefs: []
  type: TYPE_NORMAL
- en: ‘ndin’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 integer array of length P+2\. After the first integration over the
    intervals (pts[1], pts[2]), the error estimates over some of the intervals may
    have been increased artificially in order to put their subdivision forward. This
    array has ones in slots corresponding to the subintervals for which this happens.
  prefs: []
  type: TYPE_NORMAL
- en: '**Weighting the integrand**'
  prefs: []
  type: TYPE_NORMAL
- en: The input variables, *weight* and *wvar*, are used to weight the integrand by
    a select list of functions. Different integration methods are used to compute
    the integral with these weighting functions, and these do not support specifying
    break points. The possible values of weight and the corresponding weighting functions
    are.
  prefs: []
  type: TYPE_NORMAL
- en: '| `weight` | Weight function used | `wvar` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ‘cos’ | cos(w*x) | wvar = w |'
  prefs: []
  type: TYPE_TB
- en: '| ‘sin’ | sin(w*x) | wvar = w |'
  prefs: []
  type: TYPE_TB
- en: '| ‘alg’ | g(x) = ((x-a)**alpha)*((b-x)**beta) | wvar = (alpha, beta) |'
  prefs: []
  type: TYPE_TB
- en: '| ‘alg-loga’ | g(x)*log(x-a) | wvar = (alpha, beta) |'
  prefs: []
  type: TYPE_TB
- en: '| ‘alg-logb’ | g(x)*log(b-x) | wvar = (alpha, beta) |'
  prefs: []
  type: TYPE_TB
- en: '| ‘alg-log’ | g(x)*log(x-a)*log(b-x) | wvar = (alpha, beta) |'
  prefs: []
  type: TYPE_TB
- en: '| ‘cauchy’ | 1/(x-c) | wvar = c |'
  prefs: []
  type: TYPE_TB
- en: wvar holds the parameter w, (alpha, beta), or c depending on the weight selected.
    In these expressions, a and b are the integration limits.
  prefs: []
  type: TYPE_NORMAL
- en: For the ‘cos’ and ‘sin’ weighting, additional inputs and outputs are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'For finite integration limits, the integration is performed using a Clenshaw-Curtis
    method which uses Chebyshev moments. For repeated calculations, these moments
    are saved in the output dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘momcom’
  prefs: []
  type: TYPE_NORMAL
- en: The maximum level of Chebyshev moments that have been computed, i.e., if `M_c`
    is `infodict['momcom']` then the moments have been computed for intervals of length
    `|b-a| * 2**(-l)`, `l=0,1,...,M_c`.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nnlog’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 integer array of length M(=limit), containing the subdivision levels
    of the subintervals, i.e., an element of this array is equal to l if the corresponding
    subinterval is `|b-a|* 2**(-l)`.
  prefs: []
  type: TYPE_NORMAL
- en: ‘chebmo’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-2 array of shape (25, maxp1) containing the computed Chebyshev moments.
    These can be passed on to an integration over the same interval by passing this
    array as the second element of the sequence wopts and passing infodict[‘momcom’]
    as the first element.
  prefs: []
  type: TYPE_NORMAL
- en: 'If one of the integration limits is infinite, then a Fourier integral is computed
    (assuming w neq 0). If full_output is 1 and a numerical error is encountered,
    besides the error message attached to the output tuple, a dictionary is also appended
    to the output tuple which translates the error codes in the array `info[''ierlst'']`
    to English messages. The output information dictionary contains the following
    entries instead of ‘last’, ‘alist’, ‘blist’, ‘rlist’, and ‘elist’:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘lst’
  prefs: []
  type: TYPE_NORMAL
- en: The number of subintervals needed for the integration (call it `K_f`).
  prefs: []
  type: TYPE_NORMAL
- en: ‘rslst’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length M_f=limlst, whose first `K_f` elements contain the
    integral contribution over the interval `(a+(k-1)c, a+kc)` where `c = (2*floor(|w|)
    + 1) * pi / |w|` and `k=1,2,...,K_f`.
  prefs: []
  type: TYPE_NORMAL
- en: ‘erlst’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array of length `M_f` containing the error estimate corresponding to
    the interval in the same position in `infodict['rslist']`.
  prefs: []
  type: TYPE_NORMAL
- en: ‘ierlst’
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 integer array of length `M_f` containing an error flag corresponding
    to the interval in the same position in `infodict['rslist']`. See the explanation
    dictionary (last entry in the output tuple) for the meaning of the codes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Details of QUADPACK level routines**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`quad`](#scipy.integrate.quad "scipy.integrate.quad") calls routines from
    the FORTRAN library QUADPACK. This section provides details on the conditions
    for each routine to be called and a short description of each routine. The routine
    called depends on *weight*, *points* and the integration limits *a* and *b*.'
  prefs: []
  type: TYPE_NORMAL
- en: '| QUADPACK routine | *weight* | *points* | infinite bounds |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| qagse | None | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| qagie | None | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| qagpe | None | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| qawoe | ‘sin’, ‘cos’ | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| qawfe | ‘sin’, ‘cos’ | No | either *a* or *b* |'
  prefs: []
  type: TYPE_TB
- en: '| qawse | ‘alg*’ | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| qawce | ‘cauchy’ | No | No |'
  prefs: []
  type: TYPE_TB
- en: The following provides a short description from [[1]](#rd7cc8840d1df-1) for
    each routine.
  prefs: []
  type: TYPE_NORMAL
- en: qagse
  prefs: []
  type: TYPE_NORMAL
- en: is an integrator based on globally adaptive interval subdivision in connection
    with extrapolation, which will eliminate the effects of integrand singularities
    of several types.
  prefs: []
  type: TYPE_NORMAL
- en: qagie
  prefs: []
  type: TYPE_NORMAL
- en: handles integration over infinite intervals. The infinite range is mapped onto
    a finite interval and subsequently the same strategy as in `QAGS` is applied.
  prefs: []
  type: TYPE_NORMAL
- en: qagpe
  prefs: []
  type: TYPE_NORMAL
- en: serves the same purposes as QAGS, but also allows the user to provide explicit
    information about the location and type of trouble-spots i.e. the abscissae of
    internal singularities, discontinuities and other difficulties of the integrand
    function.
  prefs: []
  type: TYPE_NORMAL
- en: qawoe
  prefs: []
  type: TYPE_NORMAL
- en: is an integrator for the evaluation of \(\int^b_a \cos(\omega x)f(x)dx\) or
    \(\int^b_a \sin(\omega x)f(x)dx\) over a finite interval [a,b], where \(\omega\)
    and \(f\) are specified by the user. The rule evaluation component is based on
    the modified Clenshaw-Curtis technique
  prefs: []
  type: TYPE_NORMAL
- en: An adaptive subdivision scheme is used in connection with an extrapolation procedure,
    which is a modification of that in `QAGS` and allows the algorithm to deal with
    singularities in \(f(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: qawfe
  prefs: []
  type: TYPE_NORMAL
- en: calculates the Fourier transform \(\int^\infty_a \cos(\omega x)f(x)dx\) or \(\int^\infty_a
    \sin(\omega x)f(x)dx\) for user-provided \(\omega\) and \(f\). The procedure of
    `QAWO` is applied on successive finite intervals, and convergence acceleration
    by means of the \(\varepsilon\)-algorithm is applied to the series of integral
    approximations.
  prefs: []
  type: TYPE_NORMAL
- en: qawse
  prefs: []
  type: TYPE_NORMAL
- en: 'approximate \(\int^b_a w(x)f(x)dx\), with \(a < b\) where \(w(x) = (x-a)^{\alpha}(b-x)^{\beta}v(x)\)
    with \(\alpha,\beta > -1\), where \(v(x)\) may be one of the following functions:
    \(1\), \(\log(x-a)\), \(\log(b-x)\), \(\log(x-a)\log(b-x)\).'
  prefs: []
  type: TYPE_NORMAL
- en: The user specifies \(\alpha\), \(\beta\) and the type of the function \(v\).
    A globally adaptive subdivision strategy is applied, with modified Clenshaw-Curtis
    integration on those subintervals which contain *a* or *b*.
  prefs: []
  type: TYPE_NORMAL
- en: qawce
  prefs: []
  type: TYPE_NORMAL
- en: compute \(\int^b_a f(x) / (x-c)dx\) where the integral must be interpreted as
    a Cauchy principal value integral, for user specified \(c\) and \(f\). The strategy
    is globally adaptive. Modified Clenshaw-Curtis integration is used on those intervals
    containing the point \(x = c\).
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration of Complex Function of a Real Variable**'
  prefs: []
  type: TYPE_NORMAL
- en: A complex valued function, \(f\), of a real variable can be written as \(f =
    g + ih\). Similarly, the integral of \(f\) can be written as
  prefs: []
  type: TYPE_NORMAL
- en: \[\int_a^b f(x) dx = \int_a^b g(x) dx + i\int_a^b h(x) dx\]
  prefs: []
  type: TYPE_NORMAL
- en: assuming that the integrals of \(g\) and \(h\) exist over the interval \([a,b]\)
    [[2]](#rd7cc8840d1df-2). Therefore, `quad` integrates complex-valued functions
    by integrating the real and imaginary components separately.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Piessens, Robert; de Doncker-Kapenga, Elise; Überhuber, Christoph W.; Kahaner,
    David (1983). QUADPACK: A subroutine package for automatic integration. Springer-Verlag.
    ISBN 978-3-540-12553-2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: McCullough, Thomas; Phillips, Keith (1973). Foundations of Analysis in the Complex
    Plane. Holt Rinehart Winston. ISBN 0-03-086370-8
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Calculate \(\int^4_0 x^2 dx\) and compare with an analytic result
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calculate \(\int^\infty_0 e^{-x} dx\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Calculate \(\int^1_0 a x \,dx\) for \(a = 1, 3\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate \(\int^1_0 x^2 + y^2 dx\) with ctypes, holding y parameter as 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that pulse shapes and other sharp features as compared to the size
    of the integration interval may not be integrated correctly using this method.
    A simplified example of this limitation is integrating a y-axis reflected step
    function with many zero values within the integrals bounds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
