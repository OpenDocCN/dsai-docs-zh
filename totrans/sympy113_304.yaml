- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/contributing/dependencies.html](https://docs.sympy.org/latest/contributing/dependencies.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This page lists the hard and optional dependencies of SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: There are several packages that, when installed, can enable certain additional
    SymPy functionality. Most users and contributors will not need to install any
    of the packages mentioned below (except for the hard dependencies), unless they
    intend to use or contribute to the parts of SymPy that can use those packages.
  prefs: []
  type: TYPE_NORMAL
- en: Every dependency listed below can be installed with conda via [conda-forge](https://conda-forge.org/),
    and most can also be installed with `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: This page does not list packages which themselves depend on SymPy, only those
    packages that SymPy depends on. An incomplete list of packages that depend on
    SymPy can be found on the [main SymPy webpage](https://www.sympy.org/en/index.html),
    and a more complete list can be found on [GitHub](https://github.com/sympy/sympy/network/dependents?dependent_type=PACKAGE)
    or [libraries.io](https://libraries.io/pypi/sympy/dependents).
  prefs: []
  type: TYPE_NORMAL
- en: '## Hard Dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: 'SymPy only has one hard dependency, which is required for it to work: mpmath.'
  prefs: []
  type: TYPE_NORMAL
- en: '**mpmath**: [mpmath](https://mpmath.org/) is a pure Python package for arbitrary
    precision arithmetic. It is used under the hood whenever SymPy calculates the
    floating-point value of a function, e.g., when using [evalf](../modules/core.html#sympy.core.evalf.EvalfMixin.evalf
    "sympy.core.evalf.EvalfMixin.evalf").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SymPy cannot function without mpmath and will fail to import if it is not installed.
    If you get an error like
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: this means that you did not install mpmath correctly. [This page](../install.html#mpmath-install)
    explains how to install it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Most methods of installing SymPy, such as the ones outlined in the [installation](../install.html#installation)
    guide, will install mpmath automatically. You typically only need to install mpmath
    manually if you did not actually install SymPy, e.g., if you are developing directly
    on SymPy in the git repository.  ## Optional Dependencies'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These dependencies are not required to use SymPy. The vast majority of SymPy
    functions do not require them, however, a few functions such as plotting and automatic
    wrapping of code generated functions require additional dependencies to function.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, as a contributor, when running the SymPy tests, some tests will
    be skipped if a dependency they require is not installed. The [GitHub Actions
    CI](https://github.com/sympy/sympy/actions) which is run on every SymPy pull request
    will automatically install these dependencies in the “optional-dependencies” build,
    but you may wish to install them locally if you are working on a part of SymPy
    that uses them.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended Optional Dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These dependencies are not required for SymPy to function, but it is recommended
    that all users install them if they can, as they will improve the general performance
    of SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: '**gmpy2**: [gmpy2](https://gmpy2.readthedocs.io/en/latest/) is a Python wrapper
    for the [GMP multiple-precision library](https://gmplib.org/). It provides large
    integers that are faster than the built-in Python `int`. When gmpy2 is installed,
    it is used automatically by certain core functions that operate on integers, such
    as the [polys](../modules/polys/index.html#polys-docs). See [Reference docs for
    the Poly Domains](../modules/polys/domainsref.html#polys-domainsref) for more
    details. SymPy uses `gmpy2` automatically when it is installed. No further action
    is required to enable it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The polys themselves are used by many parts of SymPy, such as the integration
    algorithms, simplification algorithms like `collect()` and `factor()`, the matrices,
    and some parts of the core. Thus, installing `gmpy2` can speed up many parts of
    SymPy. It is not a required dependency of SymPy because it makes use of a non-Python
    library (GMP), which is also non-BSD licensed. However, we recommended all users
    who are able to to install `gmpy2` to get a better SymPy experience.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Interactive Use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SymPy is designed to be used both interactively and as a library. When used
    interactively, SymPy is able to interface with IPython and Jupyter notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: '**IPython**: The [`init_session()`](../modules/interactive.html#sympy.interactive.session.init_session
    "sympy.interactive.session.init_session") function and `isympy` command will automatically
    start IPython if it is installed. In addition to the usual benefits of using [IPython](https://ipython.org/),
    this enables interactive plotting with matplotlib. Also some flags such as `auto_symbols`
    and `auto_int_to_Integer` will only work in IPython.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `IPython` package is required to run some of the tests in sympy/interactive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Jupyter Notebook and Qt Console**: SymPy expressions automatically print
    using MathJax in the [Jupyter Notebook](https://jupyter.org/) and with LaTeX [Qt
    Console](https://qtconsole.readthedocs.io/en/stable/) (if [LaTeX](#dependencies-latex)
    is installed).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Printing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`preview()`](../modules/printing.html#sympy.printing.preview.preview "sympy.printing.preview.preview")
    function automatically converts SymPy expressions into images rendered with LaTeX.
    `preview()` can either save the image to a file or show it with a viewer.
  prefs: []
  type: TYPE_NORMAL
- en: '**LaTeX**: A \(\mathrm{\LaTeX}\) distributions such as [TeXLive](https://tug.org/texlive/)
    or [MiKTeX](https://miktex.org/) is required for [`preview()`](../modules/printing.html#sympy.printing.preview.preview
    "sympy.printing.preview.preview") to function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several functions in the [`sympy.parsing`](../modules/parsing.html#module-sympy.parsing
    "sympy.parsing") submodule require external dependencies to function. Note that
    not all parsers require external modules at this time. The Python ([`parse_expr()`](../modules/parsing.html#sympy.parsing.sympy_parser.parse_expr
    "sympy.parsing.sympy_parser.parse_expr")), Mathematica ([`parse_mathematica()`](../modules/parsing.html#sympy.parsing.mathematica.parse_mathematica
    "sympy.parsing.mathematica.parse_mathematica")), and Maxima ([`parse_maxima()`](../modules/parsing.html#sympy.parsing.maxima.parse_maxima
    "sympy.parsing.maxima.parse_maxima")) parsers do not require any external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**antlr-python-runtime**: [ANTLR](https://www.antlr.org/) can be used for the
    [`LaTeX parser`](../modules/parsing.html#sympy.parsing.latex.parse_latex "sympy.parsing.latex.parse_latex"),
    and is used in the [Autolev](../modules/physics/mechanics/autolev_parser.html#autolev-parser)
    parsers. They both require the ANTLR Python runtime to be installed. The package
    for this is called `antlr-python-runtime` with conda and `antlr4-python3-runtime`
    with pip. Also be aware that the version of the ANTLR Python runtime must match
    the version that was used to compile the LaTeX and Autolev parsers (4.10).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lark**: [Lark](https://lark-parser.readthedocs.io/en/stable/) can be used
    as an alternative backend for the [`LaTeX parser`](../modules/parsing.html#sympy.parsing.latex.parse_latex
    "sympy.parsing.latex.parse_latex").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clang Python Bindings**: The C parser (`sympy.parsing.c.parse_c`) requires
    the Clang Python bindings. The package for this is called `python-clang` with
    conda and `clang` with pip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lfortran**: The Fortran parser (in `sympy.parsing.fortran`) requires [LFortran](https://lfortran.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`satisfiable()`](../modules/logic.html#sympy.logic.inference.satisfiable
    "sympy.logic.inference.satisfiable") function includes a pure Python implementation
    of the DPLL satisfiability algorithm. But it can optionally use faster C SAT solvers
    if they are installed. Note that `satisfiable()` is also used by [`ask()`](../modules/assumptions/ask.html#sympy.assumptions.ask.ask
    "sympy.assumptions.ask.ask").
  prefs: []
  type: TYPE_NORMAL
- en: '**pycosat**: [Pycosat](https://pypi.org/project/pycosat/) is used automatically
    if it is installed. The use of pycosat can be forced by using `satisfiable(algorithm=''pycosat'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pysat**: [Pysat](https://pysathq.github.io/) is a library which wraps many
    SAT solvers. It can also be used as a backend to `satisfiable()`. Presently, only
    [Minisat](http://minisat.se/MiniSat.html) is implemented, using `satisfiable(algorithm=minisat22'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`sympy.plotting.plot`](../modules/plotting.html#module-sympy.plotting.plot
    "sympy.plotting.plot") module makes heavy use of external plotting libraries to
    render plots. The primarily plotting module that is supported is Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '**matplotlib**: Most plotting functionality requires the [Matplotlib](https://matplotlib.org/)
    plotting library. Without Matplotlib installed, most plotting functions will either
    fail or give rudimentary [text plots](../modules/plotting.html#sympy.plotting.textplot.textplot
    "sympy.plotting.textplot.textplot").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pyglet**: SymPy has a submodule [`sympy.plotting.pygletplot`](../modules/plotting.html#module-sympy.plotting.pygletplot
    "sympy.plotting.pygletplot") that can be used to interface with the [pyglet](https://pyglet.org/)
    module to do 2D and 3D plotting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### lambdify'
  prefs: []
  type: TYPE_NORMAL
- en: '[`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") is a function that converts SymPy expressions
    into functions that can be evaluated numerically using various libraries as backends.
    `lambdify` is the primary vehicle by which users interface between SymPy and these
    libraries. It is the standard way to convert a symbolic SymPy expression into
    an evaluable numeric function.'
  prefs: []
  type: TYPE_NORMAL
- en: In principle, `lambdify` can interface with any external library if the user
    passes in an appropriate namespace dictionary as the third argument, but by default,
    `lambdify` is aware of several popular numeric Python libraries. These libraries
    are enabled as backends in `lambdify` with built-in translations to convert SymPy
    expressions into the appropriate functions for those libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy**: By default, if it is installed, `lambdify` creates functions using
    [NumPy](https://numpy.org/) (if NumPy is not installed, `lambdify` produces functions
    using the standard library [math](https://docs.python.org/3/library/math.html)
    module, although this behavior is primarily provided for backwards compatibility).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SciPy**: If [SciPy](https://scipy.org/) is installed, `lambdify` will use
    it automatically. SciPy is needed to lambdify certain [special functions](https://docs.scipy.org/doc/scipy/reference/special.html)
    that are not included in NumPy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CuPy**: [CuPy](https://cupy.dev/) is a library that provides a NumPy compatible
    interface for CUDA GPUs. `lambdify` can produce CuPy compatible functions using
    `lambdify(modules=''cupy'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jax**: [JAX](https://github.com/google/jax) is a library that uses XLA to
    compile and run NumPy programs on GPUs and TPUs. `lambdify` can produce JAX compatibly
    functions using `lambdify(modules=''jax'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorFlow**: [TensorFlow](https://www.tensorflow.org/) is a popular machine
    learning library. `lambdify` can produce TensorFlow compatible functions using
    `lambdify(modules=''tensorflow'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NumExpr**: [NumExpr](https://github.com/pydata/numexpr) is a fast numerical
    expression evaluator for NumPy. `lambdify` can produce NumExpr compatible functions
    using `lambdify(modules=''numexpr'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mpmath**: `lambdify` can also produce mpmath compatible functions. Note that
    mpmath is already a [required dependency](#dependencies-mpmath) of SymPy. This
    functionality is useful for converting a SymPy expression to a function for use
    with pure mpmath.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Generation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SymPy can [generate code](../modules/codegen.html#codegen-prose) for a large
    number of languages by converting SymPy expressions into valid code for those
    languages. It also has functionality for some languages to automatically compile
    and run the code.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the dependencies below are **not** a list of supported languages that
    SymPy can generate code for. Rather it is a list of packages that SymPy can interface
    with in some way. For most languages that SymPy supports code generation, it simply
    generates a string representing the code for that language, so no dependency on
    that language is required to use the code generation functionality. A dependency
    is typically only required for features that automatically take the generated
    code and compile it to a function that can be used within Python. Note that [`lambdify()`](../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") is a special case of this, but its dependencies
    are listed [above](#dependencies-lambdify).
  prefs: []
  type: TYPE_NORMAL
- en: Autowrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**NumPy**: [NumPy](https://numpy.org/) and, optionally, its subpackage [f2py](https://numpy.org/doc/stable/f2py/),
    can be used to generate Python functions using the [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") or [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify") functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cython**: [Cython](https://cython.org/) can be used as a backend for [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap") or [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify"). Cython is also used in some of the `sympy.codegen`
    tests to compile some examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compilers**: [`autowrap()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.autowrap
    "sympy.utilities.autowrap.autowrap"), [`ufuncify()`](../modules/utilities/autowrap.html#sympy.utilities.autowrap.ufuncify
    "sympy.utilities.autowrap.ufuncify"), and related functions rely on a compiler
    to compile the generated code to a function. Most standard C, C++, and Fortran
    compilers are supported, including [Clang/LLVM](https://clang.llvm.org/), [GCC](https://gcc.gnu.org/),
    and [ifort](https://en.wikipedia.org/wiki/Intel_Fortran_Compiler).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Printers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Most code printers generate Python strings, and therefore do not require the
    given library or language compiler as a dependency. However, a few code printers
    generate Python functions instead of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aesara**: The [`sympy.printing.aesaracode`](../modules/printing.html#module-sympy.printing.aesaracode
    "sympy.printing.aesaracode") module contains functions to convert SymPy expressions
    into a functions using the [Aeseara](https://aesara.readthedocs.io/en/latest)
    (previously Theano) library. The Aesara code generation functions return Aesara
    graph objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**llvmlite**: The `sympy.printing.llvmjitcode` module supports generating LLVM
    Jit from a SymPy expression. The functions make use of [llvmlite](https://llvmlite.readthedocs.io/en/latest/),
    a Python wrapper around [LLVM](https://llvm.org/). The `llvm_callable()` function
    generates callable functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorFlow**: The `sympy.printing.tensorflow` module supports generating
    functions using the [TensorFlow](https://www.tensorflow.org/), a popular machine
    learning library. Unlike the above two examples, `tensorflow_code()` function
    **does** generate Python strings. However, `tensorflow` is imported if available
    in order to automatically detect the TensorFlow version. If it is not installed,
    the `tensorflow_code()` function assumes the latest supported version of TensorFlow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing-Only Dependencies
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Wurlitzer**: [Wurlitzer](https://github.com/minrk/wurlitzer) is a Python
    package that allows capturing output from C extensions. It is used by some of
    the tests in the `sympy.codegen` submodule. It is only used by the test suite.
    It is not used by any end-user functionality. If it is not installed, some tests
    will be skipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cython**: [Cython](https://cython.org/) is also used in some of the `sympy.codegen`
    tests to compile some examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compilers**: The various [compilers](#dependencies-compilers) mentioned above
    are used in some of the codegen and autowrap tests if they are installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [`sympy.stats.sample()`](../modules/stats.html#sympy.stats.sample "sympy.stats.sample")
    function uses an external library to produce samples from the given distribution.
    At least one of the following libraries is required to use the sampling functionality
    of `sympy.stats`.
  prefs: []
  type: TYPE_NORMAL
- en: '**SciPy**: `sample(library=''scipy'')` is the default. This uses [scipy.stats](https://docs.scipy.org/doc/scipy/reference/stats.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NumPy**: `sample(library=''numpy'')` uses the [NumPy random module](https://numpy.org/doc/stable/reference/random/index.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pymc**: `sample(library=''pymc'')` uses [PyMC](https://www.pymc.io/) to do
    sampling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional SymEngine Backend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**python-symengine**: [SymEngine](https://symengine.org/) is a fast symbolic
    manipulation library, written in C++. The SymEngine Python bindings may be used
    as an optional backend for SymPy core. To do this, first install the SymEngine
    Python bindings (with `pip install symengine` or `conda install -c conda-forge
    python-symengine`) and run SymPy with the `USE_SYMENGINE=1` environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Presently, the SymEngine backend is only used by the [sympy.physics.mechanics](../modules/physics/mechanics/index.html#classical-mechanics)
    and [sympy.liealgebras](../modules/liealgebras/index.html#lie-algebras) modules,
    although you can also interface with SymPy’s SymEngine backend directly by importing
    things from `sympy.core.backend`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: SymEngine backend support is still experimental, so certain SymPy functions
    may not work correctly when it is enabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Sage](https://www.sagemath.org/) is an open source mathematics software that
    incorporates a large number of open source mathematics libraries. SymPy is one
    of the libraries used by Sage.'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the code that interfaces between SymPy and Sage is in Sage itself, but
    a few `_sage_` methods in SymPy that do some very basic setting up of the Sage/SymPy
    wrappers. These methods should typically only be called by Sage itself.
  prefs: []
  type: TYPE_NORMAL
- en: Development Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Typical development on SymPy does not require any additional dependencies beyond
    Python and mpmath.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Source Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**git**: The [SymPy source code](https://github.com/sympy/sympy) uses the [git](https://git-scm.com/)
    version control system. See the [installation guide](../install.html#installation-git)
    and the [contributor guide](new-contributors-guide/dev-setup.html#devsetup) for
    instructions on how to get the development version of SymPy from git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the Tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The base SymPy tests do not require any additional dependencies, however most
    of the above dependencies may be required for some tests to run. Tests that depend
    on optional dependencies should be skipped when they are not installed, either
    by using the `sympy.testing.pytest.skip()` function or by setting `skip = True`
    to skip the entire test file. Optional modules in tests and SymPy library code
    should be imported with `import_module()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**pytest**: [Pytest](https://docs.pytest.org/en/latest/) is not a required
    dependency for the SymPy test suite. SymPy has its own test runner, which can
    be accessed via the `bin/test` script in the SymPy source directory or the [`test()`](../modules/testing/runtests.html#sympy.testing.runtests.test
    "sympy.testing.runtests.test") function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, if you prefer to use pytest, you can use it to run the tests instead
    of the SymPy test runner. Tests in SymPy should use the wrappers in [`sympy.testing.pytest`](../modules/testing/pytest.html#module-sympy.testing.pytest
    "sympy.testing.pytest") instead of using pytest functions directly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Cloudpickle**: The [cloudpickle](https://github.com/cloudpipe/cloudpickle)
    package can be used to more effectively pickle SymPy objects than the built-in
    Python [pickle](https://docs.python.org/3/library/pickle.html). Some tests in
    `sympy.utilities.tests.test_pickling.py` depend on cloudpickle to run. It is not
    otherwise required for any SymPy function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hypothesis**: [Hypothesis](https://github.com/HypothesisWorks/hypothesis/tree/master)
    is a required dependency for the SymPy test suit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building the documentation requires several additional dependencies. [This page](new-contributors-guide/build-docs.html#build-the-documentation)
    outlines these dependencies and how to install them. It is only necessary to install
    these dependencies if you are contributing documentation to SymPy and want to
    check that the HTML or PDF documentation renders correctly. If you only want to
    view the documentation for the development version of SymPy, development builds
    of the docs are hosted online at [https://docs.sympy.org/dev/index.html](https://docs.sympy.org/dev/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Running the Benchmarks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The benchmarks for SymPy are hosted at [https://github.com/sympy/sympy_benchmarks](https://github.com/sympy/sympy_benchmarks).
    The [README](https://github.com/sympy/sympy_benchmarks#readme) in that repository
    explains how to run the benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the benchmarks are also run automatically on the [GitHub Actions CI](https://github.com/sympy/sympy/actions),
    so it is generally not necessary to run them yourself as a contributor unless
    you want to reproduce the benchmarks results on your computer or add a new benchmark
    to the suite.
  prefs: []
  type: TYPE_NORMAL
- en: '**asv**: [Airspeed Velocity](https://asv.readthedocs.io/en/stable/) is the
    package used for running the benchmarks. Note that the package name that you install
    is called `asv`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
