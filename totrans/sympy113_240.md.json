["```py\nclass sympy.physics.continuum_mechanics.cable.Cable(support_1, support_2)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.apply_load(-1, ('P', 2, 7, 3, 270))\n>>> c.apply_load(-1, ('Q', 6, 4, 2, 270))\n>>> c.loads\n{'distributed': {}, 'point_load': {'P': [3, 270], 'Q': [2, 270]}}\n>>> c.loads_position\n{'P': [2, 7], 'Q': [6, 4]} \n```", "```py\napply_length(length)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.apply_length(20)\n>>> c.length\n20 \n```", "```py\napply_load(order, load)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.apply_load(-1, ('Z', 5, 5, 12, 30))\n>>> c.loads\n{'distributed': {}, 'point_load': {'Z': [12, 30]}}\n>>> c.loads_position\n{'Z': [5, 5]} \n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.apply_load(0, ('X', 9))\n>>> c.loads\n{'distributed': {'X': 9}, 'point_load': {}} \n```", "```py\nchange_support(label, new_support)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.supports\n{'A': [0, 10], 'B': [10, 10]}\n>>> c.change_support('B', ('C', 5, 6))\n>>> c.supports\n{'A': [0, 10], 'C': [5, 6]} \n```", "```py\nproperty left_support\n```", "```py\nproperty length\n```", "```py\nproperty loads\n```", "```py\nproperty loads_position\n```", "```py\nproperty reaction_loads\n```", "```py\nremove_loads(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable(('A', 0, 10), ('B', 10, 10))\n>>> c.apply_load(-1, ('Z', 5, 5, 12, 30))\n>>> c.loads\n{'distributed': {}, 'point_load': {'Z': [12, 30]}}\n>>> c.remove_loads('Z')\n>>> c.loads\n{'distributed': {}, 'point_load': {}} \n```", "```py\nproperty right_support\n```", "```py\nsolve(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c = Cable((\"A\", 0, 10), (\"B\", 10, 10))\n>>> c.apply_load(-1, ('Z', 2, 7.26, 3, 270))\n>>> c.apply_load(-1, ('X', 4, 6, 8, 270))\n>>> c.solve()\n>>> c.tension\n{A_Z: 8.91403453669861, X_B: 19*sqrt(13)/10, Z_X: 4.79150773600774}\n>>> c.reaction_loads\n{R_A_x: -5.25547445255474, R_A_y: 7.2, R_B_x: 5.25547445255474, R_B_y: 3.8}\n>>> c.length\n5.7560958484519 + 2*sqrt(13) \n```", "```py\n>>> from sympy.physics.continuum_mechanics.cable import Cable\n>>> c=Cable((\"A\", 0, 40),(\"B\", 100, 20))\n>>> c.apply_load(0, (\"X\", 850))\n>>> c.solve(58.58, 0)\n>>> c.tension\n{'distributed': 36456.8485*sqrt(0.000543529004799705*(X + 0.00135624381275735)**2 + 1)}\n>>> c.tension_at(0)\n61709.0363315913\n>>> c.reaction_loads\n{R_A_x: 36456.8485, R_A_y: -49788.5866682485, R_B_x: 44389.8401587246, R_B_y: 42866.621696333} \n```", "```py\nproperty supports\n```", "```py\nproperty tension\n```", "```py\ntension_at(x)\n```"]