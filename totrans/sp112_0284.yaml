- en: scipy.linalg.qr_multiply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.qr_multiply.html#scipy.linalg.qr_multiply](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.linalg.qr_multiply.html#scipy.linalg.qr_multiply)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the QR decomposition and multiply Q with a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the decomposition `A = Q R` where Q is unitary/orthogonal and R upper
    triangular. Multiply Q with a vector or a matrix c.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(M, N), array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array
  prefs: []
  type: TYPE_NORMAL
- en: '**c**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array to be multiplied by `q`.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘left’, ‘right’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '`Q @ c` is returned if mode is ‘left’, `c @ Q` is returned if mode is ‘right’.
    The shape of c must be appropriate for the matrix multiplications, if mode is
    ‘left’, `min(a.shape) == c.shape[0]`, if mode is ‘right’, `a.shape[0] == c.shape[1]`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**pivoting**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not factorization should include pivoting for rank-revealing qr decomposition,
    see the documentation of qr.
  prefs: []
  type: TYPE_NORMAL
- en: '**conjugate**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether Q should be complex-conjugated. This might be faster than explicit conjugation.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_a**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether data in a is overwritten (may improve performance)
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_c**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether data in c is overwritten (may improve performance). If this is used,
    c must be big enough to keep the result, i.e. `c.shape[0]` = `a.shape[0]` if mode
    is ‘left’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CQ**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The product of `Q` and `c`.
  prefs: []
  type: TYPE_NORMAL
- en: '**R**(K, N), ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: R array of the resulting QR factorization where `K = min(M, N)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**P**(N,) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Integer pivot array. Only returned when `pivoting=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: LinAlgError
  prefs: []
  type: TYPE_NORMAL
- en: Raised if QR decomposition fails.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is an interface to the LAPACK routines `?GEQRF`, `?ORMQR`, `?UNMQR`, and
    `?GEQP3`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
