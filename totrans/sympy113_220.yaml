- en: Gates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/gate.html](https://docs.sympy.org/latest/modules/physics/quantum/gate.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An implementation of gates that act on qubits.
  prefs: []
  type: TYPE_NORMAL
- en: Gates are unitary operators that act on the space of qubits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Medium Term Todo:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimize Gate._apply_operators_Qubit to remove the creation of many intermediate
    Qubit objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add commutation relationships to all operators and use this in gate_sort.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix gate_sort and gate_simp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get multi-target UGates plotting properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get UGate to work with either sympy/numpy matrices and output either format.
    This should also use the matrix slots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A general unitary gate with control qubits.
  prefs: []
  type: TYPE_NORMAL
- en: A general control gate applies a target gate to a set of targets if all of the
    control qubits have a particular values (set by `CGate.control_value`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The label in this case has the form (controls, gate), where controls is a tuple/list
    of control qubits (as ints) and gate is a `Gate` instance that is the target operator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of control qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Decompose the controlled gate into CNOT and single qubits gates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Return True/False to indicate if the controls are satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The non-controlled gate that will be applied to the targets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The minimum number of qubits this gate needs to act on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The total number of qubits this gate acts on.
  prefs: []
  type: TYPE_NORMAL
- en: For controlled gate subclasses this includes both target and control qubits,
    so that, for examples the CNOT gate acts on 2 qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Plot the controlled gate. If *simplify_cgate* is true, simplify C-X and C-Z
    gates into their more familiar forms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of target qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Version of CGate that allows gate simplifications. I.e. cnot looks like an oplus,
    cphase has dots, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`CNotGate`](#sympy.physics.quantum.gate.CNotGate "sympy.physics.quantum.gate.CNotGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Two qubit controlled-NOT.
  prefs: []
  type: TYPE_NORMAL
- en: This gate performs the NOT or X gate on the target qubit if the control qubits
    all have the value 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of the form (control, target).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of control qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The non-controlled gate that will be applied to the targets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The minimum number of qubits this gate needs to act on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of target qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Non-controlled unitary gate operator that acts on qubits.
  prefs: []
  type: TYPE_NORMAL
- en: This is a general abstract gate that needs to be subclassed to do anything useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : tuple, int'
  prefs: []
  type: TYPE_NORMAL
- en: A list of the target qubits (as ints) that the gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The matrix representation of the target part of the gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format string (‘sympy’,’numpy’, etc.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The minimum number of qubits this gate needs to act on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The total number of qubits this gate acts on.
  prefs: []
  type: TYPE_NORMAL
- en: For controlled gate subclasses this includes both target and control qubits,
    so that, for examples the CNOT gate acts on 2 qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of target qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`HadamardGate`](#sympy.physics.quantum.gate.HadamardGate "sympy.physics.quantum.gate.HadamardGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit Hadamard gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit identity gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: A single qubit unitary gate base class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`PhaseGate`](#sympy.physics.quantum.gate.PhaseGate "sympy.physics.quantum.gate.PhaseGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit phase, or S, gate.
  prefs: []
  type: TYPE_NORMAL
- en: This gate rotates the phase of the state by pi/2 if the state is `|1>` and does
    nothing if the state is `|0>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`PhaseGate`](#sympy.physics.quantum.gate.PhaseGate "sympy.physics.quantum.gate.PhaseGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`SwapGate`](#sympy.physics.quantum.gate.SwapGate "sympy.physics.quantum.gate.SwapGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Two qubit SWAP gate.
  prefs: []
  type: TYPE_NORMAL
- en: This gate swap the values of the two qubits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of the form (target1, target2).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Decompose the SWAP gate into CNOT gates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`TGate`](#sympy.physics.quantum.gate.TGate "sympy.physics.quantum.gate.TGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit pi/8 gate.
  prefs: []
  type: TYPE_NORMAL
- en: This gate rotates the phase of the state by pi/4 if the state is `|1>` and does
    nothing if the state is `|0>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: A two qubit unitary gate base class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: General gate specified by a set of targets and a target matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of the form (targets, U), where targets is a tuple of the target qubits
    and U is a unitary matrix with dimension of len(targets).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The matrix rep. of the target part of the gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format string (‘sympy’,’numpy’, etc.)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: A tuple of target qubits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`XGate`](#sympy.physics.quantum.gate.XGate "sympy.physics.quantum.gate.XGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit X, or NOT, gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`YGate`](#sympy.physics.quantum.gate.YGate "sympy.physics.quantum.gate.YGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit Y gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`ZGate`](#sympy.physics.quantum.gate.ZGate "sympy.physics.quantum.gate.ZGate")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The single qubit Z gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**target** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The target qubit this gate will apply to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Simplifies gates symbolically
  prefs: []
  type: TYPE_NORMAL
- en: It first sorts gates using gate_sort. It then applies basic simplification rules
    to the circuit, e.g., XGate**2 = Identity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Sorts the gates while keeping track of commutation relations
  prefs: []
  type: TYPE_NORMAL
- en: This function uses a bubble sort to rearrange the order of gate application.
    Keeps track of Quantum computations special commutation relations (e.g. things
    that apply to the same Qubit do not commute with each other)
  prefs: []
  type: TYPE_NORMAL
- en: circuit is the Mul of gates that are to be sorted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Set flag controlling normalization of Hadamard gates by \(1/\sqrt{2}\).
  prefs: []
  type: TYPE_NORMAL
- en: This is a global setting that can be used to simplify the look of various expressions,
    by leaving off the leading \(1/\sqrt{2}\) of the Hadamard gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**normalize** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Should the Hadamard gate include the \(1/\sqrt{2}\) normalization factor? When
    True, the Hadamard gate will have the \(1/\sqrt{2}\). When False, the Hadamard
    gate will not have this factor.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Return a random circuit of ngates and nqubits.
  prefs: []
  type: TYPE_NORMAL
- en: This uses an equally weighted sample of (X, Y, Z, S, T, H, CNOT, SWAP) gates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ngates** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of gates in the circuit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**nqubits** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The number of qubits in the circuit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gate_space** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of the gate classes that will be used in the circuit. Repeating gate
    classes multiple times in this tuple will increase the frequency they appear in
    the random circuit.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
