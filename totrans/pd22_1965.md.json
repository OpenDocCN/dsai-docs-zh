["```py\n    In [1]: s = pd.Series(pd.date_range(\"20130101\", periods=5, freq=\"D\"))\n\n    In [2]: s.iloc[2] = np.nan\n\n    In [3]: s\n    Out[3]: \n    0   2013-01-01\n    1   2013-01-02\n    2          NaT\n    3   2013-01-04\n    4   2013-01-05\n    Length: 5, dtype: datetime64[ns] \n    ```", "```py\n    In [6]: s.dt.hour\n    Out[6]:\n    0    0\n    1    0\n    2   -1\n    3    0\n    4    0\n    dtype: int64 \n    ```", "```py\n    In [4]: s.dt.hour\n    Out[4]: \n    0    0.0\n    1    0.0\n    2    NaN\n    3    0.0\n    4    0.0\n    Length: 5, dtype: float64 \n    ```", "```py\n    In [5]: np.random.seed(2718281)\n\n    In [6]: df = pd.DataFrame(np.random.randint(0, 100, (10, 2)), columns=[\"jim\", \"joe\"])\n\n    In [7]: df.head()\n    Out[7]: \n     jim  joe\n    0   61   81\n    1   96   49\n    2   55   65\n    3   72   51\n    4   77   12\n\n    [5 rows x 2 columns]\n\n    In [8]: ts = pd.Series(5 * np.random.randint(0, 3, 10)) \n    ```", "```py\n    In [4]: df.groupby(ts, as_index=False).max()\n    Out[4]:\n     NaN  jim  joe\n    0    0   72   83\n    1    5   77   84\n    2   10   96   65 \n    ```", "```py\n    In [4]: df.groupby(ts, as_index=False).max()\n    Out[4]:\n     jim  joe\n    0   72   83\n    1   77   84\n    2   96   65 \n    ```", "```py\n    In [9]: df = pd.DataFrame({\"jim\": range(5), \"joe\": range(5, 10)})\n\n    In [10]: df\n    Out[10]: \n     jim  joe\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    [5 rows x 2 columns]\n\n    In [11]: gr = df.groupby(df[\"jim\"] < 2) \n    ```", "```py\n    In [4]: gr.apply(sum)\n    Out[4]:\n     joe\n    jim\n    False   24\n    True    11 \n    ```", "```py\n    In [12]: gr.apply(sum)\n    Out[12]: \n     jim  joe\n    jim \n    False    9   24\n    True     1   11\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [13]: s = pd.Series([\"a\", \"b\", \"c\", \"d\"], [4, 3, 2, 1])\n\n    In [14]: s\n    Out[14]: \n    4    a\n    3    b\n    2    c\n    1    d\n    Length: 4, dtype: object \n    ```", "```py\n    In [8]: s.loc[3.5:1.5]\n    KeyError: 3.5 \n    ```", "```py\n    In [15]: s.loc[3.5:1.5]\n    Out[15]: \n    3    b\n    2    c\n    Length: 2, dtype: object \n    ```", "```py\n    In [17]: from pandas.io.data import Options\n\n    In [18]: aapl = Options('aapl', 'yahoo')\n\n    In [19]: aapl.get_call_data().iloc[0:5, 0:1]\n    Out[19]:\n     Last\n    Strike Expiry     Type Symbol\n    80     2014-11-14 call AAPL141114C00080000  29.05\n    84     2014-11-14 call AAPL141114C00084000  24.80\n    85     2014-11-14 call AAPL141114C00085000  24.05\n    86     2014-11-14 call AAPL141114C00086000  22.76\n    87     2014-11-14 call AAPL141114C00087000  21.74\n\n    In [20]: aapl.expiry_dates\n    Out[20]:\n    [datetime.date(2014, 11, 14),\n     datetime.date(2014, 11, 22),\n     datetime.date(2014, 11, 28),\n     datetime.date(2014, 12, 5),\n     datetime.date(2014, 12, 12),\n     datetime.date(2014, 12, 20),\n     datetime.date(2015, 1, 17),\n     datetime.date(2015, 2, 20),\n     datetime.date(2015, 4, 17),\n     datetime.date(2015, 7, 17),\n     datetime.date(2016, 1, 15),\n     datetime.date(2017, 1, 20)]\n\n    In [21]: aapl.get_near_stock_price(expiry=aapl.expiry_dates[0:3]).iloc[0:5, 0:1]\n    Out[21]:\n     Last\n    Strike Expiry     Type Symbol\n    109    2014-11-22 call AAPL141122C00109000  1.48\n     2014-11-28 call AAPL141128C00109000  1.79\n    110    2014-11-14 call AAPL141114C00110000  0.55\n     2014-11-22 call AAPL141122C00110000  1.02\n     2014-11-28 call AAPL141128C00110000  1.32 \n    ```", "```py\n    In [16]: from collections import deque\n\n    In [17]: df1 = pd.DataFrame([1, 2, 3])\n\n    In [18]: df2 = pd.DataFrame([4, 5, 6]) \n    ```", "```py\n    In [7]: pd.concat(deque((df1, df2)))\n    TypeError: first argument must be a list-like of pandas objects, you passed an object of type \"deque\" \n    ```", "```py\n    In [19]: pd.concat(deque((df1, df2)))\n    Out[19]: \n     0\n    0  1\n    1  2\n    2  3\n    0  4\n    1  5\n    2  6\n\n    [6 rows x 1 columns] \n    ```", "```py\n    In [20]: dfi = pd.DataFrame(\n     ....:    1, index=pd.MultiIndex.from_product([[\"a\"], range(1000)]), columns=[\"A\"]\n     ....: )\n     ....: \n    ```", "```py\n    # this was underreported in prior versions\n    In [1]: dfi.memory_usage(index=True)\n    Out[1]:\n    Index    8000 # took about 24008 bytes in < 0.15.1\n    A        8000\n    dtype: int64 \n    ```", "```py\n    In [21]: dfi.memory_usage(index=True)\n    Out[21]: \n    Index    44212\n    A         8000\n    Length: 2, dtype: int64 \n    ```", "```py\n    In [1]: s = pd.Series(pd.date_range(\"20130101\", periods=5, freq=\"D\"))\n\n    In [2]: s.iloc[2] = np.nan\n\n    In [3]: s\n    Out[3]: \n    0   2013-01-01\n    1   2013-01-02\n    2          NaT\n    3   2013-01-04\n    4   2013-01-05\n    Length: 5, dtype: datetime64[ns] \n    ```", "```py\n    In [6]: s.dt.hour\n    Out[6]:\n    0    0\n    1    0\n    2   -1\n    3    0\n    4    0\n    dtype: int64 \n    ```", "```py\n    In [4]: s.dt.hour\n    Out[4]: \n    0    0.0\n    1    0.0\n    2    NaN\n    3    0.0\n    4    0.0\n    Length: 5, dtype: float64 \n    ```", "```py\n    In [5]: np.random.seed(2718281)\n\n    In [6]: df = pd.DataFrame(np.random.randint(0, 100, (10, 2)), columns=[\"jim\", \"joe\"])\n\n    In [7]: df.head()\n    Out[7]: \n     jim  joe\n    0   61   81\n    1   96   49\n    2   55   65\n    3   72   51\n    4   77   12\n\n    [5 rows x 2 columns]\n\n    In [8]: ts = pd.Series(5 * np.random.randint(0, 3, 10)) \n    ```", "```py\n    In [4]: df.groupby(ts, as_index=False).max()\n    Out[4]:\n     NaN  jim  joe\n    0    0   72   83\n    1    5   77   84\n    2   10   96   65 \n    ```", "```py\n    In [4]: df.groupby(ts, as_index=False).max()\n    Out[4]:\n     jim  joe\n    0   72   83\n    1   77   84\n    2   96   65 \n    ```", "```py\n    In [9]: df = pd.DataFrame({\"jim\": range(5), \"joe\": range(5, 10)})\n\n    In [10]: df\n    Out[10]: \n     jim  joe\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    [5 rows x 2 columns]\n\n    In [11]: gr = df.groupby(df[\"jim\"] < 2) \n    ```", "```py\n    In [4]: gr.apply(sum)\n    Out[4]:\n     joe\n    jim\n    False   24\n    True    11 \n    ```", "```py\n    In [12]: gr.apply(sum)\n    Out[12]: \n     jim  joe\n    jim \n    False    9   24\n    True     1   11\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [13]: s = pd.Series([\"a\", \"b\", \"c\", \"d\"], [4, 3, 2, 1])\n\n    In [14]: s\n    Out[14]: \n    4    a\n    3    b\n    2    c\n    1    d\n    Length: 4, dtype: object \n    ```", "```py\n    In [8]: s.loc[3.5:1.5]\n    KeyError: 3.5 \n    ```", "```py\n    In [15]: s.loc[3.5:1.5]\n    Out[15]: \n    3    b\n    2    c\n    Length: 2, dtype: object \n    ```", "```py\n    In [17]: from pandas.io.data import Options\n\n    In [18]: aapl = Options('aapl', 'yahoo')\n\n    In [19]: aapl.get_call_data().iloc[0:5, 0:1]\n    Out[19]:\n     Last\n    Strike Expiry     Type Symbol\n    80     2014-11-14 call AAPL141114C00080000  29.05\n    84     2014-11-14 call AAPL141114C00084000  24.80\n    85     2014-11-14 call AAPL141114C00085000  24.05\n    86     2014-11-14 call AAPL141114C00086000  22.76\n    87     2014-11-14 call AAPL141114C00087000  21.74\n\n    In [20]: aapl.expiry_dates\n    Out[20]:\n    [datetime.date(2014, 11, 14),\n     datetime.date(2014, 11, 22),\n     datetime.date(2014, 11, 28),\n     datetime.date(2014, 12, 5),\n     datetime.date(2014, 12, 12),\n     datetime.date(2014, 12, 20),\n     datetime.date(2015, 1, 17),\n     datetime.date(2015, 2, 20),\n     datetime.date(2015, 4, 17),\n     datetime.date(2015, 7, 17),\n     datetime.date(2016, 1, 15),\n     datetime.date(2017, 1, 20)]\n\n    In [21]: aapl.get_near_stock_price(expiry=aapl.expiry_dates[0:3]).iloc[0:5, 0:1]\n    Out[21]:\n     Last\n    Strike Expiry     Type Symbol\n    109    2014-11-22 call AAPL141122C00109000  1.48\n     2014-11-28 call AAPL141128C00109000  1.79\n    110    2014-11-14 call AAPL141114C00110000  0.55\n     2014-11-22 call AAPL141122C00110000  1.02\n     2014-11-28 call AAPL141128C00110000  1.32 \n    ```", "```py\n    In [16]: from collections import deque\n\n    In [17]: df1 = pd.DataFrame([1, 2, 3])\n\n    In [18]: df2 = pd.DataFrame([4, 5, 6]) \n    ```", "```py\n    In [7]: pd.concat(deque((df1, df2)))\n    TypeError: first argument must be a list-like of pandas objects, you passed an object of type \"deque\" \n    ```", "```py\n    In [19]: pd.concat(deque((df1, df2)))\n    Out[19]: \n     0\n    0  1\n    1  2\n    2  3\n    0  4\n    1  5\n    2  6\n\n    [6 rows x 1 columns] \n    ```", "```py\n    In [20]: dfi = pd.DataFrame(\n     ....:    1, index=pd.MultiIndex.from_product([[\"a\"], range(1000)]), columns=[\"A\"]\n     ....: )\n     ....: \n    ```", "```py\n    # this was underreported in prior versions\n    In [1]: dfi.memory_usage(index=True)\n    Out[1]:\n    Index    8000 # took about 24008 bytes in < 0.15.1\n    A        8000\n    dtype: int64 \n    ```", "```py\n    In [21]: dfi.memory_usage(index=True)\n    Out[21]: \n    Index    44212\n    A         8000\n    Length: 2, dtype: int64 \n    ```"]