- en: Solve a System of Equations Algebraically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/guides/solving/solve-system-of-equations-algebraically.html](https://docs.sympy.org/latest/guides/solving/solve-system-of-equations-algebraically.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use SymPy to algebraically solve a system of equations, whether linear or nonlinear.
    For example, solving \(x^2 + y = 2z, y = -4z\) for x and y (assuming z is a constant
    or parameter) yields \(\{(x = -\sqrt{6z}, y = -4z),\) \({(x = \sqrt{6z}, y = -4z)\}}\).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Consider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some systems of equations cannot be solved algebraically (either at all or by
    SymPy), so you may have to [solve your system of equations numerically](solve-numerically.html)
    using [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of Solving a System of Equations Algebraically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whether your equations are linear or nonlinear, you can use [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve"):'
  prefs: []
  type: TYPE_NORMAL
- en: Solve a System of Linear Equations Algebraically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Solve a System of Nonlinear Equations Algebraically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Guidance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Include the Variable to be Solved for in the Function Call](solving-guidance.html#include-the-variable-to-be-solved-for-in-the-function-call)
    and [Ensure Consistent Formatting From solve()](solving-guidance.html#ensure-consistent-formatting-from-solve).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two methods below for containing solution results: [dictionary](#solve-and-use-results-in-a-dictionary)
    or [set](#solve-results-in-a-set). A dictionary is easier to interrogate programmatically,
    so if you need to extract solutions using code, we recommend the dictionary approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Solve and Use Results in a Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solve Into a Solution Given as a Dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can solve a system of equations for some variables (for example, \(x\)
    and \(y\)) leaving another symbol as a constant or parameter (for example, \(z\)).
    You can specify the variables to solve for as multiple separate arguments, or
    as a list (or tuple):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Use a Solution Given as a Dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can then extract solutions by indexing (specifying in brackets) the solution
    number, and then the symbol. For example `solutions[0][x]` gives the result for
    `x` in the first solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Solve Results in a Set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get a list of symbols and set of solutions, use `set=True` instead of `dict=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Options That Can Speed up [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve")
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Options That Can Speed up solve()](solving-guidance.html#options-that-can-speed-up-solve).
  prefs: []
  type: TYPE_NORMAL
- en: Not All Systems of Equations Can be Solved
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Systems of Equations With no Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some systems of equations have no solution. For example, the following two
    systems have no solution because they reduce to `1 == 0`, so SymPy returns an
    empty list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The following system reduces to \(z = 2z\), so it has no general solution, but
    it could be satisfied if \(z=0\). Note that [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") will not assume that \(z=0\), even though that
    is the only value of \(z\) that makes the system of equations consistent, because
    \(z\) is a parameter rather than an unknown. That is, [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") does not treat \(z\) as an unknown because it is
    not in the list of symbols specified as unknowns (`[x, y]`) and all such symbols
    are treated like parameters with arbitrary value. Whether a symbol is treated
    as a variable or a parameter is determined only by whether it is specified as
    a symbol to solve for in [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve"). There is no such distinction made when creating
    the symbol using [`symbols()`](../../modules/core.html#sympy.core.symbol.symbols
    "sympy.core.symbol.symbols") (or importing from [`abc`](../../modules/abc.html#module-sympy.abc
    "sympy.abc")).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following system is [overconstrained](https://en.wikipedia.org/wiki/Overdetermined_system),
    meaning there are more equations (three) than unknowns to be solved for (two,
    namely \(x\) and \(y\)). It has no solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that some overconstrained systems do have solutions (for example, if an
    equation is a linear combination of the others), in which case SymPy can solve
    the overconstrained system.
  prefs: []
  type: TYPE_NORMAL
- en: Systems of Equations With no Closed-Form Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some systems of equations cannot be solved algebraically, for example those
    containing [transcendental equations](https://en.wikipedia.org/wiki/Transcendental_equation):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So you can use [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") to [find a numerical solution](solve-numerically.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Equations Which Have a Closed-Form Solution, and SymPy Cannot Solve
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also possible that there is an algebraic solution to your equation, and
    SymPy has not implemented an appropriate algorithm. If SymPy returns an empty
    set or list when you know there is a closed-form solution (indicating a bug in
    SymPy), please post it on the [mailing list](https://groups.google.com/g/sympy),
    or open an issue on [SymPy’s GitHub page](https://github.com/sympy/sympy/issues).
    Until the issue is resolved, you can use a different method listed in [Alternatives
    to Consider](#alternatives-to-consider).
  prefs: []
  type: TYPE_NORMAL
- en: Report a Bug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find a bug with [`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve"), please post the problem on the [SymPy mailing
    list](https://groups.google.com/g/sympy). Until the issue is resolved, you can
    use a different method listed in [Alternatives to Consider](#alternatives-to-consider).
  prefs: []
  type: TYPE_NORMAL
