- en: scipy.stats.zipfian
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.zipfian.html#scipy.stats.zipfian](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.zipfian.html#scipy.stats.zipfian)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Zipfian discrete random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_discrete`](scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") class, [`zipfian`](#scipy.stats.zipfian "scipy.stats.zipfian")
    object inherits from it a collection of generic methods (see below for the full
    list), and completes them with details specific for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipf`](scipy.stats.zipf.html#scipy.stats.zipf "scipy.stats.zipf")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability mass function for [`zipfian`](#scipy.stats.zipfian "scipy.stats.zipfian")
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(k, a, n) = \frac{1}{H_{n,a} k^a}\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(k \in \{1, 2, \dots, n-1, n\}\), \(a \ge 0\), \(n \in \{1, 2, 3, \dots\}\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`zipfian`](#scipy.stats.zipfian "scipy.stats.zipfian") takes \(a\) and \(n\)
    as shape parameters. \(H_{n,a}\) is the \(n\)^(th) generalized harmonic number
    of order \(a\).'
  prefs: []
  type: TYPE_NORMAL
- en: The Zipfian distribution reduces to the Zipf (zeta) distribution as \(n \rightarrow
    \infty\).
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function above is defined in the “standardized” form. To
    shift distribution use the `loc` parameter. Specifically, `zipfian.pmf(k, a, n,
    loc)` is identically equivalent to `zipfian.pmf(k - loc, a, n)`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: “Zipf’s Law”, Wikipedia, [https://en.wikipedia.org/wiki/Zipf’s_law](https://en.wikipedia.org/wiki/Zipf's_law)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Larry Leemis, “Zipf Distribution”, Univariate Distribution Relationships. [http://www.math.wm.edu/~leemis/chart/UDR/PDFs/Zipf.pdf](http://www.math.wm.edu/~leemis/chart/UDR/PDFs/Zipf.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability mass function (`pmf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape and location. This returns a “frozen” RV object holding the given parameters
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pmf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-zipfian-1_00_00.png](../Images/5567b7f7539c018e2eebc15a30e2d926.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Confirm that [`zipfian`](#scipy.stats.zipfian "scipy.stats.zipfian") reduces
    to [`zipf`](scipy.stats.zipf.html#scipy.stats.zipf "scipy.stats.zipf") for large
    *n*, *a > 1*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(a, n, loc=0, size=1, random_state=None)** | Random variates. |'
  prefs: []
  type: TYPE_TB
- en: '| **pmf(k, a, n, loc=0)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(k, a, n, loc=0)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(k, a, n, loc=0)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(k, a, n, loc=0)** | Log of the cumulative distribution function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(k, a, n, loc=0)** | Survival function (also defined as `1 - cdf`, but
    *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(k, a, n, loc=0)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, a, n, loc=0)** | Percent point function (inverse of `cdf` — percentiles).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, a, n, loc=0)** | Inverse survival function (inverse of `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(a, n, loc=0, moments=’mv’)** | Mean(‘m’), variance(‘v’), skew(‘s’),
    and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(a, n, loc=0)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(a, n), loc=0, lb=None, ub=None, conditional=False)**
    | Expected value of a function (of one argument) with respect to the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **median(a, n, loc=0)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(a, n, loc=0)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(a, n, loc=0)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(a, n, loc=0)** | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, a, n, loc=0)** | Confidence interval with equal areas
    around the median. |'
  prefs: []
  type: TYPE_TB
