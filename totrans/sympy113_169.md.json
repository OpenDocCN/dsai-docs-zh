["```py\n>>> from sympy.physics.mechanics import *\n>>> q1, q2 = dynamicsymbols('q1 q2')\n>>> q1d, q2d = dynamicsymbols('q1 q2', 1)\n>>> L = q1d**2 + q2d**2 \n```", "```py\n>>> LM = LagrangesMethod(L, [q1, q2]) \n```", "```py\n>>> mechanics_printing(pretty_print=False)\n>>> LM.form_lagranges_equations()\nMatrix([\n[2*q1''],\n[2*q2'']]) \n```", "```py\n>>> LM.mass_matrix\nMatrix([\n[2, 0],\n[0, 2]])\n\n>>> LM.forcing\nMatrix([\n[0],\n[0]]) \n```", "```py\n>>> LM = LagrangesMethod(L, [q1, q2], hol_coneqs=[q1 - q2]) \n```", "```py\n>>> LM.form_lagranges_equations()\nMatrix([\n[ lam1 + 2*q1''],\n[-lam1 + 2*q2'']]) \n```", "```py\n>>> LM.mass_matrix_full\nMatrix([\n[1, 0, 0,  0,  0],\n[0, 1, 0,  0,  0],\n[0, 0, 2,  0, -1],\n[0, 0, 0,  2,  1],\n[0, 0, 1, -1,  0]])\n>>> LM.forcing_full\nMatrix([\n[q1'],\n[q2'],\n[  0],\n[  0],\n[  0]]) \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> P = Point('P')\n>>> P.set_vel(N, q1d * N.x)\n>>> FL = [(P, 7 * N.x)]\n>>> LM = LagrangesMethod(L, [q1, q2], forcelist=FL, frame=N)\n>>> LM.form_lagranges_equations()\nMatrix([\n[2*q1'' - 7],\n[    2*q2'']]) \n```"]