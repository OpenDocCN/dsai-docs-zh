["```py\nclass sympy.physics.continuum_mechanics.truss.Truss\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node((\"node_1\", 0, 0), (\"node_2\", 6, 0), (\"node_3\", 2, 2), (\"node_4\", 2, 0))\n>>> t.add_member((\"member_1\", \"node_1\", \"node_4\"), (\"member_2\", \"node_2\", \"node_4\"), (\"member_3\", \"node_1\", \"node_3\"))\n>>> t.add_member((\"member_4\", \"node_2\", \"node_3\"), (\"member_5\", \"node_3\", \"node_4\"))\n>>> t.apply_load((\"node_4\", 10, 270))\n>>> t.apply_support((\"node_1\", \"pinned\"), (\"node_2\", \"roller\")) \n```", "```py\nadd_member(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0), ('C', 2, 2))\n>>> t.add_member(('AB', 'A', 'B'), ('BC', 'B', 'C'))\n>>> t.members\n{'AB': ['A', 'B'], 'BC': ['B', 'C']} \n```", "```py\nadd_node(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0))\n>>> t.nodes\n[('A', 0, 0)]\n>>> t.add_node(('B', 3, 0), ('C', 4, 1))\n>>> t.nodes\n[('A', 0, 0), ('B', 3, 0), ('C', 4, 1)] \n```", "```py\napply_load(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> from sympy import symbols\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0))\n>>> P = symbols('P')\n>>> t.apply_load(('A', P, 90), ('A', P/2, 45), ('A', P/4, 90))\n>>> t.loads\n{'A': [[P, 90], [P/2, 45], [P/4, 90]]} \n```", "```py\napply_support(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0))\n>>> t.apply_support(('A', 'pinned'), ('B', 'roller'))\n>>> t.supports\n{'A': 'pinned', 'B': 'roller'} \n```", "```py\nchange_member_label(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0), ('D', 5, 0))\n>>> t.nodes\n[('A', 0, 0), ('B', 3, 0), ('D', 5, 0)]\n>>> t.change_node_label(('A', 'C'))\n>>> t.nodes\n[('C', 0, 0), ('B', 3, 0), ('D', 5, 0)]\n>>> t.add_member(('BC', 'B', 'C'), ('BD', 'B', 'D'))\n>>> t.members\n{'BC': ['B', 'C'], 'BD': ['B', 'D']}\n>>> t.change_member_label(('BC', 'BC_new'), ('BD', 'BD_new'))\n>>> t.members\n{'BC_new': ['B', 'C'], 'BD_new': ['B', 'D']} \n```", "```py\nchange_node_label(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0))\n>>> t.nodes\n[('A', 0, 0), ('B', 3, 0)]\n>>> t.change_node_label(('A', 'C'), ('B', 'D'))\n>>> t.nodes\n[('C', 0, 0), ('D', 3, 0)] \n```", "```py\ndraw(subs_dict=None)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> import math\n>>> t = Truss()\n>>> t.add_node((\"A\", -4, 0), (\"B\", 0, 0), (\"C\", 4, 0), (\"D\", 8, 0))\n>>> t.add_node((\"E\", 6, 2/math.sqrt(3)))\n>>> t.add_node((\"F\", 2, 2*math.sqrt(3)))\n>>> t.add_node((\"G\", -2, 2/math.sqrt(3)))\n>>> t.add_member((\"AB\",\"A\",\"B\"), (\"BC\",\"B\",\"C\"), (\"CD\",\"C\",\"D\"))\n>>> t.add_member((\"AG\",\"A\",\"G\"), (\"GB\",\"G\",\"B\"), (\"GF\",\"G\",\"F\"))\n>>> t.add_member((\"BF\",\"B\",\"F\"), (\"FC\",\"F\",\"C\"), (\"CE\",\"C\",\"E\"))\n>>> t.add_member((\"FE\",\"F\",\"E\"), (\"DE\",\"D\",\"E\"))\n>>> t.apply_support((\"A\",\"pinned\"), (\"D\",\"roller\"))\n>>> t.apply_load((\"G\", 3, 90), (\"E\", 3, 90), (\"F\", 2, 90))\n>>> p = t.draw()\n>>> p  \nPlot object containing:\n[0]: cartesian line: 1 for x over (1.0, 1.0)\n...\n>>> p.show() \n```", "```py\nproperty internal_forces\n```", "```py\nproperty loads\n```", "```py\nproperty member_lengths\n```", "```py\nproperty members\n```", "```py\nproperty node_labels\n```", "```py\nproperty node_positions\n```", "```py\nproperty nodes\n```", "```py\nproperty reaction_loads\n```", "```py\nremove_load(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> from sympy import symbols\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0))\n>>> P = symbols('P')\n>>> t.apply_load(('A', P, 90), ('A', P/2, 45), ('A', P/4, 90))\n>>> t.loads\n{'A': [[P, 90], [P/2, 45], [P/4, 90]]}\n>>> t.remove_load(('A', P/4, 90), ('A', P/2, 45))\n>>> t.loads\n{'A': [[P, 90]]} \n```", "```py\nremove_member(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0), ('C', 2, 2))\n>>> t.add_member(('AB', 'A', 'B'), ('AC', 'A', 'C'), ('BC', 'B', 'C'))\n>>> t.members\n{'AB': ['A', 'B'], 'AC': ['A', 'C'], 'BC': ['B', 'C']}\n>>> t.remove_member('AC', 'BC')\n>>> t.members\n{'AB': ['A', 'B']} \n```", "```py\nremove_node(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0), ('C', 5, 0))\n>>> t.nodes\n[('A', 0, 0), ('B', 3, 0), ('C', 5, 0)]\n>>> t.remove_node('A', 'C')\n>>> t.nodes\n[('B', 3, 0)] \n```", "```py\nremove_support(*args)\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node(('A', 0, 0), ('B', 3, 0))\n>>> t.apply_support(('A', 'pinned'), ('B', 'roller'))\n>>> t.supports\n{'A': 'pinned', 'B': 'roller'}\n>>> t.remove_support('A','B')\n>>> t.supports\n{} \n```", "```py\nsolve()\n```", "```py\n>>> from sympy.physics.continuum_mechanics.truss import Truss\n>>> t = Truss()\n>>> t.add_node((\"node_1\", 0, 0), (\"node_2\", 6, 0), (\"node_3\", 2, 2), (\"node_4\", 2, 0))\n>>> t.add_member((\"member_1\", \"node_1\", \"node_4\"), (\"member_2\", \"node_2\", \"node_4\"), (\"member_3\", \"node_1\", \"node_3\"))\n>>> t.add_member((\"member_4\", \"node_2\", \"node_3\"), (\"member_5\", \"node_3\", \"node_4\"))\n>>> t.apply_load((\"node_4\", 10, 270))\n>>> t.apply_support((\"node_1\", \"pinned\"), (\"node_2\", \"roller\"))\n>>> t.solve()\n>>> t.reaction_loads\n{'R_node_1_x': 0, 'R_node_1_y': 20/3, 'R_node_2_y': 10/3}\n>>> t.internal_forces\n{'member_1': 20/3, 'member_2': 20/3, 'member_3': -20*sqrt(2)/3, 'member_4': -10*sqrt(5)/3, 'member_5': 10} \n```", "```py\nproperty supports\n```"]