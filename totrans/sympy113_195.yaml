- en: Actuator (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/api/actuator.html](https://docs.sympy.org/latest/modules/physics/mechanics/api/actuator.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implementations of actuators for linked force and torque application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for all actuator classes to inherit from.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class cannot be directly instantiated by users. However, it
    can be used to created custom actuator types through subclassing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A nonlinear spring based on the Duffing equation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**linear_stiffness** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The linear stiffness coefficient (beta).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**nonlinear_stiffness** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The nonlinear stiffness coefficient (alpha).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pathway** : PathwayBase'
  prefs: []
  type: TYPE_NORMAL
- en: The pathway that the actuator follows.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equilibrium_length** : Expr, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The length at which the spring is in equilibrium (x).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `DuffingSpring` represents the force exerted by a nonlinear spring based
    on the Duffing equation: F = -beta*x-alpha*x**3, where x is the displacement from
    the equilibrium position, beta is the linear spring constant, and alpha is the
    coefficient for the nonlinear cubic term.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The force produced by the Duffing spring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Force-producing actuator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**force** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The scalar expression defining the (expansile) force that the actuator produces.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pathway** : PathwayBase'
  prefs: []
  type: TYPE_NORMAL
- en: The pathway that the actuator follows. This must be an instance of a concrete
    subclass of `PathwayBase`, e.g. `LinearPathway`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A `ForceActuator` is an actuator that produces a (expansile) force along its
    length.
  prefs: []
  type: TYPE_NORMAL
- en: 'A force actuator uses a pathway instance to determine the direction and number
    of forces that it applies to a system. Consider the simplest case where a `LinearPathway`
    instance is used. This pathway is made up of two points that can move relative
    to each other, and results in a pair of equal and opposite forces acting on the
    endpoints. If the positive time-varying Euclidean distance between the two points
    is defined, then the “extension velocity” is the time derivative of this distance.
    The extension velocity is positive when the two points are moving away from each
    other and negative when moving closer to each other. The direction for the force
    acting on either point is determined by constructing a unit vector directed from
    the other point to this point. This establishes a sign convention such that a
    positive force magnitude tends to push the points apart, this is the meaning of
    “expansile” in this context. The following diagram shows the positive force sense
    and the distance between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To construct an actuator, an expression (or symbol) must be supplied to represent
    the force it can produce, alongside a pathway specifying its line of action. Let’s
    also create a global reference frame and spatially fix one of the points in it
    while setting the other to be positioned such that it can freely move in the frame’s
    x direction specified by the coordinate `q`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The magnitude of the force produced by the actuator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `Pathway` defining the actuator’s line of action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The below example shows how to generate the loads produced by a force actuator
    that follows a linear pathway. In this example we’ll assume that the force actuator
    is being used to model a simple linear spring. First, create a linear pathway
    between two points separated by the coordinate `q` in the `x` direction of the
    global frame `N`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now create a symbol `k` to describe the spring’s stiffness and instantiate a
    force actuator that produces a (contractile) force proportional to both the spring’s
    stiffness and the pathway’s length. Note that actuator classes use the sign convention
    that expansile forces are positive, so for a spring to produce a contractile force
    the spring force needs to be calculated as the negative for the stiffness multiplied
    by the length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The forces produced by the spring can be generated in the list of loads form
    that `KanesMethod` (and other equations of motion methods) requires by calling
    the `to_loads` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A simple linear damper can be modeled in a similar way. Create another symbol
    `c` to describe the dampers damping coefficient. This time instantiate a force
    actuator that produces a force proportional to both the damper’s damping coefficient
    and the pathway’s extension velocity. Note that the damping force is negative
    as it acts in the opposite direction to which the damper is changing in length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Again, the forces produces by the damper can be generated by calling the `to_loads`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A damper whose force is a linear function of its extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**damping** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The damping constant.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pathway** : PathwayBase'
  prefs: []
  type: TYPE_NORMAL
- en: The pathway that the actuator follows. This must be an instance of a concrete
    subclass of `PathwayBase`, e.g. `LinearPathway`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “linear” in the name `LinearDamper` refers to the fact that the
    damping force is a linear function of the damper’s rate of change in its length.
    I.e. for a linear damper with damping `c` and extension velocity `v`, the damping
    force will be `-c*v`, which is a linear function in `v`. To create a damper that
    follows a linear, or straight, pathway between its two ends, a `LinearPathway`
    instance needs to be passed to the `pathway` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `LinearDamper` is a subclass of `ForceActuator` and so follows the same sign
    conventions for length, extension velocity, and the direction of the forces it
    applies to its points of attachment on bodies. The sign convention for the direction
    of forces is such that, for the case where a linear damper is instantiated with
    a `LinearPathway` instance as its pathway, they act to push the two ends of the
    damper away from one another. Because dampers produce a force that opposes the
    direction of change in length, when extension velocity is positive the scalar
    portions of the forces applied at the two endpoints are negative in order to flip
    the sign of the forces on the endpoints wen converted into vector quantities.
    When extension velocity is negative (i.e. when the damper is shortening), the
    scalar portions of the fofces applied are also negative so that the signs cancel
    producing forces on the endpoints that are in the same direction as the positive
    sign convention for the forces at the endpoints of the pathway (i.e. they act
    to push the endpoints away from one another). The following diagram shows the
    positive force sense and the distance between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To construct a linear damper, an expression (or symbol) must be supplied to
    represent the damping coefficient of the damper (we’ll use the symbol `c`), alongside
    a pathway specifying its line of action. Let’s also create a global reference
    frame and spatially fix one of the points in it while setting the other to be
    positioned such that it can freely move in the frame’s x direction specified by
    the coordinate `q`. The velocity that the two points move away from one another
    can be specified by the coordinate `u` where `u` is the first time derivative
    of `q` (i.e., `u = Derivative(q(t), t)`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This damper will produce a force that is proportional to both its damping coefficient
    and the pathway’s extension length. Note that this force is negative as SymPy’s
    sign convention for actuators is that negative forces are contractile and the
    damping force of the damper will oppose the direction of length change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ForceActuator`](#sympy.physics.mechanics.actuator.ForceActuator "sympy.physics.mechanics.actuator.ForceActuator")'
  prefs: []
  type: TYPE_NORMAL
- en: force-producing actuator (superclass of `LinearDamper`).
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearPathway`](pathway.html#sympy.physics.mechanics.pathway.LinearPathway
    "sympy.physics.mechanics.pathway.LinearPathway")'
  prefs: []
  type: TYPE_NORMAL
- en: straight-line pathway between a pair of points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The damping constant for the linear damper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The damping force produced by the linear damper.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A spring with its spring force as a linear function of its length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stiffness** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The spring constant.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pathway** : PathwayBase'
  prefs: []
  type: TYPE_NORMAL
- en: The pathway that the actuator follows. This must be an instance of a concrete
    subclass of `PathwayBase`, e.g. `LinearPathway`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**equilibrium_length** : Expr, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The length at which the spring is in equilibrium, i.e. it produces no force.
    The default value is 0, i.e. the spring force is a linear function of the pathway’s
    length with no constant offset.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “linear” in the name `LinearSpring` refers to the fact that the
    spring force is a linear function of the springs length. I.e. for a linear spring
    with stiffness `k`, distance between its ends of `x`, and an equilibrium length
    of `0`, the spring force will be `-k*x`, which is a linear function in `x`. To
    create a spring that follows a linear, or straight, pathway between its two ends,
    a `LinearPathway` instance needs to be passed to the `pathway` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `LinearSpring` is a subclass of `ForceActuator` and so follows the same sign
    conventions for length, extension velocity, and the direction of the forces it
    applies to its points of attachment on bodies. The sign convention for the direction
    of forces is such that, for the case where a linear spring is instantiated with
    a `LinearPathway` instance as its pathway, they act to push the two ends of the
    spring away from one another. Because springs produces a contractile force and
    acts to pull the two ends together towards the equilibrium length when stretched,
    the scalar portion of the forces on the endpoint are negative in order to flip
    the sign of the forces on the endpoints when converted into vector quantities.
    The following diagram shows the positive force sense and the distance between
    the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To construct a linear spring, an expression (or symbol) must be supplied to
    represent the stiffness (spring constant) of the spring, alongside a pathway specifying
    its line of action. Let’s also create a global reference frame and spatially fix
    one of the points in it while setting the other to be positioned such that it
    can freely move in the frame’s x direction specified by the coordinate `q`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This spring will produce a force that is proportional to both its stiffness
    and the pathway’s length. Note that this force is negative as SymPy’s sign convention
    for actuators is that negative forces are contractile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To create a linear spring with a non-zero equilibrium length, an expression
    (or symbol) can be passed to the `equilibrium_length` parameter on construction
    on a `LinearSpring` instance. Let’s create a symbol `l` to denote a non-zero equilibrium
    length and create another linear spring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The spring force of this new spring is again proportional to both its stiffness
    and the pathway’s length. However, the spring will not produce any force when
    `q(t)` equals `l`. Note that the force will become expansile when `q(t)` is less
    than `l`, as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ForceActuator`](#sympy.physics.mechanics.actuator.ForceActuator "sympy.physics.mechanics.actuator.ForceActuator")'
  prefs: []
  type: TYPE_NORMAL
- en: force-producing actuator (superclass of `LinearSpring`).
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearPathway`](pathway.html#sympy.physics.mechanics.pathway.LinearPathway
    "sympy.physics.mechanics.pathway.LinearPathway")'
  prefs: []
  type: TYPE_NORMAL
- en: straight-line pathway between a pair of points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The length of the spring at which it produces no force.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The spring force produced by the linear spring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The spring constant for the linear spring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Torque-producing actuator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**torque** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The scalar expression defining the torque that the actuator produces.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**axis** : Vector'
  prefs: []
  type: TYPE_NORMAL
- en: The axis about which the actuator applies torques.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**target_frame** : ReferenceFrame | RigidBody'
  prefs: []
  type: TYPE_NORMAL
- en: The primary frame on which the actuator will apply the torque.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**reaction_frame** : ReferenceFrame | RigidBody | None'
  prefs: []
  type: TYPE_NORMAL
- en: The secondary frame on which the actuator will apply the torque. Note that the
    (equal and opposite) reaction torque is applied to this frame.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A `TorqueActuator` is an actuator that produces a pair of equal and opposite
    torques on a pair of bodies.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To construct a torque actuator, an expression (or symbol) must be supplied to
    represent the torque it can produce, alongside a vector specifying the axis about
    which the torque will act, and a pair of frames on which the torque will act.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note that because torques actually act on frames, not bodies, `TorqueActuator`
    will extract the frame associated with a `RigidBody` when one is passed instead
    of a `ReferenceFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Alternate construtor to instantiate from a `PinJoint` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**torque** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The scalar expression defining the torque that the actuator produces.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pin_joint** : PinJoint'
  prefs: []
  type: TYPE_NORMAL
- en: The pin joint, and by association the parent and child bodies, on which the
    torque actuator will act. The pair of bodies acted upon by the torque actuator
    are the parent and child bodies of the pin joint, with the child acting as the
    reaction body. The pin joint’s axis is used as the axis about which the torque
    actuator will apply its torque.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To create a pin joint the `PinJoint` class requires a name, parent body, and
    child body to be passed to its constructor. It is also possible to control the
    joint axis using the `joint_axis` keyword argument. In this example let’s use
    the parent body’s reference frame’s z-axis as the joint axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Let’s also create a symbol `T` that will represent the torque applied by the
    torque actuator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To create the torque actuator from the `torque` and `pin_joint` variables previously
    instantiated, these can be passed to the alternate constructor class method `at_pin_joint`
    of the `TorqueActuator` class. It should be noted that a positive torque will
    cause a positive displacement of the joint coordinate or that the torque is applied
    on the child body with a reaction torque on the parent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The axis about which the torque acts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The primary reference frames on which the torque will act.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The primary reference frames on which the torque will act.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The below example shows how to generate the loads produced by a torque actuator
    that acts on a pair of bodies attached by a pin joint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The forces produces by the damper can be generated by calling the `to_loads`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, if a torque actuator is created without a reaction frame then
    the loads returned by the `to_loads` method will contain just the single load
    acting on the target frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The magnitude of the torque produced by the actuator.
  prefs: []
  type: TYPE_NORMAL
