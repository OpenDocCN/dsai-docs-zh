- en: numpy.reshape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.reshape.html](https://numpy.org/doc/1.26/reference/generated/numpy.reshape.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Gives a new shape to an array without changing its data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to be reshaped.
  prefs: []
  type: TYPE_NORMAL
- en: '**newshape**int or tuple of ints'
  prefs: []
  type: TYPE_NORMAL
- en: The new shape should be compatible with the original shape. If an integer, then
    the result will be a 1-D array of that length. One shape dimension can be -1\.
    In this case, the value is inferred from the length of the array and remaining
    dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’, ‘A’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Read the elements of *a* using this index order, and place the elements into
    the reshaped array using this index order. ‘C’ means to read / write the elements
    using C-like index order, with the last axis index changing fastest, back to the
    first axis index changing slowest. ‘F’ means to read / write the elements using
    Fortran-like index order, with the first index changing fastest, and the last
    index changing slowest. Note that the ‘C’ and ‘F’ options take no account of the
    memory layout of the underlying array, and only refer to the order of indexing.
    ‘A’ means to read / write the elements in Fortran-like index order if *a* is Fortran
    *contiguous* in memory, C-like order otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**reshaped_array**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: This will be a new view object if possible; otherwise, it will be a copy. Note
    there is no guarantee of the *memory layout* (C- or Fortran- contiguous) of the
    returned array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.reshape`](numpy.ndarray.reshape.html#numpy.ndarray.reshape "numpy.ndarray.reshape")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent method.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: It is not always possible to change the shape of an array without copying the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *order* keyword gives the index ordering both for *fetching* the values
    from *a*, and then *placing* the values into the output array. For example, let’s
    say you have an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can think of reshaping as first raveling the array (using the given index
    order), then inserting the elements from the raveled array into the new array
    using the same kind of index ordering as was used for the raveling.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
