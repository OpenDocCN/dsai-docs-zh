["```py\nscipy.stats.shapiro(x)\n```", "```py\n>>> import numpy as np\n>>> x = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236]) \n```", "```py\n>>> from scipy import stats\n>>> res = stats.shapiro(x)\n>>> res.statistic\n0.7888147830963135 \n```", "```py\n>>> def statistic(x):\n...     # Get only the `shapiro` statistic; ignore its p-value\n...     return stats.shapiro(x).statistic\n>>> ref = stats.monte_carlo_test(x, stats.norm.rvs, statistic,\n...                              alternative='less')\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> bins = np.linspace(0.65, 1, 50)\n>>> def plot(ax):  # we'll reuse this\n...     ax.hist(ref.null_distribution, density=True, bins=bins)\n...     ax.set_title(\"Shapiro-Wilk Test Null Distribution \\n\"\n...                  \"(Monte Carlo Approximation, 11 Observations)\")\n...     ax.set_xlabel(\"statistic\")\n...     ax.set_ylabel(\"probability density\")\n>>> plot(ax)\n>>> plt.show() \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> plot(ax)\n>>> annotation = (f'p-value={res.pvalue:.6f}\\n(highlighted area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (0.75, 0.1), (0.68, 0.7), arrowprops=props)\n>>> i_extreme = np.where(bins <= res.statistic)[0]\n>>> for i in i_extreme:\n...     ax.patches[i].set_color('C1')\n>>> plt.xlim(0.65, 0.9)\n>>> plt.ylim(0, 4)\n>>> plt.show\n>>> res.pvalue\n0.006703833118081093 \n```"]