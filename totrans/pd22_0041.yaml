- en: 'Group by: split-apply-combine'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按组分组：分割-应用-合并
- en: 原文：[https://pandas.pydata.org/docs/user_guide/groupby.html](https://pandas.pydata.org/docs/user_guide/groupby.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/groupby.html](https://pandas.pydata.org/docs/user_guide/groupby.html)
- en: 'By “group by” we are referring to a process involving one or more of the following
    steps:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“按组”我们指的是涉及以下一个或多个步骤的过程：
- en: '**Splitting** the data into groups based on some criteria.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据某些标准将数据分成组。
- en: '**Applying** a function to each group independently.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用**一个函数到每个组独立地。'
- en: '**Combining** the results into a data structure.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**结果到数据结构中。'
- en: 'Out of these, the split step is the most straightforward. In the apply step,
    we might wish to do one of the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些中，分割步骤是最直接的。在应用步骤中，我们可能希望执行以下操作之一：
- en: '**Aggregation**: compute a summary statistic (or statistics) for each group.
    Some examples:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合**：为每个组计算摘要统计信息（或统计信息）。一些例子：'
- en: Compute group sums or means.
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算组的总和或均值。
- en: ''
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Compute group sizes / counts.
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算组大小/计数。
- en: '**Transformation**: perform some group-specific computations and return a like-indexed
    object. Some examples:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换**：执行一些组特定的计算并返回一个类似索引的对象。一些例子：'
- en: Standardize data (zscore) within a group.
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组内标准化数据（zscore）。
- en: ''
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Filling NAs within groups with a value derived from each group.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用从每个组派生的值填充组内的NAs。
- en: '**Filtration**: discard some groups, according to a group-wise computation
    that evaluates to True or False. Some examples:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**：根据按组计算的结果为True或False来丢弃一些组。一些例子：'
- en: Discard data that belong to groups with only a few members.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丢弃属于只有少数成员的组的数据。
- en: ''
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Filter out data based on the group sum or mean.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据组总和或均值筛选数据。
- en: Many of these operations are defined on GroupBy objects. These operations are
    similar to those of the [aggregating API](basics.html#basics-aggregate), [window
    API](window.html#window-overview), and [resample API](timeseries.html#timeseries-aggregate).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作中的许多是在GroupBy对象上定义的。这些操作类似于[聚合API](basics.html#basics-aggregate)、[窗口API](window.html#window-overview)和[重采样API](timeseries.html#timeseries-aggregate)的操作。
- en: It is possible that a given operation does not fall into one of these categories
    or is some combination of them. In such a case, it may be possible to compute
    the operation using GroupBy’s `apply` method. This method will examine the results
    of the apply step and try to sensibly combine them into a single result if it
    doesn’t fit into either of the above three categories.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可能某个操作不属于这些类别之一，或是它们的某种组合。在这种情况下，可能可以使用GroupBy的`apply`方法来计算操作。该方法将检查应用步骤的结果，并尝试将它们合理地组合成单个结果，如果它不适合上述三个类别之一。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An operation that is split into multiple steps using built-in GroupBy operations
    will be more efficient than using the `apply` method with a user-defined Python
    function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的GroupBy操作将一个操作分成多个步骤，比使用带有用户定义的Python函数的`apply`方法更有效。
- en: 'The name GroupBy should be quite familiar to those who have used a SQL-based
    tool (or `itertools`), in which you can write code like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy这个名字对于那些使用过基于SQL的工具（或`itertools`）的人应该很熟悉，你可以编写类似以下代码：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We aim to make operations like this natural and easy to express using pandas.
    We’ll address each area of GroupBy functionality, then provide some non-trivial
    examples / use cases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是使像这样的操作自然且易于使用pandas表达。我们将讨论GroupBy功能的每���领域，然后提供一些非平凡的例子/用例。
- en: See the [cookbook](cookbook.html#cookbook-grouping) for some advanced strategies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[食谱](cookbook.html#cookbook-grouping)以获取一些高级策略。
- en: '## Splitting an object into groups'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '## 将对象分成组'
- en: 'The abstract definition of grouping is to provide a mapping of labels to group
    names. To create a GroupBy object (more on what the GroupBy object is later),
    you may do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分组的抽象定义是提供标签到组名的映射。要创建一个GroupBy对象（稍后会详细介绍GroupBy对象），您可以执行以下操作：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The mapping can be specified many different ways:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 映射可以以多种不同的方式指定：
- en: A Python function, to be called on each of the index labels.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Python函数，用于对每个索引标签进行调用。
- en: A list or NumPy array of the same length as the index.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与索引长度相同的列表或NumPy数组。
- en: A dict or `Series`, providing a `label -> group name` mapping.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字典或`Series`，提供`标签 -> 组名`的映射。
- en: For `DataFrame` objects, a string indicating either a column name or an index
    level name to be used to group.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`DataFrame`对象，需要一个字符串，指示要用于分组的列名或索引级别名称。
- en: A list of any of the above things.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述任何一种事物的列表。
- en: 'Collectively we refer to the grouping objects as the **keys**. For example,
    consider the following `DataFrame`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分组对象统称为**键**。例如，考虑以下`DataFrame`：
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A string passed to `groupby` may refer to either a column or an index level.
    If a string matches both a column name and an index level name, a `ValueError`
    will be raised.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`groupby`的字符串可以是列名，也可以是索引级别。如果一个字符串同时匹配列名和索引级别名称，将引发`ValueError`。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On a DataFrame, we obtain a GroupBy object by calling [`groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby"). This method returns a `pandas.api.typing.DataFrameGroupBy`
    instance. We could naturally group by either the `A` or `B` columns, or both:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在DataFrame上，通过调用[`groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")我们可以获得一个GroupBy对象。此方法返回一个`pandas.api.typing.DataFrameGroupBy`实例。我们可以自然地按照`A`或`B`列，或两者进行分组：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`df.groupby(''A'')` is just syntactic sugar for `df.groupby(df[''A''])`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`df.groupby(''A'')`只是`df.groupby(df[''A''])`的语法糖。'
- en: 'If we also have a MultiIndex on columns `A` and `B`, we can group by all the
    columns except the one we specify:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还在列`A`和`B`上有一个MultiIndex，我们可以按照除指定列之外的所有列进行分组：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The above GroupBy will split the DataFrame on its index (rows). To split by
    columns, first do a transpose:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述GroupBy将根据其索引（行）拆分DataFrame。要按列拆分，请先进行转置：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'pandas [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    objects support duplicate values. If a non-unique index is used as the group key
    in a groupby operation, all values for the same index value will be considered
    to be in one group and thus the output of aggregation functions will only contain
    unique index values:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: pandas [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")对象支持重复值。如果在groupby操作中使用非唯一索引作为组键，则相同索引值的所有值将被视为一个组，因此聚合函数的输出将仅包含唯一索引值：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that **no splitting occurs** until it’s needed. Creating the GroupBy object
    only verifies that you’ve passed a valid mapping.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**直到需要为止才会发生分割**。创建GroupBy对象仅验证您是否传递了有效的映射。
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Many kinds of complicated data manipulations can be expressed in terms of GroupBy
    operations (though it can’t be guaranteed to be the most efficient implementation).
    You can get quite creative with the label mapping functions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 许多种复杂的数据操作可以用GroupBy操作来表达（尽管不能保证是最有效的实现）。您可以通过标签映射函数进行创造性的操作。
- en: '### GroupBy sorting'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '### GroupBy 排序'
- en: 'By default the group keys are sorted during the `groupby` operation. You may
    however pass `sort=False` for potential speedups. With `sort=False` the order
    among group-keys follows the order of appearance of the keys in the original dataframe:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在`groupby`操作期间对组键进行排序。但是，您可以传递`sort=False`以实现潜在的加速。使用`sort=False`时，组键之间的顺序遵循键在原始数据框中出现的顺序：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that `groupby` will preserve the order in which *observations* are sorted
    *within* each group. For example, the groups created by `groupby()` below are
    in the order they appeared in the original `DataFrame`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`groupby`将保留*每个组内*排序的*观测*顺序。例如，下面通过`groupby()`创建的组按照它们在原始`DataFrame`中出现的顺序排列：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '#### GroupBy dropna'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '#### GroupBy dropna'
- en: By default `NA` values are excluded from group keys during the `groupby` operation.
    However, in case you want to include `NA` values in group keys, you could pass
    `dropna=False` to achieve it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在`groupby`操作期间，将排除`NA`值作为组键。但是，如果您想要在组键中包含`NA`值，可以传递`dropna=False`来实现。
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The default setting of `dropna` argument is `True` which means `NA` are not
    included in group keys.  ### GroupBy object attributes'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropna`参数的默认设置是`True`，这意味着`NA`不包括在组键中。  ### GroupBy 对象属性'
- en: 'The `groups` attribute is a dictionary whose keys are the computed unique groups
    and corresponding values are the axis labels belonging to each group. In the above
    example we have:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`属性是一个字典，其键是计算出的唯一组，相应的值是属于每个组的轴标签。在上面的示例中，我们有：'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Calling the standard Python `len` function on the GroupBy object returns the
    number of groups, which is the same as the length of the `groups` dictionary:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对GroupBy对象调用标准的Python `len`函数将返回组的数量，这与`groups`字典的长度相同：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`GroupBy` will tab complete column names, GroupBy operations, and other attributes:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`GroupBy`将为列名、GroupBy操作和其他属性提供制表完成：'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]  ### GroupBy with MultiIndex'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14]  ### 带有多重索引的GroupBy'
- en: With [hierarchically-indexed data](advanced.html#advanced-hierarchical), it’s
    quite natural to group by one of the levels of the hierarchy.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [层次化索引数据](advanced.html#advanced-hierarchical)，按层次结构的一个级别进行分组非常自然。
- en: Let’s create a Series with a two-level `MultiIndex`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个具有两级 `MultiIndex` 的 Series。
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can then group by one of the levels in `s`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按 `s` 中的一个级别进行分组。
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the MultiIndex has names specified, these can be passed instead of the level
    number:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 MultiIndex 指定了名称，则可以直接将这些名称传递而不是级别号：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Grouping with multiple levels is supported.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 支持具有多级别的分组。
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Index level names may be supplied as keys.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以作为键提供。
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: More on the `sum` function and aggregation later.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 `sum` 函数和聚合的信息稍后。
- en: Grouping DataFrame with Index levels and columns
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Index 级别和列分组的 DataFrame
- en: A DataFrame may be grouped by a combination of columns and index levels. You
    can specify both column and index names, or use a [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper").
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过列和索引级别的组合对 DataFrame 进行分组。您可以同时指定列名和索引名，或者使用 [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper")。
- en: 'Let’s first create a DataFrame with a MultiIndex:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个带有 MultiIndex 的 DataFrame：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then we group `df` by the `second` index level and the `A` column.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将 `df` 按 `second` 索引级别和 `A` 列分组。
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Index levels may also be specified by name.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别也可以通过名称指定。
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Index level names may be specified as keys directly to `groupby`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以直接作为键传递给 `groupby`。
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: DataFrame column selection in GroupBy
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 GroupBy 中的 DataFrame 列选择
- en: 'Once you have created the GroupBy object from a DataFrame, you might want to
    do something different for each of the columns. Thus, by using `[]` on the GroupBy
    object in a similar way as the one used to get a column from a DataFrame, you
    can do:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DataFrame 创建 GroupBy 对象后，您可能希望针对每列执行不同的操作。因此，通过在 GroupBy 对象上使用 `[]`，方式类似于从
    DataFrame 获取列的方式，您可以执行以下操作：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is mainly syntactic sugar for the alternative, which is much more verbose:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是对另一种方式的语法糖，后者要冗长得多：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Additionally, this method avoids recomputing the internal grouping information
    derived from the passed key.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该方法避免了重新计算从传递的键派生的内部分组信息。
- en: You can also include the grouping columns if you want to operate on them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要对它们进行操作，还可以包括分组列。
- en: '[PRE26]  ## Iterating through groups'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]  ## 遍历分组'
- en: 'With the GroupBy object in hand, iterating through the grouped data is very
    natural and functions similarly to [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(in Python v3.12)"):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '拥有 GroupBy 对象后，通过分组的数据进行迭代是非常自然的，并且功能类似于 [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(在 Python v3.12 中)"):'
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the case of grouping by multiple keys, the group name will be a tuple:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在按多个键进行分组的情况下，组名将是一个元组：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See [Iterating through groups](timeseries.html#timeseries-iterating-label).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [遍历分组](timeseries.html#timeseries-iterating-label)。
- en: Selecting a group
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择一个组
- en: 'A single group can be selected using [`DataFrameGroupBy.get_group()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group"):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`DataFrameGroupBy.get_group()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group") 选择单个组：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Or for an object grouped on multiple columns:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 或者针对在多列上分组的对象：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '## Aggregation'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '## 聚合'
- en: An aggregation is a GroupBy operation that reduces the dimension of the grouping
    object. The result of an aggregation is, or at least is treated as, a scalar value
    for each column in a group. For example, producing the sum of each column in a
    group of values.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合是一种减少分组对象维度的 GroupBy 操作。聚合的结果是，或者至少被视为，每列在一个组中的标量值。例如，生成一组值中每列的总和。
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the result, the keys of the groups appear in the index by default. They can
    be instead included in the columns by passing `as_index=False`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，默认情况下，组的键出现在索引中。通过传递 `as_index=False`，可以将它们包含在列中。
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '### Built-in aggregation methods'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '### 内置聚合方法'
- en: Many common aggregations are built-in to GroupBy objects as methods. Of the
    methods listed below, those with a `*` do *not* have an efficient, GroupBy-specific,
    implementation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的聚合内置到 GroupBy 对象中作为方法。在下面列出的方法中，带有 `*` 的方法 *没有* 一个高效的、GroupBy 特定的实现。
- en: '| Method | Description |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | Compute whether any of the values
    in the groups are truthy |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | 计算组中是否有任何真值 |'
- en: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | Compute whether all of the values
    in the groups are truthy |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | 计算组中所有值是否都为真值 |'
- en: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | Compute the number of non-NA values
    in the groups |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | 计算组中非NA值的数量 |'
- en: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | Compute the covariance of the
    groups |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | 计算组的协方差 |'
- en: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | Compute the first occurring value
    in each group |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | 计算每个组中首次出现的值 |'
- en: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | Compute the index of the maximum
    value in each group |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | 计算每个组中最大值的索引 |'
- en: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | Compute the index of the minimum
    value in each group |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | 计算每个组中最小值的索引 |'
- en: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | Compute the last occurring value
    in each group |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | 计算每个组中最后出现的值 |'
- en: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | Compute the maximum value in each
    group |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | 计算每个组的最大值 |'
- en: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | Compute the mean of each group
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | 计算每个组的平均值 |'
- en: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | Compute the median of each group
    |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | 计算每个组的中位数 |'
- en: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | Compute the minimum value in each
    group |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | 计算每个组的最小值 |'
- en: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | Compute the number of unique
    values in each group |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | 计算每个组中唯一值的数量 |'
- en: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | Compute the product of the values
    in each group |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | 计算每个组中值的乘积 |'
- en: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | Compute a given quantile of
    the values in each group |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | 计算每个组中值的给定分位数 |'
- en: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | Compute the standard error of the
    mean of the values in each group |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | 计算每个组中值的均值标准误差 |'
- en: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | Compute the number of values in
    each group |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | 计算每个组中值的数量 |'
- en: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | Compute the skew of the values
    in each group |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | 计算每个组中值的偏度 |'
- en: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | Compute the standard deviation of
    the values in each group |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | 计算每个组中值的标准偏差 |'
- en: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | Compute the sum of the values in
    each group |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | 计算每个组中值的总和 |'
- en: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | Compute the variance of the values
    in each group |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | 计算每个组中值的方差 |'
- en: 'Some examples:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例：
- en: '[PRE33]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Another aggregation example is to compute the size of each group. This is included
    in GroupBy as the `size` method. It returns a Series whose index consists of the
    group names and the values are the sizes of each group.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的大小。这包含在GroupBy中作为`size`方法。它返回一个Series，其索引由组名组成，值是每个组的大小。
- en: '[PRE34]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: While the [`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe") method is not itself a reducer,
    it can be used to conveniently produce a collection of summary statistics about
    each of the groups.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe")方法本身不是一个约简函数，但它可以方便地生成关于每个组的摘要统计信息的集合。
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Another aggregation example is to compute the number of unique values of each
    group. This is similar to the [`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts") function, except that it
    only counts the number of unique values.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的唯一值数量。这类似于[`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts")函数，不同之处在于它只计算唯一值的数量。
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregation functions **will not** return the groups that you are aggregating
    over as named *columns* when `as_index=True`, the default. The grouped columns
    will be the **indices** of the returned object.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合函数**不会**在`as_index=True`（默认情况下）时返回您正在聚合的组作为命名*列*，分组的列将是返回对象的**索引**。
- en: 'Passing `as_index=False` **will** return the groups that you are aggregating
    over as named columns, regardless if they are named **indices** or *columns* in
    the inputs.  ### The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`as_index=False` **将** 返回您正在聚合的分组作为命名列，而不管它们在输入中是命名**索引**还是*列*。### [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate)
    方法
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method can accept many different
    types of inputs. This section details using string aliases for various GroupBy
    methods; other inputs are detailed in the sections below.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") 方法可以接受许多不同类型的输入。本节详细介绍了使用字符串别名进行各种GroupBy方法的其他输入详细信息，请参见下文各节。'
- en: Any reduction method that pandas implements can be passed as a string to [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate"). Users are encouraged to use
    the shorthand, `agg`. It will operate as if the corresponding method was called.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 任何pandas实现的缩减方法都可以作为字符串传递给[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")。鼓励用户使用简写形式`agg`。它将像调用相应的方法一样运行。
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The result of the aggregation will have the group names as the new index. In
    the case of multiple keys, the result is a [MultiIndex](advanced.html#advanced-hierarchical)
    by default. As mentioned above, this can be changed by using the `as_index` option:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合的结果将使用组名作为新索引。在多个键的情况下，默认情况下结果是一个[MultiIndex](advanced.html#advanced-hierarchical)。如上所述，这可以通过使用`as_index`选项进行更改：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that you could use the [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame function to achieve the same result
    as the column names are stored in the resulting `MultiIndex`, although this will
    make an extra copy.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以使用[`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame函数来达到与列名存储在结果`MultiIndex`中相同的结果，尽管这将多做一次复制。
- en: '[PRE39]  ### Aggregation with User-Defined Functions'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE39]  ### 使用自定义函数进行聚合'
- en: Users can also provide their own User-Defined Functions (UDFs) for custom aggregations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以为自定义聚合提供自己的用户定义函数（UDFs）。
- en: Warning
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When aggregating with a UDF, the UDF should not mutate the provided `Series`.
    See [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UDF进行聚合时，UDF不应更改提供的`Series`。有关更多信息，请参见[使用用户定义函数（UDF）方法进行突变](gotchas.html#gotchas-udf-mutation)。
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregating with a UDF is often less performant than using the pandas built-in
    methods on GroupBy. Consider breaking up a complex operation into a chain of operations
    that utilize the built-in methods.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UDF进行聚合通常不如在GroupBy上使用pandas内置方法高效。考虑将复杂操作分解为一系列使用内置方法的操作链。
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The resulting dtype will reflect that of the aggregating function. If the results
    from different groups have different dtypes, then a common dtype will be determined
    in the same way as `DataFrame` construction.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的dtype将反映聚合函数的dtype。如果不同组的结果具有不同的dtype，则将以与`DataFrame`构造相同的方式确定通用dtype。
- en: '[PRE41]  ### Applying multiple functions at once'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE41]  ### 同时应用多个函数'
- en: 'On a grouped `Series`, you can pass a list or dict of functions to `SeriesGroupBy.agg()`,
    outputting a DataFrame:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`Series`上，你可以传递一个函数列表或字典给`SeriesGroupBy.agg()`，输出一个DataFrame：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'On a grouped `DataFrame`, you can pass a list of functions to `DataFrameGroupBy.agg()`
    to aggregate each column, which produces an aggregated result with a hierarchical
    column index:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`DataFrame`上，你可以传递一个函数列表给`DataFrameGroupBy.agg()`以聚合每一列，这将产生一个带有分层列索引的聚合结果：
- en: '[PRE43]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The resulting aggregations are named after the functions themselves. If you
    need to rename, then you can add in a chained operation for a `Series` like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的聚合将以函数本身命名。如果需要重命名，则可以为`Series`添加一个链接操作，像这样：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For a grouped `DataFrame`, you can rename in a similar manner:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分组的`DataFrame`，您可以以类似的方式重命名：
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, the output column names should be unique, but pandas will allow
    you apply to the same function (or two functions with the same name) to the same
    column.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，输出列名应该是唯一的，但 pandas 允许你将相同函数（或两个同名函数）应用于同一列。
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: pandas also allows you to provide multiple lambdas. In this case, pandas will
    mangle the name of the (nameless) lambda functions, appending `_<i>` to each subsequent
    lambda.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 也允许你提供多个 lambda 函数。在这种情况下，pandas 会篡改（无名）lambda 函数的名称，对每个后续 lambda 函数追加
    `_<i>`。
- en: '[PRE47]  ### Named aggregation'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE47]  ### 命名聚合'
- en: To support column-specific aggregation *with control over the output column
    names*, pandas accepts the special syntax in [`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg") and [`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg"), known as “named aggregation”, where
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持具有对输出列名的控制的特定列聚合，pandas 接受在 [`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg") 和 [`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg") 中的特殊语法，称为“命名聚合”，其中
- en: The keywords are the *output* column names
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字是 *输出* 列名
- en: The values are tuples whose first element is the column to select and the second
    element is the aggregation to apply to that column. pandas provides the [`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg
    "pandas.NamedAgg") namedtuple with the fields `['column', 'aggfunc']` to make
    it clearer what the arguments are. As usual, the aggregation can be a callable
    or a string alias.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些值是元组，第一个元素是要选择的列，第二个元素是要应用于该列的聚合函数。pandas 提供了带有字段 `['column', 'aggfunc']`
    的 [`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    命名元组，以使参数更清晰。通常情况下，聚合可以是可调用对象或字符串别名。
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    is just a `namedtuple`. Plain tuples are allowed as well.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    就是一个 `namedtuple`。普通元组也是允许的。'
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If the column names you want are not valid Python keywords, construct a dictionary
    and unpack the keyword arguments
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要的列名不是有效的 Python 关键字，构造一个字典并解包关键字参数
- en: '[PRE50]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: When using named aggregation, additional keyword arguments are not passed through
    to the aggregation functions; only pairs of `(column, aggfunc)` should be passed
    as `**kwargs`. If your aggregation functions require additional arguments, apply
    them partially with `functools.partial()`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命名聚合时，额外的关键字参数不会传递给聚合函数；只有 `(column, aggfunc)` 对应的键值对应该作为 `**kwargs` 传递。如果你的聚合函数需要额外的参数，可以使用
    `functools.partial()` 部分应用它们。
- en: Named aggregation is also valid for Series groupby aggregations. In this case
    there’s no column selection, so the values are just the functions.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 命名聚合对于 Series 分组聚合也是有效的。在这种情况下，没有列选择，所以值只是函数。
- en: '[PRE51]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Applying different functions to DataFrame columns
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 DataFrame 列应用不同函数
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a DataFrame:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给 `aggregate`，你可以对 DataFrame 的列应用不同的聚合函数：
- en: '[PRE52]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on GroupBy:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称也可以是字符串。为了使字符串有效，它必须在 GroupBy 上实现：
- en: '[PRE53]  ## Transformation'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE53]  ## 转换'
- en: A transformation is a GroupBy operation whose result is indexed the same as
    the one being grouped. Common examples include [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") and [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff").
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 转换是一个 GroupBy 操作，其结果与被分组的对象索引相同。常见示例包括 [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") 和 [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff")。
- en: '[PRE54]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Unlike aggregations, the groupings that are used to split the original object
    are not included in the result.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与聚合不同，用于拆分原始对象的分组不包含在结果中。
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since transformations do not include the groupings that are used to split the
    result, the arguments `as_index` and `sort` in [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") and [`Series.groupby()`](../reference/api/pandas.Series.groupby.html#pandas.Series.groupby
    "pandas.Series.groupby") have no effect.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 由于转换不包括用于拆分结果的分组，因此 [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 和 [`Series.groupby()`](../reference/api/pandas.Series.groupby.html#pandas.Series.groupby
    "pandas.Series.groupby") 中的参数 `as_index` 和 `sort` 没有效果。
- en: A common use of a transformation is to add the result back into the original
    DataFrame.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 转换的常见用途是将结果添加回原始 DataFrame 中。
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Built-in transformation methods
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置转换方法
- en: The following methods on GroupBy act as transformations.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy 上的以下方法作为转换操作。
- en: '| Method | Description |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: 方法 | 描述 |
- en: '| --- | --- |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | Back fill NA values within each
    group |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | 在每个组内向后填充 NA 值 |'
- en: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | Compute the cumulative count
    within each group |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | 计算每个组内的累积计数 |'
- en: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | Compute the cumulative max within
    each group |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | 计算每个组内的累积最大值 |'
- en: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | Compute the cumulative min within
    each group |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | 计算每个组内的累积最小值 |'
- en: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | Compute the cumulative product
    within each group |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | 计算每个组内的累积乘积 |'
- en: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | Compute the cumulative sum within
    each group |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | 计算每个组内的累积总和 |'
- en: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | Compute the difference between
    adjacent values within each group |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | 计算每个组内相邻值之间的差异 |'
- en: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | Forward fill NA values within
    each group |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | 在每个组内填充 NA 值 |'
- en: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | Compute the percent change
    between adjacent values within each group |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | 计算每个组内相邻值之间的百分比变化 |'
- en: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | Compute the rank of each value
    within each group |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | 计算每个组内每个值的排名 |'
- en: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | Shift values up or down within
    each group |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | 在每个组内上下移动值 |'
- en: In addition, passing any built-in aggregation method as a string to [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") (see the next section) will
    broadcast the result across the group, producing a transformed result. If the
    aggregation method has an efficient implementation, this will be performant as
    well.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将任何内置聚合方法作为字符串传递给[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform")（参见下一节）将在组内广播结果，产生转换后的结果。如果聚合方法有高效实现，这也将是高效的。
- en: '### The [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '### [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法'
- en: Similar to the [aggregation method](#groupby-aggregate-agg), the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can accept string aliases
    to the built-in transformation methods in the previous section. It can *also*
    accept string aliases to the built-in aggregation methods. When an aggregation
    method is provided, the result will be broadcast across the group.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 与[聚合方法](#groupby-aggregate-agg)类似，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法可以接受字符串别名，指向前一节中内置的转换方法。它也可以接受字符串别名，指向内置的聚合方法。当提供聚合方法时，结果将在组内广播。
- en: '[PRE56]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In addition to string aliases, the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can also accept User-Defined
    Functions (UDFs). The UDF must:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 除了字符串别名外，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法还可以接受用户定义的函数（UDFs）。UDF 必须：
- en: 'Return a result that is either the same size as the group chunk or broadcastable
    to the size of the group chunk (e.g., a scalar, `grouped.transform(lambda x: x.iloc[-1])`).'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '返回的结果要么与组块的大小相同，要么可以广播到组块的大小（例如，标量，`grouped.transform(lambda x: x.iloc[-1])`）。'
- en: Operate column-by-column on the group chunk. The transform is applied to the
    first group chunk using chunk.apply.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组块上逐列操作。使用 chunk.apply 对第一组块应用转换。
- en: Not perform in-place operations on the group chunk. Group chunks should be treated
    as immutable, and changes to a group chunk may produce unexpected results. See
    [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在组块上执行原位操作。组块应被视为不可变的，对组块的更改可能会产生意外结果。查看[使用用户定义函数（UDF）方法进行变异](gotchas.html#gotchas-udf-mutation)获取更多信息。
- en: (Optionally) operates on all columns of the entire group chunk at once. If this
    is supported, a fast path is used starting from the *second* chunk.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）一次操作整个组块的所有列。如果支持此操作，将从*第二*块开始使用快速路径。
- en: Note
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Transforming by supplying `transform` with a UDF is often less performant than
    using the built-in methods on GroupBy. Consider breaking up a complex operation
    into a chain of operations that utilize the built-in methods.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供 UDF 给 `transform` 进行转换通常比在 GroupBy 上使用内置方法性能较差。考虑将复杂操作拆分为一系列利用内置方法的操作。
- en: All of the examples in this section can be made more performant by calling built-in
    methods instead of using UDFs. See [below for examples](#groupby-efficient-transforms).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都可以通过调用内置方法而不是使用 UDFs 来提高性能。查看[下面的示例](#groupby-efficient-transforms)。
- en: 'Changed in version 2.0.0: When using `.transform` on a grouped DataFrame and
    the transformation function returns a DataFrame, pandas now aligns the result’s
    index with the input’s index. You can call `.to_numpy()` within the transformation
    function to avoid alignment.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.0开始更改：当在分组的 DataFrame 上使用 `.transform` 并且转换函数返回一个 DataFrame 时，pandas
    现在会将结果的索引与输入的索引对齐。您可以在转换函数内部调用 `.to_numpy()` 来避免对齐。
- en: Similar to [The aggregate() method](#groupby-aggregate-agg), the resulting dtype
    will reflect that of the transformation function. If the results from different
    groups have different dtypes, then a common dtype will be determined in the same
    way as `DataFrame` construction.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与[聚合方法](#groupby-aggregate-agg)类似，结果的数据类型将反映转换函数的数据类型。如果不同组的结果具有不同的数据类型，则将以与
    `DataFrame` 构造相同的方式确定公共数据类型。
- en: 'Suppose we wish to standardize the data within each group:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望在每个组内标准化数据：
- en: '[PRE57]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We would expect the result to now have mean 0 and standard deviation 1 within
    each group (up to floating-point error), which we can easily check:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望结果现在在每个组内具有均值为0和标准差为1（浮点误差范围内），我们可以轻松检查：
- en: '[PRE58]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We can also visually compare the original and transformed data sets.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以直观比较原始数据和转换后的数据集。
- en: '[PRE59]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
- en: Transformation functions that have lower dimension outputs are broadcast to
    match the shape of the input array.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 具有较低维度输出的转换函数将被广播以匹配输入数组的形状。
- en: '[PRE60]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Another common data transform is to replace missing data with the group mean.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的数据转换是用组均值替换缺失数据。
- en: '[PRE61]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We can verify that the group means have not changed in the transformed data,
    and that the transformed data contains no NAs.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证转换后数据中组均值未发生变化，并且转换后数据不包含任何缺失值。
- en: '[PRE62]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: As mentioned in the note above, each of the examples in this section can be
    computed more efficiently using built-in methods. In the code below, the inefficient
    way using a UDF is commented out and the faster alternative appears below.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的注意中所述，本节中的每个示例都可以使用内置方法更有效地计算。在下面的代码中，使用 UDF 的低效方法被注释掉，更快的替代方法出现在下面。
- en: '[PRE63]  ### Window and resample operations'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE63]  ### 窗口和重采样操作'
- en: It is possible to use `resample()`, `expanding()` and `rolling()` as methods
    on groupbys.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `resample()`、`expanding()` 和 `rolling()` 作为 groupby 的方法使用。
- en: The example below will apply the `rolling()` method on the samples of the column
    B, based on the groups of column A.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将在列 B 的样本上应用 `rolling()` 方法，基于列 A 的组。
- en: '[PRE64]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `expanding()` method will accumulate a given operation (`sum()` in the example)
    for all the members of each particular group.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`expanding()` 方法将为每个特定组的所有成员累积给定操作（在示例中为 `sum()`）。'
- en: '[PRE65]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Suppose you want to use the `resample()` method to get a daily frequency in
    each group of your dataframe, and wish to complete the missing values with the
    `ffill()` method.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要在数据框的每个组中使用 `resample()` 方法获得每日频率，并希望使用 `ffill()` 方法填充缺失值。
- en: '[PRE66]  ## Filtration'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE66]  ## 过滤'
- en: A filtration is a GroupBy operation that subsets the original grouping object.
    It may either filter out entire groups, part of groups, or both. Filtrations return
    a filtered version of the calling object, including the grouping columns when
    provided. In the following example, `class` is included in the result.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是一个 GroupBy 操作，它对原始分组对象进行子集化。它可以过滤掉整个组、部分组或两者。过滤返回调用对象的过滤版本，包括提供的分组列。在下面的示例中，`class`
    包含在结果中。
- en: '[PRE67]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike aggregations, filtrations do not add the group keys to the index of the
    result. Because of this, passing `as_index=False` or `sort=True` will not affect
    these methods.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 与聚合不同，过滤不会将组键添加到结果的索引中。因此，传递 `as_index=False` 或 `sort=True` 不会影响这些方法。
- en: Filtrations will respect subsetting the columns of the GroupBy object.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤将尊重对 GroupBy 对象列的子集。
- en: '[PRE68]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Built-in filtrations
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置过滤
- en: The following methods on GroupBy act as filtrations. All these methods have
    an efficient, GroupBy-specific, implementation.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy 上的以下方法充当过滤。所有这些方法都有一个高效的、GroupBy 特定的实现。
- en: '| Method | Description |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | Select the top row(s) of each group
    |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | 选择每个组的前几行 |'
- en: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | Select the nth row(s) of each group
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | 选择每个组的第n行 |'
- en: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | Select the bottom row(s) of each
    group |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | 选择每个组的底部行 |'
- en: Users can also use transformations along with Boolean indexing to construct
    complex filtrations within groups. For example, suppose we are given groups of
    products and their volumes, and we wish to subset the data to only the largest
    products capturing no more than 90% of the total volume within each group.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以使用变换以及布尔索引在组内构建复杂的过滤。例如，假设我们有产品和其体积的组，并且希望将数据子集缩小到仅捕获每个组内总体积不超过90%的最大产品。
- en: '[PRE69]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The `filter` method
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`filter`方法'
- en: Note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Filtering by supplying `filter` with a User-Defined Function (UDF) is often
    less performant than using the built-in methods on GroupBy. Consider breaking
    up a complex operation into a chain of operations that utilize the built-in methods.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`filter`提供用户定义函数（UDF）进行过滤通常比使用GroupBy上的内置方法性能较差。考虑将复杂操作分解为一系列利用内置方法的操作。
- en: The `filter` method takes a User-Defined Function (UDF) that, when applied to
    an entire group, returns either `True` or `False`. The result of the `filter`
    method is then the subset of groups for which the UDF returned `True`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`方法接受一个用户定义函数（UDF），当应用于整个组时，返回`True`或`False`。`filter`方法的结果是UDF返回`True`的组的子集。'
- en: Suppose we want to take only elements that belong to groups with a group sum
    greater than 2.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想取属于总和大于2的组的元素。
- en: '[PRE70]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Another useful operation is filtering out elements that belong to groups with
    only a couple members.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的操作是过滤出仅属于只有几个成员的组的元素。
- en: '[PRE71]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Alternatively, instead of dropping the offending groups, we can return a like-indexed
    objects where the groups that do not pass the filter are filled with NaNs.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，而不是删除有问题的组，我们可以返回一个类似索引对象，其中未通过过滤器的组填充为NaN。
- en: '[PRE72]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: For DataFrames with multiple columns, filters should explicitly specify a column
    as the filter criterion.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多列的数据框，过滤器应明确指定列作为过滤条件。
- en: '[PRE73]  ## Flexible `apply`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE73]  ## 灵活的`apply`'
- en: Some operations on the grouped data might not fit into the aggregation, transformation,
    or filtration categories. For these, you can use the `apply` function.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分组数据上的一些操作可能不适合于聚合、转换或过滤类别。对于这些情况，可以使用`apply`函数。
- en: Warning
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`apply` has to try to infer from the result whether it should act as a reducer,
    transformer, *or* filter, depending on exactly what is passed to it. Thus the
    grouped column(s) may be included in the output or not. While it tries to intelligently
    guess how to behave, it can sometimes guess wrong.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`必须尝试从结果中推断出它应该充当规约器、转换器*或*过滤器，具体取决于传递给它的内容。因此，分组列可能包含在输出中，也可能不包含。虽然它试图智能猜测如何行事，但有时可能猜错。'
- en: Note
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All of the examples in this section can be more reliably, and more efficiently,
    computed using other pandas functionality.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都可以更可靠、更高效地使用其他pandas功能计算。
- en: '[PRE74]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The dimension of the returned result can also change:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果的维度也可能会改变：
- en: '[PRE75]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '`apply` on a Series can operate on a returned value from the applied function
    that is itself a series, and possibly upcast the result to a DataFrame:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Series上的`apply`可以对来自应用函数的返回值本身为系列的值进行操作，并可能将结果上转换为数据框：
- en: '[PRE76]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Similar to [The aggregate() method](#groupby-aggregate-agg), the resulting dtype
    will reflect that of the apply function. If the results from different groups
    have different dtypes, then a common dtype will be determined in the same way
    as `DataFrame` construction.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 与[aggregate()方法](#groupby-aggregate-agg)类似，结果的数据类型将反映应用函数的数据类型。如果不同组的结果具有不同的数据类型，则将以与`DataFrame`构造相同的方式确定公共数据类型。
- en: Control grouped column(s) placement with `group_keys`
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`group_keys`控制分组列的放置
- en: To control whether the grouped column(s) are included in the indices, you can
    use the argument `group_keys` which defaults to `True`. Compare
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制分组列是否包含在索引中，可以使用默认为`True`的`group_keys`参数。比较
- en: '[PRE77]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: with
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 与
- en: '[PRE78]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Numba Accelerated Routines
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Numba加速例程
- en: New in version 1.1.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.1 中的新功能。
- en: If [Numba](https://numba.pydata.org/) is installed as an optional dependency,
    the `transform` and `aggregate` methods support `engine='numba'` and `engine_kwargs`
    arguments. See [enhancing performance with Numba](enhancingperf.html#enhancingperf-numba)
    for general usage of the arguments and performance considerations.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已安装[Numba](https://numba.pydata.org/)作为可选依赖项，则`transform`和`aggregate`方法支持`engine='numba'`和`engine_kwargs`参数。有关参数的一般用法和性能考虑，请参阅[使用Numba增强性能](enhancingperf.html#enhancingperf-numba)。
- en: The function signature must start with `values, index` **exactly** as the data
    belonging to each group will be passed into `values`, and the group index will
    be passed into `index`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 函数签名必须以`values, index` **完全**开始，因为属于每个组的数据将传递给`values`，分组索引将传递给`index`。
- en: Warning
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using `engine='numba'`, there will be no “fall back” behavior internally.
    The group data and group index will be passed as NumPy arrays to the JITed user
    defined function, and no alternative execution attempts will be tried.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`engine='numba'`时，内部不会有“回退”行为。分组数据和分组索引将作为NumPy数组传递给JITed用户定义的函数，不会尝试任何替代执行。
- en: Other useful features
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他有用的功能
- en: Exclusion of non-numeric columns
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除非数值列
- en: 'Again consider the example DataFrame we’ve been looking at:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑我们一直在看的示例DataFrame：
- en: '[PRE79]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Suppose we wish to compute the standard deviation grouped by the `A` column.
    There is a slight problem, namely that we don’t care about the data in column
    `B` because it is not numeric. You can avoid non-numeric columns by specifying
    `numeric_only=True`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望按`A`列分组计算标准差。有一个小问题，即我们不关心列`B`中的数据，因为它不是数值型的。您可以通过指定`numeric_only=True`来避免非数值列：
- en: '[PRE80]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note that `df.groupby('A').colname.std().` is more efficient than `df.groupby('A').std().colname`.
    So if the result of an aggregation function is only needed over one column (here
    `colname`), it may be filtered *before* applying the aggregation function.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`df.groupby('A').colname.std().`比`df.groupby('A').std().colname`更有效。因此，如果聚合函数的结果只需要在一列（这里是`colname`）上，可以在应用聚合函数之前*进行*过滤。
- en: '[PRE81]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '### Handling of (un)observed Categorical values'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '### (不)观察到的分类值处理'
- en: When using a `Categorical` grouper (as a single grouper, or as part of multiple
    groupers), the `observed` keyword controls whether to return a cartesian product
    of all possible groupers values (`observed=False`) or only those that are observed
    groupers (`observed=True`).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`Categorical`分组器（作为单个分组器或作为多个分组器的一部分）时，`observed`关键字控制是否返回所有可能分组值的笛卡尔积（`observed=False`）或仅返回观察到的分组值（`observed=True`）。
- en: 'Show all values:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有数值：
- en: '[PRE82]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Show only the observed values:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示观察到的值：
- en: '[PRE83]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The returned dtype of the grouped will *always* include *all* of the categories
    that were grouped.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 分组后返回的数据类型将*始终*包括*所有*被分组的类别。
- en: '[PRE84]  ### NA group handling'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE84]  ### NA组处理'
- en: By `NA`, we are referring to any `NA` values, including [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), `NaN`, `NaT`, and `None`. If there are any `NA` values in the grouping
    key, by default these will be excluded. In other words, any “`NA` group” will
    be dropped. You can include NA groups by specifying `dropna=False`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`NA`，我们指的是任何`NA`值，包括[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")、`NaN`、`NaT`和`None`。如果在分组键中存在任何`NA`值，默认情况下这些值将被排除。换句话说，任何“`NA`组”都将被删除。您可以通过指定`dropna=False`来包含NA组。
- en: '[PRE85]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Grouping with ordered factors
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用有序因子进行分组
- en: Categorical variables represented as instances of pandas’s `Categorical` class
    can be used as group keys. If so, the order of the levels will be preserved. When
    `observed=False` and `sort=False`, any unobserved categories will be at the end
    of the result in order.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 作为pandas的`Categorical`类的实例表示的分类变量可以用作分组键。如果是这样，级别的顺序将被保留。当`observed=False`和`sort=False`时���任何未观察到的类别将以特定顺序出现在结果的末尾。
- en: '[PRE86]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '### Grouping with a grouper specification'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用分组器规范进行分组'
- en: You may need to specify a bit more data to properly group. You can use the `pd.Grouper`
    to provide this local control.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要指定更多数据以正确分组。您可以使用`pd.Grouper`来提供这种局部控制。
- en: '[PRE87]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Groupby a specific column with the desired frequency. This is like resampling.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 按照特定列和所需频率进行分组。这类似于重新采样。
- en: '[PRE88]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: When `freq` is specified, the object returned by `pd.Grouper` will be an instance
    of `pandas.api.typing.TimeGrouper`. When there is a column and index with the
    same name, you can use `key` to group by the column and `level` to group by the
    index.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定`freq`时，`pd.Grouper`返回的对象将是`pandas.api.typing.TimeGrouper`的实例。当存在具有相同名称的列和索引时，您可以使用`key`按列分组，使用`level`按索引分组。
- en: '[PRE89]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Taking the first rows of each group
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取每个组的第一行
- en: 'Just like for a DataFrame or Series you can call head and tail on a groupby:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对于 DataFrame 或 Series 一样，您可以在 groupby 上调用 head 和 tail：
- en: '[PRE90]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: This shows the first or last n rows from each group.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了每个组的第一行或最后一行。
- en: '### Taking the nth row of each group'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '### 获取每个组的第n行'
- en: To select the nth item from each group, use [`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") or [`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth"). Arguments supplied can be any integer,
    lists of integers, slices, or lists of slices; see below for examples. When the
    nth element of a group does not exist an error is *not* raised; instead no corresponding
    rows are returned.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 要从每个组中选择第n个项目，请使用[`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth")或[`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth")。提供的参数可以是任何整数、整数列表、切片或切片列表；请参见下面的示例。当组的第n个元素不存在时，*不*会引发错误；而是不返回相应的行。
- en: In general this operation acts as a filtration. In certain cases it will also
    return one row per group, making it also a reduction. However because in general
    it can return zero or multiple rows per group, pandas treats it as a filtration
    in all cases.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，此操作充当过滤器。在某些情况下，它还会返回每个组一行，因此也是一种缩减。但是，由于通常它可以返回零个或多个组的行，因此 pandas 在所有情况下都将其视为过滤器。
- en: '[PRE91]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: If the nth element of a group does not exist, then no corresponding row is included
    in the result. In particular, if the specified `n` is larger than any group, the
    result will be an empty DataFrame.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组的第n个元素不存在，则结果中不包括相应的行。特别是，如果指定的`n`大于任何组，结果将是一个空的 DataFrame。
- en: '[PRE92]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'If you want to select the nth not-null item, use the `dropna` kwarg. For a
    DataFrame this should be either `''any''` or `''all''` just like you would pass
    to dropna:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要选择第n个非空项目，请使用`dropna` kwarg。对于 DataFrame，这应该是`'any'`或`'all'`，就像您传递给 dropna
    一样：
- en: '[PRE93]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: You can also select multiple rows from each group by specifying multiple nth
    values as a list of ints.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过指定多个 nth 值作为整数列表来从每个组中选择多个行。
- en: '[PRE94]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: You may also use slices or lists of slices.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用切片或切片列表。
- en: '[PRE95]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Enumerate group items
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举组项目
- en: 'To see the order in which each row appears within its group, use the `cumcount`
    method:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每行出现在其组内的顺序，请使用`cumcount`方法：
- en: '[PRE96]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '### Enumerate groups'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '### 枚举组'
- en: To see the ordering of the groups (as opposed to the order of rows within a
    group given by `cumcount`) you can use [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup").
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看组的排序（而不是由`cumcount`给出的组内行的顺序），您可以使用[`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")。
- en: Note that the numbers given to the groups match the order in which the groups
    would be seen when iterating over the groupby object, not the order they are first
    observed.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，分组的编号与在迭代 groupby 对象时看到组的顺序相匹配，而不是它们首次观察到的顺序。
- en: '[PRE97]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Plotting
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图
- en: Groupby also works with some plotting methods. In this case, suppose we suspect
    that the values in column 1 are 3 times higher on average in group “B”.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: Groupby 也适用于一些绘图方法。在这种情况下，假设我们怀疑第一列中的值在“B”组中平均高出3倍。
- en: '[PRE98]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'We can easily visualize this with a boxplot:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过箱线图轻松可视化这一点：
- en: '[PRE99]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
- en: The result of calling `boxplot` is a dictionary whose keys are the values of
    our grouping column `g` (“A” and “B”). The values of the resulting dictionary
    can be controlled by the `return_type` keyword of `boxplot`. See the [visualization
    documentation](visualization.html#visualization-box) for more.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`boxplot`的结果是一个字典，其键是我们分组列`g`的值（“A”和“B”）。结果字典的值可以通过`boxplot`的`return_type`关键字控制。有关更多信息，请参阅[可视化文档](visualization.html#visualization-box)。
- en: Warning
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: For historical reasons, `df.groupby("g").boxplot()` is not equivalent to `df.boxplot(by="g")`.
    See [here](visualization.html#visualization-box-return) for an explanation.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，`df.groupby("g").boxplot()` 不等同于 `df.boxplot(by="g")`。请参见[这里](visualization.html#visualization-box-return)进行解释。
- en: '### Piping function calls'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '### 管道函数调用'
- en: Similar to the functionality provided by `DataFrame` and `Series`, functions
    that take `GroupBy` objects can be chained together using a `pipe` method to allow
    for a cleaner, more readable syntax. To read about `.pipe` in general terms, see
    [here](basics.html#basics-pipe).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 与`DataFrame`和`Series`提供的功能类似，接受`GroupBy`对象的函数可以使用`pipe`方法链接在一起，以实现更清晰、更易读的语法。要了解有关`.pipe`的一般信息，请参见[这里](basics.html#basics-pipe)。
- en: Combining `.groupby` and `.pipe` is often useful when you need to reuse GroupBy
    objects.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 结合`.groupby`和`.pipe`通常在需要重用GroupBy对象时很有用。
- en: 'As an example, imagine having a DataFrame with columns for stores, products,
    revenue and quantity sold. We’d like to do a groupwise calculation of *prices*
    (i.e. revenue/quantity) per store and per product. We could do this in a multi-step
    operation, but expressing it in terms of piping can make the code more readable.
    First we set the data:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设有一个包含店铺、产品、收入和销量列的DataFrame。我们想要对每个店铺和每种产品进行*价格*（即收入/销量）的分组计算。我们可以通过多步操作来实现，但使用管道表达可以使代码更易读。首先设置数据：
- en: '[PRE100]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: We now find the prices per store/product.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们找到每个店铺/产品的价格。
- en: '[PRE101]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Piping can also be expressive when you want to deliver a grouped object to
    some arbitrary function, for example:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要将分组对象传递给某个任意函数时，管道也可以表达性强，例如：
- en: '[PRE102]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Here `mean` takes a GroupBy object and finds the mean of the Revenue and Quantity
    columns respectively for each Store-Product combination. The `mean` function can
    be any function that takes in a GroupBy object; the `.pipe` will pass the GroupBy
    object as a parameter into the function you specify.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`mean`接受一个GroupBy对象，并分别找到每个店铺-产品组合的收入和销量列的平均值。`mean`函数可以是任何接受GroupBy对象的函数；`.pipe`将GroupBy对象作为参数传递给您指定的函数。
- en: Examples
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '### Multi-column factorization'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多列因子化'
- en: By using [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup"), we can extract information about
    the groups in a way similar to [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") (as described further in the [reshaping API](reshaping.html#reshaping-factorize))
    but which applies naturally to multiple columns of mixed type and different sources.
    This can be useful as an intermediate categorical-like step in processing, when
    the relationships between the group rows are more important than their content,
    or as input to an algorithm which only accepts the integer encoding. (For more
    information about support in pandas for full categorical data, see the [Categorical
    introduction](categorical.html#categorical) and the [API documentation](../reference/arrays.html#api-arrays-categorical).)
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")，我们可以类似于[`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize")（如在[重塑API](reshaping.html#reshaping-factorize)中进一步描述）的方式提取关于组的信息，但这种方式自然地适用于混合类型和不同来源的多列。这在处理中间分类步骤时可能很有用，当组行之间的关系比它们的内容更重要时，或者作为仅接受整数编码的算法的输入。
    （有关pandas对完整分类数据的支持的更多信息，请参见[分类介绍](categorical.html#categorical)和[API文档](../reference/arrays.html#api-arrays-categorical)。）
- en: '[PRE103]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Groupby by indexer to ‘resample’ data
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按索引器分组以‘resample’数据
- en: Resampling produces new hypothetical samples (resamples) from already existing
    observed data or from a model that generates data. These new samples are similar
    to the pre-existing samples.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 重新采样从已有观察数据或生成数据的模型中产生新的假设样本（重新采样）。这些新样本类似于现有样本。
- en: In order for resample to work on indices that are non-datetimelike, the following
    procedure can be utilized.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`resample`在非日期时间索引上起作用，可以使用以下过程。
- en: In the following examples, **df.index // 5** returns an integer array which
    is used to determine what gets selected for the groupby operation.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，**df.index // 5**返回一个整数数组，用于确定哪些内容被选中进行分组操作。
- en: Note
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The example below shows how we can downsample by consolidation of samples into
    fewer ones. Here by using **df.index // 5**, we are aggregating the samples in
    bins. By applying **std()** function, we aggregate the information contained in
    many samples into a small subset of values which is their standard deviation thereby
    reducing the number of samples.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了如何通过将样本合并为更少的样本来进行降采样。通过使用 **df.index // 5**，我们将样本聚合到箱中。通过应用 **std()**
    函数，我们将许多样本中包含的信息聚合成一小部分值，即它们的标准差，从而减少样本数量。
- en: '[PRE104]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Returning a Series to propagate names
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回一个 Series 以传播名称
- en: 'Group DataFrame columns, compute a set of metrics and return a named Series.
    The Series name is used as the name for the column index. This is especially useful
    in conjunction with reshaping operations such as stacking, in which the column
    index name will be used as the name of the inserted column:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 分组 DataFrame 列，计算一组指标并返回一个命名 Series。该 Series 的名称将用作列索引的名称。这在与重塑操作（如堆叠）结合使用时特别有用，其中列索引名称将用作插入列的名称：
- en: '[PRE105]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '## Splitting an object into groups'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '## 将对象拆分为组'
- en: 'The abstract definition of grouping is to provide a mapping of labels to group
    names. To create a GroupBy object (more on what the GroupBy object is later),
    you may do the following:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 分组的抽象定义是提供标签到组名的映射。要创建一个 GroupBy 对象（稍后会详细介绍 GroupBy 对象），您可以执行以下操作：
- en: '[PRE106]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The mapping can be specified many different ways:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 映射可以通过多种不同的方式指定：
- en: A Python function, to be called on each of the index labels.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个要在每个索引标签上调用的 Python 函数。
- en: A list or NumPy array of the same length as the index.
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与索引长度相同的列表或 NumPy 数组。
- en: A dict or `Series`, providing a `label -> group name` mapping.
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字典或 `Series`，提供一个 `标签 -> 分组名称` 的映射。
- en: For `DataFrame` objects, a string indicating either a column name or an index
    level name to be used to group.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `DataFrame` 对象，一个字符串，指示要用于分组的列名或索引级别名称。
- en: A list of any of the above things.
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以上任何一种的列表。
- en: 'Collectively we refer to the grouping objects as the **keys**. For example,
    consider the following `DataFrame`:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 总体上，我们将分组对象称为**键**。例如，考虑以下 `DataFrame`：
- en: Note
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A string passed to `groupby` may refer to either a column or an index level.
    If a string matches both a column name and an index level name, a `ValueError`
    will be raised.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `groupby` 的字符串可以是列名或索引级别。如果一个字符串同时匹配列名和索引级别名称，将引发 `ValueError`。
- en: '[PRE107]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'On a DataFrame, we obtain a GroupBy object by calling [`groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby"). This method returns a `pandas.api.typing.DataFrameGroupBy`
    instance. We could naturally group by either the `A` or `B` columns, or both:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DataFrame 上，通过调用 [`groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 方法，我们可以获得一个 GroupBy 对象。该方法返回一个 `pandas.api.typing.DataFrameGroupBy`
    实例。我们可以自然地按照 `A` 或 `B` 列，或两者都进行分组：
- en: '[PRE108]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Note
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`df.groupby(''A'')` is just syntactic sugar for `df.groupby(df[''A''])`.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`df.groupby(''A'')` 只是 `df.groupby(df[''A''])` 的语法糖。'
- en: 'If we also have a MultiIndex on columns `A` and `B`, we can group by all the
    columns except the one we specify:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在列 `A` 和 `B` 上还有一个 MultiIndex，我们可以按照除指定列之外的所有列进行分组：
- en: '[PRE109]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The above GroupBy will split the DataFrame on its index (rows). To split by
    columns, first do a transpose:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 GroupBy 将根据其索引（行）拆分 DataFrame。要按列拆分，首先进行转置：
- en: '[PRE110]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'pandas [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    objects support duplicate values. If a non-unique index is used as the group key
    in a groupby operation, all values for the same index value will be considered
    to be in one group and thus the output of aggregation functions will only contain
    unique index values:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: pandas [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    对象支持重复值。如果在 groupby 操作中使用非唯一索引作为分组键，则相同索引值的所有值将被视为一个组，因此聚合函数的输出将只包含唯一索引值：
- en: '[PRE111]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Note that **no splitting occurs** until it’s needed. Creating the GroupBy object
    only verifies that you’ve passed a valid mapping.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**直到需要拆分为止**，不会发生拆分。创建 GroupBy 对象仅验证您已传递了有效的映射。
- en: Note
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Many kinds of complicated data manipulations can be expressed in terms of GroupBy
    operations (though it can’t be guaranteed to be the most efficient implementation).
    You can get quite creative with the label mapping functions.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 许多种复杂的数据操作可以用 GroupBy 操作来表达（尽管不能保证是最有效的实现）。您可以在标签映射函数中发挥创造力。
- en: '### GroupBy sorting'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '### GroupBy 排序'
- en: 'By default the group keys are sorted during the `groupby` operation. You may
    however pass `sort=False` for potential speedups. With `sort=False` the order
    among group-keys follows the order of appearance of the keys in the original dataframe:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在`groupby`操作期间，组键会被排序。但是，你可以传递`sort=False`以提高速度。使用`sort=False`时，组键的顺序遵循键在原始DataFrame中出现的顺序：
- en: '[PRE112]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Note that `groupby` will preserve the order in which *observations* are sorted
    *within* each group. For example, the groups created by `groupby()` below are
    in the order they appeared in the original `DataFrame`:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`groupby`会保留*观察值*在每个组内排序的顺序。例如，下面由`groupby()`创建的组按照它们在原始`DataFrame`中出现的顺序：
- en: '[PRE113]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '#### GroupBy dropna'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '#### GroupBy dropna'
- en: By default `NA` values are excluded from group keys during the `groupby` operation.
    However, in case you want to include `NA` values in group keys, you could pass
    `dropna=False` to achieve it.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在`groupby`操作期间，`NA`值会被排除在组键之外。但是，如果你想要在组键中包含`NA`值，可以传递`dropna=False`来实现。
- en: '[PRE114]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The default setting of `dropna` argument is `True` which means `NA` are not
    included in group keys.  ### GroupBy object attributes'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropna`参数的默认设置是`True`，这意味着`NA`不包括在组键中。  ### GroupBy对象属性'
- en: 'The `groups` attribute is a dictionary whose keys are the computed unique groups
    and corresponding values are the axis labels belonging to each group. In the above
    example we have:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`属性是一个字典，其键是计算出的唯一组，相应的值是属于每个组的轴标签。在上面的例子中，我们有：'
- en: '[PRE116]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Calling the standard Python `len` function on the GroupBy object returns the
    number of groups, which is the same as the length of the `groups` dictionary:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 对GroupBy对象调用标准的Python `len`函数会返回组的数量，这与`groups`字典的长度相同：
- en: '[PRE117]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '`GroupBy` will tab complete column names, GroupBy operations, and other attributes:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`GroupBy`将为列名、GroupBy操作和其他属性提供自动补全：'
- en: '[PRE118]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]  ### GroupBy with MultiIndex'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE119]  ### 带有MultiIndex的GroupBy'
- en: With [hierarchically-indexed data](advanced.html#advanced-hierarchical), it’s
    quite natural to group by one of the levels of the hierarchy.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[分层索引数据](advanced.html#advanced-hierarchical)，按照层次结构的一个级别进行分组是非常自然的。
- en: Let’s create a Series with a two-level `MultiIndex`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个带有两级`MultiIndex`的Series。
- en: '[PRE120]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: We can then group by one of the levels in `s`.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以按照`s`中的一个级别进行分组。
- en: '[PRE121]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'If the MultiIndex has names specified, these can be passed instead of the level
    number:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MultiIndex有指定的名称，可以传递这些名称而不是级别编号：
- en: '[PRE122]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Grouping with multiple levels is supported.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 支持使用多个级别进行分组。
- en: '[PRE123]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Index level names may be supplied as keys.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以作为键提供。
- en: '[PRE124]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: More on the `sum` function and aggregation later.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`sum`函数和聚合的内容稍后再说。
- en: Grouping DataFrame with Index levels and columns
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用索引级别和列对DataFrame进行分组
- en: A DataFrame may be grouped by a combination of columns and index levels. You
    can specify both column and index names, or use a [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper").
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame可以通过列和索引级别的组合进行分组。你可以同时指定列和索引名称，或者使用[`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper")。
- en: 'Let’s first create a DataFrame with a MultiIndex:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个带有MultiIndex的DataFrame：
- en: '[PRE125]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Then we group `df` by the `second` index level and the `A` column.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按`second`索引级别和`A`列对`df`进行分组。
- en: '[PRE126]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Index levels may also be specified by name.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别也可以通过名称指定。
- en: '[PRE127]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Index level names may be specified as keys directly to `groupby`.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以直接作为`groupby`的键来指定。
- en: '[PRE128]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: DataFrame column selection in GroupBy
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在GroupBy中进行DataFrame列选择
- en: 'Once you have created the GroupBy object from a DataFrame, you might want to
    do something different for each of the columns. Thus, by using `[]` on the GroupBy
    object in a similar way as the one used to get a column from a DataFrame, you
    can do:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你从DataFrame创建了GroupBy对象，你可能想要针对每一列做一些不同的事情。因此，通过在GroupBy对象上使用`[]`，类似于从DataFrame获取列的方式，你可以做到：
- en: '[PRE129]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'This is mainly syntactic sugar for the alternative, which is much more verbose:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是语法糖，替代方法更冗长：
- en: '[PRE130]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Additionally, this method avoids recomputing the internal grouping information
    derived from the passed key.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该方法避免了重新计算从传递的键派生的内部分组信息。
- en: You can also include the grouping columns if you want to operate on them.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要对它们进行操作，也可以包括分组列。
- en: '[PRE131]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '### GroupBy sorting'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '### GroupBy sorting'
- en: 'By default the group keys are sorted during the `groupby` operation. You may
    however pass `sort=False` for potential speedups. With `sort=False` the order
    among group-keys follows the order of appearance of the keys in the original dataframe:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在`groupby`操作期间对分组键进行排序。但是，您可以传递`sort=False`以实现潜在的加速。使用`sort=False`，组键之间的顺序遵循键在原始数据框中出现的顺序：
- en: '[PRE132]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Note that `groupby` will preserve the order in which *observations* are sorted
    *within* each group. For example, the groups created by `groupby()` below are
    in the order they appeared in the original `DataFrame`:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`groupby`将保留*观察结果*在每个组内排序的顺序。例如，下面由`groupby()`创建的组按照它们在原始`DataFrame`中出现的顺序排列：
- en: '[PRE133]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '#### GroupBy dropna'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '#### GroupBy dropna'
- en: By default `NA` values are excluded from group keys during the `groupby` operation.
    However, in case you want to include `NA` values in group keys, you could pass
    `dropna=False` to achieve it.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在`groupby`操作期间，默认情况下会排除`NA`值在分组键中。然而，如果您想要在分组键中包括`NA`值，您可以传递`dropna=False`来实现。
- en: '[PRE134]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The default setting of `dropna` argument is `True` which means `NA` are not
    included in group keys.  #### GroupBy dropna'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropna`参数的默认设置是`True`，这意味着`NA`不包括在分组键中。  #### GroupBy dropna'
- en: By default `NA` values are excluded from group keys during the `groupby` operation.
    However, in case you want to include `NA` values in group keys, you could pass
    `dropna=False` to achieve it.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在`groupby`操作期间，默认情况下会排除`NA`值在分组键中。然而，如果您想要在分组键中包括`NA`值，您可以传递`dropna=False`来实现。
- en: '[PRE136]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: The default setting of `dropna` argument is `True` which means `NA` are not
    included in group keys.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropna`参数的默认设置是`True`，这意味着`NA`不包括在分组键中。'
- en: '### GroupBy object attributes'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '### GroupBy对象属性'
- en: 'The `groups` attribute is a dictionary whose keys are the computed unique groups
    and corresponding values are the axis labels belonging to each group. In the above
    example we have:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`属性是一个字典，其键是计算出的唯一组，相应的值是属于每个组的轴标签。在上面的示例中，我们有：'
- en: '[PRE138]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Calling the standard Python `len` function on the GroupBy object returns the
    number of groups, which is the same as the length of the `groups` dictionary:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 对GroupBy对象调用标准的Python `len`函数将返回组的数量，这与`groups`字典的长度相同：
- en: '[PRE139]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '`GroupBy` will tab complete column names, GroupBy operations, and other attributes:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`GroupBy`将为列名、GroupBy操作和其他属性提供制表完成：'
- en: '[PRE140]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '### GroupBy with MultiIndex'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '### 带有MultiIndex的GroupBy'
- en: With [hierarchically-indexed data](advanced.html#advanced-hierarchical), it’s
    quite natural to group by one of the levels of the hierarchy.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有分层索引数据，按照层次结构的一个级别进行分组是非常自然的。
- en: Let’s create a Series with a two-level `MultiIndex`.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个具有两级`MultiIndex`的Series。
- en: '[PRE142]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: We can then group by one of the levels in `s`.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以按`s`中的一个级别进行分组。
- en: '[PRE143]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'If the MultiIndex has names specified, these can be passed instead of the level
    number:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MultiIndex指定了名称，可以传递这些名称而不是级别编号：
- en: '[PRE144]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Grouping with multiple levels is supported.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 支持多级别分组。
- en: '[PRE145]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Index level names may be supplied as keys.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以作为键提供。
- en: '[PRE146]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: More on the `sum` function and aggregation later.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`sum`函数和聚合的内容稍后再说。
- en: Grouping DataFrame with Index levels and columns
  id: totrans-498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用索引级别和列对DataFrame进行分组
- en: A DataFrame may be grouped by a combination of columns and index levels. You
    can specify both column and index names, or use a [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper").
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame可以通过列和索引级别的组合进行分组。您可以指定列和索引名称，或者使用[`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper")。
- en: 'Let’s first create a DataFrame with a MultiIndex:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个具有MultiIndex的DataFrame：
- en: '[PRE147]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Then we group `df` by the `second` index level and the `A` column.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按照`second`索引级别和`A`列对`df`进行分组。
- en: '[PRE148]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Index levels may also be specified by name.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别也可以通过名称指定。
- en: '[PRE149]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Index level names may be specified as keys directly to `groupby`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 索引级别名称可以直接作为键传递给`groupby`。
- en: '[PRE150]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: DataFrame column selection in GroupBy
  id: totrans-508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GroupBy中的DataFrame列选择
- en: 'Once you have created the GroupBy object from a DataFrame, you might want to
    do something different for each of the columns. Thus, by using `[]` on the GroupBy
    object in a similar way as the one used to get a column from a DataFrame, you
    can do:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您从DataFrame创建了GroupBy对象，您可能希望对每个列执行不同的操作。因此，通过在GroupBy对象上使用`[]`，类似于从DataFrame获取列的方式，您可以执行：
- en: '[PRE151]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'This is mainly syntactic sugar for the alternative, which is much more verbose:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 这主要是为了替代更冗长的替代方法而提供的语法糖：
- en: '[PRE152]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Additionally, this method avoids recomputing the internal grouping information
    derived from the passed key.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，此方法避免了重新计算从传递的键派生的内部分组信息。
- en: You can also include the grouping columns if you want to operate on them.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要对它们进行操作，还可以包括分��列。
- en: '[PRE153]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '## Iterating through groups'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '## 通过组进行迭代'
- en: 'With the GroupBy object in hand, iterating through the grouped data is very
    natural and functions similarly to [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(in Python v3.12)"):'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 有了GroupBy对象，通过分组数据进行迭代非常自然，类似于[`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(在 Python v3.12 中)")的操作：
- en: '[PRE154]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'In the case of grouping by multiple keys, the group name will be a tuple:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 在按多个键分组的情况下，组名将是一个元组：
- en: '[PRE155]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: See [Iterating through groups](timeseries.html#timeseries-iterating-label).
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[通过组进行迭代](timeseries.html#timeseries-iterating-label)。
- en: Selecting a group
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择一个组
- en: 'A single group can be selected using [`DataFrameGroupBy.get_group()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group"):'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`DataFrameGroupBy.get_group()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group")选择单个组：
- en: '[PRE156]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Or for an object grouped on multiple columns:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 或者对于在多列上分组的对象：
- en: '[PRE157]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '## Aggregation'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '## 聚合'
- en: An aggregation is a GroupBy operation that reduces the dimension of the grouping
    object. The result of an aggregation is, or at least is treated as, a scalar value
    for each column in a group. For example, producing the sum of each column in a
    group of values.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合是GroupBy操作，它减少了分组对象的维度。聚合的结果是每列在组中的一个标量值，或者至少被视为这样。例如，产生值组中每列的总和。
- en: '[PRE158]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: In the result, the keys of the groups appear in the index by default. They can
    be instead included in the columns by passing `as_index=False`.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，默认情况下组的键出现在索引中。可以通过传递`as_index=False`来将其包含在列中。
- en: '[PRE159]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '### Built-in aggregation methods'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '### 内置聚合方法'
- en: Many common aggregations are built-in to GroupBy objects as methods. Of the
    methods listed below, those with a `*` do *not* have an efficient, GroupBy-specific,
    implementation.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的聚合操作内置在GroupBy对象中作为方法。在下面列出的方法中，带有`*`的方法*没有*高效的、GroupBy特定的实现。
- en: '| Method | Description |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | Compute whether any of the values
    in the groups are truthy |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | 计算组中任何值是否为真 |'
- en: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | Compute whether all of the values
    in the groups are truthy |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | 计算组中所有值是否为真 |'
- en: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | Compute the number of non-NA values
    in the groups |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | 计算组中非NA值的数量 |'
- en: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | Compute the covariance of the
    groups |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | 计算组的协方差 |'
- en: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | Compute the first occurring value
    in each group |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | 计算每个组中首次出现的值 |'
- en: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | Compute the index of the maximum
    value in each group |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | 计算每个组中最大值的索引 |'
- en: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | Compute the index of the minimum
    value in each group |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | 计算每个组中最小值的索引 |'
- en: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | Compute the last occurring value
    in each group |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | 计算每个组中最后出现的值 |'
- en: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | Compute the maximum value in each
    group |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | 计算每个组中的最大值 |'
- en: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | Compute the mean of each group
    |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | 计算每个组的平均值 |'
- en: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | Compute the median of each group
    |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | 计算每个组的中位数 |'
- en: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | Compute the minimum value in each
    group |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
  zh: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | 计算每个组中的最小值 |'
- en: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | Compute the number of unique
    values in each group |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
  zh: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | 计算每个组中唯一值的数量 |'
- en: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | Compute the product of the values
    in each group |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
  zh: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | 计算每个组中值的乘积 |'
- en: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | Compute a given quantile of
    the values in each group |'
  id: totrans-550
  prefs: []
  type: TYPE_TB
  zh: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | 计算每个组中值的给定分位数 |'
- en: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | Compute the standard error of the
    mean of the values in each group |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | 计算每个组中值的平均标准误差 |'
- en: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | Compute the number of values in
    each group |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | 计算每个组中的值的数量 |'
- en: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | Compute the skew of the values
    in each group |'
  id: totrans-553
  prefs: []
  type: TYPE_TB
  zh: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | 计算每个组中值的偏度 |'
- en: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | Compute the standard deviation of
    the values in each group |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | 计算每个组中值的标准偏差 |'
- en: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | Compute the sum of the values in
    each group |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | 计算每个组中值的总和 |'
- en: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | Compute the variance of the values
    in each group |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | 计算每个组中值的方差 |'
- en: 'Some examples:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例：
- en: '[PRE160]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Another aggregation example is to compute the size of each group. This is included
    in GroupBy as the `size` method. It returns a Series whose index consists of the
    group names and the values are the sizes of each group.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的大小。这包含在GroupBy中作为`size`方法。它返回一个Series，其索引由组名组成，值是每个组的大小。
- en: '[PRE161]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: While the [`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe") method is not itself a reducer,
    it can be used to conveniently produce a collection of summary statistics about
    each of the groups.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe") 方法本身不是一个减少器，但可以方便地生成关于每个组的摘要统计信息的集合。'
- en: '[PRE162]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Another aggregation example is to compute the number of unique values of each
    group. This is similar to the [`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts") function, except that it
    only counts the number of unique values.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的唯一值的数量。这类似于[`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts")函数，只是它只计算唯一值的数量。
- en: '[PRE163]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Note
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregation functions **will not** return the groups that you are aggregating
    over as named *columns* when `as_index=True`, the default. The grouped columns
    will be the **indices** of the returned object.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合函数**不会**在`as_index=True`（默认情况下）时将聚合的组作为命名*列*返回。分组的列将是返回对象的**索引**。
- en: 'Passing `as_index=False` **will** return the groups that you are aggregating
    over as named columns, regardless if they are named **indices** or *columns* in
    the inputs.  ### The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`as_index=False` **将**返回聚合的组作为命名列，无论它们在输入中是命名的**索引**还是*列*。### [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") 方法
- en: Note
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method can accept many different
    types of inputs. This section details using string aliases for various GroupBy
    methods; other inputs are detailed in the sections below.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") 方法可以接受许多不同类型的输入。本节详细介绍了使用字符串别名进行各种GroupBy方法的聚合；其他输入在下面的各节中详细说明。'
- en: Any reduction method that pandas implements can be passed as a string to [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate"). Users are encouraged to use
    the shorthand, `agg`. It will operate as if the corresponding method was called.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: pandas实现的任何减少方法都可以作为字符串传递给[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")。鼓励用户使用简写`agg`。它将操作，就好像调用了相应的方法一样。
- en: '[PRE164]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The result of the aggregation will have the group names as the new index. In
    the case of multiple keys, the result is a [MultiIndex](advanced.html#advanced-hierarchical)
    by default. As mentioned above, this can be changed by using the `as_index` option:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合的结果将具有组名作为新索引。在多个键的情况下，默认情况下结果是[MultiIndex](advanced.html#advanced-hierarchical)。如上所述，可以通过使用`as_index`选项来更改这一点：
- en: '[PRE165]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Note that you could use the [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame function to achieve the same result
    as the column names are stored in the resulting `MultiIndex`, although this will
    make an extra copy.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以使用[`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame 函数来实现与列名存储在结果`MultiIndex`中相同的结果，尽管这将产生额外的副本。
- en: '[PRE166]  ### Aggregation with User-Defined Functions'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE166]  ### 使用用户定义函数进行聚合'
- en: Users can also provide their own User-Defined Functions (UDFs) for custom aggregations.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以为自定义聚合提供自己的用户定义函数（UDFs）。
- en: Warning
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When aggregating with a UDF, the UDF should not mutate the provided `Series`.
    See [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 UDF 进行聚合时，UDF 不应该改变提供的`Series`。有关更多信息，请参阅[使用用户定义函数（UDF）方法进行变异](gotchas.html#gotchas-udf-mutation)。
- en: Note
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregating with a UDF is often less performant than using the pandas built-in
    methods on GroupBy. Consider breaking up a complex operation into a chain of operations
    that utilize the built-in methods.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 UDF 进行聚合通常比在 GroupBy 上使用 pandas 内置方法性能较差。考虑将复杂操作拆分为一系列利用内置方法的操作链。
- en: '[PRE167]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: The resulting dtype will reflect that of the aggregating function. If the results
    from different groups have different dtypes, then a common dtype will be determined
    in the same way as `DataFrame` construction.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 结果 dtype 将反映聚合函数的 dtype。如果不同组的结果具有不同的 dtype，则将以与`DataFrame`构造相同的方式确定公共 dtype。
- en: '[PRE168]  ### Applying multiple functions at once'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE168]  ### 一次应用多个函数'
- en: 'On a grouped `Series`, you can pass a list or dict of functions to `SeriesGroupBy.agg()`,
    outputting a DataFrame:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`Series`上，您可以将函数列表或字典传递给`SeriesGroupBy.agg()`，输出一个 DataFrame：
- en: '[PRE169]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'On a grouped `DataFrame`, you can pass a list of functions to `DataFrameGroupBy.agg()`
    to aggregate each column, which produces an aggregated result with a hierarchical
    column index:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`DataFrame`上，您可以将函数列表传递给`DataFrameGroupBy.agg()`，以对每列进行聚合，从而产生具有分层列索引的聚合结果：
- en: '[PRE170]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The resulting aggregations are named after the functions themselves. If you
    need to rename, then you can add in a chained operation for a `Series` like this:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 结果聚合以函数本身命名。如果需要重命名，则可以像这样为`Series`添加一个链接操作：
- en: '[PRE171]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'For a grouped `DataFrame`, you can rename in a similar manner:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分组的`DataFrame`，您可以以类似的方式重命名：
- en: '[PRE172]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Note
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, the output column names should be unique, but pandas will allow
    you apply to the same function (or two functions with the same name) to the same
    column.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，输出列名应该是唯一的，但是 pandas 允许您将相同的函数（或两个具有相同名称的函数）应用于同一列。
- en: '[PRE173]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: pandas also allows you to provide multiple lambdas. In this case, pandas will
    mangle the name of the (nameless) lambda functions, appending `_<i>` to each subsequent
    lambda.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 还允许您提供多个 lambda。在这种情况下，pandas 将破坏（无名）lambda 函数的名称，对每个后续 lambda 添加`_<i>`。
- en: '[PRE174]  ### Named aggregation'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE174]  ### 命名聚合'
- en: To support column-specific aggregation *with control over the output column
    names*, pandas accepts the special syntax in [`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg") and [`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg"), known as “named aggregation”, where
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持*控制输出列名的特定列聚合*，pandas 在[`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg") 和[`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg") 中接受特殊语法，称为“命名聚合”，其中
- en: The keywords are the *output* column names
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字是*输出*列名
- en: The values are tuples whose first element is the column to select and the second
    element is the aggregation to apply to that column. pandas provides the [`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg
    "pandas.NamedAgg") namedtuple with the fields `['column', 'aggfunc']` to make
    it clearer what the arguments are. As usual, the aggregation can be a callable
    or a string alias.
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值是元组，其第一个元素是要选择的列，第二个元素是要应用于该列的聚合。pandas 提供了带有字段`['column', 'aggfunc']`的[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg
    "pandas.NamedAgg") 命名元组，以使参数更清晰。通常，聚合可以是可调用的或字符串别名。
- en: '[PRE175]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    is just a `namedtuple`. Plain tuples are allowed as well.'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    只是一个`namedtuple`。也允许使用普通元组。'
- en: '[PRE176]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: If the column names you want are not valid Python keywords, construct a dictionary
    and unpack the keyword arguments
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要的列名不是有效的Python关键字，请构建一个字典并解压关键字参数
- en: '[PRE177]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: When using named aggregation, additional keyword arguments are not passed through
    to the aggregation functions; only pairs of `(column, aggfunc)` should be passed
    as `**kwargs`. If your aggregation functions require additional arguments, apply
    them partially with `functools.partial()`.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命名聚合时，额外的关键字参数不会传递给聚合函数；只有`(column, aggfunc)`对作为`**kwargs`传递。如果您的聚合函数需要额外的参数，可以使用`functools.partial()`部分应用它们。
- en: Named aggregation is also valid for Series groupby aggregations. In this case
    there’s no column selection, so the values are just the functions.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 命名聚合对于Series分组聚合也是有效的。在这种情况下，没有列选择，因此值只是函数。
- en: '[PRE178]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Applying different functions to DataFrame columns
  id: totrans-608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对DataFrame列应用不同的函数
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a DataFrame:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给`aggregate`，您可以对DataFrame的列应用不同的聚合：
- en: '[PRE179]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on GroupBy:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称也可以是字符串。为了使字符串有效，必须在GroupBy上实现它：
- en: '[PRE180]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '### Built-in aggregation methods'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '### 内置聚合方法'
- en: Many common aggregations are built-in to GroupBy objects as methods. Of the
    methods listed below, those with a `*` do *not* have an efficient, GroupBy-specific,
    implementation.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的聚合在GroupBy对象中作为方法内置。在下面列出的方法中，带有`*`的方法 *没有* 高效的、GroupBy特定的实现。
- en: '| Method | Description |'
  id: totrans-615
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | Compute whether any of the values
    in the groups are truthy |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| [`any()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any") | 计算组中任何值是否为真 |'
- en: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | Compute whether all of the values
    in the groups are truthy |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| [`all()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all") | 计算组中所有值是否为真 |'
- en: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | Compute the number of non-NA values
    in the groups |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| [`count()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count") | 计算组中非NA值的数量 |'
- en: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | Compute the covariance of the
    groups |'
  id: totrans-620
  prefs: []
  type: TYPE_TB
  zh: '| [`cov()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov") * | 计算组的协方差 |'
- en: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | Compute the first occurring value
    in each group |'
  id: totrans-621
  prefs: []
  type: TYPE_TB
  zh: '| [`first()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first") | 计算每个组中首次出现的值 |'
- en: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | Compute the index of the maximum
    value in each group |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax") | 计算每个组中最大值的索引 |'
- en: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | Compute the index of the minimum
    value in each group |'
  id: totrans-623
  prefs: []
  type: TYPE_TB
  zh: '| [`idxmin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin") | 计算每个组中最小值的索引 |'
- en: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | Compute the last occurring value
    in each group |'
  id: totrans-624
  prefs: []
  type: TYPE_TB
  zh: '| [`last()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last") | 计算每个组中最后出现的值 |'
- en: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | Compute the maximum value in each
    group |'
  id: totrans-625
  prefs: []
  type: TYPE_TB
  zh: '| [`max()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max") | 计算每个组中的最大值 |'
- en: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | Compute the mean of each group
    |'
  id: totrans-626
  prefs: []
  type: TYPE_TB
  zh: '| [`mean()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean") | 计算每个组的均值 |'
- en: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | Compute the median of each group
    |'
  id: totrans-627
  prefs: []
  type: TYPE_TB
  zh: '| [`median()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median") | 计算每个组的中位数 |'
- en: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | Compute the minimum value in each
    group |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
  zh: '| [`min()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min") | 计算每个组中的最小值 |'
- en: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | Compute the number of unique
    values in each group |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| [`nunique()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique") | 计算每个组中唯一值的数量 |'
- en: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | Compute the product of the values
    in each group |'
  id: totrans-630
  prefs: []
  type: TYPE_TB
  zh: '| [`prod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod") | 计算每个组中值的乘积 |'
- en: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | Compute a given quantile of
    the values in each group |'
  id: totrans-631
  prefs: []
  type: TYPE_TB
  zh: '| [`quantile()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile") | 计算每个组中值的给定分位数 |'
- en: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | Compute the standard error of the
    mean of the values in each group |'
  id: totrans-632
  prefs: []
  type: TYPE_TB
  zh: '| [`sem()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem") | 计算每个组中值的均值标准误差 |'
- en: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | Compute the number of values in
    each group |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
  zh: '| [`size()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size") | 计算每个组中值的数量 |'
- en: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | Compute the skew of the values
    in each group |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
  zh: '| [`skew()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew") * | 计算每个组中值的偏度 |'
- en: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | Compute the standard deviation of
    the values in each group |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| [`std()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std") | 计算每个组中值的标准差 |'
- en: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | Compute the sum of the values in
    each group |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
  zh: '| [`sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") | 计算每个组中值的总和 |'
- en: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | Compute the variance of the values
    in each group |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
  zh: '| [`var()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var") | 计算每个组中值的方差 |'
- en: 'Some examples:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '一些示例:'
- en: '[PRE181]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Another aggregation example is to compute the size of each group. This is included
    in GroupBy as the `size` method. It returns a Series whose index consists of the
    group names and the values are the sizes of each group.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的大小。这包含在GroupBy中作为`size`方法。它返回一个Series，其索引由组名组成，值是每个组的大小。
- en: '[PRE182]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: While the [`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe") method is not itself a reducer,
    it can be used to conveniently produce a collection of summary statistics about
    each of the groups.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`DataFrameGroupBy.describe()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe")方法本身不是一个缩减器，但它可以用于方便地生成关于每个组的摘要统计信息的集合。
- en: '[PRE183]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Another aggregation example is to compute the number of unique values of each
    group. This is similar to the [`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts") function, except that it
    only counts the number of unique values.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个聚合示例是计算每个组的唯一值的数量。这类似于[`DataFrameGroupBy.value_counts()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts")函数，只是它只计算唯一值的数量。
- en: '[PRE184]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Note
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregation functions **will not** return the groups that you are aggregating
    over as named *columns* when `as_index=True`, the default. The grouped columns
    will be the **indices** of the returned object.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 当`as_index=True`时，默认情况下，聚合函数**不会**将你正在聚合的组作为命名*列*返回。分组的列将是返回对象的**索引**。
- en: Passing `as_index=False` **will** return the groups that you are aggregating
    over as named columns, regardless if they are named **indices** or *columns* in
    the inputs.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`as_index=False` **将**返回你正在聚合的组作为命名列，无论它们在输入中是命名的**索引**还是*列*。
- en: '### The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '### [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") 方法'
- en: Note
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate") method can accept many different
    types of inputs. This section details using string aliases for various GroupBy
    methods; other inputs are detailed in the sections below.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")方法可以接受许多不同类型的输入。本节详细介绍了使用字符串别名进行各种GroupBy方法的详细信息；其他输入在下面的各节中详细说明。'
- en: Any reduction method that pandas implements can be passed as a string to [`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate"). Users are encouraged to use
    the shorthand, `agg`. It will operate as if the corresponding method was called.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 pandas 实现的缩减方法都可以作为字符串传递给[`aggregate()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")。鼓励用户使用简写`agg`。它将操作，就好像调用了相应的方法一样。
- en: '[PRE185]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'The result of the aggregation will have the group names as the new index. In
    the case of multiple keys, the result is a [MultiIndex](advanced.html#advanced-hierarchical)
    by default. As mentioned above, this can be changed by using the `as_index` option:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合的结果将以组名作为新索引。在多个键的情况下，默认情况下结果是[MultiIndex](advanced.html#advanced-hierarchical)。如上所述，这可以通过使用`as_index`选项来更改：
- en: '[PRE186]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Note that you could use the [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame function to achieve the same result
    as the column names are stored in the resulting `MultiIndex`, although this will
    make an extra copy.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以使用[`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") DataFrame函数来实现与列名相同的结果，因为列名存储在生成的`MultiIndex`中，尽管这将产生额外的副本。
- en: '[PRE187]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '### Aggregation with User-Defined Functions'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用用户定义函数进行聚合'
- en: Users can also provide their own User-Defined Functions (UDFs) for custom aggregations.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以为自定义聚合提供自己的用户定义函数（UDFs）。
- en: Warning
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When aggregating with a UDF, the UDF should not mutate the provided `Series`.
    See [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用UDF进行聚合时，UDF不应更改提供的`Series`。有关更多信息，请参阅[使用用户定义函数（UDF）方法进行变异](gotchas.html#gotchas-udf-mutation)。
- en: Note
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Aggregating with a UDF is often less performant than using the pandas built-in
    methods on GroupBy. Consider breaking up a complex operation into a chain of operations
    that utilize the built-in methods.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UDF进行聚合通常比在GroupBy上使用pandas内置方法性能更低。考虑将复杂操作分解为一系列利用内置方法的操作。
- en: '[PRE188]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: The resulting dtype will reflect that of the aggregating function. If the results
    from different groups have different dtypes, then a common dtype will be determined
    in the same way as `DataFrame` construction.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的dtype将反映聚合函数的dtype。如果不同组的结果具有不同的dtype，则将以与`DataFrame`构造相同的方式确定公共dtype。
- en: '[PRE189]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '### Applying multiple functions at once'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '### 一次应用多个函数'
- en: 'On a grouped `Series`, you can pass a list or dict of functions to `SeriesGroupBy.agg()`,
    outputting a DataFrame:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`Series`上，您可以将函数列表或字典传递给`SeriesGroupBy.agg()`，输出一个DataFrame：
- en: '[PRE190]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'On a grouped `DataFrame`, you can pass a list of functions to `DataFrameGroupBy.agg()`
    to aggregate each column, which produces an aggregated result with a hierarchical
    column index:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 在分组的`DataFrame`上，您可以将函数列表传递给`DataFrameGroupBy.agg()`以聚合每列，这将产生一个具有分层列索引的聚合结果：
- en: '[PRE191]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'The resulting aggregations are named after the functions themselves. If you
    need to rename, then you can add in a chained operation for a `Series` like this:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的聚合以函数本身命名。如果需要重命名，则可以为`Series`添加一个链接操作，如下所示：
- en: '[PRE192]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'For a grouped `DataFrame`, you can rename in a similar manner:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分组的`DataFrame`，您可以以类似的方式重命名：
- en: '[PRE193]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Note
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In general, the output column names should be unique, but pandas will allow
    you apply to the same function (or two functions with the same name) to the same
    column.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，输出列名应该是唯一的，但pandas允许您将相同函数（或具有相同名称的两个函数）应用于同一列。
- en: '[PRE194]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: pandas also allows you to provide multiple lambdas. In this case, pandas will
    mangle the name of the (nameless) lambda functions, appending `_<i>` to each subsequent
    lambda.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: pandas还允许您提供多个lambda函数。在这种情况下，pandas将对（无名称）lambda函数的名称进行修改，对每个后续lambda追加`_<i>`。
- en: '[PRE195]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '### Named aggregation'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '### 命名聚合'
- en: To support column-specific aggregation *with control over the output column
    names*, pandas accepts the special syntax in [`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg") and [`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg"), known as “named aggregation”, where
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持具有对输出列名称的控制的特定列聚合，pandas接受在[`DataFrameGroupBy.agg()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg")和[`SeriesGroupBy.agg()`](../reference/api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg")中的特殊语法，称为“命名聚合”，其中
- en: The keywords are the *output* column names
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字是*输出*列名
- en: The values are tuples whose first element is the column to select and the second
    element is the aggregation to apply to that column. pandas provides the [`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg
    "pandas.NamedAgg") namedtuple with the fields `['column', 'aggfunc']` to make
    it clearer what the arguments are. As usual, the aggregation can be a callable
    or a string alias.
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些值是元组，第一个元素是要选择的列，第二个元素是要应用于该列的聚合。pandas提供了[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg
    "pandas.NamedAgg")命名元组，字段为`['column', 'aggfunc']`，以便更清晰地了解参数是什么。通常，聚合可以是可调用的函数或字符串别名。
- en: '[PRE196]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")
    is just a `namedtuple`. Plain tuples are allowed as well.'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NamedAgg`](../reference/api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")只是一个`namedtuple`。也允许使用普通元组。'
- en: '[PRE197]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: If the column names you want are not valid Python keywords, construct a dictionary
    and unpack the keyword arguments
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要的列名不是有效的Python关键字，请构造一个字典并展开关键字参数
- en: '[PRE198]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: When using named aggregation, additional keyword arguments are not passed through
    to the aggregation functions; only pairs of `(column, aggfunc)` should be passed
    as `**kwargs`. If your aggregation functions require additional arguments, apply
    them partially with `functools.partial()`.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命名聚合时，额外的关键字参数不会传递给聚合函数；只有 `(column, aggfunc)` 对应的键值对应该作为 `**kwargs` 传递。如果您的聚合函数需要额外的参数，可以使用
    `functools.partial()` 部分应用它们。
- en: Named aggregation is also valid for Series groupby aggregations. In this case
    there’s no column selection, so the values are just the functions.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 命名聚合对于 Series groupby 聚合也是有效的。在这种情况下，没有列选择，因此值只是函数。
- en: '[PRE199]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Applying different functions to DataFrame columns
  id: totrans-693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 DataFrame 列应用不同函数
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a DataFrame:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给 `aggregate`，您可以对 DataFrame 的列应用��同的聚合：
- en: '[PRE200]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on GroupBy:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称也可以是字符串。为了使字符串有效，必须在 GroupBy 上实现它：
- en: '[PRE201]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '## Transformation'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '## 转换'
- en: A transformation is a GroupBy operation whose result is indexed the same as
    the one being grouped. Common examples include [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") and [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff").
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 转换是一个 GroupBy 操作，其结果与被分组的结果索引相同。常见示例包括 [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") 和 [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff")。
- en: '[PRE202]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Unlike aggregations, the groupings that are used to split the original object
    are not included in the result.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 与聚合不同，用于拆分原始对象的分组不包含在结果中。
- en: Note
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since transformations do not include the groupings that are used to split the
    result, the arguments `as_index` and `sort` in [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") and [`Series.groupby()`](../reference/api/pandas.Series.groupby.html#pandas.Series.groupby
    "pandas.Series.groupby") have no effect.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 由于转换不包括用于拆分结果的分组，因此在 [`DataFrame.groupby()`](../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") 和 [`Series.groupby()`](../reference/api/pandas.Series.groupby.html#pandas.Series.groupby
    "pandas.Series.groupby") 中的参数 `as_index` 和 `sort` 没有效果。
- en: A common use of a transformation is to add the result back into the original
    DataFrame.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 转换的常见用途是将结果添加回原始 DataFrame 中。
- en: '[PRE203]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Built-in transformation methods
  id: totrans-706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置的转换方法
- en: The following methods on GroupBy act as transformations.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy 上的以下方法作为转换操作。
- en: '| Method | Description |'
  id: totrans-708
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-709
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | Back fill NA values within each
    group |'
  id: totrans-710
  prefs: []
  type: TYPE_TB
  zh: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | 在每个组内填充 NA 值 |'
- en: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | Compute the cumulative count
    within each group |'
  id: totrans-711
  prefs: []
  type: TYPE_TB
  zh: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | 计算每个组内的累积计数 |'
- en: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | Compute the cumulative max within
    each group |'
  id: totrans-712
  prefs: []
  type: TYPE_TB
  zh: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | 计算每个组内的累积最大值 |'
- en: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | Compute the cumulative min within
    each group |'
  id: totrans-713
  prefs: []
  type: TYPE_TB
  zh: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | 计算每个组内的累积最小值 |'
- en: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | Compute the cumulative product
    within each group |'
  id: totrans-714
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | 计算每个组内的累积乘积 |'
- en: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | Compute the cumulative sum within
    each group |'
  id: totrans-715
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | 计算每个组内的累积和 |'
- en: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | Compute the difference between
    adjacent values within each group |'
  id: totrans-716
  prefs: []
  type: TYPE_TB
  zh: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | 计算每个组内相邻值之间的差异 |'
- en: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | Forward fill NA values within
    each group |'
  id: totrans-717
  prefs: []
  type: TYPE_TB
  zh: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | 在每个组内填充 NA 值 |'
- en: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | Compute the percent change
    between adjacent values within each group |'
  id: totrans-718
  prefs: []
  type: TYPE_TB
  zh: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | 计算每个组内相邻值之间的百分比变化 |'
- en: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | Compute the rank of each value
    within each group |'
  id: totrans-719
  prefs: []
  type: TYPE_TB
  zh: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | 计算每个组内每个值的排名 |'
- en: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | Shift values up or down within
    each group |'
  id: totrans-720
  prefs: []
  type: TYPE_TB
  zh: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | 在每个组内上下移动值 |'
- en: In addition, passing any built-in aggregation method as a string to [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") (see the next section) will
    broadcast the result across the group, producing a transformed result. If the
    aggregation method has an efficient implementation, this will be performant as
    well.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将任何内置聚合方法作为字符串传递给[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform")（请参阅下一节）将在组内广播结果，生成转换后的结果。如果聚合方法有高效的实现，这也将具有高性能。
- en: '### The [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '### [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法'
- en: Similar to the [aggregation method](#groupby-aggregate-agg), the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can accept string aliases
    to the built-in transformation methods in the previous section. It can *also*
    accept string aliases to the built-in aggregation methods. When an aggregation
    method is provided, the result will be broadcast across the group.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[聚合方法](#groupby-aggregate-agg)，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法可以接受字符串别名，指向前一节中内置的转换方法。它还*可以*接受��符串别名，指向内置的聚合方法。当提供聚合方法时，结果将在组内广播。
- en: '[PRE204]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'In addition to string aliases, the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can also accept User-Defined
    Functions (UDFs). The UDF must:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 除了字符串别名外，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法还可以接受用户定义的函数（UDFs）。UDF 必须：
- en: 'Return a result that is either the same size as the group chunk or broadcastable
    to the size of the group chunk (e.g., a scalar, `grouped.transform(lambda x: x.iloc[-1])`).'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '返回的结果要么与组块的大小相同，要么可以广播到组块的大小（例如，标量，`grouped.transform(lambda x: x.iloc[-1])`）。'
- en: Operate column-by-column on the group chunk. The transform is applied to the
    first group chunk using chunk.apply.
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组块上逐列操作。使用chunk.apply将转换应用于第一个组块。
- en: Not perform in-place operations on the group chunk. Group chunks should be treated
    as immutable, and changes to a group chunk may produce unexpected results. See
    [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在组块上执行就地操作。组块应被视为不可变的，对组块的更改可能会产生意外结果。有关更多信息，请参见[使用用户定义函数（UDF）方法进行变异](gotchas.html#gotchas-udf-mutation)。
- en: (Optionally) operates on all columns of the entire group chunk at once. If this
    is supported, a fast path is used starting from the *second* chunk.
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）一次性操作整个组块的所有列。如果支持此操作，将从*第二*块开始使用快速路径。
- en: Note
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Transforming by supplying `transform` with a UDF is often less performant than
    using the built-in methods on GroupBy. Consider breaking up a complex operation
    into a chain of operations that utilize the built-in methods.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供UDF给`transform`进行转换通常比在GroupBy上使用内置方法性能更低。考虑将复杂操作分解为一系列利用内置方法的操作。
- en: All of the examples in this section can be made more performant by calling built-in
    methods instead of using UDFs. See [below for examples](#groupby-efficient-transforms).
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都可以通过调用内置方法而不是使用UDFs来提高性能。请参见[下面的示例](#groupby-efficient-transforms)。
- en: 'Changed in version 2.0.0: When using `.transform` on a grouped DataFrame and
    the transformation function returns a DataFrame, pandas now aligns the result’s
    index with the input’s index. You can call `.to_numpy()` within the transformation
    function to avoid alignment.'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.0开始更改：当在分组的DataFrame上使用`.transform`并且转换函数返回一个DataFrame时，pandas现在会将结果的索引与输入的索引对齐。您可以在转换函数内部调用`.to_numpy()`以避免对齐。
- en: Similar to [The aggregate() method](#groupby-aggregate-agg), the resulting dtype
    will reflect that of the transformation function. If the results from different
    groups have different dtypes, then a common dtype will be determined in the same
    way as `DataFrame` construction.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 与[聚合方法](#groupby-aggregate-agg)类似，结果的dtype将反映转换函数的dtype。如果不同组的结果具有不同的dtype，则将以与`DataFrame`构造相同的方式确定公共dtype。
- en: 'Suppose we wish to standardize the data within each group:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望在每个组内标准化数据：
- en: '[PRE205]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'We would expect the result to now have mean 0 and standard deviation 1 within
    each group (up to floating-point error), which we can easily check:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望结果现在在每个组内具有均值0和标准差1（直到浮点误差），我们可以轻松检查：
- en: '[PRE206]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: We can also visually compare the original and transformed data sets.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以直观地比较原始数据集和转换后的数据集。
- en: '[PRE207]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
  id: totrans-741
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
- en: Transformation functions that have lower dimension outputs are broadcast to
    match the shape of the input array.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 具有较低维度输出的转换函数将被广播以匹配输入数组的形状。
- en: '[PRE208]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Another common data transform is to replace missing data with the group mean.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的数据转换是用组均值替换缺失数据。
- en: '[PRE209]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: We can verify that the group means have not changed in the transformed data,
    and that the transformed data contains no NAs.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证转换后数据中组均值未发生变化，并且转换后数据不包含NA值。
- en: '[PRE210]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: As mentioned in the note above, each of the examples in this section can be
    computed more efficiently using built-in methods. In the code below, the inefficient
    way using a UDF is commented out and the faster alternative appears below.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的注释中所述，本节中的每个示例都可以使用内置方法更有效地计算。在下面的代码中，使用UDF的低效方法被注释掉，更快的替代方法出现在下面。
- en: '[PRE211]  ### Window and resample operations'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE211]  ### 窗口和重新采样操作'
- en: It is possible to use `resample()`, `expanding()` and `rolling()` as methods
    on groupbys.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将`resample()`、`expanding()`和`rolling()`作为groupby的方法使用。
- en: The example below will apply the `rolling()` method on the samples of the column
    B, based on the groups of column A.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将在列B的样本上应用`rolling()`方法，基于列A的分组。
- en: '[PRE212]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: The `expanding()` method will accumulate a given operation (`sum()` in the example)
    for all the members of each particular group.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '`expanding()`方法将为每个特定组的所有成员累积给定操作（示例中为`sum()`）。'
- en: '[PRE213]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Suppose you want to use the `resample()` method to get a daily frequency in
    each group of your dataframe, and wish to complete the missing values with the
    `ffill()` method.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要使用`resample()`方法在数据框的每个组中获得每日频率，并希望使用`ffill()`方法完成缺失值。
- en: '[PRE214]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Built-in transformation methods
  id: totrans-757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置转换方法
- en: The following methods on GroupBy act as transformations.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 GroupBy 方法作为转换操作。
- en: '| Method | Description |'
  id: totrans-759
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-760
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | Back fill NA values within each
    group |'
  id: totrans-761
  prefs: []
  type: TYPE_TB
  zh: '| [`bfill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill") | 在每个组内部填充 NA 值 |'
- en: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | Compute the cumulative count
    within each group |'
  id: totrans-762
  prefs: []
  type: TYPE_TB
  zh: '| [`cumcount()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount") | 计算每个组内的累计计数 |'
- en: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | Compute the cumulative max within
    each group |'
  id: totrans-763
  prefs: []
  type: TYPE_TB
  zh: '| [`cummax()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax") | 计算每个组内的累积最大值 |'
- en: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | Compute the cumulative min within
    each group |'
  id: totrans-764
  prefs: []
  type: TYPE_TB
  zh: '| [`cummin()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin") | 计算每个组内的累积最小值 |'
- en: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | Compute the cumulative product
    within each group |'
  id: totrans-765
  prefs: []
  type: TYPE_TB
  zh: '| [`cumprod()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod") | 计算每个组内的累积乘积 |'
- en: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | Compute the cumulative sum within
    each group |'
  id: totrans-766
  prefs: []
  type: TYPE_TB
  zh: '| [`cumsum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum") | 计算每个组内的累积和 |'
- en: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | Compute the difference between
    adjacent values within each group |'
  id: totrans-767
  prefs: []
  type: TYPE_TB
  zh: '| [`diff()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff") | 计算每个组内相邻值之间的差异 |'
- en: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | Forward fill NA values within
    each group |'
  id: totrans-768
  prefs: []
  type: TYPE_TB
  zh: '| [`ffill()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill") | 在每个组内前向填充 NA 值 |'
- en: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | Compute the percent change
    between adjacent values within each group |'
  id: totrans-769
  prefs: []
  type: TYPE_TB
  zh: '| [`pct_change()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change") | 计算每个组内相邻值之间的百分比变化 |'
- en: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | Compute the rank of each value
    within each group |'
  id: totrans-770
  prefs: []
  type: TYPE_TB
  zh: '| [`rank()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank") | 计算每个组内每个值的排名 |'
- en: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | Shift values up or down within
    each group |'
  id: totrans-771
  prefs: []
  type: TYPE_TB
  zh: '| [`shift()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift") | 在每个组内上下移动值 |'
- en: In addition, passing any built-in aggregation method as a string to [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") (see the next section) will
    broadcast the result across the group, producing a transformed result. If the
    aggregation method has an efficient implementation, this will be performant as
    well.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将任何内置聚合方法作为字符串传递给[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform")（请参见下一节）将在组中广播结果，产生一个转换后的结果。如果聚合方法有高效的实现，这也将是高性能的。
- en: '### The [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '### [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法'
- en: Similar to the [aggregation method](#groupby-aggregate-agg), the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can accept string aliases
    to the built-in transformation methods in the previous section. It can *also*
    accept string aliases to the built-in aggregation methods. When an aggregation
    method is provided, the result will be broadcast across the group.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 与[聚合方法](#groupby-aggregate-agg)类似，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法可以接受前一节中内置转换方法的字符串别名。它还可以接受内置聚合方法的字符串别名。当提供聚合方法时，结果将在组中广播。
- en: '[PRE215]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'In addition to string aliases, the [`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") method can also accept User-Defined
    Functions (UDFs). The UDF must:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 除了字符串别名外，[`transform()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform") 方法还可以接受用户定义函数（UDFs）。UDF必须：
- en: 'Return a result that is either the same size as the group chunk or broadcastable
    to the size of the group chunk (e.g., a scalar, `grouped.transform(lambda x: x.iloc[-1])`).'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '返回一个与组块大小相同或可广播到组块大小的结果（例如，一个标量，`grouped.transform(lambda x: x.iloc[-1])`）。'
- en: Operate column-by-column on the group chunk. The transform is applied to the
    first group chunk using chunk.apply.
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐列在组块上操作。使用chunk.apply将转换应用于第一个组块。
- en: Not perform in-place operations on the group chunk. Group chunks should be treated
    as immutable, and changes to a group chunk may produce unexpected results. See
    [Mutating with User Defined Function (UDF) methods](gotchas.html#gotchas-udf-mutation)
    for more information.
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要对组块进行原地操作。组块应被视为不可变的，对组块的更改可能会产生意想不到的结果。有关更多信息，请参阅[使用用户定义函数（UDF）方法进行变异](gotchas.html#gotchas-udf-mutation)。
- en: (Optionally) operates on all columns of the entire group chunk at once. If this
    is supported, a fast path is used starting from the *second* chunk.
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）一次操作整个组块的所有列。如果支持此操作，将从*第二*块开始使用快速路径。
- en: Note
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Transforming by supplying `transform` with a UDF is often less performant than
    using the built-in methods on GroupBy. Consider breaking up a complex operation
    into a chain of operations that utilize the built-in methods.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`transform`提供UDF进行转换通常不如在GroupBy上使用内置方法高效。考虑将复杂操作分解为一系列利用内置方法的操作链。
- en: All of the examples in this section can be made more performant by calling built-in
    methods instead of using UDFs. See [below for examples](#groupby-efficient-transforms).
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都可以通过调用内置方法而不是使用UDFs来提高性能。请参见[下面的示例](#groupby-efficient-transforms)。
- en: 'Changed in version 2.0.0: When using `.transform` on a grouped DataFrame and
    the transformation function returns a DataFrame, pandas now aligns the result’s
    index with the input’s index. You can call `.to_numpy()` within the transformation
    function to avoid alignment.'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.0开始更改：当在分组的DataFrame上使用`.transform`并且转换函数返回一个DataFrame时，pandas现在会将结果的索引与输入的索引对齐。您可以在转换函数中调用`.to_numpy()`以避免对齐。
- en: Similar to [The aggregate() method](#groupby-aggregate-agg), the resulting dtype
    will reflect that of the transformation function. If the results from different
    groups have different dtypes, then a common dtype will be determined in the same
    way as `DataFrame` construction.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 与[聚合方法](#groupby-aggregate-agg)类似，结果的数据类型将反映转换函数的数据类型。如果不同组的结果具有不同的数据类型，则将以与
    `DataFrame` 构造相同的方式确定公共数据类型。
- en: 'Suppose we wish to standardize the data within each group:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望在每个组内标准化数据：
- en: '[PRE216]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'We would expect the result to now have mean 0 and standard deviation 1 within
    each group (up to floating-point error), which we can easily check:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望结果现在在每个组内具有均值为 0 和标准差为 1（直到浮点误差为止），我们可以轻松检查：
- en: '[PRE217]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: We can also visually compare the original and transformed data sets.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以直观地比较原始数据集和转换后的数据集。
- en: '[PRE218]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
  id: totrans-792
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_transform_plot.png](../Images/69f287bde1e1c618b8c84fdbd3fe04dd.png)'
- en: Transformation functions that have lower dimension outputs are broadcast to
    match the shape of the input array.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 具有较低维度输出的转换函数将被广播以匹配输入数组的形状。
- en: '[PRE219]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Another common data transform is to replace missing data with the group mean.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的数据转换是用组平均值替换缺失数据。
- en: '[PRE220]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: We can verify that the group means have not changed in the transformed data,
    and that the transformed data contains no NAs.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证转换后的数据中组平均值未发生变化，并且转换后的数据不包含任何 NAs。
- en: '[PRE221]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: As mentioned in the note above, each of the examples in this section can be
    computed more efficiently using built-in methods. In the code below, the inefficient
    way using a UDF is commented out and the faster alternative appears below.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的注释中所提到的，本节中的每个示例都可以使用内置方法更有效地计算。在下面的代码中，使用 UDF 的低效方法被注释掉，更快的替代方法出现在下面。
- en: '[PRE222]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '### Window and resample operations'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '### 窗口和重采样操作'
- en: It is possible to use `resample()`, `expanding()` and `rolling()` as methods
    on groupbys.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `resample()`、`expanding()` 和 `rolling()` 作为 groupby 的方法。
- en: The example below will apply the `rolling()` method on the samples of the column
    B, based on the groups of column A.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将在列 B 的样本上应用 `rolling()` 方法，基于列 A 的分组。
- en: '[PRE223]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: The `expanding()` method will accumulate a given operation (`sum()` in the example)
    for all the members of each particular group.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '`expanding()` 方法将为每个特定组的所有成员累积给定操作（在示例中为 `sum()`）。'
- en: '[PRE224]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Suppose you want to use the `resample()` method to get a daily frequency in
    each group of your dataframe, and wish to complete the missing values with the
    `ffill()` method.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要在数据框的每个组中使用 `resample()` 方法获得每日频率，并希望使用 `ffill()` 方法填充缺失值。
- en: '[PRE225]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '## Filtration'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '## 过滤'
- en: A filtration is a GroupBy operation that subsets the original grouping object.
    It may either filter out entire groups, part of groups, or both. Filtrations return
    a filtered version of the calling object, including the grouping columns when
    provided. In the following example, `class` is included in the result.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是一个 GroupBy 操作，它对原始分组对象进行子集化。它可以过滤掉整个组、部分组或两者。过滤返回调用对象的过滤版本，包括提供时的分组列。在以下示例中，`class`
    包含在结果中。
- en: '[PRE226]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Note
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike aggregations, filtrations do not add the group keys to the index of the
    result. Because of this, passing `as_index=False` or `sort=True` will not affect
    these methods.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 与聚合不同，过滤不会将组键添加到结果的索引中。因此，传递 `as_index=False` 或 `sort=True` 不会影响这些方法。
- en: Filtrations will respect subsetting the columns of the GroupBy object.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤将尊重对 GroupBy 对象列的子集。
- en: '[PRE227]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Built-in filtrations
  id: totrans-816
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置过滤器
- en: The following methods on GroupBy act as filtrations. All these methods have
    an efficient, GroupBy-specific, implementation.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy 上的以下方法作为过滤器。所有这些方法都有一个高效的、特定于 GroupBy 的实现。
- en: '| Method | Description |'
  id: totrans-818
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-819
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | Select the top row(s) of each group
    |'
  id: totrans-820
  prefs: []
  type: TYPE_TB
  zh: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | 选择每个组的前几行 |'
- en: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | Select the nth row(s) of each group
    |'
  id: totrans-821
  prefs: []
  type: TYPE_TB
  zh: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | 选择每个组的第 n 行 |'
- en: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | Select the bottom row(s) of each
    group |'
  id: totrans-822
  prefs: []
  type: TYPE_TB
  zh: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | 选择每个组的底部行 |'
- en: Users can also use transformations along with Boolean indexing to construct
    complex filtrations within groups. For example, suppose we are given groups of
    products and their volumes, and we wish to subset the data to only the largest
    products capturing no more than 90% of the total volume within each group.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以在布尔索引中使用转换来构建组内的复杂过滤。例如，假设我们有产品和其体积的组，并且希望将数据子集限制为每个组中总体积不超过90%的最大产品。
- en: '[PRE228]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: The `filter` method
  id: totrans-825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`filter`方法'
- en: Note
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Filtering by supplying `filter` with a User-Defined Function (UDF) is often
    less performant than using the built-in methods on GroupBy. Consider breaking
    up a complex operation into a chain of operations that utilize the built-in methods.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`filter`提供用户定义函数（UDF）进行过滤通常不如使用GroupBy上的内置方法高效。考虑将复杂操作分解为一系列利用内置方法的操作链。
- en: The `filter` method takes a User-Defined Function (UDF) that, when applied to
    an entire group, returns either `True` or `False`. The result of the `filter`
    method is then the subset of groups for which the UDF returned `True`.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`方法接受一个用户定义函数（UDF），当应用于整个组时，返回`True`或`False`。然后，`filter`方法的结果是UDF返回`True`的组的子集。'
- en: Suppose we want to take only elements that belong to groups with a group sum
    greater than 2.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想获取属于组总和大于2的元素。
- en: '[PRE229]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Another useful operation is filtering out elements that belong to groups with
    only a couple members.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的操作是过滤出只有几个成员的组中的元素。
- en: '[PRE230]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Alternatively, instead of dropping the offending groups, we can return a like-indexed
    objects where the groups that do not pass the filter are filled with NaNs.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以返回一个类似索引对象，其中未通过过滤器的组填充为NaN。
- en: '[PRE231]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: For DataFrames with multiple columns, filters should explicitly specify a column
    as the filter criterion.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多列的数据框，过滤器应明确指定列作为过滤条件。
- en: '[PRE232]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Built-in filtrations
  id: totrans-837
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置过滤
- en: The following methods on GroupBy act as filtrations. All these methods have
    an efficient, GroupBy-specific, implementation.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: GroupBy上的以下方法充当过滤器。所有这些方法都有高效的、GroupBy特定的实现。
- en: '| Method | Description |'
  id: totrans-839
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-840
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | Select the top row(s) of each group
    |'
  id: totrans-841
  prefs: []
  type: TYPE_TB
  zh: '| [`head()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head") | 选择每个组的顶部行 |'
- en: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | Select the nth row(s) of each group
    |'
  id: totrans-842
  prefs: []
  type: TYPE_TB
  zh: '| [`nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | 选择每个组的第n行 |'
- en: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | Select the bottom row(s) of each
    group |'
  id: totrans-843
  prefs: []
  type: TYPE_TB
  zh: '| [`tail()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail") | 选择每个组的底部行 |'
- en: Users can also use transformations along with Boolean indexing to construct
    complex filtrations within groups. For example, suppose we are given groups of
    products and their volumes, and we wish to subset the data to only the largest
    products capturing no more than 90% of the total volume within each group.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以在布尔索引中使用转换来构建组内的复杂过滤。例如，假设我们有产品和其体积的组，并且希望将数据子集限制为每个组中总体积不超过90%的最大产品。
- en: '[PRE233]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: The `filter` method
  id: totrans-846
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`filter`方法'
- en: Note
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Filtering by supplying `filter` with a User-Defined Function (UDF) is often
    less performant than using the built-in methods on GroupBy. Consider breaking
    up a complex operation into a chain of operations that utilize the built-in methods.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`filter`提供用户定义函数（UDF）进行过滤通常不如使用GroupBy上的内置方法高效。考虑将复杂操作分解为一系列利用内置方法的操作链。
- en: The `filter` method takes a User-Defined Function (UDF) that, when applied to
    an entire group, returns either `True` or `False`. The result of the `filter`
    method is then the subset of groups for which the UDF returned `True`.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`方法接受一个用户定义函数（UDF），当应用于整个组时，返回`True`或`False`。`filter`方法的结果是 UDF 返回`True`的组的子集。'
- en: Suppose we want to take only elements that belong to groups with a group sum
    greater than 2.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们只想获取属于组总和大于 2 的元素。
- en: '[PRE234]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Another useful operation is filtering out elements that belong to groups with
    only a couple members.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的操作是过滤出仅属于几个成员组的元素。
- en: '[PRE235]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Alternatively, instead of dropping the offending groups, we can return a like-indexed
    objects where the groups that do not pass the filter are filled with NaNs.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，与其删除违规组，我们可以返回一个类似索引的对象，其中未通过筛选器的组将填充为 NaN。
- en: '[PRE236]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: For DataFrames with multiple columns, filters should explicitly specify a column
    as the filter criterion.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多列的 DataFrame，筛选器应明确指定列作为筛选条件。
- en: '[PRE237]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '## Flexible `apply`'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '## 灵活的`apply`'
- en: Some operations on the grouped data might not fit into the aggregation, transformation,
    or filtration categories. For these, you can use the `apply` function.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分组数据的某些操作可能不适合聚合、转换或筛选类别。对于这些情况，可以使用`apply`函数。
- en: Warning
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`apply` has to try to infer from the result whether it should act as a reducer,
    transformer, *or* filter, depending on exactly what is passed to it. Thus the
    grouped column(s) may be included in the output or not. While it tries to intelligently
    guess how to behave, it can sometimes guess wrong.'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`必须尝试从结果推断它应该作为规约器、转换器*或*过滤器进行操作，具体取决于传递给它的内容。因此，分组列可能包含在输出中，也可能不包含在输出中。虽然它试图智能猜测如何行事，但有时可能猜错。'
- en: Note
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All of the examples in this section can be more reliably, and more efficiently,
    computed using other pandas functionality.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都可以使用其他 pandas 功能更可靠、更高效地计算。
- en: '[PRE238]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'The dimension of the returned result can also change:'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果的维度也可能会改变：
- en: '[PRE239]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '`apply` on a Series can operate on a returned value from the applied function
    that is itself a series, and possibly upcast the result to a DataFrame:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Series 上的`apply`可以操作来自应用函数的返回值，该返回值本身是一个 series，并且可能将结果上转换为 DataFrame：
- en: '[PRE240]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Similar to [The aggregate() method](#groupby-aggregate-agg), the resulting dtype
    will reflect that of the apply function. If the results from different groups
    have different dtypes, then a common dtype will be determined in the same way
    as `DataFrame` construction.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 [aggregate() 方法](#groupby-aggregate-agg)，结果 dtype 将反映应用函数的 dtype。如果不同组的结果具有不同的
    dtype，则将以与`DataFrame`构造相同的方式确定通用 dtype。
- en: Control grouped column(s) placement with `group_keys`
  id: totrans-870
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`group_keys`控制分组列的放置
- en: To control whether the grouped column(s) are included in the indices, you can
    use the argument `group_keys` which defaults to `True`. Compare
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制是否在索引中包含分组列，可以使用默认为`True`的`group_keys`参数。对比
- en: '[PRE241]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: with
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: '[PRE242]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Control grouped column(s) placement with `group_keys`
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`group_keys`控制分组列的放置
- en: To control whether the grouped column(s) are included in the indices, you can
    use the argument `group_keys` which defaults to `True`. Compare
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制是否在索引中包含分组列，可以使用默认为`True`的`group_keys`参数。对比
- en: '[PRE243]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: with
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: '[PRE244]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Numba Accelerated Routines
  id: totrans-880
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Numba 加速例程
- en: New in version 1.1.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.1 新增。
- en: If [Numba](https://numba.pydata.org/) is installed as an optional dependency,
    the `transform` and `aggregate` methods support `engine='numba'` and `engine_kwargs`
    arguments. See [enhancing performance with Numba](enhancingperf.html#enhancingperf-numba)
    for general usage of the arguments and performance considerations.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 [Numba](https://numba.pydata.org/) 安装为可选依赖项，则`transform`和`aggregate`方法支持`engine='numba'`和`engine_kwargs`参数。请参阅
    [使用 Numba 提升性能](enhancingperf.html#enhancingperf-numba) 了解参数的一般用法和性能考虑。
- en: The function signature must start with `values, index` **exactly** as the data
    belonging to each group will be passed into `values`, and the group index will
    be passed into `index`.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 函数签名必须以`values, index` **完全**开头，因为属于每个组的数据将被传递给`values`，分组索引将被传递给`index`。
- en: Warning
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: When using `engine='numba'`, there will be no “fall back” behavior internally.
    The group data and group index will be passed as NumPy arrays to the JITed user
    defined function, and no alternative execution attempts will be tried.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`engine='numba'`时，内部不会有“回退”行为。分组数据和分组索引将作为 NumPy 数组传递给 JITed 用户定义的函数，不会尝试任何替代执行。
- en: Other useful features
  id: totrans-886
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他有用的功能
- en: Exclusion of non-numeric columns
  id: totrans-887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除非数值列
- en: 'Again consider the example DataFrame we’ve been looking at:'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑我们一直在看的示例DataFrame：
- en: '[PRE245]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Suppose we wish to compute the standard deviation grouped by the `A` column.
    There is a slight problem, namely that we don’t care about the data in column
    `B` because it is not numeric. You can avoid non-numeric columns by specifying
    `numeric_only=True`:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望按`A`列分组计算标准差。有一个小问题，即我们不关心列`B`中的数据，因为它不是数值型的。您可以通过指定`numeric_only=True`来避免非数值列：
- en: '[PRE246]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Note that `df.groupby('A').colname.std().` is more efficient than `df.groupby('A').std().colname`.
    So if the result of an aggregation function is only needed over one column (here
    `colname`), it may be filtered *before* applying the aggregation function.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`df.groupby('A').colname.std().`比`df.groupby('A').std().colname`更有效。因此，如果聚合函数的结果只需要在一列（这里是`colname`）上，可以在应用聚合函数*之前*对其进行过滤。
- en: '[PRE247]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '### Handling of (un)observed Categorical values'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理（未）观察到的分类值'
- en: When using a `Categorical` grouper (as a single grouper, or as part of multiple
    groupers), the `observed` keyword controls whether to return a cartesian product
    of all possible groupers values (`observed=False`) or only those that are observed
    groupers (`observed=True`).
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`Categorical`分组器（作为单个分组器或作为多个分组器的一部分）时，`observed`关键字控制是否返回所有可能的分组器值的笛卡尔积（`observed=False`）或仅返回观察到的分组器值（`observed=True`）。
- en: 'Show all values:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有值：
- en: '[PRE248]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'Show only the observed values:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示观察值：
- en: '[PRE249]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: The returned dtype of the grouped will *always* include *all* of the categories
    that were grouped.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 分组的返回dtype将*始终*包括*所有*被分组的类别。
- en: '[PRE250]  ### NA group handling'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE250]  ### NA组处理'
- en: By `NA`, we are referring to any `NA` values, including [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), `NaN`, `NaT`, and `None`. If there are any `NA` values in the grouping
    key, by default these will be excluded. In other words, any “`NA` group” will
    be dropped. You can include NA groups by specifying `dropna=False`.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`NA`，我们指的是任何`NA`值，包括[`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")、`NaN`、`NaT`和`None`。如果在分组键中存在任何`NA`值，默认情况下这些值将被排除。换句话说，任何“`NA`组”将被删除。您可以通过指定`dropna=False`来包含NA组。
- en: '[PRE251]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Grouping with ordered factors
  id: totrans-904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用有序因子进行分组
- en: Categorical variables represented as instances of pandas’s `Categorical` class
    can be used as group keys. If so, the order of the levels will be preserved. When
    `observed=False` and `sort=False`, any unobserved categories will be at the end
    of the result in order.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 以pandas的`Categorical`类的实例表示的分类变量可以用作分组键。如果是这样，级别的顺序将被保留。当`observed=False`和`sort=False`时，任何未观察到的类别将按顺序排在结果的末尾。
- en: '[PRE252]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '### Grouping with a grouper specification'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用分组器规范进行分组'
- en: You may need to specify a bit more data to properly group. You can use the `pd.Grouper`
    to provide this local control.
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要指定更多数据以正确分组。您可以使用`pd.Grouper`提供此本地控制。
- en: '[PRE253]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Groupby a specific column with the desired frequency. This is like resampling.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所需频率按特定列分组。这类似于重新取样。
- en: '[PRE254]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: When `freq` is specified, the object returned by `pd.Grouper` will be an instance
    of `pandas.api.typing.TimeGrouper`. When there is a column and index with the
    same name, you can use `key` to group by the column and `level` to group by the
    index.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定`freq`时，`pd.Grouper`返回的对象将是`pandas.api.typing.TimeGrouper`的实例。当存在具有相同名称的列和索引时，您可以使用`key`按列分组，使用`level`按索引分组。
- en: '[PRE255]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Taking the first rows of each group
  id: totrans-914
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取每个组的前几行
- en: 'Just like for a DataFrame or Series you can call head and tail on a groupby:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对DataFrame或Series调用head和tail一样，你可以在groupby上调用它们：
- en: '[PRE256]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: This shows the first or last n rows from each group.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示每个组的前n行或最后n行。
- en: '### Taking the nth row of each group'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '### 获取每个组的第n行'
- en: To select the nth item from each group, use [`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") or [`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth"). Arguments supplied can be any integer,
    lists of integers, slices, or lists of slices; see below for examples. When the
    nth element of a group does not exist an error is *not* raised; instead no corresponding
    rows are returned.
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 要从每个组中选择第 n 个项目，请使用 [`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") 或 [`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth")。提供的参数可以是任何整数、整数列表、切片或切片列表；请参见下面的示例。当组的第
    n 个元素不存在时，*不* 会引发错误；相反，不会返回相应的行。
- en: In general this operation acts as a filtration. In certain cases it will also
    return one row per group, making it also a reduction. However because in general
    it can return zero or multiple rows per group, pandas treats it as a filtration
    in all cases.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，此操作作为过滤器。在某些情况下，它还会返回每个组的一行，因此也是一种缩减。但是，由于一般情况下它可以返回零个或多个组的行，因此 pandas
    在所有情况下都将其视为过滤器。
- en: '[PRE257]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: If the nth element of a group does not exist, then no corresponding row is included
    in the result. In particular, if the specified `n` is larger than any group, the
    result will be an empty DataFrame.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组的第 n 个元素不存在，则结果中不包括相应的行。特别是，如果指定的 `n` 大于任何组，结果将是一个空的 DataFrame。
- en: '[PRE258]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'If you want to select the nth not-null item, use the `dropna` kwarg. For a
    DataFrame this should be either `''any''` or `''all''` just like you would pass
    to dropna:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要选择第 n 个非空项目，请使用 `dropna` kwarg。对于 DataFrame，这应该是 `'any'` 或 `'all'`，就像您传递给
    dropna 一样：
- en: '[PRE259]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: You can also select multiple rows from each group by specifying multiple nth
    values as a list of ints.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将多个 nth 值指定为整数列表来从每个组中选择多行。
- en: '[PRE260]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: You may also use slices or lists of slices.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用切片或切片列表。
- en: '[PRE261]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Enumerate group items
  id: totrans-930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举组项目
- en: 'To see the order in which each row appears within its group, use the `cumcount`
    method:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每行在其组内出现的顺序，使用 `cumcount` 方法：
- en: '[PRE262]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '### Enumerate groups'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '### 枚举分组'
- en: To see the ordering of the groups (as opposed to the order of rows within a
    group given by `cumcount`) you can use [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup").
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看组的顺序（而不是由 `cumcount` 给出的组内行的顺序），可以使用 [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")。
- en: Note that the numbers given to the groups match the order in which the groups
    would be seen when iterating over the groupby object, not the order they are first
    observed.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，给定给组的数字与在迭代 groupby 对象时看到组的顺序相匹配，而不是它们首次观察到的顺序。
- en: '[PRE263]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Plotting
  id: totrans-937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图
- en: Groupby also works with some plotting methods. In this case, suppose we suspect
    that the values in column 1 are 3 times higher on average in group “B”.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: Groupby 也适用于一些绘图方法。在这种情况下，假设我们怀疑第一列的值在“B”组中平均高出3倍。
- en: '[PRE264]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'We can easily visualize this with a boxplot:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过箱线图轻松可视化这一点：
- en: '[PRE265]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
  id: totrans-942
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
- en: The result of calling `boxplot` is a dictionary whose keys are the values of
    our grouping column `g` (“A” and “B”). The values of the resulting dictionary
    can be controlled by the `return_type` keyword of `boxplot`. See the [visualization
    documentation](visualization.html#visualization-box) for more.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `boxplot` 的结果是一个字典，其键是我们分组列 `g` 的值（“A” 和 “B”）。结果字典的值可以通过 `boxplot` 的 `return_type`
    关键字进行控制。更多信息请参见[可视化文档](visualization.html#visualization-box)。
- en: Warning
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: For historical reasons, `df.groupby("g").boxplot()` is not equivalent to `df.boxplot(by="g")`.
    See [here](visualization.html#visualization-box-return) for an explanation.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，`df.groupby("g").boxplot()` 与 `df.boxplot(by="g")` 不等效。请参见[这里](visualization.html#visualization-box-return)进行解释。
- en: '### Piping function calls'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '### 管道函数调用'
- en: Similar to the functionality provided by `DataFrame` and `Series`, functions
    that take `GroupBy` objects can be chained together using a `pipe` method to allow
    for a cleaner, more readable syntax. To read about `.pipe` in general terms, see
    [here](basics.html#basics-pipe).
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `DataFrame` 和 `Series` 提供的功能类似，可以使用 `pipe` 方法将接受 `GroupBy` 对象的函数链接在一起，以提供更清晰、更可读的语法。要阅读有关
    `.pipe` 的一般信息，请参阅[此处](basics.html#basics-pipe)。
- en: Combining `.groupby` and `.pipe` is often useful when you need to reuse GroupBy
    objects.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要重用 GroupBy 对象时，组合 `.groupby` 和 `.pipe` 通常很有用。
- en: 'As an example, imagine having a DataFrame with columns for stores, products,
    revenue and quantity sold. We’d like to do a groupwise calculation of *prices*
    (i.e. revenue/quantity) per store and per product. We could do this in a multi-step
    operation, but expressing it in terms of piping can make the code more readable.
    First we set the data:'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设有一个 DataFrame，其中包含商店、产品、收入和销售数量的列。我们想要对每个商店和每个产品进行分组计算*价格*（即收入/数量）。我们可以通过多步操作来实现这一点，但是以管道的方式表达可以使代码更易读。首先设置数据：
- en: '[PRE266]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: We now find the prices per store/product.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们找到了每个商店/产品的价格。
- en: '[PRE267]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Piping can also be expressive when you want to deliver a grouped object to
    some arbitrary function, for example:'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望将分组对象传递给某个任意函数时，管道也可以很有表现力，例如：
- en: '[PRE268]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Here `mean` takes a GroupBy object and finds the mean of the Revenue and Quantity
    columns respectively for each Store-Product combination. The `mean` function can
    be any function that takes in a GroupBy object; the `.pipe` will pass the GroupBy
    object as a parameter into the function you specify.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`mean` 接受一个 GroupBy 对象，并分别为每个商店/产品组合找到 Revenue 和 Quantity 列的均值。`mean` 函数可以是接受
    GroupBy 对象的任何函数；`.pipe` 将把 GroupBy 对象作为参数传递给您指定的函数。
- en: Exclusion of non-numeric columns
  id: totrans-956
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除非数值列
- en: 'Again consider the example DataFrame we’ve been looking at:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑我们一直在查看的示例 DataFrame：
- en: '[PRE269]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Suppose we wish to compute the standard deviation grouped by the `A` column.
    There is a slight problem, namely that we don’t care about the data in column
    `B` because it is not numeric. You can avoid non-numeric columns by specifying
    `numeric_only=True`:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望按列 `A` 进行分组计算标准差。有一个轻微的问题，即我们不关心列 `B` 中的数据，因为它不是数值数据。您可以通过指定 `numeric_only=True`
    来避免非数值列：
- en: '[PRE270]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Note that `df.groupby('A').colname.std().` is more efficient than `df.groupby('A').std().colname`.
    So if the result of an aggregation function is only needed over one column (here
    `colname`), it may be filtered *before* applying the aggregation function.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`df.groupby('A').colname.std().` 比 `df.groupby('A').std().colname` 更高效。因此，如果聚合函数的结果仅需要在一列（此处为
    `colname`）上（在应用聚合函数之前）进行过滤，那么它可能比较*好*。
- en: '[PRE271]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '### Handling of (un)observed Categorical values'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '### 处理（未）观察到的分类值'
- en: When using a `Categorical` grouper (as a single grouper, or as part of multiple
    groupers), the `observed` keyword controls whether to return a cartesian product
    of all possible groupers values (`observed=False`) or only those that are observed
    groupers (`observed=True`).
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `Categorical` 分组器（作为单个分组器或作为多个分组器的一部分）时，`observed` 关键字控制是否返回所有可能分组器值的笛卡尔积（`observed=False`），或仅返回观察到的分组器值（`observed=True`）。
- en: 'Show all values:'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 显示所有值：
- en: '[PRE272]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: 'Show only the observed values:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 仅显示观察到的值：
- en: '[PRE273]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: The returned dtype of the grouped will *always* include *all* of the categories
    that were grouped.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 分组的返回 dtype 将始终包括所有分组的类别。
- en: '[PRE274]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '### NA group handling'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '### NA 组处理'
- en: By `NA`, we are referring to any `NA` values, including [`NA`](../reference/api/pandas.NA.html#pandas.NA
    "pandas.NA"), `NaN`, `NaT`, and `None`. If there are any `NA` values in the grouping
    key, by default these will be excluded. In other words, any “`NA` group” will
    be dropped. You can include NA groups by specifying `dropna=False`.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `NA`，我们指的是任何 `NA` 值，包括 [`NA`](../reference/api/pandas.NA.html#pandas.NA "pandas.NA")、`NaN`、`NaT`
    和 `None`。如果在分组键中有任何 `NA` 值，默认情况下这些值将被排除。换句话说，任何“`NA` 组”都将被删除。您可以通过指定 `dropna=False`
    来包含 NA 组。
- en: '[PRE275]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Grouping with ordered factors
  id: totrans-974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用有序因子分组
- en: Categorical variables represented as instances of pandas’s `Categorical` class
    can be used as group keys. If so, the order of the levels will be preserved. When
    `observed=False` and `sort=False`, any unobserved categories will be at the end
    of the result in order.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 表示为 pandas 的 `Categorical` 类实例的分类变量可以用作分组键。如果是这样，则将保留级别的顺序。当 `observed=False`
    和 `sort=False` 时，任何未观察到的类别将以相应顺序的结果的末尾。
- en: '[PRE276]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '### Grouping with a grouper specification'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用分组器规范进行分组'
- en: You may need to specify a bit more data to properly group. You can use the `pd.Grouper`
    to provide this local control.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要指定更多数据以正确分组。您可以使用`pd.Grouper`来提供这种局部控制。
- en: '[PRE277]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Groupby a specific column with the desired frequency. This is like resampling.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 按照特定列和所需的频率进行分组。这类似于重采样。
- en: '[PRE278]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: When `freq` is specified, the object returned by `pd.Grouper` will be an instance
    of `pandas.api.typing.TimeGrouper`. When there is a column and index with the
    same name, you can use `key` to group by the column and `level` to group by the
    index.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定了`freq`时，`pd.Grouper`返回的对象将是`pandas.api.typing.TimeGrouper`的实例。当列和索引具有相同的名称时，您可以使用`key`按列进行分组，并使用`level`按索引进行分组。
- en: '[PRE279]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Taking the first rows of each group
  id: totrans-984
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取每个组的第一行
- en: 'Just like for a DataFrame or Series you can call head and tail on a groupby:'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 就像对DataFrame或Series一样，您可以在groupby上调用head和tail：
- en: '[PRE280]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: This shows the first or last n rows from each group.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了每个组的前n行或最后n行。
- en: '### Taking the nth row of each group'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '### 获取每个组的第n行'
- en: To select the nth item from each group, use [`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") or [`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth"). Arguments supplied can be any integer,
    lists of integers, slices, or lists of slices; see below for examples. When the
    nth element of a group does not exist an error is *not* raised; instead no corresponding
    rows are returned.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 要从每个组中选择第 n 个项目，请使用[`DataFrameGroupBy.nth()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth")或[`SeriesGroupBy.nth()`](../reference/api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth")。提供的参数可以是任何整数、整数列表、切片或切片列表；请参阅下面的示例。如果组的第
    n 个元素不存在，则不会引发错误；而是不返回相应的行。
- en: In general this operation acts as a filtration. In certain cases it will also
    return one row per group, making it also a reduction. However because in general
    it can return zero or multiple rows per group, pandas treats it as a filtration
    in all cases.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这个操作 acts as a filtration。在某些情况下，它还会返回每个组的一行，使其也成为一个减少。但是，因为一般来说它可以返回零个或多个每组的行，所以pandas在所有情况下都将其视为过滤器。
- en: '[PRE281]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: If the nth element of a group does not exist, then no corresponding row is included
    in the result. In particular, if the specified `n` is larger than any group, the
    result will be an empty DataFrame.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组的第 n 个元素不存在，则结果中不包括相应的行。特别地，如果指定的`n`大于任何组，结果将是一个空的DataFrame。
- en: '[PRE282]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'If you want to select the nth not-null item, use the `dropna` kwarg. For a
    DataFrame this should be either `''any''` or `''all''` just like you would pass
    to dropna:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要选择第n个非空项目，请使用`dropna` kwarg。对于DataFrame，这应该是`'any'`或`'all'`，就像您要传递给dropna的一样：
- en: '[PRE283]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: You can also select multiple rows from each group by specifying multiple nth
    values as a list of ints.
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过指定多个 nth 值作为整数列表来从每个组中选择多个行。
- en: '[PRE284]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: You may also use slices or lists of slices.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用切片或切片列表。
- en: '[PRE285]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Enumerate group items
  id: totrans-1000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举组项目
- en: 'To see the order in which each row appears within its group, use the `cumcount`
    method:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每行出现在其组内的顺序，请使用`cumcount`方法：
- en: '[PRE286]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '### Enumerate groups'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '### 枚举组'
- en: To see the ordering of the groups (as opposed to the order of rows within a
    group given by `cumcount`) you can use [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup").
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看组的排序顺序（而不是由`cumcount`给出的组内行的顺序），可以使用[`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")。
- en: Note that the numbers given to the groups match the order in which the groups
    would be seen when iterating over the groupby object, not the order they are first
    observed.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，给定组的数字与在迭代groupby对象时看到组的顺序相匹配，而不是它们首次观察到的顺序。
- en: '[PRE287]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Plotting
  id: totrans-1007
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图
- en: Groupby also works with some plotting methods. In this case, suppose we suspect
    that the values in column 1 are 3 times higher on average in group “B”.
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: Groupby 也适用于一些绘图方法。在这种情况下，假设我们怀疑列1中的值在组“B”中平均高出3倍。
- en: '[PRE288]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: 'We can easily visualize this with a boxplot:'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用箱线图轻松可视化这个过程：
- en: '[PRE289]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
  id: totrans-1012
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/groupby_boxplot.png](../Images/a66f2e7e2f4e8b2ceab43cacec7614f1.png)'
- en: The result of calling `boxplot` is a dictionary whose keys are the values of
    our grouping column `g` (“A” and “B”). The values of the resulting dictionary
    can be controlled by the `return_type` keyword of `boxplot`. See the [visualization
    documentation](visualization.html#visualization-box) for more.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `boxplot` 的结果是一个字典，其键是我们的分组列 `g` 的值（“A” 和 “B”）。结果字典的值可以通过 `boxplot` 的 `return_type`
    关键字控制。有关更多信息，请参阅[可视化文档](visualization.html#visualization-box)。
- en: Warning
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: For historical reasons, `df.groupby("g").boxplot()` is not equivalent to `df.boxplot(by="g")`.
    See [here](visualization.html#visualization-box-return) for an explanation.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因，`df.groupby("g").boxplot()` 不等同于 `df.boxplot(by="g")`。请参见[此处](visualization.html#visualization-box-return)进行解释。
- en: '### Piping function calls'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '### 管道函数调用'
- en: Similar to the functionality provided by `DataFrame` and `Series`, functions
    that take `GroupBy` objects can be chained together using a `pipe` method to allow
    for a cleaner, more readable syntax. To read about `.pipe` in general terms, see
    [here](basics.html#basics-pipe).
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `DataFrame` 和 `Series` 提供的功能类似，接受 `GroupBy` 对象的函数可以使用 `pipe` 方法链接在一起，以实现更清晰、更易读的语法。要了解一般术语中的
    `.pipe`，请参阅[此处](basics.html#basics-pipe)。
- en: Combining `.groupby` and `.pipe` is often useful when you need to reuse GroupBy
    objects.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要重用 GroupBy 对象时，结合 `.groupby` 和 `.pipe` 通常很有用。
- en: 'As an example, imagine having a DataFrame with columns for stores, products,
    revenue and quantity sold. We’d like to do a groupwise calculation of *prices*
    (i.e. revenue/quantity) per store and per product. We could do this in a multi-step
    operation, but expressing it in terms of piping can make the code more readable.
    First we set the data:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下有一个 DataFrame，其中包含商店、产品、收入和销售数量的列。我们希望对每个店铺和每个产品进行分组计算*价格*（即收入/数量）。我们可以通过多步操作来完成此操作，但是以管道的方式表达可以使代码更易读。首先我们设置数据：
- en: '[PRE290]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: We now find the prices per store/product.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在找到了每个店铺/产品的价格。
- en: '[PRE291]'
  id: totrans-1022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'Piping can also be expressive when you want to deliver a grouped object to
    some arbitrary function, for example:'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要将分组对象传递给某个任意函数时，管道也可以很表达式，例如：
- en: '[PRE292]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: Here `mean` takes a GroupBy object and finds the mean of the Revenue and Quantity
    columns respectively for each Store-Product combination. The `mean` function can
    be any function that takes in a GroupBy object; the `.pipe` will pass the GroupBy
    object as a parameter into the function you specify.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `mean` 接受一个 GroupBy 对象，并分别为每个 Store-Product 组合找到 Revenue 和 Quantity 列的均值。`mean`
    函数可以是任何接受 GroupBy 对象的函数；`.pipe` 将把 GroupBy 对象作为参数传递到您指定的函数中。
- en: Examples
  id: totrans-1026
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '### Multi-column factorization'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多列因子化'
- en: By using [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup"), we can extract information about
    the groups in a way similar to [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") (as described further in the [reshaping API](reshaping.html#reshaping-factorize))
    but which applies naturally to multiple columns of mixed type and different sources.
    This can be useful as an intermediate categorical-like step in processing, when
    the relationships between the group rows are more important than their content,
    or as input to an algorithm which only accepts the integer encoding. (For more
    information about support in pandas for full categorical data, see the [Categorical
    introduction](categorical.html#categorical) and the [API documentation](../reference/arrays.html#api-arrays-categorical).)
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")，我们可以提取有关组的信息，方式类似于 [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize")（在[重塑 API](reshaping.html#reshaping-factorize)中进一步描述），但它自然适用于不同类型和不同来源的多列。在处理中，当组行之间的关系比它们的内容更重要时，或者作为仅接受整数编码的算法的输入时，这可能是一个中间的类别步骤。
    （有关 pandas 对完整分类数据的支持的更多信息，请参见[分类介绍](categorical.html#categorical)和[API 文档](../reference/arrays.html#api-arrays-categorical)。）
- en: '[PRE293]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: Groupby by indexer to ‘resample’ data
  id: totrans-1030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按索引器分组以“重新采样”数据
- en: Resampling produces new hypothetical samples (resamples) from already existing
    observed data or from a model that generates data. These new samples are similar
    to the pre-existing samples.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 重新采样会从已经存在的观察数据或生成数据的模型中产生新的假设样本（重新采样）。这些新样本与预先存在的样本类似。
- en: In order for resample to work on indices that are non-datetimelike, the following
    procedure can be utilized.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使重采样适用于非日期时间索引，可以使用以下过程。
- en: In the following examples, **df.index // 5** returns an integer array which
    is used to determine what gets selected for the groupby operation.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，**df.index // 5** 返回一个整数数组，用于确定哪些内容被选中进行分组操作。
- en: Note
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The example below shows how we can downsample by consolidation of samples into
    fewer ones. Here by using **df.index // 5**, we are aggregating the samples in
    bins. By applying **std()** function, we aggregate the information contained in
    many samples into a small subset of values which is their standard deviation thereby
    reducing the number of samples.
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了如何通过将样本合并为较少的样本来进行降采样。在这里，通过使用**df.index // 5**，我们将样本聚合到箱中。通过应用**std()**函数，我们将许多样本中包含的信息聚合成一小部分值，即它们的标准差，从而减少样本数量。
- en: '[PRE294]'
  id: totrans-1036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Returning a Series to propagate names
  id: totrans-1037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回一个 Series 以传播名称
- en: 'Group DataFrame columns, compute a set of metrics and return a named Series.
    The Series name is used as the name for the column index. This is especially useful
    in conjunction with reshaping operations such as stacking, in which the column
    index name will be used as the name of the inserted column:'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 分组 DataFrame 列，计算一组指标并返回一个命名 Series。Series 名称用作列索引的名称。这在与重塑操作（如堆叠）结合使用时特别有用，其中列索引名称将用作插入列的名称：
- en: '[PRE295]'
  id: totrans-1039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '### Multi-column factorization'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '### 多列因子化'
- en: By using [`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup"), we can extract information about
    the groups in a way similar to [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize") (as described further in the [reshaping API](reshaping.html#reshaping-factorize))
    but which applies naturally to multiple columns of mixed type and different sources.
    This can be useful as an intermediate categorical-like step in processing, when
    the relationships between the group rows are more important than their content,
    or as input to an algorithm which only accepts the integer encoding. (For more
    information about support in pandas for full categorical data, see the [Categorical
    introduction](categorical.html#categorical) and the [API documentation](../reference/arrays.html#api-arrays-categorical).)
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`DataFrameGroupBy.ngroup()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")，我们可以类似于[`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize")（在[重塑 API](reshaping.html#reshaping-factorize)中进一步描述）的方式提取关于组的信息，但这种方式自然地适用于混合类型和不同来源的多列。这在处理中间类别步骤时可能很有用，当组行之间的关系比它们的内容更重要时，或者作为仅接受整数编码的算法的输入。（有关
    pandas 对完整分类数据的支持的更多信息，请参阅[分类介绍](categorical.html#categorical)和[API 文档](../reference/arrays.html#api-arrays-categorical)。）
- en: '[PRE296]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Groupby by indexer to ‘resample’ data
  id: totrans-1043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按索引器对数据进行“重采样”分组
- en: Resampling produces new hypothetical samples (resamples) from already existing
    observed data or from a model that generates data. These new samples are similar
    to the pre-existing samples.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 重采样从已有的观测数据或生成数据的模型中产生新的假设样本（重采样）。这些新样本与现有样本相似。
- en: In order for resample to work on indices that are non-datetimelike, the following
    procedure can be utilized.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使重采样适用于非日期时间索引，可以使用以下过程。
- en: In the following examples, **df.index // 5** returns an integer array which
    is used to determine what gets selected for the groupby operation.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，**df.index // 5** 返回一个整数数组，用于确定哪些内容被选中进行分组操作。
- en: Note
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The example below shows how we can downsample by consolidation of samples into
    fewer ones. Here by using **df.index // 5**, we are aggregating the samples in
    bins. By applying **std()** function, we aggregate the information contained in
    many samples into a small subset of values which is their standard deviation thereby
    reducing the number of samples.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例显示了如何通过将样本合并为较少的样本来进行降采样。在这里，通过使用**df.index // 5**，我们将样本聚合到箱中。通过应用**std()**函数，我们将许多样本中包含的信息聚合成一小部分值，即它们的标准差，从而减少样本数量。
- en: '[PRE297]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Returning a Series to propagate names
  id: totrans-1050
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回一个 Series 以传播名称
- en: 'Group DataFrame columns, compute a set of metrics and return a named Series.
    The Series name is used as the name for the column index. This is especially useful
    in conjunction with reshaping operations such as stacking, in which the column
    index name will be used as the name of the inserted column:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 对 DataFrame 列进行分组，计算一组指标，并返回一个命名的 Series。Series 的名称将用作列索引的名称。这在与重塑操作（如堆叠）结合使用时特别有用，其中列索引名称将用作插入列的名称：
- en: '[PRE298]'
  id: totrans-1052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
