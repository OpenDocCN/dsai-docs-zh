- en: Multidimensional image processing (scipy.ndimage)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/ndimage.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/ndimage.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This package contains various functions for multidimensional image processing.
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`convolve`](generated/scipy.ndimage.convolve.html#scipy.ndimage.convolve
    "scipy.ndimage.convolve")(input, weights[, output, mode, ...]) | Multidimensional
    convolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`convolve1d`](generated/scipy.ndimage.convolve1d.html#scipy.ndimage.convolve1d
    "scipy.ndimage.convolve1d")(input, weights[, axis, output, ...]) | Calculate a
    1-D convolution along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`correlate`](generated/scipy.ndimage.correlate.html#scipy.ndimage.correlate
    "scipy.ndimage.correlate")(input, weights[, output, mode, ...]) | Multidimensional
    correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`correlate1d`](generated/scipy.ndimage.correlate1d.html#scipy.ndimage.correlate1d
    "scipy.ndimage.correlate1d")(input, weights[, axis, output, ...]) | Calculate
    a 1-D correlation along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gaussian_filter`](generated/scipy.ndimage.gaussian_filter.html#scipy.ndimage.gaussian_filter
    "scipy.ndimage.gaussian_filter")(input, sigma[, order, ...]) | Multidimensional
    Gaussian filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gaussian_filter1d`](generated/scipy.ndimage.gaussian_filter1d.html#scipy.ndimage.gaussian_filter1d
    "scipy.ndimage.gaussian_filter1d")(input, sigma[, axis, ...]) | 1-D Gaussian filter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gaussian_gradient_magnitude`](generated/scipy.ndimage.gaussian_gradient_magnitude.html#scipy.ndimage.gaussian_gradient_magnitude
    "scipy.ndimage.gaussian_gradient_magnitude")(input, sigma[, ...]) | Multidimensional
    gradient magnitude using Gaussian derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gaussian_laplace`](generated/scipy.ndimage.gaussian_laplace.html#scipy.ndimage.gaussian_laplace
    "scipy.ndimage.gaussian_laplace")(input, sigma[, output, ...]) | Multidimensional
    Laplace filter using Gaussian second derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic_filter`](generated/scipy.ndimage.generic_filter.html#scipy.ndimage.generic_filter
    "scipy.ndimage.generic_filter")(input, function[, size, ...]) | Calculate a multidimensional
    filter using the given function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic_filter1d`](generated/scipy.ndimage.generic_filter1d.html#scipy.ndimage.generic_filter1d
    "scipy.ndimage.generic_filter1d")(input, function, filter_size) | Calculate a
    1-D filter along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic_gradient_magnitude`](generated/scipy.ndimage.generic_gradient_magnitude.html#scipy.ndimage.generic_gradient_magnitude
    "scipy.ndimage.generic_gradient_magnitude")(input, derivative) | Gradient magnitude
    using a provided gradient function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`generic_laplace`](generated/scipy.ndimage.generic_laplace.html#scipy.ndimage.generic_laplace
    "scipy.ndimage.generic_laplace")(input, derivative2[, ...]) | N-D Laplace filter
    using a provided second derivative function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laplace`](generated/scipy.ndimage.laplace.html#scipy.ndimage.laplace "scipy.ndimage.laplace")(input[, output, mode, cval])
    | N-D Laplace filter based on approximate second derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum_filter`](generated/scipy.ndimage.maximum_filter.html#scipy.ndimage.maximum_filter
    "scipy.ndimage.maximum_filter")(input[, size, footprint, ...]) | Calculate a multidimensional
    maximum filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum_filter1d`](generated/scipy.ndimage.maximum_filter1d.html#scipy.ndimage.maximum_filter1d
    "scipy.ndimage.maximum_filter1d")(input, size[, axis, ...]) | Calculate a 1-D
    maximum filter along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`median_filter`](generated/scipy.ndimage.median_filter.html#scipy.ndimage.median_filter
    "scipy.ndimage.median_filter")(input[, size, footprint, ...]) | Calculate a multidimensional
    median filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum_filter`](generated/scipy.ndimage.minimum_filter.html#scipy.ndimage.minimum_filter
    "scipy.ndimage.minimum_filter")(input[, size, footprint, ...]) | Calculate a multidimensional
    minimum filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum_filter1d`](generated/scipy.ndimage.minimum_filter1d.html#scipy.ndimage.minimum_filter1d
    "scipy.ndimage.minimum_filter1d")(input, size[, axis, ...]) | Calculate a 1-D
    minimum filter along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`percentile_filter`](generated/scipy.ndimage.percentile_filter.html#scipy.ndimage.percentile_filter
    "scipy.ndimage.percentile_filter")(input, percentile[, size, ...]) | Calculate
    a multidimensional percentile filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prewitt`](generated/scipy.ndimage.prewitt.html#scipy.ndimage.prewitt "scipy.ndimage.prewitt")(input[, axis, output, mode, cval])
    | Calculate a Prewitt filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rank_filter`](generated/scipy.ndimage.rank_filter.html#scipy.ndimage.rank_filter
    "scipy.ndimage.rank_filter")(input, rank[, size, footprint, ...]) | Calculate
    a multidimensional rank filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sobel`](generated/scipy.ndimage.sobel.html#scipy.ndimage.sobel "scipy.ndimage.sobel")(input[, axis, output, mode, cval])
    | Calculate a Sobel filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform_filter`](generated/scipy.ndimage.uniform_filter.html#scipy.ndimage.uniform_filter
    "scipy.ndimage.uniform_filter")(input[, size, output, mode, ...]) | Multidimensional
    uniform filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`uniform_filter1d`](generated/scipy.ndimage.uniform_filter1d.html#scipy.ndimage.uniform_filter1d
    "scipy.ndimage.uniform_filter1d")(input, size[, axis, ...]) | Calculate a 1-D
    uniform filter along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: Fourier filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`fourier_ellipsoid`](generated/scipy.ndimage.fourier_ellipsoid.html#scipy.ndimage.fourier_ellipsoid
    "scipy.ndimage.fourier_ellipsoid")(input, size[, n, axis, output]) | Multidimensional
    ellipsoid Fourier filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fourier_gaussian`](generated/scipy.ndimage.fourier_gaussian.html#scipy.ndimage.fourier_gaussian
    "scipy.ndimage.fourier_gaussian")(input, sigma[, n, axis, output]) | Multidimensional
    Gaussian fourier filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fourier_shift`](generated/scipy.ndimage.fourier_shift.html#scipy.ndimage.fourier_shift
    "scipy.ndimage.fourier_shift")(input, shift[, n, axis, output]) | Multidimensional
    Fourier shift filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fourier_uniform`](generated/scipy.ndimage.fourier_uniform.html#scipy.ndimage.fourier_uniform
    "scipy.ndimage.fourier_uniform")(input, size[, n, axis, output]) | Multidimensional
    uniform fourier filter. |'
  prefs: []
  type: TYPE_TB
- en: Interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`affine_transform`](generated/scipy.ndimage.affine_transform.html#scipy.ndimage.affine_transform
    "scipy.ndimage.affine_transform")(input, matrix[, offset, ...]) | Apply an affine
    transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`geometric_transform`](generated/scipy.ndimage.geometric_transform.html#scipy.ndimage.geometric_transform
    "scipy.ndimage.geometric_transform")(input, mapping[, ...]) | Apply an arbitrary
    geometric transform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`map_coordinates`](generated/scipy.ndimage.map_coordinates.html#scipy.ndimage.map_coordinates
    "scipy.ndimage.map_coordinates")(input, coordinates[, ...]) | Map the input array
    to new coordinates by interpolation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rotate`](generated/scipy.ndimage.rotate.html#scipy.ndimage.rotate "scipy.ndimage.rotate")(input, angle[, axes, reshape, ...])
    | Rotate an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`shift`](generated/scipy.ndimage.shift.html#scipy.ndimage.shift "scipy.ndimage.shift")(input, shift[, output, order, mode, ...])
    | Shift an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spline_filter`](generated/scipy.ndimage.spline_filter.html#scipy.ndimage.spline_filter
    "scipy.ndimage.spline_filter")(input[, order, output, mode]) | Multidimensional
    spline filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spline_filter1d`](generated/scipy.ndimage.spline_filter1d.html#scipy.ndimage.spline_filter1d
    "scipy.ndimage.spline_filter1d")(input[, order, axis, ...]) | Calculate a 1-D
    spline filter along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zoom`](generated/scipy.ndimage.zoom.html#scipy.ndimage.zoom "scipy.ndimage.zoom")(input, zoom[, output, order, mode, ...])
    | Zoom an array. |'
  prefs: []
  type: TYPE_TB
- en: Measurements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`center_of_mass`](generated/scipy.ndimage.center_of_mass.html#scipy.ndimage.center_of_mass
    "scipy.ndimage.center_of_mass")(input[, labels, index]) | Calculate the center
    of mass of the values of an array at labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`extrema`](generated/scipy.ndimage.extrema.html#scipy.ndimage.extrema "scipy.ndimage.extrema")(input[, labels, index])
    | Calculate the minimums and maximums of the values of an array at labels, along
    with their positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`find_objects`](generated/scipy.ndimage.find_objects.html#scipy.ndimage.find_objects
    "scipy.ndimage.find_objects")(input[, max_label]) | Find objects in a labeled
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`histogram`](generated/scipy.ndimage.histogram.html#scipy.ndimage.histogram
    "scipy.ndimage.histogram")(input, min, max, bins[, labels, index]) | Calculate
    the histogram of the values of an array, optionally at labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`label`](generated/scipy.ndimage.label.html#scipy.ndimage.label "scipy.ndimage.label")(input[, structure, output])
    | Label features in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`labeled_comprehension`](generated/scipy.ndimage.labeled_comprehension.html#scipy.ndimage.labeled_comprehension
    "scipy.ndimage.labeled_comprehension")(input, labels, index, ...) | Roughly equivalent
    to [func(input[labels == i]) for i in index]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum`](generated/scipy.ndimage.maximum.html#scipy.ndimage.maximum "scipy.ndimage.maximum")(input[, labels, index])
    | Calculate the maximum of the values of an array over labeled regions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`maximum_position`](generated/scipy.ndimage.maximum_position.html#scipy.ndimage.maximum_position
    "scipy.ndimage.maximum_position")(input[, labels, index]) | Find the positions
    of the maximums of the values of an array at labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](generated/scipy.ndimage.mean.html#scipy.ndimage.mean "scipy.ndimage.mean")(input[, labels, index])
    | Calculate the mean of the values of an array at labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`median`](generated/scipy.ndimage.median.html#scipy.ndimage.median "scipy.ndimage.median")(input[, labels, index])
    | Calculate the median of the values of an array over labeled regions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum`](generated/scipy.ndimage.minimum.html#scipy.ndimage.minimum "scipy.ndimage.minimum")(input[, labels, index])
    | Calculate the minimum of the values of an array over labeled regions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`minimum_position`](generated/scipy.ndimage.minimum_position.html#scipy.ndimage.minimum_position
    "scipy.ndimage.minimum_position")(input[, labels, index]) | Find the positions
    of the minimums of the values of an array at labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`standard_deviation`](generated/scipy.ndimage.standard_deviation.html#scipy.ndimage.standard_deviation
    "scipy.ndimage.standard_deviation")(input[, labels, index]) | Calculate the standard
    deviation of the values of an N-D image array, optionally at specified sub-regions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum_labels`](generated/scipy.ndimage.sum_labels.html#scipy.ndimage.sum_labels
    "scipy.ndimage.sum_labels")(input[, labels, index]) | Calculate the sum of the
    values of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`value_indices`](generated/scipy.ndimage.value_indices.html#scipy.ndimage.value_indices
    "scipy.ndimage.value_indices")(arr, *[, ignore_value]) | Find indices of each
    distinct value in given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`variance`](generated/scipy.ndimage.variance.html#scipy.ndimage.variance
    "scipy.ndimage.variance")(input[, labels, index]) | Calculate the variance of
    the values of an N-D image array, optionally at specified sub-regions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`watershed_ift`](generated/scipy.ndimage.watershed_ift.html#scipy.ndimage.watershed_ift
    "scipy.ndimage.watershed_ift")(input, markers[, structure, ...]) | Apply watershed
    from markers using image foresting transform algorithm. |'
  prefs: []
  type: TYPE_TB
- en: Morphology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`binary_closing`](generated/scipy.ndimage.binary_closing.html#scipy.ndimage.binary_closing
    "scipy.ndimage.binary_closing")(input[, structure, ...]) | Multidimensional binary
    closing with the given structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_dilation`](generated/scipy.ndimage.binary_dilation.html#scipy.ndimage.binary_dilation
    "scipy.ndimage.binary_dilation")(input[, structure, ...]) | Multidimensional binary
    dilation with the given structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_erosion`](generated/scipy.ndimage.binary_erosion.html#scipy.ndimage.binary_erosion
    "scipy.ndimage.binary_erosion")(input[, structure, ...]) | Multidimensional binary
    erosion with a given structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_fill_holes`](generated/scipy.ndimage.binary_fill_holes.html#scipy.ndimage.binary_fill_holes
    "scipy.ndimage.binary_fill_holes")(input[, structure, ...]) | Fill the holes in
    binary objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_hit_or_miss`](generated/scipy.ndimage.binary_hit_or_miss.html#scipy.ndimage.binary_hit_or_miss
    "scipy.ndimage.binary_hit_or_miss")(input[, structure1, ...]) | Multidimensional
    binary hit-or-miss transform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_opening`](generated/scipy.ndimage.binary_opening.html#scipy.ndimage.binary_opening
    "scipy.ndimage.binary_opening")(input[, structure, ...]) | Multidimensional binary
    opening with the given structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`binary_propagation`](generated/scipy.ndimage.binary_propagation.html#scipy.ndimage.binary_propagation
    "scipy.ndimage.binary_propagation")(input[, structure, mask, ...]) | Multidimensional
    binary propagation with the given structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`black_tophat`](generated/scipy.ndimage.black_tophat.html#scipy.ndimage.black_tophat
    "scipy.ndimage.black_tophat")(input[, size, footprint, ...]) | Multidimensional
    black tophat filter. |'
  prefs: []
  type: TYPE_TB
- en: '| [`distance_transform_bf`](generated/scipy.ndimage.distance_transform_bf.html#scipy.ndimage.distance_transform_bf
    "scipy.ndimage.distance_transform_bf")(input[, metric, ...]) | Distance transform
    function by a brute force algorithm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`distance_transform_cdt`](generated/scipy.ndimage.distance_transform_cdt.html#scipy.ndimage.distance_transform_cdt
    "scipy.ndimage.distance_transform_cdt")(input[, metric, ...]) | Distance transform
    for chamfer type of transforms. |'
  prefs: []
  type: TYPE_TB
- en: '| [`distance_transform_edt`](generated/scipy.ndimage.distance_transform_edt.html#scipy.ndimage.distance_transform_edt
    "scipy.ndimage.distance_transform_edt")(input[, sampling, ...]) | Exact Euclidean
    distance transform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`generate_binary_structure`](generated/scipy.ndimage.generate_binary_structure.html#scipy.ndimage.generate_binary_structure
    "scipy.ndimage.generate_binary_structure")(rank, connectivity) | Generate a binary
    structure for binary morphological operations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`grey_closing`](generated/scipy.ndimage.grey_closing.html#scipy.ndimage.grey_closing
    "scipy.ndimage.grey_closing")(input[, size, footprint, ...]) | Multidimensional
    grayscale closing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`grey_dilation`](generated/scipy.ndimage.grey_dilation.html#scipy.ndimage.grey_dilation
    "scipy.ndimage.grey_dilation")(input[, size, footprint, ...]) | Calculate a greyscale
    dilation, using either a structuring element, or a footprint corresponding to
    a flat structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`grey_erosion`](generated/scipy.ndimage.grey_erosion.html#scipy.ndimage.grey_erosion
    "scipy.ndimage.grey_erosion")(input[, size, footprint, ...]) | Calculate a greyscale
    erosion, using either a structuring element, or a footprint corresponding to a
    flat structuring element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`grey_opening`](generated/scipy.ndimage.grey_opening.html#scipy.ndimage.grey_opening
    "scipy.ndimage.grey_opening")(input[, size, footprint, ...]) | Multidimensional
    grayscale opening. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iterate_structure`](generated/scipy.ndimage.iterate_structure.html#scipy.ndimage.iterate_structure
    "scipy.ndimage.iterate_structure")(structure, iterations[, ...]) | Iterate a structure
    by dilating it with itself. |'
  prefs: []
  type: TYPE_TB
- en: '| [`morphological_gradient`](generated/scipy.ndimage.morphological_gradient.html#scipy.ndimage.morphological_gradient
    "scipy.ndimage.morphological_gradient")(input[, size, ...]) | Multidimensional
    morphological gradient. |'
  prefs: []
  type: TYPE_TB
- en: '| [`morphological_laplace`](generated/scipy.ndimage.morphological_laplace.html#scipy.ndimage.morphological_laplace
    "scipy.ndimage.morphological_laplace")(input[, size, ...]) | Multidimensional
    morphological laplace. |'
  prefs: []
  type: TYPE_TB
- en: '| [`white_tophat`](generated/scipy.ndimage.white_tophat.html#scipy.ndimage.white_tophat
    "scipy.ndimage.white_tophat")(input[, size, footprint, ...]) | Multidimensional
    white tophat filter. |'
  prefs: []
  type: TYPE_TB
