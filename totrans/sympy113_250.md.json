["```py\nsympy.utilities.enumerative.multiset_partitions_taocp(multiplicities)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import multiset_partitions_taocp\n>>> # variables components and multiplicities represent the multiset 'abb'\n>>> components = 'ab'\n>>> multiplicities = [1, 2]\n>>> states = multiset_partitions_taocp(multiplicities)\n>>> list(list_visitor(state, components) for state in states)\n[[['a', 'b', 'b']],\n[['a', 'b'], ['b']],\n[['a'], ['b', 'b']],\n[['a'], ['b'], ['b']]] \n```", "```py\nsympy.utilities.enumerative.factoring_visitor(state, primes)\n```", "```py\n>>> from sympy.utilities.enumerative import factoring_visitor\n>>> from sympy.utilities.enumerative import multiset_partitions_taocp\n>>> from sympy import factorint\n>>> primes, multiplicities = zip(*factorint(24).items())\n>>> primes\n(2, 3)\n>>> multiplicities\n(3, 1)\n>>> states = multiset_partitions_taocp(multiplicities)\n>>> list(factoring_visitor(state, primes) for state in states)\n[[24], [8, 3], [12, 2], [4, 6], [4, 2, 3], [6, 2, 2], [2, 2, 2, 3]] \n```", "```py\nsympy.utilities.enumerative.list_visitor(state, components)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import multiset_partitions_taocp\n>>> states = multiset_partitions_taocp([1, 2, 1])\n>>> s = next(states)\n>>> list_visitor(s, 'abc')  # for multiset 'a b b c'\n[['a', 'b', 'b', 'c']]\n>>> s = next(states)\n>>> list_visitor(s, [1, 2, 3])  # for multiset '1 2 2 3\n[[1, 2, 2], [3]] \n```", "```py\nclass sympy.utilities.enumerative.MultisetPartitionTraverser\n```", "```py\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> m.count_partitions([4,4,4,2])\n127750\n>>> m.count_partitions([3,3,3])\n686 \n```", "```py\ncount_partitions(multiplicities)\n```", "```py\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> m.count_partitions([9,8,2])\n288716\n>>> m.count_partitions([2,2])\n9\n>>> del m \n```", "```py\nenum_all(multiplicities)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> states = m.enum_all([2,2])\n>>> list(list_visitor(state, 'ab') for state in states)\n[[['a', 'a', 'b', 'b']],\n[['a', 'a', 'b'], ['b']],\n[['a', 'a'], ['b', 'b']],\n[['a', 'a'], ['b'], ['b']],\n[['a', 'b', 'b'], ['a']],\n[['a', 'b'], ['a', 'b']],\n[['a', 'b'], ['a'], ['b']],\n[['a'], ['a'], ['b', 'b']],\n[['a'], ['a'], ['b'], ['b']]] \n```", "```py\nenum_large(multiplicities, lb)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> states = m.enum_large([2,2], 2)\n>>> list(list_visitor(state, 'ab') for state in states)\n[[['a', 'a'], ['b'], ['b']],\n[['a', 'b'], ['a'], ['b']],\n[['a'], ['a'], ['b', 'b']],\n[['a'], ['a'], ['b'], ['b']]] \n```", "```py\nenum_range(multiplicities, lb, ub)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> states = m.enum_range([2,2], 1, 2)\n>>> list(list_visitor(state, 'ab') for state in states)\n[[['a', 'a', 'b'], ['b']],\n[['a', 'a'], ['b', 'b']],\n[['a', 'b', 'b'], ['a']],\n[['a', 'b'], ['a', 'b']]] \n```", "```py\nenum_small(multiplicities, ub)\n```", "```py\n>>> from sympy.utilities.enumerative import list_visitor\n>>> from sympy.utilities.enumerative import MultisetPartitionTraverser\n>>> m = MultisetPartitionTraverser()\n>>> states = m.enum_small([2,2], 2)\n>>> list(list_visitor(state, 'ab') for state in states)\n[[['a', 'a', 'b', 'b']],\n[['a', 'a', 'b'], ['b']],\n[['a', 'a'], ['b', 'b']],\n[['a', 'b', 'b'], ['a']],\n[['a', 'b'], ['a', 'b']]] \n```"]