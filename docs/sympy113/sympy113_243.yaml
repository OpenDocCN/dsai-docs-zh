- en: pytest
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pytest
- en: Original text：[https://docs.sympy.org/latest/modules/testing/pytest.html](https://docs.sympy.org/latest/modules/testing/pytest.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/testing/pytest.html](https://docs.sympy.org/latest/modules/testing/pytest.html)
- en: py.test hacks to support XFAIL/XPASS
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: py.test的hack来支持XFAIL/XPASS
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Similar to `skip()`, but this is a decorator.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与`skip()`类似，但这是一个装饰器。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dummy decorator for marking tests that fail when cache is disabled
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 用于标记在禁用缓存时失败的测试的虚拟装饰器
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tests that `code` raises the exception `expectedException`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 测试`code`是否引发了异常`expectedException`。
- en: '`code` may be a callable, such as a lambda expression or function name.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`code`可以是可调用对象，比如lambda表达式或函数名。'
- en: If `code` is not given or None, `raises` will return a context manager for use
    in `with` statements; the code to execute then comes from the scope of the `with`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未提供`code`或为`None`，`raises`将返回一个供`with`语句使用的上下文管理器；然后执行的代码来自`with`的范围。
- en: '`raises()` does nothing if the callable raises the expected exception, otherwise
    it raises an AssertionError.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可调用对象引发了预期的异常，`raises()`不会执行任何操作，否则会引发AssertionError。
- en: Examples
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that you cannot test multiple statements via `with raises`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不能通过`with raises`来测试多个语句：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is just what `with` is supposed to do: abort the contained statement sequence
    at the first exception and let the context manager deal with the exception.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是`with`应该做的：在第一个异常处中止包含的语句序列，并让上下文管理器处理异常。
- en: 'To test multiple statements, you’ll need a separate `with` for each:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试多个语句，每个语句都需要单独的`with`：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Decorator to skip a test if running under pyodide.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在pyodide下运行时跳过测试的装饰器。
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Like raises but tests that warnings are emitted.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 类似`raises`，但测试是否发出了警告。
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`test_stacklevel` makes it check that the `stacklevel` parameter to `warn()`
    is set so that the warning shows the user line of code (the code under the warns()
    context manager). Set this to False if this is ambiguous or if the context manager
    does not test the direct user code that emits the warning.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_stacklevel`使其检查`warn()`的`stacklevel`参数是否设置，以便警告显示用户代码行（在`warns()`上下文管理器下的代码）。如果这不明确或者上下文管理器不测试直接发出警告的用户代码，则将其设置为False。'
- en: If the warning is a `SymPyDeprecationWarning`, this additionally tests that
    the `active_deprecations_target` is a real target in the `active-deprecations.md`
    file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果警告是`SymPyDeprecationWarning`，这还会测试`active-deprecations.md`文件中的`active_deprecations_target`是否是一个真实的目标。
- en: '[PRE13]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Shorthand for `warns(SymPyDeprecationWarning)`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`warns(SymPyDeprecationWarning)`的简写'
- en: This is the recommended way to test that `SymPyDeprecationWarning` is emitted
    for deprecated features in SymPy. To test for other warnings use `warns`. To suppress
    warnings without asserting that they are emitted use `ignore_warnings`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在SymPy中测试已弃用功能是否发出`SymPyDeprecationWarning`的推荐方式。要测试其他警告，请使用`warns`。要在不断言它们被发出的情况下抑制警告，请使用`ignore_warnings`。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`warns_deprecated_sympy()` is only intended for internal use in the SymPy test
    suite to test that a deprecation warning triggers properly. All other code in
    the SymPy codebase, including documentation examples, should not use deprecated
    behavior.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`warns_deprecated_sympy()`仅用于SymPy测试套件中内部使用，以测试是否正确触发了弃用警告。SymPy代码库中的所有其他代码，包括文档示例，都不应使用弃用的行为。'
- en: If you are a user of SymPy and you want to disable SymPyDeprecationWarnings,
    use `warnings` filters (see [Silencing SymPy Deprecation Warnings](../../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是SymPy的用户，想要禁用SymPyDeprecationWarnings，请使用警告过滤器（参见[Silencing SymPy Deprecation
    Warnings](../../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)）。
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes the stacklevel test will fail because the same warning is emitted
    multiple times. In this case, you can use [`sympy.utilities.exceptions.ignore_warnings()`](../utilities/exceptions.html#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings") in the code to prevent the `SymPyDeprecationWarning`
    from being emitted again recursively. In rare cases it is impossible to have a
    consistent `stacklevel` for deprecation warnings because different ways of calling
    a function will produce different call stacks.. In those cases, use `warns(SymPyDeprecationWarning)`
    instead.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时堆栈级别测试会失败，因为同一个警告被多次发出。在这种情况下，你可以在代码中使用[`sympy.utilities.exceptions.ignore_warnings()`](../utilities/exceptions.html#sympy.utilities.exceptions.ignore_warnings
    "sympy.utilities.exceptions.ignore_warnings")来防止`SymPyDeprecationWarning`再次递归发出。在某些情况下，对于废弃警告，可能无法有一个一致的`stacklevel`，因为不同的调用函数方式会产生不同的调用堆栈。在这些情况下，请改用`warns(SymPyDeprecationWarning)`。
- en: See also
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](../utilities/exceptions.html#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.sympy_deprecation_warning`](../utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.decorator.deprecated`](../utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated")'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.utilities.exceptions.SymPyDeprecationWarning`](../utilities/exceptions.html#sympy.utilities.exceptions.SymPyDeprecationWarning
    "sympy.utilities.exceptions.SymPyDeprecationWarning"), [`sympy.utilities.exceptions.sympy_deprecation_warning`](../utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"), [`sympy.utilities.decorator.deprecated`](../utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated")'
