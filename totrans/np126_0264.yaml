- en: The array interface protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.interface.html](https://numpy.org/doc/1.26/reference/arrays.interface.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This page describes the NumPy-specific API for accessing the contents of a NumPy
    array from other C extensions. [**PEP 3118**](https://peps.python.org/pep-3118/)
    – [`The Revised Buffer Protocol`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer
    "(in Python v3.11)") introduces similar, standardized API to Python 2.6 and 3.0
    for any extension module to use. [Cython](http://cython.org/)’s buffer array support
    uses the [**PEP 3118**](https://peps.python.org/pep-3118/) API; see the [Cython
    NumPy tutorial](https://github.com/cython/cython/wiki/tutorials-numpy). Cython
    provides a way to write code that supports the buffer protocol with Python versions
    older than 2.6 because it has a backward-compatible implementation utilizing the
    array interface described here.
  prefs: []
  type: TYPE_NORMAL
- en: 'version:'
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: The array interface (sometimes called array protocol) was created in 2005 as
    a means for array-like Python objects to re-use each other’s data buffers intelligently
    whenever possible. The homogeneous N-dimensional array interface is a default
    mechanism for objects to share N-dimensional array memory and information. The
    interface consists of a Python-side and a C-side using two attributes. Objects
    wishing to be considered an N-dimensional array in application code should support
    at least one of these attributes. Objects wishing to support an N-dimensional
    array in application code should look for at least one of these attributes and
    use the information provided appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: This interface describes homogeneous arrays in the sense that each item of the
    array has the same “type”. This type can be very simple or it can be a quite arbitrary
    and complicated C-like structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to use the interface: A Python side and a C-side. Both are
    separate attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Python side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach to the interface consists of the object having an [`__array_interface__`](#object.__array_interface__
    "object.__array_interface__") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of items (3 required and 5 optional). The optional keys in the
    dictionary have implied defaults if they are not provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keys are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple whose elements are the array size in each dimension. Each entry is an
    integer (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")). Note that these integers could be larger than the platform
    `int` or `long` could hold (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") is a C `long`). It is up to the code using this attribute
    to handle this appropriately; either by raising an error when overflow is possible,
    or by using `long long` as the C type for the shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '**typestr** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A string providing the basic type of the homogeneous array The basic string
    format consists of 3 parts: a character describing the byteorder of the data (`<`:
    little-endian, `>`: big-endian, `|`: not-relevant), a character code giving the
    basic type of the array, and an integer providing the number of bytes the type
    uses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic type character codes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `t` | Bit field (following integer gives the number of bits in the bit field).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | Boolean (integer type where all values are only `True` or `False`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Unsigned integer |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | Floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Complex floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Timedelta |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Datetime |'
  prefs: []
  type: TYPE_TB
- en: '| `O` | Object (i.e. the memory contains a pointer to [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")) |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | String (fixed-length sequence of char) |'
  prefs: []
  type: TYPE_TB
- en: '| `U` | Unicode (fixed-length sequence of [`Py_UCS4`](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS4
    "(in Python v3.11)")) |'
  prefs: []
  type: TYPE_TB
- en: '| `V` | Other (void * – each item is a fixed-size chunk of memory) |'
  prefs: []
  type: TYPE_TB
- en: '**descr** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of tuples providing a more detailed description of the memory layout
    for each item in the homogeneous array. Each tuple in the list has two or three
    elements. Normally, this attribute would be used when *typestr* is `V[0-9]+`,
    but this is not a requirement. The only requirement is that the number of bytes
    represented in the *typestr* key is the same as the total number of bytes represented
    here. The idea is to support descriptions of C-like structs that make up array
    elements. The elements of each tuple in the list are
  prefs: []
  type: TYPE_NORMAL
- en: A string providing a name associated with this portion of the datatype. This
    could also be a tuple of `('full name', 'basic_name')` where basic name would
    be a valid Python variable name representing the full name of the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either a basic-type description string as in *typestr* or another list (for
    nested structured types)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An optional shape tuple providing how many times this part of the structure
    should be repeated. No repeats are assumed if this is not given. Very complicated
    structures can be described using this generic interface. Notice, however, that
    each element of the array is still of the same data-type. Some examples of using
    this interface are given below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Default**: `[('''', typestr)]`'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: A 2-tuple whose first argument is a [Python integer](https://docs.python.org/3/c-api/long.html
    "(in Python v3.11)") that points to the data-area storing the array contents.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When converting from C/C++ via `PyLong_From*` or high-level bindings such as
    Cython or pybind11, make sure to use an integer of sufficiently large bitness.
  prefs: []
  type: TYPE_NORMAL
- en: This pointer must point to the first element of data (in other words any offset
    is always ignored in this case). The second entry in the tuple is a read-only
    flag (true means the data area is read-only).
  prefs: []
  type: TYPE_NORMAL
- en: This attribute can also be an object exposing the [buffer interface](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(in Python v3.11)") which will be used to share the data. If this key is not
    present (or returns None), then memory sharing will be done through the buffer
    interface of the object itself. In this case, the offset key can be used to indicate
    the start of the buffer. A reference to the object exposing the array interface
    must be stored by the new object if the memory area is to be secured.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None`'
  prefs: []
  type: TYPE_NORMAL
- en: '**strides** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Either `None` to indicate a C-style contiguous array or a tuple of strides which
    provides the number of bytes needed to jump to the next array element in the corresponding
    dimension. Each entry must be an integer (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")). As with shape, the values may be larger than can be represented
    by a C `int` or `long`; the calling code should handle this appropriately, either
    by raising an error, or by using `long long` in C. The default is `None` which
    implies a C-style contiguous memory buffer. In this model, the last dimension
    of the array varies the fastest. For example, the default strides tuple for an
    object whose array entries are 8 bytes long and whose shape is `(10, 20, 30)`
    would be `(4800, 240, 8)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None` (C-style contiguous)'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` or an object exposing the array interface. All elements of the mask
    array should be interpreted only as true or not true indicating which elements
    of this array are valid. The shape of this object should be *“broadcastable”*
    to the shape of the original array.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None` (All array values are valid)'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: An integer offset into the array data region. This can only be used when data
    is `None` or returns a `buffer` object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**version** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: An integer showing the version of the interface (i.e. 3 for this version). Be
    careful not to use this to invalidate objects exposing future versions of the
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: C-struct access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach to the array interface allows for faster access to an array using
    only one attribute lookup and a well-defined C-structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "(in
    Python v3.11)") whose `pointer` member contains a pointer to a filled [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure. Memory for the structure is dynamically created
    and the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") is also created with an appropriate destructor so the retriever
    of this attribute simply has to apply [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)") to the object returned by this attribute when it is finished.
    Also, either the data needs to be copied out, or a reference to the object exposing
    this attribute must be held to ensure the data is not freed. Objects exposing
    the [`__array_struct__`](#object.__array_struct__ "object.__array_struct__") interface
    must also not reallocate their memory if other objects are referencing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure is defined in `numpy/ndarrayobject.h` as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The flags member may consist of 5 bits showing how the data should be interpreted
    and one bit showing how the Interface should be interpreted. The data-bits are
    [`NPY_ARRAY_C_CONTIGUOUS`](c-api/array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")
    (0x1), [`NPY_ARRAY_F_CONTIGUOUS`](c-api/array.html#c.NPY_ARRAY_F_CONTIGUOUS "NPY_ARRAY_F_CONTIGUOUS")
    (0x2), [`NPY_ARRAY_ALIGNED`](c-api/array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")
    (0x100), [`NPY_ARRAY_NOTSWAPPED`](c-api/array.html#c.NPY_ARRAY_NOTSWAPPED "NPY_ARRAY_NOTSWAPPED")
    (0x200), and [`NPY_ARRAY_WRITEABLE`](c-api/array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE")
    (0x400). A final flag [`NPY_ARR_HAS_DESCR`](#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    (0x800) indicates whether or not this structure has the arrdescr field. The field
    should not be accessed unless this flag is present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'New since June 16, 2006:'
  prefs: []
  type: TYPE_NORMAL
- en: In the past most implementations used the `desc` member of the `PyCObject` (now
    [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "(in Python
    v3.11)")) itself (do not confuse this with the “descr” member of the [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure above — they are two separate things) to hold the
    pointer to the object exposing the interface. This is now an explicit part of
    the interface. Be sure to take a reference to the object and call [`PyCapsule_SetContext`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule_SetContext
    "(in Python v3.11)") before returning the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)"), and configure a destructor to decref this reference.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_struct__` is considered legacy and should not be used for new code.
    Use the [buffer protocol](https://docs.python.org/3/c-api/buffer.html "(in Python
    v3.11)") or the DLPack protocol [`numpy.from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack
    "numpy.from_dlpack") instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Type description examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For clarity it is useful to provide some examples of the type description and
    corresponding [`__array_interface__`](#object.__array_interface__ "object.__array_interface__")
    ‘descr’ entries. Thanks to Scott Gilbert for these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In every case, the ‘descr’ key is optional, but of course provides more information
    which may be important for various applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It should be clear that any structured type could be described using this interface.
  prefs: []
  type: TYPE_NORMAL
- en: Differences with Array interface (Version 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The version 2 interface was very similar. The differences were largely aesthetic.
    In particular:'
  prefs: []
  type: TYPE_NORMAL
- en: The PyArrayInterface structure had no descr member at the end (and therefore
    no flag ARR_HAS_DESCR)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `context` member of the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") (formally the `desc` member of the `PyCObject`) returned
    from `__array_struct__` was not specified. Usually, it was the object exposing
    the array (so that a reference to it could be kept and destroyed when the C-object
    was destroyed). It is now an explicit requirement that this field be used in some
    way to hold a reference to the owning object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Until August 2020, this said:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now it must be a tuple whose first element is a string with “PyArrayInterface
    Version #” and whose second element is the object exposing the array.'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This design was retracted almost immediately after it was proposed, in <[https://mail.python.org/pipermail/numpy-discussion/2006-June/020995.html](https://mail.python.org/pipermail/numpy-discussion/2006-June/020995.html)>.
    Despite 14 years of documentation to the contrary, at no point was it valid to
    assume that `__array_interface__` capsules held this tuple content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The tuple returned from `__array_interface__['data']` used to be a hex-string
    (now it is an integer or a long integer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There was no `__array_interface__` attribute instead all of the keys (except
    for version) in the `__array_interface__` dictionary were their own attribute:
    Thus to obtain the Python-side information you had to access separately the attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`__array_data__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_shape__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_strides__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_typestr__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_descr__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_offset__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_mask__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python side
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach to the interface consists of the object having an [`__array_interface__`](#object.__array_interface__
    "object.__array_interface__") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of items (3 required and 5 optional). The optional keys in the
    dictionary have implied defaults if they are not provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keys are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple whose elements are the array size in each dimension. Each entry is an
    integer (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")). Note that these integers could be larger than the platform
    `int` or `long` could hold (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") is a C `long`). It is up to the code using this attribute
    to handle this appropriately; either by raising an error when overflow is possible,
    or by using `long long` as the C type for the shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '**typestr** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A string providing the basic type of the homogeneous array The basic string
    format consists of 3 parts: a character describing the byteorder of the data (`<`:
    little-endian, `>`: big-endian, `|`: not-relevant), a character code giving the
    basic type of the array, and an integer providing the number of bytes the type
    uses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic type character codes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `t` | Bit field (following integer gives the number of bits in the bit field).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `b` | Boolean (integer type where all values are only `True` or `False`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `i` | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Unsigned integer |'
  prefs: []
  type: TYPE_TB
- en: '| `f` | Floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Complex floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Timedelta |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Datetime |'
  prefs: []
  type: TYPE_TB
- en: '| `O` | Object (i.e. the memory contains a pointer to [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")) |'
  prefs: []
  type: TYPE_TB
- en: '| `S` | String (fixed-length sequence of char) |'
  prefs: []
  type: TYPE_TB
- en: '| `U` | Unicode (fixed-length sequence of [`Py_UCS4`](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS4
    "(in Python v3.11)")) |'
  prefs: []
  type: TYPE_TB
- en: '| `V` | Other (void * – each item is a fixed-size chunk of memory) |'
  prefs: []
  type: TYPE_TB
- en: '**descr** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of tuples providing a more detailed description of the memory layout
    for each item in the homogeneous array. Each tuple in the list has two or three
    elements. Normally, this attribute would be used when *typestr* is `V[0-9]+`,
    but this is not a requirement. The only requirement is that the number of bytes
    represented in the *typestr* key is the same as the total number of bytes represented
    here. The idea is to support descriptions of C-like structs that make up array
    elements. The elements of each tuple in the list are
  prefs: []
  type: TYPE_NORMAL
- en: A string providing a name associated with this portion of the datatype. This
    could also be a tuple of `('full name', 'basic_name')` where basic name would
    be a valid Python variable name representing the full name of the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either a basic-type description string as in *typestr* or another list (for
    nested structured types)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An optional shape tuple providing how many times this part of the structure
    should be repeated. No repeats are assumed if this is not given. Very complicated
    structures can be described using this generic interface. Notice, however, that
    each element of the array is still of the same data-type. Some examples of using
    this interface are given below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Default**: `[('''', typestr)]`'
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: A 2-tuple whose first argument is a [Python integer](https://docs.python.org/3/c-api/long.html
    "(in Python v3.11)") that points to the data-area storing the array contents.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When converting from C/C++ via `PyLong_From*` or high-level bindings such as
    Cython or pybind11, make sure to use an integer of sufficiently large bitness.
  prefs: []
  type: TYPE_NORMAL
- en: This pointer must point to the first element of data (in other words any offset
    is always ignored in this case). The second entry in the tuple is a read-only
    flag (true means the data area is read-only).
  prefs: []
  type: TYPE_NORMAL
- en: This attribute can also be an object exposing the [buffer interface](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(in Python v3.11)") which will be used to share the data. If this key is not
    present (or returns None), then memory sharing will be done through the buffer
    interface of the object itself. In this case, the offset key can be used to indicate
    the start of the buffer. A reference to the object exposing the array interface
    must be stored by the new object if the memory area is to be secured.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None`'
  prefs: []
  type: TYPE_NORMAL
- en: '**strides** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: Either `None` to indicate a C-style contiguous array or a tuple of strides which
    provides the number of bytes needed to jump to the next array element in the corresponding
    dimension. Each entry must be an integer (a Python [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)")). As with shape, the values may be larger than can be represented
    by a C `int` or `long`; the calling code should handle this appropriately, either
    by raising an error, or by using `long long` in C. The default is `None` which
    implies a C-style contiguous memory buffer. In this model, the last dimension
    of the array varies the fastest. For example, the default strides tuple for an
    object whose array entries are 8 bytes long and whose shape is `(10, 20, 30)`
    would be `(4800, 240, 8)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None` (C-style contiguous)'
  prefs: []
  type: TYPE_NORMAL
- en: '**mask** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` or an object exposing the array interface. All elements of the mask
    array should be interpreted only as true or not true indicating which elements
    of this array are valid. The shape of this object should be *“broadcastable”*
    to the shape of the original array.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `None` (All array values are valid)'
  prefs: []
  type: TYPE_NORMAL
- en: '**offset** (optional)'
  prefs: []
  type: TYPE_NORMAL
- en: An integer offset into the array data region. This can only be used when data
    is `None` or returns a `buffer` object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**version** (required)'
  prefs: []
  type: TYPE_NORMAL
- en: An integer showing the version of the interface (i.e. 3 for this version). Be
    careful not to use this to invalidate objects exposing future versions of the
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: C-struct access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach to the array interface allows for faster access to an array using
    only one attribute lookup and a well-defined C-structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "(in
    Python v3.11)") whose `pointer` member contains a pointer to a filled [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure. Memory for the structure is dynamically created
    and the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") is also created with an appropriate destructor so the retriever
    of this attribute simply has to apply [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)") to the object returned by this attribute when it is finished.
    Also, either the data needs to be copied out, or a reference to the object exposing
    this attribute must be held to ensure the data is not freed. Objects exposing
    the [`__array_struct__`](#object.__array_struct__ "object.__array_struct__") interface
    must also not reallocate their memory if other objects are referencing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure is defined in `numpy/ndarrayobject.h` as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The flags member may consist of 5 bits showing how the data should be interpreted
    and one bit showing how the Interface should be interpreted. The data-bits are
    [`NPY_ARRAY_C_CONTIGUOUS`](c-api/array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")
    (0x1), [`NPY_ARRAY_F_CONTIGUOUS`](c-api/array.html#c.NPY_ARRAY_F_CONTIGUOUS "NPY_ARRAY_F_CONTIGUOUS")
    (0x2), [`NPY_ARRAY_ALIGNED`](c-api/array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")
    (0x100), [`NPY_ARRAY_NOTSWAPPED`](c-api/array.html#c.NPY_ARRAY_NOTSWAPPED "NPY_ARRAY_NOTSWAPPED")
    (0x200), and [`NPY_ARRAY_WRITEABLE`](c-api/array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE")
    (0x400). A final flag [`NPY_ARR_HAS_DESCR`](#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    (0x800) indicates whether or not this structure has the arrdescr field. The field
    should not be accessed unless this flag is present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: 'New since June 16, 2006:'
  prefs: []
  type: TYPE_NORMAL
- en: In the past most implementations used the `desc` member of the `PyCObject` (now
    [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "(in Python
    v3.11)")) itself (do not confuse this with the “descr” member of the [`PyArrayInterface`](c-api/types-and-structures.html#c.PyArrayInterface
    "PyArrayInterface") structure above — they are two separate things) to hold the
    pointer to the object exposing the interface. This is now an explicit part of
    the interface. Be sure to take a reference to the object and call [`PyCapsule_SetContext`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule_SetContext
    "(in Python v3.11)") before returning the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)"), and configure a destructor to decref this reference.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_struct__` is considered legacy and should not be used for new code.
    Use the [buffer protocol](https://docs.python.org/3/c-api/buffer.html "(in Python
    v3.11)") or the DLPack protocol [`numpy.from_dlpack`](generated/numpy.from_dlpack.html#numpy.from_dlpack
    "numpy.from_dlpack") instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Type description examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For clarity it is useful to provide some examples of the type description and
    corresponding [`__array_interface__`](#object.__array_interface__ "object.__array_interface__")
    ‘descr’ entries. Thanks to Scott Gilbert for these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In every case, the ‘descr’ key is optional, but of course provides more information
    which may be important for various applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It should be clear that any structured type could be described using this interface.
  prefs: []
  type: TYPE_NORMAL
- en: Differences with Array interface (Version 2)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The version 2 interface was very similar. The differences were largely aesthetic.
    In particular:'
  prefs: []
  type: TYPE_NORMAL
- en: The PyArrayInterface structure had no descr member at the end (and therefore
    no flag ARR_HAS_DESCR)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `context` member of the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") (formally the `desc` member of the `PyCObject`) returned
    from `__array_struct__` was not specified. Usually, it was the object exposing
    the array (so that a reference to it could be kept and destroyed when the C-object
    was destroyed). It is now an explicit requirement that this field be used in some
    way to hold a reference to the owning object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Until August 2020, this said:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now it must be a tuple whose first element is a string with “PyArrayInterface
    Version #” and whose second element is the object exposing the array.'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: This design was retracted almost immediately after it was proposed, in <[https://mail.python.org/pipermail/numpy-discussion/2006-June/020995.html](https://mail.python.org/pipermail/numpy-discussion/2006-June/020995.html)>.
    Despite 14 years of documentation to the contrary, at no point was it valid to
    assume that `__array_interface__` capsules held this tuple content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The tuple returned from `__array_interface__['data']` used to be a hex-string
    (now it is an integer or a long integer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There was no `__array_interface__` attribute instead all of the keys (except
    for version) in the `__array_interface__` dictionary were their own attribute:
    Thus to obtain the Python-side information you had to access separately the attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`__array_data__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_shape__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_strides__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_typestr__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_descr__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_offset__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__array_mask__`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
