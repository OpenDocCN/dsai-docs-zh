["```py\nclass sympy.combinatorics.subsets.Subset(subset, superset)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.next_binary().subset\n['b']\n>>> a.prev_binary().subset\n['c'] \n```", "```py\nclassmethod bitlist_from_subset(subset, superset)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> Subset.bitlist_from_subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n'0011' \n```", "```py\nproperty cardinality\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.cardinality\n16 \n```", "```py\niterate_binary(k)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.iterate_binary(-2).subset\n['d']\n>>> a = Subset(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n>>> a.iterate_binary(2).subset\n[] \n```", "```py\niterate_graycode(k)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([1, 2, 3], [1, 2, 3, 4])\n>>> a.iterate_graycode(3).subset\n[1, 4]\n>>> a.iterate_graycode(-2).subset\n[1, 2, 4] \n```", "```py\nnext_binary()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.next_binary().subset\n['b']\n>>> a = Subset(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.next_binary().subset\n[] \n```", "```py\nnext_gray()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([1, 2, 3], [1, 2, 3, 4])\n>>> a.next_gray().subset\n[1, 3] \n```", "```py\nnext_lexicographic()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.next_lexicographic().subset\n['d']\n>>> a = Subset(['d'], ['a', 'b', 'c', 'd'])\n>>> a.next_lexicographic().subset\n[] \n```", "```py\nprev_binary()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([], ['a', 'b', 'c', 'd'])\n>>> a.prev_binary().subset\n['a', 'b', 'c', 'd']\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.prev_binary().subset\n['c'] \n```", "```py\nprev_gray()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([2, 3, 4], [1, 2, 3, 4, 5])\n>>> a.prev_gray().subset\n[2, 3, 4, 5] \n```", "```py\nprev_lexicographic()\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([], ['a', 'b', 'c', 'd'])\n>>> a.prev_lexicographic().subset\n['d']\n>>> a = Subset(['c','d'], ['a', 'b', 'c', 'd'])\n>>> a.prev_lexicographic().subset\n['c'] \n```", "```py\nproperty rank_binary\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset([], ['a','b','c','d'])\n>>> a.rank_binary\n0\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.rank_binary\n3 \n```", "```py\nproperty rank_gray\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c','d'], ['a','b','c','d'])\n>>> a.rank_gray\n2\n>>> a = Subset([2, 4, 5], [1, 2, 3, 4, 5, 6])\n>>> a.rank_gray\n27 \n```", "```py\nproperty rank_lexicographic\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.rank_lexicographic\n14\n>>> a = Subset([2, 4, 5], [1, 2, 3, 4, 5, 6])\n>>> a.rank_lexicographic\n43 \n```", "```py\nproperty size\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.size\n2 \n```", "```py\nproperty subset\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.subset\n['c', 'd'] \n```", "```py\nclassmethod subset_from_bitlist(super_set, bitlist)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> Subset.subset_from_bitlist(['a', 'b', 'c', 'd'], '0011').subset\n['c', 'd'] \n```", "```py\nclassmethod subset_indices(subset, superset)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> superset = [1, 3, 2, 5, 4]\n>>> Subset.subset_indices([3, 2, 1], superset)\n[1, 2, 0]\n>>> Subset.subset_indices([1, 6], superset)\n[]\n>>> Subset.subset_indices([], superset)\n[] \n```", "```py\nproperty superset\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.superset\n['a', 'b', 'c', 'd'] \n```", "```py\nproperty superset_size\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> a = Subset(['c', 'd'], ['a', 'b', 'c', 'd'])\n>>> a.superset_size\n4 \n```", "```py\nclassmethod unrank_binary(rank, superset)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> Subset.unrank_binary(4, ['a', 'b', 'c', 'd']).subset\n['b'] \n```", "```py\nclassmethod unrank_gray(rank, superset)\n```", "```py\n>>> from sympy.combinatorics import Subset\n>>> Subset.unrank_gray(4, ['a', 'b', 'c']).subset\n['a', 'b']\n>>> Subset.unrank_gray(0, ['a', 'b', 'c']).subset\n[] \n```", "```py\nsubsets.ksubsets(k)\n```", "```py\n>>> from sympy.combinatorics.subsets import ksubsets\n>>> list(ksubsets([1, 2, 3], 2))\n[(1, 2), (1, 3), (2, 3)]\n>>> list(ksubsets([1, 2, 3, 4, 5], 2))\n[(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4),     (2, 5), (3, 4), (3, 5), (4, 5)] \n```"]