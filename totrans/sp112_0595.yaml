- en: scipy.signal.ellip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ellip.html#scipy.signal.ellip](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ellip.html#scipy.signal.ellip)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Elliptic (Cauer) digital and analog filter design.
  prefs: []
  type: TYPE_NORMAL
- en: Design an Nth-order digital or analog elliptic filter and return the filter
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N**int'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**rp**float'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum ripple allowed below unity gain in the passband. Specified in decibels,
    as a positive number.
  prefs: []
  type: TYPE_NORMAL
- en: '**rs**float'
  prefs: []
  type: TYPE_NORMAL
- en: The minimum attenuation required in the stop band. Specified in decibels, as
    a positive number.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wn**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A scalar or length-2 sequence giving the critical frequencies. For elliptic
    filters, this is the point in the transition band at which the gain first drops
    below -*rp*.
  prefs: []
  type: TYPE_NORMAL
- en: For digital filters, *Wn* are in the same units as *fs*. By default, *fs* is
    2 half-cycles/sample, so these are normalized from 0 to 1, where 1 is the Nyquist
    frequency. (*Wn* is thus in half-cycles / sample.)
  prefs: []
  type: TYPE_NORMAL
- en: For analog filters, *Wn* is an angular frequency (e.g., rad/s).
  prefs: []
  type: TYPE_NORMAL
- en: '**btype**{‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of filter. Default is ‘lowpass’.
  prefs: []
  type: TYPE_NORMAL
- en: '**analog**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: When True, return an analog filter, otherwise a digital filter is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**{‘ba’, ‘zpk’, ‘sos’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type of output: numerator/denominator (‘ba’), pole-zero (‘zpk’), or second-order
    sections (‘sos’). Default is ‘ba’ for backwards compatibility, but ‘sos’ should
    be used for general-purpose filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the digital system.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b, a**ndarray, ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator (*b*) and denominator (*a*) polynomials of the IIR filter. Only returned
    if `output='ba'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**z, p, k**ndarray, ndarray, float'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros, poles, and system gain of the IIR filter transfer function. Only returned
    if `output='zpk'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**sos**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Second-order sections representation of the IIR filter. Only returned if `output='sos'`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ellipord`](scipy.signal.ellipord.html#scipy.signal.ellipord "scipy.signal.ellipord"),
    [`ellipap`](scipy.signal.ellipap.html#scipy.signal.ellipap "scipy.signal.ellipap")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Also known as Cauer or Zolotarev filters, the elliptical filter maximizes the
    rate of transition between the frequency response’s passband and stopband, at
    the expense of ripple in both, and increased ringing in the step response.
  prefs: []
  type: TYPE_NORMAL
- en: As *rp* approaches 0, the elliptical filter becomes a Chebyshev type II filter
    ([`cheby2`](scipy.signal.cheby2.html#scipy.signal.cheby2 "scipy.signal.cheby2")).
    As *rs* approaches 0, it becomes a Chebyshev type I filter ([`cheby1`](scipy.signal.cheby1.html#scipy.signal.cheby1
    "scipy.signal.cheby1")). As both approach 0, it becomes a Butterworth filter ([`butter`](scipy.signal.butter.html#scipy.signal.butter
    "scipy.signal.butter")).
  prefs: []
  type: TYPE_NORMAL
- en: The equiripple passband has N maxima or minima (for example, a 5th-order filter
    has 3 maxima and 2 minima). Consequently, the DC gain is unity for odd-order filters,
    or -rp dB for even-order filters.
  prefs: []
  type: TYPE_NORMAL
- en: The `'sos'` output parameter was added in 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Design an analog filter and plot its frequency response, showing the critical
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-ellip-1_00_00.png](../Images/1954199556f75396a60a6f2921840bff.png)'
  prefs: []
  type: TYPE_IMG
- en: Generate a signal made up of 10 Hz and 20 Hz, sampled at 1 kHz
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Design a digital high-pass filter at 17 Hz to remove the 10 Hz tone, and apply
    it to the signal. (It’s recommended to use second-order sections format when filtering,
    to avoid numerical error with transfer function (`ba`) format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-ellip-1_01_00.png](../Images/0b6e7f8dedf608df319d76eae3efd083.png)'
  prefs: []
  type: TYPE_IMG
