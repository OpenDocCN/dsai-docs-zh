- en: NumPy 1.20.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.20.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.20.0-notes.html](https://numpy.org/doc/1.26/release/1.20.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.20.0-notes.html](https://numpy.org/doc/1.26/release/1.20.0-notes.html)
- en: This NumPy release is the largest so made to date, some 684 PRs contributed
    by 184 people have been merged. See the list of highlights below for more details.
    The Python versions supported for this release are 3.7-3.9, support for Python
    3.6 has been dropped. Highlights are
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这次 NumPy 发布是迄今为止最大的，共有 684 个 PRs 由 184 人贡献并已合并。有关此次发布支持的 Python 版本为 3.7-3.9，不再支持
    Python 3.6。重点是
- en: Annotations for NumPy functions. This work is ongoing and improvements can be
    expected pending feedback from users.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 函数的注释。这项工作正在进行中，预计会根据用户的反馈进行改进。
- en: Wider use of SIMD to increase execution speed of ufuncs. Much work has been
    done in introducing universal functions that will ease use of modern features
    across different hardware platforms. This work is ongoing.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更广泛地使用 SIMD 以增加 ufuncs 的执行速度。在不同的硬件平台上引入了将简化对现代特性的使用的通用函数的工作。此项工作正在进行中。
- en: Preliminary work in changing the dtype and casting implementations in order
    to provide an easier path to extending dtypes. This work is ongoing but enough
    has been done to allow experimentation and feedback.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改 dtype 和转换实现方案方面做出了初步工作，以便提供更简单的路径来扩展 dtypes。这项工作正在进行中，但已经做得足够多以允许进行实验和反馈。
- en: Extensive documentation improvements comprising some 185 PR merges. This work
    is ongoing and part of the larger project to improve NumPy’s online presence and
    usefulness to new users.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量的文档改进，合并了大约 185 个 PR。这项工作正在进行中，是改进 NumPy 在线存在和对新用户有用性的较大项目的一部分。
- en: Further cleanups related to removing Python 2.7\. This improves code readability
    and removes technical debt.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步清理与移除 Python 2.7 相关的工作。这有助于提高代码的可读性并消除技术债务。
- en: Preliminary support for the upcoming Cython 3.0.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对即将推出的 Cython 3.0 的初步支持。
- en: New functions
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: The random.Generator class has a new `permuted` function.
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: random.Generator 类具有一个新的 `permuted` 函数。
- en: The new function differs from `shuffle` and `permutation` in that the subarrays
    indexed by an axis are permuted rather than the axis being treated as a separate
    1-D array for every combination of the other indexes. For example, it is now possible
    to permute the rows or columns of a 2-D array.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数与 `shuffle` 和 `permutation` 的不同之处在于，由轴索引的子数组进行了排列，而不是将轴视为其他索引的每个组合的独立 1-D
    数组。例如，现在可以对 2-D 数组的行或列进行排列。
- en: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
- en: '`sliding_window_view` provides a sliding window view for numpy arrays'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sliding_window_view` 为 numpy 数组提供了滑动窗口视图。'
- en: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view") constructs views on numpy arrays
    that offer a sliding or moving window access to the array. This allows for the
    simple implementation of certain algorithms, such as running means.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view") 构建了 numpy 数组的视图，提供了对数组的滑动或移动窗口访问。这允许简单地实现某些算法，例如运行均值。'
- en: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
- en: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") is a new user-facing function'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") 是一种新的面向用户的函数。'
- en: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") gets the resulting shape from broadcasting the given
    shape tuples against each other.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") 从对给定形状元组进行广播获取生成的形状。'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
- en: Deprecations
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Using the aliases of builtin types like `np.int` is deprecated
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已弃用使用内置类型的别名，如 `np.int`。
- en: For a long time, `np.int` has been an alias of the builtin `int`. This is repeatedly
    a cause of confusion for newcomers, and existed mainly for historic reasons.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，`np.int` 一直是内置 `int` 的别名。这一直是新手困惑的原因，在主要是出于历史原因。
- en: These aliases have been deprecated. The table below shows the full list of deprecated
    aliases, along with their exact meaning. Replacing uses of items in the first
    column with the contents of the second column will work identically and silence
    the deprecation warning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些别名已经被弃用。下表显示了被弃用别名的完整列表，以及它们的确切含义。用第一列中的项目替换为第二列的内容将完全相同，并且可以消除弃用警告。
- en: The third column lists alternative NumPy names which may occasionally be preferential.
    See also [Data types](../user/basics.types.html#basics-types) for additional details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第三列列出了偶尔更好的替代 NumPy 名称。另请参阅[数据类型](../user/basics.types.html#basics-types)以获取更多详细信息。
- en: '| Deprecated name | Identical to | NumPy scalar type names |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 弃用的名称 | 相同于 | NumPy 标量类型名称 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `numpy.bool` | `bool` | [`numpy.bool_`](../reference/arrays.scalars.html#numpy.bool_
    "numpy.bool_") |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.bool` | `bool` | [`numpy.bool_`](../reference/arrays.scalars.html#numpy.bool_
    "numpy.bool_") |'
- en: '| `numpy.int` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (default), `numpy.int64`, or `numpy.int32` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.int` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (默认), `numpy.int64`, 或 `numpy.int32` |'
- en: '| `numpy.float` | `float` | [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64"), [`numpy.float_`](../reference/arrays.scalars.html#numpy.float_
    "numpy.float_"), [`numpy.double`](../reference/arrays.scalars.html#numpy.double
    "numpy.double") (equivalent) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.float` | `float` | [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64"), [`numpy.float_`](../reference/arrays.scalars.html#numpy.float_
    "numpy.float_"), [`numpy.double`](../reference/arrays.scalars.html#numpy.double
    "numpy.double") (等效) |'
- en: '| `numpy.complex` | `complex` | [`numpy.complex128`](../reference/arrays.scalars.html#numpy.complex128
    "numpy.complex128"), [`numpy.complex_`](../reference/arrays.scalars.html#numpy.complex_
    "numpy.complex_"), [`numpy.cdouble`](../reference/arrays.scalars.html#numpy.cdouble
    "numpy.cdouble") (equivalent) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.complex` | `complex` | [`numpy.complex128`](../reference/arrays.scalars.html#numpy.complex128
    "numpy.complex128"), [`numpy.complex_`](../reference/arrays.scalars.html#numpy.complex_
    "numpy.complex_"), [`numpy.cdouble`](../reference/arrays.scalars.html#numpy.cdouble
    "numpy.cdouble") (等效) |'
- en: '| `numpy.object` | `object` | [`numpy.object_`](../reference/arrays.scalars.html#numpy.object_
    "numpy.object_") |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.object` | `object` | [`numpy.object_`](../reference/arrays.scalars.html#numpy.object_
    "numpy.object_") |'
- en: '| `numpy.str` | `str` | [`numpy.str_`](../reference/arrays.scalars.html#numpy.str_
    "numpy.str_") |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.str` | `str` | [`numpy.str_`](../reference/arrays.scalars.html#numpy.str_
    "numpy.str_") |'
- en: '| `numpy.long` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (C `long`), [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong") (largest integer type) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.long` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (C `long`), [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong") (最大的整数类型) |'
- en: '| `numpy.unicode` | `str` | [`numpy.unicode_`](../reference/arrays.scalars.html#numpy.unicode_
    "numpy.unicode_") |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.unicode` | `str` | [`numpy.unicode_`](../reference/arrays.scalars.html#numpy.unicode_
    "numpy.unicode_") |'
- en: To give a clear guideline for the vast majority of cases, for the types `bool`,
    `object`, `str` (and `unicode`) using the plain version is shorter and clear,
    and generally a good replacement. For `float` and `complex` you can use `float64`
    and `complex128` if you wish to be more explicit about the precision.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为绝大多数情况提供明确的指导，对于类型 `bool`, `object`, `str`（以及 `unicode`），使用普通版本会更简短、清晰，通常是很好的替代方式。对于
    `float` 和 `complex`，如果您希望更明确地表示精度，可以使用 `float64` 和 `complex128`。
- en: 'For `np.int` a direct replacement with `np.int_` or `int` is also good and
    will not change behavior, but the precision will continue to depend on the computer
    and operating system. If you want to be more explicit and review the current use,
    you have the following alternatives:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `np.int`，直接用 `np.int_` 或 `int` 替换也很好，并且不会改变行为，但精度仍然取决于计算机和操作系统。如果您想要更明确地审查并调查当前使用情况，您有以下替代方案：
- en: '`np.int64` or `np.int32` to specify the precision exactly. This ensures that
    results cannot depend on the computer or operating system.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 `np.int64` 或 `np.int32` 来精确指定精度。这确保了结果不会取决于计算机或操作系统。
- en: '`np.int_` or `int` (the default), but be aware that it depends on the computer
    and operating system.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int_` 或 `int`（默认），但请注意这取决于计算机和操作系统。'
- en: 'The C types: `np.cint` (int), `np.int_` (long), `np.longlong`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C 类型：`np.cint` (int), `np.int_` (long), `np.longlong`。
- en: '`np.intp` which is 32bit on 32bit machines 64bit on 64bit machines. This can
    be the best type to use for indexing.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.intp` 在32位机器上为32位，在64位机器上为64位。这可能是最好的索引使用类型。'
- en: 'When used with `np.dtype(...)` or `dtype=...` changing it to the NumPy name
    as mentioned above will have no effect on the output. If used as a scalar with:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`np.dtype(...)`或`dtype=...`一起使用时，将其更改为上述所提及的NumPy名称对输出没有影响。如果用作标量使用：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: changing it can subtly change the result. In this case, the Python version `float(123)`
    or `int(12.)` is normally preferable, although the NumPy version may be useful
    for consistency with NumPy arrays (for example, NumPy behaves differently for
    things like division by zero).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 改变它可能会微妙地改变结果。在这种情况下，通常更喜欢Python版本的`float(123)`或`int(12.)`，尽管NumPy版本可能对于与NumPy数组的一致性而言可能更有用（例如，对于诸如零除法之类的事情，NumPy会有不同的行为）。
- en: ([gh-14882](https://github.com/numpy/numpy/pull/14882))
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-14882](https://github.com/numpy/numpy/pull/14882))
- en: Passing `shape=None` to functions with a non-optional shape argument is deprecated
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向带有非可选形状参数的函数传递`shape=None`是被弃用的
- en: Previously, this was an alias for passing `shape=()`. This deprecation is emitted
    by *PyArray_IntpConverter* in the C API. If your API is intended to support passing
    `None`, then you should check for `None` prior to invoking the converter, so as
    to be able to distinguish `None` and `()`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这是传递`shape=()`的别名。这是由C API中的*PyArray_IntpConverter*发出的弃用警告。如果您的API意图支持传递`None`，那么您应该在调用转换器之前检查`None`，以便能够区分`None`和`()`。
- en: ([gh-15886](https://github.com/numpy/numpy/pull/15886))
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15886](https://github.com/numpy/numpy/pull/15886))
- en: Indexing errors will be reported even when index result is empty
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即使索引结果为空，也会报告索引错误
- en: 'In the future, NumPy will raise an IndexError when an integer array index contains
    out of bound values even if a non-indexed dimension is of length 0\. This will
    now emit a DeprecationWarning. This can happen when the array is previously empty,
    or an empty slice is involved:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 今后，当整数数组索引包含超出边界值时，NumPy将引发IndexError，即使未索引的维度长度为0。这将会发出DeprecationWarning。当数组之前为空，或者涉及一个空切片时，就会发生这种情况：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Previously the non-empty index `[20]` was not checked for correctness. It will
    now be checked causing a deprecation warning which will be turned into an error.
    This also applies to assignments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，非空索引`[20]`未经检查正确性。现在将会检查并引发弃用警告，并将其转变为错误。这也适用于赋值。
- en: ([gh-15900](https://github.com/numpy/numpy/pull/15900))
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15900](https://github.com/numpy/numpy/pull/15900))
- en: Inexact matches for `mode` and `searchside` are deprecated
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于`mode`和`searchside`不精确匹配是被弃用的
- en: 'Inexact and case insensitive matches for `mode` and `searchside` were valid
    inputs earlier and will give a DeprecationWarning now. For example, below are
    some example usages which are now deprecated and will give a DeprecationWarning:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，对`mode`和`searchside`的不精确和不区分大小写的匹配是有效输入，并且现在会发出DeprecationWarning。例如，以下是现在已弃用并将发出DeprecationWarning的一些示例用法：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ([gh-16056](https://github.com/numpy/numpy/pull/16056))
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16056](https://github.com/numpy/numpy/pull/16056))
- en: Deprecation of *numpy.dual*
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*numpy.dual*已弃用'
- en: The module *numpy.dual* is deprecated. Instead of importing functions from *numpy.dual*,
    the functions should be imported directly from NumPy or SciPy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 模块*numpy.dual*已被弃用。不应再从*numpy.dual*导入函数，而应该直接从NumPy或SciPy导入函数。
- en: ([gh-16156](https://github.com/numpy/numpy/pull/16156))
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16156](https://github.com/numpy/numpy/pull/16156))
- en: '`outer` and `ufunc.outer` deprecated for matrix'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`outer`和`ufunc.outer`对矩阵是被弃用的'
- en: '`np.matrix` use with [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer") or generic ufunc outer calls such as `numpy.add.outer`. Previously,
    matrix was converted to an array here. This will not be done in the future requiring
    a manual conversion to arrays.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.matrix`在[`outer`](../reference/generated/numpy.outer.html#numpy.outer "numpy.outer")或通用ufunc
    outer调用（例如`numpy.add.outer`）中的使用。以前，矩阵在此处被转换为数组。今后将不再这样做，需要手动将其转换为数组。'
- en: ([gh-16232](https://github.com/numpy/numpy/pull/16232))
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16232](https://github.com/numpy/numpy/pull/16232))
- en: Further Numeric Style types Deprecated
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多数字风格类型被弃用
- en: The remaining numeric-style type codes `Bytes0`, `Str0`, `Uint32`, `Uint64`,
    and `Datetime64` have been deprecated. The lower-case variants should be used
    instead. For bytes and string `"S"` and `"U"` are further alternatives.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的数字风格类型代码`Bytes0`、`Str0`、`Uint32`、`Uint64`和`Datetime64`都已被弃用。应该改用小写变体。对于字节和字符串，`"S"`和`"U"`也是可选的替代方案。
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
- en: The `ndincr` method of `ndindex` is deprecated
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndindex`的`ndincr`方法已被弃用'
- en: The documentation has warned against using this function since NumPy 1.8. Use
    `next(it)` instead of `it.ndincr()`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从NumPy 1.8开始，文档已警告不要使用此功能。应该使用`next(it)`代替`it.ndincr()`。
- en: ([gh-17233](https://github.com/numpy/numpy/pull/17233))
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17233](https://github.com/numpy/numpy/pull/17233))
- en: ArrayLike objects which do not define `__len__` and `__getitem__`
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未定义`__len__`和`__getitem__`的ArrayLike对象
- en: Objects which define one of the protocols `__array__`, `__array_interface__`,
    or `__array_struct__` but are not sequences (usually defined by having a `__len__`
    and `__getitem__`) will behave differently during array-coercion in the future.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`__array__`、`__array_interface__`或`__array_struct__`协议之一但不是序列（通常定义为有`__len__`和`__getitem__`的对象）的对象，在将来进行数组强制转换时将会有不同的行为。
- en: 'When nested inside sequences, such as `np.array([array_like])`, these were
    handled as a single Python object rather than an array. In the future they will
    behave identically to:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当嵌套在序列中，例如`np.array([array_like])`，这些内容将被处理为单个Python对象而不是数组。将来它们将与以下内容行为一致：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This change should only have an effect if `np.array(array_like)` is not 0-D.
    The solution to this warning may depend on the object:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`np.array(array_like)`不是0维的，这种变更只会对此警告产生影响。解决此警告可能取决于对象：
- en: Some array-likes may expect the new behaviour, and users can ignore the warning.
    The object can choose to expose the sequence protocol to opt-in to the new behaviour.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些数组样式可能会期望新的行为，而用户可以忽略警告。对象可以选择公开序列协议以选择新行为。
- en: For example, `shapely` will allow conversion to an array-like using `line.coords`
    rather than `np.asarray(line)`. Users may work around the warning, or use the
    new convention when it becomes available.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，`shapely`将允许使用`line.coords`而不是`np.asarray(line)`进行类似数组的转换。用户可以绕过警告，或者在新约定可用时使用它。
- en: Unfortunately, using the new behaviour can only be achieved by calling `np.array(array_like)`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，只能通过调用`np.array(array_like)`来使用新行为。
- en: 'If you wish to ensure that the old behaviour remains unchanged, please create
    an object array and then fill it explicitly, for example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望确保旧行为保持不变，请首先创建一个对象数组，然后显式地填充它，例如：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will ensure NumPy knows to not enter the array-like and use it as a object
    instead.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以确保NumPy知道不要将其视为数组，而是将其视为对象。
- en: ([gh-17973](https://github.com/numpy/numpy/pull/17973))
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17973](https://github.com/numpy/numpy/pull/17973))
- en: Future Changes
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来变化
- en: Arrays cannot be using subarray dtypes
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组不能使用子数组类型
- en: Array creation and casting using `np.array(arr, dtype)` and `arr.astype(dtype)`
    will use different logic when `dtype` is a subarray dtype such as `np.dtype("(2)i,")`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`np.array(arr, dtype)`和`arr.astype(dtype)`进行数组创建和转换将在`dtype`为诸如`np.dtype("(2)i,")`的子数组dtype时使用不同的逻辑。
- en: 'For such a `dtype` the following behaviour is true:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的`dtype`，以下行为是正确的：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But `res` is filled using the logic:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但`res`使用以下逻辑填充：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'which uses incorrect broadcasting (and often leads to an error). In the future,
    this will instead cast each element individually, leading to the same result as:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用不正确的广播（通常会导致错误）。将来，这将分别转换每个元素，导致与以下结果相同：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Which can normally be used to opt-in to the new behaviour.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常可以用于选择新行为。
- en: This change does not affect `np.array(list, dtype="(2)i,")` unless the `list`
    itself includes at least one array. In particular, the behaviour is unchanged
    for a list of tuples.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改不会影响`np.array(list, dtype="(2)i,")`，除非`list`本身包含至少一个数组。特别是，对于元组列表，行为不变。
- en: ([gh-17596](https://github.com/numpy/numpy/pull/17596))
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17596](https://github.com/numpy/numpy/pull/17596))
- en: Expired deprecations
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已过期的停用内容
- en: The deprecation of numeric style type-codes `np.dtype("Complex64")` (with upper
    case spelling), is expired. `"Complex64"` corresponded to `"complex128"` and `"Complex32"`
    corresponded to `"complex64"`.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值样式类型代码`np.dtype("Complex64")`（大写拼写）已过期。`"Complex64"`对应于`"complex128"`，而`"Complex32"`对应于`"complex64"`。
- en: The deprecation of `np.sctypeNA` and `np.typeNA` is expired. Both have been
    removed from the public API. Use `np.typeDict` instead.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.sctypeNA`和`np.typeNA`的停用期已过。它们已从公共API中删除。请使用`np.typeDict`代替。'
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
- en: The 14-year deprecation of `np.ctypeslib.ctypes_load_library` is expired. Use
    [`load_library`](../reference/routines.ctypeslib.html#numpy.ctypeslib.load_library
    "numpy.ctypeslib.load_library") instead, which is identical.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.ctypeslib.ctypes_load_library`的14年停用期已过。请使用[`load_library`](../reference/routines.ctypeslib.html#numpy.ctypeslib.load_library
    "numpy.ctypeslib.load_library")，它与原功能完全相同。'
- en: ([gh-17116](https://github.com/numpy/numpy/pull/17116))
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-17116](https://github.com/numpy/numpy/pull/17116))
- en: Financial functions removed
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除财务功能
- en: In accordance with NEP 32, the financial functions are removed from NumPy 1.20\.
    The functions that have been removed are `fv`, `ipmt`, `irr`, `mirr`, `nper`,
    `npv`, `pmt`, `ppmt`, `pv`, and `rate`. These functions are available in the [numpy_financial](https://pypi.org/project/numpy-financial)
    library.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 符合NEP 32的规定，NumPy 1.20将删除财务函数。被删除的函数有`fv`、`ipmt`、`irr`、`mirr`、`nper`、`npv`、`pmt`、`ppmt`、`pv`和`rate`。这些函数在[numpy_financial](https://pypi.org/project/numpy-financial)库中可用。
- en: ([gh-17067](https://github.com/numpy/numpy/pull/17067))
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17067](https://github.com/numpy/numpy/pull/17067))
- en: Compatibility notes
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: '`isinstance(dtype, np.dtype)` and not `type(dtype) is not np.dtype`'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`isinstance(dtype, np.dtype)`而不是`type(dtype) is not np.dtype`'
- en: NumPy dtypes are not direct instances of `np.dtype` anymore. Code that may have
    used `type(dtype) is np.dtype` will always return `False` and must be updated
    to use the correct version `isinstance(dtype, np.dtype)`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的数据类型现在不再是`np.dtype`的直接实例。可能使用了`type(dtype) is np.dtype`的代码将始终返回`False`，必须更新为使用正确的版本`isinstance(dtype,
    np.dtype)`。
- en: This change also affects the C-side macro `PyArray_DescrCheck` if compiled against
    a NumPy older than 1.16.6\. If code uses this macro and wishes to compile against
    an older version of NumPy, it must replace the macro (see also [C API changes](#c-api-changes)
    section).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改还会影响兼容性方面的宏`PyArray_DescrCheck`，如果针对的是早于1.16.6版的NumPy进行编译。如果代码使用了该宏，并希望针对旧版本的NumPy进行编译，必须替换该宏（也见[C
    API changes](#c-api-changes)部分）。
- en: Same kind casting in concatenate with `axis=None`
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`axis=None`情况下concatenate中的same kind转换
- en: When [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") is called with `axis=None`, the flattened arrays were cast
    with `unsafe`. Any other axis choice uses “same kind”. That different default
    has been deprecated and “same kind” casting will be used instead. The new `casting`
    keyword argument can be used to retain the old behaviour.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当以`axis=None`调用[`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate")时，被展平的数组会使用`unsafe`进行转换。任何其他轴选择都会使用“same kind”。这种不同的默认值已经被弃用，将使用“same
    kind”转换。新的`casting`关键字参数可用于保留旧的行为。
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
- en: NumPy Scalars are cast when assigned to arrays
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当NumPy标量分配给数组时会发生强制转换
- en: 'When creating or assigning to arrays, in all relevant cases NumPy scalars will
    now be cast identically to NumPy arrays. In particular this changes the behaviour
    in some cases which previously raised an error:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建或分配数组时，在所有相关情况下，NumPy标量现在将被与NumPy数组完全相同地进行强制转换。特别是这将改变一些以前会引发错误的情况的行为：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'will succeed and return an undefined result (usually the smallest possible
    integer). This also affects assignments:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将会成功，并返回一个未定义的结果（通常是可能的最小整数）。这也会影响分配：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At this time, NumPy retains the behaviour for:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，NumPy保留以下内容的行为：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above changes do not affect Python scalars:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以上更改不会影响Python标量：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'remains unaffected (`np.nan` is a Python `float`, not a NumPy one). Unlike
    signed integers, unsigned integers do not retain this special case, since they
    always behaved more like casting. The following code stops raising an error:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 保持不变（`np.nan`是Python的`float`，而不是NumPy的）。与有符号整数不同，无符号整数不保留这种特殊情况，因为它们一直更像是强制转换。以下代码不再引发错误：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To avoid backward compatibility issues, at this time assignment from `datetime64`
    scalar to strings of too short length remains supported. This means that `np.asarray(np.datetime64("2020-10-10"),
    dtype="S5")` succeeds now, when it failed before. In the long term this may be
    deprecated or the unsafe cast may be allowed generally to make assignment of arrays
    and scalars behave consistently.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为避免向后兼容性问题，此时从`datetime64`标量分配给长度过短的字符串仍然受支持。这意味着`np.asarray(np.datetime64("2020-10-10"),
    dtype="S5")`现在可以成功，而之前不行。从长远来看，这可能会被弃用，或者不安全的强制转换可能被普遍允许，以使数组和标量的分配行为一致。
- en: Array coercion changes when Strings and other types are mixed
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在混合字符串和其他类型时，数组的强制转换发生了变化
- en: 'When strings and other types are mixed, such as:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当字符串和其他类型混合时，例如：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The results will change, which may lead to string dtypes with longer strings
    in some cases. In particularly, if `dtype="S"` is not provided any numerical value
    will lead to a string results long enough to hold all possible numerical values.
    (e.g. “S32” for floats). Note that you should always provide `dtype="S"` when
    converting non-strings to strings.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将发生变化，这可能导致在某些情况下具有更长字符串的字符串数据类型。特别是，如果未提供`dtype="S"`，任何数值都将导致字符串足够长以容纳所有可能的数值（例如，“S32”用于浮点数）。请注意，当将非字符串转换为字符串时，应始终提供`dtype="S"`。
- en: 'If `dtype="S"` is provided the results will be largely identical to before,
    but NumPy scalars (not a Python float like `1.0`), will still enforce a uniform
    string length:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了 `dtype="S"`，结果将与以前大体相同，但是 NumPy 标量类型（不是像 `1.0` 这样的 Python 浮点数）仍将强制执行统一的字符串长度：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Previously the first version gave the same result as the second.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的第一个版本给出与第二个版本相同的结果。
- en: Array coercion restructure
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组强制转换重构
- en: 'Array coercion has been restructured. In general, this should not affect users.
    In extremely rare corner cases where array-likes are nested:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 数组强制转换已重构。一般情况下，这不应影响用户。在极为罕见的角落情况下，其中类数组对象是嵌套的：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Things will now be more consistent with:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将更一致地处理：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This can subtly change output for some badly defined array-likes. One example
    for this are array-like objects which are not also sequences of matching shape.
    In NumPy 1.20, a warning will be given when an array-like is not also a sequence
    (but behaviour remains identical, see deprecations). If an array like is also
    a sequence (defines `__getitem__` and `__len__`) NumPy will now only use the result
    given by `__array__`, `__array_interface__`, or `__array_struct__`. This will
    result in differences when the (nested) sequence describes a different shape.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会微妙地改变一些定义不良的类数组对象的输出。其中一个例子是不是也是匹配形状的序列的类数组对象。在 NumPy 1.20 中，当类数组对象不是序列时将给出警告（但行为保持不变，请参阅弃用）。如果类数组对象也是序列（定义了
    `__getitem__` 和 `__len__`），NumPy 现在将仅使用由 `__array__`，`__array_interface__` 或 `__array_struct__`
    给出的结果。当（嵌套的）序列描述不同的形状时，这将导致差异。
- en: ([gh-16200](https://github.com/numpy/numpy/pull/16200))
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16200](https://github.com/numpy/numpy/pull/16200))
- en: Writing to the result of [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") will export readonly buffers
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入[`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") 的结果将导出只读缓冲区
- en: In NumPy 1.17 [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") started warning when the resulting array was written
    to. This warning was skipped when the array was used through the buffer interface
    (e.g. `memoryview(arr)`). The same thing will now occur for the two protocols
    `__array_interface__`, and `__array_struct__` returning read-only buffers instead
    of giving a warning.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.17 中 [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") 开始在写入结果数组时发出警告。在通过缓冲器接口使用数组时（例如 `memoryview(arr)`），将跳过此警告。现在对于返回只读缓冲器的两个协议
    `__array_interface__` 和 `__array_struct__` 也将发生相同的情况，而不是发出警告。
- en: ([gh-16350](https://github.com/numpy/numpy/pull/16350))
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16350](https://github.com/numpy/numpy/pull/16350))
- en: Numeric-style type names have been removed from type dictionaries
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字样式的类型名称已从类型字典中移除
- en: To stay in sync with the deprecation for `np.dtype("Complex64")` and other numeric-style
    (capital case) types. These were removed from `np.sctypeDict` and `np.typeDict`.
    You should use the lower case versions instead. Note that `"Complex64"` corresponds
    to `"complex128"` and `"Complex32"` corresponds to `"complex64"`. The numpy style
    (new) versions, denote the full size and not the size of the real/imaginary part.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 `np.dtype("Complex64")` 和其他数字样式（大写）类型的弃用保持同步。这些已从 `np.sctypeDict` 和 `np.typeDict`
    中移除。您应该改用小写版本。请注意，`"Complex64"` 对应于`"complex128"`，`"Complex32"` 对应于`"complex64"`。NumPy样式（新版本）表示完整大小而不是实部/虚部的大小。
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
- en: The `operator.concat` function now raises TypeError for array arguments
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`operator.concat` 函数现在对数组参数引发 `TypeError` 异常'
- en: The previous behavior was to fall back to addition and add the two arrays, which
    was thought to be unexpected behavior for a concatenation function.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的行为是退回到加法并加上这两个数组，这被认为是连接函数的意外行为。
- en: ([gh-16570](https://github.com/numpy/numpy/pull/16570))
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16570](https://github.com/numpy/numpy/pull/16570))
- en: '`nickname` attribute removed from ABCPolyBase'
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nickname` 属性已从 ABCPolyBase 中移除'
- en: An abstract property `nickname` has been removed from `ABCPolyBase` as it was
    no longer used in the derived convenience classes. This may affect users who have
    derived classes from `ABCPolyBase` and overridden the methods for representation
    and display, e.g. `__str__`, `__repr__`, `_repr_latex`, etc.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象属性 `nickname` 已从 `ABCPolyBase` 中移除，因为它已不再在派生的便利类中使用。这可能会影响从 `ABCPolyBase`
    派生类并覆盖表示和显示方法的用户，例如 `__str__`，`__repr__`，`_repr_latex` 等。
- en: ([gh-16589](https://github.com/numpy/numpy/pull/16589))
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16589](https://github.com/numpy/numpy/pull/16589))
- en: '`float->timedelta` and `uint64->timedelta` promotion will raise a TypeError'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`float->timedelta`和`uint64->timedelta`提升将引发一个TypeError'
- en: Float and timedelta promotion consistently raises a TypeError. `np.promote_types("float32",
    "m8")` aligns with `np.promote_types("m8", "float32")` now and both raise a TypeError.
    Previously, `np.promote_types("float32", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数和时间增长一致地引发TypeError。现在`np.promote_types("float32", "m8")`与`np.promote_types("m8",
    "float32")`一致，并且都会引发一个TypeError。以前，`np.promote_types("float32", "m8")`返回`"m8"`被认为是一个错误。
- en: Uint64 and timedelta promotion consistently raises a TypeError. `np.promote_types("uint64",
    "m8")` aligns with `np.promote_types("m8", "uint64")` now and both raise a TypeError.
    Previously, `np.promote_types("uint64", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Uint64和时间增长现在一致地引发TypeError。现在`np.promote_types("uint64", "m8")`与`np.promote_types("m8",
    "uint64")`一致，并且都会引发一个TypeError。以前，`np.promote_types("uint64", "m8")`返回`"m8"`被认为是一个错误。
- en: ([gh-16592](https://github.com/numpy/numpy/pull/16592))
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16592](https://github.com/numpy/numpy/pull/16592))
- en: '`numpy.genfromtxt` now correctly unpacks structured arrays'
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.genfromtxt`现在可以正确地解包结构化数组'
- en: 'Previously, [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") failed to unpack if it was called with `unpack=True` and a
    structured datatype was passed to the `dtype` argument (or `dtype=None` was passed
    and a structured datatype was inferred). For example:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当使用`unpack=True`并且将结构化数据类型传递给`dtype`参数（或者传递`dtype=None`并且推断出结构化数据类型）时，[`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")会解包失败。例如：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Structured arrays will now correctly unpack into a list of arrays, one for
    each column:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组现在将正确地解包为一个数组列表，每个列一个：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ([gh-16650](https://github.com/numpy/numpy/pull/16650))
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16650](https://github.com/numpy/numpy/pull/16650))
- en: '`mgrid`, `r_`, etc. consistently return correct outputs for non-default precision
    input'
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`mgrid`、`r_`等现在对于非默认精度输入始终返回正确的输出'
- en: Previously, `np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]` and
    `np.r_[0:10:np.complex64(3j)]` failed to return meaningful output. This bug potentially
    affects [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid"),
    [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), and [`c_`](../reference/generated/numpy.c_.html#numpy.c_
    "numpy.c_") when an input with dtype other than the default `float64` and `complex128`
    and equivalent Python types were used. The methods have been fixed to handle varying
    precision correctly.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]`和`np.r_[0:10:np.complex64(3j)]`无法返回有意义的输出。这个bug可能会影响到[`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid
    "numpy.mgrid")、[`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid")、[`r_`](../reference/generated/numpy.r_.html#numpy.r_
    "numpy.r_")、以及[`c_`](../reference/generated/numpy.c_.html#numpy.c_ "numpy.c_")的输入，当使用的dtype不是默认的`float64`和`complex128`以及等效的Python类型时。这些方法已经被修复，以正确处理不同的精度。
- en: ([gh-16815](https://github.com/numpy/numpy/pull/16815))
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16815](https://github.com/numpy/numpy/pull/16815))
- en: Boolean array indices with mismatching shapes now properly give `IndexError`
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有不匹配形状的布尔数组索引现在会正确地给出`IndexError`
- en: Previously, if a boolean array index matched the size of the indexed array but
    not the shape, it was incorrectly allowed in some cases. In other cases, it gave
    an error, but the error was incorrectly a `ValueError` with a message about broadcasting
    instead of the correct `IndexError`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，如果布尔数组索引与被索引数组的大小匹配但形状不匹配，则在某些情况下会被错误地允许。在其他情况下，它会出错，但错误会不正确地是关于广播的`ValueError`，而不是正确的`IndexError`。
- en: 'For example, the following used to incorrectly give `ValueError: operands could
    not be broadcast together with shapes (2,2) (1,4)`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，以下内容以前会错误地给出`ValueError: operands could not be broadcast together with shapes
    (2,2) (1,4)`：'
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And the following used to incorrectly return `array([], dtype=float64)`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，以下内容会错误地返回`array([], dtype=float64)`：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Both now correctly give `IndexError: boolean index did not match indexed array
    along dimension 0; dimension is 2 but corresponding boolean dimension is 1`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '现在都可以正确地给出`IndexError: boolean index did not match indexed array along dimension
    0; dimension is 2 but corresponding boolean dimension is 1`。'
- en: ([gh-17010](https://github.com/numpy/numpy/pull/17010))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17010](https://github.com/numpy/numpy/pull/17010))
- en: Casting errors interrupt Iteration
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强制转换错误中断迭代
- en: When iterating while casting values, an error may stop the iteration earlier
    than before. In any case, a failed casting operation always returned undefined,
    partial results. Those may now be even more undefined and partial. For users of
    the `NpyIter` C-API such cast errors will now cause the *iternext()* function
    to return 0 and thus abort iteration. Currently, there is no API to detect such
    an error directly. It is necessary to check `PyErr_Occurred()`, which may be problematic
    in combination with `NpyIter_Reset`. These issues always existed, but new API
    could be added if required by users.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代时进行值转换，错误可能会比以前导致迭代提前停止。在任何情况下，失败的类型转换操作总是返回未定义的部分结果。现在可能更加未定义和部分。对于使用`NpyIter`
    C-API的用户，这样的类型转换错误现在会导致*iternext()*函数返回0，因此中止迭代。目前，没有API直接检测这样的错误。需要检查`PyErr_Occurred()`，这可能在与`NpyIter_Reset`结合时有问题。这些问题一直存在，但如果用户需要，可以添加新的API。
- en: ([gh-17029](https://github.com/numpy/numpy/pull/17029))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17029](https://github.com/numpy/numpy/pull/17029))
- en: f2py generated code may return unicode instead of byte strings
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py生成的代码可能返回unicode而不是字节字符串
- en: Some byte strings previously returned by f2py generated code may now be unicode
    strings. This results from the ongoing Python2 -> Python3 cleanup.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 之前由f2py生成的代码返回的一些字节字符串现在可能是unicode字符串。这是由正在进行的Python2到Python3清理导致的。
- en: ([gh-17068](https://github.com/numpy/numpy/pull/17068))
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17068](https://github.com/numpy/numpy/pull/17068))
- en: The first element of the `__array_interface__["data"]` tuple must be an integer
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_interface__["data"]`元组的第一个元素必须是整数'
- en: This has been the documented interface for many years, but there was still code
    that would accept a byte string representation of the pointer address. That code
    has been removed, passing the address as a byte string will now raise an error.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经是多年的文档接口，但仍然有代码会接受指针地址的字节字符串表示。该代码已被移除，传递地址作为字节字符串现在会引发错误。
- en: ([gh-17241](https://github.com/numpy/numpy/pull/17241))
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17241](https://github.com/numpy/numpy/pull/17241))
- en: poly1d respects the dtype of all-zero argument
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`poly1d`遵循所有零参数的dtype'
- en: Previously, constructing an instance of `poly1d` with all-zero coefficients
    would cast the coefficients to `np.float64`. This affected the output dtype of
    methods which construct `poly1d` instances internally, such as `np.polymul`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，使用所有零系数构造`poly1d`的实例会将系数转换为`np.float64`。这会影响内部构造`poly1d`实例的方法的输出dtype，比如`np.polymul`。
- en: ([gh-17577](https://github.com/numpy/numpy/pull/17577))
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17577](https://github.com/numpy/numpy/pull/17577))
- en: The numpy.i file for swig is Python 3 only.
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: swig的numpy.i文件现在只支持Python 3。
- en: Uses of Python 2.7 C-API functions have been updated to Python 3 only. Users
    who need the old version should take it from an older version of NumPy.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.7的C-API函数已经更新为只支持Python 3。需要旧版本的用户应该从旧版本的NumPy获取。
- en: ([gh-17580](https://github.com/numpy/numpy/pull/17580))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17580](https://github.com/numpy/numpy/pull/17580))
- en: Void dtype discovery in `np.array`
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.array`的空dtype检测'
- en: 'In calls using `np.array(..., dtype="V")`, `arr.astype("V")`, and similar a
    TypeError will now be correctly raised unless all elements have the identical
    void length. An example for this is:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`np.array(..., dtype="V")`、`arr.astype("V")`等调用时，除非所有元素的void长度相同，否则将正确引发TypeError。一个例子是：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Which previously returned an array with dtype `"V2"` which cannot represent
    `b"1"` faithfully.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 之前返回的数组的dtype是`"V2"`,不能准确表示`b"1"`。
- en: ([gh-17706](https://github.com/numpy/numpy/pull/17706))
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17706](https://github.com/numpy/numpy/pull/17706))
- en: C API changes
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API的变化
- en: The `PyArray_DescrCheck` macro is modified
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`PyArray_DescrCheck`宏已被修改'
- en: 'The `PyArray_DescrCheck` macro has been updated since NumPy 1.16.6 to be:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArray_DescrCheck`宏自NumPy 1.16.6以来已经更新为:'
- en: '[PRE23]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Starting with NumPy 1.20 code that is compiled against an earlier version will
    be API incompatible with NumPy 1.20. The fix is to either compile against 1.16.6
    (if the NumPy 1.16 release is the oldest release you wish to support), or manually
    inline the macro by replacing it with the new definition:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 从NumPy 1.20开始，针对先前版本编译的代码将与NumPy 1.20不兼容。修复的方法是要么针对1.16.6进行编译（如果您希望支持的最旧版本为NumPy
    1.16），要么通过将其替换为新定义来手动内联宏：
- en: '[PRE24]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: which is compatible with all NumPy versions.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有NumPy版本兼容。
- en: Size of `np.ndarray` and `np.void_` changed
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ndarray`和`np.void_`的大小变化'
- en: 'The size of the `PyArrayObject` and `PyVoidScalarObject` structures have changed.
    The following header definition has been removed:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyArrayObject`和`PyVoidScalarObject`结构的大小已经改变。已删除以下头文件定义：'
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'since the size must not be considered a compile time constant: it will change
    for different runtime versions of NumPy.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大小不应被视为编译时常量：对于NumPy的不同运行时版本，它会改变。
- en: The most likely relevant use are potential subclasses written in C which will
    have to be recompiled and should be updated. Please see the documentation for
    [`PyArrayObject`](../reference/c-api/types-and-structures.html#c.PyArrayObject
    "PyArrayObject") for more details and contact the NumPy developers if you are
    affected by this change.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最可能相关的用途是用C编写的潜在子类，它们将需要重新编译并应该进行更新。请参阅[`PyArrayObject`](../reference/c-api/types-and-structures.html#c.PyArrayObject
    "PyArrayObject")的文档以获取更多详细信息，并如果受到此更改的影响，请联系NumPy开发人员。
- en: NumPy will attempt to give a graceful error but a program expecting a fixed
    structure size may have undefined behaviour and likely crash.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy将尝试给出优雅的错误，但一个期望固定结构大小的程序可能会有未定义的行为并可能崩溃。
- en: ([gh-16938](https://github.com/numpy/numpy/pull/16938))
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16938](https://github.com/numpy/numpy/pull/16938))
- en: New Features
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: '`where` keyword argument for `numpy.all` and `numpy.any` functions'
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.all`和`numpy.any`函数的`where`关键参数'
- en: The keyword argument `where` is added and allows to only consider specified
    elements or subaxes from an array in the Boolean evaluation of `all` and `any`.
    This new keyword is available to the functions `all` and `any` both via `numpy`
    directly or in the methods of `numpy.ndarray`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`where`关键参数被添加，允许在布尔评估`all`和`any`时只考虑数组中指定的元素或子轴。这个新关键字可通过`numpy`的`all`和`any`函数直接使用或在`numpy.ndarray`的方法中使用。'
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 任意可广播的布尔数组或标量都可以设置为`where`。如果用户未设置`where`，默认为`True`，以评估数组中的所有元素的函数。示例在函数的文档中给出。
- en: '`where` keyword argument for `numpy` functions `mean`, `std`, `var`'
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy`函数`mean`、`std`、`var`的`where`关键参数'
- en: The keyword argument `where` is added and allows to limit the scope in the calculation
    of `mean`, `std` and `var` to only a subset of elements. It is available both
    via `numpy` directly or in the methods of `numpy.ndarray`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`where`关键参数，允许将`mean`、`std`和`var`的计算范围限制为仅一部分元素。可直接通过`numpy`使用，也可在`numpy.ndarray`的方法中使用。
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 任意可广播的布尔数组或标量都可以设置为`where`。如果用户未设置`where`，默认为`True`，以评估数组中的所有元素的函数。示例在函数的文档中给出。
- en: ([gh-15852](https://github.com/numpy/numpy/pull/15852))
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15852](https://github.com/numpy/numpy/pull/15852))
- en: '`norm=backward`, `forward` keyword options for `numpy.fft` functions'
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`norm=backward`、`forward`关键选项用于`numpy.fft`函数'
- en: The keyword argument option `norm=backward` is added as an alias for `None`
    and acts as the default option; using it has the direct transforms unscaled and
    the inverse transforms scaled by `1/n`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 关键参数选项`norm=backward`被添加作为`None`的别名，并作为默认选项；使用它会使直接转换不经缩放，而逆转换经缩放乘以`1/n`。
- en: Using the new keyword argument option `norm=forward` has the direct transforms
    scaled by `1/n` and the inverse transforms unscaled (i.e. exactly opposite to
    the default option `norm=backward`).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的关键参数选项`norm=forward`会使直接转换经缩放乘以`1/n`，逆转换不经缩放（即与默认选项`norm=backward`完全相反）。
- en: ([gh-16476](https://github.com/numpy/numpy/pull/16476))
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16476](https://github.com/numpy/numpy/pull/16476))
- en: NumPy is now typed
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy现在已经有了类型
- en: Type annotations have been added for large parts of NumPy. There is also a new
    [`numpy.typing`](../reference/typing.html#module-numpy.typing "numpy.typing")
    module that contains useful types for end-users. The currently available types
    are
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对NumPy的大部分部分添加了类型注释。还有一个新的[`numpy.typing`](../reference/typing.html#module-numpy.typing
    "numpy.typing")模块，其中包含了对最终用户有用的类型。目前可用的类型有
- en: '`ArrayLike`: for objects that can be coerced to an array'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArrayLike`：可转换为数组的对象'
- en: '`DtypeLike`: for objects that can be coerced to a dtype'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DtypeLike`：可转换为dtype的对象'
- en: ([gh-16515](https://github.com/numpy/numpy/pull/16515))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16515](https://github.com/numpy/numpy/pull/16515))
- en: '`numpy.typing` is accessible at runtime'
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.typing`在运行时可访问'
- en: 'The types in `numpy.typing` can now be imported at runtime. Code like the following
    will now work:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`numpy.typing`中的类型可以在运行时导入。以下代码现在可以使用：
- en: '[PRE26]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: ([gh-16558](https://github.com/numpy/numpy/pull/16558))
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16558](https://github.com/numpy/numpy/pull/16558))
- en: New `__f2py_numpy_version__` attribute for f2py generated modules.
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because f2py is released together with NumPy, `__f2py_numpy_version__` provides
    a way to track the version f2py used to generate the module.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16594](https://github.com/numpy/numpy/pull/16594))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '`mypy` tests can be run via runtests.py'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently running mypy with the NumPy stubs configured requires either:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Installing NumPy
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the source directory to MYPYPATH and linking to the `mypy.ini`
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both options are somewhat inconvenient, so add a `--mypy` option to runtests
    that handles setting things up for you. This will also be useful in the future
    for any typing codegen since it will ensure the project is built before type checking.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17123](https://github.com/numpy/numpy/pull/17123))
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Negation of user defined BLAS/LAPACK detection order
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    allows negation of libraries when determining BLAS/LAPACK libraries. This may
    be used to remove an item from the library resolution phase, i.e. to disallow
    NetLIB libraries one could do:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That will use any of the accelerated libraries instead.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17219](https://github.com/numpy/numpy/pull/17219))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Allow passing optimizations arguments to asv build
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is now possible to pass `-j`, `--cpu-baseline`, `--cpu-dispatch` and `--disable-optimization`
    flags to ASV build when the `--bench-compare` argument is used.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17284](https://github.com/numpy/numpy/pull/17284))
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: The NVIDIA HPC SDK nvfortran compiler is now supported
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for the nvfortran compiler, a version of pgfortran, has been added.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17344](https://github.com/numpy/numpy/pull/17344))
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`dtype` option for `cov` and `corrcoef`'
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dtype` option is now available for [`numpy.cov`](../reference/generated/numpy.cov.html#numpy.cov
    "numpy.cov") and [`numpy.corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"). It specifies which data-type the returned result should have.
    By default the functions still return a [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64") result.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17456](https://github.com/numpy/numpy/pull/17456))
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improved string representation for polynomials (`__str__`)
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The string representation (`__str__`) of all six polynomial types in [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") has been updated to give the polynomial as a mathematical
    expression instead of an array of coefficients. Two package-wide formats for the
    polynomial expressions are available - one using Unicode characters for superscripts
    and subscripts, and another using only ASCII characters.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15666](https://github.com/numpy/numpy/pull/15666))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Remove the Accelerate library as a candidate LAPACK library
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple no longer supports Accelerate. Remove it.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15759](https://github.com/numpy/numpy/pull/15759))
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Object arrays containing multi-line objects have a more readable `repr`
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If elements of an object array have a `repr` containing new lines, then the
    wrapped lines will be aligned by column. Notably, this improves the `repr` of
    nested arrays:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象数组的元素包含包含有换行符的 `repr`，那么被折行的行将按列对齐。特别地，这改善了嵌套数组的 `repr`：
- en: '[PRE28]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: ([gh-15997](https://github.com/numpy/numpy/pull/15997))
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15997](https://github.com/numpy/numpy/pull/15997))
- en: Concatenate supports providing an output dtype
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Concatenate 支持提供输出的数据类型
- en: Support was added to [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") to provide an output `dtype` and `casting` using keyword
    arguments. The `dtype` argument cannot be provided in conjunction with the `out`
    one.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") 中增加了对提供输出 `dtype` 和 `casting` 的支持，使用关键字参数。 `dtype` 参数不能与
    `out` 参数一起提供。
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
- en: Thread safe f2py callback functions
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py 回调函数线程安全
- en: Callback functions in f2py are now thread safe.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: f2py 中的回调函数现在是线程安全的。
- en: ([gh-16519](https://github.com/numpy/numpy/pull/16519))
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16519](https://github.com/numpy/numpy/pull/16519))
- en: '[`numpy.core.records.fromfile`](../reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile") now supports file-like objects'
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.core.records.fromfile`](../reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile") 现在支持类文件对象'
- en: '`numpy.rec.fromfile` can now use file-like objects, for instance [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO
    "(in Python v3.11)")'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.rec.fromfile` 现在可以使用类文件对象，例如 [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO
    "(在 Python v3.11)")'
- en: ([gh-16675](https://github.com/numpy/numpy/pull/16675))
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16675](https://github.com/numpy/numpy/pull/16675))
- en: RPATH support on AIX added to distutils
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AIX 上的 distutils 增加了 RPATH 支持
- en: This allows SciPy to be built on AIX.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得可以在 AIX 上构建 SciPy。
- en: ([gh-16710](https://github.com/numpy/numpy/pull/16710))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16710](https://github.com/numpy/numpy/pull/16710))
- en: Use f90 compiler specified by the command line args
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用由命令行参数指定的 f90 编译器
- en: The compiler command selection for Fortran Portland Group Compiler is changed
    in `numpy.distutils.fcompiler`. This only affects the linking command. This forces
    the use of the executable provided by the command line option (if provided) instead
    of the pgfortran executable. If no executable is provided to the command line
    option it defaults to the pgf90 executable, which is an alias for pgfortran according
    to the PGI documentation.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Fortran Portland Group Compiler，`numpy.distutils.fcompiler`中选择的编译器命令已更改。这仅影响链接命令。这迫使使用命令行选项提供的可执行文件（如果有的话），而不是
    pgfortran 可执行文件。如果命令行选项没有提供可执行文件，默认为 pgf90 可执行文件，根据 PGI 文档，它是 pgfortran 的别名。
- en: ([gh-16730](https://github.com/numpy/numpy/pull/16730))
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16730](https://github.com/numpy/numpy/pull/16730))
- en: Add NumPy declarations for Cython 3.0 and later
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 Cython 3.0 及更高版本添加了 NumPy 声明
- en: The pxd declarations for Cython 3.0 were improved to avoid using deprecated
    NumPy C-API features. Extension modules built with Cython 3.0+ that use NumPy
    can now set the C macro `NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION` to avoid C
    compiler warnings about deprecated API usage.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 3.0 的 pxd 声明得到改进，避免使用了已弃用的 NumPy C-API 特性。使用 Cython 3.0+ 构建的扩展模块，使用 NumPy
    的话现在可以设置 C 宏 `NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION`，以避免 C 编译器对弃用 API 使用的警告。
- en: ([gh-16986](https://github.com/numpy/numpy/pull/16986))
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16986](https://github.com/numpy/numpy/pull/16986))
- en: Make the window functions exactly symmetric
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使窗口函数完全对称
- en: Make sure the window functions provided by NumPy are symmetric. There were previously
    small deviations from symmetry due to numerical precision that are now avoided
    by better arrangement of the computation.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 NumPy 提供的窗口函数是对称的。 以前由于数值精度的原因，对称性存在小偏差，现在通过更好地安排计算来避免。
- en: ([gh-17195](https://github.com/numpy/numpy/pull/17195))
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17195](https://github.com/numpy/numpy/pull/17195))
- en: Performance improvements and changes
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进和更改
- en: Enable multi-platform SIMD compiler optimizations
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用多平台 SIMD 编译器优化
- en: 'A series of improvements for NumPy infrastructure to pave the way to **NEP-38**,
    that can be summarized as follow:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的 NumPy 基础设施改进，为 **NEP-38**鋪平了道路，可以概括如下：
- en: '**New Build Arguments**'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新的构建参数**'
- en: '`--cpu-baseline` to specify the minimal set of required optimizations, default
    value is `min` which provides the minimum CPU features that can safely run on
    a wide range of users platforms.'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--cpu-baseline` 用于指定所需的最小优化集，默认值为 `min`，提供的是可以安全运行在广泛用户平台上的最小 CPU 功能。'
- en: '`--cpu-dispatch` to specify the dispatched set of additional optimizations,
    default value is `max -xop -fma4` which enables all CPU features, except for AMD
    legacy features.'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--cpu-dispatch` 用于指定附加优化的调度集，默认值为 `max -xop -fma4`，启用除AMD传统特性外的所有CPU特性。'
- en: '`--disable-optimization` to explicitly disable the whole new improvements,
    It also adds a new **C** compiler #definition called `NPY_DISABLE_OPTIMIZATION`
    which it can be used as guard for any SIMD code.'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--disable-optimization` 明确禁用所有新的改进，它还添加了名为 `NPY_DISABLE_OPTIMIZATION` 的新的**C**编译器#定义，可以用作任何SIMD代码的保护。'
- en: '**Advanced CPU dispatcher**'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级CPU调度程序**'
- en: A flexible cross-architecture CPU dispatcher built on the top of Python/Numpy
    distutils, support all common compilers with a wide range of CPU features.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基于Python/Numpy distutils的灵活的跨架构CPU调度程序，支持所有常见的编译器和广泛的CPU特性。
- en: 'The new dispatcher requires a special file extension `*.dispatch.c` to mark
    the dispatch-able **C** sources. These sources have the ability to be compiled
    multiple times so that each compilation process represents certain CPU features
    and provides different #definitions and flags that affect the code paths.'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的调度程序需要特殊的文件扩展名 `*.dispatch.c` 标记可调度的**C**源文件。这些源文件可以编译多次，每个编译过程表示特定的CPU特性，并提供影响代码路径的不同#定义和标志。
- en: '**New auto-generated C header ``core/src/common/_cpu_dispatch.h``**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新自动生成的C标头 ``core/src/common/_cpu_dispatch.h``**'
- en: 'This header is generated by the distutils module `ccompiler_opt`, and contains
    all the #definitions and headers of instruction sets, that had been configured
    through command arguments ‘–cpu-baseline’ and ‘–cpu-dispatch’.'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标头由distutils模块 `ccompiler_opt` 生成，并包含所有通过命令参数‘–cpu-baseline’和‘–cpu-dispatch’配置的指令集的#定义和标头。
- en: '**New C header ``core/src/common/npy_cpu_dispatch.h``**'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新的C标头 ``core/src/common/npy_cpu_dispatch.h``**'
- en: This header contains all utilities that required for the whole CPU dispatching
    process, it also can be considered as a bridge linking the new infrastructure
    work with NumPy CPU runtime detection.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标头包含了整个CPU调度过程所需的所有实用程序，它还可以被看作是将新的基础设施工作与NumPy CPU运行时检测连接起来的桥梁。
- en: '**Add new attributes to NumPy umath module(Python level)**'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向NumPy umath模块（Python级别）添加新属性**'
- en: '`__cpu_baseline__` a list contains the minimal set of required optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-baseline’.'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__cpu_baseline__` 是一个列表，包含了编译器和平台支持的必需优化的最小集合，根据命令参数‘–cpu-baseline’指定的值。'
- en: '`__cpu_dispatch__` a list contains the dispatched set of additional optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-dispatch’.'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__cpu_dispatch__` 是一个列表，包含了编译器和平台支持的根据命令参数‘–cpu-dispatch’指定值的附加优化的调度集。'
- en: '**Print the supported CPU features during the run of PytestTester**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在PytestTester运行期间打印支持的CPU特性**'
- en: ([gh-13516](https://github.com/numpy/numpy/pull/13516))
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-13516](https://github.com/numpy/numpy/pull/13516))
- en: Changes
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变化
- en: Changed behavior of `divmod(1., 0.)` and related functions
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改了`divmod(1., 0.)`和相关函数的行为
- en: 'The changes also assure that different compiler versions have the same behavior
    for nan or inf usages in these operations. This was previously compiler dependent,
    we now force the invalid and divide by zero flags, making the results the same
    across compilers. For example, gcc-5, gcc-8, or gcc-9 now result in the same behavior.
    The changes are tabulated below:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化还确保了不同的编译器版本在这些操作中对nan或inf使用具有相同的行为。这之前是依赖于编译器的，现在我们强制无效和除0标志，使结果在不同编译器下相同。例如，gcc-5、gcc-8或gcc-9现在都产生相同的行为。变化如下：
- en: Summary of New Behavior
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 新行为摘要
- en: '| Operator | Old Warning | New Warning | Old Result | New Result | Works on
    MacOS |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 旧警告 | 新警告 | 旧结果 | 新结果 | 适用于MacOS |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| np.divmod(1.0, 0.0) | Invalid | Invalid and Dividebyzero | nan, nan | inf,
    nan | Yes |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| np.divmod(1.0, 0.0) | 无效 | 无效和除0 | nan, nan | inf, nan | 是 |'
- en: '| np.fmod(1.0, 0.0) | Invalid | Invalid | nan | nan | No? Yes |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| np.fmod(1.0, 0.0) | 无效 | 无效 | nan | nan | 否？是 |'
- en: '| np.floor_divide(1.0, 0.0) | Invalid | Dividebyzero | nan | inf | Yes |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| np.floor_divide(1.0, 0.0) | 无效 | 除0 | nan | inf | 是 |'
- en: '| np.remainder(1.0, 0.0) | Invalid | Invalid | nan | nan | Yes |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| np.remainder(1.0, 0.0) | 无效 | 无效 | nan | nan | 是 |'
- en: ([gh-16161](https://github.com/numpy/numpy/pull/16161))
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16161](https://github.com/numpy/numpy/pull/16161))
- en: '`np.linspace` on integers now uses floor'
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linspace` 在整数上现在使用 floor'
- en: 'When using a `int` dtype in [`numpy.linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), previously float values would be rounded towards zero. Now
    [`numpy.floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor")
    is used instead, which rounds toward `-inf`. This changes the results for negative
    values. For example, the following would previously give:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`int`类型的时候，以前float值会被向零舍入。现在使用[`numpy.floor`](../reference/generated/numpy.floor.html#numpy.floor
    "numpy.floor")来代替，它向下取整。这会改变负值的结果。例如，以前会得到以下结果：
- en: '[PRE29]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'and now results in:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结果是：
- en: '[PRE30]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The former result can still be obtained with:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 以前的结果仍然可以得到：
- en: '[PRE31]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: ([gh-16841](https://github.com/numpy/numpy/pull/16841))
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-16841](https://github.com/numpy/numpy/pull/16841))
- en: New functions
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: The random.Generator class has a new `permuted` function.
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: random.Generator类新增了一个`permuted`函数。
- en: The new function differs from `shuffle` and `permutation` in that the subarrays
    indexed by an axis are permuted rather than the axis being treated as a separate
    1-D array for every combination of the other indexes. For example, it is now possible
    to permute the rows or columns of a 2-D array.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新函数与`shuffle`和`permutation`不同之处在于，由轴索引的子数组被排列，而不是将轴视为每个其他索引组合的独立1-D数组。例如，现在可以对2-D数组的行或列进行排列。
- en: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
- en: '`sliding_window_view` provides a sliding window view for numpy arrays'
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sliding_window_view`为numpy数组提供了一个滑动窗口视图'
- en: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view") constructs views on numpy arrays
    that offer a sliding or moving window access to the array. This allows for the
    simple implementation of certain algorithms, such as running means.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view")构建了numpy数组上的视图，提供了对数组的滑动或移动窗口访问。这允许简单实现某些算法，例如运行均值。'
- en: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
- en: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") is a new user-facing function'
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")是一个新的面向用户的函数。'
- en: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") gets the resulting shape from broadcasting the given
    shape tuples against each other.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")从广播给定的形状元组的结果形状。'
- en: '[PRE32]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
- en: The random.Generator class has a new `permuted` function.
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: random.Generator类新增了一个`permuted`函数。
- en: The new function differs from `shuffle` and `permutation` in that the subarrays
    indexed by an axis are permuted rather than the axis being treated as a separate
    1-D array for every combination of the other indexes. For example, it is now possible
    to permute the rows or columns of a 2-D array.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新函数与`shuffle`和`permutation`不同之处在于，由轴索引的子数组被排列，而不是将轴视为每个其他索引组合的独立1-D数组。例如，现在可以对2-D数组的行或列进行排列。
- en: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15121](https://github.com/numpy/numpy/pull/15121))
- en: '`sliding_window_view` provides a sliding window view for numpy arrays'
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sliding_window_view`为numpy数组提供了一个滑动窗口视图'
- en: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view") constructs views on numpy arrays
    that offer a sliding or moving window access to the array. This allows for the
    simple implementation of certain algorithms, such as running means.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.lib.stride_tricks.sliding_window_view`](../reference/generated/numpy.lib.stride_tricks.sliding_window_view.html#numpy.lib.stride_tricks.sliding_window_view
    "numpy.lib.stride_tricks.sliding_window_view")构建了numpy数组上的视图，提供了对数组的滑动或移动窗口访问。这允许简单实现某些算法，例如运行均值。'
- en: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17394](https://github.com/numpy/numpy/pull/17394))
- en: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") is a new user-facing function'
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")是一个新的面向用户的函数。'
- en: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes") gets the resulting shape from broadcasting the given
    shape tuples against each other.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`broadcast_shapes`](../reference/generated/numpy.broadcast_shapes.html#numpy.broadcast_shapes
    "numpy.broadcast_shapes")从对抗给定的形状元组中广播得到结果形状。'
- en: '[PRE33]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17535](https://github.com/numpy/numpy/pull/17535))
- en: Deprecations
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Using the aliases of builtin types like `np.int` is deprecated
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`np.int`之类的内置类型别名已被弃用
- en: For a long time, `np.int` has been an alias of the builtin `int`. This is repeatedly
    a cause of confusion for newcomers, and existed mainly for historic reasons.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，`np.int`一直是内置`int`的别名。这常常让新手感到困惑，主要是出于历史原因。
- en: These aliases have been deprecated. The table below shows the full list of deprecated
    aliases, along with their exact meaning. Replacing uses of items in the first
    column with the contents of the second column will work identically and silence
    the deprecation warning.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这些别名已经被弃用。下表显示了所有已弃用别名的完整列表，以及它们的确切含义。将第一列中的项目替换为第二列的内容将产生相同效果，并消除弃用警告。
- en: The third column lists alternative NumPy names which may occasionally be preferential.
    See also [Data types](../user/basics.types.html#basics-types) for additional details.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 第三列列出了有时可能更优选的替代NumPy名称。另请参阅[数据类型](../user/basics.types.html#basics-types)以获取更多详细信息。
- en: '| Deprecated name | Identical to | NumPy scalar type names |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| 弃用名称 | 相同于 | NumPy标量类型名称 |'
- en: '| --- | --- | --- |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `numpy.bool` | `bool` | [`numpy.bool_`](../reference/arrays.scalars.html#numpy.bool_
    "numpy.bool_") |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.bool` | `bool` | [`numpy.bool_`](../reference/arrays.scalars.html#numpy.bool_
    "numpy.bool_") |'
- en: '| `numpy.int` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (default), `numpy.int64`, or `numpy.int32` |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.int` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (默认)，`numpy.int64`或`numpy.int32` |'
- en: '| `numpy.float` | `float` | [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64"), [`numpy.float_`](../reference/arrays.scalars.html#numpy.float_
    "numpy.float_"), [`numpy.double`](../reference/arrays.scalars.html#numpy.double
    "numpy.double") (equivalent) |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.float` | `float` | [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64"), [`numpy.float_`](../reference/arrays.scalars.html#numpy.float_
    "numpy.float_"), [`numpy.double`](../reference/arrays.scalars.html#numpy.double
    "numpy.double") (equivalent) |'
- en: '| `numpy.complex` | `complex` | [`numpy.complex128`](../reference/arrays.scalars.html#numpy.complex128
    "numpy.complex128"), [`numpy.complex_`](../reference/arrays.scalars.html#numpy.complex_
    "numpy.complex_"), [`numpy.cdouble`](../reference/arrays.scalars.html#numpy.cdouble
    "numpy.cdouble") (equivalent) |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.complex` | `complex` | [`numpy.complex128`](../reference/arrays.scalars.html#numpy.complex128
    "numpy.complex128"), [`numpy.complex_`](../reference/arrays.scalars.html#numpy.complex_
    "numpy.complex_"), [`numpy.cdouble`](../reference/arrays.scalars.html#numpy.cdouble
    "numpy.cdouble") (equivalent) |'
- en: '| `numpy.object` | `object` | [`numpy.object_`](../reference/arrays.scalars.html#numpy.object_
    "numpy.object_") |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.object` | `object` | [`numpy.object_`](../reference/arrays.scalars.html#numpy.object_
    "numpy.object_") |'
- en: '| `numpy.str` | `str` | [`numpy.str_`](../reference/arrays.scalars.html#numpy.str_
    "numpy.str_") |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.str` | `str` | [`numpy.str_`](../reference/arrays.scalars.html#numpy.str_
    "numpy.str_") |'
- en: '| `numpy.long` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (C `long`), [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong") (largest integer type) |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.long` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (C `long`), [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong") (largest integer type) |'
- en: '| `numpy.unicode` | `str` | [`numpy.unicode_`](../reference/arrays.scalars.html#numpy.unicode_
    "numpy.unicode_") |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.unicode` | `str` | [`numpy.unicode_`](../reference/arrays.scalars.html#numpy.unicode_
    "numpy.unicode_") |'
- en: To give a clear guideline for the vast majority of cases, for the types `bool`,
    `object`, `str` (and `unicode`) using the plain version is shorter and clear,
    and generally a good replacement. For `float` and `complex` you can use `float64`
    and `complex128` if you wish to be more explicit about the precision.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 对于绝大多数情况，对于`bool`，`object`，`str`（和`unicode`）类型，使用普通版本更短、更清晰，并且通常是一个良好的替代方案。对于`float`和`complex`，如果您希望更明确地表示精度，可以使用`float64`和`complex128`。
- en: 'For `np.int` a direct replacement with `np.int_` or `int` is also good and
    will not change behavior, but the precision will continue to depend on the computer
    and operating system. If you want to be more explicit and review the current use,
    you have the following alternatives:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`np.int`，直接使用`np.int_`或`int`作为替代都是可以的，不会改变行为，但精度会继续依赖于计算机和操作系统。如果您想更具体地检查当前使用情况，可以选择以下替代方案：
- en: '`np.int64` or `np.int32` to specify the precision exactly. This ensures that
    results cannot depend on the computer or operating system.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int_` or `int` (the default), but be aware that it depends on the computer
    and operating system.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The C types: `np.cint` (int), `np.int_` (long), `np.longlong`.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.intp` which is 32bit on 32bit machines 64bit on 64bit machines. This can
    be the best type to use for indexing.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When used with `np.dtype(...)` or `dtype=...` changing it to the NumPy name
    as mentioned above will have no effect on the output. If used as a scalar with:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: changing it can subtly change the result. In this case, the Python version `float(123)`
    or `int(12.)` is normally preferable, although the NumPy version may be useful
    for consistency with NumPy arrays (for example, NumPy behaves differently for
    things like division by zero).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14882](https://github.com/numpy/numpy/pull/14882))
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Passing `shape=None` to functions with a non-optional shape argument is deprecated
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, this was an alias for passing `shape=()`. This deprecation is emitted
    by *PyArray_IntpConverter* in the C API. If your API is intended to support passing
    `None`, then you should check for `None` prior to invoking the converter, so as
    to be able to distinguish `None` and `()`.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15886](https://github.com/numpy/numpy/pull/15886))
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Indexing errors will be reported even when index result is empty
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the future, NumPy will raise an IndexError when an integer array index contains
    out of bound values even if a non-indexed dimension is of length 0\. This will
    now emit a DeprecationWarning. This can happen when the array is previously empty,
    or an empty slice is involved:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Previously the non-empty index `[20]` was not checked for correctness. It will
    now be checked causing a deprecation warning which will be turned into an error.
    This also applies to assignments.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15900](https://github.com/numpy/numpy/pull/15900))
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `mode` and `searchside` are deprecated
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inexact and case insensitive matches for `mode` and `searchside` were valid
    inputs earlier and will give a DeprecationWarning now. For example, below are
    some example usages which are now deprecated and will give a DeprecationWarning:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: ([gh-16056](https://github.com/numpy/numpy/pull/16056))
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of *numpy.dual*
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The module *numpy.dual* is deprecated. Instead of importing functions from *numpy.dual*,
    the functions should be imported directly from NumPy or SciPy.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16156](https://github.com/numpy/numpy/pull/16156))
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '`outer` and `ufunc.outer` deprecated for matrix'
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.matrix` use with [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer") or generic ufunc outer calls such as `numpy.add.outer`. Previously,
    matrix was converted to an array here. This will not be done in the future requiring
    a manual conversion to arrays.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16232](https://github.com/numpy/numpy/pull/16232))
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: Further Numeric Style types Deprecated
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remaining numeric-style type codes `Bytes0`, `Str0`, `Uint32`, `Uint64`,
    and `Datetime64` have been deprecated. The lower-case variants should be used
    instead. For bytes and string `"S"` and `"U"` are further alternatives.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: The `ndincr` method of `ndindex` is deprecated
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The documentation has warned against using this function since NumPy 1.8. Use
    `next(it)` instead of `it.ndincr()`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17233](https://github.com/numpy/numpy/pull/17233))
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: ArrayLike objects which do not define `__len__` and `__getitem__`
  id: totrans-386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects which define one of the protocols `__array__`, `__array_interface__`,
    or `__array_struct__` but are not sequences (usually defined by having a `__len__`
    and `__getitem__`) will behave differently during array-coercion in the future.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'When nested inside sequences, such as `np.array([array_like])`, these were
    handled as a single Python object rather than an array. In the future they will
    behave identically to:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This change should only have an effect if `np.array(array_like)` is not 0-D.
    The solution to this warning may depend on the object:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Some array-likes may expect the new behaviour, and users can ignore the warning.
    The object can choose to expose the sequence protocol to opt-in to the new behaviour.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `shapely` will allow conversion to an array-like using `line.coords`
    rather than `np.asarray(line)`. Users may work around the warning, or use the
    new convention when it becomes available.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, using the new behaviour can only be achieved by calling `np.array(array_like)`.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to ensure that the old behaviour remains unchanged, please create
    an object array and then fill it explicitly, for example:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will ensure NumPy knows to not enter the array-like and use it as a object
    instead.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17973](https://github.com/numpy/numpy/pull/17973))
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Using the aliases of builtin types like `np.int` is deprecated
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a long time, `np.int` has been an alias of the builtin `int`. This is repeatedly
    a cause of confusion for newcomers, and existed mainly for historic reasons.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: These aliases have been deprecated. The table below shows the full list of deprecated
    aliases, along with their exact meaning. Replacing uses of items in the first
    column with the contents of the second column will work identically and silence
    the deprecation warning.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: The third column lists alternative NumPy names which may occasionally be preferential.
    See also [Data types](../user/basics.types.html#basics-types) for additional details.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '| Deprecated name | Identical to | NumPy scalar type names |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
- en: '| `numpy.bool` | `bool` | [`numpy.bool_`](../reference/arrays.scalars.html#numpy.bool_
    "numpy.bool_") |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
- en: '| `numpy.int` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (default), `numpy.int64`, or `numpy.int32` |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
- en: '| `numpy.float` | `float` | [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64"), [`numpy.float_`](../reference/arrays.scalars.html#numpy.float_
    "numpy.float_"), [`numpy.double`](../reference/arrays.scalars.html#numpy.double
    "numpy.double") (equivalent) |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
- en: '| `numpy.complex` | `complex` | [`numpy.complex128`](../reference/arrays.scalars.html#numpy.complex128
    "numpy.complex128"), [`numpy.complex_`](../reference/arrays.scalars.html#numpy.complex_
    "numpy.complex_"), [`numpy.cdouble`](../reference/arrays.scalars.html#numpy.cdouble
    "numpy.cdouble") (equivalent) |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
- en: '| `numpy.object` | `object` | [`numpy.object_`](../reference/arrays.scalars.html#numpy.object_
    "numpy.object_") |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
- en: '| `numpy.str` | `str` | [`numpy.str_`](../reference/arrays.scalars.html#numpy.str_
    "numpy.str_") |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
- en: '| `numpy.long` | `int` | [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_") (C `long`), [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong") (largest integer type) |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
- en: '| `numpy.unicode` | `str` | [`numpy.unicode_`](../reference/arrays.scalars.html#numpy.unicode_
    "numpy.unicode_") |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
- en: To give a clear guideline for the vast majority of cases, for the types `bool`,
    `object`, `str` (and `unicode`) using the plain version is shorter and clear,
    and generally a good replacement. For `float` and `complex` you can use `float64`
    and `complex128` if you wish to be more explicit about the precision.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'For `np.int` a direct replacement with `np.int_` or `int` is also good and
    will not change behavior, but the precision will continue to depend on the computer
    and operating system. If you want to be more explicit and review the current use,
    you have the following alternatives:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`np.int64` or `np.int32` to specify the precision exactly. This ensures that
    results cannot depend on the computer or operating system.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int_` or `int` (the default), but be aware that it depends on the computer
    and operating system.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The C types: `np.cint` (int), `np.int_` (long), `np.longlong`.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.intp` which is 32bit on 32bit machines 64bit on 64bit machines. This can
    be the best type to use for indexing.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When used with `np.dtype(...)` or `dtype=...` changing it to the NumPy name
    as mentioned above will have no effect on the output. If used as a scalar with:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: changing it can subtly change the result. In this case, the Python version `float(123)`
    or `int(12.)` is normally preferable, although the NumPy version may be useful
    for consistency with NumPy arrays (for example, NumPy behaves differently for
    things like division by zero).
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-14882](https://github.com/numpy/numpy/pull/14882))
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Passing `shape=None` to functions with a non-optional shape argument is deprecated
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, this was an alias for passing `shape=()`. This deprecation is emitted
    by *PyArray_IntpConverter* in the C API. If your API is intended to support passing
    `None`, then you should check for `None` prior to invoking the converter, so as
    to be able to distinguish `None` and `()`.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15886](https://github.com/numpy/numpy/pull/15886))
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Indexing errors will be reported even when index result is empty
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the future, NumPy will raise an IndexError when an integer array index contains
    out of bound values even if a non-indexed dimension is of length 0\. This will
    now emit a DeprecationWarning. This can happen when the array is previously empty,
    or an empty slice is involved:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Previously the non-empty index `[20]` was not checked for correctness. It will
    now be checked causing a deprecation warning which will be turned into an error.
    This also applies to assignments.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15900](https://github.com/numpy/numpy/pull/15900))
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `mode` and `searchside` are deprecated
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inexact and case insensitive matches for `mode` and `searchside` were valid
    inputs earlier and will give a DeprecationWarning now. For example, below are
    some example usages which are now deprecated and will give a DeprecationWarning:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: ([gh-16056](https://github.com/numpy/numpy/pull/16056))
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Deprecation of *numpy.dual*
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The module *numpy.dual* is deprecated. Instead of importing functions from *numpy.dual*,
    the functions should be imported directly from NumPy or SciPy.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16156](https://github.com/numpy/numpy/pull/16156))
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '`outer` and `ufunc.outer` deprecated for matrix'
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.matrix` use with [`outer`](../reference/generated/numpy.outer.html#numpy.outer
    "numpy.outer") or generic ufunc outer calls such as `numpy.add.outer`. Previously,
    matrix was converted to an array here. This will not be done in the future requiring
    a manual conversion to arrays.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16232](https://github.com/numpy/numpy/pull/16232))
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Further Numeric Style types Deprecated
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The remaining numeric-style type codes `Bytes0`, `Str0`, `Uint32`, `Uint64`,
    and `Datetime64` have been deprecated. The lower-case variants should be used
    instead. For bytes and string `"S"` and `"U"` are further alternatives.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: The `ndincr` method of `ndindex` is deprecated
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The documentation has warned against using this function since NumPy 1.8. Use
    `next(it)` instead of `it.ndincr()`.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17233](https://github.com/numpy/numpy/pull/17233))
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: ArrayLike objects which do not define `__len__` and `__getitem__`
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects which define one of the protocols `__array__`, `__array_interface__`,
    or `__array_struct__` but are not sequences (usually defined by having a `__len__`
    and `__getitem__`) will behave differently during array-coercion in the future.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'When nested inside sequences, such as `np.array([array_like])`, these were
    handled as a single Python object rather than an array. In the future they will
    behave identically to:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This change should only have an effect if `np.array(array_like)` is not 0-D.
    The solution to this warning may depend on the object:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: Some array-likes may expect the new behaviour, and users can ignore the warning.
    The object can choose to expose the sequence protocol to opt-in to the new behaviour.
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `shapely` will allow conversion to an array-like using `line.coords`
    rather than `np.asarray(line)`. Users may work around the warning, or use the
    new convention when it becomes available.
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, using the new behaviour can only be achieved by calling `np.array(array_like)`.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to ensure that the old behaviour remains unchanged, please create
    an object array and then fill it explicitly, for example:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This will ensure NumPy knows to not enter the array-like and use it as a object
    instead.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17973](https://github.com/numpy/numpy/pull/17973))
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Future Changes
  id: totrans-458
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arrays cannot be using subarray dtypes
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Array creation and casting using `np.array(arr, dtype)` and `arr.astype(dtype)`
    will use different logic when `dtype` is a subarray dtype such as `np.dtype("(2)i,")`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'For such a `dtype` the following behaviour is true:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'But `res` is filled using the logic:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'which uses incorrect broadcasting (and often leads to an error). In the future,
    this will instead cast each element individually, leading to the same result as:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Which can normally be used to opt-in to the new behaviour.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: This change does not affect `np.array(list, dtype="(2)i,")` unless the `list`
    itself includes at least one array. In particular, the behaviour is unchanged
    for a list of tuples.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17596](https://github.com/numpy/numpy/pull/17596))
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: Arrays cannot be using subarray dtypes
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Array creation and casting using `np.array(arr, dtype)` and `arr.astype(dtype)`
    will use different logic when `dtype` is a subarray dtype such as `np.dtype("(2)i,")`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 'For such a `dtype` the following behaviour is true:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'But `res` is filled using the logic:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'which uses incorrect broadcasting (and often leads to an error). In the future,
    this will instead cast each element individually, leading to the same result as:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Which can normally be used to opt-in to the new behaviour.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: This change does not affect `np.array(list, dtype="(2)i,")` unless the `list`
    itself includes at least one array. In particular, the behaviour is unchanged
    for a list of tuples.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17596](https://github.com/numpy/numpy/pull/17596))
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The deprecation of numeric style type-codes `np.dtype("Complex64")` (with upper
    case spelling), is expired. `"Complex64"` corresponded to `"complex128"` and `"Complex32"`
    corresponded to `"complex64"`.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The deprecation of `np.sctypeNA` and `np.typeNA` is expired. Both have been
    removed from the public API. Use `np.typeDict` instead.
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The 14-year deprecation of `np.ctypeslib.ctypes_load_library` is expired. Use
    [`load_library`](../reference/routines.ctypeslib.html#numpy.ctypeslib.load_library
    "numpy.ctypeslib.load_library") instead, which is identical.
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17116](https://github.com/numpy/numpy/pull/17116))
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Financial functions removed
  id: totrans-487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In accordance with NEP 32, the financial functions are removed from NumPy 1.20\.
    The functions that have been removed are `fv`, `ipmt`, `irr`, `mirr`, `nper`,
    `npv`, `pmt`, `ppmt`, `pv`, and `rate`. These functions are available in the [numpy_financial](https://pypi.org/project/numpy-financial)
    library.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17067](https://github.com/numpy/numpy/pull/17067))
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: Financial functions removed
  id: totrans-490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In accordance with NEP 32, the financial functions are removed from NumPy 1.20\.
    The functions that have been removed are `fv`, `ipmt`, `irr`, `mirr`, `nper`,
    `npv`, `pmt`, `ppmt`, `pv`, and `rate`. These functions are available in the [numpy_financial](https://pypi.org/project/numpy-financial)
    library.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17067](https://github.com/numpy/numpy/pull/17067))
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`isinstance(dtype, np.dtype)` and not `type(dtype) is not np.dtype`'
  id: totrans-494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy dtypes are not direct instances of `np.dtype` anymore. Code that may have
    used `type(dtype) is np.dtype` will always return `False` and must be updated
    to use the correct version `isinstance(dtype, np.dtype)`.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: This change also affects the C-side macro `PyArray_DescrCheck` if compiled against
    a NumPy older than 1.16.6\. If code uses this macro and wishes to compile against
    an older version of NumPy, it must replace the macro (see also [C API changes](#c-api-changes)
    section).
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Same kind casting in concatenate with `axis=None`
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") is called with `axis=None`, the flattened arrays were cast
    with `unsafe`. Any other axis choice uses “same kind”. That different default
    has been deprecated and “same kind” casting will be used instead. The new `casting`
    keyword argument can be used to retain the old behaviour.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Scalars are cast when assigned to arrays
  id: totrans-500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When creating or assigning to arrays, in all relevant cases NumPy scalars will
    now be cast identically to NumPy arrays. In particular this changes the behaviour
    in some cases which previously raised an error:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'will succeed and return an undefined result (usually the smallest possible
    integer). This also affects assignments:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'At this time, NumPy retains the behaviour for:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The above changes do not affect Python scalars:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'remains unaffected (`np.nan` is a Python `float`, not a NumPy one). Unlike
    signed integers, unsigned integers do not retain this special case, since they
    always behaved more like casting. The following code stops raising an error:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: To avoid backward compatibility issues, at this time assignment from `datetime64`
    scalar to strings of too short length remains supported. This means that `np.asarray(np.datetime64("2020-10-10"),
    dtype="S5")` succeeds now, when it failed before. In the long term this may be
    deprecated or the unsafe cast may be allowed generally to make assignment of arrays
    and scalars behave consistently.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: Array coercion changes when Strings and other types are mixed
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When strings and other types are mixed, such as:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The results will change, which may lead to string dtypes with longer strings
    in some cases. In particularly, if `dtype="S"` is not provided any numerical value
    will lead to a string results long enough to hold all possible numerical values.
    (e.g. “S32” for floats). Note that you should always provide `dtype="S"` when
    converting non-strings to strings.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: 'If `dtype="S"` is provided the results will be largely identical to before,
    but NumPy scalars (not a Python float like `1.0`), will still enforce a uniform
    string length:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Previously the first version gave the same result as the second.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: Array coercion restructure
  id: totrans-519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Array coercion has been restructured. In general, this should not affect users.
    In extremely rare corner cases where array-likes are nested:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Things will now be more consistent with:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This can subtly change output for some badly defined array-likes. One example
    for this are array-like objects which are not also sequences of matching shape.
    In NumPy 1.20, a warning will be given when an array-like is not also a sequence
    (but behaviour remains identical, see deprecations). If an array like is also
    a sequence (defines `__getitem__` and `__len__`) NumPy will now only use the result
    given by `__array__`, `__array_interface__`, or `__array_struct__`. This will
    result in differences when the (nested) sequence describes a different shape.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16200](https://github.com/numpy/numpy/pull/16200))
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: Writing to the result of [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") will export readonly buffers
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In NumPy 1.17 [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") started warning when the resulting array was written
    to. This warning was skipped when the array was used through the buffer interface
    (e.g. `memoryview(arr)`). The same thing will now occur for the two protocols
    `__array_interface__`, and `__array_struct__` returning read-only buffers instead
    of giving a warning.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16350](https://github.com/numpy/numpy/pull/16350))
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: Numeric-style type names have been removed from type dictionaries
  id: totrans-529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To stay in sync with the deprecation for `np.dtype("Complex64")` and other numeric-style
    (capital case) types. These were removed from `np.sctypeDict` and `np.typeDict`.
    You should use the lower case versions instead. Note that `"Complex64"` corresponds
    to `"complex128"` and `"Complex32"` corresponds to `"complex64"`. The numpy style
    (new) versions, denote the full size and not the size of the real/imaginary part.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: The `operator.concat` function now raises TypeError for array arguments
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous behavior was to fall back to addition and add the two arrays, which
    was thought to be unexpected behavior for a concatenation function.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16570](https://github.com/numpy/numpy/pull/16570))
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '`nickname` attribute removed from ABCPolyBase'
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An abstract property `nickname` has been removed from `ABCPolyBase` as it was
    no longer used in the derived convenience classes. This may affect users who have
    derived classes from `ABCPolyBase` and overridden the methods for representation
    and display, e.g. `__str__`, `__repr__`, `_repr_latex`, etc.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16589](https://github.com/numpy/numpy/pull/16589))
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '`float->timedelta` and `uint64->timedelta` promotion will raise a TypeError'
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Float and timedelta promotion consistently raises a TypeError. `np.promote_types("float32",
    "m8")` aligns with `np.promote_types("m8", "float32")` now and both raise a TypeError.
    Previously, `np.promote_types("float32", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: Uint64 and timedelta promotion consistently raises a TypeError. `np.promote_types("uint64",
    "m8")` aligns with `np.promote_types("m8", "uint64")` now and both raise a TypeError.
    Previously, `np.promote_types("uint64", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16592](https://github.com/numpy/numpy/pull/16592))
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.genfromtxt` now correctly unpacks structured arrays'
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously, [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") failed to unpack if it was called with `unpack=True` and a
    structured datatype was passed to the `dtype` argument (or `dtype=None` was passed
    and a structured datatype was inferred). For example:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Structured arrays will now correctly unpack into a list of arrays, one for
    each column:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: ([gh-16650](https://github.com/numpy/numpy/pull/16650))
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '`mgrid`, `r_`, etc. consistently return correct outputs for non-default precision
    input'
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]` and
    `np.r_[0:10:np.complex64(3j)]` failed to return meaningful output. This bug potentially
    affects [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid"),
    [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), and [`c_`](../reference/generated/numpy.c_.html#numpy.c_
    "numpy.c_") when an input with dtype other than the default `float64` and `complex128`
    and equivalent Python types were used. The methods have been fixed to handle varying
    precision correctly.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16815](https://github.com/numpy/numpy/pull/16815))
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: Boolean array indices with mismatching shapes now properly give `IndexError`
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, if a boolean array index matched the size of the indexed array but
    not the shape, it was incorrectly allowed in some cases. In other cases, it gave
    an error, but the error was incorrectly a `ValueError` with a message about broadcasting
    instead of the correct `IndexError`.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following used to incorrectly give `ValueError: operands could
    not be broadcast together with shapes (2,2) (1,4)`:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And the following used to incorrectly return `array([], dtype=float64)`:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Both now correctly give `IndexError: boolean index did not match indexed array
    along dimension 0; dimension is 2 but corresponding boolean dimension is 1`.'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17010](https://github.com/numpy/numpy/pull/17010))
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Casting errors interrupt Iteration
  id: totrans-559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When iterating while casting values, an error may stop the iteration earlier
    than before. In any case, a failed casting operation always returned undefined,
    partial results. Those may now be even more undefined and partial. For users of
    the `NpyIter` C-API such cast errors will now cause the *iternext()* function
    to return 0 and thus abort iteration. Currently, there is no API to detect such
    an error directly. It is necessary to check `PyErr_Occurred()`, which may be problematic
    in combination with `NpyIter_Reset`. These issues always existed, but new API
    could be added if required by users.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17029](https://github.com/numpy/numpy/pull/17029))
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: f2py generated code may return unicode instead of byte strings
  id: totrans-562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some byte strings previously returned by f2py generated code may now be unicode
    strings. This results from the ongoing Python2 -> Python3 cleanup.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17068](https://github.com/numpy/numpy/pull/17068))
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: The first element of the `__array_interface__["data"]` tuple must be an integer
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This has been the documented interface for many years, but there was still code
    that would accept a byte string representation of the pointer address. That code
    has been removed, passing the address as a byte string will now raise an error.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17241](https://github.com/numpy/numpy/pull/17241))
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: poly1d respects the dtype of all-zero argument
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, constructing an instance of `poly1d` with all-zero coefficients
    would cast the coefficients to `np.float64`. This affected the output dtype of
    methods which construct `poly1d` instances internally, such as `np.polymul`.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17577](https://github.com/numpy/numpy/pull/17577))
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: The numpy.i file for swig is Python 3 only.
  id: totrans-571
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses of Python 2.7 C-API functions have been updated to Python 3 only. Users
    who need the old version should take it from an older version of NumPy.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17580](https://github.com/numpy/numpy/pull/17580))
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: Void dtype discovery in `np.array`
  id: totrans-574
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In calls using `np.array(..., dtype="V")`, `arr.astype("V")`, and similar a
    TypeError will now be correctly raised unless all elements have the identical
    void length. An example for this is:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Which previously returned an array with dtype `"V2"` which cannot represent
    `b"1"` faithfully.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17706](https://github.com/numpy/numpy/pull/17706))
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '`isinstance(dtype, np.dtype)` and not `type(dtype) is not np.dtype`'
  id: totrans-579
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy dtypes are not direct instances of `np.dtype` anymore. Code that may have
    used `type(dtype) is np.dtype` will always return `False` and must be updated
    to use the correct version `isinstance(dtype, np.dtype)`.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: This change also affects the C-side macro `PyArray_DescrCheck` if compiled against
    a NumPy older than 1.16.6\. If code uses this macro and wishes to compile against
    an older version of NumPy, it must replace the macro (see also [C API changes](#c-api-changes)
    section).
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: Same kind casting in concatenate with `axis=None`
  id: totrans-582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") is called with `axis=None`, the flattened arrays were cast
    with `unsafe`. Any other axis choice uses “same kind”. That different default
    has been deprecated and “same kind” casting will be used instead. The new `casting`
    keyword argument can be used to retain the old behaviour.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Scalars are cast when assigned to arrays
  id: totrans-585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When creating or assigning to arrays, in all relevant cases NumPy scalars will
    now be cast identically to NumPy arrays. In particular this changes the behaviour
    in some cases which previously raised an error:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'will succeed and return an undefined result (usually the smallest possible
    integer). This also affects assignments:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'At this time, NumPy retains the behaviour for:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The above changes do not affect Python scalars:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'remains unaffected (`np.nan` is a Python `float`, not a NumPy one). Unlike
    signed integers, unsigned integers do not retain this special case, since they
    always behaved more like casting. The following code stops raising an error:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: To avoid backward compatibility issues, at this time assignment from `datetime64`
    scalar to strings of too short length remains supported. This means that `np.asarray(np.datetime64("2020-10-10"),
    dtype="S5")` succeeds now, when it failed before. In the long term this may be
    deprecated or the unsafe cast may be allowed generally to make assignment of arrays
    and scalars behave consistently.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: Array coercion changes when Strings and other types are mixed
  id: totrans-597
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When strings and other types are mixed, such as:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The results will change, which may lead to string dtypes with longer strings
    in some cases. In particularly, if `dtype="S"` is not provided any numerical value
    will lead to a string results long enough to hold all possible numerical values.
    (e.g. “S32” for floats). Note that you should always provide `dtype="S"` when
    converting non-strings to strings.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: 'If `dtype="S"` is provided the results will be largely identical to before,
    but NumPy scalars (not a Python float like `1.0`), will still enforce a uniform
    string length:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Previously the first version gave the same result as the second.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: Array coercion restructure
  id: totrans-604
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Array coercion has been restructured. In general, this should not affect users.
    In extremely rare corner cases where array-likes are nested:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Things will now be more consistent with:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: This can subtly change output for some badly defined array-likes. One example
    for this are array-like objects which are not also sequences of matching shape.
    In NumPy 1.20, a warning will be given when an array-like is not also a sequence
    (but behaviour remains identical, see deprecations). If an array like is also
    a sequence (defines `__getitem__` and `__len__`) NumPy will now only use the result
    given by `__array__`, `__array_interface__`, or `__array_struct__`. This will
    result in differences when the (nested) sequence describes a different shape.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16200](https://github.com/numpy/numpy/pull/16200))
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: Writing to the result of [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") will export readonly buffers
  id: totrans-611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In NumPy 1.17 [`numpy.broadcast_arrays`](../reference/generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays") started warning when the resulting array was written
    to. This warning was skipped when the array was used through the buffer interface
    (e.g. `memoryview(arr)`). The same thing will now occur for the two protocols
    `__array_interface__`, and `__array_struct__` returning read-only buffers instead
    of giving a warning.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16350](https://github.com/numpy/numpy/pull/16350))
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: Numeric-style type names have been removed from type dictionaries
  id: totrans-614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To stay in sync with the deprecation for `np.dtype("Complex64")` and other numeric-style
    (capital case) types. These were removed from `np.sctypeDict` and `np.typeDict`.
    You should use the lower case versions instead. Note that `"Complex64"` corresponds
    to `"complex128"` and `"Complex32"` corresponds to `"complex64"`. The numpy style
    (new) versions, denote the full size and not the size of the real/imaginary part.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16554](https://github.com/numpy/numpy/pull/16554))
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: The `operator.concat` function now raises TypeError for array arguments
  id: totrans-617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous behavior was to fall back to addition and add the two arrays, which
    was thought to be unexpected behavior for a concatenation function.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16570](https://github.com/numpy/numpy/pull/16570))
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: '`nickname` attribute removed from ABCPolyBase'
  id: totrans-620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An abstract property `nickname` has been removed from `ABCPolyBase` as it was
    no longer used in the derived convenience classes. This may affect users who have
    derived classes from `ABCPolyBase` and overridden the methods for representation
    and display, e.g. `__str__`, `__repr__`, `_repr_latex`, etc.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16589](https://github.com/numpy/numpy/pull/16589))
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: '`float->timedelta` and `uint64->timedelta` promotion will raise a TypeError'
  id: totrans-623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Float and timedelta promotion consistently raises a TypeError. `np.promote_types("float32",
    "m8")` aligns with `np.promote_types("m8", "float32")` now and both raise a TypeError.
    Previously, `np.promote_types("float32", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: Uint64 and timedelta promotion consistently raises a TypeError. `np.promote_types("uint64",
    "m8")` aligns with `np.promote_types("m8", "uint64")` now and both raise a TypeError.
    Previously, `np.promote_types("uint64", "m8")` returned `"m8"` which was considered
    a bug.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16592](https://github.com/numpy/numpy/pull/16592))
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.genfromtxt` now correctly unpacks structured arrays'
  id: totrans-627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Previously, [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") failed to unpack if it was called with `unpack=True` and a
    structured datatype was passed to the `dtype` argument (or `dtype=None` was passed
    and a structured datatype was inferred). For example:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Structured arrays will now correctly unpack into a list of arrays, one for
    each column:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: ([gh-16650](https://github.com/numpy/numpy/pull/16650))
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '`mgrid`, `r_`, etc. consistently return correct outputs for non-default precision
    input'
  id: totrans-633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `np.mgrid[np.float32(0.1):np.float32(0.35):np.float32(0.1),]` and
    `np.r_[0:10:np.complex64(3j)]` failed to return meaningful output. This bug potentially
    affects [`mgrid`](../reference/generated/numpy.mgrid.html#numpy.mgrid "numpy.mgrid"),
    [`ogrid`](../reference/generated/numpy.ogrid.html#numpy.ogrid "numpy.ogrid"),
    [`r_`](../reference/generated/numpy.r_.html#numpy.r_ "numpy.r_"), and [`c_`](../reference/generated/numpy.c_.html#numpy.c_
    "numpy.c_") when an input with dtype other than the default `float64` and `complex128`
    and equivalent Python types were used. The methods have been fixed to handle varying
    precision correctly.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16815](https://github.com/numpy/numpy/pull/16815))
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: Boolean array indices with mismatching shapes now properly give `IndexError`
  id: totrans-636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, if a boolean array index matched the size of the indexed array but
    not the shape, it was incorrectly allowed in some cases. In other cases, it gave
    an error, but the error was incorrectly a `ValueError` with a message about broadcasting
    instead of the correct `IndexError`.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following used to incorrectly give `ValueError: operands could
    not be broadcast together with shapes (2,2) (1,4)`:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'And the following used to incorrectly return `array([], dtype=float64)`:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Both now correctly give `IndexError: boolean index did not match indexed array
    along dimension 0; dimension is 2 but corresponding boolean dimension is 1`.'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17010](https://github.com/numpy/numpy/pull/17010))
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: Casting errors interrupt Iteration
  id: totrans-644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When iterating while casting values, an error may stop the iteration earlier
    than before. In any case, a failed casting operation always returned undefined,
    partial results. Those may now be even more undefined and partial. For users of
    the `NpyIter` C-API such cast errors will now cause the *iternext()* function
    to return 0 and thus abort iteration. Currently, there is no API to detect such
    an error directly. It is necessary to check `PyErr_Occurred()`, which may be problematic
    in combination with `NpyIter_Reset`. These issues always existed, but new API
    could be added if required by users.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17029](https://github.com/numpy/numpy/pull/17029))
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: f2py generated code may return unicode instead of byte strings
  id: totrans-647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some byte strings previously returned by f2py generated code may now be unicode
    strings. This results from the ongoing Python2 -> Python3 cleanup.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17068](https://github.com/numpy/numpy/pull/17068))
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: The first element of the `__array_interface__["data"]` tuple must be an integer
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This has been the documented interface for many years, but there was still code
    that would accept a byte string representation of the pointer address. That code
    has been removed, passing the address as a byte string will now raise an error.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17241](https://github.com/numpy/numpy/pull/17241))
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: poly1d respects the dtype of all-zero argument
  id: totrans-653
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, constructing an instance of `poly1d` with all-zero coefficients
    would cast the coefficients to `np.float64`. This affected the output dtype of
    methods which construct `poly1d` instances internally, such as `np.polymul`.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17577](https://github.com/numpy/numpy/pull/17577))
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: The numpy.i file for swig is Python 3 only.
  id: totrans-656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses of Python 2.7 C-API functions have been updated to Python 3 only. Users
    who need the old version should take it from an older version of NumPy.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17580](https://github.com/numpy/numpy/pull/17580))
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: Void dtype discovery in `np.array`
  id: totrans-659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In calls using `np.array(..., dtype="V")`, `arr.astype("V")`, and similar a
    TypeError will now be correctly raised unless all elements have the identical
    void length. An example for this is:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Which previously returned an array with dtype `"V2"` which cannot represent
    `b"1"` faithfully.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17706](https://github.com/numpy/numpy/pull/17706))
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  id: totrans-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PyArray_DescrCheck` macro is modified
  id: totrans-665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `PyArray_DescrCheck` macro has been updated since NumPy 1.16.6 to be:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Starting with NumPy 1.20 code that is compiled against an earlier version will
    be API incompatible with NumPy 1.20. The fix is to either compile against 1.16.6
    (if the NumPy 1.16 release is the oldest release you wish to support), or manually
    inline the macro by replacing it with the new definition:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: which is compatible with all NumPy versions.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: Size of `np.ndarray` and `np.void_` changed
  id: totrans-671
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The size of the `PyArrayObject` and `PyVoidScalarObject` structures have changed.
    The following header definition has been removed:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'since the size must not be considered a compile time constant: it will change
    for different runtime versions of NumPy.'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: The most likely relevant use are potential subclasses written in C which will
    have to be recompiled and should be updated. Please see the documentation for
    [`PyArrayObject`](../reference/c-api/types-and-structures.html#c.PyArrayObject
    "PyArrayObject") for more details and contact the NumPy developers if you are
    affected by this change.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: NumPy will attempt to give a graceful error but a program expecting a fixed
    structure size may have undefined behaviour and likely crash.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16938](https://github.com/numpy/numpy/pull/16938))
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: The `PyArray_DescrCheck` macro is modified
  id: totrans-678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `PyArray_DescrCheck` macro has been updated since NumPy 1.16.6 to be:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Starting with NumPy 1.20 code that is compiled against an earlier version will
    be API incompatible with NumPy 1.20. The fix is to either compile against 1.16.6
    (if the NumPy 1.16 release is the oldest release you wish to support), or manually
    inline the macro by replacing it with the new definition:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: which is compatible with all NumPy versions.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: Size of `np.ndarray` and `np.void_` changed
  id: totrans-684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The size of the `PyArrayObject` and `PyVoidScalarObject` structures have changed.
    The following header definition has been removed:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'since the size must not be considered a compile time constant: it will change
    for different runtime versions of NumPy.'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: The most likely relevant use are potential subclasses written in C which will
    have to be recompiled and should be updated. Please see the documentation for
    [`PyArrayObject`](../reference/c-api/types-and-structures.html#c.PyArrayObject
    "PyArrayObject") for more details and contact the NumPy developers if you are
    affected by this change.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: NumPy will attempt to give a graceful error but a program expecting a fixed
    structure size may have undefined behaviour and likely crash.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16938](https://github.com/numpy/numpy/pull/16938))
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  id: totrans-691
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`where` keyword argument for `numpy.all` and `numpy.any` functions'
  id: totrans-692
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `where` is added and allows to only consider specified
    elements or subaxes from an array in the Boolean evaluation of `all` and `any`.
    This new keyword is available to the functions `all` and `any` both via `numpy`
    directly or in the methods of `numpy.ndarray`.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: '`where` keyword argument for `numpy` functions `mean`, `std`, `var`'
  id: totrans-695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `where` is added and allows to limit the scope in the calculation
    of `mean`, `std` and `var` to only a subset of elements. It is available both
    via `numpy` directly or in the methods of `numpy.ndarray`.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15852](https://github.com/numpy/numpy/pull/15852))
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '`norm=backward`, `forward` keyword options for `numpy.fft` functions'
  id: totrans-699
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument option `norm=backward` is added as an alias for `None`
    and acts as the default option; using it has the direct transforms unscaled and
    the inverse transforms scaled by `1/n`.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: Using the new keyword argument option `norm=forward` has the direct transforms
    scaled by `1/n` and the inverse transforms unscaled (i.e. exactly opposite to
    the default option `norm=backward`).
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16476](https://github.com/numpy/numpy/pull/16476))
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is now typed
  id: totrans-703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Type annotations have been added for large parts of NumPy. There is also a new
    [`numpy.typing`](../reference/typing.html#module-numpy.typing "numpy.typing")
    module that contains useful types for end-users. The currently available types
    are
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '`ArrayLike`: for objects that can be coerced to an array'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DtypeLike`: for objects that can be coerced to a dtype'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-16515](https://github.com/numpy/numpy/pull/16515))
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.typing` is accessible at runtime'
  id: totrans-708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The types in `numpy.typing` can now be imported at runtime. Code like the following
    will now work:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: ([gh-16558](https://github.com/numpy/numpy/pull/16558))
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: New `__f2py_numpy_version__` attribute for f2py generated modules.
  id: totrans-712
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because f2py is released together with NumPy, `__f2py_numpy_version__` provides
    a way to track the version f2py used to generate the module.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16594](https://github.com/numpy/numpy/pull/16594))
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '`mypy` tests can be run via runtests.py'
  id: totrans-715
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently running mypy with the NumPy stubs configured requires either:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: Installing NumPy
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the source directory to MYPYPATH and linking to the `mypy.ini`
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both options are somewhat inconvenient, so add a `--mypy` option to runtests
    that handles setting things up for you. This will also be useful in the future
    for any typing codegen since it will ensure the project is built before type checking.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17123](https://github.com/numpy/numpy/pull/17123))
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: Negation of user defined BLAS/LAPACK detection order
  id: totrans-721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    allows negation of libraries when determining BLAS/LAPACK libraries. This may
    be used to remove an item from the library resolution phase, i.e. to disallow
    NetLIB libraries one could do:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: That will use any of the accelerated libraries instead.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17219](https://github.com/numpy/numpy/pull/17219))
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: Allow passing optimizations arguments to asv build
  id: totrans-726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is now possible to pass `-j`, `--cpu-baseline`, `--cpu-dispatch` and `--disable-optimization`
    flags to ASV build when the `--bench-compare` argument is used.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17284](https://github.com/numpy/numpy/pull/17284))
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: The NVIDIA HPC SDK nvfortran compiler is now supported
  id: totrans-729
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for the nvfortran compiler, a version of pgfortran, has been added.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17344](https://github.com/numpy/numpy/pull/17344))
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '`dtype` option for `cov` and `corrcoef`'
  id: totrans-732
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dtype` option is now available for [`numpy.cov`](../reference/generated/numpy.cov.html#numpy.cov
    "numpy.cov") and [`numpy.corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"). It specifies which data-type the returned result should have.
    By default the functions still return a [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64") result.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17456](https://github.com/numpy/numpy/pull/17456))
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '`where` keyword argument for `numpy.all` and `numpy.any` functions'
  id: totrans-735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `where` is added and allows to only consider specified
    elements or subaxes from an array in the Boolean evaluation of `all` and `any`.
    This new keyword is available to the functions `all` and `any` both via `numpy`
    directly or in the methods of `numpy.ndarray`.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '`where` keyword argument for `numpy` functions `mean`, `std`, `var`'
  id: totrans-738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument `where` is added and allows to limit the scope in the calculation
    of `mean`, `std` and `var` to only a subset of elements. It is available both
    via `numpy` directly or in the methods of `numpy.ndarray`.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: Any broadcastable Boolean array or a scalar can be set as `where`. It defaults
    to `True` to evaluate the functions for all elements in an array if `where` is
    not set by the user. Examples are given in the documentation of the functions.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15852](https://github.com/numpy/numpy/pull/15852))
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '`norm=backward`, `forward` keyword options for `numpy.fft` functions'
  id: totrans-742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword argument option `norm=backward` is added as an alias for `None`
    and acts as the default option; using it has the direct transforms unscaled and
    the inverse transforms scaled by `1/n`.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: Using the new keyword argument option `norm=forward` has the direct transforms
    scaled by `1/n` and the inverse transforms unscaled (i.e. exactly opposite to
    the default option `norm=backward`).
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16476](https://github.com/numpy/numpy/pull/16476))
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is now typed
  id: totrans-746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Type annotations have been added for large parts of NumPy. There is also a new
    [`numpy.typing`](../reference/typing.html#module-numpy.typing "numpy.typing")
    module that contains useful types for end-users. The currently available types
    are
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: '`ArrayLike`: for objects that can be coerced to an array'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DtypeLike`: for objects that can be coerced to a dtype'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-16515](https://github.com/numpy/numpy/pull/16515))
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.typing` is accessible at runtime'
  id: totrans-751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The types in `numpy.typing` can now be imported at runtime. Code like the following
    will now work:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: ([gh-16558](https://github.com/numpy/numpy/pull/16558))
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: New `__f2py_numpy_version__` attribute for f2py generated modules.
  id: totrans-755
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because f2py is released together with NumPy, `__f2py_numpy_version__` provides
    a way to track the version f2py used to generate the module.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16594](https://github.com/numpy/numpy/pull/16594))
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: '`mypy` tests can be run via runtests.py'
  id: totrans-758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently running mypy with the NumPy stubs configured requires either:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: Installing NumPy
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the source directory to MYPYPATH and linking to the `mypy.ini`
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both options are somewhat inconvenient, so add a `--mypy` option to runtests
    that handles setting things up for you. This will also be useful in the future
    for any typing codegen since it will ensure the project is built before type checking.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17123](https://github.com/numpy/numpy/pull/17123))
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: Negation of user defined BLAS/LAPACK detection order
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    allows negation of libraries when determining BLAS/LAPACK libraries. This may
    be used to remove an item from the library resolution phase, i.e. to disallow
    NetLIB libraries one could do:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: That will use any of the accelerated libraries instead.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17219](https://github.com/numpy/numpy/pull/17219))
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: Allow passing optimizations arguments to asv build
  id: totrans-769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is now possible to pass `-j`, `--cpu-baseline`, `--cpu-dispatch` and `--disable-optimization`
    flags to ASV build when the `--bench-compare` argument is used.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17284](https://github.com/numpy/numpy/pull/17284))
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: The NVIDIA HPC SDK nvfortran compiler is now supported
  id: totrans-772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for the nvfortran compiler, a version of pgfortran, has been added.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17344](https://github.com/numpy/numpy/pull/17344))
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: '`dtype` option for `cov` and `corrcoef`'
  id: totrans-775
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dtype` option is now available for [`numpy.cov`](../reference/generated/numpy.cov.html#numpy.cov
    "numpy.cov") and [`numpy.corrcoef`](../reference/generated/numpy.corrcoef.html#numpy.corrcoef
    "numpy.corrcoef"). It specifies which data-type the returned result should have.
    By default the functions still return a [`numpy.float64`](../reference/arrays.scalars.html#numpy.float64
    "numpy.float64") result.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17456](https://github.com/numpy/numpy/pull/17456))
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-778
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improved string representation for polynomials (`__str__`)
  id: totrans-779
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The string representation (`__str__`) of all six polynomial types in [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") has been updated to give the polynomial as a mathematical
    expression instead of an array of coefficients. Two package-wide formats for the
    polynomial expressions are available - one using Unicode characters for superscripts
    and subscripts, and another using only ASCII characters.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15666](https://github.com/numpy/numpy/pull/15666))
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: Remove the Accelerate library as a candidate LAPACK library
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple no longer supports Accelerate. Remove it.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15759](https://github.com/numpy/numpy/pull/15759))
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: Object arrays containing multi-line objects have a more readable `repr`
  id: totrans-785
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If elements of an object array have a `repr` containing new lines, then the
    wrapped lines will be aligned by column. Notably, this improves the `repr` of
    nested arrays:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: ([gh-15997](https://github.com/numpy/numpy/pull/15997))
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate supports providing an output dtype
  id: totrans-789
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support was added to [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") to provide an output `dtype` and `casting` using keyword
    arguments. The `dtype` argument cannot be provided in conjunction with the `out`
    one.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: Thread safe f2py callback functions
  id: totrans-792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Callback functions in f2py are now thread safe.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16519](https://github.com/numpy/numpy/pull/16519))
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.core.records.fromfile`](../reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile") now supports file-like objects'
  id: totrans-795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.rec.fromfile` can now use file-like objects, for instance [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO
    "(in Python v3.11)")'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16675](https://github.com/numpy/numpy/pull/16675))
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: RPATH support on AIX added to distutils
  id: totrans-798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows SciPy to be built on AIX.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16710](https://github.com/numpy/numpy/pull/16710))
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: Use f90 compiler specified by the command line args
  id: totrans-801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The compiler command selection for Fortran Portland Group Compiler is changed
    in `numpy.distutils.fcompiler`. This only affects the linking command. This forces
    the use of the executable provided by the command line option (if provided) instead
    of the pgfortran executable. If no executable is provided to the command line
    option it defaults to the pgf90 executable, which is an alias for pgfortran according
    to the PGI documentation.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16730](https://github.com/numpy/numpy/pull/16730))
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: Add NumPy declarations for Cython 3.0 and later
  id: totrans-804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pxd declarations for Cython 3.0 were improved to avoid using deprecated
    NumPy C-API features. Extension modules built with Cython 3.0+ that use NumPy
    can now set the C macro `NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION` to avoid C
    compiler warnings about deprecated API usage.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16986](https://github.com/numpy/numpy/pull/16986))
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: Make the window functions exactly symmetric
  id: totrans-807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure the window functions provided by NumPy are symmetric. There were previously
    small deviations from symmetry due to numerical precision that are now avoided
    by better arrangement of the computation.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17195](https://github.com/numpy/numpy/pull/17195))
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: Improved string representation for polynomials (`__str__`)
  id: totrans-810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The string representation (`__str__`) of all six polynomial types in [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial") has been updated to give the polynomial as a mathematical
    expression instead of an array of coefficients. Two package-wide formats for the
    polynomial expressions are available - one using Unicode characters for superscripts
    and subscripts, and another using only ASCII characters.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15666](https://github.com/numpy/numpy/pull/15666))
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: Remove the Accelerate library as a candidate LAPACK library
  id: totrans-813
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple no longer supports Accelerate. Remove it.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15759](https://github.com/numpy/numpy/pull/15759))
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: Object arrays containing multi-line objects have a more readable `repr`
  id: totrans-816
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If elements of an object array have a `repr` containing new lines, then the
    wrapped lines will be aligned by column. Notably, this improves the `repr` of
    nested arrays:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: ([gh-15997](https://github.com/numpy/numpy/pull/15997))
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate supports providing an output dtype
  id: totrans-820
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support was added to [`concatenate`](../reference/generated/numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate") to provide an output `dtype` and `casting` using keyword
    arguments. The `dtype` argument cannot be provided in conjunction with the `out`
    one.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16134](https://github.com/numpy/numpy/pull/16134))
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: Thread safe f2py callback functions
  id: totrans-823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Callback functions in f2py are now thread safe.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16519](https://github.com/numpy/numpy/pull/16519))
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.core.records.fromfile`](../reference/generated/numpy.core.records.fromfile.html#numpy.core.records.fromfile
    "numpy.core.records.fromfile") now supports file-like objects'
  id: totrans-826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.rec.fromfile` can now use file-like objects, for instance [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO
    "(in Python v3.11)")'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16675](https://github.com/numpy/numpy/pull/16675))
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: RPATH support on AIX added to distutils
  id: totrans-829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This allows SciPy to be built on AIX.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16710](https://github.com/numpy/numpy/pull/16710))
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: Use f90 compiler specified by the command line args
  id: totrans-832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The compiler command selection for Fortran Portland Group Compiler is changed
    in `numpy.distutils.fcompiler`. This only affects the linking command. This forces
    the use of the executable provided by the command line option (if provided) instead
    of the pgfortran executable. If no executable is provided to the command line
    option it defaults to the pgf90 executable, which is an alias for pgfortran according
    to the PGI documentation.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16730](https://github.com/numpy/numpy/pull/16730))
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: Add NumPy declarations for Cython 3.0 and later
  id: totrans-835
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pxd declarations for Cython 3.0 were improved to avoid using deprecated
    NumPy C-API features. Extension modules built with Cython 3.0+ that use NumPy
    can now set the C macro `NPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION` to avoid C
    compiler warnings about deprecated API usage.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-16986](https://github.com/numpy/numpy/pull/16986))
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: Make the window functions exactly symmetric
  id: totrans-838
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure the window functions provided by NumPy are symmetric. There were previously
    small deviations from symmetry due to numerical precision that are now avoided
    by better arrangement of the computation.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17195](https://github.com/numpy/numpy/pull/17195))
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements and changes
  id: totrans-841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Enable multi-platform SIMD compiler optimizations
  id: totrans-842
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A series of improvements for NumPy infrastructure to pave the way to **NEP-38**,
    that can be summarized as follow:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '**New Build Arguments**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cpu-baseline` to specify the minimal set of required optimizations, default
    value is `min` which provides the minimum CPU features that can safely run on
    a wide range of users platforms.'
  id: totrans-845
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cpu-dispatch` to specify the dispatched set of additional optimizations,
    default value is `max -xop -fma4` which enables all CPU features, except for AMD
    legacy features.'
  id: totrans-846
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--disable-optimization` to explicitly disable the whole new improvements,
    It also adds a new **C** compiler #definition called `NPY_DISABLE_OPTIMIZATION`
    which it can be used as guard for any SIMD code.'
  id: totrans-847
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced CPU dispatcher**'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flexible cross-architecture CPU dispatcher built on the top of Python/Numpy
    distutils, support all common compilers with a wide range of CPU features.
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The new dispatcher requires a special file extension `*.dispatch.c` to mark
    the dispatch-able **C** sources. These sources have the ability to be compiled
    multiple times so that each compilation process represents certain CPU features
    and provides different #definitions and flags that affect the code paths.'
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**New auto-generated C header ``core/src/common/_cpu_dispatch.h``**'
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This header is generated by the distutils module `ccompiler_opt`, and contains
    all the #definitions and headers of instruction sets, that had been configured
    through command arguments ‘–cpu-baseline’ and ‘–cpu-dispatch’.'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**New C header ``core/src/common/npy_cpu_dispatch.h``**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This header contains all utilities that required for the whole CPU dispatching
    process, it also can be considered as a bridge linking the new infrastructure
    work with NumPy CPU runtime detection.
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add new attributes to NumPy umath module(Python level)**'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__cpu_baseline__` a list contains the minimal set of required optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-baseline’.'
  id: totrans-856
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__cpu_dispatch__` a list contains the dispatched set of additional optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-dispatch’.'
  id: totrans-857
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print the supported CPU features during the run of PytestTester**'
  id: totrans-858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-13516](https://github.com/numpy/numpy/pull/13516))
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: Enable multi-platform SIMD compiler optimizations
  id: totrans-860
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A series of improvements for NumPy infrastructure to pave the way to **NEP-38**,
    that can be summarized as follow:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: '**New Build Arguments**'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cpu-baseline` to specify the minimal set of required optimizations, default
    value is `min` which provides the minimum CPU features that can safely run on
    a wide range of users platforms.'
  id: totrans-863
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cpu-dispatch` to specify the dispatched set of additional optimizations,
    default value is `max -xop -fma4` which enables all CPU features, except for AMD
    legacy features.'
  id: totrans-864
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--disable-optimization` to explicitly disable the whole new improvements,
    It also adds a new **C** compiler #definition called `NPY_DISABLE_OPTIMIZATION`
    which it can be used as guard for any SIMD code.'
  id: totrans-865
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced CPU dispatcher**'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flexible cross-architecture CPU dispatcher built on the top of Python/Numpy
    distutils, support all common compilers with a wide range of CPU features.
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The new dispatcher requires a special file extension `*.dispatch.c` to mark
    the dispatch-able **C** sources. These sources have the ability to be compiled
    multiple times so that each compilation process represents certain CPU features
    and provides different #definitions and flags that affect the code paths.'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**New auto-generated C header ``core/src/common/_cpu_dispatch.h``**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This header is generated by the distutils module `ccompiler_opt`, and contains
    all the #definitions and headers of instruction sets, that had been configured
    through command arguments ‘–cpu-baseline’ and ‘–cpu-dispatch’.'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**New C header ``core/src/common/npy_cpu_dispatch.h``**'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This header contains all utilities that required for the whole CPU dispatching
    process, it also can be considered as a bridge linking the new infrastructure
    work with NumPy CPU runtime detection.
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add new attributes to NumPy umath module(Python level)**'
  id: totrans-873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__cpu_baseline__` a list contains the minimal set of required optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-baseline’.'
  id: totrans-874
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__cpu_dispatch__` a list contains the dispatched set of additional optimizations
    that supported by the compiler and platform according to the specified values
    to command argument ‘–cpu-dispatch’.'
  id: totrans-875
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print the supported CPU features during the run of PytestTester**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-13516](https://github.com/numpy/numpy/pull/13516))
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-878
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changed behavior of `divmod(1., 0.)` and related functions
  id: totrans-879
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The changes also assure that different compiler versions have the same behavior
    for nan or inf usages in these operations. This was previously compiler dependent,
    we now force the invalid and divide by zero flags, making the results the same
    across compilers. For example, gcc-5, gcc-8, or gcc-9 now result in the same behavior.
    The changes are tabulated below:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: Summary of New Behavior
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Old Warning | New Warning | Old Result | New Result | Works on
    MacOS |'
  id: totrans-882
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-883
  prefs: []
  type: TYPE_TB
- en: '| np.divmod(1.0, 0.0) | Invalid | Invalid and Dividebyzero | nan, nan | inf,
    nan | Yes |'
  id: totrans-884
  prefs: []
  type: TYPE_TB
- en: '| np.fmod(1.0, 0.0) | Invalid | Invalid | nan | nan | No? Yes |'
  id: totrans-885
  prefs: []
  type: TYPE_TB
- en: '| np.floor_divide(1.0, 0.0) | Invalid | Dividebyzero | nan | inf | Yes |'
  id: totrans-886
  prefs: []
  type: TYPE_TB
- en: '| np.remainder(1.0, 0.0) | Invalid | Invalid | nan | nan | Yes |'
  id: totrans-887
  prefs: []
  type: TYPE_TB
- en: ([gh-16161](https://github.com/numpy/numpy/pull/16161))
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: '`np.linspace` on integers now uses floor'
  id: totrans-889
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using a `int` dtype in [`numpy.linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), previously float values would be rounded towards zero. Now
    [`numpy.floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor")
    is used instead, which rounds toward `-inf`. This changes the results for negative
    values. For example, the following would previously give:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'and now results in:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The former result can still be obtained with:'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: ([gh-16841](https://github.com/numpy/numpy/pull/16841))
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: Changed behavior of `divmod(1., 0.)` and related functions
  id: totrans-897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The changes also assure that different compiler versions have the same behavior
    for nan or inf usages in these operations. This was previously compiler dependent,
    we now force the invalid and divide by zero flags, making the results the same
    across compilers. For example, gcc-5, gcc-8, or gcc-9 now result in the same behavior.
    The changes are tabulated below:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: Summary of New Behavior
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Old Warning | New Warning | Old Result | New Result | Works on
    MacOS |'
  id: totrans-900
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-901
  prefs: []
  type: TYPE_TB
- en: '| np.divmod(1.0, 0.0) | Invalid | Invalid and Dividebyzero | nan, nan | inf,
    nan | Yes |'
  id: totrans-902
  prefs: []
  type: TYPE_TB
- en: '| np.fmod(1.0, 0.0) | Invalid | Invalid | nan | nan | No? Yes |'
  id: totrans-903
  prefs: []
  type: TYPE_TB
- en: '| np.floor_divide(1.0, 0.0) | Invalid | Dividebyzero | nan | inf | Yes |'
  id: totrans-904
  prefs: []
  type: TYPE_TB
- en: '| np.remainder(1.0, 0.0) | Invalid | Invalid | nan | nan | Yes |'
  id: totrans-905
  prefs: []
  type: TYPE_TB
- en: ([gh-16161](https://github.com/numpy/numpy/pull/16161))
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '`np.linspace` on integers now uses floor'
  id: totrans-907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using a `int` dtype in [`numpy.linspace`](../reference/generated/numpy.linspace.html#numpy.linspace
    "numpy.linspace"), previously float values would be rounded towards zero. Now
    [`numpy.floor`](../reference/generated/numpy.floor.html#numpy.floor "numpy.floor")
    is used instead, which rounds toward `-inf`. This changes the results for negative
    values. For example, the following would previously give:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'and now results in:'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The former result can still be obtained with:'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: ([gh-16841](https://github.com/numpy/numpy/pull/16841))
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
