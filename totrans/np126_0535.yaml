- en: numpy.array2string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.array2string.html](https://numpy.org/doc/1.26/reference/generated/numpy.array2string.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a string representation of an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_line_width**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Inserts newlines if text is longer than *max_line_width*. Defaults to `numpy.get_printoptions()['linewidth']`.
  prefs: []
  type: TYPE_NORMAL
- en: '**precision**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Floating point precision. Defaults to `numpy.get_printoptions()['precision']`.
  prefs: []
  type: TYPE_NORMAL
- en: '**suppress_small**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Represent numbers “very close” to zero as zero; default is False. Very close
    is defined by precision: if the precision is 8, e.g., numbers smaller (in absolute
    value) than 5e-9 are represented as zero. Defaults to `numpy.get_printoptions()[''suppress'']`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**separator**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Inserted between elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**prefix**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '**suffix**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The length of the prefix and suffix strings are used to respectively align
    and wrap the output. An array is typically printed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The output is left-padded by the length of the prefix string, and wrapping is
    forced at the column `max_line_width - len(suffix)`. It should be noted that the
    content of prefix and suffix strings are not included in the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**style**_NoValue, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Has no effect, do not use.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**formatter**dict of callables, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'If not None, the keys should indicate the type(s) that the respective formatting
    function applies to. Callables should return a string. Types that are not specified
    (by their corresponding keys) are handled by the default formatters. Individual
    types for which a formatter can be set are:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘bool’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘int’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘timedelta’ : a [`numpy.timedelta64`](../arrays.scalars.html#numpy.timedelta64
    "numpy.timedelta64")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘datetime’ : a [`numpy.datetime64`](../arrays.scalars.html#numpy.datetime64
    "numpy.datetime64")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘float’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘longfloat’ : 128-bit floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘complexfloat’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘longcomplexfloat’ : composed of two 128-bit floats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘void’ : type [`numpy.void`](../arrays.scalars.html#numpy.void "numpy.void")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘numpystr’ : types [`numpy.bytes_`](../arrays.scalars.html#numpy.bytes_ "numpy.bytes_")
    and [`numpy.str_`](../arrays.scalars.html#numpy.str_ "numpy.str_")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other keys that can be used to set a group of types at once are:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘all’ : sets all types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘int_kind’ : sets ‘int’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘float_kind’ : sets ‘float’ and ‘longfloat’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘complex_kind’ : sets ‘complexfloat’ and ‘longcomplexfloat’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘str_kind’ : sets ‘numpystr’'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**threshold**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Total number of array elements which trigger summarization rather than full
    repr. Defaults to `numpy.get_printoptions()['threshold']`.
  prefs: []
  type: TYPE_NORMAL
- en: '**edgeitems**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array items in summary at beginning and end of each dimension. Defaults
    to `numpy.get_printoptions()['edgeitems']`.
  prefs: []
  type: TYPE_NORMAL
- en: '**sign**string, either ‘-’, ‘+’, or ‘ ‘, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls printing of the sign of floating-point types. If ‘+’, always print
    the sign of positive values. If ‘ ‘, always prints a space (whitespace character)
    in the sign position of positive values. If ‘-’, omit the sign character of positive
    values. Defaults to `numpy.get_printoptions()['sign']`.
  prefs: []
  type: TYPE_NORMAL
- en: '**floatmode**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Controls the interpretation of the *precision* option for floating-point types.
    Defaults to `numpy.get_printoptions()[''floatmode'']`. Can take the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘fixed’: Always print exactly *precision* fractional digits, even if this would
    print more or fewer digits than necessary to specify the value uniquely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘unique’: Print the minimum number of fractional digits necessary to represent
    each value uniquely. Different elements may have a different number of digits.
    The value of the *precision* option is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘maxprec’: Print at most *precision* fractional digits, but if an element can
    be uniquely represented with fewer digits only print it with that many.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘maxprec_equal’: Print at most *precision* fractional digits, but if every
    element in the array can be uniquely represented with an equal number of fewer
    digits, use that many digits for all elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**legacy**string or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If set to the string *‘1.13’* enables 1.13 legacy printing mode. This approximates
    numpy 1.13 print output by including a space in the sign position of floats and
    different behavior for 0d arrays. If set to *False*, disables legacy mode. Unrecognized
    strings will be ignored with a warning for forward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**array_str**str'
  prefs: []
  type: TYPE_NORMAL
- en: String representation of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: if a callable in *formatter* does not return a string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array_str`](numpy.array_str.html#numpy.array_str "numpy.array_str"), [`array_repr`](numpy.array_repr.html#numpy.array_repr
    "numpy.array_repr"), [`set_printoptions`](numpy.set_printoptions.html#numpy.set_printoptions
    "numpy.set_printoptions"), [`get_printoptions`](numpy.get_printoptions.html#numpy.get_printoptions
    "numpy.get_printoptions")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If a formatter is specified for a certain type, the *precision* keyword is ignored
    for that type.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very flexible function; [`array_repr`](numpy.array_repr.html#numpy.array_repr
    "numpy.array_repr") and [`array_str`](numpy.array_str.html#numpy.array_str "numpy.array_str")
    are using [`array2string`](#numpy.array2string "numpy.array2string") internally
    so keywords with the same name should work identically in all three functions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
