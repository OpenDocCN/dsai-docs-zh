- en: scipy.fft.dst
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.dst.html#scipy.fft.dst](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.dst.html#scipy.fft.dst)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the Discrete Sine Transform of arbitrary type sequence x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**type**{1, 2, 3, 4}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the DST (see Notes). Default type is 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transform. If `n < x.shape[axis]`, *x* is truncated. If `n > x.shape[axis]`,
    *x* is zero-padded. The default results in `n = x.shape[axis]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the dst is computed; the default is over the last axis (i.e.,
    `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see Notes). Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**orthogonalize**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use the orthogonalized DST variant (see Notes). Defaults to `True`
    when `norm="ortho"` and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dst**ndarray of reals'
  prefs: []
  type: TYPE_NORMAL
- en: The transformed input array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`idst`](scipy.fft.idst.html#scipy.fft.idst "scipy.fft.idst")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse DST
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For `type in {2, 3}`, `norm="ortho"` breaks the direct correspondence with the
    direct Fourier transform. To recover it you must specify `orthogonalize=False`.
  prefs: []
  type: TYPE_NORMAL
- en: For `norm="ortho"` both the [`dst`](#scipy.fft.dst "scipy.fft.dst") and [`idst`](scipy.fft.idst.html#scipy.fft.idst
    "scipy.fft.idst") are scaled by the same overall factor in both directions. By
    default, the transform is also orthogonalized which for types 2 and 3 means the
    transform definition is modified to give orthogonality of the DST matrix (see
    below).
  prefs: []
  type: TYPE_NORMAL
- en: For `norm="backward"`, there is no scaling on the [`dst`](#scipy.fft.dst "scipy.fft.dst")
    and the [`idst`](scipy.fft.idst.html#scipy.fft.idst "scipy.fft.idst") is scaled
    by `1/N` where `N` is the “logical” size of the DST.
  prefs: []
  type: TYPE_NORMAL
- en: There are, theoretically, 8 types of the DST for different combinations of even/odd
    boundary conditions and boundary off sets [[1]](#ra6140d8ffbc7-1), only the first
    4 types are implemented in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type I**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DST-I; we use the following for `norm="backward"`.
    DST-I assumes the input is odd around \(n=-1\) and \(n=N\).
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \sin\left(\frac{\pi(k+1)(n+1)}{N+1}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Note that the DST-I is only supported for input size > 1. The (unnormalized)
    DST-I is its own inverse, up to a factor \(2(N+1)\). The orthonormalized DST-I
    is exactly its own inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '`orthogonalize` has no effect here, as the DST-I matrix is already orthogonal
    up to a scale factor of `2N`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type II**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DST-II; we use the following for `norm="backward"`.
    DST-II assumes the input is odd around \(n=-1/2\) and \(n=N-1/2\); the output
    is odd around \(k=-1\) and even around \(k=N-1\)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \sin\left(\frac{\pi(k+1)(2n+1)}{2N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `orthogonalize=True`, `y[-1]` is divided \(\sqrt{2}\) which, when combined
    with `norm="ortho"`, makes the corresponding matrix of coefficients orthonormal
    (`O @ O.T = np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Type III**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DST-III, we use the following (for `norm="backward"`).
    DST-III assumes the input is odd around \(n=-1\) and even around \(n=N-1\)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = (-1)^k x_{N-1} + 2 \sum_{n=0}^{N-2} x_n \sin\left( \frac{\pi(2k+1)(n+1)}{2N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `orthogonalize=True`, `x[-1]` is multiplied by \(\sqrt{2}\) which, when combined
    with `norm="ortho"`, makes the corresponding matrix of coefficients orthonormal
    (`O @ O.T = np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: The (unnormalized) DST-III is the inverse of the (unnormalized) DST-II, up to
    a factor \(2N\). The orthonormalized DST-III is exactly the inverse of the orthonormalized
    DST-II.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type IV**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DST-IV, we use the following (for `norm="backward"`).
    DST-IV assumes the input is odd around \(n=-0.5\) and even around \(n=N-0.5\)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \sin\left(\frac{\pi(2k+1)(2n+1)}{4N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: '`orthogonalize` has no effect here, as the DST-IV matrix is already orthogonal
    up to a scale factor of `2N`.'
  prefs: []
  type: TYPE_NORMAL
- en: The (unnormalized) DST-IV is its own inverse, up to a factor \(2N\). The orthonormalized
    DST-IV is exactly its own inverse.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Discrete sine transform”, [https://en.wikipedia.org/wiki/Discrete_sine_transform](https://en.wikipedia.org/wiki/Discrete_sine_transform)
  prefs: []
  type: TYPE_NORMAL
