- en: pandas.DataFrame.to_pickle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_pickle.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_pickle.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Pickle (serialize) object to file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**path**str, path object, or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: String, path object (implementing `os.PathLike[str]`), or file-like object implementing
    a binary `write()` function. File path where the pickled object will be stored.
  prefs: []
  type: TYPE_NORMAL
- en: '**compression**str or dict, default ‘infer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'For on-the-fly compression of the output data. If ‘infer’ and ‘path’ is path-like,
    then detect compression from the following extensions: ‘.gz’, ‘.bz2’, ‘.zip’,
    ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no compression).
    Set to `None` for no compression. Can also be a dict with key `''method''` set
    to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`, `''xz''`, `''tar''`}
    and other key-value pairs are forwarded to `zipfile.ZipFile`, `gzip.GzipFile`,
    `bz2.BZ2File`, `zstandard.ZstdCompressor`, `lzma.LZMAFile` or `tarfile.TarFile`,
    respectively. As an example, the following could be passed for faster compression
    and to create a reproducible gzip archive: `compression={''method'': ''gzip'',
    ''compresslevel'': 1, ''mtime'': 1}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Added support for .tar files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**protocol**int'
  prefs: []
  type: TYPE_NORMAL
- en: Int which indicates which protocol should be used by the pickler, default HIGHEST_PROTOCOL
    (see [[1]](#rc4e85fbd536b-1) paragraph 12.1.2). The possible values are 0, 1,
    2, 3, 4, 5\. A negative value for the protocol parameter is equivalent to setting
    its value to HIGHEST_PROTOCOL.
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_pickle`](pandas.read_pickle.html#pandas.read_pickle "pandas.read_pickle")'
  prefs: []
  type: TYPE_NORMAL
- en: Load pickled pandas object (or any object) from file.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_hdf`](pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf "pandas.DataFrame.to_hdf")'
  prefs: []
  type: TYPE_NORMAL
- en: Write DataFrame to an HDF5 file.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_sql`](pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql "pandas.DataFrame.to_sql")'
  prefs: []
  type: TYPE_NORMAL
- en: Write DataFrame to a SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_parquet`](pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")'
  prefs: []
  type: TYPE_NORMAL
- en: Write a DataFrame to the binary parquet format.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
