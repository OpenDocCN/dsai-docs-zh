- en: Contributing to the code base
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献代码基础
- en: 原文：[https://pandas.pydata.org/docs/development/contributing_codebase.html](https://pandas.pydata.org/docs/development/contributing_codebase.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/development/contributing_codebase.html](https://pandas.pydata.org/docs/development/contributing_codebase.html)
- en: 'Table of Contents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目录：
- en: '[Code standards](#code-standards)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[代码标准](#code-standards)'
- en: '[Pre-commit](#pre-commit)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pre-commit](#pre-commit)'
- en: '[Optional dependencies](#optional-dependencies)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可选依赖项](#optional-dependencies)'
- en: '[Backwards compatibility](#backwards-compatibility)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向后兼容性](#backwards-compatibility)'
- en: '[Type hints](#type-hints)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型提示](#type-hints)'
- en: '[Style guidelines](#style-guidelines)'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[样式指南](#style-guidelines)'
- en: '[pandas-specific types](#pandas-specific-types)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pandas 特定类型](#pandas-specific-types)'
- en: '[Validating type hints](#validating-type-hints)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[验证类型提示](#validating-type-hints)'
- en: '[Testing type hints in code using pandas](#testing-type-hints-in-code-using-pandas)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 pandas 测试代码中的类型提示](#testing-type-hints-in-code-using-pandas)'
- en: '[Testing with continuous integration](#testing-with-continuous-integration)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用持续集成进行测试](#testing-with-continuous-integration)'
- en: '[Test-driven development](#test-driven-development)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试驱动开发](#test-driven-development)'
- en: '[Writing tests](#writing-tests)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写测试](#writing-tests)'
- en: '[Using `pytest`](#using-pytest)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 `pytest`](#using-pytest)'
- en: '[Test structure](#test-structure)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试结构](#test-structure)'
- en: '[Preferred `pytest` idioms](#preferred-pytest-idioms)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[首选的 `pytest` 习惯用法](#preferred-pytest-idioms)'
- en: '[Testing a warning](#testing-a-warning)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试警告](#testing-a-warning)'
- en: '[Testing an exception](#testing-an-exception)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[测试异常](#testing-an-exception)'
- en: '[Testing involving files](#testing-involving-files)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[涉及文件的测试](#testing-involving-files)'
- en: '[Testing involving network connectivity](#testing-involving-network-connectivity)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[涉及网络连接的测试](#testing-involving-network-connectivity)'
- en: '[Example](#example)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#example)'
- en: '[Using `hypothesis`](#using-hypothesis)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 `hypothesis`](#using-hypothesis)'
- en: '[Running the test suite](#running-the-test-suite)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行测试套件](#running-the-test-suite)'
- en: '[Running the performance test suite](#running-the-performance-test-suite)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行性能测试套件](#running-the-performance-test-suite)'
- en: '[Documenting your code](#documenting-your-code)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[记录您的代码](#documenting-your-code)'
- en: '[Code standards](#id2)'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码标准](#id2)'
- en: Writing good code is not just about what you write. It is also about *how* you
    write it. During [Continuous Integration](#contributing-ci) testing, several tools
    will be run to check your code for stylistic errors. Generating any warnings will
    cause the test to fail. Thus, good style is a requirement for submitting code
    to pandas.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 写好的代码不仅仅是你写了什么。还有关于*如何*你写的。在[持续集成](#contributing-ci)测试期间，将运行多个工具来检查代码的风格错误。生成任何警告都将导致测试失败。因此，良好的风格是向
    pandas 提交代码的要求。
- en: There are a couple of tools in pandas to help contributors verify their changes
    before contributing to the project
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中有几个工具可帮助贡献者在贡献到项目之前验证其更改
- en: '`./ci/code_checks.sh`: a script validates the doctests, formatting in docstrings,
    and imported modules. It is possible to run the checks independently by using
    the parameters `docstrings`, `code`, and `doctests` (e.g. `./ci/code_checks.sh
    doctests`);'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./ci/code_checks.sh`：一个脚本用于验证文档字符串中的文档测试、格式以及导入的模块。可以使用参数`docstrings`、`code`和`doctests`独立运行检查（例如`./ci/code_checks.sh
    doctests`）；'
- en: '`pre-commit`, which we go into detail on in the next section.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre-commit`，我们将在下一节详细讨论。'
- en: In addition, because a lot of people use our library, it is important that we
    do not make sudden changes to the code that could have the potential to break
    a lot of user code as a result, that is, we need it to be as *backwards compatible*
    as possible to avoid mass breakages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为很多人使用我们的库，重要的是我们不要对代码进行突然的更改，这可能会导致大量用户代码出现潜在的错误，也就是说，我们需要尽可能做到*向后兼容*，以避免大规模的破坏。
- en: '## [Pre-commit](#id3)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '## [Pre-commit](#id3)'
- en: 'Additionally, [Continuous Integration](#contributing-ci) will run code formatting
    checks like `black`, `ruff`, `isort`, and `clang-format` and more using [pre-commit
    hooks](https://pre-commit.com/). Any warnings from these checks will cause the
    [Continuous Integration](#contributing-ci) to fail; therefore, it is helpful to
    run the check yourself before submitting code. This can be done by installing
    `pre-commit` (which should already have happened if you followed the instructions
    in [Setting up your development environment](contributing_environment.html#contributing-environment))
    and then running:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[持续集成](#contributing-ci)将使用[预提交钩子](https://pre-commit.com/)运行代码格式检查，例如`black`、`ruff`、`isort`和`clang-format`等等。来自这些检查的任何警告都会导致[持续集成](#contributing-ci)失败；因此，在提交代码之前运行检查很有帮助。这可以通过安装`pre-commit`（如果你遵循了[设置开发环境](contributing_environment.html#contributing-environment)中的说明，则应该已经完成）然后运行：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: from the root of the pandas repository. Now all of the styling checks will be
    run each time you commit changes without your needing to run each one manually.
    In addition, using `pre-commit` will also allow you to more easily remain up-to-date
    with our code checks as they change.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从 pandas 仓库的根目录开始。现在，每次提交更改时都会运行所有的样式检查，而无需手动运行每一个。此外，使用`pre-commit`还可以更轻松地保持与我们的代码检查的最新状态。
- en: Note that if needed, you can skip these checks with `git commit --no-verify`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果需要，你可以通过`git commit --no-verify`跳过这些检查。
- en: 'If you don’t want to use `pre-commit` as part of your workflow, you can still
    use it to run its checks with one of the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在工作流程中使用`pre-commit`，你仍然可以使用它来运行其检查之一：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: without needing to have done `pre-commit install` beforehand.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无需事先执行`pre-commit install`。
- en: 'Finally, we also have some slow pre-commit checks, which don’t run on each
    commit but which do run during continuous integration. You can trigger them manually
    with:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还有一些慢的预提交检查，它们不会在每次提交时运行，但会在持续集成期间运行。你可以使用以下命令手动触发它们：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may want to periodically run `pre-commit gc`, to clean up repos which are
    no longer used.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望定期运行`pre-commit gc`，以清理不再使用的仓库。
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have conflicting installations of `virtualenv`, then you may get an error
    - see [here](https://github.com/pypa/virtualenv/issues/1875).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有冲突的`virtualenv`安装，那么你可能会遇到错误-参见[这里](https://github.com/pypa/virtualenv/issues/1875)。
- en: Also, due to a [bug in virtualenv](https://github.com/pypa/virtualenv/issues/1986),
    you may run into issues if you’re using conda. To solve this, you can downgrade
    `virtualenv` to version `20.0.33`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于[虚拟环境中的一个错误](https://github.com/pypa/virtualenv/issues/1986)，如果你正在使用 conda，可能会遇到问题。要解决这个问题，你可以将`virtualenv`降级到`20.0.33`版本。
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have recently merged in main from the upstream branch, some of the dependencies
    used by `pre-commit` may have changed. Make sure to [update your development environment](contributing.html#contributing-update-dev).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你最近从上游分支合并到主分支，那么`pre-commit`使用的一些依赖项可能已经发生了变化。确保[更新你的开发环境](contributing.html#contributing-update-dev)。
- en: '[Optional dependencies](#id4)'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[可选依赖项](#id4)'
- en: Optional dependencies (e.g. matplotlib) should be imported with the private
    helper `pandas.compat._optional.import_optional_dependency`. This ensures a consistent
    error message when the dependency is not met.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可选依赖项（例如 matplotlib）应使用私有助手`pandas.compat._optional.import_optional_dependency`导入。这样可以在未满足依赖关系时确保一致的错误消息。
- en: All methods using an optional dependency should include a test asserting that
    an `ImportError` is raised when the optional dependency is not found. This test
    should be skipped if the library is present.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有使用可选依赖项的方法都应包含一个断言，断言在未找到可选依赖项时会引发`ImportError`。如果库存在，则应跳过此测试。
- en: All optional dependencies should be documented in [Optional dependencies](../getting_started/install.html#install-optional-dependencies)
    and the minimum required version should be set in the `pandas.compat._optional.VERSIONS`
    dict.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可选依赖项都应在[可选依赖项](../getting_started/install.html#install-optional-dependencies)中进行文档化，并且最低所需版本应在`pandas.compat._optional.VERSIONS`字典中设置。
- en: '[Backwards compatibility](#id5)'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[向后兼容性](#id5)'
- en: Please try to maintain backward compatibility. pandas has lots of users with
    lots of existing code, so don’t break it if at all possible. If you think breakage
    is required, clearly state why as part of the pull request. Also, be careful when
    changing method signatures and add deprecation warnings where needed. Also, add
    the deprecated sphinx directive to the deprecated functions or methods.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请尽量保持向后兼容性。pandas有很多用户和大量现有代码，因此请尽量避免破坏它。如果认为需要破坏，请在拉取请求中清楚说明原因。在更改方法签名时要小心，并在需要时添加弃用警告。还要在弃用的函数或方法中添加弃用的sphinx指令。
- en: 'If a function with the same arguments as the one being deprecated exist, you
    can use the `pandas.util._decorators.deprecate`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在与被弃用函数相同参数的函数，则可以使用`pandas.util._decorators.deprecate`：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Otherwise, you need to do it manually:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您需要手动执行：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You’ll also need to
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要
- en: Write a new test that asserts a warning is issued when calling with the deprecated
    argument
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个新的测试，断言在调用已弃用参数时会发出警告
- en: Update all of pandas existing tests and code to use the new argument
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新所有pandas现有的测试和代码以使用新参数
- en: See [Testing a warning](#contributing-warnings) for more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[测试警告](#contributing-warnings)以获取更多信息。
- en: '## [Type hints](#id6)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '## [类型提示](#id6)'
- en: pandas strongly encourages the use of [**PEP 484**](https://peps.python.org/pep-0484/)
    style type hints. New development should contain type hints and pull requests
    to annotate existing code are accepted as well!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: pandas强烈鼓励使用[**PEP 484**](https://peps.python.org/pep-0484/)风格的类型提示。新开发应包含类型提示，同时也接受用于注释现有代码的拉取请求！
- en: '[Style guidelines](#id7)'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[风格指南](#id7)'
- en: Type imports should follow the `from typing import ...` convention. Your code
    may be automatically re-written to use some modern constructs (e.g. using the
    built-in `list` instead of `typing.List`) by the [pre-commit checks](#contributing-pre-commit).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类型导入应遵循`from typing import ...`约定。您的代码可能会被[预提交检查](#contributing-pre-commit)自动重写以使用一些现代构造（例如，使用内置的`list`而不是`typing.List`）。
- en: In some cases in the code base classes may define class variables that shadow
    builtins. This causes an issue as described in [Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854).
    The defensive solution here is to create an unambiguous alias of the builtin and
    use that without your annotation. For example, if you come across a definition
    like
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码库中的某些情况下，类可能定义会遮蔽内置变量。这会导致问题，如[Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854)中所述。这里的防御性解决方案是创建内置变量的明确别名，并在注释中使用该别名。例如，如果遇到类似于以下定义
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The appropriate way to annotate this would be as follows
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对此进行注释的适当方式如下
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In some cases you may be tempted to use `cast` from the typing module when you
    know better than the analyzer. This occurs particularly when using custom inference
    functions. For example
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能会被诱惑在您比分析器更了解的情况下使用`typing`模块中的`cast`。这种情况特别发生在使用自定义推断函数时。例如
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The limitation here is that while a human can reasonably understand that `is_number`
    would catch the `int` and `float` types mypy cannot make that same inference just
    yet (see [mypy #5206](https://github.com/python/mypy/issues/5206). While the above
    works, the use of `cast` is **strongly discouraged**. Where applicable a refactor
    of the code to appease static analysis is preferable'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的限制在于，虽然人类可以合理地理解`is_number`会捕捉`int`和`float`类型，但mypy目前无法做出相同的推断（参见[mypy #5206](https://github.com/python/mypy/issues/5206)）。虽然上述方法有效，但**强烈不建议**使用`cast`。在适用的情况下，最好重构代码以满足静态分析的要求。'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With custom types and inference this is not always possible so exceptions are
    made, but every effort should be exhausted to avoid `cast` before going down such
    paths.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自定义类型和推断，这并不总是可能的，因此会有例外情况，但在采取这种方法之前应尽一切努力避免使用`cast`。
- en: '[pandas-specific types](#id8)'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[pandas特定类型](#id8)'
- en: Commonly used types specific to pandas will appear in [pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)
    and you should use these where applicable. This module is private for now but
    ultimately this should be exposed to third party libraries who want to implement
    type checking against pandas.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: pandas中常用的特定类型将出现在[pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)中，您应该在适用的地方使用这些类型。目前，此模块是私有的，但最终应该向希望对pandas进行类型检查的第三方库公开此模块。
- en: For example, quite a few functions in pandas accept a `dtype` argument. This
    can be expressed as a string like `"object"`, a `numpy.dtype` like `np.int64`
    or even a pandas `ExtensionDtype` like `pd.CategoricalDtype`. Rather than burden
    the user with having to constantly annotate all of those options, this can simply
    be imported and reused from the pandas._typing module
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，pandas 中有相当多的函数接受`dtype`参数。这可以表示为字符串，如`"object"`，`numpy.dtype`，如`np.int64`，甚至是
    pandas 的`ExtensionDtype`，如`pd.CategoricalDtype`。与其让用户不断地注释所有这些选项，不如从 pandas._typing
    模块中导入并重用。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This module will ultimately house types for repeatedly used concepts like “path-like”,
    “array-like”, “numeric”, etc… and can also hold aliases for commonly appearing
    parameters like `axis`. Development of this module is active so be sure to refer
    to the source for the most up to date list of available types.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块最终将包含诸如“路径样式”、“数组样式”、“数字”等重复使用的概念的类型，并且还可以保存常见参数的别名，如`axis`。该模块的开发活跃，因此请务必参考源代码以获取最新的可用类型列表。
- en: '[Validating type hints](#id9)'
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[验证类型提示](#id9)'
- en: pandas uses [mypy](http://mypy-lang.org) and [pyright](https://github.com/microsoft/pyright)
    to statically analyze the code base and type hints. After making any change you
    can ensure your type hints are consistent by running
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 使用[mypy](http://mypy-lang.org)和[pyright](https://github.com/microsoft/pyright)对代码库和类型提示进行静态分析。在进行任何更改后，您可以通过运行以下命令确保您的类型提示一致
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: in your python environment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 python 环境中。
- en: Warning
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Please be aware that the above commands will use the current python environment.
    If your python packages are older/newer than those installed by the pandas CI,
    the above commands might fail. This is often the case when the `mypy` or `numpy`
    versions do not match. Please see [how to setup the python environment](contributing_environment.html#contributing-mamba)
    or select a [recently succeeded workflow](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess),
    select the “Docstring validation, typing, and other manual pre-commit hooks” job,
    then click on “Set up Conda” and “Environment info” to see which versions the
    pandas CI installs.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，上述命令将使用当前的 python 环境。如果您的 python 包比 pandas CI 安装的包更新/较旧，则上述命令可能会失败。当`mypy`或`numpy`版本不匹配时，经常会出现这种情况。请参阅[如何设置
    python 环境](contributing_environment.html#contributing-mamba)或选择[最近成功的工作流程](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess)，选择“文档字符串验证、类型提示和其他手动预提交挂钩”作业，然后单击“设置
    Conda”和“环境信息”以查看 pandas CI 安装了哪些版本。
- en: '### [Testing type hints in code using pandas](#id10)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用 pandas 在代码中测试类型提示](#id10)'
- en: Warning
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Pandas is not yet a py.typed library ([**PEP 561**](https://peps.python.org/pep-0561/))!
    The primary purpose of locally declaring pandas as a py.typed library is to test
    and improve the pandas-builtin type annotations.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas 还不是一个 py.typed 库（[**PEP 561**](https://peps.python.org/pep-0561/)）！本地声明
    pandas 为 py.typed 库的主要目的是测试和改进 pandas 内置的类型注解。
- en: 'Until pandas becomes a py.typed library, it is possible to easily experiment
    with the type annotations shipped with pandas by creating an empty file named
    “py.typed” in the pandas installation folder:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 成为 py.typed 库之前，通过在 pandas 安装文件夹中创建一个名为“py.typed”的空文件，可以轻松尝试使用 pandas
    提供的类型注解：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The existence of the py.typed file signals to type checkers that pandas is already
    a py.typed library. This makes type checkers aware of the type annotations shipped
    with pandas.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: py.typed 文件的存在表示类型检查器已经意识到 pandas 已经是一个 py.typed 库。这使得类型检查器知道了 pandas 提供的类型注解。
- en: '[Testing with continuous integration](#id11)'
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[使用持续集成进行测试](#id11)'
- en: The pandas test suite will run automatically on [GitHub Actions](https://github.com/features/actions/)
    continuous integration services, once your pull request is submitted. However,
    if you wish to run the test suite on a branch prior to submitting the pull request,
    then the continuous integration services need to be hooked to your GitHub repository.
    Instructions are here for [GitHub Actions](https://docs.github.com/en/actions/).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您提交了拉取请求，pandas 测试套件将在[GitHub Actions](https://github.com/features/actions/)持续集成服务上自动运行。但是，如果您希望在提交拉取请求之前在分支上运行测试套件，则需要将持续集成服务挂钩到您的
    GitHub 存储库。有关[GitHub Actions](https://docs.github.com/en/actions/)的说明在这里。
- en: A pull-request will be considered for merging when you have an all ‘green’ build.
    If any tests are failing, then you will get a red ‘X’, where you can click through
    to see the individual failed tests. This is an example of a green build.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有全部“绿色”构建时，拉取请求将被考虑合并。如果有任何测试失败，那么你将会得到一个红色的“X”，你可以点击查看单个失败的测试。这是一个绿色构建的示例。
- en: '![../_images/ci.png](../Images/174672c6cd526852399da413884bf421.png) ## [Test-driven
    development](#id12)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/ci.png](../Images/174672c6cd526852399da413884bf421.png) ## [测试驱动开发](#id12)'
- en: 'pandas is serious about testing and strongly encourages contributors to embrace
    [test-driven development (TDD)](https://en.wikipedia.org/wiki/Test-driven_development).
    This development process “relies on the repetition of a very short development
    cycle: first the developer writes an (initially failing) automated test case that
    defines a desired improvement or new function, then produces the minimum amount
    of code to pass that test.” So, before actually writing any code, you should write
    your tests. Often the test can be taken from the original GitHub issue. However,
    it is always worth considering additional use cases and writing corresponding
    tests.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对测试非常重视，并强烈鼓励贡献者采用[测试驱动开发（TDD）](https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91)。这个开发过程“依赖于非常短的开发周期的重复：首先开发人员编写一个（最初失败的）自动化测试用例，定义了期望的改进或新功能，然后生成最小量的代码来通过该测试。”因此，在实际编写任何代码之前，你应该先编写你的测试。通常测试可以从原始的
    GitHub 问题中获取。然而，值得考虑的是额外的用例，并编写相应的测试。
- en: Adding tests is one of the most common requests after code is pushed to pandas.
    Therefore, it is worth getting in the habit of writing tests ahead of time so
    this is never an issue.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码推送到 pandas 之后，添加测试是最常见的请求之一。因此，养成提前编写测试的习惯非常值得。
- en: '[Writing tests](#id13)'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[编写测试](#id13)'
- en: All tests should go into the `tests` subdirectory of the specific package. This
    folder contains many current examples of tests, and we suggest looking to these
    for inspiration.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试应该放在特定包的 `tests` 子目录中。此文件夹包含许多当前测试的示例，我们建议参考这些示例以获取灵感。
- en: As a general tip, you can use the search functionality in your integrated development
    environment (IDE) or the git grep command in a terminal to find test files in
    which the method is called. If you are unsure of the best location to put your
    test, take your best guess, but note that reviewers may request that you move
    the test to a different location.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一般建议，你可以使用集成开发环境（IDE）中的搜索功能或终端中的 git grep 命令来查找调用该方法的测试文件。如果你不确定最佳位置放置测试，可以尽力猜测，但请注意，审阅者可能会要求您将测试移到不同的位置。
- en: 'To use git grep, you can run the following command in a terminal:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 git grep，您可以在终端中运行以下命令：
- en: '`git grep "function_name("`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`git grep "function_name("`'
- en: This will search through all files in your repository for the text `function_name(`.
    This can be a useful way to quickly locate the function in the codebase and determine
    the best location to add a test for it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的仓库中的所有文件中搜索文本 `function_name(`。这可以是快速定位代码库中函数并确定添加测试的最佳位置的有效方法。
- en: Ideally, there should be one, and only one, obvious place for a test to reside.
    Until we reach that ideal, these are some rules of thumb for where a test should
    be located.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，应该有一个，且仅有一个明显的位置来存放测试。在达到这个理想状态之前，以下是一些测试应该放置的一些经验法则。
- en: 'Does your test depend only on code in `pd._libs.tslibs`? This test likely belongs
    in one of:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否仅依赖于 `pd._libs.tslibs` 中的代码？此测试可能属于以下之一：
- en: tests.tslibs
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tslibs
- en: Note
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: No file in `tests.tslibs` should import from any pandas modules outside of `pd._libs.tslibs`
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`tests.tslibs` 中的任何文件都不应该从 `pd._libs` 之外的 pandas 模块中导入。'
- en: tests.scalar
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.scalar
- en: tests.tseries.offsets
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tseries.offsets
- en: 'Does your test depend only on code in pd._libs? This test likely belongs in
    one of:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否仅依赖于 `pd._libs` 中的代码？此测试可能属于以下之一：
- en: tests.libs
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.libs
- en: tests.groupby.test_libgroupby
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.groupby.test_libgroupby
- en: 'Is your test for an arithmetic or comparison method? This test likely belongs
    in one of:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对算术还是比较方法？此测试可能属于以下之一：
- en: tests.arithmetic
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arithmetic
- en: Note
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray
    using the `box_with_array` fixture.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些旨在用于共享测试，以测试使用 `box_with_array` 固定器的 DataFrame/Series/Index/ExtensionArray
    的行为。
- en: tests.frame.test_arithmetic
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_arithmetic
- en: tests.series.test_arithmetic
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_arithmetic
- en: 'Is your test for a reduction method (min, max, sum, prod, …)? This test likely
    belongs in one of:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对缩减方法（min、max、sum、prod等）吗？此测试可能属于以下之一：
- en: tests.reductions
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.reductions
- en: Note
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些测试旨在测试DataFrame/Series/Index/ExtensionArray的行为是否可以共享。
- en: tests.frame.test_reductions
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_reductions
- en: tests.series.test_reductions
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_reductions
- en: tests.test_nanops
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.test_nanops
- en: Is your test for an indexing method? This is the most difficult case for deciding
    where a test belongs, because there are many of these tests, and many of them
    test more than one method (e.g. both `Series.__getitem__` and `Series.loc.__getitem__`)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对一个索引方法？这是确定测试属于何处最困难的情况，因为有许多这些测试，并且其中许多测试不止一个方法（例如`Series.__getitem__`和`Series.loc.__getitem__`）
- en: 'Is the test specifically testing an Index method (e.g. `Index.get_loc`, `Index.get_indexer`)?
    This test likely belongs in one of:'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否专门针对索引方法（例如`Index.get_loc`、`Index.get_indexer`）？此测试可能属于以下之一：
- en: tests.indexes.test_indexing
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.test_indexing
- en: tests.indexes.fooindex.test_indexing
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.fooindex.test_indexing
- en: Within that files there should be a method-specific test class e.g. `TestGetLoc`.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在该文件中应该有一个特定于方法的测试类，例如`TestGetLoc`。
- en: In most cases, neither `Series` nor `DataFrame` objects should be needed in
    these tests.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，这些测试中不需要`Series`或`DataFrame`对象。
- en: 'Is the test for a Series or DataFrame indexing method *other* than `__getitem__`
    or `__setitem__`, e.g. `xs`, `where`, `take`, `mask`, `lookup`, or `insert`? This
    test likely belongs in one of:'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否针对Series或DataFrame的索引方法*其他*于`__getitem__`或`__setitem__`，例如`xs`、`where`、`take`、`mask`、`lookup`或`insert`？此测试可能属于以下之一：
- en: tests.frame.indexing.test_methodname
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.indexing.test_methodname
- en: tests.series.indexing.test_methodname
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.indexing.test_methodname
- en: 'Is the test for any of `loc`, `iloc`, `at`, or `iat`? This test likely belongs
    in one of:'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否测试了`loc`、`iloc`、`at`或`iat`中的任何一个？此测试可能属于以下之一：
- en: tests.indexing.test_loc
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_loc
- en: tests.indexing.test_iloc
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iloc
- en: tests.indexing.test_at
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_at
- en: tests.indexing.test_iat
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iat
- en: Within the appropriate file, test classes correspond to either types of indexers
    (e.g. `TestLocBooleanMask`) or major use cases (e.g. `TestLocSetitemWithExpansion`).
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在适当的文件中，测试类对应于索引器的类型（例如`TestLocBooleanMask`）或主要用例（例如`TestLocSetitemWithExpansion`）。
- en: See the note in section D) about tests that test multiple indexing methods.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见关于测试多个索引方法的D)部分的注释。
- en: 'Is the test for `Series.__getitem__`, `Series.__setitem__`, `DataFrame.__getitem__`,
    or `DataFrame.__setitem__`? This test likely belongs in one of:'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否针对`Series.__getitem__`、`Series.__setitem__`、`DataFrame.__getitem__`或`DataFrame.__setitem__`？此测试可能属于以下之一：
- en: tests.series.test_getitem
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_getitem
- en: tests.series.test_setitem
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_setitem
- en: tests.frame.test_getitem
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_getitem
- en: tests.frame.test_setitem
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_setitem
- en: If many cases such a test may test multiple similar methods, e.g.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在许多情况下，这样的测试可能测试多个类似的方法，例如
- en: '[PRE12]'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In cases like this, the test location should be based on the *underlying* method
    being tested. Or in the case of a test for a bugfix, the location of the actual
    bug. So in this example, we know that `Series.__getitem__` calls `Series.loc.__getitem__`,
    so this is *really* a test for `loc.__getitem__`. So this test belongs in `tests.indexing.test_loc`.
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种情况下，测试位置应基于正在测试的*底层*方法。或者在修复错误的测试中，应基于实际错误的位置。所以在这个例子中，我们知道`Series.__getitem__`调用`Series.loc.__getitem__`，所以这实际上是一个对`loc.__getitem__`的测试。所以这个测试应该属于`tests.indexing.test_loc`。
- en: Is your test for a DataFrame or Series method?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对DataFrame或Series的方法？
- en: 'Is the method a plotting method? This test likely belongs in one of:'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是否为绘图方法？此测试可能属于以下之一：
- en: tests.plotting
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.plotting
- en: 'Is the method an IO method? This test likely belongs in one of:'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是否属于IO方法？此测试可能属于以下之一：
- en: tests.io
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.io
- en: Note
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This includes `to_string` but excludes `__repr__`, which is tested in `tests.frame.test_repr`
    and `tests.series.test_repr`. Other classes often have a `test_formats` file.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这包括`to_string`，但不包括`__repr__`，`__repr__`在`tests.frame.test_repr`和`tests.series.test_repr`中测试。其他类通常有一个`test_formats`文件。
- en: 'Otherwise This test likely belongs in one of:'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则此测试可能属于以下之一：
- en: tests.series.methods.test_mymethod
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.methods.test_mymethod
- en: tests.frame.methods.test_mymethod
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.methods.test_mymethod
- en: Note
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If a test can be shared between DataFrame/Series using the `frame_or_series`
    fixture, by convention it goes in the `tests.frame` file.
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个测试可以在DataFrame/Series之间共享使用`frame_or_series` fixture，则按照惯例，它会放在`tests.frame`文件中。
- en: 'Is your test for an Index method, not depending on Series/DataFrame? This test
    likely belongs in one of:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对索引方法，而不依赖于Series/DataFrame？此测试可能属于以下之一：
- en: tests.indexes
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes
- en: 'Is your test for one of the pandas-provided ExtensionArrays (`Categorical`,
    `DatetimeArray`, `TimedeltaArray`, `PeriodArray`, `IntervalArray`, `NumpyExtensionArray`,
    `FloatArray`, `BoolArray`, `StringArray`)? This test likely belongs in one of:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对 pandas 提供的 ExtensionArrays（`Categorical`、`DatetimeArray`、`TimedeltaArray`、`PeriodArray`、`IntervalArray`、`NumpyExtensionArray`、`FloatArray`、`BoolArray`、`StringArray`）之一？这个测试可能属于以下之一：
- en: tests.arrays
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arrays
- en: 'Is your test for *all* ExtensionArray subclasses (the “EA Interface”)? This
    test likely belongs in one of:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对*所有* ExtensionArray 子类（“EA 接口”）？这个测试可能属于以下之一：
- en: tests.extension
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.extension
- en: '[Using `pytest`](#id14)'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[使用`pytest`](#id14)'
- en: '[Test structure](#id15)'
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试结构](#id15)'
- en: pandas existing test structure is *mostly* class-based, meaning that you will
    typically find tests wrapped in a class.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: pandas现有的测试结构*大多*是基于类的，这意味着你通常会发现测试被包裹在一个类中。
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We prefer a more *functional* style using the [pytest](https://docs.pytest.org/en/latest/)
    framework, which offers a richer testing framework that will facilitate testing
    and developing. Thus, instead of writing test classes, we will write test functions
    like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更倾向于使用更*功能化*的风格，使用提供更丰富测试框架的[pytest](https://docs.pytest.org/en/latest/)框架，这将有助于测试和开发。因此，我们将编写像这样的测试函数，而不是编写测试类：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Preferred `pytest` idioms](#id16)'
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[首选的`pytest`习惯用法](#id16)'
- en: Functional tests named `def test_*` and *only* take arguments that are either
    fixtures or parameters.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试命名为`def test_*`，*只*接受作为装置或参数的参数。
- en: Use a bare `assert` for testing scalars and truth-testing
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于测试标量和真值测试，请使用裸`assert`。
- en: Use `tm.assert_series_equal(result, expected)` and `tm.assert_frame_equal(result,
    expected)` for comparing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") results respectively.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于比较[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")结果的方法分别是`tm.assert_series_equal(result, expected)`和`tm.assert_frame_equal(result,
    expected)`。
- en: Use [@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)
    when testing multiple cases.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试多个情况时，请使用[@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)。
- en: Use [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)
    when a test case is expected to fail.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例预期会失败时，请使用[pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)。
- en: Use [pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)
    when a test case is never expected to pass.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例永远不会通过时，请使用[pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)。
- en: Use [pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)
    when a test case needs a particular mark.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例需要特定标记时，请使用[pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)。
- en: Use [@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)
    if multiple tests can share a setup object.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果多个测试可以共享一个设置对象，请使用[@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)。
- en: Warning
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use `pytest.xfail` (which is different than `pytest.mark.xfail`) since
    it immediately stops the test and does not check if the test will fail. If this
    is the behavior you desire, use `pytest.skip` instead.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`pytest.xfail`（与`pytest.mark.xfail`不同），因为它会立即停止测试，而不会检查测试是否会失败。如果这是你想要的行为，请改用`pytest.skip`。
- en: If a test is known to fail but the manner in which it fails is not meant to
    be captured, use `pytest.mark.xfail` It is common to use this method for a test
    that exhibits buggy behavior or a non-implemented feature. If the failing test
    has flaky behavior, use the argument `strict=False`. This will make it so pytest
    does not fail if the test happens to pass. Using `strict=False` is highly undesirable,
    please use it only as a last resort.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个测试已知会失败，但失败的方式不打算被捕获，请使用`pytest.mark.xfail`。通常用这种方法来测试表现出错误行为或未实现的功能的测试。如果失败的测试具有不稳定的行为，请使用参数`strict=False`。这将使得
    pytest 在测试恰好通过时不会失败。使用`strict=False`是非常不可取的，请仅在万不得已时使用。
- en: 'Prefer the decorator `@pytest.mark.xfail` and the argument `pytest.param` over
    usage within a test so that the test is appropriately marked during the collection
    phase of pytest. For xfailing a test that involves multiple parameters, a fixture,
    or a combination of these, it is only possible to xfail during the testing phase.
    To do so, use the `request` fixture:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最好使用装饰器 `@pytest.mark.xfail` 和参数 `pytest.param` 而不是在测试中使用，以便在 pytest 的收集阶段适当地标记测试。对于涉及多个参数、fixture
    或这些组合的测试，只能在测试阶段进行 xfail。为此，请使用 `request` fixture：
- en: '[PRE15]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: xfail is not to be used for tests involving failure due to invalid user arguments.
    For these tests, we need to verify the correct exception type and error message
    is being raised, using `pytest.raises` instead.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: xfail 不应该用于涉及由于无效用户参数而失败的测试。对于这些测试，我们需要验证正确的异常类型和错误消息是否被引发，而不是使用 `pytest.raises`。
- en: '#### [Testing a warning](#id17)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '#### [测试警告](#id17)'
- en: Use `tm.assert_produces_warning` as a context manager to check that a block
    of code raises a warning.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tm.assert_produces_warning` 作为上下文管理器来检查一段代码是否引发了警告。
- en: '[PRE16]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If a warning should specifically not happen in a block of code, pass `False`
    into the context manager.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一段代码块中特定地不应该出现警告，请将`False`传递给上下文管理器。
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you have a test that would emit a warning, but you aren’t actually testing
    the warning itself (say because it’s going to be removed in the future, or because
    we’re matching a 3rd-party library’s behavior), then use `pytest.mark.filterwarnings`
    to ignore the error.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个会产生警告的测试，但你实际上并没有测试警告本身（比如因为它将来会被移除，或者因为我们正在匹配第三方库的行为），那么使用 `pytest.mark.filterwarnings`
    来忽略该错误。
- en: '[PRE18]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Testing an exception](#id18)'
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试异常](#id18)'
- en: Use [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    as a context manager with the specific exception subclass (i.e. never use [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(in Python v3.12)")) and the exception message in `match`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    作为上下文管理器，与特定的异常子类（即永远不要使用[`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(在 Python v3.12 中)")) 和 `match` 中的异常消息一起。
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[Testing involving files](#id19)'
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及文件的测试](#id19)'
- en: The `tm.ensure_clean` context manager creates a temporary file for testing,
    with a generated filename (or your filename if provided), that is automatically
    deleted when the context block is exited.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`tm.ensure_clean` 上下文管理器创建一个临时文件进行测试，带有一个生成的文件名（或者如果提供了你的文件名，则使用该文件名），当退出上下文块时自动删除。'
- en: '[PRE20]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Testing involving network connectivity](#id20)'
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及网络连接的测试](#id20)'
- en: A unit test should not access a public data set over the internet due to flakiness
    of network connections and lack of ownership of the server that is being connected
    to. To mock this interaction, use the `httpserver` fixture from the [pytest-localserver
    plugin.](https://github.com/pytest-dev/pytest-localserver) with synthetic data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络连接的不稳定性和连接到的服务器的所有权缺失，单元测试不应该通过互联网访问公共数据集。为了模拟这种交互，使用 [pytest-localserver
    插件](https://github.com/pytest-dev/pytest-localserver) 中的 `httpserver` fixture
    与合成数据。
- en: '[PRE21]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[Example](#id21)'
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[示例](#id21)'
- en: Here is an example of a self-contained set of tests in a file `pandas/tests/test_cool_feature.py`
    that illustrate multiple features that we like to use. Please remember to add
    the GitHub Issue Number as a comment to a new test.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在文件 `pandas/tests/test_cool_feature.py` 中包含多个我们喜欢使用的特性的自包含测试集的示例。请记得在新测试中作为注释添加
    GitHub 问题编号。
- en: '[PRE22]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A test run of this yields
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个测试得到
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tests that we have `parametrized` are now accessible via the test name, for
    example we could run these with `-k int8` to sub-select *only* those tests which
    match `int8`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经`参数化`的测试现在可以通过测试名称访问，例如我们可以使用 `-k int8` 来仅选择与 `int8` 匹配的测试。
- en: '[PRE24]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '### [Using `hypothesis`](#id22)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用 `hypothesis`](#id22)'
- en: Hypothesis is a library for property-based testing. Instead of explicitly parametrizing
    a test, you can describe *all* valid inputs and let Hypothesis try to find a failing
    input. Even better, no matter how many random examples it tries, Hypothesis always
    reports a single minimal counterexample to your assertions - often an example
    that you would never have thought to test.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Hypothesis 是一个基于属性的测试库。你可以描述*所有*有效的输入，让 Hypothesis 尝试找到一个失败的输入，而不是显式地为测试参数化。更好的是，无论它尝试了多少随机示例，Hypothesis
    总是报告一个单一的最小反例给你的断言 - 通常是一个你从未想过要测试的示例。
- en: See [Getting Started with Hypothesis](https://hypothesis.works/articles/getting-started-with-hypothesis/)
    for more of an introduction, then [refer to the Hypothesis documentation for details](https://hypothesis.readthedocs.io/en/latest/index.html).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用 Hypothesis 入门](https://hypothesis.works/articles/getting-started-with-hypothesis/)获取更多介绍，然后参考[Hypothesis
    文档获取详细信息](https://hypothesis.readthedocs.io/en/latest/index.html)。
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This test shows off several useful features of Hypothesis, as well as demonstrating
    a good use-case: checking properties that should hold over a large or complicated
    domain of inputs.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试展示了 Hypothesis 的几个有用功能，同时展示了一个很好的用例：检查应在大型或复杂输入域上保持的属性。
- en: 'To keep the pandas test suite running quickly, parametrized tests are preferred
    if the inputs or logic are simple, with Hypothesis tests reserved for cases with
    complex logic or where there are too many combinations of options or subtle interactions
    to test (or think of!) all of them.  ## [Running the test suite](#id23)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使 pandas 测试套件快速运行，如果输入或逻辑简单，则首选参数化测试，Hypothesis 测试保留用于具有复杂逻辑或需要测试的选项组合或微妙交互太多而无法测试（或考虑！）所有这些。  ##
    [运行测试套件](#id23)'
- en: 'The tests can then be run directly inside your Git clone (without having to
    install pandas) by typing:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以直接在您的 Git 克隆中运行这些测试（无需安装 pandas），方法是输入：
- en: '[PRE26]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If a handful of tests don’t pass, it may not be an issue with your pandas installation.
    Some tests (e.g. some SQLAlchemy ones) require additional setup, others might
    start failing because a non-pinned library released a new version, and others
    might be flaky if run in parallel. As long as you can import pandas from your
    locally built version, your installation is probably fine and you can start contributing!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一些测试未通过，这可能不是与您的 pandas 安装有关的问题。一些测试（例如一些 SQLAlchemy 测试）需要额外的设置，其他测试可能会因为非固定库发布了新版本而开始失败，还有一些测试如果并行运行可能会出现问题。只要您可以从本地构建的版本中导入
    pandas，您的安装可能是正常的，您可以开始贡献！
- en: 'Often it is worth running only a subset of tests first around your changes
    before running the entire suite (tip: you can use the [pandas-coverage app](https://pandas-coverage-12d2130077bc.herokuapp.com/))
    to find out which tests hit the lines of code you’ve modified, and then run only
    those).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在运行整个测试套件之前，值得先运行一部分测试以查看您所做的更改周围的情况（提示：您可以使用[pandas-coverage app](https://pandas-coverage-12d2130077bc.herokuapp.com/)）来找出哪些测试命中了您修改的代码行，然后只运行那些测试）。
- en: 'The easiest way to do this is with:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用：
- en: '[PRE27]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Or with one of the following constructs:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用以下构造之一：
- en: '[PRE28]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using [pytest-xdist](https://pypi.org/project/pytest-xdist), which is included
    in our ‘pandas-dev’ environment, one can speed up local testing on multicore machines.
    The `-n` number flag then can be specified when running pytest to parallelize
    a test run across the number of specified cores or auto to utilize all the available
    cores on your machine.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[pytest-xdist](https://pypi.org/project/pytest-xdist)，它包含在我们的‘pandas-dev’环境中，可以加快多核机器上的本地测试速度。然后在运行
    pytest 时可以指定`-n`数字标志以在指定的核心数上并行运行测试，或者使用 auto 来利用您机器上所有可用的核心。
- en: '[PRE29]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you’d like to speed things along further a more advanced use of this command
    would look like this
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步加快速度，更高级的使用此命令的方式如下
- en: '[PRE30]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In addition to the multithreaded performance increase this improves test speed
    by skipping some tests using the `-m` mark flag:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 除了多线程性能提升外，通过使用`-m`标记标志跳过一些测试，可以提高测试速度：
- en: 'slow: any test taking long (think seconds rather than milliseconds)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: slow：任何需要很长时间的测试（考虑秒而不是毫秒）
- en: 'network: tests requiring network connectivity'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: network：需要网络连接的测试
- en: 'db: tests requiring a database (mysql or postgres)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: db：需要数据库（mysql 或 postgres）的测试
- en: 'single_cpu: tests that should run on a single cpu only'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: single_cpu：仅应在单个 CPU 上运行的测试
- en: 'You might want to enable the following option if it’s relevant for you:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相关，您可能希望启用以下选项：
- en: 'arm_slow: any test taking long on arm64 architecture'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: arm_slow：在 arm64 架构上需要很长时间的测试
- en: These markers are defined [in this toml file](https://github.com/pandas-dev/pandas/blob/main/pyproject.toml)
    , under `[tool.pytest.ini_options]` in a list called `markers`, in case you want
    to check if new ones have been created which are of interest to you.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标记在 [此 toml 文件](https://github.com/pandas-dev/pandas/blob/main/pyproject.toml)
    中定义，在`[tool.pytest.ini_options]`下的名为`markers`的列表中，以便您查看是否已创建您感兴趣的新标记。
- en: 'The `-r` report flag will display a short summary info (see [pytest documentation](https://docs.pytest.org/en/4.6.x/usage.html#detailed-summary-report))
    . Here we are displaying the number of:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`-r`报告标志将显示简短的摘要信息（参见[pytest文档](https://docs.pytest.org/en/4.6.x/usage.html#detailed-summary-report)）。这里我们显示的是数量：'
- en: 's: skipped tests'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 's: 跳过的测试'
- en: 'x: xfailed tests'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'x: 未通过的测试'
- en: 'X: xpassed tests'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'X: 通过的测试'
- en: The summary is optional and can be removed if you don’t need the added information.
    Using the parallelization option can significantly reduce the time it takes to
    locally run tests before submitting a pull request.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要是可选的，如果您不需要额外信息，可以将其删除。使用并行化选项可以显著减少在提交拉取请求之前本地运行测试所需的时间。
- en: If you require assistance with the results, which has happened in the past,
    please set a seed before running the command and opening a bug report, that way
    we can reproduce it. Here’s an example for setting a seed on windows
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要协助处理结果，过去曾发生过，请在运行命令和提交错误报告之前设置一个种子，这样我们可以重现。以下是在Windows上设置种子的示例
- en: '[PRE31]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: On Unix use
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix上使用
- en: '[PRE32]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: For more, see the [pytest](https://docs.pytest.org/en/latest/) documentation.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 欲知更多，请参阅[pytest](https://docs.pytest.org/en/latest/)文档。
- en: Furthermore one can run
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以运行
- en: '[PRE33]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: with an imported pandas to run tests similarly.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似方式运行测试的导入pandas。
- en: '[Running the performance test suite](#id24)'
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行性能测试套件](#id24)'
- en: Performance matters and it is worth considering whether your code has introduced
    performance regressions. pandas is in the process of migrating to [asv benchmarks](https://github.com/airspeed-velocity/asv)
    to enable easy monitoring of the performance of critical pandas operations. These
    benchmarks are all found in the `pandas/asv_bench` directory, and the test results
    can be found [here](https://asv-runner.github.io/asv-collection/pandas).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 性能很重要，值得考虑您的代码是否引入了性能退化。pandas正在迁移到[asv基准测试](https://github.com/airspeed-velocity/asv)以便轻松监控关键pandas操作的性能。这些基准测试都位于`pandas/asv_bench`目录中，测试结果可以在[这里](https://asv-runner.github.io/asv-collection/pandas)找到。
- en: To use all features of asv, you will need either `conda` or `virtualenv`. For
    more details please check the [asv installation webpage](https://asv.readthedocs.io/en/latest/installing.html).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用asv的所有功能，您需要`conda`或`virtualenv`。有关更多详细信息，请查看[asv安装网页](https://asv.readthedocs.io/en/latest/installing.html)。
- en: 'To install asv:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装asv：
- en: '[PRE34]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you need to run a benchmark, change your directory to `asv_bench/` and run:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要运行基准测试，请将目录更改为`asv_bench/`并运行：
- en: '[PRE35]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You can replace `HEAD` with the name of the branch you are working on, and
    report benchmarks that changed by more than 10%. The command uses `conda` by default
    for creating the benchmark environments. If you want to use virtualenv instead,
    write:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`HEAD`替换为您正在工作的分支名称，并报告变化超过10%的基准测试。该命令默认使用`conda`创建基准测试环境。如果想要改用virtualenv，写入：
- en: '[PRE36]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `-E virtualenv` option should be added to all `asv` commands that run benchmarks.
    The default value is defined in `asv.conf.json`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 所有运行基准测试的`asv`命令都应添加`-E virtualenv`选项。默认值在`asv.conf.json`中定义。
- en: 'Running the full benchmark suite can be an all-day process, depending on your
    hardware and its resource utilization. However, usually it is sufficient to paste
    only a subset of the results into the pull request to show that the committed
    changes do not cause unexpected performance regressions. You can run specific
    benchmarks using the `-b` flag, which takes a regular expression. For example,
    this will only run benchmarks from a `pandas/asv_bench/benchmarks/groupby.py`
    file:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整的基准测试套件可能是一整天的过程，这取决于您的硬件及其资源利用情况。然而，通常只需将部分结果粘贴到拉取请求中即可表明提交的更改不会导致意外性能退化。您可以使用`-b`标志运行特定基准测试，该标志接受正则表达式。例如，这将仅运行来自`pandas/asv_bench/benchmarks/groupby.py`文件的基准测试：
- en: '[PRE37]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you want to only run a specific group of benchmarks from a file, you can
    do it using `.` as a separator. For example:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想从文件中运行特定组的基准测试，可以使用`.`作为分隔符。例如：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: will only run the `GroupByMethods` benchmark defined in `groupby.py`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 仅运行`groupby.py`中定义的`GroupByMethods`基准测试。
- en: 'You can also run the benchmark suite using the version of `pandas` already
    installed in your current Python environment. This can be useful if you do not
    have virtualenv or conda, or are using the `setup.py develop` approach discussed
    above; for the in-place build you need to set `PYTHONPATH`, e.g. `PYTHONPATH="$PWD/.."
    asv [remaining arguments]`. You can run benchmarks using an existing Python environment
    by:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用当前Python环境中已安装的`pandas`版本运行基准测试套件。如果您没有virtualenv或conda，或者正在使用上面讨论的`setup.py
    develop`方法；对于就地构建，您需要设置`PYTHONPATH`，例如`PYTHONPATH="$PWD/.." asv [remaining arguments]`。您可以通过以下方式使用现有Python环境运行基准测试：
- en: '[PRE39]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'or, to use a specific Python interpreter,:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用特定的Python解释器：
- en: '[PRE40]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This will display stderr from the benchmarks, and use your local `python` that
    comes from your `$PATH`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示基准测试的stderr，并使用来自您的`$PATH`的本地`python`。
- en: Information on how to write a benchmark and how to use asv can be found in the
    [asv documentation](https://asv.readthedocs.io/en/latest/writing_benchmarks.html).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何编写基准测试以及如何使用asv的信息可以在[asv文档](https://asv.readthedocs.io/en/latest/writing_benchmarks.html)中找到。
- en: '[Documenting your code](#id25)'
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[为您的代码编写文档](#id25)'
- en: Changes should be reflected in the release notes located in `doc/source/whatsnew/vx.y.z.rst`.
    This file contains an ongoing change log for each release. Add an entry to this
    file to document your fix, enhancement or (unavoidable) breaking change. Make
    sure to include the GitHub issue number when adding your entry (using `:issue:`1234``
    where `1234` is the issue/pull request number). Your entry should be written using
    full sentences and proper grammar.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 更改应该反映在`doc/source/whatsnew/vx.y.z.rst`中的发布说明中。该文件包含每个版本的持续更改日志。向此文件添加条目以记录您的修复、增强功能或（不可避免的）破坏性更改。在添加条目时，请确保包含GitHub问题编号（使用`:issue:`1234``，其中`1234`是问题/拉取请求编号）。您的条目应使用完整句子和正确的语法编写。
- en: When mentioning parts of the API, use a Sphinx `:func:`, `:meth:`, or `:class:`
    directive as appropriate. Not all public API functions and methods have a documentation
    page; ideally links would only be added if they resolve. You can usually find
    similar examples by checking the release notes for one of the previous versions.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在提及API的部分时，根据需要使用Sphinx的`:func:`、`:meth:`或`:class:`指令。并非所有公共API函数和方法都有文档页面；理想情况下，只有在解析后才会添加链接。通常可以通过检查以前版本的发布说明来找到类似的示例。
- en: If your code is a bugfix, add your entry to the relevant bugfix section. Avoid
    adding to the `Other` section; only in rare cases should entries go there. Being
    as concise as possible, the description of the bug should include how the user
    may encounter it and an indication of the bug itself, e.g. “produces incorrect
    results” or “incorrectly raises”. It may be necessary to also indicate the new
    behavior.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码是一个修复bug的代码，请将您的条目添加到相关的bug修复部分。避免添加到`其他`部分；只有在极少数情况下才应该将条目放在那里。bug的描述应尽可能简洁，包括用户可能遇到bug的方式以及bug本身的指示，例如“产生不正确的结果”或“错误地引发”。可能还需要指示新行为。
- en: 'If your code is an enhancement, it is most likely necessary to add usage examples
    to the existing documentation. This can be done following the section regarding
    [documentation](contributing_documentation.html#contributing-documentation). Further,
    to let users know when this feature was added, the `versionadded` directive is
    used. The sphinx syntax for that is:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码是一个增强功能，很可能需要向现有文档添加使用示例。可以在关于[文档](contributing_documentation.html#contributing-documentation)的部分之后完成此操作。此外，为了让用户知道何时添加了此功能，使用`versionadded`指令。sphinx的语法如下：
- en: '[PRE41]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This will put the text *New in version 2.1.0* wherever you put the sphinx directive.
    This should also be put in the docstring when adding a new function or method
    ([example](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495))
    or a new keyword argument ([example](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568)).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在放置sphinx指令的地方显示*新版本2.1.0中的内容*。当添加新函数或方法（[示例](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495)）或新关键字参数（[示例](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568)）时，这也应该放在docstring中。
- en: '[Code standards](#id2)'
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[代码规范](#id2)'
- en: Writing good code is not just about what you write. It is also about *how* you
    write it. During [Continuous Integration](#contributing-ci) testing, several tools
    will be run to check your code for stylistic errors. Generating any warnings will
    cause the test to fail. Thus, good style is a requirement for submitting code
    to pandas.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 写出优秀的代码不仅仅是关于你写了什么。它也关乎于你*如何*编写它。在[持续集成](#contributing-ci)测试期间，将运行多个工具来检查你的代码是否存在风格错误。生成任何警告将导致测试失败。因此，良好的代码风格是提交代码给pandas的要求之一。
- en: There are a couple of tools in pandas to help contributors verify their changes
    before contributing to the project
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在贡献者提交项目之前，pandas中有一些工具可帮助他们验证其更改
- en: '`./ci/code_checks.sh`: a script validates the doctests, formatting in docstrings,
    and imported modules. It is possible to run the checks independently by using
    the parameters `docstrings`, `code`, and `doctests` (e.g. `./ci/code_checks.sh
    doctests`);'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./ci/code_checks.sh`：一个脚本验证了doctests，docstrings中的格式化和导入的模块。可以使用参数`docstrings`，`code`和`doctests`独立运行检查（例如`./ci/code_checks.sh
    doctests`）;'
- en: '`pre-commit`, which we go into detail on in the next section.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre-commit`，我们将在下一节详细介绍。'
- en: In addition, because a lot of people use our library, it is important that we
    do not make sudden changes to the code that could have the potential to break
    a lot of user code as a result, that is, we need it to be as *backwards compatible*
    as possible to avoid mass breakages.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于很多人使用我们的库，重要的是我们不要对可能导致大量用户代码破坏的代码进行突然的更改，也就是说，我们需要尽可能地使其*向后兼容*，以避免大规模的破坏。
- en: '## [Pre-commit](#id3)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '## [预提交](#id3)'
- en: 'Additionally, [Continuous Integration](#contributing-ci) will run code formatting
    checks like `black`, `ruff`, `isort`, and `clang-format` and more using [pre-commit
    hooks](https://pre-commit.com/). Any warnings from these checks will cause the
    [Continuous Integration](#contributing-ci) to fail; therefore, it is helpful to
    run the check yourself before submitting code. This can be done by installing
    `pre-commit` (which should already have happened if you followed the instructions
    in [Setting up your development environment](contributing_environment.html#contributing-environment))
    and then running:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[持续集成](#contributing-ci)将使用[pre-commit hooks](https://pre-commit.com/)运行代码格式检查，如`black`、`ruff`、`isort`和`clang-format`等等。这些检查的任何警告都将导致[持续集成](#contributing-ci)失败；因此，在提交代码之前自行运行检查是有帮助的。这可以通过安装`pre-commit`（如果您遵循[设置开发环境](contributing_environment.html#contributing-environment)中的说明，应该已经发生）然后运行来完成：
- en: '[PRE42]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: from the root of the pandas repository. Now all of the styling checks will be
    run each time you commit changes without your needing to run each one manually.
    In addition, using `pre-commit` will also allow you to more easily remain up-to-date
    with our code checks as they change.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 从pandas存储库的根目录运行。现在，每次提交更改时都会运行所有样式检查，而无需手动运行每个检查。此外，使用`pre-commit`还将使您更轻松地保持与我们的代码检查的更新。
- en: Note that if needed, you can skip these checks with `git commit --no-verify`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果需要，您可以使用`git commit --no-verify`跳过这些检查。
- en: 'If you don’t want to use `pre-commit` as part of your workflow, you can still
    use it to run its checks with one of the following:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想将`pre-commit`作为您的工作流的一部分，您仍然可以使用它来运行其检查之一：
- en: '[PRE43]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: without needing to have done `pre-commit install` beforehand.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前不需要执行`pre-commit install`的情况下。
- en: 'Finally, we also have some slow pre-commit checks, which don’t run on each
    commit but which do run during continuous integration. You can trigger them manually
    with:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还有一些较慢的预提交检查，这些检查不会在每次提交时运行，但会在持续集成期间运行。你可以手动触发它们：
- en: '[PRE44]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may want to periodically run `pre-commit gc`, to clean up repos which are
    no longer used.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想定期运行`pre-commit gc`，以清理不再使用的存储库。
- en: Note
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have conflicting installations of `virtualenv`, then you may get an error
    - see [here](https://github.com/pypa/virtualenv/issues/1875).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装了冲突的`virtualenv`，那么您可能会收到错误消息 - 请参阅[这里](https://github.com/pypa/virtualenv/issues/1875)。
- en: Also, due to a [bug in virtualenv](https://github.com/pypa/virtualenv/issues/1986),
    you may run into issues if you’re using conda. To solve this, you can downgrade
    `virtualenv` to version `20.0.33`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于[virtualenv中的一个错误](https://github.com/pypa/virtualenv/issues/1986)，如果你使用conda可能会遇到问题。为了解决这个问题，你可以将`virtualenv`降级到`20.0.33`版本。
- en: Note
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have recently merged in main from the upstream branch, some of the dependencies
    used by `pre-commit` may have changed. Make sure to [update your development environment](contributing.html#contributing-update-dev).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你最近从上游分支合并了主分支，`pre-commit`所使用的一些依赖项可能已经更改。请确保[更新你的开发环境](contributing.html#contributing-update-dev)。
- en: '[Optional dependencies](#id4)'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[可选依赖项](#id4)'
- en: Optional dependencies (e.g. matplotlib) should be imported with the private
    helper `pandas.compat._optional.import_optional_dependency`. This ensures a consistent
    error message when the dependency is not met.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 可选依赖项（例如 matplotlib）应该使用私有助手`pandas.compat._optional.import_optional_dependency`进行导入。这样可以确保在未满足依赖关系时显示一致的错误消息。
- en: All methods using an optional dependency should include a test asserting that
    an `ImportError` is raised when the optional dependency is not found. This test
    should be skipped if the library is present.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 所有使用可选依赖项的方法都应包含一个断言测试，断言当可选依赖项未找到时会引发`ImportError`。如果库存在，则应跳过此测试。
- en: All optional dependencies should be documented in [Optional dependencies](../getting_started/install.html#install-optional-dependencies)
    and the minimum required version should be set in the `pandas.compat._optional.VERSIONS`
    dict.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可选依赖项都应在[可选依赖项](../getting_started/install.html#install-optional-dependencies)中进行文档记录，并且最低要求的版本应在`pandas.compat._optional.VERSIONS`字典中设置。
- en: '[Backwards compatibility](#id5)'
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[向后兼容性](#id5)'
- en: Please try to maintain backward compatibility. pandas has lots of users with
    lots of existing code, so don’t break it if at all possible. If you think breakage
    is required, clearly state why as part of the pull request. Also, be careful when
    changing method signatures and add deprecation warnings where needed. Also, add
    the deprecated sphinx directive to the deprecated functions or methods.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 请尽量保持向后兼容性。pandas 有很多用户和大量现有代码，所以尽量不要破坏它。如果你认为需要破坏，请在拉取请求的一部分清楚说明原因。此外，在更改方法签名时要小心，并在需要时添加弃用警告。同时，将弃用指令添加到已弃用的函数或方法中。
- en: 'If a function with the same arguments as the one being deprecated exist, you
    can use the `pandas.util._decorators.deprecate`:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在与被弃用函数相同参数的函数，你可以使用`pandas.util._decorators.deprecate`：
- en: '[PRE45]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Otherwise, you need to do it manually:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你需要手动操作：
- en: '[PRE46]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You’ll also need to
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要
- en: Write a new test that asserts a warning is issued when calling with the deprecated
    argument
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个新的测试，断言在调用时会发出警告。
- en: Update all of pandas existing tests and code to use the new argument
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新所有现有的 pandas 测试和代码以使用新的参数
- en: See [Testing a warning](#contributing-warnings) for more.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[测试警告](#contributing-warnings)。
- en: '## [Type hints](#id6)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '## [类型提示](#id6)'
- en: pandas strongly encourages the use of [**PEP 484**](https://peps.python.org/pep-0484/)
    style type hints. New development should contain type hints and pull requests
    to annotate existing code are accepted as well!
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 强烈鼓励使用[**PEP 484**](https://peps.python.org/pep-0484/)风格的类型提示。新的开发应包含类型提示，对现有代码进行注释的拉取请求也将被接受！
- en: '[Style guidelines](#id7)'
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[样式指南](#id7)'
- en: Type imports should follow the `from typing import ...` convention. Your code
    may be automatically re-written to use some modern constructs (e.g. using the
    built-in `list` instead of `typing.List`) by the [pre-commit checks](#contributing-pre-commit).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 类型导入应遵循`from typing import ...`的约定。你的代码可能会被[pre-commit 检查](#contributing-pre-commit)自动重写以使用一些现代构造（例如，使用内置的`list`而不是`typing.List`）。
- en: In some cases in the code base classes may define class variables that shadow
    builtins. This causes an issue as described in [Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854).
    The defensive solution here is to create an unambiguous alias of the builtin and
    use that without your annotation. For example, if you come across a definition
    like
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，在代码库中，类可能会定义与内置变量同名的类变量。这会导致问题，就像[Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854)中描述的那样。这里的防御性解决方案是创建内置变量的明确别名，并在注释中使用该别名。例如，如果你遇到了这样的定义：
- en: '[PRE47]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The appropriate way to annotate this would be as follows
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 注释此的合适方法应该是如下方式
- en: '[PRE48]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In some cases you may be tempted to use `cast` from the typing module when you
    know better than the analyzer. This occurs particularly when using custom inference
    functions. For example
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，当你比分析器更清楚时，你可能会想要使用来自 typing 模块的`cast`。这种情况特别发生在使用自定义推理函数时。例如
- en: '[PRE49]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The limitation here is that while a human can reasonably understand that `is_number`
    would catch the `int` and `float` types mypy cannot make that same inference just
    yet (see [mypy #5206](https://github.com/python/mypy/issues/5206). While the above
    works, the use of `cast` is **strongly discouraged**. Where applicable a refactor
    of the code to appease static analysis is preferable'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的限制在于，虽然人类可以合理地理解 `is_number` 会捕捉到 `int` 和 `float` 类型，但是目前 mypy 还不能做出相同的推断（参见
    [mypy #5206](https://github.com/python/mypy/issues/5206)）。虽然上述方法可行，但**强烈不建议**使用
    `cast`。在适用的情况下，重构代码以符合静态分析更可取。'
- en: '[PRE50]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With custom types and inference this is not always possible so exceptions are
    made, but every effort should be exhausted to avoid `cast` before going down such
    paths.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义类型和推断并非总是可行的，所以会有例外情况，但在走上这样的道路之前，应尽一切努力避免使用 `cast`。
- en: '[pandas-specific types](#id8)'
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[pandas 特定类型](#id8)'
- en: Commonly used types specific to pandas will appear in [pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)
    and you should use these where applicable. This module is private for now but
    ultimately this should be exposed to third party libraries who want to implement
    type checking against pandas.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 pandas 的常用类型将出现在 [pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)
    中，您应在适用的地方使用这些类型。目前，该模块是私有的，但最终应将其暴露给希望对 pandas 进行类型检查的第三方库。
- en: For example, quite a few functions in pandas accept a `dtype` argument. This
    can be expressed as a string like `"object"`, a `numpy.dtype` like `np.int64`
    or even a pandas `ExtensionDtype` like `pd.CategoricalDtype`. Rather than burden
    the user with having to constantly annotate all of those options, this can simply
    be imported and reused from the pandas._typing module
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，pandas 中有相当多的函数接受一个 `dtype` 参数。这可以表示为一个字符串，如 `"object"`，一个 `numpy.dtype`，如
    `np.int64`，甚至是一个 pandas 的 `ExtensionDtype`，如 `pd.CategoricalDtype`。与其让用户不断地对所有这些选项进行注释，不如直接从
    pandas._typing 模块中导入并重复使用它们
- en: '[PRE51]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This module will ultimately house types for repeatedly used concepts like “path-like”,
    “array-like”, “numeric”, etc… and can also hold aliases for commonly appearing
    parameters like `axis`. Development of this module is active so be sure to refer
    to the source for the most up to date list of available types.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块最终将容纳重复使用的概念，如 “path-like”、“array-like”、“numeric” 等类型，还可以保存常见参数的别名，如 `axis`。该模块的开发活跃，因此请务必参考源代码以获取最新的可用类型列表。
- en: '[Validating type hints](#id9)'
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[验证类型提示](#id9)'
- en: pandas uses [mypy](http://mypy-lang.org) and [pyright](https://github.com/microsoft/pyright)
    to statically analyze the code base and type hints. After making any change you
    can ensure your type hints are consistent by running
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 使用 [mypy](http://mypy-lang.org) 和 [pyright](https://github.com/microsoft/pyright)
    对代码库和类型提示进行静态分析。在进行任何更改后，您可以通过运行以下命令确保您的类型提示是一致的
- en: '[PRE52]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: in your python environment.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Python 环境中。
- en: Warning
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Please be aware that the above commands will use the current python environment.
    If your python packages are older/newer than those installed by the pandas CI,
    the above commands might fail. This is often the case when the `mypy` or `numpy`
    versions do not match. Please see [how to setup the python environment](contributing_environment.html#contributing-mamba)
    or select a [recently succeeded workflow](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess),
    select the “Docstring validation, typing, and other manual pre-commit hooks” job,
    then click on “Set up Conda” and “Environment info” to see which versions the
    pandas CI installs.
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，上述命令将使用当前的 Python 环境。如果您的 Python 包比由 pandas CI 安装的包要旧/新，则上述命令可能会失败。当 `mypy`
    或 `numpy` 版本不匹配时，通常会出现这种情况。请参阅 [如何设置 Python 环境](contributing_environment.html#contributing-mamba)
    或选择一个 [最近成功的工作流](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess)，选择
    “Docstring validation, typing, and other manual pre-commit hooks” 作业，然后单击 “Set
    up Conda” 和 “Environment info” 查看 pandas CI 安装的版本。
- en: '### [Testing type hints in code using pandas](#id10)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用 pandas 在代码中测试类型提示](#id10)'
- en: Warning
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Pandas is not yet a py.typed library ([**PEP 561**](https://peps.python.org/pep-0561/))!
    The primary purpose of locally declaring pandas as a py.typed library is to test
    and improve the pandas-builtin type annotations.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas 尚未成为一个 py.typed 库（[**PEP 561**](https://peps.python.org/pep-0561/)）！将
    pandas 本地声明为 py.typed 库的主要目的是测试和改进 pandas 内置的类型注释。
- en: 'Until pandas becomes a py.typed library, it is possible to easily experiment
    with the type annotations shipped with pandas by creating an empty file named
    “py.typed” in the pandas installation folder:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 成为一个 py.typed 库之前，可以通过在 pandas 安装文件夹中创建一个名为“py.typed”的空文件，轻松地使用 pandas
    提供的类型注释进行实验：
- en: '[PRE53]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The existence of the py.typed file signals to type checkers that pandas is already
    a py.typed library. This makes type checkers aware of the type annotations shipped
    with pandas.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: py.typed 文件的存在表明类型检查器已经意识到 pandas 已经是一个 py.typed 库。这使得类型检查器了解了与 pandas 一起提供的类型注释。
- en: '[Style guidelines](#id7)'
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[样式指南](#id7)'
- en: Type imports should follow the `from typing import ...` convention. Your code
    may be automatically re-written to use some modern constructs (e.g. using the
    built-in `list` instead of `typing.List`) by the [pre-commit checks](#contributing-pre-commit).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 类型导入应遵循 `from typing import ...` 的约定。您的代码可能会被[提交前检查](#contributing-pre-commit)自动重写，以使用一些现代构造（例如使用内置的
    `list` 而不是 `typing.List`)。
- en: In some cases in the code base classes may define class variables that shadow
    builtins. This causes an issue as described in [Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854).
    The defensive solution here is to create an unambiguous alias of the builtin and
    use that without your annotation. For example, if you come across a definition
    like
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码库中，有些情况下，类定义了会遮蔽内置的类变量。这会引发一个问题，如[Mypy 1775](https://github.com/python/mypy/issues/1775#issuecomment-310969854)中所述。这里的防御性解决方案是创建内置的一个明确的别名，并在不使用您的注释的情况下使用它。例如，如果您遇到以下定义
- en: '[PRE54]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The appropriate way to annotate this would be as follows
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 对此进行注释的适当方式如下
- en: '[PRE55]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In some cases you may be tempted to use `cast` from the typing module when you
    know better than the analyzer. This occurs particularly when using custom inference
    functions. For example
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能会被诱导在您比分析器更了解的情况下使用`typing`模块中的`cast`。这特别发生在使用自定义推断函数时。例如
- en: '[PRE56]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The limitation here is that while a human can reasonably understand that `is_number`
    would catch the `int` and `float` types mypy cannot make that same inference just
    yet (see [mypy #5206](https://github.com/python/mypy/issues/5206). While the above
    works, the use of `cast` is **strongly discouraged**. Where applicable a refactor
    of the code to appease static analysis is preferable'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '这里的限制是，虽然人类可以合理地理解 `is_number` 将捕获 `int` 和 `float` 类型，但是 mypy 目前还不能做出同样的推断（参见
    [mypy #5206](https://github.com/python/mypy/issues/5206)。虽然上述方法可行，但强烈不建议使用`cast`。在适用的情况下，改写代码以满足静态分析是更可取的'
- en: '[PRE57]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: With custom types and inference this is not always possible so exceptions are
    made, but every effort should be exhausted to avoid `cast` before going down such
    paths.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自定义类型和推断，这并不总是可能的，因此会有一些例外，但在走上这些路径之前，应尽一切努力避免`cast`。
- en: '[pandas-specific types](#id8)'
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[pandas-specific types](#id8)'
- en: Commonly used types specific to pandas will appear in [pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)
    and you should use these where applicable. This module is private for now but
    ultimately this should be exposed to third party libraries who want to implement
    type checking against pandas.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 pandas 的常用类型将出现在 [pandas._typing](https://github.com/pandas-dev/pandas/blob/main/pandas/_typing.py)
    中，您应该在适用的地方使用它们。目前，该模块是私有的，但最终应该向想要对 pandas 进行类型检查的第三方库暴露该模块。
- en: For example, quite a few functions in pandas accept a `dtype` argument. This
    can be expressed as a string like `"object"`, a `numpy.dtype` like `np.int64`
    or even a pandas `ExtensionDtype` like `pd.CategoricalDtype`. Rather than burden
    the user with having to constantly annotate all of those options, this can simply
    be imported and reused from the pandas._typing module
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，pandas 中有很多函数接受一个 `dtype` 参数。这可以表示为字符串，如`"object"`，一个`numpy.dtype`，如`np.int64`，甚至是
    pandas 的 `ExtensionDtype`，如`pd.CategoricalDtype`。与其让用户不断地为所有这些选项进行注释，不如简单地从 pandas._typing
    模块中导入并重复使用
- en: '[PRE58]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This module will ultimately house types for repeatedly used concepts like “path-like”,
    “array-like”, “numeric”, etc… and can also hold aliases for commonly appearing
    parameters like `axis`. Development of this module is active so be sure to refer
    to the source for the most up to date list of available types.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块最终将包含用于重复使用的概念的类型，如“类似路径”，“类似数组”，“数值”等，并且还可以保存常见参数的别名，如 `axis`。该模块的开发活动，因此请确保参考源以获取最新的可用类型列表。
- en: '[Validating type hints](#id9)'
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[验证类型提示](#id9)'
- en: pandas uses [mypy](http://mypy-lang.org) and [pyright](https://github.com/microsoft/pyright)
    to statically analyze the code base and type hints. After making any change you
    can ensure your type hints are consistent by running
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 使用 [mypy](http://mypy-lang.org) 和 [pyright](https://github.com/microsoft/pyright)
    来静态分析代码库和类型提示。在进行任何更改后，您可以通过运行以下命令确保您的类型提示是一致的
- en: '[PRE59]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: in your python environment.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 python 环境中。
- en: Warning
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Please be aware that the above commands will use the current python environment.
    If your python packages are older/newer than those installed by the pandas CI,
    the above commands might fail. This is often the case when the `mypy` or `numpy`
    versions do not match. Please see [how to setup the python environment](contributing_environment.html#contributing-mamba)
    or select a [recently succeeded workflow](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess),
    select the “Docstring validation, typing, and other manual pre-commit hooks” job,
    then click on “Set up Conda” and “Environment info” to see which versions the
    pandas CI installs.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，上述命令将使用当前的 python 环境。如果你的 python 包比 pandas CI 安装的包旧/新，上述命令可能会失败。当 `mypy`
    或 `numpy` 版本不匹配时，这种情况经常发生。请参阅[如何设置 python 环境](contributing_environment.html#contributing-mamba)或选择一个[最近成功的工作流](https://github.com/pandas-dev/pandas/actions/workflows/code-checks.yml?query=branch%3Amain+is%3Asuccess)，选择“Docstring
    validation, typing, and other manual pre-commit hooks”作业，然后点击“Set up Conda”和“Environment
    info”查看 pandas CI 安装的版本。
- en: '### [Testing type hints in code using pandas](#id10)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用 pandas 在代码中测试类型提示](#id10)'
- en: Warning
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Pandas is not yet a py.typed library ([**PEP 561**](https://peps.python.org/pep-0561/))!
    The primary purpose of locally declaring pandas as a py.typed library is to test
    and improve the pandas-builtin type annotations.
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas 还不是一个 py.typed 库（[**PEP 561**](https://peps.python.org/pep-0561/)）！在本地声明
    pandas 为 py.typed 库的主要目的是测试和改进 pandas 内置的类型注解。
- en: 'Until pandas becomes a py.typed library, it is possible to easily experiment
    with the type annotations shipped with pandas by creating an empty file named
    “py.typed” in the pandas installation folder:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 成为一个 py.typed 库之前，可以通过在 pandas 安装文件夹中创建一个名为“py.typed”的空文件来轻松尝试 pandas
    随附的类型注解。
- en: '[PRE60]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The existence of the py.typed file signals to type checkers that pandas is already
    a py.typed library. This makes type checkers aware of the type annotations shipped
    with pandas.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 存在 py.typed 文件表明 pandas 已经是一个 py.typed 库。这使得类型检查器意识到 pandas 随附的类型注解。
- en: '[Testing with continuous integration](#id11)'
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[使用持续集成进行测试](#id11)'
- en: The pandas test suite will run automatically on [GitHub Actions](https://github.com/features/actions/)
    continuous integration services, once your pull request is submitted. However,
    if you wish to run the test suite on a branch prior to submitting the pull request,
    then the continuous integration services need to be hooked to your GitHub repository.
    Instructions are here for [GitHub Actions](https://docs.github.com/en/actions/).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您提交拉取请求，Pandas 测试套件将自动在 [GitHub Actions](https://github.com/features/actions/)
    持续集成服务上运行。然而，如果您希望在提交拉取请求之前在分支上运行测试套件，则需要将持续集成服务连接到您的 GitHub 仓库。这里有关于[GitHub Actions](https://docs.github.com/en/actions/)的说明。
- en: A pull-request will be considered for merging when you have an all ‘green’ build.
    If any tests are failing, then you will get a red ‘X’, where you can click through
    to see the individual failed tests. This is an example of a green build.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 当您拥有一个全“绿色”构建时，拉取请求将被考虑合并。如果有任何测试失败，则会得到一个红色的“X”，您可以点击查看单个失败的测试。这是一个绿色构建的示例。
- en: '![../_images/ci.png](../Images/174672c6cd526852399da413884bf421.png) ## [Test-driven
    development](#id12)'
  id: totrans-381
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/ci.png](../Images/174672c6cd526852399da413884bf421.png) ## [测试驱动开发](#id12)'
- en: 'pandas is serious about testing and strongly encourages contributors to embrace
    [test-driven development (TDD)](https://en.wikipedia.org/wiki/Test-driven_development).
    This development process “relies on the repetition of a very short development
    cycle: first the developer writes an (initially failing) automated test case that
    defines a desired improvement or new function, then produces the minimum amount
    of code to pass that test.” So, before actually writing any code, you should write
    your tests. Often the test can be taken from the original GitHub issue. However,
    it is always worth considering additional use cases and writing corresponding
    tests.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对测试非常严肃，并强烈鼓励贡献者采用[测试驱动开发（TDD）](https://en.wikipedia.org/wiki/Test-driven_development)。这种开发过程“依赖于一个非常短的开发周期的重复：首先开发人员编写一个（最初失败的）自动化测试用例，定义所需的改进或新功能，然后产生最少量的代码来通过该测试。”因此，在实际编写任何代码之前，你应该编写你的测试。通常测试可以从原始的
    GitHub 问题中获取。然而，值得考虑额外的用例并编写相应的测试。
- en: Adding tests is one of the most common requests after code is pushed to pandas.
    Therefore, it is worth getting in the habit of writing tests ahead of time so
    this is never an issue.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码被推送到 pandas 之后，添加测试是最常见的请求之一。因此，值得养成提前编写测试的习惯，这样就不会成为问题。
- en: '[Writing tests](#id13)'
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[编写测试](#id13)'
- en: All tests should go into the `tests` subdirectory of the specific package. This
    folder contains many current examples of tests, and we suggest looking to these
    for inspiration.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试应该放在特定包的`tests`子目录中。该文件夹包含许多当前的测试示例，我们建议参考这些示例来获得灵感。
- en: As a general tip, you can use the search functionality in your integrated development
    environment (IDE) or the git grep command in a terminal to find test files in
    which the method is called. If you are unsure of the best location to put your
    test, take your best guess, but note that reviewers may request that you move
    the test to a different location.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般提示，你可以在集成开发环境（IDE）中使用搜索功能，或者在终端中使用`git grep`命令查找调用该方法的测试文件。如果你不确定最佳位置放置你的测试，请尽力猜测，但请注意，审阅者可能会要求你将测试移动到其他位置。
- en: 'To use git grep, you can run the following command in a terminal:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`git grep`，你可以在终端中运行以下命令：
- en: '`git grep "function_name("`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`git grep "function_name("`'
- en: This will search through all files in your repository for the text `function_name(`.
    This can be a useful way to quickly locate the function in the codebase and determine
    the best location to add a test for it.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这将搜索你的代码库中所有文件中的`function_name(`文本。这是一种快速定位代码库中函数并确定最佳位置添加测试的有用方式。
- en: Ideally, there should be one, and only one, obvious place for a test to reside.
    Until we reach that ideal, these are some rules of thumb for where a test should
    be located.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，应该有一个，而且只有一个，明显的测试位置。在达到理想状态之前，以下是一些测试应该放置在何处的经验法则。
- en: 'Does your test depend only on code in `pd._libs.tslibs`? This test likely belongs
    in one of:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否只依赖于`pd._libs.tslibs`中的代码？这个测试可能属于以下其中之一：
- en: tests.tslibs
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tslibs
- en: Note
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: No file in `tests.tslibs` should import from any pandas modules outside of `pd._libs.tslibs`
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`tests.tslibs`中的任何文件都不应该从`pd._libs.tslibs`以外的任何 pandas 模块导入'
- en: tests.scalar
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.scalar
- en: tests.tseries.offsets
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tseries.offsets
- en: 'Does your test depend only on code in pd._libs? This test likely belongs in
    one of:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否只依赖于`pd._libs`中的代码？这个测试可能属于以下其中之一：
- en: tests.libs
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.libs
- en: tests.groupby.test_libgroupby
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.groupby.test_libgroupby
- en: 'Is your test for an arithmetic or comparison method? This test likely belongs
    in one of:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否是算术或比较方法？这个测试可能属于以下其中之一：
- en: tests.arithmetic
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arithmetic
- en: Note
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray
    using the `box_with_array` fixture.
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些测试旨在使用`box_with_array`夹具测试 DataFrame/Series/Index/ExtensionArray 的行为是否可以共享。
- en: tests.frame.test_arithmetic
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_arithmetic
- en: tests.series.test_arithmetic
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_arithmetic
- en: 'Is your test for a reduction method (min, max, sum, prod, …)? This test likely
    belongs in one of:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否是减少方法（min、max、sum、prod等）？这个测试可能属于以下其中之一：
- en: tests.reductions
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.reductions
- en: Note
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray.
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些测试旨在测试 DataFrame/Series/Index/ExtensionArray 的行为是否可以共享。
- en: tests.frame.test_reductions
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_reductions
- en: tests.series.test_reductions
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_reductions
- en: tests.test_nanops
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.test_nanops
- en: Is your test for an indexing method? This is the most difficult case for deciding
    where a test belongs, because there are many of these tests, and many of them
    test more than one method (e.g. both `Series.__getitem__` and `Series.loc.__getitem__`)
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否为索引方法？这是决定测试应该放在何处的最困难的情况，因为这些测试有很多，并且其中许多测试超过一个方法（例如 `Series.__getitem__`
    和 `Series.loc.__getitem__`）
- en: 'Is the test specifically testing an Index method (e.g. `Index.get_loc`, `Index.get_indexer`)?
    This test likely belongs in one of:'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否特定测试索引方法（例如 `Index.get_loc`、`Index.get_indexer`）？这种测试可能应该放在以下某个位置：
- en: tests.indexes.test_indexing
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.test_indexing
- en: tests.indexes.fooindex.test_indexing
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.fooindex.test_indexing
- en: Within that files there should be a method-specific test class e.g. `TestGetLoc`.
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在该文件中应该有一个特定于方法的测试类，例如 `TestGetLoc`。
- en: In most cases, neither `Series` nor `DataFrame` objects should be needed in
    these tests.
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，这些测试中不需要 `Series` 或 `DataFrame` 对象。
- en: 'Is the test for a Series or DataFrame indexing method *other* than `__getitem__`
    or `__setitem__`, e.g. `xs`, `where`, `take`, `mask`, `lookup`, or `insert`? This
    test likely belongs in one of:'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否为Series或DataFrame索引方法 *其他* 于 `__getitem__` 或 `__setitem__`，例如 `xs`、`where`、`take`、`mask`、`lookup`
    或 `insert`？这种测试可能应该放在以下某个位置：
- en: tests.frame.indexing.test_methodname
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.indexing.test_methodname
- en: tests.series.indexing.test_methodname
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.indexing.test_methodname
- en: 'Is the test for any of `loc`, `iloc`, `at`, or `iat`? This test likely belongs
    in one of:'
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否为 `loc`、`iloc`、`at` 或 `iat` 之一？这种测试可能应该放在以下某个位置：
- en: tests.indexing.test_loc
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_loc
- en: tests.indexing.test_iloc
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iloc
- en: tests.indexing.test_at
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_at
- en: tests.indexing.test_iat
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iat
- en: Within the appropriate file, test classes correspond to either types of indexers
    (e.g. `TestLocBooleanMask`) or major use cases (e.g. `TestLocSetitemWithExpansion`).
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在适当的文件中，测试类对应于索引器的类型（例如 `TestLocBooleanMask`）或主要用例（例如 `TestLocSetitemWithExpansion`）。
- en: See the note in section D) about tests that test multiple indexing methods.
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见第D节中有关测试多个索引方法的说明。
- en: 'Is the test for `Series.__getitem__`, `Series.__setitem__`, `DataFrame.__getitem__`,
    or `DataFrame.__setitem__`? This test likely belongs in one of:'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是否为 `Series.__getitem__`、`Series.__setitem__`、`DataFrame.__getitem__` 或 `DataFrame.__setitem__`？这种测试可能应该放在以下某个位置：
- en: tests.series.test_getitem
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_getitem
- en: tests.series.test_setitem
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_setitem
- en: tests.frame.test_getitem
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_getitem
- en: tests.frame.test_setitem
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_setitem
- en: If many cases such a test may test multiple similar methods, e.g.
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果许多情况下这样的测试可能测试多个类似的方法，例如
- en: '[PRE61]'
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In cases like this, the test location should be based on the *underlying* method
    being tested. Or in the case of a test for a bugfix, the location of the actual
    bug. So in this example, we know that `Series.__getitem__` calls `Series.loc.__getitem__`,
    so this is *really* a test for `loc.__getitem__`. So this test belongs in `tests.indexing.test_loc`.
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '在这种情况下，测试位置应基于正在测试的 *底层* 方法。或者在修复bug的情况下，实际bug的位置。因此，在这个例子中，我们知道 `Series.__getitem__`
    调用 `Series.loc.__getitem__`，因此这实际上是一个 `loc.__getitem__` 的测试。因此，这个测试应该放在 `tests.indexing.test_loc`。 '
- en: Is your test for a DataFrame or Series method?
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对DataFrame或Series方法？
- en: 'Is the method a plotting method? This test likely belongs in one of:'
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是否为绘图方法？这种测试可能应该放在以下某个位置：
- en: tests.plotting
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.plotting
- en: 'Is the method an IO method? This test likely belongs in one of:'
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是否为IO方法？这种测试可能应该放在以下某个位置：
- en: tests.io
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.io
- en: Note
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This includes `to_string` but excludes `__repr__`, which is tested in `tests.frame.test_repr`
    and `tests.series.test_repr`. Other classes often have a `test_formats` file.
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这包括 `to_string` 但不包括 `__repr__`，后者在 `tests.frame.test_repr` 和 `tests.series.test_repr`
    中进行测试。其他类通常有一个 `test_formats` 文件。
- en: 'Otherwise This test likely belongs in one of:'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，这种测试可能应该放在以下某个位置：
- en: tests.series.methods.test_mymethod
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.methods.test_mymethod
- en: tests.frame.methods.test_mymethod
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.methods.test_mymethod
- en: Note
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If a test can be shared between DataFrame/Series using the `frame_or_series`
    fixture, by convention it goes in the `tests.frame` file.
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个测试可以在DataFrame/Series之间共享使用 `frame_or_series` fixture，则按照惯例放在 `tests.frame`
    文件中。
- en: 'Is your test for an Index method, not depending on Series/DataFrame? This test
    likely belongs in one of:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否为索引方法，不依赖于Series/DataFrame？这种测试可能应该放在以下某个位置：
- en: tests.indexes
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes
- en: 'Is your test for one of the pandas-provided ExtensionArrays (`Categorical`,
    `DatetimeArray`, `TimedeltaArray`, `PeriodArray`, `IntervalArray`, `NumpyExtensionArray`,
    `FloatArray`, `BoolArray`, `StringArray`)? This test likely belongs in one of:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否为pandas提供的ExtensionArrays之一（`Categorical`、`DatetimeArray`、`TimedeltaArray`、`PeriodArray`、`IntervalArray`、`NumpyExtensionArray`、`FloatArray`、`BoolArray`、`StringArray`）？这种测试可能应该放在以下某个位置：
- en: tests.arrays
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arrays
- en: 'Is your test for *all* ExtensionArray subclasses (the “EA Interface”)? This
    test likely belongs in one of:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是否针对 *所有* ExtensionArray 的子类（“EA Interface”）？这个测试很可能属于以下其中之一：
- en: tests.extension
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.extension
- en: '[Using `pytest`](#id14)'
  id: totrans-455
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[使用 `pytest`](#id14)'
- en: '[Test structure](#id15)'
  id: totrans-456
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试结构](#id15)'
- en: pandas existing test structure is *mostly* class-based, meaning that you will
    typically find tests wrapped in a class.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 现有的测试结构 *大多* 是基于类的，这意味着您通常会发现测试封装在一个类中。
- en: '[PRE62]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We prefer a more *functional* style using the [pytest](https://docs.pytest.org/en/latest/)
    framework, which offers a richer testing framework that will facilitate testing
    and developing. Thus, instead of writing test classes, we will write test functions
    like this:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更倾向于使用[pytest](https://docs.pytest.org/en/latest/)框架的更*功能*风格，该框架提供了一个更丰富的测试框架，可以促进测试和开发。因此，我们将不再编写测试类，而是编写像这样的测试函数：
- en: '[PRE63]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[Preferred `pytest` idioms](#id16)'
  id: totrans-461
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[首选的 `pytest` 习惯用法](#id16)'
- en: Functional tests named `def test_*` and *only* take arguments that are either
    fixtures or parameters.
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名为 `def test_*` 的功能测试只接受夹具或参数。
- en: Use a bare `assert` for testing scalars and truth-testing
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于测试标量和真值测试，请使用裸的 `assert`
- en: Use `tm.assert_series_equal(result, expected)` and `tm.assert_frame_equal(result,
    expected)` for comparing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") results respectively.
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于比较[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")结果的分别是 `tm.assert_series_equal(result, expected)` 和 `tm.assert_frame_equal(result,
    expected)`。
- en: Use [@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)
    when testing multiple cases.
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试多个情况时，请使用[@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)。
- en: Use [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)
    when a test case is expected to fail.
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例预期会失败时，请使用[pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)。
- en: Use [pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)
    when a test case is never expected to pass.
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例永远不会通过时，请使用[pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)。
- en: Use [pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)
    when a test case needs a particular mark.
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例需要特定标记时，请使用[pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)。
- en: Use [@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)
    if multiple tests can share a setup object.
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果多个测试可以共享设置对象，请使用[@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)。
- en: Warning
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use `pytest.xfail` (which is different than `pytest.mark.xfail`) since
    it immediately stops the test and does not check if the test will fail. If this
    is the behavior you desire, use `pytest.skip` instead.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用 `pytest.xfail`（与 `pytest.mark.xfail` 不同），因为它会立即停止测试，并且不会检查测试是否会失败。如果这是您想要的行为，请改用
    `pytest.skip`。
- en: If a test is known to fail but the manner in which it fails is not meant to
    be captured, use `pytest.mark.xfail` It is common to use this method for a test
    that exhibits buggy behavior or a non-implemented feature. If the failing test
    has flaky behavior, use the argument `strict=False`. This will make it so pytest
    does not fail if the test happens to pass. Using `strict=False` is highly undesirable,
    please use it only as a last resort.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个测试已知会失败，但其失败方式不应该被捕获，则使用 `pytest.mark.xfail`。通常情况下，会使用这种方法来测试表现出错误行为或未实现的功能的测试。如果失败的测试具有不稳定的行为，请使用参数
    `strict=False`。这样做会使 pytest 在测试恰好通过时不会失败。使用 `strict=False` 是非常不可取的，请仅在万不得已时使用它。
- en: 'Prefer the decorator `@pytest.mark.xfail` and the argument `pytest.param` over
    usage within a test so that the test is appropriately marked during the collection
    phase of pytest. For xfailing a test that involves multiple parameters, a fixture,
    or a combination of these, it is only possible to xfail during the testing phase.
    To do so, use the `request` fixture:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用装饰器 `@pytest.mark.xfail` 和参数 `pytest.param`，而不是在测试中使用，以便在 pytest 的收集阶段适当地标记测试。对于涉及多个参数、夹具或这两者的测试，只能在测试阶段进行
    xfail。要这样做，请使用 `request` 夹具：
- en: '[PRE64]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: xfail is not to be used for tests involving failure due to invalid user arguments.
    For these tests, we need to verify the correct exception type and error message
    is being raised, using `pytest.raises` instead.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: xfail 不应用于涉及由于无效用户参数导致的失败的测试。对于这些测试，我们需要使用 `pytest.raises` 来验证是否引发了正确的异常类型和错误消息。
- en: '#### [Testing a warning](#id17)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '#### [测试警告](#id17)'
- en: Use `tm.assert_produces_warning` as a context manager to check that a block
    of code raises a warning.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tm.assert_produces_warning`作为上下文管理器来检查一段代码是否引发了警告。
- en: '[PRE65]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: If a warning should specifically not happen in a block of code, pass `False`
    into the context manager.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一段代码中明确不应该发生警告，请将`False`传递给上下文管理器。
- en: '[PRE66]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: If you have a test that would emit a warning, but you aren’t actually testing
    the warning itself (say because it’s going to be removed in the future, or because
    we’re matching a 3rd-party library’s behavior), then use `pytest.mark.filterwarnings`
    to ignore the error.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个会发出警告的测试，但实际上您并不测试警告本身（比如因为它将来会被删除，或者因为我们正在匹配第三方库的行为），那么使用`pytest.mark.filterwarnings`来忽略错误。
- en: '[PRE67]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[Testing an exception](#id18)'
  id: totrans-483
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试异常](#id18)'
- en: Use [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    as a context manager with the specific exception subclass (i.e. never use [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(in Python v3.12)")) and the exception message in `match`.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    作为上下文管理器，并使用特定的异常子类（即永远不要使用[`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(在 Python v3.12 中)")）和 `match` 中的异常消息。
- en: '[PRE68]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[Testing involving files](#id19)'
  id: totrans-486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及文件的测试](#id19)'
- en: The `tm.ensure_clean` context manager creates a temporary file for testing,
    with a generated filename (or your filename if provided), that is automatically
    deleted when the context block is exited.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '`tm.ensure_clean` 上下文管理器创建一个临时文件用于测试，带有生成的文件名（或者如果提供了您的文件名），当上下文块退出时自动删除。'
- en: '[PRE69]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[Testing involving network connectivity](#id20)'
  id: totrans-489
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及网络连接的测试](#id20)'
- en: A unit test should not access a public data set over the internet due to flakiness
    of network connections and lack of ownership of the server that is being connected
    to. To mock this interaction, use the `httpserver` fixture from the [pytest-localserver
    plugin.](https://github.com/pytest-dev/pytest-localserver) with synthetic data.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试不应该访问公共数据集，因为网络连接不稳定并且连接到的服务器没有所有权。为了模拟这种交互，使用来自[pytest-localserver 插件](https://github.com/pytest-dev/pytest-localserver)的`httpserver`
    fixture 与合成数据。
- en: '[PRE70]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[Example](#id21)'
  id: totrans-492
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[示例](#id21)'
- en: Here is an example of a self-contained set of tests in a file `pandas/tests/test_cool_feature.py`
    that illustrate multiple features that we like to use. Please remember to add
    the GitHub Issue Number as a comment to a new test.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在文件 `pandas/tests/test_cool_feature.py` 中的一组自包含测试的示例，展示了我们喜欢使用的多个功能。请记得将
    GitHub 问题编号作为新测试的注释添加。
- en: '[PRE71]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: A test run of this yields
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试运行结果为
- en: '[PRE72]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Tests that we have `parametrized` are now accessible via the test name, for
    example we could run these with `-k int8` to sub-select *only* those tests which
    match `int8`.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经`参数化`的测试现在可以通过测试名称访问，例如，我们可以使用`-k int8`来仅选择与`int8`匹配的测试。
- en: '[PRE73]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '### [Using `hypothesis`](#id22)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用 `hypothesis`](#id22)'
- en: Hypothesis is a library for property-based testing. Instead of explicitly parametrizing
    a test, you can describe *all* valid inputs and let Hypothesis try to find a failing
    input. Even better, no matter how many random examples it tries, Hypothesis always
    reports a single minimal counterexample to your assertions - often an example
    that you would never have thought to test.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 假设是用于基于属性的测试的库。不是显式地为测试参数化，而是可以描述*所有*有效的输入，然后让假设尝试找到一个失败的输入。更好的是，无论它尝试多少随机示例，假设总是报告一个单一的最小反例给你的断言
    - 通常是一个你从未想过要测试的示例。
- en: See [Getting Started with Hypothesis](https://hypothesis.works/articles/getting-started-with-hypothesis/)
    for more of an introduction, then [refer to the Hypothesis documentation for details](https://hypothesis.readthedocs.io/en/latest/index.html).
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [Getting Started with Hypothesis](https://hypothesis.works/articles/getting-started-with-hypothesis/)
    以获取更多介绍，然后 [参考 Hypothesis 文档获取详情](https://hypothesis.readthedocs.io/en/latest/index.html)。
- en: '[PRE74]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'This test shows off several useful features of Hypothesis, as well as demonstrating
    a good use-case: checking properties that should hold over a large or complicated
    domain of inputs.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试展示了假设的几个有用功能，以及演示了一个很好的用例：检查应该在大型或复杂的输入域上保持的属性。
- en: To keep the pandas test suite running quickly, parametrized tests are preferred
    if the inputs or logic are simple, with Hypothesis tests reserved for cases with
    complex logic or where there are too many combinations of options or subtle interactions
    to test (or think of!) all of them.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持 pandas 测试套件的运行速度，如果输入或逻辑简单，首选参数化测试，保留 Hypothesis 测试用于逻辑复杂或选项组合太多或细微交互太多的情况下测试（或思考！）所有这些情况。
- en: '[Writing tests](#id13)'
  id: totrans-505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[编写测试](#id13)'
- en: All tests should go into the `tests` subdirectory of the specific package. This
    folder contains many current examples of tests, and we suggest looking to these
    for inspiration.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都应该放在特定包的`tests`子目录中。此文件夹包含许多当前的测试示例，我们建议参考这些示例来获取灵感。
- en: As a general tip, you can use the search functionality in your integrated development
    environment (IDE) or the git grep command in a terminal to find test files in
    which the method is called. If you are unsure of the best location to put your
    test, take your best guess, but note that reviewers may request that you move
    the test to a different location.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般提示，您可以使用集成开发环境（IDE）中的搜索功能或在终端中使用 git grep 命令来查找调用该方法的测试文件。如果您不确定最佳位置在哪里放置您的测试，请尽量猜测，但请注意，审阅者可能会要求您将测试移动到其他位置。
- en: 'To use git grep, you can run the following command in a terminal:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 git grep，在终端中运行以下命令：
- en: '`git grep "function_name("`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`git grep "function_name（"`'
- en: This will search through all files in your repository for the text `function_name(`.
    This can be a useful way to quickly locate the function in the codebase and determine
    the best location to add a test for it.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 这将搜索存储库中所有文件中的文本`function_name（`。这是一个快速定位代码库中函数并确定最佳位置添加测试的有用方式。
- en: Ideally, there should be one, and only one, obvious place for a test to reside.
    Until we reach that ideal, these are some rules of thumb for where a test should
    be located.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，应该有一个，而且只有一个，显而易见的地方可以放置一个测试。在我们达到这个理想状态之前，以下是一些关于测试应该放置在何处的经验法则。
- en: 'Does your test depend only on code in `pd._libs.tslibs`? This test likely belongs
    in one of:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否仅依赖于`pd._libs.tslibs`中的代码？这个测试可能属于以下之一：
- en: tests.tslibs
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tslibs
- en: Note
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: No file in `tests.tslibs` should import from any pandas modules outside of `pd._libs.tslibs`
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`tests.tslibs`中的任何文件都不应该从`pd._libs.tslibs`之外的任何 pandas 模块中导入。'
- en: tests.scalar
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.scalar
- en: tests.tseries.offsets
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.tseries.offsets
- en: 'Does your test depend only on code in pd._libs? This test likely belongs in
    one of:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否仅依赖于`pd._libs`中的代码？这个测试可能属于以下之一：
- en: tests.libs
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.libs
- en: tests.groupby.test_libgroupby
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.groupby.test_libgroupby
- en: 'Is your test for an arithmetic or comparison method? This test likely belongs
    in one of:'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否针对算术或比较方法？这个测试可能属于以下之一：
- en: tests.arithmetic
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arithmetic
- en: Note
  id: totrans-523
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray
    using the `box_with_array` fixture.
  id: totrans-524
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些旨在测试可以共享以使用`box_with_array`装置测试 DataFrame/Series/Index/ExtensionArray 的行为。
- en: tests.frame.test_arithmetic
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_arithmetic
- en: tests.series.test_arithmetic
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_arithmetic
- en: 'Is your test for a reduction method (min, max, sum, prod, …)? This test likely
    belongs in one of:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否针对一个减少方法（min、max、sum、prod等）？这个测试可能属于以下之一：
- en: tests.reductions
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.reductions
- en: Note
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: These are intended for tests that can be shared to test the behavior of DataFrame/Series/Index/ExtensionArray.
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些旨在测试可以共享以测试 DataFrame/Series/Index/ExtensionArray 的行为。
- en: tests.frame.test_reductions
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_reductions
- en: tests.series.test_reductions
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_reductions
- en: tests.test_nanops
  id: totrans-533
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.test_nanops
- en: Is your test for an indexing method? This is the most difficult case for deciding
    where a test belongs, because there are many of these tests, and many of them
    test more than one method (e.g. both `Series.__getitem__` and `Series.loc.__getitem__`)
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否针对索引方法？这是最难决定测试应该放在哪里的情况，因为有许多这些测试，并且其中许多测试不止一个方法（例如`Series.__getitem__`和`Series.loc.__getitem__`）
- en: 'Is the test specifically testing an Index method (e.g. `Index.get_loc`, `Index.get_indexer`)?
    This test likely belongs in one of:'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的测试是否专门测试索引方法（例如`Index.get_loc`，`Index.get_indexer`）？这个测试可能属于以下之一：
- en: tests.indexes.test_indexing
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.test_indexing
- en: tests.indexes.fooindex.test_indexing
  id: totrans-537
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes.fooindex.test_indexing
- en: Within that files there should be a method-specific test class e.g. `TestGetLoc`.
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在该文件中应该有一个特定于方法的测试类，例如`TestGetLoc`。
- en: In most cases, neither `Series` nor `DataFrame` objects should be needed in
    these tests.
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在大多数情况下，这些测试中都不需要`Series`或`DataFrame`对象。
- en: 'Is the test for a Series or DataFrame indexing method *other* than `__getitem__`
    or `__setitem__`, e.g. `xs`, `where`, `take`, `mask`, `lookup`, or `insert`? This
    test likely belongs in one of:'
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是针对Series或DataFrame索引方法*而非*`__getitem__`或`__setitem__`的方法吗，例如`xs`、`where`、`take`、`mask`、`lookup`或`insert`？这个测试可能属于以下之一：
- en: tests.frame.indexing.test_methodname
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.indexing.test_methodname
- en: tests.series.indexing.test_methodname
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.indexing.test_methodname
- en: 'Is the test for any of `loc`, `iloc`, `at`, or `iat`? This test likely belongs
    in one of:'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是针对`loc`、`iloc`、`at`或`iat`中的任何一个吗？这个测试可能属于以下之一：
- en: tests.indexing.test_loc
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_loc
- en: tests.indexing.test_iloc
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iloc
- en: tests.indexing.test_at
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_at
- en: tests.indexing.test_iat
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexing.test_iat
- en: Within the appropriate file, test classes correspond to either types of indexers
    (e.g. `TestLocBooleanMask`) or major use cases (e.g. `TestLocSetitemWithExpansion`).
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在适当的文件中，测试类对应于索引器类型（例如`TestLocBooleanMask`）或主要用例（例如`TestLocSetitemWithExpansion`）。
- en: See the note in section D) about tests that test multiple indexing methods.
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见关于测试多个索引方法的部分D中的注释。
- en: 'Is the test for `Series.__getitem__`, `Series.__setitem__`, `DataFrame.__getitem__`,
    or `DataFrame.__setitem__`? This test likely belongs in one of:'
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试是针对`Series.__getitem__`、`Series.__setitem__`、`DataFrame.__getitem__`还是`DataFrame.__setitem__`？这个测试可能属于以下之一：
- en: tests.series.test_getitem
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_getitem
- en: tests.series.test_setitem
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.test_setitem
- en: tests.frame.test_getitem
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_getitem
- en: tests.frame.test_setitem
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.test_setitem
- en: If many cases such a test may test multiple similar methods, e.g.
  id: totrans-555
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在许多情况下，这样的测试可能测试多个类似的方法，例如
- en: '[PRE75]'
  id: totrans-556
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In cases like this, the test location should be based on the *underlying* method
    being tested. Or in the case of a test for a bugfix, the location of the actual
    bug. So in this example, we know that `Series.__getitem__` calls `Series.loc.__getitem__`,
    so this is *really* a test for `loc.__getitem__`. So this test belongs in `tests.indexing.test_loc`.
  id: totrans-557
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种情况下，测试位置应基于正在测试的*基础*方法。或者在测试修复错误时，应基于实际错误的位置。因此，在这个例子中，我们知道`Series.__getitem__`调用`Series.loc.__getitem__`，因此这实际上是对`loc.__getitem__`的测试。因此，这个测试应该属于`tests.indexing.test_loc`。
- en: Is your test for a DataFrame or Series method?
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对DataFrame还是Series方法？
- en: 'Is the method a plotting method? This test likely belongs in one of:'
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是绘图方法吗？这个测试可能属于以下之一：
- en: tests.plotting
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.plotting
- en: 'Is the method an IO method? This test likely belongs in one of:'
  id: totrans-561
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法是IO方法吗？这个测试可能属于以下之一：
- en: tests.io
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.io
- en: Note
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This includes `to_string` but excludes `__repr__`, which is tested in `tests.frame.test_repr`
    and `tests.series.test_repr`. Other classes often have a `test_formats` file.
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这包括`to_string`但不包括`__repr__`，后者在`tests.frame.test_repr`和`tests.series.test_repr`中进行测试。其他类通常有一个`test_formats`文件。
- en: 'Otherwise This test likely belongs in one of:'
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，这个测试可能属于以下之一：
- en: tests.series.methods.test_mymethod
  id: totrans-566
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.series.methods.test_mymethod
- en: tests.frame.methods.test_mymethod
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.frame.methods.test_mymethod
- en: Note
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: If a test can be shared between DataFrame/Series using the `frame_or_series`
    fixture, by convention it goes in the `tests.frame` file.
  id: totrans-569
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个测试可以在DataFrame/Series之间共享使用`frame_or_series` fixture，按照惯例，它应该放在`tests.frame`文件中。
- en: 'Is your test for an Index method, not depending on Series/DataFrame? This test
    likely belongs in one of:'
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对索引方法，不依赖于Series/DataFrame吗？这个测试可能属于以下之一：
- en: tests.indexes
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.indexes
- en: 'Is your test for one of the pandas-provided ExtensionArrays (`Categorical`,
    `DatetimeArray`, `TimedeltaArray`, `PeriodArray`, `IntervalArray`, `NumpyExtensionArray`,
    `FloatArray`, `BoolArray`, `StringArray`)? This test likely belongs in one of:'
  id: totrans-572
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对pandas提供的ExtensionArrays之一（`Categorical`、`DatetimeArray`、`TimedeltaArray`、`PeriodArray`、`IntervalArray`、`NumpyExtensionArray`、`FloatArray`、`BoolArray`、`StringArray`）吗？这个测试可能属于以下之一：
- en: tests.arrays
  id: totrans-573
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.arrays
- en: 'Is your test for *all* ExtensionArray subclasses (the “EA Interface”)? This
    test likely belongs in one of:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的测试是针对*所有*ExtensionArray子类（“EA接口”）吗？这个测试可能属于以下之一：
- en: tests.extension
  id: totrans-575
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: tests.extension
- en: '[Using `pytest`](#id14)'
  id: totrans-576
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[使用`pytest`](#id14)'
- en: '[Test structure](#id15)'
  id: totrans-577
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试结构](#id15)'
- en: pandas existing test structure is *mostly* class-based, meaning that you will
    typically find tests wrapped in a class.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: pandas现有的测试结构*大多*是基于类的，这意味着你通常会发现测试包装在一个类中。
- en: '[PRE76]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'We prefer a more *functional* style using the [pytest](https://docs.pytest.org/en/latest/)
    framework, which offers a richer testing framework that will facilitate testing
    and developing. Thus, instead of writing test classes, we will write test functions
    like this:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢使用[pytest](https://docs.pytest.org/en/latest/)框架的更*功能*风格，它提供了更丰富的测试框架，将有助于测试和开发。因此，我们将编写类似于以下的测试函数，而不是编写测试类：
- en: '[PRE77]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[Preferred `pytest` idioms](#id16)'
  id: totrans-582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[首选的`pytest`习惯用法](#id16)'
- en: Functional tests named `def test_*` and *only* take arguments that are either
    fixtures or parameters.
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数测试命名为`def test_*`，并且*只*接受fixtures或参数。
- en: Use a bare `assert` for testing scalars and truth-testing
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于测试标量和真值测试的裸`assert`。
- en: Use `tm.assert_series_equal(result, expected)` and `tm.assert_frame_equal(result,
    expected)` for comparing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") results respectively.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于比较[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")结果的`tm.assert_series_equal(result, expected)`和`tm.assert_frame_equal(result,
    expected)`。
- en: Use [@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)
    when testing multiple cases.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试多个情况时，请使用[@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)。
- en: Use [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)
    when a test case is expected to fail.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例预期会失败时，请使用[pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)。
- en: Use [pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)
    when a test case is never expected to pass.
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例永远不会通过时，请使用[pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)。
- en: Use [pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)
    when a test case needs a particular mark.
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试用例需要特定标记时，请使用[pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)。
- en: Use [@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)
    if multiple tests can share a setup object.
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果多个测试可以共享一个设置对象，请使用[@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)。
- en: Warning
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use `pytest.xfail` (which is different than `pytest.mark.xfail`) since
    it immediately stops the test and does not check if the test will fail. If this
    is the behavior you desire, use `pytest.skip` instead.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`pytest.xfail`（与`pytest.mark.xfail`不同），因为它会立即停止测试，而不会检查测试是否会失败。如果这是您想要的行为，请改用`pytest.skip`。
- en: If a test is known to fail but the manner in which it fails is not meant to
    be captured, use `pytest.mark.xfail` It is common to use this method for a test
    that exhibits buggy behavior or a non-implemented feature. If the failing test
    has flaky behavior, use the argument `strict=False`. This will make it so pytest
    does not fail if the test happens to pass. Using `strict=False` is highly undesirable,
    please use it only as a last resort.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个测试已知会失败，但失败的方式不打算捕获，使用`pytest.mark.xfail`。通常用于展示错误行为或未实现的功能的测试。如果失败的测试具有不稳定的行为，请使用参数`strict=False`。如果测试恰好通过，pytest不会失败。使用`strict=False`是非常不可取的，请仅在万不得已时使用。
- en: 'Prefer the decorator `@pytest.mark.xfail` and the argument `pytest.param` over
    usage within a test so that the test is appropriately marked during the collection
    phase of pytest. For xfailing a test that involves multiple parameters, a fixture,
    or a combination of these, it is only possible to xfail during the testing phase.
    To do so, use the `request` fixture:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用装饰器`@pytest.mark.xfail`和参数`pytest.param`，而不是在测试中使用，以便在pytest的收集阶段正确标记测试。对于涉及多个参数、一个fixture或这两者组合的测试，只能在测试阶段标记为xfail。要这样做，请使用`request`
    fixture：
- en: '[PRE78]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: xfail is not to be used for tests involving failure due to invalid user arguments.
    For these tests, we need to verify the correct exception type and error message
    is being raised, using `pytest.raises` instead.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: xfail不应用于涉及由于无效用户参数而导致失败的测试。对于这些测试，我们需要使用`pytest.raises`来验证正确的异常类型和错误消息是否被引发。
- en: '#### [Testing a warning](#id17)'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '#### [测试警告](#id17)'
- en: Use `tm.assert_produces_warning` as a context manager to check that a block
    of code raises a warning.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tm.assert_produces_warning`作为上下文管理器来检查一段代码是否引发警告。
- en: '[PRE79]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: If a warning should specifically not happen in a block of code, pass `False`
    into the context manager.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个警告在一段代码中明确不应该发生，请将`False`传递给上下文管理器。
- en: '[PRE80]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: If you have a test that would emit a warning, but you aren’t actually testing
    the warning itself (say because it’s going to be removed in the future, or because
    we’re matching a 3rd-party library’s behavior), then use `pytest.mark.filterwarnings`
    to ignore the error.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个测试会发出警告，但实际上并不测试警告本身（比如因为将来会被移除，或者因为我们要匹配第三方库的行为），那么使用`pytest.mark.filterwarnings`来忽略错误。
- en: '[PRE81]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[Testing an exception](#id18)'
  id: totrans-604
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试异常](#id18)'
- en: Use [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    as a context manager with the specific exception subclass (i.e. never use [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(in Python v3.12)")) and the exception message in `match`.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    作为上下文管理器，并使用特定的异常子类（即永远不要使用[`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(在 Python v3.12 中)")），并在 `match` 中添加异常消息。
- en: '[PRE82]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[Testing involving files](#id19)'
  id: totrans-607
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及文件的测试](#id19)'
- en: The `tm.ensure_clean` context manager creates a temporary file for testing,
    with a generated filename (or your filename if provided), that is automatically
    deleted when the context block is exited.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '`tm.ensure_clean` 上下文管理器会创建一个临时文件进行测试，文件名是自动生成的（或者如果提供了文件名，则是您提供的文件名），在退出上下文块时会自动删除。'
- en: '[PRE83]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[Testing involving network connectivity](#id20)'
  id: totrans-610
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及网络连接的测试](#id20)'
- en: A unit test should not access a public data set over the internet due to flakiness
    of network connections and lack of ownership of the server that is being connected
    to. To mock this interaction, use the `httpserver` fixture from the [pytest-localserver
    plugin.](https://github.com/pytest-dev/pytest-localserver) with synthetic data.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络连接的不稳定性和连接到的服务器的所有权问题，单元测试不应访问公共数据集。为了模拟这种交互，请使用 [pytest-localserver 插件的
    `httpserver` fixture。](https://github.com/pytest-dev/pytest-localserver) 并使用合成数据。
- en: '[PRE84]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[Example](#id21)'
  id: totrans-613
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[示例](#id21)'
- en: Here is an example of a self-contained set of tests in a file `pandas/tests/test_cool_feature.py`
    that illustrate multiple features that we like to use. Please remember to add
    the GitHub Issue Number as a comment to a new test.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个自包含的测试示例，位于文件 `pandas/tests/test_cool_feature.py` 中，展示了我们喜欢使用的多个功能。请记得将
    GitHub 问题编号作为新测试的注释添加。
- en: '[PRE85]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: A test run of this yields
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 对此的测试运行结果为
- en: '[PRE86]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Tests that we have `parametrized` are now accessible via the test name, for
    example we could run these with `-k int8` to sub-select *only* those tests which
    match `int8`.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经`参数化`的测试现在可以通过测试名称访问，例如，我们可以使用 `-k int8` 仅选择与 `int8` 匹配的测试。
- en: '[PRE87]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[Test structure](#id15)'
  id: totrans-620
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试结构](#id15)'
- en: pandas existing test structure is *mostly* class-based, meaning that you will
    typically find tests wrapped in a class.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 现有的测试结构 *主要* 是基于类的，这意味着您通常会在一个类中找到包装的测试。
- en: '[PRE88]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'We prefer a more *functional* style using the [pytest](https://docs.pytest.org/en/latest/)
    framework, which offers a richer testing framework that will facilitate testing
    and developing. Thus, instead of writing test classes, we will write test functions
    like this:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢使用 [pytest](https://docs.pytest.org/en/latest/) 框架的更 *功能化* 风格，该框架提供了一个更丰富的测试框架，将有助于测试和开发。因此，我们将编写类似于以下的测试函数，而不是编写测试类：
- en: '[PRE89]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[Preferred `pytest` idioms](#id16)'
  id: totrans-625
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[首选的 `pytest` 习语](#id16)'
- en: Functional tests named `def test_*` and *only* take arguments that are either
    fixtures or parameters.
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试命名为 `def test_*`，并且 *仅* 接受夹具或参数。
- en: Use a bare `assert` for testing scalars and truth-testing
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于测试标量和真值测试，请使用裸露的 `assert`。
- en: Use `tm.assert_series_equal(result, expected)` and `tm.assert_frame_equal(result,
    expected)` for comparing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") results respectively.
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分别使用`tm.assert_series_equal(result, expected)`和`tm.assert_frame_equal(result,
    expected)`来比较[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的结果。
- en: Use [@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)
    when testing multiple cases.
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试多个案例时，请使用 [@pytest.mark.parameterize](https://docs.pytest.org/en/latest/how-to/parametrize.html)。
- en: Use [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)
    when a test case is expected to fail.
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当预计一个测试案例会失败时，请使用 [pytest.mark.xfail](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.xfail)。
- en: Use [pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)
    when a test case is never expected to pass.
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个测试案例预计永远不会通过时，请使用 [pytest.mark.skip](https://docs.pytest.org/en/latest/reference/reference.html?#pytest.mark.skip)。
- en: Use [pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)
    when a test case needs a particular mark.
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '当一个测试案例需要特定标记时，请使用 [pytest.param](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-param)。 '
- en: Use [@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)
    if multiple tests can share a setup object.
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果多个测试可以共享一个设置对象，请使用 [@pytest.fixture](https://docs.pytest.org/en/latest/reference/reference.html?#pytest-fixture)。
- en: Warning
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Do not use `pytest.xfail` (which is different than `pytest.mark.xfail`) since
    it immediately stops the test and does not check if the test will fail. If this
    is the behavior you desire, use `pytest.skip` instead.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`pytest.xfail`（与`pytest.mark.xfail`不同），因为它会立即停止测试，而不会检查测试是否会失败。如果这是您想要的行为，请改用`pytest.skip`。
- en: If a test is known to fail but the manner in which it fails is not meant to
    be captured, use `pytest.mark.xfail` It is common to use this method for a test
    that exhibits buggy behavior or a non-implemented feature. If the failing test
    has flaky behavior, use the argument `strict=False`. This will make it so pytest
    does not fail if the test happens to pass. Using `strict=False` is highly undesirable,
    please use it only as a last resort.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已知一个测试会失败，但失败的方式不打算捕获，使用`pytest.mark.xfail`。通常用于展示有bug的行为或未实现的功能。如果失败的测试具有不稳定的行为，使用参数`strict=False`。这将使pytest在测试偶然通过时不会失败。使用`strict=False`是非常不可取的，请仅在万不得已时使用。
- en: 'Prefer the decorator `@pytest.mark.xfail` and the argument `pytest.param` over
    usage within a test so that the test is appropriately marked during the collection
    phase of pytest. For xfailing a test that involves multiple parameters, a fixture,
    or a combination of these, it is only possible to xfail during the testing phase.
    To do so, use the `request` fixture:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 更倾向于使用装饰器`@pytest.mark.xfail`和参数`pytest.param`，而不是在测试中使用，以便在pytest的收集阶段适当标记测试。对于涉及多个参数、fixture或这些组合的测试，只能在测试阶段标记为xfail。为此，请使用`request`
    fixture：
- en: '[PRE90]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: xfail is not to be used for tests involving failure due to invalid user arguments.
    For these tests, we need to verify the correct exception type and error message
    is being raised, using `pytest.raises` instead.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: xfail不应用于涉及由于无效用户参数而导致失败的测试。对于这些测试，我们需要验证是否引发了正确的异常类型和错误消息，而不是使用`pytest.raises`。
- en: '#### [Testing a warning](#id17)'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '#### [测试警告](#id17)'
- en: Use `tm.assert_produces_warning` as a context manager to check that a block
    of code raises a warning.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tm.assert_produces_warning`作为上下文管理器来检查一段代码是否引发警告。
- en: '[PRE91]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: If a warning should specifically not happen in a block of code, pass `False`
    into the context manager.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在一段代码块中特别不希望出现警告，请将`False`传递给上下文管理器。
- en: '[PRE92]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: If you have a test that would emit a warning, but you aren’t actually testing
    the warning itself (say because it’s going to be removed in the future, or because
    we’re matching a 3rd-party library’s behavior), then use `pytest.mark.filterwarnings`
    to ignore the error.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个测试会发出警告，但实际上并不测试警告本身（比如因为它将来会被移除，或者因为我们正在匹配第三方库的行为），那么使用`pytest.mark.filterwarnings`来忽略错误。
- en: '[PRE93]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[Testing an exception](#id18)'
  id: totrans-647
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[测试异常](#id18)'
- en: Use [pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)
    as a context manager with the specific exception subclass (i.e. never use [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(in Python v3.12)")) and the exception message in `match`.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[pytest.raises](https://docs.pytest.org/en/latest/reference/reference.html#pytest-raises)作为上下文管理器，指定特定的异常子类（即永远不要使用[`Exception`](https://docs.python.org/3/library/exceptions.html#Exception
    "(在Python v3.12中)"))和在`match`中的异常消息。
- en: '[PRE94]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[Testing involving files](#id19)'
  id: totrans-650
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及文件的测试](#id19)'
- en: The `tm.ensure_clean` context manager creates a temporary file for testing,
    with a generated filename (or your filename if provided), that is automatically
    deleted when the context block is exited.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '`tm.ensure_clean`上下文管理器会为测试创建一个临时文件，文件名是自动生成的（或者如果提供了文件名，则使用提供的文件名），在退出上下文块时会自动删除。'
- en: '[PRE95]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[Testing involving network connectivity](#id20)'
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[涉及网络连接的测试](#id20)'
- en: A unit test should not access a public data set over the internet due to flakiness
    of network connections and lack of ownership of the server that is being connected
    to. To mock this interaction, use the `httpserver` fixture from the [pytest-localserver
    plugin.](https://github.com/pytest-dev/pytest-localserver) with synthetic data.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试不应访问公共数据集的网络连接，因为网络连接不稳定且无法拥有所连接的服务器。为了模拟这种交互，使用[pytest-localserver插件中的`httpserver`
    fixture](https://github.com/pytest-dev/pytest-localserver)和合成数据。
- en: '[PRE96]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[Example](#id21)'
  id: totrans-656
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[示例](#id21)'
- en: Here is an example of a self-contained set of tests in a file `pandas/tests/test_cool_feature.py`
    that illustrate multiple features that we like to use. Please remember to add
    the GitHub Issue Number as a comment to a new test.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，展示了一个自包含的测试集合，位于文件`pandas/tests/test_cool_feature.py`中，展示了我们喜欢使用的多个功能。请记得在新测试中作为注释添加GitHub
    Issue编号。
- en: '[PRE97]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: A test run of this yields
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此测试会产生以下结果
- en: '[PRE98]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Tests that we have `parametrized` are now accessible via the test name, for
    example we could run these with `-k int8` to sub-select *only* those tests which
    match `int8`.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经`参数化`的测试现在可以通过测试名称访问，例如我们可以使用`-k int8`来仅选择与`int8`匹配的*仅*那些测试。
- en: '[PRE99]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '### [Using `hypothesis`](#id22)'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '### [使用`hypothesis`](#id22)'
- en: Hypothesis is a library for property-based testing. Instead of explicitly parametrizing
    a test, you can describe *all* valid inputs and let Hypothesis try to find a failing
    input. Even better, no matter how many random examples it tries, Hypothesis always
    reports a single minimal counterexample to your assertions - often an example
    that you would never have thought to test.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: Hypothesis是一个基于属性的测试库。与显式地为测试参数化不同，你可以描述*所有*有效的输入，让Hypothesis尝试找到一个失败的输入。更好的是，无论它尝试多少个随机示例，Hypothesis总是报告一个最小的反例给你的断言
    - 通常是一个你从未想过要测试的示例。
- en: See [Getting Started with Hypothesis](https://hypothesis.works/articles/getting-started-with-hypothesis/)
    for more of an introduction, then [refer to the Hypothesis documentation for details](https://hypothesis.readthedocs.io/en/latest/index.html).
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用Hypothesis入门](https://hypothesis.works/articles/getting-started-with-hypothesis/)获取更多介绍，然后参考[Hypothesis文档获取详细信息](https://hypothesis.readthedocs.io/en/latest/index.html)。
- en: '[PRE100]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'This test shows off several useful features of Hypothesis, as well as demonstrating
    a good use-case: checking properties that should hold over a large or complicated
    domain of inputs.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试展示了Hypothesis的几个有用特性，同时展示了一个很好的用例：检查应该在大型或复杂输入域上保持的属性。
- en: To keep the pandas test suite running quickly, parametrized tests are preferred
    if the inputs or logic are simple, with Hypothesis tests reserved for cases with
    complex logic or where there are too many combinations of options or subtle interactions
    to test (or think of!) all of them.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持pandas测试套件的快速运行，如果输入或逻辑简单，则首选参数化测试，Hypothesis测试保留用于具有复杂逻辑或选项组合太多或细微交互需要测试（或考虑！）的情况。
- en: '## [Running the test suite](#id23)'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '## [运行测试套件](#id23)'
- en: 'The tests can then be run directly inside your Git clone (without having to
    install pandas) by typing:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '然后可以直接在你的Git克隆中运行这些测试（无需安装pandas���，方法是输入： '
- en: '[PRE101]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If a handful of tests don’t pass, it may not be an issue with your pandas installation.
    Some tests (e.g. some SQLAlchemy ones) require additional setup, others might
    start failing because a non-pinned library released a new version, and others
    might be flaky if run in parallel. As long as you can import pandas from your
    locally built version, your installation is probably fine and you can start contributing!
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一些测试不通过，这可能不是你的pandas安装的问题。一些测试（例如一些SQLAlchemy测试）需要额外的设置，其他可能会因为非固定库发布了新版本而开始失败，并且如果并行运行可能会有一些不稳定的测试。只要你可以从本地构建的版本中导入pandas，你的安装可能是正常的，你可以开始贡献了！
- en: 'Often it is worth running only a subset of tests first around your changes
    before running the entire suite (tip: you can use the [pandas-coverage app](https://pandas-coverage-12d2130077bc.herokuapp.com/))
    to find out which tests hit the lines of code you’ve modified, and then run only
    those).'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 通常值得在运行整个套件之前先运行一部分测试以检查你的更改（提示：你可以使用[pandas-coverage应用程序](https://pandas-coverage-12d2130077bc.herokuapp.com/)）找出哪些测试命中了你修改的代码行，然后只运行那些测试）。
- en: 'The easiest way to do this is with:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是使用：
- en: '[PRE102]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Or with one of the following constructs:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用以下构造之一：
- en: '[PRE103]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Using [pytest-xdist](https://pypi.org/project/pytest-xdist), which is included
    in our ‘pandas-dev’ environment, one can speed up local testing on multicore machines.
    The `-n` number flag then can be specified when running pytest to parallelize
    a test run across the number of specified cores or auto to utilize all the available
    cores on your machine.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[pytest-xdist](https://pypi.org/project/pytest-xdist)，它包含在我们的‘pandas-dev’环境中，可以加快多核机器上的本地测试速度。然后在运行pytest时可以指定`-n`数字标志，以便在指定的核心数上并行运行测试，或者自动使用机器上所有可用的核心。
- en: '[PRE104]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: If you’d like to speed things along further a more advanced use of this command
    would look like this
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步加快速度，这个命令的更高级用法会像这样
- en: '[PRE105]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'In addition to the multithreaded performance increase this improves test speed
    by skipping some tests using the `-m` mark flag:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 除了多线程性能提升外，这还通过使用`-m`标记标志跳过一些测试来提高测试速度：
- en: 'slow: any test taking long (think seconds rather than milliseconds)'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: slow：任何需要很长时间的测试（考虑秒而不是毫秒）
- en: 'network: tests requiring network connectivity'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: network：需要网络连接的测试
- en: 'db: tests requiring a database (mysql or postgres)'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: db：需要数据库（mysql或postgres）的测试
- en: 'single_cpu: tests that should run on a single cpu only'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'single_cpu: 只能在单个 CPU 上运行的测试'
- en: 'You might want to enable the following option if it’s relevant for you:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 如果适用，您可能想启用以下选项：
- en: 'arm_slow: any test taking long on arm64 architecture'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'arm_slow: 在 arm64 架构上运行时间较长的任何测试'
- en: These markers are defined [in this toml file](https://github.com/pandas-dev/pandas/blob/main/pyproject.toml)
    , under `[tool.pytest.ini_options]` in a list called `markers`, in case you want
    to check if new ones have been created which are of interest to you.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标记在 [此 toml 文件](https://github.com/pandas-dev/pandas/blob/main/pyproject.toml)
    中定义，在 `[tool.pytest.ini_options]` 下的名为 `markers` 的列表中，以便您检查是否已创建您感兴趣的新标记。
- en: 'The `-r` report flag will display a short summary info (see [pytest documentation](https://docs.pytest.org/en/4.6.x/usage.html#detailed-summary-report))
    . Here we are displaying the number of:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '`-r` 报告标志将显示简短的摘要信息（请参阅[pytest 文档](https://docs.pytest.org/en/4.6.x/usage.html#detailed-summary-report)）。这里我们显示以下数量：'
- en: 's: skipped tests'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'S: 跳过测试'
- en: 'x: xfailed tests'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'x: 未通过的测试'
- en: 'X: xpassed tests'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'X: 通过测试'
- en: The summary is optional and can be removed if you don’t need the added information.
    Using the parallelization option can significantly reduce the time it takes to
    locally run tests before submitting a pull request.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要是可选的，如果您不需要额外的信息，可以删除它。使用并行化选项可以显著减少在提交拉取请求之前本地运行测试所需的时间。
- en: If you require assistance with the results, which has happened in the past,
    please set a seed before running the command and opening a bug report, that way
    we can reproduce it. Here’s an example for setting a seed on windows
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要帮助处理结果，过去发生过，请在运行命令并打开错误报告之前设置一个种子，这样我们就可以重现它。以下是在 Windows 上设置种子的示例
- en: '[PRE106]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: On Unix use
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 上使用
- en: '[PRE107]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: For more, see the [pytest](https://docs.pytest.org/en/latest/) documentation.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多，请参阅[pytest](https://docs.pytest.org/en/latest/)文档。
- en: Furthermore one can run
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以运行
- en: '[PRE108]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: with an imported pandas to run tests similarly.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 使用导入的 pandas 运行类似的测试。
- en: '[Running the performance test suite](#id24)'
  id: totrans-704
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[运行性能测试套件](#id24)'
- en: Performance matters and it is worth considering whether your code has introduced
    performance regressions. pandas is in the process of migrating to [asv benchmarks](https://github.com/airspeed-velocity/asv)
    to enable easy monitoring of the performance of critical pandas operations. These
    benchmarks are all found in the `pandas/asv_bench` directory, and the test results
    can be found [here](https://asv-runner.github.io/asv-collection/pandas).
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 性能很重要，值得考虑您的代码是否引入了性能回归。 pandas 正在迁移到[asv 基准测试](https://github.com/airspeed-velocity/asv)，以便轻松监控关键
    pandas 操作的性能。这些基准测试都在 `pandas/asv_bench` 目录下找到，测试结果可以在[此处](https://asv-runner.github.io/asv-collection/pandas)找到。
- en: To use all features of asv, you will need either `conda` or `virtualenv`. For
    more details please check the [asv installation webpage](https://asv.readthedocs.io/en/latest/installing.html).
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 asv 的所有功能，您需要安装 `conda` 或 `virtualenv`。更多详情请查看[asv 安装网页](https://asv.readthedocs.io/en/latest/installing.html)。
- en: 'To install asv:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 asv：
- en: '[PRE109]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'If you need to run a benchmark, change your directory to `asv_bench/` and run:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要运行基准测试，请将目录更改为 `asv_bench/` 并运行：
- en: '[PRE110]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'You can replace `HEAD` with the name of the branch you are working on, and
    report benchmarks that changed by more than 10%. The command uses `conda` by default
    for creating the benchmark environments. If you want to use virtualenv instead,
    write:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 `HEAD` 替换为您正在工作的分支名称，并报告变更超过 10% 的基准测试。该命令默认使用 `conda` 创建基准测试环境。如果您想改用
    virtualenv，请写：
- en: '[PRE111]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The `-E virtualenv` option should be added to all `asv` commands that run benchmarks.
    The default value is defined in `asv.conf.json`.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '`-E virtualenv` 选项应该添加到运行基准测试的所有 `asv` 命令中。默认值在 `asv.conf.json` 中定义。'
- en: 'Running the full benchmark suite can be an all-day process, depending on your
    hardware and its resource utilization. However, usually it is sufficient to paste
    only a subset of the results into the pull request to show that the committed
    changes do not cause unexpected performance regressions. You can run specific
    benchmarks using the `-b` flag, which takes a regular expression. For example,
    this will only run benchmarks from a `pandas/asv_bench/benchmarks/groupby.py`
    file:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整的基准测试套件可能是全天的过程，具体取决于您的硬件及其资源利用情况。但是，通常仅需要将部分结果粘贴到拉取请求中，以显示提交的更改未引起意外的性能回归。您可以使用
    `-b` 标志运行特定的基准测试，该标志采用正则表达式。例如，这将仅运行来自 `pandas/asv_bench/benchmarks/groupby.py`
    文件的基准测试：
- en: '[PRE112]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'If you want to only run a specific group of benchmarks from a file, you can
    do it using `.` as a separator. For example:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想从文件中运行特定组的基准测试，可以使用`.`作为分隔符。例如：
- en: '[PRE113]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: will only run the `GroupByMethods` benchmark defined in `groupby.py`.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 仅会运行在`groupby.py`中定义的`GroupByMethods`基准测试。
- en: 'You can also run the benchmark suite using the version of `pandas` already
    installed in your current Python environment. This can be useful if you do not
    have virtualenv or conda, or are using the `setup.py develop` approach discussed
    above; for the in-place build you need to set `PYTHONPATH`, e.g. `PYTHONPATH="$PWD/.."
    asv [remaining arguments]`. You can run benchmarks using an existing Python environment
    by:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用当前Python环境中已安装的`pandas`版本运行基准测试套件。如果您没有virtualenv或conda，或者正在使用上面讨论的`setup.py
    develop`方法；对于就地构建，您需要设置`PYTHONPATH`，例如`PYTHONPATH="$PWD/.." asv [remaining arguments]`。您可以通过以下方式使用现有Python环境运行基准测试：
- en: '[PRE114]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'or, to use a specific Python interpreter,:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用特定的Python解释器：
- en: '[PRE115]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: This will display stderr from the benchmarks, and use your local `python` that
    comes from your `$PATH`.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示基准测试的stderr，并使用来自您的`$PATH`的本地`python`。
- en: Information on how to write a benchmark and how to use asv can be found in the
    [asv documentation](https://asv.readthedocs.io/en/latest/writing_benchmarks.html).
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何编写基准测试以及如何使用asv的信息可以在[asv文档](https://asv.readthedocs.io/en/latest/writing_benchmarks.html)中找到。
- en: '[Documenting your code](#id25)'
  id: totrans-725
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[记录您的代码](#id25)'
- en: Changes should be reflected in the release notes located in `doc/source/whatsnew/vx.y.z.rst`.
    This file contains an ongoing change log for each release. Add an entry to this
    file to document your fix, enhancement or (unavoidable) breaking change. Make
    sure to include the GitHub issue number when adding your entry (using `:issue:`1234``
    where `1234` is the issue/pull request number). Your entry should be written using
    full sentences and proper grammar.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 更改应反映在位于`doc/source/whatsnew/vx.y.z.rst`的发布说明中。该文件包含每个版本的持续变更日志。在此文件中添加条目以记录您的修复、增强或（不可避免的）破坏性更改。在添加条目时，请确保包含GitHub问题编号（使用`:issue:`1234``，其中`1234`是问题/拉取请求编号）。您的条目应使用完整句子和正确的语法编写。
- en: When mentioning parts of the API, use a Sphinx `:func:`, `:meth:`, or `:class:`
    directive as appropriate. Not all public API functions and methods have a documentation
    page; ideally links would only be added if they resolve. You can usually find
    similar examples by checking the release notes for one of the previous versions.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 在提及API的部分时，根据需要使用Sphinx的`:func:`、`:meth:`或`:class:`指令。并非所有公共API函数和方法都有文档页面；理想情况下，只有在它们解析时才会添加链接。通常可以通过检查以前版本的发布说明来找到类似的示例。
- en: If your code is a bugfix, add your entry to the relevant bugfix section. Avoid
    adding to the `Other` section; only in rare cases should entries go there. Being
    as concise as possible, the description of the bug should include how the user
    may encounter it and an indication of the bug itself, e.g. “produces incorrect
    results” or “incorrectly raises”. It may be necessary to also indicate the new
    behavior.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码是一个错误修复，请将您的条目添加到相关的错误修复部分。避免添加到`Other`部分；只有在极少数情况下才应该添加条目。尽可能简洁地描述错误的描述应包括用户可能遇到错误的方式以及错误本身的指示，例如“产生不正确的结果”或“错误引发”。可能还需要指示新行为。
- en: 'If your code is an enhancement, it is most likely necessary to add usage examples
    to the existing documentation. This can be done following the section regarding
    [documentation](contributing_documentation.html#contributing-documentation). Further,
    to let users know when this feature was added, the `versionadded` directive is
    used. The sphinx syntax for that is:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码是一个增强功能，很可能需要向现有文档添加使用示例。可以在关于[文档](contributing_documentation.html#contributing-documentation)的部分之后完成此操作。此外，为了让用户知道何时添加了此功能，使用`versionadded`指令。sphinx的语法如下：
- en: '[PRE116]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: This will put the text *New in version 2.1.0* wherever you put the sphinx directive.
    This should also be put in the docstring when adding a new function or method
    ([example](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495))
    or a new keyword argument ([example](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568)).
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您放置sphinx指令的地方放置文本*New in version 2.1.0*。当添加新函数或方法（[示例](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/frame.py#L1495)）或新关键字参数（[示例](https://github.com/pandas-dev/pandas/blob/v0.20.2/pandas/core/generic.py#L568)）时，这也应该放在docstring中。
