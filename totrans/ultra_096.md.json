["```py\n`# Unsafe: Sharing a single model instance across threads from threading import Thread  from ultralytics import YOLO  # Instantiate the model outside the thread shared_model = YOLO(\"yolov8n.pt\")   def predict(image_path):   \"\"\"Predicts objects in an image using a preloaded YOLO model, take path string to image as argument.\"\"\"     results = shared_model.predict(image_path)     # Process results   # Starting threads that share the same model instance Thread(target=predict, args=(\"image1.jpg\",)).start() Thread(target=predict, args=(\"image2.jpg\",)).start()` \n```", "```py\n`# Unsafe: Sharing multiple model instances across threads can still lead to issues from threading import Thread  from ultralytics import YOLO  # Instantiate multiple models outside the thread shared_model_1 = YOLO(\"yolov8n_1.pt\") shared_model_2 = YOLO(\"yolov8n_2.pt\")   def predict(model, image_path):   \"\"\"Runs prediction on an image using a specified YOLO model, returning the results.\"\"\"     results = model.predict(image_path)     # Process results   # Starting threads with individual model instances Thread(target=predict, args=(shared_model_1, \"image1.jpg\")).start() Thread(target=predict, args=(shared_model_2, \"image2.jpg\")).start()` \n```", "```py\n`# Safe: Instantiating a single model inside each thread from threading import Thread  from ultralytics import YOLO   def thread_safe_predict(image_path):   \"\"\"Predict on an image using a new YOLO model instance in a thread-safe manner; takes image path as input.\"\"\"     local_model = YOLO(\"yolov8n.pt\")     results = local_model.predict(image_path)     # Process results   # Starting threads that each have their own model instance Thread(target=thread_safe_predict, args=(\"image1.jpg\",)).start() Thread(target=thread_safe_predict, args=(\"image2.jpg\",)).start()` \n```", "```py\n`from threading import Thread  from ultralytics import YOLO   def thread_safe_predict(image_path):   \"\"\"Predict on an image in a thread-safe manner.\"\"\"     local_model = YOLO(\"yolov8n.pt\")     results = local_model.predict(image_path)     # Process results   Thread(target=thread_safe_predict, args=(\"image1.jpg\",)).start() Thread(target=thread_safe_predict, args=(\"image2.jpg\",)).start()` \n```", "```py\n`from threading import Thread  from ultralytics import YOLO   def thread_safe_predict(image_path):   \"\"\"Runs inference in a thread-safe manner with a new YOLO model instance.\"\"\"     model = YOLO(\"yolov8n.pt\")     results = model.predict(image_path)     # Process results   # Initiate multiple threads Thread(target=thread_safe_predict, args=(\"image1.jpg\",)).start() Thread(target=thread_safe_predict, args=(\"image2.jpg\",)).start()` \n```"]