- en: Masked array operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.ma.html](https://numpy.org/doc/1.26/reference/routines.ma.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Constants'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | alias of [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  prefs: []
  type: TYPE_TB
- en: Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From existing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  prefs: []
  type: TYPE_TB
- en: Ones and zeros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | Count the non-masked elements of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | Count the number of masked elements along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | Return the data of a masked array as an ndarray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | Return the indices of unmasked elements that are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | Determine whether input has masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | Return True if m is a valid, standard mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | Test whether input is an instance of MaskedArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | Test whether input is an instance of MaskedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | Test whether input is an instance of MaskedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | Calculates *element in test_elements*, broadcasting over *element* only. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | Test whether each element of an array is also present in a second array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | Finds the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | Returns the underlying data, as a view of the masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | Current mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | Get or set the mask of the array if it has
    no named fields. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating a MaskedArray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: Modifying axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Changing the number of dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: Joining arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Operations on masks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  prefs: []
  type: TYPE_TB
- en: Accessing a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  prefs: []
  type: TYPE_TB
- en: Finding masked data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: Modifying a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Conversion operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: to a masked array
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  prefs: []
  type: TYPE_TB
- en: to a ndarray
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  prefs: []
  type: TYPE_TB
- en: to another object
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: Filling a masked array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Masked arrays arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: Minimum/maximum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  prefs: []
  type: TYPE_TB
- en: Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Polynomial fit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  prefs: []
  type: TYPE_TB
- en: Clipping and rounding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: Set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: Miscellanea
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  prefs: []
  type: TYPE_TB
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`ma.MaskType`](generated/numpy.ma.MaskType.html#numpy.ma.MaskType "numpy.ma.MaskType")
    | alias of [`bool_`](arrays.scalars.html#numpy.bool_ "numpy.bool_") |'
  prefs: []
  type: TYPE_TB
- en: Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From existing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  prefs: []
  type: TYPE_TB
- en: Ones and zeros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  prefs: []
  type: TYPE_TB
- en: From existing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.masked_array`](generated/numpy.ma.masked_array.html#numpy.ma.masked_array
    "numpy.ma.masked_array") | alias of `MaskedArray` |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.array`](generated/numpy.ma.array.html#numpy.ma.array "numpy.ma.array")(data[, dtype, copy, order, mask, ...])
    | An array class with possibly masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.copy`](generated/numpy.ma.copy.html#numpy.ma.copy "numpy.ma.copy")(self, *args, **params) a.copy(order=)
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.frombuffer`](generated/numpy.ma.frombuffer.html#numpy.ma.frombuffer
    "numpy.ma.frombuffer")(buffer[, dtype, count, ...]) | Interpret a buffer as a
    1-dimensional array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fromfunction`](generated/numpy.ma.fromfunction.html#numpy.ma.fromfunction
    "numpy.ma.fromfunction")(function, shape, **dtype) | Construct an array by executing
    a function over each coordinate. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.copy`](generated/numpy.ma.MaskedArray.copy.html#numpy.ma.MaskedArray.copy
    "numpy.ma.MaskedArray.copy")([order]) | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diagflat`](generated/numpy.ma.diagflat.html#numpy.ma.diagflat "numpy.ma.diagflat")
    | diagflat |'
  prefs: []
  type: TYPE_TB
- en: Ones and zeros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.empty`](generated/numpy.ma.empty.html#numpy.ma.empty "numpy.ma.empty")(shape[, dtype, order, like])
    | Return a new array of given shape and type, without initializing entries. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.empty_like`](generated/numpy.ma.empty_like.html#numpy.ma.empty_like
    "numpy.ma.empty_like")(prototype[, dtype, order, ...]) | Return a new array with
    the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all`](generated/numpy.ma.masked_all.html#numpy.ma.masked_all
    "numpy.ma.masked_all")(shape[, dtype]) | Empty masked array with all elements
    masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_all_like`](generated/numpy.ma.masked_all_like.html#numpy.ma.masked_all_like
    "numpy.ma.masked_all_like")(arr) | Empty masked array with the properties of an
    existing array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones`](generated/numpy.ma.ones.html#numpy.ma.ones "numpy.ma.ones")(shape[, dtype, order])
    | Return a new array of given shape and type, filled with ones. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ones_like`](generated/numpy.ma.ones_like.html#numpy.ma.ones_like "numpy.ma.ones_like")
    | Return an array of ones with the same shape and type as a given array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros`](generated/numpy.ma.zeros.html#numpy.ma.zeros "numpy.ma.zeros")(shape[, dtype, order, like])
    | Return a new array of given shape and type, filled with zeros. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.zeros_like`](generated/numpy.ma.zeros_like.html#numpy.ma.zeros_like
    "numpy.ma.zeros_like") | Return an array of zeros with the same shape and type
    as a given array. |'
  prefs: []
  type: TYPE_TB
- en: Inspecting the array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`ma.all`](generated/numpy.ma.all.html#numpy.ma.all "numpy.ma.all")(self[, axis, out, keepdims])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.any`](generated/numpy.ma.any.html#numpy.ma.any "numpy.ma.any")(self[, axis, out, keepdims])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.count`](generated/numpy.ma.count.html#numpy.ma.count "numpy.ma.count")(self[, axis, keepdims])
    | Count the non-masked elements of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.count_masked`](generated/numpy.ma.count_masked.html#numpy.ma.count_masked
    "numpy.ma.count_masked")(arr[, axis]) | Count the number of masked elements along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getdata`](generated/numpy.ma.getdata.html#numpy.ma.getdata "numpy.ma.getdata")(a[, subok])
    | Return the data of a masked array as an ndarray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.nonzero`](generated/numpy.ma.nonzero.html#numpy.ma.nonzero "numpy.ma.nonzero")(self)
    | Return the indices of unmasked elements that are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.is_masked`](generated/numpy.ma.is_masked.html#numpy.ma.is_masked "numpy.ma.is_masked")(x)
    | Determine whether input has masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.is_mask`](generated/numpy.ma.is_mask.html#numpy.ma.is_mask "numpy.ma.is_mask")(m)
    | Return True if m is a valid, standard mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isMaskedArray`](generated/numpy.ma.isMaskedArray.html#numpy.ma.isMaskedArray
    "numpy.ma.isMaskedArray")(x) | Test whether input is an instance of MaskedArray.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isMA`](generated/numpy.ma.isMA.html#numpy.ma.isMA "numpy.ma.isMA")(x)
    | Test whether input is an instance of MaskedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isarray`](generated/numpy.ma.isarray.html#numpy.ma.isarray "numpy.ma.isarray")(x)
    | Test whether input is an instance of MaskedArray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.isin`](generated/numpy.ma.isin.html#numpy.ma.isin "numpy.ma.isin")(element, test_elements[, ...])
    | Calculates *element in test_elements*, broadcasting over *element* only. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.in1d`](generated/numpy.ma.in1d.html#numpy.ma.in1d "numpy.ma.in1d")(ar1, ar2[, assume_unique, invert])
    | Test whether each element of an array is also present in a second array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.unique`](generated/numpy.ma.unique.html#numpy.ma.unique "numpy.ma.unique")(ar1[, return_index, return_inverse])
    | Finds the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.all`](generated/numpy.ma.MaskedArray.all.html#numpy.ma.MaskedArray.all
    "numpy.ma.MaskedArray.all")([axis, out, keepdims]) | Returns True if all elements
    evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.any`](generated/numpy.ma.MaskedArray.any.html#numpy.ma.MaskedArray.any
    "numpy.ma.MaskedArray.any")([axis, out, keepdims]) | Returns True if any of the
    elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.count`](generated/numpy.ma.MaskedArray.count.html#numpy.ma.MaskedArray.count
    "numpy.ma.MaskedArray.count")([axis, keepdims]) | Count the non-masked elements
    of the array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.nonzero`](generated/numpy.ma.MaskedArray.nonzero.html#numpy.ma.MaskedArray.nonzero
    "numpy.ma.MaskedArray.nonzero")() | Return the indices of unmasked elements that
    are not zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.shape`](generated/numpy.ma.shape.html#numpy.ma.shape "numpy.ma.shape")(obj)
    | Return the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.size`](generated/numpy.ma.size.html#numpy.ma.size "numpy.ma.size")(obj[, axis])
    | Return the number of elements along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.data`](maskedarray.baseclass.html#numpy.ma.MaskedArray.data
    "numpy.ma.MaskedArray.data") | Returns the underlying data, as a view of the masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.mask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.mask
    "numpy.ma.MaskedArray.mask") | Current mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.recordmask`](maskedarray.baseclass.html#numpy.ma.MaskedArray.recordmask
    "numpy.ma.MaskedArray.recordmask") | Get or set the mask of the array if it has
    no named fields. |'
  prefs: []
  type: TYPE_TB
- en: Manipulating a MaskedArray
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: Modifying axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Changing the number of dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: Joining arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: Changing the shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ravel`](generated/numpy.ma.ravel.html#numpy.ma.ravel "numpy.ma.ravel")(self[, order])
    | Returns a 1D version of self, as a view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.reshape`](generated/numpy.ma.reshape.html#numpy.ma.reshape "numpy.ma.reshape")(a, new_shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.resize`](generated/numpy.ma.resize.html#numpy.ma.resize "numpy.ma.resize")(x, new_shape)
    | Return a new masked array with the specified size and shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.flatten`](generated/numpy.ma.MaskedArray.flatten.html#numpy.ma.MaskedArray.flatten
    "numpy.ma.MaskedArray.flatten")([order]) | Return a copy of the array collapsed
    into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ravel`](generated/numpy.ma.MaskedArray.ravel.html#numpy.ma.MaskedArray.ravel
    "numpy.ma.MaskedArray.ravel")([order]) | Returns a 1D version of self, as a view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.reshape`](generated/numpy.ma.MaskedArray.reshape.html#numpy.ma.MaskedArray.reshape
    "numpy.ma.MaskedArray.reshape")(*s, **kwargs) | Give a new shape to the array
    without changing its data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.resize`](generated/numpy.ma.MaskedArray.resize.html#numpy.ma.MaskedArray.resize
    "numpy.ma.MaskedArray.resize")(newshape[, refcheck, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: Modifying axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.swapaxes`](generated/numpy.ma.swapaxes.html#numpy.ma.swapaxes "numpy.ma.swapaxes")(self, *args, ...)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.swapaxes`](generated/numpy.ma.MaskedArray.swapaxes.html#numpy.ma.MaskedArray.swapaxes
    "numpy.ma.MaskedArray.swapaxes")(axis1, axis2) | Return a view of the array with
    *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Changing the number of dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.atleast_1d`](generated/numpy.ma.atleast_1d.html#numpy.ma.atleast_1d
    "numpy.ma.atleast_1d") | atleast_1d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_2d`](generated/numpy.ma.atleast_2d.html#numpy.ma.atleast_2d
    "numpy.ma.atleast_2d") | atleast_2d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.atleast_3d`](generated/numpy.ma.atleast_3d.html#numpy.ma.atleast_3d
    "numpy.ma.atleast_3d") | atleast_3d |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.expand_dims`](generated/numpy.ma.expand_dims.html#numpy.ma.expand_dims
    "numpy.ma.expand_dims")(a, axis) | Expand the shape of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.squeeze`](generated/numpy.ma.squeeze.html#numpy.ma.squeeze "numpy.ma.squeeze")
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.squeeze`](generated/numpy.ma.MaskedArray.squeeze.html#numpy.ma.MaskedArray.squeeze
    "numpy.ma.MaskedArray.squeeze")([axis]) | Remove axes of length one from *a*.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hsplit`](generated/numpy.ma.hsplit.html#numpy.ma.hsplit "numpy.ma.hsplit")
    | hsplit |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mr_`](generated/numpy.ma.mr_.html#numpy.ma.mr_ "numpy.ma.mr_") | Translate
    slice objects to concatenation along the first axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.row_stack`](generated/numpy.ma.row_stack.html#numpy.ma.row_stack "numpy.ma.row_stack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: Joining arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.concatenate`](generated/numpy.ma.concatenate.html#numpy.ma.concatenate
    "numpy.ma.concatenate")(arrays[, axis]) | Concatenate a sequence of arrays along
    the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.stack`](generated/numpy.ma.stack.html#numpy.ma.stack "numpy.ma.stack")
    | stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.vstack`](generated/numpy.ma.vstack.html#numpy.ma.vstack "numpy.ma.vstack")
    | vstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.hstack`](generated/numpy.ma.hstack.html#numpy.ma.hstack "numpy.ma.hstack")
    | hstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dstack`](generated/numpy.ma.dstack.html#numpy.ma.dstack "numpy.ma.dstack")
    | dstack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.column_stack`](generated/numpy.ma.column_stack.html#numpy.ma.column_stack
    "numpy.ma.column_stack") | column_stack |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.append`](generated/numpy.ma.append.html#numpy.ma.append "numpy.ma.append")(a, b[, axis])
    | Append values to the end of an array. |'
  prefs: []
  type: TYPE_TB
- en: Operations on masks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  prefs: []
  type: TYPE_TB
- en: Accessing a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  prefs: []
  type: TYPE_TB
- en: Finding masked data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: Modifying a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: Creating a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.make_mask`](generated/numpy.ma.make_mask.html#numpy.ma.make_mask "numpy.ma.make_mask")(m[, copy, shrink, dtype])
    | Create a boolean mask from an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_none`](generated/numpy.ma.make_mask_none.html#numpy.ma.make_mask_none
    "numpy.ma.make_mask_none")(newshape[, dtype]) | Return a boolean mask of the given
    shape, filled with False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.make_mask_descr`](generated/numpy.ma.make_mask_descr.html#numpy.ma.make_mask_descr
    "numpy.ma.make_mask_descr")(ndtype) | Construct a dtype description list from
    a given dtype. |'
  prefs: []
  type: TYPE_TB
- en: Accessing a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.getmask`](generated/numpy.ma.getmask.html#numpy.ma.getmask "numpy.ma.getmask")(a)
    | Return the mask of a masked array, or nomask. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.getmaskarray`](generated/numpy.ma.getmaskarray.html#numpy.ma.getmaskarray
    "numpy.ma.getmaskarray")(arr) | Return the mask of a masked array, or full boolean
    array of False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_array.mask`](generated/numpy.ma.masked_array.mask.html#numpy.ma.masked_array.mask
    "numpy.ma.masked_array.mask") | Current mask. |'
  prefs: []
  type: TYPE_TB
- en: Finding masked data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.ndenumerate`](generated/numpy.ma.ndenumerate.html#numpy.ma.ndenumerate
    "numpy.ma.ndenumerate")(a[, compressed]) | Multidimensional index iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_contiguous`](generated/numpy.ma.flatnotmasked_contiguous.html#numpy.ma.flatnotmasked_contiguous
    "numpy.ma.flatnotmasked_contiguous")(a) | Find contiguous unmasked data in a masked
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.flatnotmasked_edges`](generated/numpy.ma.flatnotmasked_edges.html#numpy.ma.flatnotmasked_edges
    "numpy.ma.flatnotmasked_edges")(a) | Find the indices of the first and last unmasked
    values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_contiguous`](generated/numpy.ma.notmasked_contiguous.html#numpy.ma.notmasked_contiguous
    "numpy.ma.notmasked_contiguous")(a[, axis]) | Find contiguous unmasked data in
    a masked array along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.notmasked_edges`](generated/numpy.ma.notmasked_edges.html#numpy.ma.notmasked_edges
    "numpy.ma.notmasked_edges")(a[, axis]) | Find the indices of the first and last
    unmasked values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_masked`](generated/numpy.ma.clump_masked.html#numpy.ma.clump_masked
    "numpy.ma.clump_masked")(a) | Returns a list of slices corresponding to the masked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clump_unmasked`](generated/numpy.ma.clump_unmasked.html#numpy.ma.clump_unmasked
    "numpy.ma.clump_unmasked")(a) | Return list of slices corresponding to the unmasked
    clumps of a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: Modifying a mask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.mask_cols`](generated/numpy.ma.mask_cols.html#numpy.ma.mask_cols "numpy.ma.mask_cols")(a[, axis])
    | Mask columns of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_or`](generated/numpy.ma.mask_or.html#numpy.ma.mask_or "numpy.ma.mask_or")(m1, m2[, copy, shrink])
    | Combine two masks with the `logical_or` operator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rowcols`](generated/numpy.ma.mask_rowcols.html#numpy.ma.mask_rowcols
    "numpy.ma.mask_rowcols")(a[, axis]) | Mask rows and/or columns of a 2D array that
    contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mask_rows`](generated/numpy.ma.mask_rows.html#numpy.ma.mask_rows "numpy.ma.mask_rows")(a[, axis])
    | Mask rows of a 2D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.harden_mask`](generated/numpy.ma.harden_mask.html#numpy.ma.harden_mask
    "numpy.ma.harden_mask")(self) | Force the mask to hard, preventing unmasking by
    assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.soften_mask`](generated/numpy.ma.soften_mask.html#numpy.ma.soften_mask
    "numpy.ma.soften_mask")(self) | Force the mask to soft (default), allowing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.harden_mask`](generated/numpy.ma.MaskedArray.harden_mask.html#numpy.ma.MaskedArray.harden_mask
    "numpy.ma.MaskedArray.harden_mask")() | Force the mask to hard, preventing unmasking
    by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.soften_mask`](generated/numpy.ma.MaskedArray.soften_mask.html#numpy.ma.MaskedArray.soften_mask
    "numpy.ma.MaskedArray.soften_mask")() | Force the mask to soft (default), allowing
    unmasking by assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.shrink_mask`](generated/numpy.ma.MaskedArray.shrink_mask.html#numpy.ma.MaskedArray.shrink_mask
    "numpy.ma.MaskedArray.shrink_mask")() | Reduce a mask to nomask when possible.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.unshare_mask`](generated/numpy.ma.MaskedArray.unshare_mask.html#numpy.ma.MaskedArray.unshare_mask
    "numpy.ma.MaskedArray.unshare_mask")() | Copy the mask and set the *sharedmask*
    flag to `False`. |'
  prefs: []
  type: TYPE_TB
- en: Conversion operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: to a masked array
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  prefs: []
  type: TYPE_TB
- en: to a ndarray
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  prefs: []
  type: TYPE_TB
- en: to another object
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: Filling a masked array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  prefs: []
  type: TYPE_TB
- en: to a masked array
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.asarray`](generated/numpy.ma.asarray.html#numpy.ma.asarray "numpy.ma.asarray")(a[, dtype, order])
    | Convert the input to a masked array of the given data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.asanyarray`](generated/numpy.ma.asanyarray.html#numpy.ma.asanyarray
    "numpy.ma.asanyarray")(a[, dtype]) | Convert the input to a masked array, conserving
    subclasses. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.fix_invalid`](generated/numpy.ma.fix_invalid.html#numpy.ma.fix_invalid
    "numpy.ma.fix_invalid")(a[, mask, copy, fill_value]) | Return input with invalid
    data masked and replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_equal`](generated/numpy.ma.masked_equal.html#numpy.ma.masked_equal
    "numpy.ma.masked_equal")(x, value[, copy]) | Mask an array where equal to a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater`](generated/numpy.ma.masked_greater.html#numpy.ma.masked_greater
    "numpy.ma.masked_greater")(x, value[, copy]) | Mask an array where greater than
    a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_greater_equal`](generated/numpy.ma.masked_greater_equal.html#numpy.ma.masked_greater_equal
    "numpy.ma.masked_greater_equal")(x, value[, copy]) | Mask an array where greater
    than or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_inside`](generated/numpy.ma.masked_inside.html#numpy.ma.masked_inside
    "numpy.ma.masked_inside")(x, v1, v2[, copy]) | Mask an array inside a given interval.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_invalid`](generated/numpy.ma.masked_invalid.html#numpy.ma.masked_invalid
    "numpy.ma.masked_invalid")(a[, copy]) | Mask an array where invalid values occur
    (NaNs or infs). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less`](generated/numpy.ma.masked_less.html#numpy.ma.masked_less
    "numpy.ma.masked_less")(x, value[, copy]) | Mask an array where less than a given
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_less_equal`](generated/numpy.ma.masked_less_equal.html#numpy.ma.masked_less_equal
    "numpy.ma.masked_less_equal")(x, value[, copy]) | Mask an array where less than
    or equal to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_not_equal`](generated/numpy.ma.masked_not_equal.html#numpy.ma.masked_not_equal
    "numpy.ma.masked_not_equal")(x, value[, copy]) | Mask an array where *not* equal
    to a given value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_object`](generated/numpy.ma.masked_object.html#numpy.ma.masked_object
    "numpy.ma.masked_object")(x, value[, copy, shrink]) | Mask the array *x* where
    the data are exactly equal to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_outside`](generated/numpy.ma.masked_outside.html#numpy.ma.masked_outside
    "numpy.ma.masked_outside")(x, v1, v2[, copy]) | Mask an array outside a given
    interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_values`](generated/numpy.ma.masked_values.html#numpy.ma.masked_values
    "numpy.ma.masked_values")(x, value[, rtol, atol, ...]) | Mask using floating point
    equality. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.masked_where`](generated/numpy.ma.masked_where.html#numpy.ma.masked_where
    "numpy.ma.masked_where")(condition, a[, copy]) | Mask an array where a condition
    is met. |'
  prefs: []
  type: TYPE_TB
- en: to a ndarray
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.compress_cols`](generated/numpy.ma.compress_cols.html#numpy.ma.compress_cols
    "numpy.ma.compress_cols")(a) | Suppress whole columns of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rowcols`](generated/numpy.ma.compress_rowcols.html#numpy.ma.compress_rowcols
    "numpy.ma.compress_rowcols")(x[, axis]) | Suppress the rows and/or columns of
    a 2-D array that contain masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compress_rows`](generated/numpy.ma.compress_rows.html#numpy.ma.compress_rows
    "numpy.ma.compress_rows")(a) | Suppress whole rows of a 2-D array that contain
    masked values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.compressed`](generated/numpy.ma.compressed.html#numpy.ma.compressed
    "numpy.ma.compressed")(x) | Return all the non-masked data as a 1-D array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.filled`](generated/numpy.ma.filled.html#numpy.ma.filled "numpy.ma.filled")(a[, fill_value])
    | Return input as an array with masked data replaced by a fill value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.compressed`](generated/numpy.ma.MaskedArray.compressed.html#numpy.ma.MaskedArray.compressed
    "numpy.ma.MaskedArray.compressed")() | Return all the non-masked data as a 1-D
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.filled`](generated/numpy.ma.MaskedArray.filled.html#numpy.ma.MaskedArray.filled
    "numpy.ma.MaskedArray.filled")([fill_value]) | Return a copy of self, with masked
    values filled with a given value. |'
  prefs: []
  type: TYPE_TB
- en: to another object
  prefs:
  - PREF_H3
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`ma.MaskedArray.tofile`](generated/numpy.ma.MaskedArray.tofile.html#numpy.ma.MaskedArray.tofile
    "numpy.ma.MaskedArray.tofile")(fid[, sep, format]) | Save a masked array to a
    file in binary format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tolist`](generated/numpy.ma.MaskedArray.tolist.html#numpy.ma.MaskedArray.tolist
    "numpy.ma.MaskedArray.tolist")([fill_value]) | Return the data portion of the
    masked array as a hierarchical Python list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.torecords`](generated/numpy.ma.MaskedArray.torecords.html#numpy.ma.MaskedArray.torecords
    "numpy.ma.MaskedArray.torecords")() | Transforms a masked array into a flexible-type
    array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.tobytes`](generated/numpy.ma.MaskedArray.tobytes.html#numpy.ma.MaskedArray.tobytes
    "numpy.ma.MaskedArray.tobytes")([fill_value, order]) | Return the array data as
    a string containing the raw bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: Filling a masked array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.common_fill_value`](generated/numpy.ma.common_fill_value.html#numpy.ma.common_fill_value
    "numpy.ma.common_fill_value")(a, b) | Return the common filling value of two masked
    arrays, if any. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.default_fill_value`](generated/numpy.ma.default_fill_value.html#numpy.ma.default_fill_value
    "numpy.ma.default_fill_value")(obj) | Return the default fill value for the argument
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.maximum_fill_value`](generated/numpy.ma.maximum_fill_value.html#numpy.ma.maximum_fill_value
    "numpy.ma.maximum_fill_value")(obj) | Return the minimum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.minimum_fill_value`](generated/numpy.ma.minimum_fill_value.html#numpy.ma.minimum_fill_value
    "numpy.ma.minimum_fill_value")(obj) | Return the maximum value that can be represented
    by the dtype of an object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.set_fill_value`](generated/numpy.ma.set_fill_value.html#numpy.ma.set_fill_value
    "numpy.ma.set_fill_value")(a, fill_value) | Set the filling value of a, if a is
    a masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.get_fill_value`](generated/numpy.ma.MaskedArray.get_fill_value.html#numpy.ma.MaskedArray.get_fill_value
    "numpy.ma.MaskedArray.get_fill_value")() | The filling value of the masked array
    is a scalar. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.set_fill_value`](generated/numpy.ma.MaskedArray.set_fill_value.html#numpy.ma.MaskedArray.set_fill_value
    "numpy.ma.MaskedArray.set_fill_value")([value]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.fill_value`](maskedarray.baseclass.html#numpy.ma.MaskedArray.fill_value
    "numpy.ma.MaskedArray.fill_value") | The filling value of the masked array is
    a scalar. |'
  prefs: []
  type: TYPE_TB
- en: Masked arrays arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: Minimum/maximum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  prefs: []
  type: TYPE_TB
- en: Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Polynomial fit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  prefs: []
  type: TYPE_TB
- en: Clipping and rounding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: Set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: Miscellanea
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.anom`](generated/numpy.ma.anom.html#numpy.ma.anom "numpy.ma.anom")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.anomalies`](generated/numpy.ma.anomalies.html#numpy.ma.anomalies "numpy.ma.anomalies")(self[, axis, dtype])
    | Compute the anomalies (deviations from the arithmetic mean) along the given
    axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.average`](generated/numpy.ma.average.html#numpy.ma.average "numpy.ma.average")(a[, axis, weights, returned, ...])
    | Return the weighted average of array over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.conjugate`](generated/numpy.ma.conjugate.html#numpy.ma.conjugate "numpy.ma.conjugate")(x, /[, out, where, casting, ...])
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.corrcoef`](generated/numpy.ma.corrcoef.html#numpy.ma.corrcoef "numpy.ma.corrcoef")(x[, y, rowvar, bias, ...])
    | Return Pearson product-moment correlation coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cov`](generated/numpy.ma.cov.html#numpy.ma.cov "numpy.ma.cov")(x[, y, rowvar, bias, allow_masked, ddof])
    | Estimate the covariance matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumsum`](generated/numpy.ma.cumsum.html#numpy.ma.cumsum "numpy.ma.cumsum")(self[, axis, dtype, out])
    | Return the cumulative sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.cumprod`](generated/numpy.ma.cumprod.html#numpy.ma.cumprod "numpy.ma.cumprod")(self[, axis, dtype, out])
    | Return the cumulative product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.mean`](generated/numpy.ma.mean.html#numpy.ma.mean "numpy.ma.mean")(self[, axis, dtype, out, keepdims])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.median`](generated/numpy.ma.median.html#numpy.ma.median "numpy.ma.median")(a[, axis, out, overwrite_input, ...])
    | Compute the median along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.power`](generated/numpy.ma.power.html#numpy.ma.power "numpy.ma.power")(a, b[, third])
    | Returns element-wise base array raised to power from second array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.prod`](generated/numpy.ma.prod.html#numpy.ma.prod "numpy.ma.prod")(self[, axis, dtype, out, keepdims])
    | Return the product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.std`](generated/numpy.ma.std.html#numpy.ma.std "numpy.ma.std")(self[, axis, dtype, out, ddof, keepdims])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sum`](generated/numpy.ma.sum.html#numpy.ma.sum "numpy.ma.sum")(self[, axis, dtype, out, keepdims])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.var`](generated/numpy.ma.var.html#numpy.ma.var "numpy.ma.var")(self[, axis, dtype, out, ddof, keepdims])
    | Compute the variance along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.anom`](generated/numpy.ma.MaskedArray.anom.html#numpy.ma.MaskedArray.anom
    "numpy.ma.MaskedArray.anom")([axis, dtype]) | Compute the anomalies (deviations
    from the arithmetic mean) along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumprod`](generated/numpy.ma.MaskedArray.cumprod.html#numpy.ma.MaskedArray.cumprod
    "numpy.ma.MaskedArray.cumprod")([axis, dtype, out]) | Return the cumulative product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.cumsum`](generated/numpy.ma.MaskedArray.cumsum.html#numpy.ma.MaskedArray.cumsum
    "numpy.ma.MaskedArray.cumsum")([axis, dtype, out]) | Return the cumulative sum
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.mean`](generated/numpy.ma.MaskedArray.mean.html#numpy.ma.MaskedArray.mean
    "numpy.ma.MaskedArray.mean")([axis, dtype, out, keepdims]) | Returns the average
    of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.prod`](generated/numpy.ma.MaskedArray.prod.html#numpy.ma.MaskedArray.prod
    "numpy.ma.MaskedArray.prod")([axis, dtype, out, keepdims]) | Return the product
    of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.std`](generated/numpy.ma.MaskedArray.std.html#numpy.ma.MaskedArray.std
    "numpy.ma.MaskedArray.std")([axis, dtype, out, ddof, ...]) | Returns the standard
    deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sum`](generated/numpy.ma.MaskedArray.sum.html#numpy.ma.MaskedArray.sum
    "numpy.ma.MaskedArray.sum")([axis, dtype, out, keepdims]) | Return the sum of
    the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.var`](generated/numpy.ma.MaskedArray.var.html#numpy.ma.MaskedArray.var
    "numpy.ma.MaskedArray.var")([axis, dtype, out, ddof, ...]) | Compute the variance
    along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: Minimum/maximum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argmax`](generated/numpy.ma.argmax.html#numpy.ma.argmax "numpy.ma.argmax")(self[, axis, fill_value, out])
    | Returns array of indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.argmin`](generated/numpy.ma.argmin.html#numpy.ma.argmin "numpy.ma.argmin")(self[, axis, fill_value, out])
    | Return array of indices to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.max`](generated/numpy.ma.max.html#numpy.ma.max "numpy.ma.max")(obj[, axis, out, fill_value, keepdims])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.min`](generated/numpy.ma.min.html#numpy.ma.min "numpy.ma.min")(obj[, axis, out, fill_value, keepdims])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ptp`](generated/numpy.ma.ptp.html#numpy.ma.ptp "numpy.ma.ptp")(obj[, axis, out, fill_value, keepdims])
    | Return (maximum - minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.diff`](generated/numpy.ma.diff.html#numpy.ma.diff "numpy.ma.diff")(a, /[, n, axis, prepend, append])
    | Calculate the n-th discrete difference along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmax`](generated/numpy.ma.MaskedArray.argmax.html#numpy.ma.MaskedArray.argmax
    "numpy.ma.MaskedArray.argmax")([axis, fill_value, ...]) | Returns array of indices
    of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argmin`](generated/numpy.ma.MaskedArray.argmin.html#numpy.ma.MaskedArray.argmin
    "numpy.ma.MaskedArray.argmin")([axis, fill_value, ...]) | Return array of indices
    to the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.max`](generated/numpy.ma.MaskedArray.max.html#numpy.ma.MaskedArray.max
    "numpy.ma.MaskedArray.max")([axis, out, fill_value, ...]) | Return the maximum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.min`](generated/numpy.ma.MaskedArray.min.html#numpy.ma.MaskedArray.min
    "numpy.ma.MaskedArray.min")([axis, out, fill_value, ...]) | Return the minimum
    along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.ptp`](generated/numpy.ma.MaskedArray.ptp.html#numpy.ma.MaskedArray.ptp
    "numpy.ma.MaskedArray.ptp")([axis, out, fill_value, ...]) | Return (maximum -
    minimum) along the given dimension (i.e. |'
  prefs: []
  type: TYPE_TB
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.argsort`](generated/numpy.ma.argsort.html#numpy.ma.argsort "numpy.ma.argsort")(a[, axis, kind, order, endwith, ...])
    | Return an ndarray of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.sort`](generated/numpy.ma.sort.html#numpy.ma.sort "numpy.ma.sort")(a[, axis, kind, order, endwith, ...])
    | Return a sorted copy of the masked array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.argsort`](generated/numpy.ma.MaskedArray.argsort.html#numpy.ma.MaskedArray.argsort
    "numpy.ma.MaskedArray.argsort")([axis, kind, order, ...]) | Return an ndarray
    of indices that sort the array along the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.sort`](generated/numpy.ma.MaskedArray.sort.html#numpy.ma.MaskedArray.sort
    "numpy.ma.MaskedArray.sort")([axis, kind, order, ...]) | Sort the array, in-place
    |'
  prefs: []
  type: TYPE_TB
- en: Algebra
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.diag`](generated/numpy.ma.diag.html#numpy.ma.diag "numpy.ma.diag")(v[, k])
    | Extract a diagonal or construct a diagonal array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.dot`](generated/numpy.ma.dot.html#numpy.ma.dot "numpy.ma.dot")(a, b[, strict, out])
    | Return the dot product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.identity`](generated/numpy.ma.identity.html#numpy.ma.identity "numpy.ma.identity")(n[, dtype])
    | Return the identity array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.inner`](generated/numpy.ma.inner.html#numpy.ma.inner "numpy.ma.inner")(a, b, /)
    | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.innerproduct`](generated/numpy.ma.innerproduct.html#numpy.ma.innerproduct
    "numpy.ma.innerproduct")(a, b, /) | Inner product of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outer`](generated/numpy.ma.outer.html#numpy.ma.outer "numpy.ma.outer")(a, b)
    | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.outerproduct`](generated/numpy.ma.outerproduct.html#numpy.ma.outerproduct
    "numpy.ma.outerproduct")(a, b) | Compute the outer product of two vectors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.trace`](generated/numpy.ma.trace.html#numpy.ma.trace "numpy.ma.trace")(self[, offset, axis1, axis2, ...])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.transpose`](generated/numpy.ma.transpose.html#numpy.ma.transpose "numpy.ma.transpose")(a[, axes])
    | Permute the dimensions of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.trace`](generated/numpy.ma.MaskedArray.trace.html#numpy.ma.MaskedArray.trace
    "numpy.ma.MaskedArray.trace")([offset, axis1, axis2, ...]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.transpose`](generated/numpy.ma.MaskedArray.transpose.html#numpy.ma.MaskedArray.transpose
    "numpy.ma.MaskedArray.transpose")(*axes) | Returns a view of the array with axes
    transposed. |'
  prefs: []
  type: TYPE_TB
- en: Polynomial fit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.vander`](generated/numpy.ma.vander.html#numpy.ma.vander "numpy.ma.vander")(x[, n])
    | Generate a Vandermonde matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.polyfit`](generated/numpy.ma.polyfit.html#numpy.ma.polyfit "numpy.ma.polyfit")(x, y, deg[, rcond, full, w, cov])
    | Least squares polynomial fit. |'
  prefs: []
  type: TYPE_TB
- en: Clipping and rounding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.around`](generated/numpy.ma.around.html#numpy.ma.around "numpy.ma.around")
    | Round an array to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.clip`](generated/numpy.ma.clip.html#numpy.ma.clip "numpy.ma.clip") |
    Clip (limit) the values in an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.round`](generated/numpy.ma.round.html#numpy.ma.round "numpy.ma.round")(a[, decimals, out])
    | Return a copy of a, rounded to ''decimals'' places. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.clip`](generated/numpy.ma.MaskedArray.clip.html#numpy.ma.MaskedArray.clip
    "numpy.ma.MaskedArray.clip")([min, max, out]) | Return an array whose values are
    limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.MaskedArray.round`](generated/numpy.ma.MaskedArray.round.html#numpy.ma.MaskedArray.round
    "numpy.ma.MaskedArray.round")([decimals, out]) | Return each element rounded to
    the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: Set operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.intersect1d`](generated/numpy.ma.intersect1d.html#numpy.ma.intersect1d
    "numpy.ma.intersect1d")(ar1, ar2[, assume_unique]) | Returns the unique elements
    common to both arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setdiff1d`](generated/numpy.ma.setdiff1d.html#numpy.ma.setdiff1d "numpy.ma.setdiff1d")(ar1, ar2[, assume_unique])
    | Set difference of 1D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.setxor1d`](generated/numpy.ma.setxor1d.html#numpy.ma.setxor1d "numpy.ma.setxor1d")(ar1, ar2[, assume_unique])
    | Set exclusive-or of 1-D arrays with unique elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.union1d`](generated/numpy.ma.union1d.html#numpy.ma.union1d "numpy.ma.union1d")(ar1, ar2)
    | Union of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: Miscellanea
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ma.allequal`](generated/numpy.ma.allequal.html#numpy.ma.allequal "numpy.ma.allequal")(a, b[, fill_value])
    | Return True if all entries of a and b are equal, using fill_value as a truth
    value where either or both are masked. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.allclose`](generated/numpy.ma.allclose.html#numpy.ma.allclose "numpy.ma.allclose")(a, b[, masked_equal, rtol, atol])
    | Returns True if two arrays are element-wise equal within a tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_along_axis`](generated/numpy.ma.apply_along_axis.html#numpy.ma.apply_along_axis
    "numpy.ma.apply_along_axis")(func1d, axis, arr, ...) | Apply a function to 1-D
    slices along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.apply_over_axes`](generated/numpy.ma.apply_over_axes.html#numpy.ma.apply_over_axes
    "numpy.ma.apply_over_axes")(func, a, axes) | Apply a function repeatedly over
    multiple axes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.arange`](generated/numpy.ma.arange.html#numpy.ma.arange "numpy.ma.arange")([start,] stop[, step,][, dtype, like])
    | Return evenly spaced values within a given interval. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.choose`](generated/numpy.ma.choose.html#numpy.ma.choose "numpy.ma.choose")(indices, choices[, out, mode])
    | Use an index array to construct a new array from a list of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.ediff1d`](generated/numpy.ma.ediff1d.html#numpy.ma.ediff1d "numpy.ma.ediff1d")(arr[, to_end, to_begin])
    | Compute the differences between consecutive elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.indices`](generated/numpy.ma.indices.html#numpy.ma.indices "numpy.ma.indices")(dimensions[, dtype, sparse])
    | Return an array representing the indices of a grid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ma.where`](generated/numpy.ma.where.html#numpy.ma.where "numpy.ma.where")(condition[, x, y])
    | Return a masked array with elements from *x* or *y*, depending on condition.
    |'
  prefs: []
  type: TYPE_TB
