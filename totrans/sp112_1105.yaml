- en: Statistical functions (scipy.stats)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计函数（scipy.stats）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/stats.html)
- en: This module contains a large number of probability distributions, summary and
    frequency statistics, correlation functions and statistical tests, masked statistics,
    kernel density estimation, quasi-Monte Carlo functionality, and more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块包含大量的概率分布、汇总和频率统计、相关函数和统计检验、掩码统计、核密度估计、拟蒙特卡洛功能等。
- en: 'Statistics is a very large area, and there are topics that are out of scope
    for SciPy and are covered by other packages. Some of the most important ones are:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 统计学是一个非常广泛的领域，SciPy 范围之外的主题由其他包涵盖。其中一些最重要的是：
- en: '[statsmodels](https://www.statsmodels.org/stable/index.html): regression, linear
    models, time series analysis, extensions to topics also covered by `scipy.stats`.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[statsmodels](https://www.statsmodels.org/stable/index.html): 回归、线性模型、时间序列分析，扩展到
    `scipy.stats` 也覆盖的主题。'
- en: '[Pandas](https://pandas.pydata.org/): tabular data, time series functionality,
    interfaces to other statistical languages.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pandas](https://pandas.pydata.org/): 表格数据、时间序列功能，与其他统计语言的接口。'
- en: '[PyMC](https://docs.pymc.io/): Bayesian statistical modeling, probabilistic
    machine learning.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyMC](https://docs.pymc.io/): 贝叶斯统计建模，概率机器学习。'
- en: '[scikit-learn](https://scikit-learn.org/): classification, regression, model
    selection.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scikit-learn](https://scikit-learn.org/): 分类、回归、模型选择。'
- en: '[Seaborn](https://seaborn.pydata.org/): statistical data visualization.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Seaborn](https://seaborn.pydata.org/): 统计数据可视化。'
- en: '[rpy2](https://rpy2.github.io/): Python to R bridge.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rpy2](https://rpy2.github.io/): Python 到 R 的桥梁。'
- en: Probability distributions
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概率分布
- en: 'Each univariate distribution is an instance of a subclass of [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") ([`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete") for discrete distributions):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单变量分布都是 [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") 的子类实例（对于离散分布为 [`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete")）：
- en: '| [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous")([momtype, a, b, xtol, ...]) | A generic continuous
    random variable class meant for subclassing. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`rv_continuous`](generated/scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous")([momtype, a, b, xtol, ...]) | 用于子类化的通用连续随机变量类。 |'
- en: '| [`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete")([a, b, name, badvalue, ...]) | A generic discrete random
    variable class meant for subclassing. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`rv_discrete`](generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete
    "scipy.stats.rv_discrete")([a, b, name, badvalue, ...]) | 一个用于子类化的通用离散随机变量类。 |'
- en: '| [`rv_histogram`](generated/scipy.stats.rv_histogram.html#scipy.stats.rv_histogram
    "scipy.stats.rv_histogram")(histogram, *args[, density]) | Generates a distribution
    given by a histogram. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`rv_histogram`](generated/scipy.stats.rv_histogram.html#scipy.stats.rv_histogram
    "scipy.stats.rv_histogram")(histogram, *args[, density]) | 根据直方图生成分布。 |'
- en: Continuous distributions
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连续分布
- en: '| [`alpha`](generated/scipy.stats.alpha.html#scipy.stats.alpha "scipy.stats.alpha")
    | An alpha continuous random variable. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`alpha`](generated/scipy.stats.alpha.html#scipy.stats.alpha "scipy.stats.alpha")
    | Alpha 连续随机变量。 |'
- en: '| [`anglit`](generated/scipy.stats.anglit.html#scipy.stats.anglit "scipy.stats.anglit")
    | An anglit continuous random variable. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`anglit`](generated/scipy.stats.anglit.html#scipy.stats.anglit "scipy.stats.anglit")
    | Anglit 连续随机变量。 |'
- en: '| [`arcsine`](generated/scipy.stats.arcsine.html#scipy.stats.arcsine "scipy.stats.arcsine")
    | An arcsine continuous random variable. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`arcsine`](generated/scipy.stats.arcsine.html#scipy.stats.arcsine "scipy.stats.arcsine")
    | Arcsine 连续随机变量。 |'
- en: '| [`argus`](generated/scipy.stats.argus.html#scipy.stats.argus "scipy.stats.argus")
    | Argus distribution |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`argus`](generated/scipy.stats.argus.html#scipy.stats.argus "scipy.stats.argus")
    | Argus 分布。 |'
- en: '| [`beta`](generated/scipy.stats.beta.html#scipy.stats.beta "scipy.stats.beta")
    | A beta continuous random variable. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`beta`](generated/scipy.stats.beta.html#scipy.stats.beta "scipy.stats.beta")
    | Beta 连续随机变量。 |'
- en: '| [`betaprime`](generated/scipy.stats.betaprime.html#scipy.stats.betaprime
    "scipy.stats.betaprime") | A beta prime continuous random variable. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`betaprime`](generated/scipy.stats.betaprime.html#scipy.stats.betaprime
    "scipy.stats.betaprime") | Beta prime 连续随机变量。 |'
- en: '| [`bradford`](generated/scipy.stats.bradford.html#scipy.stats.bradford "scipy.stats.bradford")
    | A Bradford continuous random variable. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '[`bradford`](generated/scipy.stats.bradford.html#scipy.stats.bradford "scipy.stats.bradford")
    | 一种Bradford连续随机变量。  '
- en: '| [`burr`](generated/scipy.stats.burr.html#scipy.stats.burr "scipy.stats.burr")
    | A Burr (Type III) continuous random variable. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '[`burr`](generated/scipy.stats.burr.html#scipy.stats.burr "scipy.stats.burr")
    | 一种Burr（类型III）连续随机变量。  '
- en: '| [`burr12`](generated/scipy.stats.burr12.html#scipy.stats.burr12 "scipy.stats.burr12")
    | A Burr (Type XII) continuous random variable. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '[`burr12`](generated/scipy.stats.burr12.html#scipy.stats.burr12 "scipy.stats.burr12")
    | 一个Burr（类型XII）连续随机变量。  '
- en: '| [`cauchy`](generated/scipy.stats.cauchy.html#scipy.stats.cauchy "scipy.stats.cauchy")
    | A Cauchy continuous random variable. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '[`cauchy`](generated/scipy.stats.cauchy.html#scipy.stats.cauchy "scipy.stats.cauchy")
    | 一个柯西连续随机变量。  '
- en: '| [`chi`](generated/scipy.stats.chi.html#scipy.stats.chi "scipy.stats.chi")
    | A chi continuous random variable. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '[`chi`](generated/scipy.stats.chi.html#scipy.stats.chi "scipy.stats.chi") |
    一个卡连续随机变量。  '
- en: '| [`chi2`](generated/scipy.stats.chi2.html#scipy.stats.chi2 "scipy.stats.chi2")
    | A chi-squared continuous random variable. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '[`chi2`](generated/scipy.stats.chi2.html#scipy.stats.chi2 "scipy.stats.chi2")
    | 一个卡方连续随机变量。  '
- en: '| [`cosine`](generated/scipy.stats.cosine.html#scipy.stats.cosine "scipy.stats.cosine")
    | A cosine continuous random variable. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '[`cosine`](generated/scipy.stats.cosine.html#scipy.stats.cosine "scipy.stats.cosine")
    | 余弦连续随机变量。  '
- en: '| [`crystalball`](generated/scipy.stats.crystalball.html#scipy.stats.crystalball
    "scipy.stats.crystalball") | Crystalball distribution |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '[`crystalball`](generated/scipy.stats.crystalball.html#scipy.stats.crystalball
    "scipy.stats.crystalball") | Crystalball 分布  '
- en: '| [`dgamma`](generated/scipy.stats.dgamma.html#scipy.stats.dgamma "scipy.stats.dgamma")
    | A double gamma continuous random variable. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '[`dgamma`](generated/scipy.stats.dgamma.html#scipy.stats.dgamma "scipy.stats.dgamma")
    | 一个双伽玛连续随机变量。  '
- en: '| [`dweibull`](generated/scipy.stats.dweibull.html#scipy.stats.dweibull "scipy.stats.dweibull")
    | A double Weibull continuous random variable. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '[`dweibull`](generated/scipy.stats.dweibull.html#scipy.stats.dweibull "scipy.stats.dweibull")
    | 一个双韦伯连续随机变量。  '
- en: '| [`erlang`](generated/scipy.stats.erlang.html#scipy.stats.erlang "scipy.stats.erlang")
    | An Erlang continuous random variable. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '[`erlang`](generated/scipy.stats.erlang.html#scipy.stats.erlang "scipy.stats.erlang")
    | 一个Erlang连续随机变量。  '
- en: '| [`expon`](generated/scipy.stats.expon.html#scipy.stats.expon "scipy.stats.expon")
    | An exponential continuous random variable. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '[`expon`](generated/scipy.stats.expon.html#scipy.stats.expon "scipy.stats.expon")
    | 一个指数连续随机变量。  '
- en: '| [`exponnorm`](generated/scipy.stats.exponnorm.html#scipy.stats.exponnorm
    "scipy.stats.exponnorm") | An exponentially modified Normal continuous random
    variable. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '[`exponnorm`](generated/scipy.stats.exponnorm.html#scipy.stats.exponnorm "scipy.stats.exponnorm")
    | 一个指数修改正态连续随机变量。'
- en: '| [`exponweib`](generated/scipy.stats.exponweib.html#scipy.stats.exponweib
    "scipy.stats.exponweib") | An exponentiated Weibull continuous random variable.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '[`exponweib`](generated/scipy.stats.exponweib.html#scipy.stats.exponweib "scipy.stats.exponweib")
    | 一个指数化韦伯连续随机变量。  '
- en: '| [`exponpow`](generated/scipy.stats.exponpow.html#scipy.stats.exponpow "scipy.stats.exponpow")
    | An exponential power continuous random variable. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '[`exponpow`](generated/scipy.stats.exponpow.html#scipy.stats.exponpow "scipy.stats.exponpow")
    | 一种指数幂连续随机变量。  '
- en: '| [`f`](generated/scipy.stats.f.html#scipy.stats.f "scipy.stats.f") | An F
    continuous random variable. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '[`f`](generated/scipy.stats.f.html#scipy.stats.f "scipy.stats.f") | 一个F连续随机变量。  '
- en: '| [`fatiguelife`](generated/scipy.stats.fatiguelife.html#scipy.stats.fatiguelife
    "scipy.stats.fatiguelife") | A fatigue-life (Birnbaum-Saunders) continuous random
    variable. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '[`fatiguelife`](generated/scipy.stats.fatiguelife.html#scipy.stats.fatiguelife
    "scipy.stats.fatiguelife") | 一个疲劳寿命（Birnbaum-Saunders）连续随机变量。  '
- en: '| [`fisk`](generated/scipy.stats.fisk.html#scipy.stats.fisk "scipy.stats.fisk")
    | A Fisk continuous random variable. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '[`fisk`](generated/scipy.stats.fisk.html#scipy.stats.fisk "scipy.stats.fisk")
    | 一个Fisk连续随机变量。  '
- en: '| [`foldcauchy`](generated/scipy.stats.foldcauchy.html#scipy.stats.foldcauchy
    "scipy.stats.foldcauchy") | A folded Cauchy continuous random variable. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '[`foldcauchy`](generated/scipy.stats.foldcauchy.html#scipy.stats.foldcauchy
    "scipy.stats.foldcauchy") | 一个折叠柯西连续随机变量。  '
- en: '| [`foldnorm`](generated/scipy.stats.foldnorm.html#scipy.stats.foldnorm "scipy.stats.foldnorm")
    | A folded normal continuous random variable. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '[`foldnorm`](generated/scipy.stats.foldnorm.html#scipy.stats.foldnorm "scipy.stats.foldnorm")
    | 一个折叠正态连续随机变量。  '
- en: '| [`genlogistic`](generated/scipy.stats.genlogistic.html#scipy.stats.genlogistic
    "scipy.stats.genlogistic") | A generalized logistic continuous random variable.
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '[`genlogistic`](generated/scipy.stats.genlogistic.html#scipy.stats.genlogistic
    "scipy.stats.genlogistic") | 一个广义逻辑连续随机变量。  '
- en: '| [`gennorm`](generated/scipy.stats.gennorm.html#scipy.stats.gennorm "scipy.stats.gennorm")
    | A generalized normal continuous random variable. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`gennorm`](generated/scipy.stats.gennorm.html#scipy.stats.gennorm "scipy.stats.gennorm")
    | 一个广义正态连续随机变量。 |'
- en: '| [`genpareto`](generated/scipy.stats.genpareto.html#scipy.stats.genpareto
    "scipy.stats.genpareto") | A generalized Pareto continuous random variable. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`genpareto`](generated/scipy.stats.genpareto.html#scipy.stats.genpareto
    "scipy.stats.genpareto") | 一个广义 Pareto 连续随机变量。 |'
- en: '| [`genexpon`](generated/scipy.stats.genexpon.html#scipy.stats.genexpon "scipy.stats.genexpon")
    | A generalized exponential continuous random variable. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`genexpon`](generated/scipy.stats.genexpon.html#scipy.stats.genexpon "scipy.stats.genexpon")
    | 一个广义指数连续随机变量。 |'
- en: '| [`genextreme`](generated/scipy.stats.genextreme.html#scipy.stats.genextreme
    "scipy.stats.genextreme") | A generalized extreme value continuous random variable.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`genextreme`](generated/scipy.stats.genextreme.html#scipy.stats.genextreme
    "scipy.stats.genextreme") | 一个广义极值连续随机变量。 |'
- en: '| [`gausshyper`](generated/scipy.stats.gausshyper.html#scipy.stats.gausshyper
    "scipy.stats.gausshyper") | A Gauss hypergeometric continuous random variable.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`gausshyper`](generated/scipy.stats.gausshyper.html#scipy.stats.gausshyper
    "scipy.stats.gausshyper") | 一个 Gauss 超几何连续随机变量。 |'
- en: '| [`gamma`](generated/scipy.stats.gamma.html#scipy.stats.gamma "scipy.stats.gamma")
    | A gamma continuous random variable. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`gamma`](generated/scipy.stats.gamma.html#scipy.stats.gamma "scipy.stats.gamma")
    | 一个 Gamma 连续随机变量。 |'
- en: '| [`gengamma`](generated/scipy.stats.gengamma.html#scipy.stats.gengamma "scipy.stats.gengamma")
    | A generalized gamma continuous random variable. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`gengamma`](generated/scipy.stats.gengamma.html#scipy.stats.gengamma "scipy.stats.gengamma")
    | 一个广义 Gamma 连续随机变量。 |'
- en: '| [`genhalflogistic`](generated/scipy.stats.genhalflogistic.html#scipy.stats.genhalflogistic
    "scipy.stats.genhalflogistic") | A generalized half-logistic continuous random
    variable. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`genhalflogistic`](generated/scipy.stats.genhalflogistic.html#scipy.stats.genhalflogistic
    "scipy.stats.genhalflogistic") | 一个广义半 Logistic 连续随机变量。 |'
- en: '| [`genhyperbolic`](generated/scipy.stats.genhyperbolic.html#scipy.stats.genhyperbolic
    "scipy.stats.genhyperbolic") | A generalized hyperbolic continuous random variable.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`genhyperbolic`](generated/scipy.stats.genhyperbolic.html#scipy.stats.genhyperbolic
    "scipy.stats.genhyperbolic") | 一个广义双曲连续随机变量。 |'
- en: '| [`geninvgauss`](generated/scipy.stats.geninvgauss.html#scipy.stats.geninvgauss
    "scipy.stats.geninvgauss") | A Generalized Inverse Gaussian continuous random
    variable. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`geninvgauss`](generated/scipy.stats.geninvgauss.html#scipy.stats.geninvgauss
    "scipy.stats.geninvgauss") | 一个广义逆高斯连续随机变量。 |'
- en: '| [`gibrat`](generated/scipy.stats.gibrat.html#scipy.stats.gibrat "scipy.stats.gibrat")
    | A Gibrat continuous random variable. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`gibrat`](generated/scipy.stats.gibrat.html#scipy.stats.gibrat "scipy.stats.gibrat")
    | 一个 Gibrat 连续随机变量。 |'
- en: '| [`gompertz`](generated/scipy.stats.gompertz.html#scipy.stats.gompertz "scipy.stats.gompertz")
    | A Gompertz (or truncated Gumbel) continuous random variable. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`gompertz`](generated/scipy.stats.gompertz.html#scipy.stats.gompertz "scipy.stats.gompertz")
    | 一个 Gompertz（或截尾 Gumbel）连续随机变量。 |'
- en: '| [`gumbel_r`](generated/scipy.stats.gumbel_r.html#scipy.stats.gumbel_r "scipy.stats.gumbel_r")
    | A right-skewed Gumbel continuous random variable. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`gumbel_r`](generated/scipy.stats.gumbel_r.html#scipy.stats.gumbel_r "scipy.stats.gumbel_r")
    | 一个右偏 Gumbel 连续随机变量。 |'
- en: '| [`gumbel_l`](generated/scipy.stats.gumbel_l.html#scipy.stats.gumbel_l "scipy.stats.gumbel_l")
    | A left-skewed Gumbel continuous random variable. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`gumbel_l`](generated/scipy.stats.gumbel_l.html#scipy.stats.gumbel_l "scipy.stats.gumbel_l")
    | 一个左偏 Gumbel 连续随机变量。 |'
- en: '| [`halfcauchy`](generated/scipy.stats.halfcauchy.html#scipy.stats.halfcauchy
    "scipy.stats.halfcauchy") | A Half-Cauchy continuous random variable. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`halfcauchy`](generated/scipy.stats.halfcauchy.html#scipy.stats.halfcauchy
    "scipy.stats.halfcauchy") | 一个半 Cauchy 连续随机变量。 |'
- en: '| [`halflogistic`](generated/scipy.stats.halflogistic.html#scipy.stats.halflogistic
    "scipy.stats.halflogistic") | A half-logistic continuous random variable. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`halflogistic`](generated/scipy.stats.halflogistic.html#scipy.stats.halflogistic
    "scipy.stats.halflogistic") | 一个半 Logistic 连续随机变量。 |'
- en: '| [`halfnorm`](generated/scipy.stats.halfnorm.html#scipy.stats.halfnorm "scipy.stats.halfnorm")
    | A half-normal continuous random variable. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`halfnorm`](generated/scipy.stats.halfnorm.html#scipy.stats.halfnorm "scipy.stats.halfnorm")
    | 一个半正态连续随机变量。 |'
- en: '| [`halfgennorm`](generated/scipy.stats.halfgennorm.html#scipy.stats.halfgennorm
    "scipy.stats.halfgennorm") | The upper half of a generalized normal continuous
    random variable. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`halfgennorm`](generated/scipy.stats.halfgennorm.html#scipy.stats.halfgennorm
    "scipy.stats.halfgennorm") | 一个广义正态连续随机变量的上半部分。 |'
- en: '| [`hypsecant`](generated/scipy.stats.hypsecant.html#scipy.stats.hypsecant
    "scipy.stats.hypsecant") | A hyperbolic secant continuous random variable. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`hypsecant`](generated/scipy.stats.hypsecant.html#scipy.stats.hypsecant
    "scipy.stats.hypsecant") | 一个双曲正切连续随机变量。 |'
- en: '| [`invgamma`](generated/scipy.stats.invgamma.html#scipy.stats.invgamma "scipy.stats.invgamma")
    | An inverted gamma continuous random variable. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`invgamma`](generated/scipy.stats.invgamma.html#scipy.stats.invgamma "scipy.stats.invgamma")
    | 反 Gamma 连续随机变量。 |'
- en: '| [`invgauss`](generated/scipy.stats.invgauss.html#scipy.stats.invgauss "scipy.stats.invgauss")
    | An inverse Gaussian continuous random variable. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`invgauss`](generated/scipy.stats.invgauss.html#scipy.stats.invgauss "scipy.stats.invgauss")
    | 逆高斯连续随机变量。 |'
- en: '| [`invweibull`](generated/scipy.stats.invweibull.html#scipy.stats.invweibull
    "scipy.stats.invweibull") | An inverted Weibull continuous random variable. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`invweibull`](generated/scipy.stats.invweibull.html#scipy.stats.invweibull
    "scipy.stats.invweibull") | 反 Weibull 连续随机变量。 |'
- en: '| [`jf_skew_t`](generated/scipy.stats.jf_skew_t.html#scipy.stats.jf_skew_t
    "scipy.stats.jf_skew_t") | Jones and Faddy skew-t distribution. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`jf_skew_t`](generated/scipy.stats.jf_skew_t.html#scipy.stats.jf_skew_t
    "scipy.stats.jf_skew_t") | Jones 和 Faddy 偏态 t 分布。 |'
- en: '| [`johnsonsb`](generated/scipy.stats.johnsonsb.html#scipy.stats.johnsonsb
    "scipy.stats.johnsonsb") | A Johnson SB continuous random variable. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`johnsonsb`](generated/scipy.stats.johnsonsb.html#scipy.stats.johnsonsb
    "scipy.stats.johnsonsb") | Johnson SB 连续随机变量。 |'
- en: '| [`johnsonsu`](generated/scipy.stats.johnsonsu.html#scipy.stats.johnsonsu
    "scipy.stats.johnsonsu") | A Johnson SU continuous random variable. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`johnsonsu`](generated/scipy.stats.johnsonsu.html#scipy.stats.johnsonsu
    "scipy.stats.johnsonsu") | Johnson SU 连续随机变量。 |'
- en: '| [`kappa4`](generated/scipy.stats.kappa4.html#scipy.stats.kappa4 "scipy.stats.kappa4")
    | Kappa 4 parameter distribution. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`kappa4`](generated/scipy.stats.kappa4.html#scipy.stats.kappa4 "scipy.stats.kappa4")
    | Kappa 4 参数分布。 |'
- en: '| [`kappa3`](generated/scipy.stats.kappa3.html#scipy.stats.kappa3 "scipy.stats.kappa3")
    | Kappa 3 parameter distribution. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`kappa3`](generated/scipy.stats.kappa3.html#scipy.stats.kappa3 "scipy.stats.kappa3")
    | Kappa 3 参数分布。 |'
- en: '| [`ksone`](generated/scipy.stats.ksone.html#scipy.stats.ksone "scipy.stats.ksone")
    | Kolmogorov-Smirnov one-sided test statistic distribution. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`ksone`](generated/scipy.stats.ksone.html#scipy.stats.ksone "scipy.stats.ksone")
    | Kolmogorov-Smirnov 单侧检验统计量分布。 |'
- en: '| [`kstwo`](generated/scipy.stats.kstwo.html#scipy.stats.kstwo "scipy.stats.kstwo")
    | Kolmogorov-Smirnov two-sided test statistic distribution. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`kstwo`](generated/scipy.stats.kstwo.html#scipy.stats.kstwo "scipy.stats.kstwo")
    | Kolmogorov-Smirnov 双侧检验统计量分布。 |'
- en: '| [`kstwobign`](generated/scipy.stats.kstwobign.html#scipy.stats.kstwobign
    "scipy.stats.kstwobign") | Limiting distribution of scaled Kolmogorov-Smirnov
    two-sided test statistic. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`kstwobign`](generated/scipy.stats.kstwobign.html#scipy.stats.kstwobign
    "scipy.stats.kstwobign") | 缩放 Kolmogorov-Smirnov 双侧检验统计量的极限分布。 |'
- en: '| [`laplace`](generated/scipy.stats.laplace.html#scipy.stats.laplace "scipy.stats.laplace")
    | A Laplace continuous random variable. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`laplace`](generated/scipy.stats.laplace.html#scipy.stats.laplace "scipy.stats.laplace")
    | Laplace 连续随机变量。 |'
- en: '| [`laplace_asymmetric`](generated/scipy.stats.laplace_asymmetric.html#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric") | An asymmetric Laplace continuous random variable.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`laplace_asymmetric`](generated/scipy.stats.laplace_asymmetric.html#scipy.stats.laplace_asymmetric
    "scipy.stats.laplace_asymmetric") | 非对称 Laplace 连续随机变量。 |'
- en: '| [`levy`](generated/scipy.stats.levy.html#scipy.stats.levy "scipy.stats.levy")
    | A Levy continuous random variable. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`levy`](generated/scipy.stats.levy.html#scipy.stats.levy "scipy.stats.levy")
    | Levy 连续随机变量。 |'
- en: '| [`levy_l`](generated/scipy.stats.levy_l.html#scipy.stats.levy_l "scipy.stats.levy_l")
    | A left-skewed Levy continuous random variable. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`levy_l`](generated/scipy.stats.levy_l.html#scipy.stats.levy_l "scipy.stats.levy_l")
    | 左偏 Levy 连续随机变量。 |'
- en: '| [`levy_stable`](generated/scipy.stats.levy_stable.html#scipy.stats.levy_stable
    "scipy.stats.levy_stable") | A Levy-stable continuous random variable. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`levy_stable`](generated/scipy.stats.levy_stable.html#scipy.stats.levy_stable
    "scipy.stats.levy_stable") | Levy 稳定连续随机变量。 |'
- en: '| [`logistic`](generated/scipy.stats.logistic.html#scipy.stats.logistic "scipy.stats.logistic")
    | A logistic (or Sech-squared) continuous random variable. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`logistic`](generated/scipy.stats.logistic.html#scipy.stats.logistic "scipy.stats.logistic")
    | 逻辑斯蒂（或 Sech 平方）连续随机变量。 |'
- en: '| [`loggamma`](generated/scipy.stats.loggamma.html#scipy.stats.loggamma "scipy.stats.loggamma")
    | A log gamma continuous random variable. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`loggamma`](generated/scipy.stats.loggamma.html#scipy.stats.loggamma "scipy.stats.loggamma")
    | 对数 Gamma 连续随机变量。 |'
- en: '| [`loglaplace`](generated/scipy.stats.loglaplace.html#scipy.stats.loglaplace
    "scipy.stats.loglaplace") | A log-Laplace continuous random variable. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`loglaplace`](generated/scipy.stats.loglaplace.html#scipy.stats.loglaplace
    "scipy.stats.loglaplace") | 对数拉普拉斯连续随机变量。 |'
- en: '| [`lognorm`](generated/scipy.stats.lognorm.html#scipy.stats.lognorm "scipy.stats.lognorm")
    | A lognormal continuous random variable. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`lognorm`](generated/scipy.stats.lognorm.html#scipy.stats.lognorm "scipy.stats.lognorm")
    | 对数正态连续随机变量。 |'
- en: '| [`loguniform`](generated/scipy.stats.loguniform.html#scipy.stats.loguniform
    "scipy.stats.loguniform") | A loguniform or reciprocal continuous random variable.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '[`loguniform`](generated/scipy.stats.loguniform.html#scipy.stats.loguniform
    "scipy.stats.loguniform") | 一个对数均匀或倒数连续随机变量。'
- en: '| [`lomax`](generated/scipy.stats.lomax.html#scipy.stats.lomax "scipy.stats.lomax")
    | A Lomax (Pareto of the second kind) continuous random variable. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '[`lomax`](generated/scipy.stats.lomax.html#scipy.stats.lomax "scipy.stats.lomax")
    | 一个 Lomax（第二类帕累托）连续随机变量。'
- en: '| [`maxwell`](generated/scipy.stats.maxwell.html#scipy.stats.maxwell "scipy.stats.maxwell")
    | A Maxwell continuous random variable. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '[`maxwell`](generated/scipy.stats.maxwell.html#scipy.stats.maxwell "scipy.stats.maxwell")
    | 一个麦克斯韦连续随机变量。'
- en: '| [`mielke`](generated/scipy.stats.mielke.html#scipy.stats.mielke "scipy.stats.mielke")
    | A Mielke Beta-Kappa / Dagum continuous random variable. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '[`mielke`](generated/scipy.stats.mielke.html#scipy.stats.mielke "scipy.stats.mielke")
    | 一个 Mielke Beta-Kappa / Dagum 连续随机变量。'
- en: '| [`moyal`](generated/scipy.stats.moyal.html#scipy.stats.moyal "scipy.stats.moyal")
    | A Moyal continuous random variable. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '[`moyal`](generated/scipy.stats.moyal.html#scipy.stats.moyal "scipy.stats.moyal")
    | 一个莫耶连续随机变量。'
- en: '| [`nakagami`](generated/scipy.stats.nakagami.html#scipy.stats.nakagami "scipy.stats.nakagami")
    | A Nakagami continuous random variable. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '[`nakagami`](generated/scipy.stats.nakagami.html#scipy.stats.nakagami "scipy.stats.nakagami")
    | 一个中村连续随机变量。'
- en: '| [`ncx2`](generated/scipy.stats.ncx2.html#scipy.stats.ncx2 "scipy.stats.ncx2")
    | A non-central chi-squared continuous random variable. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '[`ncx2`](generated/scipy.stats.ncx2.html#scipy.stats.ncx2 "scipy.stats.ncx2")
    | 一个非中心卡方连续随机变量。'
- en: '| [`ncf`](generated/scipy.stats.ncf.html#scipy.stats.ncf "scipy.stats.ncf")
    | A non-central F distribution continuous random variable. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '[`ncf`](generated/scipy.stats.ncf.html#scipy.stats.ncf "scipy.stats.ncf") |
    一个非中心 F 分布连续随机变量。'
- en: '| [`nct`](generated/scipy.stats.nct.html#scipy.stats.nct "scipy.stats.nct")
    | A non-central Student''s t continuous random variable. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '[`nct`](generated/scipy.stats.nct.html#scipy.stats.nct "scipy.stats.nct") |
    一个非中心学生 t 连续随机变量。'
- en: '| [`norm`](generated/scipy.stats.norm.html#scipy.stats.norm "scipy.stats.norm")
    | A normal continuous random variable. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '[`norm`](generated/scipy.stats.norm.html#scipy.stats.norm "scipy.stats.norm")
    | 一个正态连续随机变量。'
- en: '| [`norminvgauss`](generated/scipy.stats.norminvgauss.html#scipy.stats.norminvgauss
    "scipy.stats.norminvgauss") | A Normal Inverse Gaussian continuous random variable.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '[`norminvgauss`](generated/scipy.stats.norminvgauss.html#scipy.stats.norminvgauss
    "scipy.stats.norminvgauss") | 一个正态逆高斯连续随机变量。'
- en: '| [`pareto`](generated/scipy.stats.pareto.html#scipy.stats.pareto "scipy.stats.pareto")
    | A Pareto continuous random variable. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '[`pareto`](generated/scipy.stats.pareto.html#scipy.stats.pareto "scipy.stats.pareto")
    | 一个帕累托连续随机变量。'
- en: '| [`pearson3`](generated/scipy.stats.pearson3.html#scipy.stats.pearson3 "scipy.stats.pearson3")
    | A pearson type III continuous random variable. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '[`pearson3`](generated/scipy.stats.pearson3.html#scipy.stats.pearson3 "scipy.stats.pearson3")
    | 一个皮尔逊类型 III 连续随机变量。'
- en: '| [`powerlaw`](generated/scipy.stats.powerlaw.html#scipy.stats.powerlaw "scipy.stats.powerlaw")
    | A power-function continuous random variable. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '[`powerlaw`](generated/scipy.stats.powerlaw.html#scipy.stats.powerlaw "scipy.stats.powerlaw")
    | 一个幂函数连续随机变量。'
- en: '| [`powerlognorm`](generated/scipy.stats.powerlognorm.html#scipy.stats.powerlognorm
    "scipy.stats.powerlognorm") | A power log-normal continuous random variable. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '[`powerlognorm`](generated/scipy.stats.powerlognorm.html#scipy.stats.powerlognorm
    "scipy.stats.powerlognorm") | 一个功率对数正态连续随机变量。'
- en: '| [`powernorm`](generated/scipy.stats.powernorm.html#scipy.stats.powernorm
    "scipy.stats.powernorm") | A power normal continuous random variable. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '[`powernorm`](generated/scipy.stats.powernorm.html#scipy.stats.powernorm "scipy.stats.powernorm")
    | 一个幂正态连续随机变量。'
- en: '| [`rdist`](generated/scipy.stats.rdist.html#scipy.stats.rdist "scipy.stats.rdist")
    | An R-distributed (symmetric beta) continuous random variable. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '[`rdist`](generated/scipy.stats.rdist.html#scipy.stats.rdist "scipy.stats.rdist")
    | 一个服从 R 分布（对称贝塔分布）的连续随机变量。'
- en: '| [`rayleigh`](generated/scipy.stats.rayleigh.html#scipy.stats.rayleigh "scipy.stats.rayleigh")
    | A Rayleigh continuous random variable. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '[`rayleigh`](generated/scipy.stats.rayleigh.html#scipy.stats.rayleigh "scipy.stats.rayleigh")
    | 一个瑞利连续随机变量。'
- en: '| [`rel_breitwigner`](generated/scipy.stats.rel_breitwigner.html#scipy.stats.rel_breitwigner
    "scipy.stats.rel_breitwigner") | A relativistic Breit-Wigner random variable.
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '[`rel_breitwigner`](generated/scipy.stats.rel_breitwigner.html#scipy.stats.rel_breitwigner
    "scipy.stats.rel_breitwigner") | 一个相对论布莱特-温格随机变量。'
- en: '| [`rice`](generated/scipy.stats.rice.html#scipy.stats.rice "scipy.stats.rice")
    | A Rice continuous random variable. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '[`rice`](generated/scipy.stats.rice.html#scipy.stats.rice "scipy.stats.rice")
    | 一个瑞丝连续随机变量。'
- en: '| [`recipinvgauss`](generated/scipy.stats.recipinvgauss.html#scipy.stats.recipinvgauss
    "scipy.stats.recipinvgauss") | A reciprocal inverse Gaussian continuous random
    variable. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '[`recipinvgauss`](generated/scipy.stats.recipinvgauss.html#scipy.stats.recipinvgauss
    "scipy.stats.recipinvgauss") | 倒数反高斯连续随机变量。'
- en: '| [`semicircular`](generated/scipy.stats.semicircular.html#scipy.stats.semicircular
    "scipy.stats.semicircular") | A semicircular continuous random variable. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '[`semicircular`](generated/scipy.stats.semicircular.html#scipy.stats.semicircular
    "scipy.stats.semicircular") | 半圆形连续随机变量。'
- en: '| [`skewcauchy`](generated/scipy.stats.skewcauchy.html#scipy.stats.skewcauchy
    "scipy.stats.skewcauchy") | A skewed Cauchy random variable. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '[`skewcauchy`](generated/scipy.stats.skewcauchy.html#scipy.stats.skewcauchy
    "scipy.stats.skewcauchy") | 偏斜 Cauchy 随机变量。'
- en: '| [`skewnorm`](generated/scipy.stats.skewnorm.html#scipy.stats.skewnorm "scipy.stats.skewnorm")
    | A skew-normal random variable. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '[`skewnorm`](generated/scipy.stats.skewnorm.html#scipy.stats.skewnorm "scipy.stats.skewnorm")
    | 偏斜正态随机变量。'
- en: '| [`studentized_range`](generated/scipy.stats.studentized_range.html#scipy.stats.studentized_range
    "scipy.stats.studentized_range") | A studentized range continuous random variable.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '[`studentized_range`](generated/scipy.stats.studentized_range.html#scipy.stats.studentized_range
    "scipy.stats.studentized_range") | 学生化范围连续随机变量。'
- en: '| [`t`](generated/scipy.stats.t.html#scipy.stats.t "scipy.stats.t") | A Student''s
    t continuous random variable. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '[`t`](generated/scipy.stats.t.html#scipy.stats.t "scipy.stats.t") | 学生 t 连续随机变量。'
- en: '| [`trapezoid`](generated/scipy.stats.trapezoid.html#scipy.stats.trapezoid
    "scipy.stats.trapezoid") | A trapezoidal continuous random variable. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '[`trapezoid`](generated/scipy.stats.trapezoid.html#scipy.stats.trapezoid "scipy.stats.trapezoid")
    | 梯形连续随机变量。'
- en: '| [`triang`](generated/scipy.stats.triang.html#scipy.stats.triang "scipy.stats.triang")
    | A triangular continuous random variable. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '[`triang`](generated/scipy.stats.triang.html#scipy.stats.triang "scipy.stats.triang")
    | 三角形连续随机变量。'
- en: '| [`truncexpon`](generated/scipy.stats.truncexpon.html#scipy.stats.truncexpon
    "scipy.stats.truncexpon") | A truncated exponential continuous random variable.
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '[`truncexpon`](generated/scipy.stats.truncexpon.html#scipy.stats.truncexpon
    "scipy.stats.truncexpon") | 截断指数连续随机变量。'
- en: '| [`truncnorm`](generated/scipy.stats.truncnorm.html#scipy.stats.truncnorm
    "scipy.stats.truncnorm") | A truncated normal continuous random variable. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '[`truncnorm`](generated/scipy.stats.truncnorm.html#scipy.stats.truncnorm "scipy.stats.truncnorm")
    | 截断正态连续随机变量。'
- en: '| [`truncpareto`](generated/scipy.stats.truncpareto.html#scipy.stats.truncpareto
    "scipy.stats.truncpareto") | An upper truncated Pareto continuous random variable.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '[`truncpareto`](generated/scipy.stats.truncpareto.html#scipy.stats.truncpareto
    "scipy.stats.truncpareto") | 上截断 Pareto 连续随机变量。'
- en: '| [`truncweibull_min`](generated/scipy.stats.truncweibull_min.html#scipy.stats.truncweibull_min
    "scipy.stats.truncweibull_min") | A doubly truncated Weibull minimum continuous
    random variable. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '[`truncweibull_min`](generated/scipy.stats.truncweibull_min.html#scipy.stats.truncweibull_min
    "scipy.stats.truncweibull_min") | 双截断 Weibull 最小连续随机变量。'
- en: '| [`tukeylambda`](generated/scipy.stats.tukeylambda.html#scipy.stats.tukeylambda
    "scipy.stats.tukeylambda") | A Tukey-Lamdba continuous random variable. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '[`tukeylambda`](generated/scipy.stats.tukeylambda.html#scipy.stats.tukeylambda
    "scipy.stats.tukeylambda") | Tukey-Lamdba 连续随机变量。'
- en: '| [`uniform`](generated/scipy.stats.uniform.html#scipy.stats.uniform "scipy.stats.uniform")
    | A uniform continuous random variable. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '[`uniform`](generated/scipy.stats.uniform.html#scipy.stats.uniform "scipy.stats.uniform")
    | 均匀分布连续随机变量。'
- en: '| [`vonmises`](generated/scipy.stats.vonmises.html#scipy.stats.vonmises "scipy.stats.vonmises")
    | A Von Mises continuous random variable. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '[`vonmises`](generated/scipy.stats.vonmises.html#scipy.stats.vonmises "scipy.stats.vonmises")
    | Von Mises 连续随机变量。'
- en: '| [`vonmises_line`](generated/scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") | A Von Mises continuous random variable. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '[`vonmises_line`](generated/scipy.stats.vonmises_line.html#scipy.stats.vonmises_line
    "scipy.stats.vonmises_line") | Von Mises 连续随机变量。'
- en: '| [`wald`](generated/scipy.stats.wald.html#scipy.stats.wald "scipy.stats.wald")
    | A Wald continuous random variable. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '[`wald`](generated/scipy.stats.wald.html#scipy.stats.wald "scipy.stats.wald")
    | Wald 连续随机变量。'
- en: '| [`weibull_min`](generated/scipy.stats.weibull_min.html#scipy.stats.weibull_min
    "scipy.stats.weibull_min") | Weibull minimum continuous random variable. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '[`weibull_min`](generated/scipy.stats.weibull_min.html#scipy.stats.weibull_min
    "scipy.stats.weibull_min") | Weibull 最小连续随机变量。'
- en: '| [`weibull_max`](generated/scipy.stats.weibull_max.html#scipy.stats.weibull_max
    "scipy.stats.weibull_max") | Weibull maximum continuous random variable. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '[`weibull_max`](generated/scipy.stats.weibull_max.html#scipy.stats.weibull_max
    "scipy.stats.weibull_max") | Weibull 最大连续随机变量。'
- en: '| [`wrapcauchy`](generated/scipy.stats.wrapcauchy.html#scipy.stats.wrapcauchy
    "scipy.stats.wrapcauchy") | A wrapped Cauchy continuous random variable. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`wrapcauchy`](generated/scipy.stats.wrapcauchy.html#scipy.stats.wrapcauchy
    "scipy.stats.wrapcauchy") | 包裹 Cauchy 连续随机变量。 |'
- en: The `fit` method of the univariate continuous distributions uses maximum likelihood
    estimation to fit the distribution to a data set. The `fit` method can accept
    regular data or *censored data*. Censored data is represented with instances of
    the [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData") class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一元连续分布的 `fit` 方法使用最大似然估计来拟合数据集到分布。`fit` 方法可以接受常规数据或*被审查数据*。被审查的数据使用 [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData") 类的实例表示。
- en: '| [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData")([uncensored, left, right, interval]) | Instances of
    this class represent censored data. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`CensoredData`](generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData
    "scipy.stats.CensoredData")([未审查, 左, 右, 间隔]) | 该类的实例表示被审查的数据。 |'
- en: Multivariate distributions
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多元分布
- en: '| [`multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") | A multivariate normal random variable. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") | 多元正态分布随机变量。 |'
- en: '| [`matrix_normal`](generated/scipy.stats.matrix_normal.html#scipy.stats.matrix_normal
    "scipy.stats.matrix_normal") | A matrix normal random variable. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`matrix_normal`](generated/scipy.stats.matrix_normal.html#scipy.stats.matrix_normal
    "scipy.stats.matrix_normal") | 矩阵正态分布随机变量。 |'
- en: '| [`dirichlet`](generated/scipy.stats.dirichlet.html#scipy.stats.dirichlet
    "scipy.stats.dirichlet") | A Dirichlet random variable. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet`](generated/scipy.stats.dirichlet.html#scipy.stats.dirichlet
    "scipy.stats.dirichlet") | 狄利克雷分布随机变量。 |'
- en: '| [`dirichlet_multinomial`](generated/scipy.stats.dirichlet_multinomial.html#scipy.stats.dirichlet_multinomial
    "scipy.stats.dirichlet_multinomial") | A Dirichlet multinomial random variable.
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`dirichlet_multinomial`](generated/scipy.stats.dirichlet_multinomial.html#scipy.stats.dirichlet_multinomial
    "scipy.stats.dirichlet_multinomial") | 狄利克雷-多项式分布随机变量。 |'
- en: '| [`wishart`](generated/scipy.stats.wishart.html#scipy.stats.wishart "scipy.stats.wishart")
    | A Wishart random variable. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`wishart`](generated/scipy.stats.wishart.html#scipy.stats.wishart "scipy.stats.wishart")
    | Wishart 分布随机变量。 |'
- en: '| [`invwishart`](generated/scipy.stats.invwishart.html#scipy.stats.invwishart
    "scipy.stats.invwishart") | An inverse Wishart random variable. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`invwishart`](generated/scipy.stats.invwishart.html#scipy.stats.invwishart
    "scipy.stats.invwishart") | 逆 Wishart 分布随机变量。 |'
- en: '| [`multinomial`](generated/scipy.stats.multinomial.html#scipy.stats.multinomial
    "scipy.stats.multinomial") | A multinomial random variable. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`multinomial`](generated/scipy.stats.multinomial.html#scipy.stats.multinomial
    "scipy.stats.multinomial") | 多项式分布随机变量。 |'
- en: '| [`special_ortho_group`](generated/scipy.stats.special_ortho_group.html#scipy.stats.special_ortho_group
    "scipy.stats.special_ortho_group") | A Special Orthogonal matrix (SO(N)) random
    variable. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`special_ortho_group`](generated/scipy.stats.special_ortho_group.html#scipy.stats.special_ortho_group
    "scipy.stats.special_ortho_group") | 特殊正交矩阵 (SO(N)) 随机变量。 |'
- en: '| [`ortho_group`](generated/scipy.stats.ortho_group.html#scipy.stats.ortho_group
    "scipy.stats.ortho_group") | An Orthogonal matrix (O(N)) random variable. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`ortho_group`](generated/scipy.stats.ortho_group.html#scipy.stats.ortho_group
    "scipy.stats.ortho_group") | 正交矩阵 (O(N)) 随机变量。 |'
- en: '| [`unitary_group`](generated/scipy.stats.unitary_group.html#scipy.stats.unitary_group
    "scipy.stats.unitary_group") | A matrix-valued U(N) random variable. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`unitary_group`](generated/scipy.stats.unitary_group.html#scipy.stats.unitary_group
    "scipy.stats.unitary_group") | U(N) 矩阵值随机变量。 |'
- en: '| [`random_correlation`](generated/scipy.stats.random_correlation.html#scipy.stats.random_correlation
    "scipy.stats.random_correlation") | A random correlation matrix. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`random_correlation`](generated/scipy.stats.random_correlation.html#scipy.stats.random_correlation
    "scipy.stats.random_correlation") | 随机相关矩阵。 |'
- en: '| [`multivariate_t`](generated/scipy.stats.multivariate_t.html#scipy.stats.multivariate_t
    "scipy.stats.multivariate_t") | A multivariate t-distributed random variable.
    |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_t`](generated/scipy.stats.multivariate_t.html#scipy.stats.multivariate_t
    "scipy.stats.multivariate_t") | 多元 t 分布随机变量。 |'
- en: '| [`multivariate_hypergeom`](generated/scipy.stats.multivariate_hypergeom.html#scipy.stats.multivariate_hypergeom
    "scipy.stats.multivariate_hypergeom") | A multivariate hypergeometric random variable.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`multivariate_hypergeom`](generated/scipy.stats.multivariate_hypergeom.html#scipy.stats.multivariate_hypergeom
    "scipy.stats.multivariate_hypergeom") | 多元超几何分布随机变量。 |'
- en: '| [`random_table`](generated/scipy.stats.random_table.html#scipy.stats.random_table
    "scipy.stats.random_table") | Contingency tables from independent samples with
    fixed marginal sums. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [`random_table`](generated/scipy.stats.random_table.html#scipy.stats.random_table
    "scipy.stats.random_table") | 独立样本的固定边际和的列联表。 |'
- en: '| [`uniform_direction`](generated/scipy.stats.uniform_direction.html#scipy.stats.uniform_direction
    "scipy.stats.uniform_direction") | A vector-valued uniform direction. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [`uniform_direction`](generated/scipy.stats.uniform_direction.html#scipy.stats.uniform_direction
    "scipy.stats.uniform_direction") | 一个向量值均匀分布的方向。 |'
- en: '| [`vonmises_fisher`](generated/scipy.stats.vonmises_fisher.html#scipy.stats.vonmises_fisher
    "scipy.stats.vonmises_fisher") | A von Mises-Fisher variable. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`vonmises_fisher`](generated/scipy.stats.vonmises_fisher.html#scipy.stats.vonmises_fisher
    "scipy.stats.vonmises_fisher") | 一个von Mises-Fisher变量。 |'
- en: '[`scipy.stats.multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") methods accept instances of the following class
    to represent the covariance.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.stats.multivariate_normal`](generated/scipy.stats.multivariate_normal.html#scipy.stats.multivariate_normal
    "scipy.stats.multivariate_normal") 方法接受以下类的实例来表示协方差。'
- en: '| [`Covariance`](generated/scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance")() | Representation of a covariance matrix |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`Covariance`](generated/scipy.stats.Covariance.html#scipy.stats.Covariance
    "scipy.stats.Covariance")() | 协方差矩阵的表示 |'
- en: Discrete distributions
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离散分布
- en: '| [`bernoulli`](generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli
    "scipy.stats.bernoulli") | A Bernoulli discrete random variable. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`bernoulli`](generated/scipy.stats.bernoulli.html#scipy.stats.bernoulli
    "scipy.stats.bernoulli") | 一个伯努利离散随机变量。 |'
- en: '| [`betabinom`](generated/scipy.stats.betabinom.html#scipy.stats.betabinom
    "scipy.stats.betabinom") | A beta-binomial discrete random variable. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`betabinom`](generated/scipy.stats.betabinom.html#scipy.stats.betabinom
    "scipy.stats.betabinom") | 一个贝塔二项式离散随机变量。 |'
- en: '| [`betanbinom`](generated/scipy.stats.betanbinom.html#scipy.stats.betanbinom
    "scipy.stats.betanbinom") | A beta-negative-binomial discrete random variable.
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`betanbinom`](generated/scipy.stats.betanbinom.html#scipy.stats.betanbinom
    "scipy.stats.betanbinom") | 一个贝塔负二项式离散随机变量。 |'
- en: '| [`binom`](generated/scipy.stats.binom.html#scipy.stats.binom "scipy.stats.binom")
    | A binomial discrete random variable. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`binom`](generated/scipy.stats.binom.html#scipy.stats.binom "scipy.stats.binom")
    | 一个二项式离散随机变量。 |'
- en: '| [`boltzmann`](generated/scipy.stats.boltzmann.html#scipy.stats.boltzmann
    "scipy.stats.boltzmann") | A Boltzmann (Truncated Discrete Exponential) random
    variable. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`boltzmann`](generated/scipy.stats.boltzmann.html#scipy.stats.boltzmann
    "scipy.stats.boltzmann") | 一个Boltzmann（截断离散指数）随机变量。 |'
- en: '| [`dlaplace`](generated/scipy.stats.dlaplace.html#scipy.stats.dlaplace "scipy.stats.dlaplace")
    | A Laplacian discrete random variable. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`dlaplace`](generated/scipy.stats.dlaplace.html#scipy.stats.dlaplace "scipy.stats.dlaplace")
    | 一个拉普拉斯离散随机变量。 |'
- en: '| [`geom`](generated/scipy.stats.geom.html#scipy.stats.geom "scipy.stats.geom")
    | A geometric discrete random variable. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`geom`](generated/scipy.stats.geom.html#scipy.stats.geom "scipy.stats.geom")
    | 一个几何离散随机变量。 |'
- en: '| [`hypergeom`](generated/scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom") | A hypergeometric discrete random variable. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| [`hypergeom`](generated/scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom") | 一个超几何离散随机变量。 |'
- en: '| [`logser`](generated/scipy.stats.logser.html#scipy.stats.logser "scipy.stats.logser")
    | A Logarithmic (Log-Series, Series) discrete random variable. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`logser`](generated/scipy.stats.logser.html#scipy.stats.logser "scipy.stats.logser")
    | 一个对数（Log-Series, Series）离散随机变量。 |'
- en: '| [`nbinom`](generated/scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")
    | A negative binomial discrete random variable. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`nbinom`](generated/scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")
    | 一个负二项式离散随机变量。 |'
- en: '| [`nchypergeom_fisher`](generated/scipy.stats.nchypergeom_fisher.html#scipy.stats.nchypergeom_fisher
    "scipy.stats.nchypergeom_fisher") | A Fisher''s noncentral hypergeometric discrete
    random variable. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`nchypergeom_fisher`](generated/scipy.stats.nchypergeom_fisher.html#scipy.stats.nchypergeom_fisher
    "scipy.stats.nchypergeom_fisher") | 一个Fisher的非中心超几何离散随机变量。 |'
- en: '| [`nchypergeom_wallenius`](generated/scipy.stats.nchypergeom_wallenius.html#scipy.stats.nchypergeom_wallenius
    "scipy.stats.nchypergeom_wallenius") | A Wallenius'' noncentral hypergeometric
    discrete random variable. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`nchypergeom_wallenius`](generated/scipy.stats.nchypergeom_wallenius.html#scipy.stats.nchypergeom_wallenius
    "scipy.stats.nchypergeom_wallenius") | 一个Wallenius的非中心超几何离散随机变量。 |'
- en: '| [`nhypergeom`](generated/scipy.stats.nhypergeom.html#scipy.stats.nhypergeom
    "scipy.stats.nhypergeom") | A negative hypergeometric discrete random variable.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`nhypergeom`](generated/scipy.stats.nhypergeom.html#scipy.stats.nhypergeom
    "scipy.stats.nhypergeom") | 一个负超几何离散随机变量。 |'
- en: '| [`planck`](generated/scipy.stats.planck.html#scipy.stats.planck "scipy.stats.planck")
    | A Planck discrete exponential random variable. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| [`planck`](generated/scipy.stats.planck.html#scipy.stats.planck "scipy.stats.planck")
    | 一个 Planck 离散指数随机变量。 |'
- en: '| [`poisson`](generated/scipy.stats.poisson.html#scipy.stats.poisson "scipy.stats.poisson")
    | A Poisson discrete random variable. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson`](generated/scipy.stats.poisson.html#scipy.stats.poisson "scipy.stats.poisson")
    | 一个泊松离散随机变量。 |'
- en: '| [`randint`](generated/scipy.stats.randint.html#scipy.stats.randint "scipy.stats.randint")
    | A uniform discrete random variable. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`randint`](generated/scipy.stats.randint.html#scipy.stats.randint "scipy.stats.randint")
    | 一个均匀离散随机变量。 |'
- en: '| [`skellam`](generated/scipy.stats.skellam.html#scipy.stats.skellam "scipy.stats.skellam")
    | A Skellam discrete random variable. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`skellam`](generated/scipy.stats.skellam.html#scipy.stats.skellam "scipy.stats.skellam")
    | 一个 Skellam 离散随机变量。 |'
- en: '| [`yulesimon`](generated/scipy.stats.yulesimon.html#scipy.stats.yulesimon
    "scipy.stats.yulesimon") | A Yule-Simon discrete random variable. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`yulesimon`](generated/scipy.stats.yulesimon.html#scipy.stats.yulesimon
    "scipy.stats.yulesimon") | 一个 Yule-Simon 离散随机变量。 |'
- en: '| [`zipf`](generated/scipy.stats.zipf.html#scipy.stats.zipf "scipy.stats.zipf")
    | A Zipf (Zeta) discrete random variable. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`zipf`](generated/scipy.stats.zipf.html#scipy.stats.zipf "scipy.stats.zipf")
    | 一个 Zipf（Zeta）离散随机变量。 |'
- en: '| [`zipfian`](generated/scipy.stats.zipfian.html#scipy.stats.zipfian "scipy.stats.zipfian")
    | A Zipfian discrete random variable. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`zipfian`](generated/scipy.stats.zipfian.html#scipy.stats.zipfian "scipy.stats.zipfian")
    | 一个 Zipfian 离散随机变量。 |'
- en: An overview of statistical functions is given below. Many of these functions
    have a similar version in [`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats
    "scipy.stats.mstats") which work for masked arrays.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下面给出了统计函数的概述。其中许多函数在[`scipy.stats.mstats`](stats.mstats.html#module-scipy.stats.mstats
    "scipy.stats.mstats")中有类似版本，适用于掩码数组。
- en: Summary statistics
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要统计
- en: '| [`describe`](generated/scipy.stats.describe.html#scipy.stats.describe "scipy.stats.describe")(a[, axis, ddof, bias, nan_policy])
    | Compute several descriptive statistics of the passed array. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`describe`](generated/scipy.stats.describe.html#scipy.stats.describe "scipy.stats.describe")(a[, axis, ddof, bias, nan_policy])
    | 计算传递数组的几个描述性统计量。 |'
- en: '| [`gmean`](generated/scipy.stats.gmean.html#scipy.stats.gmean "scipy.stats.gmean")(a[, axis, dtype, weights, nan_policy, ...])
    | Compute the weighted geometric mean along the specified axis. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`gmean`](generated/scipy.stats.gmean.html#scipy.stats.gmean "scipy.stats.gmean")(a[, axis, dtype, weights, nan_policy, ...])
    | 计算沿指定轴的加权几何平均值。 |'
- en: '| [`hmean`](generated/scipy.stats.hmean.html#scipy.stats.hmean "scipy.stats.hmean")(a[, axis, dtype, weights, nan_policy, ...])
    | Calculate the weighted harmonic mean along the specified axis. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`hmean`](generated/scipy.stats.hmean.html#scipy.stats.hmean "scipy.stats.hmean")(a[, axis, dtype, weights, nan_policy, ...])
    | 计算沿指定轴的加权调和平均值。 |'
- en: '| [`pmean`](generated/scipy.stats.pmean.html#scipy.stats.pmean "scipy.stats.pmean")(a, p, *[, axis, dtype, weights, ...])
    | Calculate the weighted power mean along the specified axis. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`pmean`](generated/scipy.stats.pmean.html#scipy.stats.pmean "scipy.stats.pmean")(a, p, *[, axis, dtype, weights, ...])
    | 计算沿指定轴的加权幂均值。 |'
- en: '| [`kurtosis`](generated/scipy.stats.kurtosis.html#scipy.stats.kurtosis "scipy.stats.kurtosis")(a[, axis, fisher, bias, ...])
    | Compute the kurtosis (Fisher or Pearson) of a dataset. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`kurtosis`](generated/scipy.stats.kurtosis.html#scipy.stats.kurtosis "scipy.stats.kurtosis")(a[, axis, fisher, bias, ...])
    | 计算数据集的峰度（Fisher 或 Pearson）。 |'
- en: '| [`mode`](generated/scipy.stats.mode.html#scipy.stats.mode "scipy.stats.mode")(a[, axis, nan_policy, keepdims])
    | Return an array of the modal (most common) value in the passed array. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| [`mode`](generated/scipy.stats.mode.html#scipy.stats.mode "scipy.stats.mode")(a[, axis, nan_policy, keepdims])
    | 返回传递数组中最常见的值的数组。 |'
- en: '| [`moment`](generated/scipy.stats.moment.html#scipy.stats.moment "scipy.stats.moment")(a[, moment, axis, nan_policy, ...])
    | Calculate the nth moment about the mean for a sample. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| [`moment`](generated/scipy.stats.moment.html#scipy.stats.moment "scipy.stats.moment")(a[, moment, axis, nan_policy, ...])
    | 计算样本关于均值的第n阶矩。 |'
- en: '| [`expectile`](generated/scipy.stats.expectile.html#scipy.stats.expectile
    "scipy.stats.expectile")(a[, alpha, weights]) | Compute the expectile at the specified
    level. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| [`expectile`](generated/scipy.stats.expectile.html#scipy.stats.expectile
    "scipy.stats.expectile")(a[, alpha, weights]) | 计算指定水平的期望分位数。 |'
- en: '| [`skew`](generated/scipy.stats.skew.html#scipy.stats.skew "scipy.stats.skew")(a[, axis, bias, nan_policy, keepdims])
    | Compute the sample skewness of a data set. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [`skew`](generated/scipy.stats.skew.html#scipy.stats.skew "scipy.stats.skew")(a[, axis, bias, nan_policy, keepdims])
    | 计算数据集的样本偏度。 |'
- en: '| [`kstat`](generated/scipy.stats.kstat.html#scipy.stats.kstat "scipy.stats.kstat")(data[, n, axis, nan_policy, keepdims])
    | Return the nth k-statistic (1<=n<=4 so far). |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '[`kstat`](generated/scipy.stats.kstat.html#scipy.stats.kstat "scipy.stats.kstat")(data[, n, axis, nan_policy, keepdims])
    | 返回第n个k-统计量（目前1<=n<=4）。'
- en: '| [`kstatvar`](generated/scipy.stats.kstatvar.html#scipy.stats.kstatvar "scipy.stats.kstatvar")(data[, n, axis, nan_policy, keepdims])
    | Return an unbiased estimator of the variance of the k-statistic. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '[`kstatvar`](generated/scipy.stats.kstatvar.html#scipy.stats.kstatvar "scipy.stats.kstatvar")(data[, n, axis, nan_policy, keepdims])
    | 返回k-统计量方差的无偏估计。'
- en: '| [`tmean`](generated/scipy.stats.tmean.html#scipy.stats.tmean "scipy.stats.tmean")(a[, limits, inclusive, axis, ...])
    | Compute the trimmed mean. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '[`tmean`](generated/scipy.stats.tmean.html#scipy.stats.tmean "scipy.stats.tmean")(a[, limits, inclusive, axis, ...])
    | 计算修剪均值。'
- en: '| [`tvar`](generated/scipy.stats.tvar.html#scipy.stats.tvar "scipy.stats.tvar")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed variance. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '[`tvar`](generated/scipy.stats.tvar.html#scipy.stats.tvar "scipy.stats.tvar")(a[, limits, inclusive, axis, ddof, ...])
    | 计算修剪方差。'
- en: '| [`tmin`](generated/scipy.stats.tmin.html#scipy.stats.tmin "scipy.stats.tmin")(a[, lowerlimit, axis, inclusive, ...])
    | Compute the trimmed minimum. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '[`tmin`](generated/scipy.stats.tmin.html#scipy.stats.tmin "scipy.stats.tmin")(a[, lowerlimit, axis, inclusive, ...])
    | 计算修剪后的最小值。'
- en: '| [`tmax`](generated/scipy.stats.tmax.html#scipy.stats.tmax "scipy.stats.tmax")(a[, upperlimit, axis, inclusive, ...])
    | Compute the trimmed maximum. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '[`tmax`](generated/scipy.stats.tmax.html#scipy.stats.tmax "scipy.stats.tmax")(a[, upperlimit, axis, inclusive, ...])
    | 计算修剪后的最大值。'
- en: '| [`tstd`](generated/scipy.stats.tstd.html#scipy.stats.tstd "scipy.stats.tstd")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed sample standard deviation. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '[`tstd`](generated/scipy.stats.tstd.html#scipy.stats.tstd "scipy.stats.tstd")(a[, limits, inclusive, axis, ddof, ...])
    | 计算修剪样本标准差。'
- en: '| [`tsem`](generated/scipy.stats.tsem.html#scipy.stats.tsem "scipy.stats.tsem")(a[, limits, inclusive, axis, ddof, ...])
    | Compute the trimmed standard error of the mean. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '[`tsem`](generated/scipy.stats.tsem.html#scipy.stats.tsem "scipy.stats.tsem")(a[, limits, inclusive, axis, ddof, ...])
    | 计算修剪均值标准误差。'
- en: '| [`variation`](generated/scipy.stats.variation.html#scipy.stats.variation
    "scipy.stats.variation")(a[, axis, nan_policy, ddof, keepdims]) | Compute the
    coefficient of variation. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '[`variation`](generated/scipy.stats.variation.html#scipy.stats.variation "scipy.stats.variation")(a[, axis, nan_policy, ddof, keepdims])
    | 计算变异系数。'
- en: '| [`find_repeats`](generated/scipy.stats.find_repeats.html#scipy.stats.find_repeats
    "scipy.stats.find_repeats")(arr) | Find repeats and repeat counts. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '[`find_repeats`](generated/scipy.stats.find_repeats.html#scipy.stats.find_repeats
    "scipy.stats.find_repeats")(arr) | 查找重复项及重复计数。'
- en: '| [`rankdata`](generated/scipy.stats.rankdata.html#scipy.stats.rankdata "scipy.stats.rankdata")(a[, method, axis, nan_policy])
    | Assign ranks to data, dealing with ties appropriately. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '[`rankdata`](generated/scipy.stats.rankdata.html#scipy.stats.rankdata "scipy.stats.rankdata")(a[, method, axis, nan_policy])
    | 分配数据排名，适当处理并列情况。'
- en: '| [`tiecorrect`](generated/scipy.stats.tiecorrect.html#scipy.stats.tiecorrect
    "scipy.stats.tiecorrect")(rankvals) | Tie correction factor for Mann-Whitney U
    and Kruskal-Wallis H tests. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '[`tiecorrect`](generated/scipy.stats.tiecorrect.html#scipy.stats.tiecorrect
    "scipy.stats.tiecorrect")(rankvals) | Mann-Whitney U 检验和Kruskal-Wallis H 检验的结带校正因子。'
- en: '| [`trim_mean`](generated/scipy.stats.trim_mean.html#scipy.stats.trim_mean
    "scipy.stats.trim_mean")(a, proportiontocut[, axis]) | Return mean of array after
    trimming distribution from both tails. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '[`trim_mean`](generated/scipy.stats.trim_mean.html#scipy.stats.trim_mean "scipy.stats.trim_mean")(a, proportiontocut[, axis])
    | 返回修剪分布两端后的数组均值。'
- en: '| [`gstd`](generated/scipy.stats.gstd.html#scipy.stats.gstd "scipy.stats.gstd")(a[, axis, ddof])
    | Calculate the geometric standard deviation of an array. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '[`gstd`](generated/scipy.stats.gstd.html#scipy.stats.gstd "scipy.stats.gstd")(a[, axis, ddof])
    | 计算数组的几何标准差。'
- en: '| [`iqr`](generated/scipy.stats.iqr.html#scipy.stats.iqr "scipy.stats.iqr")(x[, axis, rng, scale, nan_policy, ...])
    | Compute the interquartile range of the data along the specified axis. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '[`iqr`](generated/scipy.stats.iqr.html#scipy.stats.iqr "scipy.stats.iqr")(x[, axis, rng, scale, nan_policy, ...])
    | 计算沿指定轴的四分位距。'
- en: '| [`sem`](generated/scipy.stats.sem.html#scipy.stats.sem "scipy.stats.sem")(a[, axis, ddof, nan_policy, keepdims])
    | Compute standard error of the mean. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '[`sem`](generated/scipy.stats.sem.html#scipy.stats.sem "scipy.stats.sem")(a[, axis, ddof, nan_policy, keepdims])
    | 计算均值的标准误差。'
- en: '| [`bayes_mvs`](generated/scipy.stats.bayes_mvs.html#scipy.stats.bayes_mvs
    "scipy.stats.bayes_mvs")(data[, alpha]) | Bayesian confidence intervals for the
    mean, var, and std. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '[`bayes_mvs`](generated/scipy.stats.bayes_mvs.html#scipy.stats.bayes_mvs "scipy.stats.bayes_mvs")(data[, alpha])
    | 均值、方差和标准差的贝叶斯置信区间。'
- en: '| [`mvsdist`](generated/scipy.stats.mvsdist.html#scipy.stats.mvsdist "scipy.stats.mvsdist")(data)
    | ''Frozen'' distributions for mean, variance, and standard deviation of data.
    |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| [`mvsdist`](generated/scipy.stats.mvsdist.html#scipy.stats.mvsdist "scipy.stats.mvsdist")(data)
    | 数据的均值、方差和标准差的‘冻结’分布。 |'
- en: '| [`entropy`](generated/scipy.stats.entropy.html#scipy.stats.entropy "scipy.stats.entropy")(pk[, qk, base, axis, nan_policy, ...])
    | Calculate the Shannon entropy/relative entropy of given distribution(s). |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| [`entropy`](generated/scipy.stats.entropy.html#scipy.stats.entropy "scipy.stats.entropy")(pk[, qk, base, axis, nan_policy, ...])
    | 计算给定分布的香农熵/相对熵。 |'
- en: '| [`differential_entropy`](generated/scipy.stats.differential_entropy.html#scipy.stats.differential_entropy
    "scipy.stats.differential_entropy")(values, *[, ...]) | Given a sample of a distribution,
    estimate the differential entropy. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| [`differential_entropy`](generated/scipy.stats.differential_entropy.html#scipy.stats.differential_entropy
    "scipy.stats.differential_entropy")(values, *[, ...]) | 给定分布样本，估计差分熵。 |'
- en: '| [`median_abs_deviation`](generated/scipy.stats.median_abs_deviation.html#scipy.stats.median_abs_deviation
    "scipy.stats.median_abs_deviation")(x[, axis, center, ...]) | Compute the median
    absolute deviation of the data along the given axis. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| [`median_abs_deviation`](generated/scipy.stats.median_abs_deviation.html#scipy.stats.median_abs_deviation
    "scipy.stats.median_abs_deviation")(x[, axis, center, ...]) | 计算给定轴向数据的中位数绝对偏差。
    |'
- en: Frequency statistics
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 频率统计
- en: '| [`cumfreq`](generated/scipy.stats.cumfreq.html#scipy.stats.cumfreq "scipy.stats.cumfreq")(a[, numbins, defaultreallimits, weights])
    | Return a cumulative frequency histogram, using the histogram function. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`cumfreq`](generated/scipy.stats.cumfreq.html#scipy.stats.cumfreq "scipy.stats.cumfreq")(a[, numbins, defaultreallimits, weights])
    | 使用直方图函数返回累积频率直方图。 |'
- en: '| [`percentileofscore`](generated/scipy.stats.percentileofscore.html#scipy.stats.percentileofscore
    "scipy.stats.percentileofscore")(a, score[, kind, nan_policy]) | Compute the percentile
    rank of a score relative to a list of scores. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`percentileofscore`](generated/scipy.stats.percentileofscore.html#scipy.stats.percentileofscore
    "scipy.stats.percentileofscore")(a, score[, kind, nan_policy]) | 计算得分相对于得分列表的百分位等级。
    |'
- en: '| [`scoreatpercentile`](generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile
    "scipy.stats.scoreatpercentile")(a, per[, limit, ...]) | Calculate the score at
    a given percentile of the input sequence. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`scoreatpercentile`](generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile
    "scipy.stats.scoreatpercentile")(a, per[, limit, ...]) | 计算输入序列在给定百分位数处的分数。 |'
- en: '| [`relfreq`](generated/scipy.stats.relfreq.html#scipy.stats.relfreq "scipy.stats.relfreq")(a[, numbins, defaultreallimits, weights])
    | Return a relative frequency histogram, using the histogram function. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| [`relfreq`](generated/scipy.stats.relfreq.html#scipy.stats.relfreq "scipy.stats.relfreq")(a[, numbins, defaultreallimits, weights])
    | 使用直方图函数返回相对频率直方图。 |'
- en: '| [`binned_statistic`](generated/scipy.stats.binned_statistic.html#scipy.stats.binned_statistic
    "scipy.stats.binned_statistic")(x, values[, statistic, ...]) | Compute a binned
    statistic for one or more sets of data. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`binned_statistic`](generated/scipy.stats.binned_statistic.html#scipy.stats.binned_statistic
    "scipy.stats.binned_statistic")(x, values[, statistic, ...]) | 计算一个或多个数据集的分箱统计量。
    |'
- en: '| [`binned_statistic_2d`](generated/scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d
    "scipy.stats.binned_statistic_2d")(x, y, values[, ...]) | Compute a bidimensional
    binned statistic for one or more sets of data. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`binned_statistic_2d`](generated/scipy.stats.binned_statistic_2d.html#scipy.stats.binned_statistic_2d
    "scipy.stats.binned_statistic_2d")(x, y, values[, ...]) | 计算一个或多个数据集的二维分箱统计量。
    |'
- en: '| [`binned_statistic_dd`](generated/scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd
    "scipy.stats.binned_statistic_dd")(sample, values[, ...]) | Compute a multidimensional
    binned statistic for a set of data. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`binned_statistic_dd`](generated/scipy.stats.binned_statistic_dd.html#scipy.stats.binned_statistic_dd
    "scipy.stats.binned_statistic_dd")(sample, values[, ...]) | 计算数据集的多维分箱统计量。 |'
- en: Hypothesis Tests and related functions
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假设检验及相关函数
- en: SciPy has many functions for performing hypothesis tests that return a test
    statistic and a p-value, and several of them return confidence intervals and/or
    other related information.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 包含许多用于执行假设检验的函数，这些函数返回一个检验统计量和 p 值，其中一些还返回置信区间或其他相关信息。
- en: The headings below are based on common uses of the functions within, but due
    to the wide variety of statistical procedures, any attempt at coarse-grained categorization
    will be imperfect. Also, note that tests within the same heading are not interchangeable
    in general (e.g. many have different distributional assumptions).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的标题基于其中函数的常见用法，但由于统计程序种类繁多，任何试图粗略分类的尝试都将是不完美的。另外，请注意，同一标题内的测试通常不能互换（例如，许多测试具有不同的分布假设）。
- en: One Sample Tests / Paired Sample Tests
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一样本检验 / 成对样本检验
- en: One sample tests are typically used to assess whether a single sample was drawn
    from a specified distribution or a distribution with specified properties (e.g.
    zero mean).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一样本检验通常用于评估单一样本是否来自指定分布或具有指定属性的分布（例如零均值）。
- en: '| [`ttest_1samp`](generated/scipy.stats.ttest_1samp.html#scipy.stats.ttest_1samp
    "scipy.stats.ttest_1samp")(a, popmean[, axis, nan_policy, ...]) | Calculate the
    T-test for the mean of ONE group of scores. |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| [`ttest_1samp`](generated/scipy.stats.ttest_1samp.html#scipy.stats.ttest_1samp
    "scipy.stats.ttest_1samp")(a, popmean[, axis, nan_policy, ...]) | 计算一个组分数的均值的
    T 检验。 |'
- en: '| [`binomtest`](generated/scipy.stats.binomtest.html#scipy.stats.binomtest
    "scipy.stats.binomtest")(k, n[, p, alternative]) | Perform a test that the probability
    of success is p. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`binomtest`](generated/scipy.stats.binomtest.html#scipy.stats.binomtest
    "scipy.stats.binomtest")(k, n[, p, alternative]) | 执行一个测试，检验成功的概率是否为 p。 |'
- en: '| [`quantile_test`](generated/scipy.stats.quantile_test.html#scipy.stats.quantile_test
    "scipy.stats.quantile_test")(x, *[, q, p, alternative]) | Perform a quantile test
    and compute a confidence interval of the quantile. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`quantile_test`](generated/scipy.stats.quantile_test.html#scipy.stats.quantile_test
    "scipy.stats.quantile_test")(x, *[, q, p, alternative]) | 执行一个分位数检验，并计算分位数的置信区间。
    |'
- en: '| [`skewtest`](generated/scipy.stats.skewtest.html#scipy.stats.skewtest "scipy.stats.skewtest")(a[, axis, nan_policy, alternative])
    | Test whether the skew is different from the normal distribution. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`skewtest`](generated/scipy.stats.skewtest.html#scipy.stats.skewtest "scipy.stats.skewtest")(a[, axis, nan_policy, alternative])
    | 测试偏斜是否与正态分布不同。 |'
- en: '| [`kurtosistest`](generated/scipy.stats.kurtosistest.html#scipy.stats.kurtosistest
    "scipy.stats.kurtosistest")(a[, axis, nan_policy, alternative]) | Test whether
    a dataset has normal kurtosis. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| [`kurtosistest`](generated/scipy.stats.kurtosistest.html#scipy.stats.kurtosistest
    "scipy.stats.kurtosistest")(a[, axis, nan_policy, alternative]) | 测试数据集是否具有正常峰度。
    |'
- en: '| [`normaltest`](generated/scipy.stats.normaltest.html#scipy.stats.normaltest
    "scipy.stats.normaltest")(a[, axis, nan_policy]) | Test whether a sample differs
    from a normal distribution. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`normaltest`](generated/scipy.stats.normaltest.html#scipy.stats.normaltest
    "scipy.stats.normaltest")(a[, axis, nan_policy]) | 测试样本是否与正态分布不同。 |'
- en: '| [`jarque_bera`](generated/scipy.stats.jarque_bera.html#scipy.stats.jarque_bera
    "scipy.stats.jarque_bera")(x, *[, axis, nan_policy, keepdims]) | Perform the Jarque-Bera
    goodness of fit test on sample data. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`jarque_bera`](generated/scipy.stats.jarque_bera.html#scipy.stats.jarque_bera
    "scipy.stats.jarque_bera")(x, *[, axis, nan_policy, keepdims]) | 对样本数据执行 Jarque-Bera
    拟合优度检验。 |'
- en: '| [`shapiro`](generated/scipy.stats.shapiro.html#scipy.stats.shapiro "scipy.stats.shapiro")(x)
    | Perform the Shapiro-Wilk test for normality. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| [`shapiro`](generated/scipy.stats.shapiro.html#scipy.stats.shapiro "scipy.stats.shapiro")(x)
    | 执行 Shapiro-Wilk 正态性检验。 |'
- en: '| [`anderson`](generated/scipy.stats.anderson.html#scipy.stats.anderson "scipy.stats.anderson")(x[, dist])
    | Anderson-Darling test for data coming from a particular distribution. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`anderson`](generated/scipy.stats.anderson.html#scipy.stats.anderson "scipy.stats.anderson")(x[, dist])
    | Anderson-Darling 检验用于来自特定分布的数据。 |'
- en: '| [`cramervonmises`](generated/scipy.stats.cramervonmises.html#scipy.stats.cramervonmises
    "scipy.stats.cramervonmises")(rvs, cdf[, args, axis, ...]) | Perform the one-sample
    Cramér-von Mises test for goodness of fit. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`cramervonmises`](generated/scipy.stats.cramervonmises.html#scipy.stats.cramervonmises
    "scipy.stats.cramervonmises")(rvs, cdf[, args, axis, ...]) | 执行单样本 Cramér-von
    Mises 拟合优度检验。 |'
- en: '| [`ks_1samp`](generated/scipy.stats.ks_1samp.html#scipy.stats.ks_1samp "scipy.stats.ks_1samp")(x, cdf[, args, alternative, ...])
    | Performs the one-sample Kolmogorov-Smirnov test for goodness of fit. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`ks_1samp`](generated/scipy.stats.ks_1samp.html#scipy.stats.ks_1samp "scipy.stats.ks_1samp")(x, cdf[, args, alternative, ...])
    | 执行单样本 Kolmogorov-Smirnov 拟合优度检验。 |'
- en: '| [`goodness_of_fit`](generated/scipy.stats.goodness_of_fit.html#scipy.stats.goodness_of_fit
    "scipy.stats.goodness_of_fit")(dist, data, *[, ...]) | Perform a goodness of fit
    test comparing data to a distribution family. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`goodness_of_fit`](generated/scipy.stats.goodness_of_fit.html#scipy.stats.goodness_of_fit
    "scipy.stats.goodness_of_fit")(dist, data, *[, ...]) | 执行拟合优度检验，将数据与分布族比较。 |'
- en: '| [`chisquare`](generated/scipy.stats.chisquare.html#scipy.stats.chisquare
    "scipy.stats.chisquare")(f_obs[, f_exp, ddof, axis]) | Calculate a one-way chi-square
    test. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`chisquare`](generated/scipy.stats.chisquare.html#scipy.stats.chisquare
    "scipy.stats.chisquare")(f_obs[, f_exp, ddof, axis]) | 计算单向卡方检验。 |'
- en: '| [`power_divergence`](generated/scipy.stats.power_divergence.html#scipy.stats.power_divergence
    "scipy.stats.power_divergence")(f_obs[, f_exp, ddof, axis, ...]) | Cressie-Read
    power divergence statistic and goodness of fit test. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`power_divergence`](generated/scipy.stats.power_divergence.html#scipy.stats.power_divergence
    "scipy.stats.power_divergence")(f_obs[, f_exp, ddof, axis, ...]) | Cressie-Read
    力度分散统计量和拟合优度检验。 |'
- en: Paired sample tests are often used to assess whether two samples were drawn
    from the same distribution; they differ from the independent sample tests below
    in that each observation in one sample is treated as paired with a closely-related
    observation in the other sample (e.g. when environmental factors are controlled
    between observations within a pair but not among pairs). They can also be interpreted
    or used as one-sample tests (e.g. tests on the mean or median of *differences*
    between paired observations).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 配对样本检验通常用于评估两个样本是否来自同一分布；它们与下面的独立样本检验不同之处在于，一个样本中的每个观测值被视为与另一个样本中一个密切相关的观测值配对（例如，在一对观测值之间控制环境因素，但在不同对之间不控制）。它们也可以被解释或用作单样本检验（例如，对配对观测值之间的*差异*的均值或中位数进行检验）。
- en: '| [`ttest_rel`](generated/scipy.stats.ttest_rel.html#scipy.stats.ttest_rel
    "scipy.stats.ttest_rel")(a, b[, axis, nan_policy, ...]) | Calculate the t-test
    on TWO RELATED samples of scores, a and b. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`ttest_rel`](generated/scipy.stats.ttest_rel.html#scipy.stats.ttest_rel
    "scipy.stats.ttest_rel")(a, b[, axis, nan_policy, ...]) | 计算两个相关样本a和b的t检验。 |'
- en: '| [`wilcoxon`](generated/scipy.stats.wilcoxon.html#scipy.stats.wilcoxon "scipy.stats.wilcoxon")(x[, y, zero_method, correction, ...])
    | Calculate the Wilcoxon signed-rank test. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`wilcoxon`](generated/scipy.stats.wilcoxon.html#scipy.stats.wilcoxon "scipy.stats.wilcoxon")(x[, y, zero_method, correction, ...])
    | 计算Wilcoxon符号秩检验。 |'
- en: Association/Correlation Tests
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关联/相关性检验
- en: These tests are often used to assess whether there is a relationship (e.g. linear)
    between paired observations in multiple samples or among the coordinates of multivariate
    observations.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检验通常用于评估多个样本中配对观测值之间或多变量观测值坐标之间是否存在关系（例如线性关系）。
- en: '| [`linregress`](generated/scipy.stats.linregress.html#scipy.stats.linregress
    "scipy.stats.linregress")(x[, y, alternative]) | Calculate a linear least-squares
    regression for two sets of measurements. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`linregress`](generated/scipy.stats.linregress.html#scipy.stats.linregress
    "scipy.stats.linregress")(x[, y, alternative]) | 计算两组测量值的线性最小二乘回归。 |'
- en: '| [`pearsonr`](generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr "scipy.stats.pearsonr")(x, y, *[, alternative, method])
    | Pearson correlation coefficient and p-value for testing non-correlation. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`pearsonr`](generated/scipy.stats.pearsonr.html#scipy.stats.pearsonr "scipy.stats.pearsonr")(x, y, *[, alternative, method])
    | Pearson相关系数和用于测试非相关性的p值。 |'
- en: '| [`spearmanr`](generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "scipy.stats.spearmanr")(a[, b, axis, nan_policy, alternative]) | Calculate a
    Spearman correlation coefficient with associated p-value. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`spearmanr`](generated/scipy.stats.spearmanr.html#scipy.stats.spearmanr
    "scipy.stats.spearmanr")(a[, b, axis, nan_policy, alternative]) | 计算具有相关p值的Spearman相关系数。
    |'
- en: '| [`pointbiserialr`](generated/scipy.stats.pointbiserialr.html#scipy.stats.pointbiserialr
    "scipy.stats.pointbiserialr")(x, y) | Calculate a point biserial correlation coefficient
    and its p-value. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`pointbiserialr`](generated/scipy.stats.pointbiserialr.html#scipy.stats.pointbiserialr
    "scipy.stats.pointbiserialr")(x, y) | 计算一点双列相关系数及其p值。 |'
- en: '| [`kendalltau`](generated/scipy.stats.kendalltau.html#scipy.stats.kendalltau
    "scipy.stats.kendalltau")(x, y, *[, initial_lexsort, ...]) | Calculate Kendall''s
    tau, a correlation measure for ordinal data. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`kendalltau`](generated/scipy.stats.kendalltau.html#scipy.stats.kendalltau
    "scipy.stats.kendalltau")(x, y, *[, initial_lexsort, ...]) | 计算Kendall''s tau，一种用于有序数据的相关度量。
    |'
- en: '| [`weightedtau`](generated/scipy.stats.weightedtau.html#scipy.stats.weightedtau
    "scipy.stats.weightedtau")(x, y[, rank, weigher, additive]) | Compute a weighted
    version of Kendall''s \(\tau\). |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`weightedtau`](generated/scipy.stats.weightedtau.html#scipy.stats.weightedtau
    "scipy.stats.weightedtau")(x, y[, rank, weigher, additive]) | 计算Kendall''s \(\tau\)的加权版本。
    |'
- en: '| [`somersd`](generated/scipy.stats.somersd.html#scipy.stats.somersd "scipy.stats.somersd")(x[, y, alternative])
    | Calculates Somers'' D, an asymmetric measure of ordinal association. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`somersd`](generated/scipy.stats.somersd.html#scipy.stats.somersd "scipy.stats.somersd")(x[, y, alternative])
    | 计算Somers'' D，一种有序关联的非对称度量。 |'
- en: '| [`siegelslopes`](generated/scipy.stats.siegelslopes.html#scipy.stats.siegelslopes
    "scipy.stats.siegelslopes")(y[, x, method]) | Computes the Siegel estimator for
    a set of points (x, y). |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`siegelslopes`](generated/scipy.stats.siegelslopes.html#scipy.stats.siegelslopes
    "scipy.stats.siegelslopes")(y[, x, method]) | 计算一组点（x，y）的Siegel估计量。 |'
- en: '| [`theilslopes`](generated/scipy.stats.theilslopes.html#scipy.stats.theilslopes
    "scipy.stats.theilslopes")(y[, x, alpha, method]) | Computes the Theil-Sen estimator
    for a set of points (x, y). |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`theilslopes`](generated/scipy.stats.theilslopes.html#scipy.stats.theilslopes
    "scipy.stats.theilslopes")(y[, x, alpha, method]) | 计算一组点（x，y）的Theil-Sen估计量。 |'
- en: '| [`page_trend_test`](generated/scipy.stats.page_trend_test.html#scipy.stats.page_trend_test
    "scipy.stats.page_trend_test")(data[, ranked, ...]) | Perform Page''s Test, a
    measure of trend in observations between treatments. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`page_trend_test`](generated/scipy.stats.page_trend_test.html#scipy.stats.page_trend_test
    "scipy.stats.page_trend_test")(data[, ranked, ...]) | 执行Page趋势检验，用于衡量不同处理之间的观测趋势。
    |'
- en: '| [`multiscale_graphcorr`](generated/scipy.stats.multiscale_graphcorr.html#scipy.stats.multiscale_graphcorr
    "scipy.stats.multiscale_graphcorr")(x, y[, ...]) | Computes the Multiscale Graph
    Correlation (MGC) test statistic. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`multiscale_graphcorr`](generated/scipy.stats.multiscale_graphcorr.html#scipy.stats.multiscale_graphcorr
    "scipy.stats.multiscale_graphcorr")(x, y[, ...]) | 计算多尺度图相关性（MGC）检验统计量。 |'
- en: These association tests and are to work with samples in the form of contingency
    tables. Supporting functions are available in [`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency").
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关联性检验用于处理列联表样本。支持函数可在[`scipy.stats.contingency`](stats.contingency.html#module-scipy.stats.contingency
    "scipy.stats.contingency")中找到。
- en: '| [`chi2_contingency`](generated/scipy.stats.chi2_contingency.html#scipy.stats.chi2_contingency
    "scipy.stats.chi2_contingency")(observed[, correction, lambda_]) | Chi-square
    test of independence of variables in a contingency table. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`chi2_contingency`](generated/scipy.stats.chi2_contingency.html#scipy.stats.chi2_contingency
    "scipy.stats.chi2_contingency")(observed[, correction, lambda_]) | 在列联表中检验变量的独立性的卡方检验。
    |'
- en: '| [`fisher_exact`](generated/scipy.stats.fisher_exact.html#scipy.stats.fisher_exact
    "scipy.stats.fisher_exact")(table[, alternative]) | Perform a Fisher exact test
    on a 2x2 contingency table. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`fisher_exact`](generated/scipy.stats.fisher_exact.html#scipy.stats.fisher_exact
    "scipy.stats.fisher_exact")(table[, alternative]) | 在2x2列联表上执行Fisher精确检验。 |'
- en: '| [`barnard_exact`](generated/scipy.stats.barnard_exact.html#scipy.stats.barnard_exact
    "scipy.stats.barnard_exact")(table[, alternative, pooled, n]) | Perform a Barnard
    exact test on a 2x2 contingency table. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`barnard_exact`](generated/scipy.stats.barnard_exact.html#scipy.stats.barnard_exact
    "scipy.stats.barnard_exact")(table[, alternative, pooled, n]) | 在2x2列联表上执行Barnard精确检验。
    |'
- en: '| [`boschloo_exact`](generated/scipy.stats.boschloo_exact.html#scipy.stats.boschloo_exact
    "scipy.stats.boschloo_exact")(table[, alternative, n]) | Perform Boschloo''s exact
    test on a 2x2 contingency table. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`boschloo_exact`](generated/scipy.stats.boschloo_exact.html#scipy.stats.boschloo_exact
    "scipy.stats.boschloo_exact")(table[, alternative, n]) | 在2x2列联表上执行Boschloo精确检验。
    |'
- en: Independent Sample Tests
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立样本检验
- en: Independent sample tests are typically used to assess whether multiple samples
    were independently drawn from the same distribution or different distributions
    with a shared property (e.g. equal means).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 独立样本检验通常用于评估多个样本是否独立地从相同分布或具有共同属性（例如均值相等的不同分布）中抽取。
- en: Some tests are specifically for comparing two samples.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 有些测试特别用于比较两个样本。
- en: '| [`ttest_ind_from_stats`](generated/scipy.stats.ttest_ind_from_stats.html#scipy.stats.ttest_ind_from_stats
    "scipy.stats.ttest_ind_from_stats")(mean1, std1, nobs1, ...) | T-test for means
    of two independent samples from descriptive statistics. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`ttest_ind_from_stats`](generated/scipy.stats.ttest_ind_from_stats.html#scipy.stats.ttest_ind_from_stats
    "scipy.stats.ttest_ind_from_stats")(mean1, std1, nobs1, ...) | 根据描述统计量对两个独立样本的均值进行T检验。
    |'
- en: '| [`poisson_means_test`](generated/scipy.stats.poisson_means_test.html#scipy.stats.poisson_means_test
    "scipy.stats.poisson_means_test")(k1, n1, k2, n2, *[, ...]) | Performs the Poisson
    means test, AKA the "E-test". |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`poisson_means_test`](generated/scipy.stats.poisson_means_test.html#scipy.stats.poisson_means_test
    "scipy.stats.poisson_means_test")(k1, n1, k2, n2, *[, ...]) | 执行泊松均值检验，也称为"E-test"。
    |'
- en: '| [`ttest_ind`](generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind
    "scipy.stats.ttest_ind")(a, b[, axis, equal_var, ...]) | Calculate the T-test
    for the means of *two independent* samples of scores. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`ttest_ind`](generated/scipy.stats.ttest_ind.html#scipy.stats.ttest_ind
    "scipy.stats.ttest_ind")(a, b[, axis, equal_var, ...]) | 计算两个独立样本的T检验得分。 |'
- en: '| [`mannwhitneyu`](generated/scipy.stats.mannwhitneyu.html#scipy.stats.mannwhitneyu
    "scipy.stats.mannwhitneyu")(x, y[, use_continuity, ...]) | Perform the Mann-Whitney
    U rank test on two independent samples. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| [`mannwhitneyu`](generated/scipy.stats.mannwhitneyu.html#scipy.stats.mannwhitneyu
    "scipy.stats.mannwhitneyu")(x, y[, use_continuity, ...]) | 对两个独立样本执行Mann-Whitney
    U秩和检验。 |'
- en: '| [`bws_test`](generated/scipy.stats.bws_test.html#scipy.stats.bws_test "scipy.stats.bws_test")(x, y, *[, alternative, method])
    | Perform the Baumgartner-Weiss-Schindler test on two independent samples. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| [`bws_test`](generated/scipy.stats.bws_test.html#scipy.stats.bws_test "scipy.stats.bws_test")(x, y, *[, alternative, method])
    | 对两个独立样本执行Baumgartner-Weiss-Schindler测试。 |'
- en: '| [`ranksums`](generated/scipy.stats.ranksums.html#scipy.stats.ranksums "scipy.stats.ranksums")(x, y[, alternative, axis, ...])
    | Compute the Wilcoxon rank-sum statistic for two samples. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [`ranksums`](generated/scipy.stats.ranksums.html#scipy.stats.ranksums "scipy.stats.ranksums")(x, y[, alternative, axis, ...])
    | 计算威尔科克森秩和检验统计量，适用于两个样本。 |'
- en: '| [`brunnermunzel`](generated/scipy.stats.brunnermunzel.html#scipy.stats.brunnermunzel
    "scipy.stats.brunnermunzel")(x, y[, alternative, ...]) | Compute the Brunner-Munzel
    test on samples x and y. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [`brunnermunzel`](generated/scipy.stats.brunnermunzel.html#scipy.stats.brunnermunzel
    "scipy.stats.brunnermunzel")(x, y[, alternative, ...]) | 计算布伦纳-门泽尔（Brunner-Munzel）检验，适用于样本x和y。
    |'
- en: '| [`mood`](generated/scipy.stats.mood.html#scipy.stats.mood "scipy.stats.mood")(x, y[, axis, alternative])
    | Perform Mood''s test for equal scale parameters. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [`mood`](generated/scipy.stats.mood.html#scipy.stats.mood "scipy.stats.mood")(x, y[, axis, alternative])
    | 执行穆德（Mood）检验以检验尺度参数的等性。 |'
- en: '| [`ansari`](generated/scipy.stats.ansari.html#scipy.stats.ansari "scipy.stats.ansari")(x, y[, alternative, axis, ...])
    | Perform the Ansari-Bradley test for equal scale parameters. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [`ansari`](generated/scipy.stats.ansari.html#scipy.stats.ansari "scipy.stats.ansari")(x, y[, alternative, axis, ...])
    | 执行安萨里-布拉德利检验（Ansari-Bradley test）以检验尺度参数的等性。 |'
- en: '| [`cramervonmises_2samp`](generated/scipy.stats.cramervonmises_2samp.html#scipy.stats.cramervonmises_2samp
    "scipy.stats.cramervonmises_2samp")(x, y[, method, axis, ...]) | Perform the two-sample
    Cramér-von Mises test for goodness of fit. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [`cramervonmises_2samp`](generated/scipy.stats.cramervonmises_2samp.html#scipy.stats.cramervonmises_2samp
    "scipy.stats.cramervonmises_2samp")(x, y[, method, axis, ...]) | 执行双样本克拉默-冯·米泽斯检验（Cramér-von
    Mises test）。 |'
- en: '| [`epps_singleton_2samp`](generated/scipy.stats.epps_singleton_2samp.html#scipy.stats.epps_singleton_2samp
    "scipy.stats.epps_singleton_2samp")(x, y[, t, axis, ...]) | Compute the Epps-Singleton
    (ES) test statistic. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [`epps_singleton_2samp`](generated/scipy.stats.epps_singleton_2samp.html#scipy.stats.epps_singleton_2samp
    "scipy.stats.epps_singleton_2samp")(x, y[, t, axis, ...]) | 计算艾普斯-辛格尔顿（Epps-Singleton，ES）检验统计量。
    |'
- en: '| [`ks_2samp`](generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp "scipy.stats.ks_2samp")(data1, data2[, alternative, ...])
    | Performs the two-sample Kolmogorov-Smirnov test for goodness of fit. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [`ks_2samp`](generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp "scipy.stats.ks_2samp")(data1, data2[, alternative, ...])
    | 执行双样本科尔莫哥洛夫-斯米尔诺夫（Kolmogorov-Smirnov）检验。 |'
- en: '| [`kstest`](generated/scipy.stats.kstest.html#scipy.stats.kstest "scipy.stats.kstest")(rvs, cdf[, args, N, alternative, ...])
    | Performs the (one-sample or two-sample) Kolmogorov-Smirnov test for goodness
    of fit. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [`kstest`](generated/scipy.stats.kstest.html#scipy.stats.kstest "scipy.stats.kstest")(rvs, cdf[, args, N, alternative, ...])
    | 执行（单样本或双样本）科尔莫哥洛夫-斯米尔诺夫（Kolmogorov-Smirnov）检验。 |'
- en: Others are generalized to multiple samples.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 其他测试方法适用于多个样本。
- en: '| [`f_oneway`](generated/scipy.stats.f_oneway.html#scipy.stats.f_oneway "scipy.stats.f_oneway")(*samples[, axis])
    | Perform one-way ANOVA. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [`f_oneway`](generated/scipy.stats.f_oneway.html#scipy.stats.f_oneway "scipy.stats.f_oneway")(*samples[, axis])
    | 执行单因素方差分析（one-way ANOVA）。 |'
- en: '| [`tukey_hsd`](generated/scipy.stats.tukey_hsd.html#scipy.stats.tukey_hsd
    "scipy.stats.tukey_hsd")(*args) | Perform Tukey''s HSD test for equality of means
    over multiple treatments. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| [`tukey_hsd`](generated/scipy.stats.tukey_hsd.html#scipy.stats.tukey_hsd
    "scipy.stats.tukey_hsd")(*args) | 执行图基（Tukey）的HSD检验，用于比较多个处理的均值是否相等。 |'
- en: '| [`dunnett`](generated/scipy.stats.dunnett.html#scipy.stats.dunnett "scipy.stats.dunnett")(*samples, control[, alternative, ...])
    | Dunnett''s test: multiple comparisons of means against a control group. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| [`dunnett`](generated/scipy.stats.dunnett.html#scipy.stats.dunnett "scipy.stats.dunnett")(*samples, control[, alternative, ...])
    | 执行邓纳特（Dunnett）检验，对多个样本均值与控制组进行多重比较。 |'
- en: '| [`kruskal`](generated/scipy.stats.kruskal.html#scipy.stats.kruskal "scipy.stats.kruskal")(*samples[, nan_policy, axis, keepdims])
    | Compute the Kruskal-Wallis H-test for independent samples. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| [`kruskal`](generated/scipy.stats.kruskal.html#scipy.stats.kruskal "scipy.stats.kruskal")(*samples[, nan_policy, axis, keepdims])
    | 计算克鲁斯卡尔-沃利斯（Kruskal-Wallis H-test）独立样本的检验。 |'
- en: '| [`alexandergovern`](generated/scipy.stats.alexandergovern.html#scipy.stats.alexandergovern
    "scipy.stats.alexandergovern")(*samples[, nan_policy]) | Performs the Alexander
    Govern test. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| [`alexandergovern`](generated/scipy.stats.alexandergovern.html#scipy.stats.alexandergovern
    "scipy.stats.alexandergovern")(*samples[, nan_policy]) | 执行亚历山大·戈弗恩检验（Alexander
    Govern test）。 |'
- en: '| [`fligner`](generated/scipy.stats.fligner.html#scipy.stats.fligner "scipy.stats.fligner")(*samples[, center, proportiontocut, ...])
    | Perform Fligner-Killeen test for equality of variance. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [`fligner`](generated/scipy.stats.fligner.html#scipy.stats.fligner "scipy.stats.fligner")(*samples[, center, proportiontocut, ...])
    | 执行弗里格纳-基林检验（Fligner-Killeen test）以检验方差的等性。 |'
- en: '| [`levene`](generated/scipy.stats.levene.html#scipy.stats.levene "scipy.stats.levene")(*samples[, center, proportiontocut, ...])
    | Perform Levene test for equal variances. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [`levene`](generated/scipy.stats.levene.html#scipy.stats.levene "scipy.stats.levene")(*samples[, center, proportiontocut, ...])
    | 执行莱文检验（Levene test）以检验方差的等性。 |'
- en: '| [`bartlett`](generated/scipy.stats.bartlett.html#scipy.stats.bartlett "scipy.stats.bartlett")(*samples[, axis, nan_policy, keepdims])
    | Perform Bartlett''s test for equal variances. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`bartlett`](generated/scipy.stats.bartlett.html#scipy.stats.bartlett "scipy.stats.bartlett")(*samples[, axis, nan_policy, keepdims])
    | 执行巴特利特等方差检验。 |'
- en: '| [`median_test`](generated/scipy.stats.median_test.html#scipy.stats.median_test
    "scipy.stats.median_test")(*samples[, ties, correction, ...]) | Perform a Mood''s
    median test. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [`median_test`](generated/scipy.stats.median_test.html#scipy.stats.median_test
    "scipy.stats.median_test")(*samples[, ties, correction, ...]) | 执行穆德中位数检验。 |'
- en: '| [`friedmanchisquare`](generated/scipy.stats.friedmanchisquare.html#scipy.stats.friedmanchisquare
    "scipy.stats.friedmanchisquare")(*samples) | Compute the Friedman test for repeated
    samples. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [`friedmanchisquare`](generated/scipy.stats.friedmanchisquare.html#scipy.stats.friedmanchisquare
    "scipy.stats.friedmanchisquare")(*samples) | 计算重复样本的弗里德曼检验。 |'
- en: '| [`anderson_ksamp`](generated/scipy.stats.anderson_ksamp.html#scipy.stats.anderson_ksamp
    "scipy.stats.anderson_ksamp")(samples[, midrank, method]) | The Anderson-Darling
    test for k-samples. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [`anderson_ksamp`](generated/scipy.stats.anderson_ksamp.html#scipy.stats.anderson_ksamp
    "scipy.stats.anderson_ksamp")(samples[, midrank, method]) | k-样本的安德森-达宁检验。 |'
- en: Resampling and Monte Carlo Methods
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重抽样和蒙特卡洛方法
- en: The following functions can reproduce the p-value and confidence interval results
    of most of the functions above, and often produce accurate results in a wider
    variety of conditions. They can also be used to perform hypothesis tests and generate
    confidence intervals for custom statistics. This flexibility comes at the cost
    of greater computational requirements and stochastic results.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数可以重现大多数上述函数的 p 值和置信区间结果，并且通常能在更广泛的条件下产生准确的结果。它们还可以用于执行假设检验并为自定义统计量生成置信区间。这种灵活性的代价是更高的计算需求和随机结果。
- en: '| [`monte_carlo_test`](generated/scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test
    "scipy.stats.monte_carlo_test")(data, rvs, statistic, *[, ...]) | Perform a Monte
    Carlo hypothesis test. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| [`monte_carlo_test`](generated/scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test
    "scipy.stats.monte_carlo_test")(data, rvs, statistic, *[, ...]) | 执行蒙特卡洛假设检验。
    |'
- en: '| [`permutation_test`](generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test
    "scipy.stats.permutation_test")(data, statistic, *[, ...]) | Performs a permutation
    test of a given statistic on provided data. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [`permutation_test`](generated/scipy.stats.permutation_test.html#scipy.stats.permutation_test
    "scipy.stats.permutation_test")(data, statistic, *[, ...]) | 在提供的数据上执行置换检验。 |'
- en: '| [`bootstrap`](generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap
    "scipy.stats.bootstrap")(data, statistic, *[, n_resamples, ...]) | Compute a two-sided
    bootstrap confidence interval of a statistic. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| [`bootstrap`](generated/scipy.stats.bootstrap.html#scipy.stats.bootstrap
    "scipy.stats.bootstrap")(data, statistic, *[, n_resamples, ...]) | 计算统计量的双侧自举置信区间。
    |'
- en: Instances of the following object can be passed into some hypothesis test functions
    to perform a resampling or Monte Carlo version of the hypothesis test.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将以下对象的实例传递给一些假设检验函数，以执行假设检验的重抽样或蒙特卡洛版本。
- en: '| [`MonteCarloMethod`](generated/scipy.stats.MonteCarloMethod.html#scipy.stats.MonteCarloMethod
    "scipy.stats.MonteCarloMethod")([n_resamples, batch, rvs]) | Configuration information
    for a Monte Carlo hypothesis test. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| [`MonteCarloMethod`](generated/scipy.stats.MonteCarloMethod.html#scipy.stats.MonteCarloMethod
    "scipy.stats.MonteCarloMethod")([n_resamples, batch, rvs]) | 蒙特卡洛假设检验的配置信息。 |'
- en: '| [`PermutationMethod`](generated/scipy.stats.PermutationMethod.html#scipy.stats.PermutationMethod
    "scipy.stats.PermutationMethod")([n_resamples, batch, ...]) | Configuration information
    for a permutation hypothesis test. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| [`PermutationMethod`](generated/scipy.stats.PermutationMethod.html#scipy.stats.PermutationMethod
    "scipy.stats.PermutationMethod")([n_resamples, batch, ...]) | 排列假设检验的配置信息。 |'
- en: '| [`BootstrapMethod`](generated/scipy.stats.BootstrapMethod.html#scipy.stats.BootstrapMethod
    "scipy.stats.BootstrapMethod")([n_resamples, batch, ...]) | Configuration information
    for a bootstrap confidence interval. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [`BootstrapMethod`](generated/scipy.stats.BootstrapMethod.html#scipy.stats.BootstrapMethod
    "scipy.stats.BootstrapMethod")([n_resamples, batch, ...]) | 用于计算自举置信区间的配置信息。 |'
- en: Multiple Hypothesis Testing and Meta-Analysis
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多重假设检验和元分析
- en: These functions are for assessing the results of individual tests as a whole.
    Functions for performing specific multiple hypothesis tests (e.g. post hoc tests)
    are listed above.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数用于全面评估单个测试的结果。执行特定的多重假设检验（例如事后检验）的函数在上面列出。
- en: '| [`combine_pvalues`](generated/scipy.stats.combine_pvalues.html#scipy.stats.combine_pvalues
    "scipy.stats.combine_pvalues")(pvalues[, method, weights]) | Combine p-values
    from independent tests that bear upon the same hypothesis. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| [`combine_pvalues`](generated/scipy.stats.combine_pvalues.html#scipy.stats.combine_pvalues
    "scipy.stats.combine_pvalues")(pvalues[, method, weights]) | 从影响相同假设的独立测试中合并 p
    值。 |'
- en: '| [`false_discovery_control`](generated/scipy.stats.false_discovery_control.html#scipy.stats.false_discovery_control
    "scipy.stats.false_discovery_control")(ps, *[, axis, method]) | Adjust p-values
    to control the false discovery rate. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| [`false_discovery_control`](generated/scipy.stats.false_discovery_control.html#scipy.stats.false_discovery_control
    "scipy.stats.false_discovery_control")(ps, *[, axis, method]) | 调整 p 值以控制假发现率。
    |'
- en: The following functions are related to the tests above but do not belong in
    the above categories.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 下列函数与上述测试相关，但不属于上述分类。
- en: Quasi-Monte Carlo
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准蒙特卡洛
- en: '[Quasi-Monte Carlo submodule (`scipy.stats.qmc`)](stats.qmc.html)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准蒙特卡洛子模块 (`scipy.stats.qmc`)](stats.qmc.html)'
- en: '[Quasi-Monte Carlo](stats.qmc.html#quasi-monte-carlo)'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准蒙特卡洛](stats.qmc.html#quasi-monte-carlo)'
- en: '[Engines](stats.qmc.html#engines)'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[引擎](stats.qmc.html#engines)'
- en: '[scipy.stats.qmc.QMCEngine](generated/scipy.stats.qmc.QMCEngine.html)'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.QMCEngine](generated/scipy.stats.qmc.QMCEngine.html)'
- en: '[scipy.stats.qmc.Sobol](generated/scipy.stats.qmc.Sobol.html)'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.Sobol](generated/scipy.stats.qmc.Sobol.html)'
- en: '[scipy.stats.qmc.Halton](generated/scipy.stats.qmc.Halton.html)'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.Halton](generated/scipy.stats.qmc.Halton.html)'
- en: '[scipy.stats.qmc.LatinHypercube](generated/scipy.stats.qmc.LatinHypercube.html)'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.LatinHypercube](generated/scipy.stats.qmc.LatinHypercube.html)'
- en: '[scipy.stats.qmc.PoissonDisk](generated/scipy.stats.qmc.PoissonDisk.html)'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.PoissonDisk](generated/scipy.stats.qmc.PoissonDisk.html)'
- en: '[scipy.stats.qmc.MultinomialQMC](generated/scipy.stats.qmc.MultinomialQMC.html)'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.MultinomialQMC](generated/scipy.stats.qmc.MultinomialQMC.html)'
- en: '[scipy.stats.qmc.MultivariateNormalQMC](generated/scipy.stats.qmc.MultivariateNormalQMC.html)'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.MultivariateNormalQMC](generated/scipy.stats.qmc.MultivariateNormalQMC.html)'
- en: '[Helpers](stats.qmc.html#helpers)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[辅助工具](stats.qmc.html#helpers)'
- en: '[scipy.stats.qmc.discrepancy](generated/scipy.stats.qmc.discrepancy.html)'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.discrepancy](generated/scipy.stats.qmc.discrepancy.html)'
- en: '[scipy.stats.qmc.geometric_discrepancy](generated/scipy.stats.qmc.geometric_discrepancy.html)'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.geometric_discrepancy](generated/scipy.stats.qmc.geometric_discrepancy.html)'
- en: '[scipy.stats.qmc.update_discrepancy](generated/scipy.stats.qmc.update_discrepancy.html)'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.update_discrepancy](generated/scipy.stats.qmc.update_discrepancy.html)'
- en: '[scipy.stats.qmc.scale](generated/scipy.stats.qmc.scale.html)'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.qmc.scale](generated/scipy.stats.qmc.scale.html)'
- en: '[Introduction to Quasi-Monte Carlo](stats.qmc.html#introduction-to-quasi-monte-carlo)'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍准蒙特卡洛](stats.qmc.html#introduction-to-quasi-monte-carlo)'
- en: '[References](stats.qmc.html#references)'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参考文献](stats.qmc.html#references)'
- en: Contingency Tables
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列联表
- en: '[Contingency table functions (`scipy.stats.contingency`)](stats.contingency.html)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列联表函数 (`scipy.stats.contingency`)](stats.contingency.html)'
- en: '[scipy.stats.contingency.chi2_contingency](generated/scipy.stats.contingency.chi2_contingency.html)'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.chi2_contingency](generated/scipy.stats.contingency.chi2_contingency.html)'
- en: '[`chi2_contingency`](generated/scipy.stats.contingency.chi2_contingency.html#scipy.stats.contingency.chi2_contingency)'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`chi2_contingency`](generated/scipy.stats.contingency.chi2_contingency.html#scipy.stats.contingency.chi2_contingency)'
- en: '[scipy.stats.contingency.relative_risk](generated/scipy.stats.contingency.relative_risk.html)'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.relative_risk](generated/scipy.stats.contingency.relative_risk.html)'
- en: '[`relative_risk`](generated/scipy.stats.contingency.relative_risk.html#scipy.stats.contingency.relative_risk)'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`relative_risk`](generated/scipy.stats.contingency.relative_risk.html#scipy.stats.contingency.relative_risk)'
- en: '[scipy.stats.contingency.odds_ratio](generated/scipy.stats.contingency.odds_ratio.html)'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.odds_ratio](generated/scipy.stats.contingency.odds_ratio.html)'
- en: '[`odds_ratio`](generated/scipy.stats.contingency.odds_ratio.html#scipy.stats.contingency.odds_ratio)'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`odds_ratio`](generated/scipy.stats.contingency.odds_ratio.html#scipy.stats.contingency.odds_ratio)'
- en: '[scipy.stats.contingency.crosstab](generated/scipy.stats.contingency.crosstab.html)'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.crosstab](generated/scipy.stats.contingency.crosstab.html)'
- en: '[`crosstab`](generated/scipy.stats.contingency.crosstab.html#scipy.stats.contingency.crosstab)'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`crosstab`](generated/scipy.stats.contingency.crosstab.html#scipy.stats.contingency.crosstab)'
- en: '[scipy.stats.contingency.association](generated/scipy.stats.contingency.association.html)'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.association](generated/scipy.stats.contingency.association.html)'
- en: '[`association`](generated/scipy.stats.contingency.association.html#scipy.stats.contingency.association)'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`association`](generated/scipy.stats.contingency.association.html#scipy.stats.contingency.association)'
- en: '[scipy.stats.contingency.expected_freq](generated/scipy.stats.contingency.expected_freq.html)'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.expected_freq](generated/scipy.stats.contingency.expected_freq.html)'
- en: '[`expected_freq`](generated/scipy.stats.contingency.expected_freq.html#scipy.stats.contingency.expected_freq)'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`expected_freq`](generated/scipy.stats.contingency.expected_freq.html#scipy.stats.contingency.expected_freq)'
- en: '[scipy.stats.contingency.margins](generated/scipy.stats.contingency.margins.html)'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.contingency.margins](generated/scipy.stats.contingency.margins.html)'
- en: '[`margins`](generated/scipy.stats.contingency.margins.html#scipy.stats.contingency.margins)'
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`margins`](generated/scipy.stats.contingency.margins.html#scipy.stats.contingency.margins)'
- en: Masked statistics functions
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遮罩统计函数
- en: '[Statistical functions for masked arrays (`scipy.stats.mstats`)](stats.mstats.html)'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掩模数组的统计函数 (`scipy.stats.mstats`)](stats.mstats.html)'
- en: '[Summary statistics](stats.mstats.html#summary-statistics)'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[摘要统计](stats.mstats.html#summary-statistics)'
- en: '[scipy.stats.mstats.describe](generated/scipy.stats.mstats.describe.html)'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.describe](generated/scipy.stats.mstats.describe.html)'
- en: '[`describe`](generated/scipy.stats.mstats.describe.html#scipy.stats.mstats.describe)'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`describe`](generated/scipy.stats.mstats.describe.html#scipy.stats.mstats.describe)'
- en: '[scipy.stats.mstats.gmean](generated/scipy.stats.mstats.gmean.html)'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.gmean](generated/scipy.stats.mstats.gmean.html)'
- en: '[`gmean`](generated/scipy.stats.mstats.gmean.html#scipy.stats.mstats.gmean)'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`gmean`](generated/scipy.stats.mstats.gmean.html#scipy.stats.mstats.gmean)'
- en: '[scipy.stats.mstats.hmean](generated/scipy.stats.mstats.hmean.html)'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.hmean](generated/scipy.stats.mstats.hmean.html)'
- en: '[`hmean`](generated/scipy.stats.mstats.hmean.html#scipy.stats.mstats.hmean)'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hmean`](generated/scipy.stats.mstats.hmean.html#scipy.stats.mstats.hmean)'
- en: '[scipy.stats.mstats.kurtosis](generated/scipy.stats.mstats.kurtosis.html)'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kurtosis](generated/scipy.stats.mstats.kurtosis.html)'
- en: '[`kurtosis`](generated/scipy.stats.mstats.kurtosis.html#scipy.stats.mstats.kurtosis)'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kurtosis`](generated/scipy.stats.mstats.kurtosis.html#scipy.stats.mstats.kurtosis)'
- en: '[scipy.stats.mstats.mode](generated/scipy.stats.mstats.mode.html)'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.mode](generated/scipy.stats.mstats.mode.html)'
- en: '[`mode`](generated/scipy.stats.mstats.mode.html#scipy.stats.mstats.mode)'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mode`](generated/scipy.stats.mstats.mode.html#scipy.stats.mstats.mode)'
- en: '[scipy.stats.mstats.mquantiles](generated/scipy.stats.mstats.mquantiles.html)'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.mquantiles](generated/scipy.stats.mstats.mquantiles.html)'
- en: '[`mquantiles`](generated/scipy.stats.mstats.mquantiles.html#scipy.stats.mstats.mquantiles)'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mquantiles`](generated/scipy.stats.mstats.mquantiles.html#scipy.stats.mstats.mquantiles)'
- en: '[scipy.stats.mstats.hdmedian](generated/scipy.stats.mstats.hdmedian.html)'
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.hdmedian](generated/scipy.stats.mstats.hdmedian.html)'
- en: '[`hdmedian`](generated/scipy.stats.mstats.hdmedian.html#scipy.stats.mstats.hdmedian)'
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hdmedian`](generated/scipy.stats.mstats.hdmedian.html#scipy.stats.mstats.hdmedian)'
- en: '[scipy.stats.mstats.hdquantiles](generated/scipy.stats.mstats.hdquantiles.html)'
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.hdquantiles](generated/scipy.stats.mstats.hdquantiles.html)'
- en: '[`hdquantiles`](generated/scipy.stats.mstats.hdquantiles.html#scipy.stats.mstats.hdquantiles)'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hdquantiles`](generated/scipy.stats.mstats.hdquantiles.html#scipy.stats.mstats.hdquantiles)'
- en: '[scipy.stats.mstats.hdquantiles_sd](generated/scipy.stats.mstats.hdquantiles_sd.html)'
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.hdquantiles_sd](generated/scipy.stats.mstats.hdquantiles_sd.html)'
- en: '[`hdquantiles_sd`](generated/scipy.stats.mstats.hdquantiles_sd.html#scipy.stats.mstats.hdquantiles_sd)'
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`hdquantiles_sd`](generated/scipy.stats.mstats.hdquantiles_sd.html#scipy.stats.mstats.hdquantiles_sd)'
- en: '[scipy.stats.mstats.idealfourths](generated/scipy.stats.mstats.idealfourths.html)'
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.idealfourths](generated/scipy.stats.mstats.idealfourths.html)'
- en: '[`idealfourths`](generated/scipy.stats.mstats.idealfourths.html#scipy.stats.mstats.idealfourths)'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`idealfourths`](generated/scipy.stats.mstats.idealfourths.html#scipy.stats.mstats.idealfourths)'
- en: '[scipy.stats.mstats.plotting_positions](generated/scipy.stats.mstats.plotting_positions.html)'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.plotting_positions](generated/scipy.stats.mstats.plotting_positions.html)'
- en: '[`plotting_positions`](generated/scipy.stats.mstats.plotting_positions.html#scipy.stats.mstats.plotting_positions)'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`plotting_positions`](generated/scipy.stats.mstats.plotting_positions.html#scipy.stats.mstats.plotting_positions)'
- en: '[scipy.stats.mstats.meppf](generated/scipy.stats.mstats.meppf.html)'
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.meppf](generated/scipy.stats.mstats.meppf.html)'
- en: '[`meppf`](generated/scipy.stats.mstats.meppf.html#scipy.stats.mstats.meppf)'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`meppf`](generated/scipy.stats.mstats.meppf.html#scipy.stats.mstats.meppf)'
- en: '[scipy.stats.mstats.moment](generated/scipy.stats.mstats.moment.html)'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.moment](generated/scipy.stats.mstats.moment.html)'
- en: '[`moment`](generated/scipy.stats.mstats.moment.html#scipy.stats.mstats.moment)'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`moment`](generated/scipy.stats.mstats.moment.html#scipy.stats.mstats.moment)'
- en: '[scipy.stats.mstats.skew](generated/scipy.stats.mstats.skew.html)'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.skew](generated/scipy.stats.mstats.skew.html)'
- en: '[`skew`](generated/scipy.stats.mstats.skew.html#scipy.stats.mstats.skew)'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`skew`](generated/scipy.stats.mstats.skew.html#scipy.stats.mstats.skew)'
- en: '[scipy.stats.mstats.tmean](generated/scipy.stats.mstats.tmean.html)'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.tmean](generated/scipy.stats.mstats.tmean.html)'
- en: '[`tmean`](generated/scipy.stats.mstats.tmean.html#scipy.stats.mstats.tmean)'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tmean`](generated/scipy.stats.mstats.tmean.html#scipy.stats.mstats.tmean)'
- en: '[scipy.stats.mstats.tvar](generated/scipy.stats.mstats.tvar.html)'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.tvar](generated/scipy.stats.mstats.tvar.html)'
- en: '[`tvar`](generated/scipy.stats.mstats.tvar.html#scipy.stats.mstats.tvar)'
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tvar`](generated/scipy.stats.mstats.tvar.html#scipy.stats.mstats.tvar)'
- en: '[scipy.stats.mstats.tmin](generated/scipy.stats.mstats.tmin.html)'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.tmin](generated/scipy.stats.mstats.tmin.html)'
- en: '[`tmin`](generated/scipy.stats.mstats.tmin.html#scipy.stats.mstats.tmin)'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tmin`](generated/scipy.stats.mstats.tmin.html#scipy.stats.mstats.tmin)'
- en: '[scipy.stats.mstats.tmax](generated/scipy.stats.mstats.tmax.html)'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.tmax](generated/scipy.stats.mstats.tmax.html)'
- en: '[`tmax`](generated/scipy.stats.mstats.tmax.html#scipy.stats.mstats.tmax)'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tmax`](generated/scipy.stats.mstats.tmax.html#scipy.stats.mstats.tmax)'
- en: '[scipy.stats.mstats.tsem](generated/scipy.stats.mstats.tsem.html)'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.tsem](generated/scipy.stats.mstats.tsem.html)'
- en: '[`tsem`](generated/scipy.stats.mstats.tsem.html#scipy.stats.mstats.tsem)'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`tsem`](generated/scipy.stats.mstats.tsem.html#scipy.stats.mstats.tsem)'
- en: '[scipy.stats.mstats.variation](generated/scipy.stats.mstats.variation.html)'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.variation](generated/scipy.stats.mstats.variation.html)'
- en: '[`variation`](generated/scipy.stats.mstats.variation.html#scipy.stats.mstats.variation)'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`variation`](generated/scipy.stats.mstats.variation.html#scipy.stats.mstats.variation)'
- en: '[scipy.stats.mstats.find_repeats](generated/scipy.stats.mstats.find_repeats.html)'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.find_repeats](generated/scipy.stats.mstats.find_repeats.html)'
- en: '[`find_repeats`](generated/scipy.stats.mstats.find_repeats.html#scipy.stats.mstats.find_repeats)'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`find_repeats`](generated/scipy.stats.mstats.find_repeats.html#scipy.stats.mstats.find_repeats)'
- en: '[scipy.stats.mstats.sem](generated/scipy.stats.mstats.sem.html)'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.sem](generated/scipy.stats.mstats.sem.html)'
- en: '[`sem`](generated/scipy.stats.mstats.sem.html#scipy.stats.mstats.sem)'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sem`](generated/scipy.stats.mstats.sem.html#scipy.stats.mstats.sem)'
- en: '[scipy.stats.mstats.trimmed_mean](generated/scipy.stats.mstats.trimmed_mean.html)'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimmed_mean](generated/scipy.stats.mstats.trimmed_mean.html)'
- en: '[`trimmed_mean`](generated/scipy.stats.mstats.trimmed_mean.html#scipy.stats.mstats.trimmed_mean)'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimmed_mean`](generated/scipy.stats.mstats.trimmed_mean.html#scipy.stats.mstats.trimmed_mean)'
- en: '[scipy.stats.mstats.trimmed_mean_ci](generated/scipy.stats.mstats.trimmed_mean_ci.html)'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimmed_mean_ci](generated/scipy.stats.mstats.trimmed_mean_ci.html)'
- en: '[`trimmed_mean_ci`](generated/scipy.stats.mstats.trimmed_mean_ci.html#scipy.stats.mstats.trimmed_mean_ci)'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimmed_mean_ci`](generated/scipy.stats.mstats.trimmed_mean_ci.html#scipy.stats.mstats.trimmed_mean_ci)'
- en: '[scipy.stats.mstats.trimmed_std](generated/scipy.stats.mstats.trimmed_std.html)'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimmed_std](generated/scipy.stats.mstats.trimmed_std.html)'
- en: '[`trimmed_std`](generated/scipy.stats.mstats.trimmed_std.html#scipy.stats.mstats.trimmed_std)'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimmed_std`](generated/scipy.stats.mstats.trimmed_std.html#scipy.stats.mstats.trimmed_std)'
- en: '[scipy.stats.mstats.trimmed_var](generated/scipy.stats.mstats.trimmed_var.html)'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimmed_var](generated/scipy.stats.mstats.trimmed_var.html)'
- en: '[`trimmed_var`](generated/scipy.stats.mstats.trimmed_var.html#scipy.stats.mstats.trimmed_var)'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimmed_var`](generated/scipy.stats.mstats.trimmed_var.html#scipy.stats.mstats.trimmed_var)'
- en: '[Frequency statistics](stats.mstats.html#frequency-statistics)'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[频率统计](stats.mstats.html#frequency-statistics)'
- en: '[scipy.stats.mstats.scoreatpercentile](generated/scipy.stats.mstats.scoreatpercentile.html)'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.scoreatpercentile](generated/scipy.stats.mstats.scoreatpercentile.html)'
- en: '[`scoreatpercentile`](generated/scipy.stats.mstats.scoreatpercentile.html#scipy.stats.mstats.scoreatpercentile)'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scoreatpercentile`](generated/scipy.stats.mstats.scoreatpercentile.html#scipy.stats.mstats.scoreatpercentile)'
- en: '[Correlation functions](stats.mstats.html#correlation-functions)'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[相关函数](stats.mstats.html#correlation-functions)'
- en: '[scipy.stats.mstats.f_oneway](generated/scipy.stats.mstats.f_oneway.html)'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.f_oneway](generated/scipy.stats.mstats.f_oneway.html)'
- en: '[`f_oneway`](generated/scipy.stats.mstats.f_oneway.html#scipy.stats.mstats.f_oneway)'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`f_oneway`](generated/scipy.stats.mstats.f_oneway.html#scipy.stats.mstats.f_oneway)'
- en: '[scipy.stats.mstats.pearsonr](generated/scipy.stats.mstats.pearsonr.html)'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.pearsonr](generated/scipy.stats.mstats.pearsonr.html)'
- en: '[`pearsonr`](generated/scipy.stats.mstats.pearsonr.html#scipy.stats.mstats.pearsonr)'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pearsonr`](generated/scipy.stats.mstats.pearsonr.html#scipy.stats.mstats.pearsonr)'
- en: '[scipy.stats.mstats.spearmanr](generated/scipy.stats.mstats.spearmanr.html)'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.spearmanr](generated/scipy.stats.mstats.spearmanr.html)'
- en: '[`spearmanr`](generated/scipy.stats.mstats.spearmanr.html#scipy.stats.mstats.spearmanr)'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`spearmanr`](generated/scipy.stats.mstats.spearmanr.html#scipy.stats.mstats.spearmanr)'
- en: '[scipy.stats.mstats.pointbiserialr](generated/scipy.stats.mstats.pointbiserialr.html)'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.pointbiserialr](generated/scipy.stats.mstats.pointbiserialr.html)'
- en: '[`pointbiserialr`](generated/scipy.stats.mstats.pointbiserialr.html#scipy.stats.mstats.pointbiserialr)'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pointbiserialr`](generated/scipy.stats.mstats.pointbiserialr.html#scipy.stats.mstats.pointbiserialr)'
- en: '[scipy.stats.mstats.kendalltau](generated/scipy.stats.mstats.kendalltau.html)'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kendalltau](generated/scipy.stats.mstats.kendalltau.html)'
- en: '[`kendalltau`](generated/scipy.stats.mstats.kendalltau.html#scipy.stats.mstats.kendalltau)'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kendalltau`](generated/scipy.stats.mstats.kendalltau.html#scipy.stats.mstats.kendalltau)'
- en: '[scipy.stats.mstats.kendalltau_seasonal](generated/scipy.stats.mstats.kendalltau_seasonal.html)'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kendalltau_seasonal](generated/scipy.stats.mstats.kendalltau_seasonal.html)'
- en: '[`kendalltau_seasonal`](generated/scipy.stats.mstats.kendalltau_seasonal.html#scipy.stats.mstats.kendalltau_seasonal)'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kendalltau_seasonal`](generated/scipy.stats.mstats.kendalltau_seasonal.html#scipy.stats.mstats.kendalltau_seasonal)'
- en: '[scipy.stats.mstats.linregress](generated/scipy.stats.mstats.linregress.html)'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.linregress](generated/scipy.stats.mstats.linregress.html)'
- en: '[`linregress`](generated/scipy.stats.mstats.linregress.html#scipy.stats.mstats.linregress)'
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`linregress`](generated/scipy.stats.mstats.linregress.html#scipy.stats.mstats.linregress)'
- en: '[scipy.stats.mstats.siegelslopes](generated/scipy.stats.mstats.siegelslopes.html)'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.siegelslopes](generated/scipy.stats.mstats.siegelslopes.html)'
- en: '[`siegelslopes`](generated/scipy.stats.mstats.siegelslopes.html#scipy.stats.mstats.siegelslopes)'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`siegelslopes`](generated/scipy.stats.mstats.siegelslopes.html#scipy.stats.mstats.siegelslopes)'
- en: '[scipy.stats.mstats.theilslopes](generated/scipy.stats.mstats.theilslopes.html)'
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.theilslopes](generated/scipy.stats.mstats.theilslopes.html)'
- en: '[`theilslopes`](generated/scipy.stats.mstats.theilslopes.html#scipy.stats.mstats.theilslopes)'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`theilslopes`](generated/scipy.stats.mstats.theilslopes.html#scipy.stats.mstats.theilslopes)'
- en: '[scipy.stats.mstats.sen_seasonal_slopes](generated/scipy.stats.mstats.sen_seasonal_slopes.html)'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.sen_seasonal_slopes](generated/scipy.stats.mstats.sen_seasonal_slopes.html)'
- en: '[`sen_seasonal_slopes`](generated/scipy.stats.mstats.sen_seasonal_slopes.html#scipy.stats.mstats.sen_seasonal_slopes)'
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sen_seasonal_slopes`](generated/scipy.stats.mstats.sen_seasonal_slopes.html#scipy.stats.mstats.sen_seasonal_slopes)'
- en: '[Statistical tests](stats.mstats.html#statistical-tests)'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Statistical tests](stats.mstats.html#statistical-tests)'
- en: '[scipy.stats.mstats.ttest_1samp](generated/scipy.stats.mstats.ttest_1samp.html)'
  id: totrans-400
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ttest_1samp](generated/scipy.stats.mstats.ttest_1samp.html)'
- en: '[`ttest_1samp`](generated/scipy.stats.mstats.ttest_1samp.html#scipy.stats.mstats.ttest_1samp)'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ttest_1samp`](generated/scipy.stats.mstats.ttest_1samp.html#scipy.stats.mstats.ttest_1samp)'
- en: '[scipy.stats.mstats.ttest_onesamp](generated/scipy.stats.mstats.ttest_onesamp.html)'
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ttest_onesamp](generated/scipy.stats.mstats.ttest_onesamp.html)'
- en: '[`ttest_onesamp`](generated/scipy.stats.mstats.ttest_onesamp.html#scipy.stats.mstats.ttest_onesamp)'
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ttest_onesamp`](generated/scipy.stats.mstats.ttest_onesamp.html#scipy.stats.mstats.ttest_onesamp)'
- en: '[scipy.stats.mstats.ttest_ind](generated/scipy.stats.mstats.ttest_ind.html)'
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ttest_ind](generated/scipy.stats.mstats.ttest_ind.html)'
- en: '[`ttest_ind`](generated/scipy.stats.mstats.ttest_ind.html#scipy.stats.mstats.ttest_ind)'
  id: totrans-405
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ttest_ind`](generated/scipy.stats.mstats.ttest_ind.html#scipy.stats.mstats.ttest_ind)'
- en: '[scipy.stats.mstats.ttest_rel](generated/scipy.stats.mstats.ttest_rel.html)'
  id: totrans-406
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ttest_rel](generated/scipy.stats.mstats.ttest_rel.html)'
- en: '[`ttest_rel`](generated/scipy.stats.mstats.ttest_rel.html#scipy.stats.mstats.ttest_rel)'
  id: totrans-407
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ttest_rel`](generated/scipy.stats.mstats.ttest_rel.html#scipy.stats.mstats.ttest_rel)'
- en: '[scipy.stats.mstats.chisquare](generated/scipy.stats.mstats.chisquare.html)'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.chisquare](generated/scipy.stats.mstats.chisquare.html)'
- en: '[`chisquare`](generated/scipy.stats.mstats.chisquare.html#scipy.stats.mstats.chisquare)'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`chisquare`](generated/scipy.stats.mstats.chisquare.html#scipy.stats.mstats.chisquare)'
- en: '[scipy.stats.mstats.kstest](generated/scipy.stats.mstats.kstest.html)'
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kstest](generated/scipy.stats.mstats.kstest.html)'
- en: '[`kstest`](generated/scipy.stats.mstats.kstest.html#scipy.stats.mstats.kstest)'
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kstest`](generated/scipy.stats.mstats.kstest.html#scipy.stats.mstats.kstest)'
- en: '[scipy.stats.mstats.ks_2samp](generated/scipy.stats.mstats.ks_2samp.html)'
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ks_2samp](generated/scipy.stats.mstats.ks_2samp.html)'
- en: '[`ks_2samp`](generated/scipy.stats.mstats.ks_2samp.html#scipy.stats.mstats.ks_2samp)'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ks_2samp`](generated/scipy.stats.mstats.ks_2samp.html#scipy.stats.mstats.ks_2samp)'
- en: '[scipy.stats.mstats.ks_1samp](generated/scipy.stats.mstats.ks_1samp.html)'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ks_1samp](generated/scipy.stats.mstats.ks_1samp.html)'
- en: '[`ks_1samp`](generated/scipy.stats.mstats.ks_1samp.html#scipy.stats.mstats.ks_1samp)'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ks_1samp`](generated/scipy.stats.mstats.ks_1samp.html#scipy.stats.mstats.ks_1samp)'
- en: '[scipy.stats.mstats.ks_twosamp](generated/scipy.stats.mstats.ks_twosamp.html)'
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.ks_twosamp](generated/scipy.stats.mstats.ks_twosamp.html)'
- en: '[`ks_twosamp`](generated/scipy.stats.mstats.ks_twosamp.html#scipy.stats.mstats.ks_twosamp)'
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ks_twosamp`](generated/scipy.stats.mstats.ks_twosamp.html#scipy.stats.mstats.ks_twosamp)'
- en: '[scipy.stats.mstats.mannwhitneyu](generated/scipy.stats.mstats.mannwhitneyu.html)'
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.mannwhitneyu](generated/scipy.stats.mstats.mannwhitneyu.html)'
- en: '[`mannwhitneyu`](generated/scipy.stats.mstats.mannwhitneyu.html#scipy.stats.mstats.mannwhitneyu)'
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mannwhitneyu`](generated/scipy.stats.mstats.mannwhitneyu.html#scipy.stats.mstats.mannwhitneyu)'
- en: '[scipy.stats.mstats.rankdata](generated/scipy.stats.mstats.rankdata.html)'
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.rankdata](generated/scipy.stats.mstats.rankdata.html)'
- en: '[`rankdata`](generated/scipy.stats.mstats.rankdata.html#scipy.stats.mstats.rankdata)'
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`rankdata`](generated/scipy.stats.mstats.rankdata.html#scipy.stats.mstats.rankdata)'
- en: '[scipy.stats.mstats.kruskal](generated/scipy.stats.mstats.kruskal.html)'
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kruskal](generated/scipy.stats.mstats.kruskal.html)'
- en: '[`kruskal`](generated/scipy.stats.mstats.kruskal.html#scipy.stats.mstats.kruskal)'
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kruskal`](generated/scipy.stats.mstats.kruskal.html#scipy.stats.mstats.kruskal)'
- en: '[scipy.stats.mstats.kruskalwallis](generated/scipy.stats.mstats.kruskalwallis.html)'
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kruskalwallis](generated/scipy.stats.mstats.kruskalwallis.html)'
- en: '[`kruskalwallis`](generated/scipy.stats.mstats.kruskalwallis.html#scipy.stats.mstats.kruskalwallis)'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kruskalwallis`](generated/scipy.stats.mstats.kruskalwallis.html#scipy.stats.mstats.kruskalwallis)'
- en: '[scipy.stats.mstats.friedmanchisquare](generated/scipy.stats.mstats.friedmanchisquare.html)'
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.friedmanchisquare](generated/scipy.stats.mstats.friedmanchisquare.html#scipy.stats.mstats.friedmanchisquare)'
- en: '[`friedmanchisquare`](generated/scipy.stats.mstats.friedmanchisquare.html#scipy.stats.mstats.friedmanchisquare)'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`friedmanchisquare`](generated/scipy.stats.mstats.friedmanchisquare.html#scipy.stats.mstats.friedmanchisquare)'
- en: '[scipy.stats.mstats.brunnermunzel](generated/scipy.stats.mstats.brunnermunzel.html)'
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.brunnermunzel](generated/scipy.stats.mstats.brunnermunzel.html#scipy.stats.mstats.brunnermunzel)'
- en: '[`brunnermunzel`](generated/scipy.stats.mstats.brunnermunzel.html#scipy.stats.mstats.brunnermunzel)'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`brunnermunzel`](generated/scipy.stats.mstats.brunnermunzel.html#scipy.stats.mstats.brunnermunzel)'
- en: '[scipy.stats.mstats.skewtest](generated/scipy.stats.mstats.skewtest.html)'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.skewtest](generated/scipy.stats.mstats.skewtest.html#scipy.stats.mstats.skewtest)'
- en: '[`skewtest`](generated/scipy.stats.mstats.skewtest.html#scipy.stats.mstats.skewtest)'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`skewtest`](generated/scipy.stats.mstats.skewtest.html#scipy.stats.mstats.skewtest)'
- en: '[scipy.stats.mstats.kurtosistest](generated/scipy.stats.mstats.kurtosistest.html)'
  id: totrans-432
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.kurtosistest](generated/scipy.stats.mstats.kurtosistest.html#scipy.stats.mstats.kurtosistest)'
- en: '[`kurtosistest`](generated/scipy.stats.mstats.kurtosistest.html#scipy.stats.mstats.kurtosistest)'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`kurtosistest`](generated/scipy.stats.mstats.kurtosistest.html#scipy.stats.mstats.kurtosistest)'
- en: '[scipy.stats.mstats.normaltest](generated/scipy.stats.mstats.normaltest.html)'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.normaltest](generated/scipy.stats.mstats.normaltest.html#scipy.stats.mstats.normaltest)'
- en: '[`normaltest`](generated/scipy.stats.mstats.normaltest.html#scipy.stats.mstats.normaltest)'
  id: totrans-435
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`normaltest`](generated/scipy.stats.mstats.normaltest.html#scipy.stats.mstats.normaltest)'
- en: '[Transformations](stats.mstats.html#transformations)'
  id: totrans-436
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Transformations](stats.mstats.html#transformations)'
- en: '[scipy.stats.mstats.obrientransform](generated/scipy.stats.mstats.obrientransform.html)'
  id: totrans-437
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.obrientransform](generated/scipy.stats.mstats.obrientransform.html#scipy.stats.mstats.obrientransform)'
- en: '[`obrientransform`](generated/scipy.stats.mstats.obrientransform.html#scipy.stats.mstats.obrientransform)'
  id: totrans-438
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`obrientransform`](generated/scipy.stats.mstats.obrientransform.html#scipy.stats.mstats.obrientransform)'
- en: '[scipy.stats.mstats.trim](generated/scipy.stats.mstats.trim.html)'
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trim](generated/scipy.stats.mstats.trim.html#scipy.stats.mstats.trim)'
- en: '[`trim`](generated/scipy.stats.mstats.trim.html#scipy.stats.mstats.trim)'
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trim`](generated/scipy.stats.mstats.trim.html#scipy.stats.mstats.trim)'
- en: '[scipy.stats.mstats.trima](generated/scipy.stats.mstats.trima.html)'
  id: totrans-441
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trima](generated/scipy.stats.mstats.trima.html#scipy.stats.mstats.trima)'
- en: '[`trima`](generated/scipy.stats.mstats.trima.html#scipy.stats.mstats.trima)'
  id: totrans-442
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trima`](generated/scipy.stats.mstats.trima.html#scipy.stats.mstats.trima)'
- en: '[scipy.stats.mstats.trimmed_stde](generated/scipy.stats.mstats.trimmed_stde.html)'
  id: totrans-443
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimmed_stde](generated/scipy.stats.mstats.trimmed_stde.html#scipy.stats.mstats.trimmed_stde)'
- en: '[`trimmed_stde`](generated/scipy.stats.mstats.trimmed_stde.html#scipy.stats.mstats.trimmed_stde)'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimmed_stde`](generated/scipy.stats.mstats.trimmed_stde.html#scipy.stats.mstats.trimmed_stde)'
- en: '[scipy.stats.mstats.trimr](generated/scipy.stats.mstats.trimr.html)'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimr](generated/scipy.stats.mstats.trimr.html#scipy.stats.mstats.trimr)'
- en: '[`trimr`](generated/scipy.stats.mstats.trimr.html#scipy.stats.mstats.trimr)'
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimr`](generated/scipy.stats.mstats.trimr.html#scipy.stats.mstats.trimr)'
- en: '[scipy.stats.mstats.trimtail](generated/scipy.stats.mstats.trimtail.html)'
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimtail](generated/scipy.stats.mstats.trimtail.html#scipy.stats.mstats.trimtail)'
- en: '[`trimtail`](generated/scipy.stats.mstats.trimtail.html#scipy.stats.mstats.trimtail)'
  id: totrans-448
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimtail`](generated/scipy.stats.mstats.trimtail.html#scipy.stats.mstats.trimtail)'
- en: '[scipy.stats.mstats.trimboth](generated/scipy.stats.mstats.trimboth.html)'
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.trimboth](generated/scipy.stats.mstats.trimboth.html#scipy.stats.mstats.trimboth)'
- en: '[`trimboth`](generated/scipy.stats.mstats.trimboth.html#scipy.stats.mstats.trimboth)'
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`trimboth`](generated/scipy.stats.mstats.trimboth.html#scipy.stats.mstats.trimboth)'
- en: '[scipy.stats.mstats.winsorize](generated/scipy.stats.mstats.winsorize.html)'
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.winsorize](generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize)'
- en: '[`winsorize`](generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize)'
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`winsorize`](generated/scipy.stats.mstats.winsorize.html#scipy.stats.mstats.winsorize)'
- en: '[scipy.stats.mstats.zmap](generated/scipy.stats.mstats.zmap.html)'
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.zmap](generated/scipy.stats.mstats.zmap.html#scipy.stats.mstats.zmap)'
- en: '[`zmap`](generated/scipy.stats.mstats.zmap.html#scipy.stats.mstats.zmap)'
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`zmap`](generated/scipy.stats.mstats.zmap.html#scipy.stats.mstats.zmap)'
- en: '[scipy.stats.mstats.zscore](generated/scipy.stats.mstats.zscore.html)'
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.zscore](generated/scipy.stats.mstats.zscore.html#scipy.stats.mstats.zscore)'
- en: '[`zscore`](generated/scipy.stats.mstats.zscore.html#scipy.stats.mstats.zscore)'
  id: totrans-456
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`zscore`](generated/scipy.stats.mstats.zscore.html#scipy.stats.mstats.zscore)'
- en: '[Other](stats.mstats.html#other)'
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Other](stats.mstats.html#other)'
- en: '[scipy.stats.mstats.argstoarray](generated/scipy.stats.mstats.argstoarray.html)'
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.argstoarray](generated/scipy.stats.mstats.argstoarray.html#scipy.stats.mstats.argstoarray)'
- en: '[`argstoarray`](generated/scipy.stats.mstats.argstoarray.html#scipy.stats.mstats.argstoarray)'
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`argstoarray`](generated/scipy.stats.mstats.argstoarray.html#scipy.stats.mstats.argstoarray)'
- en: '[scipy.stats.mstats.count_tied_groups](generated/scipy.stats.mstats.count_tied_groups.html)'
  id: totrans-460
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.count_tied_groups](generated/scipy.stats.mstats.count_tied_groups.html#scipy.stats.mstats.count_tied_groups)'
- en: '[`count_tied_groups`](generated/scipy.stats.mstats.count_tied_groups.html#scipy.stats.mstats.count_tied_groups)'
  id: totrans-461
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`count_tied_groups`](generated/scipy.stats.mstats.count_tied_groups.html#scipy.stats.mstats.count_tied_groups)'
- en: '[scipy.stats.mstats.msign](generated/scipy.stats.mstats.msign.html)'
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.msign](generated/scipy.stats.mstats.msign.html#scipy.stats.mstats.msign)'
- en: '[`msign`](generated/scipy.stats.mstats.msign.html#scipy.stats.mstats.msign)'
  id: totrans-463
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`msign`](generated/scipy.stats.mstats.msign.html#scipy.stats.mstats.msign)'
- en: '[scipy.stats.mstats.compare_medians_ms](generated/scipy.stats.mstats.compare_medians_ms.html)'
  id: totrans-464
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.compare_medians_ms](generated/scipy.stats.mstats.compare_medians_ms.html)'
- en: '[`compare_medians_ms`](generated/scipy.stats.mstats.compare_medians_ms.html#scipy.stats.mstats.compare_medians_ms)'
  id: totrans-465
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`compare_medians_ms`](generated/scipy.stats.mstats.compare_medians_ms.html#scipy.stats.mstats.compare_medians_ms)'
- en: '[scipy.stats.mstats.median_cihs](generated/scipy.stats.mstats.median_cihs.html)'
  id: totrans-466
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.median_cihs](generated/scipy.stats.mstats.median_cihs.html)'
- en: '[`median_cihs`](generated/scipy.stats.mstats.median_cihs.html#scipy.stats.mstats.median_cihs)'
  id: totrans-467
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`median_cihs`](generated/scipy.stats.mstats.median_cihs.html#scipy.stats.mstats.median_cihs)'
- en: '[scipy.stats.mstats.mjci](generated/scipy.stats.mstats.mjci.html)'
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.mjci](generated/scipy.stats.mstats.mjci.html)'
- en: '[`mjci`](generated/scipy.stats.mstats.mjci.html#scipy.stats.mstats.mjci)'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mjci`](generated/scipy.stats.mstats.mjci.html#scipy.stats.mstats.mjci)'
- en: '[scipy.stats.mstats.mquantiles_cimj](generated/scipy.stats.mstats.mquantiles_cimj.html)'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.mquantiles_cimj](generated/scipy.stats.mstats.mquantiles_cimj.html)'
- en: '[`mquantiles_cimj`](generated/scipy.stats.mstats.mquantiles_cimj.html#scipy.stats.mstats.mquantiles_cimj)'
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mquantiles_cimj`](generated/scipy.stats.mstats.mquantiles_cimj.html#scipy.stats.mstats.mquantiles_cimj)'
- en: '[scipy.stats.mstats.rsh](generated/scipy.stats.mstats.rsh.html)'
  id: totrans-472
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.mstats.rsh](generated/scipy.stats.mstats.rsh.html)'
- en: '[`rsh`](generated/scipy.stats.mstats.rsh.html#scipy.stats.mstats.rsh)'
  id: totrans-473
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`rsh`](generated/scipy.stats.mstats.rsh.html#scipy.stats.mstats.rsh)'
- en: Other statistical functionality
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他统计功能
- en: Transformations
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变换
- en: '| [`boxcox`](generated/scipy.stats.boxcox.html#scipy.stats.boxcox "scipy.stats.boxcox")(x[, lmbda, alpha, optimizer])
    | Return a dataset transformed by a Box-Cox power transformation. |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| [`boxcox`](generated/scipy.stats.boxcox.html#scipy.stats.boxcox "scipy.stats.boxcox")(x[, lmbda, alpha, optimizer])
    | 返回经 Box-Cox 幂变换后的数据集。 |'
- en: '| [`boxcox_normmax`](generated/scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax
    "scipy.stats.boxcox_normmax")(x[, brack, method, optimizer]) | Compute optimal
    Box-Cox transform parameter for input data. |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| [`boxcox_normmax`](generated/scipy.stats.boxcox_normmax.html#scipy.stats.boxcox_normmax
    "scipy.stats.boxcox_normmax")(x[, brack, method, optimizer]) | 计算输入数据的最佳 Box-Cox
    变换参数。'
- en: '| [`boxcox_llf`](generated/scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf
    "scipy.stats.boxcox_llf")(lmb, data) | The boxcox log-likelihood function. |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| [`boxcox_llf`](generated/scipy.stats.boxcox_llf.html#scipy.stats.boxcox_llf
    "scipy.stats.boxcox_llf")(lmb, data) | Box-Cox 对数似然函数。 |'
- en: '| [`yeojohnson`](generated/scipy.stats.yeojohnson.html#scipy.stats.yeojohnson
    "scipy.stats.yeojohnson")(x[, lmbda]) | Return a dataset transformed by a Yeo-Johnson
    power transformation. |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| [`yeojohnson`](generated/scipy.stats.yeojohnson.html#scipy.stats.yeojohnson
    "scipy.stats.yeojohnson")(x[, lmbda]) | 返回经 Yeo-Johnson 幂变换后的数据集。 |'
- en: '| [`yeojohnson_normmax`](generated/scipy.stats.yeojohnson_normmax.html#scipy.stats.yeojohnson_normmax
    "scipy.stats.yeojohnson_normmax")(x[, brack]) | Compute optimal Yeo-Johnson transform
    parameter. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| [`yeojohnson_normmax`](generated/scipy.stats.yeojohnson_normmax.html#scipy.stats.yeojohnson_normmax
    "scipy.stats.yeojohnson_normmax")(x[, brack]) | 计算最佳 Yeo-Johnson 变换参数。 |'
- en: '| [`yeojohnson_llf`](generated/scipy.stats.yeojohnson_llf.html#scipy.stats.yeojohnson_llf
    "scipy.stats.yeojohnson_llf")(lmb, data) | The yeojohnson log-likelihood function.
    |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| [`yeojohnson_llf`](generated/scipy.stats.yeojohnson_llf.html#scipy.stats.yeojohnson_llf
    "scipy.stats.yeojohnson_llf")(lmb, data) | Yeo-Johnson 对数似然函数。 |'
- en: '| [`obrientransform`](generated/scipy.stats.obrientransform.html#scipy.stats.obrientransform
    "scipy.stats.obrientransform")(*samples) | Compute the O''Brien transform on input
    data (any number of arrays). |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| [`obrientransform`](generated/scipy.stats.obrientransform.html#scipy.stats.obrientransform
    "scipy.stats.obrientransform")(*samples) | 对输入数据执行 O''Brien 变换（任意数量的数组）。 |'
- en: '| [`sigmaclip`](generated/scipy.stats.sigmaclip.html#scipy.stats.sigmaclip
    "scipy.stats.sigmaclip")(a[, low, high]) | Perform iterative sigma-clipping of
    array elements. |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| [`sigmaclip`](generated/scipy.stats.sigmaclip.html#scipy.stats.sigmaclip
    "scipy.stats.sigmaclip")(a[, low, high]) | 执行数组元素的迭代 sigma-clipping。 |'
- en: '| [`trimboth`](generated/scipy.stats.trimboth.html#scipy.stats.trimboth "scipy.stats.trimboth")(a, proportiontocut[, axis])
    | Slice off a proportion of items from both ends of an array. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| [`trimboth`](generated/scipy.stats.trimboth.html#scipy.stats.trimboth "scipy.stats.trimboth")(a, proportiontocut[, axis])
    | 从数组的两端切掉一定比例的项目。 |'
- en: '| [`trim1`](generated/scipy.stats.trim1.html#scipy.stats.trim1 "scipy.stats.trim1")(a, proportiontocut[, tail, axis])
    | Slice off a proportion from ONE end of the passed array distribution. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| [`trim1`](generated/scipy.stats.trim1.html#scipy.stats.trim1 "scipy.stats.trim1")(a, proportiontocut[, tail, axis])
    | 从数组分布的一个端切掉一定比例。 |'
- en: '| [`zmap`](generated/scipy.stats.zmap.html#scipy.stats.zmap "scipy.stats.zmap")(scores, compare[, axis, ddof, nan_policy])
    | Calculate the relative z-scores. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| [`zmap`](generated/scipy.stats.zmap.html#scipy.stats.zmap "scipy.stats.zmap")(scores, compare[, axis, ddof, nan_policy])
    | 计算相对z分数。 |'
- en: '| [`zscore`](generated/scipy.stats.zscore.html#scipy.stats.zscore "scipy.stats.zscore")(a[, axis, ddof, nan_policy])
    | Compute the z score. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| [`zscore`](generated/scipy.stats.zscore.html#scipy.stats.zscore "scipy.stats.zscore")(a[, axis, ddof, nan_policy])
    | 计算z分数。 |'
- en: '| [`gzscore`](generated/scipy.stats.gzscore.html#scipy.stats.gzscore "scipy.stats.gzscore")(a, *[, axis, ddof, nan_policy])
    | Compute the geometric standard score. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| [`gzscore`](generated/scipy.stats.gzscore.html#scipy.stats.gzscore "scipy.stats.gzscore")(a, *[, axis, ddof, nan_policy])
    | 计算几何标准分数。 |'
- en: Statistical distances
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计距离
- en: '| [`wasserstein_distance`](generated/scipy.stats.wasserstein_distance.html#scipy.stats.wasserstein_distance
    "scipy.stats.wasserstein_distance")(u_values, v_values[, ...]) | Compute the first
    Wasserstein distance between two 1D distributions. |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| [`wasserstein_distance`](generated/scipy.stats.wasserstein_distance.html#scipy.stats.wasserstein_distance
    "scipy.stats.wasserstein_distance")(u_values, v_values[, ...]) | 计算两个1D分布之间的Wasserstein距离。
    |'
- en: '| [`energy_distance`](generated/scipy.stats.energy_distance.html#scipy.stats.energy_distance
    "scipy.stats.energy_distance")(u_values, v_values[, ...]) | Compute the energy
    distance between two 1D distributions. |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
  zh: '| [`energy_distance`](generated/scipy.stats.energy_distance.html#scipy.stats.energy_distance
    "scipy.stats.energy_distance")(u_values, v_values[, ...]) | 计算两个1D分布之间的能量距离。 |'
- en: Sampling
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽样
- en: '[Random Number Generators (`scipy.stats.sampling`)](stats.sampling.html)'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Random Number Generators (`scipy.stats.sampling`)](stats.sampling.html)'
- en: '[Generators Wrapped](stats.sampling.html#generators-wrapped)'
  id: totrans-494
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[包装的生成器](stats.sampling.html#generators-wrapped)'
- en: '[For continuous distributions](stats.sampling.html#for-continuous-distributions)'
  id: totrans-495
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[连续分布](stats.sampling.html#for-continuous-distributions)'
- en: '[scipy.stats.sampling.NumericalInverseHermite](generated/scipy.stats.sampling.NumericalInverseHermite.html)'
  id: totrans-496
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.NumericalInverseHermite](generated/scipy.stats.sampling.NumericalInverseHermite.html)'
- en: '[scipy.stats.sampling.NumericalInversePolynomial](generated/scipy.stats.sampling.NumericalInversePolynomial.html)'
  id: totrans-497
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.NumericalInversePolynomial](generated/scipy.stats.sampling.NumericalInversePolynomial.html)'
- en: '[scipy.stats.sampling.TransformedDensityRejection](generated/scipy.stats.sampling.TransformedDensityRejection.html)'
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.TransformedDensityRejection](generated/scipy.stats.sampling.TransformedDensityRejection.html)'
- en: '[scipy.stats.sampling.SimpleRatioUniforms](generated/scipy.stats.sampling.SimpleRatioUniforms.html)'
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.SimpleRatioUniforms](generated/scipy.stats.sampling.SimpleRatioUniforms.html)'
- en: '[scipy.stats.sampling.RatioUniforms](generated/scipy.stats.sampling.RatioUniforms.html)'
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.RatioUniforms](generated/scipy.stats.sampling.RatioUniforms.html)'
- en: '[For discrete distributions](stats.sampling.html#for-discrete-distributions)'
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[离散分布](stats.sampling.html#for-discrete-distributions)'
- en: '[scipy.stats.sampling.DiscreteAliasUrn](generated/scipy.stats.sampling.DiscreteAliasUrn.html)'
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.DiscreteAliasUrn](generated/scipy.stats.sampling.DiscreteAliasUrn.html)'
- en: '[scipy.stats.sampling.DiscreteGuideTable](generated/scipy.stats.sampling.DiscreteGuideTable.html)'
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.DiscreteGuideTable](generated/scipy.stats.sampling.DiscreteGuideTable.html)'
- en: '[Warnings / Errors used in `scipy.stats.sampling`](stats.sampling.html#warnings-errors-used-in-scipy-stats-sampling)'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 `scipy.stats.sampling` 中使用的警告/错误](stats.sampling.html#warnings-errors-used-in-scipy-stats-sampling)'
- en: '[scipy.stats.sampling.UNURANError](generated/scipy.stats.sampling.UNURANError.html)'
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.UNURANError](generated/scipy.stats.sampling.UNURANError.html)'
- en: '[Generators for pre-defined distributions](stats.sampling.html#generators-for-pre-defined-distributions)'
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[预定义分布的生成器](stats.sampling.html#generators-for-pre-defined-distributions)'
- en: '[scipy.stats.sampling.FastGeneratorInversion](generated/scipy.stats.sampling.FastGeneratorInversion.html)'
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion](generated/scipy.stats.sampling.FastGeneratorInversion.html)'
- en: '[`FastGeneratorInversion`](generated/scipy.stats.sampling.FastGeneratorInversion.html#scipy.stats.sampling.FastGeneratorInversion)'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FastGeneratorInversion`](generated/scipy.stats.sampling.FastGeneratorInversion.html#scipy.stats.sampling.FastGeneratorInversion)'
- en: '[scipy.stats.sampling.FastGeneratorInversion.evaluate_error](generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html)'
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion.evaluate_error](generated/scipy.stats.sampling.FastGeneratorInversion.evaluate_error.html)'
- en: '[scipy.stats.sampling.FastGeneratorInversion.ppf](generated/scipy.stats.sampling.FastGeneratorInversion.ppf.html)'
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion.ppf](generated/scipy.stats.sampling.FastGeneratorInversion.ppf.html)'
- en: '[scipy.stats.sampling.FastGeneratorInversion.qrvs](generated/scipy.stats.sampling.FastGeneratorInversion.qrvs.html)'
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion.qrvs](generated/scipy.stats.sampling.FastGeneratorInversion.qrvs.html)'
- en: '[scipy.stats.sampling.FastGeneratorInversion.rvs](generated/scipy.stats.sampling.FastGeneratorInversion.rvs.html)'
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion.rvs](generated/scipy.stats.sampling.FastGeneratorInversion.rvs.html)'
- en: '[scipy.stats.sampling.FastGeneratorInversion.support](generated/scipy.stats.sampling.FastGeneratorInversion.support.html)'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats.sampling.FastGeneratorInversion.support](generated/scipy.stats.sampling.FastGeneratorInversion.support.html)'
- en: Random variate generation / CDF Inversion
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机变量生成/累积分布函数反转
- en: '| [`rvs_ratio_uniforms`](generated/scipy.stats.rvs_ratio_uniforms.html#scipy.stats.rvs_ratio_uniforms
    "scipy.stats.rvs_ratio_uniforms")(pdf, umax, vmin, vmax[, ...]) | Generate random
    samples from a probability density function using the ratio-of-uniforms method.
    |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| [`rvs_ratio_uniforms`](generated/scipy.stats.rvs_ratio_uniforms.html#scipy.stats.rvs_ratio_uniforms
    "scipy.stats.rvs_ratio_uniforms")(pdf, umax, vmin, vmax[, ...]) | 使用比例-均匀分布方法从概率密度函数生成随机样本。
    |'
- en: Fitting / Survival Analysis
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拟合/生存分析
- en: '| [`fit`](generated/scipy.stats.fit.html#scipy.stats.fit "scipy.stats.fit")(dist, data[, bounds, guess, method, ...])
    | Fit a discrete or continuous distribution to data |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| [`fit`](generated/scipy.stats.fit.html#scipy.stats.fit "scipy.stats.fit")(dist, data[, bounds, guess, method, ...])
    | 将离散或连续分布拟合到数据。 |'
- en: '| [`ecdf`](generated/scipy.stats.ecdf.html#scipy.stats.ecdf "scipy.stats.ecdf")(sample)
    | Empirical cumulative distribution function of a sample. |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| [`ecdf`](generated/scipy.stats.ecdf.html#scipy.stats.ecdf "scipy.stats.ecdf")(sample)
    | 样本的经验累积分布函数。 |'
- en: '| [`logrank`](generated/scipy.stats.logrank.html#scipy.stats.logrank "scipy.stats.logrank")(x, y[, alternative])
    | Compare the survival distributions of two samples via the logrank test. |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| [`logrank`](generated/scipy.stats.logrank.html#scipy.stats.logrank "scipy.stats.logrank")(x, y[, alternative])
    | 通过对数秩检验比较两个样本的生存分布。 |'
- en: Directional statistical functions
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方向统计函数
- en: '| [`directional_stats`](generated/scipy.stats.directional_stats.html#scipy.stats.directional_stats
    "scipy.stats.directional_stats")(samples, *[, axis, normalize]) | Computes sample
    statistics for directional data. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| [`directional_stats`](generated/scipy.stats.directional_stats.html#scipy.stats.directional_stats
    "scipy.stats.directional_stats")(samples, *[, axis, normalize]) | 计算方向数据的样本统计量。
    |'
- en: '| [`circmean`](generated/scipy.stats.circmean.html#scipy.stats.circmean "scipy.stats.circmean")(samples[, high, low, axis, ...])
    | Compute the circular mean for samples in a range. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| [`circmean`](generated/scipy.stats.circmean.html#scipy.stats.circmean "scipy.stats.circmean")(samples[, high, low, axis, ...])
    | 计算假定在范围内的样本的圆形平均值。 |'
- en: '| [`circvar`](generated/scipy.stats.circvar.html#scipy.stats.circvar "scipy.stats.circvar")(samples[, high, low, axis, ...])
    | Compute the circular variance for samples assumed to be in a range. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| [`circvar`](generated/scipy.stats.circvar.html#scipy.stats.circvar "scipy.stats.circvar")(samples[, high, low, axis, ...])
    | 计算假定在范围内的样本的圆形方差。 |'
- en: '| [`circstd`](generated/scipy.stats.circstd.html#scipy.stats.circstd "scipy.stats.circstd")(samples[, high, low, axis, ...])
    | Compute the circular standard deviation for samples assumed to be in the range
    [low to high]. |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| [`circstd`](generated/scipy.stats.circstd.html#scipy.stats.circstd "scipy.stats.circstd")(samples[, high, low, axis, ...])
    | 计算假定在范围 [low to high] 内的样本的圆形标准差。 |'
- en: Sensitivity Analysis
  id: totrans-525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敏感性分析
- en: '| [`sobol_indices`](generated/scipy.stats.sobol_indices.html#scipy.stats.sobol_indices
    "scipy.stats.sobol_indices")(*, func, n[, dists, method, ...]) | Global sensitivity
    indices of Sobol''. |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| [`sobol_indices`](generated/scipy.stats.sobol_indices.html#scipy.stats.sobol_indices
    "scipy.stats.sobol_indices")(*, func, n[, dists, method, ...]) | Sobol'' 的全局敏感性指数。
    |'
- en: Plot-tests
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图检验
- en: '| [`ppcc_max`](generated/scipy.stats.ppcc_max.html#scipy.stats.ppcc_max "scipy.stats.ppcc_max")(x[, brack, dist])
    | Calculate the shape parameter that maximizes the PPCC. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| [`ppcc_max`](generated/scipy.stats.ppcc_max.html#scipy.stats.ppcc_max "scipy.stats.ppcc_max")(x[, brack, dist])
    | 计算最大化 PPCC 的形状参数。 |'
- en: '| [`ppcc_plot`](generated/scipy.stats.ppcc_plot.html#scipy.stats.ppcc_plot
    "scipy.stats.ppcc_plot")(x, a, b[, dist, plot, N]) | Calculate and optionally
    plot probability plot correlation coefficient. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| [`ppcc_plot`](generated/scipy.stats.ppcc_plot.html#scipy.stats.ppcc_plot
    "scipy.stats.ppcc_plot")(x, a, b[, dist, plot, N]) | 计算并可选择绘制概率图相关系数。 |'
- en: '| [`probplot`](generated/scipy.stats.probplot.html#scipy.stats.probplot "scipy.stats.probplot")(x[, sparams, dist, fit, plot, rvalue])
    | Calculate quantiles for a probability plot, and optionally show the plot. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| [`probplot`](generated/scipy.stats.probplot.html#scipy.stats.probplot "scipy.stats.probplot")(x[, sparams, dist, fit, plot, rvalue])
    | 计算概率图的分位数，并可选择显示图。 |'
- en: '| [`boxcox_normplot`](generated/scipy.stats.boxcox_normplot.html#scipy.stats.boxcox_normplot
    "scipy.stats.boxcox_normplot")(x, la, lb[, plot, N]) | Compute parameters for
    a Box-Cox normality plot, optionally show it. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| [`boxcox_normplot`](generated/scipy.stats.boxcox_normplot.html#scipy.stats.boxcox_normplot
    "scipy.stats.boxcox_normplot")(x, la, lb[, plot, N]) | 计算 Box-Cox 正态性图的参数，可选择显示。
    |'
- en: '| [`yeojohnson_normplot`](generated/scipy.stats.yeojohnson_normplot.html#scipy.stats.yeojohnson_normplot
    "scipy.stats.yeojohnson_normplot")(x, la, lb[, plot, N]) | Compute parameters
    for a Yeo-Johnson normality plot, optionally show it. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| [`yeojohnson_normplot`](generated/scipy.stats.yeojohnson_normplot.html#scipy.stats.yeojohnson_normplot
    "scipy.stats.yeojohnson_normplot")(x, la, lb[, plot, N]) | 计算 Yeo-Johnson 正态性图的参数，可选择显示。
    |'
- en: Univariate and multivariate kernel density estimation
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单变量和多变量核密度估计
- en: '| [`gaussian_kde`](generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde")(dataset[, bw_method, weights]) | Representation of
    a kernel-density estimate using Gaussian kernels. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| [`gaussian_kde`](generated/scipy.stats.gaussian_kde.html#scipy.stats.gaussian_kde
    "scipy.stats.gaussian_kde")(dataset[, bw_method, weights]) | 使用高斯核估计的核密度估计的表示。
    |'
- en: Warnings / Errors used in [`scipy.stats`](#module-scipy.stats "scipy.stats")
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 [`scipy.stats`](#module-scipy.stats "scipy.stats") 中使用的警告/错误
- en: '| [`DegenerateDataWarning`](generated/scipy.stats.DegenerateDataWarning.html#scipy.stats.DegenerateDataWarning
    "scipy.stats.DegenerateDataWarning")([msg]) | Warns when data is degenerate and
    results may not be reliable. |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| [`DegenerateDataWarning`](generated/scipy.stats.DegenerateDataWarning.html#scipy.stats.DegenerateDataWarning
    "scipy.stats.DegenerateDataWarning")([msg]) | 当数据退化且结果可能不可靠时发出警告。 |'
- en: '| [`ConstantInputWarning`](generated/scipy.stats.ConstantInputWarning.html#scipy.stats.ConstantInputWarning
    "scipy.stats.ConstantInputWarning")([msg]) | Warns when all values in data are
    exactly equal. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| [`ConstantInputWarning`](generated/scipy.stats.ConstantInputWarning.html#scipy.stats.ConstantInputWarning
    "scipy.stats.ConstantInputWarning")([msg]) | 当数据中的所有值完全相等时发出警告。 |'
- en: '| [`NearConstantInputWarning`](generated/scipy.stats.NearConstantInputWarning.html#scipy.stats.NearConstantInputWarning
    "scipy.stats.NearConstantInputWarning")([msg]) | Warns when all values in data
    are nearly equal. |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| [`NearConstantInputWarning`](generated/scipy.stats.NearConstantInputWarning.html#scipy.stats.NearConstantInputWarning
    "scipy.stats.NearConstantInputWarning")([msg]) | 当数据中的所有值几乎相等时发出警告。 |'
- en: '| [`FitError`](generated/scipy.stats.FitError.html#scipy.stats.FitError "scipy.stats.FitError")([msg])
    | Represents an error condition when fitting a distribution to data. |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| [`FitError`](generated/scipy.stats.FitError.html#scipy.stats.FitError "scipy.stats.FitError")([msg])
    | 表示将分布拟合到数据时的错误条件。 |'
- en: Result classes used in [`scipy.stats`](#module-scipy.stats "scipy.stats")
  id: totrans-540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 [`scipy.stats`](#module-scipy.stats "scipy.stats") 中使用的结果类
- en: Warning
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: These classes are private, but they are included here because instances of them
    are returned by other statistical functions. User import and instantiation is
    not supported.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类是私有的，但在这里包含它们是因为其他统计函数返回它们的实例。不支持用户导入和实例化。
- en: '[Result classes](stats._result_classes.html)'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结果类](stats._result_classes.html)'
- en: '[scipy.stats._result_classes.RelativeRiskResult](generated/scipy.stats._result_classes.RelativeRiskResult.html)'
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.RelativeRiskResult](generated/scipy.stats._result_classes.RelativeRiskResult.html)'
- en: '[scipy.stats._result_classes.BinomTestResult](generated/scipy.stats._result_classes.BinomTestResult.html)'
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.BinomTestResult](generated/scipy.stats._result_classes.BinomTestResult.html)'
- en: '[scipy.stats._result_classes.TukeyHSDResult](generated/scipy.stats._result_classes.TukeyHSDResult.html)'
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.TukeyHSDResult](generated/scipy.stats._result_classes.TukeyHSDResult.html)'
- en: '[scipy.stats._result_classes.DunnettResult](generated/scipy.stats._result_classes.DunnettResult.html)'
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.DunnettResult](generated/scipy.stats._result_classes.DunnettResult.html)'
- en: '[scipy.stats._result_classes.PearsonRResult](generated/scipy.stats._result_classes.PearsonRResult.html)'
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.PearsonRResult](generated/scipy.stats._result_classes.PearsonRResult.html)'
- en: '[scipy.stats._result_classes.FitResult](generated/scipy.stats._result_classes.FitResult.html)'
  id: totrans-549
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.FitResult](generated/scipy.stats._result_classes.FitResult.html)'
- en: '[scipy.stats._result_classes.OddsRatioResult](generated/scipy.stats._result_classes.OddsRatioResult.html)'
  id: totrans-550
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.OddsRatioResult](generated/scipy.stats._result_classes.OddsRatioResult.html)'
- en: '[scipy.stats._result_classes.TtestResult](generated/scipy.stats._result_classes.TtestResult.html)'
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.TtestResult](generated/scipy.stats._result_classes.TtestResult.html)'
- en: '[scipy.stats._result_classes.ECDFResult](generated/scipy.stats._result_classes.ECDFResult.html)'
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.ECDFResult](generated/scipy.stats._result_classes.ECDFResult.html)'
- en: '[scipy.stats._result_classes.EmpiricalDistributionFunction](generated/scipy.stats._result_classes.EmpiricalDistributionFunction.html)'
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[scipy.stats._result_classes.EmpiricalDistributionFunction](generated/scipy.stats._result_classes.EmpiricalDistributionFunction.html)'
