- en: Basic Implementation details
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本实现细节
- en: Original text：[https://docs.sympy.org/latest/modules/vector/basics.html](https://docs.sympy.org/latest/modules/vector/basics.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/vector/basics.html](https://docs.sympy.org/latest/modules/vector/basics.html)
- en: Coordinate Systems and Vectors
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标系和向量
- en: Currently, [`sympy.vector`](index.html#module-sympy.vector "sympy.vector") is
    able to deal with the Cartesian (also called rectangular), spherical and other
    curvilinear coordinate systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，[`sympy.vector`](index.html#module-sympy.vector "sympy.vector") 能够处理笛卡尔（也称为矩形）、球面和其他曲线坐标系。
- en: A 3D Cartesian coordinate system can be initialized in [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector") as
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [`sympy.vector`](index.html#module-sympy.vector "sympy.vector") 中初始化 3D
    笛卡尔坐标系。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The string parameter to the constructor denotes the name assigned to the system,
    and will primarily be used for printing purposes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数的字符串参数表示分配给系统的名称，并且主要用于打印目的。
- en: Once a coordinate system (in essence, a `CoordSys3D` instance) has been defined,
    we can access the orthonormal unit vectors (i.e. the \(\mathbf{\hat{i}}\), \(\mathbf{\hat{j}}\)
    and \(\mathbf{\hat{k}}\) vectors) and coordinate variables/base scalars (i.e.
    the \(\mathbf{x}\), \(\mathbf{y}\) and \(\mathbf{z}\) variables) corresponding
    to it. We will talk about coordinate variables in the later sections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了坐标系（本质上是 `CoordSys3D` 实例），我们可以访问标准单位向量（即 \(\mathbf{\hat{i}}\)、\(\mathbf{\hat{j}}\)
    和 \(\mathbf{\hat{k}}\) 向量）和坐标变量/基标量（即 \(\mathbf{x}\)、\(\mathbf{y}\) 和 \(\mathbf{z}\)
    变量）。关于坐标变量我们将在后面的章节中详细讨论。
- en: The basis vectors for the \(X\), \(Y\) and \(Z\) axes can be accessed using
    the `i`, `j` and `k` properties respectively.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `i`、`j` 和 `k` 属性分别访问 \(X\)、\(Y\) 和 \(Z\) 轴的基向量。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As seen above, the basis vectors are all instances of a class called `BaseVector`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，基向量都是名为 `BaseVector` 的类的实例。
- en: When a `BaseVector` is multiplied by a scalar (essentially any SymPy `Expr`),
    we get a `VectorMul` - the product of a base vector and a scalar.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `BaseVector` 乘以标量（实质上是任何 SymPy `Expr`）时，我们得到 `VectorMul` - 基向量与标量的乘积。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Addition of `VectorMul` and `BaseVectors` gives rise to formation of `VectorAdd`
    - except for special cases, ofcourse.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`VectorMul` 和 `BaseVectors` 的加法形成 `VectorAdd` - 当然，除了特殊情况。'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What about a zero vector? It can be accessed using the `zero` attribute assigned
    to class `Vector`. Since the notion of a zero vector remains the same regardless
    of the coordinate system in consideration, we use `Vector.zero` wherever such
    a quantity is required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 零向量怎么办？可以使用分配给 `Vector` 类的 `zero` 属性访问。由于零向量的概念在考虑的坐标系中保持不变，我们在需要这种量时使用 `Vector.zero`。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All the classes shown above - `BaseVector`, `VectorMul`, `VectorAdd` and `VectorZero`
    are subclasses of `Vector`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述类 - `BaseVector`、`VectorMul`、`VectorAdd` 和 `VectorZero` 都是 `Vector` 的子类。
- en: You should never have to instantiate objects of any of the subclasses of `Vector`.
    Using the `BaseVector` instances assigned to a `CoordSys3D` instance and (if needed)
    `Vector.zero` as building blocks, any sort of vectorial expression can be constructed
    with the basic mathematical operators `+`, `-`, `*`. and `/`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您永远不应该实例化 `Vector` 的任何子类的对象。使用分配给 `CoordSys3D` 实例的 `BaseVector` 实例和（如果需要）`Vector.zero`
    作为基础，可以使用基本数学运算符 `+`、`-`、`*` 和 `/` 构建任何类型的向量表达式。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition to the elementary mathematical operations, the vector operations
    of `dot` and `cross` can also be performed on `Vector`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的数学运算外，还可以在 `Vector` 上执行 `dot` 和 `cross` 的向量运算。
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `&` and `^` operators have been overloaded for the `dot` and `cross` methods
    respectively.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`dot` 和 `cross` 方法的 `&` 和 `^` 操作符已重载。'
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: However, this is not the recommended way of performing these operations. Using
    the original methods makes the code clearer and easier to follow.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不是执行这些操作的推荐方式。使用原始方法使代码更清晰，更易于理解。
- en: In addition to these operations, it is also possible to compute the outer products
    of `Vector` instances in [`sympy.vector`](index.html#module-sympy.vector "sympy.vector").
    More on that in a little bit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些操作外，在 [`sympy.vector`](index.html#module-sympy.vector "sympy.vector") 中还可以计算
    `Vector` 实例的外积。稍后将详细介绍。
- en: SymPy operations on Vectors
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SymPy 向量的操作
- en: The SymPy operations of `simplify`, `trigsimp`, `diff`, and `factor` work on
    `Vector` objects, with the standard SymPy API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 操作 `simplify`、`trigsimp`、`diff` 和 `factor` 适用于 `Vector` 对象，使用标准的 SymPy
    API。
- en: In essence, the methods work on the measure numbers(The coefficients of the
    basis vectors) present in the provided vectorial expression.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，这些方法是在提供的向量表达式中存在的测量数（基向量的系数）上操作。
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`Integral` also works with `Vector` instances, similar to `Derivative`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Integral`也与`Vector`实例一起工作，类似于`Derivative`。'
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Points
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点
- en: As mentioned before, every coordinate system corresponds to a unique origin
    point. Points, in general, have been implemented in [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector") in the form of the `Point` class.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个坐标系对应于一个唯一的原点。一般来说，点已经在[`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector")中以`Point`类的形式实现。
- en: To access the origin of system, use the `origin` property of the `CoordSys3D`
    class.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问系统的原点，请使用`CoordSys3D`类的`origin`属性。
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can instantiate new points in space using the `locate_new` method of `Point`.
    The arguments include the name(string) of the new `Point`, and its position vector
    with respect to the ‘parent’ `Point`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`Point`的`locate_new`方法在空间中实例化新点。参数包括新`Point`的名称（字符串）及其相对于“父”`Point`的位置向量。
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Like `Vector`, a user never has to expressly instantiate an object of `Point`.
    This is because any location in space (albeit relative) can be pointed at by using
    the `origin` of a `CoordSys3D` as the reference, and then using `locate_new` on
    it and subsequent `Point` instances.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 像`Vector`一样，用户永远不必显式实例化`Point`对象。这是因为可以通过使用`CoordSys3D`的`origin`作为参考来指向空间中的任何位置（尽管是相对位置），然后在其上使用`locate_new`和后续的`Point`实例。
- en: The position vector of a `Point` with respect to another `Point` can be computed
    using the `position_wrt` method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`position_wrt`方法计算一个`Point`相对于另一个`Point`的位置向量。
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Additionally, it is possible to obtain the \(X\), \(Y\) and \(Z\) coordinates
    of a `Point` with respect to a `CoordSys3D` in the form of a tuple. This is done
    using the `express_coordinates` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以通过`express_coordinates`方法获取相对于`CoordSys3D`的`Point`的\(X\)、\(Y\)和\(Z\)坐标，以元组的形式表示。
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Dyadics
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二阶张量
- en: A dyadic, or dyadic tensor, is a second-order tensor formed by the juxtaposition
    of pairs of vectors. Therefore, the outer products of vectors give rise to the
    formation of dyadics. Dyadic tensors have been implemented in [`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector") in the `Dyadic` class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 二阶张量，或者说二阶张量，是由向量对并列形成的。因此，向量的外积导致二阶张量的形成。在[`sympy.vector`](index.html#module-sympy.vector
    "sympy.vector")中，已经用`Dyadic`类实现了二阶张量。
- en: Once again, you never have to instantiate objects of `Dyadic`. The outer products
    of vectors can be computed using the `outer` method of `Vector`. The `|` operator
    has been overloaded for `outer`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，您永远不需要实例化`Dyadic`对象。可以使用`Vector`的`outer`方法计算向量的外积。`|`运算符已经为`outer`重载。
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Similar to `Vector`, `Dyadic` also has subsequent subclasses like `BaseDyadic`,
    `DyadicMul`, `DyadicAdd`. As with `Vector`, a zero dyadic can be accessed from
    `Dyadic.zero`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`Vector`，`Dyadic`也有像`BaseDyadic`、`DyadicMul`、`DyadicAdd`这样的后续子类。与`Vector`类似，可以从`Dyadic.zero`获取零二阶张量。
- en: All basic mathematical operations work with `Dyadic` too.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有基本数学运算也适用于`Dyadic`。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`dot` and `cross` also work among `Dyadic` instances as well as between a `Dyadic`
    and `Vector` (and also vice versa) - as per the respective mathematical definitions.
    As with `Vector`, `&` and `^` have been overloaded for `dot` and `cross`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`dot`和`cross`在`Dyadic`实例之间以及`Dyadic`与`Vector`之间（反之亦然）也有效，如各自的数学定义。与`Vector`类似，`&`和`^`已经为`dot`和`cross`重载。'
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
