- en: Special functions (scipy.special)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/special.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/special.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Almost all of the functions below accept NumPy arrays as input arguments as
    well as single numbers. This means they follow broadcasting and automatic array-looping
    rules. Technically, they are [NumPy universal functions](https://numpy.org/doc/stable/user/basics.ufuncs.html#ufuncs-basics).
    Functions which do not accept NumPy arrays are marked by a warning in the section
    description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.special.cython_special`](special.cython_special.html#module-scipy.special.cython_special
    "scipy.special.cython_special") – Typed Cython versions of special functions'
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Errors are handled by returning NaNs or other appropriate values. Some of the
    special function routines can emit warnings or raise exceptions when an error
    occurs. By default this is disabled; to query and control the current error handling
    state the following functions are provided.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`geterr`](generated/scipy.special.geterr.html#scipy.special.geterr "scipy.special.geterr")()
    | Get the current way of handling special-function errors. |'
  prefs: []
  type: TYPE_TB
- en: '| [`seterr`](generated/scipy.special.seterr.html#scipy.special.seterr "scipy.special.seterr")(**kwargs)
    | Set how special-function errors are handled. |'
  prefs: []
  type: TYPE_TB
- en: '| [`errstate`](generated/scipy.special.errstate.html#scipy.special.errstate
    "scipy.special.errstate")(**kwargs) | Context manager for special-function error
    handling. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SpecialFunctionWarning`](generated/scipy.special.SpecialFunctionWarning.html#scipy.special.SpecialFunctionWarning
    "scipy.special.SpecialFunctionWarning") | Warning that can be emitted by special
    functions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SpecialFunctionError`](generated/scipy.special.SpecialFunctionError.html#scipy.special.SpecialFunctionError
    "scipy.special.SpecialFunctionError") | Exception that can be raised by special
    functions. |'
  prefs: []
  type: TYPE_TB
- en: Available functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Airy functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`airy`](generated/scipy.special.airy.html#scipy.special.airy "scipy.special.airy")(z[, out])
    | Airy functions and their derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| [`airye`](generated/scipy.special.airye.html#scipy.special.airye "scipy.special.airye")(z[, out])
    | Exponentially scaled Airy functions and their derivatives. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ai_zeros`](generated/scipy.special.ai_zeros.html#scipy.special.ai_zeros
    "scipy.special.ai_zeros")(nt) | Compute *nt* zeros and values of the Airy function
    Ai and its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bi_zeros`](generated/scipy.special.bi_zeros.html#scipy.special.bi_zeros
    "scipy.special.bi_zeros")(nt) | Compute *nt* zeros and values of the Airy function
    Bi and its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itairy`](generated/scipy.special.itairy.html#scipy.special.itairy "scipy.special.itairy")(x[, out])
    | Integrals of Airy functions |'
  prefs: []
  type: TYPE_TB
- en: Elliptic functions and integrals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ellipj`](generated/scipy.special.ellipj.html#scipy.special.ellipj "scipy.special.ellipj")(u, m[, out])
    | Jacobian elliptic functions |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellipk`](generated/scipy.special.ellipk.html#scipy.special.ellipk "scipy.special.ellipk")(m[, out])
    | Complete elliptic integral of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellipkm1`](generated/scipy.special.ellipkm1.html#scipy.special.ellipkm1
    "scipy.special.ellipkm1")(p[, out]) | Complete elliptic integral of the first
    kind around *m* = 1 |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellipkinc`](generated/scipy.special.ellipkinc.html#scipy.special.ellipkinc
    "scipy.special.ellipkinc")(phi, m[, out]) | Incomplete elliptic integral of the
    first kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellipe`](generated/scipy.special.ellipe.html#scipy.special.ellipe "scipy.special.ellipe")(m[, out])
    | Complete elliptic integral of the second kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellipeinc`](generated/scipy.special.ellipeinc.html#scipy.special.ellipeinc
    "scipy.special.ellipeinc")(phi, m[, out]) | Incomplete elliptic integral of the
    second kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`elliprc`](generated/scipy.special.elliprc.html#scipy.special.elliprc "scipy.special.elliprc")(x, y[, out])
    | Degenerate symmetric elliptic integral. |'
  prefs: []
  type: TYPE_TB
- en: '| [`elliprd`](generated/scipy.special.elliprd.html#scipy.special.elliprd "scipy.special.elliprd")(x, y, z[, out])
    | Symmetric elliptic integral of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`elliprf`](generated/scipy.special.elliprf.html#scipy.special.elliprf "scipy.special.elliprf")(x, y, z[, out])
    | Completely-symmetric elliptic integral of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`elliprg`](generated/scipy.special.elliprg.html#scipy.special.elliprg "scipy.special.elliprg")(x, y, z[, out])
    | Completely-symmetric elliptic integral of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`elliprj`](generated/scipy.special.elliprj.html#scipy.special.elliprj "scipy.special.elliprj")(x, y, z, p[, out])
    | Symmetric elliptic integral of the third kind. |'
  prefs: []
  type: TYPE_TB
- en: Bessel functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`jv`](generated/scipy.special.jv.html#scipy.special.jv "scipy.special.jv")(v, z[, out])
    | Bessel function of the first kind of real order and complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`jve`](generated/scipy.special.jve.html#scipy.special.jve "scipy.special.jve")(v, z[, out])
    | Exponentially scaled Bessel function of the first kind of order *v*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yn`](generated/scipy.special.yn.html#scipy.special.yn "scipy.special.yn")(n, x[, out])
    | Bessel function of the second kind of integer order and real argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yv`](generated/scipy.special.yv.html#scipy.special.yv "scipy.special.yv")(v, z[, out])
    | Bessel function of the second kind of real order and complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yve`](generated/scipy.special.yve.html#scipy.special.yve "scipy.special.yve")(v, z[, out])
    | Exponentially scaled Bessel function of the second kind of real order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kn`](generated/scipy.special.kn.html#scipy.special.kn "scipy.special.kn")(n, x[, out])
    | Modified Bessel function of the second kind of integer order *n* |'
  prefs: []
  type: TYPE_TB
- en: '| [`kv`](generated/scipy.special.kv.html#scipy.special.kv "scipy.special.kv")(v, z[, out])
    | Modified Bessel function of the second kind of real order *v* |'
  prefs: []
  type: TYPE_TB
- en: '| [`kve`](generated/scipy.special.kve.html#scipy.special.kve "scipy.special.kve")(v, z[, out])
    | Exponentially scaled modified Bessel function of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iv`](generated/scipy.special.iv.html#scipy.special.iv "scipy.special.iv")(v, z[, out])
    | Modified Bessel function of the first kind of real order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ive`](generated/scipy.special.ive.html#scipy.special.ive "scipy.special.ive")(v, z[, out])
    | Exponentially scaled modified Bessel function of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hankel1`](generated/scipy.special.hankel1.html#scipy.special.hankel1 "scipy.special.hankel1")(v, z[, out])
    | Hankel function of the first kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`hankel1e`](generated/scipy.special.hankel1e.html#scipy.special.hankel1e
    "scipy.special.hankel1e")(v, z[, out]) | Exponentially scaled Hankel function
    of the first kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`hankel2`](generated/scipy.special.hankel2.html#scipy.special.hankel2 "scipy.special.hankel2")(v, z[, out])
    | Hankel function of the second kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`hankel2e`](generated/scipy.special.hankel2e.html#scipy.special.hankel2e
    "scipy.special.hankel2e")(v, z[, out]) | Exponentially scaled Hankel function
    of the second kind |'
  prefs: []
  type: TYPE_TB
- en: '| [`wright_bessel`](generated/scipy.special.wright_bessel.html#scipy.special.wright_bessel
    "scipy.special.wright_bessel")(a, b, x[, out]) | Wright''s generalized Bessel
    function. |'
  prefs: []
  type: TYPE_TB
- en: 'The following function does not accept NumPy arrays (it is not a universal
    function):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`lmbda`](generated/scipy.special.lmbda.html#scipy.special.lmbda "scipy.special.lmbda")(v, x)
    | Jahnke-Emden Lambda function, Lambdav(x). |'
  prefs: []
  type: TYPE_TB
- en: Zeros of Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`jnjnp_zeros`](generated/scipy.special.jnjnp_zeros.html#scipy.special.jnjnp_zeros
    "scipy.special.jnjnp_zeros")(nt) | Compute zeros of integer-order Bessel functions
    Jn and Jn''. |'
  prefs: []
  type: TYPE_TB
- en: '| [`jnyn_zeros`](generated/scipy.special.jnyn_zeros.html#scipy.special.jnyn_zeros
    "scipy.special.jnyn_zeros")(n, nt) | Compute nt zeros of Bessel functions Jn(x),
    Jn''(x), Yn(x), and Yn''(x). |'
  prefs: []
  type: TYPE_TB
- en: '| [`jn_zeros`](generated/scipy.special.jn_zeros.html#scipy.special.jn_zeros
    "scipy.special.jn_zeros")(n, nt) | Compute zeros of integer-order Bessel functions
    Jn. |'
  prefs: []
  type: TYPE_TB
- en: '| [`jnp_zeros`](generated/scipy.special.jnp_zeros.html#scipy.special.jnp_zeros
    "scipy.special.jnp_zeros")(n, nt) | Compute zeros of integer-order Bessel function
    derivatives Jn''. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yn_zeros`](generated/scipy.special.yn_zeros.html#scipy.special.yn_zeros
    "scipy.special.yn_zeros")(n, nt) | Compute zeros of integer-order Bessel function
    Yn(x). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ynp_zeros`](generated/scipy.special.ynp_zeros.html#scipy.special.ynp_zeros
    "scipy.special.ynp_zeros")(n, nt) | Compute zeros of integer-order Bessel function
    derivatives Yn''(x). |'
  prefs: []
  type: TYPE_TB
- en: '| [`y0_zeros`](generated/scipy.special.y0_zeros.html#scipy.special.y0_zeros
    "scipy.special.y0_zeros")(nt[, complex]) | Compute nt zeros of Bessel function
    Y0(z), and derivative at each zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`y1_zeros`](generated/scipy.special.y1_zeros.html#scipy.special.y1_zeros
    "scipy.special.y1_zeros")(nt[, complex]) | Compute nt zeros of Bessel function
    Y1(z), and derivative at each zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`y1p_zeros`](generated/scipy.special.y1p_zeros.html#scipy.special.y1p_zeros
    "scipy.special.y1p_zeros")(nt[, complex]) | Compute nt zeros of Bessel derivative
    Y1''(z), and value at each zero. |'
  prefs: []
  type: TYPE_TB
- en: Faster versions of common Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`j0`](generated/scipy.special.j0.html#scipy.special.j0 "scipy.special.j0")(x[, out])
    | Bessel function of the first kind of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`j1`](generated/scipy.special.j1.html#scipy.special.j1 "scipy.special.j1")(x[, out])
    | Bessel function of the first kind of order 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`y0`](generated/scipy.special.y0.html#scipy.special.y0 "scipy.special.y0")(x[, out])
    | Bessel function of the second kind of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`y1`](generated/scipy.special.y1.html#scipy.special.y1 "scipy.special.y1")(x[, out])
    | Bessel function of the second kind of order 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`i0`](generated/scipy.special.i0.html#scipy.special.i0 "scipy.special.i0")(x[, out])
    | Modified Bessel function of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`i0e`](generated/scipy.special.i0e.html#scipy.special.i0e "scipy.special.i0e")(x[, out])
    | Exponentially scaled modified Bessel function of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`i1`](generated/scipy.special.i1.html#scipy.special.i1 "scipy.special.i1")(x[, out])
    | Modified Bessel function of order 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`i1e`](generated/scipy.special.i1e.html#scipy.special.i1e "scipy.special.i1e")(x[, out])
    | Exponentially scaled modified Bessel function of order 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`k0`](generated/scipy.special.k0.html#scipy.special.k0 "scipy.special.k0")(x[, out])
    | Modified Bessel function of the second kind of order 0, \(K_0\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`k0e`](generated/scipy.special.k0e.html#scipy.special.k0e "scipy.special.k0e")(x[, out])
    | Exponentially scaled modified Bessel function K of order 0 |'
  prefs: []
  type: TYPE_TB
- en: '| [`k1`](generated/scipy.special.k1.html#scipy.special.k1 "scipy.special.k1")(x[, out])
    | Modified Bessel function of the second kind of order 1, \(K_1(x)\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`k1e`](generated/scipy.special.k1e.html#scipy.special.k1e "scipy.special.k1e")(x[, out])
    | Exponentially scaled modified Bessel function K of order 1 |'
  prefs: []
  type: TYPE_TB
- en: Integrals of Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`itj0y0`](generated/scipy.special.itj0y0.html#scipy.special.itj0y0 "scipy.special.itj0y0")(x[, out])
    | Integrals of Bessel functions of the first kind of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`it2j0y0`](generated/scipy.special.it2j0y0.html#scipy.special.it2j0y0 "scipy.special.it2j0y0")(x[, out])
    | Integrals related to Bessel functions of the first kind of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`iti0k0`](generated/scipy.special.iti0k0.html#scipy.special.iti0k0 "scipy.special.iti0k0")(x[, out])
    | Integrals of modified Bessel functions of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`it2i0k0`](generated/scipy.special.it2i0k0.html#scipy.special.it2i0k0 "scipy.special.it2i0k0")(x[, out])
    | Integrals related to modified Bessel functions of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`besselpoly`](generated/scipy.special.besselpoly.html#scipy.special.besselpoly
    "scipy.special.besselpoly")(a, lmb, nu[, out]) | Weighted integral of the Bessel
    function of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: Derivatives of Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`jvp`](generated/scipy.special.jvp.html#scipy.special.jvp "scipy.special.jvp")(v, z[, n])
    | Compute derivatives of Bessel functions of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`yvp`](generated/scipy.special.yvp.html#scipy.special.yvp "scipy.special.yvp")(v, z[, n])
    | Compute derivatives of Bessel functions of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kvp`](generated/scipy.special.kvp.html#scipy.special.kvp "scipy.special.kvp")(v, z[, n])
    | Compute derivatives of real-order modified Bessel function Kv(z) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ivp`](generated/scipy.special.ivp.html#scipy.special.ivp "scipy.special.ivp")(v, z[, n])
    | Compute derivatives of modified Bessel functions of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`h1vp`](generated/scipy.special.h1vp.html#scipy.special.h1vp "scipy.special.h1vp")(v, z[, n])
    | Compute derivatives of Hankel function H1v(z) with respect to *z*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`h2vp`](generated/scipy.special.h2vp.html#scipy.special.h2vp "scipy.special.h2vp")(v, z[, n])
    | Compute derivatives of Hankel function H2v(z) with respect to *z*. |'
  prefs: []
  type: TYPE_TB
- en: Spherical Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`spherical_jn`](generated/scipy.special.spherical_jn.html#scipy.special.spherical_jn
    "scipy.special.spherical_jn")(n, z[, derivative]) | Spherical Bessel function
    of the first kind or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spherical_yn`](generated/scipy.special.spherical_yn.html#scipy.special.spherical_yn
    "scipy.special.spherical_yn")(n, z[, derivative]) | Spherical Bessel function
    of the second kind or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spherical_in`](generated/scipy.special.spherical_in.html#scipy.special.spherical_in
    "scipy.special.spherical_in")(n, z[, derivative]) | Modified spherical Bessel
    function of the first kind or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spherical_kn`](generated/scipy.special.spherical_kn.html#scipy.special.spherical_kn
    "scipy.special.spherical_kn")(n, z[, derivative]) | Modified spherical Bessel
    function of the second kind or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: Riccati-Bessel functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`riccati_jn`](generated/scipy.special.riccati_jn.html#scipy.special.riccati_jn
    "scipy.special.riccati_jn")(n, x) | Compute Ricatti-Bessel function of the first
    kind and its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`riccati_yn`](generated/scipy.special.riccati_yn.html#scipy.special.riccati_yn
    "scipy.special.riccati_yn")(n, x) | Compute Ricatti-Bessel function of the second
    kind and its derivative. |'
  prefs: []
  type: TYPE_TB
- en: Struve functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`struve`](generated/scipy.special.struve.html#scipy.special.struve "scipy.special.struve")(v, x[, out])
    | Struve function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`modstruve`](generated/scipy.special.modstruve.html#scipy.special.modstruve
    "scipy.special.modstruve")(v, x[, out]) | Modified Struve function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itstruve0`](generated/scipy.special.itstruve0.html#scipy.special.itstruve0
    "scipy.special.itstruve0")(x[, out]) | Integral of the Struve function of order
    0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`it2struve0`](generated/scipy.special.it2struve0.html#scipy.special.it2struve0
    "scipy.special.it2struve0")(x[, out]) | Integral related to the Struve function
    of order 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itmodstruve0`](generated/scipy.special.itmodstruve0.html#scipy.special.itmodstruve0
    "scipy.special.itmodstruve0")(x[, out]) | Integral of the modified Struve function
    of order 0. |'
  prefs: []
  type: TYPE_TB
- en: Raw statistical functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats`](stats.html#module-scipy.stats "scipy.stats"): Friendly versions
    of these functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Binomial distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`bdtr`](generated/scipy.special.bdtr.html#scipy.special.bdtr "scipy.special.bdtr")(k, n, p[, out])
    | Binomial distribution cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bdtrc`](generated/scipy.special.bdtrc.html#scipy.special.bdtrc "scipy.special.bdtrc")(k, n, p[, out])
    | Binomial distribution survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bdtri`](generated/scipy.special.bdtri.html#scipy.special.bdtri "scipy.special.bdtri")(k, n, y[, out])
    | Inverse function to [`bdtr`](generated/scipy.special.bdtr.html#scipy.special.bdtr
    "scipy.special.bdtr") with respect to *p*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bdtrik`](generated/scipy.special.bdtrik.html#scipy.special.bdtrik "scipy.special.bdtrik")(y, n, p[, out])
    | Inverse function to [`bdtr`](generated/scipy.special.bdtr.html#scipy.special.bdtr
    "scipy.special.bdtr") with respect to *k*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bdtrin`](generated/scipy.special.bdtrin.html#scipy.special.bdtrin "scipy.special.bdtrin")(k, y, p[, out])
    | Inverse function to [`bdtr`](generated/scipy.special.bdtr.html#scipy.special.bdtr
    "scipy.special.bdtr") with respect to *n*. |'
  prefs: []
  type: TYPE_TB
- en: Beta distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`btdtr`](generated/scipy.special.btdtr.html#scipy.special.btdtr "scipy.special.btdtr")(a, b, x[, out])
    | Cumulative distribution function of the beta distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`btdtri`](generated/scipy.special.btdtri.html#scipy.special.btdtri "scipy.special.btdtri")(a, b, p[, out])
    | The *p*-th quantile of the beta distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`btdtria`](generated/scipy.special.btdtria.html#scipy.special.btdtria "scipy.special.btdtria")(p, b, x[, out])
    | Inverse of [`btdtr`](generated/scipy.special.btdtr.html#scipy.special.btdtr
    "scipy.special.btdtr") with respect to *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`btdtrib`](generated/scipy.special.btdtrib.html#scipy.special.btdtrib "scipy.special.btdtrib")(a, p, x[, out])
    | Inverse of [`btdtr`](generated/scipy.special.btdtr.html#scipy.special.btdtr
    "scipy.special.btdtr") with respect to *b*. |'
  prefs: []
  type: TYPE_TB
- en: F distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`fdtr`](generated/scipy.special.fdtr.html#scipy.special.fdtr "scipy.special.fdtr")(dfn, dfd, x[, out])
    | F cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fdtrc`](generated/scipy.special.fdtrc.html#scipy.special.fdtrc "scipy.special.fdtrc")(dfn, dfd, x[, out])
    | F survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fdtri`](generated/scipy.special.fdtri.html#scipy.special.fdtri "scipy.special.fdtri")(dfn, dfd, p[, out])
    | The *p*-th quantile of the F-distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fdtridfd`](generated/scipy.special.fdtridfd.html#scipy.special.fdtridfd
    "scipy.special.fdtridfd")(dfn, p, x[, out]) | Inverse to [`fdtr`](generated/scipy.special.fdtr.html#scipy.special.fdtr
    "scipy.special.fdtr") vs dfd |'
  prefs: []
  type: TYPE_TB
- en: Gamma distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`gdtr`](generated/scipy.special.gdtr.html#scipy.special.gdtr "scipy.special.gdtr")(a, b, x[, out])
    | Gamma distribution cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gdtrc`](generated/scipy.special.gdtrc.html#scipy.special.gdtrc "scipy.special.gdtrc")(a, b, x[, out])
    | Gamma distribution survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gdtria`](generated/scipy.special.gdtria.html#scipy.special.gdtria "scipy.special.gdtria")(p, b, x[, out])
    | Inverse of [`gdtr`](generated/scipy.special.gdtr.html#scipy.special.gdtr "scipy.special.gdtr")
    vs a. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gdtrib`](generated/scipy.special.gdtrib.html#scipy.special.gdtrib "scipy.special.gdtrib")(a, p, x[, out])
    | Inverse of [`gdtr`](generated/scipy.special.gdtr.html#scipy.special.gdtr "scipy.special.gdtr")
    vs b. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gdtrix`](generated/scipy.special.gdtrix.html#scipy.special.gdtrix "scipy.special.gdtrix")(a, b, p[, out])
    | Inverse of [`gdtr`](generated/scipy.special.gdtr.html#scipy.special.gdtr "scipy.special.gdtr")
    vs x. |'
  prefs: []
  type: TYPE_TB
- en: Negative binomial distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`nbdtr`](generated/scipy.special.nbdtr.html#scipy.special.nbdtr "scipy.special.nbdtr")(k, n, p[, out])
    | Negative binomial cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbdtrc`](generated/scipy.special.nbdtrc.html#scipy.special.nbdtrc "scipy.special.nbdtrc")(k, n, p[, out])
    | Negative binomial survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbdtri`](generated/scipy.special.nbdtri.html#scipy.special.nbdtri "scipy.special.nbdtri")(k, n, y[, out])
    | Returns the inverse with respect to the parameter *p* of *y = nbdtr(k, n, p)*,
    the negative binomial cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbdtrik`](generated/scipy.special.nbdtrik.html#scipy.special.nbdtrik "scipy.special.nbdtrik")(y, n, p[, out])
    | Negative binomial percentile function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nbdtrin`](generated/scipy.special.nbdtrin.html#scipy.special.nbdtrin "scipy.special.nbdtrin")(k, y, p[, out])
    | Inverse of [`nbdtr`](generated/scipy.special.nbdtr.html#scipy.special.nbdtr
    "scipy.special.nbdtr") vs *n*. |'
  prefs: []
  type: TYPE_TB
- en: Noncentral F distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`ncfdtr`](generated/scipy.special.ncfdtr.html#scipy.special.ncfdtr "scipy.special.ncfdtr")(dfn, dfd, nc, f[, out])
    | Cumulative distribution function of the non-central F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncfdtridfd`](generated/scipy.special.ncfdtridfd.html#scipy.special.ncfdtridfd
    "scipy.special.ncfdtridfd")(dfn, p, nc, f[, out]) | Calculate degrees of freedom
    (denominator) for the noncentral F-distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncfdtridfn`](generated/scipy.special.ncfdtridfn.html#scipy.special.ncfdtridfn
    "scipy.special.ncfdtridfn")(p, dfd, nc, f[, out]) | Calculate degrees of freedom
    (numerator) for the noncentral F-distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncfdtri`](generated/scipy.special.ncfdtri.html#scipy.special.ncfdtri "scipy.special.ncfdtri")(dfn, dfd, nc, p[, out])
    | Inverse with respect to *f* of the CDF of the non-central F distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ncfdtrinc`](generated/scipy.special.ncfdtrinc.html#scipy.special.ncfdtrinc
    "scipy.special.ncfdtrinc")(dfn, dfd, p, f[, out]) | Calculate non-centrality parameter
    for non-central F distribution. |'
  prefs: []
  type: TYPE_TB
- en: Noncentral t distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`nctdtr`](generated/scipy.special.nctdtr.html#scipy.special.nctdtr "scipy.special.nctdtr")(df, nc, t[, out])
    | Cumulative distribution function of the non-central *t* distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nctdtridf`](generated/scipy.special.nctdtridf.html#scipy.special.nctdtridf
    "scipy.special.nctdtridf")(p, nc, t[, out]) | Calculate degrees of freedom for
    non-central t distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nctdtrit`](generated/scipy.special.nctdtrit.html#scipy.special.nctdtrit
    "scipy.special.nctdtrit")(df, nc, p[, out]) | Inverse cumulative distribution
    function of the non-central t distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nctdtrinc`](generated/scipy.special.nctdtrinc.html#scipy.special.nctdtrinc
    "scipy.special.nctdtrinc")(df, p, t[, out]) | Calculate non-centrality parameter
    for non-central t distribution. |'
  prefs: []
  type: TYPE_TB
- en: Normal distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`nrdtrimn`](generated/scipy.special.nrdtrimn.html#scipy.special.nrdtrimn
    "scipy.special.nrdtrimn")(p, x, std[, out]) | Calculate mean of normal distribution
    given other params. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nrdtrisd`](generated/scipy.special.nrdtrisd.html#scipy.special.nrdtrisd
    "scipy.special.nrdtrisd")(p, x, mn[, out]) | Calculate standard deviation of normal
    distribution given other params. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndtr`](generated/scipy.special.ndtr.html#scipy.special.ndtr "scipy.special.ndtr")(x[, out])
    | Cumulative distribution of the standard normal distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log_ndtr`](generated/scipy.special.log_ndtr.html#scipy.special.log_ndtr
    "scipy.special.log_ndtr")(x[, out]) | Logarithm of Gaussian cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndtri`](generated/scipy.special.ndtri.html#scipy.special.ndtri "scipy.special.ndtri")(y[, out])
    | Inverse of [`ndtr`](generated/scipy.special.ndtr.html#scipy.special.ndtr "scipy.special.ndtr")
    vs x |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndtri_exp`](generated/scipy.special.ndtri_exp.html#scipy.special.ndtri_exp
    "scipy.special.ndtri_exp")(y[, out]) | Inverse of [`log_ndtr`](generated/scipy.special.log_ndtr.html#scipy.special.log_ndtr
    "scipy.special.log_ndtr") vs x. |'
  prefs: []
  type: TYPE_TB
- en: Poisson distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`pdtr`](generated/scipy.special.pdtr.html#scipy.special.pdtr "scipy.special.pdtr")(k, m[, out])
    | Poisson cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdtrc`](generated/scipy.special.pdtrc.html#scipy.special.pdtrc "scipy.special.pdtrc")(k, m[, out])
    | Poisson survival function |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdtri`](generated/scipy.special.pdtri.html#scipy.special.pdtri "scipy.special.pdtri")(k, y[, out])
    | Inverse to [`pdtr`](generated/scipy.special.pdtr.html#scipy.special.pdtr "scipy.special.pdtr")
    vs m |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdtrik`](generated/scipy.special.pdtrik.html#scipy.special.pdtrik "scipy.special.pdtrik")(p, m[, out])
    | Inverse to [`pdtr`](generated/scipy.special.pdtr.html#scipy.special.pdtr "scipy.special.pdtr")
    vs *m*. |'
  prefs: []
  type: TYPE_TB
- en: Student t distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`stdtr`](generated/scipy.special.stdtr.html#scipy.special.stdtr "scipy.special.stdtr")(df, t[, out])
    | Student t distribution cumulative distribution function |'
  prefs: []
  type: TYPE_TB
- en: '| [`stdtridf`](generated/scipy.special.stdtridf.html#scipy.special.stdtridf
    "scipy.special.stdtridf")(p, t[, out]) | Inverse of [`stdtr`](generated/scipy.special.stdtr.html#scipy.special.stdtr
    "scipy.special.stdtr") vs df |'
  prefs: []
  type: TYPE_TB
- en: '| [`stdtrit`](generated/scipy.special.stdtrit.html#scipy.special.stdtrit "scipy.special.stdtrit")(df, p[, out])
    | The *p*-th quantile of the student t distribution. |'
  prefs: []
  type: TYPE_TB
- en: Chi square distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`chdtr`](generated/scipy.special.chdtr.html#scipy.special.chdtr "scipy.special.chdtr")(v, x[, out])
    | Chi square cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chdtrc`](generated/scipy.special.chdtrc.html#scipy.special.chdtrc "scipy.special.chdtrc")(v, x[, out])
    | Chi square survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chdtri`](generated/scipy.special.chdtri.html#scipy.special.chdtri "scipy.special.chdtri")(v, p[, out])
    | Inverse to [`chdtrc`](generated/scipy.special.chdtrc.html#scipy.special.chdtrc
    "scipy.special.chdtrc") with respect to *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chdtriv`](generated/scipy.special.chdtriv.html#scipy.special.chdtriv "scipy.special.chdtriv")(p, x[, out])
    | Inverse to [`chdtr`](generated/scipy.special.chdtr.html#scipy.special.chdtr
    "scipy.special.chdtr") with respect to *v*. |'
  prefs: []
  type: TYPE_TB
- en: Non-central chi square distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`chndtr`](generated/scipy.special.chndtr.html#scipy.special.chndtr "scipy.special.chndtr")(x, df, nc[, out])
    | Non-central chi square cumulative distribution function |'
  prefs: []
  type: TYPE_TB
- en: '| [`chndtridf`](generated/scipy.special.chndtridf.html#scipy.special.chndtridf
    "scipy.special.chndtridf")(x, p, nc[, out]) | Inverse to [`chndtr`](generated/scipy.special.chndtr.html#scipy.special.chndtr
    "scipy.special.chndtr") vs *df* |'
  prefs: []
  type: TYPE_TB
- en: '| [`chndtrinc`](generated/scipy.special.chndtrinc.html#scipy.special.chndtrinc
    "scipy.special.chndtrinc")(x, df, p[, out]) | Inverse to [`chndtr`](generated/scipy.special.chndtr.html#scipy.special.chndtr
    "scipy.special.chndtr") vs *nc* |'
  prefs: []
  type: TYPE_TB
- en: '| [`chndtrix`](generated/scipy.special.chndtrix.html#scipy.special.chndtrix
    "scipy.special.chndtrix")(p, df, nc[, out]) | Inverse to [`chndtr`](generated/scipy.special.chndtr.html#scipy.special.chndtr
    "scipy.special.chndtr") vs *x* |'
  prefs: []
  type: TYPE_TB
- en: Kolmogorov distribution
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`smirnov`](generated/scipy.special.smirnov.html#scipy.special.smirnov "scipy.special.smirnov")(n, d[, out])
    | Kolmogorov-Smirnov complementary cumulative distribution function |'
  prefs: []
  type: TYPE_TB
- en: '| [`smirnovi`](generated/scipy.special.smirnovi.html#scipy.special.smirnovi
    "scipy.special.smirnovi")(n, p[, out]) | Inverse to [`smirnov`](generated/scipy.special.smirnov.html#scipy.special.smirnov
    "scipy.special.smirnov") |'
  prefs: []
  type: TYPE_TB
- en: '| [`kolmogorov`](generated/scipy.special.kolmogorov.html#scipy.special.kolmogorov
    "scipy.special.kolmogorov")(y[, out]) | Complementary cumulative distribution
    (Survival Function) function of Kolmogorov distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kolmogi`](generated/scipy.special.kolmogi.html#scipy.special.kolmogi "scipy.special.kolmogi")(p[, out])
    | Inverse Survival Function of Kolmogorov distribution |'
  prefs: []
  type: TYPE_TB
- en: Box-Cox transformation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`boxcox`](generated/scipy.special.boxcox.html#scipy.special.boxcox "scipy.special.boxcox")(x, lmbda[, out])
    | Compute the Box-Cox transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`boxcox1p`](generated/scipy.special.boxcox1p.html#scipy.special.boxcox1p
    "scipy.special.boxcox1p")(x, lmbda[, out]) | Compute the Box-Cox transformation
    of 1 + *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`inv_boxcox`](generated/scipy.special.inv_boxcox.html#scipy.special.inv_boxcox
    "scipy.special.inv_boxcox")(y, lmbda[, out]) | Compute the inverse of the Box-Cox
    transformation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`inv_boxcox1p`](generated/scipy.special.inv_boxcox1p.html#scipy.special.inv_boxcox1p
    "scipy.special.inv_boxcox1p")(y, lmbda[, out]) | Compute the inverse of the Box-Cox
    transformation. |'
  prefs: []
  type: TYPE_TB
- en: Sigmoidal functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`logit`](generated/scipy.special.logit.html#scipy.special.logit "scipy.special.logit")(x[, out])
    | Logit ufunc for ndarrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expit`](generated/scipy.special.expit.html#scipy.special.expit "scipy.special.expit")(x[, out])
    | Expit (a.k.a. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log_expit`](generated/scipy.special.log_expit.html#scipy.special.log_expit
    "scipy.special.log_expit")(x[, out]) | Logarithm of the logistic sigmoid function.
    |'
  prefs: []
  type: TYPE_TB
- en: Miscellaneous
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| [`tklmbda`](generated/scipy.special.tklmbda.html#scipy.special.tklmbda "scipy.special.tklmbda")(x, lmbda[, out])
    | Cumulative distribution function of the Tukey lambda distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`owens_t`](generated/scipy.special.owens_t.html#scipy.special.owens_t "scipy.special.owens_t")(h, a[, out])
    | Owen''s T Function. |'
  prefs: []
  type: TYPE_TB
- en: Information Theory functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`entr`](generated/scipy.special.entr.html#scipy.special.entr "scipy.special.entr")(x[, out])
    | Elementwise function for computing entropy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rel_entr`](generated/scipy.special.rel_entr.html#scipy.special.rel_entr
    "scipy.special.rel_entr")(x, y[, out]) | Elementwise function for computing relative
    entropy. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kl_div`](generated/scipy.special.kl_div.html#scipy.special.kl_div "scipy.special.kl_div")(x, y[, out])
    | Elementwise function for computing Kullback-Leibler divergence. |'
  prefs: []
  type: TYPE_TB
- en: '| [`huber`](generated/scipy.special.huber.html#scipy.special.huber "scipy.special.huber")(delta, r[, out])
    | Huber loss function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pseudo_huber`](generated/scipy.special.pseudo_huber.html#scipy.special.pseudo_huber
    "scipy.special.pseudo_huber")(delta, r[, out]) | Pseudo-Huber loss function. |'
  prefs: []
  type: TYPE_TB
- en: Gamma and related functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`gamma`](generated/scipy.special.gamma.html#scipy.special.gamma "scipy.special.gamma")(z[, out])
    | gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammaln`](generated/scipy.special.gammaln.html#scipy.special.gammaln "scipy.special.gammaln")(x[, out])
    | Logarithm of the absolute value of the gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`loggamma`](generated/scipy.special.loggamma.html#scipy.special.loggamma
    "scipy.special.loggamma")(z[, out]) | Principal branch of the logarithm of the
    gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammasgn`](generated/scipy.special.gammasgn.html#scipy.special.gammasgn
    "scipy.special.gammasgn")(x[, out]) | Sign of the gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammainc`](generated/scipy.special.gammainc.html#scipy.special.gammainc
    "scipy.special.gammainc")(a, x[, out]) | Regularized lower incomplete gamma function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammaincinv`](generated/scipy.special.gammaincinv.html#scipy.special.gammaincinv
    "scipy.special.gammaincinv")(a, y[, out]) | Inverse to the regularized lower incomplete
    gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammaincc`](generated/scipy.special.gammaincc.html#scipy.special.gammaincc
    "scipy.special.gammaincc")(a, x[, out]) | Regularized upper incomplete gamma function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`gammainccinv`](generated/scipy.special.gammainccinv.html#scipy.special.gammainccinv
    "scipy.special.gammainccinv")(a, y[, out]) | Inverse of the regularized upper
    incomplete gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`beta`](generated/scipy.special.beta.html#scipy.special.beta "scipy.special.beta")(a, b[, out])
    | Beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betaln`](generated/scipy.special.betaln.html#scipy.special.betaln "scipy.special.betaln")(a, b[, out])
    | Natural logarithm of absolute value of beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betainc`](generated/scipy.special.betainc.html#scipy.special.betainc "scipy.special.betainc")(a, b, x[, out])
    | Regularized incomplete beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betaincc`](generated/scipy.special.betaincc.html#scipy.special.betaincc
    "scipy.special.betaincc")(a, b, x[, out]) | Complement of the regularized incomplete
    beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betaincinv`](generated/scipy.special.betaincinv.html#scipy.special.betaincinv
    "scipy.special.betaincinv")(a, b, y[, out]) | Inverse of the regularized incomplete
    beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`betainccinv`](generated/scipy.special.betainccinv.html#scipy.special.betainccinv
    "scipy.special.betainccinv")(a, b, y[, out]) | Inverse of the complemented regularized
    incomplete beta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`psi`](generated/scipy.special.psi.html#scipy.special.psi "scipy.special.psi")(z[, out])
    | The digamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rgamma`](generated/scipy.special.rgamma.html#scipy.special.rgamma "scipy.special.rgamma")(z[, out])
    | Reciprocal of the gamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polygamma`](generated/scipy.special.polygamma.html#scipy.special.polygamma
    "scipy.special.polygamma")(n, x) | Polygamma functions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`multigammaln`](generated/scipy.special.multigammaln.html#scipy.special.multigammaln
    "scipy.special.multigammaln")(a, d) | Returns the log of multivariate gamma, also
    sometimes called the generalized gamma. |'
  prefs: []
  type: TYPE_TB
- en: '| [`digamma`](generated/scipy.special.digamma.html#scipy.special.digamma "scipy.special.digamma")(z[, out])
    | The digamma function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`poch`](generated/scipy.special.poch.html#scipy.special.poch "scipy.special.poch")(z, m[, out])
    | Pochhammer symbol. |'
  prefs: []
  type: TYPE_TB
- en: Error function and Fresnel integrals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`erf`](generated/scipy.special.erf.html#scipy.special.erf "scipy.special.erf")(z[, out])
    | Returns the error function of complex argument. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfc`](generated/scipy.special.erfc.html#scipy.special.erfc "scipy.special.erfc")(x[, out])
    | Complementary error function, `1 - erf(x)`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfcx`](generated/scipy.special.erfcx.html#scipy.special.erfcx "scipy.special.erfcx")(x[, out])
    | Scaled complementary error function, `exp(x**2) * erfc(x)`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfi`](generated/scipy.special.erfi.html#scipy.special.erfi "scipy.special.erfi")(z[, out])
    | Imaginary error function, `-i erf(i z)`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfinv`](generated/scipy.special.erfinv.html#scipy.special.erfinv "scipy.special.erfinv")(y[, out])
    | Inverse of the error function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`erfcinv`](generated/scipy.special.erfcinv.html#scipy.special.erfcinv "scipy.special.erfcinv")(y[, out])
    | Inverse of the complementary error function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wofz`](generated/scipy.special.wofz.html#scipy.special.wofz "scipy.special.wofz")(z[, out])
    | Faddeeva function |'
  prefs: []
  type: TYPE_TB
- en: '| [`dawsn`](generated/scipy.special.dawsn.html#scipy.special.dawsn "scipy.special.dawsn")(x[, out])
    | Dawson''s integral. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fresnel`](generated/scipy.special.fresnel.html#scipy.special.fresnel "scipy.special.fresnel")(z[, out])
    | Fresnel integrals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fresnel_zeros`](generated/scipy.special.fresnel_zeros.html#scipy.special.fresnel_zeros
    "scipy.special.fresnel_zeros")(nt) | Compute nt complex zeros of sine and cosine
    Fresnel integrals S(z) and C(z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`modfresnelp`](generated/scipy.special.modfresnelp.html#scipy.special.modfresnelp
    "scipy.special.modfresnelp")(x[, out]) | Modified Fresnel positive integrals |'
  prefs: []
  type: TYPE_TB
- en: '| [`modfresnelm`](generated/scipy.special.modfresnelm.html#scipy.special.modfresnelm
    "scipy.special.modfresnelm")(x[, out]) | Modified Fresnel negative integrals |'
  prefs: []
  type: TYPE_TB
- en: '| [`voigt_profile`](generated/scipy.special.voigt_profile.html#scipy.special.voigt_profile
    "scipy.special.voigt_profile")(x, sigma, gamma[, out]) | Voigt profile. |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`erf_zeros`](generated/scipy.special.erf_zeros.html#scipy.special.erf_zeros
    "scipy.special.erf_zeros")(nt) | Compute the first nt zero in the first quadrant,
    ordered by absolute value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fresnelc_zeros`](generated/scipy.special.fresnelc_zeros.html#scipy.special.fresnelc_zeros
    "scipy.special.fresnelc_zeros")(nt) | Compute nt complex zeros of cosine Fresnel
    integral C(z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`fresnels_zeros`](generated/scipy.special.fresnels_zeros.html#scipy.special.fresnels_zeros
    "scipy.special.fresnels_zeros")(nt) | Compute nt complex zeros of sine Fresnel
    integral S(z). |'
  prefs: []
  type: TYPE_TB
- en: Legendre functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`lpmv`](generated/scipy.special.lpmv.html#scipy.special.lpmv "scipy.special.lpmv")(m, v, x[, out])
    | Associated Legendre function of integer order and real degree. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sph_harm`](generated/scipy.special.sph_harm.html#scipy.special.sph_harm
    "scipy.special.sph_harm")(m, n, theta, phi[, out]) | Compute spherical harmonics.
    |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`clpmn`](generated/scipy.special.clpmn.html#scipy.special.clpmn "scipy.special.clpmn")(m, n, z[, type])
    | Associated Legendre function of the first kind for complex arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lpn`](generated/scipy.special.lpn.html#scipy.special.lpn "scipy.special.lpn")(n, z)
    | Legendre function of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lqn`](generated/scipy.special.lqn.html#scipy.special.lqn "scipy.special.lqn")(n, z)
    | Legendre function of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lpmn`](generated/scipy.special.lpmn.html#scipy.special.lpmn "scipy.special.lpmn")(m, n, z)
    | Sequence of associated Legendre functions of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`lqmn`](generated/scipy.special.lqmn.html#scipy.special.lqmn "scipy.special.lqmn")(m, n, z)
    | Sequence of associated Legendre functions of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: Ellipsoidal harmonics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ellip_harm`](generated/scipy.special.ellip_harm.html#scipy.special.ellip_harm
    "scipy.special.ellip_harm")(h2, k2, n, p, s[, signm, signn]) | Ellipsoidal harmonic
    functions E^p_n(l) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellip_harm_2`](generated/scipy.special.ellip_harm_2.html#scipy.special.ellip_harm_2
    "scipy.special.ellip_harm_2")(h2, k2, n, p, s) | Ellipsoidal harmonic functions
    F^p_n(l) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ellip_normal`](generated/scipy.special.ellip_normal.html#scipy.special.ellip_normal
    "scipy.special.ellip_normal")(h2, k2, n, p) | Ellipsoidal harmonic normalization
    constants gamma^p_n |'
  prefs: []
  type: TYPE_TB
- en: Orthogonal polynomials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions evaluate values of orthogonal polynomials:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`assoc_laguerre`](generated/scipy.special.assoc_laguerre.html#scipy.special.assoc_laguerre
    "scipy.special.assoc_laguerre")(x, n[, k]) | Compute the generalized (associated)
    Laguerre polynomial of degree n and order k. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_legendre`](generated/scipy.special.eval_legendre.html#scipy.special.eval_legendre
    "scipy.special.eval_legendre")(n, x[, out]) | Evaluate Legendre polynomial at
    a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_chebyt`](generated/scipy.special.eval_chebyt.html#scipy.special.eval_chebyt
    "scipy.special.eval_chebyt")(n, x[, out]) | Evaluate Chebyshev polynomial of the
    first kind at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_chebyu`](generated/scipy.special.eval_chebyu.html#scipy.special.eval_chebyu
    "scipy.special.eval_chebyu")(n, x[, out]) | Evaluate Chebyshev polynomial of the
    second kind at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_chebyc`](generated/scipy.special.eval_chebyc.html#scipy.special.eval_chebyc
    "scipy.special.eval_chebyc")(n, x[, out]) | Evaluate Chebyshev polynomial of the
    first kind on [-2, 2] at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_chebys`](generated/scipy.special.eval_chebys.html#scipy.special.eval_chebys
    "scipy.special.eval_chebys")(n, x[, out]) | Evaluate Chebyshev polynomial of the
    second kind on [-2, 2] at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_jacobi`](generated/scipy.special.eval_jacobi.html#scipy.special.eval_jacobi
    "scipy.special.eval_jacobi")(n, alpha, beta, x[, out]) | Evaluate Jacobi polynomial
    at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_laguerre`](generated/scipy.special.eval_laguerre.html#scipy.special.eval_laguerre
    "scipy.special.eval_laguerre")(n, x[, out]) | Evaluate Laguerre polynomial at
    a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_genlaguerre`](generated/scipy.special.eval_genlaguerre.html#scipy.special.eval_genlaguerre
    "scipy.special.eval_genlaguerre")(n, alpha, x[, out]) | Evaluate generalized Laguerre
    polynomial at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_hermite`](generated/scipy.special.eval_hermite.html#scipy.special.eval_hermite
    "scipy.special.eval_hermite")(n, x[, out]) | Evaluate physicist''s Hermite polynomial
    at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_hermitenorm`](generated/scipy.special.eval_hermitenorm.html#scipy.special.eval_hermitenorm
    "scipy.special.eval_hermitenorm")(n, x[, out]) | Evaluate probabilist''s (normalized)
    Hermite polynomial at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_gegenbauer`](generated/scipy.special.eval_gegenbauer.html#scipy.special.eval_gegenbauer
    "scipy.special.eval_gegenbauer")(n, alpha, x[, out]) | Evaluate Gegenbauer polynomial
    at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_sh_legendre`](generated/scipy.special.eval_sh_legendre.html#scipy.special.eval_sh_legendre
    "scipy.special.eval_sh_legendre")(n, x[, out]) | Evaluate shifted Legendre polynomial
    at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_sh_chebyt`](generated/scipy.special.eval_sh_chebyt.html#scipy.special.eval_sh_chebyt
    "scipy.special.eval_sh_chebyt")(n, x[, out]) | Evaluate shifted Chebyshev polynomial
    of the first kind at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_sh_chebyu`](generated/scipy.special.eval_sh_chebyu.html#scipy.special.eval_sh_chebyu
    "scipy.special.eval_sh_chebyu")(n, x[, out]) | Evaluate shifted Chebyshev polynomial
    of the second kind at a point. |'
  prefs: []
  type: TYPE_TB
- en: '| [`eval_sh_jacobi`](generated/scipy.special.eval_sh_jacobi.html#scipy.special.eval_sh_jacobi
    "scipy.special.eval_sh_jacobi")(n, p, q, x[, out]) | Evaluate shifted Jacobi polynomial
    at a point. |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions compute roots and quadrature weights for orthogonal
    polynomials:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`roots_legendre`](generated/scipy.special.roots_legendre.html#scipy.special.roots_legendre
    "scipy.special.roots_legendre")(n[, mu]) | Gauss-Legendre quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_chebyt`](generated/scipy.special.roots_chebyt.html#scipy.special.roots_chebyt
    "scipy.special.roots_chebyt")(n[, mu]) | Gauss-Chebyshev (first kind) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_chebyu`](generated/scipy.special.roots_chebyu.html#scipy.special.roots_chebyu
    "scipy.special.roots_chebyu")(n[, mu]) | Gauss-Chebyshev (second kind) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_chebyc`](generated/scipy.special.roots_chebyc.html#scipy.special.roots_chebyc
    "scipy.special.roots_chebyc")(n[, mu]) | Gauss-Chebyshev (first kind) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_chebys`](generated/scipy.special.roots_chebys.html#scipy.special.roots_chebys
    "scipy.special.roots_chebys")(n[, mu]) | Gauss-Chebyshev (second kind) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_jacobi`](generated/scipy.special.roots_jacobi.html#scipy.special.roots_jacobi
    "scipy.special.roots_jacobi")(n, alpha, beta[, mu]) | Gauss-Jacobi quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_laguerre`](generated/scipy.special.roots_laguerre.html#scipy.special.roots_laguerre
    "scipy.special.roots_laguerre")(n[, mu]) | Gauss-Laguerre quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_genlaguerre`](generated/scipy.special.roots_genlaguerre.html#scipy.special.roots_genlaguerre
    "scipy.special.roots_genlaguerre")(n, alpha[, mu]) | Gauss-generalized Laguerre
    quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_hermite`](generated/scipy.special.roots_hermite.html#scipy.special.roots_hermite
    "scipy.special.roots_hermite")(n[, mu]) | Gauss-Hermite (physicist''s) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_hermitenorm`](generated/scipy.special.roots_hermitenorm.html#scipy.special.roots_hermitenorm
    "scipy.special.roots_hermitenorm")(n[, mu]) | Gauss-Hermite (statistician''s)
    quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_gegenbauer`](generated/scipy.special.roots_gegenbauer.html#scipy.special.roots_gegenbauer
    "scipy.special.roots_gegenbauer")(n, alpha[, mu]) | Gauss-Gegenbauer quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_sh_legendre`](generated/scipy.special.roots_sh_legendre.html#scipy.special.roots_sh_legendre
    "scipy.special.roots_sh_legendre")(n[, mu]) | Gauss-Legendre (shifted) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_sh_chebyt`](generated/scipy.special.roots_sh_chebyt.html#scipy.special.roots_sh_chebyt
    "scipy.special.roots_sh_chebyt")(n[, mu]) | Gauss-Chebyshev (first kind, shifted)
    quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_sh_chebyu`](generated/scipy.special.roots_sh_chebyu.html#scipy.special.roots_sh_chebyu
    "scipy.special.roots_sh_chebyu")(n[, mu]) | Gauss-Chebyshev (second kind, shifted)
    quadrature. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots_sh_jacobi`](generated/scipy.special.roots_sh_jacobi.html#scipy.special.roots_sh_jacobi
    "scipy.special.roots_sh_jacobi")(n, p1, q1[, mu]) | Gauss-Jacobi (shifted) quadrature.
    |'
  prefs: []
  type: TYPE_TB
- en: The functions below, in turn, return the polynomial coefficients in `orthopoly1d`
    objects, which function similarly as [`numpy.poly1d`](https://numpy.org/devdocs/reference/generated/numpy.poly1d.html#numpy.poly1d
    "(in NumPy v2.0.dev0)"). The `orthopoly1d` class also has an attribute `weights`,
    which returns the roots, weights, and total weights for the appropriate form of
    Gaussian quadrature. These are returned in an `n x 3` array with roots in the
    first column, weights in the second column, and total weights in the final column.
    Note that `orthopoly1d` objects are converted to [`poly1d`](https://numpy.org/devdocs/reference/generated/numpy.poly1d.html#numpy.poly1d
    "(in NumPy v2.0.dev0)") when doing arithmetic, and lose information of the original
    orthogonal polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`legendre`](generated/scipy.special.legendre.html#scipy.special.legendre
    "scipy.special.legendre")(n[, monic]) | Legendre polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chebyt`](generated/scipy.special.chebyt.html#scipy.special.chebyt "scipy.special.chebyt")(n[, monic])
    | Chebyshev polynomial of the first kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chebyu`](generated/scipy.special.chebyu.html#scipy.special.chebyu "scipy.special.chebyu")(n[, monic])
    | Chebyshev polynomial of the second kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`chebyc`](generated/scipy.special.chebyc.html#scipy.special.chebyc "scipy.special.chebyc")(n[, monic])
    | Chebyshev polynomial of the first kind on \([-2, 2]\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`chebys`](generated/scipy.special.chebys.html#scipy.special.chebys "scipy.special.chebys")(n[, monic])
    | Chebyshev polynomial of the second kind on \([-2, 2]\). |'
  prefs: []
  type: TYPE_TB
- en: '| [`jacobi`](generated/scipy.special.jacobi.html#scipy.special.jacobi "scipy.special.jacobi")(n, alpha, beta[, monic])
    | Jacobi polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`laguerre`](generated/scipy.special.laguerre.html#scipy.special.laguerre
    "scipy.special.laguerre")(n[, monic]) | Laguerre polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`genlaguerre`](generated/scipy.special.genlaguerre.html#scipy.special.genlaguerre
    "scipy.special.genlaguerre")(n, alpha[, monic]) | Generalized (associated) Laguerre
    polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hermite`](generated/scipy.special.hermite.html#scipy.special.hermite "scipy.special.hermite")(n[, monic])
    | Physicist''s Hermite polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hermitenorm`](generated/scipy.special.hermitenorm.html#scipy.special.hermitenorm
    "scipy.special.hermitenorm")(n[, monic]) | Normalized (probabilist''s) Hermite
    polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`gegenbauer`](generated/scipy.special.gegenbauer.html#scipy.special.gegenbauer
    "scipy.special.gegenbauer")(n, alpha[, monic]) | Gegenbauer (ultraspherical) polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`sh_legendre`](generated/scipy.special.sh_legendre.html#scipy.special.sh_legendre
    "scipy.special.sh_legendre")(n[, monic]) | Shifted Legendre polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sh_chebyt`](generated/scipy.special.sh_chebyt.html#scipy.special.sh_chebyt
    "scipy.special.sh_chebyt")(n[, monic]) | Shifted Chebyshev polynomial of the first
    kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sh_chebyu`](generated/scipy.special.sh_chebyu.html#scipy.special.sh_chebyu
    "scipy.special.sh_chebyu")(n[, monic]) | Shifted Chebyshev polynomial of the second
    kind. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sh_jacobi`](generated/scipy.special.sh_jacobi.html#scipy.special.sh_jacobi
    "scipy.special.sh_jacobi")(n, p, q[, monic]) | Shifted Jacobi polynomial. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Computing values of high-order polynomials (around `order > 20`) using polynomial
    coefficients is numerically unstable. To evaluate polynomial values, the `eval_*`
    functions should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: Hypergeometric functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`hyp2f1`](generated/scipy.special.hyp2f1.html#scipy.special.hyp2f1 "scipy.special.hyp2f1")(a, b, c, z[, out])
    | Gauss hypergeometric function 2F1(a, b; c; z) |'
  prefs: []
  type: TYPE_TB
- en: '| [`hyp1f1`](generated/scipy.special.hyp1f1.html#scipy.special.hyp1f1 "scipy.special.hyp1f1")(a, b, x[, out])
    | Confluent hypergeometric function 1F1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hyperu`](generated/scipy.special.hyperu.html#scipy.special.hyperu "scipy.special.hyperu")(a, b, x[, out])
    | Confluent hypergeometric function U |'
  prefs: []
  type: TYPE_TB
- en: '| [`hyp0f1`](generated/scipy.special.hyp0f1.html#scipy.special.hyp0f1 "scipy.special.hyp0f1")(v, z[, out])
    | Confluent hypergeometric limit function 0F1. |'
  prefs: []
  type: TYPE_TB
- en: Parabolic cylinder functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`pbdv`](generated/scipy.special.pbdv.html#scipy.special.pbdv "scipy.special.pbdv")(v, x[, out])
    | Parabolic cylinder function D |'
  prefs: []
  type: TYPE_TB
- en: '| [`pbvv`](generated/scipy.special.pbvv.html#scipy.special.pbvv "scipy.special.pbvv")(v, x[, out])
    | Parabolic cylinder function V |'
  prefs: []
  type: TYPE_TB
- en: '| [`pbwa`](generated/scipy.special.pbwa.html#scipy.special.pbwa "scipy.special.pbwa")(a, x[, out])
    | Parabolic cylinder function W. |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`pbdv_seq`](generated/scipy.special.pbdv_seq.html#scipy.special.pbdv_seq
    "scipy.special.pbdv_seq")(v, x) | Parabolic cylinder functions Dv(x) and derivatives.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`pbvv_seq`](generated/scipy.special.pbvv_seq.html#scipy.special.pbvv_seq
    "scipy.special.pbvv_seq")(v, x) | Parabolic cylinder functions Vv(x) and derivatives.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`pbdn_seq`](generated/scipy.special.pbdn_seq.html#scipy.special.pbdn_seq
    "scipy.special.pbdn_seq")(n, z) | Parabolic cylinder functions Dn(z) and derivatives.
    |'
  prefs: []
  type: TYPE_TB
- en: Mathieu and related functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`mathieu_a`](generated/scipy.special.mathieu_a.html#scipy.special.mathieu_a
    "scipy.special.mathieu_a")(m, q[, out]) | Characteristic value of even Mathieu
    functions |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_b`](generated/scipy.special.mathieu_b.html#scipy.special.mathieu_b
    "scipy.special.mathieu_b")(m, q[, out]) | Characteristic value of odd Mathieu
    functions |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`mathieu_even_coef`](generated/scipy.special.mathieu_even_coef.html#scipy.special.mathieu_even_coef
    "scipy.special.mathieu_even_coef")(m, q) | Fourier coefficients for even Mathieu
    and modified Mathieu functions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_odd_coef`](generated/scipy.special.mathieu_odd_coef.html#scipy.special.mathieu_odd_coef
    "scipy.special.mathieu_odd_coef")(m, q) | Fourier coefficients for even Mathieu
    and modified Mathieu functions. |'
  prefs: []
  type: TYPE_TB
- en: 'The following return both function and first derivative:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`mathieu_cem`](generated/scipy.special.mathieu_cem.html#scipy.special.mathieu_cem
    "scipy.special.mathieu_cem")(m, q, x[, out]) | Even Mathieu function and its derivative
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_sem`](generated/scipy.special.mathieu_sem.html#scipy.special.mathieu_sem
    "scipy.special.mathieu_sem")(m, q, x[, out]) | Odd Mathieu function and its derivative
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_modcem1`](generated/scipy.special.mathieu_modcem1.html#scipy.special.mathieu_modcem1
    "scipy.special.mathieu_modcem1")(m, q, x[, out]) | Even modified Mathieu function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_modcem2`](generated/scipy.special.mathieu_modcem2.html#scipy.special.mathieu_modcem2
    "scipy.special.mathieu_modcem2")(m, q, x[, out]) | Even modified Mathieu function
    of the second kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_modsem1`](generated/scipy.special.mathieu_modsem1.html#scipy.special.mathieu_modsem1
    "scipy.special.mathieu_modsem1")(m, q, x[, out]) | Odd modified Mathieu function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`mathieu_modsem2`](generated/scipy.special.mathieu_modsem2.html#scipy.special.mathieu_modsem2
    "scipy.special.mathieu_modsem2")(m, q, x[, out]) | Odd modified Mathieu function
    of the second kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: Spheroidal wave functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`pro_ang1`](generated/scipy.special.pro_ang1.html#scipy.special.pro_ang1
    "scipy.special.pro_ang1")(m, n, c, x[, out]) | Prolate spheroidal angular function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_rad1`](generated/scipy.special.pro_rad1.html#scipy.special.pro_rad1
    "scipy.special.pro_rad1")(m, n, c, x[, out]) | Prolate spheroidal radial function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_rad2`](generated/scipy.special.pro_rad2.html#scipy.special.pro_rad2
    "scipy.special.pro_rad2")(m, n, c, x[, out]) | Prolate spheroidal radial function
    of the second kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_ang1`](generated/scipy.special.obl_ang1.html#scipy.special.obl_ang1
    "scipy.special.obl_ang1")(m, n, c, x[, out]) | Oblate spheroidal angular function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_rad1`](generated/scipy.special.obl_rad1.html#scipy.special.obl_rad1
    "scipy.special.obl_rad1")(m, n, c, x[, out]) | Oblate spheroidal radial function
    of the first kind and its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_rad2`](generated/scipy.special.obl_rad2.html#scipy.special.obl_rad2
    "scipy.special.obl_rad2")(m, n, c, x[, out]) | Oblate spheroidal radial function
    of the second kind and its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_cv`](generated/scipy.special.pro_cv.html#scipy.special.pro_cv "scipy.special.pro_cv")(m, n, c[, out])
    | Characteristic value of prolate spheroidal function |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_cv`](generated/scipy.special.obl_cv.html#scipy.special.obl_cv "scipy.special.obl_cv")(m, n, c[, out])
    | Characteristic value of oblate spheroidal function |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_cv_seq`](generated/scipy.special.pro_cv_seq.html#scipy.special.pro_cv_seq
    "scipy.special.pro_cv_seq")(m, n, c) | Characteristic values for prolate spheroidal
    wave functions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_cv_seq`](generated/scipy.special.obl_cv_seq.html#scipy.special.obl_cv_seq
    "scipy.special.obl_cv_seq")(m, n, c) | Characteristic values for oblate spheroidal
    wave functions. |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions require pre-computed characteristic value:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`pro_ang1_cv`](generated/scipy.special.pro_ang1_cv.html#scipy.special.pro_ang1_cv
    "scipy.special.pro_ang1_cv")(m, n, c, cv, x[, out]) | Prolate spheroidal angular
    function pro_ang1 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_rad1_cv`](generated/scipy.special.pro_rad1_cv.html#scipy.special.pro_rad1_cv
    "scipy.special.pro_rad1_cv")(m, n, c, cv, x[, out]) | Prolate spheroidal radial
    function pro_rad1 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: '| [`pro_rad2_cv`](generated/scipy.special.pro_rad2_cv.html#scipy.special.pro_rad2_cv
    "scipy.special.pro_rad2_cv")(m, n, c, cv, x[, out]) | Prolate spheroidal radial
    function pro_rad2 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_ang1_cv`](generated/scipy.special.obl_ang1_cv.html#scipy.special.obl_ang1_cv
    "scipy.special.obl_ang1_cv")(m, n, c, cv, x[, out]) | Oblate spheroidal angular
    function obl_ang1 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_rad1_cv`](generated/scipy.special.obl_rad1_cv.html#scipy.special.obl_rad1_cv
    "scipy.special.obl_rad1_cv")(m, n, c, cv, x[, out]) | Oblate spheroidal radial
    function obl_rad1 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: '| [`obl_rad2_cv`](generated/scipy.special.obl_rad2_cv.html#scipy.special.obl_rad2_cv
    "scipy.special.obl_rad2_cv")(m, n, c, cv, x[, out]) | Oblate spheroidal radial
    function obl_rad2 for precomputed characteristic value |'
  prefs: []
  type: TYPE_TB
- en: Kelvin functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`kelvin`](generated/scipy.special.kelvin.html#scipy.special.kelvin "scipy.special.kelvin")(x[, out])
    | Kelvin functions as complex numbers |'
  prefs: []
  type: TYPE_TB
- en: '| [`kelvin_zeros`](generated/scipy.special.kelvin_zeros.html#scipy.special.kelvin_zeros
    "scipy.special.kelvin_zeros")(nt) | Compute nt zeros of all Kelvin functions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ber`](generated/scipy.special.ber.html#scipy.special.ber "scipy.special.ber")(x[, out])
    | Kelvin function ber. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bei`](generated/scipy.special.bei.html#scipy.special.bei "scipy.special.bei")(x[, out])
    | Kelvin function bei. |'
  prefs: []
  type: TYPE_TB
- en: '| [`berp`](generated/scipy.special.berp.html#scipy.special.berp "scipy.special.berp")(x[, out])
    | Derivative of the Kelvin function ber. |'
  prefs: []
  type: TYPE_TB
- en: '| [`beip`](generated/scipy.special.beip.html#scipy.special.beip "scipy.special.beip")(x[, out])
    | Derivative of the Kelvin function bei. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ker`](generated/scipy.special.ker.html#scipy.special.ker "scipy.special.ker")(x[, out])
    | Kelvin function ker. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kei`](generated/scipy.special.kei.html#scipy.special.kei "scipy.special.kei")(x[, out])
    | Kelvin function kei. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kerp`](generated/scipy.special.kerp.html#scipy.special.kerp "scipy.special.kerp")(x[, out])
    | Derivative of the Kelvin function ker. |'
  prefs: []
  type: TYPE_TB
- en: '| [`keip`](generated/scipy.special.keip.html#scipy.special.keip "scipy.special.keip")(x[, out])
    | Derivative of the Kelvin function kei. |'
  prefs: []
  type: TYPE_TB
- en: 'The following functions do not accept NumPy arrays (they are not universal
    functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ber_zeros`](generated/scipy.special.ber_zeros.html#scipy.special.ber_zeros
    "scipy.special.ber_zeros")(nt) | Compute nt zeros of the Kelvin function ber.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`bei_zeros`](generated/scipy.special.bei_zeros.html#scipy.special.bei_zeros
    "scipy.special.bei_zeros")(nt) | Compute nt zeros of the Kelvin function bei.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`berp_zeros`](generated/scipy.special.berp_zeros.html#scipy.special.berp_zeros
    "scipy.special.berp_zeros")(nt) | Compute nt zeros of the derivative of the Kelvin
    function ber. |'
  prefs: []
  type: TYPE_TB
- en: '| [`beip_zeros`](generated/scipy.special.beip_zeros.html#scipy.special.beip_zeros
    "scipy.special.beip_zeros")(nt) | Compute nt zeros of the derivative of the Kelvin
    function bei. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ker_zeros`](generated/scipy.special.ker_zeros.html#scipy.special.ker_zeros
    "scipy.special.ker_zeros")(nt) | Compute nt zeros of the Kelvin function ker.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`kei_zeros`](generated/scipy.special.kei_zeros.html#scipy.special.kei_zeros
    "scipy.special.kei_zeros")(nt) | Compute nt zeros of the Kelvin function kei.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`kerp_zeros`](generated/scipy.special.kerp_zeros.html#scipy.special.kerp_zeros
    "scipy.special.kerp_zeros")(nt) | Compute nt zeros of the derivative of the Kelvin
    function ker. |'
  prefs: []
  type: TYPE_TB
- en: '| [`keip_zeros`](generated/scipy.special.keip_zeros.html#scipy.special.keip_zeros
    "scipy.special.keip_zeros")(nt) | Compute nt zeros of the derivative of the Kelvin
    function kei. |'
  prefs: []
  type: TYPE_TB
- en: Combinatorics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`comb`](generated/scipy.special.comb.html#scipy.special.comb "scipy.special.comb")(N, k, *[, exact, repetition, legacy])
    | The number of combinations of N things taken k at a time. |'
  prefs: []
  type: TYPE_TB
- en: '| [`perm`](generated/scipy.special.perm.html#scipy.special.perm "scipy.special.perm")(N, k[, exact])
    | Permutations of N things taken k at a time, i.e., k-permutations of N. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stirling2`](generated/scipy.special.stirling2.html#scipy.special.stirling2
    "scipy.special.stirling2")(N, K, *[, exact]) | Generate Stirling number(s) of
    the second kind. |'
  prefs: []
  type: TYPE_TB
- en: Lambert W and related functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`lambertw`](generated/scipy.special.lambertw.html#scipy.special.lambertw
    "scipy.special.lambertw")(z[, k, tol]) | Lambert W function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`wrightomega`](generated/scipy.special.wrightomega.html#scipy.special.wrightomega
    "scipy.special.wrightomega")(z[, out]) | Wright Omega function. |'
  prefs: []
  type: TYPE_TB
- en: Other special functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`agm`](generated/scipy.special.agm.html#scipy.special.agm "scipy.special.agm")(a, b[, out])
    | Compute the arithmetic-geometric mean of *a* and *b*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`bernoulli`](generated/scipy.special.bernoulli.html#scipy.special.bernoulli
    "scipy.special.bernoulli")(n) | Bernoulli numbers B0..Bn (inclusive). |'
  prefs: []
  type: TYPE_TB
- en: '| [`binom`](generated/scipy.special.binom.html#scipy.special.binom "scipy.special.binom")(x, y[, out])
    | Binomial coefficient considered as a function of two real variables. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diric`](generated/scipy.special.diric.html#scipy.special.diric "scipy.special.diric")(x, n)
    | Periodic sinc function, also called the Dirichlet function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`euler`](generated/scipy.special.euler.html#scipy.special.euler "scipy.special.euler")(n)
    | Euler numbers E(0), E(1), ..., E(n). |'
  prefs: []
  type: TYPE_TB
- en: '| [`expn`](generated/scipy.special.expn.html#scipy.special.expn "scipy.special.expn")(n, x[, out])
    | Generalized exponential integral En. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp1`](generated/scipy.special.exp1.html#scipy.special.exp1 "scipy.special.exp1")(z[, out])
    | Exponential integral E1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expi`](generated/scipy.special.expi.html#scipy.special.expi "scipy.special.expi")(x[, out])
    | Exponential integral Ei. |'
  prefs: []
  type: TYPE_TB
- en: '| [`factorial`](generated/scipy.special.factorial.html#scipy.special.factorial
    "scipy.special.factorial")(n[, exact]) | The factorial of a number or array of
    numbers. |'
  prefs: []
  type: TYPE_TB
- en: '| [`factorial2`](generated/scipy.special.factorial2.html#scipy.special.factorial2
    "scipy.special.factorial2")(n[, exact]) | Double factorial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`factorialk`](generated/scipy.special.factorialk.html#scipy.special.factorialk
    "scipy.special.factorialk")(n, k[, exact]) | Multifactorial of n of order k, n(!!...!).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`shichi`](generated/scipy.special.shichi.html#scipy.special.shichi "scipy.special.shichi")(x[, out])
    | Hyperbolic sine and cosine integrals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sici`](generated/scipy.special.sici.html#scipy.special.sici "scipy.special.sici")(x[, out])
    | Sine and cosine integrals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`softmax`](generated/scipy.special.softmax.html#scipy.special.softmax "scipy.special.softmax")(x[, axis])
    | Compute the softmax function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log_softmax`](generated/scipy.special.log_softmax.html#scipy.special.log_softmax
    "scipy.special.log_softmax")(x[, axis]) | Compute the logarithm of the softmax
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spence`](generated/scipy.special.spence.html#scipy.special.spence "scipy.special.spence")(z[, out])
    | Spence''s function, also known as the dilogarithm. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zeta`](generated/scipy.special.zeta.html#scipy.special.zeta "scipy.special.zeta")(x[, q, out])
    | Riemann or Hurwitz zeta function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`zetac`](generated/scipy.special.zetac.html#scipy.special.zetac "scipy.special.zetac")(x[, out])
    | Riemann zeta function minus 1. |'
  prefs: []
  type: TYPE_TB
- en: Convenience functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`cbrt`](generated/scipy.special.cbrt.html#scipy.special.cbrt "scipy.special.cbrt")(x[, out])
    | Element-wise cube root of *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp10`](generated/scipy.special.exp10.html#scipy.special.exp10 "scipy.special.exp10")(x[, out])
    | Compute `10**x` element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exp2`](generated/scipy.special.exp2.html#scipy.special.exp2 "scipy.special.exp2")(x[, out])
    | Compute `2**x` element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`radian`](generated/scipy.special.radian.html#scipy.special.radian "scipy.special.radian")(d, m, s[, out])
    | Convert from degrees to radians. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosdg`](generated/scipy.special.cosdg.html#scipy.special.cosdg "scipy.special.cosdg")(x[, out])
    | Cosine of the angle *x* given in degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sindg`](generated/scipy.special.sindg.html#scipy.special.sindg "scipy.special.sindg")(x[, out])
    | Sine of the angle *x* given in degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tandg`](generated/scipy.special.tandg.html#scipy.special.tandg "scipy.special.tandg")(x[, out])
    | Tangent of angle *x* given in degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cotdg`](generated/scipy.special.cotdg.html#scipy.special.cotdg "scipy.special.cotdg")(x[, out])
    | Cotangent of the angle *x* given in degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`log1p`](generated/scipy.special.log1p.html#scipy.special.log1p "scipy.special.log1p")(x[, out])
    | Calculates log(1 + x) for use when *x* is near zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expm1`](generated/scipy.special.expm1.html#scipy.special.expm1 "scipy.special.expm1")(x[, out])
    | Compute `exp(x) - 1`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cosm1`](generated/scipy.special.cosm1.html#scipy.special.cosm1 "scipy.special.cosm1")(x[, out])
    | cos(x) - 1 for use when *x* is near zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`powm1`](generated/scipy.special.powm1.html#scipy.special.powm1 "scipy.special.powm1")(x, y[, out])
    | Computes `x**y - 1`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](generated/scipy.special.round.html#scipy.special.round "scipy.special.round")(x[, out])
    | Round to the nearest integer. |'
  prefs: []
  type: TYPE_TB
- en: '| [`xlogy`](generated/scipy.special.xlogy.html#scipy.special.xlogy "scipy.special.xlogy")(x, y[, out])
    | Compute `x*log(y)` so that the result is 0 if `x = 0`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`xlog1py`](generated/scipy.special.xlog1py.html#scipy.special.xlog1py "scipy.special.xlog1py")(x, y[, out])
    | Compute `x*log1p(y)` so that the result is 0 if `x = 0`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logsumexp`](generated/scipy.special.logsumexp.html#scipy.special.logsumexp
    "scipy.special.logsumexp")(a[, axis, b, keepdims, return_sign]) | Compute the
    log of the sum of exponentials of input elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`exprel`](generated/scipy.special.exprel.html#scipy.special.exprel "scipy.special.exprel")(x[, out])
    | Relative error exponential, `(exp(x) - 1)/x`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sinc`](generated/scipy.special.sinc.html#scipy.special.sinc "scipy.special.sinc")(x)
    | Return the normalized sinc function. |'
  prefs: []
  type: TYPE_TB
