- en: Chart visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/visualization.html](https://pandas.pydata.org/docs/user_guide/visualization.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The examples below assume that you’re using [Jupyter](https://jupyter.org/).
  prefs: []
  type: TYPE_NORMAL
- en: This section demonstrates visualization through charting. For information on
    visualization of tabular data please see the section on [Table Visualization](style.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the standard convention for referencing the matplotlib API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We provide the basics in pandas to easily create decent looking plots. See [the
    ecosystem page](https://pandas.pydata.org/community/ecosystem.html) for visualization
    libraries that go beyond the basics documented here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All calls to `np.random` are seeded with 123456.
  prefs: []
  type: TYPE_NORMAL
- en: '## Basic plotting: `plot`'
  prefs: []
  type: TYPE_NORMAL
- en: We will demonstrate the basics, see the [cookbook](cookbook.html#cookbook-plotting)
    for some advanced strategies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `plot` method on Series and DataFrame is just a simple wrapper around [`plt.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  prefs: []
  type: TYPE_IMG
- en: If the index consists of dates, it calls [`gcf().autofmt_xdate()`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
    "(in Matplotlib v3.8.4)") to try to format the x-axis nicely as per above.
  prefs: []
  type: TYPE_NORMAL
- en: 'On DataFrame, [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") is a convenience to plot all of the columns with labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can plot one column versus another using the `x` and `y` keywords in [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/df_plot_xy.png](../Images/607eb0b27413e94717633af2cb466995.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more formatting and styling options, see [formatting](#visualization-formatting)
    below.  ## Other plots'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting methods allow for a handful of plot styles other than the default
    line plot. These methods can be provided as the `kind` keyword argument to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"), and include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[‘bar’](#visualization-barplot) or [‘barh’](#visualization-barplot) for bar
    plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hist’](#visualization-hist) for histogram'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘box’](#visualization-box) for boxplot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘kde’](#visualization-kde) or [‘density’](#visualization-kde) for density
    plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘area’](#visualization-area-plot) for area plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘scatter’](#visualization-scatter) for scatter plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hexbin’](#visualization-hexbin) for hexagonal bin plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘pie’](#visualization-pie) for pie plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, a bar plot can be created the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also create these other plots using the methods `DataFrame.plot.<kind>`
    instead of providing the `kind` keyword argument. This makes it easier to discover
    plot methods and the specific arguments they use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In addition to these `kind` s, there are the [DataFrame.hist()](#visualization-hist),
    and [DataFrame.boxplot()](#visualization-box) methods, which use a separate interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there are several [plotting functions](#visualization-tools) in `pandas.plotting`
    that take a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    as an argument. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scatter Matrix](#visualization-scatter-matrix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Andrews Curves](#visualization-andrews-curves)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallel Coordinates](#visualization-parallel-coordinates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lag Plot](#visualization-lag)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Autocorrelation Plot](#visualization-autocorrelation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bootstrap Plot](#visualization-bootstrap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RadViz](#visualization-radviz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plots may also be adorned with [errorbars](#visualization-errorbars) or [tables](#visualization-table).
  prefs: []
  type: TYPE_NORMAL
- en: '### Bar plots'
  prefs: []
  type: TYPE_NORMAL
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get horizontal bar plots, use the `barh` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  prefs: []
  type: TYPE_IMG
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `return_type` | Faceted | Output type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | Yes | 2-D ndarray of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | Yes | Series of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | No | dict of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | No | namedtuple |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | Yes | Series of namedtuples |'
  prefs: []
  type: TYPE_TB
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  prefs: []
  type: TYPE_IMG
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  prefs: []
  type: TYPE_NORMAL
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  prefs: []
  type: TYPE_IMG
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.  ### Hexagonal bin plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.  ### Pie plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  prefs: []
  type: TYPE_IMG
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.  ## Plotting with missing data'
  prefs: []
  type: TYPE_NORMAL
- en: pandas tries to be pragmatic about plotting `DataFrames` or `Series` that contain
    missing data. Missing values are dropped, left out, or filled depending on the
    plot type.
  prefs: []
  type: TYPE_NORMAL
- en: '| Plot Type | NaN Handling |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Line | Leave gaps at NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Line (stacked) | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| Bar | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| Scatter | Drop NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Histogram | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Box | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Area | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| KDE | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Hexbin | Drop NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Pie | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: 'If any of these defaults are not what you want, or if you want to be explicit
    about how missing values are handled, consider using [`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") or [`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") before plotting.  ## Plotting tools'
  prefs: []
  type: TYPE_NORMAL
- en: These functions can be imported from `pandas.plotting` and take a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '### Scatter matrix plot'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  prefs: []
  type: TYPE_NORMAL
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  prefs: []
  type: TYPE_NORMAL
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  prefs: []
  type: TYPE_NORMAL
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ##
    Plot formatting'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the plot style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  prefs: []
  type: TYPE_NORMAL
- en: General plot style arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Scales
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.  ### Colormaps'
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting directly with Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations it may still be preferable or necessary to prepare plots
    directly with matplotlib, for instance when a certain type of plot or customization
    is not (yet) supported by pandas. `Series` and `DataFrame` objects behave like
    arrays and can therefore be passed directly to matplotlib functions without explicit
    casts.
  prefs: []
  type: TYPE_NORMAL
- en: pandas also automatically registers formatters and locators that recognize date
    indices, thereby extending date and time support to practically all plot types
    available in matplotlib. Although this formatting does not provide the same level
    of refinement you would get when plotting via pandas, it can be faster when plotting
    a large number of points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bollinger.png](../Images/fcf533ed141454b711c76b9d47bb4697.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting backends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can be extended with third-party plotting backends. The main idea is
    letting users select a plotting backend different than the provided one based
    on Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by passing ‘backend.module’ as the argument `backend` in `plot`
    function. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also set this option globally, do you don’t need to
    specify the keyword in each `plot` call. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be more or less equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The backend module can then use other visualization tools (Bokeh, Altair, hvplot,…)
    to generate the plots. Some libraries implementing a backend for pandas are listed
    on [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html).
  prefs: []
  type: TYPE_NORMAL
- en: Developers guide can be found at [https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends](https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends)
  prefs: []
  type: TYPE_NORMAL
- en: '## Basic plotting: `plot`'
  prefs: []
  type: TYPE_NORMAL
- en: We will demonstrate the basics, see the [cookbook](cookbook.html#cookbook-plotting)
    for some advanced strategies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `plot` method on Series and DataFrame is just a simple wrapper around [`plt.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  prefs: []
  type: TYPE_IMG
- en: If the index consists of dates, it calls [`gcf().autofmt_xdate()`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure.autofmt_xdate
    "(in Matplotlib v3.8.4)") to try to format the x-axis nicely as per above.
  prefs: []
  type: TYPE_NORMAL
- en: 'On DataFrame, [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") is a convenience to plot all of the columns with labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can plot one column versus another using the `x` and `y` keywords in [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/df_plot_xy.png](../Images/607eb0b27413e94717633af2cb466995.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more formatting and styling options, see [formatting](#visualization-formatting)
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '## Other plots'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting methods allow for a handful of plot styles other than the default
    line plot. These methods can be provided as the `kind` keyword argument to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"), and include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[‘bar’](#visualization-barplot) or [‘barh’](#visualization-barplot) for bar
    plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hist’](#visualization-hist) for histogram'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘box’](#visualization-box) for boxplot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘kde’](#visualization-kde) or [‘density’](#visualization-kde) for density
    plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘area’](#visualization-area-plot) for area plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘scatter’](#visualization-scatter) for scatter plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘hexbin’](#visualization-hexbin) for hexagonal bin plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[‘pie’](#visualization-pie) for pie plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, a bar plot can be created the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also create these other plots using the methods `DataFrame.plot.<kind>`
    instead of providing the `kind` keyword argument. This makes it easier to discover
    plot methods and the specific arguments they use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: In addition to these `kind` s, there are the [DataFrame.hist()](#visualization-hist),
    and [DataFrame.boxplot()](#visualization-box) methods, which use a separate interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there are several [plotting functions](#visualization-tools) in `pandas.plotting`
    that take a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    as an argument. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scatter Matrix](#visualization-scatter-matrix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Andrews Curves](#visualization-andrews-curves)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallel Coordinates](#visualization-parallel-coordinates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lag Plot](#visualization-lag)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Autocorrelation Plot](#visualization-autocorrelation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bootstrap Plot](#visualization-bootstrap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RadViz](#visualization-radviz)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plots may also be adorned with [errorbars](#visualization-errorbars) or [tables](#visualization-table).
  prefs: []
  type: TYPE_NORMAL
- en: '### Bar plots'
  prefs: []
  type: TYPE_NORMAL
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get horizontal bar plots, use the `barh` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  prefs: []
  type: TYPE_IMG
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `return_type` | Faceted | Output type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | Yes | 2-D ndarray of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | Yes | Series of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | No | dict of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | No | namedtuple |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | Yes | Series of namedtuples |'
  prefs: []
  type: TYPE_TB
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  prefs: []
  type: TYPE_IMG
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  prefs: []
  type: TYPE_NORMAL
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  prefs: []
  type: TYPE_IMG
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.  ### Hexagonal bin plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.  ### Pie plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  prefs: []
  type: TYPE_IMG
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.  ### Bar plots'
  prefs: []
  type: TYPE_NORMAL
- en: 'For labeled, non-time series data, you may wish to produce a bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_ex.png](../Images/726f6d3c4830720cc28cbbf08e620432.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling a DataFrame’s [`plot.bar()`](../reference/api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar") method produces a multiple bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_multi_ex.png](../Images/5349dbd783b82f34b5826b6f25f02ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce a stacked bar plot, pass `stacked=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bar_plot_stacked_ex.png](../Images/1434f6b2bcf3b731cc16827634833051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get horizontal bar plots, use the `barh` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/barh_plot_stacked_ex.png](../Images/588e02c5e96bfa92bf510185390cfa0d.png)
    ### Histograms'
  prefs: []
  type: TYPE_NORMAL
- en: Histograms can be drawn by using the [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist") and [`Series.plot.hist()`](../reference/api/pandas.Series.plot.hist.html#pandas.Series.plot.hist
    "pandas.Series.plot.hist") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new.png](../Images/1c1d373a7166a547051074722cd49982.png)'
  prefs: []
  type: TYPE_IMG
- en: A histogram can be stacked using `stacked=True`. Bin size can be changed using
    the `bins` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_stacked.png](../Images/94216780baaf2d873059d030724e15d8.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib `hist`. For example, horizontal
    and cumulative histograms can be drawn by `orientation='horizontal'` and `cumulative=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_new_kwargs.png](../Images/85f6082e9aaf908b3ab0532680055d29.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`hist`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hist.html#matplotlib.axes.Axes.hist
    "(in Matplotlib v3.8.4)") method and the [matplotlib hist documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.hist` to plot histogram still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hist_plot_ex.png](../Images/61b321e88a68f08fe9a039c543ba837d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.hist()`](../reference/api/pandas.DataFrame.hist.html#pandas.DataFrame.hist
    "pandas.DataFrame.hist") plots the histograms of the columns on multiple subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_hist_ex.png](../Images/698749d494f1ec32832c8588f4a8d1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `by` keyword can be specified to plot grouped histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist.png](../Images/af6fa2eff49fb6376bf93a0893afdade.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition, the `by` keyword can also be specified in [`DataFrame.plot.hist()`](../reference/api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist").
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/grouped_hist_by.png](../Images/3c0c547065a8bbb0cc451a31f2720b77.png)
    ### Box plots'
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot can be drawn calling [`Series.plot.box()`](../reference/api/pandas.Series.plot.box.html#pandas.Series.plot.box
    "pandas.Series.plot.box") and [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), or [`DataFrame.boxplot()`](../reference/api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot") to visualize the distribution of values within each
    column.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, here is a boxplot representing five trials of 10 observations
    of a uniform random variable on [0,1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_new.png](../Images/455439b95176e6abd3246f3c164d609a.png)'
  prefs: []
  type: TYPE_IMG
- en: Boxplot can be colorized by passing `color` keyword. You can pass a `dict` whose
    keys are `boxes`, `whiskers`, `medians` and `caps`. If some keys are missing in
    the `dict`, default colors are used for the corresponding artists. Also, boxplot
    has `sym` keyword to specify fliers style.
  prefs: []
  type: TYPE_NORMAL
- en: When you pass other type of arguments via `color` keyword, it will be directly
    passed to matplotlib for all the `boxes`, `whiskers`, `medians` and `caps` colorization.
  prefs: []
  type: TYPE_NORMAL
- en: The colors are applied to every boxes to be drawn. If you want more complicated
    colorization, you can get each drawn artists by passing [return_type](#visualization-box-return).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_colorize.png](../Images/0711524db16495d0fc8b11233b528f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass other keywords supported by matplotlib `boxplot`. For example,
    horizontal and custom-positioned boxplot can be drawn by `vert=False` and `positions`
    keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_new_kwargs.png](../Images/480e6c4f25d80f9c1687152faf0425d7.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`boxplot`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.boxplot.html#matplotlib.axes.Axes.boxplot
    "(in Matplotlib v3.8.4)") method and the [matplotlib boxplot documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.boxplot.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: The existing interface `DataFrame.boxplot` to plot boxplot still can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex.png](../Images/5266f320a4ad6f53319184987cb343c7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create a stratified boxplot using the `by` keyword argument to create
    groupings. For instance,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex2.png](../Images/9645cb88111837c8d35740e8692bf9ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also pass a subset of columns to plot, as well as group by multiple
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex3.png](../Images/007f55e8d73f4c0f6b819ed71b8ec953.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You could also create groupings with [`DataFrame.plot.box()`](../reference/api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box"), for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Changed in version 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/box_plot_ex4.png](../Images/8fa31c06918c2491dcc5f291637c4807.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In `boxplot`, the return type can be controlled by the `return_type`, keyword.
    The valid choices are `{"axes", "dict", "both", None}`. Faceting, created by `DataFrame.boxplot`
    with the `by` keyword, will affect the output type as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `return_type` | Faceted | Output type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `None` | Yes | 2-D ndarray of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | No | axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''axes''` | Yes | Series of axes |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | No | dict of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''dict''` | Yes | Series of dicts of artists |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | No | namedtuple |'
  prefs: []
  type: TYPE_TB
- en: '| `''both''` | Yes | Series of namedtuples |'
  prefs: []
  type: TYPE_TB
- en: '`Groupby.boxplot` always returns a `Series` of `return_type`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/boxplot_groupby.png](../Images/d4e4f523a3f185af7958428188d84f51.png)'
  prefs: []
  type: TYPE_IMG
- en: The subplots above are split by the numeric columns first, then the value of
    the `g` column. Below the subplots are first split by the value of `g`, then by
    the numeric columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/groupby_boxplot_vis.png](../Images/4e9d931fb423d97e35f8136e4a78a271.png)
    ### Area plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create area plots with [`Series.plot.area()`](../reference/api/pandas.Series.plot.area.html#pandas.Series.plot.area
    "pandas.Series.plot.area") and [`DataFrame.plot.area()`](../reference/api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area"). Area plots are stacked by default. To produce stacked
    area plot, each column must be either all positive or all negative values.
  prefs: []
  type: TYPE_NORMAL
- en: When input data contains `NaN`, it will be automatically filled by 0\. If you
    want to drop or fill by different values, use `dataframe.dropna()` or `dataframe.fillna()`
    before calling `plot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_stacked.png](../Images/0f00fcd304693fb951ff8f14c70dd7c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To produce an unstacked plot, pass `stacked=False`. Alpha value is set to 0.5
    unless otherwise specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/area_plot_unstacked.png](../Images/e9badbaedc5b45d1d0996102ba329ec2.png)
    ### Scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot can be drawn by using the [`DataFrame.plot.scatter()`](../reference/api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter") method. Scatter plot requires numeric columns
    for the x and y axes. These can be specified by the `x` and `y` keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot.png](../Images/fc4e8f0357fee48110cb5cacafcbb547.png)'
  prefs: []
  type: TYPE_IMG
- en: To plot multiple column groups in a single axes, repeat `plot` method specifying
    target `ax`. It is recommended to specify `color` and `label` keywords to distinguish
    each groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_repeated.png](../Images/e0d7d1b5f2c09214e3bc32bb4ea823e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The keyword `c` may be given as the name of a column to provide colors for
    each point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_colored.png](../Images/21d5287d909de96e670ca01cb6a79966.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If a categorical column is passed to `c`, then a discrete colorbar will be
    produced:'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_categorical.png](../Images/fb2804770ad9bd042373d71dc2d96c11.png)'
  prefs: []
  type: TYPE_IMG
- en: You can pass other keywords supported by matplotlib [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)"). The example below shows a bubble chart using a column
    of the `DataFrame` as the bubble size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_plot_bubble.png](../Images/bbb42506a37a45f998f9aa243c86b467.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`scatter`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)") method and the [matplotlib scatter documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Hexagonal bin plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create hexagonal bin plots with [`DataFrame.plot.hexbin()`](../reference/api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin"). Hexbin plots can be a useful alternative to scatter
    plots if your data are too dense to plot each point individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot.png](../Images/2646219bcd7c3470b5184459c89ff5e1.png)'
  prefs: []
  type: TYPE_IMG
- en: A useful keyword argument is `gridsize`; it controls the number of hexagons
    in the x-direction, and defaults to 100\. A larger `gridsize` means more, smaller
    bins.
  prefs: []
  type: TYPE_NORMAL
- en: By default, a histogram of the counts around each `(x, y)` point is computed.
    You can specify alternative aggregations by passing values to the `C` and `reduce_C_function`
    arguments. `C` specifies the value at each `(x, y)` point and `reduce_C_function`
    is a function of one argument that reduces all the values in a bin to a single
    number (e.g. `mean`, `max`, `sum`, `std`). In this example the positions are given
    by columns `a` and `b`, while the value is given by column `z`. The bins are aggregated
    with NumPy’s `max` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/hexbin_plot_agg.png](../Images/a2bfcd9644bff6fdda5780b52958b848.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [`hexbin`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.hexbin.html#matplotlib.axes.Axes.hexbin
    "(in Matplotlib v3.8.4)") method and the [matplotlib hexbin documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hexbin.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '### Pie plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a pie plot with [`DataFrame.plot.pie()`](../reference/api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie") or [`Series.plot.pie()`](../reference/api/pandas.Series.plot.pie.html#pandas.Series.plot.pie
    "pandas.Series.plot.pie"). If your data includes any `NaN`, they will be automatically
    filled with 0. A `ValueError` will be raised if there are any negative values
    in your data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot.png](../Images/5e31a0e2eefe6092e6bb29f7bb1b9b87.png)'
  prefs: []
  type: TYPE_IMG
- en: For pie plots it’s best to use square figures, i.e. a figure aspect ratio 1.
    You can create the figure with equal width and height, or force the aspect ratio
    to be equal after plotting by calling `ax.set_aspect('equal')` on the returned
    `axes` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that pie plot with [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") requires that you either specify a target column by the `y`
    argument or `subplots=True`. When `y` is specified, pie plot of selected column
    will be drawn. If `subplots=True` is specified, pie plots for each column are
    drawn as subplots. A legend will be drawn in each pie plots by default; specify
    `legend=False` to hide it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/df_pie_plot.png](../Images/771ec1b4e9fed28402b0b31c74d33c40.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use the `labels` and `colors` keywords to specify the labels and colors
    of each wedge.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Most pandas plots use the `label` and `color` arguments (note the lack of “s”
    on those). To be consistent with [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") you must use `labels` and `colors`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to hide wedge labels, specify `labels=None`. If `fontsize` is specified,
    the value will be applied to wedge labels. Also, other keywords supported by [`matplotlib.pyplot.pie()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie
    "(in Matplotlib v3.8.4)") can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_options.png](../Images/7fcf2b9061fa722e7266e206fe84959c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you pass values whose sum total is less than 1.0 they will be rescaled so
    that they sum to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_pie_plot_semi.png](../Images/03cb8e5444e03deadcff97aa8db8dd47.png)'
  prefs: []
  type: TYPE_IMG
- en: See the [matplotlib pie documentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pie.html)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: '## Plotting with missing data'
  prefs: []
  type: TYPE_NORMAL
- en: pandas tries to be pragmatic about plotting `DataFrames` or `Series` that contain
    missing data. Missing values are dropped, left out, or filled depending on the
    plot type.
  prefs: []
  type: TYPE_NORMAL
- en: '| Plot Type | NaN Handling |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Line | Leave gaps at NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Line (stacked) | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| Bar | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| Scatter | Drop NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Histogram | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Box | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Area | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: '| KDE | Drop NaNs (column-wise) |'
  prefs: []
  type: TYPE_TB
- en: '| Hexbin | Drop NaNs |'
  prefs: []
  type: TYPE_TB
- en: '| Pie | Fill 0’s |'
  prefs: []
  type: TYPE_TB
- en: If any of these defaults are not what you want, or if you want to be explicit
    about how missing values are handled, consider using [`fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") or [`dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") before plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '## Plotting tools'
  prefs: []
  type: TYPE_NORMAL
- en: These functions can be imported from `pandas.plotting` and take a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '### Scatter matrix plot'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  prefs: []
  type: TYPE_NORMAL
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  prefs: []
  type: TYPE_NORMAL
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  prefs: []
  type: TYPE_NORMAL
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ###
    Scatter matrix plot'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a scatter plot matrix using the `scatter_matrix` method in `pandas.plotting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/scatter_matrix_kde.png](../Images/ed61a1acddd0faac0fcd9a8e4c5cd3ba.png)
    ### Density plot'
  prefs: []
  type: TYPE_NORMAL
- en: You can create density plots using the [`Series.plot.kde()`](../reference/api/pandas.Series.plot.kde.html#pandas.Series.plot.kde
    "pandas.Series.plot.kde") and [`DataFrame.plot.kde()`](../reference/api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/kde_plot.png](../Images/eb295882d9ba13c9ce0ffc58a7bf3103.png)
    ### Andrews curves'
  prefs: []
  type: TYPE_NORMAL
- en: Andrews curves allow one to plot multivariate data as a large number of curves
    that are created using the attributes of samples as coefficients for Fourier series,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Andrews_plot) for more
    information. By coloring these curves differently for each class it is possible
    to visualize data clustering. Curves belonging to samples of the same class will
    usually be closer together and form larger structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curves.png](../Images/e6e3dab520b060657ea3bc2b132baf92.png)
    ### Parallel coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: Parallel coordinates is a plotting technique for plotting multivariate data,
    see the [Wikipedia entry](https://en.wikipedia.org/wiki/Parallel_coordinates)
    for an introduction. Parallel coordinates allows one to see clusters in data and
    to estimate other statistics visually. Using parallel coordinates points are represented
    as connected line segments. Each vertical line represents one attribute. One set
    of connected line segments represents one data point. Points that tend to cluster
    will appear closer together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_coordinates.png](../Images/fc71032c972474153df4aab0ac26c52b.png)
    ### Lag plot'
  prefs: []
  type: TYPE_NORMAL
- en: Lag plots are used to check if a data set or time series is random. Random data
    should not exhibit any structure in the lag plot. Non-random structure implies
    that the underlying data are not random. The `lag` argument may be passed, and
    when `lag=1` the plot is essentially `data[:-1]` vs. `data[1:]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/lag_plot.png](../Images/77bbd2c990986277c051383521503b69.png)
    ### Autocorrelation plot'
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrelation plots are often used for checking randomness in time series.
    This is done by computing autocorrelations for data values at varying time lags.
    If time series is random, such autocorrelations should be near zero for any and
    all time-lag separations. If time series is non-random then one or more of the
    autocorrelations will be significantly non-zero. The horizontal lines displayed
    in the plot correspond to 95% and 99% confidence bands. The dashed line is 99%
    confidence band. See the [Wikipedia entry](https://en.wikipedia.org/wiki/Correlogram)
    for more about autocorrelation plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/autocorrelation_plot.png](../Images/57928fb57eb5d046a926baf1a9c79693.png)
    ### Bootstrap plot'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap plots are used to visually assess the uncertainty of a statistic,
    such as mean, median, midrange, etc. A random subset of a specified size is selected
    from a data set, the statistic in question is computed for this subset and the
    process is repeated a specified number of times. Resulting plots and histograms
    are what constitutes the bootstrap plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bootstrap_plot.png](../Images/fdfbe1d8ee6c35df68b766f81faff461.png)
    ### RadViz'
  prefs: []
  type: TYPE_NORMAL
- en: RadViz is a way of visualizing multi-variate data. It is based on a simple spring
    tension minimization algorithm. Basically you set up a bunch of points in a plane.
    In our case they are equally spaced on a unit circle. Each point represents a
    single attribute. You then pretend that each sample in the data set is attached
    to each of these points by a spring, the stiffness of which is proportional to
    the numerical value of that attribute (they are normalized to unit interval).
    The point in the plane, where our sample settles to (where the forces acting on
    our sample are at an equilibrium) is where a dot representing our sample will
    be drawn. Depending on which class that sample belongs it will be colored differently.
    See the R package [Radviz](https://cran.r-project.org/web/packages/Radviz/index.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The “Iris” dataset is available [here](https://raw.githubusercontent.com/pandas-dev/pandas/main/pandas/tests/io/data/csv/iris.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/radviz.png](../Images/066f479c3ac291d8f1ced05bd41edc8a.png) ##
    Plot formatting'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the plot style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  prefs: []
  type: TYPE_NORMAL
- en: General plot style arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Scales
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.  ### Colormaps'
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the plot style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From version 1.5 and up, matplotlib offers a range of pre-configured plotting
    styles. Setting the style can be used to easily give plots the general look that
    you want. Setting the style is as easy as calling `matplotlib.style.use(my_plot_style)`
    before creating your plot. For example you could write `matplotlib.style.use('ggplot')`
    for ggplot-style plots.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the various available style names at `matplotlib.style.available`
    and it’s very easy to try them out.
  prefs: []
  type: TYPE_NORMAL
- en: General plot style arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most plotting methods have a set of keyword arguments that control the layout
    and formatting of the returned plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic2.png](../Images/2e482abcc42bc3ec45292485fc52f1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: For each kind of plot (e.g. `line`, `bar`, `scatter`) any additional arguments
    keywords are passed along to the corresponding matplotlib function ([`ax.plot()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot
    "(in Matplotlib v3.8.4)"), [`ax.bar()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar
    "(in Matplotlib v3.8.4)"), [`ax.scatter()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter
    "(in Matplotlib v3.8.4)")). These can be used to control additional styling, beyond
    what pandas provides.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the legend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `legend` argument to `False` to hide the legend, which is shown
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic_noleg.png](../Images/f4dcba772faae70891881605e3a883e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the labels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may set the `xlabel` and `ylabel` arguments to give the plot custom labels
    for x and y axis. By default, pandas will pick up index name as xlabel, while
    leaving it empty for ylabel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/plot_xlabel_ylabel.png](../Images/6cf63e628cf40e88f46a3d93a6b306a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Scales
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may pass `logy` to get a log-scale Y axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_logy.png](../Images/62f692cd79bfdfffcd38cd4a1406ce51.png)'
  prefs: []
  type: TYPE_IMG
- en: See also the `logx` and `loglog` keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting on a secondary y-axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To plot data on a secondary y-axis, use the `secondary_y` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_secondary_y.png](../Images/c6aad965cd7c0931d740fa6d86a8eab5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To plot some columns in a `DataFrame`, give the column names to the `secondary_y`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y.png](../Images/604a75fd938e693b8d54f4f163732386.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the columns plotted on the secondary y-axis is automatically marked
    with “(right)” in the legend. To turn off the automatic marking, use the `mark_right=False`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_secondary_y_no_right.png](../Images/81cd803f30798aed3e36079754ef94f2.png)
    ### Custom formatters for timeseries plots'
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides custom formatters for timeseries plots. These change the formatting
    of the axis labels for dates and times. By default, the custom formatters are
    applied only to plots created by pandas with [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") or [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). To have them apply to all plots, including those made by
    matplotlib, set the option `pd.options.plotting.matplotlib.register_converters
    = True` or use [`pandas.plotting.register_matplotlib_converters()`](../reference/api/pandas.plotting.register_matplotlib_converters.html#pandas.plotting.register_matplotlib_converters
    "pandas.plotting.register_matplotlib_converters").
  prefs: []
  type: TYPE_NORMAL
- en: Suppressing tick resolution adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas includes automatic tick resolution adjustment for regular frequency time-series
    data. For limited cases where pandas cannot infer the frequency information (e.g.,
    in an externally created `twinx`), you can choose to suppress this behavior for
    alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the default behavior, notice how the x-axis tick labeling is performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress.png](../Images/adead85fc5f6a0997f87981a18a0608d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the `x_compat` parameter, you can suppress this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_parm.png](../Images/1c36505278a29d418081c255a2ed8e23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have more than one plot that needs to be suppressed, the `use` method
    in `pandas.plotting.plot_params` can be used in a `with` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/ser_plot_suppress_context.png](../Images/77aa63f261c5ae4bf69460116051677c.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatic date tick adjustment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`TimedeltaIndex` now uses the native matplotlib tick locator methods, it is
    useful to call the automatic date tick adjustment from matplotlib for figures
    whose ticklabels overlap.'
  prefs: []
  type: TYPE_NORMAL
- en: See the `autofmt_xdate` method and the [matplotlib documentation](https://matplotlib.org/2.0.2/users/recipes.html#fixing-common-date-annoyances)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Subplots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each `Series` in a `DataFrame` can be plotted on a different axis with the
    `subplots` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots.png](../Images/e1f0d97074d265fadba8e4497b5620f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Using layout and targeting multiple axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The layout of subplots can be specified by the `layout` keyword. It can accept
    `(rows, columns)`. The `layout` keyword can be used in `hist` and `boxplot` also.
    If the input is invalid, a `ValueError` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: The number of axes which can be contained by rows x columns specified by `layout`
    must be larger than the number of required subplots. If layout can contain more
    axes than required, blank axes are not drawn. Similar to a NumPy array’s `reshape`
    method, you can use `-1` for one dimension to automatically calculate the number
    of rows or columns needed, given the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_layout.png](../Images/416024b6cd70aaa8e6e1d4fc58d9118b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above example is identical to using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: The required number of columns (3) is inferred from the number of series to
    plot and the given number of rows (2).
  prefs: []
  type: TYPE_NORMAL
- en: You can pass multiple axes created beforehand as list-like via `ax` keyword.
    This allows more complicated layouts. The passed axes must be the same number
    as the subplots being drawn.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple axes are passed via the `ax` keyword, `layout`, `sharex` and `sharey`
    keywords don’t affect to the output. You should explicitly pass `sharex=False`
    and `sharey=False`, otherwise you will see a warning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_subplots_multi_ax.png](../Images/edc8720fc9ea45661b6f3ff136d28935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is passing an `ax` argument to [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") to plot on a particular axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_multi.png](../Images/85b71583209b387c25bde1215b0f8dd6.png)
    ### Plotting with error bars'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with error bars is supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot").
  prefs: []
  type: TYPE_NORMAL
- en: 'Horizontal and vertical error bars can be supplied to the `xerr` and `yerr`
    keyword arguments to [`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot"). The error values can be specified using a variety of
    formats:'
  prefs: []
  type: TYPE_NORMAL
- en: As a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or `dict` of errors with column names matching the `columns` attribute of the
    plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or matching the `name` attribute of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a `str` indicating which of the columns of plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") contain the error values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As raw values (`list`, `tuple`, or `np.ndarray`). Must be the same length as
    the plotting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")/[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of one way to easily plot group means with standard deviations
    from the raw data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_example.png](../Images/54a15758a2e88a7264dbac64cfa31c16.png)'
  prefs: []
  type: TYPE_IMG
- en: Asymmetrical error bars are also supported, however raw error values must be
    provided in this case. For a `N` length [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), a `2xN` array should be provided indicating lower and upper
    (or left and right) errors. For a `MxN` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), asymmetrical errors should be in a `Mx2xN` array.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of one way to plot the min/max range using asymmetrical error
    bars.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/errorbar_asymmetrical_example.png](../Images/e29533e0c8fbeffee5cd84bf323c4e04.png)
    ### Plotting tables'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib table is now supported in [`DataFrame.plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") and [`Series.plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot") with a `table` keyword. The `table` keyword can accept `bool`,
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    or [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series").
    The simple way to draw a table is to specify `table=True`. Data will be transposed
    to meet matplotlib’s default layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_true.png](../Images/4ca7034faf6da9f449486dc475d8870d.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, you can pass a different [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to the `table` keyword. The data will be drawn as displayed in
    print method (not transposed automatically). If required, it should be transposed
    manually as seen in the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_data.png](../Images/03bcd99517f761771b0eee3ee4957a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: There also exists a helper function `pandas.plotting.table`, which creates a
    table from [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), and adds it to an `matplotlib.Axes` instance. This function
    can accept keywords which the matplotlib [table](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.table.html)
    has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/line_plot_table_describe.png](../Images/4b92bf285818296a2a055d112dbc8441.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note**: You can get table instances on the axes using `axes.tables` property
    for further decorations. See the [matplotlib table documentation](https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes.table)
    for more.'
  prefs: []
  type: TYPE_NORMAL
- en: '### Colormaps'
  prefs: []
  type: TYPE_NORMAL
- en: A potential issue when plotting a large number of columns is that it can be
    difficult to distinguish some series due to repetition in the default colors.
    To remedy this, `DataFrame` plotting supports the use of the `colormap` argument,
    which accepts either a Matplotlib [colormap](https://matplotlib.org/api/cm_api.html)
    or a string that is a name of a colormap registered with Matplotlib. A visualization
    of the default matplotlib colormaps is available [here](https://matplotlib.org/stable/gallery/color/colormap_reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib does not directly support colormaps for line-based plots, the
    colors are selected based on an even spacing determined by the number of columns
    in the `DataFrame`. There is no consideration made for background color, so some
    colormaps will produce lines that are not easily visible.
  prefs: []
  type: TYPE_NORMAL
- en: To use the cubehelix colormap, we can pass `colormap='cubehelix'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix.png](../Images/a3e468613cb1295c42ed03b462761c78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, we can pass the colormap itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/cubehelix_cm.png](../Images/a624f4de6f74850669e9fc793cde6bcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Colormaps can also be used other plot types, like bar charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/greens.png](../Images/d9f3a93c8bf833f93d5e429443f3836c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Parallel coordinates charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/parallel_gist_rainbow.png](../Images/0e6a33e5dc8100fb693b5b2b2a5a6ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Andrews curves charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/andrews_curve_winter.png](../Images/3362596cdb6030d8d804e6b3445139fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting directly with Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations it may still be preferable or necessary to prepare plots
    directly with matplotlib, for instance when a certain type of plot or customization
    is not (yet) supported by pandas. `Series` and `DataFrame` objects behave like
    arrays and can therefore be passed directly to matplotlib functions without explicit
    casts.
  prefs: []
  type: TYPE_NORMAL
- en: pandas also automatically registers formatters and locators that recognize date
    indices, thereby extending date and time support to practically all plot types
    available in matplotlib. Although this formatting does not provide the same level
    of refinement you would get when plotting via pandas, it can be faster when plotting
    a large number of points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/bollinger.png](../Images/fcf533ed141454b711c76b9d47bb4697.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting backends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can be extended with third-party plotting backends. The main idea is
    letting users select a plotting backend different than the provided one based
    on Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by passing ‘backend.module’ as the argument `backend` in `plot`
    function. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also set this option globally, do you don’t need to
    specify the keyword in each `plot` call. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be more or less equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: The backend module can then use other visualization tools (Bokeh, Altair, hvplot,…)
    to generate the plots. Some libraries implementing a backend for pandas are listed
    on [the ecosystem page](https://pandas.pydata.org/community/ecosystem.html).
  prefs: []
  type: TYPE_NORMAL
- en: Developers guide can be found at [https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends](https://pandas.pydata.org/docs/dev/development/extending.html#plotting-backends)
  prefs: []
  type: TYPE_NORMAL
