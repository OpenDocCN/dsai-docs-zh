- en: Scalars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标量
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.scalars.html](https://numpy.org/doc/1.26/reference/arrays.scalars.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/arrays.scalars.html](https://numpy.org/doc/1.26/reference/arrays.scalars.html)
- en: Python defines only one type of a particular data class (there is only one integer
    type, one floating-point type, etc.). This can be convenient in applications that
    don’t need to be concerned with all the ways data can be represented in a computer.
    For scientific computing, however, more control is often needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python仅定义了特定数据类的一种类型（只有一种整数类型，一种浮点类型等）。这在不需要考虑数据在计算机中的所有表示方式的应用程序中可能很方便。然而，对于科学计算，通常需要更多的控制。
- en: In NumPy, there are 24 new fundamental Python types to describe different types
    of scalars. These type descriptors are mostly based on the types available in
    the C language that CPython is written in, with several additional types compatible
    with Python’s types.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，有24种新的基本Python类型来描述不同类型的标量。这些类型描述符主要基于CPython编写的C语言中可用的类型，还有几种与Python类型兼容的附加类型。
- en: Array scalars have the same attributes and methods as [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"). [[1]](#id2) This allows one to treat items of an array partly
    on the same footing as arrays, smoothing out rough edges that result when mixing
    scalar and array operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量具有与[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")相同的属性和方法。[[1]](#id2)
    这使得可以将数组的项部分地与数组相同地对待，从而平滑混合标量和数组操作时产生的粗糙边缘。
- en: 'Array scalars live in a hierarchy (see the Figure below) of data types. They
    can be detected using the hierarchy: For example, `isinstance(val, np.generic)`
    will return [`True`](https://docs.python.org/3/library/constants.html#True "(in
    Python v3.11)") if *val* is an array scalar object. Alternatively, what kind of
    array scalar is present can be determined using other members of the data type
    hierarchy. Thus, for example `isinstance(val, np.complexfloating)` will return
    [`True`](https://docs.python.org/3/library/constants.html#True "(in Python v3.11)")
    if *val* is a complex valued type, while `isinstance(val, np.flexible)` will return
    true if *val* is one of the flexible itemsize array types ([`str_`](#numpy.str_
    "numpy.str_"), [`bytes_`](#numpy.bytes_ "numpy.bytes_"), [`void`](#numpy.void
    "numpy.void")).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量存在于数据类型的层次结构中（见下图）。可以使用层次结构检测它们：例如，`isinstance(val, np.generic)`将返回[`True`](https://docs.python.org/3/library/constants.html#True
    "(在Python v3.11中)")，如果*val*是一个数组标量对象。另外，可以使用数据类型层次结构的其他成员来确定存在哪种数组标量。因此，例如，如果*val*是复数类型，则`isinstance(val,
    np.complexfloating)`将返回[`True`](https://docs.python.org/3/library/constants.html#True
    "(在Python v3.11中)")，而如果*val*是灵活项大小数组类型之一（[`str_`](#numpy.str_ "numpy.str_")，[`bytes_`](#numpy.bytes_
    "numpy.bytes_")，[`void`](#numpy.void "numpy.void")），则`isinstance(val, np.flexible)`将返回true。
- en: '![../_images/dtype-hierarchy.png](../Images/7c6cf11ea6e16cb6d111ce6f854872c4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![../_images/dtype-hierarchy.png](../Images/7c6cf11ea6e16cb6d111ce6f854872c4.png)'
- en: '**Figure:** Hierarchy of type objects representing the array data types. Not
    shown are the two integer types [`intp`](#numpy.intp "numpy.intp") and [`uintp`](#numpy.uintp
    "numpy.uintp") which just point to the integer type that holds a pointer for the
    platform. All the number types can be obtained using bit-width names as well.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**图：** 表示数组数据类型的类型对象层次结构。未显示的是指向平台上保存指针的整数类型[`intp`](#numpy.intp "numpy.intp")和[`uintp`](#numpy.uintp
    "numpy.uintp")。所有数字类型都可以使用位宽名称获取。'
- en: '## Built-in scalar types'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## 内置标量类型'
- en: The built-in scalar types are shown below. The C-like names are associated with
    character codes, which are shown in their descriptions. Use of the character codes,
    however, is discouraged.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 内置标量类型如下所示。与字符代码相关联的C样式名称显示在其描述中。然而，不建议使用字符代码。
- en: 'Some of the scalar types are essentially equivalent to fundamental Python types
    and therefore inherit from them as well as from the generic array scalar type:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些标量类型本质上等同于基本的Python类型，因此也继承自它们以及通用的数组标量类型：
- en: '| Array scalar type | Related Python type | Inherits? |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 数组标量类型 | 相关的Python类型 | 继承？ |'
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [`int_`](#numpy.int_ "numpy.int_") | [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") | Python 2 only |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`int_`](#numpy.int_ "numpy.int_") | [`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.11中)") | 仅Python 2 |'
- en: '| [`float_`](#numpy.float_ "numpy.float_") | [`float`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") | yes |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`float_`](#numpy.float_ "numpy.float_") | [`float`](https://docs.python.org/3/library/functions.html#float
    "(在Python v3.11中)") | 是 |'
- en: '| [`complex_`](#numpy.complex_ "numpy.complex_") | [`complex`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)") | yes |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`complex_`](#numpy.complex_ "numpy.complex_") | [`complex`](https://docs.python.org/3/library/functions.html#complex
    "(在 Python v3.11)") | 是 |'
- en: '| [`bytes_`](#numpy.bytes_ "numpy.bytes_") | [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes
    "(in Python v3.11)") | yes |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes_`](#numpy.bytes_ "numpy.bytes_") | [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes
    "(在 Python v3.11)") | 是 |'
- en: '| [`str_`](#numpy.str_ "numpy.str_") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") | yes |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`str_`](#numpy.str_ "numpy.str_") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.11)") | 是 |'
- en: '| [`bool_`](#numpy.bool_ "numpy.bool_") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") | no |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`bool_`](#numpy.bool_ "numpy.bool_") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.11)") | 否 |'
- en: '| [`datetime64`](#numpy.datetime64 "numpy.datetime64") | [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") | no |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`datetime64`](#numpy.datetime64 "numpy.datetime64") | [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(在 Python v3.11)") | 否 |'
- en: '| [`timedelta64`](#numpy.timedelta64 "numpy.timedelta64") | [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)") | no |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`timedelta64`](#numpy.timedelta64 "numpy.timedelta64") | [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(在 Python v3.11)") | 否 |'
- en: The [`bool_`](#numpy.bool_ "numpy.bool_") data type is very similar to the Python
    [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    but does not inherit from it because Python’s [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") does not allow itself to be inherited from, and on the C-level
    the size of the actual bool data is not the same as a Python Boolean scalar.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bool_`](#numpy.bool_ "numpy.bool_") 数据类型与Python [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.11)") 非常相似，但不继承自它，因为Python的 [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.11)") 不允许被继承，并且在C级别上，实际布尔数据的大小与Python布尔标量不同。'
- en: Warning
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`int_`](#numpy.int_ "numpy.int_") type does **not** inherit from the [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") built-in under Python 3, because type [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") is no longer a fixed-width integer type.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`int_`](#numpy.int_ "numpy.int_") 类型**不**继承自[`int`](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.11)") 在Python 3下，因为类型[`int`](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.11)") 不再是固定宽度整数类型。'
- en: Tip
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The default data type in NumPy is [`float_`](#numpy.float_ "numpy.float_").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的默认数据类型是[`float_`](#numpy.float_ "numpy.float_")。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Base class for numpy scalar types.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: numpy标量类型的基类。
- en: Class from which most (all?) numpy scalar types are derived. For consistency,
    exposes the same API as [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), despite many consequent attributes being either “get-only,”
    or completely irrelevant. This is the class from which it is strongly suggested
    users should derive custom scalar types.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数（全部？）numpy标量类型派生的类。为了一致性，尽管许多随后的属性要么是“只读”，要么完全无关紧要，但暴露与[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")相同的API。这是强烈建议用户应该从中派生自定义标量类型的类。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Abstract base class of all numeric scalar types.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值标量类型的抽象基类。
- en: Integer types
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数类型
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Abstract base class of all integer scalar types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有整数标量类型的抽象基类。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The numpy integer types mirror the behavior of C integers, and can therefore
    be subject to [Overflow Errors](../user/basics.types.html#overflow-errors).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: numpy整数类型反映了C整数的行为，因此可能会受到[溢出错误](../user/basics.types.html#overflow-errors)的影响。
- en: Signed integer types
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有符号整数类型
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Abstract base class of all signed integer scalar types.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有有符号整数标量类型的抽象基类。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Signed integer type, compatible with C `char`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `char` 兼容。
- en: 'Character code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''b''`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`''b''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8-bit signed integer (`-128` to `127`).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8位有符号整数（`-128` 到 `127`）。'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Signed integer type, compatible with C `short`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `short` 兼容。
- en: 'Character code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''h''`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`''h''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16-bit signed integer (`-32_768`
    to `32_767`).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16位有符号整数（`-32_768` 到 `32_767`）。'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Signed integer type, compatible with C `int`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `int` 兼容。
- en: 'Character code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''i''`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`''i''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int32`](#numpy.int32 "numpy.int32"): 32-bit signed integer (`-2_147_483_648`
    to `2_147_483_647`).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int32`](#numpy.int32 "numpy.int32")：32 位有符号整数（`-2_147_483_648` 到 `2_147_483_647`）。'
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Signed integer type, compatible with Python *int* and C `long`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 Python *int* 和 C 中的`long`兼容。
- en: 'Character code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''l''`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`''l''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64-bit signed integer (`-9_223_372_036_854_775_808`
    to `9_223_372_036_854_775_807`).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int64`](#numpy.int64 "numpy.int64")：64 位有符号整数（`-9_223_372_036_854_775_808`
    到 `9_223_372_036_854_775_807`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.intp`](#numpy.intp "numpy.intp"): Signed integer large enough to fit
    pointer, compatible with C `intptr_t`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.intp`](#numpy.intp "numpy.intp")：足够大以容纳指针的有符号整数，与 C 中的`intptr_t`兼容。'
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Signed integer type, compatible with C `long long`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C 中的`long long`兼容。
- en: 'Character code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''q''`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`''q''`'
- en: Unsigned integer types
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无符号整数类型
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Abstract base class of all unsigned integer scalar types.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有无符号整数标量类型的抽象基类。
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unsigned integer type, compatible with C `unsigned char`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C 中的`unsigned char`兼容。
- en: 'Character code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''B''`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`''B''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8-bit unsigned integer (`0` to
    `255`).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8")：8 位无符号整数（`0` 到 `255`）。'
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Unsigned integer type, compatible with C `unsigned short`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C 中的`unsigned short`兼容。
- en: 'Character code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''H''`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`''H''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16-bit unsigned integer (`0`
    to `65_535`).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16")：16 位无���号整数（`0` 到 `65_535`）。'
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Unsigned integer type, compatible with C `unsigned int`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C 中的`unsigned int`兼容。
- en: 'Character code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''I''`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`''I''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32-bit unsigned integer (`0`
    to `4_294_967_295`).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32")：32 位无符号整数（`0` 到 `4_294_967_295`）。'
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unsigned integer type, compatible with C `unsigned long`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C 中的`unsigned long`兼容。
- en: 'Character code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''L''`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`''L''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64-bit unsigned integer (`0`
    to `18_446_744_073_709_551_615`).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64")：64 位无符号整数（`0` 到 `18_446_744_073_709_551_615`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): Unsigned integer large enough
    to fit pointer, compatible with C `uintptr_t`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uintp`](#numpy.uintp "numpy.uintp")：足够大以容纳指针的无符号整数，与 C 中的`uintptr_t`兼容。'
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Signed integer type, compatible with C `unsigned long long`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C 中的`unsigned long long`兼容。
- en: 'Character code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''Q''`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Q''`'
- en: Inexact types
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非精确类型
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Abstract base class of all numeric scalar types with a (potentially) inexact
    representation of the values in its range, such as floating-point numbers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值标量类型的抽象基类，其值的表示（可能）不精确，例如浮点数。
- en: Note
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inexact scalars are printed using the fewest decimal digits needed to distinguish
    their value from other values of the same datatype, by judicious rounding. See
    the `unique` parameter of [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific").
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最少的十进制数字打印不精确标量，以区分其值与同一数据类型的其他值，通过谨慎的四舍五入。参见[`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")和[`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")的`unique`参数。
- en: 'This means that variables with equal binary values but whose datatypes are
    of different precisions may display differently:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着具有相同二进制值但数据类型精度不同的变量可能显示不同：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that none of these floats hold the exact value \(\frac{1}{10}\); `f16`
    prints as `0.1` because it is as close to that value as possible, whereas the
    other types do not as they have more precision and therefore have closer values.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些浮点数中没有一个能够精确表示 \(\frac{1}{10}\) 的值；`f16`打印为`0.1`，因为它尽可能接近该值，而其他类型则不会，因为它们具有更高的精度，因此具有更接近的值。
- en: 'Conversely, floating-point scalars of different precisions which approximate
    the same decimal value may compare unequal despite printing identically:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，不同精度的浮点标量可能近似相同的十进制值，但尽管打印相同，它们可能不相等：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Floating-point types
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮点数类型
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Abstract base class of all floating-point scalar types.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浮点数标量类型的抽象基类。
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Half-precision floating-point number type.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 半精度浮点数类型。
- en: 'Character code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''e''`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`''e''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.float16`](#numpy.float16 "numpy.float16"): 16-bit-precision floating-point
    number type: sign bit, 5 bits exponent, 10 bits mantissa.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float16`](#numpy.float16 "numpy.float16"): 16位精度浮点数类型：符号位，5位指数，10位尾数。'
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Single-precision floating-point number type, compatible with C `float`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数类型，与C中的`float`兼容。
- en: 'Character code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''f''`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`''f''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32-bit-precision floating-point
    number type: sign bit, 8 bits exponent, 23 bits mantissa.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32位精度浮点数类型：符号位，8位指数，23位尾数。'
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Double-precision floating-point number type, compatible with Python *float*
    and C `double`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度浮点数类型，与Python的*float*和C中的`double`兼容。
- en: 'Character code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''d''`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`''d''`'
- en: 'Alias:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.float64`](#numpy.float64 "numpy.float64"): 64-bit precision floating-point
    number type: sign bit, 11 bits exponent, 52 bits mantissa.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float64`](#numpy.float64 "numpy.float64"): 64位精度浮点数类型：符号位，11位指数，52位尾数。'
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Extended-precision floating-point number type, compatible with C `long double`
    but not necessarily with IEEE 754 quadruple-precision.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展精度浮点数类型，与C中的`long double`兼容，但不一定与IEEE 754四倍精度兼容。
- en: 'Character code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''g''`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`''g''`'
- en: 'Alias:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.float128`](#numpy.float128 "numpy.float128"): 128-bit extended-precision
    floating-point number type.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float128`](#numpy.float128 "numpy.float128"): 128位扩展精度浮点数类型。'
- en: Complex floating-point types
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复数浮点类型
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Abstract base class of all complex number scalar types that are made up of floating-point
    numbers.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由浮点数组成的复数标量类型的抽象基类。
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Complex number type composed of two single-precision floating-point numbers.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个单精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''F''`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`''F''`'
- en: 'Alias:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64"): Complex number type
    composed of 2 32-bit-precision floating-point numbers.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64"): 由两个32位精度浮点数组成的复数类型。'
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Complex number type composed of two double-precision floating-point numbers,
    compatible with Python *complex*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个双精度浮点数组成的复数类型，与Python的*complex*兼容。
- en: 'Character code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''D''`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`''D''`'
- en: 'Alias:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
- en: 'Alias:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128"): Complex number
    type composed of 2 64-bit-precision floating-point numbers.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128"): 由两个64位精度浮点数组成的复数类型。'
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Complex number type composed of two extended-precision floating-point numbers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个扩展精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''G''`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`''G''`'
- en: 'Alias:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
- en: 'Alias:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台（Linux x86_64）上的别名：
- en: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256"): Complex number
    type composed of 2 128-bit extended-precision floating-point numbers.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256"): 由两个128位扩展精度浮点数组成的复数类型。'
- en: Other types
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他类型
- en: '[PRE27]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Boolean type (True or False), stored as a byte.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔类型（True或False），以字节形式存储。
- en: Warning
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`bool_`](#numpy.bool_ "numpy.bool_") type is not a subclass of the [`int_`](#numpy.int_
    "numpy.int_") type (the [`bool_`](#numpy.bool_ "numpy.bool_") is not even a number
    type). This is different than Python’s default implementation of [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") as a sub-class of [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)").
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bool_`](#numpy.bool_ "numpy.bool_")类型不是[`int_`](#numpy.int_ "numpy.int_")类型的子类（[`bool_`](#numpy.bool_
    "numpy.bool_")甚至不是一个数字类型）。这与Python默认实现中将[`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.11中)")作为[`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.11中)")的子类的方式不同。'
- en: 'Character code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''?''`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`''?''`'
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If created from a 64-bit integer, it represents an offset from `1970-01-01T00:00:00`.
    If created from string, the string can be in ISO 8601 date or datetime format.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从64位整数创建，它表示从`1970-01-01T00:00:00`的偏移量。如果从字符串创建，字符串可以是ISO 8601日期或日期时间格式。
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间增量](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''M''`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`''M''`'
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A timedelta stored as a 64-bit integer.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以64位整数存储的时间增量。
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间增量](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''m''`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`''m''`'
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Any Python object.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Python对象。
- en: 'Character code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''O''`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`''O''`'
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The data actually stored in object arrays (*i.e.*, arrays having dtype [`object_`](#numpy.object_
    "numpy.object_")) are references to Python objects, not the objects themselves.
    Hence, object arrays behave more like usual Python [`lists`](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)"), in the sense that their contents need not be of the same
    Python type.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 实际存储在对象数组中（*即*，具有dtype [`object_`](#numpy.object_ "numpy.object_")的数组）的数据是对Python对象的引用，而不是对象本身。因此，对象数组的行为更像是通常的Python
    [`lists`](https://docs.python.org/3/library/stdtypes.html#list "(在Python v3.11中)")，即它们的内容不必是相同的Python类型。
- en: The object type is also special because an array containing [`object_`](#numpy.object_
    "numpy.object_") items does not return an [`object_`](#numpy.object_ "numpy.object_")
    object on item access, but instead returns the actual object that the array item
    refers to.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型也很特殊，因为包含[`object_`](#numpy.object_ "numpy.object_")项的数组在访问项时不会返回[`object_`](#numpy.object_
    "numpy.object_")对象，而是返回数组项实际引用的对象。
- en: 'The following data types are **flexible**: they have no predefined size and
    the data they describe can be of different length in different arrays. (In the
    character codes `#` is an integer denoting how many elements the data type consists
    of.)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下数据类型是**灵活的**：它们没有预定义的大小，它们描述的数据在不同数组中的长度可以不同。（在字符代码中，`#`是一个整数，表示数据类型包含多少个元素。）
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Abstract base class of all scalar types without predefined length. The actual
    size of these types depends on the specific *np.dtype* instantiation.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 所有没有预定义长度的标量类型的抽象基类。这些类型的实际大小取决于特定的*np.dtype*实例化。
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Abstract base class of all character string scalar types.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符字符串标量类型的抽象基类。
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: A byte string.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字节字符串。
- en: When used in arrays, this type strips trailing null bytes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中使用时，此类型会去除尾随的空字节。
- en: 'Character code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''S''`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`''S''`'
- en: 'Alias:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
- en: '[PRE35]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A unicode string.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode字符串。
- en: This type strips trailing null codepoints.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型会去除尾随的空代码点。
- en: '[PRE36]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Unlike the builtin *str*, this supports the [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(in Python v3.11)"), exposing its contents as UCS4:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 与内置*str*不同，此类型支持[缓冲区协议](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(在Python v3.11中)")，将其内容公开为UCS4：
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Character code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''U''`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`''U''`'
- en: 'Alias:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
- en: '[PRE38]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Create a new structured or unstructured void scalar.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的结构化或未结构化空白标量。
- en: 'Parameters:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length_or_data**int, array-like, bytes-like, object'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**length_or_data**int，类似数组，类似字节，对象'
- en: One of multiple meanings (see notes). The length or bytes data of an unstructured
    void. Or alternatively, the data to be stored in the new scalar when [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") is provided. This can be an array-like, in which case an array
    may be returned.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 多重含义之一（请参阅注释）。未结构化空白的长度或字节数据。或者，当提供[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")时，要存储在新标量中的数据。这可以是类似数组的东西，如果是这种情况，可能会返回一个数组。
- en: '**dtype**dtype, optional'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**dtype，可选'
- en: If provided the dtype of the new scalar. This dtype must be “void” dtype (i.e.
    a structured or unstructured void, see also [Structured Datatypes](../user/basics.rec.html#defining-structured-types)).
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供了新标量的 dtype。此 dtype 必须是“void” dtype（即结构化或非结构化 void，请参阅[结构化数据类型](../user/basics.rec.html#defining-structured-types)）。
- en: '..versionadded:: 1.24'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded:: 1.24'
- en: Notes
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'For historical reasons and because void scalars can represent both arbitrary
    byte data and structured dtypes, the void constructor has three calling conventions:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因和因为 void 标量可以表示任意字节数据和结构化数据类型，void 构造函数有三种调用约定：
- en: '`np.void(5)` creates a `dtype="V5"` scalar filled with five `\0` bytes. The
    5 can be a Python or NumPy integer.'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(5)` 创建一个填充有五个`\0`字节的`dtype="V5"`标量。这里的 5 可以是 Python 或 NumPy 整数。'
- en: '`np.void(b"bytes-like")` creates a void scalar from the byte string. The dtype
    itemsize will match the byte string length, here `"V10"`.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(b"bytes-like")` 从字节字符串创建一个 void 标量。dtype 的 itemsize 将匹配字节字符串的长度，这里是`"V10"`。'
- en: When a `dtype=` is passed the call is roughly the same as an array creation.
    However, a void scalar rather than array is returned.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当传递 `dtype=` 时，调用与数组创建大致相同。但是，返回的是一个 void 标量而不是数组。
- en: Please see the examples which show all three different conventions.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看展示所有三种不同约定的示例。
- en: Examples
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE39]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Character code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''V''`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`''V''`'
- en: Warning
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See [Note on string types](arrays.dtypes.html#string-dtype-note).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[字符串类型注释](arrays.dtypes.html#string-dtype-note)。
- en: 'Numeric Compatibility: If you used old typecode characters in your Numeric
    code (which was never recommended), you will need to change some of them to the
    new characters. In particular, the needed changes are `c -> S1`, `b -> B`, `1
    -> b`, `s -> h`, `w -> H`, and `u -> I`. These changes make the type character
    convention more consistent with other Python modules such as the [`struct`](https://docs.python.org/3/library/struct.html#module-struct
    "(in Python v3.11)") module.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 数值兼容性：如果您在您的 Numeric 代码中使用了旧的类型代码字符（这从未被推荐过），您将需要将其中一些更改为新字符。特别是，需要更改的是 `c ->
    S1`、`b -> B`、`1 -> b`、`s -> h`、`w -> H`和`u -> I`。这些更改使类型字符约定更加一致，与其他 Python 模块（如[`struct`](https://docs.python.org/3/library/struct.html#module-struct
    "(在 Python v3.11 中)")模块）一致。
- en: '### Sized aliases'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '### 大小别名'
- en: Along with their (mostly) C-derived names, the integer, float, and complex data-types
    are also available using a bit-width convention so that an array of the right
    size can always be ensured. Two aliases ([`numpy.intp`](#numpy.intp "numpy.intp")
    and [`numpy.uintp`](#numpy.uintp "numpy.uintp")) pointing to the integer type
    that is sufficiently large to hold a C pointer are also provided.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们（大部分）源自 C 的名称外，整数、浮点数和复数数据类型也可以使用位宽约定来使用，以确保始终可以确保正确大小的数组。还提供了两个别名（[`numpy.intp`](#numpy.intp
    "numpy.intp")和[`numpy.uintp`](#numpy.uintp "numpy.uintp")），指向足够大以容纳 C 指针的整数类型。
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Aliases for the signed integer types (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and [`numpy.longlong`](#numpy.longlong
    "numpy.longlong")) with the specified number of bits.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有指定位数的有符号整数类型的别名（[`numpy.byte`](#numpy.byte "numpy.byte")、[`numpy.short`](#numpy.short
    "numpy.short")、[`numpy.intc`](#numpy.intc "numpy.intc")、[`numpy.int_`](#numpy.int_
    "numpy.int_")和[`numpy.longlong`](#numpy.longlong "numpy.longlong")之一）。
- en: Compatible with the C99 `int8_t`, `int16_t`, `int32_t`, and `int64_t`, respectively.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 兼容于C99 `int8_t`、`int16_t`、`int32_t`和`int64_t`。
- en: '[PRE44]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Alias for the unsigned integer types (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and [`numpy.ulonglong`](#numpy.ulonglong
    "numpy.ulonglong")) with the specified number of bits.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型的别名（[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")、[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")、[`numpy.uintc`](#numpy.uintc "numpy.uintc")、[`numpy.uint`](#numpy.uint
    "numpy.uint")和[`numpy.ulonglong`](#numpy.ulonglong "numpy.ulonglong")之一）。
- en: Compatible with the C99 `uint8_t`, `uint16_t`, `uint32_t`, and `uint64_t`, respectively.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 兼容于C99 `uint8_t`、`uint16_t`、`uint32_t`和`uint64_t`。
- en: '[PRE48]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Alias for the signed integer type (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and *np.longlong*) that is the same size
    as a pointer.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有相同大小作为指针的有符号整数类型的别名（[`numpy.byte`](#numpy.byte "numpy.byte")、[`numpy.short`](#numpy.short
    "numpy.short")、[`numpy.intc`](#numpy.intc "numpy.intc")、[`numpy.int_`](#numpy.int_
    "numpy.int_")和*np.longlong*)。
- en: Compatible with the C `intptr_t`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 兼容于C `intptr_t`。
- en: 'Character code:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''p''`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`''p''`'
- en: '[PRE49]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Alias for the unsigned integer type (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and *np.ulonglong*) that is the same
    size as a pointer.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型的别名（其中之一是[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")，[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")，[`numpy.uintc`](#numpy.uintc "numpy.uintc")，[`numpy.uint`](#numpy.uint
    "numpy.uint")和*np.ulonglong*），与指针大小相同。
- en: Compatible with the C `uintptr_t`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 与C `uintptr_t` 兼容。
- en: 'Character code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''P''`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`''P''`'
- en: '[PRE50]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: alias of [`half`](#numpy.half "numpy.half")
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`half`](#numpy.half "numpy.half")的别名'
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: alias of [`single`](#numpy.single "numpy.single")
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[`single`](#numpy.single "numpy.single")的别名'
- en: '[PRE52]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[`double`](#numpy.double "numpy.double")的别名'
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Alias for [`numpy.longdouble`](#numpy.longdouble "numpy.longdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`numpy.longdouble`](#numpy.longdouble "numpy.longdouble")，根据其位数命名。这些别名的存在取决于平台。
- en: '[PRE55]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[`csingle`](#numpy.csingle "numpy.csingle")的别名'
- en: '[PRE56]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: '[PRE57]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Alias for [`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble")，根据其位数命名。这些别名的存在取决于平台。
- en: Other aliases
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他别名
- en: 'The first two of these are conveniences which resemble the names of the builtin
    types, in the same style as [`bool_`](#numpy.bool_ "numpy.bool_"), [`int_`](#numpy.int_
    "numpy.int_"), [`str_`](#numpy.str_ "numpy.str_"), [`bytes_`](#numpy.bytes_ "numpy.bytes_"),
    and [`object_`](#numpy.object_ "numpy.object_"):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个是类似于内置类型名称的便利方式，与[`bool_`](#numpy.bool_ "numpy.bool_")，[`int_`](#numpy.int_
    "numpy.int_")，[`str_`](#numpy.str_ "numpy.str_")，[`bytes_`](#numpy.bytes_ "numpy.bytes_")和[`object_`](#numpy.object_
    "numpy.object_")相同风格：
- en: '[PRE59]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[`double`](#numpy.double "numpy.double")的别名'
- en: '[PRE60]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: 'Some more use alternate naming conventions for extended-precision floats and
    complex numbers:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用扩展精度浮点数和复数的备用命名约定：
- en: '[PRE61]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: alias of [`longdouble`](#numpy.longdouble "numpy.longdouble")
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`longdouble`](#numpy.longdouble "numpy.longdouble")的别名'
- en: '[PRE62]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[`csingle`](#numpy.csingle "numpy.csingle")的别名'
- en: '[PRE63]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: '[PRE64]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")的别名'
- en: '[PRE65]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")的别名'
- en: The following aliases originate from Python 2, and it is recommended that they
    not be used in new code.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下别名源自Python 2，建议不要在新代码中使用它们。
- en: '[PRE66]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: alias of [`bytes_`](#numpy.bytes_ "numpy.bytes_")
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bytes_`](#numpy.bytes_ "numpy.bytes_")的别名'
- en: '[PRE67]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: alias of [`str_`](#numpy.str_ "numpy.str_")
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`str_`](#numpy.str_ "numpy.str_")的别名'
- en: Attributes
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: 'The array scalar objects have an [`array priority`](arrays.classes.html#numpy.class.__array_priority__
    "numpy.class.__array_priority__") of [`NPY_SCALAR_PRIORITY`](c-api/array.html#c.NPY_SCALAR_PRIORITY
    "NPY_SCALAR_PRIORITY") (-1,000,000.0). They also do not (yet) have a [`ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") attribute. Otherwise, they share the same attributes as
    arrays:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量对象具有[`NPY_SCALAR_PRIORITY`](c-api/array.html#c.NPY_SCALAR_PRIORITY "NPY_SCALAR_PRIORITY")（-1,000,000.0）的[`array
    priority`](arrays.classes.html#numpy.class.__array_priority__ "numpy.class.__array_priority__")。它们还没有（但是）具有[`ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes")属性。否则，它们与数组共享相同的属性：
- en: '| [`generic.flags`](generated/numpy.generic.flags.html#numpy.generic.flags
    "numpy.generic.flags") | The integer value of flags. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.flags`](generated/numpy.generic.flags.html#numpy.generic.flags
    "numpy.generic.flags") | 标志的整数值。 |'
- en: '| [`generic.shape`](generated/numpy.generic.shape.html#numpy.generic.shape
    "numpy.generic.shape") | Tuple of array dimensions. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.shape`](generated/numpy.generic.shape.html#numpy.generic.shape
    "numpy.generic.shape") | 数组维度的元组。 |'
- en: '| [`generic.strides`](generated/numpy.generic.strides.html#numpy.generic.strides
    "numpy.generic.strides") | Tuple of bytes steps in each dimension. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.strides`](generated/numpy.generic.strides.html#numpy.generic.strides
    "numpy.generic.strides") | 每个维度中的字节步长元组。 |'
- en: '| [`generic.ndim`](generated/numpy.generic.ndim.html#numpy.generic.ndim "numpy.generic.ndim")
    | The number of array dimensions. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.ndim`](generated/numpy.generic.ndim.html#numpy.generic.ndim "numpy.generic.ndim")
    | 数组维度的数量。 |'
- en: '| [`generic.data`](generated/numpy.generic.data.html#numpy.generic.data "numpy.generic.data")
    | Pointer to start of data. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.data`](generated/numpy.generic.data.html#numpy.generic.data "numpy.generic.data")
    | 数据起始指针。'
- en: '| [`generic.size`](generated/numpy.generic.size.html#numpy.generic.size "numpy.generic.size")
    | The number of elements in the gentype. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.size`](generated/numpy.generic.size.html#numpy.generic.size "numpy.generic.size")
    | gentype 中元素的数量。'
- en: '| [`generic.itemsize`](generated/numpy.generic.itemsize.html#numpy.generic.itemsize
    "numpy.generic.itemsize") | The length of one element in bytes. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.itemsize`](generated/numpy.generic.itemsize.html#numpy.generic.itemsize
    "numpy.generic.itemsize") | 一个元素的长度（以字节为单位）。'
- en: '| [`generic.base`](generated/numpy.generic.base.html#numpy.generic.base "numpy.generic.base")
    | Scalar attribute identical to the corresponding array attribute. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.base`](generated/numpy.generic.base.html#numpy.generic.base "numpy.generic.base")
    | 与相应数组属性相同的标量属性。'
- en: '| [`generic.dtype`](generated/numpy.generic.dtype.html#numpy.generic.dtype
    "numpy.generic.dtype") | Get array data-descriptor. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.dtype`](generated/numpy.generic.dtype.html#numpy.generic.dtype
    "numpy.generic.dtype") | 获取数组数据描述符。'
- en: '| [`generic.real`](generated/numpy.generic.real.html#numpy.generic.real "numpy.generic.real")
    | The real part of the scalar. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.real`](generated/numpy.generic.real.html#numpy.generic.real "numpy.generic.real")
    | 标量的实部。'
- en: '| [`generic.imag`](generated/numpy.generic.imag.html#numpy.generic.imag "numpy.generic.imag")
    | The imaginary part of the scalar. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.imag`](generated/numpy.generic.imag.html#numpy.generic.imag "numpy.generic.imag")
    | 标量的虚部。'
- en: '| [`generic.flat`](generated/numpy.generic.flat.html#numpy.generic.flat "numpy.generic.flat")
    | A 1-D view of the scalar. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.flat`](generated/numpy.generic.flat.html#numpy.generic.flat "numpy.generic.flat")
    | 标量的 1-D 视图。'
- en: '| [`generic.T`](generated/numpy.generic.T.html#numpy.generic.T "numpy.generic.T")
    | Scalar attribute identical to the corresponding array attribute. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.T`](generated/numpy.generic.T.html#numpy.generic.T "numpy.generic.T")
    | 与相应数组属性相同的标量属性。'
- en: '| [`generic.__array_interface__`](generated/numpy.generic.__array_interface__.html#numpy.generic.__array_interface__
    "numpy.generic.__array_interface__") | Array protocol: Python side |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_interface__`](generated/numpy.generic.__array_interface__.html#numpy.generic.__array_interface__
    "numpy.generic.__array_interface__") | 数组协议：Python 端'
- en: '| [`generic.__array_struct__`](generated/numpy.generic.__array_struct__.html#numpy.generic.__array_struct__
    "numpy.generic.__array_struct__") | Array protocol: struct |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_struct__`](generated/numpy.generic.__array_struct__.html#numpy.generic.__array_struct__
    "numpy.generic.__array_struct__") | 数组协议：结构'
- en: '| [`generic.__array_priority__`](generated/numpy.generic.__array_priority__.html#numpy.generic.__array_priority__
    "numpy.generic.__array_priority__") | Array priority. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_priority__`](generated/numpy.generic.__array_priority__.html#numpy.generic.__array_priority__
    "numpy.generic.__array_priority__") | 数组优先级。'
- en: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) return scalar from array
    |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) 从数组返回标量'
- en: Indexing
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: See also
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexing routines](arrays.indexing.html#arrays-indexing), [Data type objects
    (dtype)](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引例程](arrays.indexing.html#arrays-indexing), [数据类型对象（dtype）](arrays.dtypes.html#arrays-dtypes)'
- en: 'Array scalars can be indexed like 0-dimensional arrays: if *x* is an array
    scalar,'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量可以像零维数组一样进行索引：如果 *x* 是一个数组标量，
- en: '`x[()]` returns a copy of array scalar'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[()]` 返回数组标量的副本'
- en: '`x[...]` returns a 0-dimensional [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[...]` 返回一个零维 [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")'
- en: '`x[''field-name'']` returns the array scalar in the field *field-name*. (*x*
    can have fields, for example, when it corresponds to a structured data type.)'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[''field-name'']` 返回字段 *field-name* 中的数组标量。 (*x* 可以有字段，例如，当它对应于结构化数据类型时。)'
- en: Methods
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: Array scalars have exactly the same methods as arrays. The default behavior
    of these methods is to internally convert the scalar to an equivalent 0-dimensional
    array and to call the corresponding array method. In addition, math operations
    on array scalars are defined so that the same hardware flags are set and used
    to interpret the results as for [ufunc](ufuncs.html#ufuncs), so that the error
    state used for ufuncs also carries over to the math on array scalars.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量具有与数组完全相同的方法。 这些方法的默认行为是将标量内部转换为等效的零维数组，并调用相应的数组方法。 此外，对数组标量的数学运算被定义为设置相同的硬件标志并用于解释结果，就像对
    [ufunc](ufuncs.html#ufuncs) 一样，因此对数组标量的数学运算也继承了用于 ufuncs 的错误状态。
- en: 'The exceptions to the above rules are given below:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 以上规则的例外情况如下：
- en: '| [`generic.__array__`](generated/numpy.generic.__array__.html#numpy.generic.__array__
    "numpy.generic.__array__") | sc.__array__(dtype) return 0-dim array from scalar
    with specified dtype |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array__`](generated/numpy.generic.__array__.html#numpy.generic.__array__
    "numpy.generic.__array__") | sc.__array__(dtype) 从具有指定dtype的标量返回0维数组 |'
- en: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) return scalar from array
    |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) 从数组返回标量 |'
- en: '| [`generic.squeeze`](generated/numpy.generic.squeeze.html#numpy.generic.squeeze
    "numpy.generic.squeeze") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.squeeze`](generated/numpy.generic.squeeze.html#numpy.generic.squeeze
    "numpy.generic.squeeze") | 与相应数组属性相同的标量方法。 |'
- en: '| [`generic.byteswap`](generated/numpy.generic.byteswap.html#numpy.generic.byteswap
    "numpy.generic.byteswap") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.byteswap`](generated/numpy.generic.byteswap.html#numpy.generic.byteswap
    "numpy.generic.byteswap") | 与相应数组属性相同的标量方法。 |'
- en: '| [`generic.__reduce__`](generated/numpy.generic.__reduce__.html#numpy.generic.__reduce__
    "numpy.generic.__reduce__") | Helper for pickle. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__reduce__`](generated/numpy.generic.__reduce__.html#numpy.generic.__reduce__
    "numpy.generic.__reduce__") | pickle 的辅助方法。 |'
- en: '| [`generic.__setstate__`](generated/numpy.generic.__setstate__.html#numpy.generic.__setstate__
    "numpy.generic.__setstate__") |  |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__setstate__`](generated/numpy.generic.__setstate__.html#numpy.generic.__setstate__
    "numpy.generic.__setstate__") |  |'
- en: '| [`generic.setflags`](generated/numpy.generic.setflags.html#numpy.generic.setflags
    "numpy.generic.setflags") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.setflags`](generated/numpy.generic.setflags.html#numpy.generic.setflags
    "numpy.generic.setflags") | 与相应数组属性相同的标量方法。 |'
- en: 'Utility method for typing:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 类型定义实用方法：
- en: '| [`number.__class_getitem__`](generated/numpy.number.__class_getitem__.html#numpy.number.__class_getitem__
    "numpy.number.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`number`](#numpy.number "numpy.number") type. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [`number.__class_getitem__`](generated/numpy.number.__class_getitem__.html#numpy.number.__class_getitem__
    "numpy.number.__class_getitem__")(item, /) | 返回围绕[`number`](#numpy.number "numpy.number")类型的参数化包装器。
    |'
- en: Defining new types
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义新类型
- en: 'There are two ways to effectively define a new array scalar type (apart from
    composing structured types [dtypes](arrays.dtypes.html#arrays-dtypes) from the
    built-in scalar types): One way is to simply subclass the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") and overwrite the methods of interest. This will work to a degree,
    but internally certain behaviors are fixed by the data type of the array. To fully
    customize the data type of an array you need to define a new data-type, and register
    it with NumPy. Such new types can only be defined in C, using the [NumPy C-API](c-api/index.html#c-api).'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 有效定义新数组标量类型的两种方法（除了从内置标量类型组合结构化类型[dtypes](arrays.dtypes.html#arrays-dtypes)）：一种方法是简单地子类化[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")并重写感兴趣的方法。这在一定程度上可以工作，但在内部，某些行为是由数组的数据类型固定的。要完全自定义数组的数据类型，您需要定义一个新的数据类型，并在
    NumPy 中注册它。这样的新类型只能在 C 中定义，使用[NumPy C-API](c-api/index.html#c-api)。
- en: '## Built-in scalar types'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '## 内置标量类型'
- en: The built-in scalar types are shown below. The C-like names are associated with
    character codes, which are shown in their descriptions. Use of the character codes,
    however, is discouraged.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了内置标量类型。类似 C 的名称与字符代码相关联，这些字符代码显示在其描述中。然而，不建议使用字符代码。
- en: 'Some of the scalar types are essentially equivalent to fundamental Python types
    and therefore inherit from them as well as from the generic array scalar type:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 一些标量类型本质上等同于基本的 Python 类型，因此也从它们那里继承，以及从通用数组标量类型继承：
- en: '| Array scalar type | Related Python type | Inherits? |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| 数组标量类型 | 相关的 Python 类型 | 继承？ |'
- en: '| --- | --- | --- |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [`int_`](#numpy.int_ "numpy.int_") | [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") | Python 2 only |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [`int_`](#numpy.int_ "numpy.int_") | [`int`](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.11 中)") | 仅适用于 Python 2 |'
- en: '| [`float_`](#numpy.float_ "numpy.float_") | [`float`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") | yes |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| [`float_`](#numpy.float_ "numpy.float_") | [`float`](https://docs.python.org/3/library/functions.html#float
    "(在 Python v3.11 中)") | 是 |'
- en: '| [`complex_`](#numpy.complex_ "numpy.complex_") | [`complex`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)") | yes |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [`complex_`](#numpy.complex_ "numpy.complex_") | [`complex`](https://docs.python.org/3/library/functions.html#complex
    "(在 Python v3.11 中)") | 是 |'
- en: '| [`bytes_`](#numpy.bytes_ "numpy.bytes_") | [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes
    "(in Python v3.11)") | yes |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [`bytes_`](#numpy.bytes_ "numpy.bytes_") | [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes
    "(在Python v3.11中)") | 是 |'
- en: '| [`str_`](#numpy.str_ "numpy.str_") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") | yes |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [`str_`](#numpy.str_ "numpy.str_") | [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在Python v3.11中)") | 是 |'
- en: '| [`bool_`](#numpy.bool_ "numpy.bool_") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") | no |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [`bool_`](#numpy.bool_ "numpy.bool_") | [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.11中)") | 否 |'
- en: '| [`datetime64`](#numpy.datetime64 "numpy.datetime64") | [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.11)") | no |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| [`datetime64`](#numpy.datetime64 "numpy.datetime64") | [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(在Python v3.11中)") | 否 |'
- en: '| [`timedelta64`](#numpy.timedelta64 "numpy.timedelta64") | [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(in Python v3.11)") | no |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| [`timedelta64`](#numpy.timedelta64 "numpy.timedelta64") | [`datetime.timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta
    "(在Python v3.11中)") | 否 |'
- en: The [`bool_`](#numpy.bool_ "numpy.bool_") data type is very similar to the Python
    [`bool`](https://docs.python.org/3/library/functions.html#bool "(in Python v3.11)")
    but does not inherit from it because Python’s [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") does not allow itself to be inherited from, and on the C-level
    the size of the actual bool data is not the same as a Python Boolean scalar.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bool_`](#numpy.bool_ "numpy.bool_")数据类型与Python [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.11中)")非常相似，但不继承自它，因为Python的[`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.11中)")不允许被继承，而且在C级别上，实际布尔数据的大小与Python布尔标量不同。'
- en: Warning
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`int_`](#numpy.int_ "numpy.int_") type does **not** inherit from the [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") built-in under Python 3, because type [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)") is no longer a fixed-width integer type.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`int_`](#numpy.int_ "numpy.int_")类型**不**继承自Python 3下的[`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.11中)")内置类型，因为类型[`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.11中)")不再是固定宽度整数类型。'
- en: Tip
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The default data type in NumPy is [`float_`](#numpy.float_ "numpy.float_").
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的默认数据类型是[`float_`](#numpy.float_ "numpy.float_")。
- en: '[PRE68]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Base class for numpy scalar types.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: numpy标量类型的基类。
- en: Class from which most (all?) numpy scalar types are derived. For consistency,
    exposes the same API as [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), despite many consequent attributes being either “get-only,”
    or completely irrelevant. This is the class from which it is strongly suggested
    users should derive custom scalar types.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数（全部？）numpy标量类型派生自的类。为了保持一致性，尽管许多后续属性要么是“只读”，要么完全无关紧要，但它暴露与[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")相同的API。强烈建议用户从这个类派生自定义标量类型。
- en: '[PRE69]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Abstract base class of all numeric scalar types.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值标量类型的抽象基类。
- en: Integer types
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数类型
- en: '[PRE70]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Abstract base class of all integer scalar types.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 所有整数标量类型的抽象基类。
- en: Note
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The numpy integer types mirror the behavior of C integers, and can therefore
    be subject to [Overflow Errors](../user/basics.types.html#overflow-errors).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: numpy整数类型反映了C整数的行为，因此可能会受到[溢出错误](../user/basics.types.html#overflow-errors)的影响。
- en: Signed integer types
  id: totrans-372
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有符号整数类型
- en: '[PRE71]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Abstract base class of all signed integer scalar types.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 所有有符号整数标量类型的抽象基类。
- en: '[PRE72]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Signed integer type, compatible with C `char`.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `char`兼容。
- en: 'Character code:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''b''`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`''b''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8-bit signed integer (`-128` to `127`).'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int8`](#numpy.int8 "numpy.int8")：8位有符号整数（`-128`到`127`）。'
- en: '[PRE73]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Signed integer type, compatible with C `short`.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `short`兼容。
- en: 'Character code:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''h''`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`''h''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16-bit signed integer (`-32_768`
    to `32_767`).'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int16`](#numpy.int16 "numpy.int16")：16位有符号整数（`-32_768`到`32_767`）。'
- en: '[PRE74]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Signed integer type, compatible with C `int`.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `int`兼容。
- en: 'Character code:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''i''`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`''i''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.int32`](#numpy.int32 "numpy.int32"): 32-bit signed integer (`-2_147_483_648`
    to `2_147_483_647`).'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int32`](#numpy.int32 "numpy.int32")：32位有符号整数（`-2_147_483_648`到`2_147_483_647`）。'
- en: '[PRE75]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Signed integer type, compatible with Python *int* and C `long`.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与Python *int*和C `long`兼容。
- en: 'Character code:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''l''`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`''l''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64-bit signed integer (`-9_223_372_036_854_775_808`
    to `9_223_372_036_854_775_807`).'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64 位有符号整数（`-9_223_372_036_854_775_808`
    到 `9_223_372_036_854_775_807`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.intp`](#numpy.intp "numpy.intp"): Signed integer large enough to fit
    pointer, compatible with C `intptr_t`.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.intp`](#numpy.intp "numpy.intp"): 足够大以适应指针的有符号整数，与 C `intptr_t` 兼容。'
- en: '[PRE76]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Signed integer type, compatible with C `long long`.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `long long` 兼容。
- en: 'Character code:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''q''`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`''q''`'
- en: Unsigned integer types
  id: totrans-405
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无符号整数类型
- en: '[PRE77]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Abstract base class of all unsigned integer scalar types.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 所有无符号整数标量类型的抽象基类。
- en: '[PRE78]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Unsigned integer type, compatible with C `unsigned char`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned char` 兼容。
- en: 'Character code:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''B''`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`''B''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8-bit unsigned integer (`0` to
    `255`).'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8 位无符号整数（`0` 到 `255`）。'
- en: '[PRE79]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Unsigned integer type, compatible with C `unsigned short`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned short` 兼容。
- en: 'Character code:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''H''`'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`''H''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16-bit unsigned integer (`0`
    to `65_535`).'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16 位无符号整数（`0` 到 `65_535`）。'
- en: '[PRE80]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Unsigned integer type, compatible with C `unsigned int`.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned int` 兼容。
- en: 'Character code:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''I''`'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`''I''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32-bit unsigned integer (`0`
    to `4_294_967_295`).'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32 位无符号整数（`0` 到 `4_294_967_295`）。'
- en: '[PRE81]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Unsigned integer type, compatible with C `unsigned long`.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned long` 兼容。
- en: 'Character code:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''L''`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`''L''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64-bit unsigned integer (`0`
    to `18_446_744_073_709_551_615`).'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64 位无符号整数（`0` 到 `18_446_744_073_709_551_615`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): Unsigned integer large enough
    to fit pointer, compatible with C `uintptr_t`.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): 足够大以适应指针的无符号整数，与 C `uintptr_t`
    兼容。'
- en: '[PRE82]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Signed integer type, compatible with C `unsigned long long`.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `unsigned long long` 兼容。
- en: 'Character code:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''Q''`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Q''`'
- en: Inexact types
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不精确类型
- en: '[PRE83]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Abstract base class of all numeric scalar types with a (potentially) inexact
    representation of the values in its range, such as floating-point numbers.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值标量类型的抽象基类，其值在其范围内具有（可能）不精确的表示，例如浮点数。
- en: Note
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inexact scalars are printed using the fewest decimal digits needed to distinguish
    their value from other values of the same datatype, by judicious rounding. See
    the `unique` parameter of [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific").
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 不精确的标量使用最少的十进制数字打印，以区分其值与同一数据类型的其他值，通过谨慎的四舍五入。参见 [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") 和 [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") 的 `unique` 参数。
- en: 'This means that variables with equal binary values but whose datatypes are
    of different precisions may display differently:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着具有相同二进制值但数据类型精度不同的变量可能显示不同：
- en: '[PRE84]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Note that none of these floats hold the exact value \(\frac{1}{10}\); `f16`
    prints as `0.1` because it is as close to that value as possible, whereas the
    other types do not as they have more precision and therefore have closer values.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些浮点数中没有一个保存精确值 \(\frac{1}{10}\)；`f16` 打印为 `0.1`，因为它尽可能接近该值，而其他类型不会，因为它们具有更高的精度，因此具有更接近的值。
- en: 'Conversely, floating-point scalars of different precisions which approximate
    the same decimal value may compare unequal despite printing identically:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，不同精度的浮点标量可能显示为不同的十进制值，尽管打印相同：
- en: '[PRE85]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Floating-point types
  id: totrans-448
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮点类型
- en: '[PRE86]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Abstract base class of all floating-point scalar types.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浮点标量类型的抽象基类。
- en: '[PRE87]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Half-precision floating-point number type.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 半精度浮点数类��。
- en: 'Character code:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '字符编码:'
- en: '`''e''`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`''e''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '该平台上的别名（Linux x86_64）:'
- en: '[`numpy.float16`](#numpy.float16 "numpy.float16"): 16-bit-precision floating-point
    number type: sign bit, 5 bits exponent, 10 bits mantissa.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float16`](#numpy.float16 "numpy.float16")：16位精度浮点数类型：符号位，5位指数，10位尾数。'
- en: '[PRE88]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Single-precision floating-point number type, compatible with C `float`.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数类型，与 C `float` 兼容。
- en: 'Character code:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''f''`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`''f''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32-bit-precision floating-point
    number type: sign bit, 8 bits exponent, 23 bits mantissa.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float32`](#numpy.float32 "numpy.float32")：32位精度浮点数类型：符号位，8位指数，23位尾数。'
- en: '[PRE89]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Double-precision floating-point number type, compatible with Python *float*
    and C `double`.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度浮点数类型，与 Python *float* 和 C `double` 兼容。
- en: 'Character code:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''d''`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`''d''`'
- en: 'Alias:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.float64`](#numpy.float64 "numpy.float64"): 64-bit precision floating-point
    number type: sign bit, 11 bits exponent, 52 bits mantissa.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float64`](#numpy.float64 "numpy.float64")：64位精度浮点数类型：符号位，11位指数，52位尾数。'
- en: '[PRE90]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Extended-precision floating-point number type, compatible with C `long double`
    but not necessarily with IEEE 754 quadruple-precision.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展精度浮点数类型，与 C `long double` 兼容，但不一定与 IEEE 754 四倍精度兼容。
- en: 'Character code:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''g''`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`''g''`'
- en: 'Alias:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.float128`](#numpy.float128 "numpy.float128"): 128-bit extended-precision
    floating-point number type.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float128`](#numpy.float128 "numpy.float128")：128位扩展精度浮点数类型。'
- en: Complex floating-point types
  id: totrans-479
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复数浮点类型
- en: '[PRE91]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Abstract base class of all complex number scalar types that are made up of floating-point
    numbers.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由浮点数组成的复数标量类型的抽象基类。
- en: '[PRE92]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Complex number type composed of two single-precision floating-point numbers.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个单精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''F''`'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`''F''`'
- en: 'Alias:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64"): Complex number type
    composed of 2 32-bit-precision floating-point numbers.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64")：由两个32位精度浮点数组成的复数类型。'
- en: '[PRE93]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Complex number type composed of two double-precision floating-point numbers,
    compatible with Python *complex*.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个双精度浮点数组成的复数类型，与 Python *complex* 兼容。
- en: 'Character code:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''D''`'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`''D''`'
- en: 'Alias:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
- en: 'Alias:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128"): Complex number
    type composed of 2 64-bit-precision floating-point numbers.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128")：由两个64位精度浮点数组成的复数类型。'
- en: '[PRE94]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Complex number type composed of two extended-precision floating-point numbers.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个扩展精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''G''`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`''G''`'
- en: 'Alias:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
- en: 'Alias:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256"): Complex number
    type composed of 2 128-bit extended-precision floating-point numbers.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256")：由两个128位扩展精度浮点数组成的复数类型。'
- en: Other types
  id: totrans-510
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他类型
- en: '[PRE95]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Boolean type (True or False), stored as a byte.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔类型（True 或 False），存储为一个字节。
- en: Warning
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`bool_`](#numpy.bool_ "numpy.bool_") type is not a subclass of the [`int_`](#numpy.int_
    "numpy.int_") type (the [`bool_`](#numpy.bool_ "numpy.bool_") is not even a number
    type). This is different than Python’s default implementation of [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") as a sub-class of [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)").
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bool_`](#numpy.bool_ "numpy.bool_") 类型不是 [`int_`](#numpy.int_ "numpy.int_")
    类型的子类（[`bool_`](#numpy.bool_ "numpy.bool_") 甚至不是一个数字类型）。这与 Python 默认实现的 [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在 Python v3.11)") 作为 [`int`](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.11)") 的子类不同。'
- en: 'Character code:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''?''`'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`''?''`'
- en: '[PRE96]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: If created from a 64-bit integer, it represents an offset from `1970-01-01T00:00:00`.
    If created from string, the string can be in ISO 8601 date or datetime format.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从 64 位整数创建，则表示从`1970-01-01T00:00:00`的偏移量。如果从字符串创建，则字符串可以是 ISO 8601 日期或日期时间格式。
- en: '[PRE97]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间间隔](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''M''`'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`''M''`'
- en: '[PRE98]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: A timedelta stored as a 64-bit integer.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 以 64 位整数存储的时间间隔。
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间间隔](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''m''`'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`''m''`'
- en: '[PRE99]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Any Python object.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 Python 对象。
- en: 'Character code:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''O''`'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`''O''`'
- en: Note
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The data actually stored in object arrays (*i.e.*, arrays having dtype [`object_`](#numpy.object_
    "numpy.object_")) are references to Python objects, not the objects themselves.
    Hence, object arrays behave more like usual Python [`lists`](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)"), in the sense that their contents need not be of the same
    Python type.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 实际存储在对象数组中的数据（即具有 dtype [`object_`](#numpy.object_ "numpy.object_") 的数组）是对 Python
    对象的引用，而不是对象本身。因此，对象数组的行为更像通常的 Python [`lists`](https://docs.python.org/3/library/stdtypes.html#list
    "(在 Python v3.11 中)")，即它们的内容不必是相同的 Python 类型。
- en: The object type is also special because an array containing [`object_`](#numpy.object_
    "numpy.object_") items does not return an [`object_`](#numpy.object_ "numpy.object_")
    object on item access, but instead returns the actual object that the array item
    refers to.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型也很特殊，因为包含[`object_`](#numpy.object_ "numpy.object_")项的数组在访问项时不会返回一个[`object_`](#numpy.object_
    "numpy.object_")对象，而是返回数组项所指的实际对象。
- en: 'The following data types are **flexible**: they have no predefined size and
    the data they describe can be of different length in different arrays. (In the
    character codes `#` is an integer denoting how many elements the data type consists
    of.)'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 以下数据类型是**灵活的**：它们没有预定义的大小，它们描述的数据在不同数组中可以是不同长度的。（在字符编码中，`#`是一个整数，表示数据类型包含多少个元素。）
- en: '[PRE100]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Abstract base class of all scalar types without predefined length. The actual
    size of these types depends on the specific *np.dtype* instantiation.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 所有没有预定义长度的标量类型的抽象基类。这些类型的实际大小取决于特定的*np.dtype*实例化。
- en: '[PRE101]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Abstract base class of all character string scalar types.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符字符串标量类型的抽象基类。
- en: '[PRE102]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: A byte string.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字节字符串。
- en: When used in arrays, this type strips trailing null bytes.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中使用时，此类型会去除尾随的空字节。
- en: 'Character code:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''S''`'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`''S''`'
- en: 'Alias:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
- en: '[PRE103]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: A unicode string.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Unicode 字符串。
- en: This type strips trailing null codepoints.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型会去除尾随的空代码点。
- en: '[PRE104]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Unlike the builtin *str*, this supports the [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(in Python v3.11)"), exposing its contents as UCS4:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 与内置的*str*不同，这支持[缓冲区协议](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(在 Python v3.11 中)")，将其内容公开为 UCS4：
- en: '[PRE105]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Character code:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''U''`'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '`''U''`'
- en: 'Alias:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
- en: '[PRE106]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Create a new structured or unstructured void scalar.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的结构化或无结构化空标量。
- en: 'Parameters:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length_or_data**int, array-like, bytes-like, object'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '**length_or_data**int，类似数组，类似字节，对象'
- en: One of multiple meanings (see notes). The length or bytes data of an unstructured
    void. Or alternatively, the data to be stored in the new scalar when [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") is provided. This can be an array-like, in which case an array
    may be returned.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多重含义之一（请参阅注释）。无结构空白的长度或字节数据。或者，当提供[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")时要存储在新标量中的数据。这可以是类似数组的东西，如果是这种情况，可能会返回一个数组。
- en: '**dtype**dtype, optional'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**dtype，可选'
- en: If provided the dtype of the new scalar. This dtype must be “void” dtype (i.e.
    a structured or unstructured void, see also [Structured Datatypes](../user/basics.rec.html#defining-structured-types)).
  id: totrans-563
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供了新标量的 dtype。此 dtype 必须是“void”dtype（即结构化或无结构化空，另请参见[结构化数据类型](../user/basics.rec.html#defining-structured-types)）。
- en: '..versionadded:: 1.24'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded:: 1.24'
- en: Notes
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: 'For historical reasons and because void scalars can represent both arbitrary
    byte data and structured dtypes, the void constructor has three calling conventions:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 由于历史原因和因为空标量可以表示任意字节数据和结构化的 dtype，空构造函数有三种调用约定：
- en: '`np.void(5)` creates a `dtype="V5"` scalar filled with five `\0` bytes. The
    5 can be a Python or NumPy integer.'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(5)` 创建一个填充有五个`\0`字节的`dtype="V5"`标量。5 可以是 Python 或 NumPy 整数。'
- en: '`np.void(b"bytes-like")` creates a void scalar from the byte string. The dtype
    itemsize will match the byte string length, here `"V10"`.'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(b"bytes-like")` 从字节字符串创建一个空标量。dtype 的 itemsize 将匹配字节字符串的长度，这里是 `"V10"`。'
- en: When a `dtype=` is passed the call is roughly the same as an array creation.
    However, a void scalar rather than array is returned.
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当传递 `dtype=` 时，调用与数组创建大致相同。但是，返回的是一个空标量而不是数组。
- en: Please see the examples which show all three different conventions.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看示例，展示了所有三种不同的约定。
- en: Examples
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE107]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Character code:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''V''`'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '`''V''`'
- en: Warning
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See [Note on string types](arrays.dtypes.html#string-dtype-note).
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[字符串类型注释](arrays.dtypes.html#string-dtype-note)。
- en: 'Numeric Compatibility: If you used old typecode characters in your Numeric
    code (which was never recommended), you will need to change some of them to the
    new characters. In particular, the needed changes are `c -> S1`, `b -> B`, `1
    -> b`, `s -> h`, `w -> H`, and `u -> I`. These changes make the type character
    convention more consistent with other Python modules such as the [`struct`](https://docs.python.org/3/library/struct.html#module-struct
    "(in Python v3.11)") module.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 数值兼容性：如果您在 Numeric 代码中使用了旧的类型代码字符（这从未被推荐过），您将需要将其中一些更改为新字符。特别是，需要更改的是 `c ->
    S1`，`b -> B`，`1 -> b`，`s -> h`，`w -> H` 和 `u -> I`。这些更改使类型字符约定更加一致，与其他 Python
    模块（如 [`struct`](https://docs.python.org/3/library/struct.html#module-struct "(在
    Python v3.11 中)") 模块）一致。
- en: '### Sized aliases'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '### 大小别名'
- en: Along with their (mostly) C-derived names, the integer, float, and complex data-types
    are also available using a bit-width convention so that an array of the right
    size can always be ensured. Two aliases ([`numpy.intp`](#numpy.intp "numpy.intp")
    and [`numpy.uintp`](#numpy.uintp "numpy.uintp")) pointing to the integer type
    that is sufficiently large to hold a C pointer are also provided.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们（大多数）源自 C 的名称之外，整数、浮点和复数数据类型还可以使用位宽约定来使用，以确保始终可以确保正确大小的数组。还提供了两个别名（[`numpy.intp`](#numpy.intp
    "numpy.intp") 和 [`numpy.uintp`](#numpy.uintp "numpy.uintp")），指向足够大以容纳 C 指针的整数类型。
- en: '[PRE108]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Aliases for the signed integer types (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and [`numpy.longlong`](#numpy.longlong
    "numpy.longlong")) with the specified number of bits.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 具有指定位数的有符号整数类型的别名（[`numpy.byte`](#numpy.byte "numpy.byte")、[`numpy.short`](#numpy.short
    "numpy.short")、[`numpy.intc`](#numpy.intc "numpy.intc")、[`numpy.int_`](#numpy.int_
    "numpy.int_") 和 [`numpy.longlong`](#numpy.longlong "numpy.longlong"))。
- en: Compatible with the C99 `int8_t`, `int16_t`, `int32_t`, and `int64_t`, respectively.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C99 中的 `int8_t`、`int16_t`、`int32_t` 和 `int64_t` 兼容。
- en: '[PRE112]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Alias for the unsigned integer types (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and [`numpy.ulonglong`](#numpy.ulonglong
    "numpy.ulonglong")) with the specified number of bits.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 具有指定位数的无符号整数类型的别名（[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")、[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")、[`numpy.uintc`](#numpy.uintc "numpy.uintc")、[`numpy.uint`](#numpy.uint
    "numpy.uint") 和 [`numpy.ulonglong`](#numpy.ulonglong "numpy.ulonglong"))。
- en: Compatible with the C99 `uint8_t`, `uint16_t`, `uint32_t`, and `uint64_t`, respectively.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C99 中的 `uint8_t`、`uint16_t`、`uint32_t` 和 `uint64_t` 兼容。
- en: '[PRE116]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Alias for the signed integer type (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and *np.longlong*) that is the same size
    as a pointer.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 作为指针大小相同的有符号整数类型的别名（[`numpy.byte`](#numpy.byte "numpy.byte")、[`numpy.short`](#numpy.short
    "numpy.short")、[`numpy.intc`](#numpy.intc "numpy.intc")、[`numpy.int_`](#numpy.int_
    "numpy.int_") 和 *np.longlong*）。
- en: Compatible with the C `intptr_t`.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C `intptr_t` 兼容。
- en: 'Character code:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''p''`'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '`''p''`'
- en: '[PRE117]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Alias for the unsigned integer type (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and *np.ulonglong*) that is the same
    size as a pointer.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 作为指针大小相同的无符号整数类型的别名（[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")、[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")、[`numpy.uintc`](#numpy.uintc "numpy.uintc")、[`numpy.uint`](#numpy.uint
    "numpy.uint") 和 *np.ulonglong*）。
- en: Compatible with the C `uintptr_t`.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C `uintptr_t` 兼容。
- en: 'Character code:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''P''`'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '`''P''`'
- en: '[PRE118]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: alias of [`half`](#numpy.half "numpy.half")
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`half`](#numpy.half "numpy.half") 的别名'
- en: '[PRE119]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: alias of [`single`](#numpy.single "numpy.single")
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '[`single`](#numpy.single "numpy.single") 的别名'
- en: '[PRE120]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '[`double`](#numpy.double "numpy.double") 的别名'
- en: '[PRE121]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Alias for [`numpy.longdouble`](#numpy.longdouble "numpy.longdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`numpy.longdouble`](#numpy.longdouble "numpy.longdouble")，根据其位数命名。这些别名的存在取决于平台。
- en: '[PRE123]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`csingle`](#numpy.csingle "numpy.csingle")
- en: '[PRE124]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`cdouble`](#numpy.cdouble "numpy.cdouble")
- en: '[PRE125]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Alias for [`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble")，根据其位数命名。这些别名的存在取决于平台。
- en: Other aliases
  id: totrans-618
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他别名
- en: 'The first two of these are conveniences which resemble the names of the builtin
    types, in the same style as [`bool_`](#numpy.bool_ "numpy.bool_"), [`int_`](#numpy.int_
    "numpy.int_"), [`str_`](#numpy.str_ "numpy.str_"), [`bytes_`](#numpy.bytes_ "numpy.bytes_"),
    and [`object_`](#numpy.object_ "numpy.object_"):'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个是方便起见，类似于内置类型的名称，与[`bool_`](#numpy.bool_ "numpy.bool_")、[`int_`](#numpy.int_
    "numpy.int_")、[`str_`](#numpy.str_ "numpy.str_")、[`bytes_`](#numpy.bytes_ "numpy.bytes_")和[`object_`](#numpy.object_
    "numpy.object_")的风格相同：
- en: '[PRE127]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`double`](#numpy.double "numpy.double")
- en: '[PRE128]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`cdouble`](#numpy.cdouble "numpy.cdouble")
- en: 'Some more use alternate naming conventions for extended-precision floats and
    complex numbers:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用扩展精度浮点数和复数的替代命名约定：
- en: '[PRE129]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: alias of [`longdouble`](#numpy.longdouble "numpy.longdouble")
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`longdouble`](#numpy.longdouble "numpy.longdouble")
- en: '[PRE130]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`csingle`](#numpy.csingle "numpy.csingle")
- en: '[PRE131]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`cdouble`](#numpy.cdouble "numpy.cdouble")
- en: '[PRE132]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
- en: '[PRE133]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
- en: The following aliases originate from Python 2, and it is recommended that they
    not be used in new code.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 以下别名源自Python 2，建议不要在新代码中使用。
- en: '[PRE134]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: alias of [`bytes_`](#numpy.bytes_ "numpy.bytes_")
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`bytes_`](#numpy.bytes_ "numpy.bytes_")
- en: '[PRE135]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: alias of [`str_`](#numpy.str_ "numpy.str_")
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为[`str_`](#numpy.str_ "numpy.str_")
- en: Integer types
  id: totrans-640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数类型
- en: '[PRE136]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Abstract base class of all integer scalar types.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 所有整数标量类型的抽象基类。
- en: Note
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The numpy integer types mirror the behavior of C integers, and can therefore
    be subject to [Overflow Errors](../user/basics.types.html#overflow-errors).
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: numpy整数类型反映了C整数的行为，因此可能会受到[溢出错误](../user/basics.types.html#overflow-errors)的影响。
- en: Signed integer types
  id: totrans-645
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有符号整数类型
- en: '[PRE137]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Abstract base class of all signed integer scalar types.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 所有有符号整数标量类型的抽象基类。
- en: '[PRE138]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Signed integer type, compatible with C `char`.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `char`兼容。
- en: 'Character code:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''b''`'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '`''b''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8-bit signed integer (`-128` to `127`).'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int8`](#numpy.int8 "numpy.int8")：8位有符号整数（`-128`到`127`）。'
- en: '[PRE139]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Signed integer type, compatible with C `short`.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `short`兼容。
- en: 'Character code:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''h''`'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '`''h''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16-bit signed integer (`-32_768`
    to `32_767`).'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int16`](#numpy.int16 "numpy.int16")：16位有符号整数（`-32_768`到`32_767`）。'
- en: '[PRE140]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Signed integer type, compatible with C `int`.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `int`兼容。
- en: 'Character code:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''i''`'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '`''i''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int32`](#numpy.int32 "numpy.int32"): 32-bit signed integer (`-2_147_483_648`
    to `2_147_483_647`).'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int32`](#numpy.int32 "numpy.int32")：32位有符号整数（`-2_147_483_648`到`2_147_483_647`）。'
- en: '[PRE141]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Signed integer type, compatible with Python *int* and C `long`.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与Python *int*和C `long`兼容。
- en: 'Character code:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''l''`'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '`''l''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64-bit signed integer (`-9_223_372_036_854_775_808`
    to `9_223_372_036_854_775_807`).'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int64`](#numpy.int64 "numpy.int64")：64位有符号整数（`-9_223_372_036_854_775_808`到`9_223_372_036_854_775_807`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.intp`](#numpy.intp "numpy.intp"): Signed integer large enough to fit
    pointer, compatible with C `intptr_t`.'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.intp`](#numpy.intp "numpy.intp")：足够大以适应指针的有符号整数，与C `intptr_t`兼容。'
- en: '[PRE142]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Signed integer type, compatible with C `long long`.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `long long`兼容。
- en: 'Character code:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''q''`'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '`''q''`'
- en: Unsigned integer types
  id: totrans-678
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无符号整数类型
- en: '[PRE143]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Abstract base class of all unsigned integer scalar types.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 所有无符号整数标量类型的抽象基类。
- en: '[PRE144]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Unsigned integer type, compatible with C `unsigned char`.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与C `unsigned char`兼容。
- en: 'Character code:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''B''`'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '`''B''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8-bit unsigned integer (`0` to
    `255`).'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8位无符号整数（`0` 到 `255`）。'
- en: '[PRE145]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Unsigned integer type, compatible with C `unsigned short`.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned short` 兼容。
- en: 'Character code:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''H''`'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '`''H''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16-bit unsigned integer (`0`
    to `65_535`).'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16位无符号整数（`0` 到 `65_535`）。'
- en: '[PRE146]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Unsigned integer type, compatible with C `unsigned int`.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned int` 兼容。
- en: 'Character code:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''I''`'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`''I''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32-bit unsigned integer (`0`
    to `4_294_967_295`).'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32位无符号整数（`0` 到 `4_294_967_295`）。'
- en: '[PRE147]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Unsigned integer type, compatible with C `unsigned long`.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned long` 兼容。
- en: 'Character code:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''L''`'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '`''L''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64-bit unsigned integer (`0`
    to `18_446_744_073_709_551_615`).'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64位无符号整数（`0` 到 `18_446_744_073_709_551_615`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): Unsigned integer large enough
    to fit pointer, compatible with C `uintptr_t`.'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): 足够大以容纳指针的无符号整数，与 C `uintptr_t`
    兼容。'
- en: '[PRE148]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Signed integer type, compatible with C `unsigned long long`.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `unsigned long long` 兼容。
- en: 'Character code:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''Q''`'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Q''`'
- en: Signed integer types
  id: totrans-711
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有符号整数类型
- en: '[PRE149]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Abstract base class of all signed integer scalar types.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 所有有符号整数标量类型的抽象基类。
- en: '[PRE150]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Signed integer type, compatible with C `char`.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `char` 兼容。
- en: 'Character code:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''b''`'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`''b''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8-bit signed integer (`-128` to `127`).'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int8`](#numpy.int8 "numpy.int8"): 8位有符号整数（`-128` 到 `127`）。'
- en: '[PRE151]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Signed integer type, compatible with C `short`.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `short` 兼容。
- en: 'Character code:'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''h''`'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '`''h''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16-bit signed integer (`-32_768`
    to `32_767`).'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int16`](#numpy.int16 "numpy.int16"): 16位有符号整数（`-32_768` 到 `32_767`）。'
- en: '[PRE152]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Signed integer type, compatible with C `int`.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `int` 兼容。
- en: 'Character code:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''i''`'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '`''i''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int32`](#numpy.int32 "numpy.int32"): 32-bit signed integer (`-2_147_483_648`
    to `2_147_483_647`).'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int32`](#numpy.int32 "numpy.int32"): 32位有符号整数（`-2_147_483_648` 到 `2_147_483_647`）。'
- en: '[PRE153]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Signed integer type, compatible with Python *int* and C `long`.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 Python *int* 和 C `long` 兼容。
- en: 'Character code:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''l''`'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '`''l''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64-bit signed integer (`-9_223_372_036_854_775_808`
    to `9_223_372_036_854_775_807`).'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.int64`](#numpy.int64 "numpy.int64"): 64位有符号整数（`-9_223_372_036_854_775_808`
    到 `9_223_372_036_854_775_807`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.intp`](#numpy.intp "numpy.intp"): Signed integer large enough to fit
    pointer, compatible with C `intptr_t`.'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.intp`](#numpy.intp "numpy.intp"): 足够大以容纳指针的有符号整数，与 C `intptr_t` 兼容。'
- en: '[PRE154]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Signed integer type, compatible with C `long long`.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与 C `long long` 兼容。
- en: 'Character code:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''q''`'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '`''q''`'
- en: Unsigned integer types
  id: totrans-744
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无符号整数类型
- en: '[PRE155]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Abstract base class of all unsigned integer scalar types.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 所有无符号整数标量类型的抽象基类。
- en: '[PRE156]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Unsigned integer type, compatible with C `unsigned char`.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned char` 兼容。
- en: 'Character code:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''B''`'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '`''B''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8-bit unsigned integer (`0` to
    `255`).'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint8`](#numpy.uint8 "numpy.uint8"): 8位无符号整数（`0` 到 `255`）。'
- en: '[PRE157]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Unsigned integer type, compatible with C `unsigned short`.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned short` 兼容。
- en: 'Character code:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''H''`'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '`''H''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16-bit unsigned integer (`0`
    to `65_535`).'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint16`](#numpy.uint16 "numpy.uint16"): 16位无符号整数（`0` 到 `65_535`）。'
- en: '[PRE158]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Unsigned integer type, compatible with C `unsigned int`.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned int` 兼容。
- en: 'Character code:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''I''`'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '`''I''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32-bit unsigned integer (`0`
    to `4_294_967_295`).'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint32`](#numpy.uint32 "numpy.uint32"): 32位无符号整数（`0` 到 `4_294_967_295`）。'
- en: '[PRE159]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Unsigned integer type, compatible with C `unsigned long`.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 无符号整数类型，与 C `unsigned long` 兼容。
- en: 'Character code:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''L''`'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '`''L''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64"): 64-bit unsigned integer (`0`
    to `18_446_744_073_709_551_615`).'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uint64`](#numpy.uint64 "numpy.uint64")：64位无符号整数（`0`到`18_446_744_073_709_551_615`）。'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.uintp`](#numpy.uintp "numpy.uintp"): Unsigned integer large enough
    to fit pointer, compatible with C `uintptr_t`.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.uintp`](#numpy.uintp "numpy.uintp")：足够大以适应指针的无符号整数，与C `uintptr_t`兼容。'
- en: '[PRE160]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Signed integer type, compatible with C `unsigned long long`.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 有符号整数类型，与C `unsigned long long`兼容。
- en: 'Character code:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''Q''`'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Q''`'
- en: Inexact types
  id: totrans-777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不精确类型
- en: '[PRE161]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Abstract base class of all numeric scalar types with a (potentially) inexact
    representation of the values in its range, such as floating-point numbers.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数值标量类型的抽象基类，其值的表示（可能）不精确，如浮点数。
- en: Note
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Inexact scalars are printed using the fewest decimal digits needed to distinguish
    their value from other values of the same datatype, by judicious rounding. See
    the `unique` parameter of [`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific").
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最少的十进制数字打印不精确标量，以区分其值与同一数据类型的其他值，通过谨慎的四舍五入。参见[`format_float_positional`](generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional")和[`format_float_scientific`](generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific")的`unique`参数。
- en: 'This means that variables with equal binary values but whose datatypes are
    of different precisions may display differently:'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着具有相同二进制值但数据类型不同精度的变量可能显示不同：
- en: '[PRE162]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Note that none of these floats hold the exact value \(\frac{1}{10}\); `f16`
    prints as `0.1` because it is as close to that value as possible, whereas the
    other types do not as they have more precision and therefore have closer values.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些浮点数中没有一个保存精确值\(\frac{1}{10}\)；`f16`打印为`0.1`，因为它尽可能接近该值，而其他类型不会，因为它们具有更高的精度，因此具有更接近的值。
- en: 'Conversely, floating-point scalars of different precisions which approximate
    the same decimal value may compare unequal despite printing identically:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，近似相同十进制值的不同精度的浮点标量可能比较不相等，尽管打印相同：
- en: '[PRE163]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Floating-point types
  id: totrans-787
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮点类型
- en: '[PRE164]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Abstract base class of all floating-point scalar types.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浮点标量类型的抽象基类。
- en: '[PRE165]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Half-precision floating-point number type.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 半精度浮点数类型。
- en: 'Character code:'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''e''`'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '`''e''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float16`](#numpy.float16 "numpy.float16"): 16-bit-precision floating-point
    number type: sign bit, 5 bits exponent, 10 bits mantissa.'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float16`](#numpy.float16 "numpy.float16")：16位精度浮点数类型：符号位，5位指数，10位尾数。'
- en: '[PRE166]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Single-precision floating-point number type, compatible with C `float`.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数类型，与C `float`兼容。
- en: 'Character code:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''f''`'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '`''f''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32-bit-precision floating-point
    number type: sign bit, 8 bits exponent, 23 bits mantissa.'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float32`](#numpy.float32 "numpy.float32")：32位精度浮点数类型：符号位，8位指数，23位尾数。'
- en: '[PRE167]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Double-precision floating-point number type, compatible with Python *float*
    and C `double`.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度浮点数类型，与Python *float*和C `double`兼容。
- en: 'Character code:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''d''`'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '`''d''`'
- en: 'Alias:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float64`](#numpy.float64 "numpy.float64"): 64-bit precision floating-point
    number type: sign bit, 11 bits exponent, 52 bits mantissa.'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float64`](#numpy.float64 "numpy.float64")：64位精度浮点数类型：符号位，11位指数，52位尾数。'
- en: '[PRE168]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Extended-precision floating-point number type, compatible with C `long double`
    but not necessarily with IEEE 754 quadruple-precision.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展精度浮点数类型，与C `long double`兼容，但不一定与IEEE 754四倍精度兼容。
- en: 'Character code:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''g''`'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`''g''`'
- en: 'Alias:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float128`](#numpy.float128 "numpy.float128"): 128-bit extended-precision
    floating-point number type.'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float128`](#numpy.float128 "numpy.float128")：128位扩展精度浮点数类型。'
- en: Complex floating-point types
  id: totrans-818
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复数浮点类型
- en: '[PRE169]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Abstract base class of all complex number scalar types that are made up of floating-point
    numbers.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 由浮点数组成的所有复数标量类型的抽象基类。
- en: '[PRE170]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Complex number type composed of two single-precision floating-point numbers.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个单精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''F''`'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '`''F''`'
- en: 'Alias:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64"): Complex number type
    composed of 2 32-bit-precision floating-point numbers.'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64")：由两个32位精度浮点数组成的复数类型。'
- en: '[PRE171]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Complex number type composed of two double-precision floating-point numbers,
    compatible with Python *complex*.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个双精度浮点数组成的复数类型，与Python *complex*兼容。
- en: 'Character code:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''D''`'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '`''D''`'
- en: 'Alias:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
- en: 'Alias:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128"): Complex number
    type composed of 2 64-bit-precision floating-point numbers.'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128")：由两个64位精度浮点数组成的复数类型。'
- en: '[PRE172]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Complex number type composed of two extended-precision floating-point numbers.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个扩展精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''G''`'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '`''G''`'
- en: 'Alias:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
- en: 'Alias:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256"): Complex number
    type composed of 2 128-bit extended-precision floating-point numbers.'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256")：由两个128位扩展精度浮点数组成的复数类型。'
- en: Floating-point types
  id: totrans-849
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮点数类型
- en: '[PRE173]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Abstract base class of all floating-point scalar types.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浮点数标量类型的抽象基类。
- en: '[PRE174]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Half-precision floating-point number type.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 半精度浮点数类型。
- en: 'Character code:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''e''`'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '`''e''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float16`](#numpy.float16 "numpy.float16"): 16-bit-precision floating-point
    number type: sign bit, 5 bits exponent, 10 bits mantissa.'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float16`](#numpy.float16 "numpy.float16")：16位精度浮点数类型：符号位，5位指数，10位尾数。'
- en: '[PRE175]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Single-precision floating-point number type, compatible with C `float`.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 单精度浮点数类型，与C中的`float`兼容。
- en: 'Character code:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''f''`'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '`''f''`'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32-bit-precision floating-point
    number type: sign bit, 8 bits exponent, 23 bits mantissa.'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float32`](#numpy.float32 "numpy.float32"): 32位精度浮点数类型：符号位，8位指数，23位尾数。'
- en: '[PRE176]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Double-precision floating-point number type, compatible with Python *float*
    and C `double`.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 双精度浮点数类型，与Python *float*和C中的`double`兼容。
- en: 'Character code:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''d''`'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '`''d''`'
- en: 'Alias:'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float_`](#numpy.float_ "numpy.float_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float64`](#numpy.float64 "numpy.float64"): 64-bit precision floating-point
    number type: sign bit, 11 bits exponent, 52 bits mantissa.'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float64`](#numpy.float64 "numpy.float64")：64位精度浮点数类型：符号位，11位指数，52位尾数。'
- en: '[PRE177]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Extended-precision floating-point number type, compatible with C `long double`
    but not necessarily with IEEE 754 quadruple-precision.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展精度浮点数类型，与C中的`long double`兼容，但不一定与IEEE 754四倍精度兼容。
- en: 'Character code:'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''g''`'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '`''g''`'
- en: 'Alias:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longfloat`](#numpy.longfloat "numpy.longfloat")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.float128`](#numpy.float128 "numpy.float128"): 128-bit extended-precision
    floating-point number type.'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.float128`](#numpy.float128 "numpy.float128")：128位扩展精度浮点数类型。'
- en: Complex floating-point types
  id: totrans-880
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复数浮点数类型
- en: '[PRE178]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Abstract base class of all complex number scalar types that are made up of floating-point
    numbers.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 所有由浮点数组成的复数标量类型的抽象基类。
- en: '[PRE179]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Complex number type composed of two single-precision floating-point numbers.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个单精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''F''`'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '`''F''`'
- en: 'Alias:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.singlecomplex`](#numpy.singlecomplex "numpy.singlecomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 在此平台上的别名（Linux x86_64）：
- en: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64"): Complex number type
    composed of 2 32-bit-precision floating-point numbers.'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex64`](#numpy.complex64 "numpy.complex64")：由两个32位精度浮点数组成的复数类型。'
- en: '[PRE180]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Complex number type composed of two double-precision floating-point numbers,
    compatible with Python *complex*.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个双精度浮点数组成的复数类型，与Python的*complex*兼容。
- en: 'Character code:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''D''`'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '`''D''`'
- en: 'Alias:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.cfloat`](#numpy.cfloat "numpy.cfloat")'
- en: 'Alias:'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex_`](#numpy.complex_ "numpy.complex_")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128"): Complex number
    type composed of 2 64-bit-precision floating-point numbers.'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex128`](#numpy.complex128 "numpy.complex128")：由2个64位精度浮点数组成的复数类型。'
- en: '[PRE181]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Complex number type composed of two extended-precision floating-point numbers.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 由两个扩展精度浮点数组成的复数类型。
- en: 'Character code:'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''G''`'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '`''G''`'
- en: 'Alias:'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.clongfloat`](#numpy.clongfloat "numpy.clongfloat")'
- en: 'Alias:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longcomplex`](#numpy.longcomplex "numpy.longcomplex")'
- en: 'Alias on this platform (Linux x86_64):'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个平台上的别名（Linux x86_64）：
- en: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256"): Complex number
    type composed of 2 128-bit extended-precision floating-point numbers.'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.complex256`](#numpy.complex256 "numpy.complex256")：由2个128位扩展精度浮点数组成的复数类型。'
- en: Other types
  id: totrans-911
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他类型
- en: '[PRE182]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Boolean type (True or False), stored as a byte.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 存储为字节的布尔类型（True或False）。
- en: Warning
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`bool_`](#numpy.bool_ "numpy.bool_") type is not a subclass of the [`int_`](#numpy.int_
    "numpy.int_") type (the [`bool_`](#numpy.bool_ "numpy.bool_") is not even a number
    type). This is different than Python’s default implementation of [`bool`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)") as a sub-class of [`int`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)").
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bool_`](#numpy.bool_ "numpy.bool_")类型不是[`int_`](#numpy.int_ "numpy.int_")类型的子类（[`bool_`](#numpy.bool_
    "numpy.bool_")甚至不是一个数字类型）。这与Python默认实现的[`bool`](https://docs.python.org/3/library/functions.html#bool
    "(在Python v3.11)")作为[`int`](https://docs.python.org/3/library/functions.html#int
    "(在Python v3.11)")的子类不同。'
- en: 'Character code:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''?''`'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '`''?''`'
- en: '[PRE183]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: If created from a 64-bit integer, it represents an offset from `1970-01-01T00:00:00`.
    If created from string, the string can be in ISO 8601 date or datetime format.
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从64位整数创建，它表示从`1970-01-01T00:00:00`的偏移量。如果从字符串创建，字符串可以是ISO 8601日期或日期时间格式。
- en: '[PRE184]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间增量](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''M''`'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '`''M''`'
- en: '[PRE185]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: A timedelta stored as a 64-bit integer.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 以64位整数存储的时间增量。
- en: See [Datetimes and Timedeltas](arrays.datetime.html#arrays-datetime) for more
    information.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见[日期时间和时间增量](arrays.datetime.html#arrays-datetime)。
- en: 'Character code:'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''m''`'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '`''m''`'
- en: '[PRE186]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Any Python object.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Python对象。
- en: 'Character code:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''O''`'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '`''O''`'
- en: Note
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The data actually stored in object arrays (*i.e.*, arrays having dtype [`object_`](#numpy.object_
    "numpy.object_")) are references to Python objects, not the objects themselves.
    Hence, object arrays behave more like usual Python [`lists`](https://docs.python.org/3/library/stdtypes.html#list
    "(in Python v3.11)"), in the sense that their contents need not be of the same
    Python type.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 实际存储在对象数组中的数据（即，具有dtype [`object_`](#numpy.object_ "numpy.object_")的数组）是对Python对象的引用，而不是对象本身。因此，对象数组的行为更像通常的Python
    [`lists`](https://docs.python.org/3/library/stdtypes.html#list "(在Python v3.11)")，即它们的内容不一定是相同的Python类型。
- en: The object type is also special because an array containing [`object_`](#numpy.object_
    "numpy.object_") items does not return an [`object_`](#numpy.object_ "numpy.object_")
    object on item access, but instead returns the actual object that the array item
    refers to.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型也很特殊，因为包含[`object_`](#numpy.object_ "numpy.object_")项的数组在访问项时不会返回一个[`object_`](#numpy.object_
    "numpy.object_")对象，而是返回数组项引用的实际对象。
- en: 'The following data types are **flexible**: they have no predefined size and
    the data they describe can be of different length in different arrays. (In the
    character codes `#` is an integer denoting how many elements the data type consists
    of.)'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 以下数据类型是**灵活的**：它们没有预定义的大小，它们描述的数据可以在不同数组中具有不同的长度。（在字符编码中，`#`是一个整数，表示数据类型包含多少个元素。）
- en: '[PRE187]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Abstract base class of all scalar types without predefined length. The actual
    size of these types depends on the specific *np.dtype* instantiation.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 所有没有预定义长度的标量类型的抽象基类。这些类型的实际大小取决于特定的*np.dtype*实例化。
- en: '[PRE188]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Abstract base class of all character string scalar types.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 所有字符字符串标量类型的抽象基类。
- en: '[PRE189]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: A byte string.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字节字符串。
- en: When used in arrays, this type strips trailing null bytes.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中使用时，此类型会剥离尾随的空字节。
- en: 'Character code:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''S''`'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '`''S''`'
- en: 'Alias:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.string_`](#numpy.string_ "numpy.string_")'
- en: '[PRE190]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: A unicode string.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Unicode 字符串。
- en: This type strips trailing null codepoints.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型会剥离尾随的空代码点。
- en: '[PRE191]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Unlike the builtin *str*, this supports the [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(in Python v3.11)"), exposing its contents as UCS4:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 与内置*str*不同，它支持[缓冲区协议](https://docs.python.org/3/c-api/buffer.html#bufferobjects
    "(在 Python v3.11)")，将其内容公开为 UCS4：
- en: '[PRE192]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Character code:'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''U''`'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: '`''U''`'
- en: 'Alias:'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 别名：
- en: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.unicode_`](#numpy.unicode_ "numpy.unicode_")'
- en: '[PRE193]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Create a new structured or unstructured void scalar.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的结构化或非结构化的空标量。
- en: 'Parameters:'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**length_or_data**int, array-like, bytes-like, object'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '**length_or_data**int，类似数组，类似字节，对象'
- en: One of multiple meanings (see notes). The length or bytes data of an unstructured
    void. Or alternatively, the data to be stored in the new scalar when [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype") is provided. This can be an array-like, in which case an array
    may be returned.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多重含义之一（请参阅注释）。非结构化空的长度或字节数据。或者，当提供[`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype")时，要存储在新标量中的数据。这可以是类似数组的，如果是这种情况，则可能返回一个数组。
- en: '**dtype**dtype, optional'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**dtype，可选'
- en: If provided the dtype of the new scalar. This dtype must be “void” dtype (i.e.
    a structured or unstructured void, see also [Structured Datatypes](../user/basics.rec.html#defining-structured-types)).
  id: totrans-964
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果提供了新标量的 dtype。此 dtype 必须是“void”dtype（即结构化或非结构化的 void，请参阅[结构化数据类型](../user/basics.rec.html#defining-structured-types)）。
- en: '..versionadded:: 1.24'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '..versionadded:: 1.24'
- en: Notes
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For historical reasons and because void scalars can represent both arbitrary
    byte data and structured dtypes, the void constructor has three calling conventions:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 出于历史原因，以及因为空标量可以表示任意字节数据和结构化数据类型，空构造函数有三种调用约定：
- en: '`np.void(5)` creates a `dtype="V5"` scalar filled with five `\0` bytes. The
    5 can be a Python or NumPy integer.'
  id: totrans-968
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(5)` 创建一个填充有五个`\0`字节的`dtype="V5"`标量。5 可以是 Python 或 NumPy 整数。'
- en: '`np.void(b"bytes-like")` creates a void scalar from the byte string. The dtype
    itemsize will match the byte string length, here `"V10"`.'
  id: totrans-969
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`np.void(b"bytes-like")` 从字节字符串创建一个空标量。dtype itemsize 将匹配字节字符串长度，在这里是`"V10"`。'
- en: When a `dtype=` is passed the call is roughly the same as an array creation.
    However, a void scalar rather than array is returned.
  id: totrans-970
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当传递`dtype=`时，调用与数组创建大致相同。但是，返回的是一个空标量而不是数组。
- en: Please see the examples which show all three different conventions.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅显示所有三种不同约定的示例。
- en: Examples
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE194]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'Character code:'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 字符代码：
- en: '`''V''`'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: '`''V''`'
- en: Warning
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See [Note on string types](arrays.dtypes.html#string-dtype-note).
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[关于字符串类型的说明](arrays.dtypes.html#string-dtype-note)。
- en: 'Numeric Compatibility: If you used old typecode characters in your Numeric
    code (which was never recommended), you will need to change some of them to the
    new characters. In particular, the needed changes are `c -> S1`, `b -> B`, `1
    -> b`, `s -> h`, `w -> H`, and `u -> I`. These changes make the type character
    convention more consistent with other Python modules such as the [`struct`](https://docs.python.org/3/library/struct.html#module-struct
    "(in Python v3.11)") module.'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 数值兼容性：如果您在 Numeric 代码中使用了旧的类型代码字符（这从未被推荐过），则需要将其中一些更改为新字符。特别是，需要更改的是 `c -> S1`，`b
    -> B`，`1 -> b`，`s -> h`，`w -> H` 和 `u -> I`。这些更改使类型字符约定更加一致，与其他 Python 模块（如[`struct`](https://docs.python.org/3/library/struct.html#module-struct
    "(在 Python v3.11)")模块）一致。
- en: '### Sized aliases'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '### 大小别名'
- en: Along with their (mostly) C-derived names, the integer, float, and complex data-types
    are also available using a bit-width convention so that an array of the right
    size can always be ensured. Two aliases ([`numpy.intp`](#numpy.intp "numpy.intp")
    and [`numpy.uintp`](#numpy.uintp "numpy.uintp")) pointing to the integer type
    that is sufficiently large to hold a C pointer are also provided.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们（主要）是 C 派生的名称之外，整数、浮点数和复数数据类型也可以使用位宽约定，以便始终可以确保正确大小的数组。还提供了两个别名（[`numpy.intp`](#numpy.intp
    "numpy.intp") 和 [`numpy.uintp`](#numpy.uintp "numpy.uintp")），指向足够大以容纳 C 指针的整数类型。
- en: '[PRE195]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Aliases for the signed integer types (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and [`numpy.longlong`](#numpy.longlong
    "numpy.longlong")) with the specified number of bits.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 有指定位数的带符号整数类型的别名（其中之一是[`numpy.byte`](#numpy.byte "numpy.byte")，[`numpy.short`](#numpy.short
    "numpy.short")，[`numpy.intc`](#numpy.intc "numpy.intc")，[`numpy.int_`](#numpy.int_
    "numpy.int_")和[`numpy.longlong`](#numpy.longlong "numpy.longlong")）。
- en: Compatible with the C99 `int8_t`, `int16_t`, `int32_t`, and `int64_t`, respectively.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 与C99的`int8_t`，`int16_t`，`int32_t`和`int64_t`兼容。
- en: '[PRE199]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Alias for the unsigned integer types (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and [`numpy.ulonglong`](#numpy.ulonglong
    "numpy.ulonglong")) with the specified number of bits.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 有指定位数的无符号整数类型的别名（其中之一是[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")，[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")，[`numpy.uintc`](#numpy.uintc "numpy.uintc")，[`numpy.uint`](#numpy.uint
    "numpy.uint")和[`numpy.ulonglong`](#numpy.ulonglong "numpy.ulonglong")）。
- en: Compatible with the C99 `uint8_t`, `uint16_t`, `uint32_t`, and `uint64_t`, respectively.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 与C99的`uint8_t`，`uint16_t`，`uint32_t`和`uint64_t`兼容。
- en: '[PRE203]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Alias for the signed integer type (one of [`numpy.byte`](#numpy.byte "numpy.byte"),
    [`numpy.short`](#numpy.short "numpy.short"), [`numpy.intc`](#numpy.intc "numpy.intc"),
    [`numpy.int_`](#numpy.int_ "numpy.int_") and *np.longlong*) that is the same size
    as a pointer.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 与指针大小相同的带符号整数类型的别名（其中之一是[`numpy.byte`](#numpy.byte "numpy.byte")，[`numpy.short`](#numpy.short
    "numpy.short")，[`numpy.intc`](#numpy.intc "numpy.intc")，[`numpy.int_`](#numpy.int_
    "numpy.int_")和*np.longlong*)。
- en: Compatible with the C `intptr_t`.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 与C `intptr_t`兼容。
- en: 'Character code:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''p''`'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '`''p''`'
- en: '[PRE204]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Alias for the unsigned integer type (one of [`numpy.ubyte`](#numpy.ubyte "numpy.ubyte"),
    [`numpy.ushort`](#numpy.ushort "numpy.ushort"), [`numpy.uintc`](#numpy.uintc "numpy.uintc"),
    [`numpy.uint`](#numpy.uint "numpy.uint") and *np.ulonglong*) that is the same
    size as a pointer.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 与指针大小相同的无符号整数类型的别名（其中之一是[`numpy.ubyte`](#numpy.ubyte "numpy.ubyte")，[`numpy.ushort`](#numpy.ushort
    "numpy.ushort")，[`numpy.uintc`](#numpy.uintc "numpy.uintc")，[`numpy.uint`](#numpy.uint
    "numpy.uint")和*np.ulonglong*)。
- en: Compatible with the C `uintptr_t`.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 与C `uintptr_t`兼容。
- en: 'Character code:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 字符编码：
- en: '`''P''`'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '`''P''`'
- en: '[PRE205]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: alias of [`half`](#numpy.half "numpy.half")
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: '[`half`](#numpy.half "numpy.half")的别名'
- en: '[PRE206]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: alias of [`single`](#numpy.single "numpy.single")
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: '[`single`](#numpy.single "numpy.single")的别名'
- en: '[PRE207]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: '[`double`](#numpy.double "numpy.double")的别名'
- en: '[PRE208]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Alias for [`numpy.longdouble`](#numpy.longdouble "numpy.longdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.longdouble`](#numpy.longdouble "numpy.longdouble")的别名，根据其位数命名。这些别名的存在取决于平台。'
- en: '[PRE210]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '[`csingle`](#numpy.csingle "numpy.csingle")的别名'
- en: '[PRE211]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: '[PRE212]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Alias for [`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble"), named
    after its size in bits. The existence of these aliases depends on the platform.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.clongdouble`](#numpy.clongdouble "numpy.clongdouble")的别名，根据其位数命名。这些别名的存在取决于平台。'
- en: Other aliases
  id: totrans-1019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他别名
- en: 'The first two of these are conveniences which resemble the names of the builtin
    types, in the same style as [`bool_`](#numpy.bool_ "numpy.bool_"), [`int_`](#numpy.int_
    "numpy.int_"), [`str_`](#numpy.str_ "numpy.str_"), [`bytes_`](#numpy.bytes_ "numpy.bytes_"),
    and [`object_`](#numpy.object_ "numpy.object_"):'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个别名类似于内置类型的名称，与[`bool_`](#numpy.bool_ "numpy.bool_")，[`int_`](#numpy.int_
    "numpy.int_")，[`str_`](#numpy.str_ "numpy.str_")，[`bytes_`](#numpy.bytes_ "numpy.bytes_")和[`object_`](#numpy.object_
    "numpy.object_")的风格相似：
- en: '[PRE214]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: alias of [`double`](#numpy.double "numpy.double")
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '[`double`](#numpy.double "numpy.double")的别名'
- en: '[PRE215]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: 'Some more use alternate naming conventions for extended-precision floats and
    complex numbers:'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用扩展精度浮点数和复数的替代命名约定：
- en: '[PRE216]'
  id: totrans-1026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: alias of [`longdouble`](#numpy.longdouble "numpy.longdouble")
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '[`longdouble`](#numpy.longdouble "numpy.longdouble")的别名'
- en: '[PRE217]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: alias of [`csingle`](#numpy.csingle "numpy.csingle")
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: '[`csingle`](#numpy.csingle "numpy.csingle")的别名'
- en: '[PRE218]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: alias of [`cdouble`](#numpy.cdouble "numpy.cdouble")
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '[`cdouble`](#numpy.cdouble "numpy.cdouble")的别名'
- en: '[PRE219]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")的别名'
- en: '[PRE220]'
  id: totrans-1034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: alias of [`clongdouble`](#numpy.clongdouble "numpy.clongdouble")
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '[`clongdouble`](#numpy.clongdouble "numpy.clongdouble")的别名'
- en: The following aliases originate from Python 2, and it is recommended that they
    not be used in new code.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 以下别名源自Python 2，建议不要在新代码中使用。
- en: '[PRE221]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: alias of [`bytes_`](#numpy.bytes_ "numpy.bytes_")
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bytes_`](#numpy.bytes_ "numpy.bytes_")的别名'
- en: '[PRE222]'
  id: totrans-1039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: alias of [`str_`](#numpy.str_ "numpy.str_")
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '[`str_`](#numpy.str_ "numpy.str_")的别名'
- en: Attributes
  id: totrans-1041
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: 'The array scalar objects have an [`array priority`](arrays.classes.html#numpy.class.__array_priority__
    "numpy.class.__array_priority__") of [`NPY_SCALAR_PRIORITY`](c-api/array.html#c.NPY_SCALAR_PRIORITY
    "NPY_SCALAR_PRIORITY") (-1,000,000.0). They also do not (yet) have a [`ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") attribute. Otherwise, they share the same attributes as
    arrays:'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量对象具有[`array priority`](arrays.classes.html#numpy.class.__array_priority__
    "numpy.class.__array_priority__")为[`NPY_SCALAR_PRIORITY`](c-api/array.html#c.NPY_SCALAR_PRIORITY
    "NPY_SCALAR_PRIORITY") (-1,000,000.0)。它们还没有（但）具有[`ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes")属性。否则，它们与数组共享相同的属性：
- en: '| [`generic.flags`](generated/numpy.generic.flags.html#numpy.generic.flags
    "numpy.generic.flags") | The integer value of flags. |'
  id: totrans-1043
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.flags`](generated/numpy.generic.flags.html#numpy.generic.flags
    "numpy.generic.flags") | 标志的整数值。 |'
- en: '| [`generic.shape`](generated/numpy.generic.shape.html#numpy.generic.shape
    "numpy.generic.shape") | Tuple of array dimensions. |'
  id: totrans-1044
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.shape`](generated/numpy.generic.shape.html#numpy.generic.shape
    "numpy.generic.shape") | 数组维度的元组。 |'
- en: '| [`generic.strides`](generated/numpy.generic.strides.html#numpy.generic.strides
    "numpy.generic.strides") | Tuple of bytes steps in each dimension. |'
  id: totrans-1045
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.strides`](generated/numpy.generic.strides.html#numpy.generic.strides
    "numpy.generic.strides") | 每个维度中的字节步长元组。 |'
- en: '| [`generic.ndim`](generated/numpy.generic.ndim.html#numpy.generic.ndim "numpy.generic.ndim")
    | The number of array dimensions. |'
  id: totrans-1046
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.ndim`](generated/numpy.generic.ndim.html#numpy.generic.ndim "numpy.generic.ndim")
    | 数组维度的数量。 |'
- en: '| [`generic.data`](generated/numpy.generic.data.html#numpy.generic.data "numpy.generic.data")
    | Pointer to start of data. |'
  id: totrans-1047
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.data`](generated/numpy.generic.data.html#numpy.generic.data "numpy.generic.data")
    | 数据起始指针。 |'
- en: '| [`generic.size`](generated/numpy.generic.size.html#numpy.generic.size "numpy.generic.size")
    | The number of elements in the gentype. |'
  id: totrans-1048
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.size`](generated/numpy.generic.size.html#numpy.generic.size "numpy.generic.size")
    | gentype中元素的数量。 |'
- en: '| [`generic.itemsize`](generated/numpy.generic.itemsize.html#numpy.generic.itemsize
    "numpy.generic.itemsize") | The length of one element in bytes. |'
  id: totrans-1049
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.itemsize`](generated/numpy.generic.itemsize.html#numpy.generic.itemsize
    "numpy.generic.itemsize") | 一个元素的长度（以字节为单位）。 |'
- en: '| [`generic.base`](generated/numpy.generic.base.html#numpy.generic.base "numpy.generic.base")
    | Scalar attribute identical to the corresponding array attribute. |'
  id: totrans-1050
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.base`](generated/numpy.generic.base.html#numpy.generic.base "numpy.generic.base")
    | 与相应数组属性相同的标量属性。 |'
- en: '| [`generic.dtype`](generated/numpy.generic.dtype.html#numpy.generic.dtype
    "numpy.generic.dtype") | Get array data-descriptor. |'
  id: totrans-1051
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.dtype`](generated/numpy.generic.dtype.html#numpy.generic.dtype
    "numpy.generic.dtype") | 获取数组数据描述符。 |'
- en: '| [`generic.real`](generated/numpy.generic.real.html#numpy.generic.real "numpy.generic.real")
    | The real part of the scalar. |'
  id: totrans-1052
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.real`](generated/numpy.generic.real.html#numpy.generic.real "numpy.generic.real")
    | 标量的实部。 |'
- en: '| [`generic.imag`](generated/numpy.generic.imag.html#numpy.generic.imag "numpy.generic.imag")
    | The imaginary part of the scalar. |'
  id: totrans-1053
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.imag`](generated/numpy.generic.imag.html#numpy.generic.imag "numpy.generic.imag")
    | 标量的虚部。 |'
- en: '| [`generic.flat`](generated/numpy.generic.flat.html#numpy.generic.flat "numpy.generic.flat")
    | A 1-D view of the scalar. |'
  id: totrans-1054
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.flat`](generated/numpy.generic.flat.html#numpy.generic.flat "numpy.generic.flat")
    | 标量的一维视图。 |'
- en: '| [`generic.T`](generated/numpy.generic.T.html#numpy.generic.T "numpy.generic.T")
    | Scalar attribute identical to the corresponding array attribute. |'
  id: totrans-1055
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.T`](generated/numpy.generic.T.html#numpy.generic.T "numpy.generic.T")
    | 与相应数组属性相同的标量属性。 |'
- en: '| [`generic.__array_interface__`](generated/numpy.generic.__array_interface__.html#numpy.generic.__array_interface__
    "numpy.generic.__array_interface__") | Array protocol: Python side |'
  id: totrans-1056
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_interface__`](generated/numpy.generic.__array_interface__.html#numpy.generic.__array_interface__
    "numpy.generic.__array_interface__") | 数组协议：Python端 |'
- en: '| [`generic.__array_struct__`](generated/numpy.generic.__array_struct__.html#numpy.generic.__array_struct__
    "numpy.generic.__array_struct__") | Array protocol: struct |'
  id: totrans-1057
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_struct__`](generated/numpy.generic.__array_struct__.html#numpy.generic.__array_struct__
    "numpy.generic.__array_struct__") | 数组协议：结构 |'
- en: '| [`generic.__array_priority__`](generated/numpy.generic.__array_priority__.html#numpy.generic.__array_priority__
    "numpy.generic.__array_priority__") | Array priority. |'
  id: totrans-1058
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_priority__`](generated/numpy.generic.__array_priority__.html#numpy.generic.__array_priority__
    "numpy.generic.__array_priority__") | 数组优先级。 |'
- en: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) return scalar from array
    |'
  id: totrans-1059
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) 从数组返回标量 |'
- en: Indexing
  id: totrans-1060
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引
- en: See also
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexing routines](arrays.indexing.html#arrays-indexing), [Data type objects
    (dtype)](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引例程](arrays.indexing.html#arrays-indexing)，[数据类型对象（dtype）](arrays.dtypes.html#arrays-dtypes)'
- en: 'Array scalars can be indexed like 0-dimensional arrays: if *x* is an array
    scalar,'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量可以像0维数组一样进行索引：如果*x*是一个数组标量，
- en: '`x[()]` returns a copy of array scalar'
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[()]` 返回数组标量的副本'
- en: '`x[...]` returns a 0-dimensional [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[...]` 返回一个0维[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")'
- en: '`x[''field-name'']` returns the array scalar in the field *field-name*. (*x*
    can have fields, for example, when it corresponds to a structured data type.)'
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x[''field-name'']` 返回字段*field-name*中的数组标量。(*x* 可能具有字段，例如，当它对应于结构化数据类型时。)'
- en: Methods
  id: totrans-1067
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: Array scalars have exactly the same methods as arrays. The default behavior
    of these methods is to internally convert the scalar to an equivalent 0-dimensional
    array and to call the corresponding array method. In addition, math operations
    on array scalars are defined so that the same hardware flags are set and used
    to interpret the results as for [ufunc](ufuncs.html#ufuncs), so that the error
    state used for ufuncs also carries over to the math on array scalars.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 数组标量具有与数组完全相同的方法。这些方法的默认行为是内部将标量转换为等效的0维数组，并调用相应的数组方法。此外，对数组标量的数学运算被定义为设置和用于解释结果的硬件标志与[ufunc](ufuncs.html#ufuncs)相同，因此ufunc上使用的错误状态也会传递到数组标量上的数学运算中。
- en: 'The exceptions to the above rules are given below:'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述规则的例外情况：
- en: '| [`generic.__array__`](generated/numpy.generic.__array__.html#numpy.generic.__array__
    "numpy.generic.__array__") | sc.__array__(dtype) return 0-dim array from scalar
    with specified dtype |'
  id: totrans-1070
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array__`](generated/numpy.generic.__array__.html#numpy.generic.__array__
    "numpy.generic.__array__") | sc.__array__(dtype) 从指定dtype的标量返回0维数组 |'
- en: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) return scalar from array
    |'
  id: totrans-1071
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__array_wrap__`](generated/numpy.generic.__array_wrap__.html#numpy.generic.__array_wrap__
    "numpy.generic.__array_wrap__") | sc.__array_wrap__(obj) 从数组返回标量 |'
- en: '| [`generic.squeeze`](generated/numpy.generic.squeeze.html#numpy.generic.squeeze
    "numpy.generic.squeeze") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-1072
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.squeeze`](generated/numpy.generic.squeeze.html#numpy.generic.squeeze
    "numpy.generic.squeeze") | 与相应数组属性相同的标量方法。 |'
- en: '| [`generic.byteswap`](generated/numpy.generic.byteswap.html#numpy.generic.byteswap
    "numpy.generic.byteswap") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-1073
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.byteswap`](generated/numpy.generic.byteswap.html#numpy.generic.byteswap
    "numpy.generic.byteswap") | 与相应数组属性相同的标量方法。 |'
- en: '| [`generic.__reduce__`](generated/numpy.generic.__reduce__.html#numpy.generic.__reduce__
    "numpy.generic.__reduce__") | Helper for pickle. |'
  id: totrans-1074
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__reduce__`](generated/numpy.generic.__reduce__.html#numpy.generic.__reduce__
    "numpy.generic.__reduce__") | pickle的辅助函数。 |'
- en: '| [`generic.__setstate__`](generated/numpy.generic.__setstate__.html#numpy.generic.__setstate__
    "numpy.generic.__setstate__") |  |'
  id: totrans-1075
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.__setstate__`](generated/numpy.generic.__setstate__.html#numpy.generic.__setstate__
    "numpy.generic.__setstate__") |  |'
- en: '| [`generic.setflags`](generated/numpy.generic.setflags.html#numpy.generic.setflags
    "numpy.generic.setflags") | Scalar method identical to the corresponding array
    attribute. |'
  id: totrans-1076
  prefs: []
  type: TYPE_TB
  zh: '| [`generic.setflags`](generated/numpy.generic.setflags.html#numpy.generic.setflags
    "numpy.generic.setflags") | 与相应数组属性相同的标量方法。 |'
- en: 'Utility method for typing:'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 用于类型的实用方法：
- en: '| [`number.__class_getitem__`](generated/numpy.number.__class_getitem__.html#numpy.number.__class_getitem__
    "numpy.number.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`number`](#numpy.number "numpy.number") type. |'
  id: totrans-1078
  prefs: []
  type: TYPE_TB
  zh: '| [`number.__class_getitem__`](generated/numpy.number.__class_getitem__.html#numpy.number.__class_getitem__
    "numpy.number.__class_getitem__")(item, /) | 返回围绕[`number`](#numpy.number "numpy.number")类型的参数化包装器。
    |'
- en: Defining new types
  id: totrans-1079
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义新类型
- en: 'There are two ways to effectively define a new array scalar type (apart from
    composing structured types [dtypes](arrays.dtypes.html#arrays-dtypes) from the
    built-in scalar types): One way is to simply subclass the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") and overwrite the methods of interest. This will work to a degree,
    but internally certain behaviors are fixed by the data type of the array. To fully
    customize the data type of an array you need to define a new data-type, and register
    it with NumPy. Such new types can only be defined in C, using the [NumPy C-API](c-api/index.html#c-api).'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种有效的方法来定义一个新的数组标量类型（除了从内置标量类型组合结构化类型[dtypes](arrays.dtypes.html#arrays-dtypes)）：一种方法是简单地子类化[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")并重写感兴趣的方法。这在一定程度上可以工作，但在内部，某些行为是由数组的数据类型固定的。要完全自定义数组的数据类型，您需要定义一个新的数据类型，并将其注册到NumPy中。这样的新类型只能在C中定义，使用[NumPy
    C-API](c-api/index.html#c-api)。
