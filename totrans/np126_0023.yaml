- en: The N-dimensional array (ndarray)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.ndarray.html](https://numpy.org/doc/1.26/reference/arrays.ndarray.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") is
    a (usually fixed-size) multidimensional container of items of the same type and
    size. The number of dimensions and items in an array is defined by its [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape"), which is a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)") of *N* non-negative integers that specify the sizes of each
    dimension. The type of items in the array is specified by a separate [data-type
    object (dtype)](arrays.dtypes.html#arrays-dtypes), one of which is associated
    with each ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: As with other container objects in Python, the contents of an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") can be accessed and modified by [indexing or slicing](arrays.indexing.html#arrays-indexing)
    the array (using, for example, *N* integers), and via the methods and attributes
    of the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
  prefs: []
  type: TYPE_NORMAL
- en: Different [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    can share the same data, so that changes made in one [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") may be visible in another. That is, an ndarray can be a *“view”*
    to another ndarray, and the data it is referring to is taken care of by the *“base”*
    ndarray. ndarrays can also be views to memory owned by Python [`strings`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or objects implementing the `buffer` or [array](arrays.interface.html#arrays-interface)
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: 'A 2-dimensional array of size 2 x 3, composed of 4-byte integer elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The array can be indexed using Python container-like syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example [slicing](arrays.indexing.html#arrays-indexing) can produce views
    of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Constructing arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New arrays can be constructed using the routines detailed in [Array creation
    routines](routines.array-creation.html#routines-array-creation), and also by using
    the low-level [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(shape[, dtype, buffer, offset, ...])
    | An array object represents a multidimensional, homogeneous array of fixed-size
    items. |'
  prefs: []
  type: TYPE_TB
- en: '## Indexing arrays'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can be indexed using an extended Python slicing syntax, `array[selection]`.
    Similar syntax is also used for accessing fields in a [structured data type](../glossary.html#term-structured-data-type).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array Indexing](arrays.indexing.html#arrays-indexing).  ## Internal memory
    layout of an ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of class [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") consists of a contiguous one-dimensional segment of computer
    memory (owned by the array, or by some other object), combined with an indexing
    scheme that maps *N* integers into the location of an item in the block. The ranges
    in which the indices can vary is specified by the [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") of the array. How many bytes each item takes and how the
    bytes are interpreted is defined by the [data-type object](arrays.dtypes.html#arrays-dtypes)
    associated with the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'A segment of memory is inherently 1-dimensional, and there are many different
    schemes for arranging the items of an *N*-dimensional array in a 1-dimensional
    block. NumPy is flexible, and [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects can accommodate any *strided indexing scheme*. In a strided
    scheme, the N-dimensional index \((n_0, n_1, ..., n_{N-1})\) corresponds to the
    offset (in bytes):'
  prefs: []
  type: TYPE_NORMAL
- en: \[n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k\]
  prefs: []
  type: TYPE_NORMAL
- en: 'from the beginning of the memory block associated with the array. Here, \(s_k\)
    are integers which specify the [`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") of the array. The [column-major](../glossary.html#term-column-major)
    order (used, for example, in the Fortran language and in *Matlab*) and [row-major](../glossary.html#term-row-major)
    order (used in C) schemes are just specific kinds of strided scheme, and correspond
    to memory that can be *addressed* by the strides:'
  prefs: []
  type: TYPE_NORMAL
- en: \[s_k^{\mathrm{column}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{row}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(d_j\) *= self.shape[j]*.
  prefs: []
  type: TYPE_NORMAL
- en: Both the C and Fortran orders are [contiguous](../glossary.html#term-contiguous),
    *i.e.,* single-segment, memory layouts, in which every part of the memory block
    can be accessed by some combination of the indices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Contiguous arrays* and *single-segment arrays* are synonymous and are used
    interchangeably throughout the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'While a C-style and Fortran-style contiguous array, which has the corresponding
    flags set, can be addressed with the above strides, the actual strides may be
    different. This can happen in two cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If `self.shape[k] == 1` then for any legal index `index[k] == 0`. This means
    that in the formula for the offset \(n_k = 0\) and thus \(s_k n_k = 0\) and the
    value of \(s_k\) *= self.strides[k]* is arbitrary.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If an array has no elements (`self.size == 0`) there is no legal index and the
    strides are never used. Any array with no elements may be considered C-style and
    Fortran-style contiguous.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Point 1\. means that `self` and `self.squeeze()` always have the same contiguity
    and `aligned` flags value. This also means that even a high dimensional array
    could be C-style and Fortran-style contiguous at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: An array is considered aligned if the memory offsets for all elements and the
    base offset itself is a multiple of *self.itemsize*. Understanding *memory-alignment*
    leads to better performance on most hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: It does *not* generally hold that `self.strides[-1] == self.itemsize` for C-style
    contiguous arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous
    arrays is true.
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_RELAXED_STRIDES_DEBUG=1` can be used to help find errors when incorrectly
    relying on the strides in C-extension code (see below warning).'
  prefs: []
  type: TYPE_NORMAL
- en: Data in new [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is in the [row-major](../glossary.html#term-row-major) (C) order, unless otherwise
    specified, but, for example, [basic array slicing](arrays.indexing.html#arrays-indexing)
    often produces [views](../glossary.html#term-view) in a different scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Several algorithms in NumPy work on arbitrarily strided arrays. However, some
    algorithms require single-segment arrays. When an irregularly strided array is
    passed in to such algorithms, a copy is automatically made.  ## Array attributes'
  prefs: []
  type: TYPE_NORMAL
- en: Array attributes reflect information that is intrinsic to the array itself.
    Generally, accessing an array through its attributes allows you to get and sometimes
    set intrinsic properties of the array without creating a new array. The exposed
    attributes are the core parts of an array and only some of them can be reset meaningfully
    without creating a new array. Information on each attribute is given below.
  prefs: []
  type: TYPE_NORMAL
- en: Memory layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following attributes contain information about the memory layout of the
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  prefs: []
  type: TYPE_TB
- en: Data type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  prefs: []
  type: TYPE_TB
- en: Other attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  prefs: []
  type: TYPE_TB
- en: '### Array interface'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |  ## Array methods'
  prefs: []
  type: TYPE_NORMAL
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") object
    has many methods which operate on or with the array in some fashion, typically
    returning an array result. These methods are briefly explained below. (Each method’s
    docstring has a more complete description.)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the following methods there are also corresponding functions in [`numpy`](index.html#module-numpy
    "numpy"): [`all`](generated/numpy.all.html#numpy.all "numpy.all"), [`any`](generated/numpy.any.html#numpy.any
    "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"), [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), [`argsort`](generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"), [`compress`](generated/numpy.compress.html#numpy.compress
    "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy"),
    [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"), [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum
    "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal"),
    [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"), [`max`](generated/numpy.amax.html#numpy.amax
    "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin
    "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero"),
    [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition"),
    [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"), [`ptp`](generated/numpy.ptp.html#numpy.ptp
    "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel"), [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").'
  prefs: []
  type: TYPE_NORMAL
- en: Array conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  prefs: []
  type: TYPE_TB
- en: Calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these methods take an argument named *axis*. In such cases,
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of the *axis* argument
  prefs: []
  type: TYPE_NORMAL
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  prefs: []
  type: TYPE_NORMAL
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic, matrix multiplication, and comparison operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic and comparison operations on [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") are defined as element-wise operations, and generally yield [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects as results.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the arithmetic operations (`+`, `-`, `*`, `/`, `//`, `%`, `divmod()`,
    `**` or `pow()`, `<<`, `>>`, `&`, `^`, `|`, `~`) and the comparisons (`==`, `<`,
    `>`, `<=`, `>=`, `!=`) is equivalent to the corresponding universal function (or
    [ufunc](../glossary.html#term-ufunc) for short) in NumPy. For more information,
    see the section on [Universal Functions](ufuncs.html#ufuncs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__lt__`](generated/numpy.ndarray.__lt__.html#numpy.ndarray.__lt__
    "numpy.ndarray.__lt__")(value, /) | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__le__`](generated/numpy.ndarray.__le__.html#numpy.ndarray.__le__
    "numpy.ndarray.__le__")(value, /) | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__gt__`](generated/numpy.ndarray.__gt__.html#numpy.ndarray.__gt__
    "numpy.ndarray.__gt__")(value, /) | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ge__`](generated/numpy.ndarray.__ge__.html#numpy.ndarray.__ge__
    "numpy.ndarray.__ge__")(value, /) | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__eq__`](generated/numpy.ndarray.__eq__.html#numpy.ndarray.__eq__
    "numpy.ndarray.__eq__")(value, /) | Return self==value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ne__`](generated/numpy.ndarray.__ne__.html#numpy.ndarray.__ne__
    "numpy.ndarray.__ne__")(value, /) | Return self!=value. |'
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")(/) | True if self else False |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Truth-value testing of an array invokes [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__"), which raises an error if the number of elements in
    the array is larger than 1, because the truth value of such arrays is ambiguous.
    Use [`.any()`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")
    and [`.all()`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")
    instead to be clear about what is meant in such cases. (If the number of elements
    is 0, the array evaluates to `False`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Unary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__neg__`](generated/numpy.ndarray.__neg__.html#numpy.ndarray.__neg__
    "numpy.ndarray.__neg__")(/) | -self |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pos__`](generated/numpy.ndarray.__pos__.html#numpy.ndarray.__pos__
    "numpy.ndarray.__pos__")(/) | +self |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__abs__`](generated/numpy.ndarray.__abs__.html#numpy.ndarray.__abs__
    "numpy.ndarray.__abs__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__invert__`](generated/numpy.ndarray.__invert__.html#numpy.ndarray.__invert__
    "numpy.ndarray.__invert__")(/) | ~self |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__add__`](generated/numpy.ndarray.__add__.html#numpy.ndarray.__add__
    "numpy.ndarray.__add__")(value, /) | Return self+value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__sub__`](generated/numpy.ndarray.__sub__.html#numpy.ndarray.__sub__
    "numpy.ndarray.__sub__")(value, /) | Return self-value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mul__`](generated/numpy.ndarray.__mul__.html#numpy.ndarray.__mul__
    "numpy.ndarray.__mul__")(value, /) | Return self*value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__truediv__`](generated/numpy.ndarray.__truediv__.html#numpy.ndarray.__truediv__
    "numpy.ndarray.__truediv__")(value, /) | Return self/value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__floordiv__`](generated/numpy.ndarray.__floordiv__.html#numpy.ndarray.__floordiv__
    "numpy.ndarray.__floordiv__")(value, /) | Return self//value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mod__`](generated/numpy.ndarray.__mod__.html#numpy.ndarray.__mod__
    "numpy.ndarray.__mod__")(value, /) | Return self%value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__divmod__`](generated/numpy.ndarray.__divmod__.html#numpy.ndarray.__divmod__
    "numpy.ndarray.__divmod__")(value, /) | Return divmod(self, value). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pow__`](generated/numpy.ndarray.__pow__.html#numpy.ndarray.__pow__
    "numpy.ndarray.__pow__")(value[, mod]) | Return pow(self, value, mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__lshift__`](generated/numpy.ndarray.__lshift__.html#numpy.ndarray.__lshift__
    "numpy.ndarray.__lshift__")(value, /) | Return self<<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__rshift__`](generated/numpy.ndarray.__rshift__.html#numpy.ndarray.__rshift__
    "numpy.ndarray.__rshift__")(value, /) | Return self>>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__and__`](generated/numpy.ndarray.__and__.html#numpy.ndarray.__and__
    "numpy.ndarray.__and__")(value, /) | Return self&value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__or__`](generated/numpy.ndarray.__or__.html#numpy.ndarray.__or__
    "numpy.ndarray.__or__")(value, /) | Return self&#124;value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__xor__`](generated/numpy.ndarray.__xor__.html#numpy.ndarray.__xor__
    "numpy.ndarray.__xor__")(value, /) | Return self^value. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Any third argument to [`pow`](https://docs.python.org/3/library/functions.html#pow
    "(in Python v3.11)") is silently ignored, as the underlying [`ufunc`](generated/numpy.power.html#numpy.power
    "numpy.power") takes only two arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is a built-in type (written in C), the `__r{op}__` special methods are not directly
    defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions called to implement many arithmetic special methods for arrays
    can be modified using [`__array_ufunc__`](arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arithmetic, in-place:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__iadd__`](generated/numpy.ndarray.__iadd__.html#numpy.ndarray.__iadd__
    "numpy.ndarray.__iadd__")(value, /) | Return self+=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__isub__`](generated/numpy.ndarray.__isub__.html#numpy.ndarray.__isub__
    "numpy.ndarray.__isub__")(value, /) | Return self-=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imul__`](generated/numpy.ndarray.__imul__.html#numpy.ndarray.__imul__
    "numpy.ndarray.__imul__")(value, /) | Return self*=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__itruediv__`](generated/numpy.ndarray.__itruediv__.html#numpy.ndarray.__itruediv__
    "numpy.ndarray.__itruediv__")(value, /) | Return self/=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ifloordiv__`](generated/numpy.ndarray.__ifloordiv__.html#numpy.ndarray.__ifloordiv__
    "numpy.ndarray.__ifloordiv__")(value, /) | Return self//=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imod__`](generated/numpy.ndarray.__imod__.html#numpy.ndarray.__imod__
    "numpy.ndarray.__imod__")(value, /) | Return self%=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ipow__`](generated/numpy.ndarray.__ipow__.html#numpy.ndarray.__ipow__
    "numpy.ndarray.__ipow__")(value, /) | Return self**=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ilshift__`](generated/numpy.ndarray.__ilshift__.html#numpy.ndarray.__ilshift__
    "numpy.ndarray.__ilshift__")(value, /) | Return self<<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__irshift__`](generated/numpy.ndarray.__irshift__.html#numpy.ndarray.__irshift__
    "numpy.ndarray.__irshift__")(value, /) | Return self>>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__iand__`](generated/numpy.ndarray.__iand__.html#numpy.ndarray.__iand__
    "numpy.ndarray.__iand__")(value, /) | Return self&=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ior__`](generated/numpy.ndarray.__ior__.html#numpy.ndarray.__ior__
    "numpy.ndarray.__ior__")(value, /) | Return self&#124;=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ixor__`](generated/numpy.ndarray.__ixor__.html#numpy.ndarray.__ixor__
    "numpy.ndarray.__ixor__")(value, /) | Return self^=value. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'In place operations will perform the calculation using the precision decided
    by the data type of the two operands, but will silently downcast the result (if
    necessary) so it can fit back into the array. Therefore, for mixed precision calculations,
    `A {op}= B` can be different than `A = A {op} B`. For example, suppose `a = ones((3,3))`.
    Then, `a += 3j` is different than `a = a + 3j`: while they both perform the same
    computation, `a += 3` casts the result to fit back in `a`, whereas `a = a + 3j`
    re-binds the name `a` to the result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matrix Multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__matmul__`](generated/numpy.ndarray.__matmul__.html#numpy.ndarray.__matmul__
    "numpy.ndarray.__matmul__")(value, /) | Return [self@value](/cdn-cgi/l/email-protection#0a796f666c2c29393d312c293f38312c293e32317c6b667f6f).
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Matrix operators `@` and `@=` were introduced in Python 3.5 following [**PEP
    465**](https://peps.python.org/pep-0465/), and the `@` operator has been introduced
    in NumPy 1.10.0\. Further information can be found in the [`matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Special methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For standard library functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__copy__`](generated/numpy.ndarray.__copy__.html#numpy.ndarray.__copy__
    "numpy.ndarray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__deepcopy__`](generated/numpy.ndarray.__deepcopy__.html#numpy.ndarray.__deepcopy__
    "numpy.ndarray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__reduce__`](generated/numpy.ndarray.__reduce__.html#numpy.ndarray.__reduce__
    "numpy.ndarray.__reduce__")() | For pickling. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setstate__`](generated/numpy.ndarray.__setstate__.html#numpy.ndarray.__setstate__
    "numpy.ndarray.__setstate__")(state, /) | For unpickling. |'
  prefs: []
  type: TYPE_TB
- en: 'Basic customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__new__`](generated/numpy.ndarray.__new__.html#numpy.ndarray.__new__
    "numpy.ndarray.__new__")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array__`](generated/numpy.ndarray.__array__.html#numpy.ndarray.__array__
    "numpy.ndarray.__array__")([dtype], /) | Returns either a new reference to self
    if dtype is not given or a new array of provided data type if dtype is different
    from the current dtype of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array_wrap__`](generated/numpy.ndarray.__array_wrap__.html#numpy.ndarray.__array_wrap__
    "numpy.ndarray.__array_wrap__")(array[, context], /) | Returns a view of [`array`](generated/numpy.array.html#numpy.array
    "numpy.array") with the same type as self. |'
  prefs: []
  type: TYPE_TB
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__len__`](generated/numpy.ndarray.__len__.html#numpy.ndarray.__len__
    "numpy.ndarray.__len__")(/) | Return len(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__getitem__`](generated/numpy.ndarray.__getitem__.html#numpy.ndarray.__getitem__
    "numpy.ndarray.__getitem__")(key, /) | Return self[key]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setitem__`](generated/numpy.ndarray.__setitem__.html#numpy.ndarray.__setitem__
    "numpy.ndarray.__setitem__")(key, value, /) | Set self[key] to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__contains__`](generated/numpy.ndarray.__contains__.html#numpy.ndarray.__contains__
    "numpy.ndarray.__contains__")(key, /) | Return key in self. |'
  prefs: []
  type: TYPE_TB
- en: Conversion; the operations [`int()`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)"), [`float()`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") and [`complex()`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)"). They work only on arrays that have one element in them and
    return the appropriate scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__int__`](generated/numpy.ndarray.__int__.html#numpy.ndarray.__int__
    "numpy.ndarray.__int__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__float__`](generated/numpy.ndarray.__float__.html#numpy.ndarray.__float__
    "numpy.ndarray.__float__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__complex__`](generated/numpy.ndarray.__complex__.html#numpy.ndarray.__complex__
    "numpy.ndarray.__complex__") |  |'
  prefs: []
  type: TYPE_TB
- en: 'String representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__str__`](generated/numpy.ndarray.__str__.html#numpy.ndarray.__str__
    "numpy.ndarray.__str__")(/) | Return str(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__repr__`](generated/numpy.ndarray.__repr__.html#numpy.ndarray.__repr__
    "numpy.ndarray.__repr__")(/) | Return repr(self). |'
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__class_getitem__`](generated/numpy.ndarray.__class_getitem__.html#numpy.ndarray.__class_getitem__
    "numpy.ndarray.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") type.
    |'
  prefs: []
  type: TYPE_TB
- en: Constructing arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New arrays can be constructed using the routines detailed in [Array creation
    routines](routines.array-creation.html#routines-array-creation), and also by using
    the low-level [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(shape[, dtype, buffer, offset, ...])
    | An array object represents a multidimensional, homogeneous array of fixed-size
    items. |'
  prefs: []
  type: TYPE_TB
- en: '## Indexing arrays'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can be indexed using an extended Python slicing syntax, `array[selection]`.
    Similar syntax is also used for accessing fields in a [structured data type](../glossary.html#term-structured-data-type).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Array Indexing](arrays.indexing.html#arrays-indexing).'
  prefs: []
  type: TYPE_NORMAL
- en: '## Internal memory layout of an ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of class [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") consists of a contiguous one-dimensional segment of computer
    memory (owned by the array, or by some other object), combined with an indexing
    scheme that maps *N* integers into the location of an item in the block. The ranges
    in which the indices can vary is specified by the [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") of the array. How many bytes each item takes and how the
    bytes are interpreted is defined by the [data-type object](arrays.dtypes.html#arrays-dtypes)
    associated with the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'A segment of memory is inherently 1-dimensional, and there are many different
    schemes for arranging the items of an *N*-dimensional array in a 1-dimensional
    block. NumPy is flexible, and [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects can accommodate any *strided indexing scheme*. In a strided
    scheme, the N-dimensional index \((n_0, n_1, ..., n_{N-1})\) corresponds to the
    offset (in bytes):'
  prefs: []
  type: TYPE_NORMAL
- en: \[n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k\]
  prefs: []
  type: TYPE_NORMAL
- en: 'from the beginning of the memory block associated with the array. Here, \(s_k\)
    are integers which specify the [`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") of the array. The [column-major](../glossary.html#term-column-major)
    order (used, for example, in the Fortran language and in *Matlab*) and [row-major](../glossary.html#term-row-major)
    order (used in C) schemes are just specific kinds of strided scheme, and correspond
    to memory that can be *addressed* by the strides:'
  prefs: []
  type: TYPE_NORMAL
- en: \[s_k^{\mathrm{column}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{row}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(d_j\) *= self.shape[j]*.
  prefs: []
  type: TYPE_NORMAL
- en: Both the C and Fortran orders are [contiguous](../glossary.html#term-contiguous),
    *i.e.,* single-segment, memory layouts, in which every part of the memory block
    can be accessed by some combination of the indices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Contiguous arrays* and *single-segment arrays* are synonymous and are used
    interchangeably throughout the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'While a C-style and Fortran-style contiguous array, which has the corresponding
    flags set, can be addressed with the above strides, the actual strides may be
    different. This can happen in two cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If `self.shape[k] == 1` then for any legal index `index[k] == 0`. This means
    that in the formula for the offset \(n_k = 0\) and thus \(s_k n_k = 0\) and the
    value of \(s_k\) *= self.strides[k]* is arbitrary.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If an array has no elements (`self.size == 0`) there is no legal index and the
    strides are never used. Any array with no elements may be considered C-style and
    Fortran-style contiguous.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Point 1\. means that `self` and `self.squeeze()` always have the same contiguity
    and `aligned` flags value. This also means that even a high dimensional array
    could be C-style and Fortran-style contiguous at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: An array is considered aligned if the memory offsets for all elements and the
    base offset itself is a multiple of *self.itemsize*. Understanding *memory-alignment*
    leads to better performance on most hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: It does *not* generally hold that `self.strides[-1] == self.itemsize` for C-style
    contiguous arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous
    arrays is true.
  prefs: []
  type: TYPE_NORMAL
- en: '`NPY_RELAXED_STRIDES_DEBUG=1` can be used to help find errors when incorrectly
    relying on the strides in C-extension code (see below warning).'
  prefs: []
  type: TYPE_NORMAL
- en: Data in new [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is in the [row-major](../glossary.html#term-row-major) (C) order, unless otherwise
    specified, but, for example, [basic array slicing](arrays.indexing.html#arrays-indexing)
    often produces [views](../glossary.html#term-view) in a different scheme.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Several algorithms in NumPy work on arbitrarily strided arrays. However, some
    algorithms require single-segment arrays. When an irregularly strided array is
    passed in to such algorithms, a copy is automatically made.
  prefs: []
  type: TYPE_NORMAL
- en: '## Array attributes'
  prefs: []
  type: TYPE_NORMAL
- en: Array attributes reflect information that is intrinsic to the array itself.
    Generally, accessing an array through its attributes allows you to get and sometimes
    set intrinsic properties of the array without creating a new array. The exposed
    attributes are the core parts of an array and only some of them can be reset meaningfully
    without creating a new array. Information on each attribute is given below.
  prefs: []
  type: TYPE_NORMAL
- en: Memory layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following attributes contain information about the memory layout of the
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  prefs: []
  type: TYPE_TB
- en: Data type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  prefs: []
  type: TYPE_TB
- en: Other attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  prefs: []
  type: TYPE_TB
- en: '### Array interface'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |'
  prefs: []
  type: TYPE_TB
- en: Memory layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following attributes contain information about the memory layout of the
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  prefs: []
  type: TYPE_TB
- en: Data type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  prefs: []
  type: TYPE_TB
- en: Other attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  prefs: []
  type: TYPE_TB
- en: '### Array interface'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  prefs: []
  type: TYPE_TB
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |'
  prefs: []
  type: TYPE_TB
- en: '## Array methods'
  prefs: []
  type: TYPE_NORMAL
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") object
    has many methods which operate on or with the array in some fashion, typically
    returning an array result. These methods are briefly explained below. (Each method’s
    docstring has a more complete description.)
  prefs: []
  type: TYPE_NORMAL
- en: 'For the following methods there are also corresponding functions in [`numpy`](index.html#module-numpy
    "numpy"): [`all`](generated/numpy.all.html#numpy.all "numpy.all"), [`any`](generated/numpy.any.html#numpy.any
    "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"), [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), [`argsort`](generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"), [`compress`](generated/numpy.compress.html#numpy.compress
    "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy"),
    [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"), [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum
    "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal"),
    [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"), [`max`](generated/numpy.amax.html#numpy.amax
    "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin
    "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero"),
    [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition"),
    [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"), [`ptp`](generated/numpy.ptp.html#numpy.ptp
    "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel"), [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").'
  prefs: []
  type: TYPE_NORMAL
- en: Array conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  prefs: []
  type: TYPE_TB
- en: Calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these methods take an argument named *axis*. In such cases,
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of the *axis* argument
  prefs: []
  type: TYPE_NORMAL
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  prefs: []
  type: TYPE_NORMAL
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: Array conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  prefs: []
  type: TYPE_TB
- en: Calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these methods take an argument named *axis*. In such cases,
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of the *axis* argument
  prefs: []
  type: TYPE_NORMAL
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  prefs: []
  type: TYPE_NORMAL
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic, matrix multiplication, and comparison operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic and comparison operations on [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") are defined as element-wise operations, and generally yield [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects as results.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the arithmetic operations (`+`, `-`, `*`, `/`, `//`, `%`, `divmod()`,
    `**` or `pow()`, `<<`, `>>`, `&`, `^`, `|`, `~`) and the comparisons (`==`, `<`,
    `>`, `<=`, `>=`, `!=`) is equivalent to the corresponding universal function (or
    [ufunc](../glossary.html#term-ufunc) for short) in NumPy. For more information,
    see the section on [Universal Functions](ufuncs.html#ufuncs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__lt__`](generated/numpy.ndarray.__lt__.html#numpy.ndarray.__lt__
    "numpy.ndarray.__lt__")(value, /) | Return self<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__le__`](generated/numpy.ndarray.__le__.html#numpy.ndarray.__le__
    "numpy.ndarray.__le__")(value, /) | Return self<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__gt__`](generated/numpy.ndarray.__gt__.html#numpy.ndarray.__gt__
    "numpy.ndarray.__gt__")(value, /) | Return self>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ge__`](generated/numpy.ndarray.__ge__.html#numpy.ndarray.__ge__
    "numpy.ndarray.__ge__")(value, /) | Return self>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__eq__`](generated/numpy.ndarray.__eq__.html#numpy.ndarray.__eq__
    "numpy.ndarray.__eq__")(value, /) | Return self==value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ne__`](generated/numpy.ndarray.__ne__.html#numpy.ndarray.__ne__
    "numpy.ndarray.__ne__")(value, /) | Return self!=value. |'
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")(/) | True if self else False |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Truth-value testing of an array invokes [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__"), which raises an error if the number of elements in
    the array is larger than 1, because the truth value of such arrays is ambiguous.
    Use [`.any()`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")
    and [`.all()`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")
    instead to be clear about what is meant in such cases. (If the number of elements
    is 0, the array evaluates to `False`.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Unary operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__neg__`](generated/numpy.ndarray.__neg__.html#numpy.ndarray.__neg__
    "numpy.ndarray.__neg__")(/) | -self |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pos__`](generated/numpy.ndarray.__pos__.html#numpy.ndarray.__pos__
    "numpy.ndarray.__pos__")(/) | +self |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__abs__`](generated/numpy.ndarray.__abs__.html#numpy.ndarray.__abs__
    "numpy.ndarray.__abs__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__invert__`](generated/numpy.ndarray.__invert__.html#numpy.ndarray.__invert__
    "numpy.ndarray.__invert__")(/) | ~self |'
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__add__`](generated/numpy.ndarray.__add__.html#numpy.ndarray.__add__
    "numpy.ndarray.__add__")(value, /) | Return self+value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__sub__`](generated/numpy.ndarray.__sub__.html#numpy.ndarray.__sub__
    "numpy.ndarray.__sub__")(value, /) | Return self-value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mul__`](generated/numpy.ndarray.__mul__.html#numpy.ndarray.__mul__
    "numpy.ndarray.__mul__")(value, /) | Return self*value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__truediv__`](generated/numpy.ndarray.__truediv__.html#numpy.ndarray.__truediv__
    "numpy.ndarray.__truediv__")(value, /) | Return self/value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__floordiv__`](generated/numpy.ndarray.__floordiv__.html#numpy.ndarray.__floordiv__
    "numpy.ndarray.__floordiv__")(value, /) | Return self//value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mod__`](generated/numpy.ndarray.__mod__.html#numpy.ndarray.__mod__
    "numpy.ndarray.__mod__")(value, /) | Return self%value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__divmod__`](generated/numpy.ndarray.__divmod__.html#numpy.ndarray.__divmod__
    "numpy.ndarray.__divmod__")(value, /) | Return divmod(self, value). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pow__`](generated/numpy.ndarray.__pow__.html#numpy.ndarray.__pow__
    "numpy.ndarray.__pow__")(value[, mod]) | Return pow(self, value, mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__lshift__`](generated/numpy.ndarray.__lshift__.html#numpy.ndarray.__lshift__
    "numpy.ndarray.__lshift__")(value, /) | Return self<<value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__rshift__`](generated/numpy.ndarray.__rshift__.html#numpy.ndarray.__rshift__
    "numpy.ndarray.__rshift__")(value, /) | Return self>>value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__and__`](generated/numpy.ndarray.__and__.html#numpy.ndarray.__and__
    "numpy.ndarray.__and__")(value, /) | Return self&value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__or__`](generated/numpy.ndarray.__or__.html#numpy.ndarray.__or__
    "numpy.ndarray.__or__")(value, /) | Return self&#124;value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__xor__`](generated/numpy.ndarray.__xor__.html#numpy.ndarray.__xor__
    "numpy.ndarray.__xor__")(value, /) | Return self^value. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Any third argument to [`pow`](https://docs.python.org/3/library/functions.html#pow
    "(in Python v3.11)") is silently ignored, as the underlying [`ufunc`](generated/numpy.power.html#numpy.power
    "numpy.power") takes only two arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is a built-in type (written in C), the `__r{op}__` special methods are not directly
    defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions called to implement many arithmetic special methods for arrays
    can be modified using [`__array_ufunc__`](arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arithmetic, in-place:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__iadd__`](generated/numpy.ndarray.__iadd__.html#numpy.ndarray.__iadd__
    "numpy.ndarray.__iadd__")(value, /) | Return self+=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__isub__`](generated/numpy.ndarray.__isub__.html#numpy.ndarray.__isub__
    "numpy.ndarray.__isub__")(value, /) | Return self-=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imul__`](generated/numpy.ndarray.__imul__.html#numpy.ndarray.__imul__
    "numpy.ndarray.__imul__")(value, /) | Return self*=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__itruediv__`](generated/numpy.ndarray.__itruediv__.html#numpy.ndarray.__itruediv__
    "numpy.ndarray.__itruediv__")(value, /) | Return self/=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ifloordiv__`](generated/numpy.ndarray.__ifloordiv__.html#numpy.ndarray.__ifloordiv__
    "numpy.ndarray.__ifloordiv__")(value, /) | Return self//=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imod__`](generated/numpy.ndarray.__imod__.html#numpy.ndarray.__imod__
    "numpy.ndarray.__imod__")(value, /) | Return self%=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ipow__`](generated/numpy.ndarray.__ipow__.html#numpy.ndarray.__ipow__
    "numpy.ndarray.__ipow__")(value, /) | Return self**=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ilshift__`](generated/numpy.ndarray.__ilshift__.html#numpy.ndarray.__ilshift__
    "numpy.ndarray.__ilshift__")(value, /) | Return self<<=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__irshift__`](generated/numpy.ndarray.__irshift__.html#numpy.ndarray.__irshift__
    "numpy.ndarray.__irshift__")(value, /) | Return self>>=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__iand__`](generated/numpy.ndarray.__iand__.html#numpy.ndarray.__iand__
    "numpy.ndarray.__iand__")(value, /) | Return self&=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ior__`](generated/numpy.ndarray.__ior__.html#numpy.ndarray.__ior__
    "numpy.ndarray.__ior__")(value, /) | Return self&#124;=value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ixor__`](generated/numpy.ndarray.__ixor__.html#numpy.ndarray.__ixor__
    "numpy.ndarray.__ixor__")(value, /) | Return self^=value. |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: 'In place operations will perform the calculation using the precision decided
    by the data type of the two operands, but will silently downcast the result (if
    necessary) so it can fit back into the array. Therefore, for mixed precision calculations,
    `A {op}= B` can be different than `A = A {op} B`. For example, suppose `a = ones((3,3))`.
    Then, `a += 3j` is different than `a = a + 3j`: while they both perform the same
    computation, `a += 3` casts the result to fit back in `a`, whereas `a = a + 3j`
    re-binds the name `a` to the result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matrix Multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__matmul__`](generated/numpy.ndarray.__matmul__.html#numpy.ndarray.__matmul__
    "numpy.ndarray.__matmul__")(value, /) | Return [self@value](/cdn-cgi/l/email-protection#0a796f666c2c29393d312c293f38312c293e32317c6b667f6f).
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Matrix operators `@` and `@=` were introduced in Python 3.5 following [**PEP
    465**](https://peps.python.org/pep-0465/), and the `@` operator has been introduced
    in NumPy 1.10.0\. Further information can be found in the [`matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Special methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For standard library functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__copy__`](generated/numpy.ndarray.__copy__.html#numpy.ndarray.__copy__
    "numpy.ndarray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__deepcopy__`](generated/numpy.ndarray.__deepcopy__.html#numpy.ndarray.__deepcopy__
    "numpy.ndarray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__reduce__`](generated/numpy.ndarray.__reduce__.html#numpy.ndarray.__reduce__
    "numpy.ndarray.__reduce__")() | For pickling. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setstate__`](generated/numpy.ndarray.__setstate__.html#numpy.ndarray.__setstate__
    "numpy.ndarray.__setstate__")(state, /) | For unpickling. |'
  prefs: []
  type: TYPE_TB
- en: 'Basic customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__new__`](generated/numpy.ndarray.__new__.html#numpy.ndarray.__new__
    "numpy.ndarray.__new__")(*args, **kwargs) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array__`](generated/numpy.ndarray.__array__.html#numpy.ndarray.__array__
    "numpy.ndarray.__array__")([dtype], /) | Returns either a new reference to self
    if dtype is not given or a new array of provided data type if dtype is different
    from the current dtype of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array_wrap__`](generated/numpy.ndarray.__array_wrap__.html#numpy.ndarray.__array_wrap__
    "numpy.ndarray.__array_wrap__")(array[, context], /) | Returns a view of [`array`](generated/numpy.array.html#numpy.array
    "numpy.array") with the same type as self. |'
  prefs: []
  type: TYPE_TB
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__len__`](generated/numpy.ndarray.__len__.html#numpy.ndarray.__len__
    "numpy.ndarray.__len__")(/) | Return len(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__getitem__`](generated/numpy.ndarray.__getitem__.html#numpy.ndarray.__getitem__
    "numpy.ndarray.__getitem__")(key, /) | Return self[key]. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setitem__`](generated/numpy.ndarray.__setitem__.html#numpy.ndarray.__setitem__
    "numpy.ndarray.__setitem__")(key, value, /) | Set self[key] to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__contains__`](generated/numpy.ndarray.__contains__.html#numpy.ndarray.__contains__
    "numpy.ndarray.__contains__")(key, /) | Return key in self. |'
  prefs: []
  type: TYPE_TB
- en: Conversion; the operations [`int()`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)"), [`float()`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") and [`complex()`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)"). They work only on arrays that have one element in them and
    return the appropriate scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__int__`](generated/numpy.ndarray.__int__.html#numpy.ndarray.__int__
    "numpy.ndarray.__int__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__float__`](generated/numpy.ndarray.__float__.html#numpy.ndarray.__float__
    "numpy.ndarray.__float__")(self) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__complex__`](generated/numpy.ndarray.__complex__.html#numpy.ndarray.__complex__
    "numpy.ndarray.__complex__") |  |'
  prefs: []
  type: TYPE_TB
- en: 'String representations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__str__`](generated/numpy.ndarray.__str__.html#numpy.ndarray.__str__
    "numpy.ndarray.__str__")(/) | Return str(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__repr__`](generated/numpy.ndarray.__repr__.html#numpy.ndarray.__repr__
    "numpy.ndarray.__repr__")(/) | Return repr(self). |'
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__class_getitem__`](generated/numpy.ndarray.__class_getitem__.html#numpy.ndarray.__class_getitem__
    "numpy.ndarray.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") type.
    |'
  prefs: []
  type: TYPE_TB
