- en: Model Benchmarking with Ultralytics YOLO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ultralytics YOLO 进行模型基准测试
- en: 原文：[`docs.ultralytics.com/modes/benchmark/`](https://docs.ultralytics.com/modes/benchmark/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/modes/benchmark/`](https://docs.ultralytics.com/modes/benchmark/)
- en: '![Ultralytics YOLO ecosystem and integrations](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Ultralytics YOLO 生态系统和集成](img/1933b0eeaf180eaa6d0c37f29931fb7d.png)'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Once your model is trained and validated, the next logical step is to evaluate
    its performance in various real-world scenarios. Benchmark mode in Ultralytics
    YOLOv8 serves this purpose by providing a robust framework for assessing the speed
    and accuracy of your model across a range of export formats.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的模型经过训练和验证，下一个合乎逻辑的步骤就是在各种真实场景中评估其性能。Ultralytics YOLOv8 的基准模式通过提供一个强大的框架，为您的模型在一系列导出格式中评估速度和准确性提供了一个坚实的基础。
- en: '[`www.youtube.com/embed/j8uQc0qB91s?start=105`](https://www.youtube.com/embed/j8uQc0qB91s?start=105)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/j8uQc0qB91s?start=105`](https://www.youtube.com/embed/j8uQc0qB91s?start=105)'
- en: '**Watch:** Ultralytics Modes Tutorial: Benchmark'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** Ultralytics 模式教程：基准测试'
- en: Why Is Benchmarking Crucial?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么基准测试至关重要？
- en: '**Informed Decisions:** Gain insights into the trade-offs between speed and
    accuracy.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明智的决策：** 深入了解速度和准确性之间的权衡。'
- en: '**Resource Allocation:** Understand how different export formats perform on
    different hardware.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源分配：** 了解不同导出格式在不同硬件上的性能表现。'
- en: '**Optimization:** Learn which export format offers the best performance for
    your specific use case.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化：** 了解哪种导出格式对于您特定的用例提供最佳性能。'
- en: '**Cost Efficiency:** Make more efficient use of hardware resources based on
    benchmark results.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效率：** 根据基准测试结果更有效地利用硬件资源。'
- en: Key Metrics in Benchmark Mode
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基准模式中的关键指标
- en: '**mAP50-95:** For object detection, segmentation, and pose estimation.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mAP50-95：** 用于目标检测、分割和姿态估计。'
- en: '**accuracy_top5:** For image classification.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**accuracy_top5：** 用于图像分类。'
- en: '**Inference Time:** Time taken for each image in milliseconds.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推理时间：** 每张图像所需的时间（毫秒）。'
- en: Supported Export Formats
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的导出格式
- en: '**ONNX:** For optimal CPU performance'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ONNX：** 用于最佳的 CPU 性能'
- en: '**TensorRT:** For maximal GPU efficiency'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorRT：** 实现最大的 GPU 效率'
- en: '**OpenVINO:** For Intel hardware optimization'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenVINO：** 适用于英特尔硬件优化'
- en: '**CoreML, TensorFlow SavedModel, and More:** For diverse deployment needs.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CoreML、TensorFlow SavedModel 等等：** 适用于多样化的部署需求。'
- en: Tip
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Export to ONNX or OpenVINO for up to 3x CPU speedup.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出到 ONNX 或 OpenVINO 可以实现高达 3 倍的 CPU 加速。
- en: Export to TensorRT for up to 5x GPU speedup.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出到 TensorRT 可以实现高达 5 倍的 GPU 加速。
- en: Usage Examples
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用示例
- en: Run YOLOv8n benchmarks on all supported export formats including ONNX, TensorRT
    etc. See Arguments section below for a full list of export arguments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有支持的导出格式上运行 YOLOv8n 基准测试，包括 ONNX、TensorRT 等。请查看下面的参数部分，了解完整的导出参数列表。
- en: Example
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Arguments
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Arguments such as `model`, `data`, `imgsz`, `half`, `device`, and `verbose`
    provide users with the flexibility to fine-tune the benchmarks to their specific
    needs and compare the performance of different export formats with ease.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 参数如 `model`、`data`、`imgsz`、`half`、`device` 和 `verbose` 为用户提供了灵活性，可以根据其特定需求微调基准测试，并轻松比较不同导出格式的性能。
- en: '| Key | Default Value | Description |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `model` | `None` | Specifies the path to the model file. Accepts both `.pt`
    and `.yaml` formats, e.g., `"yolov8n.pt"` for pre-trained models or configuration
    files. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `model` | `None` | 指定模型文件的路径。接受 `.pt` 和 `.yaml` 格式，例如，`"yolov8n.pt"` 用于预训练模型或配置文件。
    |'
- en: '| `data` | `None` | Path to a YAML file defining the dataset for benchmarking,
    typically including paths and settings for validation data. Example: `"coco8.yaml"`.
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `data` | `None` | 定义用于基准测试的数据集的 YAML 文件路径，通常包括验证数据的路径和设置。示例："coco8.yaml"。
    |'
- en: '| `imgsz` | `640` | The input image size for the model. Can be a single integer
    for square images or a tuple `(width, height)` for non-square, e.g., `(640, 480)`.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `imgsz` | `640` | 模型的输入图像大小。可以是一个整数用于方形图像，或者是一个元组 `(width, height)` 用于非方形图像，例如
    `(640, 480)`。 |'
- en: '| `half` | `False` | Enables FP16 (half-precision) inference, reducing memory
    usage and possibly increasing speed on compatible hardware. Use `half=True` to
    enable. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `half` | `False` | 启用 FP16（半精度）推理，减少内存使用量，并可能在兼容硬件上增加速度。使用 `half=True` 来启用。
    |'
- en: '| `int8` | `False` | Activates INT8 quantization for further optimized performance
    on supported devices, especially useful for edge devices. Set `int8=True` to use.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `int8` | `False` | 激活 INT8 量化，以进一步优化支持设备上的性能，特别适用于边缘设备。设置 `int8=True` 来使用。
    |'
- en: '| `device` | `None` | Defines the computation device(s) for benchmarking, such
    as `"cpu"`, `"cuda:0"`, or a list of devices like `"cuda:0,1"` for multi-GPU setups.
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `device` | `None` | 定义基准测试的计算设备，如 `"cpu"`、`"cuda:0"`，或像 `"cuda:0,1"` 这样的多
    GPU 设置。 |'
- en: '| `verbose` | `False` | Controls the level of detail in logging output. A boolean
    value; set `verbose=True` for detailed logs or a float for thresholding errors.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `verbose` | `False` | 控制日志输出的详细级别。布尔值；设置 `verbose=True` 可获取详细日志，或设置浮点数以进行错误阈值设定。
    |'
- en: Export Formats
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出格式
- en: Benchmarks will attempt to run automatically on all possible export formats
    below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试将尝试自动运行所有可能的导出格式。
- en: '| Format | `format` Argument | Model | Metadata | Arguments |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | `format` 参数 | 模型 | 元数据 | 参数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| [PyTorch](https://pytorch.org/) | - | `yolov8n.pt` | ✅ | - |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [PyTorch](https://pytorch.org/) | - | `yolov8n.pt` | ✅ | - |'
- en: '| TorchScript | `torchscript` | `yolov8n.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| TorchScript | `torchscript` | `yolov8n.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
- en: '| ONNX | `onnx` | `yolov8n.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| ONNX | `onnx` | `yolov8n.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
- en: '| OpenVINO | `openvino` | `yolov8n_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| OpenVINO | `openvino` | `yolov8n_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
- en: '| TensorRT | `engine` | `yolov8n.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| TensorRT | `engine` | `yolov8n.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
- en: '| CoreML | `coreml` | `yolov8n.mlpackage` | ✅ | `imgsz`, `half`, `int8`, `nms`,
    `batch` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| CoreML | `coreml` | `yolov8n.mlpackage` | ✅ | `imgsz`, `half`, `int8`, `nms`,
    `batch` |'
- en: '| TF SavedModel | `saved_model` | `yolov8n_saved_model/` | ✅ | `imgsz`, `keras`,
    `int8`, `batch` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| TF SavedModel | `saved_model` | `yolov8n_saved_model/` | ✅ | `imgsz`, `keras`,
    `int8`, `batch` |'
- en: '| TF GraphDef | `pb` | `yolov8n.pb` | ❌ | `imgsz`, `batch` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| TF GraphDef | `pb` | `yolov8n.pb` | ❌ | `imgsz`, `batch` |'
- en: '| TF Lite | `tflite` | `yolov8n.tflite` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| TF Lite | `tflite` | `yolov8n.tflite` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
- en: '| TF Edge TPU | `edgetpu` | `yolov8n_edgetpu.tflite` | ✅ | `imgsz` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| TF Edge TPU | `edgetpu` | `yolov8n_edgetpu.tflite` | ✅ | `imgsz` |'
- en: '| TF.js | `tfjs` | `yolov8n_web_model/` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| TF.js | `tfjs` | `yolov8n_web_model/` | ✅ | `imgsz`, `half`, `int8`, `batch`
    |'
- en: '| PaddlePaddle | `paddle` | `yolov8n_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| PaddlePaddle | `paddle` | `yolov8n_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
- en: '| NCNN | `ncnn` | `yolov8n_ncnn_model/` | ✅ | `imgsz`, `half`, `batch` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| NCNN | `ncnn` | `yolov8n_ncnn_model/` | ✅ | `imgsz`, `half`, `batch` |'
- en: See full `export` details in the Export page.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 查看导出页面的完整导出详情。
- en: FAQ
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: How do I benchmark my YOLOv8 model's performance using Ultralytics?
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 Ultralytics 对我的 YOLOv8 模型进行基准测试？
- en: 'Ultralytics YOLOv8 offers a Benchmark mode to assess your model''s performance
    across different export formats. This mode provides insights into key metrics
    such as mean Average Precision (mAP50-95), accuracy, and inference time in milliseconds.
    To run benchmarks, you can use either Python or CLI commands. For example, to
    benchmark on a GPU:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLOv8 提供了一个基准模式，可以评估模型在不同导出格式下的性能。该模式提供关键指标，如平均精度（mAP50-95）、准确性以及推断时间（毫秒）。要运行基准测试，可以使用
    Python 或 CLI 命令。例如，在 GPU 上运行基准测试：
- en: Example
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more details on benchmark arguments, visit the Arguments section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有关基准参数的更多详情，请访问参数部分。
- en: What are the benefits of exporting YOLOv8 models to different formats?
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出 YOLOv8 模型到不同格式有哪些好处？
- en: 'Exporting YOLOv8 models to different formats such as ONNX, TensorRT, and OpenVINO
    allows you to optimize performance based on your deployment environment. For instance:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOLOv8 模型导出到不同格式，如 ONNX、TensorRT 和 OpenVINO，可以根据部署环境优化性能。例如：
- en: '**ONNX:** Provides up to 3x CPU speedup.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ONNX：**提供最多 3 倍的 CPU 加速。'
- en: '**TensorRT:** Offers up to 5x GPU speedup.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorRT：**提供最多 5 倍的 GPU 加速。'
- en: '**OpenVINO:** Specifically optimized for Intel hardware. These formats enhance
    both the speed and accuracy of your models, making them more efficient for various
    real-world applications. Visit the Export page for complete details.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenVINO：**专为 Intel 硬件优化。这些格式提升了模型的速度和准确性，使其在各种实际应用中更加高效。访问导出页面获取完整详情。'
- en: Why is benchmarking crucial in evaluating YOLOv8 models?
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么基准测试在评估 YOLOv8 模型时至关重要？
- en: 'Benchmarking your YOLOv8 models is essential for several reasons:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的 YOLOv8 模型进行基准测试至关重要，理由如下：
- en: '**Informed Decisions:** Understand the trade-offs between speed and accuracy.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**明智决策：**理解速度和准确性之间的权衡。'
- en: '**Resource Allocation:** Gauge the performance across different hardware options.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源分配：** 评估在不同硬件选项上的性能。'
- en: '**Optimization:** Determine which export format offers the best performance
    for specific use cases.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化：** 确定哪种导出格式针对特定用例提供最佳性能。'
- en: '**Cost Efficiency:** Optimize hardware usage based on benchmark results. Key
    metrics such as mAP50-95, Top-5 accuracy, and inference time help in making these
    evaluations. Refer to the Key Metrics section for more information.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效率：** 根据基准测试结果优化硬件使用。关键指标如mAP50-95、Top-5准确性和推理时间有助于进行这些评估。有关更多信息，请参阅关键指标部分。'
- en: Which export formats are supported by YOLOv8, and what are their advantages?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: YOLOv8支持哪些导出格式，它们各自有什么优势？
- en: 'YOLOv8 supports a variety of export formats, each tailored for specific hardware
    and use cases:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8支持多种导出格式，每种都针对特定的硬件和用例进行了定制：
- en: '**ONNX:** Best for CPU performance.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ONNX：** 最适合CPU性能。'
- en: '**TensorRT:** Ideal for GPU efficiency.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TensorRT：** 理想的GPU效率。'
- en: '**OpenVINO:** Optimized for Intel hardware.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenVINO：** 针对Intel硬件优化。'
- en: '**CoreML & TensorFlow:** Useful for iOS and general ML applications. For a
    complete list of supported formats and their respective advantages, check out
    the Supported Export Formats section.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CoreML & TensorFlow：** 适用于iOS和一般ML应用程序。有关支持的所有格式及其各自优势的完整列表，请查看支持的导出格式部分。'
- en: What arguments can I use to fine-tune my YOLOv8 benchmarks?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以使用哪些参数来优化我的YOLOv8基准测试？
- en: 'When running benchmarks, several arguments can be customized to suit specific
    needs:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行基准测试时，可以自定义多个参数以满足特定需求：
- en: '**model:** Path to the model file (e.g., "yolov8n.pt").'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型：** 模型文件的路径（例如，"yolov8n.pt"）。'
- en: '**data:** Path to a YAML file defining the dataset (e.g., "coco8.yaml").'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据：** 定义数据集的YAML文件路径（例如，"coco8.yaml"）。'
- en: '**imgsz:** The input image size, either as a single integer or a tuple.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**imgsz：** 输入图像大小，可以是单个整数或元组。'
- en: '**half:** Enable FP16 inference for better performance.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**half：** 启用FP16推理以获得更好的性能。'
- en: '**int8:** Activate INT8 quantization for edge devices.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**int8：** 为边缘设备激活INT8量化。'
- en: '**device:** Specify the computation device (e.g., "cpu", "cuda:0").'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备：** 指定计算设备（例如，"cpu"，"cuda:0"）。'
- en: '**verbose:** Control the level of logging detail. For a full list of arguments,
    refer to the Arguments section.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细模式：** 控制日志详细程度。有关所有参数的完整列表，请参阅参数部分。'
