- en: numpy.ndarray.tofile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tofile.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.tofile.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Write array to a file as text or binary (default).
  prefs: []
  type: TYPE_NORMAL
- en: Data is always written in ‘C’ order, independent of the order of *a*. The data
    produced by this method can be recovered using the function fromfile().
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fid**file or str or Path'
  prefs: []
  type: TYPE_NORMAL
- en: An open file object, or a string containing a filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.17.0: [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path
    "(in Python v3.11)") objects are now accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '**sep**str'
  prefs: []
  type: TYPE_NORMAL
- en: Separator between array items for text output. If “” (empty), a binary file
    is written, equivalent to `file.write(a.tobytes())`.
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str'
  prefs: []
  type: TYPE_NORMAL
- en: Format string for text file output. Each entry in the array is formatted to
    text by first converting it to the closest Python type, and then using “format”
    % item.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is a convenience function for quick storage of array data. Information
    on endianness and precision is lost, so this method is not a good choice for files
    intended to archive data or transport data between machines with different endianness.
    Some of these problems can be overcome by outputting the data as text files, at
    the expense of speed and file size.
  prefs: []
  type: TYPE_NORMAL
- en: When fid is a file object, array contents are directly written to the file,
    bypassing the file object’s `write` method. As a result, tofile cannot be used
    with files objects supporting compression (e.g., GzipFile) or file-like objects
    that do not support `fileno()` (e.g., BytesIO).
  prefs: []
  type: TYPE_NORMAL
