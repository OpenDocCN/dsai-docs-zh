- en: scipy.fft.irfft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.irfft.html#scipy.fft.irfft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.irfft.html#scipy.fft.irfft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Computes the inverse of [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft "scipy.fft.rfft").
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the 1-D *n*-point discrete Fourier Transform
    of real input computed by [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft "scipy.fft.rfft").
    In other words, `irfft(rfft(x), len(x)) == x` to within numerical accuracy. (See
    Notes below for why `len(a)` is necessary here.)
  prefs: []
  type: TYPE_NORMAL
- en: The input is expected to be in the form returned by [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft
    "scipy.fft.rfft"), i.e., the real zero-frequency term followed by the complex
    positive frequency terms in order of increasing frequency. Since the discrete
    Fourier Transform of real input is Hermitian-symmetric, the negative frequency
    terms are taken to be the complex conjugates of the corresponding positive frequency
    terms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transformed axis of the output. For *n* output points, `n//2+1`
    input points are necessary. If the input is longer than this, it is cropped. If
    it is shorter than this, it is padded with zeros. If *n* is not given, it is taken
    to be `2*(m-1)`, where `m` is the length of the input along the axis specified
    by *axis*.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the inverse FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")).
    Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is *n*, or, if *n* is not given, `2*(m-1)` where `m` is the length of the
    transformed axis of the input. To get an odd number of output points, *n* must
    be specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is larger than the last axis of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rfft`](scipy.fft.rfft.html#scipy.fft.rfft "scipy.fft.rfft")'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D FFT of real input, of which [`irfft`](#scipy.fft.irfft "scipy.fft.irfft")
    is inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`irfft2`](scipy.fft.irfft2.html#scipy.fft.irfft2 "scipy.fft.irfft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the 2-D FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: '[`irfftn`](scipy.fft.irfftn.html#scipy.fft.irfftn "scipy.fft.irfftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of the N-D FFT of real input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Returns the real valued *n*-point inverse discrete Fourier transform of *x*,
    where *x* contains the non-negative frequency terms of a Hermitian-symmetric sequence.
    *n* is the length of the result, not the input.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you specify an *n* such that *a* must be zero-padded or truncated, the extra/removed
    values will be added/removed at high frequencies. One can thus resample a series
    to *m* points via Fourier interpolation by: `a_resamp = irfft(rfft(a), m)`.'
  prefs: []
  type: TYPE_NORMAL
- en: The default value of *n* assumes an even output length. By the Hermitian symmetry,
    the last imaginary component must be 0 and so is ignored. To avoid losing information,
    the correct length of the real input *must* be given.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice how the last term in the input to the ordinary [`ifft`](scipy.fft.ifft.html#scipy.fft.ifft
    "scipy.fft.ifft") is the complex conjugate of the second term, and the output
    has zero imaginary part everywhere. When calling [`irfft`](#scipy.fft.irfft "scipy.fft.irfft"),
    the negative frequencies are not specified, and the output array is purely real.
  prefs: []
  type: TYPE_NORMAL
