- en: pandas.wide_to_long
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html](https://pandas.pydata.org/docs/reference/api/pandas.wide_to_long.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Unpivot a DataFrame from wide to long format.
  prefs: []
  type: TYPE_NORMAL
- en: Less flexible but more user-friendly than melt.
  prefs: []
  type: TYPE_NORMAL
- en: With stubnames [‘A’, ‘B’], this function expects to find one or more group of
    columns with format A-suffix1, A-suffix2,…, B-suffix1, B-suffix2,… You specify
    what you want to call this suffix in the resulting long format with j (for example
    j=’year’)
  prefs: []
  type: TYPE_NORMAL
- en: Each row of these wide variables are assumed to be uniquely identified by i
    (can be a single column name or a list of column names)
  prefs: []
  type: TYPE_NORMAL
- en: All remaining variables in the data frame are left intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**df**DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: The wide-format DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '**stubnames**str or list-like'
  prefs: []
  type: TYPE_NORMAL
- en: The stub name(s). The wide format variables are assumed to start with the stub
    names.
  prefs: []
  type: TYPE_NORMAL
- en: '**i**str or list-like'
  prefs: []
  type: TYPE_NORMAL
- en: Column(s) to use as id variable(s).
  prefs: []
  type: TYPE_NORMAL
- en: '**j**str'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the sub-observation variable. What you wish to name your suffix
    in the long format.
  prefs: []
  type: TYPE_NORMAL
- en: '**sep**str, default “”'
  prefs: []
  type: TYPE_NORMAL
- en: A character indicating the separation of the variable names in the wide format,
    to be stripped from the names in the long format. For example, if your column
    names are A-suffix1, A-suffix2, you can strip the hyphen by specifying sep=’-’.
  prefs: []
  type: TYPE_NORMAL
- en: '**suffix**str, default ‘\d+’'
  prefs: []
  type: TYPE_NORMAL
- en: A regular expression capturing the wanted suffixes. ‘\d+’ captures numeric suffixes.
    Suffixes with no numbers could be specified with the negated character class ‘\D+’.
    You can also further disambiguate suffixes, for example, if your wide variables
    are of the form A-one, B-two,.., and you have an unrelated column A-rating, you
    can ignore the last one by specifying suffix=’(!?one|two)’. When all suffixes
    are numeric, they are cast to int64/float64.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: A DataFrame that contains each stub name as a variable, with new index (i, j).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`melt`](pandas.melt.html#pandas.melt "pandas.melt")'
  prefs: []
  type: TYPE_NORMAL
- en: Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pivot`](pandas.pivot.html#pandas.pivot "pandas.pivot")'
  prefs: []
  type: TYPE_NORMAL
- en: Create a spreadsheet-style pivot table as a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.pivot`](pandas.DataFrame.pivot.html#pandas.DataFrame.pivot "pandas.DataFrame.pivot")'
  prefs: []
  type: TYPE_NORMAL
- en: Pivot without aggregation that can handle non-numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.pivot_table`](pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")'
  prefs: []
  type: TYPE_NORMAL
- en: Generalization of pivot that can handle duplicate values for one index/column
    pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.unstack`](pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Pivot based on the index values instead of a column.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: All extra variables are left untouched. This simply uses pandas.melt under the
    hood, but is hard-coded to “do the right thing” in a typical case.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With multiple id columns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Going from long back to wide just takes some creative use of unstack
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Less wieldy column names are also handled
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we have many columns, we could also use a regex to find our stubnames and
    pass that list on to wide_to_long
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: All of the above examples have integers as suffixes. It is possible to have
    non-integers as suffixes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
