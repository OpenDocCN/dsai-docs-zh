- en: scipy.integrate.ode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.ode.html#scipy.integrate.ode](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.ode.html#scipy.integrate.ode)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A generic interface class to numeric integrators.
  prefs: []
  type: TYPE_NORMAL
- en: Solve an equation system \(y'(t) = f(t,y)\) with (optional) `jac = df/dy`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note*: The first two arguments of `f(t, y, ...)` are in the opposite order
    of the arguments in the system definition function used by [`scipy.integrate.odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint
    "scipy.integrate.odeint").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable `f(t, y, *f_args)`'
  prefs: []
  type: TYPE_NORMAL
- en: Right-hand side of the differential equation. t is a scalar, `y.shape == (n,)`.
    `f_args` is set by calling `set_f_params(*args)`. *f* should return a scalar,
    array or list (not a tuple).
  prefs: []
  type: TYPE_NORMAL
- en: '**jac**callable `jac(t, y, *jac_args)`, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian of the right-hand side, `jac[i,j] = d f[i] / d y[j]`. `jac_args` is
    set by calling `set_jac_params(*args)`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`odeint`](scipy.integrate.odeint.html#scipy.integrate.odeint "scipy.integrate.odeint")'
  prefs: []
  type: TYPE_NORMAL
- en: an integrator with a simpler interface based on lsoda from ODEPACK
  prefs: []
  type: TYPE_NORMAL
- en: '[`quad`](scipy.integrate.quad.html#scipy.integrate.quad "scipy.integrate.quad")'
  prefs: []
  type: TYPE_NORMAL
- en: for finding the area under a curve
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Available integrators are listed below. They can be selected using the [`set_integrator`](scipy.integrate.ode.set_integrator.html#scipy.integrate.ode.set_integrator
    "scipy.integrate.ode.set_integrator") method.
  prefs: []
  type: TYPE_NORMAL
- en: “vode”
  prefs: []
  type: TYPE_NORMAL
- en: Real-valued Variable-coefficient Ordinary Differential Equation solver, with
    fixed-leading-coefficient implementation. It provides implicit Adams method (for
    non-stiff problems) and a method based on backward differentiation formulas (BDF)
    (for stiff problems).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Source: [http://www.netlib.org/ode/vode.f](http://www.netlib.org/ode/vode.f)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This integrator is not re-entrant. You cannot have two [`ode`](#scipy.integrate.ode
    "scipy.integrate.ode") instances using the “vode” integrator at the same time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This integrator accepts the following parameters in [`set_integrator`](scipy.integrate.ode.set_integrator.html#scipy.integrate.ode.set_integrator
    "scipy.integrate.ode.set_integrator") method of the [`ode`](#scipy.integrate.ode
    "scipy.integrate.ode") class:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'atol : float or sequence absolute tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'rtol : float or sequence relative tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'lband : None or int'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'uband : None or int Jacobian band width, jac[i,j] != 0 for i-lband <= j <=
    i+uband. Setting these requires your jac routine to return the jacobian in packed
    format, jac_packed[i-j+uband, j] = jac[i,j]. The dimension of the matrix must
    be (lband+uband+1, len(y)).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'method: ‘adams’ or ‘bdf’ Which solver to use, Adams (non-stiff) or BDF (stiff)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'with_jacobian : bool This option is only considered when the user has not supplied
    a Jacobian function and has not indicated (by setting either band) that the Jacobian
    is banded. In this case, *with_jacobian* specifies whether the iteration method
    of the ODE solver’s correction step is chord iteration with an internally generated
    full Jacobian or functional iteration with no Jacobian.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'nsteps : int Maximum number of (internally defined) steps allowed during one
    call to the solver.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'first_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'min_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_step : float Limits for the step sizes used by the integrator.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'order : int Maximum order used by the integrator, order <= 12 for Adams, <=
    5 for BDF.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: “zvode”
  prefs: []
  type: TYPE_NORMAL
- en: Complex-valued Variable-coefficient Ordinary Differential Equation solver, with
    fixed-leading-coefficient implementation. It provides implicit Adams method (for
    non-stiff problems) and a method based on backward differentiation formulas (BDF)
    (for stiff problems).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Source: [http://www.netlib.org/ode/zvode.f](http://www.netlib.org/ode/zvode.f)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This integrator is not re-entrant. You cannot have two [`ode`](#scipy.integrate.ode
    "scipy.integrate.ode") instances using the “zvode” integrator at the same time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This integrator accepts the same parameters in [`set_integrator`](scipy.integrate.ode.set_integrator.html#scipy.integrate.ode.set_integrator
    "scipy.integrate.ode.set_integrator") as the “vode” solver.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When using ZVODE for a stiff system, it should only be used for the case in
    which the function f is analytic, that is, when each f(i) is an analytic function
    of each y(j). Analyticity means that the partial derivative df(i)/dy(j) is a unique
    complex number, and this fact is critical in the way ZVODE solves the dense or
    banded linear systems that arise in the stiff case. For a complex stiff ODE system
    in which f is not analytic, ZVODE is likely to have convergence failures, and
    for this problem one should instead use DVODE on the equivalent real system (in
    the real and imaginary parts of y).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “lsoda”
  prefs: []
  type: TYPE_NORMAL
- en: Real-valued Variable-coefficient Ordinary Differential Equation solver, with
    fixed-leading-coefficient implementation. It provides automatic method switching
    between implicit Adams method (for non-stiff problems) and a method based on backward
    differentiation formulas (BDF) (for stiff problems).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Source: [http://www.netlib.org/odepack](http://www.netlib.org/odepack)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This integrator is not re-entrant. You cannot have two [`ode`](#scipy.integrate.ode
    "scipy.integrate.ode") instances using the “lsoda” integrator at the same time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This integrator accepts the following parameters in [`set_integrator`](scipy.integrate.ode.set_integrator.html#scipy.integrate.ode.set_integrator
    "scipy.integrate.ode.set_integrator") method of the [`ode`](#scipy.integrate.ode
    "scipy.integrate.ode") class:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'atol : float or sequence absolute tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'rtol : float or sequence relative tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'lband : None or int'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'uband : None or int Jacobian band width, jac[i,j] != 0 for i-lband <= j <=
    i+uband. Setting these requires your jac routine to return the jacobian in packed
    format, jac_packed[i-j+uband, j] = jac[i,j].'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'with_jacobian : bool *Not used.*'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'nsteps : int Maximum number of (internally defined) steps allowed during one
    call to the solver.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'first_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'min_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_step : float Limits for the step sizes used by the integrator.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_order_ns : int Maximum order used in the nonstiff case (default 12).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_order_s : int Maximum order used in the stiff case (default 5).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_hnil : int Maximum number of messages reporting too small step size (t
    + h = t) (default 0)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ixpr : int Whether to generate extra printing at method switches (default False).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: “dopri5”
  prefs: []
  type: TYPE_NORMAL
- en: This is an explicit runge-kutta method of order (4)5 due to Dormand & Prince
    (with stepsize control and dense output).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Authors:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'E. Hairer and G. Wanner Universite de Geneve, Dept. de Mathematiques CH-1211
    Geneve 24, Switzerland e-mail: [ernst.hairer@math.unige.ch](mailto:ernst.hairer%40math.unige.ch),
    [gerhard.wanner@math.unige.ch](mailto:gerhard.wanner%40math.unige.ch)'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This code is described in [[HNW93]](#rcd9e153b6bcf-hnw93).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This integrator accepts the following parameters in set_integrator() method
    of the ode class:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'atol : float or sequence absolute tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'rtol : float or sequence relative tolerance for solution'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'nsteps : int Maximum number of (internally defined) steps allowed during one
    call to the solver.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'first_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'max_step : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'safety : float Safety factor on new step selection (default 0.9)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ifactor : float'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'dfactor : float Maximum factor to increase/decrease step size by in one step'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'beta : float Beta parameter for stabilised step size control.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'verbosity : int Switch for printing messages (< 0 for no messages).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: “dop853”
  prefs: []
  type: TYPE_NORMAL
- en: This is an explicit runge-kutta method of order 8(5,3) due to Dormand & Prince
    (with stepsize control and dense output).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Options and references the same as “dopri5”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[HNW93](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: E. Hairer, S.P. Norsett and G. Wanner, Solving Ordinary Differential Equations
    i. Nonstiff Problems. 2nd edition. Springer Series in Computational Mathematics,
    Springer-Verlag (1993)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'A problem to integrate and the corresponding jacobian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**float'
  prefs: []
  type: TYPE_NORMAL
- en: Current time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current variable values.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`get_return_code`](scipy.integrate.ode.get_return_code.html#scipy.integrate.ode.get_return_code
    "scipy.integrate.ode.get_return_code")() | Extracts the return code for the integration
    to enable better control if the integration fails. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.integrate.ode.integrate.html#scipy.integrate.ode.integrate
    "scipy.integrate.ode.integrate")(t[, step, relax]) | Find y=y(t), set y as an
    initial condition, and return y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_f_params`](scipy.integrate.ode.set_f_params.html#scipy.integrate.ode.set_f_params
    "scipy.integrate.ode.set_f_params")(*args) | Set extra parameters for user-supplied
    function f. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_initial_value`](scipy.integrate.ode.set_initial_value.html#scipy.integrate.ode.set_initial_value
    "scipy.integrate.ode.set_initial_value")(y[, t]) | Set initial conditions y(t)
    = y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_integrator`](scipy.integrate.ode.set_integrator.html#scipy.integrate.ode.set_integrator
    "scipy.integrate.ode.set_integrator")(name, **integrator_params) | Set integrator
    by name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_jac_params`](scipy.integrate.ode.set_jac_params.html#scipy.integrate.ode.set_jac_params
    "scipy.integrate.ode.set_jac_params")(*args) | Set extra parameters for user-supplied
    function jac. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_solout`](scipy.integrate.ode.set_solout.html#scipy.integrate.ode.set_solout
    "scipy.integrate.ode.set_solout")(solout) | Set callable to be called at every
    successful integration step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`successful`](scipy.integrate.ode.successful.html#scipy.integrate.ode.successful
    "scipy.integrate.ode.successful")() | Check if integration was successful. |'
  prefs: []
  type: TYPE_TB
