["```py\nscipy.signal.welch(x, fs=1.0, window='hann', nperseg=None, noverlap=None, nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=-1, average='mean')\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng() \n```", "```py\n>>> fs = 10e3\n>>> N = 1e5\n>>> amp = 2*np.sqrt(2)\n>>> freq = 1234.0\n>>> noise_power = 0.001 * fs / 2\n>>> time = np.arange(N) / fs\n>>> x = amp*np.sin(2*np.pi*freq*time)\n>>> x += rng.normal(scale=np.sqrt(noise_power), size=time.shape) \n```", "```py\n>>> f, Pxx_den = signal.welch(x, fs, nperseg=1024)\n>>> plt.semilogy(f, Pxx_den)\n>>> plt.ylim([0.5e-3, 1])\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('PSD [V**2/Hz]')\n>>> plt.show() \n```", "```py\n>>> np.mean(Pxx_den[256:])\n0.0009924865443739191 \n```", "```py\n>>> f, Pxx_spec = signal.welch(x, fs, 'flattop', 1024, scaling='spectrum')\n>>> plt.figure()\n>>> plt.semilogy(f, np.sqrt(Pxx_spec))\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('Linear spectrum [V RMS]')\n>>> plt.show() \n```", "```py\n>>> np.sqrt(Pxx_spec.max())\n2.0077340678640727 \n```", "```py\n>>> x[int(N//2):int(N//2)+10] *= 50.\n>>> f, Pxx_den = signal.welch(x, fs, nperseg=1024)\n>>> f_med, Pxx_den_med = signal.welch(x, fs, nperseg=1024, average='median')\n>>> plt.semilogy(f, Pxx_den, label='mean')\n>>> plt.semilogy(f_med, Pxx_den_med, label='median')\n>>> plt.ylim([0.5e-3, 1])\n>>> plt.xlabel('frequency [Hz]')\n>>> plt.ylabel('PSD [V**2/Hz]')\n>>> plt.legend()\n>>> plt.show() \n```"]