- en: numpy.diagonal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.diagonal.html](https://numpy.org/doc/1.26/reference/generated/numpy.diagonal.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return specified diagonals.
  prefs: []
  type: TYPE_NORMAL
- en: If *a* is 2-D, returns the diagonal of *a* with the given offset, i.e., the
    collection of elements of the form `a[i, i+offset]`. If *a* has more than two
    dimensions, then the axes specified by *axis1* and *axis2* are used to determine
    the 2-D sub-array whose diagonal is returned. The shape of the resulting array
    can be determined by removing *axis1* and *axis2* and appending an index to the
    right equal to the size of the resulting diagonals.
  prefs: []
  type: TYPE_NORMAL
- en: In versions of NumPy prior to 1.7, this function always returned a new, independent
    array containing a copy of the values in the diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: In NumPy 1.7 and 1.8, it continues to return a copy of the diagonal, but depending
    on this fact is deprecated. Writing to the resulting array continues to work as
    it used to, but a FutureWarning is issued.
  prefs: []
  type: TYPE_NORMAL
- en: Starting in NumPy 1.9 it returns a read-only view on the original array. Attempting
    to write to the resulting array will produce an error.
  prefs: []
  type: TYPE_NORMAL
- en: In some future release, it will return a read/write view and writing to the
    returned array will alter your original array. The returned array will have the
    same type as the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t write to the array returned by this function, then you can just
    ignore all of the above.
  prefs: []
  type: TYPE_NORMAL
- en: If you depend on the current behavior, then we suggest copying the returned
    array explicitly, i.e., use `np.diagonal(a).copy()` instead of just `np.diagonal(a)`.
    This will work with both past and future versions of NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array from which the diagonals are taken.
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Offset of the diagonal from the main diagonal. Can be positive or negative.
    Defaults to main diagonal (0).
  prefs: []
  type: TYPE_NORMAL
- en: '**axis1**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals
    should be taken. Defaults to first axis (0).
  prefs: []
  type: TYPE_NORMAL
- en: '**axis2**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals
    should be taken. Defaults to second axis (1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**array_of_diagonals**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: If *a* is 2-D, then a 1-D array containing the diagonal and of the same type
    as *a* is returned unless *a* is a [`matrix`](numpy.matrix.html#numpy.matrix "numpy.matrix"),
    in which case a 1-D array rather than a (2-D) [`matrix`](numpy.matrix.html#numpy.matrix
    "numpy.matrix") is returned in order to maintain backward compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: If `a.ndim > 2`, then the dimensions specified by *axis1* and *axis2* are removed,
    and a new axis inserted at the end corresponding to the diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If the dimension of *a* is less than 2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`diag`](numpy.diag.html#numpy.diag "numpy.diag")'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB work-a-like for 1-D and 2-D arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[`diagflat`](numpy.diagflat.html#numpy.diagflat "numpy.diagflat")'
  prefs: []
  type: TYPE_NORMAL
- en: Create diagonal arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[`trace`](numpy.trace.html#numpy.trace "numpy.trace")'
  prefs: []
  type: TYPE_NORMAL
- en: Sum along diagonals.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A 3-D example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The sub-arrays whose main diagonals we just obtained; note that each corresponds
    to fixing the right-most (column) axis, and that the diagonals are “packed” in
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The anti-diagonal can be obtained by reversing the order of elements using either
    [`numpy.flipud`](numpy.flipud.html#numpy.flipud "numpy.flipud") or [`numpy.fliplr`](numpy.fliplr.html#numpy.fliplr
    "numpy.fliplr").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note that the order in which the diagonal is retrieved varies depending on the
    flip function.
  prefs: []
  type: TYPE_NORMAL
