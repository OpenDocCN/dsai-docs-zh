- en: CPU/SIMD Optimizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/simd/index.html](https://numpy.org/doc/1.26/reference/simd/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NumPy comes with a flexible working mechanism that allows it to harness the
    SIMD features that CPUs own, in order to provide faster and more stable performance
    on all popular platforms. Currently, NumPy supports the X86, IBM/Power, ARM7 and
    ARM8 architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The optimization process in NumPy is carried out in three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Code is *written* using the universal intrinsics which is a set of types, macros
    and functions that are mapped to each supported instruction-sets by using guards
    that will enable use of the them only when the compiler recognizes them. This
    allow us to generate multiple kernels for the same functionality, in which each
    generated kernel represents a set of instructions that related one or multiple
    certain CPU features. The first kernel represents the minimum (baseline) CPU features,
    and the other kernels represent the additional (dispatched) CPU features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At *compile* time, CPU build options are used to define the minimum and additional
    features to support, based on user choice and compiler support. The appropriate
    intrinsics are overlaid with the platform / architecture intrinsics, and multiple
    kernels are compiled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At *runtime import*, the CPU is probed for the set of supported CPU features.
    A mechanism is used to grab the pointer to the most appropriate kernel, and this
    will be the one called for the function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: NumPy community had a deep discussion before implementing this work, please
    check [NEP-38](https://numpy.org/neps/nep-0038-SIMD-optimizations.html) for more
    clarification.
  prefs: []
  type: TYPE_NORMAL
- en: '[CPU build options](build-options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Description](build-options.html#description)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Quick Start](build-options.html#quick-start)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[I am building NumPy for my local use](build-options.html#i-am-building-numpy-for-my-local-use)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[I do not want to support the old processors of the *x86* architecture](build-options.html#i-do-not-want-to-support-the-old-processors-of-the-x86-architecture)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[I’m facing the same case above but with *ppc64* architecture](build-options.html#i-m-facing-the-same-case-above-but-with-ppc64-architecture)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Having issues with *AVX512* features?](build-options.html#having-issues-with-avx512-features)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Supported Features](build-options.html#supported-features)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On x86](build-options.html#on-x86)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On IBM/POWER big-endian](build-options.html#on-ibm-power-big-endian)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On IBM/POWER little-endian](build-options.html#on-ibm-power-little-endian)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On ARMv7/A32](build-options.html#on-armv7-a32)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On ARMv8/A64](build-options.html#on-armv8-a64)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On IBM/ZSYSTEM(S390X)](build-options.html#on-ibm-zsystem-s390x)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Special Options](build-options.html#special-options)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Behaviors](build-options.html#behaviors)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Platform differences](build-options.html#platform-differences)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On x86::Intel Compiler](build-options.html#on-x86-intel-compiler)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[On x86::Microsoft Visual C/C++](build-options.html#on-x86-microsoft-visual-c-c)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build report](build-options.html#build-report)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Runtime dispatch](build-options.html#runtime-dispatch)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How does the CPU dispatcher work?](how-it-works.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1- Configuration](how-it-works.html#configuration)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[2- Discovering the environment](how-it-works.html#discovering-the-environment)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3- Validating the requested optimizations](how-it-works.html#validating-the-requested-optimizations)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4- Generating the main configuration header](how-it-works.html#generating-the-main-configuration-header)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5- Dispatch-able sources and configuration statements](how-it-works.html#dispatch-able-sources-and-configuration-statements)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
