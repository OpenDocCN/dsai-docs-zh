- en: Points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/geometry/points.html](https://docs.sympy.org/latest/modules/geometry/points.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A point in a n-dimensional Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coords** : sequence of n-coordinate values. In the special'
  prefs: []
  type: TYPE_NORMAL
- en: case where n=2 or 3, a Point2D or Point3D will be created as appropriate.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : if \(True\) (default), all floats are turn into'
  prefs: []
  type: TYPE_NORMAL
- en: exact types.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dim** : number of coordinates the point should have. If coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: are unspecified, they are padded with zeros.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**on_morph** : indicates what should happen when the number of'
  prefs: []
  type: TYPE_NORMAL
- en: coordinates of a point need to be changed by adding or removing zeros. Possible
    values are \('warn'\), \('error'\), or \(ignore\) (default). No warning or error
    is given when \(*args\) is empty and \(dim\) is given. An error is always raised
    when trying to remove nonzero coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError** : When instantiating with anything but a Point or sequence'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError** : when instantiating with a sequence with length < 2 or'
  prefs: []
  type: TYPE_NORMAL
- en: when trying to reduce dimensions if keyword \(on_morph='error'\) is set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Floats are automatically converted to Rational unless the evaluate flag is
    False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment")'
  prefs: []
  type: TYPE_NORMAL
- en: Connects two Points
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| length |  |'
  prefs: []
  type: TYPE_TB
- en: '| origin: A \(Point\) representing the origin of the | appropriately-dimensioned
    space. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The affine rank of a set of points is the dimension of the smallest affine space
    containing all the points. For example, if the points lie on a line (and are not
    all the same) their affine rank is 1\. If the points lie on a plane but not a
    line, their affine rank is 2\. By convention, the empty set has affine rank -1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Number of components this point has.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return True if there exists a plane in which all the points lie. A trivial True
    value is returned if \(len(points) < 3\) or all Points are 2-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A set of points**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: boolean
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError** : if less than 3 unique points are given'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Canberra Distance from self to point p.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the weighted sum of horizontal and vertical distances to point p.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**canberra_distance** : The weighted sum of horizontal and vertical'
  prefs: []
  type: TYPE_NORMAL
- en: distances to point p. The weight used is the sum of absolute values
  prefs: []
  type: TYPE_NORMAL
- en: of the coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError when both vectors are zero.**'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.distance`](#sympy.geometry.point.Point.distance
    "sympy.geometry.point.Point.distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Euclidean distance between self and another GeometricEntity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**distance** : number or symbolic expression.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError** : if other is not recognized as a GeometricEntity or is a'
  prefs: []
  type: TYPE_NORMAL
- en: GeometricEntity for which distance is not defined.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The computed distance may be symbolic, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.length`](lines.html#sympy.geometry.line.Segment.length
    "sympy.geometry.line.Segment.length"), [`sympy.geometry.point.Point.taxicab_distance`](#sympy.geometry.point.Point.taxicab_distance
    "sympy.geometry.point.Point.taxicab_distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return dot product of self with another Point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Returns whether the coordinates of self and other agree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The intersection between this point and another GeometryEntity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : GeometryEntity or sequence of coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** : list of Points'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The return value will either be an empty list if there is no intersection, otherwise
    it will contain this point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns \(True\) if there exists a line that contains \(self\) and \(points\).
    Returns \(False\) otherwise. A trivially True value is returned if no points are
    given.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : sequence of Points'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_collinear** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line`](lines.html#sympy.geometry.line.Line "sympy.geometry.line.Line")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Do \(self\) and the given sequence of points lie in a circle?
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if the set of points are concyclic and False otherwise. A trivial
    value of True is returned if there are fewer than 2 other points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : sequence of Points'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_concyclic** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define 4 points that are on the unit circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a point not on that circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: True if any coordinate is nonzero, False if every coordinate is zero, and None
    if it cannot be determined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Returns whether each coordinate of \(self\) is a scalar multiple of the corresponding
    coordinate in point p.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: True if every coordinate is zero, False if any coordinate is not zero, and None
    if it cannot be determined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Treating a Point as a Line, this returns 0 for the length of a Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The midpoint between self and point p.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**midpoint** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment.midpoint`](lines.html#sympy.geometry.line.Segment.midpoint
    "sympy.geometry.line.Segment.midpoint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: A point of all zeros of the same ambient dimension as the current point
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Returns a non-zero point that is orthogonal to the line containing \(self\)
    and the origin.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Project the point \(a\) onto the line between the origin and point \(b\) along
    the normal direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: '**b** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.LinearEntity.projection`](lines.html#sympy.geometry.line.LinearEntity.projection
    "sympy.geometry.line.LinearEntity.projection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The Taxicab Distance from self to point p.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the sum of the horizontal and vertical distances to point p.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**taxicab_distance** : The sum of the horizontal'
  prefs: []
  type: TYPE_NORMAL
- en: and vertical distances to point p.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point.distance`](#sympy.geometry.point.Point.distance
    "sympy.geometry.point.Point.distance")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Return the Point that is in the same direction as \(self\) and a distance of
    1 from the origin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: A point in a 2-dimensional Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coords**'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of 2 coordinate values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to add or subtract points with different dimensions. When trying
    to create a point with more than two dimensions. When \(intersection\) is called
    with object other than a Point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Floats are automatically converted to Rational unless the evaluate flag is
    False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Segment`](lines.html#sympy.geometry.line.Segment "sympy.geometry.line.Segment")'
  prefs: []
  type: TYPE_NORMAL
- en: Connects two Points
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| x |  |'
  prefs: []
  type: TYPE_TB
- en: '| y |  |'
  prefs: []
  type: TYPE_TB
- en: '| length |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple (xmin, ymin, xmax, ymax) representing the bounding rectangle
    for the geometric figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Returns the two coordinates of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Rotate `angle` radians counterclockwise about Point `pt`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`translate`](#sympy.geometry.point.Point2D.translate "sympy.geometry.point.Point2D.translate"),
    [`scale`](#sympy.geometry.point.Point2D.scale "sympy.geometry.point.Point2D.scale")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Scale the coordinates of the Point by multiplying by `x` and `y` after subtracting
    `pt` – default is (0, 0) – and then adding `pt` back again (i.e. `pt` is the point
    of reference for the scaling).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rotate`](#sympy.geometry.point.Point2D.rotate "sympy.geometry.point.Point2D.rotate"),
    [`translate`](#sympy.geometry.point.Point2D.translate "sympy.geometry.point.Point2D.translate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Return the point after applying the transformation described by the 3x3 Matrix,
    `matrix`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point2D.rotate`](#sympy.geometry.point.Point2D.rotate
    "sympy.geometry.point.Point2D.rotate"), [`sympy.geometry.point.Point2D.scale`](#sympy.geometry.point.Point2D.scale
    "sympy.geometry.point.Point2D.scale"), [`sympy.geometry.point.Point2D.translate`](#sympy.geometry.point.Point2D.translate
    "sympy.geometry.point.Point2D.translate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Shift the Point by adding x and y to the coordinates of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point2D.rotate`](#sympy.geometry.point.Point2D.rotate
    "sympy.geometry.point.Point2D.rotate"), [`scale`](#sympy.geometry.point.Point2D.scale
    "sympy.geometry.point.Point2D.scale")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Returns the X coordinate of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Y coordinate of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: A point in a 3-dimensional Euclidean space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coords**'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence of 3 coordinate values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError**'
  prefs: []
  type: TYPE_NORMAL
- en: When trying to add or subtract points with different dimensions. When \(intersection\)
    is called with object other than a Point.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Floats are automatically converted to Rational unless the evaluate flag is
    False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| x |  |'
  prefs: []
  type: TYPE_TB
- en: '| y |  |'
  prefs: []
  type: TYPE_TB
- en: '| z |  |'
  prefs: []
  type: TYPE_TB
- en: '| length |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Is a sequence of points collinear?
  prefs: []
  type: TYPE_NORMAL
- en: Test whether or not a set of points are collinear. Returns True if the set of
    points are collinear, or False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** : sequence of Point'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**are_collinear** : boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.line.Line3D`](lines.html#sympy.geometry.line.Line3D "sympy.geometry.line.Line3D")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Returns the three coordinates of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Gives the direction cosine between 2 points
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Gives the direction ratio between 2 points
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p** : Point3D'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The intersection between this point and another GeometryEntity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** : GeometryEntity or sequence of coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**intersection** : list of Points'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The return value will either be an empty list if there is no intersection, otherwise
    it will contain this point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Scale the coordinates of the Point by multiplying by `x` and `y` after subtracting
    `pt` – default is (0, 0) – and then adding `pt` back again (i.e. `pt` is the point
    of reference for the scaling).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`translate`](#sympy.geometry.point.Point3D.translate "sympy.geometry.point.Point3D.translate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Return the point after applying the transformation described by the 4x4 Matrix,
    `matrix`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.geometry.point.Point3D.scale`](#sympy.geometry.point.Point3D.scale
    "sympy.geometry.point.Point3D.scale"), [`sympy.geometry.point.Point3D.translate`](#sympy.geometry.point.Point3D.translate
    "sympy.geometry.point.Point3D.translate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Shift the Point by adding x and y to the coordinates of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scale`](#sympy.geometry.point.Point3D.scale "sympy.geometry.point.Point3D.scale")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Returns the X coordinate of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Y coordinate of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Returns the Z coordinate of the Point.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
