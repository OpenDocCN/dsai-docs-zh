- en: Ask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/assumptions/ask.html](https://docs.sympy.org/latest/modules/assumptions/ask.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Module for querying SymPy objects about assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This class contains all the supported keys by `ask`. It should be accessed via
    the instance `sympy.Q`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Function to evaluate the proposition with assumptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**proposition** : Boolean'
  prefs: []
  type: TYPE_NORMAL
- en: Proposition which will be evaluated to boolean value. If this is not `AppliedPredicate`,
    it will be wrapped by `Q.is_true`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**assumptions** : Boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Local assumptions to evaluate the *proposition*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**context** : AssumptionsContext, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Default assumptions to evaluate the *proposition*. By default, this is `sympy.assumptions.global_assumptions`
    variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True`, `False`, or `None`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeError** : *proposition* or *assumptions* is not valid logical expression.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ValueError** : assumptions are inconsistent.'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function evaluates the proposition to `True` or `False` if the truth value
    can be determined. If not, it returns `None`.
  prefs: []
  type: TYPE_NORMAL
- en: It should be discerned from [`refine()`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine") which, when applied to a proposition, simplifies
    the argument to symbolic `Boolean` instead of Python built-in `True`, `False`
    or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: ask(proposition)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* in global assumption context.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ask(proposition, assumptions)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Evaluate the *proposition* with respect to *assumptions* in global assumption
    context.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the truth value cannot be determined, `None` will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`ValueError` is raised if assumptions are inconsistent.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Relations in assumptions are not implemented (yet), so the following will not
    give a meaningful result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is however a work in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.assumptions.refine.refine`](refine.html#sympy.assumptions.refine.refine
    "sympy.assumptions.refine.refine")'
  prefs: []
  type: TYPE_NORMAL
- en: Simplification using assumptions. Proposition is not reduced to `None` if the
    truth value cannot be determined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Register a handler in the ask system. key must be a string and handler a class
    inheriting from AskHandler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.8.: Use multipledispatch handler instead. See [`Predicate`](assume.html#sympy.assumptions.assume.Predicate
    "sympy.assumptions.assume.Predicate").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Removes a handler from the ask system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.8.: Use multipledispatch handler instead. See [`Predicate`](assume.html#sympy.assumptions.assume.Predicate
    "sympy.assumptions.assume.Predicate").'
  prefs: []
  type: TYPE_NORMAL
