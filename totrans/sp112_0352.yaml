- en: scipy.ndimage.generic_filter1d
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.generic_filter1d.html#scipy.ndimage.generic_filter1d](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.generic_filter1d.html#scipy.ndimage.generic_filter1d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate a 1-D filter along the given axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`generic_filter1d`](#scipy.ndimage.generic_filter1d "scipy.ndimage.generic_filter1d")
    iterates over the lines of the array, calling the given function at each line.
    The arguments of the line are the input line, and the output line. The input and
    output lines are 1-D double arrays. The input line is extended appropriately according
    to the filter size and origin. The output line must be modified in-place with
    the result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**function**{callable, scipy.LowLevelCallable}'
  prefs: []
  type: TYPE_NORMAL
- en: Function to apply along given axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**filter_size**scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the filter.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of *input* along which to calculate. Default is -1.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reflect’, ‘constant’, ‘nearest’, ‘mirror’, ‘wrap’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended beyond its
    boundaries. Default is ‘reflect’. Behavior for each valid value is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'For consistency with the interpolation functions, the following mode names
    can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘wrap’.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the placement of the filter on the input array’s pixels. A value of
    0 (the default) centers the filter over the pixel, with positive values shifting
    the filter to the left, and negative ones to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_arguments**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of extra positional arguments to pass to passed function.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_keywords**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: dict of extra keyword arguments to pass to passed function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**generic_filter1d**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Filtered array. Has the same shape as *input*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function also accepts low-level callback functions with one of the following
    signatures and wrapped in [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The calling function iterates over the lines of the input and output arrays,
    calling the callback function at each line. The current line is extended according
    to the border conditions set by the calling function, and the result is copied
    into the array that is passed through `input_line`. The length of the input line
    (after extension) is passed through `input_length`. The callback function should
    apply the filter and store the result in the array passed through `output_line`.
    The length of the output line is passed through `output_length`. `user_data` is
    the data pointer provided to [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable") as-is.
  prefs: []
  type: TYPE_NORMAL
- en: The callback function must return an integer error status that is zero if something
    went wrong and one otherwise. If an error occurs, you should normally set the
    python error status with an informative message before returning, otherwise a
    default error message is set by the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, some other low-level function pointer specifications are accepted,
    but these are for backward compatibility only and should not be used in new code.
  prefs: []
  type: TYPE_NORMAL
