["```py\nclass sympy.combinatorics.perm_groups.PermutationGroup(*args, dups=True, **kwargs)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> from sympy.combinatorics import Polyhedron \n```", "```py\n>>> F = Permutation(2, 19, 21, 8)(3, 17, 20, 10)(4, 6, 7, 5)\n>>> R = Permutation(1, 5, 21, 14)(3, 7, 23, 12)(8, 10, 11, 9)\n>>> D = Permutation(6, 18, 14, 10)(7, 19, 15, 11)(20, 22, 23, 21) \n```", "```py\n>>> G = PermutationGroup(F, R, D)\n>>> G.order()\n3674160 \n```", "```py\n>>> a = Permutation(2, 1)\n>>> b = Permutation(1, 0)\n>>> G = PermutationGroup(a, b)\n>>> P = Polyhedron(list('ABC'), pgroup=G)\n>>> P.corners\n(A, B, C)\n>>> P.rotate(0) # apply permutation 0\n>>> P.corners\n(A, C, B)\n>>> P.reset()\n>>> P.corners\n(A, B, C) \n```", "```py\n>>> P10 = G.make_perm([0, 1])\n>>> P10('ABC')\n['C', 'A', 'B'] \n```", "```py\n__contains__(i)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> p = Permutation(1, 2, 3)\n>>> Permutation(3) in PermutationGroup(p)\nTrue \n```", "```py\n__mul__(other)\n```", "```py\n>>> from sympy.combinatorics.named_groups import CyclicGroup\n>>> G = CyclicGroup(5)\n>>> H = G*G\n>>> H\nPermutationGroup([\n (9)(0 1 2 3 4),\n (5 6 7 8 9)])\n>>> H.order()\n25 \n```", "```py\nstatic __new__(cls, *args, dups=True, **kwargs)\n```", "```py\n__weakref__\n```", "```py\n_coset_representative(g, H)\n```", "```py\nclassmethod _distinct_primes_lemma(primes)\n```", "```py\n_eval_is_alt_sym_monte_carlo(eps=0.05, perms=None)\n```", "```py\n_eval_is_alt_sym_naive(only_sym=False, only_alt=False)\n```", "```py\n_p_elements_group(p)\n```", "```py\n_random_pr_init(r, n, _random_prec_n=None)\n```", "```py\n_sylow_alt_sym(p)\n```", "```py\n_union_find_merge(first, second, ranks, parents, not_rep)\n```", "```py\n_union_find_rep(num, parents)\n```", "```py\n_verify(K, phi, z, alpha)\n```", "```pygens`_h` that are mapped to ``H.generators```", "```py\n>>> from sympy.combinatorics import free_group, Permutation, PermutationGroup\n>>> from sympy.combinatorics.homomorphisms import homomorphism\n>>> from sympy.combinatorics.fp_groups import FpGroup \n```", "```py\n>>> H = PermutationGroup(Permutation(0, 2), Permutation (1, 5))\n>>> K = PermutationGroup(Permutation(5)(0, 2))\n>>> F = free_group(\"x_0 x_1\")[0]\n>>> gens = F.generators\n>>> phi = homomorphism(F, H, F.generators, H.generators)\n>>> rels_k = [gens[0]**2] # relators for presentation of K\n>>> z= Permutation(1, 5)\n>>> check, rels_h = H._verify(K, phi, z, 1)\n>>> check\nTrue\n>>> rels = rels_k + rels_h\n>>> G = FpGroup(F, rels) # presentation of H\n>>> G.order() == H.order()\nTrue \n```", "```py\nabelian_invariants()\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.abelian_invariants()\n[2]\n>>> from sympy.combinatorics import CyclicGroup\n>>> G = CyclicGroup(7)\n>>> G.abelian_invariants()\n[7] \n```", "```py\nproperty base\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> G = PermutationGroup([Permutation(0, 1, 3)(2, 4)])\n>>> G.base\n[0, 2] \n```", "```py\nbaseswap(base, strong_gens, pos, randomized=False, transversals=None, basic_orbits=None, strong_gens_distr=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> from sympy.combinatorics.perm_groups import PermutationGroup\n>>> S = SymmetricGroup(4)\n>>> S.schreier_sims()\n>>> S.base\n[0, 1, 2]\n>>> base, gens = S.baseswap(S.base, S.strong_gens, 1, randomized=False)\n>>> base, gens\n([0, 2, 1],\n[(0 1 2 3), (3)(0 1), (1 3 2),\n (2 3), (1 3)]) \n```", "```py\n>>> S1 = PermutationGroup(gens)\n>>> _verify_bsgs(S1, base, gens)\nTrue \n```", "```py\nproperty basic_orbits\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> S = SymmetricGroup(4)\n>>> S.basic_orbits\n[[0, 1, 2, 3], [1, 2, 3], [2, 3]] \n```", "```py\nproperty basic_stabilizers\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> A = AlternatingGroup(4)\n>>> A.schreier_sims()\n>>> A.base\n[0, 1]\n>>> for g in A.basic_stabilizers:\n...     print(g)\n...\nPermutationGroup([\n (3)(0 1 2),\n (1 2 3)])\nPermutationGroup([\n (1 2 3)]) \n```", "```py\nproperty basic_transversals\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> A = AlternatingGroup(4)\n>>> A.basic_transversals\n[{0: (3), 1: (3)(0 1 2), 2: (3)(0 2 1), 3: (0 3 1)}, {1: (3), 2: (1 2 3), 3: (1 3 2)}] \n```", "```py\ncenter()\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> D = DihedralGroup(4)\n>>> G = D.center()\n>>> G.order()\n2 \n```", "```py\ncentralizer(other)\n```", "```py\n`C_G(S) = \\{ g \\in G | gs = sg \\forall s \\in S\\}` ([10]) \n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... CyclicGroup)\n>>> S = SymmetricGroup(6)\n>>> C = CyclicGroup(6)\n>>> H = S.centralizer(C)\n>>> H.is_subgroup(C)\nTrue \n```", "```py\ncommutator(G, H)\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... AlternatingGroup)\n>>> S = SymmetricGroup(5)\n>>> A = AlternatingGroup(5)\n>>> G = S.commutator(S, A)\n>>> G.is_subgroup(A)\nTrue \n```", "```py\ncomposition_series()\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> from sympy.combinatorics.named_groups import CyclicGroup\n>>> S = SymmetricGroup(12)\n>>> G = S.sylow_subgroup(2)\n>>> C = G.composition_series()\n>>> [H.order() for H in C]\n[1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]\n>>> G = S.sylow_subgroup(3)\n>>> C = G.composition_series()\n>>> [H.order() for H in C]\n[243, 81, 27, 9, 3, 1]\n>>> G = CyclicGroup(12)\n>>> C = G.composition_series()\n>>> [H.order() for H in C]\n[12, 6, 3, 1] \n```", "```py\nconjugacy_class(x)\n```", "```py\n>>> from sympy.combinatorics import Permutation, SymmetricGroup\n>>> S3 = SymmetricGroup(3)\n>>> S3.conjugacy_class(Permutation(0, 1, 2))\n{(0 1 2), (0 2 1)} \n```", "```py\nconjugacy_classes()\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> SymmetricGroup(3).conjugacy_classes()\n[{(2)}, {(0 1 2), (0 2 1)}, {(0 2), (1 2), (2)(0 1)}] \n```", "```py\ncontains(g, strict=True)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup \n```", "```py\n>>> a = Permutation(1, 2)\n>>> b = Permutation(2, 3, 1)\n>>> G = PermutationGroup(a, b, degree=5)\n>>> G.contains(G[0]) # trivial check\nTrue\n>>> elem = Permutation([[2, 3]], size=5)\n>>> G.contains(elem)\nTrue\n>>> G.contains(Permutation(4)(0, 1, 2, 3))\nFalse \n```", "```py\n>>> H = PermutationGroup(Permutation(5))\n>>> H.contains(Permutation(3))\nFalse\n>>> H.contains(Permutation(3), strict=False)\nTrue \n```", "```py\n>>> elem in G.generators\nFalse\n>>> G.has(elem)\nFalse \n```", "```py\ncoset_factor(g, factor_index=False)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation(0, 1, 3, 7, 6, 4)(2, 5)\n>>> b = Permutation(0, 1, 3, 2)(4, 5, 7, 6)\n>>> G = PermutationGroup([a, b]) \n```", "```py\n>>> g = Permutation(7)(1, 2, 4)(3, 6, 5) \n```", "```py\n>>> G.contains(g)\nTrue \n```", "```py\n>>> f = G.coset_factor(g)\n>>> f[2]*f[1]*f[0] == g\nTrue\n>>> f1 = G.coset_factor(g, True); f1\n[0, 4, 4]\n>>> tr = G.basic_transversals\n>>> f[0] == tr[0][f1[0]]\nTrue \n```", "```py\n>>> c = Permutation(5, 6, 7)\n>>> G.coset_factor(c)\n[] \n```", "```py\ncoset_rank(g)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation(0, 1, 3, 7, 6, 4)(2, 5)\n>>> b = Permutation(0, 1, 3, 2)(4, 5, 7, 6)\n>>> G = PermutationGroup([a, b])\n>>> c = Permutation(7)(2, 4)(3, 5)\n>>> G.coset_rank(c)\n16\n>>> G.coset_unrank(16)\n(7)(2 4)(3 5) \n```", "```py\ncoset_table(H)\n```", "```py\ncoset_transversal(H)\n```", "```py\ncoset_unrank(rank, af=False)\n```", "```py\nproperty degree\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a])\n>>> G.degree\n3\n>>> len(G)\n1\n>>> G.order()\n2\n>>> list(G.generate())\n[(2), (2)(0 1)] \n```", "```py\nderived_series()\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... AlternatingGroup, DihedralGroup)\n>>> A = AlternatingGroup(5)\n>>> len(A.derived_series())\n1\n>>> S = SymmetricGroup(4)\n>>> len(S.derived_series())\n4\n>>> S.derived_series()[1].is_subgroup(AlternatingGroup(4))\nTrue\n>>> S.derived_series()[2].is_subgroup(DihedralGroup(2))\nTrue \n```", "```py\nderived_subgroup()\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([1, 0, 2, 4, 3])\n>>> b = Permutation([0, 1, 3, 2, 4])\n>>> G = PermutationGroup([a, b])\n>>> C = G.derived_subgroup()\n>>> list(C.generate(af=True))\n[[0, 1, 2, 3, 4], [0, 1, 3, 4, 2], [0, 1, 4, 2, 3]] \n```", "```py\nproperty elements\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> p = PermutationGroup(Permutation(1, 3), Permutation(1, 2))\n>>> p.elements\n[(3), (3)(1 2), (1 3), (2 3), (1 2 3), (1 3 2)] \n```", "```py\nequals(other)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> p = Permutation(0, 1, 2, 3, 4, 5)\n>>> G = PermutationGroup([p, p**2])\n>>> H = PermutationGroup([p**2, p])\n>>> G.generators == H.generators\nFalse\n>>> G.equals(H)\nTrue \n```", "```py\ngenerate(method='coset', af=False)\n```", "```py\nmethod='coset'  using the Schreier-Sims coset representation\nmethod='dimino' using the Dimino method \n```", "```py\n>>> from sympy.combinatorics import PermutationGroup\n>>> from sympy.combinatorics.polyhedron import tetrahedron \n```", "```py\n>>> G = tetrahedron.pgroup\n>>> G.is_group\nTrue \n```", "```py\n>>> H = PermutationGroup(G[0], G[1])\n>>> J = PermutationGroup(list(H.generate())); J\nPermutationGroup([\n (0 1)(2 3),\n (1 2 3),\n (1 3 2),\n (0 3 1),\n (0 2 3),\n (0 3)(1 2),\n (0 1 3),\n (3)(0 2 1),\n (0 3 2),\n (3)(0 1 2),\n (0 2)(1 3)])\n>>> _.is_group\nTrue \n```", "```py\ngenerate_dimino(af=False)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1, 3])\n>>> b = Permutation([0, 2, 3, 1])\n>>> g = PermutationGroup([a, b])\n>>> list(g.generate_dimino(af=True))\n[[0, 1, 2, 3], [0, 2, 1, 3], [0, 2, 3, 1],\n [0, 1, 3, 2], [0, 3, 2, 1], [0, 3, 1, 2]] \n```", "```py\ngenerate_schreier_sims(af=False)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1, 3])\n>>> b = Permutation([0, 2, 3, 1])\n>>> g = PermutationGroup([a, b])\n>>> list(g.generate_schreier_sims(af=True))\n[[0, 1, 2, 3], [0, 2, 1, 3], [0, 3, 2, 1],\n [0, 1, 3, 2], [0, 2, 3, 1], [0, 3, 1, 2]] \n```", "```py\ngenerator_product(g, original=False)\n```", "```py\nproperty generators\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.generators\n[(1 2), (2)(0 1)] \n```", "```py\nproperty identity\n```", "```py\nindex(H)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation(1,2,3)\n>>> b =Permutation(3)\n>>> G = PermutationGroup([a])\n>>> H = PermutationGroup([b])\n>>> G.index(H)\n3 \n```", "```py\nproperty is_abelian\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.is_abelian\nFalse\n>>> a = Permutation([0, 2, 1])\n>>> G = PermutationGroup([a])\n>>> G.is_abelian\nTrue \n```", "```py\nis_alt_sym(eps=0.05, _random_prec=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> D = DihedralGroup(10)\n>>> D.is_alt_sym()\nFalse \n```", "```py\nproperty is_alternating\n```", "```py\n>>> from sympy.combinatorics import AlternatingGroup\n>>> g = AlternatingGroup(5)\n>>> g.is_alternating\nTrue \n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> g = PermutationGroup(\n...     Permutation(0, 1, 2, 3, 4),\n...     Permutation(2, 3, 4))\n>>> g.is_alternating\nTrue \n```", "```py\nproperty is_cyclic\n```", "```py\n>>> from sympy.combinatorics.named_groups import AbelianGroup\n>>> G = AbelianGroup(3, 4)\n>>> G.is_cyclic\nTrue\n>>> G = AbelianGroup(4, 4)\n>>> G.is_cyclic\nFalse \n```", "```py\nproperty is_dihedral\n```", "```py\n>>> from sympy.combinatorics.perm_groups import PermutationGroup\n>>> from sympy.combinatorics.permutations import Permutation\n>>> from sympy.combinatorics.named_groups import SymmetricGroup, CyclicGroup\n>>> G = PermutationGroup(Permutation(1, 6)(2, 5)(3, 4), Permutation(0, 1, 2, 3, 4, 5, 6))\n>>> G.is_dihedral\nTrue\n>>> G = SymmetricGroup(3)\n>>> G.is_dihedral\nTrue\n>>> G = CyclicGroup(6)\n>>> G.is_dihedral\nFalse \n```", "```py\nis_elementary(p)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1])\n>>> G = PermutationGroup([a])\n>>> G.is_elementary(2)\nTrue\n>>> a = Permutation([0, 2, 1, 3])\n>>> b = Permutation([3, 1, 2, 0])\n>>> G = PermutationGroup([a, b])\n>>> G.is_elementary(2)\nTrue\n>>> G.is_elementary(3)\nFalse \n```", "```py\nproperty is_nilpotent\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... CyclicGroup)\n>>> C = CyclicGroup(6)\n>>> C.is_nilpotent\nTrue\n>>> S = SymmetricGroup(5)\n>>> S.is_nilpotent\nFalse \n```", "```py\nis_normal(gr, strict=True)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([1, 2, 0])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G1 = PermutationGroup([a, Permutation([2, 0, 1])])\n>>> G1.is_normal(G)\nTrue \n```", "```py\nproperty is_perfect\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation(1,2,3)(4,5)\n>>> b = Permutation(1,2,3,4,5)\n>>> G = PermutationGroup([a, b])\n>>> G.is_perfect\nFalse \n```", "```py\nproperty is_polycyclic\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1, 3])\n>>> b = Permutation([2, 0, 1, 3])\n>>> G = PermutationGroup([a, b])\n>>> G.is_polycyclic\nTrue \n```", "```py\nis_primitive(randomized=True)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> D = DihedralGroup(10)\n>>> D.is_primitive()\nFalse \n```", "```py\nproperty is_solvable\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> S = SymmetricGroup(3)\n>>> S.is_solvable\nTrue \n```", "```py\nis_subgroup(G, strict=True)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> from sympy.combinatorics import SymmetricGroup, CyclicGroup \n```", "```py\n>>> p = Permutation(0, 1, 2, 3, 4, 5)\n>>> G1 = PermutationGroup([Permutation(0, 1, 2), Permutation(0, 1)])\n>>> G2 = PermutationGroup([Permutation(0, 2), Permutation(0, 1, 2)])\n>>> G3 = PermutationGroup([p, p**2])\n>>> assert G1.order() == G2.order() == G3.order() == 6\n>>> G1.is_subgroup(G2)\nTrue\n>>> G1.is_subgroup(G3)\nFalse\n>>> G3.is_subgroup(PermutationGroup(G3[1]))\nFalse\n>>> G3.is_subgroup(PermutationGroup(G3[0]))\nTrue \n```", "```py\n>>> S3 = SymmetricGroup(3)\n>>> S5 = SymmetricGroup(5)\n>>> S3.is_subgroup(S5, strict=False)\nTrue\n>>> C7 = CyclicGroup(7)\n>>> G = S5*C7\n>>> S5.is_subgroup(G, False)\nTrue\n>>> C7.is_subgroup(G, 0)\nFalse \n```", "```py\nproperty is_symmetric\n```", "```py\n>>> from sympy.combinatorics import SymmetricGroup\n>>> g = SymmetricGroup(5)\n>>> g.is_symmetric\nTrue \n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> g = PermutationGroup(\n...     Permutation(0, 1, 2, 3, 4),\n...     Permutation(2, 3))\n>>> g.is_symmetric\nTrue \n```", "```py\nis_transitive(strict=True)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1, 3])\n>>> b = Permutation([2, 0, 1, 3])\n>>> G1 = PermutationGroup([a, b])\n>>> G1.is_transitive()\nFalse\n>>> G1.is_transitive(strict=False)\nTrue\n>>> c = Permutation([2, 3, 0, 1])\n>>> G2 = PermutationGroup([a, c])\n>>> G2.is_transitive()\nTrue\n>>> d = Permutation([1, 0, 2, 3])\n>>> e = Permutation([0, 1, 3, 2])\n>>> G3 = PermutationGroup([d, e])\n>>> G3.is_transitive() or G3.is_transitive(strict=False)\nFalse \n```", "```py\nproperty is_trivial\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> G = PermutationGroup([Permutation([0, 1, 2])])\n>>> G.is_trivial\nTrue \n```", "```py\nlower_central_series()\n```", "```py\n>>> from sympy.combinatorics.named_groups import (AlternatingGroup,\n... DihedralGroup)\n>>> A = AlternatingGroup(4)\n>>> len(A.lower_central_series())\n2\n>>> A.lower_central_series()[1].is_subgroup(DihedralGroup(2))\nTrue \n```", "```py\nmake_perm(n, seed=None)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a, b = [Permutation([1, 0, 3, 2]), Permutation([1, 3, 0, 2])]\n>>> G = PermutationGroup([a, b])\n>>> G.make_perm(1, [0])\n(0 1)(2 3)\n>>> G.make_perm(3, [0, 1, 0])\n(0 2 3 1)\n>>> G.make_perm([0, 1, 0])\n(0 2 3 1) \n```", "```py\nproperty max_div\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> G = PermutationGroup([Permutation([0, 2, 1, 3])])\n>>> G.max_div\n2 \n```", "```py\nminimal_block(points)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> D = DihedralGroup(10)\n>>> D.minimal_block([0, 5])\n[0, 1, 2, 3, 4, 0, 1, 2, 3, 4]\n>>> D.minimal_block([0, 1])\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0] \n```", "```py\nminimal_blocks(randomized=True)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> DihedralGroup(6).minimal_blocks()\n[[0, 1, 0, 1, 0, 1], [0, 1, 2, 0, 1, 2]]\n>>> G = PermutationGroup(Permutation(1,2,5))\n>>> G.minimal_blocks()\nFalse \n```", "```py\nnormal_closure(other, k=10)\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... CyclicGroup, AlternatingGroup)\n>>> S = SymmetricGroup(5)\n>>> C = CyclicGroup(5)\n>>> G = S.normal_closure(C)\n>>> G.order()\n60\n>>> G.is_subgroup(AlternatingGroup(5))\nTrue \n```", "```py\norbit(alpha, action='tuples')\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([1, 2, 0, 4, 5, 6, 3])\n>>> G = PermutationGroup([a])\n>>> G.orbit(0)\n{0, 1, 2}\n>>> G.orbit([0, 4], 'union')\n{0, 1, 2, 3, 4, 5, 6} \n```", "```py\norbit_rep(alpha, beta, schreier_vector=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> G = AlternatingGroup(5)\n>>> G.orbit_rep(0, 4)\n(0 4 1 2 3) \n```", "```py\norbit_transversal(alpha, pairs=False)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> G = DihedralGroup(6)\n>>> G.orbit_transversal(0)\n[(5), (0 1 2 3 4 5), (0 5)(1 4)(2 3), (0 2 4)(1 3 5), (5)(0 4)(1 3), (0 3)(1 4)(2 5)] \n```", "```py\norbits(rep=False)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation(1, 5)(2, 3)(4, 0, 6)\n>>> b = Permutation(1, 5)(3, 4)(2, 6, 0)\n>>> G = PermutationGroup([a, b])\n>>> G.orbits()\n[{0, 2, 3, 4, 6}, {1, 5}] \n```", "```py\norder()\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup \n```", "```py\n>>> a = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a])\n>>> G.degree\n3\n>>> len(G)\n1\n>>> G.order()\n2\n>>> list(G.generate())\n[(2), (2)(0 1)] \n```", "```py\n>>> a = Permutation([0, 2, 1])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.order()\n6 \n```", "```py\npointwise_stabilizer(points, incremental=True)\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> S = SymmetricGroup(7)\n>>> Stab = S.pointwise_stabilizer([2, 3, 5])\n>>> Stab.is_subgroup(S.stabilizer(2).stabilizer(3).stabilizer(5))\nTrue \n```", "```py\npolycyclic_group()\n```", "```py\npresentation(eliminate_gens=True)\n```", "```py\nrandom(af=False)\n```", "```py\nrandom_pr(gen_count=11, iterations=50, _random_prec=None)\n```", "```py\nrandom_stab(alpha, schreier_vector=None, _random_prec=None)\n```", "```py\nschreier_sims()\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([0, 2, 1])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.schreier_sims()\n>>> G.basic_transversals\n[{0: (2)(0 1), 1: (2), 2: (1 2)},\n {0: (2), 2: (0 2)}] \n```", "```py\nschreier_sims_incremental(base=None, gens=None, slp_dict=False)\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> A = AlternatingGroup(7)\n>>> base = [2, 3]\n>>> seq = [2, 3]\n>>> base, strong_gens = A.schreier_sims_incremental(base=seq)\n>>> _verify_bsgs(A, base, strong_gens)\nTrue\n>>> base[:2]\n[2, 3] \n```", "```py\nschreier_sims_random(base=None, gens=None, consec_succ=10, _random_prec=None)\n```", "```py\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> S = SymmetricGroup(5)\n>>> base, strong_gens = S.schreier_sims_random(consec_succ=5)\n>>> _verify_bsgs(S, base, strong_gens) \nTrue \n```", "```py\nschreier_vector(alpha)\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([2, 4, 6, 3, 1, 5, 0])\n>>> b = Permutation([0, 1, 3, 5, 4, 6, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.schreier_vector(0)\n[-1, None, 0, 1, None, 1, 0] \n```", "```py\nstabilizer(alpha)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> G = DihedralGroup(6)\n>>> G.stabilizer(5)\nPermutationGroup([\n (5)(0 4)(1 3)]) \n```", "```py\nproperty strong_gens\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> D = DihedralGroup(4)\n>>> D.strong_gens\n[(0 1 2 3), (0 3)(1 2), (1 3)]\n>>> D.base\n[0, 1] \n```", "```py\nstrong_presentation()\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> P = DihedralGroup(4)\n>>> G = P.strong_presentation()\n>>> P.order() == G.order()\nTrue \n```", "```py\nsubgroup(gens)\n```", "```py\nsubgroup_search(prop, base=None, strong_gens=None, tests=None, init_subgroup=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... AlternatingGroup)\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> S = SymmetricGroup(7)\n>>> prop_even = lambda x: x.is_even\n>>> base, strong_gens = S.schreier_sims_incremental()\n>>> G = S.subgroup_search(prop_even, base=base, strong_gens=strong_gens)\n>>> G.is_subgroup(AlternatingGroup(7))\nTrue\n>>> _verify_bsgs(G, base, G.generators)\nTrue \n```", "```py\nsylow_subgroup(p)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> from sympy.combinatorics.named_groups import AlternatingGroup \n```", "```py\n>>> D = DihedralGroup(6)\n>>> S = D.sylow_subgroup(2)\n>>> S.order()\n4\n>>> G = SymmetricGroup(6)\n>>> S = G.sylow_subgroup(5)\n>>> S.order()\n5 \n```", "```py\n>>> G1 = AlternatingGroup(3)\n>>> G2 = AlternatingGroup(5)\n>>> G3 = AlternatingGroup(9) \n```", "```py\n>>> S1 = G1.sylow_subgroup(3)\n>>> S2 = G2.sylow_subgroup(3)\n>>> S3 = G3.sylow_subgroup(3) \n```", "```py\n>>> len1 = len(S1.lower_central_series())\n>>> len2 = len(S2.lower_central_series())\n>>> len3 = len(S3.lower_central_series()) \n```", "```py\n>>> len1 == len2\nTrue\n>>> len1 < len3\nTrue \n```", "```py\nproperty transitivity_degree\n```", "```py\n>>> from sympy.combinatorics import Permutation, PermutationGroup\n>>> a = Permutation([1, 2, 0])\n>>> b = Permutation([1, 0, 2])\n>>> G = PermutationGroup([a, b])\n>>> G.transitivity_degree\n3 \n```"]