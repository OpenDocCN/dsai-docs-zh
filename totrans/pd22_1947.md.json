["```py\nIn [1]: df = pd.DataFrame({'foo': [1, 2, 3, 4],\n ...:                   'bar': ['a', 'b', 'c', 'd'],\n ...:                   'baz': pd.date_range('2018-01-01', freq='d', periods=4),\n ...:                   'qux': pd.Categorical(['a', 'b', 'c', 'c'])},\n ...:                  index=pd.Index(range(4), name='idx'))\n ...: \n\nIn [2]: df\nOut[2]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [3]: df.dtypes\nOut[3]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object\n\nIn [4]: df.to_json('test.json', orient='table')\n\nIn [5]: new_df = pd.read_json('test.json', orient='table')\n\nIn [6]: new_df\nOut[6]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [7]: new_df.dtypes\nOut[7]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [8]: df.index.name = 'index'\n\nIn [9]: df.to_json('test.json', orient='table')\n\nIn [10]: new_df = pd.read_json('test.json', orient='table')\n\nIn [11]: new_df\nOut[11]: \n foo bar        baz qux\n0    1   a 2018-01-01   a\n1    2   b 2018-01-02   b\n2    3   c 2018-01-03   c\n3    4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [12]: new_df.dtypes\nOut[12]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [13]: df = pd.DataFrame({'A': [1, 2, 3]})\n\nIn [14]: df\nOut[14]: \n A\n0  1\n1  2\n2  3\n\n[3 rows x 1 columns]\n\nIn [15]: df.assign(B=df.A, C=lambda x: x['A'] + x['B'])\nOut[15]: \n A  B  C\n0  1  1  2\n1  2  2  4\n2  3  3  6\n\n[3 rows x 3 columns] \n```", "```py\nIn [2]: df = pd.DataFrame({\"A\": [1, 2, 3]})\n\nIn [3]: df.assign(A=lambda df: df.A + 1, C=lambda df: df.A * -1)\nOut[3]:\n A  C\n0  2 -1\n1  3 -2\n2  4 -3 \n```", "```py\nIn [16]: df.assign(A=df.A + 1, C=lambda df: df.A * -1)\nOut[16]: \n A  C\n0  2 -2\n1  3 -3\n2  4 -4\n\n[3 rows x 2 columns] \n```", "```py\nIn [17]: left_index = pd.Index(['K0', 'K0', 'K1', 'K2'], name='key1')\n\nIn [18]: left = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n ....:                     'B': ['B0', 'B1', 'B2', 'B3'],\n ....:                     'key2': ['K0', 'K1', 'K0', 'K1']},\n ....:                    index=left_index)\n ....: \n\nIn [19]: right_index = pd.Index(['K0', 'K1', 'K2', 'K2'], name='key1')\n\nIn [20]: right = pd.DataFrame({'C': ['C0', 'C1', 'C2', 'C3'],\n ....:                      'D': ['D0', 'D1', 'D2', 'D3'],\n ....:                      'key2': ['K0', 'K0', 'K0', 'K1']},\n ....:                     index=right_index)\n ....: \n\nIn [21]: left.merge(right, on=['key1', 'key2'])\nOut[21]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3\n\n[3 rows x 5 columns] \n```", "```py\n# Build MultiIndex\nIn [22]: idx = pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('a', 2),\n ....:                                 ('b', 2), ('b', 1), ('b', 1)])\n ....: \n\nIn [23]: idx.names = ['first', 'second']\n\n# Build DataFrame\nIn [24]: df_multi = pd.DataFrame({'A': np.arange(6, 0, -1)},\n ....:                        index=idx)\n ....: \n\nIn [25]: df_multi\nOut[25]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1\n\n[6 rows x 1 columns]\n\n# Sort by 'second' (index) and 'A' (column)\nIn [26]: df_multi.sort_values(by=['second', 'A'])\nOut[26]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5\n\n[6 rows x 1 columns] \n```", "```py\nIn [1]: from cyberpandas import IPArray\n\nIn [2]: values = IPArray([\n ...:    0,\n ...:    3232235777,\n ...:    42540766452641154071740215577757643572\n ...: ])\n ...:\n ...: \n```", "```py\nIn [3]: ser = pd.Series(values)\n\nIn [4]: ser\nOut[4]:\n0                         0.0.0.0\n1                     192.168.1.1\n2    2001:db8:85a3::8a2e:370:7334\ndtype: ip \n```", "```py\nIn [5]: ser.isna()\nOut[5]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [27]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [28]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [29]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [30]: df['C'] = ['foo', 'bar'] * 2\n\nIn [31]: df\nOut[31]: \n A  B  values    C\n0  a  c       1  foo\n1  a  d       2  bar\n2  b  c       3  foo\n3  b  d       4  bar\n\n[4 rows x 4 columns] \n```", "```py\nIn [32]: df.groupby(['A', 'B', 'C'], observed=False).count()\nOut[32]: \n values\nA B C \na c bar       0\n foo       1\n d bar       1\n foo       0\n y bar       0\n...         ...\nz c foo       0\n d bar       0\n foo       0\n y bar       0\n foo       0\n\n[18 rows x 1 columns] \n```", "```py\nIn [33]: df.groupby(['A', 'B', 'C'], observed=True).count()\nOut[33]: \n values\nA B C \na c foo       1\n d bar       1\nb c foo       1\n d bar       1\n\n[4 rows x 1 columns] \n```", "```py\nIn [34]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [35]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [36]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [37]: df\nOut[37]: \n A  B  values\n0  a  c       1\n1  a  d       2\n2  b  c       3\n3  b  d       4\n\n[4 rows x 3 columns] \n```", "```py\nIn [1]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=True)\n\nOut[1]:\n values\nA B\na c     1.0\n d     2.0\nb c     3.0\n d     4.0\n\nIn [2]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=False)\n\nOut[2]:\n values\nA B\na c     1.0\n d     2.0\n y     NaN\nb c     3.0\n d     4.0\n y     NaN\nz c     NaN\n d     NaN\n y     NaN \n```", "```py\nIn [38]: s = pd.Series(np.arange(5), np.arange(5) + 1)\n\nIn [39]: s\nOut[39]: \n1    0\n2    1\n3    2\n4    3\n5    4\nLength: 5, dtype: int64 \n```", "```py\nIn [40]: s.rolling(2, min_periods=1).apply(lambda x: x.iloc[-1], raw=False)\nOut[40]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [41]: s.rolling(2, min_periods=1).apply(lambda x: x[-1], raw=True)\nOut[41]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [42]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan,\n ....:                 np.nan, 13, np.nan, np.nan])\n ....: \n\nIn [43]: ser\nOut[43]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [44]: ser.interpolate(limit_direction='both', limit_area='inside', limit=1)\nOut[44]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [45]: ser.interpolate(limit_direction='backward', limit_area='outside')\nOut[45]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [46]: ser.interpolate(limit_direction='both', limit_area='outside')\nOut[46]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\nLength: 9, dtype: float64 \n```", "```py\nIn [47]: df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [5, 6]})\n\nIn [48]: pd.get_dummies(df, columns=['c']).dtypes\nOut[48]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object\n\nIn [49]: pd.get_dummies(df, columns=['c'], dtype=bool).dtypes\nOut[49]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object \n```", "```py\nIn [50]: td = pd.Timedelta(hours=37)\n\nIn [51]: td % pd.Timedelta(minutes=45)\nOut[51]: Timedelta('0 days 00:15:00') \n```", "```py\nIn [52]: s = pd.Series([-np.inf, 0, 1, np.nan, np.inf])\n\nIn [53]: s\nOut[53]: \n0   -inf\n1    0.0\n2    1.0\n3    NaN\n4    inf\nLength: 5, dtype: float64 \n```", "```py\nIn [11]: s.rank()\nOut[11]:\n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    NaN\ndtype: float64 \n```", "```py\nIn [54]: s.rank()\nOut[54]: \n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [55]: s = pd.Series([np.nan, np.nan, -np.inf, -np.inf])\n\nIn [56]: s\nOut[56]: \n0    NaN\n1    NaN\n2   -inf\n3   -inf\nLength: 4, dtype: float64 \n```", "```py\nIn [15]: s.rank(na_option='top')\nOut[15]:\n0    2.5\n1    2.5\n2    2.5\n3    2.5\ndtype: float64 \n```", "```py\nIn [57]: s.rank(na_option='top')\nOut[57]: \n0    1.5\n1    1.5\n2    3.5\n3    3.5\nLength: 4, dtype: float64 \n```", "```py\nIn [58]: s = pd.Series(['a', 'b', 'c', 'd'])\n\nIn [59]: t = pd.Series(['b', 'd', 'e', 'c'], index=[1, 3, 4, 2])\n\nIn [60]: s.str.cat(t)\nOut[60]: \n0    NaN\n1     bb\n2     cc\n3     dd\nLength: 4, dtype: object\n\nIn [61]: s.str.cat(t, join='left', na_rep='-')\nOut[61]: \n0    a-\n1    bb\n2    cc\n3    dd\nLength: 4, dtype: object \n```", "```py\nIn [62]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [63]: df = df.astype('category')\n\nIn [64]: df['A'].dtype\nOut[64]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=False, categories_dtype=object)\n\nIn [65]: df['B'].dtype\nOut[65]: CategoricalDtype(categories=['b', 'c', 'd'], ordered=False, categories_dtype=object) \n```", "```py\nIn [66]: from pandas.api.types import CategoricalDtype\n\nIn [67]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [68]: cdt = CategoricalDtype(categories=list('abcd'), ordered=True)\n\nIn [69]: df = df.astype(cdt)\n\nIn [70]: df['A'].dtype\nOut[70]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object)\n\nIn [71]: df['B'].dtype\nOut[71]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object) \n```", "```py\nIn [16]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\nOut[16]:\nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\ndtype: int64 \n```", "```py\nIn [72]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\n ....: \nOut[72]: \nIncome        2000\nExpenses     -1500\nTaxes         -200\nNet result     300\nLength: 4, dtype: int64 \n```", "```py\nIn [73]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300}).sort_index()\n ....: \nOut[73]: \nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\nLength: 4, dtype: int64 \n```", "```py\nIn [75]: import pandas._testing as tm\n\nIn [76]: p = tm.makePanel()\n\nIn [77]: p\nOut[77]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 3 (items) x 3 (major_axis) x 4 (minor_axis)\nItems axis: ItemA to ItemC\nMajor_axis axis: 2000-01-03 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D \n```", "```py\nIn [78]: p.to_frame()\nOut[78]:\n ItemA     ItemB     ItemC\nmajor      minor\n2000-01-03 A      0.469112  0.721555  0.404705\n B     -1.135632  0.271860 -1.039268\n C      0.119209  0.276232 -1.344312\n D     -2.104569  0.113648 -0.109050\n2000-01-04 A     -0.282863 -0.706771  0.577046\n B      1.212112 -0.424972 -0.370647\n C     -1.044236 -1.087401  0.844885\n D     -0.494929 -1.478427  1.643563\n2000-01-05 A     -1.509059 -1.039575 -1.715002\n B     -0.173215  0.567020 -1.157892\n C     -0.861849 -0.673690  1.075770\n D      1.071804  0.524988 -1.469388\n\n[12 rows x 3 columns] \n```", "```py\nIn [79]: p.to_xarray()\nOut[79]:\n<xarray.DataArray (items: 3, major_axis: 3, minor_axis: 4)>\narray([[[ 0.469112, -1.135632,  0.119209, -2.104569],\n [-0.282863,  1.212112, -1.044236, -0.494929],\n [-1.509059, -0.173215, -0.861849,  1.071804]],\n\n [[ 0.721555,  0.27186 ,  0.276232,  0.113648],\n [-0.706771, -0.424972, -1.087401, -1.478427],\n [-1.039575,  0.56702 , -0.67369 ,  0.524988]],\n\n [[ 0.404705, -1.039268, -1.344312, -0.10905 ],\n [ 0.577046, -0.370647,  0.844885,  1.643563],\n [-1.715002, -1.157892,  1.07577 , -1.469388]]])\nCoordinates:\n * items       (items) object 'ItemA' 'ItemB' 'ItemC'\n * major_axis  (major_axis) datetime64[ns] 2000-01-03 2000-01-04 2000-01-05\n * minor_axis  (minor_axis) object 'A' 'B' 'C' 'D' \n```", "```py\nIn [74]: df = pd.DataFrame(np.tile(np.arange(3), 6).reshape(6, -1) + 1,\n ....:                  columns=['A', 'B', 'C'])\n ....: \n\nIn [75]: df\nOut[75]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [3]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[3]:\n   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\nIn [4]: df.apply(lambda x: [1, 2], axis=1)\nOut[4]:\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\ndtype: object \n```", "```py\nIn [76]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[76]: \n0    [1, 2, 3]\n1    [1, 2, 3]\n2    [1, 2, 3]\n3    [1, 2, 3]\n4    [1, 2, 3]\n5    [1, 2, 3]\nLength: 6, dtype: object\n\nIn [77]: df.apply(lambda x: [1, 2], axis=1)\nOut[77]: \n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\nLength: 6, dtype: object \n```", "```py\nIn [78]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='expand')\nOut[78]: \n 0  1  2\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [79]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='broadcast')\nOut[79]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [80]: df.apply(lambda x: pd.Series([1, 2, 3], index=['D', 'E', 'F']), axis=1)\nOut[80]: \n D  E  F\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [81]: df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [1, 2]}, columns=['b', 'a'])\n\nIn [82]: df2 = pd.DataFrame({\"a\": [4, 5]})\n\nIn [83]: pd.concat([df1, df2])\nOut[83]: \n b  a\n0  1.0  1\n1  2.0  2\n0  NaN  4\n1  NaN  5\n\n[4 rows x 2 columns] \n```", "```py\nIn [84]: pd.concat([df1, df2], sort=True)\nOut[84]: \n a    b\n0  1  1.0\n1  2  2.0\n0  4  NaN\n1  5  NaN\n\n[4 rows x 2 columns] \n```", "```py\nIn [6]: index = pd.Int64Index([-1, 0, 1])\n\nIn [7]: index / 0\nOut[7]: Int64Index([0, 0, 0], dtype='int64')\n\n# Previous behavior yielded different results depending on the type of zero in the divisor\nIn [8]: index / 0.0\nOut[8]: Float64Index([-inf, nan, inf], dtype='float64')\n\nIn [9]: index = pd.UInt64Index([0, 1])\n\nIn [10]: index / np.array([0, 0], dtype=np.uint64)\nOut[10]: UInt64Index([0, 0], dtype='uint64')\n\nIn [11]: pd.RangeIndex(1, 5) / 0\nZeroDivisionError: integer division or modulo by zero \n```", "```py\nIn [12]: index = pd.Int64Index([-1, 0, 1])\n# division by zero gives -infinity where negative,\n# +infinity where positive, and NaN for 0 / 0\nIn [13]: index / 0\n\n# The result of division by zero should not depend on\n# whether the zero is int or float\nIn [14]: index / 0.0\n\nIn [15]: index = pd.UInt64Index([0, 1])\nIn [16]: index / np.array([0, 0], dtype=np.uint64)\n\nIn [17]: pd.RangeIndex(1, 5) / 0 \n```", "```py\nIn [1]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [2]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [3]: extracted\nOut [3]:\n0    10\n1    12\ndtype: object\n\nIn [4]: type(extracted)\nOut [4]:\npandas.core.series.Series \n```", "```py\nIn [85]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [86]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [87]: extracted\nOut[87]: \n 0\n0  10\n1  12\n\n[2 rows x 1 columns]\n\nIn [88]: type(extracted)\nOut[88]: pandas.core.frame.DataFrame \n```", "```py\nIn [89]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [90]: extracted = s.str.extract(r'.*(\\d\\d).*', expand=False)\n\nIn [91]: extracted\nOut[91]: \n0    10\n1    12\nLength: 2, dtype: object\n\nIn [92]: type(extracted)\nOut[92]: pandas.core.series.Series \n```", "```py\nIn [2]: from pandas.api.types import CategoricalDtype\n\nIn [3]: cat = pd.Categorical(list('abcaba'), ordered=True, categories=list('cba'))\n\nIn [4]: cat\nOut[4]:\n[a, b, c, a, b, a]\nCategories (3, object): [c < b < a]\n\nIn [5]: cdt = CategoricalDtype(categories=list('cbad'))\n\nIn [6]: cat.astype(cdt)\nOut[6]:\n[a, b, c, a, b, a]\nCategories (4, object): [c < b < a < d] \n```", "```py\npd.options.display.max_columns = 20 \n```", "```py\nIn [1]: df = pd.DataFrame({'foo': [1, 2, 3, 4],\n ...:                   'bar': ['a', 'b', 'c', 'd'],\n ...:                   'baz': pd.date_range('2018-01-01', freq='d', periods=4),\n ...:                   'qux': pd.Categorical(['a', 'b', 'c', 'c'])},\n ...:                  index=pd.Index(range(4), name='idx'))\n ...: \n\nIn [2]: df\nOut[2]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [3]: df.dtypes\nOut[3]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object\n\nIn [4]: df.to_json('test.json', orient='table')\n\nIn [5]: new_df = pd.read_json('test.json', orient='table')\n\nIn [6]: new_df\nOut[6]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [7]: new_df.dtypes\nOut[7]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [8]: df.index.name = 'index'\n\nIn [9]: df.to_json('test.json', orient='table')\n\nIn [10]: new_df = pd.read_json('test.json', orient='table')\n\nIn [11]: new_df\nOut[11]: \n foo bar        baz qux\n0    1   a 2018-01-01   a\n1    2   b 2018-01-02   b\n2    3   c 2018-01-03   c\n3    4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [12]: new_df.dtypes\nOut[12]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [13]: df = pd.DataFrame({'A': [1, 2, 3]})\n\nIn [14]: df\nOut[14]: \n A\n0  1\n1  2\n2  3\n\n[3 rows x 1 columns]\n\nIn [15]: df.assign(B=df.A, C=lambda x: x['A'] + x['B'])\nOut[15]: \n A  B  C\n0  1  1  2\n1  2  2  4\n2  3  3  6\n\n[3 rows x 3 columns] \n```", "```py\nIn [2]: df = pd.DataFrame({\"A\": [1, 2, 3]})\n\nIn [3]: df.assign(A=lambda df: df.A + 1, C=lambda df: df.A * -1)\nOut[3]:\n A  C\n0  2 -1\n1  3 -2\n2  4 -3 \n```", "```py\nIn [16]: df.assign(A=df.A + 1, C=lambda df: df.A * -1)\nOut[16]: \n A  C\n0  2 -2\n1  3 -3\n2  4 -4\n\n[3 rows x 2 columns] \n```", "```py\nIn [17]: left_index = pd.Index(['K0', 'K0', 'K1', 'K2'], name='key1')\n\nIn [18]: left = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n ....:                     'B': ['B0', 'B1', 'B2', 'B3'],\n ....:                     'key2': ['K0', 'K1', 'K0', 'K1']},\n ....:                    index=left_index)\n ....: \n\nIn [19]: right_index = pd.Index(['K0', 'K1', 'K2', 'K2'], name='key1')\n\nIn [20]: right = pd.DataFrame({'C': ['C0', 'C1', 'C2', 'C3'],\n ....:                      'D': ['D0', 'D1', 'D2', 'D3'],\n ....:                      'key2': ['K0', 'K0', 'K0', 'K1']},\n ....:                     index=right_index)\n ....: \n\nIn [21]: left.merge(right, on=['key1', 'key2'])\nOut[21]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3\n\n[3 rows x 5 columns] \n```", "```py\n# Build MultiIndex\nIn [22]: idx = pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('a', 2),\n ....:                                 ('b', 2), ('b', 1), ('b', 1)])\n ....: \n\nIn [23]: idx.names = ['first', 'second']\n\n# Build DataFrame\nIn [24]: df_multi = pd.DataFrame({'A': np.arange(6, 0, -1)},\n ....:                        index=idx)\n ....: \n\nIn [25]: df_multi\nOut[25]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1\n\n[6 rows x 1 columns]\n\n# Sort by 'second' (index) and 'A' (column)\nIn [26]: df_multi.sort_values(by=['second', 'A'])\nOut[26]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5\n\n[6 rows x 1 columns] \n```", "```py\nIn [1]: from cyberpandas import IPArray\n\nIn [2]: values = IPArray([\n ...:    0,\n ...:    3232235777,\n ...:    42540766452641154071740215577757643572\n ...: ])\n ...:\n ...: \n```", "```py\nIn [3]: ser = pd.Series(values)\n\nIn [4]: ser\nOut[4]:\n0                         0.0.0.0\n1                     192.168.1.1\n2    2001:db8:85a3::8a2e:370:7334\ndtype: ip \n```", "```py\nIn [5]: ser.isna()\nOut[5]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [27]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [28]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [29]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [30]: df['C'] = ['foo', 'bar'] * 2\n\nIn [31]: df\nOut[31]: \n A  B  values    C\n0  a  c       1  foo\n1  a  d       2  bar\n2  b  c       3  foo\n3  b  d       4  bar\n\n[4 rows x 4 columns] \n```", "```py\nIn [32]: df.groupby(['A', 'B', 'C'], observed=False).count()\nOut[32]: \n values\nA B C \na c bar       0\n foo       1\n d bar       1\n foo       0\n y bar       0\n...         ...\nz c foo       0\n d bar       0\n foo       0\n y bar       0\n foo       0\n\n[18 rows x 1 columns] \n```", "```py\nIn [33]: df.groupby(['A', 'B', 'C'], observed=True).count()\nOut[33]: \n values\nA B C \na c foo       1\n d bar       1\nb c foo       1\n d bar       1\n\n[4 rows x 1 columns] \n```", "```py\nIn [34]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [35]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [36]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [37]: df\nOut[37]: \n A  B  values\n0  a  c       1\n1  a  d       2\n2  b  c       3\n3  b  d       4\n\n[4 rows x 3 columns] \n```", "```py\nIn [1]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=True)\n\nOut[1]:\n values\nA B\na c     1.0\n d     2.0\nb c     3.0\n d     4.0\n\nIn [2]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=False)\n\nOut[2]:\n values\nA B\na c     1.0\n d     2.0\n y     NaN\nb c     3.0\n d     4.0\n y     NaN\nz c     NaN\n d     NaN\n y     NaN \n```", "```py\nIn [38]: s = pd.Series(np.arange(5), np.arange(5) + 1)\n\nIn [39]: s\nOut[39]: \n1    0\n2    1\n3    2\n4    3\n5    4\nLength: 5, dtype: int64 \n```", "```py\nIn [40]: s.rolling(2, min_periods=1).apply(lambda x: x.iloc[-1], raw=False)\nOut[40]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [41]: s.rolling(2, min_periods=1).apply(lambda x: x[-1], raw=True)\nOut[41]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [42]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan,\n ....:                 np.nan, 13, np.nan, np.nan])\n ....: \n\nIn [43]: ser\nOut[43]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [44]: ser.interpolate(limit_direction='both', limit_area='inside', limit=1)\nOut[44]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [45]: ser.interpolate(limit_direction='backward', limit_area='outside')\nOut[45]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [46]: ser.interpolate(limit_direction='both', limit_area='outside')\nOut[46]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\nLength: 9, dtype: float64 \n```", "```py\nIn [47]: df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [5, 6]})\n\nIn [48]: pd.get_dummies(df, columns=['c']).dtypes\nOut[48]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object\n\nIn [49]: pd.get_dummies(df, columns=['c'], dtype=bool).dtypes\nOut[49]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object \n```", "```py\nIn [50]: td = pd.Timedelta(hours=37)\n\nIn [51]: td % pd.Timedelta(minutes=45)\nOut[51]: Timedelta('0 days 00:15:00') \n```", "```py\nIn [52]: s = pd.Series([-np.inf, 0, 1, np.nan, np.inf])\n\nIn [53]: s\nOut[53]: \n0   -inf\n1    0.0\n2    1.0\n3    NaN\n4    inf\nLength: 5, dtype: float64 \n```", "```py\nIn [11]: s.rank()\nOut[11]:\n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    NaN\ndtype: float64 \n```", "```py\nIn [54]: s.rank()\nOut[54]: \n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [55]: s = pd.Series([np.nan, np.nan, -np.inf, -np.inf])\n\nIn [56]: s\nOut[56]: \n0    NaN\n1    NaN\n2   -inf\n3   -inf\nLength: 4, dtype: float64 \n```", "```py\nIn [15]: s.rank(na_option='top')\nOut[15]:\n0    2.5\n1    2.5\n2    2.5\n3    2.5\ndtype: float64 \n```", "```py\nIn [57]: s.rank(na_option='top')\nOut[57]: \n0    1.5\n1    1.5\n2    3.5\n3    3.5\nLength: 4, dtype: float64 \n```", "```py\nIn [58]: s = pd.Series(['a', 'b', 'c', 'd'])\n\nIn [59]: t = pd.Series(['b', 'd', 'e', 'c'], index=[1, 3, 4, 2])\n\nIn [60]: s.str.cat(t)\nOut[60]: \n0    NaN\n1     bb\n2     cc\n3     dd\nLength: 4, dtype: object\n\nIn [61]: s.str.cat(t, join='left', na_rep='-')\nOut[61]: \n0    a-\n1    bb\n2    cc\n3    dd\nLength: 4, dtype: object \n```", "```py\nIn [62]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [63]: df = df.astype('category')\n\nIn [64]: df['A'].dtype\nOut[64]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=False, categories_dtype=object)\n\nIn [65]: df['B'].dtype\nOut[65]: CategoricalDtype(categories=['b', 'c', 'd'], ordered=False, categories_dtype=object) \n```", "```py\nIn [66]: from pandas.api.types import CategoricalDtype\n\nIn [67]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [68]: cdt = CategoricalDtype(categories=list('abcd'), ordered=True)\n\nIn [69]: df = df.astype(cdt)\n\nIn [70]: df['A'].dtype\nOut[70]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object)\n\nIn [71]: df['B'].dtype\nOut[71]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object) \n```", "```py\nIn [1]: df = pd.DataFrame({'foo': [1, 2, 3, 4],\n ...:                   'bar': ['a', 'b', 'c', 'd'],\n ...:                   'baz': pd.date_range('2018-01-01', freq='d', periods=4),\n ...:                   'qux': pd.Categorical(['a', 'b', 'c', 'c'])},\n ...:                  index=pd.Index(range(4), name='idx'))\n ...: \n\nIn [2]: df\nOut[2]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [3]: df.dtypes\nOut[3]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object\n\nIn [4]: df.to_json('test.json', orient='table')\n\nIn [5]: new_df = pd.read_json('test.json', orient='table')\n\nIn [6]: new_df\nOut[6]: \n foo bar        baz qux\nidx \n0      1   a 2018-01-01   a\n1      2   b 2018-01-02   b\n2      3   c 2018-01-03   c\n3      4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [7]: new_df.dtypes\nOut[7]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [8]: df.index.name = 'index'\n\nIn [9]: df.to_json('test.json', orient='table')\n\nIn [10]: new_df = pd.read_json('test.json', orient='table')\n\nIn [11]: new_df\nOut[11]: \n foo bar        baz qux\n0    1   a 2018-01-01   a\n1    2   b 2018-01-02   b\n2    3   c 2018-01-03   c\n3    4   d 2018-01-04   c\n\n[4 rows x 4 columns]\n\nIn [12]: new_df.dtypes\nOut[12]: \nfoo             int64\nbar            object\nbaz    datetime64[ns]\nqux          category\nLength: 4, dtype: object \n```", "```py\nIn [13]: df = pd.DataFrame({'A': [1, 2, 3]})\n\nIn [14]: df\nOut[14]: \n A\n0  1\n1  2\n2  3\n\n[3 rows x 1 columns]\n\nIn [15]: df.assign(B=df.A, C=lambda x: x['A'] + x['B'])\nOut[15]: \n A  B  C\n0  1  1  2\n1  2  2  4\n2  3  3  6\n\n[3 rows x 3 columns] \n```", "```py\nIn [2]: df = pd.DataFrame({\"A\": [1, 2, 3]})\n\nIn [3]: df.assign(A=lambda df: df.A + 1, C=lambda df: df.A * -1)\nOut[3]:\n A  C\n0  2 -1\n1  3 -2\n2  4 -3 \n```", "```py\nIn [16]: df.assign(A=df.A + 1, C=lambda df: df.A * -1)\nOut[16]: \n A  C\n0  2 -2\n1  3 -3\n2  4 -4\n\n[3 rows x 2 columns] \n```", "```py\nIn [17]: left_index = pd.Index(['K0', 'K0', 'K1', 'K2'], name='key1')\n\nIn [18]: left = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n ....:                     'B': ['B0', 'B1', 'B2', 'B3'],\n ....:                     'key2': ['K0', 'K1', 'K0', 'K1']},\n ....:                    index=left_index)\n ....: \n\nIn [19]: right_index = pd.Index(['K0', 'K1', 'K2', 'K2'], name='key1')\n\nIn [20]: right = pd.DataFrame({'C': ['C0', 'C1', 'C2', 'C3'],\n ....:                      'D': ['D0', 'D1', 'D2', 'D3'],\n ....:                      'key2': ['K0', 'K0', 'K0', 'K1']},\n ....:                     index=right_index)\n ....: \n\nIn [21]: left.merge(right, on=['key1', 'key2'])\nOut[21]: \n A   B key2   C   D\nkey1 \nK0    A0  B0   K0  C0  D0\nK1    A2  B2   K0  C1  D1\nK2    A3  B3   K1  C3  D3\n\n[3 rows x 5 columns] \n```", "```py\n# Build MultiIndex\nIn [22]: idx = pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('a', 2),\n ....:                                 ('b', 2), ('b', 1), ('b', 1)])\n ....: \n\nIn [23]: idx.names = ['first', 'second']\n\n# Build DataFrame\nIn [24]: df_multi = pd.DataFrame({'A': np.arange(6, 0, -1)},\n ....:                        index=idx)\n ....: \n\nIn [25]: df_multi\nOut[25]: \n A\nfirst second \na     1       6\n 2       5\n 2       4\nb     2       3\n 1       2\n 1       1\n\n[6 rows x 1 columns]\n\n# Sort by 'second' (index) and 'A' (column)\nIn [26]: df_multi.sort_values(by=['second', 'A'])\nOut[26]: \n A\nfirst second \nb     1       1\n 1       2\na     1       6\nb     2       3\na     2       4\n 2       5\n\n[6 rows x 1 columns] \n```", "```py\nIn [1]: from cyberpandas import IPArray\n\nIn [2]: values = IPArray([\n ...:    0,\n ...:    3232235777,\n ...:    42540766452641154071740215577757643572\n ...: ])\n ...:\n ...: \n```", "```py\nIn [3]: ser = pd.Series(values)\n\nIn [4]: ser\nOut[4]:\n0                         0.0.0.0\n1                     192.168.1.1\n2    2001:db8:85a3::8a2e:370:7334\ndtype: ip \n```", "```py\nIn [5]: ser.isna()\nOut[5]:\n0     True\n1    False\n2    False\ndtype: bool \n```", "```py\nIn [27]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [28]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [29]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [30]: df['C'] = ['foo', 'bar'] * 2\n\nIn [31]: df\nOut[31]: \n A  B  values    C\n0  a  c       1  foo\n1  a  d       2  bar\n2  b  c       3  foo\n3  b  d       4  bar\n\n[4 rows x 4 columns] \n```", "```py\nIn [32]: df.groupby(['A', 'B', 'C'], observed=False).count()\nOut[32]: \n values\nA B C \na c bar       0\n foo       1\n d bar       1\n foo       0\n y bar       0\n...         ...\nz c foo       0\n d bar       0\n foo       0\n y bar       0\n foo       0\n\n[18 rows x 1 columns] \n```", "```py\nIn [33]: df.groupby(['A', 'B', 'C'], observed=True).count()\nOut[33]: \n values\nA B C \na c foo       1\n d bar       1\nb c foo       1\n d bar       1\n\n[4 rows x 1 columns] \n```", "```py\nIn [34]: cat1 = pd.Categorical([\"a\", \"a\", \"b\", \"b\"],\n ....:                      categories=[\"a\", \"b\", \"z\"], ordered=True)\n ....: \n\nIn [35]: cat2 = pd.Categorical([\"c\", \"d\", \"c\", \"d\"],\n ....:                      categories=[\"c\", \"d\", \"y\"], ordered=True)\n ....: \n\nIn [36]: df = pd.DataFrame({\"A\": cat1, \"B\": cat2, \"values\": [1, 2, 3, 4]})\n\nIn [37]: df\nOut[37]: \n A  B  values\n0  a  c       1\n1  a  d       2\n2  b  c       3\n3  b  d       4\n\n[4 rows x 3 columns] \n```", "```py\nIn [1]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=True)\n\nOut[1]:\n values\nA B\na c     1.0\n d     2.0\nb c     3.0\n d     4.0\n\nIn [2]: pd.pivot_table(df, values='values', index=['A', 'B'], dropna=False)\n\nOut[2]:\n values\nA B\na c     1.0\n d     2.0\n y     NaN\nb c     3.0\n d     4.0\n y     NaN\nz c     NaN\n d     NaN\n y     NaN \n```", "```py\nIn [38]: s = pd.Series(np.arange(5), np.arange(5) + 1)\n\nIn [39]: s\nOut[39]: \n1    0\n2    1\n3    2\n4    3\n5    4\nLength: 5, dtype: int64 \n```", "```py\nIn [40]: s.rolling(2, min_periods=1).apply(lambda x: x.iloc[-1], raw=False)\nOut[40]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [41]: s.rolling(2, min_periods=1).apply(lambda x: x[-1], raw=True)\nOut[41]: \n1    0.0\n2    1.0\n3    2.0\n4    3.0\n5    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [42]: ser = pd.Series([np.nan, np.nan, 5, np.nan, np.nan,\n ....:                 np.nan, 13, np.nan, np.nan])\n ....: \n\nIn [43]: ser\nOut[43]: \n0     NaN\n1     NaN\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [44]: ser.interpolate(limit_direction='both', limit_area='inside', limit=1)\nOut[44]: \n0     NaN\n1     NaN\n2     5.0\n3     7.0\n4     NaN\n5    11.0\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [45]: ser.interpolate(limit_direction='backward', limit_area='outside')\nOut[45]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7     NaN\n8     NaN\nLength: 9, dtype: float64 \n```", "```py\nIn [46]: ser.interpolate(limit_direction='both', limit_area='outside')\nOut[46]: \n0     5.0\n1     5.0\n2     5.0\n3     NaN\n4     NaN\n5     NaN\n6    13.0\n7    13.0\n8    13.0\nLength: 9, dtype: float64 \n```", "```py\nIn [47]: df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [5, 6]})\n\nIn [48]: pd.get_dummies(df, columns=['c']).dtypes\nOut[48]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object\n\nIn [49]: pd.get_dummies(df, columns=['c'], dtype=bool).dtypes\nOut[49]: \na      int64\nb      int64\nc_5     bool\nc_6     bool\nLength: 4, dtype: object \n```", "```py\nIn [50]: td = pd.Timedelta(hours=37)\n\nIn [51]: td % pd.Timedelta(minutes=45)\nOut[51]: Timedelta('0 days 00:15:00') \n```", "```py\nIn [52]: s = pd.Series([-np.inf, 0, 1, np.nan, np.inf])\n\nIn [53]: s\nOut[53]: \n0   -inf\n1    0.0\n2    1.0\n3    NaN\n4    inf\nLength: 5, dtype: float64 \n```", "```py\nIn [11]: s.rank()\nOut[11]:\n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    NaN\ndtype: float64 \n```", "```py\nIn [54]: s.rank()\nOut[54]: \n0    1.0\n1    2.0\n2    3.0\n3    NaN\n4    4.0\nLength: 5, dtype: float64 \n```", "```py\nIn [55]: s = pd.Series([np.nan, np.nan, -np.inf, -np.inf])\n\nIn [56]: s\nOut[56]: \n0    NaN\n1    NaN\n2   -inf\n3   -inf\nLength: 4, dtype: float64 \n```", "```py\nIn [15]: s.rank(na_option='top')\nOut[15]:\n0    2.5\n1    2.5\n2    2.5\n3    2.5\ndtype: float64 \n```", "```py\nIn [57]: s.rank(na_option='top')\nOut[57]: \n0    1.5\n1    1.5\n2    3.5\n3    3.5\nLength: 4, dtype: float64 \n```", "```py\nIn [58]: s = pd.Series(['a', 'b', 'c', 'd'])\n\nIn [59]: t = pd.Series(['b', 'd', 'e', 'c'], index=[1, 3, 4, 2])\n\nIn [60]: s.str.cat(t)\nOut[60]: \n0    NaN\n1     bb\n2     cc\n3     dd\nLength: 4, dtype: object\n\nIn [61]: s.str.cat(t, join='left', na_rep='-')\nOut[61]: \n0    a-\n1    bb\n2    cc\n3    dd\nLength: 4, dtype: object \n```", "```py\nIn [62]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [63]: df = df.astype('category')\n\nIn [64]: df['A'].dtype\nOut[64]: CategoricalDtype(categories=['a', 'b', 'c'], ordered=False, categories_dtype=object)\n\nIn [65]: df['B'].dtype\nOut[65]: CategoricalDtype(categories=['b', 'c', 'd'], ordered=False, categories_dtype=object) \n```", "```py\nIn [66]: from pandas.api.types import CategoricalDtype\n\nIn [67]: df = pd.DataFrame({'A': list('abca'), 'B': list('bccd')})\n\nIn [68]: cdt = CategoricalDtype(categories=list('abcd'), ordered=True)\n\nIn [69]: df = df.astype(cdt)\n\nIn [70]: df['A'].dtype\nOut[70]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object)\n\nIn [71]: df['B'].dtype\nOut[71]: CategoricalDtype(categories=['a', 'b', 'c', 'd'], ordered=True, categories_dtype=object) \n```", "```py\nIn [16]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\nOut[16]:\nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\ndtype: int64 \n```", "```py\nIn [72]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\n ....: \nOut[72]: \nIncome        2000\nExpenses     -1500\nTaxes         -200\nNet result     300\nLength: 4, dtype: int64 \n```", "```py\nIn [73]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300}).sort_index()\n ....: \nOut[73]: \nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\nLength: 4, dtype: int64 \n```", "```py\nIn [75]: import pandas._testing as tm\n\nIn [76]: p = tm.makePanel()\n\nIn [77]: p\nOut[77]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 3 (items) x 3 (major_axis) x 4 (minor_axis)\nItems axis: ItemA to ItemC\nMajor_axis axis: 2000-01-03 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D \n```", "```py\nIn [78]: p.to_frame()\nOut[78]:\n ItemA     ItemB     ItemC\nmajor      minor\n2000-01-03 A      0.469112  0.721555  0.404705\n B     -1.135632  0.271860 -1.039268\n C      0.119209  0.276232 -1.344312\n D     -2.104569  0.113648 -0.109050\n2000-01-04 A     -0.282863 -0.706771  0.577046\n B      1.212112 -0.424972 -0.370647\n C     -1.044236 -1.087401  0.844885\n D     -0.494929 -1.478427  1.643563\n2000-01-05 A     -1.509059 -1.039575 -1.715002\n B     -0.173215  0.567020 -1.157892\n C     -0.861849 -0.673690  1.075770\n D      1.071804  0.524988 -1.469388\n\n[12 rows x 3 columns] \n```", "```py\nIn [79]: p.to_xarray()\nOut[79]:\n<xarray.DataArray (items: 3, major_axis: 3, minor_axis: 4)>\narray([[[ 0.469112, -1.135632,  0.119209, -2.104569],\n [-0.282863,  1.212112, -1.044236, -0.494929],\n [-1.509059, -0.173215, -0.861849,  1.071804]],\n\n [[ 0.721555,  0.27186 ,  0.276232,  0.113648],\n [-0.706771, -0.424972, -1.087401, -1.478427],\n [-1.039575,  0.56702 , -0.67369 ,  0.524988]],\n\n [[ 0.404705, -1.039268, -1.344312, -0.10905 ],\n [ 0.577046, -0.370647,  0.844885,  1.643563],\n [-1.715002, -1.157892,  1.07577 , -1.469388]]])\nCoordinates:\n * items       (items) object 'ItemA' 'ItemB' 'ItemC'\n * major_axis  (major_axis) datetime64[ns] 2000-01-03 2000-01-04 2000-01-05\n * minor_axis  (minor_axis) object 'A' 'B' 'C' 'D' \n```", "```py\nIn [74]: df = pd.DataFrame(np.tile(np.arange(3), 6).reshape(6, -1) + 1,\n ....:                  columns=['A', 'B', 'C'])\n ....: \n\nIn [75]: df\nOut[75]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [3]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[3]:\n   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\nIn [4]: df.apply(lambda x: [1, 2], axis=1)\nOut[4]:\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\ndtype: object \n```", "```py\nIn [76]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[76]: \n0    [1, 2, 3]\n1    [1, 2, 3]\n2    [1, 2, 3]\n3    [1, 2, 3]\n4    [1, 2, 3]\n5    [1, 2, 3]\nLength: 6, dtype: object\n\nIn [77]: df.apply(lambda x: [1, 2], axis=1)\nOut[77]: \n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\nLength: 6, dtype: object \n```", "```py\nIn [78]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='expand')\nOut[78]: \n 0  1  2\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [79]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='broadcast')\nOut[79]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [80]: df.apply(lambda x: pd.Series([1, 2, 3], index=['D', 'E', 'F']), axis=1)\nOut[80]: \n D  E  F\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [81]: df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [1, 2]}, columns=['b', 'a'])\n\nIn [82]: df2 = pd.DataFrame({\"a\": [4, 5]})\n\nIn [83]: pd.concat([df1, df2])\nOut[83]: \n b  a\n0  1.0  1\n1  2.0  2\n0  NaN  4\n1  NaN  5\n\n[4 rows x 2 columns] \n```", "```py\nIn [84]: pd.concat([df1, df2], sort=True)\nOut[84]: \n a    b\n0  1  1.0\n1  2  2.0\n0  4  NaN\n1  5  NaN\n\n[4 rows x 2 columns] \n```", "```py\nIn [6]: index = pd.Int64Index([-1, 0, 1])\n\nIn [7]: index / 0\nOut[7]: Int64Index([0, 0, 0], dtype='int64')\n\n# Previous behavior yielded different results depending on the type of zero in the divisor\nIn [8]: index / 0.0\nOut[8]: Float64Index([-inf, nan, inf], dtype='float64')\n\nIn [9]: index = pd.UInt64Index([0, 1])\n\nIn [10]: index / np.array([0, 0], dtype=np.uint64)\nOut[10]: UInt64Index([0, 0], dtype='uint64')\n\nIn [11]: pd.RangeIndex(1, 5) / 0\nZeroDivisionError: integer division or modulo by zero \n```", "```py\nIn [12]: index = pd.Int64Index([-1, 0, 1])\n# division by zero gives -infinity where negative,\n# +infinity where positive, and NaN for 0 / 0\nIn [13]: index / 0\n\n# The result of division by zero should not depend on\n# whether the zero is int or float\nIn [14]: index / 0.0\n\nIn [15]: index = pd.UInt64Index([0, 1])\nIn [16]: index / np.array([0, 0], dtype=np.uint64)\n\nIn [17]: pd.RangeIndex(1, 5) / 0 \n```", "```py\nIn [1]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [2]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [3]: extracted\nOut [3]:\n0    10\n1    12\ndtype: object\n\nIn [4]: type(extracted)\nOut [4]:\npandas.core.series.Series \n```", "```py\nIn [85]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [86]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [87]: extracted\nOut[87]: \n 0\n0  10\n1  12\n\n[2 rows x 1 columns]\n\nIn [88]: type(extracted)\nOut[88]: pandas.core.frame.DataFrame \n```", "```py\nIn [89]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [90]: extracted = s.str.extract(r'.*(\\d\\d).*', expand=False)\n\nIn [91]: extracted\nOut[91]: \n0    10\n1    12\nLength: 2, dtype: object\n\nIn [92]: type(extracted)\nOut[92]: pandas.core.series.Series \n```", "```py\nIn [2]: from pandas.api.types import CategoricalDtype\n\nIn [3]: cat = pd.Categorical(list('abcaba'), ordered=True, categories=list('cba'))\n\nIn [4]: cat\nOut[4]:\n[a, b, c, a, b, a]\nCategories (3, object): [c < b < a]\n\nIn [5]: cdt = CategoricalDtype(categories=list('cbad'))\n\nIn [6]: cat.astype(cdt)\nOut[6]:\n[a, b, c, a, b, a]\nCategories (4, object): [c < b < a < d] \n```", "```py\npd.options.display.max_columns = 20 \n```", "```py\nIn [16]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\nOut[16]:\nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\ndtype: int64 \n```", "```py\nIn [72]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300})\n ....: \nOut[72]: \nIncome        2000\nExpenses     -1500\nTaxes         -200\nNet result     300\nLength: 4, dtype: int64 \n```", "```py\nIn [73]: pd.Series({'Income': 2000,\n ....:           'Expenses': -1500,\n ....:           'Taxes': -200,\n ....:           'Net result': 300}).sort_index()\n ....: \nOut[73]: \nExpenses     -1500\nIncome        2000\nNet result     300\nTaxes         -200\nLength: 4, dtype: int64 \n```", "```py\nIn [75]: import pandas._testing as tm\n\nIn [76]: p = tm.makePanel()\n\nIn [77]: p\nOut[77]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 3 (items) x 3 (major_axis) x 4 (minor_axis)\nItems axis: ItemA to ItemC\nMajor_axis axis: 2000-01-03 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D \n```", "```py\nIn [78]: p.to_frame()\nOut[78]:\n ItemA     ItemB     ItemC\nmajor      minor\n2000-01-03 A      0.469112  0.721555  0.404705\n B     -1.135632  0.271860 -1.039268\n C      0.119209  0.276232 -1.344312\n D     -2.104569  0.113648 -0.109050\n2000-01-04 A     -0.282863 -0.706771  0.577046\n B      1.212112 -0.424972 -0.370647\n C     -1.044236 -1.087401  0.844885\n D     -0.494929 -1.478427  1.643563\n2000-01-05 A     -1.509059 -1.039575 -1.715002\n B     -0.173215  0.567020 -1.157892\n C     -0.861849 -0.673690  1.075770\n D      1.071804  0.524988 -1.469388\n\n[12 rows x 3 columns] \n```", "```py\nIn [79]: p.to_xarray()\nOut[79]:\n<xarray.DataArray (items: 3, major_axis: 3, minor_axis: 4)>\narray([[[ 0.469112, -1.135632,  0.119209, -2.104569],\n [-0.282863,  1.212112, -1.044236, -0.494929],\n [-1.509059, -0.173215, -0.861849,  1.071804]],\n\n [[ 0.721555,  0.27186 ,  0.276232,  0.113648],\n [-0.706771, -0.424972, -1.087401, -1.478427],\n [-1.039575,  0.56702 , -0.67369 ,  0.524988]],\n\n [[ 0.404705, -1.039268, -1.344312, -0.10905 ],\n [ 0.577046, -0.370647,  0.844885,  1.643563],\n [-1.715002, -1.157892,  1.07577 , -1.469388]]])\nCoordinates:\n * items       (items) object 'ItemA' 'ItemB' 'ItemC'\n * major_axis  (major_axis) datetime64[ns] 2000-01-03 2000-01-04 2000-01-05\n * minor_axis  (minor_axis) object 'A' 'B' 'C' 'D' \n```", "```py\nIn [74]: df = pd.DataFrame(np.tile(np.arange(3), 6).reshape(6, -1) + 1,\n ....:                  columns=['A', 'B', 'C'])\n ....: \n\nIn [75]: df\nOut[75]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [3]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[3]:\n   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\nIn [4]: df.apply(lambda x: [1, 2], axis=1)\nOut[4]:\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\ndtype: object \n```", "```py\nIn [76]: df.apply(lambda x: [1, 2, 3], axis=1)\nOut[76]: \n0    [1, 2, 3]\n1    [1, 2, 3]\n2    [1, 2, 3]\n3    [1, 2, 3]\n4    [1, 2, 3]\n5    [1, 2, 3]\nLength: 6, dtype: object\n\nIn [77]: df.apply(lambda x: [1, 2], axis=1)\nOut[77]: \n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\n3    [1, 2]\n4    [1, 2]\n5    [1, 2]\nLength: 6, dtype: object \n```", "```py\nIn [78]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='expand')\nOut[78]: \n 0  1  2\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [79]: df.apply(lambda x: [1, 2, 3], axis=1, result_type='broadcast')\nOut[79]: \n A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [80]: df.apply(lambda x: pd.Series([1, 2, 3], index=['D', 'E', 'F']), axis=1)\nOut[80]: \n D  E  F\n0  1  2  3\n1  1  2  3\n2  1  2  3\n3  1  2  3\n4  1  2  3\n5  1  2  3\n\n[6 rows x 3 columns] \n```", "```py\nIn [81]: df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [1, 2]}, columns=['b', 'a'])\n\nIn [82]: df2 = pd.DataFrame({\"a\": [4, 5]})\n\nIn [83]: pd.concat([df1, df2])\nOut[83]: \n b  a\n0  1.0  1\n1  2.0  2\n0  NaN  4\n1  NaN  5\n\n[4 rows x 2 columns] \n```", "```py\nIn [84]: pd.concat([df1, df2], sort=True)\nOut[84]: \n a    b\n0  1  1.0\n1  2  2.0\n0  4  NaN\n1  5  NaN\n\n[4 rows x 2 columns] \n```", "```py\nIn [6]: index = pd.Int64Index([-1, 0, 1])\n\nIn [7]: index / 0\nOut[7]: Int64Index([0, 0, 0], dtype='int64')\n\n# Previous behavior yielded different results depending on the type of zero in the divisor\nIn [8]: index / 0.0\nOut[8]: Float64Index([-inf, nan, inf], dtype='float64')\n\nIn [9]: index = pd.UInt64Index([0, 1])\n\nIn [10]: index / np.array([0, 0], dtype=np.uint64)\nOut[10]: UInt64Index([0, 0], dtype='uint64')\n\nIn [11]: pd.RangeIndex(1, 5) / 0\nZeroDivisionError: integer division or modulo by zero \n```", "```py\nIn [12]: index = pd.Int64Index([-1, 0, 1])\n# division by zero gives -infinity where negative,\n# +infinity where positive, and NaN for 0 / 0\nIn [13]: index / 0\n\n# The result of division by zero should not depend on\n# whether the zero is int or float\nIn [14]: index / 0.0\n\nIn [15]: index = pd.UInt64Index([0, 1])\nIn [16]: index / np.array([0, 0], dtype=np.uint64)\n\nIn [17]: pd.RangeIndex(1, 5) / 0 \n```", "```py\nIn [1]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [2]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [3]: extracted\nOut [3]:\n0    10\n1    12\ndtype: object\n\nIn [4]: type(extracted)\nOut [4]:\npandas.core.series.Series \n```", "```py\nIn [85]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [86]: extracted = s.str.extract(r'.*(\\d\\d).*')\n\nIn [87]: extracted\nOut[87]: \n 0\n0  10\n1  12\n\n[2 rows x 1 columns]\n\nIn [88]: type(extracted)\nOut[88]: pandas.core.frame.DataFrame \n```", "```py\nIn [89]: s = pd.Series(['number 10', '12 eggs'])\n\nIn [90]: extracted = s.str.extract(r'.*(\\d\\d).*', expand=False)\n\nIn [91]: extracted\nOut[91]: \n0    10\n1    12\nLength: 2, dtype: object\n\nIn [92]: type(extracted)\nOut[92]: pandas.core.series.Series \n```", "```py\nIn [2]: from pandas.api.types import CategoricalDtype\n\nIn [3]: cat = pd.Categorical(list('abcaba'), ordered=True, categories=list('cba'))\n\nIn [4]: cat\nOut[4]:\n[a, b, c, a, b, a]\nCategories (3, object): [c < b < a]\n\nIn [5]: cdt = CategoricalDtype(categories=list('cbad'))\n\nIn [6]: cat.astype(cdt)\nOut[6]:\n[a, b, c, a, b, a]\nCategories (4, object): [c < b < a < d] \n```", "```py\npd.options.display.max_columns = 20 \n```"]