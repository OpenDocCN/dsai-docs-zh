- en: numpy.find_common_type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html](https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Determine common type following standard coercion rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version NumPy: 1.25'
  prefs: []
  type: TYPE_NORMAL
- en: This function is deprecated, use [`numpy.promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types") or [`numpy.result_type`](numpy.result_type.html#numpy.result_type
    "numpy.result_type") instead. To achieve semantics for the *scalar_types* argument,
    use [`numpy.result_type`](numpy.result_type.html#numpy.result_type "numpy.result_type")
    and pass the Python values *0*, *0.0*, or *0j*. This will give the same results
    in almost all cases. More information and rare exception can be found in the [NumPy
    1.25 release notes](https://numpy.org/devdocs/release/1.25.0-notes.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**array_types**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dtypes or dtype convertible objects representing arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '**scalar_types**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dtypes or dtype convertible objects representing scalars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**datatype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: The common data type, which is the maximum of *array_types* ignoring *scalar_types*,
    unless the maximum of *scalar_types* is of a different kind ([`dtype.kind`](numpy.dtype.kind.html#numpy.dtype.kind
    "numpy.dtype.kind")). If the kind is not understood, then None is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), [`common_type`](numpy.common_type.html#numpy.common_type
    "numpy.common_type"), [`can_cast`](numpy.can_cast.html#numpy.can_cast "numpy.can_cast"),
    [`mintypecode`](numpy.mintypecode.html#numpy.mintypecode "numpy.mintypecode")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The standard casting rules ensure that a scalar cannot up-cast an array unless
    the scalar is of a fundamentally different kind of data (i.e. under a different
    hierarchy in the data type hierarchy) then the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Complex is of a different type, so it up-casts the float in the *array_types*
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Type specifier strings are convertible to dtypes and can therefore be used
    instead of dtypes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
