- en: numpy.convolve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.convolve.html](https://numpy.org/doc/1.26/reference/generated/numpy.convolve.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns the discrete, linear convolution of two one-dimensional sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The convolution operator is often seen in signal processing, where it models
    the effect of a linear time-invariant system on a signal [[1]](#r95849f33d2b1-1).
    In probability theory, the sum of two independent random variables is distributed
    according to the convolution of their individual distributions.
  prefs: []
  type: TYPE_NORMAL
- en: If *v* is longer than *a*, the arrays are swapped before computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: First one-dimensional input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**v**(M,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Second one-dimensional input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘full’, ‘valid’, ‘same’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '‘full’:'
  prefs: []
  type: TYPE_NORMAL
- en: By default, mode is ‘full’. This returns the convolution at each point of overlap,
    with an output shape of (N+M-1,). At the end-points of the convolution, the signals
    do not overlap completely, and boundary effects may be seen.
  prefs: []
  type: TYPE_NORMAL
- en: '‘same’:'
  prefs: []
  type: TYPE_NORMAL
- en: Mode ‘same’ returns output of length `max(M, N)`. Boundary effects are still
    visible.
  prefs: []
  type: TYPE_NORMAL
- en: '‘valid’:'
  prefs: []
  type: TYPE_NORMAL
- en: Mode ‘valid’ returns output of length `max(M, N) - min(M, N) + 1`. The convolution
    product is only given for points where the signals overlap completely. Values
    outside the signal boundary have no effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Discrete, linear convolution of *a* and *v*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.signal.fftconvolve`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "(in SciPy v1.11.2)")'
  prefs: []
  type: TYPE_NORMAL
- en: Convolve two arrays using the Fast Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.linalg.toeplitz`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.toeplitz.html#scipy.linalg.toeplitz
    "(in SciPy v1.11.2)")'
  prefs: []
  type: TYPE_NORMAL
- en: Used to construct the convolution operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`polymul`](numpy.polymul.html#numpy.polymul "numpy.polymul")'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial multiplication. Same output as convolve, but also accepts poly1d
    objects as input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The discrete convolution operation is defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[(a * v)_n = \sum_{m = -\infty}^{\infty} a_m v_{n - m}\]
  prefs: []
  type: TYPE_NORMAL
- en: It can be shown that a convolution \(x(t) * y(t)\) in time/space is equivalent
    to the multiplication \(X(f) Y(f)\) in the Fourier domain, after appropriate padding
    (padding is necessary to prevent circular convolution). Since multiplication is
    more efficient (faster) than convolution, the function [`scipy.signal.fftconvolve`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.fftconvolve.html#scipy.signal.fftconvolve
    "(in SciPy v1.11.2)") exploits the FFT to calculate the convolution of large data-sets.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Convolution”, [https://en.wikipedia.org/wiki/Convolution](https://en.wikipedia.org/wiki/Convolution)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Note how the convolution operator flips the second array before “sliding” the
    two across one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Only return the middle values of the convolution. Contains boundary effects,
    where zeros are taken into account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The two arrays are of the same length, so there is only one position where
    they completely overlap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
