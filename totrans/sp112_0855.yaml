- en: scipy.special.nbdtri
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.nbdtri.html#scipy.special.nbdtri](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.special.nbdtri.html#scipy.special.nbdtri)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse with respect to the parameter *p* of *y = nbdtr(k, n, p)*,
    the negative binomial cumulative distribution function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum number of allowed failures (nonnegative int).
  prefs: []
  type: TYPE_NORMAL
- en: '**n**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The target number of successes (positive int).
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The probability of *k* or fewer failures before *n* successes (float).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional output array for the function results
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p**scalar or ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Probability of success in a single event (float) such that *nbdtr(k, n, p) =
    y*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtr`](scipy.special.nbdtr.html#scipy.special.nbdtr "scipy.special.nbdtr")'
  prefs: []
  type: TYPE_NORMAL
- en: Cumulative distribution function of the negative binomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtrc`](scipy.special.nbdtrc.html#scipy.special.nbdtrc "scipy.special.nbdtrc")'
  prefs: []
  type: TYPE_NORMAL
- en: Negative binomial survival function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")'
  prefs: []
  type: TYPE_NORMAL
- en: negative binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtrik`](scipy.special.nbdtrik.html#scipy.special.nbdtrik "scipy.special.nbdtrik")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse with respect to *k* of *nbdtr(k, n, p)*.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtrin`](scipy.special.nbdtrin.html#scipy.special.nbdtrin "scipy.special.nbdtrin")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse with respect to *n* of *nbdtr(k, n, p)*.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom "scipy.stats.nbinom")'
  prefs: []
  type: TYPE_NORMAL
- en: Negative binomial distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Wrapper for the Cephes [[1]](#r705a73ae868f-1) routine [`nbdtri`](#scipy.special.nbdtri
    "scipy.special.nbdtri").
  prefs: []
  type: TYPE_NORMAL
- en: The negative binomial distribution is also available as [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom"). Using [`nbdtri`](#scipy.special.nbdtri "scipy.special.nbdtri")
    directly can improve performance compared to the `ppf` method of [`scipy.stats.nbinom`](scipy.stats.nbinom.html#scipy.stats.nbinom
    "scipy.stats.nbinom").
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Cephes Mathematical Functions Library, [http://www.netlib.org/cephes/](http://www.netlib.org/cephes/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbdtri`](#scipy.special.nbdtri "scipy.special.nbdtri") is the inverse of
    [`nbdtr`](scipy.special.nbdtr.html#scipy.special.nbdtr "scipy.special.nbdtr")
    with respect to *p*. Up to floating point errors the following holds: `nbdtri(k,
    n, nbdtr(k, n, p))=p`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Compute the function for `k=10` and `n=5` at several points by providing a NumPy
    array or list for *y*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Plot the function for three different parameter sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-special-nbdtri-1_00_00.png](../Images/676bec82b1ceec3ce4c672787a7a2985.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`nbdtri`](#scipy.special.nbdtri "scipy.special.nbdtri") can evaluate different
    parameter sets by providing arrays with shapes compatible for broadcasting for
    *k*, *n* and *p*. Here we compute the function for three different *k* at four
    locations *p*, resulting in a 3x4 array.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
