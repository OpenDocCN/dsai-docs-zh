- en: numpy.apply_along_axis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.apply_along_axis.html](https://numpy.org/doc/1.26/reference/generated/numpy.apply_along_axis.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply a function to 1-D slices along the given axis.
  prefs: []
  type: TYPE_NORMAL
- en: Execute *func1d(a, *args, **kwargs)* where *func1d* operates on 1-D arrays and
    *a* is a 1-D slice of *arr* along *axis*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is equivalent to (but faster than) the following use of [`ndindex`](numpy.ndindex.html#numpy.ndindex
    "numpy.ndindex") and [`s_`](numpy.s_.html#numpy.s_ "numpy.s_"), which sets each
    of `ii`, `jj`, and `kk` to a tuple of indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Equivalently, eliminating the inner loop, this can be expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func1d**function (M,) -> (Nj…)'
  prefs: []
  type: TYPE_NORMAL
- en: This function should accept 1-D arrays. It is applied to 1-D slices of *arr*
    along the specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**integer'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which *arr* is sliced.
  prefs: []
  type: TYPE_NORMAL
- en: '**arr**ndarray (Ni…, M, Nk…)'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**any'
  prefs: []
  type: TYPE_NORMAL
- en: Additional arguments to *func1d*.
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**any'
  prefs: []
  type: TYPE_NORMAL
- en: Additional named arguments to *func1d*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray (Ni…, Nj…, Nk…)'
  prefs: []
  type: TYPE_NORMAL
- en: The output array. The shape of *out* is identical to the shape of *arr*, except
    along the *axis* dimension. This axis is removed, and replaced with new dimensions
    equal to the shape of the return value of *func1d*. So if *func1d* returns a scalar
    *out* will have one fewer dimensions than *arr*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`apply_over_axes`](numpy.apply_over_axes.html#numpy.apply_over_axes "numpy.apply_over_axes")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a function repeatedly over multiple axes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For a function that returns a 1D array, the number of dimensions in *outarr*
    is the same as *arr*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For a function that returns a higher dimensional array, those dimensions are
    inserted in place of the *axis* dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
