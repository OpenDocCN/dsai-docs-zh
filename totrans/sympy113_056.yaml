- en: Partitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/combinatorics/partitions.html](https://docs.sympy.org/latest/modules/combinatorics/partitions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This class represents an abstract partition.
  prefs: []
  type: TYPE_NORMAL
- en: A partition is a set of disjoint sets whose union equals a given set.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.iterables.partitions`](../utilities/iterables.html#sympy.utilities.iterables.partitions
    "sympy.utilities.iterables.partitions"), [`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “restricted growth string” of the partition.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The RGS is returned as a list of indices, L, where L[i] indicates the block
    in which element i appears. For example, in a partition of 3 elements (a, b, c)
    into 2 blocks ([c], [a, b]) the RGS is [1, 1, 0]: “a” is in block 1, “b” is in
    block 1 and “c” is in block 0.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creates a set partition from a restricted growth string.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The indices given in rgs are assumed to be the index of the element as given
    in elements *as provided* (the elements are not sorted by this routine). Block
    numbering starts from 0\. If any block was not referenced in `rgs` an error will
    be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return partition as a sorted list of lists.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Gets the rank of a partition.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return a canonical key that can be used for sorting.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering is based on the size and sorted elements of the partition and ties
    are broken with the rank.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This class represents an integer partition.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'In number theory and combinatorics, a partition of a positive integer, `n`,
    also called an integer partition, is a way of writing `n` as a list of positive
    integers that sum to n. Two partitions that differ only in the order of summands
    are considered to be the same partition; if order matters then the partitions
    are referred to as compositions. For example, 4 has five partitions: [4], [3,
    1], [2, 2], [2, 1, 1], and [1, 1, 1, 1]; the compositions [1, 2, 1] and [1, 1,
    2] are the same as partition [2, 1, 1].'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.utilities.iterables.partitions`](../utilities/iterables.html#sympy.utilities.iterables.partitions
    "sympy.utilities.iterables.partitions"), [`sympy.utilities.iterables.multiset_partitions`](../utilities/iterables.html#sympy.utilities.iterables.multiset_partitions
    "sympy.utilities.iterables.multiset_partitions")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R61](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Partition_%28number_theory%29](https://en.wikipedia.org/wiki/Partition_%28number_theory%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return the partition as a dictionary whose keys are the partition integers and
    the values are the multiplicity of that integer.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Prints the ferrer diagram of a partition.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Computes the conjugate partition of itself.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return the next partition of the integer, n, in lexical order, wrapping around
    to [n] if the partition is [1, …, 1].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return the previous partition of the integer, n, in lexical order, wrapping
    around to [1, …, 1] if the partition is [n].
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Generates a random integer partition summing to `n` as a list of reverse-sorted
    integers.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For the following, a seed is given so a known value can be shown; in practice,
    the seed would not be given.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Computes the m + 1 generalized unrestricted growth strings and returns them
    as rows in matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: RGS_enum computes the total number of restricted growth strings possible for
    a superset of size m.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check that the enumeration is correct by actually generating the partitions.
    Here, the 15 partitions of 4 items are generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Gives the unranked restricted growth string for a given superset size.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Computes the rank of a restricted growth string.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
