["```py\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd \n```", "```py\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64 \n```", "```py\nIn [5]: dates = pd.date_range(\"20130101\", periods=6)\n\nIn [6]: dates\nOut[6]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06'],\n dtype='datetime64[ns]', freq='D')\n\nIn [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(\"ABCD\"))\n\nIn [8]: df\nOut[8]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988 \n```", "```py\nIn [9]: df2 = pd.DataFrame(\n ...:    {\n ...:        \"A\": 1.0,\n ...:        \"B\": pd.Timestamp(\"20130102\"),\n ...:        \"C\": pd.Series(1, index=list(range(4)), dtype=\"float32\"),\n ...:        \"D\": np.array([3] * 4, dtype=\"int32\"),\n ...:        \"E\": pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n ...:        \"F\": \"foo\",\n ...:    }\n ...: )\n ...: \n\nIn [10]: df2\nOut[10]: \n A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo \n```", "```py\nIn [11]: df2.dtypes\nOut[11]: \nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object \n```", "```py\nIn [12]: df2.<TAB>  # noqa: E225, E999\ndf2.A                  df2.bool\ndf2.abs                df2.boxplot\ndf2.add                df2.C\ndf2.add_prefix         df2.clip\ndf2.add_suffix         df2.columns\ndf2.align              df2.copy\ndf2.all                df2.count\ndf2.any                df2.combine\ndf2.append             df2.D\ndf2.apply              df2.describe\ndf2.applymap           df2.diff\ndf2.B                  df2.duplicated \n```", "```py\nIn [13]: df.head()\nOut[13]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988 \n```", "```py\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06'],\n dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object') \n```", "```py\nIn [17]: df.to_numpy()\nOut[17]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n [ 1.2121, -0.1732,  0.1192, -1.0442],\n [-0.8618, -2.1046, -0.4949,  1.0718],\n [ 0.7216, -0.7068, -1.0396,  0.2719],\n [-0.425 ,  0.567 ,  0.2762, -1.0874],\n [-0.6737,  0.1136, -1.4784,  0.525 ]]) \n```", "```py\nIn [18]: df2.dtypes\nOut[18]: \nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object\n\nIn [19]: df2.to_numpy()\nOut[19]: \narray([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']],\n dtype=object) \n```", "```py\nIn [20]: df.describe()\nOut[20]: \n A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804 \n```", "```py\nIn [21]: df.T\nOut[21]: \n 2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988 \n```", "```py\nIn [22]: df.sort_index(axis=1, ascending=False)\nOut[22]: \n D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690 \n```", "```py\nIn [23]: df.sort_values(by=\"B\")\nOut[23]: \n A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401 \n```", "```py\nIn [24]: df[\"A\"]\nOut[24]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [25]: df[0:3]\nOut[25]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [26]: df[\"20130102\":\"20130104\"]\nOut[26]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [27]: df.loc[dates[0]]\nOut[27]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64 \n```", "```py\nIn [28]: df.loc[:, [\"A\", \"B\"]]\nOut[28]: \n A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648 \n```", "```py\nIn [29]: df.loc[\"20130102\":\"20130104\", [\"A\", \"B\"]]\nOut[29]: \n A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771 \n```", "```py\nIn [30]: df.loc[dates[0], \"A\"]\nOut[30]: 0.4691122999071863 \n```", "```py\nIn [31]: df.at[dates[0], \"A\"]\nOut[31]: 0.4691122999071863 \n```", "```py\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64 \n```", "```py\nIn [33]: df.iloc[3:5, 0:2]\nOut[33]: \n A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020 \n```", "```py\nIn [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]: \n A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232 \n```", "```py\nIn [35]: df.iloc[1:3, :]\nOut[35]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804 \n```", "```py\nIn [36]: df.iloc[:, 1:3]\nOut[36]: \n B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427 \n```", "```py\nIn [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858 \n```", "```py\nIn [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858 \n```", "```py\nIn [39]: df[df[\"A\"] > 0]\nOut[39]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [40]: df[df > 0]\nOut[40]: \n A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988 \n```", "```py\nIn [41]: df2 = df.copy()\n\nIn [42]: df2[\"E\"] = [\"one\", \"one\", \"two\", \"three\", \"four\", \"three\"]\n\nIn [43]: df2\nOut[43]: \n A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2[\"E\"].isin([\"two\", \"four\"])]\nOut[44]: \n A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four \n```", "```py\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(\"20130102\", periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df[\"F\"] = s1 \n```", "```py\nIn [48]: df.at[dates[0], \"A\"] = 0 \n```", "```py\nIn [49]: df.iat[0, 1] = 0 \n```", "```py\nIn [50]: df.loc[:, \"D\"] = np.array([5] * len(df)) \n```", "```py\nIn [51]: df\nOut[51]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5.0  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5.0  5.0 \n```", "```py\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5.0  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5.0 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5.0 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5.0 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5.0 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5.0 -5.0 \n```", "```py\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [\"E\"])\n\nIn [56]: df1.loc[dates[0] : dates[1], \"E\"] = 1\n\nIn [57]: df1\nOut[57]: \n A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  NaN \n```", "```py\nIn [58]: df1.dropna(how=\"any\")\nOut[58]: \n A         B         C    D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0 \n```", "```py\nIn [59]: df1.fillna(value=5)\nOut[59]: \n A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  5.0 \n```", "```py\nIn [60]: pd.isna(df1)\nOut[60]: \n A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True \n```", "```py\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64 \n```", "```py\nIn [62]: df.mean(axis=1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64 \n```", "```py\nIn [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis=\"index\")\nOut[65]: \n A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN \n```", "```py\nIn [66]: df.agg(lambda x: np.mean(x) * 5.6)\nOut[66]: \nA    -0.025054\nB    -2.150294\nC    -3.851445\nD    28.000000\nF    16.800000\ndtype: float64\n\nIn [67]: df.transform(lambda x: x * 101.2)\nOut[67]: \n A           B           C      D      F\n2013-01-01    0.000000    0.000000 -152.716721  506.0    NaN\n2013-01-02  122.665737  -17.529322   12.063922  506.0  101.2\n2013-01-03  -87.219115 -212.982405  -50.086843  506.0  202.4\n2013-01-04   73.021382  -71.525239 -105.204988  506.0  303.6\n2013-01-05  -43.007200   57.382459   27.954680  506.0  404.8\n2013-01-06  -68.177398   11.501219 -149.616767  506.0  506.0 \n```", "```py\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n2    2\n6    2\n1    1\nName: count, dtype: int64 \n```", "```py\nIn [71]: s = pd.Series([\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object \n```", "```py\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495 \n```", "```py\nIn [77]: left = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]})\n\nIn [78]: right = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]})\n\nIn [79]: left\nOut[79]: \n key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on=\"key\")\nOut[81]: \n key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5 \n```", "```py\nIn [82]: left = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"lval\": [1, 2]})\n\nIn [83]: right = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"rval\": [4, 5]})\n\nIn [84]: left\nOut[84]: \n key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on=\"key\")\nOut[86]: \n key  lval  rval\n0  foo     1     4\n1  bar     2     5 \n```", "```py\nIn [87]: df = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n ....:        \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n ....:        \"C\": np.random.randn(8),\n ....:        \"D\": np.random.randn(8),\n ....:    }\n ....: )\n ....: \n\nIn [88]: df\nOut[88]: \n A      B         C         D\n0  foo    one  1.346061 -1.577585\n1  bar    one  1.511763  0.396823\n2  foo    two  1.627081 -0.105381\n3  bar  three -0.990582 -0.532532\n4  foo    two -0.441652  1.453749\n5  bar    two  1.211526  1.208843\n6  foo    one  0.268520 -0.080952\n7  foo  three  0.024580 -0.264610 \n```", "```py\nIn [89]: df.groupby(\"A\")[[\"C\", \"D\"]].sum()\nOut[89]: \n C         D\nA \nbar  1.732707  1.073134\nfoo  2.824590 -0.574779 \n```", "```py\nIn [90]: df.groupby([\"A\", \"B\"]).sum()\nOut[90]: \n C         D\nA   B \nbar one    1.511763  0.396823\n three -0.990582 -0.532532\n two    1.211526  1.208843\nfoo one    1.614581 -1.658537\n three  0.024580 -0.264610\n two    1.185429  1.348368 \n```", "```py\nIn [91]: arrays = [\n ....:   [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n ....:   [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n ....: ]\n ....: \n\nIn [92]: index = pd.MultiIndex.from_arrays(arrays, names=[\"first\", \"second\"])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431 \n```", "```py\nIn [96]: stacked = df2.stack(future_stack=True)\n\nIn [97]: stacked\nOut[97]: \nfirst  second \nbar    one     A   -0.727965\n B   -0.589346\n two     A    0.339969\n B   -0.693205\nbaz    one     A   -0.339355\n B    0.593616\n two     A    0.884345\n B    1.591431\ndtype: float64 \n```", "```py\nIn [98]: stacked.unstack()\nOut[98]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]: \nsecond        one       two\nfirst \nbar   A -0.727965  0.339969\n B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]: \nfirst          bar       baz\nsecond \none    A -0.727965 -0.339355\n B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n B -0.693205  1.591431 \n```", "```py\nIn [101]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 3,\n .....:        \"B\": [\"A\", \"B\", \"C\"] * 4,\n .....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 2,\n .....:        \"D\": np.random.randn(12),\n .....:        \"E\": np.random.randn(12),\n .....:    }\n .....: )\n .....: \n\nIn [102]: df\nOut[102]: \n A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230 \n```", "```py\nIn [103]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[103]: \nC             bar       foo\nA     B \none   A  2.395985 -1.202872\n B  1.395433 -1.814470\n C -0.392670 -0.055224\nthree A -0.595447       NaN\n B       NaN  1.928123\n C  0.166599       NaN\ntwo   A       NaN  0.007207\n B  1.552825       NaN\n C       NaN  1.018601 \n```", "```py\nIn [104]: rng = pd.date_range(\"1/1/2012\", periods=100, freq=\"s\")\n\nIn [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [106]: ts.resample(\"5Min\").sum()\nOut[106]: \n2012-01-01    24182\nFreq: 5min, dtype: int64 \n```", "```py\nIn [107]: rng = pd.date_range(\"3/6/2012 00:00\", periods=5, freq=\"D\")\n\nIn [108]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [109]: ts\nOut[109]: \n2012-03-06    1.857704\n2012-03-07   -1.193545\n2012-03-08    0.677510\n2012-03-09   -0.153931\n2012-03-10    0.520091\nFreq: D, dtype: float64\n\nIn [110]: ts_utc = ts.tz_localize(\"UTC\")\n\nIn [111]: ts_utc\nOut[111]: \n2012-03-06 00:00:00+00:00    1.857704\n2012-03-07 00:00:00+00:00   -1.193545\n2012-03-08 00:00:00+00:00    0.677510\n2012-03-09 00:00:00+00:00   -0.153931\n2012-03-10 00:00:00+00:00    0.520091\nFreq: D, dtype: float64 \n```", "```py\nIn [112]: ts_utc.tz_convert(\"US/Eastern\")\nOut[112]: \n2012-03-05 19:00:00-05:00    1.857704\n2012-03-06 19:00:00-05:00   -1.193545\n2012-03-07 19:00:00-05:00    0.677510\n2012-03-08 19:00:00-05:00   -0.153931\n2012-03-09 19:00:00-05:00    0.520091\nFreq: D, dtype: float64 \n```", "```py\nIn [113]: rng\nOut[113]: \nDatetimeIndex(['2012-03-06', '2012-03-07', '2012-03-08', '2012-03-09',\n '2012-03-10'],\n dtype='datetime64[ns]', freq='D')\n\nIn [114]: rng + pd.offsets.BusinessDay(5)\nOut[114]: \nDatetimeIndex(['2012-03-13', '2012-03-14', '2012-03-15', '2012-03-16',\n '2012-03-16'],\n dtype='datetime64[ns]', freq=None) \n```", "```py\nIn [115]: df = pd.DataFrame(\n .....:    {\"id\": [1, 2, 3, 4, 5, 6], \"raw_grade\": [\"a\", \"b\", \"b\", \"a\", \"a\", \"e\"]}\n .....: )\n .....: \n```", "```py\nIn [116]: df[\"grade\"] = df[\"raw_grade\"].astype(\"category\")\n\nIn [117]: df[\"grade\"]\nOut[117]: \n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): ['a', 'b', 'e'] \n```", "```py\nIn [118]: new_categories = [\"very good\", \"good\", \"very bad\"]\n\nIn [119]: df[\"grade\"] = df[\"grade\"].cat.rename_categories(new_categories) \n```", "```py\nIn [120]: df[\"grade\"] = df[\"grade\"].cat.set_categories(\n .....:    [\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"]\n .....: )\n .....: \n\nIn [121]: df[\"grade\"]\nOut[121]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] \n```", "```py\nIn [122]: df.sort_values(by=\"grade\")\nOut[122]: \n id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n4   5         a  very good \n```", "```py\nIn [123]: df.groupby(\"grade\", observed=False).size()\nOut[123]: \ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64 \n```", "```py\nIn [124]: import matplotlib.pyplot as plt\n\nIn [125]: plt.close(\"all\") \n```", "```py\nIn [126]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [127]: ts = ts.cumsum()\n\nIn [128]: ts.plot(); \n```", "```py\nIn [129]: df = pd.DataFrame(\n .....:    np.random.randn(1000, 4), index=ts.index, columns=[\"A\", \"B\", \"C\", \"D\"]\n .....: )\n .....: \n\nIn [130]: df = df.cumsum()\n\nIn [131]: plt.figure();\n\nIn [132]: df.plot();\n\nIn [133]: plt.legend(loc='best'); \n```", "```py\nIn [134]: df = pd.DataFrame(np.random.randint(0, 5, (10, 5)))\n\nIn [135]: df.to_csv(\"foo.csv\") \n```", "```py\nIn [136]: pd.read_csv(\"foo.csv\")\nOut[136]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [137]: df.to_parquet(\"foo.parquet\") \n```", "```py\nIn [138]: pd.read_parquet(\"foo.parquet\")\nOut[138]: \n 0  1  2  3  4\n0  4  3  1  1  2\n1  1  0  2  3  2\n2  1  4  2  1  2\n3  0  4  0  2  2\n4  4  2  2  3  4\n5  4  0  4  3  1\n6  2  1  2  0  3\n7  4  0  4  4  4\n8  4  4  1  0  1\n9  0  4  3  0  3 \n```", "```py\nIn [139]: df.to_excel(\"foo.xlsx\", sheet_name=\"Sheet1\") \n```", "```py\nIn [140]: pd.read_excel(\"foo.xlsx\", \"Sheet1\", index_col=None, na_values=[\"NA\"])\nOut[140]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [141]: if pd.Series([False, True, False]):\n .....:     print(\"I was true\")\n .....: \n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-141-b27eb9c1dfc0> in ?()\n----> 1 if pd.Series([False, True, False]):\n  2      print(\"I was true\")\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```", "```py\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64 \n```", "```py\nIn [5]: dates = pd.date_range(\"20130101\", periods=6)\n\nIn [6]: dates\nOut[6]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06'],\n dtype='datetime64[ns]', freq='D')\n\nIn [7]: df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(\"ABCD\"))\n\nIn [8]: df\nOut[8]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988 \n```", "```py\nIn [9]: df2 = pd.DataFrame(\n ...:    {\n ...:        \"A\": 1.0,\n ...:        \"B\": pd.Timestamp(\"20130102\"),\n ...:        \"C\": pd.Series(1, index=list(range(4)), dtype=\"float32\"),\n ...:        \"D\": np.array([3] * 4, dtype=\"int32\"),\n ...:        \"E\": pd.Categorical([\"test\", \"train\", \"test\", \"train\"]),\n ...:        \"F\": \"foo\",\n ...:    }\n ...: )\n ...: \n\nIn [10]: df2\nOut[10]: \n A          B    C  D      E    F\n0  1.0 2013-01-02  1.0  3   test  foo\n1  1.0 2013-01-02  1.0  3  train  foo\n2  1.0 2013-01-02  1.0  3   test  foo\n3  1.0 2013-01-02  1.0  3  train  foo \n```", "```py\nIn [11]: df2.dtypes\nOut[11]: \nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object \n```", "```py\nIn [12]: df2.<TAB>  # noqa: E225, E999\ndf2.A                  df2.bool\ndf2.abs                df2.boxplot\ndf2.add                df2.C\ndf2.add_prefix         df2.clip\ndf2.add_suffix         df2.columns\ndf2.align              df2.copy\ndf2.all                df2.count\ndf2.any                df2.combine\ndf2.append             df2.D\ndf2.apply              df2.describe\ndf2.applymap           df2.diff\ndf2.B                  df2.duplicated \n```", "```py\nIn [13]: df.head()\nOut[13]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988 \n```", "```py\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n '2013-01-05', '2013-01-06'],\n dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object') \n```", "```py\nIn [17]: df.to_numpy()\nOut[17]: \narray([[ 0.4691, -0.2829, -1.5091, -1.1356],\n [ 1.2121, -0.1732,  0.1192, -1.0442],\n [-0.8618, -2.1046, -0.4949,  1.0718],\n [ 0.7216, -0.7068, -1.0396,  0.2719],\n [-0.425 ,  0.567 ,  0.2762, -1.0874],\n [-0.6737,  0.1136, -1.4784,  0.525 ]]) \n```", "```py\nIn [18]: df2.dtypes\nOut[18]: \nA          float64\nB    datetime64[s]\nC          float32\nD            int32\nE         category\nF           object\ndtype: object\n\nIn [19]: df2.to_numpy()\nOut[19]: \narray([[1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'test', 'foo'],\n [1.0, Timestamp('2013-01-02 00:00:00'), 1.0, 3, 'train', 'foo']],\n dtype=object) \n```", "```py\nIn [20]: df.describe()\nOut[20]: \n A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804 \n```", "```py\nIn [21]: df.T\nOut[21]: \n 2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988 \n```", "```py\nIn [22]: df.sort_index(axis=1, ascending=False)\nOut[22]: \n D         C         B         A\n2013-01-01 -1.135632 -1.509059 -0.282863  0.469112\n2013-01-02 -1.044236  0.119209 -0.173215  1.212112\n2013-01-03  1.071804 -0.494929 -2.104569 -0.861849\n2013-01-04  0.271860 -1.039575 -0.706771  0.721555\n2013-01-05 -1.087401  0.276232  0.567020 -0.424972\n2013-01-06  0.524988 -1.478427  0.113648 -0.673690 \n```", "```py\nIn [23]: df.sort_values(by=\"B\")\nOut[23]: \n A         B         C         D\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401 \n```", "```py\nIn [24]: df[\"A\"]\nOut[24]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [25]: df[0:3]\nOut[25]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [26]: df[\"20130102\":\"20130104\"]\nOut[26]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [27]: df.loc[dates[0]]\nOut[27]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64 \n```", "```py\nIn [28]: df.loc[:, [\"A\", \"B\"]]\nOut[28]: \n A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648 \n```", "```py\nIn [29]: df.loc[\"20130102\":\"20130104\", [\"A\", \"B\"]]\nOut[29]: \n A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771 \n```", "```py\nIn [30]: df.loc[dates[0], \"A\"]\nOut[30]: 0.4691122999071863 \n```", "```py\nIn [31]: df.at[dates[0], \"A\"]\nOut[31]: 0.4691122999071863 \n```", "```py\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64 \n```", "```py\nIn [33]: df.iloc[3:5, 0:2]\nOut[33]: \n A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020 \n```", "```py\nIn [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]: \n A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232 \n```", "```py\nIn [35]: df.iloc[1:3, :]\nOut[35]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804 \n```", "```py\nIn [36]: df.iloc[:, 1:3]\nOut[36]: \n B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427 \n```", "```py\nIn [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858 \n```", "```py\nIn [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858 \n```", "```py\nIn [39]: df[df[\"A\"] > 0]\nOut[39]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [40]: df[df > 0]\nOut[40]: \n A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988 \n```", "```py\nIn [41]: df2 = df.copy()\n\nIn [42]: df2[\"E\"] = [\"one\", \"one\", \"two\", \"three\", \"four\", \"three\"]\n\nIn [43]: df2\nOut[43]: \n A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2[\"E\"].isin([\"two\", \"four\"])]\nOut[44]: \n A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four \n```", "```py\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(\"20130102\", periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df[\"F\"] = s1 \n```", "```py\nIn [48]: df.at[dates[0], \"A\"] = 0 \n```", "```py\nIn [49]: df.iat[0, 1] = 0 \n```", "```py\nIn [50]: df.loc[:, \"D\"] = np.array([5] * len(df)) \n```", "```py\nIn [51]: df\nOut[51]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5.0  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5.0  5.0 \n```", "```py\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5.0  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5.0 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5.0 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5.0 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5.0 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5.0 -5.0 \n```", "```py\nIn [24]: df[\"A\"]\nOut[24]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64 \n```", "```py\nIn [25]: df[0:3]\nOut[25]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [26]: df[\"20130102\":\"20130104\"]\nOut[26]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [27]: df.loc[dates[0]]\nOut[27]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64 \n```", "```py\nIn [28]: df.loc[:, [\"A\", \"B\"]]\nOut[28]: \n A         B\n2013-01-01  0.469112 -0.282863\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020\n2013-01-06 -0.673690  0.113648 \n```", "```py\nIn [29]: df.loc[\"20130102\":\"20130104\", [\"A\", \"B\"]]\nOut[29]: \n A         B\n2013-01-02  1.212112 -0.173215\n2013-01-03 -0.861849 -2.104569\n2013-01-04  0.721555 -0.706771 \n```", "```py\nIn [30]: df.loc[dates[0], \"A\"]\nOut[30]: 0.4691122999071863 \n```", "```py\nIn [31]: df.at[dates[0], \"A\"]\nOut[31]: 0.4691122999071863 \n```", "```py\nIn [32]: df.iloc[3]\nOut[32]: \nA    0.721555\nB   -0.706771\nC   -1.039575\nD    0.271860\nName: 2013-01-04 00:00:00, dtype: float64 \n```", "```py\nIn [33]: df.iloc[3:5, 0:2]\nOut[33]: \n A         B\n2013-01-04  0.721555 -0.706771\n2013-01-05 -0.424972  0.567020 \n```", "```py\nIn [34]: df.iloc[[1, 2, 4], [0, 2]]\nOut[34]: \n A         C\n2013-01-02  1.212112  0.119209\n2013-01-03 -0.861849 -0.494929\n2013-01-05 -0.424972  0.276232 \n```", "```py\nIn [35]: df.iloc[1:3, :]\nOut[35]: \n A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804 \n```", "```py\nIn [36]: df.iloc[:, 1:3]\nOut[36]: \n B         C\n2013-01-01 -0.282863 -1.509059\n2013-01-02 -0.173215  0.119209\n2013-01-03 -2.104569 -0.494929\n2013-01-04 -0.706771 -1.039575\n2013-01-05  0.567020  0.276232\n2013-01-06  0.113648 -1.478427 \n```", "```py\nIn [37]: df.iloc[1, 1]\nOut[37]: -0.17321464905330858 \n```", "```py\nIn [38]: df.iat[1, 1]\nOut[38]: -0.17321464905330858 \n```", "```py\nIn [39]: df[df[\"A\"] > 0]\nOut[39]: \n A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860 \n```", "```py\nIn [40]: df[df > 0]\nOut[40]: \n A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988 \n```", "```py\nIn [41]: df2 = df.copy()\n\nIn [42]: df2[\"E\"] = [\"one\", \"one\", \"two\", \"three\", \"four\", \"three\"]\n\nIn [43]: df2\nOut[43]: \n A         B         C         D      E\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632    one\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236    one\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804    two\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860  three\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401   four\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988  three\n\nIn [44]: df2[df2[\"E\"].isin([\"two\", \"four\"])]\nOut[44]: \n A         B         C         D     E\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804   two\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401  four \n```", "```py\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range(\"20130102\", periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df[\"F\"] = s1 \n```", "```py\nIn [48]: df.at[dates[0], \"A\"] = 0 \n```", "```py\nIn [49]: df.iat[0, 1] = 0 \n```", "```py\nIn [50]: df.loc[:, \"D\"] = np.array([5] * len(df)) \n```", "```py\nIn [51]: df\nOut[51]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0\n2013-01-05 -0.424972  0.567020  0.276232  5.0  4.0\n2013-01-06 -0.673690  0.113648 -1.478427  5.0  5.0 \n```", "```py\nIn [52]: df2 = df.copy()\n\nIn [53]: df2[df2 > 0] = -df2\n\nIn [54]: df2\nOut[54]: \n A         B         C    D    F\n2013-01-01  0.000000  0.000000 -1.509059 -5.0  NaN\n2013-01-02 -1.212112 -0.173215 -0.119209 -5.0 -1.0\n2013-01-03 -0.861849 -2.104569 -0.494929 -5.0 -2.0\n2013-01-04 -0.721555 -0.706771 -1.039575 -5.0 -3.0\n2013-01-05 -0.424972 -0.567020 -0.276232 -5.0 -4.0\n2013-01-06 -0.673690 -0.113648 -1.478427 -5.0 -5.0 \n```", "```py\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + [\"E\"])\n\nIn [56]: df1.loc[dates[0] : dates[1], \"E\"] = 1\n\nIn [57]: df1\nOut[57]: \n A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  NaN \n```", "```py\nIn [58]: df1.dropna(how=\"any\")\nOut[58]: \n A         B         C    D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0 \n```", "```py\nIn [59]: df1.fillna(value=5)\nOut[59]: \n A         B         C    D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5.0  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5.0  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5.0  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5.0  3.0  5.0 \n```", "```py\nIn [60]: pd.isna(df1)\nOut[60]: \n A      B      C      D      F      E\n2013-01-01  False  False  False  False   True  False\n2013-01-02  False  False  False  False  False  False\n2013-01-03  False  False  False  False  False   True\n2013-01-04  False  False  False  False  False   True \n```", "```py\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64 \n```", "```py\nIn [62]: df.mean(axis=1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64 \n```", "```py\nIn [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis=\"index\")\nOut[65]: \n A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN \n```", "```py\nIn [66]: df.agg(lambda x: np.mean(x) * 5.6)\nOut[66]: \nA    -0.025054\nB    -2.150294\nC    -3.851445\nD    28.000000\nF    16.800000\ndtype: float64\n\nIn [67]: df.transform(lambda x: x * 101.2)\nOut[67]: \n A           B           C      D      F\n2013-01-01    0.000000    0.000000 -152.716721  506.0    NaN\n2013-01-02  122.665737  -17.529322   12.063922  506.0  101.2\n2013-01-03  -87.219115 -212.982405  -50.086843  506.0  202.4\n2013-01-04   73.021382  -71.525239 -105.204988  506.0  303.6\n2013-01-05  -43.007200   57.382459   27.954680  506.0  404.8\n2013-01-06  -68.177398   11.501219 -149.616767  506.0  506.0 \n```", "```py\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n2    2\n6    2\n1    1\nName: count, dtype: int64 \n```", "```py\nIn [71]: s = pd.Series([\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object \n```", "```py\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64 \n```", "```py\nIn [62]: df.mean(axis=1)\nOut[62]: \n2013-01-01    0.872735\n2013-01-02    1.431621\n2013-01-03    0.707731\n2013-01-04    1.395042\n2013-01-05    1.883656\n2013-01-06    1.592306\nFreq: D, dtype: float64 \n```", "```py\nIn [63]: s = pd.Series([1, 3, 5, np.nan, 6, 8], index=dates).shift(2)\n\nIn [64]: s\nOut[64]: \n2013-01-01    NaN\n2013-01-02    NaN\n2013-01-03    1.0\n2013-01-04    3.0\n2013-01-05    5.0\n2013-01-06    NaN\nFreq: D, dtype: float64\n\nIn [65]: df.sub(s, axis=\"index\")\nOut[65]: \n A         B         C    D    F\n2013-01-01       NaN       NaN       NaN  NaN  NaN\n2013-01-02       NaN       NaN       NaN  NaN  NaN\n2013-01-03 -1.861849 -3.104569 -1.494929  4.0  1.0\n2013-01-04 -2.278445 -3.706771 -4.039575  2.0  0.0\n2013-01-05 -5.424972 -4.432980 -4.723768  0.0 -1.0\n2013-01-06       NaN       NaN       NaN  NaN  NaN \n```", "```py\nIn [66]: df.agg(lambda x: np.mean(x) * 5.6)\nOut[66]: \nA    -0.025054\nB    -2.150294\nC    -3.851445\nD    28.000000\nF    16.800000\ndtype: float64\n\nIn [67]: df.transform(lambda x: x * 101.2)\nOut[67]: \n A           B           C      D      F\n2013-01-01    0.000000    0.000000 -152.716721  506.0    NaN\n2013-01-02  122.665737  -17.529322   12.063922  506.0  101.2\n2013-01-03  -87.219115 -212.982405  -50.086843  506.0  202.4\n2013-01-04   73.021382  -71.525239 -105.204988  506.0  303.6\n2013-01-05  -43.007200   57.382459   27.954680  506.0  404.8\n2013-01-06  -68.177398   11.501219 -149.616767  506.0  506.0 \n```", "```py\nIn [68]: s = pd.Series(np.random.randint(0, 7, size=10))\n\nIn [69]: s\nOut[69]: \n0    4\n1    2\n2    1\n3    2\n4    6\n5    4\n6    4\n7    6\n8    4\n9    4\ndtype: int64\n\nIn [70]: s.value_counts()\nOut[70]: \n4    5\n2    2\n6    2\n1    1\nName: count, dtype: int64 \n```", "```py\nIn [71]: s = pd.Series([\"A\", \"B\", \"C\", \"Aaba\", \"Baca\", np.nan, \"CABA\", \"dog\", \"cat\"])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object \n```", "```py\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495 \n```", "```py\nIn [77]: left = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]})\n\nIn [78]: right = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]})\n\nIn [79]: left\nOut[79]: \n key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on=\"key\")\nOut[81]: \n key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5 \n```", "```py\nIn [82]: left = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"lval\": [1, 2]})\n\nIn [83]: right = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"rval\": [4, 5]})\n\nIn [84]: left\nOut[84]: \n key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on=\"key\")\nOut[86]: \n key  lval  rval\n0  foo     1     4\n1  bar     2     5 \n```", "```py\nIn [73]: df = pd.DataFrame(np.random.randn(10, 4))\n\nIn [74]: df\nOut[74]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495\n\n# break it into pieces\nIn [75]: pieces = [df[:3], df[3:7], df[7:]]\n\nIn [76]: pd.concat(pieces)\nOut[76]: \n 0         1         2         3\n0 -0.548702  1.467327 -1.015962 -0.483075\n1  1.637550 -1.217659 -0.291519 -1.745505\n2 -0.263952  0.991460 -0.919069  0.266046\n3 -0.709661  1.669052  1.037882 -1.705775\n4 -0.919854 -0.042379  1.247642 -0.009920\n5  0.290213  0.495767  0.362949  1.548106\n6 -1.131345 -0.089329  0.337863 -0.945867\n7 -0.932132  1.956030  0.017587 -0.016692\n8 -0.575247  0.254161 -1.143704  0.215897\n9  1.193555 -0.077118 -0.408530 -0.862495 \n```", "```py\nIn [77]: left = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"lval\": [1, 2]})\n\nIn [78]: right = pd.DataFrame({\"key\": [\"foo\", \"foo\"], \"rval\": [4, 5]})\n\nIn [79]: left\nOut[79]: \n key  lval\n0  foo     1\n1  foo     2\n\nIn [80]: right\nOut[80]: \n key  rval\n0  foo     4\n1  foo     5\n\nIn [81]: pd.merge(left, right, on=\"key\")\nOut[81]: \n key  lval  rval\n0  foo     1     4\n1  foo     1     5\n2  foo     2     4\n3  foo     2     5 \n```", "```py\nIn [82]: left = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"lval\": [1, 2]})\n\nIn [83]: right = pd.DataFrame({\"key\": [\"foo\", \"bar\"], \"rval\": [4, 5]})\n\nIn [84]: left\nOut[84]: \n key  lval\n0  foo     1\n1  bar     2\n\nIn [85]: right\nOut[85]: \n key  rval\n0  foo     4\n1  bar     5\n\nIn [86]: pd.merge(left, right, on=\"key\")\nOut[86]: \n key  lval  rval\n0  foo     1     4\n1  bar     2     5 \n```", "```py\nIn [87]: df = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"foo\"],\n ....:        \"B\": [\"one\", \"one\", \"two\", \"three\", \"two\", \"two\", \"one\", \"three\"],\n ....:        \"C\": np.random.randn(8),\n ....:        \"D\": np.random.randn(8),\n ....:    }\n ....: )\n ....: \n\nIn [88]: df\nOut[88]: \n A      B         C         D\n0  foo    one  1.346061 -1.577585\n1  bar    one  1.511763  0.396823\n2  foo    two  1.627081 -0.105381\n3  bar  three -0.990582 -0.532532\n4  foo    two -0.441652  1.453749\n5  bar    two  1.211526  1.208843\n6  foo    one  0.268520 -0.080952\n7  foo  three  0.024580 -0.264610 \n```", "```py\nIn [89]: df.groupby(\"A\")[[\"C\", \"D\"]].sum()\nOut[89]: \n C         D\nA \nbar  1.732707  1.073134\nfoo  2.824590 -0.574779 \n```", "```py\nIn [90]: df.groupby([\"A\", \"B\"]).sum()\nOut[90]: \n C         D\nA   B \nbar one    1.511763  0.396823\n three -0.990582 -0.532532\n two    1.211526  1.208843\nfoo one    1.614581 -1.658537\n three  0.024580 -0.264610\n two    1.185429  1.348368 \n```", "```py\nIn [91]: arrays = [\n ....:   [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n ....:   [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n ....: ]\n ....: \n\nIn [92]: index = pd.MultiIndex.from_arrays(arrays, names=[\"first\", \"second\"])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431 \n```", "```py\nIn [96]: stacked = df2.stack(future_stack=True)\n\nIn [97]: stacked\nOut[97]: \nfirst  second \nbar    one     A   -0.727965\n B   -0.589346\n two     A    0.339969\n B   -0.693205\nbaz    one     A   -0.339355\n B    0.593616\n two     A    0.884345\n B    1.591431\ndtype: float64 \n```", "```py\nIn [98]: stacked.unstack()\nOut[98]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]: \nsecond        one       two\nfirst \nbar   A -0.727965  0.339969\n B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]: \nfirst          bar       baz\nsecond \none    A -0.727965 -0.339355\n B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n B -0.693205  1.591431 \n```", "```py\nIn [101]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 3,\n .....:        \"B\": [\"A\", \"B\", \"C\"] * 4,\n .....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 2,\n .....:        \"D\": np.random.randn(12),\n .....:        \"E\": np.random.randn(12),\n .....:    }\n .....: )\n .....: \n\nIn [102]: df\nOut[102]: \n A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230 \n```", "```py\nIn [103]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[103]: \nC             bar       foo\nA     B \none   A  2.395985 -1.202872\n B  1.395433 -1.814470\n C -0.392670 -0.055224\nthree A -0.595447       NaN\n B       NaN  1.928123\n C  0.166599       NaN\ntwo   A       NaN  0.007207\n B  1.552825       NaN\n C       NaN  1.018601 \n```", "```py\nIn [91]: arrays = [\n ....:   [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n ....:   [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n ....: ]\n ....: \n\nIn [92]: index = pd.MultiIndex.from_arrays(arrays, names=[\"first\", \"second\"])\n\nIn [93]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"])\n\nIn [94]: df2 = df[:4]\n\nIn [95]: df2\nOut[95]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431 \n```", "```py\nIn [96]: stacked = df2.stack(future_stack=True)\n\nIn [97]: stacked\nOut[97]: \nfirst  second \nbar    one     A   -0.727965\n B   -0.589346\n two     A    0.339969\n B   -0.693205\nbaz    one     A   -0.339355\n B    0.593616\n two     A    0.884345\n B    1.591431\ndtype: float64 \n```", "```py\nIn [98]: stacked.unstack()\nOut[98]: \n A         B\nfirst second \nbar   one    -0.727965 -0.589346\n two     0.339969 -0.693205\nbaz   one    -0.339355  0.593616\n two     0.884345  1.591431\n\nIn [99]: stacked.unstack(1)\nOut[99]: \nsecond        one       two\nfirst \nbar   A -0.727965  0.339969\n B -0.589346 -0.693205\nbaz   A -0.339355  0.884345\n B  0.593616  1.591431\n\nIn [100]: stacked.unstack(0)\nOut[100]: \nfirst          bar       baz\nsecond \none    A -0.727965 -0.339355\n B -0.589346  0.593616\ntwo    A  0.339969  0.884345\n B -0.693205  1.591431 \n```", "```py\nIn [101]: df = pd.DataFrame(\n .....:    {\n .....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 3,\n .....:        \"B\": [\"A\", \"B\", \"C\"] * 4,\n .....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 2,\n .....:        \"D\": np.random.randn(12),\n .....:        \"E\": np.random.randn(12),\n .....:    }\n .....: )\n .....: \n\nIn [102]: df\nOut[102]: \n A  B    C         D         E\n0     one  A  foo -1.202872  0.047609\n1     one  B  foo -1.814470 -0.136473\n2     two  C  foo  1.018601 -0.561757\n3   three  A  bar -0.595447 -1.623033\n4     one  B  bar  1.395433  0.029399\n5     one  C  bar -0.392670 -0.542108\n6     two  A  foo  0.007207  0.282696\n7   three  B  foo  1.928123 -0.087302\n8     one  C  foo -0.055224 -1.575170\n9     one  A  bar  2.395985  1.771208\n10    two  B  bar  1.552825  0.816482\n11  three  C  bar  0.166599  1.100230 \n```", "```py\nIn [103]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[103]: \nC             bar       foo\nA     B \none   A  2.395985 -1.202872\n B  1.395433 -1.814470\n C -0.392670 -0.055224\nthree A -0.595447       NaN\n B       NaN  1.928123\n C  0.166599       NaN\ntwo   A       NaN  0.007207\n B  1.552825       NaN\n C       NaN  1.018601 \n```", "```py\nIn [104]: rng = pd.date_range(\"1/1/2012\", periods=100, freq=\"s\")\n\nIn [105]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)\n\nIn [106]: ts.resample(\"5Min\").sum()\nOut[106]: \n2012-01-01    24182\nFreq: 5min, dtype: int64 \n```", "```py\nIn [107]: rng = pd.date_range(\"3/6/2012 00:00\", periods=5, freq=\"D\")\n\nIn [108]: ts = pd.Series(np.random.randn(len(rng)), rng)\n\nIn [109]: ts\nOut[109]: \n2012-03-06    1.857704\n2012-03-07   -1.193545\n2012-03-08    0.677510\n2012-03-09   -0.153931\n2012-03-10    0.520091\nFreq: D, dtype: float64\n\nIn [110]: ts_utc = ts.tz_localize(\"UTC\")\n\nIn [111]: ts_utc\nOut[111]: \n2012-03-06 00:00:00+00:00    1.857704\n2012-03-07 00:00:00+00:00   -1.193545\n2012-03-08 00:00:00+00:00    0.677510\n2012-03-09 00:00:00+00:00   -0.153931\n2012-03-10 00:00:00+00:00    0.520091\nFreq: D, dtype: float64 \n```", "```py\nIn [112]: ts_utc.tz_convert(\"US/Eastern\")\nOut[112]: \n2012-03-05 19:00:00-05:00    1.857704\n2012-03-06 19:00:00-05:00   -1.193545\n2012-03-07 19:00:00-05:00    0.677510\n2012-03-08 19:00:00-05:00   -0.153931\n2012-03-09 19:00:00-05:00    0.520091\nFreq: D, dtype: float64 \n```", "```py\nIn [113]: rng\nOut[113]: \nDatetimeIndex(['2012-03-06', '2012-03-07', '2012-03-08', '2012-03-09',\n '2012-03-10'],\n dtype='datetime64[ns]', freq='D')\n\nIn [114]: rng + pd.offsets.BusinessDay(5)\nOut[114]: \nDatetimeIndex(['2012-03-13', '2012-03-14', '2012-03-15', '2012-03-16',\n '2012-03-16'],\n dtype='datetime64[ns]', freq=None) \n```", "```py\nIn [115]: df = pd.DataFrame(\n .....:    {\"id\": [1, 2, 3, 4, 5, 6], \"raw_grade\": [\"a\", \"b\", \"b\", \"a\", \"a\", \"e\"]}\n .....: )\n .....: \n```", "```py\nIn [116]: df[\"grade\"] = df[\"raw_grade\"].astype(\"category\")\n\nIn [117]: df[\"grade\"]\nOut[117]: \n0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): ['a', 'b', 'e'] \n```", "```py\nIn [118]: new_categories = [\"very good\", \"good\", \"very bad\"]\n\nIn [119]: df[\"grade\"] = df[\"grade\"].cat.rename_categories(new_categories) \n```", "```py\nIn [120]: df[\"grade\"] = df[\"grade\"].cat.set_categories(\n .....:    [\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"]\n .....: )\n .....: \n\nIn [121]: df[\"grade\"]\nOut[121]: \n0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): ['very bad', 'bad', 'medium', 'good', 'very good'] \n```", "```py\nIn [122]: df.sort_values(by=\"grade\")\nOut[122]: \n id raw_grade      grade\n5   6         e   very bad\n1   2         b       good\n2   3         b       good\n0   1         a  very good\n3   4         a  very good\n4   5         a  very good \n```", "```py\nIn [123]: df.groupby(\"grade\", observed=False).size()\nOut[123]: \ngrade\nvery bad     1\nbad          0\nmedium       0\ngood         2\nvery good    3\ndtype: int64 \n```", "```py\nIn [124]: import matplotlib.pyplot as plt\n\nIn [125]: plt.close(\"all\") \n```", "```py\nIn [126]: ts = pd.Series(np.random.randn(1000), index=pd.date_range(\"1/1/2000\", periods=1000))\n\nIn [127]: ts = ts.cumsum()\n\nIn [128]: ts.plot(); \n```", "```py\nIn [129]: df = pd.DataFrame(\n .....:    np.random.randn(1000, 4), index=ts.index, columns=[\"A\", \"B\", \"C\", \"D\"]\n .....: )\n .....: \n\nIn [130]: df = df.cumsum()\n\nIn [131]: plt.figure();\n\nIn [132]: df.plot();\n\nIn [133]: plt.legend(loc='best'); \n```", "```py\nIn [134]: df = pd.DataFrame(np.random.randint(0, 5, (10, 5)))\n\nIn [135]: df.to_csv(\"foo.csv\") \n```", "```py\nIn [136]: pd.read_csv(\"foo.csv\")\nOut[136]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [137]: df.to_parquet(\"foo.parquet\") \n```", "```py\nIn [138]: pd.read_parquet(\"foo.parquet\")\nOut[138]: \n 0  1  2  3  4\n0  4  3  1  1  2\n1  1  0  2  3  2\n2  1  4  2  1  2\n3  0  4  0  2  2\n4  4  2  2  3  4\n5  4  0  4  3  1\n6  2  1  2  0  3\n7  4  0  4  4  4\n8  4  4  1  0  1\n9  0  4  3  0  3 \n```", "```py\nIn [139]: df.to_excel(\"foo.xlsx\", sheet_name=\"Sheet1\") \n```", "```py\nIn [140]: pd.read_excel(\"foo.xlsx\", \"Sheet1\", index_col=None, na_values=[\"NA\"])\nOut[140]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [134]: df = pd.DataFrame(np.random.randint(0, 5, (10, 5)))\n\nIn [135]: df.to_csv(\"foo.csv\") \n```", "```py\nIn [136]: pd.read_csv(\"foo.csv\")\nOut[136]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [137]: df.to_parquet(\"foo.parquet\") \n```", "```py\nIn [138]: pd.read_parquet(\"foo.parquet\")\nOut[138]: \n 0  1  2  3  4\n0  4  3  1  1  2\n1  1  0  2  3  2\n2  1  4  2  1  2\n3  0  4  0  2  2\n4  4  2  2  3  4\n5  4  0  4  3  1\n6  2  1  2  0  3\n7  4  0  4  4  4\n8  4  4  1  0  1\n9  0  4  3  0  3 \n```", "```py\nIn [139]: df.to_excel(\"foo.xlsx\", sheet_name=\"Sheet1\") \n```", "```py\nIn [140]: pd.read_excel(\"foo.xlsx\", \"Sheet1\", index_col=None, na_values=[\"NA\"])\nOut[140]: \n Unnamed: 0  0  1  2  3  4\n0           0  4  3  1  1  2\n1           1  1  0  2  3  2\n2           2  1  4  2  1  2\n3           3  0  4  0  2  2\n4           4  4  2  2  3  4\n5           5  4  0  4  3  1\n6           6  2  1  2  0  3\n7           7  4  0  4  4  4\n8           8  4  4  1  0  1\n9           9  0  4  3  0  3 \n```", "```py\nIn [141]: if pd.Series([False, True, False]):\n .....:     print(\"I was true\")\n .....: \n---------------------------------------------------------------------------\nValueError  Traceback (most recent call last)\n<ipython-input-141-b27eb9c1dfc0> in ?()\n----> 1 if pd.Series([False, True, False]):\n  2      print(\"I was true\")\n\n~/work/pandas/pandas/pandas/core/generic.py in ?(self)\n  1575     @final\n  1576     def __nonzero__(self) -> NoReturn:\n-> 1577         raise ValueError(\n  1578             f\"The truth value of a {type(self).__name__} is ambiguous. \"\n  1579             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n  1580         )\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all(). \n```"]