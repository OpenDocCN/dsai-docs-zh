- en: numpy.ndarray.resize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.resize.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.resize.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Change shape and size of array in-place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**new_shape**tuple of ints, or *n* ints'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of resized array.
  prefs: []
  type: TYPE_NORMAL
- en: '**refcheck**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If False, reference count will not be checked. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: 'If *a* does not own its own data or references or views to it exist, and the
    data memory must be changed. PyPy only: will always raise if the data memory must
    be changed, since there is no reliable way to determine if references or views
    to it exist.'
  prefs: []
  type: TYPE_NORMAL
- en: SystemError
  prefs: []
  type: TYPE_NORMAL
- en: If the *order* keyword argument is specified. This behaviour is a bug in NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`resize`](numpy.resize.html#numpy.resize "numpy.resize")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new array with the specified shape.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This reallocates space for the data area if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Only contiguous arrays (data elements consecutive in memory) can be resized.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the reference count check is to make sure you do not use this
    array as a buffer for another Python object and then reallocate the memory. However,
    reference counts can increase in other ways so if you are sure that you have not
    shared the memory for this array with another Python object, then you may safely
    set *refcheck* to False.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Shrinking an array: array is flattened (in the order that the data are stored
    in memory), resized, and reshaped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Enlarging an array: as above, but missing entries are filled with zeros:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Referencing an array prevents resizing…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Unless *refcheck* is False:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
