- en: Tensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/tensor/tensor.html](https://docs.sympy.org/latest/modules/tensor/tensor.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A TensorIndexType is characterized by its name and its metric.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : name of the tensor type'
  prefs: []
  type: TYPE_NORMAL
- en: '**dummy_name** : name of the head of dummy indices'
  prefs: []
  type: TYPE_NORMAL
- en: '**dim** : dimension, it can be a symbol or an integer or `None`'
  prefs: []
  type: TYPE_NORMAL
- en: '**eps_dim** : dimension of the epsilon tensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**metric_symmetry** : integer that denotes metric symmetry or `None` for no
    metric'
  prefs: []
  type: TYPE_NORMAL
- en: '**metric_name** : string with the name of the metric tensor'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The possible values of the `metric_symmetry` parameter are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1` : metric tensor is fully symmetric `0` : metric tensor possesses no index
    symmetry `-1` : metric tensor is fully antisymmetric `None`: there is no metric
    tensor (metric equals to `None`)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The metric is assumed to be symmetric by default. It can also be set to a custom
    tensor by the `.set_metric()` method.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a metric the metric is used to raise and lower indices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of non-symmetric metric, the following raising and lowering conventions
    will be adopted:'
  prefs: []
  type: TYPE_NORMAL
- en: '`psi(a) = g(a, b)*psi(-b); chi(-a) = chi(b)*g(-b, -a)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'From these it is easy to find:'
  prefs: []
  type: TYPE_NORMAL
- en: '`g(-a, b) = delta(-a, b)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'where `delta(-a, b) = delta(b, -a)` is the `Kronecker delta` (see `TensorIndex`
    for the conventions on indices). For antisymmetric metrics there is also the following
    equality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`g(a, -b) = -delta(a, -b)`'
  prefs: []
  type: TYPE_NORMAL
- en: If there is no metric it is not possible to raise or lower indices; e.g. the
    index of the defining representation of `SU(N)` is ‘covariant’ and the conjugate
    representation is ‘contravariant’; for `N > 2` they are linearly independent.
  prefs: []
  type: TYPE_NORMAL
- en: '`eps_dim` is by default equal to `dim`, if the latter is an integer; else it
    can be assigned (for use in naive dimensional regularization); if `eps_dim` is
    not an integer `epsilon` is `None`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `metric` | (the metric tensor) |'
  prefs: []
  type: TYPE_TB
- en: '| `delta` | (`Kronecker delta`) |'
  prefs: []
  type: TYPE_TB
- en: '| `epsilon` | (the `Levi-Civita epsilon` tensor) |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | ((deprecated) a property to add `ndarray` values, to work in a specified
    basis.) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Represents a tensor index
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : name of the index, or `True` if you want it to be automatically
    assigned'
  prefs: []
  type: TYPE_NORMAL
- en: '**tensor_index_type** : `TensorIndexType` of the index'
  prefs: []
  type: TYPE_NORMAL
- en: '**is_up** : flag for contravariant index (is_up=True by default)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Tensor indices are contracted with the Einstein summation convention.
  prefs: []
  type: TYPE_NORMAL
- en: An index can be in contravariant or in covariant form; in the latter case it
    is represented prepending a `-` to the index name. Adding `-` to a covariant (is_up=False)
    index makes it contravariant.
  prefs: []
  type: TYPE_NORMAL
- en: Dummy indices have a name with head given by `tensor_inde_type.dummy_name` with
    underscore and a number.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `symbols` multiple contravariant indices can be created at once using
    `tensor_indices(s, typ)`, where `s` is a string of names.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `name` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `tensor_index_type` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `is_up` |  |'
  prefs: []
  type: TYPE_TB
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tensor head of the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name** : name of the tensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**index_types** : list of TensorIndexType'
  prefs: []
  type: TYPE_NORMAL
- en: '**symmetry** : TensorSymmetry of the tensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**comm** : commutation group number'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `symbols` multiple TensorHeads can be created using `tensorhead(s,
    typ, sym=None, comm=0)` function, where `s` is the string of names and `sym` is
    the monoterm tensor symmetry (see `tensorsymmetry`).
  prefs: []
  type: TYPE_NORMAL
- en: A `TensorHead` belongs to a commutation group, defined by a symbol on number
    `comm` (see `_TensorManager.set_comm`); tensors in a commutation group have the
    same commutation properties; by default `comm` is `0`, the group of the commuting
    tensors.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a fully antisymmetric tensor of rank 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Examples with ndarray values, the components data assigned to the `TensorHead`
    object are assumed to be in a fully-contravariant representation. In case it is
    necessary to assign components data which represents the values of a non-fully
    covariant tensor, see the other examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify a replacement dictionary to keep track of the arrays to use for replacements
    in the tensorial expression. The `TensorIndexType` is associated to the metric
    used for contractions (in fully covariant form):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see some examples of working with components with the electromagnetic
    tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s define \(F\), an antisymmetric tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s update the dictionary to contain the matrix to use in the replacements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it is possible to retrieve the contravariant form of the Electromagnetic
    tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'and the mixed contravariant-covariant form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Energy-momentum of a particle may be represented as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The contravariant and covariant components are, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The contraction of a 1-index tensor by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `name` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `index_types` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `rank` | (total number of indices) |'
  prefs: []
  type: TYPE_TB
- en: '| `symmetry` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `comm` | (commutation group) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns `0` if `self` and `other` commute, `1` if they anticommute.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if `self` and `other` neither commute nor anticommute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns a sequence of TensorHeads from a string \(s\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for tensor expressions
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: A tensor expression is an expression formed by tensors; currently the sums of
    tensors are distributed.
  prefs: []
  type: TYPE_NORMAL
- en: A `TensExpr` can be a `TensAdd` or a `TensMul`.
  prefs: []
  type: TYPE_NORMAL
- en: '`TensMul` objects are formed by products of component tensors, and include
    a coefficient, which is a SymPy expression.'
  prefs: []
  type: TYPE_NORMAL
- en: In the internal representation contracted indices are represented by `(ipos1,
    ipos2, icomp1, icomp2)`, where `icomp1` is the position of the component tensor
    with contravariant index, `ipos1` is the slot which the index occupies in that
    component tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Contracted indices are therefore nameless in the internal representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'DEPRECATED: do not use.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns ndarray components data as a matrix, if components data are available
    and ndarray dimension does not exceed 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Replace the tensorial expressions with arrays. The final array will correspond
    to the N-dimensional array with indices arranged according to `indices`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**replacement_dict**'
  prefs: []
  type: TYPE_NORMAL
- en: dictionary containing the replacement rules for tensors.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**indices**'
  prefs: []
  type: TYPE_NORMAL
- en: the index order with respect to which the array is read. The original index
    order will be used if no value is passed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since ‘indices’ is optional, we can also call replace_with_arrays by this way
    if no specific index order is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For contractions, specify the metric of the `TensorIndexType`, which in this
    case is `L`, in its covariant form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Symmetrization of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Anti-symmetrization of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The same expression can be read as the transpose by inverting `i` and `j`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Sum of tensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**free_args** : list of the free indices'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples with components data added to the tensor expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are: 2**2 - 3**2 - 2**2 - 7**2 ==> -58'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `args` | (tuple of addends) |'
  prefs: []
  type: TYPE_TB
- en: '| `rank` | (rank of the tensor) |'
  prefs: []
  type: TYPE_TB
- en: '| `free_args` | (list of the free indices in sorted order) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Canonicalize using the Butler-Portugal algorithm for canonicalization under
    monoterm symmetries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Raise or lower indices with the metric `g`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : metric'
  prefs: []
  type: TYPE_NORMAL
- en: '**contract_all** : if True, eliminate all `g` which are contracted'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: see the `TensorIndexType` docstring for the contraction conventions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Product of tensors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**coeff** : SymPy coefficient of the tensor'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`args[0]` list of `TensorHead` of the component tensors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`args[1]` list of `(ind, ipos, icomp)` where `ind` is a free index, `ipos`
    is the slot position of `ind` in the `icomp`-th component tensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`args[2]` list of tuples representing dummy indices. `(ipos1, ipos2, icomp1,
    icomp2)` indicates that the contravariant dummy index is the `ipos1`-th slot position
    in the `icomp1`-th component tensor; the corresponding covariant index is in the
    `ipos2` slot position in the `icomp2`-th component tensor.'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `components` | (list of `TensorHead` of the component tensors) |'
  prefs: []
  type: TYPE_TB
- en: '| `types` | (list of nonrepeated `TensorIndexType`) |'
  prefs: []
  type: TYPE_TB
- en: '| `free` | (list of `(ind, ipos, icomp)`, see Notes) |'
  prefs: []
  type: TYPE_TB
- en: '| `dum` | (list of `(ipos1, ipos2, icomp1, icomp2)`, see Notes) |'
  prefs: []
  type: TYPE_TB
- en: '| `ext_rank` | (rank of the tensor counting the dummy indices) |'
  prefs: []
  type: TYPE_TB
- en: '| `rank` | (rank of the tensor) |'
  prefs: []
  type: TYPE_TB
- en: '| `coeff` | (SymPy coefficient of the tensor) |'
  prefs: []
  type: TYPE_TB
- en: '| `free_args` | (list of the free indices in sorted order) |'
  prefs: []
  type: TYPE_TB
- en: '| `is_canon_bp` | (`True` if the tensor in in canonical form) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Canonicalize using the Butler-Portugal algorithm for canonicalization under
    monoterm symmetries.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Raise or lower indices with the metric `g`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : metric'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See the `TensorIndexType` docstring for the contraction conventions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Returns the list of free indices of the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The indices are listed in the order in which they appear in the component tensors.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Returns the list of indices of the tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The indices are listed in the order in which they appear in the component tensors.
    The dummy indices are given a name which does not collide with the names of the
    free indices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Returns the tensor corresponding to the permutation `g`
  prefs: []
  type: TYPE_NORMAL
- en: For further details, see the method in `TIDS` with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Returns a tensor product with sorted components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of tensors, whose product is `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Dummy indices contracted among different tensor components become free indices
    with the same name as the one used to represent the dummy indices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Butler-Portugal canonicalization. See `tensor_can.py` from the combinatorics
    module for the details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: replace Riemann tensor with an equivalent expression
  prefs: []
  type: TYPE_NORMAL
- en: '`R(m,n,p,q) -> 2/3*R(m,n,p,q) - 1/3*R(m,q,n,p) + 1/3*R(m,p,n,q)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Replace each Riemann tensor with an equivalent expression satisfying the cyclic
    identity.
  prefs: []
  type: TYPE_NORMAL
- en: This trick is discussed in the reference guide to Cadabra.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Monoterm symmetry of a tensor (i.e. any symmetric or anti-symmetric index permutation).
    For the relevant terminology see `tensor_can.py` section of the combinatorics
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bsgs** : tuple `(base, sgs)` BSGS of the symmetry of the tensor'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: A tensor can have an arbitrary monoterm symmetry provided by its BSGS. Multiterm
    symmetries, like the cyclic symmetry of the Riemann tensor (i.e., Bianchi identity),
    are not covered. See combinatorics module for information on how to generate BSGS
    for a general index permutation group. Simple symmetries can be generated using
    built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Define a symmetric tensor of rank 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note, that the same can also be done using built-in TensorSymmetry methods
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.combinatorics.tensor_can.get_symmetric_group_sgs`](../combinatorics/tensor_can.html#sympy.combinatorics.tensor_can.get_symmetric_group_sgs
    "sympy.combinatorics.tensor_can.get_symmetric_group_sgs")'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `base` | (base of the BSGS) |'
  prefs: []
  type: TYPE_TB
- en: '| `generators` | (generators of the BSGS) |'
  prefs: []
  type: TYPE_TB
- en: '| `rank` | (rank of the tensor) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Returns a TensorSymmetry object that is being a direct product of fully (anti-)symmetric
    index permutation groups.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples for different values of `(*args)`: `(1)` vector, equivalent to
    `TensorSymmetry.fully_symmetric(1)` `(2)` tensor with 2 symmetric indices, equivalent
    to `.fully_symmetric(2)` `(-2)` tensor with 2 antisymmetric indices, equivalent
    to `.fully_symmetric(-2)` `(2, -2)` tensor with the first 2 indices commuting
    and the last 2 anticommuting `(1, 1, 1)` tensor with 3 indices without any symmetry'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Returns a fully symmetric (antisymmetric if [PRE57] indices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: TensorSymmetry object for `rank` indices with no symmetry
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Returns a monotorem symmetry of the Riemann tensor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Returns a `TensorSymmetry` object. This method is deprecated, use `TensorSymmetry.direct_product()`
    or `.riemann()` instead.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: One can represent a tensor with any monoterm slot symmetry group using a BSGS.
  prefs: []
  type: TYPE_NORMAL
- en: '`args` can be a BSGS `args[0]` base `args[1]` sgs'
  prefs: []
  type: TYPE_NORMAL
- en: Usually tensors are in (direct products of) representations of the symmetric
    group; `args` can be a list of lists representing the shapes of Young tableaux
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance: `[[1]]` vector `[[1]*n]` symmetric tensor of rank `n` `[[n]]`
    antisymmetric tensor of rank `n` `[[2, 2]]` monoterm slot symmetry of the Riemann
    tensor `[[1],[1]]` vector*vector `[[2],[1],[1]` (antisymmetric tensor)*vector*vector'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that with the shape `[2, 2]` we associate only the monoterm symmetries
    of the Riemann tensor; this is an abuse of notation, since the shape `[2, 2]`
    corresponds usually to the irreducible representation characterized by the monoterm
    symmetries and by the cyclic symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Class of tensor types. Deprecated, use tensor_heads() instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**index_types** : list of `TensorIndexType` of the tensor indices'
  prefs: []
  type: TYPE_NORMAL
- en: '**symmetry** : `TensorSymmetry` of the tensor'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `index_types` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `symmetry` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `types` | (list of `TensorIndexType` without repetitions) |'
  prefs: []
  type: TYPE_TB
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Class to manage tensor properties.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Tensors belong to tensor commutation groups; each group has a label `comm`;
    there are predefined labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` tensors commuting with any other tensor'
  prefs: []
  type: TYPE_NORMAL
- en: '`1` tensors anticommuting among themselves'
  prefs: []
  type: TYPE_NORMAL
- en: '`2` tensors not commuting, apart with those with `comm=0`'
  prefs: []
  type: TYPE_NORMAL
- en: Other groups can be defined using `set_comm`; tensors in those groups commute
    with those with `comm=0`; by default they do not commute with any other group.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Clear the TensorManager.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Returns the symbol corresponding to the commutation group number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Get the commutation group number corresponding to `i`.
  prefs: []
  type: TYPE_NORMAL
- en: '`i` can be a symbol or a number or a string.'
  prefs: []
  type: TYPE_NORMAL
- en: If `i` is not already defined its commutation group number is set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return the commutation parameter for commutation group numbers `i, j`
  prefs: []
  type: TYPE_NORMAL
- en: see `_TensorManager.set_comm`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Set the commutation parameter `c` for commutation groups `i, j`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**i, j** : symbols representing commutation groups'
  prefs: []
  type: TYPE_NORMAL
- en: '**c** : group commutation number'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`i, j` can be symbols, strings or numbers, apart from `0, 1` and `2` which
    are reserved respectively for commuting, anticommuting tensors and tensors not
    commuting with any other group apart with the commuting tensors. For the remaining
    cases, use this method to set the commutation rules; by default `c=None`.'
  prefs: []
  type: TYPE_NORMAL
- en: The group commutation number `c` is assigned in correspondence to the group
    commutation symbols; it can be
  prefs: []
  type: TYPE_NORMAL
- en: 0 commuting
  prefs: []
  type: TYPE_NORMAL
- en: 1 anticommuting
  prefs: []
  type: TYPE_NORMAL
- en: None no commutation property
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '`G` and `GH` do not commute with themselves and commute with each other; A
    is commuting.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Set the commutation group numbers `c` for symbols `i, j`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : sequence of `(i, j, c)`'
  prefs: []
  type: TYPE_NORMAL
