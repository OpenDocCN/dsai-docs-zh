- en: NumPy 1.11.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.11.0-notes.html](https://numpy.org/doc/1.26/release/1.11.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This release supports Python 2.6 - 2.7 and 3.2 - 3.5 and contains a number of
    enhancements and improvements. Note also the build system changes listed below
    as they may have subtle effects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: No Windows (TM) binaries are provided for this release due to a broken toolchain.
    One of the providers of Python packages for Windows (TM) is your best bet.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details of these improvements can be found below.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The datetime64 type is now timezone naive.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dtype parameter has been added to `randint`.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved detection of two arrays possibly sharing memory.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic bin size estimation for `np.histogram`.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed optimization of A @ A.T and dot(A, A.T).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New function `np.moveaxis` for reordering array axes.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build System Changes
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numpy now uses `setuptools` for its builds instead of plain distutils. This
    fixes usage of `install_requires='numpy'` in the `setup.py` files of projects
    that depend on Numpy (see gh-6551). It potentially affects the way that build/install
    methods for Numpy itself behave though. Please report any unexpected behavior
    on the Numpy issue tracker.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bento build support and related files have been removed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single file build support and related files have been removed.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future Changes
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following changes are scheduled for Numpy 1.12.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Support for Python 2.6, 3.2, and 3.3 will be dropped.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relaxed stride checking will become the default. See the 1.8.0 release notes
    for a more extended discussion of what this change implies.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The behavior of the datetime64 “not a time” (NaT) value will be changed to
    match that of floating point “not a number” (NaN) values: all comparisons involving
    NaT will return False, except for NaT != NaT which will return True.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with floats will raise IndexError, e.g., a[0, 0.0].
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with non-integer array_like will raise `IndexError`, e.g., `a['1',
    '2']`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with multiple ellipsis will raise `IndexError`, e.g., `a[..., ...]`.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-integers used as index values will raise `TypeError`, e.g., in `reshape`,
    `take`, and specifying reduce axis.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a future release the following changes will be made.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The `rand` function exposed in `numpy.testing` will be removed. That function
    is left over from early Numpy and was implemented using the Python random module.
    The random number generators from `numpy.random` should be used instead.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ndarray.view` method will only allow c_contiguous arrays to be viewed using
    a dtype of different size causing the last dimension to change. That differs from
    the current behavior where arrays that are f_contiguous but not c_contiguous can
    be viewed as a dtype type of different size causing the first dimension to change.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slicing a `MaskedArray` will return views of both data **and** mask. Currently
    the mask is copy-on-write and changes to the mask in the slice do not propagate
    to the original mask. See the FutureWarnings section below for details.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `MaskedArray` 切片将返回数据 **和** 掩码的视图。目前，掩码是写时复制的，对切片中掩码的更改不会传播到原始掩码。有关详细信息，请参阅下面的
    FutureWarnings 部分。
- en: Compatibility notes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: datetime64 changes
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: datetime64 更改
- en: 'In prior versions of NumPy the experimental datetime64 type always stored times
    in UTC. By default, creating a datetime64 object from a string or printing it
    would convert from or to local time:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 先前的版本中，实验性 datetime64 类型总是在 UTC 中存储时间。默认情况下，创建 datetime64 对象时，从字符串转换或打印会从本地时间转换：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A consensus of datetime64 users agreed that this behavior is undesirable and
    at odds with how datetime64 is usually used (e.g., by [pandas](http://pandas.pydata.org)).
    For most use cases, a timezone naive datetime type is preferred, similar to the
    `datetime.datetime` type in the Python standard library. Accordingly, datetime64
    no longer assumes that input is in local time, nor does it print local times:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: datetime64 用户的一致意见认为这种行为是不可取的，与 datetime64 通常的使用方式不符（例如，[pandas](http://pandas.pydata.org)
    的使用方式）。对于大多数用例，更喜欢时区不明确的 datetime 类型，类似于 Python 标准库中的 `datetime.datetime` 类型。因此，datetime64
    不再假定输入为本地时间，也不再打印本地时间：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For backwards compatibility, datetime64 still parses timezone offsets, which
    it handles by converting to UTC. However, the resulting datetime is timezone naive:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，datetime64 仍然解析时区偏移量，并通过转换为 UTC 处理。但是，生成的日期时间是时区不明确的：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As a corollary to this change, we no longer prohibit casting between datetimes
    with date units and datetimes with time units. With timezone naive datetimes,
    the rule for casting from dates to times is no longer ambiguous.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对此更改的推论，我们不再禁止在具有日期单位和时间单位的日期时间之间进行强制转换。对于时区不明确的日期时间，从日期到时间的转换规则不再模棱两可。
- en: '`linalg.norm` return type changes'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.norm` 返回类型更改'
- en: The return type of the `linalg.norm` function is now floating point without
    exception. Some of the norm types previously returned integers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`linalg.norm` 函数的返回类型现在总是浮点数，没有例外。以前有些范数类型返回整数。'
- en: polynomial fit changes
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式拟合更改
- en: The various fit functions in the numpy polynomial package no longer accept non-integers
    for degree specification.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: numpy 多项式包中的各种拟合函数不再接受非整数的度数规定。
- en: '*np.dot* now raises `TypeError` instead of `ValueError`'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.dot* 现在引发 `TypeError` 而不是 `ValueError`'
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为模仿 `np.inner` 等其他函数的行为。如果两个参数不能转换为通用类型，可能会引发 `TypeError` 或 `ValueError`，取决于它们的顺序。现在，`np.dot`
    现在将始终引发 `TypeError`。
- en: FutureWarning to changed behavior
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来警告以更改行为
- en: In `np.lib.split` an empty array in the result always had dimension `(0,)` no
    matter the dimensions of the array being split. This has been changed so that
    the dimensions will be preserved. A `FutureWarning` for this change has been in
    place since Numpy 1.9 but, due to a bug, sometimes no warning was raised and the
    dimensions were already preserved.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `np.lib.split` 中，结果中的空数组的维度始终为 `(0,)`，无论被拆分的数组的维度如何。现在已更改为保留维度。自 Numpy 1.9
    以来一直存在对此更改的 `FutureWarning`，但是，由于 bug，有时不会出现警告，并且维度已经得到保留。
- en: '`%` and `//` operators'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`%` 和 `//` 运算符'
- en: These operators are implemented with the `remainder` and `floor_divide` functions
    respectively. Those functions are now based around `fmod` and are computed together
    so as to be compatible with each other and with the Python versions for float
    types. The results should be marginally more accurate or outright bug fixes compared
    to the previous results, but they may differ significantly in cases where roundoff
    makes a difference in the integer returned by `floor_divide`. Some corner cases
    also change, for instance, NaN is always returned for both functions when the
    divisor is zero, `divmod(1.0, inf)` returns `(0.0, 1.0)` except on MSVC 2008,
    and `divmod(-1.0, inf)` returns `(-1.0, inf)`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符分别使用 `remainder` 和 `floor_divide` 函数实现。这些函数现在基于 `fmod` 并一起计算，以使其与浮点类型的
    Python 版本和彼此兼容。与以前的结果相比，结果应该稍微更准确或完全修复程序错误，但在舍入使整数的差异很重要的情况下，结果可能差异显着。一些特殊情况也发生了变化，例如，当除数为零时，两个函数始终返回
    NaN，`divmod(1.0, inf)` 返回 `(0.0, 1.0)`，除了 MSVC 2008 之外，`divmod(-1.0, inf)` 返回
    `(-1.0, inf)`。
- en: C API
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: Removed the `check_return` and `inner_loop_selector` members of the `PyUFuncObject`
    struct (replacing them with `reserved` slots to preserve struct layout). These
    were never used for anything, so it’s unlikely that any third-party code is using
    them either, but we mention it here for completeness.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 删除了`PyUFuncObject`结构体的`check_return`和`inner_loop_selector`成员（用`reserved`槽位替换以保留结构布局）。它们从未被用于任何东西，因此很少有第三方代码使用它们，但为了完整起见，我们在这里提到它。
- en: object dtype detection for old-style classes
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旧样式类的对象dtype检测
- en: In python 2, objects which are instances of old-style user-defined classes no
    longer automatically count as ‘object’ type in the dtype-detection handler. Instead,
    as in python 3, they may potentially count as sequences, but only if they define
    both a *__len__* and a *__getitem__* method. This fixes a segfault and inconsistency
    between python 2 and 3.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在python 2中，旧样式用户定义的类的实例不再自动计算为‘object’类型在dtype检测处理程序中。与python 3一样，它们可能潜在地计算为序列，但只有在它们同时定义了一个`__len__`和一个`__getitem__`方法时。这修复了python
    2和3之间的segfault和不一致性。
- en: New Features
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: '`np.histogram` now provides plugin estimators for automatically estimating
    the optimal number of bins. Passing one of [‘auto’, ‘fd’, ‘scott’, ‘rice’, ‘sturges’]
    as the argument to ‘bins’ results in the corresponding estimator being used.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.histogram`现在提供了插件估计器，用于自动估计最佳的直方图数。将[‘auto’, ‘fd’, ‘scott’, ‘rice’, ‘sturges’]之一作为‘bins’参数的参数传递，将使用相应的估计器。'
- en: A benchmark suite using [Airspeed Velocity](https://asv.readthedocs.io/) has
    been added, converting the previous vbench-based one. You can run the suite locally
    via `python runtests.py --bench`. For more details, see `benchmarks/README.rst`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个使用[Airspeed Velocity](https://asv.readthedocs.io/)的基准套件，将之前基于vbench的套件进行转换。您可以通过
    `python runtests.py --bench` 在本地运行套件。更多细节请查看`benchmarks/README.rst`。
- en: A new function `np.shares_memory` that can check exactly whether two arrays
    have memory overlap is added. `np.may_share_memory` also now has an option to
    spend more effort to reduce false positives.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的函数`np.shares_memory`，可以精确检查两个数组是否存在内存重叠。现在`np.may_share_memory`也有一个选项，可以花费更多的精力来减少误报。
- en: '`SkipTest` and `KnownFailureException` exception classes are exposed in the
    `numpy.testing` namespace. Raise them in a test function to mark the test to be
    skipped or mark it as a known failure, respectively.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SkipTest`和`KnownFailureException`异常类在`numpy.testing`命名空间中暴露。在测试函数中引发它们，以标记测试被跳过，或者标记它为已知的失败。'
- en: '`f2py.compile` has a new `extension` keyword parameter that allows the fortran
    extension to be specified for generated temp files. For instance, the files can
    be specifies to be `*.f90`. The `verbose` argument is also activated, it was previously
    ignored.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f2py.compile`现在有一个新的`extension`关键字参数，允许为生成的临时文件指定Fortran扩展名。例如，可以指定文件为`*.f90`。`verbose`参数也已激活，以前被忽略。'
- en: 'A `dtype` parameter has been added to `np.random.randint` Random ndarrays of
    the following types can now be generated:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已将`np.random.randint`添加了一个`dtype`参数，现在可以生成以下类型的随机ndarrays：
- en: '`np.bool_`,'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.bool_`,'
- en: '`np.int8`, `np.uint8`,'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int8`, `np.uint8`,'
- en: '`np.int16`, `np.uint16`,'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int16`, `np.uint16`,'
- en: '`np.int32`, `np.uint32`,'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int32`, `np.uint32`,'
- en: '`np.int64`, `np.uint64`,'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int64`, `np.uint64`,'
- en: '`np.int_ ``, ``np.intp`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.int_ ``, ``np.intp`'
- en: The specification is by precision rather than by C type. Hence, on some platforms
    `np.int64` may be a `long` instead of `long long` even if the specified dtype
    is `long long` because the two may have the same precision. The resulting type
    depends on which C type numpy uses for the given precision. The byteorder specification
    is also ignored, the generated arrays are always in native byte order.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规范是通过精度而不是通过C类型来定义的。因此，在一些平台上，即使指定的dtype是`long long`，`np.int64`可能是`long`而不是`long
    long`，因为两者可能具有相同的精度。生成的数组类型取决于numpy为给定精度使用的C类型。字节顺序规范也被忽略，生成的数组总是采用本机字节顺序。
- en: A new `np.moveaxis` function allows for moving one or more array axes to a new
    position by explicitly providing source and destination axes. This function should
    be easier to use than the current `rollaxis` function as well as providing more
    functionality.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的`np.moveaxis`函数允许通过明确提供源和目标轴来移动一个或多个数组轴到新位置。这个函数应该比当前的`rollaxis`函数更容易使用，并提供更多的功能。
- en: The `deg` parameter of the various `numpy.polynomial` fits has been extended
    to accept a list of the degrees of the terms to be included in the fit, the coefficients
    of all other terms being constrained to zero. The change is backward compatible,
    passing a scalar `deg` will behave as before.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A divmod function for float types modeled after the Python version has been
    added to the npy_math library.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`np.gradient` now supports an `axis` argument'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `axis` parameter was added to `np.gradient` for consistency. It allows to
    specify over which axes the gradient is calculated.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`np.lexsort` now supports arrays with object data-type'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now internally calls the generic `npy_amergesort` when the type
    does not implement a merge-sort kind of `argsort` method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ma.core.MaskedArray` now supports an `order` argument'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When constructing a new `MaskedArray` instance, it can be configured with an
    `order` argument analogous to the one when calling `np.ndarray`. The addition
    of this argument allows for the proper processing of an `order` argument in several
    MaskedArray-related utility functions such as `np.ma.core.array` and `np.ma.core.asarray`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Memory and speed improvements for masked arrays
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a masked array with `mask=True` (resp. `mask=False`) now uses `np.ones`
    (resp. `np.zeros`) to create the mask, which is faster and avoid a big memory
    peak. Another optimization was done to avoid a memory peak and useless computations
    when printing a masked array.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray.tofile` now uses fallocate on linux'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now uses the fallocate system call to reserve sufficient disk space
    on file systems that support it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Optimizations for operations of the form `A.T @ A` and `A @ A.T`
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `gemm` BLAS operations were used for all matrix products. Now, if
    the matrix product is between a matrix and its transpose, it will use `syrk` BLAS
    operations for a performance boost. This optimization has been extended to `@`,
    `numpy.dot`, `numpy.inner`, and `numpy.matmul`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Requires the transposed and non-transposed matrices to share data.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '`np.testing.assert_warns` can now be used as a context manager'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This matches the behavior of `assert_raises`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Speed improvement for np.random.shuffle
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.random.shuffle` is now much faster for 1d ndarrays.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pyrex support was removed from `numpy.distutils`
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method `build_src.generate_a_pyrex_source` will remain available; it has
    been monkeypatched by users to support Cython instead of Pyrex. It’s recommended
    to switch to a better supported method of build Cython extensions though.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '`np.broadcast` can now be called with a single argument'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The resulting object in that case will simply mimic iteration over a single
    array. This change obsoletes distinctions like
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(x) == 1:'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = x[0].shape
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = np.broadcast(*x).shape
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead, `np.broadcast` can be used in all cases.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '`np.trace` now respects array subclasses'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.diagonal` and ensures,
    e.g., that for masked arrays `np.trace(ma)` and `ma.trace()` give the same result.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为模仿了其他函数（如`np.diagonal`）的行为，并确保对于蒙版数组`np.trace(ma)`和`ma.trace()`产生相同的结果。
- en: '`np.dot` now raises `TypeError` instead of `ValueError`'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.dot`现在引发`TypeError`而不是`ValueError`'
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此行为模仿了其他函数（如`np.inner`）的行为。如果两个参数无法转换为公共类型，它可能会引发`TypeError`或`ValueError`，具体取决于它们的顺序。现在，`np.dot`现在将始终引发`TypeError`。
- en: '`linalg.norm` return type changes'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.norm`的返回类型更改'
- en: The `linalg.norm` function now does all its computations in floating point and
    returns floating results. This change fixes bugs due to integer overflow and the
    failure of abs with signed integers of minimum value, e.g., int8(-128). For consistency,
    floats are used even where an integer might work.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`linalg.norm`函数现在所有计算都以浮点数进行，并返回浮点结果。这种更改修复了由于整数溢出和绝对值在最小值的有符号整数（例如int8(-128)）时失败所导致的错误。为了一致性，即使整数可能有效，也会使用浮点数。'
- en: Deprecations
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Views of arrays in Fortran order
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Fortran顺序中的数组视图
- en: The F_CONTIGUOUS flag was used to signal that views using a dtype that changed
    the element size would change the first index. This was always problematical for
    arrays that were both F_CONTIGUOUS and C_CONTIGUOUS because C_CONTIGUOUS took
    precedence. Relaxed stride checking results in more such dual contiguous arrays
    and breaks some existing code as a result. Note that this also affects changing
    the dtype by assigning to the dtype attribute of an array. The aim of this deprecation
    is to restrict views to C_CONTIGUOUS arrays at some future time. A work around
    that is backward compatible is to use `a.T.view(...).T` instead. A parameter may
    also be added to the view method to explicitly ask for Fortran order views, but
    that will not be backward compatible.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: F_CONTIGUOUS标志用于表示使用改变了元素大小的数据类型的视图将改变第一个索引。对于既是F_CONTIGUOUS又是C_CONTIGUOUS的数组，这总是有问题的，因为C_CONTIGUOUS会优先。放宽步幅检查会导致更多这样的双连续数组，并因此破坏一些现有代码。请注意，这也影响了通过将数组的dtype属性分配给dtype来更改dtype。此次弃用的目的是在将来的某个时间限制视图只能C_CONTIGUOUS数组。向后兼容的解决方法是使用`a.T.view(...).T`。也可以向视图方法添加参数，以显式要求Fortran顺序视图，但这不会向后兼容。
- en: Invalid arguments for array ordering
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组排序的无效参数
- en: 'It is currently possible to pass in arguments for the `order` parameter in
    methods like `array.flatten` or `array.ravel` that were not one of the following:
    ‘C’, ‘F’, ‘A’, ‘K’ (note that all of these possible values are both unicode and
    case insensitive). Such behavior will not be allowed in future releases.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可以在像`array.flatten`或`array.ravel`方法的`order`参数中传递不是以下之一的参数："C"、"F"、"A"、"K"（注意，所有这些可能的值都是unicode且大小写不敏感的）。在以后的版本中将不允许这种行为。
- en: Random number generator in the `testing` namespace
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`testing`命名空间中的随机数生成器
- en: The Python standard library random number generator was previously exposed in
    the `testing` namespace as `testing.rand`. Using this generator is not recommended
    and it will be removed in a future release. Use generators from `numpy.random`
    namespace instead.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库中的随机数生成器以前在`testing`命名空间中作为`testing.rand`公开。不建议使用此生成器，并且将在以后的版本中删除。请改用`numpy.random`命名空间中的生成器。
- en: Random integer generation on a closed interval
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 闭区间上的随机整数生成
- en: In accordance with the Python C API, which gives preference to the half-open
    interval over the closed one, `np.random.random_integers` is being deprecated
    in favor of calling `np.random.randint`, which has been enhanced with the `dtype`
    parameter as described under “New Features”. However, `np.random.random_integers`
    will not be removed anytime soon.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 符合Python C API的规定，它优先选择半开区间而不是闭区间，`np.random.random_integers`正在被弃用，而更倾向于调用已经根据“新功能”中描述的`dtype`参数进行增强的`np.random.randint`。然而，`np.random.random_integers`不会很快被移除。
- en: FutureWarnings
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FutureWarnings
- en: Assigning to slices/views of `MaskedArray`
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`MaskedArray`的切片/视图分配
- en: Currently a slice of a masked array contains a view of the original data and
    a copy-on-write view of the mask. Consequently, any changes to the slice’s mask
    will result in a copy of the original mask being made and that new mask being
    changed rather than the original. For example, if we make a slice of the original
    like so, `view = original[:]`, then modifications to the data in one array will
    affect the data of the other but, because the mask will be copied during assignment
    operations, changes to the mask will remain local. A similar situation occurs
    when explicitly constructing a masked array using `MaskedArray(data, mask)`, the
    returned array will contain a view of `data` but the mask will be a copy-on-write
    view of `mask`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'In the future, these cases will be normalized so that the data and mask arrays
    are treated the same way and modifications to either will propagate between views.
    In 1.11, numpy will issue a `MaskedArrayFutureWarning` warning whenever user code
    modifies the mask of a view that in the future may cause values to propagate back
    to the original. To silence these warnings and make your code robust against the
    upcoming changes, you have two options: if you want to keep the current behavior,
    call `masked_view.unshare_mask()` before modifying the mask. If you want to get
    the future behavior early, use `masked_view._sharedmask = False`. However, note
    that setting the `_sharedmask` attribute will break following explicit calls to
    `masked_view.unshare_mask()`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details of these improvements can be found below.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: The datetime64 type is now timezone naive.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dtype parameter has been added to `randint`.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved detection of two arrays possibly sharing memory.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic bin size estimation for `np.histogram`.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed optimization of A @ A.T and dot(A, A.T).
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New function `np.moveaxis` for reordering array axes.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build System Changes
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numpy now uses `setuptools` for its builds instead of plain distutils. This
    fixes usage of `install_requires='numpy'` in the `setup.py` files of projects
    that depend on Numpy (see gh-6551). It potentially affects the way that build/install
    methods for Numpy itself behave though. Please report any unexpected behavior
    on the Numpy issue tracker.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bento build support and related files have been removed.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single file build support and related files have been removed.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future Changes
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following changes are scheduled for Numpy 1.12.0.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Support for Python 2.6, 3.2, and 3.3 will be dropped.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relaxed stride checking will become the default. See the 1.8.0 release notes
    for a more extended discussion of what this change implies.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The behavior of the datetime64 “not a time” (NaT) value will be changed to
    match that of floating point “not a number” (NaN) values: all comparisons involving
    NaT will return False, except for NaT != NaT which will return True.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with floats will raise IndexError, e.g., a[0, 0.0].
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with non-integer array_like will raise `IndexError`, e.g., `a['1',
    '2']`
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing with multiple ellipsis will raise `IndexError`, e.g., `a[..., ...]`.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个省略号进行索引将引发`IndexError`，例如，`a[..., ...]`。
- en: Non-integers used as index values will raise `TypeError`, e.g., in `reshape`,
    `take`, and specifying reduce axis.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用作索引值的非整数将引发`TypeError`，例如，在`reshape`中，`take`中指定减少轴。
- en: In a future release the following changes will be made.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的发行版中将进行以下更改。
- en: The `rand` function exposed in `numpy.testing` will be removed. That function
    is left over from early Numpy and was implemented using the Python random module.
    The random number generators from `numpy.random` should be used instead.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将在`numpy.testing`中公开的`rand`函数将被移除。该函数是早期NumPy遗留下来的，并使用Python随机模块实现。应该使用`numpy.random`中的随机数生成器。
- en: The `ndarray.view` method will only allow c_contiguous arrays to be viewed using
    a dtype of different size causing the last dimension to change. That differs from
    the current behavior where arrays that are f_contiguous but not c_contiguous can
    be viewed as a dtype type of different size causing the first dimension to change.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndarray.view`方法现在只允许以不同大小的`dtype`查看`c_contiguous`数组，导致最后一个维度的改变。这与当前行为不同，当前行为中，`f_contiguous`但不是`c_contiguous`的数组可以以不同大小的`dtype`查看，导致第一个维度的改变。'
- en: Slicing a `MaskedArray` will return views of both data **and** mask. Currently
    the mask is copy-on-write and changes to the mask in the slice do not propagate
    to the original mask. See the FutureWarnings section below for details.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片`MaskedArray`将返回数据和掩码的视图。目前，掩码是写时复制的，对切片中掩码的更改不会传播到原始掩码。有关详细信息，请参见下面的`FutureWarnings`部分。
- en: Compatibility notes
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性注意事项
- en: datetime64 changes
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`datetime64`的更改'
- en: 'In prior versions of NumPy the experimental datetime64 type always stored times
    in UTC. By default, creating a datetime64 object from a string or printing it
    would convert from or to local time:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy的先前版本中，实验性的`datetime64`类型始终以UTC时区存储时间。默认情况下，从字符串创建`datetime64`对象或打印它将转换为或从本地时间转换：
- en: '[PRE3]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A consensus of datetime64 users agreed that this behavior is undesirable and
    at odds with how datetime64 is usually used (e.g., by [pandas](http://pandas.pydata.org)).
    For most use cases, a timezone naive datetime type is preferred, similar to the
    `datetime.datetime` type in the Python standard library. Accordingly, datetime64
    no longer assumes that input is in local time, nor does it print local times:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的`datetime64`用户一致认为这种行为是不可取的，与`datetime64`通常的用法不一致（例如，通过[pandas](http://pandas.pydata.org)）。在大多数用例中，时区无关的日期时间类型更受欢迎，类似于Python标准库中的`datetime.datetime`类型。因此，`datetime64`不再假设输入为本地时间，也不会打印本地时间：
- en: '[PRE4]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For backwards compatibility, datetime64 still parses timezone offsets, which
    it handles by converting to UTC. However, the resulting datetime is timezone naive:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，`datetime64`仍然解析时区偏移量，并通过转换为UTC来处理。然而，生成的`datetime`是时区无关的：
- en: '[PRE5]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As a corollary to this change, we no longer prohibit casting between datetimes
    with date units and datetimes with time units. With timezone naive datetimes,
    the rule for casting from dates to times is no longer ambiguous.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 作为这一变化的必然结果，我们不再禁止在具有日期单位和具有时间单位的日期时间之间进行转换。对于时区无关的日期时间，从日期到时间的转换规则不再模棱两可。
- en: '`linalg.norm` return type changes'
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.norm`返回类型的更改'
- en: The return type of the `linalg.norm` function is now floating point without
    exception. Some of the norm types previously returned integers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`linalg.norm`函数的返回类型现在总是浮点型，不再异常。以前一些范数类型返回的是整数。'
- en: polynomial fit changes
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式拟合的改变
- en: The various fit functions in the numpy polynomial package no longer accept non-integers
    for degree specification.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: numpy多项式包中的各种拟合函数不再接受非整数作为度规格。
- en: '*np.dot* now raises `TypeError` instead of `ValueError`'
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.dot*现在引发`TypeError`而不是`ValueError`'
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这种行为模仿了其他函数（如`np.inner`）的行为。如果两个参数无法转换为公共类型，它可能会根据它们的顺序引发`TypeError`或`ValueError`。现在，`np.dot`将始终引发`TypeError`。
- en: FutureWarning to changed behavior
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未来版本中的更改警告
- en: In `np.lib.split` an empty array in the result always had dimension `(0,)` no
    matter the dimensions of the array being split. This has been changed so that
    the dimensions will be preserved. A `FutureWarning` for this change has been in
    place since Numpy 1.9 but, due to a bug, sometimes no warning was raised and the
    dimensions were already preserved.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%` and `//` operators'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These operators are implemented with the `remainder` and `floor_divide` functions
    respectively. Those functions are now based around `fmod` and are computed together
    so as to be compatible with each other and with the Python versions for float
    types. The results should be marginally more accurate or outright bug fixes compared
    to the previous results, but they may differ significantly in cases where roundoff
    makes a difference in the integer returned by `floor_divide`. Some corner cases
    also change, for instance, NaN is always returned for both functions when the
    divisor is zero, `divmod(1.0, inf)` returns `(0.0, 1.0)` except on MSVC 2008,
    and `divmod(-1.0, inf)` returns `(-1.0, inf)`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: C API
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed the `check_return` and `inner_loop_selector` members of the `PyUFuncObject`
    struct (replacing them with `reserved` slots to preserve struct layout). These
    were never used for anything, so it’s unlikely that any third-party code is using
    them either, but we mention it here for completeness.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: object dtype detection for old-style classes
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In python 2, objects which are instances of old-style user-defined classes no
    longer automatically count as ‘object’ type in the dtype-detection handler. Instead,
    as in python 3, they may potentially count as sequences, but only if they define
    both a *__len__* and a *__getitem__* method. This fixes a segfault and inconsistency
    between python 2 and 3.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: datetime64 changes
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In prior versions of NumPy the experimental datetime64 type always stored times
    in UTC. By default, creating a datetime64 object from a string or printing it
    would convert from or to local time:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A consensus of datetime64 users agreed that this behavior is undesirable and
    at odds with how datetime64 is usually used (e.g., by [pandas](http://pandas.pydata.org)).
    For most use cases, a timezone naive datetime type is preferred, similar to the
    `datetime.datetime` type in the Python standard library. Accordingly, datetime64
    no longer assumes that input is in local time, nor does it print local times:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For backwards compatibility, datetime64 still parses timezone offsets, which
    it handles by converting to UTC. However, the resulting datetime is timezone naive:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As a corollary to this change, we no longer prohibit casting between datetimes
    with date units and datetimes with time units. With timezone naive datetimes,
    the rule for casting from dates to times is no longer ambiguous.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`linalg.norm` return type changes'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The return type of the `linalg.norm` function is now floating point without
    exception. Some of the norm types previously returned integers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: polynomial fit changes
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The various fit functions in the numpy polynomial package no longer accept non-integers
    for degree specification.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '*np.dot* now raises `TypeError` instead of `ValueError`'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: FutureWarning to changed behavior
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In `np.lib.split` an empty array in the result always had dimension `(0,)` no
    matter the dimensions of the array being split. This has been changed so that
    the dimensions will be preserved. A `FutureWarning` for this change has been in
    place since Numpy 1.9 but, due to a bug, sometimes no warning was raised and the
    dimensions were already preserved.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%` and `//` operators'
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These operators are implemented with the `remainder` and `floor_divide` functions
    respectively. Those functions are now based around `fmod` and are computed together
    so as to be compatible with each other and with the Python versions for float
    types. The results should be marginally more accurate or outright bug fixes compared
    to the previous results, but they may differ significantly in cases where roundoff
    makes a difference in the integer returned by `floor_divide`. Some corner cases
    also change, for instance, NaN is always returned for both functions when the
    divisor is zero, `divmod(1.0, inf)` returns `(0.0, 1.0)` except on MSVC 2008,
    and `divmod(-1.0, inf)` returns `(-1.0, inf)`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: C API
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Removed the `check_return` and `inner_loop_selector` members of the `PyUFuncObject`
    struct (replacing them with `reserved` slots to preserve struct layout). These
    were never used for anything, so it’s unlikely that any third-party code is using
    them either, but we mention it here for completeness.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: object dtype detection for old-style classes
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In python 2, objects which are instances of old-style user-defined classes no
    longer automatically count as ‘object’ type in the dtype-detection handler. Instead,
    as in python 3, they may potentially count as sequences, but only if they define
    both a *__len__* and a *__getitem__* method. This fixes a segfault and inconsistency
    between python 2 and 3.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`np.histogram` now provides plugin estimators for automatically estimating
    the optimal number of bins. Passing one of [‘auto’, ‘fd’, ‘scott’, ‘rice’, ‘sturges’]
    as the argument to ‘bins’ results in the corresponding estimator being used.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A benchmark suite using [Airspeed Velocity](https://asv.readthedocs.io/) has
    been added, converting the previous vbench-based one. You can run the suite locally
    via `python runtests.py --bench`. For more details, see `benchmarks/README.rst`.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new function `np.shares_memory` that can check exactly whether two arrays
    have memory overlap is added. `np.may_share_memory` also now has an option to
    spend more effort to reduce false positives.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SkipTest` and `KnownFailureException` exception classes are exposed in the
    `numpy.testing` namespace. Raise them in a test function to mark the test to be
    skipped or mark it as a known failure, respectively.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f2py.compile` has a new `extension` keyword parameter that allows the fortran
    extension to be specified for generated temp files. For instance, the files can
    be specifies to be `*.f90`. The `verbose` argument is also activated, it was previously
    ignored.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `dtype` parameter has been added to `np.random.randint` Random ndarrays of
    the following types can now be generated:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.bool_`,'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int8`, `np.uint8`,'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int16`, `np.uint16`,'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int32`, `np.uint32`,'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int64`, `np.uint64`,'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`np.int_ ``, ``np.intp`'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The specification is by precision rather than by C type. Hence, on some platforms
    `np.int64` may be a `long` instead of `long long` even if the specified dtype
    is `long long` because the two may have the same precision. The resulting type
    depends on which C type numpy uses for the given precision. The byteorder specification
    is also ignored, the generated arrays are always in native byte order.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A new `np.moveaxis` function allows for moving one or more array axes to a new
    position by explicitly providing source and destination axes. This function should
    be easier to use than the current `rollaxis` function as well as providing more
    functionality.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `deg` parameter of the various `numpy.polynomial` fits has been extended
    to accept a list of the degrees of the terms to be included in the fit, the coefficients
    of all other terms being constrained to zero. The change is backward compatible,
    passing a scalar `deg` will behave as before.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A divmod function for float types modeled after the Python version has been
    added to the npy_math library.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvements
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`np.gradient` now supports an `axis` argument'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `axis` parameter was added to `np.gradient` for consistency. It allows to
    specify over which axes the gradient is calculated.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '`np.lexsort` now supports arrays with object data-type'
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now internally calls the generic `npy_amergesort` when the type
    does not implement a merge-sort kind of `argsort` method.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ma.core.MaskedArray` now supports an `order` argument'
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When constructing a new `MaskedArray` instance, it can be configured with an
    `order` argument analogous to the one when calling `np.ndarray`. The addition
    of this argument allows for the proper processing of an `order` argument in several
    MaskedArray-related utility functions such as `np.ma.core.array` and `np.ma.core.asarray`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Memory and speed improvements for masked arrays
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a masked array with `mask=True` (resp. `mask=False`) now uses `np.ones`
    (resp. `np.zeros`) to create the mask, which is faster and avoid a big memory
    peak. Another optimization was done to avoid a memory peak and useless computations
    when printing a masked array.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray.tofile` now uses fallocate on linux'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now uses the fallocate system call to reserve sufficient disk space
    on file systems that support it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Optimizations for operations of the form `A.T @ A` and `A @ A.T`
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `gemm` BLAS operations were used for all matrix products. Now, if
    the matrix product is between a matrix and its transpose, it will use `syrk` BLAS
    operations for a performance boost. This optimization has been extended to `@`,
    `numpy.dot`, `numpy.inner`, and `numpy.matmul`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Requires the transposed and non-transposed matrices to share data.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '`np.testing.assert_warns` can now be used as a context manager'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This matches the behavior of `assert_raises`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Speed improvement for np.random.shuffle
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.random.shuffle` is now much faster for 1d ndarrays.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`np.gradient` now supports an `axis` argument'
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `axis` parameter was added to `np.gradient` for consistency. It allows to
    specify over which axes the gradient is calculated.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '`np.lexsort` now supports arrays with object data-type'
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now internally calls the generic `npy_amergesort` when the type
    does not implement a merge-sort kind of `argsort` method.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ma.core.MaskedArray` now supports an `order` argument'
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When constructing a new `MaskedArray` instance, it can be configured with an
    `order` argument analogous to the one when calling `np.ndarray`. The addition
    of this argument allows for the proper processing of an `order` argument in several
    MaskedArray-related utility functions such as `np.ma.core.array` and `np.ma.core.asarray`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Memory and speed improvements for masked arrays
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a masked array with `mask=True` (resp. `mask=False`) now uses `np.ones`
    (resp. `np.zeros`) to create the mask, which is faster and avoid a big memory
    peak. Another optimization was done to avoid a memory peak and useless computations
    when printing a masked array.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray.tofile` now uses fallocate on linux'
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function now uses the fallocate system call to reserve sufficient disk space
    on file systems that support it.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Optimizations for operations of the form `A.T @ A` and `A @ A.T`
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `gemm` BLAS operations were used for all matrix products. Now, if
    the matrix product is between a matrix and its transpose, it will use `syrk` BLAS
    operations for a performance boost. This optimization has been extended to `@`,
    `numpy.dot`, `numpy.inner`, and `numpy.matmul`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Requires the transposed and non-transposed matrices to share data.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`np.testing.assert_warns` can now be used as a context manager'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This matches the behavior of `assert_raises`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Speed improvement for np.random.shuffle
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.random.shuffle` is now much faster for 1d ndarrays.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pyrex support was removed from `numpy.distutils`
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method `build_src.generate_a_pyrex_source` will remain available; it has
    been monkeypatched by users to support Cython instead of Pyrex. It’s recommended
    to switch to a better supported method of build Cython extensions though.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '`np.broadcast` can now be called with a single argument'
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The resulting object in that case will simply mimic iteration over a single
    array. This change obsoletes distinctions like
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(x) == 1:'
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = x[0].shape
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = np.broadcast(*x).shape
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead, `np.broadcast` can be used in all cases.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '`np.trace` now respects array subclasses'
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.diagonal` and ensures,
    e.g., that for masked arrays `np.trace(ma)` and `ma.trace()` give the same result.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '`np.dot` now raises `TypeError` instead of `ValueError`'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`linalg.norm` return type changes'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `linalg.norm` function now does all its computations in floating point and
    returns floating results. This change fixes bugs due to integer overflow and the
    failure of abs with signed integers of minimum value, e.g., int8(-128). For consistency,
    floats are used even where an integer might work.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Pyrex support was removed from `numpy.distutils`
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The method `build_src.generate_a_pyrex_source` will remain available; it has
    been monkeypatched by users to support Cython instead of Pyrex. It’s recommended
    to switch to a better supported method of build Cython extensions though.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`np.broadcast` can now be called with a single argument'
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The resulting object in that case will simply mimic iteration over a single
    array. This change obsoletes distinctions like
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'if len(x) == 1:'
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = x[0].shape
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: shape = np.broadcast(*x).shape
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead, `np.broadcast` can be used in all cases.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '`np.trace` now respects array subclasses'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.diagonal` and ensures,
    e.g., that for masked arrays `np.trace(ma)` and `ma.trace()` give the same result.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '`np.dot` now raises `TypeError` instead of `ValueError`'
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This behaviour mimics that of other functions such as `np.inner`. If the two
    arguments cannot be cast to a common type, it could have raised a `TypeError`
    or `ValueError` depending on their order. Now, `np.dot` will now always raise
    a `TypeError`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`linalg.norm` return type changes'
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `linalg.norm` function now does all its computations in floating point and
    returns floating results. This change fixes bugs due to integer overflow and the
    failure of abs with signed integers of minimum value, e.g., int8(-128). For consistency,
    floats are used even where an integer might work.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Views of arrays in Fortran order
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The F_CONTIGUOUS flag was used to signal that views using a dtype that changed
    the element size would change the first index. This was always problematical for
    arrays that were both F_CONTIGUOUS and C_CONTIGUOUS because C_CONTIGUOUS took
    precedence. Relaxed stride checking results in more such dual contiguous arrays
    and breaks some existing code as a result. Note that this also affects changing
    the dtype by assigning to the dtype attribute of an array. The aim of this deprecation
    is to restrict views to C_CONTIGUOUS arrays at some future time. A work around
    that is backward compatible is to use `a.T.view(...).T` instead. A parameter may
    also be added to the view method to explicitly ask for Fortran order views, but
    that will not be backward compatible.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Invalid arguments for array ordering
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is currently possible to pass in arguments for the `order` parameter in
    methods like `array.flatten` or `array.ravel` that were not one of the following:
    ‘C’, ‘F’, ‘A’, ‘K’ (note that all of these possible values are both unicode and
    case insensitive). Such behavior will not be allowed in future releases.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Random number generator in the `testing` namespace
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Python standard library random number generator was previously exposed in
    the `testing` namespace as `testing.rand`. Using this generator is not recommended
    and it will be removed in a future release. Use generators from `numpy.random`
    namespace instead.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Random integer generation on a closed interval
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In accordance with the Python C API, which gives preference to the half-open
    interval over the closed one, `np.random.random_integers` is being deprecated
    in favor of calling `np.random.randint`, which has been enhanced with the `dtype`
    parameter as described under “New Features”. However, `np.random.random_integers`
    will not be removed anytime soon.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Views of arrays in Fortran order
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The F_CONTIGUOUS flag was used to signal that views using a dtype that changed
    the element size would change the first index. This was always problematical for
    arrays that were both F_CONTIGUOUS and C_CONTIGUOUS because C_CONTIGUOUS took
    precedence. Relaxed stride checking results in more such dual contiguous arrays
    and breaks some existing code as a result. Note that this also affects changing
    the dtype by assigning to the dtype attribute of an array. The aim of this deprecation
    is to restrict views to C_CONTIGUOUS arrays at some future time. A work around
    that is backward compatible is to use `a.T.view(...).T` instead. A parameter may
    also be added to the view method to explicitly ask for Fortran order views, but
    that will not be backward compatible.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: Invalid arguments for array ordering
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is currently possible to pass in arguments for the `order` parameter in
    methods like `array.flatten` or `array.ravel` that were not one of the following:
    ‘C’, ‘F’, ‘A’, ‘K’ (note that all of these possible values are both unicode and
    case insensitive). Such behavior will not be allowed in future releases.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Random number generator in the `testing` namespace
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Python standard library random number generator was previously exposed in
    the `testing` namespace as `testing.rand`. Using this generator is not recommended
    and it will be removed in a future release. Use generators from `numpy.random`
    namespace instead.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Random integer generation on a closed interval
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In accordance with the Python C API, which gives preference to the half-open
    interval over the closed one, `np.random.random_integers` is being deprecated
    in favor of calling `np.random.randint`, which has been enhanced with the `dtype`
    parameter as described under “New Features”. However, `np.random.random_integers`
    will not be removed anytime soon.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: FutureWarnings
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assigning to slices/views of `MaskedArray`
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently a slice of a masked array contains a view of the original data and
    a copy-on-write view of the mask. Consequently, any changes to the slice’s mask
    will result in a copy of the original mask being made and that new mask being
    changed rather than the original. For example, if we make a slice of the original
    like so, `view = original[:]`, then modifications to the data in one array will
    affect the data of the other but, because the mask will be copied during assignment
    operations, changes to the mask will remain local. A similar situation occurs
    when explicitly constructing a masked array using `MaskedArray(data, mask)`, the
    returned array will contain a view of `data` but the mask will be a copy-on-write
    view of `mask`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'In the future, these cases will be normalized so that the data and mask arrays
    are treated the same way and modifications to either will propagate between views.
    In 1.11, numpy will issue a `MaskedArrayFutureWarning` warning whenever user code
    modifies the mask of a view that in the future may cause values to propagate back
    to the original. To silence these warnings and make your code robust against the
    upcoming changes, you have two options: if you want to keep the current behavior,
    call `masked_view.unshare_mask()` before modifying the mask. If you want to get
    the future behavior early, use `masked_view._sharedmask = False`. However, note
    that setting the `_sharedmask` attribute will break following explicit calls to
    `masked_view.unshare_mask()`.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Assigning to slices/views of `MaskedArray`
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently a slice of a masked array contains a view of the original data and
    a copy-on-write view of the mask. Consequently, any changes to the slice’s mask
    will result in a copy of the original mask being made and that new mask being
    changed rather than the original. For example, if we make a slice of the original
    like so, `view = original[:]`, then modifications to the data in one array will
    affect the data of the other but, because the mask will be copied during assignment
    operations, changes to the mask will remain local. A similar situation occurs
    when explicitly constructing a masked array using `MaskedArray(data, mask)`, the
    returned array will contain a view of `data` but the mask will be a copy-on-write
    view of `mask`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'In the future, these cases will be normalized so that the data and mask arrays
    are treated the same way and modifications to either will propagate between views.
    In 1.11, numpy will issue a `MaskedArrayFutureWarning` warning whenever user code
    modifies the mask of a view that in the future may cause values to propagate back
    to the original. To silence these warnings and make your code robust against the
    upcoming changes, you have two options: if you want to keep the current behavior,
    call `masked_view.unshare_mask()` before modifying the mask. If you want to get
    the future behavior early, use `masked_view._sharedmask = False`. However, note
    that setting the `_sharedmask` attribute will break following explicit calls to
    `masked_view.unshare_mask()`.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
