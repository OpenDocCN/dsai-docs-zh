- en: scipy.interpolate.splprep
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splprep.html#scipy.interpolate.splprep](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.splprep.html#scipy.interpolate.splprep)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find the B-spline representation of an N-D curve.
  prefs: []
  type: TYPE_NORMAL
- en: Given a list of N rank-1 arrays, *x*, which represent a curve in N-dimensional
    space parametrized by *u*, find a smooth approximating spline curve g(*u*). Uses
    the FORTRAN routine parcur from FITPACK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A list of sample vector arrays representing the curve.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Strictly positive rank-1 array of weights the same length as *x[0]*. The weights
    are used in computing the weighted least-squares spline fit. If the errors in
    the *x* values have standard-deviation given by the vector d, then *w* should
    be 1/d. Default is `ones(len(x[0]))`.
  prefs: []
  type: TYPE_NORMAL
- en: '**u**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An array of parameter values. If not given, these values are calculated automatically
    as `M = len(x[0])`, where
  prefs: []
  type: TYPE_NORMAL
- en: v[0] = 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: v[i] = v[i-1] + distance(*x[i]*, *x[i-1]*)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: u[i] = v[i] / v[M-1]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ub, ue**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The end-points of the parameters interval. Defaults to u[0] and u[-1].
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the spline. Cubic splines are recommended. Even values of *k* should
    be avoided especially with a small s-value. `1 <= k <= 5`, default is 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**task**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If task==0 (default), find t and c for a given smoothing factor, s. If task==1,
    find t and c for another value of the smoothing factor, s. There must have been
    a previous call with task=0 or task=1 for the same set of data. If task=-1 find
    the weighted least square spline for a given set of knots, t.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A smoothing condition. The amount of smoothness is determined by satisfying
    the conditions: `sum((w * (y - g))**2,axis=0) <= s`, where g(x) is the smoothed
    interpolation of (x,y). The user can use *s* to control the trade-off between
    closeness and smoothness of fit. Larger *s* means more smoothing while smaller
    values of *s* indicate less smoothing. Recommended values of *s* depend on the
    weights, w. If the weights represent the inverse of the standard-deviation of
    y, then a good *s* value should be found in the range `(m-sqrt(2*m),m+sqrt(2*m))`,
    where m is the number of data points in x, y, and w.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The knots needed for `task=-1`. There must be at least `2*k+2` knots.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If non-zero, then return optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**nest**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An over-estimate of the total number of knots of the spline to help in determining
    the storage space. By default nest=m/2. Always large enough is nest=m+k+1.
  prefs: []
  type: TYPE_NORMAL
- en: '**per**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If non-zero, data points are considered periodic with period `x[m-1] - x[0]`
    and a smooth periodic spline approximation is returned. Values of `y[m-1]` and
    `w[m-1]` are not used.
  prefs: []
  type: TYPE_NORMAL
- en: '**quiet**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Non-zero to suppress messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tck**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple, `(t,c,k)` containing the vector of knots, the B-spline coefficients,
    and the degree of the spline.
  prefs: []
  type: TYPE_NORMAL
- en: '**u**array'
  prefs: []
  type: TYPE_NORMAL
- en: An array of the values of the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**fp**float'
  prefs: []
  type: TYPE_NORMAL
- en: The weighted sum of squared residuals of the spline approximation.
  prefs: []
  type: TYPE_NORMAL
- en: '**ier**int'
  prefs: []
  type: TYPE_NORMAL
- en: An integer flag about splrep success. Success is indicated if ier<=0\. If ier
    in [1,2,3] an error occurred but was not raised. Otherwise an error is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**msg**str'
  prefs: []
  type: TYPE_NORMAL
- en: A message corresponding to the integer flag, ier.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep"),
    [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev"),
    [`sproot`](scipy.interpolate.sproot.html#scipy.interpolate.sproot "scipy.interpolate.sproot"),
    [`spalde`](scipy.interpolate.spalde.html#scipy.interpolate.spalde "scipy.interpolate.spalde"),
    [`splint`](scipy.interpolate.splint.html#scipy.interpolate.splint "scipy.interpolate.splint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep"),
    [`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline"), [`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_interp_spline`](scipy.interpolate.make_interp_spline.html#scipy.interpolate.make_interp_spline
    "scipy.interpolate.make_interp_spline")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: See [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev")
    for evaluation of the spline and its derivatives. The number of dimensions N must
    be smaller than 11.
  prefs: []
  type: TYPE_NORMAL
- en: The number of coefficients in the *c* array is `k+1` less than the number of
    knots, `len(t)`. This is in contrast with [`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep
    "scipy.interpolate.splrep"), which zero-pads the array of coefficients to have
    the same length as the array of knots. These additional coefficients are ignored
    by evaluation routines, [`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev
    "scipy.interpolate.splev") and [`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline
    "scipy.interpolate.BSpline").
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Algorithms for smoothing data with periodic and parametric splines,
    Computer Graphics and Image Processing”, 20 (1982) 171-184.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Algorithms for smoothing data with periodic and parametric splines”,
    report tw55, Dept. Computer Science, K.U.Leuven, 1981.
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Curve and surface fitting with splines”, Monographs on Numerical
    Analysis, Oxford University Press, 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a discretization of a limacon curve in the polar coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And interpolate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that (i) we force interpolation by using *s=0*, (ii) the parameterization,
    `u`, is generated automatically. Now plot the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-splprep-1.png](../Images/d4efaff9e8a765abc77f94833b3f0c6e.png)'
  prefs: []
  type: TYPE_IMG
