["```py\nsympy.polys.densebasic.dmp_LC(f, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import poly_LC \n```", "```py\n>>> poly_LC([], ZZ)\n0\n>>> poly_LC([ZZ(1), ZZ(2), ZZ(3)], ZZ)\n1 \n```", "```py\nsympy.polys.densebasic.dmp_TC(f, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import poly_TC \n```", "```py\n>>> poly_TC([], ZZ)\n0\n>>> poly_TC([ZZ(1), ZZ(2), ZZ(3)], ZZ)\n3 \n```", "```py\nsympy.polys.densebasic.dmp_ground_LC(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_ground_LC \n```", "```py\n>>> f = ZZ.map([[[1], [2, 3]]]) \n```", "```py\n>>> dmp_ground_LC(f, 2, ZZ)\n1 \n```", "```py\nsympy.polys.densebasic.dmp_ground_TC(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_ground_TC \n```", "```py\n>>> f = ZZ.map([[[1], [2, 3]]]) \n```", "```py\n>>> dmp_ground_TC(f, 2, ZZ)\n3 \n```", "```py\nsympy.polys.densebasic.dmp_true_LT(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_true_LT \n```", "```py\n>>> f = ZZ.map([[4], [2, 0], [3, 0, 0]]) \n```", "```py\n>>> dmp_true_LT(f, 1, ZZ)\n((2, 0), 4) \n```", "```py\nsympy.polys.densebasic.dmp_degree(f, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_degree \n```", "```py\n>>> dmp_degree([[[]]], 2)\n-inf \n```", "```py\n>>> f = ZZ.map([[2], [1, 2, 3]]) \n```", "```py\n>>> dmp_degree(f, 1)\n1 \n```", "```py\nsympy.polys.densebasic.dmp_degree_in(f, j, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_degree_in \n```", "```py\n>>> f = ZZ.map([[2], [1, 2, 3]]) \n```", "```py\n>>> dmp_degree_in(f, 0, 1)\n1\n>>> dmp_degree_in(f, 1, 1)\n2 \n```", "```py\nsympy.polys.densebasic.dmp_degree_list(f, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_degree_list \n```", "```py\n>>> f = ZZ.map([[1], [1, 2, 3]]) \n```", "```py\n>>> dmp_degree_list(f, 1)\n(1, 2) \n```", "```py\nsympy.polys.densebasic.dmp_strip(f, u)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_strip \n```", "```py\n>>> dmp_strip([[], [0, 1, 2], [1]], 1)\n[[0, 1, 2], [1]] \n```", "```py\nsympy.polys.densebasic.dmp_validate(f, K=None)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_validate \n```", "```py\n>>> dmp_validate([[], [0, 1, 2], [1]])\n([[1, 2], [1]], 1) \n```", "```py\n>>> dmp_validate([[1], 1])\nTraceback (most recent call last):\n...\nValueError: invalid data structure for a multivariate polynomial \n```", "```py\nsympy.polys.densebasic.dup_reverse(f)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dup_reverse \n```", "```py\n>>> f = ZZ.map([1, 2, 3, 0]) \n```", "```py\n>>> dup_reverse(f)\n[3, 2, 1] \n```", "```py\nsympy.polys.densebasic.dmp_copy(f, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_copy \n```", "```py\n>>> f = ZZ.map([[1], [1, 2]]) \n```", "```py\n>>> dmp_copy(f, 1)\n[[1], [1, 2]] \n```", "```py\nsympy.polys.densebasic.dmp_to_tuple(f, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_to_tuple \n```", "```py\n>>> f = ZZ.map([[1], [1, 2]]) \n```", "```py\n>>> dmp_to_tuple(f, 1)\n((1,), (1, 2)) \n```", "```py\nsympy.polys.densebasic.dmp_normal(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_normal \n```", "```py\n>>> dmp_normal([[], [0, 1, 2]], 1, ZZ)\n[[1, 2]] \n```", "```py\nsympy.polys.densebasic.dmp_convert(f, u, K0, K1)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_convert \n```", "```py\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> dmp_convert([[R(1)], [R(2)]], 1, R.to_domain(), ZZ)\n[[1], [2]]\n>>> dmp_convert([[ZZ(1)], [ZZ(2)]], 1, ZZ, R.to_domain())\n[[1], [2]] \n```", "```py\nsympy.polys.densebasic.dmp_from_sympy(f, u, K)\n```", "```py\n>>> from sympy import S\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_from_sympy \n```", "```py\n>>> dmp_from_sympy([[S(1)], [S(2)]], 1, ZZ) == [[ZZ(1)], [ZZ(2)]]\nTrue \n```", "```py\nsympy.polys.densebasic.dmp_nth(f, n, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_nth \n```", "```py\n>>> f = ZZ.map([[1], [2], [3]]) \n```", "```py\n>>> dmp_nth(f, 0, 1, ZZ)\n[3]\n>>> dmp_nth(f, 4, 1, ZZ)\n[] \n```", "```py\nsympy.polys.densebasic.dmp_ground_nth(f, N, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_ground_nth \n```", "```py\n>>> f = ZZ.map([[1], [2, 3]]) \n```", "```py\n>>> dmp_ground_nth(f, (0, 1), 1, ZZ)\n2 \n```", "```py\nsympy.polys.densebasic.dmp_zero_p(f, u)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_zero_p \n```", "```py\n>>> dmp_zero_p([[[[[]]]]], 4)\nTrue\n>>> dmp_zero_p([[[[[1]]]]], 4)\nFalse \n```", "```py\nsympy.polys.densebasic.dmp_zero(u)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_zero \n```", "```py\n>>> dmp_zero(4)\n[[[[[]]]]] \n```", "```py\nsympy.polys.densebasic.dmp_one_p(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_one_p \n```", "```py\n>>> dmp_one_p([[[ZZ(1)]]], 2, ZZ)\nTrue \n```", "```py\nsympy.polys.densebasic.dmp_one(u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_one \n```", "```py\n>>> dmp_one(2, ZZ)\n[[[1]]] \n```", "```py\nsympy.polys.densebasic.dmp_ground_p(f, c, u)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_ground_p \n```", "```py\n>>> dmp_ground_p([[[3]]], 3, 2)\nTrue\n>>> dmp_ground_p([[[4]]], None, 2)\nTrue \n```", "```py\nsympy.polys.densebasic.dmp_ground(c, u)\n```", "```py\n>>> from sympy.polys.densebasic import dmp_ground \n```", "```py\n>>> dmp_ground(3, 5)\n[[[[[[3]]]]]]\n>>> dmp_ground(1, -1)\n1 \n```", "```py\nsympy.polys.densebasic.dmp_zeros(n, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_zeros \n```", "```py\n>>> dmp_zeros(3, 2, ZZ)\n[[[[]]], [[[]]], [[[]]]]\n>>> dmp_zeros(3, -1, ZZ)\n[0, 0, 0] \n```", "```py\nsympy.polys.densebasic.dmp_grounds(c, n, u)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_grounds \n```", "```py\n>>> dmp_grounds(ZZ(4), 3, 2)\n[[[[4]]], [[[4]]], [[[4]]]]\n>>> dmp_grounds(ZZ(4), 3, -1)\n[4, 4, 4] \n```", "```py\nsympy.polys.densebasic.dmp_negative_p(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_negative_p \n```", "```py\n>>> dmp_negative_p([[ZZ(1)], [-ZZ(1)]], 1, ZZ)\nFalse\n>>> dmp_negative_p([[-ZZ(1)], [ZZ(1)]], 1, ZZ)\nTrue \n```", "```py\nsympy.polys.densebasic.dmp_positive_p(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_positive_p \n```", "```py\n>>> dmp_positive_p([[ZZ(1)], [-ZZ(1)]], 1, ZZ)\nTrue\n>>> dmp_positive_p([[-ZZ(1)], [ZZ(1)]], 1, ZZ)\nFalse \n```", "```py\nsympy.polys.densebasic.dmp_from_dict(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_from_dict \n```", "```py\n>>> dmp_from_dict({(0, 0): ZZ(3), (0, 1): ZZ(2), (2, 1): ZZ(1)}, 1, ZZ)\n[[1, 0], [], [2, 3]]\n>>> dmp_from_dict({}, 0, ZZ)\n[] \n```", "```py\nsympy.polys.densebasic.dmp_to_dict(f, u, K=None, zero=False)\n```", "```py dict`` ```", "```py\n>>> from sympy.polys.densebasic import dmp_to_dict \n```", "```py\n>>> dmp_to_dict([[1, 0], [], [2, 3]], 1)\n{(0, 0): 3, (0, 1): 2, (2, 1): 1}\n>>> dmp_to_dict([], 0)\n{} \n```", "```py\nsympy.polys.densebasic.dmp_swap(f, i, j, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_swap \n```", "```py\n>>> f = ZZ.map([[[2], [1, 0]], []]) \n```", "```py\n>>> dmp_swap(f, 0, 1, 2, ZZ)\n[[[2], []], [[1, 0], []]]\n>>> dmp_swap(f, 1, 2, 2, ZZ)\n[[[1], [2, 0]], [[]]]\n>>> dmp_swap(f, 0, 2, 2, ZZ)\n[[[1, 0]], [[2, 0], []]] \n```", "```py\nsympy.polys.densebasic.dmp_permute(f, P, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_permute \n```", "```py\n>>> f = ZZ.map([[[2], [1, 0]], []]) \n```", "```py\n>>> dmp_permute(f, [1, 0, 2], 2, ZZ)\n[[[2], []], [[1, 0], []]]\n>>> dmp_permute(f, [1, 2, 0], 2, ZZ)\n[[[1], []], [[2, 0], []]] \n```", "```py\nsympy.polys.densebasic.dmp_nest(f, l, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_nest \n```", "```py\n>>> dmp_nest([[ZZ(1)]], 2, ZZ)\n[[[[1]]]] \n```", "```py\nsympy.polys.densebasic.dmp_raise(f, l, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_raise \n```", "```py\n>>> f = ZZ.map([[], [1, 2]]) \n```", "```py\n>>> dmp_raise(f, 2, 1, ZZ)\n[[[[]]], [[[1]], [[2]]]] \n```", "```py\nsympy.polys.densebasic.dmp_deflate(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_deflate \n```", "```py\n>>> f = ZZ.map([[1, 0, 0, 2], [], [3, 0, 0, 4]]) \n```", "```py\n>>> dmp_deflate(f, 1, ZZ)\n((2, 3), [[1, 2], [3, 4]]) \n```", "```py\nsympy.polys.densebasic.dmp_multi_deflate(polys, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_multi_deflate \n```", "```py\n>>> f = ZZ.map([[1, 0, 0, 2], [], [3, 0, 0, 4]])\n>>> g = ZZ.map([[1, 0, 2], [], [3, 0, 4]]) \n```", "```py\n>>> dmp_multi_deflate((f, g), 1, ZZ)\n((2, 1), ([[1, 0, 0, 2], [3, 0, 0, 4]], [[1, 0, 2], [3, 0, 4]])) \n```", "```py\nsympy.polys.densebasic.dmp_inflate(f, M, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_inflate \n```", "```py\n>>> f = ZZ.map([[1, 2], [3, 4]]) \n```", "```py\n>>> dmp_inflate(f, (2, 3), 1, ZZ)\n[[1, 0, 0, 2], [], [3, 0, 0, 4]] \n```", "```py\nsympy.polys.densebasic.dmp_exclude(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_exclude \n```", "```py\n>>> f = ZZ.map([[[1]], [[1], [2]]]) \n```", "```py\n>>> dmp_exclude(f, 2, ZZ)\n([2], [[1], [1, 2]], 1) \n```", "```py\nsympy.polys.densebasic.dmp_include(f, J, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_include \n```", "```py\n>>> f = ZZ.map([[1], [1, 2]]) \n```", "```py\n>>> dmp_include(f, [2], 1, ZZ)\n[[[1]], [[1], [2]]] \n```", "```py\nsympy.polys.densebasic.dmp_inject(f, u, K, front=False)\n```", "```py\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_inject \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> dmp_inject([R(1), x + 2], 0, R.to_domain())\n([[[1]], [[1], [2]]], 2)\n>>> dmp_inject([R(1), x + 2], 0, R.to_domain(), front=True)\n([[[1]], [[1, 2]]], 2) \n```", "```py\nsympy.polys.densebasic.dmp_eject(f, u, K, front=False)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_eject \n```", "```py\n>>> dmp_eject([[[1]], [[1], [2]]], 2, ZZ['x', 'y'])\n[1, x + 2] \n```", "```py\nsympy.polys.densebasic.dmp_terms_gcd(f, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_terms_gcd \n```", "```py\n>>> f = ZZ.map([[1, 0], [1, 0, 0], [], []]) \n```", "```py\n>>> dmp_terms_gcd(f, 1, ZZ)\n((2, 1), [[1], [1, 0]]) \n```", "```py\nsympy.polys.densebasic.dmp_list_terms(f, u, K, order=None)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_list_terms \n```", "```py\n>>> f = ZZ.map([[1, 1], [2, 3]]) \n```", "```py\n>>> dmp_list_terms(f, 1, ZZ)\n[((1, 1), 1), ((1, 0), 1), ((0, 1), 2), ((0, 0), 3)]\n>>> dmp_list_terms(f, 1, ZZ, order='grevlex')\n[((1, 1), 1), ((1, 0), 1), ((0, 1), 2), ((0, 0), 3)] \n```", "```py\nsympy.polys.densebasic.dmp_apply_pairs(f, g, h, args, u, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dmp_apply_pairs \n```", "```py\n>>> h = lambda x, y, z: 2*x + y - z \n```", "```py\n>>> dmp_apply_pairs([[1], [2, 3]], [[3], [2, 1]], h, (1,), 1, ZZ)\n[[4], [5, 6]] \n```", "```py\nsympy.polys.densebasic.dmp_slice(f, m, n, u, K)\n```", "```py\nsympy.polys.densebasic.dup_random(n, a, b, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.densebasic import dup_random \n```", "```py\n>>> dup_random(3, -10, 10, ZZ) \n[-2, -8, 9, -4] \n```", "```py\nsympy.polys.densearith.dmp_add_term(f, c, i, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_add_term(x*y + 1, 2, 2)\n2*x**2 + x*y + 1 \n```", "```py\nsympy.polys.densearith.dmp_sub_term(f, c, i, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sub_term(2*x**2 + x*y + 1, 2, 2)\nx*y + 1 \n```", "```py\nsympy.polys.densearith.dmp_mul_term(f, c, i, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_mul_term(x**2*y + x, 3*y, 2)\n3*x**4*y**2 + 3*x**3*y \n```", "```py\nsympy.polys.densearith.dmp_add_ground(f, c, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_add_ground(x**3 + 2*x**2 + 3*x + 4, ZZ(4))\nx**3 + 2*x**2 + 3*x + 8 \n```", "```py\nsympy.polys.densearith.dmp_sub_ground(f, c, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sub_ground(x**3 + 2*x**2 + 3*x + 4, ZZ(4))\nx**3 + 2*x**2 + 3*x \n```", "```py\nsympy.polys.densearith.dmp_mul_ground(f, c, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_mul_ground(2*x + 2*y, ZZ(3))\n6*x + 6*y \n```", "```py\nsympy.polys.densearith.dmp_quo_ground(f, c, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> R.dmp_quo_ground(2*x**2*y + 3*x, ZZ(2))\nx**2*y + x \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> R.dmp_quo_ground(2*x**2*y + 3*x, QQ(2))\nx**2*y + 3/2*x \n```", "```py\nsympy.polys.densearith.dmp_exquo_ground(f, c, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> R.dmp_exquo_ground(x**2*y + 2*x, QQ(2))\n1/2*x**2*y + x \n```", "```py\nsympy.polys.densearith.dup_lshift(f, n, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_lshift(x**2 + 1, 2)\nx**4 + x**2 \n```", "```py\nsympy.polys.densearith.dup_rshift(f, n, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_rshift(x**4 + x**2, 2)\nx**2 + 1\n>>> R.dup_rshift(x**4 + x**2 + 2, 2)\nx**2 + 1 \n```", "```py\nsympy.polys.densearith.dmp_abs(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_abs(x**2*y - x)\nx**2*y + x \n```", "```py\nsympy.polys.densearith.dmp_neg(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_neg(x**2*y - x)\n-x**2*y + x \n```", "```py\nsympy.polys.densearith.dmp_add(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_add(x**2 + y, x**2*y + x)\nx**2*y + x**2 + x + y \n```", "```py\nsympy.polys.densearith.dmp_sub(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sub(x**2 + y, x**2*y + x)\n-x**2*y + x**2 - x + y \n```", "```py\nsympy.polys.densearith.dmp_add_mul(f, g, h, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_add_mul(x**2 + y, x, x + 2)\n2*x**2 + 2*x + y \n```", "```py\nsympy.polys.densearith.dmp_sub_mul(f, g, h, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sub_mul(x**2 + y, x, x + 2)\n-2*x + y \n```", "```py\nsympy.polys.densearith.dmp_mul(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_mul(x*y + 1, x)\nx**2*y + x \n```", "```py\nsympy.polys.densearith.dmp_sqr(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sqr(x**2 + x*y + y**2)\nx**4 + 2*x**3*y + 3*x**2*y**2 + 2*x*y**3 + y**4 \n```", "```py\nsympy.polys.densearith.dmp_pow(f, n, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_pow(x*y + 1, 3)\nx**3*y**3 + 3*x**2*y**2 + 3*x*y + 1 \n```", "```py\nsympy.polys.densearith.dmp_pdiv(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_pdiv(x**2 + x*y, 2*x + 2)\n(2*x + 2*y - 2, -4*y + 4) \n```", "```py\nsympy.polys.densearith.dmp_prem(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_prem(x**2 + x*y, 2*x + 2)\n-4*y + 4 \n```", "```py\nsympy.polys.densearith.dmp_pquo(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2*y\n>>> h = 2*x + 2 \n```", "```py\n>>> R.dmp_pquo(f, g)\n2*x \n```", "```py\n>>> R.dmp_pquo(f, h)\n2*x + 2*y - 2 \n```", "```py\nsympy.polys.densearith.dmp_pexquo(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = 2*x + 2*y\n>>> h = 2*x + 2 \n```", "```py\n>>> R.dmp_pexquo(f, g)\n2*x \n```", "```py\n>>> R.dmp_pexquo(f, h)\nTraceback (most recent call last):\n...\nExactQuotientFailed: [[2], [2]] does not divide [[1], [1, 0], []] \n```", "```py\nsympy.polys.densearith.dmp_rr_div(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_rr_div(x**2 + x*y, 2*x + 2)\n(0, x**2 + x*y) \n```", "```py\nsympy.polys.densearith.dmp_ff_div(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> R.dmp_ff_div(x**2 + x*y, 2*x + 2)\n(1/2*x + 1/2*y - 1/2, -y + 1) \n```", "```py\nsympy.polys.densearith.dmp_div(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> R.dmp_div(x**2 + x*y, 2*x + 2)\n(0, x**2 + x*y) \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> R.dmp_div(x**2 + x*y, 2*x + 2)\n(1/2*x + 1/2*y - 1/2, -y + 1) \n```", "```py\nsympy.polys.densearith.dmp_rem(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> R.dmp_rem(x**2 + x*y, 2*x + 2)\nx**2 + x*y \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> R.dmp_rem(x**2 + x*y, 2*x + 2)\n-y + 1 \n```", "```py\nsympy.polys.densearith.dmp_quo(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> R.dmp_quo(x**2 + x*y, 2*x + 2)\n0 \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> R.dmp_quo(x**2 + x*y, 2*x + 2)\n1/2*x + 1/2*y - 1/2 \n```", "```py\nsympy.polys.densearith.dmp_exquo(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + x*y\n>>> g = x + y\n>>> h = 2*x + 2 \n```", "```py\n>>> R.dmp_exquo(f, g)\nx \n```", "```py\n>>> R.dmp_exquo(f, h)\nTraceback (most recent call last):\n...\nExactQuotientFailed: [[2], [2]] does not divide [[1], [1, 0], []] \n```", "```py\nsympy.polys.densearith.dmp_max_norm(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_max_norm(2*x*y - x - 3)\n3 \n```", "```py\nsympy.polys.densearith.dmp_l1_norm(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_l1_norm(2*x*y - x - 3)\n6 \n```", "```py\nsympy.polys.densearith.dmp_expand(polys, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_expand([x**2 + y**2, x + 1])\nx**3 + x**2 + x*y**2 + y**2 \n```", "```py\nsympy.polys.densetools.dmp_integrate(f, m, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> R.dmp_integrate(x + 2*y, 1)\n1/2*x**2 + 2*x*y\n>>> R.dmp_integrate(x + 2*y, 2)\n1/6*x**3 + x**2*y \n```", "```py\nsympy.polys.densetools.dmp_integrate_in(f, m, j, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> R.dmp_integrate_in(x + 2*y, 1, 0)\n1/2*x**2 + 2*x*y\n>>> R.dmp_integrate_in(x + 2*y, 1, 1)\nx*y + y**2 \n```", "```py\nsympy.polys.densetools.dmp_diff(f, m, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x*y**2 + 2*x*y + 3*x + 2*y**2 + 3*y + 1 \n```", "```py\n>>> R.dmp_diff(f, 1)\ny**2 + 2*y + 3\n>>> R.dmp_diff(f, 2)\n0 \n```", "```py\nsympy.polys.densetools.dmp_diff_in(f, m, j, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x*y**2 + 2*x*y + 3*x + 2*y**2 + 3*y + 1 \n```", "```py\n>>> R.dmp_diff_in(f, 1, 0)\ny**2 + 2*y + 3\n>>> R.dmp_diff_in(f, 1, 1)\n2*x*y + 2*x + 4*y + 3 \n```", "```py\nsympy.polys.densetools.dmp_eval(f, a, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_eval(2*x*y + 3*x + y + 2, 2)\n5*y + 8 \n```", "```py\nsympy.polys.densetools.dmp_eval_in(f, a, j, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 2*x*y + 3*x + y + 2 \n```", "```py\n>>> R.dmp_eval_in(f, 2, 0)\n5*y + 8\n>>> R.dmp_eval_in(f, 2, 1)\n7*x + 4 \n```", "```py\nsympy.polys.densetools.dmp_eval_tail(f, A, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 2*x*y + 3*x + y + 2 \n```", "```py\n>>> R.dmp_eval_tail(f, [2])\n7*x + 4\n>>> R.dmp_eval_tail(f, [2, 2])\n18 \n```", "```py\nsympy.polys.densetools.dmp_diff_eval_in(f, m, a, j, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x*y**2 + 2*x*y + 3*x + 2*y**2 + 3*y + 1 \n```", "```py\n>>> R.dmp_diff_eval_in(f, 1, 2, 0)\ny**2 + 2*y + 3\n>>> R.dmp_diff_eval_in(f, 1, 2, 1)\n6*x + 11 \n```", "```py\nsympy.polys.densetools.dmp_trunc(f, p, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y + 8*x**2 + 5*x*y + 6*x + 2*y + 3\n>>> g = (y - 1).drop(x) \n```", "```py\n>>> R.dmp_trunc(f, g)\n11*x**2 + 11*x + 5 \n```", "```py\nsympy.polys.densetools.dmp_ground_trunc(f, p, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y + 8*x**2 + 5*x*y + 6*x + 2*y + 3 \n```", "```py\n>>> R.dmp_ground_trunc(f, ZZ(3))\n-x**2 - x*y - y \n```", "```py\nsympy.polys.densetools.dup_monic(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x = ring(\"x\", ZZ)\n>>> R.dup_monic(3*x**2 + 6*x + 9)\nx**2 + 2*x + 3 \n```", "```py\n>>> R, x = ring(\"x\", QQ)\n>>> R.dup_monic(3*x**2 + 4*x + 2)\nx**2 + 4/3*x + 2/3 \n```", "```py\nsympy.polys.densetools.dmp_ground_monic(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> f = 3*x**2*y + 6*x**2 + 3*x*y + 9*y + 3 \n```", "```py\n>>> R.dmp_ground_monic(f)\nx**2*y + 2*x**2 + x*y + 3*y + 1 \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> f = 3*x**2*y + 8*x**2 + 5*x*y + 6*x + 2*y + 3 \n```", "```py\n>>> R.dmp_ground_monic(f)\nx**2*y + 8/3*x**2 + 5/3*x*y + 2*x + 2/3*y + 1 \n```", "```py\nsympy.polys.densetools.dup_content(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x = ring(\"x\", ZZ)\n>>> f = 6*x**2 + 8*x + 12 \n```", "```py\n>>> R.dup_content(f)\n2 \n```", "```py\n>>> R, x = ring(\"x\", QQ)\n>>> f = 6*x**2 + 8*x + 12 \n```", "```py\n>>> R.dup_content(f)\n2 \n```", "```py\nsympy.polys.densetools.dmp_ground_content(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> f = 2*x*y + 6*x + 4*y + 12 \n```", "```py\n>>> R.dmp_ground_content(f)\n2 \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> f = 2*x*y + 6*x + 4*y + 12 \n```", "```py\n>>> R.dmp_ground_content(f)\n2 \n```", "```py\nsympy.polys.densetools.dup_primitive(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x = ring(\"x\", ZZ)\n>>> f = 6*x**2 + 8*x + 12 \n```", "```py\n>>> R.dup_primitive(f)\n(2, 3*x**2 + 4*x + 6) \n```", "```py\n>>> R, x = ring(\"x\", QQ)\n>>> f = 6*x**2 + 8*x + 12 \n```", "```py\n>>> R.dup_primitive(f)\n(2, 3*x**2 + 4*x + 6) \n```", "```py\nsympy.polys.densetools.dmp_ground_primitive(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ, QQ \n```", "```py\n>>> R, x,y = ring(\"x,y\", ZZ)\n>>> f = 2*x*y + 6*x + 4*y + 12 \n```", "```py\n>>> R.dmp_ground_primitive(f)\n(2, x*y + 3*x + 2*y + 6) \n```", "```py\n>>> R, x,y = ring(\"x,y\", QQ)\n>>> f = 2*x*y + 6*x + 4*y + 12 \n```", "```py\n>>> R.dmp_ground_primitive(f)\n(2, x*y + 3*x + 2*y + 6) \n```", "```py\nsympy.polys.densetools.dup_extract(f, g, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_extract(6*x**2 + 12*x + 18, 4*x**2 + 8*x + 12)\n(2, 3*x**2 + 6*x + 9, 2*x**2 + 4*x + 6) \n```", "```py\nsympy.polys.densetools.dmp_ground_extract(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_ground_extract(6*x*y + 12*x + 18, 4*x*y + 8*x + 12)\n(2, 3*x*y + 6*x + 9, 2*x*y + 4*x + 6) \n```", "```py\nsympy.polys.densetools.dup_real_imag(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dup_real_imag(x**3 + x**2 + x + 1)\n(x**3 + x**2 - 3*x*y**2 + x - y**2 + 1, 3*x**2*y + 2*x*y - y**3 + y) \n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy import I\n>>> (z**3 + z**2 + z + 1).subs(z, x+I*y).expand().collect(I)\nx**3 + x**2 - 3*x*y**2 + x - y**2 + I*(3*x**2*y + 2*x*y - y**3 + y) + 1 \n```", "```py\nsympy.polys.densetools.dup_mirror(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_mirror(x**3 + 2*x**2 - 4*x + 2)\n-x**3 + 2*x**2 + 4*x + 2 \n```", "```py\nsympy.polys.densetools.dup_scale(f, a, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_scale(x**2 - 2*x + 1, ZZ(2))\n4*x**2 - 4*x + 1 \n```", "```py\nsympy.polys.densetools.dup_shift(f, a, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_shift(x**2 - 2*x + 1, ZZ(2))\nx**2 + 2*x + 1 \n```", "```py\nsympy.polys.densetools.dup_transform(f, p, q, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_transform(x**2 - 2*x + 1, x**2 + 1, x - 1)\nx**4 - 2*x**3 + 5*x**2 - 4*x + 4 \n```", "```py\nsympy.polys.densetools.dmp_compose(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_compose(x*y + 2*x + y, y)\ny**2 + 3*y \n```", "```py\nsympy.polys.densetools.dup_decompose(f, K)\n```", "```py\nf = f_1 o f_2 o ... f_n = f_1(f_2(... f_n)) \n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_decompose(x**4 - 2*x**3 + x**2)\n[x**2, x**2 - x] \n```", "```py\nsympy.polys.densetools.dmp_lift(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> from sympy import I \n```", "```py\n>>> K = QQ.algebraic_field(I)\n>>> R, x = ring(\"x\", K) \n```", "```py\n>>> f = x**2 + K([QQ(1), QQ(0)])*x + K([QQ(2), QQ(0)]) \n```", "```py\n>>> R.dmp_lift(f)\nx**8 + 2*x**6 + 9*x**4 - 8*x**2 + 16 \n```", "```py\nsympy.polys.densetools.dup_sign_variations(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_sign_variations(x**4 - x**2 - x + 1)\n2 \n```", "```py\nsympy.polys.densetools.dmp_clear_denoms(f, u, K0, K1=None, convert=False)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> f = QQ(1,2)*x + QQ(1,3)*y + 1 \n```", "```py\n>>> R.dmp_clear_denoms(f, convert=False)\n(6, 3*x + 2*y + 6)\n>>> R.dmp_clear_denoms(f, convert=True)\n(6, 3*x + 2*y + 6) \n```", "```py\nsympy.polys.densetools.dmp_revert(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\nsympy.polys.galoistools.gf_crt(U, M, K=None)\n```", "```pyi = ``0,...,n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_crt\n\n>>> gf_crt([49, 76, 65], [99, 97, 95], ZZ)\n639985 \n```", "```py\n>>> [639985 % m for m in [99, 97, 95]]\n[49, 76, 65] \n```", "```py\nsympy.polys.galoistools.gf_crt1(M, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_crt, gf_crt1, gf_crt2\n>>> U = [49, 76, 65]\n>>> M = [99, 97, 95] \n```", "```py\n>>> gf_crt(U, M, ZZ)\n639985 \n```", "```py\n>>> p, E, S = gf_crt1(M, ZZ)\n>>> gf_crt2(U, M, p, E, S, ZZ)\n639985 \n```", "```py\n>>> p, E, S = gf_crt1(M, ZZ)\n>>> Us = [[49, 76, 65], [23, 42, 67]]\n>>> for U in Us:\n...     print(gf_crt2(U, M, p, E, S, ZZ))\n639985\n236237 \n```", "```py\nsympy.polys.galoistools.gf_crt2(U, M, p, E, S, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_crt2 \n```", "```py\n>>> U = [49, 76, 65]\n>>> M = [99, 97, 95]\n>>> p = 912285\n>>> E = [9215, 9405, 9603]\n>>> S = [62, 24, 12] \n```", "```py\n>>> gf_crt2(U, M, p, E, S, ZZ)\n639985 \n```", "```py\nsympy.polys.galoistools.gf_int(a, p)\n```", "```py\n>>> from sympy.polys.galoistools import gf_int \n```", "```py\n>>> gf_int(2, 7)\n2\n>>> gf_int(5, 7)\n-2 \n```", "```py\nsympy.polys.galoistools.gf_degree(f)\n```", "```py\n>>> from sympy.polys.galoistools import gf_degree \n```", "```py\n>>> gf_degree([1, 1, 2, 0])\n3\n>>> gf_degree([])\n-1 \n```", "```py\nsympy.polys.galoistools.gf_LC(f, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_LC \n```", "```py\n>>> gf_LC([3, 0, 1], ZZ)\n3 \n```", "```py\nsympy.polys.galoistools.gf_TC(f, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_TC \n```", "```py\n>>> gf_TC([3, 0, 1], ZZ)\n1 \n```", "```py\nsympy.polys.galoistools.gf_strip(f)\n```", "```py\n>>> from sympy.polys.galoistools import gf_strip \n```", "```py\n>>> gf_strip([0, 0, 0, 3, 0, 1])\n[3, 0, 1] \n```", "```py\nsympy.polys.galoistools.gf_trunc(f, p)\n```", "```py\n>>> from sympy.polys.galoistools import gf_trunc \n```", "```py\n>>> gf_trunc([7, -2, 3], 5)\n[2, 3, 3] \n```", "```py\nsympy.polys.galoistools.gf_normal(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_normal \n```", "```py\n>>> gf_normal([5, 10, 21, -3], 5, ZZ)\n[1, 2] \n```", "```py\nsympy.polys.galoistools.gf_from_dict(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_from_dict \n```", "```py\n>>> gf_from_dict({10: ZZ(4), 4: ZZ(33), 0: ZZ(-1)}, 5, ZZ)\n[4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4] \n```", "```py\nsympy.polys.galoistools.gf_to_dict(f, p, symmetric=True)\n```", "```py\n>>> from sympy.polys.galoistools import gf_to_dict \n```", "```py\n>>> gf_to_dict([4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4], 5)\n{0: -1, 4: -2, 10: -1}\n>>> gf_to_dict([4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 4], 5, symmetric=False)\n{0: 4, 4: 3, 10: 4} \n```", "```py\nsympy.polys.galoistools.gf_from_int_poly(f, p)\n```", "```py\n>>> from sympy.polys.galoistools import gf_from_int_poly \n```", "```py\n>>> gf_from_int_poly([7, -2, 3], 5)\n[2, 3, 3] \n```", "```py\nsympy.polys.galoistools.gf_to_int_poly(f, p, symmetric=True)\n```", "```py\n>>> from sympy.polys.galoistools import gf_to_int_poly \n```", "```py\n>>> gf_to_int_poly([2, 3, 3], 5)\n[2, -2, -2]\n>>> gf_to_int_poly([2, 3, 3], 5, symmetric=False)\n[2, 3, 3] \n```", "```py\nsympy.polys.galoistools.gf_neg(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_neg \n```", "```py\n>>> gf_neg([3, 2, 1, 0], 5, ZZ)\n[2, 3, 4, 0] \n```", "```py\nsympy.polys.galoistools.gf_add_ground(f, a, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_add_ground \n```", "```py\n>>> gf_add_ground([3, 2, 4], 2, 5, ZZ)\n[3, 2, 1] \n```", "```py\nsympy.polys.galoistools.gf_sub_ground(f, a, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sub_ground \n```", "```py\n>>> gf_sub_ground([3, 2, 4], 2, 5, ZZ)\n[3, 2, 2] \n```", "```py\nsympy.polys.galoistools.gf_mul_ground(f, a, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_mul_ground \n```", "```py\n>>> gf_mul_ground([3, 2, 4], 2, 5, ZZ)\n[1, 4, 3] \n```", "```py\nsympy.polys.galoistools.gf_quo_ground(f, a, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_quo_ground \n```", "```py\n>>> gf_quo_ground(ZZ.map([3, 2, 4]), ZZ(2), 5, ZZ)\n[4, 1, 2] \n```", "```py\nsympy.polys.galoistools.gf_add(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_add \n```", "```py\n>>> gf_add([3, 2, 4], [2, 2, 2], 5, ZZ)\n[4, 1] \n```", "```py\nsympy.polys.galoistools.gf_sub(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sub \n```", "```py\n>>> gf_sub([3, 2, 4], [2, 2, 2], 5, ZZ)\n[1, 0, 2] \n```", "```py\nsympy.polys.galoistools.gf_mul(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_mul \n```", "```py\n>>> gf_mul([3, 2, 4], [2, 2, 2], 5, ZZ)\n[1, 0, 3, 2, 3] \n```", "```py\nsympy.polys.galoistools.gf_sqr(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sqr \n```", "```py\n>>> gf_sqr([3, 2, 4], 5, ZZ)\n[4, 2, 3, 1, 1] \n```", "```py\nsympy.polys.galoistools.gf_add_mul(f, g, h, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_add_mul\n>>> gf_add_mul([3, 2, 4], [2, 2, 2], [1, 4], 5, ZZ)\n[2, 3, 2, 2] \n```", "```py\nsympy.polys.galoistools.gf_sub_mul(f, g, h, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sub_mul \n```", "```py\n>>> gf_sub_mul([3, 2, 4], [2, 2, 2], [1, 4], 5, ZZ)\n[3, 3, 2, 1] \n```", "```py\nsympy.polys.galoistools.gf_expand(F, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_expand \n```", "```py\n>>> gf_expand([([3, 2, 4], 1), ([2, 2], 2), ([3, 1], 3)], 5, ZZ)\n[4, 3, 0, 3, 0, 1, 4, 1] \n```", "```py\nsympy.polys.galoistools.gf_div(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_div, gf_add_mul\n\n>>> gf_div(ZZ.map([1, 0, 1, 1]), ZZ.map([1, 1, 0]), 2, ZZ)\n([1, 1], [1]) \n```", "```py\n>>> gf_add_mul(ZZ.map([1]), ZZ.map([1, 1]), ZZ.map([1, 1, 0]), 2, ZZ)\n[1, 0, 1, 1] \n```", "```py\nsympy.polys.galoistools.gf_rem(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_rem \n```", "```py\n>>> gf_rem(ZZ.map([1, 0, 1, 1]), ZZ.map([1, 1, 0]), 2, ZZ)\n[1] \n```", "```py\nsympy.polys.galoistools.gf_quo(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_quo \n```", "```py\n>>> gf_quo(ZZ.map([1, 0, 1, 1]), ZZ.map([1, 1, 0]), 2, ZZ)\n[1, 1]\n>>> gf_quo(ZZ.map([1, 0, 3, 2, 3]), ZZ.map([2, 2, 2]), 5, ZZ)\n[3, 2, 4] \n```", "```py\nsympy.polys.galoistools.gf_exquo(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_exquo \n```", "```py\n>>> gf_exquo(ZZ.map([1, 0, 3, 2, 3]), ZZ.map([2, 2, 2]), 5, ZZ)\n[3, 2, 4] \n```", "```py\n>>> gf_exquo(ZZ.map([1, 0, 1, 1]), ZZ.map([1, 1, 0]), 2, ZZ)\nTraceback (most recent call last):\n...\nExactQuotientFailed: [1, 1, 0] does not divide [1, 0, 1, 1] \n```", "```py\nsympy.polys.galoistools.gf_lshift(f, n, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_lshift \n```", "```py\n>>> gf_lshift([3, 2, 4], 4, ZZ)\n[3, 2, 4, 0, 0, 0, 0] \n```", "```py\nsympy.polys.galoistools.gf_rshift(f, n, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_rshift \n```", "```py\n>>> gf_rshift([1, 2, 3, 4, 0], 3, ZZ)\n([1, 2], [3, 4, 0]) \n```", "```py\nsympy.polys.galoistools.gf_pow(f, n, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_pow \n```", "```py\n>>> gf_pow([3, 2, 4], 3, 5, ZZ)\n[2, 4, 4, 2, 2, 1, 4] \n```", "```py\nsympy.polys.galoistools.gf_pow_mod(f, n, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_pow_mod \n```", "```py\n>>> gf_pow_mod(ZZ.map([3, 2, 4]), 3, ZZ.map([1, 1]), 5, ZZ)\n[] \n```", "```py\nsympy.polys.galoistools.gf_gcd(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_gcd \n```", "```py\n>>> gf_gcd(ZZ.map([3, 2, 4]), ZZ.map([2, 2, 3]), 5, ZZ)\n[1, 3] \n```", "```py\nsympy.polys.galoistools.gf_lcm(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_lcm \n```", "```py\n>>> gf_lcm(ZZ.map([3, 2, 4]), ZZ.map([2, 2, 3]), 5, ZZ)\n[1, 2, 0, 4] \n```", "```py\nsympy.polys.galoistools.gf_cofactors(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_cofactors \n```", "```py\n>>> gf_cofactors(ZZ.map([3, 2, 4]), ZZ.map([2, 2, 3]), 5, ZZ)\n([1, 3], [3, 3], [2, 1]) \n```", "```py\nsympy.polys.galoistools.gf_gcdex(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_gcdex, gf_mul, gf_add\n\n>>> s, t, g = gf_gcdex(ZZ.map([1, 8, 7]), ZZ.map([1, 7, 1, 7]), 11, ZZ)\n>>> s, t, g\n([5, 6], [6], [1, 7]) \n```", "```py\n>>> S = gf_mul(s, ZZ.map([1, 8, 7]), 11, ZZ)\n>>> T = gf_mul(t, ZZ.map([1, 7, 1, 7]), 11, ZZ)\n\n>>> gf_add(S, T, 11, ZZ) == [1, 7]\nTrue \n```", "```py\nsympy.polys.galoistools.gf_monic(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_monic \n```", "```py\n>>> gf_monic(ZZ.map([3, 2, 4]), 5, ZZ)\n(3, [1, 4, 3]) \n```", "```py\nsympy.polys.galoistools.gf_diff(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_diff \n```", "```py\n>>> gf_diff([3, 2, 4], 5, ZZ)\n[1, 2] \n```", "```py\nsympy.polys.galoistools.gf_eval(f, a, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_eval \n```", "```py\n>>> gf_eval([3, 2, 4], 2, 5, ZZ)\n0 \n```", "```py\nsympy.polys.galoistools.gf_multi_eval(f, A, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_multi_eval \n```", "```py\n>>> gf_multi_eval([3, 2, 4], [0, 1, 2, 3, 4], 5, ZZ)\n[4, 4, 0, 2, 0] \n```", "```py\nsympy.polys.galoistools.gf_compose(f, g, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_compose \n```", "```py\n>>> gf_compose([3, 2, 4], [2, 2, 2], 5, ZZ)\n[2, 4, 0, 3, 0] \n```", "```py\nsympy.polys.galoistools.gf_compose_mod(g, h, f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_compose_mod \n```", "```py\n>>> gf_compose_mod(ZZ.map([3, 2, 4]), ZZ.map([2, 2, 2]), ZZ.map([4, 3]), 5, ZZ)\n[4] \n```", "```py\nsympy.polys.galoistools.gf_trace_map(a, b, c, n, f, p, K)\n```", "```py\na -> a**t**n, a + a**t + a**t**2 + ... + a**t**n (mod f) \n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_trace_map \n```", "```py\n>>> gf_trace_map([1, 2], [4, 4], [1, 1], 4, [3, 2, 4], 5, ZZ)\n([1, 3], [1, 3]) \n```", "```py\nsympy.polys.galoistools.gf_random(n, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_random\n>>> gf_random(10, 5, ZZ) \n[1, 2, 3, 2, 1, 1, 1, 2, 0, 4, 2] \n```", "```py\nsympy.polys.galoistools.gf_irreducible(n, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_irreducible\n>>> gf_irreducible(10, 5, ZZ) \n[1, 4, 2, 2, 3, 2, 4, 1, 4, 0, 4] \n```", "```py\nsympy.polys.galoistools.gf_irreducible_p(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_irreducible_p \n```", "```py\n>>> gf_irreducible_p(ZZ.map([1, 4, 2, 2, 3, 2, 4, 1, 4, 0, 4]), 5, ZZ)\nTrue\n>>> gf_irreducible_p(ZZ.map([3, 2, 4]), 5, ZZ)\nFalse \n```", "```py\nsympy.polys.galoistools.gf_sqf_p(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sqf_p \n```", "```py\n>>> gf_sqf_p(ZZ.map([3, 2, 4]), 5, ZZ)\nTrue\n>>> gf_sqf_p(ZZ.map([2, 4, 4, 2, 2, 1, 4]), 5, ZZ)\nFalse \n```", "```py\nsympy.polys.galoistools.gf_sqf_part(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_sqf_part \n```", "```py\n>>> gf_sqf_part(ZZ.map([1, 1, 3, 0, 1, 0, 2, 2, 1]), 5, ZZ)\n[1, 4, 3] \n```", "```py\nsympy.polys.galoistools.gf_sqf_list(f, p, K, all=False)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n\n>>> from sympy.polys.galoistools import (\n...     gf_from_dict, gf_diff, gf_sqf_list, gf_pow,\n... )\n... \n\n>>> f = gf_from_dict({11: ZZ(1), 0: ZZ(1)}, 11, ZZ) \n```", "```py\n>>> gf_diff(f, 11, ZZ)\n[] \n```", "```py\n>>> gf_sqf_list(f, 11, ZZ)\n(1, [([1, 1], 11)]) \n```", "```py\n>>> gf_pow([1, 1], 11, 11, ZZ) == f\nTrue \n```", "```py\nsympy.polys.galoistools.gf_Qmatrix(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_Qmatrix \n```", "```py\n>>> gf_Qmatrix([3, 2, 4], 5, ZZ)\n[[1, 0],\n [3, 4]] \n```", "```py\n>>> gf_Qmatrix([1, 0, 0, 0, 1], 5, ZZ)\n[[1, 0, 0, 0],\n [0, 4, 0, 0],\n [0, 0, 1, 0],\n [0, 0, 0, 4]] \n```", "```py\nsympy.polys.galoistools.gf_Qbasis(Q, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_Qmatrix, gf_Qbasis \n```", "```py\n>>> gf_Qbasis(gf_Qmatrix([1, 0, 0, 0, 1], 5, ZZ), 5, ZZ)\n[[1, 0, 0, 0], [0, 0, 1, 0]] \n```", "```py\n>>> gf_Qbasis(gf_Qmatrix([3, 2, 4], 5, ZZ), 5, ZZ)\n[[1, 0]] \n```", "```py\nsympy.polys.galoistools.gf_berlekamp(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_berlekamp \n```", "```py\n>>> gf_berlekamp([1, 0, 0, 0, 1], 5, ZZ)\n[[1, 0, 2], [1, 0, 3]] \n```", "```py\nsympy.polys.galoistools.gf_zassenhaus(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_zassenhaus \n```", "```py\n>>> gf_zassenhaus(ZZ.map([1, 4, 3]), 5, ZZ)\n[[1, 1], [1, 3]] \n```", "```py\nsympy.polys.galoistools.gf_shoup(f, p, K)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_shoup \n```", "```py\n>>> gf_shoup(ZZ.map([1, 4, 3]), 5, ZZ)\n[[1, 1], [1, 3]] \n```", "```py\nsympy.polys.galoistools.gf_factor_sqf(f, p, K, method=None)\n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_factor_sqf \n```", "```py\n>>> gf_factor_sqf(ZZ.map([3, 2, 4]), 5, ZZ)\n(3, [[1, 1], [1, 3]]) \n```", "```py\nsympy.polys.galoistools.gf_factor(f, p, K)\n```", "```py\nf_1(x)**e_1 f_2(x)**e_2 ... f_d(x)**e_d \n```", "```py\n>>> from sympy.polys.domains import ZZ\n>>> from sympy.polys.galoistools import gf_factor\n\n>>> gf_factor(ZZ.map([5, 2, 7, 2]), 11, ZZ)\n(5, [([1, 2], 1), ([1, 8], 2)]) \n```", "```py\nsympy.polys.galoistools.gf_value(f, a)\n```", "```py\n>>> from sympy.polys.galoistools import gf_value \n```", "```py\n>>> gf_value([1, 7, 2, 4], 11)\n2204 \n```", "```py\nsympy.polys.galoistools.gf_csolve(f, n)\n```", "```py\n>>> from sympy.polys.galoistools import gf_csolve\n>>> gf_csolve([1, 1, 7], 189)\n[13, 49, 76, 112, 139, 175] \n```", "```py\nsympy.polys.distributedmodules.sdm_monomial_mul(M, X)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_monomial_mul\n>>> sdm_monomial_mul((1, 1, 0), (1, 3))\n(1, 2, 3) \n```", "```py\nsympy.polys.distributedmodules.sdm_monomial_deg(M)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_monomial_deg\n>>> sdm_monomial_deg((5, 2, 1))\n3 \n```", "```py\nsympy.polys.distributedmodules.sdm_monomial_divides(A, B)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_monomial_divides\n>>> sdm_monomial_divides((1, 0, 0), (1, 0, 0))\nTrue \n```", "```py\n>>> sdm_monomial_divides((1, 0, 0), (1, 2, 1))\nTrue \n```", "```py\n>>> sdm_monomial_divides((5, 1, 1), (5, 2, 1))\nTrue \n```", "```py\n>>> sdm_monomial_divides((1, 0, 0), (2, 0, 0))\nFalse \n```", "```py\n>>> sdm_monomial_divides((1, 1, 0), (1, 0, 0))\nFalse \n```", "```py\n>>> sdm_monomial_divides((5, 1, 2), (5, 0, 1))\nFalse \n```", "```py\nsympy.polys.distributedmodules.sdm_LC(f, K)\n```", "```py\nsympy.polys.distributedmodules.sdm_to_dict(f)\n```", "```py\nsympy.polys.distributedmodules.sdm_from_dict(d, O)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_from_dict\n>>> from sympy.polys import QQ, lex\n>>> dic = {(1, 1, 0): QQ(1), (1, 0, 0): QQ(2), (0, 1, 0): QQ(0)}\n>>> sdm_from_dict(dic, lex)\n[((1, 1, 0), 1), ((1, 0, 0), 2)] \n```", "```py\nsympy.polys.distributedmodules.sdm_add(f, g, O, K)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_add\n>>> from sympy.polys import lex, QQ\n>>> sdm_add([((1, 1, 1), QQ(1))], [((2, 0, 0), QQ(1))], lex, QQ)\n[((2, 0, 0), 1), ((1, 1, 1), 1)] \n```", "```py\n>>> sdm_add([((1, 1, 1), QQ(1))], [((1, 1, 1), QQ(-1))], lex, QQ)\n[] \n```", "```py\n>>> sdm_add([((1, 0, 0), QQ(1))], [((1, 0, 0), QQ(2))], lex, QQ)\n[((1, 0, 0), 3)] \n```", "```py\n>>> sdm_add([((1, 0, 1), QQ(1))], [((1, 1, 0), QQ(1))], lex, QQ)\n[((1, 1, 0), 1), ((1, 0, 1), 1)] \n```", "```py\nsympy.polys.distributedmodules.sdm_LM(f)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_LM, sdm_from_dict\n>>> from sympy.polys import QQ, lex\n>>> dic = {(1, 2, 3): QQ(1), (4, 0, 0): QQ(1), (4, 0, 1): QQ(1)}\n>>> sdm_LM(sdm_from_dict(dic, lex))\n(4, 0, 1) \n```", "```py\nsympy.polys.distributedmodules.sdm_LT(f)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_LT, sdm_from_dict\n>>> from sympy.polys import QQ, lex\n>>> dic = {(1, 2, 3): QQ(1), (4, 0, 0): QQ(2), (4, 0, 1): QQ(3)}\n>>> sdm_LT(sdm_from_dict(dic, lex))\n((4, 0, 1), 3) \n```", "```py\nsympy.polys.distributedmodules.sdm_mul_term(f, term, O, K)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_mul_term\n>>> from sympy.polys import lex, QQ\n>>> sdm_mul_term([((1, 0, 0), QQ(1))], ((0, 0), QQ(0)), lex, QQ)\n[] \n```", "```py\n>>> sdm_mul_term([], ((1, 0), QQ(1)), lex, QQ)\n[] \n```", "```py\n>>> sdm_mul_term([((1, 0, 0), QQ(1))], ((1, 0), QQ(1)), lex, QQ)\n[((1, 1, 0), 1)] \n```", "```py\n>>> f = [((2, 0, 1), QQ(4)), ((1, 1, 0), QQ(3))]\n>>> sdm_mul_term(f, ((1, 1), QQ(2)), lex, QQ)\n[((2, 1, 2), 8), ((1, 2, 1), 6)] \n```", "```py\nsympy.polys.distributedmodules.sdm_zero()\n```", "```py\nsympy.polys.distributedmodules.sdm_deg(f)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_deg\n>>> sdm_deg([((1, 2, 3), 1), ((10, 0, 1), 1), ((2, 3, 4), 4)])\n7 \n```", "```py\nsympy.polys.distributedmodules.sdm_from_vector(vec, O, K, **opts)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_from_vector\n>>> from sympy.abc import x, y, z\n>>> from sympy.polys import QQ, lex\n>>> sdm_from_vector([x**2+y**2, 2*z], lex, QQ)\n[((1, 0, 0, 1), 2), ((0, 2, 0, 0), 1), ((0, 0, 2, 0), 1)] \n```", "```py\nsympy.polys.distributedmodules.sdm_to_vector(f, gens, K, n=None)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_to_vector\n>>> from sympy.abc import x, y, z\n>>> from sympy.polys import QQ\n>>> f = [((1, 0, 0, 1), QQ(2)), ((0, 2, 0, 0), QQ(1)), ((0, 0, 2, 0), QQ(1))]\n>>> sdm_to_vector(f, [x, y, z], QQ)\n[x**2 + y**2, 2*z] \n```", "```py\nsympy.polys.euclidtools.dmp_half_gcdex(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\nsympy.polys.euclidtools.dmp_gcdex(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\nsympy.polys.euclidtools.dmp_invert(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x = ring(\"x\", QQ) \n```", "```py\nsympy.polys.euclidtools.dmp_euclidean_prs(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\nsympy.polys.euclidtools.dmp_primitive_prs(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\nsympy.polys.euclidtools.dmp_inner_subresultants(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y - y**3 - 4\n>>> g = x**2 + x*y**3 - 9 \n```", "```py\n>>> a = 3*x*y**4 + y**3 - 27*y + 4\n>>> b = -3*y**10 - 12*y**7 + y**6 - 54*y**4 + 8*y**3 + 729*y**2 - 216*y + 16 \n```", "```py\n>>> prs = [f, g, a, b]\n>>> sres = [[1], [1], [3, 0, 0, 0, 0], [-3, 0, 0, -12, 1, 0, -54, 8, 729, -216, 16]] \n```", "```py\n>>> R.dmp_inner_subresultants(f, g) == (prs, sres)\nTrue \n```", "```py\nsympy.polys.euclidtools.dmp_subresultants(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y - y**3 - 4\n>>> g = x**2 + x*y**3 - 9 \n```", "```py\n>>> a = 3*x*y**4 + y**3 - 27*y + 4\n>>> b = -3*y**10 - 12*y**7 + y**6 - 54*y**4 + 8*y**3 + 729*y**2 - 216*y + 16 \n```", "```py\n>>> R.dmp_subresultants(f, g) == [f, g, a, b]\nTrue \n```", "```py\nsympy.polys.euclidtools.dmp_prs_resultant(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y - y**3 - 4\n>>> g = x**2 + x*y**3 - 9 \n```", "```py\n>>> a = 3*x*y**4 + y**3 - 27*y + 4\n>>> b = -3*y**10 - 12*y**7 + y**6 - 54*y**4 + 8*y**3 + 729*y**2 - 216*y + 16 \n```", "```py\n>>> res, prs = R.dmp_prs_resultant(f, g) \n```", "```py\n>>> res == b             # resultant has n-1 variables\nFalse\n>>> res == b.drop(x)\nTrue\n>>> prs == [f, g, a, b]\nTrue \n```", "```py\nsympy.polys.euclidtools.dmp_zz_modular_resultant(f, g, p, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x + y + 2\n>>> g = 2*x*y + x + 3 \n```", "```py\n>>> R.dmp_zz_modular_resultant(f, g, 5)\n-2*y**2 + 1 \n```", "```py\nsympy.polys.euclidtools.dmp_zz_collins_resultant(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x + y + 2\n>>> g = 2*x*y + x + 3 \n```", "```py\n>>> R.dmp_zz_collins_resultant(f, g)\n-2*y**2 - 5*y + 1 \n```", "```py\nsympy.polys.euclidtools.dmp_qq_collins_resultant(f, g, u, K0)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y = ring(\"x,y\", QQ) \n```", "```py\n>>> f = QQ(1,2)*x + y + QQ(2,3)\n>>> g = 2*x*y + x + 3 \n```", "```py\n>>> R.dmp_qq_collins_resultant(f, g)\n-2*y**2 - 7/3*y + 5/6 \n```", "```py\nsympy.polys.euclidtools.dmp_resultant(f, g, u, K, includePRS=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = 3*x**2*y - y**3 - 4\n>>> g = x**2 + x*y**3 - 9 \n```", "```py\n>>> R.dmp_resultant(f, g)\n-3*y**10 - 12*y**7 + y**6 - 54*y**4 + 8*y**3 + 729*y**2 - 216*y + 16 \n```", "```py\nsympy.polys.euclidtools.dmp_discriminant(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y,z,t = ring(\"x,y,z,t\", ZZ) \n```", "```py\n>>> R.dmp_discriminant(x**2*y + x*z + t)\n-4*y*t + z**2 \n```", "```py\nsympy.polys.euclidtools.dmp_rr_prs_gcd(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + 2*x*y + y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_rr_prs_gcd(f, g)\n(x + y, x + y, x) \n```", "```py\nsympy.polys.euclidtools.dmp_ff_prs_gcd(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y, = ring(\"x,y\", QQ) \n```", "```py\n>>> f = QQ(1,2)*x**2 + x*y + QQ(1,2)*y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_ff_prs_gcd(f, g)\n(x + y, 1/2*x + 1/2*y, x) \n```", "```py\nsympy.polys.euclidtools.dmp_zz_heu_gcd(f, g, u, K)\n```", "```py\nh = gcd(f, g), cff = quo(f, h) and cfg = quo(g, h) \n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + 2*x*y + y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_zz_heu_gcd(f, g)\n(x + y, x + y, x) \n```", "```py\nsympy.polys.euclidtools.dmp_qq_heu_gcd(f, g, u, K0)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> R, x,y, = ring(\"x,y\", QQ) \n```", "```py\n>>> f = QQ(1,4)*x**2 + x*y + y**2\n>>> g = QQ(1,2)*x**2 + x*y \n```", "```py\n>>> R.dmp_qq_heu_gcd(f, g)\n(x + 2*y, 1/4*x + 1/2*y, 1/2*x) \n```", "```py\nsympy.polys.euclidtools.dmp_inner_gcd(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + 2*x*y + y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_inner_gcd(f, g)\n(x + y, x + y, x) \n```", "```py\nsympy.polys.euclidtools.dmp_gcd(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + 2*x*y + y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_gcd(f, g)\nx + y \n```", "```py\nsympy.polys.euclidtools.dmp_lcm(f, g, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**2 + 2*x*y + y**2\n>>> g = x**2 + x*y \n```", "```py\n>>> R.dmp_lcm(f, g)\nx**3 + 2*x**2*y + x*y**2 \n```", "```py\nsympy.polys.euclidtools.dmp_content(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_content(2*x*y + 6*x + 4*y + 12)\n2*y + 6 \n```", "```py\nsympy.polys.euclidtools.dmp_primitive(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y, = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_primitive(2*x*y + 6*x + 4*y + 12)\n(2*y + 6, x + 2) \n```", "```py\nsympy.polys.euclidtools.dmp_cancel(f, g, u, K, include=True)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_cancel(2*x**2 - 2, x**2 - 2*x + 1)\n(2*x + 2, x - 1) \n```", "```py\nsympy.polys.factortools.dup_trial_division(f, factors, K)\n```", "```py\nsympy.polys.factortools.dmp_trial_division(f, factors, u, K)\n```", "```py\nsympy.polys.factortools.dup_zz_mignotte_bound(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> f = x**3 + 14*x**2 + 56*x + 64\n>>> R.dup_zz_mignotte_bound(f)\n152 \n```", "```py\n>>> f = 2*x**2 + 3*x + 4\n>>> R.dup_zz_mignotte_bound(f)\n6 \n```", "```py\n>>> f = 87*x**7 + 4*x**6 + 80*x**5 + 17*x**4 + 9*x**3 + 12*x**2 + 49*x + 26\n>>> R.dup_zz_mignotte_bound(f)\n744 \n```", "```py\nsympy.polys.factortools.dmp_zz_mignotte_bound(f, u, K)\n```", "```py\nsympy.polys.factortools.dup_zz_hensel_step(m, f, g, h, s, t, K)\n```", "```py\nf = g*h (mod m)\ns*g + t*h = 1 (mod m)\n\nlc(f) is not a zero divisor (mod m)\nlc(h) = 1\n\ndeg(f) = deg(g) + deg(h)\ndeg(s) < deg(h)\ndeg(t) < deg(g) \n```", "```py\nf = G*H (mod m**2)\nS*G + T*H = 1 (mod m**2) \n```", "```py\nsympy.polys.factortools.dup_zz_hensel_lift(p, f, f_list, l, K)\n```", "```py\nf = lc(f) f_1 ... f_r (mod p) \n```", "```py\nf = lc(f) F_1 ... F_r (mod p**l)\n\nF_i = f_i (mod p), i = 1..r \n```", "```py\nsympy.polys.factortools.dup_zz_zassenhaus(f, K)\n```", "```py\nsympy.polys.factortools.dup_zz_irreducible_p(f, K)\n```", "```py\nsympy.polys.factortools.dup_cyclotomic_p(f, K, irreducible=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> f = x**16 + x**14 - x**10 + x**8 - x**6 + x**2 + 1\n>>> R.dup_cyclotomic_p(f)\nFalse \n```", "```py\n>>> g = x**16 + x**14 - x**10 - x**8 - x**6 + x**2 + 1\n>>> R.dup_cyclotomic_p(g)\nTrue \n```", "```py\nsympy.polys.factortools.dup_zz_cyclotomic_poly(n, K)\n```", "```py\nsympy.polys.factortools.dup_zz_cyclotomic_factor(f, K)\n```", "```py\nsympy.polys.factortools.dup_zz_factor_sqf(f, K)\n```", "```py\nsympy.polys.factortools.dup_zz_factor(f, K)\n```", "```py\nf = content(f) f_1**k_1 ... f_n**k_n \n```", "```py\n(content(f), [(f_1, k_1), ..., (f_n, k_n)) \n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ)\n\n>>> R.dup_zz_factor(2*x**4 - 2)\n(2, [(x - 1, 1), (x + 1, 1), (x**2 + 1, 1)]) \n```", "```py\nf = 2 (x - 1) (x + 1) (x**2 + 1) \n```", "```py\nsympy.polys.factortools.dmp_zz_wang_non_divisors(E, cs, ct, K)\n```", "```py\nsympy.polys.factortools.dmp_zz_wang_test_points(f, T, ct, A, u, K)\n```", "```py\nsympy.polys.factortools.dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K)\n```", "```py\nsympy.polys.factortools.dup_zz_diophantine(F, m, p, K)\n```", "```py\nsympy.polys.factortools.dmp_zz_diophantine(F, c, A, d, p, u, K)\n```", "```py\nsympy.polys.factortools.dmp_zz_wang_hensel_lifting(f, H, LC, A, p, u, K)\n```", "```py\nsympy.polys.factortools.dmp_zz_wang(f, u, K, mod=None, seed=None)\n```", "```py\nx_2 -> a_2, ..., x_n -> a_n \n```", "```py\nsympy.polys.factortools.dmp_zz_factor(f, u, K)\n```", "```py\nf = content(f) f_1**k_1 ... f_n**k_n \n```", "```py\n(content(f), [(f_1, k_1), ..., (f_n, k_n)) \n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ)\n\n>>> R.dmp_zz_factor(2*x**2 - 2*y**2)\n(2, [(x - y, 1), (x + y, 1)]) \n```", "```py\nf = 2 (x - y) (x + y) \n```", "```py\nsympy.polys.factortools.dup_qq_i_factor(f, K0)\n```", "```py\nsympy.polys.factortools.dup_zz_i_factor(f, K0)\n```", "```py\nsympy.polys.factortools.dmp_qq_i_factor(f, u, K0)\n```", "```py\nsympy.polys.factortools.dmp_zz_i_factor(f, u, K0)\n```", "```py\nsympy.polys.factortools.dup_ext_factor(f, K)\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> from sympy.polys.factortools import dup_ext_factor\n>>> K = QQ.algebraic_field(sqrt(2)) \n```", "```py\n>>> p = [K(1), K(0), K(-2)] # x^2 - 2\n>>> p1 = [K(1), -K.unit]    # x - sqrt(2)\n>>> p2 = [K(1), +K.unit]    # x + sqrt(2)\n>>> dup_ext_factor(p, K) == (K.one, [(p1, 1), (p2, 1)])\nTrue \n```", "```py\n>>> from sympy import factor\n>>> from sympy.abc import x\n>>> factor(x**2 - 2, extension=sqrt(2))\n(x - sqrt(2))*(x + sqrt(2)) \n```", "```py\nsympy.polys.factortools.dmp_ext_factor(f, u, K)\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> from sympy.polys.factortools import dmp_ext_factor\n>>> K = QQ.algebraic_field(sqrt(2)) \n```", "```py\n>>> p = [[K(1),K(0),K(0)], [], [K(-2)]] # x**2*y**2 - 2\n>>> p1 = [[K(1),K(0)], [-K.unit]]       # x*y - sqrt(2)\n>>> p2 = [[K(1),K(0)], [+K.unit]]       # x*y + sqrt(2)\n>>> dmp_ext_factor(p, 1, K) == (K.one, [(p1, 1), (p2, 1)])\nTrue \n```", "```py\n>>> from sympy import factor\n>>> from sympy.abc import x, y\n>>> factor(x**2*y**2 - 2, extension=sqrt(2))\n(x*y - sqrt(2))*(x*y + sqrt(2)) \n```", "```py\nsympy.polys.factortools.dup_gf_factor(f, K)\n```", "```py\nsympy.polys.factortools.dmp_gf_factor(f, u, K)\n```", "```py\nsympy.polys.factortools.dup_factor_list(f, K0)\n```", "```py\nsympy.polys.factortools.dup_factor_list_include(f, K)\n```", "```py\nsympy.polys.factortools.dmp_factor_list(f, u, K0)\n```", "```py\nsympy.polys.factortools.dmp_factor_list_include(f, u, K)\n```", "```py\nsympy.polys.factortools.dup_irreducible_p(f, K)\n```", "```py\nsympy.polys.factortools.dmp_irreducible_p(f, u, K)\n```", "```py\nsympy.polys.sqfreetools.dup_sqf_p(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_sqf_p(x**2 - 2*x + 1)\nFalse\n>>> R.dup_sqf_p(x**2 - 1)\nTrue \n```", "```py\nsympy.polys.sqfreetools.dmp_sqf_p(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sqf_p(x**2 + 2*x*y + y**2)\nFalse\n>>> R.dmp_sqf_p(x**2 + y**2)\nTrue \n```", "```py\nsympy.polys.sqfreetools.dup_sqf_norm(f, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> from sympy import sqrt \n```", "```py\n>>> K = QQ.algebraic_field(sqrt(3))\n>>> R, x = ring(\"x\", K)\n>>> _, X = ring(\"x\", QQ) \n```", "```py\n>>> f = x**2 - 1\n>>> s, g, r = R.dup_sqf_norm(f) \n```", "```py\n>>> s == 1\nTrue\n>>> g == x**2 - 2*sqrt(3)*x + 2\nTrue\n>>> r == X**4 - 8*X**2 + 4\nTrue \n```", "```py\n>>> g == f.shift(-s*K.unit)\nTrue\n>>> g.norm() == r\nTrue\n>>> r.is_squarefree\nTrue \n```", "```py\nsympy.polys.sqfreetools.dmp_sqf_norm(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, QQ\n>>> from sympy import I \n```", "```py\n>>> K = QQ.algebraic_field(I)\n>>> R, x, y = ring(\"x,y\", K)\n>>> _, X, Y = ring(\"x,y\", QQ) \n```", "```py\n>>> f = x*y + y**2\n>>> s, g, r = R.dmp_sqf_norm(f) \n```", "```py\n>>> s\n[0, 1]\n>>> g == x*y - I*x + y**2 - 2*I*y - 1\nTrue\n>>> r == X**2*Y**2 + X**2 + 2*X*Y**3 + 2*X*Y + Y**4 + 2*Y**2 + 1\nTrue \n```", "```py\n>>> g == f.shift_list([-si*K.unit for si in s])\nTrue\n>>> g.norm() == r\nTrue\n>>> r.is_squarefree\nTrue \n```", "```py\nsympy.polys.sqfreetools.dmp_norm(f, u, K)\n```", "```py\n>>> from sympy import QQ, sqrt\n>>> from sympy.polys.sqfreetools import dmp_norm\n>>> k = QQ\n>>> K = k.algebraic_field(sqrt(2)) \n```", "```py\n>>> p = [[K(1)], [K(1),K.unit]]                  # x + y + sqrt(2)\n>>> N = [[k(1)], [k(2),k(0)], [k(1),k(0),k(-2)]] # x**2 + 2*x*y + y**2 - 2\n>>> dmp_norm(p, 1, K) == N\nTrue \n```", "```py\n>>> from sympy import expand, roots, minpoly\n>>> from sympy.abc import x, y\n>>> from math import prod\n>>> a = sqrt(2)\n>>> e = (x + y + a)\n>>> e.as_poly([x, y], extension=a).norm()\nPoly(x**2 + 2*x*y + y**2 - 2, x, y, domain='QQ') \n```", "```py\n>>> pa = minpoly(a)\n>>> pa\n_x**2 - 2\n>>> rs = roots(pa, multiple=True)\n>>> rs\n[sqrt(2), -sqrt(2)]\n>>> n = prod(e.subs(a, r) for r in rs)\n>>> n\n(x + y - sqrt(2))*(x + y + sqrt(2))\n>>> expand(n)\nx**2 + 2*x*y + y**2 - 2 \n```", "```py\nsympy.polys.sqfreetools.dup_gf_sqf_part(f, K)\n```", "```py\nsympy.polys.sqfreetools.dmp_gf_sqf_part(f, u, K)\n```", "```py\nsympy.polys.sqfreetools.dup_sqf_part(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_sqf_part(x**3 - 3*x - 2)\nx**2 - x - 2 \n```", "```py\nsympy.polys.sqfreetools.dmp_sqf_part(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> R.dmp_sqf_part(x**3 + 2*x**2*y + x*y**2)\nx**2 + x*y \n```", "```py\nsympy.polys.sqfreetools.dup_gf_sqf_list(f, K, all=False)\n```", "```py\nsympy.polys.sqfreetools.dmp_gf_sqf_list(f, u, K, all=False)\n```", "```py\nsympy.polys.sqfreetools.dup_sqf_list(f, K, all=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16 \n```", "```py\n>>> R.dup_sqf_list(f)\n(2, [(x + 1, 2), (x + 2, 3)])\n>>> R.dup_sqf_list(f, all=True)\n(2, [(1, 1), (x + 1, 2), (x + 2, 3)]) \n```", "```py\nsympy.polys.sqfreetools.dup_sqf_list_include(f, K, all=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16 \n```", "```py\n>>> R.dup_sqf_list_include(f)\n[(2, 1), (x + 1, 2), (x + 2, 3)]\n>>> R.dup_sqf_list_include(f, all=True)\n[(2, 1), (x + 1, 2), (x + 2, 3)] \n```", "```py\nsympy.polys.sqfreetools.dmp_sqf_list(f, u, K, all=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**5 + 2*x**4*y + x**3*y**2 \n```", "```py\n>>> R.dmp_sqf_list(f)\n(1, [(x + y, 2), (x, 3)])\n>>> R.dmp_sqf_list(f, all=True)\n(1, [(1, 1), (x + y, 2), (x, 3)]) \n```", "```py\nsympy.polys.sqfreetools.dmp_sqf_list_include(f, u, K, all=False)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\n>>> f = x**5 + 2*x**4*y + x**3*y**2 \n```", "```py\n>>> R.dmp_sqf_list_include(f)\n[(1, 1), (x + y, 2), (x, 3)]\n>>> R.dmp_sqf_list_include(f, all=True)\n[(1, 1), (x + y, 2), (x, 3)] \n```", "```py\nsympy.polys.sqfreetools.dup_gff_list(f, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> R.dup_gff_list(x**5 + 2*x**4 - x**3 - 2*x**2)\n[(x, 1), (x + 2, 4)] \n```", "```py\nsympy.polys.sqfreetools.dmp_gff_list(f, u, K)\n```", "```py\n>>> from sympy.polys import ring, ZZ\n>>> R, x,y = ring(\"x,y\", ZZ) \n```", "```py\nsympy.polys.groebnertools.groebner(seq, ring, method=None)\n```", "```py\nsympy.polys.groebnertools.spoly(p1, p2, ring)\n```", "```py\nsympy.polys.groebnertools.red_groebner(G, ring)\n```", "```py\nsympy.polys.groebnertools.is_groebner(G, ring)\n```", "```py\nsympy.polys.groebnertools.is_minimal(G, ring)\n```", "```py\nsympy.polys.groebnertools.is_reduced(G, ring)\n```", "```py\nsympy.polys.fglmtools.matrix_fglm(F, ring, O_to)\n```", "```py\nsympy.polys.distributedmodules.sdm_spoly(f, g, O, K, phantom=None)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_spoly\n>>> from sympy.polys import QQ, lex\n>>> f = [((2, 1, 1), QQ(1)), ((1, 0, 1), QQ(1))]\n>>> g = [((2, 3, 0), QQ(1))]\n>>> h = [((1, 2, 3), QQ(1))]\n>>> sdm_spoly(f, h, lex, QQ)\n[]\n>>> sdm_spoly(f, g, lex, QQ)\n[((1, 2, 1), 1)] \n```", "```py\nsympy.polys.distributedmodules.sdm_ecart(f)\n```", "```py\n>>> from sympy.polys.distributedmodules import sdm_ecart\n>>> sdm_ecart([((1, 2, 3), 1), ((1, 0, 1), 1)])\n0\n>>> sdm_ecart([((2, 2, 1), 1), ((1, 5, 1), 1)])\n3 \n```", "```py\nsympy.polys.distributedmodules.sdm_nf_mora(f, G, O, K, phantom=None)\n```", "```py\nsympy.polys.distributedmodules.sdm_groebner(G, NF, O, K, extended=False)\n```", "```py\nclass sympy.polys.polyoptions.Options(gens, args, flags=None, strict=False)\n```", "```py\n>>> from sympy.polys.polyoptions import Options\n>>> from sympy.polys.polyoptions import build_options \n```", "```py\n>>> from sympy.abc import x, y, z \n```", "```py\n>>> Options((x, y, z), {'domain': 'ZZ'})\n{'auto': False, 'domain': ZZ, 'gens': (x, y, z)} \n```", "```py\n>>> build_options((x, y, z), {'domain': 'ZZ'})\n{'auto': False, 'domain': ZZ, 'gens': (x, y, z)} \n```", "```py\nclone(updates={})\n```", "```py\nsympy.polys.polyoptions.build_options(gens, args=None)\n```", "```py\nsympy.polys.polyconfig.setup(key, value=None)\n```", "```py\nclass sympy.polys.polyerrors.BasePolynomialError\n```", "```py\nclass sympy.polys.polyerrors.ExactQuotientFailed(f, g, dom=None)\n```", "```py\nclass sympy.polys.polyerrors.OperationNotSupported(poly, func)\n```", "```py\nclass sympy.polys.polyerrors.HeuristicGCDFailed\n```", "```py\nclass sympy.polys.polyerrors.HomomorphismFailed\n```", "```py\nclass sympy.polys.polyerrors.IsomorphismFailed\n```", "```py\nclass sympy.polys.polyerrors.ExtraneousFactors\n```", "```py\nclass sympy.polys.polyerrors.EvaluationFailed\n```", "```py\nclass sympy.polys.polyerrors.RefinementFailed\n```", "```py\nclass sympy.polys.polyerrors.CoercionFailed\n```", "```py\nclass sympy.polys.polyerrors.NotInvertible\n```", "```py\nclass sympy.polys.polyerrors.NotReversible\n```", "```py\nclass sympy.polys.polyerrors.NotAlgebraic\n```", "```py\nclass sympy.polys.polyerrors.DomainError\n```", "```py\nclass sympy.polys.polyerrors.PolynomialError\n```", "```py\nclass sympy.polys.polyerrors.UnificationFailed\n```", "```py\nclass sympy.polys.polyerrors.GeneratorsNeeded\n```", "```py\nclass sympy.polys.polyerrors.ComputationFailed(func, nargs, exc)\n```", "```py\nclass sympy.polys.polyerrors.GeneratorsError\n```", "```py\nclass sympy.polys.polyerrors.UnivariatePolynomialError\n```", "```py\nclass sympy.polys.polyerrors.MultivariatePolynomialError\n```", "```py\nclass sympy.polys.polyerrors.PolificationFailed(opt, origs, exprs, seq=False)\n```", "```py\nclass sympy.polys.polyerrors.OptionError\n```", "```py\nclass sympy.polys.polyerrors.FlagError\n```", "```py\nsympy.polys.modulargcd.modgcd_univariate(f, g)\n```", "```py\n>>> from sympy.polys.modulargcd import modgcd_univariate\n>>> from sympy.polys import ring, ZZ \n```", "```py\n>>> R, x = ring(\"x\", ZZ) \n```", "```py\n>>> f = x**5 - 1\n>>> g = x - 1 \n```", "```py\n>>> h, cff, cfg = modgcd_univariate(f, g)\n>>> h, cff, cfg\n(x - 1, x**4 + x**3 + x**2 + x + 1, 1) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\n>>> f = 6*x**2 - 6\n>>> g = 2*x**2 + 4*x + 2 \n```", "```py\n>>> h, cff, cfg = modgcd_univariate(f, g)\n>>> h, cff, cfg\n(2*x + 2, 3*x - 3, x + 1) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\nsympy.polys.modulargcd.modgcd_bivariate(f, g)\n```", "```py\n>>> from sympy.polys.modulargcd import modgcd_bivariate\n>>> from sympy.polys import ring, ZZ \n```", "```py\n>>> R, x, y = ring(\"x, y\", ZZ) \n```", "```py\n>>> f = x**2 - y**2\n>>> g = x**2 + 2*x*y + y**2 \n```", "```py\n>>> h, cff, cfg = modgcd_bivariate(f, g)\n>>> h, cff, cfg\n(x + y, x - y, x + y) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\n>>> f = x**2*y - x**2 - 4*y + 4\n>>> g = x + 2 \n```", "```py\n>>> h, cff, cfg = modgcd_bivariate(f, g)\n>>> h, cff, cfg\n(x + 2, x*y - x - 2*y + 2, 1) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\nsympy.polys.modulargcd.modgcd_multivariate(f, g)\n```", "```py\n>>> from sympy.polys.modulargcd import modgcd_multivariate\n>>> from sympy.polys import ring, ZZ \n```", "```py\n>>> R, x, y = ring(\"x, y\", ZZ) \n```", "```py\n>>> f = x**2 - y**2\n>>> g = x**2 + 2*x*y + y**2 \n```", "```py\n>>> h, cff, cfg = modgcd_multivariate(f, g)\n>>> h, cff, cfg\n(x + y, x - y, x + y) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\n>>> R, x, y, z = ring(\"x, y, z\", ZZ) \n```", "```py\n>>> f = x*z**2 - y*z**2\n>>> g = x**2*z + z \n```", "```py\n>>> h, cff, cfg = modgcd_multivariate(f, g)\n>>> h, cff, cfg\n(z, x*z - y*z, x**2 + 1) \n```", "```py\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\nsympy.polys.modulargcd._modgcd_multivariate_p(f, g, p, degbound, contbound)\n```", "```py\nsympy.polys.modulargcd.func_field_modgcd(f, g)\n```", "```py\n>>> from sympy.polys.modulargcd import func_field_modgcd\n>>> from sympy.polys import AlgebraicField, QQ, ring\n>>> from sympy import sqrt \n```", "```py\n>>> A = AlgebraicField(QQ, sqrt(2))\n>>> R, x = ring('x', A) \n```", "```py\n>>> f = x**2 - 2\n>>> g = x + sqrt(2) \n```", "```py\n>>> h, cff, cfg = func_field_modgcd(f, g) \n```", "```py\n>>> h == x + sqrt(2)\nTrue\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\n>>> R, x, y = ring('x, y', A) \n```", "```py\n>>> f = x**2 + 2*sqrt(2)*x*y + 2*y**2\n>>> g = x + sqrt(2)*y \n```", "```py\n>>> h, cff, cfg = func_field_modgcd(f, g) \n```", "```py\n>>> h == x + sqrt(2)*y\nTrue\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```", "```py\n>>> f = x + sqrt(2)*y\n>>> g = x + y \n```", "```py\n>>> h, cff, cfg = func_field_modgcd(f, g) \n```", "```py\n>>> h == R.one\nTrue\n>>> cff * h == f\nTrue\n>>> cfg * h == g\nTrue \n```"]