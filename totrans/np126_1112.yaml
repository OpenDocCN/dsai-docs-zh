- en: NumPy 1.23.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.23.0 版本发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.23.0-notes.html](https://numpy.org/doc/1.26/release/1.23.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.23.0-notes.html](https://numpy.org/doc/1.26/release/1.23.0-notes.html)
- en: 'The NumPy 1.23.0 release continues the ongoing work to improve the handling
    and promotion of dtypes, increase the execution speed, clarify the documentation,
    and expire old deprecations. The highlights are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.23.0 版本持续改进处理和提升数据类型（dtypes）的工作，提高执行速度，澄清文档，并废弃旧的弃用功能。亮点包括：
- en: Implementation of `loadtxt` in C, greatly improving its performance.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 C 中实现了 `loadtxt`，大大提高了其性能。
- en: Exposing DLPack at the Python level for easy data exchange.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 层面暴露 DLPack 以便进行简单的数据交换。
- en: Changes to the promotion and comparisons of structured dtypes.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变了结构化数据类型的提升和比较方式。
- en: Improvements to f2py.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 f2py 的改进。
- en: See below for the details,
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息如下，
- en: New functions
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: A masked array specialization of `ndenumerate` is now available as `numpy.ma.ndenumerate`.
    It provides an alternative to `numpy.ndenumerate` and skips masked values by default.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以使用 `numpy.ma.ndenumerate` 作为 `ndenumerate` 的掩码数组专用版本。它提供了一个替代方案，跳过默认情况下的掩码��。
- en: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
- en: '`numpy.from_dlpack` has been added to allow easy exchange of data using the
    DLPack protocol. It accepts Python objects that implement the `__dlpack__` and
    `__dlpack_device__` methods and returns a ndarray object which is generally the
    view of the data of the input object.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了 `numpy.from_dlpack` 以便使用 DLPack 协议轻松交换数据。它接受实现了 `__dlpack__` 和 `__dlpack_device__`
    方法的 Python 对象，并返回一个 ndarray 对象，通常是输入对象数据的视图。
- en: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
- en: Deprecations
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用功能
- en: Setting `__array_finalize__` to `None` is deprecated. It must now be a method
    and may wish to call `super().__array_finalize__(obj)` after checking for `None`
    or if the NumPy version is sufficiently new.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `__array_finalize__` 设置为 `None` 已被弃用。现在必须是一个方法，并且可能需要在检查 `None` 或者 NumPy 版本足够新时调用
    `super().__array_finalize__(obj)`。
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
- en: Using `axis=32` (`axis=np.MAXDIMS`) in many cases had the same meaning as `axis=None`.
    This is deprecated and `axis=None` must be used instead.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多情况下，使用 `axis=32` (`axis=np.MAXDIMS`) 与 `axis=None` 具有相同的含义。这已被弃用，必须改用 `axis=None`。
- en: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
- en: The hook function `PyDataMem_SetEventHook` has been deprecated and the demonstration
    of its use in tool/allocation_tracking has been removed. The ability to track
    allocations is now built-in to python via `tracemalloc`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钩子函数 `PyDataMem_SetEventHook` 已被弃用，并且在 tool/allocation_tracking 中演示其用法已被移除。现在通过
    `tracemalloc` 内置到 Python 中来跟踪分配。
- en: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
- en: '`numpy.distutils` has been deprecated, as a result of `distutils` itself being
    deprecated. It will not be present in NumPy for Python >= 3.12, and will be removed
    completely 2 years after the release of Python 3.12 For more details, see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 已被弃用，因为 `distutils` 本身已被弃用。在 Python >= 3.12 的 NumPy 中将不再存在，将在
    Python 3.12 发布后的 2 年内完全移除。更多详情，请参阅 [numpy.distutils 的状态和迁移建议](../reference/distutils_status_migration.html#distutils-status-migration)。'
- en: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
- en: '`numpy.loadtxt` will now give a `DeprecationWarning` when an integer `dtype`
    is requested but the value is formatted as a floating point number.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当请求整数 `dtype` 但值格式为浮点数时，`numpy.loadtxt` 现在会发出 `DeprecationWarning`。
- en: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
- en: Expired deprecations
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已过时的弃用功能
- en: The `NpzFile.iteritems()` and `NpzFile.iterkeys()` methods have been removed
    as part of the continued removal of Python 2 compatibility. This concludes the
    deprecation from 1.15.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NpzFile.iteritems()` 和 `NpzFile.iterkeys()` 方法已被移除，作为继续移除 Python 2 兼容性的一部分。这结束了从
    1.15 版本开始的弃用。'
- en: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
- en: The `alen` and `asscalar` functions have been removed.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 `alen` 和 `asscalar` 函数。
- en: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
- en: The `UPDATEIFCOPY` array flag has been removed together with the enum `NPY_ARRAY_UPDATEIFCOPY`.
    The associated (and deprecated) `PyArray_XDECREF_ERR` was also removed. These
    were all deprecated in 1.14\. They are replaced by `NPY_ARRAY_WRITEBACKIFCOPY`,
    that requires calling `PyArray_ResolveWritebackIfCopy` before the array is deallocated.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY`数组标志已与枚举`NPY_ARRAY_UPDATEIFCOPY`一起被移除。相关的（已弃用的）`PyArray_XDECREF_ERR`也被移除。这些在1.14中已被弃用。它们被`NPY_ARRAY_WRITEBACKIFCOPY`取代，需要在数组被释放之前调用`PyArray_ResolveWritebackIfCopy`。'
- en: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
- en: Exceptions will be raised during array-like creation. When an object raised
    an exception during access of the special attributes `__array__` or `__array_interface__`,
    this exception was usually ignored. This behaviour was deprecated in 1.21, and
    the exception will now be raised.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类似数组创建期间将引发异常。当对象在访问特殊属性`__array__`或`__array_interface__`时引发异常时，通常会忽略此异常。这种行为在1.21中已被弃用，现在将引发异常。
- en: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
- en: Multidimensional indexing with non-tuple values is not allowed. Previously,
    code such as `arr[ind]` where `ind = [[0, 1], [0, 1]]` produced a `FutureWarning`
    and was interpreted as a multidimensional index (i.e., `arr[tuple(ind)]`). Now
    this example is treated like an array index over a single dimension (`arr[array(ind)]`).
    Multidimensional indexing with anything but a tuple was deprecated in NumPy 1.15.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许使用非元组值进行多维索引。以前，诸如`arr[ind]`的代码，其中`ind = [[0, 1], [0, 1]]`会产生`FutureWarning`，并被解释为多维索引（即`arr[tuple(ind)]`）。现在，此示例被视为在单个维度上的数组索引（`arr[array(ind)]`）。除元组之外的多维索引在NumPy
    1.15中已被弃用。
- en: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
- en: Changing to a dtype of different size in F-contiguous arrays is no longer permitted.
    Deprecated since Numpy 1.11.0\. See below for an extended explanation of the effects
    of this change.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在F连续数组中更改为不同大小的dtype不再被允许。自Numpy 1.11.0起已被弃用。请参见下文对此更改影响的详细解释。
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
- en: New Features
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: crackfortran has support for operator and assignment overloading
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: crackfortran支持运算符和赋值重载
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`crackfortran`解析器现在可以理解模块中的运算符和赋值定义。它们被添加到模块的`body`列表中，其中包含一个新键`implementedby`，列出了实现运算符或赋值的子例程或函数的名称。'
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
- en: f2py supports reading access type attributes from derived type statements
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py支持从派生类型语句中读取访问类型属性
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不需要使用`public`或`private`语句来指定派生类型的访问属性。
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
- en: New parameter `ndmin` added to `genfromtxt`
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`genfromtxt`中添加了新参数`ndmin`'
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数与`numpy.loadtxt`中的`ndmin`的行为相同。
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
- en: '`np.loadtxt` now supports quote character and single converter function'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在支持引号字符和单个转换函数'
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`现在支持额外的`quotechar`关键字参数，默认未设置。使用`quotechar=''"''`将读取Excel CSV方言中使用的带引号字段。'
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在可以传递单个可调用对象而不是字典作为`converters`参数。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在更改为不同大小的dtype只需要最后一个轴的连续性
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，查看具有不同项大小的dtype的数组需要整个数组是C连续的。这种限制会不必要地强迫用户在能够更改dtype之前对非连续数组进行连续复制。
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改不仅影响`ndarray.view`，还影响其他构造机制，包括不鼓励直接对`ndarray.dtype`进行赋值。
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改取消了关于查看F连续数组的弃用，其他地方在发布说明中有描述。
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
- en: Deterministic output files for F2PY
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F2PY的确定性输出文件
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于F77输入，`f2py`将无条件生成`modname-f2pywrappers.f`，尽管这些可能为空。对于自由格式输入，`modname-f2pywrappers.f`，`modname-f2pywrappers2.f90`都将无条件生成，可能为空。这允许在`cmake`或`meson`等构建系统中编写通用输出规则。通过向`f2py`传递`--skip-empty-wrappers`可以恢复旧行为。[通过meson使用](../f2py/buildtools/meson.html#f2py-meson)详细使用说明。
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
- en: '`keepdims` parameter for `average`'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`average`的`keepdims`参数'
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数`keepdims`添加到函数`numpy.average`和`numpy.ma.average`中。该参数的含义与`numpy.sum`或`numpy.mean`等缩减函数中的含义相同。
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
- en: New parameter `equal_nan` added to `np.unique`
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique`添加了新参数`equal_nan`'
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.unique`在1.21中更改为将所有`NaN`值视为相等并返回单个`NaN`。设置`equal_nan=False`将恢复到1.21之前的行为，将`NaNs`视为唯一。默认为`True`。'
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
- en: Compatibility notes
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D `np.linalg.norm`保留浮点输入类型，即使是标量结果
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当`ord`参数不是明确列出的值之一时，例如`ord=3`时，这将提升为`float64`：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改仅影响`float32`和`float16`向量，`ord`不是`-Inf`，`0`，`1`，`2`和`Inf`。
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
- en: Changes to structured (void) dtype promotion and comparisons
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化（void）dtype提升和比较的更改
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，NumPy现在为结构化dtype定义了正确但略有限制的提升，通过提升每个字段的子类型而不是引发异常：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于匹配字段名称、顺序和标题的提升，强制执行，但忽略填充。涉及结构化dtype的提升现在始终确保所有字段的本机字节顺序（这可能会改变`np.concatenate`的结果）并确保结果将是“紧凑的”，即所有字段都按顺序连续排列并删除填充。有关更多详细信息，请参见[结构比较和提升](../user/basics.rec.html#structured-dtype-comparison-and-promotion)。
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐结构的`repr`现在永远不会打印包括`offsets`和`itemsize`的长格式，除非结构包含`align=True`未保证的填充。
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述提升逻辑的变化一致，转换安全性已经更新：
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"equiv"`强制匹配名称和标题。由于填充，允许项大小不同。'
- en: '`"safe"` allows mismatching field names and titles'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"safe"`允许不匹配的字段名称和标题'
- en: The cast safety is limited by the cast safety of each included field.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换安全性受到每个包含字段的转换安全性的限制。
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段的顺序用于决定每个单独字段的转换安全性。以前，字段名称被使用，只有在名称不匹配时才可能发生不安全的转换。
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要重要变化是现在将名称不匹配视为“安全”转换。
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NPY_RELAXED_STRIDES_CHECKING`已被移除'
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy不再能够使用`NPY_RELAXED_STRIDES_CHECKING=0`进行编译。多年来，放松的步幅一直是默认设置，最初引入该选项是为了实现更平滑的过渡。
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
- en: '`np.loadtxt` has recieved several changes'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`已经接受了几处更改'
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了`numpy.loadtxt`的行计数。`loadtxt`会忽略文件中完全空行，但会将其计入`max_rows`。当使用`max_rows`并且文件包含空行时，这些行现在不会被计入。以前可能出现结果包含少于`max_rows`行的情况，即使有更多数据可供读取。如果需要旧的行为，可以使用`itertools.islice`：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常更快且改进了很多，但`numpy.loadtxt`现在可能无法将某些字符串转换为以前成功读取的数字。这些情况中最重要的是：
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析浮点值，如`1.0`转换为整数现在已经不推荐使用。
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析十六进制浮点数，如`0x3p3`将失败
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前接受`_`作为千位分隔符`100_000`。现在��导致错误。
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到这些限制，可以通过传递适当的`converters=`来解决所有问题。NumPy现在支持传递单个转换器以用于所有列，以使操作更加方便。例如，`converters=float.fromhex`可以读取十六进制浮点数，`converters=int`可以读取`100_000`。
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，错误消息已经得到了一般改进。然而，这意味着错误类型可能会有所不同。特别是，当解析单个条目失败时，现在总是会引发`ValueError`。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Improvements
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`ndarray.__array_finalize__` is now callable'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray.__array_finalize__`现在可调用'
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着子类现在可以使用`super().__array_finalize__(obj)`而不必担心`ndarray`是否是它们的超类。实际调用仍然是一个空操作。
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
- en: Add support for VSX4/Power10
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加对VSX4/Power10的支持
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 VSX4/Power10 启用，Power ISA 3.1 中提供的新指令可用于加速一些 NumPy 操作，例如 floor_divide、modulo
    等。
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
- en: '`np.fromiter` now accepts objects and subarrays'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromiter` 现在接受对象和子数组'
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromiter` 函数现在支持对象和子数组的数据类型。请参阅函数文档以获取示例。'
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
- en: Math C library feature detection now uses correct signatures
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学 C 库特征检测现在使用正确的签名
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 编译之前会进行检测阶段，以确定底层 libc 是否支持某些数学操作。以前，这段代码没有遵守正确的签名。修复这个问题可以为`wasm-ld`后端（用于 web
    assembly 编译）启用编译，并减少警告数量。
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
- en: '`np.kron` now maintains subclass information'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.kron` 现在保留子类信息'
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron` 现在在计算输入的 Kronecker 乘积时保留子类信息'
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Warning
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron` 输出现在遵循`ufunc`排序（`multiply`）以确定输出类类型'
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
- en: Performance improvements and changes
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进和变化
- en: Faster `np.loadtxt`
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.loadtxt`
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt` 现在通常比以前快得多，因为大部分现在是用 C 实现的。'
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Faster reduction operators
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的约简运算符
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连续的基于整数的数组，约简操作如`numpy.sum`、`numpy.prod`、`numpy.add.reduce`、`numpy.logical_and.reduce`现在快得多。
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
- en: Faster `np.where`
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.where`
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.where` 在不可预测/随机输入数据上比以前快得多。'
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
- en: Faster operations on NumPy scalars
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 标量上的操作更快
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 NumPy 标量上的操作现在显着更快，尽管在某些情况下，稀有操作（例如使用 0-D 数组而不是标量）可能较慢。然而，即使有这些改进，希望为标量获得最佳性能的用户可能希望使用`scalar.item()`将已知的
    NumPy 标量转换为 Python 标量。
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
- en: Faster `np.kron`
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.kron`
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.kron` 现在快了约 80%，因为乘积现在使用广播计算。'
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
- en: New functions
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: A masked array specialization of `ndenumerate` is now available as `numpy.ma.ndenumerate`.
    It provides an alternative to `numpy.ndenumerate` and skips masked values by default.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以使用`numpy.ma.ndenumerate`作为`ndenumerate`的掩码数组专用版本。它提供了一个替代方案，跳过默认情况下的掩码值。
- en: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20020](https://github.com/numpy/numpy/pull/20020))
- en: '`numpy.from_dlpack` has been added to allow easy exchange of data using the
    DLPack protocol. It accepts Python objects that implement the `__dlpack__` and
    `__dlpack_device__` methods and returns a ndarray object which is generally the
    view of the data of the input object.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`numpy.from_dlpack`，以便使用 DLPack 协议轻松交换数据。它接受实现`__dlpack__`和`__dlpack_device__`方法的
    Python 对象，并返回一个 ndarray 对象，通常是输入对象数据的视图。
- en: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21145](https://github.com/numpy/numpy/pull/21145))
- en: Deprecations
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Setting `__array_finalize__` to `None` is deprecated. It must now be a method
    and may wish to call `super().__array_finalize__(obj)` after checking for `None`
    or if the NumPy version is sufficiently new.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`__array_finalize__`设置为`None`已被弃用。现在必须是一个方法，并且可能需要在检查`None`后或者NumPy版本足够新时调用`super().__array_finalize__(obj)`。
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
- en: Using `axis=32` (`axis=np.MAXDIMS`) in many cases had the same meaning as `axis=None`.
    This is deprecated and `axis=None` must be used instead.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多情况下，使用`axis=32`（`axis=np.MAXDIMS`）与`axis=None`具有相同的含义。这已被弃用，必须改用`axis=None`。
- en: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20920](https://github.com/numpy/numpy/pull/20920))
- en: The hook function `PyDataMem_SetEventHook` has been deprecated and the demonstration
    of its use in tool/allocation_tracking has been removed. The ability to track
    allocations is now built-in to python via `tracemalloc`.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钩子函数`PyDataMem_SetEventHook`已被弃用，并且已删除了在tool/allocation_tracking中使用它的演示。现在通过`tracemalloc`内置到python中来跟踪分配。
- en: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20394](https://github.com/numpy/numpy/pull/20394))
- en: '`numpy.distutils` has been deprecated, as a result of `distutils` itself being
    deprecated. It will not be present in NumPy for Python >= 3.12, and will be removed
    completely 2 years after the release of Python 3.12 For more details, see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration).'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.distutils`已被弃用，因为`distutils`本身已被弃用。在Python >= 3.12的NumPy中将不再存在，并且将在Python
    3.12发布后的2年内完全移除。更多详情，请参见[Status of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration)。'
- en: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20875](https://github.com/numpy/numpy/pull/20875))
- en: '`numpy.loadtxt` will now give a `DeprecationWarning` when an integer `dtype`
    is requested but the value is formatted as a floating point number.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当请求整数`dtype`但值格式化为浮点数时，`numpy.loadtxt`现在将给出`DeprecationWarning`。
- en: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21663](https://github.com/numpy/numpy/pull/21663))
- en: Expired deprecations
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用功能
- en: The `NpzFile.iteritems()` and `NpzFile.iterkeys()` methods have been removed
    as part of the continued removal of Python 2 compatibility. This concludes the
    deprecation from 1.15.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NpzFile.iteritems()`和`NpzFile.iterkeys()`方法已被移除，作为继续移除Python 2兼容性的一部分。这标志着从1.15开始的弃用已经完成。'
- en: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-16830](https://github.com/numpy/numpy/pull/16830))
- en: The `alen` and `asscalar` functions have been removed.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alen`和`asscalar`函数已被移除。'
- en: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20414](https://github.com/numpy/numpy/pull/20414))
- en: The `UPDATEIFCOPY` array flag has been removed together with the enum `NPY_ARRAY_UPDATEIFCOPY`.
    The associated (and deprecated) `PyArray_XDECREF_ERR` was also removed. These
    were all deprecated in 1.14\. They are replaced by `NPY_ARRAY_WRITEBACKIFCOPY`,
    that requires calling `PyArray_ResolveWritebackIfCopy` before the array is deallocated.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY`数组标志已与枚举`NPY_ARRAY_UPDATEIFCOPY`一起被移除。相关的（已弃用的）`PyArray_XDECREF_ERR`也已被移除。这些在1.14中已被弃用。它们被`NPY_ARRAY_WRITEBACKIFCOPY`取代，需要在数组被释放之前调用`PyArray_ResolveWritebackIfCopy`。'
- en: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20589](https://github.com/numpy/numpy/pull/20589))
- en: Exceptions will be raised during array-like creation. When an object raised
    an exception during access of the special attributes `__array__` or `__array_interface__`,
    this exception was usually ignored. This behaviour was deprecated in 1.21, and
    the exception will now be raised.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类似数组创建期间将引发异常。当对象在访问特殊属性`__array__`或`__array_interface__`时引发异常时，通常会忽略此异常。这种行为在1.21中已被弃用，现在将引发异常。
- en: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20835](https://github.com/numpy/numpy/pull/20835))
- en: Multidimensional indexing with non-tuple values is not allowed. Previously,
    code such as `arr[ind]` where `ind = [[0, 1], [0, 1]]` produced a `FutureWarning`
    and was interpreted as a multidimensional index (i.e., `arr[tuple(ind)]`). Now
    this example is treated like an array index over a single dimension (`arr[array(ind)]`).
    Multidimensional indexing with anything but a tuple was deprecated in NumPy 1.15.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许使用非元组值进行多维索引。以前，像`arr[ind]`这样的代码，其中`ind = [[0, 1], [0, 1]]`产生了一个`FutureWarning`，并被解释为多维索引（即`arr[tuple(ind)]`）。现在，此示例被视为在单个维度上的数组索引（`arr[array(ind)]`）。在NumPy
    1.15中，除元组外的任何多维索引都已被弃用。
- en: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-21029](https://github.com/numpy/numpy/pull/21029))
- en: Changing to a dtype of different size in F-contiguous arrays is no longer permitted.
    Deprecated since Numpy 1.11.0\. See below for an extended explanation of the effects
    of this change.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不再允许在F连续数组中更改为不同大小的dtype。自Numpy 1.11.0起已弃用。请参见下文以了解此更改的影响的详细解释。
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
- en: New Features
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: crackfortran has support for operator and assignment overloading
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: crackfortran支持运算符和赋值重载
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`crackfortran`解析器现在了解模块中的运算符和赋值定义。它们被添加到包含新键`implementedby`的模块的`body`列表中，该键列出了实现运算符或赋值的子例程或函数的名称。'
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
- en: f2py supports reading access type attributes from derived type statements
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py支持从派生类型语句中读取访问类型属性
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不需要使用`public`或`private`语句来指定派生类型的访问属性。
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
- en: New parameter `ndmin` added to `genfromtxt`
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`genfromtxt`中添加了新参数`ndmin`'
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数的行为与`numpy.loadtxt`中的`ndmin`相同。
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
- en: '`np.loadtxt` now supports quote character and single converter function'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`现在支持引号字符和单个转换函数'
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`现在支持额外的`quotechar`关键字参数，默认未设置。使用`quotechar=''"''`将读取Excel CSV方言中使用的带引号的字段。'
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在可以传递单个可调用对象而不是字典给`converters`参数。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改为不同大小的dtype现在只需要最后一个轴是连续的
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，查看具有不同项大小的dtype的数组需要整个数组是C连续的。这种限制会不必要地强迫用户在能够更改dtype之前对非连续数组进行连续复制。
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改不仅影响`ndarray.view`，还影响其他构造机制，包括不鼓励直接对`ndarray.dtype`进行赋值。
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改取消了关于查看F连续数组的弃用，其他地方在发布说明中有描述。
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
- en: Deterministic output files for F2PY
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F2PY的确定性输出文件
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于F77输入，`f2py`将无条件生成`modname-f2pywrappers.f`，尽管这些可能为空。对于自由格式输入，`modname-f2pywrappers.f`，`modname-f2pywrappers2.f90`都将无条件生成，可能为空。这允许在`cmake`或`meson`等构建系统中编写通用输出规则。通过向`f2py`传递`--skip-empty-wrappers`可以恢复旧行为。[通过meson使用](../f2py/buildtools/meson.html#f2py-meson)详细使用说明。
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
- en: '`keepdims` parameter for `average`'
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`average`的`keepdims`参数'
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`keepdims`已添加到函数`numpy.average`和`numpy.ma.average`中。该参数的含义与`numpy.sum`或`numpy.mean`等缩减函数中的含义相同。
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
- en: New parameter `equal_nan` added to `np.unique`
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique` 添加了新参数 `equal_nan`'
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.unique` 在 1.21 中更改为将所有 `NaN` 值视为相等并返回单个 `NaN`。设置 `equal_nan=False` 将恢复到
    1.21 之前的行为，将 `NaN` 视为唯一。默认为 `True`。'
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
- en: crackfortran has support for operator and assignment overloading
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: crackfortran 现在支持运算符和赋值重载
- en: '`crackfortran` parser now understands operator and assignment definitions in
    a module. They are added in the `body` list of the module which contains a new
    key `implementedby` listing the names of the subroutines or functions implementing
    the operator or assignment.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`crackfortran` 解析器现在理解模块中的运算符和赋值定义。它们被添加到包含新键 `implementedby` 的模块的 `body` 列表中，列出了实现运算符或赋值的子例程或函数的名称。'
- en: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15006](https://github.com/numpy/numpy/pull/15006))
- en: f2py supports reading access type attributes from derived type statements
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: f2py 支持从派生类型语句中读取访问类型属性
- en: As a result, one does not need to use `public` or `private` statements to specify
    derived type access properties.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不需要使用 `public` 或 `private` 语句来指定派生类型的访问属性。
- en: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-15844](https://github.com/numpy/numpy/pull/15844))
- en: New parameter `ndmin` added to `genfromtxt`
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`genfromtxt` 添加了新参数 `ndmin`'
- en: This parameter behaves the same as `ndmin` from `numpy.loadtxt`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数的行为与 `numpy.loadtxt` 中的 `ndmin` 相同。
- en: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20500](https://github.com/numpy/numpy/pull/20500))
- en: '`np.loadtxt` now supports quote character and single converter function'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt` 现在支持引号字符和单个转换函数'
- en: '`numpy.loadtxt` now supports an additional `quotechar` keyword argument which
    is not set by default. Using `quotechar=''"''` will read quoted fields as used
    by the Excel CSV dialect.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt` 现在支持额外的 `quotechar` 关键字参数，默认未设置。使用 `quotechar=''"''` 将读取 Excel
    CSV 方言中使用的带引号的字段。'
- en: Further, it is now possible to pass a single callable rather than a dictionary
    for the `converters` argument.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在可以传递单个可调用对象而不是字典作为 `converters` 参数。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Changing to dtype of a different size now requires contiguity of only the last
    axis
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改为不同大小的 dtype 现在只需要最后一个轴是连续的
- en: Previously, viewing an array with a dtype of a different item size required
    that the entire array be C-contiguous. This limitation would unnecessarily force
    the user to make contiguous copies of non-contiguous arrays before being able
    to change the dtype.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，查看具有不同项大小的 dtype 的数组需要整个数组是 C 连续的。这种限制会不必要地强迫用户在能够更改 dtype 之前对非连续数组进行连续复制。
- en: This change affects not only `ndarray.view`, but other construction mechanisms,
    including the discouraged direct assignment to `ndarray.dtype`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改不仅影响 `ndarray.view`，还影响其他构造机制，包括不鼓励直接赋值给 `ndarray.dtype`。
- en: This change expires the deprecation regarding the viewing of F-contiguous arrays,
    described elsewhere in the release notes.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改终止了关于查看 F 连续数组的弃用，其他地方在发布说明中有描述。
- en: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20722](https://github.com/numpy/numpy/pull/20722))
- en: Deterministic output files for F2PY
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: F2PY 的确定性输出文件
- en: For F77 inputs, `f2py` will generate `modname-f2pywrappers.f` unconditionally,
    though these may be empty. For free-form inputs, `modname-f2pywrappers.f`, `modname-f2pywrappers2.f90`
    will both be generated unconditionally, and may be empty. This allows writing
    generic output rules in `cmake` or `meson` and other build systems. Older behavior
    can be restored by passing `--skip-empty-wrappers` to `f2py`. [Using via meson](../f2py/buildtools/meson.html#f2py-meson)
    details usage.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 F77 输入，`f2py` 将无条件生成 `modname-f2pywrappers.f`，尽管这些可能为空。对于自由格式输入，`modname-f2pywrappers.f`，`modname-f2pywrappers2.f90`
    都将无条件生成，并且可能为空。这允许在 `cmake` 或 `meson` 等构建系统中编写通用输出规则。通过向 `f2py` 传递 `--skip-empty-wrappers`
    可恢复旧行为。[通过 meson 使用](../f2py/buildtools/meson.html#f2py-meson) 详细说明用法。
- en: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21187](https://github.com/numpy/numpy/pull/21187))
- en: '`keepdims` parameter for `average`'
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`average` 的 `keepdims` 参数'
- en: The parameter `keepdims` was added to the functions `numpy.average` and `numpy.ma.average`.
    The parameter has the same meaning as it does in reduction functions such as `numpy.sum`
    or `numpy.mean`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `numpy.average` 和 `numpy.ma.average` 添加了参数 `keepdims`。该参数在 `numpy.sum` 或
    `numpy.mean` 等缩减函数中具有相同的含义。
- en: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21485](https://github.com/numpy/numpy/pull/21485))
- en: New parameter `equal_nan` added to `np.unique`
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unique`新增了一个名为`equal_nan`的参数'
- en: '`np.unique` was changed in 1.21 to treat all `NaN` values as equal and return
    a single `NaN`. Setting `equal_nan=False` will restore pre-1.21 behavior to treat
    `NaNs` as unique. Defaults to `True`.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.unique`在1.21中更改为将所有`NaN`值视为相等并返回单个`NaN`。设置`equal_nan=False`将恢复到1.21之前的行为，将`NaN`视为唯一。默认为`True`。'
- en: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21623](https://github.com/numpy/numpy/pull/21623))
- en: Compatibility notes
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D `np.linalg.norm`保留浮点输入类型，即使是标量结果
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当`ord`参数不是明确列出的值之一时，这将提升为`float64`，例如`ord=3`：
- en: '[PRE5]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改仅影响`float32`和`float16`向量，`ord`不是`-Inf`，`0`，`1`，`2`和`Inf`时。
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
- en: Changes to structured (void) dtype promotion and comparisons
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化（void）dtype提升和比较的更改
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，NumPy现在通过提升每个字段的子类型而不是引发异常来定义结构化dtype的正确但略有限制的提升：
- en: '[PRE6]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于匹配字段名称，顺序和标题的提升，但忽略填充。现在，涉及结构化dtype的提升总是确保所有字段的本机字节顺序（这可能会改变`np.concatenate`的结果）并确保结果将是“紧凑的”，即所有字段都按顺序连续排列并删除填充。有关更多详细信息，请参阅[结构比较和提升](../user/basics.rec.html#structured-dtype-comparison-and-promotion)。
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐结构的`repr`现在永远不会打印包括`offsets`和`itemsize`的长格式，除非结构包含`align=True`不能保证的填充。
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述提升逻辑的更改一致，强制转换的安全性已更新：
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"equiv"`强制匹配名称和标题。由于填充的原因，允许项大小不同。'
- en: '`"safe"` allows mismatching field names and titles'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"safe"`允许字段名称和标题不匹配'
- en: The cast safety is limited by the cast safety of each included field.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制转换的安全性受到每个包含字段的强制转换安全性的限制。
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段的顺序用于决定每个单独字段的强制转换安全性。以前，使用字段名称，只有在名称不匹配时才可能发生不安全的强制转换。
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要重要变化是现在认为名称不匹配是“安全”的强制转换。
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NPY_RELAXED_STRIDES_CHECKING`已被移除'
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在不能再使用`NPY_RELAXED_STRIDES_CHECKING=0`进行编译。多年来，放松的步幅一直是默认设置，最初引入该选项是为了实现更平稳的过渡。
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
- en: '`np.loadtxt` has recieved several changes'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`已经接受了几处更改'
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`的行计数已修复。`loadtxt`会忽略文件中完全空行，但会将其计入`max_rows`。当使用`max_rows`并且文件包含空行时，这些行现在不会被计算。以前，可能导致结果包含少于`max_rows`行，即使有更多数据可供读取。如果需要旧的行为，可以使用`itertools.islice`：'
- en: '[PRE7]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常更快且改进了很多，`numpy.loadtxt`现在可能无法将某些字符串转换为以前成功读取的数字。这种情况最重要的情况是：
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将浮点值（如`1.0`）解析为整数现在已被弃用。
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析十六进制浮点数，如`0x3p3`，将失败
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前接受`_`作为千位分隔符`100_000`。现在将导致错误。
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到这些限制，可以通过传递适当的`converters=`来解决所有问题。NumPy现在支持传递单个转换器以用于所有列，使其更加方便。例如，`converters=float.fromhex`可以读取十六进制浮点数，而`converters=int`可以读取`100_000`。
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，错误消息已经得到了改进。但是，这意味着错误类型可能会有所不同。特别是，当解析单个条目失败时，现在总是会引发`ValueError`。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: 1D `np.linalg.norm` preserves float input types, even for scalar results
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1D `np.linalg.norm`保留浮点输入类型，即使是标量结果
- en: 'Previously, this would promote to `float64` when the `ord` argument was not
    one of the explicitly listed values, e.g. `ord=3`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当`ord`参数不是明确列出的值之一时，例如`ord=3`，这将提升为`float64`：
- en: '[PRE8]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This change affects only `float32` and `float16` vectors with `ord` other than
    `-Inf`, `0`, `1`, `2`, and `Inf`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改仅影响具有`ord`不是`-Inf`、`0`、`1`、`2`和`Inf`的`float32`和`float16`向量。
- en: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17709](https://github.com/numpy/numpy/pull/17709))
- en: Changes to structured (void) dtype promotion and comparisons
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化（void）dtype提升和比较的更改
- en: 'In general, NumPy now defines correct, but slightly limited, promotion for
    structured dtypes by promoting the subtypes of each field instead of raising an
    exception:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，NumPy现在通过提升每个字段的子类型而不是引发异常来定义正确但略有限制的结构化dtype的提升：
- en: '[PRE9]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For promotion matching field names, order, and titles are enforced, however
    padding is ignored. Promotion involving structured dtypes now always ensures native
    byte-order for all fields (which may change the result of `np.concatenate`) and
    ensures that the result will be “packed”, i.e. all fields are ordered contiguously
    and padding is removed. See [Structure Comparison and Promotion](../user/basics.rec.html#structured-dtype-comparison-and-promotion)
    for further details.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提升匹配字段名称、顺序和标题是强制的，但会忽略填充。涉及结构化dtype的提升现在始终确保所有字段的本机字节顺序（这可能会改变`np.concatenate`的结果）并确保结果将是“紧凑的”，即所有字段都按顺序连续排列并删除填充。有关更多详细信息，请参阅[结构比较和提升](../user/basics.rec.html#structured-dtype-comparison-and-promotion)。
- en: The `repr` of aligned structures will now never print the long form including
    `offsets` and `itemsize` unless the structure includes padding not guaranteed
    by `align=True`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐结构的`repr`现在永远不会打印包括`offsets`和`itemsize`的长形式，除非结构包含`align=True`未保证的填充。
- en: 'In alignment with the above changes to the promotion logic, the casting safety
    has been updated:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述提升逻辑的变化一致，转换安全性已更新：
- en: '`"equiv"` enforces matching names and titles. The itemsize is allowed to differ
    due to padding.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"equiv"`强制匹配名称和标题。由于填充，允许项大小不同。'
- en: '`"safe"` allows mismatching field names and titles'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"safe"`允许不匹配的字段名称和标题'
- en: The cast safety is limited by the cast safety of each included field.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换的安全性受到每个包含字段的转换安全性的限制。
- en: The order of fields is used to decide cast safety of each individual field.
    Previously, the field names were used and only unsafe casts were possible when
    names mismatched.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段的顺序用于决定每个字段的强制转换安全性。以前，字段名称被用来判断，当名称不匹配时只有不安全的强制转换才可能发生。
- en: The main important change here is that name mismatches are now considered “safe”
    casts.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要重要变化是现在认为名称不匹配是“安全”的强制转换。
- en: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19226](https://github.com/numpy/numpy/pull/19226))
- en: '`NPY_RELAXED_STRIDES_CHECKING` has been removed'
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NPY_RELAXED_STRIDES_CHECKING`已被移除'
- en: NumPy cannot be compiled with `NPY_RELAXED_STRIDES_CHECKING=0` anymore. Relaxed
    strides have been the default for many years and the option was initially introduced
    to allow a smoother transition.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy不再能使用`NPY_RELAXED_STRIDES_CHECKING=0`进行编译。多年来，宽松步幅一直是默认设置，该选项最初是为了实现更平稳的过渡。
- en: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20220](https://github.com/numpy/numpy/pull/20220))
- en: '`np.loadtxt` has recieved several changes'
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`已经进行了几处更改'
- en: 'The row counting of `numpy.loadtxt` was fixed. `loadtxt` ignores fully empty
    lines in the file, but counted them towards `max_rows`. When `max_rows` is used
    and the file contains empty lines, these will now not be counted. Previously,
    it was possible that the result contained fewer than `max_rows` rows even though
    more data was available to be read. If the old behaviour is required, `itertools.islice`
    may be used:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`的行计数已修复。`loadtxt`会忽略文件中完全空白的行，但会将其计入`max_rows`。当使用`max_rows`并且文件包含空白行时，这些行现在将不被计算。以前，可能出现结果包含少于`max_rows`行的情况，即使有更多数据可供读取。如果需要旧的行为，可以使用`itertools.islice`：'
- en: '[PRE10]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'While generally much faster and improved, `numpy.loadtxt` may now fail to converter
    certain strings to numbers that were previously successfully read. The most important
    cases for this are:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常更快且改进了很多，但`numpy.loadtxt`现在可能无法将先前成功读取的某些字符串转换为数字。这些情况中最重要的是：
- en: Parsing floating point values such as `1.0` into integers is now deprecated.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将浮点值（如`1.0`）解析为整数现在已被弃用。
- en: Parsing hexadecimal floats such as `0x3p3` will fail
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析十六进制浮点数，如`0x3p3`，将失败
- en: An `_` was previously accepted as a thousands delimiter `100_000`. This will
    now result in an error.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前接受`_`作为千位分隔符`100_000`。现在将导致错误。
- en: If you experience these limitations, they can all be worked around by passing
    appropriate `converters=`. NumPy now supports passing a single converter to be
    used for all columns to make this more convenient. For example, `converters=float.fromhex`
    can read hexadecimal float numbers and `converters=int` will be able to read `100_000`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到这些限制，可以通过传递适当的`converters=`来解决。NumPy现在支持传递单个转换器以用于所有列，以使这更加方便。例如，`converters=float.fromhex`可以读取十六进制浮点数，而`converters=int`将能够读取`100_000`。
- en: Further, the error messages have been generally improved. However, this means
    that error types may differ. In particularly, a `ValueError` is now always raised
    when parsing of a single entry fails.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，错误消息已经得到了一般性的改进。然而，这意味着错误类型可能会有所不同。特别是，当解析单个条目失败时，现在总是会引发`ValueError`。
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Improvements
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`ndarray.__array_finalize__` is now callable'
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray.__array_finalize__`现在可调用'
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着子类现在可以使用`super().__array_finalize__(obj)`而不必担心`ndarray`是否是它们的超类。实际调用仍然是一个空操作。
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
- en: Add support for VSX4/Power10
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加对VSX4/Power10的支持
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用VSX4/Power10，Power ISA 3.1中可用的新指令可以用于加速一些NumPy操作，例如，floor_divide，modulo等。
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
- en: '`np.fromiter` now accepts objects and subarrays'
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromiter`现在接受对象和子数组'
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromiter`函数现在支持对象和子数组数据类型。请参阅函数文档以获取示例。'
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
- en: Math C library feature detection now uses correct signatures
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学C库特性检测现在使用正确的签名
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 编译之前会进行检测阶段，以确定底层的libc是否支持某些数学运算。之前的代码没有遵守正确的签名。修复这个问题可以使得`wasm-ld`后端（用于Web汇编编译）可以进行编译，并减少警告数量。
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
- en: '`np.kron` now maintains subclass information'
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.kron`现在保留子类信息'
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron`现在在计算输入的Kronecker积时保留子类信息，比如掩码数组'
- en: '[PRE11]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Warning
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron`输出现在遵循`ufunc`排序（`multiply`）以确定输出类别类型'
- en: '[PRE12]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
- en: '`ndarray.__array_finalize__` is now callable'
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray.__array_finalize__`现在是可调用的'
- en: This means subclasses can now use `super().__array_finalize__(obj)` without
    worrying whether `ndarray` is their superclass or not. The actual call remains
    a no-op.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着子类现在可以使用`super().__array_finalize__(obj)`而不必担心`ndarray`是否是它们的超类。实际调用仍然是一个空操作。
- en: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20766](https://github.com/numpy/numpy/pull/20766))
- en: Add support for VSX4/Power10
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加对VSX4/Power10的支持
- en: With VSX4/Power10 enablement, the new instructions available in Power ISA 3.1
    can be used to accelerate some NumPy operations, e.g., floor_divide, modulo, etc.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 通过VSX4/Power10启用，Power ISA 3.1中可用的新指令可以用于加速一些NumPy操作，例如，floor_divide，modulo等。
- en: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20821](https://github.com/numpy/numpy/pull/20821))
- en: '`np.fromiter` now accepts objects and subarrays'
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.fromiter`现在接受对象和子数组'
- en: The `numpy.fromiter` function now supports object and subarray dtypes. Please
    see he function documentation for examples.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromiter`函数现在支持对象和子数组数据类型。请查看函数文档以获取示例。'
- en: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20993](https://github.com/numpy/numpy/pull/20993))
- en: Math C library feature detection now uses correct signatures
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数学C库特性检测现在使用正确的签名
- en: Compiling is preceded by a detection phase to determine whether the underlying
    libc supports certain math operations. Previously this code did not respect the
    proper signatures. Fixing this enables compilation for the `wasm-ld` backend (compilation
    for web assembly) and reduces the number of warnings.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 编译之前会进行检测阶段，以确定底层的libc是否支持某些数学运算。之前的代码没有遵守正确的签名。修复这个问题可以使得`wasm-ld`后端（用于Web汇编编译）可以进行编译，并减少警告数量。
- en: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21154](https://github.com/numpy/numpy/pull/21154))
- en: '`np.kron` now maintains subclass information'
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.kron`现在保留子类信息'
- en: '`np.kron` maintains subclass information now such as masked arrays while computing
    the Kronecker product of the inputs'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron`现在在计算输入的Kronecker积时保留子类信息，比如掩码数组'
- en: '[PRE13]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`np.kron` output now follows `ufunc` ordering (`multiply`) to determine the
    output class type'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.kron`输出现在遵循`ufunc`排序（`multiply`）以确定输出类别类型'
- en: '[PRE14]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21262](https://github.com/numpy/numpy/pull/21262))
- en: Performance improvements and changes
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进和变更
- en: Faster `np.loadtxt`
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.loadtxt`
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`现在通常比以前快得多，因为现在大部分是用C实现的。'
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Faster reduction operators
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的减少运算符
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于连续的基于整数的数组，减少运算如`numpy.sum`，`numpy.prod`，`numpy.add.reduce`，`numpy.logical_and.reduce`现在快得多。
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
- en: Faster `np.where`
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.where`
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.where`现在在不可预测/随机输入数据上比以前快得多。'
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
- en: Faster operations on NumPy scalars
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy标量的操作更快了
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 许多对NumPy标量的操作现在显着更快，尽管在某些情况下，一些罕见的操作（例如使用0-D数组而不是标量）可能会更慢。然而，即使有了这些改进，希望为其标量获得最佳性能的用户，可能希望使用`scalar.item()`将已知的NumPy标量转换为Python标量。
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
- en: Faster `np.kron`
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.kron`
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.kron`现在快了约80%，因为产品现在是使用广播计算的。'
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
- en: Faster `np.loadtxt`
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.loadtxt`
- en: '`numpy.loadtxt` is now generally much faster than previously as most of it
    is now implemented in C.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt`现在通常比以前快得多，因为现在大部分都是用C实现的。'
- en: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20580](https://github.com/numpy/numpy/pull/20580))
- en: Faster reduction operators
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的缩减运算符
- en: Reduction operations like `numpy.sum`, `numpy.prod`, `numpy.add.reduce`, `numpy.logical_and.reduce`
    on contiguous integer-based arrays are now much faster.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对连续整数数组的缩减操作，如`numpy.sum`、`numpy.prod`、`numpy.add.reduce`、`numpy.logical_and.reduce`，现在快得多。
- en: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21001](https://github.com/numpy/numpy/pull/21001))
- en: Faster `np.where`
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.where`
- en: '`numpy.where` is now much faster than previously on unpredictable/random input
    data.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在不可预测/随机输入数据上，`numpy.where`现在比以前快得多。
- en: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21130](https://github.com/numpy/numpy/pull/21130))
- en: Faster operations on NumPy scalars
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的NumPy标量操作
- en: Many operations on NumPy scalars are now significantly faster, although rare
    operations (e.g. with 0-D arrays rather than scalars) may be slower in some cases.
    However, even with these improvements users who want the best performance for
    their scalars, may want to convert a known NumPy scalar into a Python one using
    `scalar.item()`.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 许多对NumPy标量的操作现在显着更快，尽管在某些情况下，一些罕见的操作（例如使用0-D数组而不是标量）可能会更慢。然而，即使有了这些改进，希望为其标量获得最佳性能的用户，可能希望使用`scalar.item()`将已知的NumPy标量转换为Python标量。
- en: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21188](https://github.com/numpy/numpy/pull/21188))
- en: Faster `np.kron`
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的`np.kron`
- en: '`numpy.kron` is about 80% faster as the product is now computed using broadcasting.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.kron`现在快了约80%，因为产品现在是使用广播计算的。'
- en: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21354](https://github.com/numpy/numpy/pull/21354))
