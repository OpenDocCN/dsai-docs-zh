- en: Assume
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设
- en: 原文：[https://docs.sympy.org/latest/modules/assumptions/assume.html](https://docs.sympy.org/latest/modules/assumptions/assume.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/assumptions/assume.html](https://docs.sympy.org/latest/modules/assumptions/assume.html)
- en: A module which implements predicates and assumption context.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 实现谓词和假设上下文的模块。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The class of expressions resulting from applying `Predicate` to the arguments.
    `AppliedPredicate` merely wraps its argument and remain unevaluated. To evaluate
    it, use the `ask()` function.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`Predicate`应用于参数的表达式类。`AppliedPredicate`仅仅包装其参数并保持未评估状态。要评估它，请使用`ask()`函数。
- en: Examples
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `function` attribute returns the predicate, and the `arguments` attribute
    returns the tuple of arguments.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`function`属性返回谓词，`arguments`属性返回参数元组。'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Applied predicates can be evaluated to a boolean value with `ask`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用谓词可以用`ask`来评估为布尔值：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Return the expression used by this assumption.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此假设使用的表达式。
- en: Examples
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Return the arguments which are applied to the predicate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用于谓词的参数。
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Return the predicate.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回谓词。
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Set containing default assumptions which are applied to the `ask()` function.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 设置包含应用于`ask()`函数的默认假设的集合。
- en: Explanation
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This is used to represent global assumptions, but you can also use this class
    to create your own local assumptions contexts. It is basically a thin wrapper
    to Python’s set, so see its documentation for advanced usage.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于表示全局假设，但您也可以使用此类创建自己的局部假设上下文。基本上它是Python集合的薄包装，因此请参阅其文档以获取高级用法。
- en: Examples
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The default assumption context is `global_assumptions`, which is initially
    empty:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的假设上下文是`global_assumptions`，最初是空的：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can add default assumptions:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以添加默认的假设：
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And remove them:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 并移除它们：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `clear()` method removes every assumption:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear()`方法移除每一个假设：'
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`assuming`](#sympy.assumptions.assume.assuming "sympy.assumptions.assume.assuming")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`assuming`](#sympy.assumptions.assume.assuming "sympy.assumptions.assume.assuming")'
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add assumptions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 添加假设。
- en: '[PRE14]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Base class for mathematical predicates. It also serves as a constructor for
    undefined predicate objects.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数学谓词的基类。它还用作未定义谓词对象的构造函数。
- en: Explanation
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Predicate is a function that returns a boolean value [1].
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词是返回布尔值的函数 [1]。
- en: Predicate function is object, and it is instance of predicate class. When a
    predicate is applied to arguments, `AppliedPredicate` instance is returned. This
    merely wraps the argument and remain unevaluated. To obtain the truth value of
    applied predicate, use the function `ask`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词函数是对象，是谓词类的实例。当谓词应用于参数时，返回`AppliedPredicate`实例。这仅仅是包装了参数并保持未评估状态。要获取应用谓词的真值，请使用函数`ask`。
- en: Evaluation of predicate is done by multiple dispatching. You can register new
    handler to the predicate to support new types.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词的评估是通过多重分派完成的。您可以注册新的处理程序到谓词以支持新类型。
- en: Every predicate in SymPy can be accessed via the property of `Q`. For example,
    `Q.even` returns the predicate which checks if the argument is even number.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy中的每个谓词都可以通过`Q`的属性访问。例如，`Q.even`返回检查参数是否为偶数的谓词。
- en: To define a predicate which can be evaluated, you must subclass this class,
    make an instance of it, and register it to `Q`. After then, dispatch the handler
    by argument types.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个可以评估的谓词，您必须子类化此类，并对其进行实例化，并将其注册到`Q`。然后，按参数类型分派处理程序。
- en: If you directly construct predicate using this class, you will get `UndefinedPredicate`
    which cannot be dispatched. This is useful when you are building boolean expressions
    which do not need to be evaluated.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果直接使用此类构造谓词，您将得到不能分派的`UndefinedPredicate`。当您构建不需要评估的布尔表达式时，这是有用的。
- en: Examples
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Applying and evaluating to boolean value:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用和评估为布尔值：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can define a new predicate by subclassing and dispatching. Here, we define
    a predicate for sexy primes [2] as an example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过子类化和分派来定义新的谓词。在这里，我们定义一个性感素数 [2] 作为示例。
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Direct constructing returns `UndefinedPredicate`, which can be applied but cannot
    be dispatched.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 直接构造返回`UndefinedPredicate`，可以应用但不能分派。
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: References
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[[R5](#id1)]'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R5](#id1)]'
- en: '[https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29](https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29](https://en.wikipedia.org/wiki/Predicate_%28mathematical_logic%29)'
- en: '[[R6](#id2)]'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R6](#id2)]'
- en: '[https://en.wikipedia.org/wiki/Sexy_prime](https://en.wikipedia.org/wiki/Sexy_prime)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Sexy_prime](https://en.wikipedia.org/wiki/Sexy_prime)'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Evaluate `self(*args)` under the given assumptions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定假设条件下评估`self(*args)`。
- en: This uses only direct resolution methods, not logical inference.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这只使用直接解析方法，而不是逻辑推理。
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Register the signature to the handler.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将签名注册到处理程序。
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Register multiple signatures to same handler.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个签名注册到同一处理程序。
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Predicate without handler.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 谓词无处理程序。
- en: Explanation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: This predicate is generated by using `Predicate` directly for construction.
    It does not have a handler, and evaluating this with arguments is done by SAT
    solver.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此谓词是通过直接使用`Predicate`进行构造生成的。它没有处理程序，通过SAT求解器对其进行参数评估。
- en: Examples
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Context manager for assumptions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设的上下文管理器。
- en: Examples
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
