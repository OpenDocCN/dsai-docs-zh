- en: Solve One or a System of Equations Numerically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/guides/solving/solve-numerically.html](https://docs.sympy.org/latest/guides/solving/solve-numerically.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use SymPy to numerically solve a system of one or more equations. For example,
    numerically solving \(\cos(x) = x \) returns \( x \approx 0.739085133215161\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Solving numerically is useful if:'
  prefs: []
  type: TYPE_NORMAL
- en: You only need a numeric solution, not a symbolic one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A closed-form solution is not available or is overly complicated; refer to [When
    You Might Prefer a Numeric Solution](solving-guidance.html#when-you-might-prefer-a-numeric-solution)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") and [`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset") will not try to find a numeric solution, only
    a mathematically-exact symbolic solution. So if you want a numeric solution, use
    [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve "sympy.solvers.solvers.nsolve").'
  prefs: []
  type: TYPE_NORMAL
- en: 'SymPy is designed for symbolic mathematics. If you do not need to do symbolic
    operations, then for numerical operations you can use another free and open-source
    package such as NumPy or SciPy which will be faster, work with arrays, and have
    more algorithms implemented. The main reasons to use SymPy (or its dependency
    [mpmath](https://mpmath.org/)) for numerical calculations are:'
  prefs: []
  type: TYPE_NORMAL
- en: to do a simple numerical calculation within the context of a symbolic calculation
    using SymPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if you need the arbitrary precision capabilities to get more digits of precision
    than you would get from float64.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatives to Consider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SciPy’s [`scipy.optimize.fsolve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve
    "(in SciPy v1.13.1)") can solve a system of (non-linear) equations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy’s [`numpy.linalg.solve()`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve
    "(in NumPy v1.26)") can solve a system of linear scalar equations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mpmath’s [`findroot()`](https://mpmath.org/doc/current/calculus/optimization.html#mpmath.findroot
    "(in mpmath v1.3.0)"), which [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") calls and can pass parameters to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of Numerically Solving an Equation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an example of numerically solving one equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Guidance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overdetermined systems of equations are supported.
  prefs: []
  type: TYPE_NORMAL
- en: Find Complex Roots of a Real Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To solve for complex roots of real functions, specify a nonreal (either purely
    imaginary, or complex) initial point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Ensure the Root Found is in a Given Interval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is not guaranteed that [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") will find the root closest to the initial point.
    Here, even though the root `-1` is closer to the initial point of `-0.1`, [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") finds the root `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can ensure the root found is in a given interval, if such a root exists,
    using `solver=''bisect''` by specifying the interval in a tuple. Here, specifying
    the interval `(-10, 0)` ensures that the root `-1` is found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Solve a System of Equations Numerically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To solve a system of multidimensional functions, supply a tuple of
  prefs: []
  type: TYPE_NORMAL
- en: functions `(f1, f2)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variables to solve for `(x1, x2)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: starting values `(-1, 1)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Increase Precision of the Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can increase the precision of the solution using `prec`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create a Function That Can Be Solved With SciPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As noted above, SymPy focuses on symbolic computation and is not optimized
    for numerical calculations. If you need to make many calls to a numerical solver,
    it can be much faster to use a solver optimized for numerical calculations such
    as SciPy’s [`root_scalar()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "(in SciPy v1.13.1)"). A recommended workflow is:'
  prefs: []
  type: TYPE_NORMAL
- en: use SymPy to generate (by symbolically simplifying or solving an equation) the
    mathematical expression
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: convert it to a lambda function using [`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify")
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: use a numerical library such as SciPy to generate numerical solutions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Use the Solution Result
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Substitute the Result Into an Expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best practice is to use [`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf") to substitute numerical values into expressions. The following
    code demonstrates that the numerical value is not an exact root because substituting
    it back into the expression produces a result slightly different from zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`subs`](../../modules/core.html#sympy.core.basic.Basic.subs "sympy.core.basic.Basic.subs")
    can give an incorrect result due to precision errors, here effectively rounding
    `-5.12757857962640e-17` to zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When substituting in values, you can also leave some symbols as variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Not all Equations Can be Solved
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") is a numerical solving function, so it can often
    provide a solution for equations which cannot be solved algebraically.'
  prefs: []
  type: TYPE_NORMAL
- en: Equations With no Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some equations have no solution, in which case SymPy may return an error. For
    example, the equation \(e^x = 0\) (`exp(x)` in SymPy) has no solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Report a Bug
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you find a bug with [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve"), please post the problem on the [SymPy mailing
    list](https://groups.google.com/g/sympy). Until the issue is resolved, you can
    use a different method listed in [Alternatives to Consider](#alternatives-to-consider).
  prefs: []
  type: TYPE_NORMAL
