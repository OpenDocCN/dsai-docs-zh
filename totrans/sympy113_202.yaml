- en: Curve (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/biomechanics/api/curve.html](https://docs.sympy.org/latest/modules/physics/biomechanics/api/curve.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implementations of characteristic curves for musculotendon models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Simple data container to group together related characteristic curves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Base class for all musculotendon characteristic curve functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Active muscle fiber force-length curve based on De Groote et al., 2016 [[R721]](#r721).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(fl_{\text{act}}^M = c_0 \exp\left(-\frac{1}{2}\left(\frac{\tilde{l}^M - c_1}{c_2
    + c_3 \tilde{l}^M}\right)^2\right) + c_4 \exp\left(-\frac{1}{2}\left(\frac{\tilde{l}^M
    - c_5}{c_6 + c_7 \tilde{l}^M}\right)^2\right) + c_8 \exp\left(-\frac{1}{2}\left(\frac{\tilde{l}^M
    - c_9}{c_{10} + c_{11} \tilde{l}^M}\right)^2\right)\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c0 = 0.814\), \(c1 = 1.06\), \(c2 = 0.162\), \(c3
    = 0.0633\), \(c4 = 0.433\), \(c5 = 0.717\), \(c6 = -0.0299\), \(c7 = 0.2\), \(c8
    = 0.1\), \(c9 = 1.0\), \(c10 = 0.354\), and \(c11 = 0.0\).
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces a active fiber force of 1 at a
    normalized fiber length of 1, and an active fiber force of 0 at normalized fiber
    lengths of 0 and 2.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`FiberForceLengthActiveDeGroote2016`](#sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016
    "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016") is using
    the [`with_defaults()`](#sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    muscle fiber length. We’ll create a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol") called `l_M_tilde` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the two constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You don’t just have to use symbols as the arguments, it’s also possible to use
    expressions. Let’s create a new pair of symbols, `l_M` and `l_M_opt`, representing
    muscle fiber length and optimal muscle fiber length respectively. We can then
    represent `l_M_tilde` as an expression, the ratio of these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.doit
    "sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016.doit") method
    on an instance. We’ll use the keyword argument `evaluate=False` as this will keep
    the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    l_M using the `diff` method on an instance with the single positional argument
    `l_M`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R721] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `l_M_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l_M_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `0.814`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `1.06`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c2** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The third constant in the characteristic equation. The published value is `0.162`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c3** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth constant in the characteristic equation. The published value is `0.0633`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c4** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fifth constant in the characteristic equation. The published value is `0.433`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c5** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The sixth constant in the characteristic equation. The published value is `0.717`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c6** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The seventh constant in the characteristic equation. The published value is
    `-0.0299`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c7** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The eighth constant in the characteristic equation. The published value is `0.2`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c8** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The ninth constant in the characteristic equation. The published value is `0.1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c9** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The tenth constant in the characteristic equation. The published value is `1.0`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c10** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The eleventh constant in the characteristic equation. The published value is
    `0.354`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c11** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The tweflth constant in the characteristic equation. The published value is
    `0.0`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fl_M_act** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized passive muscle fiber force as a function of muscle fiber length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the inverse muscle fiber act force-length function
    using the four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c0 = 0.814\) \(c1 = 1.06\) \(c2 = 0.162\) \(c3 = 0.0633\) \(c4 = 0.433\) \(c5
    = 0.717\) \(c6 = -0.0299\) \(c7 = 0.2\) \(c8 = 0.1\) \(c9 = 1.0\) \(c10 = 0.354\)
    \(c11 = 0.0\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Passive muscle fiber force-length curve based on De Groote et al., 2016 [[R722]](#r722).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(fl^M_{pas} = \frac{\frac{\exp{c_1 \left(\tilde{l^M} - 1\right)}}{c_0} - 1}{\exp{c_1}
    - 1}\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = 0.6\) and \(c_1 = 4.0\).
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces a passive fiber force very close
    to 0 for all normalized fiber lengths between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`FiberForceLengthPassiveDeGroote2016`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016") is using
    the [`with_defaults()`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    muscle fiber length. We’ll create a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol") called `l_M_tilde` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the two constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You don’t just have to use symbols as the arguments, it’s also possible to use
    expressions. Let’s create a new pair of symbols, `l_M` and `l_M_opt`, representing
    muscle fiber length and optimal muscle fiber length respectively. We can then
    represent `l_M_tilde` as an expression, the ratio of these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.doit
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016.doit") method
    on an instance. We’ll use the keyword argument `evaluate=False` as this will keep
    the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    l_M using the `diff` method on an instance with the single positional argument
    `l_M`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R722] ([1](#id3),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `l_T_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l_M_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `0.6`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `4.0`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l_M_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the muscle fiber passive force-length function using
    the four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = 0.6\) \(c_1 = 4.0\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Inverse passive muscle fiber force-length curve based on De Groote et al., 2016
    [[R723]](#r723).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Gives the normalized muscle fiber length that produces a specific normalized
    passive muscle fiber force.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \({fl^M_{pas}}^{-1} = \frac{c_0 \log{\left(\exp{c_1} - 1\right)fl^M_pas + 1}}{c_1}
    + 1\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = 0.6\) and \(c_1 = 4.0\). This function is the
    exact analytical inverse of the related tendon force-length curve `FiberForceLengthPassiveDeGroote2016`.
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces a passive fiber force very close
    to 0 for all normalized fiber lengths between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`FiberForceLengthPassiveInverseDeGroote2016`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016")
    is using the [`with_defaults()`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to the normalized
    passive muscle fiber length-force component of the muscle fiber force. We’ll create
    a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")
    called `fl_M_pas` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the two constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.doit
    "sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016.doit")
    method on an instance. We’ll use the keyword argument `evaluate=False` as this
    will keep the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    fl_M_pas using the `diff` method on an instance with the single positional argument
    `fl_M_pas`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R723] ([1](#id5),[2](#id6))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `l_T_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fl_M_pas** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized passive muscle fiber force.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `0.6`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `4.0`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fl_M_pas** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized passive muscle fiber force as a function of muscle fiber length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the inverse muscle fiber passive force-length function
    using the four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = 0.6\) \(c_1 = 4.0\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Muscle fiber force-velocity curve based on De Groote et al., 2016 [[R724]](#r724).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Gives the normalized muscle fiber force produced as a function of normalized
    tendon velocity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(fv^M = c_0 \log{\left(c_1 \tilde{v}_m + c_2\right) + \sqrt{\left(c_1 \tilde{v}_m
    + c_2\right)^2 + 1}} + c_3\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = -0.318\), \(c_1 = -8.149\), \(c_2 = -0.374\),
    and \(c_3 = 0.886\).
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces a normalized muscle fiber force
    of 1 when the muscle fibers are contracting isometrically (they have an extension
    rate of 0).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`FiberForceVelocityDeGroote2016`](#sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016
    "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016") is using the
    [`with_defaults()`](#sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    muscle fiber extension velocity. We’ll create a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol") called `v_M_tilde` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the four constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You don’t just have to use symbols as the arguments, it’s also possible to use
    expressions. Let’s create a new pair of symbols, `v_M` and `v_M_max`, representing
    muscle fiber extension velocity and maximum muscle fiber extension velocity respectively.
    We can then represent `v_M_tilde` as an expression, the ratio of these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.doit
    "sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016.doit") method
    on an instance. We’ll use the keyword argument `evaluate=False` as this will keep
    the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    v_M using the `diff` method on an instance with the single positional argument
    `v_M`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R724] ([1](#id7),[2](#id8))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `v_M_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v_M_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber extension velocity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `-0.318`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `-8.149`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c2** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The third constant in the characteristic equation. The published value is `-0.374`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c3** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth constant in the characteristic equation. The published value is `0.886`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**v_M_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber extension velocity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the muscle fiber force-velocity function using the
    four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = -0.318\) \(c_1 = -8.149\) \(c_2 = -0.374\) \(c_3 = 0.886\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Inverse muscle fiber force-velocity curve based on De Groote et al., 2016 [[R725]](#r725).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Gives the normalized muscle fiber velocity that produces a specific normalized
    muscle fiber force.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \({fv^M}^{-1} = \frac{\sinh{\frac{fv^M - c_3}{c_0}} - c_2}{c_1}\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = -0.318\), \(c_1 = -8.149\), \(c_2 = -0.374\),
    and \(c_3 = 0.886\). This function is the exact analytical inverse of the related
    muscle fiber force-velocity curve `FiberForceVelocityDeGroote2016`.
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces a normalized muscle fiber force
    of 1 when the muscle fibers are contracting isometrically (they have an extension
    rate of 0).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`FiberForceVelocityInverseDeGroote2016`](#sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016
    "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016") is using
    the [`with_defaults()`](#sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    muscle fiber force-velocity component of the muscle fiber force. We’ll create
    a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol")
    called `fv_M` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the four constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.doit
    "sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016.doit")
    method on an instance. We’ll use the keyword argument `evaluate=False` as this
    will keep the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    fv_M using the `diff` method on an instance with the single positional argument
    `fv_M`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R725] ([1](#id9),[2](#id10))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `fv_M` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fv_M** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber force as a function of muscle fiber extension velocity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `-0.318`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `-8.149`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c2** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The third constant in the characteristic equation. The published value is `-0.374`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c3** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth constant in the characteristic equation. The published value is `0.886`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fv_M** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized muscle fiber extension velocity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the inverse muscle fiber force-velocity function using
    the four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = -0.318\) \(c_1 = -8.149\) \(c_2 = -0.374\) \(c_3 = 0.886\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Tendon force-length curve based on De Groote et al., 2016 [[R726]](#r726).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Gives the normalized tendon force produced as a function of normalized tendon
    length.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \(fl^T = c_0 \exp{c_3 \left( \tilde{l}^T - c_1 \right)} - c_2\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = 0.2\), \(c_1 = 0.995\), \(c_2 = 0.25\), and
    \(c_3 = 33.93669377311689\).
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces no force when the tendon is in
    an unstrained state. It also produces a force of 1 normalized unit when the tendon
    is under a 5% strain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`TendonForceLengthDeGroote2016`](#sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016
    "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016") is using the
    [`with_defaults()`](#sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    tendon length. We’ll create a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol") called `l_T_tilde` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the four constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You don’t just have to use symbols as the arguments, it’s also possible to use
    expressions. Let’s create a new pair of symbols, `l_T` and `l_T_slack`, representing
    tendon length and tendon slack length respectively. We can then represent `l_T_tilde`
    as an expression, the ratio of these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.doit
    "sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016.doit") method
    on an instance. We’ll use the keyword argument `evaluate=False` as this will keep
    the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    l_T using the `diff` method on an instance with the single positional argument
    `l_T`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R726] ([1](#id11),[2](#id12))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `l_T_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l_T_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized tendon length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `0.2`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `0.995`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c2** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The third constant in the characteristic equation. The published value is `0.25`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c3** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth constant in the characteristic equation. The published value is `33.93669377311689`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**l_T_tilde** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized tendon length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the tendon force-length function using the four constant
    values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = 0.2\) \(c_1 = 0.995\) \(c_2 = 0.25\) \(c_3 = 33.93669377311689\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Inverse tendon force-length curve based on De Groote et al., 2016 [[R727]](#r727).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Gives the normalized tendon length that produces a specific normalized tendon
    force.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined by the equation:'
  prefs: []
  type: TYPE_NORMAL
- en: \({fl^T}^{-1} = frac{\log{\frac{fl^T + c_2}{c_0}}}{c_3} + c_1\)
  prefs: []
  type: TYPE_NORMAL
- en: with constant values of \(c_0 = 0.2\), \(c_1 = 0.995\), \(c_2 = 0.25\), and
    \(c_3 = 33.93669377311689\). This function is the exact analytical inverse of
    the related tendon force-length curve `TendonForceLengthDeGroote2016`.
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to change the constant values, these were carefully selected
    in the original publication to give the characteristic curve specific and required
    properties. For example, the function produces no force when the tendon is in
    an unstrained state. It also produces a force of 1 normalized unit when the tendon
    is under a 5% strain.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The preferred way to instantiate [`TendonForceLengthInverseDeGroote2016`](#sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016
    "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016") is using
    the [`with_defaults()`](#sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.with_defaults
    "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.with_defaults")
    constructor because this will automatically populate the constants within the
    characteristic curve equation with the floating point values from the original
    publication. This constructor takes a single argument corresponding to normalized
    tendon force-length, which is equal to the tendon force. We’ll create a [`Symbol`](../../../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol") called `fl_T` to represent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to populate the four constants with your own values too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: To inspect the actual symbolic expression that this function represents, we
    can call the [`doit()`](#sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.doit
    "sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016.doit")
    method on an instance. We’ll use the keyword argument `evaluate=False` as this
    will keep the expression in its canonical form and won’t simplify any constants.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The function can also be differentiated. We’ll differentiate with respect to
    l_T using the `diff` method on an instance with the single positional argument
    `l_T`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R727] ([1](#id13),[2](#id14))'
  prefs: []
  type: TYPE_NORMAL
- en: De Groote, F., Kinney, A. L., Rao, A. V., & Fregly, B. J., Evaluation of direct
    collocation optimal control problem formulations for solving the muscle redundancy
    problem, Annals of biomedical engineering, 44(10), (2016) pp. 2922-2936
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the expression defining the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**deep** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether `doit` should be recursively called. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool.'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the SymPy expression should be evaluated as it is constructed. If `False`,
    then no constant folding will be conducted which will leave the expression in
    a more numerically- stable for values of `l_T_tilde` that correspond to a sensible
    operating range for a musculotendon. Default is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '****kwargs** : dict[str, Any]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keyword argument pairs to be recursively passed to `doit`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Evaluation of basic inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fl_T** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized tendon force as a function of tendon length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c0** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The first constant in the characteristic equation. The published value is `0.2`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c1** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The second constant in the characteristic equation. The published value is `0.995`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c2** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The third constant in the characteristic equation. The published value is `0.25`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**c3** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth constant in the characteristic equation. The published value is `33.93669377311689`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Derivative of the function with respect to a single argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The index of the function’s arguments with respect to which the derivative should
    be taken. Argument indexes start at `1`. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Inverse function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**argindex** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Value to start indexing the arguments at. Default is `1`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Recommended constructor that will use the published constants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fl_T** : Any (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: Normalized tendon force as a function of tendon length.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new instance of the inverse tendon force-length function using the
    four constant values specified in the original publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'These have the values:'
  prefs: []
  type: TYPE_NORMAL
- en: \(c_0 = 0.2\) \(c_1 = 0.995\) \(c_2 = 0.25\) \(c_3 = 33.93669377311689\)
  prefs: []
  type: TYPE_NORMAL
