- en: Docstrings Style Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/contributing/docstring.html](https://docs.sympy.org/latest/contributing/docstring.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## General Guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: To contribute to SymPy’s docstrings, please read these guidelines in full.
  prefs: []
  type: TYPE_NORMAL
- en: A documentation string (docstring) is a string literal that occurs as the first
    statement in a module, function, class, or method definition. Such a docstring
    becomes the `__doc__` special attribute of that object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a basic docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Every public function, class, method, and module should have a docstring that
    describes what it does. Documentation that is specific to a function or class
    in the module should be in the docstring of that function or class. The module
    level docstring should discuss the purpose and scope of the module, and give a
    high-level example of how to use the functions or classes in the module. A module
    docstring is the docstring at the very top of the file, for example, the docstring
    for [solvers.ode](https://github.com/sympy/sympy/blob/85e684f782c71d247b13af71f2f134a9d894507e/sympy/solvers/ode.py).
  prefs: []
  type: TYPE_NORMAL
- en: A public function is one that is intended to be used by the end-user, or the
    public. Documentation is important for public functions because they will be seen
    and used by many people.
  prefs: []
  type: TYPE_NORMAL
- en: A private function, on the other hand, is one that is only intended to be used
    in the code in SymPy itself. Although it is less important to document private
    functions, it also helps to have docstrings on private functions to help other
    SymPy developers understand how to use the function.
  prefs: []
  type: TYPE_NORMAL
- en: It may not always be clear what is a public function and what is a private function.
    If a function begins with an underscore, it is private, and if a function is included
    in `__init__.py` it is public, but the converse is not always true, so sometimes
    you have to decide based on context. In general, if you are unsure, having documentation
    on a function is better than not having documentation, regardless if it is public
    or private.
  prefs: []
  type: TYPE_NORMAL
- en: Docstrings should contain information aimed at users of the function. Comments
    specific to the code or other notes that would only distract users should go in
    comments in the code, not in docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: Every docstring should have examples that show how the function works. Examples
    are the most important part of a docstring. A single example showing input and
    output to a function can be more helpful than a paragraph of descriptive text.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the primary consumers of docstrings are other human beings, not
    machines, so it is important to describe what the function does in plain English.
    Likewise, examples of how to use the function should be designed for human readers,
    not just for the doctest machinery.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that while Sphinx is the primary way users consume docstrings,
    and therefore the first platform to keep in mind while writing docstrings (especially
    for public functions), it is not the only way users consume docstrings. You can
    also view docstrings using `help()` or `?` in IPython. When using `help()`, for
    instance, it will show you all of the docstrings on private methods. Additionally,
    anyone reading the source code directly will see every docstring.
  prefs: []
  type: TYPE_NORMAL
- en: All public functions, classes, and methods and their corresponding docstrings
    should be imported into the Sphinx docs, instructions on which can be found at
    the end of this guide.
  prefs: []
  type: TYPE_NORMAL
- en: '## Formatting'
  prefs: []
  type: TYPE_NORMAL
- en: Docstrings are are written in [reStructuredText](https://docutils.sourceforge.io/rst.html)
    format extended by [Sphinx](https://www.sphinx-doc.org/en/master/). Here is a
    concise guide to [Quick reStructuredText](https://docutils.sourceforge.io/docs/user/rst/quickref.html).
    More in-depth information about using reStructuredText can be found in the [Sphinx
    Documentation](https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for Sphinx to render docstrings nicely in the HTML documentation,
    some formatting guidelines should be followed when writing docstrings:'
  prefs: []
  type: TYPE_NORMAL
- en: Always use “””triple double quotes””” around docstrings. Use r”””raw triple
    double quotes””” if you use any backslashes in your docstrings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a blank line before the docstring’s closing quotes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines should not be longer than 80 characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always write class-level docstrings under the class definition line, as that
    is better to read in the source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The various methods on the class can be mentioned in the docstring or examples
    if they are important, but details on them should go in the docstring for the
    method itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be aware that :: creates code blocks, which are rarely used in the docstrings.
    Any code example with example Python should be put in a doctest. Always check
    that the final version as rendered by Sphinx looks correct in the HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to make section underlining work nicely in docstrings, [numpydoc Sphinx
    extension](https://pypi.org/project/numpydoc/) is used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Always double check that you have formatted your docstring correctly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that your docstring is imported into Sphinx.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the Sphinx docs (`cd doc; make html`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that Sphinx doesn’t output any errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the page in `_build/html` and make sure that it is formatted correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In SymPy’s docstrings, it is preferred that function, class, and method docstrings
    consist of the following sections in this order:'
  prefs: []
  type: TYPE_NORMAL
- en: Single-Sentence Summary
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explanation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See Also
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Single-Sentence Summary and Examples sections are **required** for every
    docstring. Docstrings will not pass review if these sections are not included.
  prefs: []
  type: TYPE_NORMAL
- en: Do not change the names of these supported sections, for example, the heading
    “Examples” as a plural should be used even if there is only one example.
  prefs: []
  type: TYPE_NORMAL
- en: SymPy will continue to support all of the section headings listed in the [NumPy
    Docstring Guide](https://numpydoc.readthedocs.io/en/latest/format.html).
  prefs: []
  type: TYPE_NORMAL
- en: Headings should be underlined with the same length in equals signs.
  prefs: []
  type: TYPE_NORMAL
- en: If a section is not required and that information for the function in question
    is unnecessary, do not use it. Unnecessary sections and cluttered docstrings can
    make a function harder to understand. Aim for the minimal amount of information
    required to understand the function.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Single-Sentence Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section is **required** for every docstring. A docstring will not pass
    review if it is not included. No heading is necessary for this section.
  prefs: []
  type: TYPE_NORMAL
- en: This section consists of a one-line sentence ending in a period that describes
    the function, class, or method’s effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecation warnings should go directly after the Single-Sentence Summary,
    so as to notify users right away. Deprecation warnings should be written as a
    `deprecated` in the Sphinx directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See [Documenting a deprecation](deprecations.html#deprecation-documentation)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Explanation Section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section is encouraged. If you choose to include an Explanation section
    in your docstring, it should be labeled with the heading “Explanation” underlined
    with the same length in equals signs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This section consists of a more elaborate description of what the function,
    class, or method does when the concise Single-Sentence Summary will not suffice.
    This section should be used to clarify functionality in several sentences or paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: '### 3\. Examples Section'
  prefs: []
  type: TYPE_NORMAL
- en: This section is **required** for every docstring. A docstring will not pass
    review if it is not included. It should be labeled with the heading “Examples”
    (even if there is only one example) underlined with the same length in equals
    signs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This section consists of examples that show how the function works, called doctests.
    Doctests should be complicated enough that they fully demonstrate the API and
    functionality of the function, but simple enough that a user can understand them
    without too much thought. The perfect doctest tells the user exactly what they
    need to know about the function without reading any other part of the docstring.
  prefs: []
  type: TYPE_NORMAL
- en: There should always be a blank line before the doctest. When multiple examples
    are provided, they should be separated by blank lines. Comments explaining the
    examples should have blank lines both above and below them.
  prefs: []
  type: TYPE_NORMAL
- en: Do not think of doctests as tests. Think of them as examples that happen to
    be tested. They should demonstrate the API of the function to the user (i.e.,
    what the input parameters look like, what the output looks like, and what it does).
    If you only want to test something, add a test to the relevant `test_*.py file`.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `./bin/coverage_doctest.py` script to test the doctest coverage
    of a file or module. Run the doctests with `./bin/doctest`.
  prefs: []
  type: TYPE_NORMAL
- en: You should only skip the testing of an example if it is impossible to test it.
    If necessary, testing of an example can be skipped by adding a special comment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If an example is longer than 80 characters, it should be line wrapped. Examples
    should be line wrapped so that they are still valid Python code, using `...` continuation
    as in a Python prompt. For example, from the ODE module documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here `dsolve(cos(f(x)) - (x*sin(f(x)) - f(x)**2)*f(x).diff(x), f(x), hint='1st_exact')`
    is too long, so we line break it after a comma so that it is readable, and put
    `...` on the continuation lines. If this is not done correctly, the doctests will
    fail.
  prefs: []
  type: TYPE_NORMAL
- en: The output of a command can also be line wrapped. No `...` should be used in
    this case. The doctester automatically accepts output that is line wrapped.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In a doctest, write imports like `sympy import ...` instead of `import sympy`
    or `from sympy import *`. To define symbols, use `from sympy.abc import x`, unless
    the name is not in `sympy.abc` (for instance, if it has assumptions), in which
    case use `symbols` like `x, y = symbols('x y')`.
  prefs: []
  type: TYPE_NORMAL
- en: In general, you should run `./bin/doctest` to make sure your examples run correctly,
    and fix them if they do not.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Parameters Section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section is encouraged. If you choose to include a Parameters section in
    your docstring, it should be labeled with the heading “Parameters” underlined
    with the same length in equals signs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you have parameters listed in parentheses after a function, class, or method
    name, you must include a parameters section.
  prefs: []
  type: TYPE_NORMAL
- en: This section consists of descriptions of the function arguments, keywords, and
    their respective types.
  prefs: []
  type: TYPE_NORMAL
- en: Enclose variables in double backticks. The colon must be preceded by a space,
    or omitted if the type is absent. For the parameter types, be as precise as possible.
    If it is not necessary to specify a keyword argument, use `optional`. Optional
    keyword parameters have default values, which are displayed as part of the function
    signature. They can also be detailed in the description.
  prefs: []
  type: TYPE_NORMAL
- en: When a parameter can only assume one of a fixed set of values, those values
    can be listed in braces, with the default appearing first. When two or more input
    parameters have exactly the same type, shape, and description, they can be combined.
  prefs: []
  type: TYPE_NORMAL
- en: If the Parameters section is not formatted correctly, the documentation build
    will render incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to include a Returns section, write it as its own section with its
    own heading.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a correctly formatted Parameters section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '### 5\. See Also Section'
  prefs: []
  type: TYPE_NORMAL
- en: This section is encouraged. If you choose to include a See Also section in your
    docstring, it should be labeled with the heading “See Also” underlined with the
    same length in equals signs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This section consists of a listing of related functions, classes, and methods.
    The related items can be described with a concise fragment (not a full sentence)
    if desired, but this is not required. If the description spans more than one line,
    subsequent lines must be indented.
  prefs: []
  type: TYPE_NORMAL
- en: The See Also section should only be used to reference other SymPy objects. Anything
    that is a link should be embedded as a hyperlink in the text of the docstring
    instead; see the References section for details.
  prefs: []
  type: TYPE_NORMAL
- en: Do not reference classes with `class:Classname`, `` class:`Classname` ``, or
    `` :class:`Classname` ``, but rather only by their class name.
  prefs: []
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a correctly formatted See Also section with concise descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a correctly formatted See Also section with just a list of names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 6\. References Section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section is encouraged. If you choose to include a References section in
    your docstring, it should be labeled with the heading “References” underlined
    with the same length in equals signs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This section consists of a list of references cited anywhere in the previous
    sections. Any reference to other SymPy objects should go in the See Also section
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: The References section should include online resources, paper citations, and/or
    any other printed resource giving general information about the function. References
    are meant to augment the docstring, but should not be required to understand it.
    References are numbered, starting from one, in the order in which they are cited.
  prefs: []
  type: TYPE_NORMAL
- en: For online resources, only link to freely accessible and stable online resources
    such as Wikipedia, Wolfram MathWorld, and the NIST Digital Library of Mathematical
    Functions (DLMF), which are unlikely to suffer from hyperlink rot.
  prefs: []
  type: TYPE_NORMAL
- en: 'References for papers should include, in this order: reference citation, author
    name, title of work, journal or publication, year published, page number.'
  prefs: []
  type: TYPE_NORMAL
- en: If there is a DOI (Digital Object Identifier), include it in the citation and
    make sure it is a clickable hyperlink.
  prefs: []
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a References section that cites a printed resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a References section that cites printed and online resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Sample Docstring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an example of a correctly formatted docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Docstrings for Classes that are Mathematical Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SymPy is unusual in that it also has classes that are mathematical functions.
    The docstrings for classes that are mathematical functions should include details
    specific to this kind of class, as noted below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Explanation section should include a mathematical definition of the function.
    This should use LaTeX math. Use $$ for [inline math](documentation-style-guide.html#style-guide-math-formatting)
    and .. math:: for display math, which should be used for the main definition.
    The variable names in the formulas should match the names of the parameters, and
    the LaTeX formatting should match the LaTeX pretty printing used by SymPy. As
    relevant, the mathematical definitions should mention their domain of definition,
    especially if the domain is different from the complex numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are multiple conventions in the literature for a function, make sure
    to clearly specify which convention SymPy uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Explanation section may also include some important mathematical facts about
    the function. These can alternately be demonstrated in the Examples section. Mathematical
    discussions should not be too long, as users can check the references for more
    details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docstring does not need to discuss every implementation detail such as at
    which operations are defined on the function or at which points it evaluates in
    the “eval” method. Important or illuminating instances of these can be shown in
    the Examples section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The docstring should go on the class level (right under the line that has “class”).
    The “eval” method should not have a docstring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private methods on the class, that is, any method that starts with an underscore,
    do not need to be documented. They can still be documented if you like, but note
    that these docstrings are not pulled into the Sphinx documentation, so they will
    only be seen by developers who are reading the code, so if there is anything very
    important that you want to mention here, it should go in the class-level docstring
    as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best Practices for Writing Docstrings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing docstrings, please follow all of the same formatting, style, and
    tone preferences as when writing narrative documentation. For guidelines, see
    [Best Practices for Writing Documentation](documentation-style-guide.html#style-guide-best-practices-for-writing-documentation),
    Formatting, Style, and Tone.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Docstrings into the Sphinx Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are excerpts from the `doc/src/modules/geometry` directory that imports
    the relevant docstrings from geometry module into documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'First namespace is set to particular submodule (file) with `.. module::` directive,
    then docstrings are imported with `.. autoclass::` or `.. autofunction::` relative
    to that submodule (file). Other methods are either cumbersome to use (using full
    paths for all objects) or break something (importing relative to main module using
    `.. module:: sympy.geometry` breaks viewcode Sphinx extension). All files in `doc/src/modules/`
    should use this format.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Cross-Referencing'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any text that references another SymPy function should be formatted so that
    a cross-reference link to that function’s documentation is created automatically.
    This is done using the RST cross-reference syntax. There are two different kinds
    of objects that have conventions here:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Objects that are included in `from sympy import *`, for example, `sympy.acos`.
  prefs: []
  type: TYPE_NORMAL
- en: For these, use `` :obj:`~.acos()` ``. The `~` makes it so that the text in the
    rendered HTML only shows `acos` instead of the fully qualified name `sympy.functions.elementary.trigonometric.acos`.
    (This will encourage importing names from the global `sympy` namespace instead
    of a specific submodule.) The `.` makes it so that the function name is found
    automatically. (If Sphinx gives a warning that there are multiple names found,
    replace the `.` with the full name. For example, `` :obj:`~sympy.solvers.solvers.solve()`
    ``.) Adding a trailing pair of parentheses is a convention for indicating the
    name is a function, method, or class.
  prefs: []
  type: TYPE_NORMAL
- en: You may also use a more specific type indicator instead of `obj` (see [https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)).
    However, `obj` will always work, and sometimes SymPy names are not the type you
    might expect them to be. For example, mathematical function objects such as `sin`
    are not actually a Python function, rather they are a Python class, therefore
    `` :func:`~.sin` `` will not work.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Objects that are not included in `from sympy import *`, for example, `sympy.physics.vector.dynamicsymbols`.
  prefs: []
  type: TYPE_NORMAL
- en: This can be public API objects from submodules that are not included in the
    main `sympy/__init__.py`, such as the physics submodule, or private API objects
    that are not necessarily intended to be used by end-users (but should still be
    documented). In this case, you must show the fully qualified name, so do not use
    the `~.` syntax. For example, `` :obj:`sympy.physics.vector.dynamicsymbols()`
    ``.
  prefs: []
  type: TYPE_NORMAL
- en: You may also write custom text that links to the documentation for something
    using the following syntax `` :obj:`custom text<object>` ``. For example, `` :obj:`the
    sine function <.sin>` `` produces the text “the sine function” that links to the
    documentation for `sin`. Note that the `~` character should not be used here.
  prefs: []
  type: TYPE_NORMAL
- en: Note that references in the [See Also](#style-guide-see-also) section of the
    docstrings do not require the `:obj:` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the resulting cross reference is written incorrectly, Sphinx will error
    when building the docs with an error like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some troubleshooting tips to fix the errors:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have used the correct syntax, as described above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you spelled the function name correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if the function you are trying to cross-reference is actually included
    in the Sphinx documentation. If it is not, Sphinx will not be able to create a
    reference for it. In that case, you should add it to the appropriate RST file
    as described in the [Docstring Guidelines](#style-guide-docstring-guidelines).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the function or object is not included in `from sympy import *`, you will
    need to use the fully qualified name, like `sympy.submodule.submodule.function`
    instead of just `function`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A fully qualified name must include the full submodule for a function all the
    way down to the file. For example, `sympy.physics.vector.ReferenceFrame` will
    not work (even though you can access it that way in code). It has to be `sympy.physics.vector.frame.ReferenceFrame`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the thing you are referring to does not actually have somewhere to link to,
    do not use the `:obj:` syntax. Instead, mark it as code using double backticks.
    Examples of things that cannot be linked to are Python built in functions like
    `int` or `NotImplementedError`, functions from other modules outside of SymPy
    like `matplotlib.plot`, and variable or parameter names that are specific to the
    text at hand. In general, if the object cannot be accessed as `sympy.something.something.object`,
    it cannot be cross-referenced and you should not use the `:obj:` syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using are using one of the [type specific](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#cross-referencing-python-objects)
    identifiers like `:func:`, be sure that the type for it is correct. `:func:` only
    refers to Python functions. For classes, you need to use `:class:`, and for methods
    on a class you need to use `:method:`. In general, it is recommended to use `:obj:`,
    as this will work for any type of object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you cannot get the cross-referencing syntax to work, go ahead and submit
    the pull request as is and ask the reviewers for help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may also see errors like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: for instance, from using `` :obj:`~.subs` ``. This means that the `.` is not
    sufficient to find the function, because there are multiple names in SymPy named
    `subs`. In this case, you need to use the fully qualified name. You can still
    use `~` to make it shortened in the final text, like `` :obj:`~sympy.core.basic.Basic.subs`
    ``.
  prefs: []
  type: TYPE_NORMAL
- en: The line numbers for warnings in Python files are relative to the top of the
    docstring, not the file itself. The line numbers are often not completely correct,
    so you will generally have to search the docstring for the part that the warning
    is referring to. This is due to a bug in Sphinx.
  prefs: []
  type: TYPE_NORMAL
