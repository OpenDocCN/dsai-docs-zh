- en: scipy.signal.ShortTimeFFT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`scipy.signal.ShortTimeFFT`'
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Provide a parametrized discrete Short-time Fourier transform (stft) and its
    inverse (istft).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 提供参数化的离散短时傅里叶变换 (stft) 及其逆变换 (istft)。
- en: The *stft* calculates sequential FFTs by sliding a window ([`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win")) over an input signal by [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") increments. It can be used to quantify the change
    of the spectrum over time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*stft* 通过滑动窗口 ([`win`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win")) 在输入信号上以 [`hop`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") 增量计算连续的 FFT，可用于量化频谱随时间的变化。'
- en: The *stft* is represented by a complex-valued matrix S[q,p] where the p-th column
    represents an FFT with the window centered at the time t[p] = p * [`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") = p * [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") * [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") where [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") is the sampling interval of the input signal. The
    q-th row represents the values at the frequency f[q] = q * [`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") with [`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") = 1 / ([`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T")) being the bin width of the FFT.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*stft* 由复数矩阵 S[q,p] 表示，其中第 p 列代表以时间 t[p] = p * [`delta_t`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") = p * [`hop`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") * [`T`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") 居中的窗口的 FFT，其中 [`T`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") 是输入信号的采样间隔。第 q 行表示在频率 f[q] = q * [`delta_f`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") 处的值，其中 [`delta_f`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") = 1 / ([`mfft`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`T`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T")) 是 FFT 的频率分辨率。'
- en: 'The inverse STFT *istft* is calculated by reversing the steps of the STFT:
    Take the IFFT of the p-th slice of S[q,p] and multiply the result with the so-called
    dual window (see [`dual_win`](scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")). Shift the result by p * [`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") and add the result to previous shifted results
    to reconstruct the signal. If only the dual window is known and the STFT is invertible,
    [`from_dual`](scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual") can be used to instantiate this class.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 逆 STFT *istft* 通过逆转 STFT 步骤计算：取 S[q,p] 的第 p 切片的 IFFT，并与所谓的双窗口（参见 [`dual_win`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")）结果相乘。将结果按 p * [`delta_t`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") 移动，并将结果添加到先前移动的结果以重建信号。如果仅知道双窗口并且 STFT 可逆，则可以使用
    [`from_dual`](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual") 实例化此类。
- en: Due to the convention of time t = 0 being at the first sample of the input signal,
    the STFT values typically have negative time slots. Hence, negative indexes like
    [`p_min`](scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min
    "scipy.signal.ShortTimeFFT.p_min") or [`k_min`](scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min
    "scipy.signal.ShortTimeFFT.k_min") do not indicate counting backwards from an
    array’s end like in standard Python indexing but being left of t = 0.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间t = 0约定为输入信号的第一个样本，STFT值通常具有负时间槽。因此，像[`p_min`](https://scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min)或[`k_min`](https://scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min)这样的负索引不像标准Python索引中的倒数计数从数组末尾开始，而是位于t
    = 0的左侧。
- en: More detailed information can be found in the [Short-Time Fourier Transform](../../tutorial/signal.html#tutorial-stft)
    section of the [SciPy User Guide](../../tutorial/index.html#user-guide).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细的信息可以在[SciPy用户指南](../../tutorial/index.html#user-guide)的[短时傅里叶变换](../../tutorial/signal.html#tutorial-stft)部分找到。
- en: Note that all parameters of the initializer, except [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to") (which uses [`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling")) have identical named attributes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了使用[`scaling`](https://scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling)的[`scale_to`](https://scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to)之外，初始化器的所有参数都具有相同的命名属性。
- en: 'Parameters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**win**np.ndarray'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**win**np.ndarray'
- en: The window must be a real- or complex-valued 1d array.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口必须是一个实数或复数值的一维数组。
- en: '**hop**int'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**hop**int'
- en: The increment in samples, by which the window is shifted in each step.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个步骤中窗口移动的样本增量。
- en: '**fs**float'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**fs**float'
- en: Sampling frequency of input signal and window. Its relation to the sampling
    interval [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T "scipy.signal.ShortTimeFFT.T")
    is `T = 1 / fs`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输入信号和窗口的采样频率。其与采样间隔[`T`](https://scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T)的关系为`T
    = 1 / fs`。
- en: '**fft_mode**‘twosided’, ‘centered’, ‘onesided’, ‘onesided2X’'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**fft_mode**‘twosided’, ‘centered’, ‘onesided’, ‘onesided2X’'
- en: Mode of FFT to be used (default ‘onesided’). See property [`fft_mode`](scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode
    "scipy.signal.ShortTimeFFT.fft_mode") for details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的FFT模式（默认为'onesided'）。有关详细信息，请参见属性[`fft_mode`](https://scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode)。
- en: '**mfft: int | None**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**mfft: int | None**'
- en: Length of the FFT used, if a zero padded FFT is desired. If `None` (default),
    the length of the window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win") is used.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要零填充FFT，则使用的FFT的长度。如果为`None`（默认），则使用窗口[`win`](https://scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win)的长度。
- en: '**dual_win**np.ndarray | None'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**dual_win**np.ndarray | None'
- en: The dual window of [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win"). If set to `None`, it is calculated if needed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`win`](https://scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win)的双重窗口。如果设置为`None`，则在需要时进行计算。'
- en: '**scale_to**‘magnitude’, ‘psd’ | None'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**scale_to**‘magnitude’, ‘psd’ | None'
- en: If not `None` (default) the window function is scaled, so each STFT column represents
    either a ‘magnitude’ or a power spectral density (‘psd’) spectrum. This parameter
    sets the property [`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling") to the same value. See method [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to") for details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不为`None`（默认），则缩放窗口函数，使每个STFT列表示“幅度”或功率谱密度（'psd'）谱。此参数将属性[`scaling`](https://scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling)设置为相同值。有关详细信息，请参见方法[`scale_to`](https://scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to)。
- en: '**phase_shift**int | None'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**phase_shift**int | None'
- en: If set, add a linear phase [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f") to each frequency [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f"). The default value 0 ensures that there is no phase
    shift on the zeroth slice (in which t=0 is centered). See property [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") for more details.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置，对每个频率 [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f") 添加一个线性相位 [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f")。默认值 0 确保在零切片上没有相位移（其中 t=0 居中）。有关详细信息，请参阅属性 [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift")。
- en: Examples
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'The following example shows the magnitude of the STFT of a sine with varying
    frequency \(f_i(t)\) (marked by a red dashed line in the plot):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了带有变频 \(f_i(t)\) 的正弦波的 STFT 幅度（在图中由红色虚线标记）：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The utilized Gaussian window is 50 samples or 2.5 s long. The parameter `mfft=200`
    in *ShortTimeFFT* causes the spectrum to be oversampled by a factor of 4:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的高斯窗口为 50 个样本或 2.5 秒长。参数 `mfft=200` 在 *ShortTimeFFT* 中导致频谱过采样 4 倍：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the plot, the time extent of the signal *x* is marked by vertical dashed
    lines. Note that the SFT produces values outside the time range of *x*. The shaded
    areas on the left and the right indicate border effects caused by the window slices
    in that area not fully being inside time range of *x*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，信号 *x* 的时间范围由垂直虚线标记。注意，SFT 产生的值超出 *x* 的时间范围。左侧和右侧的阴影区域表示由于窗口片段未完全位于 *x*
    的时间范围内而导致的边界效应：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![../../_images/scipy-signal-ShortTimeFFT-1_00_00.png](../Images/389968aa37ffa309b1b70dd8f4694b83.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![../../_images/scipy-signal-ShortTimeFFT-1_00_00.png](../Images/389968aa37ffa309b1b70dd8f4694b83.png)'
- en: 'Reconstructing the signal with the *istft* is straightforward, but note that
    the length of *x1* should be specified, since the SFT length increases in [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *istft* 重构信号很简单，但请注意应指定 *x1* 的长度，因为在 [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") 步骤中 SFT 的长度会增加：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is possible to calculate the SFT of signal parts:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以计算信号部分的 SFT：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When assembling sequential STFT parts together, the overlap needs to be considered:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在组装连续的 STFT 部分时，需要考虑重叠：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is also possible to calculate the *itsft* for signal parts:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以计算信号部分的 *itsft*：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Attributes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '[`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T "scipy.signal.ShortTimeFFT.T")'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T "scipy.signal.ShortTimeFFT.T")'
- en: Sampling interval of input signal and of the window.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输入信号和窗口的采样间隔。
- en: '[`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f")'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f")'
- en: Width of the frequency bins of the STFT.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: STFT 的频率箱宽度。
- en: '[`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t")'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t")'
- en: Time increment of STFT.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: STFT 的时间增量。
- en: '[`dual_win`](scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dual_win`](scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")'
- en: Canonical dual window.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 规范双窗口。
- en: '[`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f "scipy.signal.ShortTimeFFT.f")'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f "scipy.signal.ShortTimeFFT.f")'
- en: Frequencies values of the STFT.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: STFT 的频率值。
- en: '[`f_pts`](scipy.signal.ShortTimeFFT.f_pts.html#scipy.signal.ShortTimeFFT.f_pts
    "scipy.signal.ShortTimeFFT.f_pts")'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[`f_pts`](scipy.signal.ShortTimeFFT.f_pts.html#scipy.signal.ShortTimeFFT.f_pts
    "scipy.signal.ShortTimeFFT.f_pts")'
- en: Number of points along the frequency axis.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 频率轴上的点数。
- en: '[`fac_magnitude`](scipy.signal.ShortTimeFFT.fac_magnitude.html#scipy.signal.ShortTimeFFT.fac_magnitude
    "scipy.signal.ShortTimeFFT.fac_magnitude")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fac_magnitude`](scipy.signal.ShortTimeFFT.fac_magnitude.html#scipy.signal.ShortTimeFFT.fac_magnitude
    "scipy.signal.ShortTimeFFT.fac_magnitude")'
- en: Factor to multiply the STFT values by to scale each frequency slice to a magnitude
    spectrum.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Factor to multiply the STFT values by to scale each frequency slice to a magnitude
    spectrum.
- en: '[`fac_psd`](scipy.signal.ShortTimeFFT.fac_psd.html#scipy.signal.ShortTimeFFT.fac_psd
    "scipy.signal.ShortTimeFFT.fac_psd")'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fac_psd`](scipy.signal.ShortTimeFFT.fac_psd.html#scipy.signal.ShortTimeFFT.fac_psd
    "scipy.signal.ShortTimeFFT.fac_psd")'
- en: Factor to multiply the STFT values by to scale each frequency slice to a power
    spectral density (PSD).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Factor to multiply the STFT values by to scale each frequency slice to a power
    spectral density (PSD).
- en: '[`fft_mode`](scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode
    "scipy.signal.ShortTimeFFT.fft_mode")'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fft_mode`](scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode
    "scipy.signal.ShortTimeFFT.fft_mode")'
- en: Mode of utilized FFT (‘twosided’, ‘centered’, ‘onesided’ or ‘onesided2X’).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Mode of utilized FFT (‘twosided’, ‘centered’, ‘onesided’ or ‘onesided2X’).
- en: '[`fs`](scipy.signal.ShortTimeFFT.fs.html#scipy.signal.ShortTimeFFT.fs "scipy.signal.ShortTimeFFT.fs")'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[`fs`](scipy.signal.ShortTimeFFT.fs.html#scipy.signal.ShortTimeFFT.fs "scipy.signal.ShortTimeFFT.fs")'
- en: Sampling frequency of input signal and of the window.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Sampling frequency of input signal and of the window.
- en: '[`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop "scipy.signal.ShortTimeFFT.hop")'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop "scipy.signal.ShortTimeFFT.hop")'
- en: Time increment in signal samples for sliding window.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Time increment in signal samples for sliding window.
- en: '[`invertible`](scipy.signal.ShortTimeFFT.invertible.html#scipy.signal.ShortTimeFFT.invertible
    "scipy.signal.ShortTimeFFT.invertible")'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`invertible`](scipy.signal.ShortTimeFFT.invertible.html#scipy.signal.ShortTimeFFT.invertible
    "scipy.signal.ShortTimeFFT.invertible")'
- en: Check if STFT is invertible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Check if STFT is invertible.
- en: '[`k_min`](scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min
    "scipy.signal.ShortTimeFFT.k_min")'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`k_min`](scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min
    "scipy.signal.ShortTimeFFT.k_min")'
- en: The smallest possible signal index of the STFT.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: The smallest possible signal index of the STFT.
- en: '[`lower_border_end`](scipy.signal.ShortTimeFFT.lower_border_end.html#scipy.signal.ShortTimeFFT.lower_border_end
    "scipy.signal.ShortTimeFFT.lower_border_end")'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`lower_border_end`](scipy.signal.ShortTimeFFT.lower_border_end.html#scipy.signal.ShortTimeFFT.lower_border_end
    "scipy.signal.ShortTimeFFT.lower_border_end")'
- en: First signal index and first slice index unaffected by pre-padding.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: First signal index and first slice index unaffected by pre-padding.
- en: '[`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num")'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num")'
- en: Number of samples in window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Number of samples in window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
- en: '[`m_num_mid`](scipy.signal.ShortTimeFFT.m_num_mid.html#scipy.signal.ShortTimeFFT.m_num_mid
    "scipy.signal.ShortTimeFFT.m_num_mid")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`m_num_mid`](scipy.signal.ShortTimeFFT.m_num_mid.html#scipy.signal.ShortTimeFFT.m_num_mid
    "scipy.signal.ShortTimeFFT.m_num_mid")'
- en: Center index of window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Center index of window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
- en: '[`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft")'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft")'
- en: Length of input for the FFT used - may be larger than window length [`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num").
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Length of input for the FFT used - may be larger than window length [`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num").
- en: '[`onesided_fft`](scipy.signal.ShortTimeFFT.onesided_fft.html#scipy.signal.ShortTimeFFT.onesided_fft
    "scipy.signal.ShortTimeFFT.onesided_fft")'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`onesided_fft`](scipy.signal.ShortTimeFFT.onesided_fft.html#scipy.signal.ShortTimeFFT.onesided_fft
    "scipy.signal.ShortTimeFFT.onesided_fft")'
- en: Return True if a one-sided FFT is used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Return True if a one-sided FFT is used.
- en: '[`p_min`](scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min
    "scipy.signal.ShortTimeFFT.p_min")'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[`p_min`](scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min
    "scipy.signal.ShortTimeFFT.p_min")'
- en: The smallest possible slice index.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: The smallest possible slice index.
- en: '[`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift")'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift")'
- en: If set, add linear phase [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f") to each FFT slice of frequency [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置，为每个FFT频率片段添加线性相位[`phase_shift`](https://scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](https://scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](https://scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f")。
- en: '[`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling")'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scaling`](https://scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling")'
- en: Normalization applied to the window function (‘magnitude’, ‘psd’ or `None`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正规化应用于窗口函数（‘magnitude’、‘psd’或`None`）。
- en: '[`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win "scipy.signal.ShortTimeFFT.win")'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[`win`](https://scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win")'
- en: Window function as real- or complex-valued 1d array.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数作为实值或复值1维数组。
- en: Methods
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`extent`](scipy.signal.ShortTimeFFT.extent.html#scipy.signal.ShortTimeFFT.extent
    "scipy.signal.ShortTimeFFT.extent")(n[, axes_seq, center_bins]) | Return minimum
    and maximum values time-frequency values. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`extent`](https://scipy.signal.ShortTimeFFT.extent.html#scipy.signal.ShortTimeFFT.extent
    "scipy.signal.ShortTimeFFT.extent")(n[, axes_seq, center_bins]) | 返回最小和最大值的时频值。
    |'
- en: '| [`from_dual`](scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual")(dual_win, hop, fs, *[, fft_mode, ...])
    | Instantiate a *ShortTimeFFT* by only providing a dual window. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`from_dual`](https://scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual")(dual_win, hop, fs, *[, fft_mode, ...])
    | 仅通过提供双窗口实例化*ShortTimeFFT*。 |'
- en: '| [`from_window`](scipy.signal.ShortTimeFFT.from_window.html#scipy.signal.ShortTimeFFT.from_window
    "scipy.signal.ShortTimeFFT.from_window")(win_param, fs, nperseg, noverlap, *)
    | Instantiate *ShortTimeFFT* by using *get_window*. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`from_window`](https://scipy.signal.ShortTimeFFT.from_window.html#scipy.signal.ShortTimeFFT.from_window
    "scipy.signal.ShortTimeFFT.from_window")(win_param, fs, nperseg, noverlap, *)
    | 使用*get_window*实例化*ShortTimeFFT*。 |'
- en: '| [`istft`](scipy.signal.ShortTimeFFT.istft.html#scipy.signal.ShortTimeFFT.istft
    "scipy.signal.ShortTimeFFT.istft")(S[, k0, k1, f_axis, t_axis]) | Inverse short-time
    Fourier transform. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`istft`](https://scipy.signal.ShortTimeFFT.istft.html#scipy.signal.ShortTimeFFT.istft
    "scipy.signal.ShortTimeFFT.istft")(S[, k0, k1, f_axis, t_axis]) | 逆短时傅里叶变换。 |'
- en: '| [`k_max`](scipy.signal.ShortTimeFFT.k_max.html#scipy.signal.ShortTimeFFT.k_max
    "scipy.signal.ShortTimeFFT.k_max")(n) | First sample index after signal end not
    touched by a time slice. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`k_max`](https://scipy.signal.ShortTimeFFT.k_max.html#scipy.signal.ShortTimeFFT.k_max
    "scipy.signal.ShortTimeFFT.k_max")(n) | 信号结束后首个未触及时段的样本索引。 |'
- en: '| [`nearest_k_p`](scipy.signal.ShortTimeFFT.nearest_k_p.html#scipy.signal.ShortTimeFFT.nearest_k_p
    "scipy.signal.ShortTimeFFT.nearest_k_p")(k[, left]) | Return nearest sample index
    k_p for which t[k_p] == t[p] holds. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`nearest_k_p`](https://scipy.signal.ShortTimeFFT.nearest_k_p.html#scipy.signal.ShortTimeFFT.nearest_k_p
    "scipy.signal.ShortTimeFFT.nearest_k_p")(k[, left]) | 返回最接近的样本索引k_p，其中t[k_p] ==
    t[p]成立。 |'
- en: '| [`p_max`](scipy.signal.ShortTimeFFT.p_max.html#scipy.signal.ShortTimeFFT.p_max
    "scipy.signal.ShortTimeFFT.p_max")(n) | Index of first non-overlapping upper time
    slice for *n* sample input. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`p_max`](https://scipy.signal.ShortTimeFFT.p_max.html#scipy.signal.ShortTimeFFT.p_max
    "scipy.signal.ShortTimeFFT.p_max")(n) | 第一个非重叠的上时段索引，用于*n*个样本输入。 |'
- en: '| [`p_num`](scipy.signal.ShortTimeFFT.p_num.html#scipy.signal.ShortTimeFFT.p_num
    "scipy.signal.ShortTimeFFT.p_num")(n) | Number of time slices for an input signal
    with *n* samples. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`p_num`](https://scipy.signal.ShortTimeFFT.p_num.html#scipy.signal.ShortTimeFFT.p_num
    "scipy.signal.ShortTimeFFT.p_num")(n) | *n*个样本输入信号的时段数。 |'
- en: '| [`p_range`](scipy.signal.ShortTimeFFT.p_range.html#scipy.signal.ShortTimeFFT.p_range
    "scipy.signal.ShortTimeFFT.p_range")(n[, p0, p1]) | Determine and validate slice
    index range. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`p_range`](https://scipy.signal.ShortTimeFFT.p_range.html#scipy.signal.ShortTimeFFT.p_range
    "scipy.signal.ShortTimeFFT.p_range")(n[, p0, p1]) | 确定和验证切片索引范围。 |'
- en: '| [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to")(scaling) | Scale window to obtain ''magnitude''
    or ''psd'' scaling for the STFT. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`scale_to`](https://scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to")(scaling) | 缩放窗口以获得STFT的‘magnitude’或‘psd’缩放。
    |'
- en: '| [`spectrogram`](scipy.signal.ShortTimeFFT.spectrogram.html#scipy.signal.ShortTimeFFT.spectrogram
    "scipy.signal.ShortTimeFFT.spectrogram")(x[, y, detr, p0, p1, k_offset, ...])
    | Calculate spectrogram or cross-spectrogram. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`spectrogram`](scipy.signal.ShortTimeFFT.spectrogram.html#scipy.signal.ShortTimeFFT.spectrogram
    "scipy.signal.ShortTimeFFT.spectrogram")(x[, y, detr, p0, p1, k_offset, ...])
    | 计算频谱图或交叉谱图。 |'
- en: '| [`stft`](scipy.signal.ShortTimeFFT.stft.html#scipy.signal.ShortTimeFFT.stft
    "scipy.signal.ShortTimeFFT.stft")(x[, p0, p1, k_offset, padding, axis]) | Perform
    the short-time Fourier transform. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`stft`](scipy.signal.ShortTimeFFT.stft.html#scipy.signal.ShortTimeFFT.stft
    "scipy.signal.ShortTimeFFT.stft")(x[, p0, p1, k_offset, padding, axis]) | 执行短时傅里叶变换。
    |'
- en: '| [`stft_detrend`](scipy.signal.ShortTimeFFT.stft_detrend.html#scipy.signal.ShortTimeFFT.stft_detrend
    "scipy.signal.ShortTimeFFT.stft_detrend")(x, detr[, p0, p1, k_offset, ...]) |
    Short-time Fourier transform with a trend being subtracted from each segment beforehand.
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`stft_detrend`](scipy.signal.ShortTimeFFT.stft_detrend.html#scipy.signal.ShortTimeFFT.stft_detrend
    "scipy.signal.ShortTimeFFT.stft_detrend")(x, detr[, p0, p1, k_offset, ...]) |
    在每个段之前从中减去趋势的短时傅里叶变换。 |'
- en: '| [`t`](scipy.signal.ShortTimeFFT.t.html#scipy.signal.ShortTimeFFT.t "scipy.signal.ShortTimeFFT.t")(n[, p0, p1, k_offset])
    | Times of STFT for an input signal with *n* samples. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`t`](scipy.signal.ShortTimeFFT.t.html#scipy.signal.ShortTimeFFT.t "scipy.signal.ShortTimeFFT.t")(n[, p0, p1, k_offset])
    | 用于具有*n*个样本的输入信号的STFT的时间。 |'
- en: '| [`upper_border_begin`](scipy.signal.ShortTimeFFT.upper_border_begin.html#scipy.signal.ShortTimeFFT.upper_border_begin
    "scipy.signal.ShortTimeFFT.upper_border_begin")(n) | First signal index and first
    slice index affected by post-padding. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`upper_border_begin`](scipy.signal.ShortTimeFFT.upper_border_begin.html#scipy.signal.ShortTimeFFT.upper_border_begin
    "scipy.signal.ShortTimeFFT.upper_border_begin")(n) | 受后填充影响的第一个信号索引和第一个切片索引。 |'
