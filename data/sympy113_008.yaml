- en: Basic Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本操作
- en: Original text：[https://docs.sympy.org/latest/tutorials/intro-tutorial/basic_operations.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/basic_operations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/basic_operations.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/basic_operations.html)
- en: Here we discuss some of the most basic operations needed for expression manipulation
    in SymPy. Some more advanced operations will be discussed later in the [advanced
    expression manipulation](manipulation.html#tutorial-manipulation) section.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，我们将讨论表达式操作所需的一些最基本操作。稍后将在[高级表达式操作](manipulation.html#tutorial-manipulation)部分讨论一些更高级的操作。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Substitution
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换
- en: One of the most common things you might want to do with a mathematical expression
    is substitution. Substitution replaces all instances of something in an expression
    with something else. It is done using the `subs` method. For example
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数学表达式中最常见的操作之一是替换。替换将表达式中的某些内容替换为其他内容。可以使用`subs`方法来完成。例如
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Substitution is usually done for one of two reasons:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 替换通常出于两个原因之一进行：
- en: Evaluating an expression at a point. For example, if our expression is `cos(x)
    + 1` and we want to evaluate it at the point `x = 0`, so that we get `cos(0) +
    1`, which is 2.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某一点评估一个表达式。例如，如果我们的表达式是`cos(x) + 1`，我们想在点`x = 0`处评估它，这样我们得到`cos(0) + 1`，结果是2。
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Replacing a subexpression with another subexpression. There are two reasons
    we might want to do this. The first is if we are trying to build an expression
    that has some symmetry, such as \(x^{x^{x^x}}\). To build this, we might start
    with `x**y`, and replace `y` with `x**y`. We would then get `x**(x**y)`. If we
    replaced `y` in this new expression with `x**x`, we would get `x**(x**(x**x))`,
    the desired expression.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个子表达式替换为另一个子表达式。我们可能有两个原因想要这样做。第一个是如果我们试图构建具有某种对称性的表达式，比如 \(x^{x^{x^x}}\)。为了构建这个表达式，我们可以从`x**y`开始，然后用`x**y`替换`y`。然后我们会得到`x**(x**y)`。如果我们在这个新表达式中用`x**x`替换`y`，我们会得到`x**(x**(x**x))`，这就是我们想要的表达式。
- en: '[PRE3]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The second is if we want to perform a very controlled simplification, or perhaps
    a simplification that SymPy is otherwise unable to do. For example, say we have
    \(\sin(2x) + \cos(2x)\), and we want to replace \(\sin(2x)\) with \(2\sin(x)\cos(x)\).
    As we will learn later, the function `expand_trig` does this. However, this function
    will also expand \(\cos(2x)\), which we may not want. While there are ways to
    perform such precise simplification, and we will learn some of them in the [advanced
    expression manipulation](manipulation.html#tutorial-manipulation) section, an
    easy way is to just replace \(\sin(2x)\) with \(2\sin(x)\cos(x)\).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个原因是，如果我们想进行非常精确的简化，或者可能是 SymPy 无法做的简化。例如，假设我们有 \(\sin(2x) + \cos(2x)\)，我们想要用
    \(\sin(2x)\) 替换为 \(2\sin(x)\cos(x)\)。正如我们稍后将学习的，函数 `expand_trig` 就是这么做的。然而，这个函数也会展开
    \(\cos(2x)\)，这可能不是我们想要的。虽然有方法可以进行如此精确的简化，我们将在[高级表达式操作](manipulation.html#tutorial-manipulation)部分学习其中一些，一个简单的方法就是直接用
    \(2\sin(x)\cos(x)\) 替换 \(\sin(2x)\)。
- en: '[PRE4]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two important things to note about `subs`. First, it returns a new
    expression. SymPy objects are immutable. That means that `subs` does not modify
    it in-place. For example
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`subs`有两个重要的事项需要注意。首先，它返回一个新的表达式。SymPy 对象是不可变的。这意味着`subs`不会就地修改它。例如
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we see that performing `expr.subs(x, 0)` leaves `expr` unchanged. In fact,
    since SymPy expressions are immutable, no function will change them in-place.
    All functions will return new expressions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到执行`expr.subs(x, 0)`不会改变`expr`。实际上，由于 SymPy 表达式是不可变的，没有函数会就地修改它们。所有函数都会返回新的表达式。
- en: To perform multiple substitutions at once, pass a list of `(old, new)` pairs
    to `subs`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要一次执行多个替换，请将 `(old, new)` 对的列表传递给 `subs`。
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It is often useful to combine this with a list comprehension to do a large set
    of similar replacements all at once. For example, say we had \(x^4 - 4x^3 + 4x^2
    - 2x + 3\) and we wanted to replace all instances of \(x\) that have an even power
    with \(y\), to get \(y^4 - 4x^3 + 4y^2 - 2x + 3\).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个与列表推导结合起来，可以做大量类似的替换。例如，假设我们有 \(x^4 - 4x^3 + 4x^2 - 2x + 3\)，我们想要替换所有偶次幂为
    \(y\) 的 \(x\) 实例，得到 \(y^4 - 4x^3 + 4y^2 - 2x + 3\)。
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Converting Strings to SymPy Expressions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符串转换为 SymPy 表达式
- en: The `sympify` function (that’s `sympify`, not to be confused with `simplify`)
    can be used to convert strings into SymPy expressions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `sympify`（注意是 `sympify`，不要与 `simplify` 混淆）可用于将字符串转换为 SymPy 表达式。
- en: For example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Warning
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`sympify` uses `eval`. Don’t use it on unsanitized input.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`sympify` 使用 `eval`。不要对未经过滤的输入使用它。'
- en: '`evalf`'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`evalf`'
- en: To evaluate a numerical expression into a floating point number, use `evalf`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数值表达式评估为浮点数，请使用 `evalf`。
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: SymPy can evaluate floating point expressions to arbitrary precision. By default,
    15 digits of precision are used, but you can pass any number as the argument to
    `evalf`. Let’s compute the first 100 digits of \(\pi\).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 可以将浮点表达式计算到任意精度。默认使用 15 位数字精度，但您可以将任何数字作为 `evalf` 的参数传递。让我们计算 \(\pi\)
    的前 100 位小数。
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To numerically evaluate an expression with a Symbol at a point, we might use
    `subs` followed by `evalf`, but it is more efficient and numerically stable to
    pass the substitution to `evalf` using the `subs` flag, which takes a dictionary
    of `Symbol: point` pairs.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '要在点处使用符号评估表达式的数值表达式，我们可以使用 `subs`，然后使用 `evalf`，但将替换传递给 `evalf` 使用 `subs` 标志更有效和数值稳定，该标志接受
    `Symbol: point` 对的字典。'
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sometimes there are roundoff errors smaller than the desired precision that
    remain after an expression is evaluated. Such numbers can be removed at the user’s
    discretion by setting the `chop` flag to True.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在求值表达式后，可能会保留比所需精度小的舍入误差。可以通过将 `chop` 标志设置为 `True`，由用户自行决定是否移除这些数字。
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`lambdify`'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`lambdify`'
- en: '`subs` and `evalf` are good if you want to do simple evaluation, but if you
    intend to evaluate an expression at many points, there are more efficient ways.
    For example, if you wanted to evaluate an expression at a thousand points, using
    SymPy would be far slower than it needs to be, especially if you only care about
    machine precision. Instead, you should use libraries like [NumPy](https://numpy.org/)
    and [SciPy](https://scipy.org/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算在许多点评估表达式，则 `subs` 和 `evalf` 很好用。但如果您打算在一千个点评估表达式，则使用 SymPy 比必要的更慢，特别是如果您只关心机器精度。相反，您应该使用像
    [NumPy](https://numpy.org/) 和 [SciPy](https://scipy.org/) 这样的库。
- en: The easiest way to convert a SymPy expression to an expression that can be numerically
    evaluated is to use the `lambdify` function. `lambdify` acts like a `lambda` function,
    except it converts the SymPy names to the names of the given numerical library,
    usually NumPy. For example
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将 SymPy 表达式转换为可以进行数值评估的表达式的最简单方法是使用 `lambdify` 函数。`lambdify` 的功能类似于 `lambda`
    函数，但它将 SymPy 名称转换为给定数值库（通常是 NumPy）的名称。例如
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`lambdify` uses `eval`. Don’t use it on unsanitized input.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambdify` 使用 `eval`。不要在未经过消毒处理的输入上使用它。'
- en: You can use other libraries than NumPy. For example, to use the standard library
    math module, use `"math"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用除 NumPy 之外的其他库。例如，要使用标准库 math 模块，请使用 `"math"`。
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To use lambdify with numerical libraries that it does not know about, pass a
    dictionary of `sympy_name:numerical_function` pairs. For example
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 `lambdify` 不了解的数值库一起使用 `lambdify`，请传递一个 `sympy_name:numerical_function` 对的字典。例如
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
