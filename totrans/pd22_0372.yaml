- en: pandas.DataFrame.merge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Merge DataFrame or named Series objects with a database-style join.
  prefs: []
  type: TYPE_NORMAL
- en: A named Series object is treated as a DataFrame with a single named column.
  prefs: []
  type: TYPE_NORMAL
- en: The join is done on columns or indexes. If joining columns on columns, the DataFrame
    indexes *will be ignored*. Otherwise if joining indexes on indexes or indexes
    on a column or columns, the index will be passed on. When performing a cross merge,
    no column specifications to merge on are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If both key columns contain rows where the key is a null value, those rows will
    be matched against each other. This is different from usual SQL join behaviour
    and can lead to unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**right**DataFrame or named Series'
  prefs: []
  type: TYPE_NORMAL
- en: Object to merge with.
  prefs: []
  type: TYPE_NORMAL
- en: '**how**{‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’'
  prefs: []
  type: TYPE_NORMAL
- en: Type of merge to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'left: use only keys from left frame, similar to a SQL left outer join; preserve
    key order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'right: use only keys from right frame, similar to a SQL right outer join; preserve
    key order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'outer: use union of keys from both frames, similar to a SQL full outer join;
    sort keys lexicographically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inner: use intersection of keys from both frames, similar to a SQL inner join;
    preserve the order of the left keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'cross: creates the cartesian product from both frames, preserves the order
    of the left keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on**label or list'
  prefs: []
  type: TYPE_NORMAL
- en: Column or index level names to join on. These must be found in both DataFrames.
    If on is None and not merging on indexes then this defaults to the intersection
    of the columns in both DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_on**label or list, or array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Column or index level names to join on in the left DataFrame. Can also be an
    array or list of arrays of the length of the left DataFrame. These arrays are
    treated as if they are columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_on**label or list, or array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Column or index level names to join on in the right DataFrame. Can also be an
    array or list of arrays of the length of the right DataFrame. These arrays are
    treated as if they are columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_index**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Use the index from the left DataFrame as the join key(s). If it is a MultiIndex,
    the number of keys in the other DataFrame (either the index or a number of columns)
    must match the number of levels.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_index**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Use the index from the right DataFrame as the join key. Same caveats as left_index.
  prefs: []
  type: TYPE_NORMAL
- en: '**sort**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Sort the join keys lexicographically in the result DataFrame. If False, the
    order of the join keys depends on the join type (how keyword).
  prefs: []
  type: TYPE_NORMAL
- en: '**suffixes**list-like, default is (“_x”, “_y”)'
  prefs: []
  type: TYPE_NORMAL
- en: A length-2 sequence where each element is optionally a string indicating the
    suffix to add to overlapping column names in left and right respectively. Pass
    a value of None instead of a string to indicate that the column name from left
    or right should be left as-is, with no suffix. At least one of the values must
    not be None.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If False, avoid copy if possible.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The copy keyword will change behavior in pandas 3.0. [Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    will be enabled by default, which means that all methods with a copy keyword will
    use a lazy copy mechanism to defer the copy and ignore the copy keyword. The copy
    keyword will be removed in a future version of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: You can already get the future behavior and improvements through enabling copy
    on write `pd.options.mode.copy_on_write = True`
  prefs: []
  type: TYPE_NORMAL
- en: '**indicator**bool or str, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If True, adds a column to the output DataFrame called “_merge” with information
    on the source of each row. The column can be given a different name by providing
    a string argument. The column will have a Categorical type with the value of “left_only”
    for observations whose merge key only appears in the left DataFrame, “right_only”
    for observations whose merge key only appears in the right DataFrame, and “both”
    if the observation’s merge key is found in both DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '**validate**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If specified, checks if merge is of specified type.
  prefs: []
  type: TYPE_NORMAL
- en: '“one_to_one” or “1:1”: check if merge keys are unique in both left and right
    datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“one_to_many” or “1:m”: check if merge keys are unique in left dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“many_to_one” or “m:1”: check if merge keys are unique in right dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“many_to_many” or “m:m”: allowed, but does not result in checks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: A DataFrame of the two merged objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_ordered`](pandas.merge_ordered.html#pandas.merge_ordered "pandas.merge_ordered")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge with optional filling/interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_asof`](pandas.merge_asof.html#pandas.merge_asof "pandas.merge_asof")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge on nearest keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")'
  prefs: []
  type: TYPE_NORMAL
- en: Similar method using indices.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Merge df1 and df2 on the lkey and rkey columns. The value columns have the default
    suffixes, _x and _y, appended.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Merge DataFrames df1 and df2 with specified left and right suffixes appended
    to any overlapping columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Merge DataFrames df1 and df2, but raise an exception if the DataFrames have
    any overlapping columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
