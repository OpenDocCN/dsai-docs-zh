- en: scipy.fft.dct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.dct.html#scipy.fft.dct](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.dct.html#scipy.fft.dct)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return the Discrete Cosine Transform of arbitrary type sequence x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**type**{1, 2, 3, 4}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the DCT (see Notes). Default type is 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transform. If `n < x.shape[axis]`, *x* is truncated. If `n > x.shape[axis]`,
    *x* is zero-padded. The default results in `n = x.shape[axis]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the dct is computed; the default is over the last axis (i.e.,
    `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see Notes). Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**orthogonalize**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use the orthogonalized DCT variant (see Notes). Defaults to `True`
    when `norm="ortho"` and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray of real'
  prefs: []
  type: TYPE_NORMAL
- en: The transformed input array.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`idct`](scipy.fft.idct.html#scipy.fft.idct "scipy.fft.idct")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse DCT
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For a single dimension array `x`, `dct(x, norm='ortho')` is equal to MATLAB
    `dct(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For `type in {1, 2, 3}`, `norm="ortho"` breaks the direct correspondence with
    the direct Fourier transform. To recover it you must specify `orthogonalize=False`.
  prefs: []
  type: TYPE_NORMAL
- en: For `norm="ortho"` both the [`dct`](#scipy.fft.dct "scipy.fft.dct") and [`idct`](scipy.fft.idct.html#scipy.fft.idct
    "scipy.fft.idct") are scaled by the same overall factor in both directions. By
    default, the transform is also orthogonalized which for types 1, 2 and 3 means
    the transform definition is modified to give orthogonality of the DCT matrix (see
    below).
  prefs: []
  type: TYPE_NORMAL
- en: For `norm="backward"`, there is no scaling on [`dct`](#scipy.fft.dct "scipy.fft.dct")
    and the [`idct`](scipy.fft.idct.html#scipy.fft.idct "scipy.fft.idct") is scaled
    by `1/N` where `N` is the “logical” size of the DCT. For `norm="forward"` the
    `1/N` normalization is applied to the forward [`dct`](#scipy.fft.dct "scipy.fft.dct")
    instead and the [`idct`](scipy.fft.idct.html#scipy.fft.idct "scipy.fft.idct")
    is unnormalized.
  prefs: []
  type: TYPE_NORMAL
- en: There are, theoretically, 8 types of the DCT, only the first 4 types are implemented
    in SciPy.’The’ DCT generally refers to DCT type 2, and ‘the’ Inverse DCT generally
    refers to DCT type 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type I**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-I; we use the following (for `norm="backward"`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = x_0 + (-1)^k x_{N-1} + 2 \sum_{n=1}^{N-2} x_n \cos\left( \frac{\pi k
    n}{N-1} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `orthogonalize=True`, `x[0]` and `x[N-1]` are multiplied by a scaling factor
    of \(\sqrt{2}\), and `y[0]` and `y[N-1]` are divided by \(\sqrt{2}\). When combined
    with `norm="ortho"`, this makes the corresponding matrix of coefficients orthonormal
    (`O @ O.T = np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The DCT-I is only supported for input size > 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type II**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-II; we use the following (for `norm="backward"`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \cos\left(\frac{\pi k(2n+1)}{2N} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `orthogonalize=True`, `y[0]` is divided by \(\sqrt{2}\) which, when combined
    with `norm="ortho"`, makes the corresponding matrix of coefficients orthonormal
    (`O @ O.T = np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: '**Type III**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions, we use the following (for `norm="backward"`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = x_0 + 2 \sum_{n=1}^{N-1} x_n \cos\left(\frac{\pi(2k+1)n}{2N}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If `orthogonalize=True`, `x[0]` terms are multiplied by \(\sqrt{2}\) which,
    when combined with `norm="ortho"`, makes the corresponding matrix of coefficients
    orthonormal (`O @ O.T = np.eye(N)`).
  prefs: []
  type: TYPE_NORMAL
- en: The (unnormalized) DCT-III is the inverse of the (unnormalized) DCT-II, up to
    a factor *2N*. The orthonormalized DCT-III is exactly the inverse of the orthonormalized
    DCT-II.
  prefs: []
  type: TYPE_NORMAL
- en: '**Type IV**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several definitions of the DCT-IV; we use the following (for `norm="backward"`)
  prefs: []
  type: TYPE_NORMAL
- en: \[y_k = 2 \sum_{n=0}^{N-1} x_n \cos\left(\frac{\pi(2k+1)(2n+1)}{4N} \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: '`orthogonalize` has no effect here, as the DCT-IV matrix is already orthogonal
    up to a scale factor of `2N`.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: ‘A Fast Cosine Transform in One and Two Dimensions’, by J. Makhoul, *IEEE Transactions
    on acoustics, speech and signal processing* vol. 28(1), pp. 27-34, [DOI:10.1109/TASSP.1980.1163351](https://doi.org/10.1109/TASSP.1980.1163351)
    (1980).
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Discrete cosine transform”, [https://en.wikipedia.org/wiki/Discrete_cosine_transform](https://en.wikipedia.org/wiki/Discrete_cosine_transform)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The Type 1 DCT is equivalent to the FFT (though faster) for real, even-symmetrical
    inputs. The output is also real and even-symmetrical. Half of the FFT input is
    used to generate half of the FFT output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
