["```py\nIn [1]: data = {\n ...:   \"value\": range(12),\n ...:   \"variable\": [\"A\"] * 3 + [\"B\"] * 3 + [\"C\"] * 3 + [\"D\"] * 3,\n ...:   \"date\": pd.to_datetime([\"2020-01-03\", \"2020-01-04\", \"2020-01-05\"] * 4)\n ...: }\n ...: \n\nIn [2]: df = pd.DataFrame(data) \n```", "```py\nIn [3]: pivoted = df.pivot(index=\"date\", columns=\"variable\", values=\"value\")\n\nIn [4]: pivoted\nOut[4]: \nvariable    A  B  C   D\ndate \n2020-01-03  0  3  6   9\n2020-01-04  1  4  7  10\n2020-01-05  2  5  8  11 \n```", "```py\nIn [5]: df[\"value2\"] = df[\"value\"] * 2\n\nIn [6]: pivoted = df.pivot(index=\"date\", columns=\"variable\")\n\nIn [7]: pivoted\nOut[7]: \n value           value2 \nvariable       A  B  C   D      A   B   C   D\ndate \n2020-01-03     0  3  6   9      0   6  12  18\n2020-01-04     1  4  7  10      2   8  14  20\n2020-01-05     2  5  8  11      4  10  16  22 \n```", "```py\nIn [8]: pivoted[\"value2\"]\nOut[8]: \nvariable    A   B   C   D\ndate \n2020-01-03  0   6  12  18\n2020-01-04  2   8  14  20\n2020-01-05  4  10  16  22 \n```", "```py\nIn [9]: import datetime\n\nIn [10]: df = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 6,\n ....:        \"B\": [\"A\", \"B\", \"C\"] * 8,\n ....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 4,\n ....:        \"D\": np.random.randn(24),\n ....:        \"E\": np.random.randn(24),\n ....:        \"F\": [datetime.datetime(2013, i, 1) for i in range(1, 13)]\n ....:        + [datetime.datetime(2013, i, 15) for i in range(1, 13)],\n ....:    }\n ....: )\n ....: \n\nIn [11]: df\nOut[11]: \n A  B    C         D         E          F\n0     one  A  foo  0.469112  0.404705 2013-01-01\n1     one  B  foo -0.282863  0.577046 2013-02-01\n2     two  C  foo -1.509059 -1.715002 2013-03-01\n3   three  A  bar -1.135632 -1.039268 2013-04-01\n4     one  B  bar  1.212112 -0.370647 2013-05-01\n..    ... ..  ...       ...       ...        ...\n19  three  B  foo -1.087401 -0.472035 2013-08-15\n20    one  C  foo -0.673690 -0.013960 2013-09-15\n21    one  A  bar  0.113648 -0.362543 2013-10-15\n22    two  B  bar -1.478427 -0.006154 2013-11-15\n23  three  C  bar  0.524988 -0.923061 2013-12-15\n\n[24 rows x 6 columns]\n\nIn [12]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[12]: \nC             bar       foo\nA     B \none   A -0.995460  0.595334\n B  0.393570 -0.494817\n C  0.196903 -0.767769\nthree A -0.431886       NaN\n B       NaN -1.065818\n C  0.798396       NaN\ntwo   A       NaN  0.197720\n B -0.986678       NaN\n C       NaN -1.274317\n\nIn [13]: pd.pivot_table(\n ....:    df, values=[\"D\", \"E\"],\n ....:    index=[\"B\"],\n ....:    columns=[\"A\", \"C\"],\n ....:    aggfunc=\"sum\",\n ....: )\n ....: \nOut[13]: \n D                      ...         E \nA       one               three  ...     three      two \nC       bar       foo       bar  ...       foo      bar       foo\nB                                ... \nA -1.990921  1.190667 -0.863772  ...       NaN      NaN -1.067650\nB  0.787140 -0.989634       NaN  ...  0.372851  1.63741       NaN\nC  0.393806 -1.535539  1.596791  ...       NaN      NaN -3.491906\n\n[3 rows x 12 columns]\n\nIn [14]: pd.pivot_table(\n ....:    df, values=\"E\",\n ....:    index=[\"B\", \"C\"],\n ....:    columns=[\"A\"],\n ....:    aggfunc=[\"sum\", \"mean\"],\n ....: )\n ....: \nOut[14]: \n sum                          mean \nA           one     three       two       one     three       two\nB C \nA bar -0.471593 -2.008182       NaN -0.235796 -1.004091       NaN\n foo  0.761726       NaN -1.067650  0.380863       NaN -0.533825\nB bar -1.665170       NaN  1.637410 -0.832585       NaN  0.818705\n foo -0.097554  0.372851       NaN -0.048777  0.186425       NaN\nC bar -0.744154 -2.392449       NaN -0.372077 -1.196224       NaN\n foo  1.061810       NaN -3.491906  0.530905       NaN -1.745953 \n```", "```py\nIn [15]: pd.pivot_table(df[[\"A\", \"B\", \"C\", \"D\", \"E\"]], index=[\"A\", \"B\"], columns=[\"C\"])\nOut[15]: \n D                   E \nC             bar       foo       bar       foo\nA     B \none   A -0.995460  0.595334 -0.235796  0.380863\n B  0.393570 -0.494817 -0.832585 -0.048777\n C  0.196903 -0.767769 -0.372077  0.530905\nthree A -0.431886       NaN -1.004091       NaN\n B       NaN -1.065818       NaN  0.186425\n C  0.798396       NaN -1.196224       NaN\ntwo   A       NaN  0.197720       NaN -0.533825\n B -0.986678       NaN  0.818705       NaN\n C       NaN -1.274317       NaN -1.745953 \n```", "```py\nIn [16]: pd.pivot_table(df, values=\"D\", index=pd.Grouper(freq=\"ME\", key=\"F\"), columns=\"C\")\nOut[16]: \nC                bar       foo\nF \n2013-01-31       NaN  0.595334\n2013-02-28       NaN -0.494817\n2013-03-31       NaN -1.274317\n2013-04-30 -0.431886       NaN\n2013-05-31  0.393570       NaN\n2013-06-30  0.196903       NaN\n2013-07-31       NaN  0.197720\n2013-08-31       NaN -1.065818\n2013-09-30       NaN -0.767769\n2013-10-31 -0.995460       NaN\n2013-11-30 -0.986678       NaN\n2013-12-31  0.798396       NaN \n```", "```py\nIn [17]: table = df.pivot_table(\n ....:    index=[\"A\", \"B\"],\n ....:    columns=\"C\",\n ....:    values=[\"D\", \"E\"],\n ....:    margins=True,\n ....:    aggfunc=\"std\"\n ....: )\n ....: \n\nIn [18]: table\nOut[18]: \n D                             E \nC             bar       foo       All       bar       foo       All\nA     B \none   A  1.568517  0.178504  1.293926  0.179247  0.033718  0.371275\n B  1.157593  0.299748  0.860059  0.653280  0.885047  0.779837\n C  0.523425  0.133049  0.638297  1.111310  0.770555  0.938819\nthree A  0.995247       NaN  0.995247  0.049748       NaN  0.049748\n B       NaN  0.030522  0.030522       NaN  0.931203  0.931203\n C  0.386657       NaN  0.386657  0.386312       NaN  0.386312\ntwo   A       NaN  0.111032  0.111032       NaN  1.146201  1.146201\n B  0.695438       NaN  0.695438  1.166526       NaN  1.166526\n C       NaN  0.331975  0.331975       NaN  0.043771  0.043771\nAll      1.014073  0.713941  0.871016  0.881376  0.984017  0.923568 \n```", "```py\nIn [19]: table.stack(future_stack=True)\nOut[19]: \n D         E\nA   B C \none A bar  1.568517  0.179247\n foo  0.178504  0.033718\n All  1.293926  0.371275\n B bar  1.157593  0.653280\n foo  0.299748  0.885047\n...             ...       ...\ntwo C foo  0.331975  0.043771\n All  0.331975  0.043771\nAll   bar  1.014073  0.881376\n foo  0.713941  0.984017\n All  0.871016  0.923568\n\n[30 rows x 2 columns] \n```", "```py\nIn [20]: tuples = [\n ....:   [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n ....:   [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n ....: ]\n ....: \n\nIn [21]: index = pd.MultiIndex.from_arrays(tuples, names=[\"first\", \"second\"])\n\nIn [22]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"])\n\nIn [23]: df2 = df[:4]\n\nIn [24]: df2\nOut[24]: \n A         B\nfirst second \nbar   one     0.895717  0.805244\n two    -1.206412  2.565646\nbaz   one     1.431256  1.340309\n two    -1.170299 -0.226169 \n```", "```py\nIn [25]: stacked = df2.stack(future_stack=True)\n\nIn [26]: stacked\nOut[26]: \nfirst  second \nbar    one     A    0.895717\n B    0.805244\n two     A   -1.206412\n B    2.565646\nbaz    one     A    1.431256\n B    1.340309\n two     A   -1.170299\n B   -0.226169\ndtype: float64 \n```", "```py\nIn [27]: stacked.unstack()\nOut[27]: \n A         B\nfirst second \nbar   one     0.895717  0.805244\n two    -1.206412  2.565646\nbaz   one     1.431256  1.340309\n two    -1.170299 -0.226169\n\nIn [28]: stacked.unstack(1)\nOut[28]: \nsecond        one       two\nfirst \nbar   A  0.895717 -1.206412\n B  0.805244  2.565646\nbaz   A  1.431256 -1.170299\n B  1.340309 -0.226169\n\nIn [29]: stacked.unstack(0)\nOut[29]: \nfirst          bar       baz\nsecond \none    A  0.895717  1.431256\n B  0.805244  1.340309\ntwo    A -1.206412 -1.170299\n B  2.565646 -0.226169 \n```", "```py\nIn [30]: stacked.unstack(\"second\")\nOut[30]: \nsecond        one       two\nfirst \nbar   A  0.895717 -1.206412\n B  0.805244  2.565646\nbaz   A  1.431256 -1.170299\n B  1.340309 -0.226169 \n```", "```py\nIn [31]: index = pd.MultiIndex.from_product([[2, 1], [\"a\", \"b\"]])\n\nIn [32]: df = pd.DataFrame(np.random.randn(4), index=index, columns=[\"A\"])\n\nIn [33]: df\nOut[33]: \n A\n2 a -1.413681\n b  1.607920\n1 a  1.024180\n b  0.569605\n\nIn [34]: all(df.unstack().stack(future_stack=True) == df.sort_index())\nOut[34]: True \n```", "```py\nIn [35]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\", \"long\"),\n ....:        (\"B\", \"cat\", \"long\"),\n ....:        (\"A\", \"dog\", \"short\"),\n ....:        (\"B\", \"dog\", \"short\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\", \"hair_length\"],\n ....: )\n ....: \n\nIn [36]: df = pd.DataFrame(np.random.randn(4, 4), columns=columns)\n\nIn [37]: df\nOut[37]: \nexp                 A         B         A         B\nanimal            cat       cat       dog       dog\nhair_length      long      long     short     short\n0            0.875906 -2.211372  0.974466 -2.006747\n1           -0.410001 -0.078638  0.545952 -1.219217\n2           -1.226825  0.769804 -1.281247 -0.727707\n3           -0.121306 -0.097883  0.695775  0.341734\n\nIn [38]: df.stack(level=[\"animal\", \"hair_length\"], future_stack=True)\nOut[38]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\n# df.stack(level=['animal', 'hair_length'], future_stack=True)\n# from above is equivalent to:\nIn [39]: df.stack(level=[1, 2], future_stack=True)\nOut[39]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\nIn [40]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\"),\n ....:        (\"B\", \"dog\"),\n ....:        (\"B\", \"cat\"),\n ....:        (\"A\", \"dog\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\"],\n ....: )\n ....: \n\nIn [41]: index = pd.MultiIndex.from_product(\n ....:    [(\"bar\", \"baz\", \"foo\", \"qux\"), (\"one\", \"two\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [42]: df = pd.DataFrame(np.random.randn(8, 4), index=index, columns=columns)\n\nIn [43]: df3 = df.iloc[[0, 1, 4, 7], [1, 2]]\n\nIn [44]: df3\nOut[44]: \nexp                  B \nanimal             dog       cat\nfirst second \nbar   one    -1.110336 -0.619976\n two     0.687738  0.176444\nfoo   one     1.314232  0.690579\nqux   two     0.380396  0.084844\n\nIn [45]: df3.unstack()\nOut[45]: \nexp            B \nanimal       dog                 cat \nsecond       one       two       one       two\nfirst \nbar    -1.110336  0.687738 -0.619976  0.176444\nfoo     1.314232       NaN  0.690579       NaN\nqux          NaN  0.380396       NaN  0.084844 \n```", "```py\nIn [46]: df3.unstack(fill_value=-1e9)\nOut[46]: \nexp                B \nanimal           dog                         cat \nsecond           one           two           one           two\nfirst \nbar    -1.110336e+00  6.877384e-01 -6.199759e-01  1.764443e-01\nfoo     1.314232e+00 -1.000000e+09  6.905793e-01 -1.000000e+09\nqux    -1.000000e+09  3.803956e-01 -1.000000e+09  8.484421e-02 \n```", "```py\nIn [47]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    }\n ....: )\n ....: \n\nIn [48]: cheese\nOut[48]: \n first last  height  weight\n0  John  Doe     5.5     130\n1  Mary   Bo     6.0     150\n\nIn [49]: cheese.melt(id_vars=[\"first\", \"last\"])\nOut[49]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [50]: cheese.melt(id_vars=[\"first\", \"last\"], var_name=\"quantity\")\nOut[50]: \n first last quantity  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0 \n```", "```py\nIn [51]: index = pd.MultiIndex.from_tuples([(\"person\", \"A\"), (\"person\", \"B\")])\n\nIn [52]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    },\n ....:    index=index,\n ....: )\n ....: \n\nIn [53]: cheese\nOut[53]: \n first last  height  weight\nperson A  John  Doe     5.5     130\n B  Mary   Bo     6.0     150\n\nIn [54]: cheese.melt(id_vars=[\"first\", \"last\"])\nOut[54]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [55]: cheese.melt(id_vars=[\"first\", \"last\"], ignore_index=False)\nOut[55]: \n first last variable  value\nperson A  John  Doe   height    5.5\n B  Mary   Bo   height    6.0\n A  John  Doe   weight  130.0\n B  Mary   Bo   weight  150.0 \n```", "```py\nIn [56]: dft = pd.DataFrame(\n ....:    {\n ....:        \"A1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n ....:        \"A1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n ....:        \"B1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n ....:        \"B1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n ....:        \"X\": dict(zip(range(3), np.random.randn(3))),\n ....:    }\n ....: )\n ....: \n\nIn [57]: dft[\"id\"] = dft.index\n\nIn [58]: dft\nOut[58]: \n A1970 A1980  B1970  B1980         X  id\n0     a     d    2.5    3.2  1.519970   0\n1     b     e    1.2    1.3 -0.493662   1\n2     c     f    0.7    0.1  0.600178   2\n\nIn [59]: pd.wide_to_long(dft, [\"A\", \"B\"], i=\"id\", j=\"year\")\nOut[59]: \n X  A    B\nid year \n0  1970  1.519970  a  2.5\n1  1970 -0.493662  b  1.2\n2  1970  0.600178  c  0.7\n0  1980  1.519970  d  3.2\n1  1980 -0.493662  e  1.3\n2  1980  0.600178  f  0.1 \n```", "```py\nIn [60]: df = pd.DataFrame({\"key\": list(\"bbacab\"), \"data1\": range(6)})\n\nIn [61]: pd.get_dummies(df[\"key\"])\nOut[61]: \n a      b      c\n0  False   True  False\n1  False   True  False\n2   True  False  False\n3  False  False   True\n4   True  False  False\n5  False   True  False\n\nIn [62]: df[\"key\"].str.get_dummies()\nOut[62]: \n a  b  c\n0  0  1  0\n1  0  1  0\n2  1  0  0\n3  0  0  1\n4  1  0  0\n5  0  1  0 \n```", "```py\nIn [63]: dummies = pd.get_dummies(df[\"key\"], prefix=\"key\")\n\nIn [64]: dummies\nOut[64]: \n key_a  key_b  key_c\n0  False   True  False\n1  False   True  False\n2   True  False  False\n3  False  False   True\n4   True  False  False\n5  False   True  False\n\nIn [65]: df[[\"data1\"]].join(dummies)\nOut[65]: \n data1  key_a  key_b  key_c\n0      0  False   True  False\n1      1  False   True  False\n2      2   True  False  False\n3      3  False  False   True\n4      4   True  False  False\n5      5  False   True  False \n```", "```py\nIn [66]: values = np.random.randn(10)\n\nIn [67]: values\nOut[67]: \narray([ 0.2742,  0.1329, -0.0237,  2.4102,  1.4505,  0.2061, -0.2519,\n -2.2136,  1.0633,  1.2661])\n\nIn [68]: bins = [0, 0.2, 0.4, 0.6, 0.8, 1]\n\nIn [69]: pd.get_dummies(pd.cut(values, bins))\nOut[69]: \n (0.0, 0.2]  (0.2, 0.4]  (0.4, 0.6]  (0.6, 0.8]  (0.8, 1.0]\n0       False        True       False       False       False\n1        True       False       False       False       False\n2       False       False       False       False       False\n3       False       False       False       False       False\n4       False       False       False       False       False\n5       False        True       False       False       False\n6       False       False       False       False       False\n7       False       False       False       False       False\n8       False       False       False       False       False\n9       False       False       False       False       False \n```", "```py\nIn [70]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"a\"], \"B\": [\"c\", \"c\", \"b\"], \"C\": [1, 2, 3]})\n\nIn [71]: pd.get_dummies(df)\nOut[71]: \n C    A_a    A_b    B_b    B_c\n0  1   True  False  False   True\n1  2  False   True  False   True\n2  3   True  False   True  False \n```", "```py\nIn [72]: pd.get_dummies(df, columns=[\"A\"])\nOut[72]: \n B  C    A_a    A_b\n0  c  1   True  False\n1  c  2  False   True\n2  b  3   True  False \n```", "```py\nIn [73]: simple = pd.get_dummies(df, prefix=\"new_prefix\")\n\nIn [74]: simple\nOut[74]: \n C  new_prefix_a  new_prefix_b  new_prefix_b  new_prefix_c\n0  1          True         False         False          True\n1  2         False          True         False          True\n2  3          True         False          True         False\n\nIn [75]: from_list = pd.get_dummies(df, prefix=[\"from_A\", \"from_B\"])\n\nIn [76]: from_list\nOut[76]: \n C  from_A_a  from_A_b  from_B_b  from_B_c\n0  1      True     False     False      True\n1  2     False      True     False      True\n2  3      True     False      True     False\n\nIn [77]: from_dict = pd.get_dummies(df, prefix={\"B\": \"from_B\", \"A\": \"from_A\"})\n\nIn [78]: from_dict\nOut[78]: \n C  from_A_a  from_A_b  from_B_b  from_B_c\n0  1      True     False     False      True\n1  2     False      True     False      True\n2  3      True     False      True     False \n```", "```py\nIn [79]: s = pd.Series(list(\"abcaa\"))\n\nIn [80]: pd.get_dummies(s)\nOut[80]: \n a      b      c\n0   True  False  False\n1  False   True  False\n2  False  False   True\n3   True  False  False\n4   True  False  False\n\nIn [81]: pd.get_dummies(s, drop_first=True)\nOut[81]: \n b      c\n0  False  False\n1   True  False\n2  False   True\n3  False  False\n4  False  False \n```", "```py\nIn [82]: df = pd.DataFrame({\"A\": list(\"aaaaa\"), \"B\": list(\"ababc\")})\n\nIn [83]: pd.get_dummies(df)\nOut[83]: \n A_a    B_a    B_b    B_c\n0  True   True  False  False\n1  True  False   True  False\n2  True   True  False  False\n3  True  False   True  False\n4  True  False  False   True\n\nIn [84]: pd.get_dummies(df, drop_first=True)\nOut[84]: \n B_b    B_c\n0  False  False\n1   True  False\n2  False  False\n3   True  False\n4  False   True \n```", "```py\nIn [85]: df = pd.DataFrame({\"A\": list(\"abc\"), \"B\": [1.1, 2.2, 3.3]})\n\nIn [86]: pd.get_dummies(df, dtype=np.float32).dtypes\nOut[86]: \nB      float64\nA_a    float32\nA_b    float32\nA_c    float32\ndtype: object \n```", "```py\nIn [87]: df = pd.DataFrame({\"prefix_a\": [0, 1, 0], \"prefix_b\": [1, 0, 1]})\n\nIn [88]: df\nOut[88]: \n prefix_a  prefix_b\n0         0         1\n1         1         0\n2         0         1\n\nIn [89]: pd.from_dummies(df, sep=\"_\")\nOut[89]: \n prefix\n0      b\n1      a\n2      b \n```", "```py\nIn [90]: df = pd.DataFrame({\"prefix_a\": [0, 1, 0]})\n\nIn [91]: df\nOut[91]: \n prefix_a\n0         0\n1         1\n2         0\n\nIn [92]: pd.from_dummies(df, sep=\"_\", default_category=\"b\")\nOut[92]: \n prefix\n0      b\n1      a\n2      b \n```", "```py\nIn [93]: keys = [\"panda1\", \"panda2\", \"panda3\"]\n\nIn [94]: values = [[\"eats\", \"shoots\"], [\"shoots\", \"leaves\"], [\"eats\", \"leaves\"]]\n\nIn [95]: df = pd.DataFrame({\"keys\": keys, \"values\": values})\n\nIn [96]: df\nOut[96]: \n keys            values\n0  panda1    [eats, shoots]\n1  panda2  [shoots, leaves]\n2  panda3    [eats, leaves]\n\nIn [97]: df[\"values\"].explode()\nOut[97]: \n0      eats\n0    shoots\n1    shoots\n1    leaves\n2      eats\n2    leaves\nName: values, dtype: object \n```", "```py\nIn [98]: df.explode(\"values\")\nOut[98]: \n keys  values\n0  panda1    eats\n0  panda1  shoots\n1  panda2  shoots\n1  panda2  leaves\n2  panda3    eats\n2  panda3  leaves \n```", "```py\nIn [99]: s = pd.Series([[1, 2, 3], \"foo\", [], [\"a\", \"b\"]])\n\nIn [100]: s\nOut[100]: \n0    [1, 2, 3]\n1          foo\n2           []\n3       [a, b]\ndtype: object\n\nIn [101]: s.explode()\nOut[101]: \n0      1\n0      2\n0      3\n1    foo\n2    NaN\n3      a\n3      b\ndtype: object \n```", "```py\nIn [102]: df = pd.DataFrame([{\"var1\": \"a,b,c\", \"var2\": 1}, {\"var1\": \"d,e,f\", \"var2\": 2}])\n\nIn [103]: df.assign(var1=df.var1.str.split(\",\")).explode(\"var1\")\nOut[103]: \n var1  var2\n0    a     1\n0    b     1\n0    c     1\n1    d     2\n1    e     2\n1    f     2 \n```", "```py\nIn [104]: a = np.array([\"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\"], dtype=object)\n\nIn [105]: b = np.array([\"one\", \"one\", \"two\", \"one\", \"two\", \"one\"], dtype=object)\n\nIn [106]: c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\"], dtype=object)\n\nIn [107]: pd.crosstab(a, [b, c], rownames=[\"a\"], colnames=[\"b\", \"c\"])\nOut[107]: \nb    one        two \nc   dull shiny dull shiny\na \nbar    1     0    0     1\nfoo    2     1    1     0 \n```", "```py\nIn [108]: df = pd.DataFrame(\n .....:    {\"A\": [1, 2, 2, 2, 2], \"B\": [3, 3, 4, 4, 4], \"C\": [1, 1, np.nan, 1, 1]}\n .....: )\n .....: \n\nIn [109]: df\nOut[109]: \n A  B    C\n0  1  3  1.0\n1  2  3  1.0\n2  2  4  NaN\n3  2  4  1.0\n4  2  4  1.0\n\nIn [110]: pd.crosstab(df[\"A\"], df[\"B\"])\nOut[110]: \nB  3  4\nA \n1  1  0\n2  1  3 \n```", "```py\nIn [111]: foo = pd.Categorical([\"a\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [112]: bar = pd.Categorical([\"d\", \"e\"], categories=[\"d\", \"e\", \"f\"])\n\nIn [113]: pd.crosstab(foo, bar)\nOut[113]: \ncol_0  d  e\nrow_0 \na      1  0\nb      0  1 \n```", "```py\nIn [114]: pd.crosstab(foo, bar, dropna=False)\nOut[114]: \ncol_0  d  e  f\nrow_0 \na      1  0  0\nb      0  1  0\nc      0  0  0 \n```", "```py\nIn [115]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=True)\nOut[115]: \nB    3    4\nA \n1  0.2  0.0\n2  0.2  0.6 \n```", "```py\nIn [116]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=\"columns\")\nOut[116]: \nB    3    4\nA \n1  0.5  0.0\n2  0.5  1.0 \n```", "```py\nIn [117]: pd.crosstab(df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\")\nOut[117]: \nB    3    4\nA \n1  1.0  NaN\n2  1.0  2.0 \n```", "```py\nIn [118]: pd.crosstab(\n .....:    df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\", normalize=True, margins=True\n .....: )\n .....: \nOut[118]: \nB       3    4   All\nA \n1    0.25  0.0  0.25\n2    0.25  0.5  0.75\nAll  0.50  0.5  1.00 \n```", "```py\nIn [119]: ages = np.array([10, 15, 13, 12, 23, 25, 28, 59, 60])\n\nIn [120]: pd.cut(ages, bins=3)\nOut[120]: \n[(9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (26.667, 43.333], (43.333, 60.0], (43.333, 60.0]]\nCategories (3, interval[float64, right]): [(9.95, 26.667] < (26.667, 43.333] < (43.333, 60.0]] \n```", "```py\nIn [121]: pd.cut(ages, bins=[0, 18, 35, 70])\nOut[121]: \n[(0, 18], (0, 18], (0, 18], (0, 18], (18, 35], (18, 35], (18, 35], (35, 70], (35, 70]]\nCategories (3, interval[int64, right]): [(0, 18] < (18, 35] < (35, 70]] \n```", "```py\nIn [122]: pd.cut(ages, bins=pd.IntervalIndex.from_breaks([0, 40, 70]))\nOut[122]: \n[(0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (40, 70], (40, 70]]\nCategories (2, interval[int64, right]): [(0, 40] < (40, 70]] \n```", "```py\nIn [123]: x = pd.Series([\"A\", \"A\", np.nan, \"B\", 3.14, np.inf])\n\nIn [124]: x\nOut[124]: \n0       A\n1       A\n2     NaN\n3       B\n4    3.14\n5     inf\ndtype: object\n\nIn [125]: labels, uniques = pd.factorize(x)\n\nIn [126]: labels\nOut[126]: array([ 0,  0, -1,  1,  2,  3])\n\nIn [127]: uniques\nOut[127]: Index(['A', 'B', 3.14, inf], dtype='object') \n```", "```py\nIn [128]: pd.Categorical(x)\nOut[128]: \n['A', 'A', NaN, 'B', 3.14, inf]\nCategories (4, object): [3.14, inf, 'A', 'B'] \n```", "```py\nIn [1]: data = {\n ...:   \"value\": range(12),\n ...:   \"variable\": [\"A\"] * 3 + [\"B\"] * 3 + [\"C\"] * 3 + [\"D\"] * 3,\n ...:   \"date\": pd.to_datetime([\"2020-01-03\", \"2020-01-04\", \"2020-01-05\"] * 4)\n ...: }\n ...: \n\nIn [2]: df = pd.DataFrame(data) \n```", "```py\nIn [3]: pivoted = df.pivot(index=\"date\", columns=\"variable\", values=\"value\")\n\nIn [4]: pivoted\nOut[4]: \nvariable    A  B  C   D\ndate \n2020-01-03  0  3  6   9\n2020-01-04  1  4  7  10\n2020-01-05  2  5  8  11 \n```", "```py\nIn [5]: df[\"value2\"] = df[\"value\"] * 2\n\nIn [6]: pivoted = df.pivot(index=\"date\", columns=\"variable\")\n\nIn [7]: pivoted\nOut[7]: \n value           value2 \nvariable       A  B  C   D      A   B   C   D\ndate \n2020-01-03     0  3  6   9      0   6  12  18\n2020-01-04     1  4  7  10      2   8  14  20\n2020-01-05     2  5  8  11      4  10  16  22 \n```", "```py\nIn [8]: pivoted[\"value2\"]\nOut[8]: \nvariable    A   B   C   D\ndate \n2020-01-03  0   6  12  18\n2020-01-04  2   8  14  20\n2020-01-05  4  10  16  22 \n```", "```py\nIn [9]: import datetime\n\nIn [10]: df = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 6,\n ....:        \"B\": [\"A\", \"B\", \"C\"] * 8,\n ....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 4,\n ....:        \"D\": np.random.randn(24),\n ....:        \"E\": np.random.randn(24),\n ....:        \"F\": [datetime.datetime(2013, i, 1) for i in range(1, 13)]\n ....:        + [datetime.datetime(2013, i, 15) for i in range(1, 13)],\n ....:    }\n ....: )\n ....: \n\nIn [11]: df\nOut[11]: \n A  B    C         D         E          F\n0     one  A  foo  0.469112  0.404705 2013-01-01\n1     one  B  foo -0.282863  0.577046 2013-02-01\n2     two  C  foo -1.509059 -1.715002 2013-03-01\n3   three  A  bar -1.135632 -1.039268 2013-04-01\n4     one  B  bar  1.212112 -0.370647 2013-05-01\n..    ... ..  ...       ...       ...        ...\n19  three  B  foo -1.087401 -0.472035 2013-08-15\n20    one  C  foo -0.673690 -0.013960 2013-09-15\n21    one  A  bar  0.113648 -0.362543 2013-10-15\n22    two  B  bar -1.478427 -0.006154 2013-11-15\n23  three  C  bar  0.524988 -0.923061 2013-12-15\n\n[24 rows x 6 columns]\n\nIn [12]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[12]: \nC             bar       foo\nA     B \none   A -0.995460  0.595334\n B  0.393570 -0.494817\n C  0.196903 -0.767769\nthree A -0.431886       NaN\n B       NaN -1.065818\n C  0.798396       NaN\ntwo   A       NaN  0.197720\n B -0.986678       NaN\n C       NaN -1.274317\n\nIn [13]: pd.pivot_table(\n ....:    df, values=[\"D\", \"E\"],\n ....:    index=[\"B\"],\n ....:    columns=[\"A\", \"C\"],\n ....:    aggfunc=\"sum\",\n ....: )\n ....: \nOut[13]: \n D                      ...         E \nA       one               three  ...     three      two \nC       bar       foo       bar  ...       foo      bar       foo\nB                                ... \nA -1.990921  1.190667 -0.863772  ...       NaN      NaN -1.067650\nB  0.787140 -0.989634       NaN  ...  0.372851  1.63741       NaN\nC  0.393806 -1.535539  1.596791  ...       NaN      NaN -3.491906\n\n[3 rows x 12 columns]\n\nIn [14]: pd.pivot_table(\n ....:    df, values=\"E\",\n ....:    index=[\"B\", \"C\"],\n ....:    columns=[\"A\"],\n ....:    aggfunc=[\"sum\", \"mean\"],\n ....: )\n ....: \nOut[14]: \n sum                          mean \nA           one     three       two       one     three       two\nB C \nA bar -0.471593 -2.008182       NaN -0.235796 -1.004091       NaN\n foo  0.761726       NaN -1.067650  0.380863       NaN -0.533825\nB bar -1.665170       NaN  1.637410 -0.832585       NaN  0.818705\n foo -0.097554  0.372851       NaN -0.048777  0.186425       NaN\nC bar -0.744154 -2.392449       NaN -0.372077 -1.196224       NaN\n foo  1.061810       NaN -3.491906  0.530905       NaN -1.745953 \n```", "```py\nIn [15]: pd.pivot_table(df[[\"A\", \"B\", \"C\", \"D\", \"E\"]], index=[\"A\", \"B\"], columns=[\"C\"])\nOut[15]: \n D                   E \nC             bar       foo       bar       foo\nA     B \none   A -0.995460  0.595334 -0.235796  0.380863\n B  0.393570 -0.494817 -0.832585 -0.048777\n C  0.196903 -0.767769 -0.372077  0.530905\nthree A -0.431886       NaN -1.004091       NaN\n B       NaN -1.065818       NaN  0.186425\n C  0.798396       NaN -1.196224       NaN\ntwo   A       NaN  0.197720       NaN -0.533825\n B -0.986678       NaN  0.818705       NaN\n C       NaN -1.274317       NaN -1.745953 \n```", "```py\nIn [16]: pd.pivot_table(df, values=\"D\", index=pd.Grouper(freq=\"ME\", key=\"F\"), columns=\"C\")\nOut[16]: \nC                bar       foo\nF \n2013-01-31       NaN  0.595334\n2013-02-28       NaN -0.494817\n2013-03-31       NaN -1.274317\n2013-04-30 -0.431886       NaN\n2013-05-31  0.393570       NaN\n2013-06-30  0.196903       NaN\n2013-07-31       NaN  0.197720\n2013-08-31       NaN -1.065818\n2013-09-30       NaN -0.767769\n2013-10-31 -0.995460       NaN\n2013-11-30 -0.986678       NaN\n2013-12-31  0.798396       NaN \n```", "```py\nIn [17]: table = df.pivot_table(\n ....:    index=[\"A\", \"B\"],\n ....:    columns=\"C\",\n ....:    values=[\"D\", \"E\"],\n ....:    margins=True,\n ....:    aggfunc=\"std\"\n ....: )\n ....: \n\nIn [18]: table\nOut[18]: \n D                             E \nC             bar       foo       All       bar       foo       All\nA     B \none   A  1.568517  0.178504  1.293926  0.179247  0.033718  0.371275\n B  1.157593  0.299748  0.860059  0.653280  0.885047  0.779837\n C  0.523425  0.133049  0.638297  1.111310  0.770555  0.938819\nthree A  0.995247       NaN  0.995247  0.049748       NaN  0.049748\n B       NaN  0.030522  0.030522       NaN  0.931203  0.931203\n C  0.386657       NaN  0.386657  0.386312       NaN  0.386312\ntwo   A       NaN  0.111032  0.111032       NaN  1.146201  1.146201\n B  0.695438       NaN  0.695438  1.166526       NaN  1.166526\n C       NaN  0.331975  0.331975       NaN  0.043771  0.043771\nAll      1.014073  0.713941  0.871016  0.881376  0.984017  0.923568 \n```", "```py\nIn [19]: table.stack(future_stack=True)\nOut[19]: \n D         E\nA   B C \none A bar  1.568517  0.179247\n foo  0.178504  0.033718\n All  1.293926  0.371275\n B bar  1.157593  0.653280\n foo  0.299748  0.885047\n...             ...       ...\ntwo C foo  0.331975  0.043771\n All  0.331975  0.043771\nAll   bar  1.014073  0.881376\n foo  0.713941  0.984017\n All  0.871016  0.923568\n\n[30 rows x 2 columns] \n```", "```py\nIn [1]: data = {\n ...:   \"value\": range(12),\n ...:   \"variable\": [\"A\"] * 3 + [\"B\"] * 3 + [\"C\"] * 3 + [\"D\"] * 3,\n ...:   \"date\": pd.to_datetime([\"2020-01-03\", \"2020-01-04\", \"2020-01-05\"] * 4)\n ...: }\n ...: \n\nIn [2]: df = pd.DataFrame(data) \n```", "```py\nIn [3]: pivoted = df.pivot(index=\"date\", columns=\"variable\", values=\"value\")\n\nIn [4]: pivoted\nOut[4]: \nvariable    A  B  C   D\ndate \n2020-01-03  0  3  6   9\n2020-01-04  1  4  7  10\n2020-01-05  2  5  8  11 \n```", "```py\nIn [5]: df[\"value2\"] = df[\"value\"] * 2\n\nIn [6]: pivoted = df.pivot(index=\"date\", columns=\"variable\")\n\nIn [7]: pivoted\nOut[7]: \n value           value2 \nvariable       A  B  C   D      A   B   C   D\ndate \n2020-01-03     0  3  6   9      0   6  12  18\n2020-01-04     1  4  7  10      2   8  14  20\n2020-01-05     2  5  8  11      4  10  16  22 \n```", "```py\nIn [8]: pivoted[\"value2\"]\nOut[8]: \nvariable    A   B   C   D\ndate \n2020-01-03  0   6  12  18\n2020-01-04  2   8  14  20\n2020-01-05  4  10  16  22 \n```", "```py\nIn [9]: import datetime\n\nIn [10]: df = pd.DataFrame(\n ....:    {\n ....:        \"A\": [\"one\", \"one\", \"two\", \"three\"] * 6,\n ....:        \"B\": [\"A\", \"B\", \"C\"] * 8,\n ....:        \"C\": [\"foo\", \"foo\", \"foo\", \"bar\", \"bar\", \"bar\"] * 4,\n ....:        \"D\": np.random.randn(24),\n ....:        \"E\": np.random.randn(24),\n ....:        \"F\": [datetime.datetime(2013, i, 1) for i in range(1, 13)]\n ....:        + [datetime.datetime(2013, i, 15) for i in range(1, 13)],\n ....:    }\n ....: )\n ....: \n\nIn [11]: df\nOut[11]: \n A  B    C         D         E          F\n0     one  A  foo  0.469112  0.404705 2013-01-01\n1     one  B  foo -0.282863  0.577046 2013-02-01\n2     two  C  foo -1.509059 -1.715002 2013-03-01\n3   three  A  bar -1.135632 -1.039268 2013-04-01\n4     one  B  bar  1.212112 -0.370647 2013-05-01\n..    ... ..  ...       ...       ...        ...\n19  three  B  foo -1.087401 -0.472035 2013-08-15\n20    one  C  foo -0.673690 -0.013960 2013-09-15\n21    one  A  bar  0.113648 -0.362543 2013-10-15\n22    two  B  bar -1.478427 -0.006154 2013-11-15\n23  three  C  bar  0.524988 -0.923061 2013-12-15\n\n[24 rows x 6 columns]\n\nIn [12]: pd.pivot_table(df, values=\"D\", index=[\"A\", \"B\"], columns=[\"C\"])\nOut[12]: \nC             bar       foo\nA     B \none   A -0.995460  0.595334\n B  0.393570 -0.494817\n C  0.196903 -0.767769\nthree A -0.431886       NaN\n B       NaN -1.065818\n C  0.798396       NaN\ntwo   A       NaN  0.197720\n B -0.986678       NaN\n C       NaN -1.274317\n\nIn [13]: pd.pivot_table(\n ....:    df, values=[\"D\", \"E\"],\n ....:    index=[\"B\"],\n ....:    columns=[\"A\", \"C\"],\n ....:    aggfunc=\"sum\",\n ....: )\n ....: \nOut[13]: \n D                      ...         E \nA       one               three  ...     three      two \nC       bar       foo       bar  ...       foo      bar       foo\nB                                ... \nA -1.990921  1.190667 -0.863772  ...       NaN      NaN -1.067650\nB  0.787140 -0.989634       NaN  ...  0.372851  1.63741       NaN\nC  0.393806 -1.535539  1.596791  ...       NaN      NaN -3.491906\n\n[3 rows x 12 columns]\n\nIn [14]: pd.pivot_table(\n ....:    df, values=\"E\",\n ....:    index=[\"B\", \"C\"],\n ....:    columns=[\"A\"],\n ....:    aggfunc=[\"sum\", \"mean\"],\n ....: )\n ....: \nOut[14]: \n sum                          mean \nA           one     three       two       one     three       two\nB C \nA bar -0.471593 -2.008182       NaN -0.235796 -1.004091       NaN\n foo  0.761726       NaN -1.067650  0.380863       NaN -0.533825\nB bar -1.665170       NaN  1.637410 -0.832585       NaN  0.818705\n foo -0.097554  0.372851       NaN -0.048777  0.186425       NaN\nC bar -0.744154 -2.392449       NaN -0.372077 -1.196224       NaN\n foo  1.061810       NaN -3.491906  0.530905       NaN -1.745953 \n```", "```py\nIn [15]: pd.pivot_table(df[[\"A\", \"B\", \"C\", \"D\", \"E\"]], index=[\"A\", \"B\"], columns=[\"C\"])\nOut[15]: \n D                   E \nC             bar       foo       bar       foo\nA     B \none   A -0.995460  0.595334 -0.235796  0.380863\n B  0.393570 -0.494817 -0.832585 -0.048777\n C  0.196903 -0.767769 -0.372077  0.530905\nthree A -0.431886       NaN -1.004091       NaN\n B       NaN -1.065818       NaN  0.186425\n C  0.798396       NaN -1.196224       NaN\ntwo   A       NaN  0.197720       NaN -0.533825\n B -0.986678       NaN  0.818705       NaN\n C       NaN -1.274317       NaN -1.745953 \n```", "```py\nIn [16]: pd.pivot_table(df, values=\"D\", index=pd.Grouper(freq=\"ME\", key=\"F\"), columns=\"C\")\nOut[16]: \nC                bar       foo\nF \n2013-01-31       NaN  0.595334\n2013-02-28       NaN -0.494817\n2013-03-31       NaN -1.274317\n2013-04-30 -0.431886       NaN\n2013-05-31  0.393570       NaN\n2013-06-30  0.196903       NaN\n2013-07-31       NaN  0.197720\n2013-08-31       NaN -1.065818\n2013-09-30       NaN -0.767769\n2013-10-31 -0.995460       NaN\n2013-11-30 -0.986678       NaN\n2013-12-31  0.798396       NaN \n```", "```py\nIn [17]: table = df.pivot_table(\n ....:    index=[\"A\", \"B\"],\n ....:    columns=\"C\",\n ....:    values=[\"D\", \"E\"],\n ....:    margins=True,\n ....:    aggfunc=\"std\"\n ....: )\n ....: \n\nIn [18]: table\nOut[18]: \n D                             E \nC             bar       foo       All       bar       foo       All\nA     B \none   A  1.568517  0.178504  1.293926  0.179247  0.033718  0.371275\n B  1.157593  0.299748  0.860059  0.653280  0.885047  0.779837\n C  0.523425  0.133049  0.638297  1.111310  0.770555  0.938819\nthree A  0.995247       NaN  0.995247  0.049748       NaN  0.049748\n B       NaN  0.030522  0.030522       NaN  0.931203  0.931203\n C  0.386657       NaN  0.386657  0.386312       NaN  0.386312\ntwo   A       NaN  0.111032  0.111032       NaN  1.146201  1.146201\n B  0.695438       NaN  0.695438  1.166526       NaN  1.166526\n C       NaN  0.331975  0.331975       NaN  0.043771  0.043771\nAll      1.014073  0.713941  0.871016  0.881376  0.984017  0.923568 \n```", "```py\nIn [19]: table.stack(future_stack=True)\nOut[19]: \n D         E\nA   B C \none A bar  1.568517  0.179247\n foo  0.178504  0.033718\n All  1.293926  0.371275\n B bar  1.157593  0.653280\n foo  0.299748  0.885047\n...             ...       ...\ntwo C foo  0.331975  0.043771\n All  0.331975  0.043771\nAll   bar  1.014073  0.881376\n foo  0.713941  0.984017\n All  0.871016  0.923568\n\n[30 rows x 2 columns] \n```", "```py\nIn [17]: table = df.pivot_table(\n ....:    index=[\"A\", \"B\"],\n ....:    columns=\"C\",\n ....:    values=[\"D\", \"E\"],\n ....:    margins=True,\n ....:    aggfunc=\"std\"\n ....: )\n ....: \n\nIn [18]: table\nOut[18]: \n D                             E \nC             bar       foo       All       bar       foo       All\nA     B \none   A  1.568517  0.178504  1.293926  0.179247  0.033718  0.371275\n B  1.157593  0.299748  0.860059  0.653280  0.885047  0.779837\n C  0.523425  0.133049  0.638297  1.111310  0.770555  0.938819\nthree A  0.995247       NaN  0.995247  0.049748       NaN  0.049748\n B       NaN  0.030522  0.030522       NaN  0.931203  0.931203\n C  0.386657       NaN  0.386657  0.386312       NaN  0.386312\ntwo   A       NaN  0.111032  0.111032       NaN  1.146201  1.146201\n B  0.695438       NaN  0.695438  1.166526       NaN  1.166526\n C       NaN  0.331975  0.331975       NaN  0.043771  0.043771\nAll      1.014073  0.713941  0.871016  0.881376  0.984017  0.923568 \n```", "```py\nIn [19]: table.stack(future_stack=True)\nOut[19]: \n D         E\nA   B C \none A bar  1.568517  0.179247\n foo  0.178504  0.033718\n All  1.293926  0.371275\n B bar  1.157593  0.653280\n foo  0.299748  0.885047\n...             ...       ...\ntwo C foo  0.331975  0.043771\n All  0.331975  0.043771\nAll   bar  1.014073  0.881376\n foo  0.713941  0.984017\n All  0.871016  0.923568\n\n[30 rows x 2 columns] \n```", "```py\nIn [20]: tuples = [\n ....:   [\"bar\", \"bar\", \"baz\", \"baz\", \"foo\", \"foo\", \"qux\", \"qux\"],\n ....:   [\"one\", \"two\", \"one\", \"two\", \"one\", \"two\", \"one\", \"two\"],\n ....: ]\n ....: \n\nIn [21]: index = pd.MultiIndex.from_arrays(tuples, names=[\"first\", \"second\"])\n\nIn [22]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=[\"A\", \"B\"])\n\nIn [23]: df2 = df[:4]\n\nIn [24]: df2\nOut[24]: \n A         B\nfirst second \nbar   one     0.895717  0.805244\n two    -1.206412  2.565646\nbaz   one     1.431256  1.340309\n two    -1.170299 -0.226169 \n```", "```py\nIn [25]: stacked = df2.stack(future_stack=True)\n\nIn [26]: stacked\nOut[26]: \nfirst  second \nbar    one     A    0.895717\n B    0.805244\n two     A   -1.206412\n B    2.565646\nbaz    one     A    1.431256\n B    1.340309\n two     A   -1.170299\n B   -0.226169\ndtype: float64 \n```", "```py\nIn [27]: stacked.unstack()\nOut[27]: \n A         B\nfirst second \nbar   one     0.895717  0.805244\n two    -1.206412  2.565646\nbaz   one     1.431256  1.340309\n two    -1.170299 -0.226169\n\nIn [28]: stacked.unstack(1)\nOut[28]: \nsecond        one       two\nfirst \nbar   A  0.895717 -1.206412\n B  0.805244  2.565646\nbaz   A  1.431256 -1.170299\n B  1.340309 -0.226169\n\nIn [29]: stacked.unstack(0)\nOut[29]: \nfirst          bar       baz\nsecond \none    A  0.895717  1.431256\n B  0.805244  1.340309\ntwo    A -1.206412 -1.170299\n B  2.565646 -0.226169 \n```", "```py\nIn [30]: stacked.unstack(\"second\")\nOut[30]: \nsecond        one       two\nfirst \nbar   A  0.895717 -1.206412\n B  0.805244  2.565646\nbaz   A  1.431256 -1.170299\n B  1.340309 -0.226169 \n```", "```py\nIn [31]: index = pd.MultiIndex.from_product([[2, 1], [\"a\", \"b\"]])\n\nIn [32]: df = pd.DataFrame(np.random.randn(4), index=index, columns=[\"A\"])\n\nIn [33]: df\nOut[33]: \n A\n2 a -1.413681\n b  1.607920\n1 a  1.024180\n b  0.569605\n\nIn [34]: all(df.unstack().stack(future_stack=True) == df.sort_index())\nOut[34]: True \n```", "```py\nIn [35]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\", \"long\"),\n ....:        (\"B\", \"cat\", \"long\"),\n ....:        (\"A\", \"dog\", \"short\"),\n ....:        (\"B\", \"dog\", \"short\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\", \"hair_length\"],\n ....: )\n ....: \n\nIn [36]: df = pd.DataFrame(np.random.randn(4, 4), columns=columns)\n\nIn [37]: df\nOut[37]: \nexp                 A         B         A         B\nanimal            cat       cat       dog       dog\nhair_length      long      long     short     short\n0            0.875906 -2.211372  0.974466 -2.006747\n1           -0.410001 -0.078638  0.545952 -1.219217\n2           -1.226825  0.769804 -1.281247 -0.727707\n3           -0.121306 -0.097883  0.695775  0.341734\n\nIn [38]: df.stack(level=[\"animal\", \"hair_length\"], future_stack=True)\nOut[38]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\n# df.stack(level=['animal', 'hair_length'], future_stack=True)\n# from above is equivalent to:\nIn [39]: df.stack(level=[1, 2], future_stack=True)\nOut[39]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\nIn [40]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\"),\n ....:        (\"B\", \"dog\"),\n ....:        (\"B\", \"cat\"),\n ....:        (\"A\", \"dog\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\"],\n ....: )\n ....: \n\nIn [41]: index = pd.MultiIndex.from_product(\n ....:    [(\"bar\", \"baz\", \"foo\", \"qux\"), (\"one\", \"two\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [42]: df = pd.DataFrame(np.random.randn(8, 4), index=index, columns=columns)\n\nIn [43]: df3 = df.iloc[[0, 1, 4, 7], [1, 2]]\n\nIn [44]: df3\nOut[44]: \nexp                  B \nanimal             dog       cat\nfirst second \nbar   one    -1.110336 -0.619976\n two     0.687738  0.176444\nfoo   one     1.314232  0.690579\nqux   two     0.380396  0.084844\n\nIn [45]: df3.unstack()\nOut[45]: \nexp            B \nanimal       dog                 cat \nsecond       one       two       one       two\nfirst \nbar    -1.110336  0.687738 -0.619976  0.176444\nfoo     1.314232       NaN  0.690579       NaN\nqux          NaN  0.380396       NaN  0.084844 \n```", "```py\nIn [46]: df3.unstack(fill_value=-1e9)\nOut[46]: \nexp                B \nanimal           dog                         cat \nsecond           one           two           one           two\nfirst \nbar    -1.110336e+00  6.877384e-01 -6.199759e-01  1.764443e-01\nfoo     1.314232e+00 -1.000000e+09  6.905793e-01 -1.000000e+09\nqux    -1.000000e+09  3.803956e-01 -1.000000e+09  8.484421e-02 \n```", "```py\nIn [35]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\", \"long\"),\n ....:        (\"B\", \"cat\", \"long\"),\n ....:        (\"A\", \"dog\", \"short\"),\n ....:        (\"B\", \"dog\", \"short\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\", \"hair_length\"],\n ....: )\n ....: \n\nIn [36]: df = pd.DataFrame(np.random.randn(4, 4), columns=columns)\n\nIn [37]: df\nOut[37]: \nexp                 A         B         A         B\nanimal            cat       cat       dog       dog\nhair_length      long      long     short     short\n0            0.875906 -2.211372  0.974466 -2.006747\n1           -0.410001 -0.078638  0.545952 -1.219217\n2           -1.226825  0.769804 -1.281247 -0.727707\n3           -0.121306 -0.097883  0.695775  0.341734\n\nIn [38]: df.stack(level=[\"animal\", \"hair_length\"], future_stack=True)\nOut[38]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\n# df.stack(level=['animal', 'hair_length'], future_stack=True)\n# from above is equivalent to:\nIn [39]: df.stack(level=[1, 2], future_stack=True)\nOut[39]: \nexp                          A         B\n animal hair_length \n0 cat    long         0.875906 -2.211372\n dog    short        0.974466 -2.006747\n1 cat    long        -0.410001 -0.078638\n dog    short        0.545952 -1.219217\n2 cat    long        -1.226825  0.769804\n dog    short       -1.281247 -0.727707\n3 cat    long        -0.121306 -0.097883\n dog    short        0.695775  0.341734 \n```", "```py\nIn [40]: columns = pd.MultiIndex.from_tuples(\n ....:    [\n ....:        (\"A\", \"cat\"),\n ....:        (\"B\", \"dog\"),\n ....:        (\"B\", \"cat\"),\n ....:        (\"A\", \"dog\"),\n ....:    ],\n ....:    names=[\"exp\", \"animal\"],\n ....: )\n ....: \n\nIn [41]: index = pd.MultiIndex.from_product(\n ....:    [(\"bar\", \"baz\", \"foo\", \"qux\"), (\"one\", \"two\")], names=[\"first\", \"second\"]\n ....: )\n ....: \n\nIn [42]: df = pd.DataFrame(np.random.randn(8, 4), index=index, columns=columns)\n\nIn [43]: df3 = df.iloc[[0, 1, 4, 7], [1, 2]]\n\nIn [44]: df3\nOut[44]: \nexp                  B \nanimal             dog       cat\nfirst second \nbar   one    -1.110336 -0.619976\n two     0.687738  0.176444\nfoo   one     1.314232  0.690579\nqux   two     0.380396  0.084844\n\nIn [45]: df3.unstack()\nOut[45]: \nexp            B \nanimal       dog                 cat \nsecond       one       two       one       two\nfirst \nbar    -1.110336  0.687738 -0.619976  0.176444\nfoo     1.314232       NaN  0.690579       NaN\nqux          NaN  0.380396       NaN  0.084844 \n```", "```py\nIn [46]: df3.unstack(fill_value=-1e9)\nOut[46]: \nexp                B \nanimal           dog                         cat \nsecond           one           two           one           two\nfirst \nbar    -1.110336e+00  6.877384e-01 -6.199759e-01  1.764443e-01\nfoo     1.314232e+00 -1.000000e+09  6.905793e-01 -1.000000e+09\nqux    -1.000000e+09  3.803956e-01 -1.000000e+09  8.484421e-02 \n```", "```py\nIn [47]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    }\n ....: )\n ....: \n\nIn [48]: cheese\nOut[48]: \n first last  height  weight\n0  John  Doe     5.5     130\n1  Mary   Bo     6.0     150\n\nIn [49]: cheese.melt(id_vars=[\"first\", \"last\"])\nOut[49]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [50]: cheese.melt(id_vars=[\"first\", \"last\"], var_name=\"quantity\")\nOut[50]: \n first last quantity  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0 \n```", "```py\nIn [51]: index = pd.MultiIndex.from_tuples([(\"person\", \"A\"), (\"person\", \"B\")])\n\nIn [52]: cheese = pd.DataFrame(\n ....:    {\n ....:        \"first\": [\"John\", \"Mary\"],\n ....:        \"last\": [\"Doe\", \"Bo\"],\n ....:        \"height\": [5.5, 6.0],\n ....:        \"weight\": [130, 150],\n ....:    },\n ....:    index=index,\n ....: )\n ....: \n\nIn [53]: cheese\nOut[53]: \n first last  height  weight\nperson A  John  Doe     5.5     130\n B  Mary   Bo     6.0     150\n\nIn [54]: cheese.melt(id_vars=[\"first\", \"last\"])\nOut[54]: \n first last variable  value\n0  John  Doe   height    5.5\n1  Mary   Bo   height    6.0\n2  John  Doe   weight  130.0\n3  Mary   Bo   weight  150.0\n\nIn [55]: cheese.melt(id_vars=[\"first\", \"last\"], ignore_index=False)\nOut[55]: \n first last variable  value\nperson A  John  Doe   height    5.5\n B  Mary   Bo   height    6.0\n A  John  Doe   weight  130.0\n B  Mary   Bo   weight  150.0 \n```", "```py\nIn [56]: dft = pd.DataFrame(\n ....:    {\n ....:        \"A1970\": {0: \"a\", 1: \"b\", 2: \"c\"},\n ....:        \"A1980\": {0: \"d\", 1: \"e\", 2: \"f\"},\n ....:        \"B1970\": {0: 2.5, 1: 1.2, 2: 0.7},\n ....:        \"B1980\": {0: 3.2, 1: 1.3, 2: 0.1},\n ....:        \"X\": dict(zip(range(3), np.random.randn(3))),\n ....:    }\n ....: )\n ....: \n\nIn [57]: dft[\"id\"] = dft.index\n\nIn [58]: dft\nOut[58]: \n A1970 A1980  B1970  B1980         X  id\n0     a     d    2.5    3.2  1.519970   0\n1     b     e    1.2    1.3 -0.493662   1\n2     c     f    0.7    0.1  0.600178   2\n\nIn [59]: pd.wide_to_long(dft, [\"A\", \"B\"], i=\"id\", j=\"year\")\nOut[59]: \n X  A    B\nid year \n0  1970  1.519970  a  2.5\n1  1970 -0.493662  b  1.2\n2  1970  0.600178  c  0.7\n0  1980  1.519970  d  3.2\n1  1980 -0.493662  e  1.3\n2  1980  0.600178  f  0.1 \n```", "```py\nIn [60]: df = pd.DataFrame({\"key\": list(\"bbacab\"), \"data1\": range(6)})\n\nIn [61]: pd.get_dummies(df[\"key\"])\nOut[61]: \n a      b      c\n0  False   True  False\n1  False   True  False\n2   True  False  False\n3  False  False   True\n4   True  False  False\n5  False   True  False\n\nIn [62]: df[\"key\"].str.get_dummies()\nOut[62]: \n a  b  c\n0  0  1  0\n1  0  1  0\n2  1  0  0\n3  0  0  1\n4  1  0  0\n5  0  1  0 \n```", "```py\nIn [63]: dummies = pd.get_dummies(df[\"key\"], prefix=\"key\")\n\nIn [64]: dummies\nOut[64]: \n key_a  key_b  key_c\n0  False   True  False\n1  False   True  False\n2   True  False  False\n3  False  False   True\n4   True  False  False\n5  False   True  False\n\nIn [65]: df[[\"data1\"]].join(dummies)\nOut[65]: \n data1  key_a  key_b  key_c\n0      0  False   True  False\n1      1  False   True  False\n2      2   True  False  False\n3      3  False  False   True\n4      4   True  False  False\n5      5  False   True  False \n```", "```py\nIn [66]: values = np.random.randn(10)\n\nIn [67]: values\nOut[67]: \narray([ 0.2742,  0.1329, -0.0237,  2.4102,  1.4505,  0.2061, -0.2519,\n -2.2136,  1.0633,  1.2661])\n\nIn [68]: bins = [0, 0.2, 0.4, 0.6, 0.8, 1]\n\nIn [69]: pd.get_dummies(pd.cut(values, bins))\nOut[69]: \n (0.0, 0.2]  (0.2, 0.4]  (0.4, 0.6]  (0.6, 0.8]  (0.8, 1.0]\n0       False        True       False       False       False\n1        True       False       False       False       False\n2       False       False       False       False       False\n3       False       False       False       False       False\n4       False       False       False       False       False\n5       False        True       False       False       False\n6       False       False       False       False       False\n7       False       False       False       False       False\n8       False       False       False       False       False\n9       False       False       False       False       False \n```", "```py\nIn [70]: df = pd.DataFrame({\"A\": [\"a\", \"b\", \"a\"], \"B\": [\"c\", \"c\", \"b\"], \"C\": [1, 2, 3]})\n\nIn [71]: pd.get_dummies(df)\nOut[71]: \n C    A_a    A_b    B_b    B_c\n0  1   True  False  False   True\n1  2  False   True  False   True\n2  3   True  False   True  False \n```", "```py\nIn [72]: pd.get_dummies(df, columns=[\"A\"])\nOut[72]: \n B  C    A_a    A_b\n0  c  1   True  False\n1  c  2  False   True\n2  b  3   True  False \n```", "```py\nIn [73]: simple = pd.get_dummies(df, prefix=\"new_prefix\")\n\nIn [74]: simple\nOut[74]: \n C  new_prefix_a  new_prefix_b  new_prefix_b  new_prefix_c\n0  1          True         False         False          True\n1  2         False          True         False          True\n2  3          True         False          True         False\n\nIn [75]: from_list = pd.get_dummies(df, prefix=[\"from_A\", \"from_B\"])\n\nIn [76]: from_list\nOut[76]: \n C  from_A_a  from_A_b  from_B_b  from_B_c\n0  1      True     False     False      True\n1  2     False      True     False      True\n2  3      True     False      True     False\n\nIn [77]: from_dict = pd.get_dummies(df, prefix={\"B\": \"from_B\", \"A\": \"from_A\"})\n\nIn [78]: from_dict\nOut[78]: \n C  from_A_a  from_A_b  from_B_b  from_B_c\n0  1      True     False     False      True\n1  2     False      True     False      True\n2  3      True     False      True     False \n```", "```py\nIn [79]: s = pd.Series(list(\"abcaa\"))\n\nIn [80]: pd.get_dummies(s)\nOut[80]: \n a      b      c\n0   True  False  False\n1  False   True  False\n2  False  False   True\n3   True  False  False\n4   True  False  False\n\nIn [81]: pd.get_dummies(s, drop_first=True)\nOut[81]: \n b      c\n0  False  False\n1   True  False\n2  False   True\n3  False  False\n4  False  False \n```", "```py\nIn [82]: df = pd.DataFrame({\"A\": list(\"aaaaa\"), \"B\": list(\"ababc\")})\n\nIn [83]: pd.get_dummies(df)\nOut[83]: \n A_a    B_a    B_b    B_c\n0  True   True  False  False\n1  True  False   True  False\n2  True   True  False  False\n3  True  False   True  False\n4  True  False  False   True\n\nIn [84]: pd.get_dummies(df, drop_first=True)\nOut[84]: \n B_b    B_c\n0  False  False\n1   True  False\n2  False  False\n3   True  False\n4  False   True \n```", "```py\nIn [85]: df = pd.DataFrame({\"A\": list(\"abc\"), \"B\": [1.1, 2.2, 3.3]})\n\nIn [86]: pd.get_dummies(df, dtype=np.float32).dtypes\nOut[86]: \nB      float64\nA_a    float32\nA_b    float32\nA_c    float32\ndtype: object \n```", "```py\nIn [87]: df = pd.DataFrame({\"prefix_a\": [0, 1, 0], \"prefix_b\": [1, 0, 1]})\n\nIn [88]: df\nOut[88]: \n prefix_a  prefix_b\n0         0         1\n1         1         0\n2         0         1\n\nIn [89]: pd.from_dummies(df, sep=\"_\")\nOut[89]: \n prefix\n0      b\n1      a\n2      b \n```", "```py\nIn [90]: df = pd.DataFrame({\"prefix_a\": [0, 1, 0]})\n\nIn [91]: df\nOut[91]: \n prefix_a\n0         0\n1         1\n2         0\n\nIn [92]: pd.from_dummies(df, sep=\"_\", default_category=\"b\")\nOut[92]: \n prefix\n0      b\n1      a\n2      b \n```", "```py\nIn [93]: keys = [\"panda1\", \"panda2\", \"panda3\"]\n\nIn [94]: values = [[\"eats\", \"shoots\"], [\"shoots\", \"leaves\"], [\"eats\", \"leaves\"]]\n\nIn [95]: df = pd.DataFrame({\"keys\": keys, \"values\": values})\n\nIn [96]: df\nOut[96]: \n keys            values\n0  panda1    [eats, shoots]\n1  panda2  [shoots, leaves]\n2  panda3    [eats, leaves]\n\nIn [97]: df[\"values\"].explode()\nOut[97]: \n0      eats\n0    shoots\n1    shoots\n1    leaves\n2      eats\n2    leaves\nName: values, dtype: object \n```", "```py\nIn [98]: df.explode(\"values\")\nOut[98]: \n keys  values\n0  panda1    eats\n0  panda1  shoots\n1  panda2  shoots\n1  panda2  leaves\n2  panda3    eats\n2  panda3  leaves \n```", "```py\nIn [99]: s = pd.Series([[1, 2, 3], \"foo\", [], [\"a\", \"b\"]])\n\nIn [100]: s\nOut[100]: \n0    [1, 2, 3]\n1          foo\n2           []\n3       [a, b]\ndtype: object\n\nIn [101]: s.explode()\nOut[101]: \n0      1\n0      2\n0      3\n1    foo\n2    NaN\n3      a\n3      b\ndtype: object \n```", "```py\nIn [102]: df = pd.DataFrame([{\"var1\": \"a,b,c\", \"var2\": 1}, {\"var1\": \"d,e,f\", \"var2\": 2}])\n\nIn [103]: df.assign(var1=df.var1.str.split(\",\")).explode(\"var1\")\nOut[103]: \n var1  var2\n0    a     1\n0    b     1\n0    c     1\n1    d     2\n1    e     2\n1    f     2 \n```", "```py\nIn [104]: a = np.array([\"foo\", \"foo\", \"bar\", \"bar\", \"foo\", \"foo\"], dtype=object)\n\nIn [105]: b = np.array([\"one\", \"one\", \"two\", \"one\", \"two\", \"one\"], dtype=object)\n\nIn [106]: c = np.array([\"dull\", \"dull\", \"shiny\", \"dull\", \"dull\", \"shiny\"], dtype=object)\n\nIn [107]: pd.crosstab(a, [b, c], rownames=[\"a\"], colnames=[\"b\", \"c\"])\nOut[107]: \nb    one        two \nc   dull shiny dull shiny\na \nbar    1     0    0     1\nfoo    2     1    1     0 \n```", "```py\nIn [108]: df = pd.DataFrame(\n .....:    {\"A\": [1, 2, 2, 2, 2], \"B\": [3, 3, 4, 4, 4], \"C\": [1, 1, np.nan, 1, 1]}\n .....: )\n .....: \n\nIn [109]: df\nOut[109]: \n A  B    C\n0  1  3  1.0\n1  2  3  1.0\n2  2  4  NaN\n3  2  4  1.0\n4  2  4  1.0\n\nIn [110]: pd.crosstab(df[\"A\"], df[\"B\"])\nOut[110]: \nB  3  4\nA \n1  1  0\n2  1  3 \n```", "```py\nIn [111]: foo = pd.Categorical([\"a\", \"b\"], categories=[\"a\", \"b\", \"c\"])\n\nIn [112]: bar = pd.Categorical([\"d\", \"e\"], categories=[\"d\", \"e\", \"f\"])\n\nIn [113]: pd.crosstab(foo, bar)\nOut[113]: \ncol_0  d  e\nrow_0 \na      1  0\nb      0  1 \n```", "```py\nIn [114]: pd.crosstab(foo, bar, dropna=False)\nOut[114]: \ncol_0  d  e  f\nrow_0 \na      1  0  0\nb      0  1  0\nc      0  0  0 \n```", "```py\nIn [115]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=True)\nOut[115]: \nB    3    4\nA \n1  0.2  0.0\n2  0.2  0.6 \n```", "```py\nIn [116]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=\"columns\")\nOut[116]: \nB    3    4\nA \n1  0.5  0.0\n2  0.5  1.0 \n```", "```py\nIn [117]: pd.crosstab(df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\")\nOut[117]: \nB    3    4\nA \n1  1.0  NaN\n2  1.0  2.0 \n```", "```py\nIn [118]: pd.crosstab(\n .....:    df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\", normalize=True, margins=True\n .....: )\n .....: \nOut[118]: \nB       3    4   All\nA \n1    0.25  0.0  0.25\n2    0.25  0.5  0.75\nAll  0.50  0.5  1.00 \n```", "```py\nIn [115]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=True)\nOut[115]: \nB    3    4\nA \n1  0.2  0.0\n2  0.2  0.6 \n```", "```py\nIn [116]: pd.crosstab(df[\"A\"], df[\"B\"], normalize=\"columns\")\nOut[116]: \nB    3    4\nA \n1  0.5  0.0\n2  0.5  1.0 \n```", "```py\nIn [117]: pd.crosstab(df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\")\nOut[117]: \nB    3    4\nA \n1  1.0  NaN\n2  1.0  2.0 \n```", "```py\nIn [118]: pd.crosstab(\n .....:    df[\"A\"], df[\"B\"], values=df[\"C\"], aggfunc=\"sum\", normalize=True, margins=True\n .....: )\n .....: \nOut[118]: \nB       3    4   All\nA \n1    0.25  0.0  0.25\n2    0.25  0.5  0.75\nAll  0.50  0.5  1.00 \n```", "```py\nIn [119]: ages = np.array([10, 15, 13, 12, 23, 25, 28, 59, 60])\n\nIn [120]: pd.cut(ages, bins=3)\nOut[120]: \n[(9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (9.95, 26.667], (26.667, 43.333], (43.333, 60.0], (43.333, 60.0]]\nCategories (3, interval[float64, right]): [(9.95, 26.667] < (26.667, 43.333] < (43.333, 60.0]] \n```", "```py\nIn [121]: pd.cut(ages, bins=[0, 18, 35, 70])\nOut[121]: \n[(0, 18], (0, 18], (0, 18], (0, 18], (18, 35], (18, 35], (18, 35], (35, 70], (35, 70]]\nCategories (3, interval[int64, right]): [(0, 18] < (18, 35] < (35, 70]] \n```", "```py\nIn [122]: pd.cut(ages, bins=pd.IntervalIndex.from_breaks([0, 40, 70]))\nOut[122]: \n[(0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (0, 40], (40, 70], (40, 70]]\nCategories (2, interval[int64, right]): [(0, 40] < (40, 70]] \n```", "```py\nIn [123]: x = pd.Series([\"A\", \"A\", np.nan, \"B\", 3.14, np.inf])\n\nIn [124]: x\nOut[124]: \n0       A\n1       A\n2     NaN\n3       B\n4    3.14\n5     inf\ndtype: object\n\nIn [125]: labels, uniques = pd.factorize(x)\n\nIn [126]: labels\nOut[126]: array([ 0,  0, -1,  1,  2,  3])\n\nIn [127]: uniques\nOut[127]: Index(['A', 'B', 3.14, inf], dtype='object') \n```", "```py\nIn [128]: pd.Categorical(x)\nOut[128]: \n['A', 'A', NaN, 'B', 3.14, inf]\nCategories (4, object): [3.14, inf, 'A', 'B'] \n```"]