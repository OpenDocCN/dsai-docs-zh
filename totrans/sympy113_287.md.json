["```py\n>>> from sympy.polys import ring, QQ, RR\n>>> from sympy.polys.ring_series import rs_sin\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_sin(x*y, x, 5)\n-1/6*x**3*y**3 + x*y \n```", "```py\n>>> R, x, y = ring('x, y', RR)\n>>> rs_sin(x*y, x, 5)\n-0.166666666666667*x**3*y**3 + x*y \n```", "```py\n>>> from sympy.polys.ring_series import rs_cos, rs_tan\n>>> R, x, y = ring('x, y', QQ)\n\n>>> rs_cos(x + x*y, x, 3)/x**3\n-1/2*x**(-1)*y**2 - x**(-1)*y - 1/2*x**(-1) + x**(-3)\n\n>>> rs_tan(x**QQ(2, 5)*y**QQ(1, 2), x, 2)\n1/3*x**(6/5)*y**(3/2) + x**(2/5)*y**(1/2) \n```", "```py\n>>> x**QQ(3, 4)\nx**(3/4) \n```", "```py\n>>> from sympy.polys.ring_series import rs_exp\n>>> from sympy.abc import a, b, c\n>>> series = rs_exp(x, x, 5)\n>>> a + series.as_expr()\na + x**4/24 + x**3/6 + x**2/2 + x + 1 \n```", "```py\n>>> from sympy.polys.ring_series import rs_series\n>>> from sympy.functions.elementary.trigonometric import sin\n>>> rs_series(sin(a + b), a, 5) \n1/24*sin(b)*a**4 - 1/2*sin(b)*a**2 + sin(b) - 1/6*cos(b)*a**3 + cos(b)*a\n\n>>> rs_series(sin(exp(a*b) + cos(a + c)), a, 2) \n-sin(c)*cos(cos(c) + 1)*a + cos(cos(c) + 1)*a*b + sin(cos(c) + 1)\n\n>>> rs_series(sin(a + b)*cos(a + c)*tan(a**2 + b), a, 2) \ncos(b)*cos(c)*tan(b)*a - sin(b)*sin(c)*tan(b)*a + sin(b)*cos(c)*tan(b) \n```", "```py\n>>> %timeit ((sin(a) + cos(a))**10).series(a, 0, 5) \n1 loops, best of 3: 1.33 s per loop\n\n>>> %timeit rs_series((sin(a) + cos(a))**10, a, 5) \n100 loops, best of 3: 4.13 ms per loop \n```", "```py\n>>> %timeit rs_series((sin(a) + cos(a))**10, a, 100) \n10 loops, best of 3: 32.8 ms per loop \n```", "```py\n>>> from sympy.polys.rings import sring\n>>> R, expr = sring(1/a**3 + a**QQ(3, 7)); R\nPolynomial ring in 1/a, a**(1/7) over ZZ with lex order \n```", "```py\n>>> expr*R(1/a)\n(1/a)**4 + (1/a)*(a**(1/7))**3 \n```", "```py\n>>> rs_series(sin(a**QQ(1, 3)), a, 3)\n-1/5040*a**(7/3) + 1/120*a**(5/3) - 1/6*a + a**(1/3) \n```", "```py\nsympy.polys.ring_series.rs_log(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_log\n>>> R, x = ring('x', QQ)\n>>> rs_log(1 + x, x, 8)\n1/7*x**7 - 1/6*x**6 + 1/5*x**5 - 1/4*x**4 + 1/3*x**3 - 1/2*x**2 + x\n>>> rs_log(x**QQ(3, 2) + 1, x, 5)\n1/3*x**(9/2) - 1/2*x**3 + x**(3/2) \n```", "```py\nsympy.polys.ring_series.rs_LambertW(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_LambertW\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_LambertW(x + x*y, x, 3)\n-x**2*y**2 - 2*x**2*y - x**2 + x*y + x \n```", "```py\nsympy.polys.ring_series.rs_exp(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_exp\n>>> R, x = ring('x', QQ)\n>>> rs_exp(x**2, x, 7)\n1/6*x**6 + 1/2*x**4 + x**2 + 1 \n```", "```py\nsympy.polys.ring_series.rs_atan(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_atan\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_atan(x + x*y, x, 4)\n-1/3*x**3*y**3 - x**3*y**2 - x**3*y - 1/3*x**3 + x*y + x \n```", "```py\nsympy.polys.ring_series.rs_asin(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_asin\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_asin(x, x, 8)\n5/112*x**7 + 3/40*x**5 + 1/6*x**3 + x \n```", "```py\nsympy.polys.ring_series.rs_tan(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_tan\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_tan(x + x*y, x, 4)\n1/3*x**3*y**3 + x**3*y**2 + x**3*y + 1/3*x**3 + x*y + x \n```", "```py\nsympy.polys.ring_series._tan1(p, x, prec)\n```", "```py\nsympy.polys.ring_series.rs_cot(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_cot\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_cot(x, x, 6)\n-2/945*x**5 - 1/45*x**3 - 1/3*x + x**(-1) \n```", "```py\nsympy.polys.ring_series.rs_sin(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_sin\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_sin(x + x*y, x, 4)\n-1/6*x**3*y**3 - 1/2*x**3*y**2 - 1/2*x**3*y - 1/6*x**3 + x*y + x\n>>> rs_sin(x**QQ(3, 2) + x*y**QQ(7, 5), x, 4)\n-1/2*x**(7/2)*y**(14/5) - 1/6*x**3*y**(21/5) + x**(3/2) + x*y**(7/5) \n```", "```py\nsympy.polys.ring_series.rs_cos(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_cos\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_cos(x + x*y, x, 4)\n-1/2*x**2*y**2 - x**2*y - 1/2*x**2 + 1\n>>> rs_cos(x + x*y, x, 4)/x**QQ(7, 5)\n-1/2*x**(3/5)*y**2 - x**(3/5)*y - 1/2*x**(3/5) + x**(-7/5) \n```", "```py\nsympy.polys.ring_series.rs_cos_sin(p, x, prec)\n```", "```py\nsympy.polys.ring_series.rs_atanh(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_atanh\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_atanh(x + x*y, x, 4)\n1/3*x**3*y**3 + x**3*y**2 + x**3*y + 1/3*x**3 + x*y + x \n```", "```py\nsympy.polys.ring_series.rs_sinh(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_sinh\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_sinh(x + x*y, x, 4)\n1/6*x**3*y**3 + 1/2*x**3*y**2 + 1/2*x**3*y + 1/6*x**3 + x*y + x \n```", "```py\nsympy.polys.ring_series.rs_cosh(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_cosh\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_cosh(x + x*y, x, 4)\n1/2*x**2*y**2 + x**2*y + 1/2*x**2 + 1 \n```", "```py\nsympy.polys.ring_series.rs_tanh(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_tanh\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_tanh(x + x*y, x, 4)\n-1/3*x**3*y**3 - x**3*y**2 - x**3*y - 1/3*x**3 + x*y + x \n```", "```py\nsympy.polys.ring_series.rs_hadamard_exp(p1, inverse=False)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_hadamard_exp\n>>> R, x = ring('x', QQ)\n>>> p = 1 + x + x**2 + x**3\n>>> rs_hadamard_exp(p)\n1/6*x**3 + 1/2*x**2 + x + 1 \n```", "```py\nsympy.polys.ring_series.rs_mul(p1, p2, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_mul\n>>> R, x = ring('x', QQ)\n>>> p1 = x**2 + 2*x + 1\n>>> p2 = x + 1\n>>> rs_mul(p1, p2, x, 3)\n3*x**2 + 3*x + 1 \n```", "```py\nsympy.polys.ring_series.rs_square(p1, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_square\n>>> R, x = ring('x', QQ)\n>>> p = x**2 + 2*x + 1\n>>> rs_square(p, x, 3)\n6*x**2 + 4*x + 1 \n```", "```py\nsympy.polys.ring_series.rs_pow(p1, n, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_pow\n>>> R, x = ring('x', QQ)\n>>> p = x + 1\n>>> rs_pow(p, 4, x, 3)\n6*x**2 + 4*x + 1 \n```", "```py\nsympy.polys.ring_series.rs_series_inversion(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_series_inversion\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_series_inversion(1 + x*y**2, x, 4)\n-x**3*y**6 + x**2*y**4 - x*y**2 + 1\n>>> rs_series_inversion(1 + x*y**2, y, 4)\n-x*y**2 + 1\n>>> rs_series_inversion(x + x**2, x, 4)\nx**3 - x**2 + x - 1 + x**(-1) \n```", "```py\nsympy.polys.ring_series.rs_series_reversion(p, x, n, y)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_series_reversion, rs_trunc\n>>> R, x, y, a, b = ring('x, y, a, b', QQ)\n>>> p = x - x**2 - 2*b*x**2 + 2*a*b*x**2\n>>> p1 = rs_series_reversion(p, x, 3, y); p1\n-2*y**2*a*b + 2*y**2*b + y**2 + y\n>>> rs_trunc(p.compose(x, p1), y, 3)\ny \n```", "```py\nsympy.polys.ring_series.rs_nth_root(p, n, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ, RR\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_nth_root\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_nth_root(1 + x + x*y, -3, x, 3)\n2/9*x**2*y**2 + 4/9*x**2*y + 2/9*x**2 - 1/3*x*y - 1/3*x + 1\n>>> R, x, y = ring('x, y', RR)\n>>> rs_nth_root(3 + x + x*y, 3, x, 2)\n0.160249952256379*x*y + 0.160249952256379*x + 1.44224957030741 \n```", "```py\nsympy.polys.ring_series.rs_trunc(p1, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_trunc\n>>> R, x = ring('x', QQ)\n>>> p = x**10 + x**5 + x + 1\n>>> rs_trunc(p, x, 12)\nx**10 + x**5 + x + 1\n>>> rs_trunc(p, x, 10)\nx**5 + x + 1 \n```", "```py\nsympy.polys.ring_series.rs_subs(p, rules, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_subs\n>>> R, x, y = ring('x, y', QQ)\n>>> p = x**2 + y**2\n>>> rs_subs(p, {x: x+ y, y: x+ 2*y}, x, 3)\n2*x**2 + 6*x*y + 5*y**2\n>>> (x + y)**2 + (x + 2*y)**2\n2*x**2 + 6*x*y + 5*y**2 \n```", "```py\n>>> rs_subs(rs_subs(p, {x: x+ y}, x, 3), {y: x+ 2*y}, x, 3)\n5*x**2 + 12*x*y + 8*y**2 \n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_subs\n>>> R, x, y = ring('x, y', QQ)\n>>> rs_subs(x**2+y**2, {y: (x+y)**2}, x, 3)\n 6*x**2*y**2 + x**2 + 4*x*y**3 + y**4 \n```", "```py\nsympy.polys.ring_series.rs_diff(p, x)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_diff\n>>> R, x, y = ring('x, y', QQ)\n>>> p = x + x**2*y**3\n>>> rs_diff(p, x)\n2*x*y**3 + 1 \n```", "```py\nsympy.polys.ring_series.rs_integrate(p, x)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_integrate\n>>> R, x, y = ring('x, y', QQ)\n>>> p = x + x**2*y**3\n>>> rs_integrate(p, x)\n1/3*x**3*y**3 + 1/2*x**2 \n```", "```py\nsympy.polys.ring_series.rs_newton(p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_newton\n>>> R, x = ring('x', QQ)\n>>> p = x**2 - 2\n>>> rs_newton(p, x, 5)\n8*x**4 + 4*x**2 + 2 \n```", "```py\nsympy.polys.ring_series.rs_compose_add(p1, p2)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_compose_add\n>>> R, x = ring('x', QQ)\n>>> f = x**2 - 2\n>>> g = x**2 - 3\n>>> rs_compose_add(f, g)\nx**4 - 10*x**2 + 1 \n```", "```py\nsympy.polys.ring_series.rs_is_puiseux(p, x)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_is_puiseux\n>>> R, x = ring('x', QQ)\n>>> p = x**QQ(2,5) + x**QQ(2,3) + x\n>>> rs_is_puiseux(p, x)\nTrue \n```", "```py\nsympy.polys.ring_series.rs_puiseux(f, p, x, prec)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_puiseux, rs_exp\n>>> R, x = ring('x', QQ)\n>>> p = x**QQ(2,5) + x**QQ(2,3) + x\n>>> rs_puiseux(rs_exp,p, x, 1)\n1/2*x**(4/5) + x**(2/3) + x**(2/5) + 1 \n```", "```py\nsympy.polys.ring_series.rs_puiseux2(f, p, q, x, prec)\n```", "```py\nsympy.polys.ring_series.rs_series_from_list(p, c, x, prec, concur=1)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_series_from_list, rs_trunc\n>>> R, x = ring('x', QQ)\n>>> p = x**2 + x + 1\n>>> c = [1, 2, 3]\n>>> rs_series_from_list(p, c, x, 4)\n6*x**3 + 11*x**2 + 8*x + 6\n>>> rs_trunc(1 + 2*p + 3*p**2, x, 4)\n6*x**3 + 11*x**2 + 8*x + 6\n>>> pc = R.from_list(list(reversed(c)))\n>>> rs_trunc(pc.compose(x, p), x, 4)\n6*x**3 + 11*x**2 + 8*x + 6 \n```", "```py\nsympy.polys.ring_series.rs_fun(p, f, *args)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import rs_fun, _tan1\n>>> R, x, y = ring('x, y', QQ)\n>>> p = x + x*y + x**2*y + x**3*y**2\n>>> rs_fun(p, _tan1, x, 4)\n1/3*x**3*y**3 + 2*x**3*y**2 + x**3*y + 1/3*x**3 + x**2*y + x*y + x \n```", "```py\nsympy.polys.ring_series.mul_xin(p, i, n)\n```", "```py\nsympy.polys.ring_series.pow_xin(p, i, n)\n```", "```py\n>>> from sympy.polys.domains import QQ\n>>> from sympy.polys.rings import ring\n>>> from sympy.polys.ring_series import pow_xin\n>>> R, x, y = ring('x, y', QQ)\n>>> p = x**QQ(2,5) + x + x**QQ(2,3)\n>>> index = p.ring.gens.index(x)\n>>> pow_xin(p, index, 15)\nx**15 + x**10 + x**6 \n```"]