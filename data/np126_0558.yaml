- en: numpy.einsum
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.einsum
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.einsum.html](https://numpy.org/doc/1.26/reference/generated/numpy.einsum.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.einsum.html](https://numpy.org/doc/1.26/reference/generated/numpy.einsum.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Evaluates the Einstein summation convention on the operands.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对操作数执行爱因斯坦求和约定的计算。
- en: Using the Einstein summation convention, many common multi-dimensional, linear
    algebraic array operations can be represented in a simple fashion. In *implicit*
    mode [`einsum`](#numpy.einsum "numpy.einsum") computes these values.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用爱因斯坦求和约定，许多常见的多维线性代数数组操作可以以简单的方式表示。在*隐式*模式下，[`einsum`](#numpy.einsum "numpy.einsum")计算这些值。
- en: In *explicit* mode, [`einsum`](#numpy.einsum "numpy.einsum") provides further
    flexibility to compute other array operations that might not be considered classical
    Einstein summation operations, by disabling, or forcing summation over specified
    subscript labels.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在*显式*模式下，[`einsum`](#numpy.einsum "numpy.einsum")提供了进一步的灵活性，以计算可能不被视为经典爱因斯坦求和操作的其他数组操作，通过禁用或强制对指定的下标标签进行求和。
- en: See the notes and examples for clarification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅说明和示例以进行澄清。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**subscripts**str'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**下标**str'
- en: Specifies the subscripts for summation as comma separated list of subscript
    labels. An implicit (classical Einstein summation) calculation is performed unless
    the explicit indicator ‘->’ is included as well as subscript labels of the precise
    output form.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 指定求和的下标为逗号分隔的下标标签列表。除非包括明确的指示符‘->’以及精确输出形式的下标标签，否则将执行隐式（经典爱因斯坦求和）计算。
- en: '**operands**list of array_like'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作数**数组列表'
- en: These are the arrays for the operation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是操作的数组。
- en: '**out**ndarray, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**ndarray，可选'
- en: If provided, the calculation is done into this array.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供，计算将在此数组中进行。
- en: '**dtype**{data-type, None}, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtype**{数据类型，None}，可选'
- en: If provided, forces the calculation to use the data type specified. Note that
    you may have to also give a more liberal *casting* parameter to allow the conversions.
    Default is None.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供，强制计算使用指定的数据类型。请注意，您可能还需要提供一个更自由的*转换*参数以允许转换。默认值为None。
- en: '**order**{‘C’, ‘F’, ‘A’, ‘K’}, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**顺序**{‘C’，‘F’，‘A’，‘K’}，可选'
- en: Controls the memory layout of the output. ‘C’ means it should be C contiguous.
    ‘F’ means it should be Fortran contiguous, ‘A’ means it should be ‘F’ if the inputs
    are all ‘F’, ‘C’ otherwise. ‘K’ means it should be as close to the layout as the
    inputs as is possible, including arbitrarily permuted axes. Default is ‘K’.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 控制输出的内存布局。‘C’表示它应该是C连续的。‘F’表示它应该是Fortran连续的，‘A’表示如果输入都是‘F’，则应该是‘F’，否则为‘C’。‘K’表示应尽可能接近输入的布局，包括任意排列的轴。默认值为‘K’。
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**casting**{‘no’，‘equiv’，‘safe’，‘same_kind’，‘unsafe’}，可选'
- en: Controls what kind of data casting may occur. Setting this to ‘unsafe’ is not
    recommended, as it can adversely affect accumulations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 控制可能发生的数据转换类型。不建议将其设置为‘unsafe’，因为它可能会对累积产生不利影响。
- en: ‘no’ means the data types should not be cast at all.
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘no’表示数据类型不应被转换。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘equiv’ means only byte-order changes are allowed.
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘equiv’表示仅允许字节顺序更改。
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘safe’ means only casts which can preserve values are allowed.
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘safe’表示仅允许可以保留值的转换。
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32,
    are allowed.
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘same_kind’表示仅允许安全转换或在一种类型内的转换，例如从float64到float32。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘unsafe’ means any data conversions may be done.
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘unsafe’表示可能进行任何数据转换。
- en: Default is ‘safe’.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值为‘safe’。
- en: '**optimize**{False, True, ‘greedy’, ‘optimal’}, optional'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**优化**{False，True，‘greedy’，‘optimal’}，可选'
- en: Controls if intermediate optimization should occur. No optimization will occur
    if False and True will default to the ‘greedy’ algorithm. Also accepts an explicit
    contraction list from the `np.einsum_path` function. See `np.einsum_path` for
    more details. Defaults to False.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否应进行中间优化。如果为False，则不会进行任何优化，如果为True，则默认为‘greedy’算法。还接受来自`np.einsum_path`函数的显式收缩列表。有关更多详细信息，请参见`np.einsum_path`。默认为False。
- en: 'Returns:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**output**ndarray'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**ndarray'
- en: The calculation based on the Einstein summation convention.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 基于爱因斯坦求和约定的计算。
- en: See also
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`einsum_path`](numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path"),
    [`dot`](numpy.dot.html#numpy.dot "numpy.dot"), [`inner`](numpy.inner.html#numpy.inner
    "numpy.inner"), [`outer`](numpy.outer.html#numpy.outer "numpy.outer"), [`tensordot`](numpy.tensordot.html#numpy.tensordot
    "numpy.tensordot"), [`linalg.multi_dot`](numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`einsum_path`](numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path"),
    [`dot`](numpy.dot.html#numpy.dot "numpy.dot"), [`inner`](numpy.inner.html#numpy.inner
    "numpy.inner"), [`outer`](numpy.outer.html#numpy.outer "numpy.outer"), [`tensordot`](numpy.tensordot.html#numpy.tensordot
    "numpy.tensordot"), [`linalg.multi_dot`](numpy.linalg.multi_dot.html#numpy.linalg.multi_dot
    "numpy.linalg.multi_dot")'
- en: '`einops`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`einops`'
- en: 'similar verbose interface is provided by [einops](https://github.com/arogozhnikov/einops)
    package to cover additional operations: transpose, reshape/flatten, repeat/tile,
    squeeze/unsqueeze and reductions.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的冗长接口由[einops](https://github.com/arogozhnikov/einops)包提供，以涵盖额外的操作：转置，重塑/展平，重复/平铺，挤压/展开和约简。
- en: '`opt_einsum`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`opt_einsum`'
- en: '[opt_einsum](https://optimized-einsum.readthedocs.io/en/stable/) optimizes
    contraction order for einsum-like expressions in backend-agnostic manner.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[opt_einsum](https://optimized-einsum.readthedocs.io/en/stable/)以与后端无关的方式优化了类似einsum表达式的收缩顺序。'
- en: Notes
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: New in version 1.6.0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.6.0中的新功能。
- en: The Einstein summation convention can be used to compute many multi-dimensional,
    linear algebraic array operations. [`einsum`](#numpy.einsum "numpy.einsum") provides
    a succinct way of representing these.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 爱因斯坦求和约定可用于计算许多多维、线性代数的数组操作。[`einsum`](#numpy.einsum "numpy.einsum")提供了一种简洁的表示方式。
- en: 'A non-exhaustive list of these operations, which can be computed by [`einsum`](#numpy.einsum
    "numpy.einsum"), is shown below along with examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是[`einsum`](#numpy.einsum "numpy.einsum")可以计算的一些操作的非穷尽列表，以及示例：
- en: Trace of an array, [`numpy.trace`](numpy.trace.html#numpy.trace "numpy.trace").
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组的迹，[`numpy.trace`](numpy.trace.html#numpy.trace "numpy.trace").
- en: Return a diagonal, [`numpy.diag`](numpy.diag.html#numpy.diag "numpy.diag").
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回对角线，[`numpy.diag`](numpy.diag.html#numpy.diag "numpy.diag")。
- en: Array axis summations, [`numpy.sum`](numpy.sum.html#numpy.sum "numpy.sum").
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组轴求和，[`numpy.sum`](numpy.sum.html#numpy.sum "numpy.sum")。
- en: Transpositions and permutations, [`numpy.transpose`](numpy.transpose.html#numpy.transpose
    "numpy.transpose").
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置和排列，[`numpy.transpose`](numpy.transpose.html#numpy.transpose "numpy.transpose").
- en: Matrix multiplication and dot product, [`numpy.matmul`](numpy.matmul.html#numpy.matmul
    "numpy.matmul") [`numpy.dot`](numpy.dot.html#numpy.dot "numpy.dot").
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵乘法和点积，[`numpy.matmul`](numpy.matmul.html#numpy.matmul "numpy.matmul") [`numpy.dot`](numpy.dot.html#numpy.dot
    "numpy.dot")。
- en: Vector inner and outer products, [`numpy.inner`](numpy.inner.html#numpy.inner
    "numpy.inner") [`numpy.outer`](numpy.outer.html#numpy.outer "numpy.outer").
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量内积和外积，[`numpy.inner`](numpy.inner.html#numpy.inner "numpy.inner") [`numpy.outer`](numpy.outer.html#numpy.outer
    "numpy.outer")。
- en: Broadcasting, element-wise and scalar multiplication, [`numpy.multiply`](numpy.multiply.html#numpy.multiply
    "numpy.multiply").
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播，逐元素和标量乘法，[`numpy.multiply`](numpy.multiply.html#numpy.multiply "numpy.multiply")。
- en: Tensor contractions, [`numpy.tensordot`](numpy.tensordot.html#numpy.tensordot
    "numpy.tensordot").
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 张量收缩，[`numpy.tensordot`](numpy.tensordot.html#numpy.tensordot "numpy.tensordot").
- en: Chained array operations, in efficient calculation order, [`numpy.einsum_path`](numpy.einsum_path.html#numpy.einsum_path
    "numpy.einsum_path").
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链式数组操作，按照高效的计算顺序，[`numpy.einsum_path`](numpy.einsum_path.html#numpy.einsum_path
    "numpy.einsum_path")。
- en: The subscripts string is a comma-separated list of subscript labels, where each
    label refers to a dimension of the corresponding operand. Whenever a label is
    repeated it is summed, so `np.einsum('i,i', a, b)` is equivalent to [`np.inner(a,b)`](numpy.inner.html#numpy.inner
    "numpy.inner"). If a label appears only once, it is not summed, so `np.einsum('i',
    a)` produces a view of `a` with no changes. A further example `np.einsum('ij,jk',
    a, b)` describes traditional matrix multiplication and is equivalent to [`np.matmul(a,b)`](numpy.matmul.html#numpy.matmul
    "numpy.matmul"). Repeated subscript labels in one operand take the diagonal. For
    example, `np.einsum('ii', a)` is equivalent to [`np.trace(a)`](numpy.trace.html#numpy.trace
    "numpy.trace").
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下标字符串是一个逗号分隔的下标标签列表，其中每个标签指的是相应操作数的一个维度。每当一个标签重复出现时，它就会被求和，因此`np.einsum('i,i',
    a, b)`等同于[`np.inner(a,b)`](numpy.inner.html#numpy.inner "numpy.inner")。如果一个标签只出现一次，它就不会被求和，因此`np.einsum('i',
    a)`会产生一个不变的`a`视图。进一步的例子`np.einsum('ij,jk', a, b)`描述了传统的矩阵乘法，并等同于[`np.matmul(a,b)`](numpy.matmul.html#numpy.matmul
    "numpy.matmul")。一个操作数中重复的下标标签会取对角线。例如，`np.einsum('ii', a)`等同于[`np.trace(a)`](numpy.trace.html#numpy.trace
    "numpy.trace")。
- en: In *implicit mode*, the chosen subscripts are important since the axes of the
    output are reordered alphabetically. This means that `np.einsum('ij', a)` doesn’t
    affect a 2D array, while `np.einsum('ji', a)` takes its transpose. Additionally,
    `np.einsum('ij,jk', a, b)` returns a matrix multiplication, while, `np.einsum('ij,jh',
    a, b)` returns the transpose of the multiplication since subscript ‘h’ precedes
    subscript ‘i’.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在*隐式模式*下，所选择的下标很重要，因为输出的轴会按字母顺序重新排序。这意味着`np.einsum('ij', a)`不会影响2D数组，而`np.einsum('ji',
    a)`会取其转置。此外，`np.einsum('ij,jk', a, b)`返回矩阵乘法，而`np.einsum('ij,jh', a, b)`返回乘法的转置，因为下标‘h’在下标‘i’之前。
- en: In *explicit mode* the output can be directly controlled by specifying output
    subscript labels. This requires the identifier ‘->’ as well as the list of output
    subscript labels. This feature increases the flexibility of the function since
    summing can be disabled or forced when required. The call `np.einsum('i->', a)`
    is like [`np.sum(a, axis=-1)`](numpy.sum.html#numpy.sum "numpy.sum"), and `np.einsum('ii->i',
    a)` is like [`np.diag(a)`](numpy.diag.html#numpy.diag "numpy.diag"). The difference
    is that [`einsum`](#numpy.einsum "numpy.einsum") does not allow broadcasting by
    default. Additionally `np.einsum('ij,jh->ih', a, b)` directly specifies the order
    of the output subscript labels and therefore returns matrix multiplication, unlike
    the example above in implicit mode.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在*显式模式*下，输出可以通过指定输出下标标签来直接控制。这需要标识符‘->’以及输出下标标签列表。此功能增加了函数的灵活性，因为可以在需要时禁用或强制求和。调用`np.einsum('i->',
    a)`类似于[`np.sum(a, axis=-1)`](numpy.sum.html#numpy.sum "numpy.sum")，而`np.einsum('ii->i',
    a)`类似于[`np.diag(a)`](numpy.diag.html#numpy.diag "numpy.diag")。不同之处在于[`einsum`](#numpy.einsum
    "numpy.einsum")默认不允许广播。此外，`np.einsum('ij,jh->ih', a, b)`直接指定了输出下标标签的顺序，因此返回矩阵乘法，不同于上面隐式模式中的示例。
- en: To enable and control broadcasting, use an ellipsis. Default NumPy-style broadcasting
    is done by adding an ellipsis to the left of each term, like `np.einsum('...ii->...i',
    a)`. To take the trace along the first and last axes, you can do `np.einsum('i...i',
    a)`, or to do a matrix-matrix product with the left-most indices instead of rightmost,
    one can do `np.einsum('ij...,jk...->ik...', a, b)`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用和控制广播，请使用省略号。默认的NumPy风格广播是通过在每个术语的左侧添加省略号来完成的，例如`np.einsum('...ii->...i',
    a)`。要沿着第一个和最后一个轴进行迹运算，可以使用`np.einsum('i...i', a)`，或者要使用左侧索引进行矩阵-矩阵乘法而不是右侧索引，可以使用`np.einsum('ij...,jk...->ik...',
    a, b)`。
- en: When there is only one operand, no axes are summed, and no output parameter
    is provided, a view into the operand is returned instead of a new array. Thus,
    taking the diagonal as `np.einsum('ii->i', a)` produces a view (changed in version
    1.10.0).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有一个操作数时，不会对轴求和，并且没有提供输出参数，则会返回对操作数的视图，而不是新数组。因此，对角线作为`np.einsum('ii->i', a)`会产生一个视图（在版本1.10.0中更改）。
- en: '[`einsum`](#numpy.einsum "numpy.einsum") also provides an alternative way to
    provide the subscripts and operands as `einsum(op0, sublist0, op1, sublist1, ...,
    [sublistout])`. If the output shape is not provided in this format [`einsum`](#numpy.einsum
    "numpy.einsum") will be calculated in implicit mode, otherwise it will be performed
    explicitly. The examples below have corresponding [`einsum`](#numpy.einsum "numpy.einsum")
    calls with the two parameter methods.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`einsum`](#numpy.einsum "numpy.einsum")还提供了另一种提供下标和操作数的方法，即`einsum(op0, sublist0,
    op1, sublist1, ..., [sublistout])`。如果没有以这种格式提供输出形状，则将以隐式模式计算[`einsum`](#numpy.einsum
    "numpy.einsum")，否则将以显式模式执行。下面的示例具有相应的[`einsum`](#numpy.einsum "numpy.einsum")调用，使用了两个参数方法。'
- en: New in version 1.10.0.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.10.0中的新功能。
- en: Views returned from einsum are now writeable whenever the input array is writeable.
    For example, `np.einsum('ijk...->kji...', a)` will now have the same effect as
    [`np.swapaxes(a, 0, 2)`](numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")
    and `np.einsum('ii->i', a)` will return a writeable view of the diagonal of a
    2D array.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从einsum返回的视图现在在输入数组可写时也是可写的。例如，`np.einsum('ijk...->kji...', a)`现在将产生与[`np.swapaxes(a,
    0, 2)`](numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")相同的效果，而`np.einsum('ii->i',
    a)`将返回2D数组对角线的可写视图。
- en: New in version 1.12.0.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.12.0中的新功能。
- en: Added the `optimize` argument which will optimize the contraction order of an
    einsum expression. For a contraction with three or more operands this can greatly
    increase the computational efficiency at the cost of a larger memory footprint
    during computation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了`optimize`参数，它将优化einsum表达式的收缩顺序。对于三个或更多操作数的收缩，这可以大大增加计算效率，但在计算过程中会增加更大的内存占用。
- en: Typically a ‘greedy’ algorithm is applied which empirical tests have shown returns
    the optimal path in the majority of cases. In some cases ‘optimal’ will return
    the superlative path through a more expensive, exhaustive search. For iterative
    calculations it may be advisable to calculate the optimal path once and reuse
    that path by supplying it as an argument. An example is given below.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常应用‘贪婪’算法，经验测试表明在大多数情况下返回最优路径。在某些情况下，‘最优’将通过更昂贵的、详尽的搜索返回超级路径。对于迭代计算，建议计算一次最优路径并通过将其作为参数提供来重复使用该路径。下面给出一个示例。
- en: See [`numpy.einsum_path`](numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")
    for more details.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`numpy.einsum_path`](numpy.einsum_path.html#numpy.einsum_path "numpy.einsum_path")以获取更多详细信息。
- en: Examples
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Trace of a matrix:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的迹：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Extract the diagonal (requires explicit form):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 提取对角线（需要显式形式）：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Sum over an axis (requires explicit form):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 沿轴求和（需要显式形式）：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For higher dimensional arrays summing a single axis can be done with ellipsis:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高维度的数组，可以使用省略号对单个轴求和：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Compute a matrix transpose, or reorder any number of axes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 计算矩阵转置，或重新排列任意数量的轴：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Vector inner products:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 向量内积：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Matrix vector multiplication:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵向量乘法：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Broadcasting and scalar multiplication:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 广播和标量乘法：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Vector outer product:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 向量外积：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Tensor contraction:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 张量收缩：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Writeable returned arrays (since version 1.10.0):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可写返回数组（自版本1.10.0起）：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Example of ellipsis use:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 省略号用法示例：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Chained array operations. For more complicated contractions, speed ups might
    be achieved by repeatedly computing a ‘greedy’ path or pre-computing the ‘optimal’
    path and repeatedly applying it, using an [`einsum_path`](numpy.einsum_path.html#numpy.einsum_path
    "numpy.einsum_path") insertion (since version 1.12.0). Performance improvements
    can be particularly significant with larger arrays:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 链式数组操作。对于更复杂的收缩，通过重复计算‘贪婪’路径或预先计算‘最优’路径并重复应用它，使用[`einsum_path`](numpy.einsum_path.html#numpy.einsum_path
    "numpy.einsum_path")插入（自版本1.12.0起）可能实现速度提升。性能改进在处理更大的数组时可能特别显著：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Basic [`einsum`](#numpy.einsum "numpy.einsum"): ~1520ms (benchmarked on 3.1GHz
    Intel i5.)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的[`einsum`](#numpy.einsum "numpy.einsum")：~1520ms（在3.1GHz英特尔i5上进行基准测试。）
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Sub-optimal [`einsum`](#numpy.einsum "numpy.einsum") (due to repeated path
    calculation time): ~330ms'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 子优化的[`einsum`](#numpy.einsum "numpy.einsum")（由于重复路径计算时间）：~330ms
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Greedy [`einsum`](#numpy.einsum "numpy.einsum") (faster optimal path approximation):
    ~160ms'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 贪婪的[`einsum`](#numpy.einsum "numpy.einsum")（更快的最优路径近似）：~160ms
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Optimal [`einsum`](#numpy.einsum "numpy.einsum") (best usage pattern in some
    use cases): ~110ms'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最优的[`einsum`](#numpy.einsum "numpy.einsum")（在某些用例中的最佳使用模式）：~110ms
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
