- en: scipy.optimize.line_search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.line_search.html#scipy.optimize.line_search](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.line_search.html#scipy.optimize.line_search)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find alpha that satisfies strong Wolfe conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**callable f(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**myfprime**callable f’(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function gradient.
  prefs: []
  type: TYPE_NORMAL
- en: '**xk**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Starting point.
  prefs: []
  type: TYPE_NORMAL
- en: '**pk**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Search direction. The search direction must be a descent direction for the algorithm
    to converge.
  prefs: []
  type: TYPE_NORMAL
- en: '**gfk**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient value for x=xk (xk being the current parameter estimate). Will be recomputed
    if omitted.
  prefs: []
  type: TYPE_NORMAL
- en: '**old_fval**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Function value for x=xk. Will be recomputed if omitted.
  prefs: []
  type: TYPE_NORMAL
- en: '**old_old_fval**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Function value for the point preceding x=xk.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Additional arguments passed to objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**c1**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for Armijo condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**c2**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Parameter for curvature condition rule.
  prefs: []
  type: TYPE_NORMAL
- en: '**amax**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum step size
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_condition**callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A callable of the form `extra_condition(alpha, x, f, g)` returning a boolean.
    Arguments are the proposed step `alpha` and the corresponding `x`, `f` and `g`
    values. The line search accepts the value of `alpha` only if this callable returns
    `True`. If the callable returns `False` for the step length, the algorithm will
    continue with new iterates. The callable is only called for iterates satisfying
    the strong Wolfe conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**float or None'
  prefs: []
  type: TYPE_NORMAL
- en: Alpha for which `x_new = x0 + alpha * pk`, or None if the line search algorithm
    did not converge.
  prefs: []
  type: TYPE_NORMAL
- en: '**fc**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of function evaluations made.
  prefs: []
  type: TYPE_NORMAL
- en: '**gc**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of gradient evaluations made.
  prefs: []
  type: TYPE_NORMAL
- en: '**new_fval**float or None'
  prefs: []
  type: TYPE_NORMAL
- en: New function value `f(x_new)=f(x0+alpha*pk)`, or None if the line search algorithm
    did not converge.
  prefs: []
  type: TYPE_NORMAL
- en: '**old_fval**float'
  prefs: []
  type: TYPE_NORMAL
- en: Old function value `f(x0)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**new_slope**float or None'
  prefs: []
  type: TYPE_NORMAL
- en: The local slope along the search direction at the new value `<myfprime(x_new),
    pk>`, or None if the line search algorithm did not converge.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Uses the line search algorithm to enforce strong Wolfe conditions. See Wright
    and Nocedal, ‘Numerical Optimization’, 1999, pp. 59-61.
  prefs: []
  type: TYPE_NORMAL
- en: The search direction *pk* must be a descent direction (e.g. `-myfprime(xk)`)
    to find a step length that satisfies the strong Wolfe conditions. If the search
    direction is not a descent direction (e.g. `myfprime(xk)`), then *alpha*, *new_fval*,
    and *new_slope* will be None.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A objective function and its gradient are defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can find alpha that satisfies strong Wolfe conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
