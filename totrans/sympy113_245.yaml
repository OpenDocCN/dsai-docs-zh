- en: Run Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/testing/runtests.html](https://docs.sympy.org/latest/modules/testing/runtests.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is our testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Goals:'
  prefs: []
  type: TYPE_NORMAL
- en: it should be compatible with py.test and operate very similarly (or identically)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: does not require any external dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: preferably all the functionality should be in this file only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no magic, just import the test file and execute the test functions, that’s it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: portable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Py.test like reporter. Should produce output identical to py.test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Prints a text on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: It uses sys.stdout.write(), so no readline library is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**color** : choose from the colors below, “” means default color'
  prefs: []
  type: TYPE_NORMAL
- en: '**align** : “left”/”right”, “left” is a normal print, “right” is aligned on'
  prefs: []
  type: TYPE_NORMAL
- en: the right-hand side of the screen, filled with spaces if necessary
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**width** : the screen width'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parent class for all reporters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A class used to extract the DocTests that are relevant to a given object, from
    its docstring and the docstrings of its contained objects. Doctests can currently
    be extracted from the following object types: modules, functions, classes, methods,
    staticmethods, classmethods, and properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Modified from doctest’s version to look harder for code that appears comes from
    a different module. For example, the @vectorize decorator makes it look like functions
    come from multidimensional.py even though their code exists elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A class used to run DocTest test cases, and accumulate statistics. The `run`
    method is used to process a single DocTest case. It returns a tuple `(f, t)`,
    where `t` is the number of test cases tried, and `f` is the number of test cases
    that failed.
  prefs: []
  type: TYPE_NORMAL
- en: Modified from the doctest version to not reset the sys.displayhook (see issue
    5140).
  prefs: []
  type: TYPE_NORMAL
- en: See the docstring of the original DocTestRunner for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Run the examples in `test`, and display the results using the writer function
    `out`.
  prefs: []
  type: TYPE_NORMAL
- en: The examples are run in the namespace `test.globs`. If `clear_globs` is true
    (the default), then this namespace will be cleared after the test runs, to help
    with garbage collection. If you would like to examine the namespace after the
    test completes, then use `clear_globs=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '`compileflags` gives the set of flags that should be used by the Python compiler
    when running the examples. If not specified, then it will default to the set of
    future-import flags that apply to `globs`.'
  prefs: []
  type: TYPE_NORMAL
- en: The output of each example is checked using `SymPyDocTestRunner.check_output`,
    and the results are formatted by the `SymPyDocTestRunner.report_*` methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Compared to the OutputChecker from the stdlib our OutputChecker class supports
    numerical comparison of floats occurring in the output of the doctest examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Return True iff the actual output from an example (\(got\)) matches the expected
    output (\(want\)). These strings are always considered to match if they are identical;
    but depending on what option flags the test runner is using, several non-exact
    match types are also possible. See the documentation for \(TestRunner\) for more
    information about option flags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Converts a list of ‘/’ separated paths into a list of native (os.sep separated)
    paths and converts to lowercase if the system is case insensitive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Runs doctests in all *.py files in the SymPy directory which match any of the
    given strings in `paths` or all tests if paths=[].
  prefs: []
  type: TYPE_NORMAL
- en: 'Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: Paths can be entered in native system format or in unix, forward-slash format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files that are on the blacklist can be tested by providing their path; they
    are only excluded if no paths are given.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all tests in sympy/functions/ and some particular file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run any file having polynomial in its name, doc/src/modules/polynomial.rst,
    sympy/functions/special/polynomials.py, and sympy/polys/polynomial.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `split` option can be passed to split the test run into parts. The split
    currently only splits the test files, though this may change in the future. `split`
    should be a string of the form ‘a/b’, which will run part `a` of `b`. Note that
    the regular doctests and the Sphinx doctests are split independently. For instance,
    to run the first half of the test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `subprocess` and `verbose` options are the same as with the function `test()`
    (see the docstring of that function for more information) except that `verbose`
    may also be set equal to `2` in order to print individual doctest lines, as they
    are being tested.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Returns the root SymPy directory and set the global value indicating whether
    the system is case sensitive or not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Context manager to make DeprecationWarning raise an error
  prefs: []
  type: TYPE_NORMAL
- en: This is to catch SymPyDeprecationWarning from library code while running tests
    and doctests. It is important to use this context manager around each individual
    test/doctest in case some tests modify the warning filters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Run all tests.
  prefs: []
  type: TYPE_NORMAL
- en: Right now, this runs the regular tests (bin/test), the doctests (bin/doctest),
    and the examples (examples/all.py).
  prefs: []
  type: TYPE_NORMAL
- en: This is what `setup.py test` uses.
  prefs: []
  type: TYPE_NORMAL
- en: You can pass arguments and keyword arguments to the test functions that support
    them (for now, test, doctest, and the examples). See the docstrings of those functions
    for a description of the available options.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to run the solvers tests with colors turned off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Run a function in a Python subprocess with hash randomization enabled.
  prefs: []
  type: TYPE_NORMAL
- en: If hash randomization is not supported by the version of Python given, it returns
    False. Otherwise, it returns the exit value of the command. The function is passed
    to sys.exit(), so the return value of the function will be the return value.
  prefs: []
  type: TYPE_NORMAL
- en: The environment variable PYTHONHASHSEED is used to seed Python’s hash randomization.
    If it is set, this function will return False, because starting a new subprocess
    is unnecessary in that case. If it is not set, one is set at random, and the tests
    are run. Note that if this environment variable is set when Python starts, hash
    randomization is automatically enabled. To force a subprocess to be created even
    if PYTHONHASHSEED is set, pass `force=True`. This flag will not force a subprocess
    in Python versions that do not support hash randomization (see below), because
    those versions of Python do not support the `-R` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '`function` should be a string name of a function that is importable from the
    module `module`, like “_test”. The default for `module` is “sympy.testing.runtests”.
    `function_args` and `function_kwargs` should be a repr-able tuple and dict, respectively.
    The default Python command is sys.executable, which is the currently running Python
    command.'
  prefs: []
  type: TYPE_NORMAL
- en: This function is necessary because the seed for hash randomization must be set
    by the environment variable before Python starts. Hence, in order to use a predetermined
    seed for tests, we must start Python in a separate subprocess.
  prefs: []
  type: TYPE_NORMAL
- en: Hash randomization was added in the minor Python versions 2.6.8, 2.7.3, 3.1.5,
    and 3.2.3, and is enabled by default in all Python versions after and including
    3.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Splits a list into part a of b
  prefs: []
  type: TYPE_NORMAL
- en: split should be a string of the form ‘a/b’. For instance, ‘1/3’ would give the
    split one of three.
  prefs: []
  type: TYPE_NORMAL
- en: If the length of the list is not divisible by the number of splits, the last
    split will have more items.
  prefs: []
  type: TYPE_NORMAL
- en: \(density\) may be specified as a list. If specified, tests will be balanced
    so that each split has as equal-as-possible amount of mass according to \(density\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Test examples in the given file. Return (#failures, #tests).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional keyword arg `module_relative` specifies how filenames should be interpreted:'
  prefs: []
  type: TYPE_NORMAL
- en: If `module_relative` is True (the default), then `filename` specifies a module-relative
    path. By default, this path is relative to the calling module’s directory; but
    if the `package` argument is specified, then it is relative to that package. To
    ensure os-independence, `filename` should use “/” characters to separate path
    segments, and should not be an absolute path (i.e., it may not begin with “/”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `module_relative` is False, then `filename` specifies an os-specific path.
    The path may be absolute or relative (to the current working directory).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional keyword arg `name` gives the name of the test; by default use the file’s
    basename.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword argument `package` is a Python package or the name of a Python
    package whose directory should be used as the base directory for a module relative
    filename. If no package is specified, then the calling module’s directory is used
    as the base directory for module relative filenames. It is an error to specify
    `package` if `module_relative` is False.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `globs` gives a dict to be used as the globals when executing
    examples; by default, use {}. A copy of this dict is actually used for each docstring,
    so that each docstring’s examples start with a clean slate.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `extraglobs` gives a dictionary that should be merged into
    the globals that are used to execute examples. By default, no extra globals are
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `verbose` prints lots of stuff if true, prints only failures
    if false; by default, it’s true iff “-v” is in sys.argv.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `report` prints a summary at the end when true, else prints
    nothing at the end. In verbose mode, the summary is detailed, else very brief
    (in fact, empty if all tests passed).
  prefs: []
  type: TYPE_NORMAL
- en: 'Optional keyword arg `optionflags` or’s together module constants, and defaults
    to 0\. Possible values (see the docs for details):'
  prefs: []
  type: TYPE_NORMAL
- en: DONT_ACCEPT_TRUE_FOR_1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DONT_ACCEPT_BLANKLINE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NORMALIZE_WHITESPACE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ELLIPSIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SKIP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IGNORE_EXCEPTION_DETAIL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPORT_UDIFF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPORT_CDIFF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPORT_NDIFF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPORT_ONLY_FIRST_FAILURE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional keyword arg `raise_on_error` raises an exception on the first unexpected
    exception or failure. This allows failures to be post-mortem debugged.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `parser` specifies a DocTestParser (or subclass) that should
    be used to extract tests from the files.
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arg `encoding` specifies an encoding that should be used to
    convert the file to unicode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced tomfoolery: testmod runs methods of a local instance of class doctest.Tester,
    then merges the results into (or creates) global Tester instance doctest.master.
    Methods of doctest.master can be called directly too, if you want to do something
    unusual. Passing report=0 to testmod is especially useful then, to delay displaying
    a summary. Invoke doctest.master.summarize(verbose) when you’re done fiddling.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Run tests in the specified test_*.py files.
  prefs: []
  type: TYPE_NORMAL
- en: Tests in a particular test_*.py file are run if any of the given strings in
    `paths` matches a part of the test file’s path. If `paths=[]`, tests in all test_*.py
    files are run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: If sort=False, tests are run in random order (not default).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paths can be entered in native system format or in unix, forward-slash format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files that are on the blacklist can be tested by providing their path; they
    are only excluded if no paths are given.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Explanation of test results**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Output | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| . | passed |'
  prefs: []
  type: TYPE_TB
- en: '| F | failed |'
  prefs: []
  type: TYPE_TB
- en: '| X | XPassed (expected to fail but passed) |'
  prefs: []
  type: TYPE_TB
- en: '| f | XFAILed (expected to fail and indeed failed) |'
  prefs: []
  type: TYPE_TB
- en: '| s | skipped |'
  prefs: []
  type: TYPE_TB
- en: '| w | slow |'
  prefs: []
  type: TYPE_TB
- en: '| T | timeout (e.g., when `--timeout` is used) |'
  prefs: []
  type: TYPE_TB
- en: '| K | KeyboardInterrupt (when running the slow tests with `--slow`, you can
    interrupt one of them without killing the test runner) |'
  prefs: []
  type: TYPE_TB
- en: Colors have no additional meaning and are used just to facilitate interpreting
    the output.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run one file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all tests in sympy/functions/ and some particular file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all tests in sympy/core and sympy/utilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Run specific test from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run specific test from any file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the tests with verbose mode on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not sort the test output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Turn on post-mortem pdb:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Turn off colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Force colors, even when the output is not to a terminal (this is useful, e.g.,
    if you are piping to `less -r` and you still want colors)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The traceback verboseness can be set to “short” or “no” (default is “short”)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The `split` option can be passed to split the test run into parts. The split
    currently only splits the test files, though this may change in the future. `split`
    should be a string of the form ‘a/b’, which will run part `a` of `b`. For instance,
    to run the first half of the test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `time_balance` option can be passed in conjunction with `split`. If `time_balance=True`
    (the default for `sympy.test`), SymPy will attempt to split the tests such that
    each split takes equal time. This heuristic for balancing is based on pre-recorded
    test data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You can disable running the tests in a separate subprocess using `subprocess=False`.
    This is done to support seeding hash randomization, which is enabled by default
    in the Python versions where it is supported. If subprocess=False, hash randomization
    is enabled/disabled according to whether it has been enabled or not in the calling
    Python process. However, even if it is enabled, the seed cannot be printed unless
    it is called from a new Python process.
  prefs: []
  type: TYPE_NORMAL
- en: Hash randomization was added in the minor Python versions 2.6.8, 2.7.3, 3.1.5,
    and 3.2.3, and is enabled by default in all Python versions after and including
    3.3.0.
  prefs: []
  type: TYPE_NORMAL
- en: If hash randomization is not supported `subprocess=False` is used automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: To set the hash randomization seed, set the environment variable `PYTHONHASHSEED`
    before running the tests. This can be done from within Python using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Or from the command line using
  prefs: []
  type: TYPE_NORMAL
- en: $ PYTHONHASHSEED=42 ./bin/test
  prefs: []
  type: TYPE_NORMAL
- en: If the seed is not set, a random seed will be chosen.
  prefs: []
  type: TYPE_NORMAL
- en: Note that to reproduce the same hash values, you must use both the same seed
    as well as the same architecture (32-bit vs. 64-bit).
  prefs: []
  type: TYPE_NORMAL
