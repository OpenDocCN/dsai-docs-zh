- en: How to calculate summary statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html](https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Aggregating statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_aggregate.svg](../Images/52eb45a553e876eaf24468efc84f1cab.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the average age of the Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Different statistics are available and can be applied to columns with numerical
    data. Operations in general exclude missing data and operate across rows by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/06_reduction.svg](../Images/32103f1687166eda4c0c83953740906d.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the median age and ticket fare price of the Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The statistic applied to multiple columns of a `DataFrame` (the selection of
    two columns returns a `DataFrame`, see the [subset data tutorial](03_subset_data.html#min-tut-03-subset))
    is calculated for each numeric column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The aggregating statistic can be calculated for multiple columns at the same
    time. Remember the `describe` function from the [first tutorial](01_table_oriented.html#min-tut-01-tableoriented)?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the predefined statistics, specific combinations of aggregating
    statistics for given columns can be defined using the [`DataFrame.agg()`](../../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: Details about descriptive statistics are provided in the user guide section
    on [descriptive statistics](../../user_guide/basics.html#basics-stats).
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating statistics grouped by category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_groupby.svg](../Images/7b35992d692c234abe854ead2a7733f3.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the average age for male versus female Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As our interest is the average age for each gender, a subselection on these
    two columns is made first: `titanic[["Sex", "Age"]]`. Next, the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method is applied on the `Sex` column to make a group
    per category. The average age *for each gender* is calculated and returned.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculating a given statistic (e.g. `mean` age) *for each category in a column*
    (e.g. male/female in the `Sex` column) is a common pattern. The `groupby` method
    is used to support this type of operations. This fits in the more general `split-apply-combine`
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Split** the data into groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply** a function to each group independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combine** the results into a data structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The apply and combine steps are typically done together in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, we explicitly selected the 2 columns first. If not,
    the `mean` method is applied to each column containing numerical columns by passing
    `numeric_only=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It does not make much sense to get the average value of the `Pclass`. If we
    are only interested in the average age for each gender, the selection of columns
    (rectangular brackets `[]` as usual) is supported on the grouped data as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/06_groupby_select_detail.svg](../Images/8af43e77e10f24e246897f8634388c47.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `Pclass` column contains numerical data but actually represents 3 categories
    (or factors) with respectively the labels ‘1’, ‘2’ and ‘3’. Calculating statistics
    on these does not make much sense. Therefore, pandas provides a `Categorical`
    data type to handle this type of data. More information is provided in the user
    guide [Categorical data](../../user_guide/categorical.html#categorical) section.
  prefs: []
  type: TYPE_NORMAL
- en: What is the mean ticket fare price for each of the sex and cabin class combinations?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Grouping can be done by multiple columns at the same time. Provide the column
    names as a list to the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full description on the split-apply-combine approach is provided in the user
    guide section on [groupby operations](../../user_guide/groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
- en: Count number of records by category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_valuecounts.svg](../Images/2ec9ed23f0aa42ba8b8deccf76bee56c.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the number of passengers in each of the cabin classes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`value_counts()`](../../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") method counts the number of records for each category
    in a column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The function is a shortcut, as it is actually a groupby operation in combination
    with counting of the number of records within each group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Both `size` and `count` can be used in combination with `groupby`. Whereas `size`
    includes `NaN` values and just provides the number of rows (size of the table),
    `count` excludes the missing values. In the `value_counts` method, use the `dropna`
    argument to include or exclude the `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: The user guide has a dedicated section on `value_counts` , see the page on [discretization](../../user_guide/basics.html#basics-discretization).
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Aggregation statistics can be calculated on entire columns or rows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby` provides the power of the *split-apply-combine* pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value_counts` is a convenient shortcut to count the number of entries in each
    category of a variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full description on the split-apply-combine approach is provided in the user
    guide pages about [groupby operations](../../user_guide/groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_aggregate.svg](../Images/52eb45a553e876eaf24468efc84f1cab.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the average age of the Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Different statistics are available and can be applied to columns with numerical
    data. Operations in general exclude missing data and operate across rows by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![../../_images/06_reduction.svg](../Images/32103f1687166eda4c0c83953740906d.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the median age and ticket fare price of the Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The statistic applied to multiple columns of a `DataFrame` (the selection of
    two columns returns a `DataFrame`, see the [subset data tutorial](03_subset_data.html#min-tut-03-subset))
    is calculated for each numeric column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The aggregating statistic can be calculated for multiple columns at the same
    time. Remember the `describe` function from the [first tutorial](01_table_oriented.html#min-tut-01-tableoriented)?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the predefined statistics, specific combinations of aggregating
    statistics for given columns can be defined using the [`DataFrame.agg()`](../../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: Details about descriptive statistics are provided in the user guide section
    on [descriptive statistics](../../user_guide/basics.html#basics-stats).
  prefs: []
  type: TYPE_NORMAL
- en: Aggregating statistics grouped by category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_groupby.svg](../Images/7b35992d692c234abe854ead2a7733f3.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the average age for male versus female Titanic passengers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As our interest is the average age for each gender, a subselection on these
    two columns is made first: `titanic[["Sex", "Age"]]`. Next, the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method is applied on the `Sex` column to make a group
    per category. The average age *for each gender* is calculated and returned.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculating a given statistic (e.g. `mean` age) *for each category in a column*
    (e.g. male/female in the `Sex` column) is a common pattern. The `groupby` method
    is used to support this type of operations. This fits in the more general `split-apply-combine`
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Split** the data into groups'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply** a function to each group independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combine** the results into a data structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The apply and combine steps are typically done together in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, we explicitly selected the 2 columns first. If not,
    the `mean` method is applied to each column containing numerical columns by passing
    `numeric_only=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'It does not make much sense to get the average value of the `Pclass`. If we
    are only interested in the average age for each gender, the selection of columns
    (rectangular brackets `[]` as usual) is supported on the grouped data as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/06_groupby_select_detail.svg](../Images/8af43e77e10f24e246897f8634388c47.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `Pclass` column contains numerical data but actually represents 3 categories
    (or factors) with respectively the labels ‘1’, ‘2’ and ‘3’. Calculating statistics
    on these does not make much sense. Therefore, pandas provides a `Categorical`
    data type to handle this type of data. More information is provided in the user
    guide [Categorical data](../../user_guide/categorical.html#categorical) section.
  prefs: []
  type: TYPE_NORMAL
- en: What is the mean ticket fare price for each of the sex and cabin class combinations?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Grouping can be done by multiple columns at the same time. Provide the column
    names as a list to the [`groupby()`](../../reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full description on the split-apply-combine approach is provided in the user
    guide section on [groupby operations](../../user_guide/groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
- en: Count number of records by category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../../_images/06_valuecounts.svg](../Images/2ec9ed23f0aa42ba8b8deccf76bee56c.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the number of passengers in each of the cabin classes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The [`value_counts()`](../../reference/api/pandas.Series.value_counts.html#pandas.Series.value_counts
    "pandas.Series.value_counts") method counts the number of records for each category
    in a column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The function is a shortcut, as it is actually a groupby operation in combination
    with counting of the number of records within each group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Both `size` and `count` can be used in combination with `groupby`. Whereas `size`
    includes `NaN` values and just provides the number of rows (size of the table),
    `count` excludes the missing values. In the `value_counts` method, use the `dropna`
    argument to include or exclude the `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: The user guide has a dedicated section on `value_counts` , see the page on [discretization](../../user_guide/basics.html#basics-discretization).
  prefs: []
  type: TYPE_NORMAL
- en: REMEMBER
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Aggregation statistics can be calculated on entire columns or rows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby` provides the power of the *split-apply-combine* pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value_counts` is a convenient shortcut to count the number of entries in each
    category of a variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To user guide
  prefs: []
  type: TYPE_NORMAL
- en: A full description on the split-apply-combine approach is provided in the user
    guide pages about [groupby operations](../../user_guide/groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
