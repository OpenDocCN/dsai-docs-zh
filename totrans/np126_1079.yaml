- en: CPU/SIMD Optimizations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU/SIMD 优化
- en: 原文：[https://numpy.org/doc/1.26/reference/simd/index.html](https://numpy.org/doc/1.26/reference/simd/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/simd/index.html](https://numpy.org/doc/1.26/reference/simd/index.html)
- en: NumPy comes with a flexible working mechanism that allows it to harness the
    SIMD features that CPUs own, in order to provide faster and more stable performance
    on all popular platforms. Currently, NumPy supports the X86, IBM/Power, ARM7 and
    ARM8 architectures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy具有灵活的工作机制，允许它利用CPU拥有的SIMD特性，在所有流行的平台上提供更快和更稳定的性能。目前，NumPy支持X86、IBM/Power、ARM7和ARM8架构。
- en: 'The optimization process in NumPy is carried out in three layers:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的优化过程是在三个层次上进行的：
- en: Code is *written* using the universal intrinsics which is a set of types, macros
    and functions that are mapped to each supported instruction-sets by using guards
    that will enable use of the them only when the compiler recognizes them. This
    allow us to generate multiple kernels for the same functionality, in which each
    generated kernel represents a set of instructions that related one or multiple
    certain CPU features. The first kernel represents the minimum (baseline) CPU features,
    and the other kernels represent the additional (dispatched) CPU features.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码使用通用的内部函数来编写，这是一组类型、宏和函数，通过使用保护，将它们映射到每个支持的指令集上，只有编译器识别他们时才可以使用。这使我们能够为相同功能生成多个内核，其中每个生成的内核表示一个或多个特定
    CPU 特性的指令集。第一个内核表示最小（基线）CPU 特性，而其他内核则表示附加的（分派的）CPU 特性。
- en: At *compile* time, CPU build options are used to define the minimum and additional
    features to support, based on user choice and compiler support. The appropriate
    intrinsics are overlaid with the platform / architecture intrinsics, and multiple
    kernels are compiled.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*编译*时，使用 CPU 构建选项来定义要支持的最低和附加特性，基于用户选择和编译器支持。适当的内部函数与平台/架构内部函数叠加，并编译多个内核。
- en: At *runtime import*, the CPU is probed for the set of supported CPU features.
    A mechanism is used to grab the pointer to the most appropriate kernel, and this
    will be the one called for the function.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*运行时导入*时，对CPU进行探测以获得支持的CPU特性集。使用机制来获取指向最适合的内核的指针，并且这将是调用函数的内核。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: NumPy community had a deep discussion before implementing this work, please
    check [NEP-38](https://numpy.org/neps/nep-0038-SIMD-optimizations.html) for more
    clarification.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy社区在实施此项工作之前进行了深入讨论，请查看[NEP-38](https://numpy.org/neps/nep-0038-SIMD-optimizations.html)以获得更多澄清。
- en: '[CPU build options](build-options.html)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CPU 构建选项](build-options.html)'
- en: '[Description](build-options.html#description)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[描述](build-options.html#description)'
- en: '[Quick Start](build-options.html#quick-start)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[快速入门](build-options.html#quick-start)'
- en: '[I am building NumPy for my local use](build-options.html#i-am-building-numpy-for-my-local-use)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我正在为本地使用构建NumPy](build-options.html#i-am-building-numpy-for-my-local-use)'
- en: '[I do not want to support the old processors of the *x86* architecture](build-options.html#i-do-not-want-to-support-the-old-processors-of-the-x86-architecture)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我不想支持旧的*x86*架构处理器](build-options.html#i-do-not-want-to-support-the-old-processors-of-the-x86-architecture)'
- en: '[I’m facing the same case above but with *ppc64* architecture](build-options.html#i-m-facing-the-same-case-above-but-with-ppc64-architecture)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我遇到了与上述情况相同的情况，但使用了*ppc64*架构](build-options.html#i-m-facing-the-same-case-above-but-with-ppc64-architecture)'
- en: '[Having issues with *AVX512* features?](build-options.html#having-issues-with-avx512-features)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AVX512特性有问题吗？](build-options.html#having-issues-with-avx512-features)'
- en: '[Supported Features](build-options.html#supported-features)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[支持的特性](build-options.html#supported-features)'
- en: '[On x86](build-options.html#on-x86)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在x86上](build-options.html#on-x86)'
- en: '[On IBM/POWER big-endian](build-options.html#on-ibm-power-big-endian)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在IBM/POWER大端](build-options.html#on-ibm-power-big-endian)'
- en: '[On IBM/POWER little-endian](build-options.html#on-ibm-power-little-endian)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在IBM/POWER小端](build-options.html#on-ibm-power-little-endian)'
- en: '[On ARMv7/A32](build-options.html#on-armv7-a32)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在ARMv7/A32](build-options.html#on-armv7-a32)'
- en: '[On ARMv8/A64](build-options.html#on-armv8-a64)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在ARMv8/A64](build-options.html#on-armv8-a64)'
- en: '[On IBM/ZSYSTEM(S390X)](build-options.html#on-ibm-zsystem-s390x)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在IBM/ZSYSTEM(S390X)](build-options.html#on-ibm-zsystem-s390x)'
- en: '[Special Options](build-options.html#special-options)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特殊选项](build-options.html#special-options)'
- en: '[Behaviors](build-options.html#behaviors)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[行为](build-options.html#behaviors)'
- en: '[Platform differences](build-options.html#platform-differences)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[平台差异](build-options.html#platform-differences)'
- en: '[On x86::Intel Compiler](build-options.html#on-x86-intel-compiler)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在x86::Intel编译器](build-options.html#on-x86-intel-compiler)'
- en: '[On x86::Microsoft Visual C/C++](build-options.html#on-x86-microsoft-visual-c-c)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在x86::Microsoft Visual C/C++](build-options.html#on-x86-microsoft-visual-c-c)'
- en: '[Build report](build-options.html#build-report)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建报告](build-options.html#build-report)'
- en: '[Runtime dispatch](build-options.html#runtime-dispatch)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行时调度](build-options.html#runtime-dispatch)'
- en: '[How does the CPU dispatcher work?](how-it-works.html)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CPU 调度器是如何工作的？](how-it-works.html)'
- en: '[1- Configuration](how-it-works.html#configuration)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1- Configuration](how-it-works.html#configuration)'
- en: '[2- Discovering the environment](how-it-works.html#discovering-the-environment)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2- 发现环境](how-it-works.html#discovering-the-environment)'
- en: '[3- Validating the requested optimizations](how-it-works.html#validating-the-requested-optimizations)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3- 验证请求的优化](how-it-works.html#validating-the-requested-optimizations)'
- en: '[4- Generating the main configuration header](how-it-works.html#generating-the-main-configuration-header)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4- 生成主配置头文件](how-it-works.html#generating-the-main-configuration-header)'
- en: '[5- Dispatch-able sources and configuration statements](how-it-works.html#dispatch-able-sources-and-configuration-statements)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5- Dispatch-able sources and configuration statements](how-it-works.html#dispatch-able-sources-and-configuration-statements)'
