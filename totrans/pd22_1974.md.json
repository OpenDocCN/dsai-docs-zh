["```py\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range(\"1/1/2000\", periods=6))\n\nIn [3]: df\nOut[3]: \n 0         1         2         3\n2000-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2000-01-02  1.212112 -0.173215  0.119209 -1.044236\n2000-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2000-01-04  0.721555 -0.706771 -1.039575  0.271860\n2000-01-05 -0.424972  0.567020  0.276232 -1.087401\n2000-01-06 -0.673690  0.113648 -1.478427  0.524988\n\n# deprecated now\nIn [4]: df - df[0]\nOut[4]: \n 0   1  ...  2000-01-05 00:00:00  2000-01-06 00:00:00\n2000-01-01 NaN NaN  ...                  NaN                  NaN\n2000-01-02 NaN NaN  ...                  NaN                  NaN\n2000-01-03 NaN NaN  ...                  NaN                  NaN\n2000-01-04 NaN NaN  ...                  NaN                  NaN\n2000-01-05 NaN NaN  ...                  NaN                  NaN\n2000-01-06 NaN NaN  ...                  NaN                  NaN\n\n[6 rows x 10 columns]\n\n# Change your code to\nIn [5]: df.sub(df[0], axis=0)  # align on axis 0 (rows)\nOut[5]: \n 0         1         2         3\n2000-01-01  0.0 -0.751976 -1.978171 -1.604745\n2000-01-02  0.0 -1.385327 -1.092903 -2.256348\n2000-01-03  0.0 -1.242720  0.366920  1.933653\n2000-01-04  0.0 -1.428326 -1.761130 -0.449695\n2000-01-05  0.0  0.991993  0.701204 -0.662428\n2000-01-06  0.0  0.787338 -0.804737  1.198677 \n```", "```py\nIn [1]: dates = pd.date_range('1/1/2000', '1/5/2000', freq='4h')\n\nIn [2]: series = pd.Series(np.arange(len(dates)), index=dates)\n\nIn [3]: series\nOut[3]:\n2000-01-01 00:00:00     0\n2000-01-01 04:00:00     1\n2000-01-01 08:00:00     2\n2000-01-01 12:00:00     3\n2000-01-01 16:00:00     4\n2000-01-01 20:00:00     5\n2000-01-02 00:00:00     6\n2000-01-02 04:00:00     7\n2000-01-02 08:00:00     8\n2000-01-02 12:00:00     9\n2000-01-02 16:00:00    10\n2000-01-02 20:00:00    11\n2000-01-03 00:00:00    12\n2000-01-03 04:00:00    13\n2000-01-03 08:00:00    14\n2000-01-03 12:00:00    15\n2000-01-03 16:00:00    16\n2000-01-03 20:00:00    17\n2000-01-04 00:00:00    18\n2000-01-04 04:00:00    19\n2000-01-04 08:00:00    20\n2000-01-04 12:00:00    21\n2000-01-04 16:00:00    22\n2000-01-04 20:00:00    23\n2000-01-05 00:00:00    24\nFreq: 4H, dtype: int64\n\nIn [4]: series.resample('D', how='sum')\nOut[4]:\n2000-01-01     15\n2000-01-02     51\n2000-01-03     87\n2000-01-04    123\n2000-01-05     24\nFreq: D, dtype: int64\n\nIn [5]: # old behavior\nIn [6]: series.resample('D', how='sum', closed='right', label='right')\nOut[6]:\n2000-01-01      0\n2000-01-02     21\n2000-01-03     57\n2000-01-04     93\n2000-01-05    129\nFreq: D, dtype: int64 \n```", "```py\nIn [6]: s = pd.Series([1.5, np.inf, 3.4, -np.inf])\n\nIn [7]: pd.isnull(s)\nOut[7]:\n0    False\n1    False\n2    False\n3    False\nLength: 4, dtype: bool\n\nIn [8]: s.fillna(0)\nOut[8]:\n0    1.500000\n1         inf\n2    3.400000\n3        -inf\nLength: 4, dtype: float64\n\nIn [9]: pd.set_option('use_inf_as_null', True)\n\nIn [10]: pd.isnull(s)\nOut[10]:\n0    False\n1     True\n2    False\n3     True\nLength: 4, dtype: bool\n\nIn [11]: s.fillna(0)\nOut[11]:\n0    1.5\n1    0.0\n2    3.4\n3    0.0\nLength: 4, dtype: float64\n\nIn [12]: pd.reset_option('use_inf_as_null') \n```", "```py\nIn [6]: import io\n\nIn [7]: data = \"\"\"\n ...: a,b,c\n ...: 1,Yes,2\n ...: 3,No,4\n ...: \"\"\"\n ...:\n\nIn [8]: print(data)\n\n a,b,c\n 1,Yes,2\n 3,No,4\n\nIn [9]: pd.read_csv(io.StringIO(data), header=None)\nOut[9]:\n 0    1  2\n0      a    b  c\n1      1  Yes  2\n2      3   No  4\n\nIn [10]: pd.read_csv(io.StringIO(data), header=None, prefix=\"X\")\nOut[10]:\n X0   X1 X2\n0       a    b  c\n1       1  Yes  2\n2       3   No  4 \n```", "```py\nIn [4]: print(data)\n\n a,b,c\n 1,Yes,2\n 3,No,4\n\nIn [5]: pd.read_csv(io.StringIO(data))\nOut[5]:\n a    b  c\n0      1  Yes  2\n1      3   No  4\n\nIn [6]: pd.read_csv(io.StringIO(data), true_values=[\"Yes\"], false_values=[\"No\"])\nOut[6]:\n a      b  c\n0      1   True  2\n1      3  False  4 \n```", "```py\nIn [6]: s = pd.Series([np.nan, 1.0, 2.0, np.nan, 4])\n\nIn [7]: s\nOut[7]: \n0    NaN\n1    1.0\n2    2.0\n3    NaN\n4    4.0\ndtype: float64\n\nIn [8]: s.fillna(0)\nOut[8]: \n0    0.0\n1    1.0\n2    2.0\n3    0.0\n4    4.0\ndtype: float64\n\nIn [9]: s.fillna(method=\"pad\")\nOut[9]: \n0    NaN\n1    1.0\n2    2.0\n3    2.0\n4    4.0\ndtype: float64 \n```", "```py\nIn [10]: s.ffill()\nOut[10]: \n0    NaN\n1    1.0\n2    2.0\n3    2.0\n4    4.0\ndtype: float64 \n```", "```py\n    In [11]: def f(x):\n     ....:    return pd.Series([x, x ** 2], index=[\"x\", \"x^2\"])\n     ....: \n\n    In [12]: s = pd.Series(np.random.rand(5))\n\n    In [13]: s\n    Out[13]: \n    0    0.340445\n    1    0.984729\n    2    0.919540\n    3    0.037772\n    4    0.861549\n    dtype: float64\n\n    In [14]: s.apply(f)\n    Out[14]: \n     x       x^2\n    0  0.340445  0.115903\n    1  0.984729  0.969691\n    2  0.919540  0.845555\n    3  0.037772  0.001427\n    4  0.861549  0.742267 \n    ```", "```py\n    In [15]: pd.get_option(\"display.max_rows\")\n    Out[15]: 15 \n    ```", "```py\nIn [16]: wide_frame = pd.DataFrame(np.random.randn(5, 16))\n\nIn [17]: wide_frame\nOut[17]: \n 0         1         2   ...        13        14        15\n0 -0.548702  1.467327 -1.015962  ...  1.669052  1.037882 -1.705775\n1 -0.919854 -0.042379  1.247642  ...  1.956030  0.017587 -0.016692\n2 -0.575247  0.254161 -1.143704  ...  1.211526  0.268520  0.024580\n3 -1.577585  0.396823 -0.105381  ...  0.593616  0.884345  1.591431\n4  0.141809  0.220390  0.435589  ... -0.392670  0.007207  1.928123\n\n[5 rows x 16 columns] \n```", "```py\nIn [18]: pd.set_option(\"expand_frame_repr\", False)\n\nIn [19]: wide_frame\nOut[19]: \n 0         1         2         3         4         5         6         7         8         9         10        11        12        13        14        15\n0 -0.548702  1.467327 -1.015962 -0.483075  1.637550 -1.217659 -0.291519 -1.745505 -0.263952  0.991460 -0.919069  0.266046 -0.709661  1.669052  1.037882 -1.705775\n1 -0.919854 -0.042379  1.247642 -0.009920  0.290213  0.495767  0.362949  1.548106 -1.131345 -0.089329  0.337863 -0.945867 -0.932132  1.956030  0.017587 -0.016692\n2 -0.575247  0.254161 -1.143704  0.215897  1.193555 -0.077118 -0.408530 -0.862495  1.346061  1.511763  1.627081 -0.990582 -0.441652  1.211526  0.268520  0.024580\n3 -1.577585  0.396823 -0.105381 -0.532532  1.453749  1.208843 -0.080952 -0.264610 -0.727965 -0.589346  0.339969 -0.693205 -0.339355  0.593616  0.884345  1.591431\n4  0.141809  0.220390  0.435589  0.192451 -0.096701  0.803351  1.715071 -0.708758 -1.202872 -1.814470  1.018601 -0.595447  1.395433 -0.392670  0.007207  1.928123 \n```", "```py\npd.set_option(\"line_width\", 40)\n\nwide_frame \n```", "```py\nIn [41]: store = pd.HDFStore('store.h5')\n\nIn [42]: df = pd.DataFrame(np.random.randn(8, 3),\n ....:                  index=pd.date_range('1/1/2000', periods=8),\n ....:                  columns=['A', 'B', 'C'])\n\nIn [43]: df\nOut[43]:\n A         B         C\n2000-01-01 -2.036047  0.000830 -0.955697\n2000-01-02 -0.898872 -0.725411  0.059904\n2000-01-03 -0.449644  1.082900 -1.221265\n2000-01-04  0.361078  1.330704  0.855932\n2000-01-05 -1.216718  1.488887  0.018993\n2000-01-06 -0.877046  0.045976  0.437274\n2000-01-07 -0.567182 -0.888657 -0.556383\n2000-01-08  0.655457  1.117949 -2.782376\n\n[8 rows x 3 columns]\n\n# appending data frames\nIn [44]: df1 = df[0:4]\n\nIn [45]: df2 = df[4:]\n\nIn [46]: store.append('df', df1)\n\nIn [47]: store.append('df', df2)\n\nIn [48]: store\nOut[48]:\n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n/df            frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n\n# selecting the entire store\nIn [49]: store.select('df')\nOut[49]:\n A         B         C\n2000-01-01 -2.036047  0.000830 -0.955697\n2000-01-02 -0.898872 -0.725411  0.059904\n2000-01-03 -0.449644  1.082900 -1.221265\n2000-01-04  0.361078  1.330704  0.855932\n2000-01-05 -1.216718  1.488887  0.018993\n2000-01-06 -0.877046  0.045976  0.437274\n2000-01-07 -0.567182 -0.888657 -0.556383\n2000-01-08  0.655457  1.117949 -2.782376\n\n[8 rows x 3 columns] \n```", "```py\nIn [50]: wp = pd.Panel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],\n ....:              major_axis=pd.date_range('1/1/2000', periods=5),\n ....:              minor_axis=['A', 'B', 'C', 'D'])\n\nIn [51]: wp\nOut[51]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 5 (major_axis) x 4 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D\n\n# storing a panel\nIn [52]: store.append('wp', wp)\n\n# selecting via A QUERY\nIn [53]: store.select('wp', [pd.Term('major_axis>20000102'),\n ....:                    pd.Term('minor_axis', '=', ['A', 'B'])])\n ....:\nOut[53]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 2 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-03 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to B\n\n# removing data from tables\nIn [54]: store.remove('wp', pd.Term('major_axis>20000103'))\nOut[54]: 8\n\nIn [55]: store.select('wp')\nOut[55]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 4 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-03 00:00:00\nMinor_axis axis: A to D\n\n# deleting a store\nIn [56]: del store['df']\n\nIn [57]: store\nOut[57]:\n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n/wp            wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis]) \n```", "```py\n    > In [58]: store.put('foo/bar/bah', df)\n    > \n    > In [59]: store.append('food/orange', df)\n    > \n    > In [60]: store.append('food/apple', df)\n    > \n    > In [61]: store\n    > Out[61]:\n    > <class 'pandas.io.pytables.HDFStore'>\n    > File path: store.h5\n    > /foo/bar/bah            frame        (shape->[8,3])\n    > /food/apple             frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n    > /food/orange            frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n    > /wp                     wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis])\n    > \n    > # remove all nodes under this level\n    > In [62]: store.remove('food')\n    > \n    > In [63]: store\n    > Out[63]:\n    > <class 'pandas.io.pytables.HDFStore'>\n    > File path: store.h5\n    > /foo/bar/bah            frame        (shape->[8,3])\n    > /wp                     wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis]) \n    > ```", "```py\n    > In [64]: df['string'] = 'string'\n    > \n    > In [65]: df['int'] = 1\n    > \n    > In [66]: store.append('df', df)\n    > \n    > In [67]: df1 = store.select('df')\n    > \n    > In [68]: df1\n    > Out[68]:\n    >  A         B         C  string  int\n    > 2000-01-01 -2.036047  0.000830 -0.955697  string    1\n    > 2000-01-02 -0.898872 -0.725411  0.059904  string    1\n    > 2000-01-03 -0.449644  1.082900 -1.221265  string    1\n    > 2000-01-04  0.361078  1.330704  0.855932  string    1\n    > 2000-01-05 -1.216718  1.488887  0.018993  string    1\n    > 2000-01-06 -0.877046  0.045976  0.437274  string    1\n    > 2000-01-07 -0.567182 -0.888657 -0.556383  string    1\n    > 2000-01-08  0.655457  1.117949 -2.782376  string    1\n    > \n    > [8 rows x 5 columns]\n    > \n    > In [69]: df1.get_dtype_counts()\n    > Out[69]:\n    > float64    3\n    > int64      1\n    > object     1\n    > dtype: int64 \n    > ```", "```py\nIn [58]: p4d = Panel4D(np.random.randn(2, 2, 5, 4),\n ....:       labels=['Label1','Label2'],\n ....:       items=['Item1', 'Item2'],\n ....:       major_axis=date_range('1/1/2000', periods=5),\n ....:       minor_axis=['A', 'B', 'C', 'D'])\n ....:\n\nIn [59]: p4d\nOut[59]:\n<class 'pandas.core.panelnd.Panel4D'>\nDimensions: 2 (labels) x 2 (items) x 5 (major_axis) x 4 (minor_axis)\nLabels axis: Label1 to Label2\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D \n```", "```py\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame(np.random.randn(6, 4), index=pd.date_range(\"1/1/2000\", periods=6))\n\nIn [3]: df\nOut[3]: \n 0         1         2         3\n2000-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2000-01-02  1.212112 -0.173215  0.119209 -1.044236\n2000-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2000-01-04  0.721555 -0.706771 -1.039575  0.271860\n2000-01-05 -0.424972  0.567020  0.276232 -1.087401\n2000-01-06 -0.673690  0.113648 -1.478427  0.524988\n\n# deprecated now\nIn [4]: df - df[0]\nOut[4]: \n 0   1  ...  2000-01-05 00:00:00  2000-01-06 00:00:00\n2000-01-01 NaN NaN  ...                  NaN                  NaN\n2000-01-02 NaN NaN  ...                  NaN                  NaN\n2000-01-03 NaN NaN  ...                  NaN                  NaN\n2000-01-04 NaN NaN  ...                  NaN                  NaN\n2000-01-05 NaN NaN  ...                  NaN                  NaN\n2000-01-06 NaN NaN  ...                  NaN                  NaN\n\n[6 rows x 10 columns]\n\n# Change your code to\nIn [5]: df.sub(df[0], axis=0)  # align on axis 0 (rows)\nOut[5]: \n 0         1         2         3\n2000-01-01  0.0 -0.751976 -1.978171 -1.604745\n2000-01-02  0.0 -1.385327 -1.092903 -2.256348\n2000-01-03  0.0 -1.242720  0.366920  1.933653\n2000-01-04  0.0 -1.428326 -1.761130 -0.449695\n2000-01-05  0.0  0.991993  0.701204 -0.662428\n2000-01-06  0.0  0.787338 -0.804737  1.198677 \n```", "```py\nIn [1]: dates = pd.date_range('1/1/2000', '1/5/2000', freq='4h')\n\nIn [2]: series = pd.Series(np.arange(len(dates)), index=dates)\n\nIn [3]: series\nOut[3]:\n2000-01-01 00:00:00     0\n2000-01-01 04:00:00     1\n2000-01-01 08:00:00     2\n2000-01-01 12:00:00     3\n2000-01-01 16:00:00     4\n2000-01-01 20:00:00     5\n2000-01-02 00:00:00     6\n2000-01-02 04:00:00     7\n2000-01-02 08:00:00     8\n2000-01-02 12:00:00     9\n2000-01-02 16:00:00    10\n2000-01-02 20:00:00    11\n2000-01-03 00:00:00    12\n2000-01-03 04:00:00    13\n2000-01-03 08:00:00    14\n2000-01-03 12:00:00    15\n2000-01-03 16:00:00    16\n2000-01-03 20:00:00    17\n2000-01-04 00:00:00    18\n2000-01-04 04:00:00    19\n2000-01-04 08:00:00    20\n2000-01-04 12:00:00    21\n2000-01-04 16:00:00    22\n2000-01-04 20:00:00    23\n2000-01-05 00:00:00    24\nFreq: 4H, dtype: int64\n\nIn [4]: series.resample('D', how='sum')\nOut[4]:\n2000-01-01     15\n2000-01-02     51\n2000-01-03     87\n2000-01-04    123\n2000-01-05     24\nFreq: D, dtype: int64\n\nIn [5]: # old behavior\nIn [6]: series.resample('D', how='sum', closed='right', label='right')\nOut[6]:\n2000-01-01      0\n2000-01-02     21\n2000-01-03     57\n2000-01-04     93\n2000-01-05    129\nFreq: D, dtype: int64 \n```", "```py\nIn [6]: s = pd.Series([1.5, np.inf, 3.4, -np.inf])\n\nIn [7]: pd.isnull(s)\nOut[7]:\n0    False\n1    False\n2    False\n3    False\nLength: 4, dtype: bool\n\nIn [8]: s.fillna(0)\nOut[8]:\n0    1.500000\n1         inf\n2    3.400000\n3        -inf\nLength: 4, dtype: float64\n\nIn [9]: pd.set_option('use_inf_as_null', True)\n\nIn [10]: pd.isnull(s)\nOut[10]:\n0    False\n1     True\n2    False\n3     True\nLength: 4, dtype: bool\n\nIn [11]: s.fillna(0)\nOut[11]:\n0    1.5\n1    0.0\n2    3.4\n3    0.0\nLength: 4, dtype: float64\n\nIn [12]: pd.reset_option('use_inf_as_null') \n```", "```py\nIn [6]: import io\n\nIn [7]: data = \"\"\"\n ...: a,b,c\n ...: 1,Yes,2\n ...: 3,No,4\n ...: \"\"\"\n ...:\n\nIn [8]: print(data)\n\n a,b,c\n 1,Yes,2\n 3,No,4\n\nIn [9]: pd.read_csv(io.StringIO(data), header=None)\nOut[9]:\n 0    1  2\n0      a    b  c\n1      1  Yes  2\n2      3   No  4\n\nIn [10]: pd.read_csv(io.StringIO(data), header=None, prefix=\"X\")\nOut[10]:\n X0   X1 X2\n0       a    b  c\n1       1  Yes  2\n2       3   No  4 \n```", "```py\nIn [4]: print(data)\n\n a,b,c\n 1,Yes,2\n 3,No,4\n\nIn [5]: pd.read_csv(io.StringIO(data))\nOut[5]:\n a    b  c\n0      1  Yes  2\n1      3   No  4\n\nIn [6]: pd.read_csv(io.StringIO(data), true_values=[\"Yes\"], false_values=[\"No\"])\nOut[6]:\n a      b  c\n0      1   True  2\n1      3  False  4 \n```", "```py\nIn [6]: s = pd.Series([np.nan, 1.0, 2.0, np.nan, 4])\n\nIn [7]: s\nOut[7]: \n0    NaN\n1    1.0\n2    2.0\n3    NaN\n4    4.0\ndtype: float64\n\nIn [8]: s.fillna(0)\nOut[8]: \n0    0.0\n1    1.0\n2    2.0\n3    0.0\n4    4.0\ndtype: float64\n\nIn [9]: s.fillna(method=\"pad\")\nOut[9]: \n0    NaN\n1    1.0\n2    2.0\n3    2.0\n4    4.0\ndtype: float64 \n```", "```py\nIn [10]: s.ffill()\nOut[10]: \n0    NaN\n1    1.0\n2    2.0\n3    2.0\n4    4.0\ndtype: float64 \n```", "```py\n    In [11]: def f(x):\n     ....:    return pd.Series([x, x ** 2], index=[\"x\", \"x^2\"])\n     ....: \n\n    In [12]: s = pd.Series(np.random.rand(5))\n\n    In [13]: s\n    Out[13]: \n    0    0.340445\n    1    0.984729\n    2    0.919540\n    3    0.037772\n    4    0.861549\n    dtype: float64\n\n    In [14]: s.apply(f)\n    Out[14]: \n     x       x^2\n    0  0.340445  0.115903\n    1  0.984729  0.969691\n    2  0.919540  0.845555\n    3  0.037772  0.001427\n    4  0.861549  0.742267 \n    ```", "```py\n    In [15]: pd.get_option(\"display.max_rows\")\n    Out[15]: 15 \n    ```", "```py\nIn [16]: wide_frame = pd.DataFrame(np.random.randn(5, 16))\n\nIn [17]: wide_frame\nOut[17]: \n 0         1         2   ...        13        14        15\n0 -0.548702  1.467327 -1.015962  ...  1.669052  1.037882 -1.705775\n1 -0.919854 -0.042379  1.247642  ...  1.956030  0.017587 -0.016692\n2 -0.575247  0.254161 -1.143704  ...  1.211526  0.268520  0.024580\n3 -1.577585  0.396823 -0.105381  ...  0.593616  0.884345  1.591431\n4  0.141809  0.220390  0.435589  ... -0.392670  0.007207  1.928123\n\n[5 rows x 16 columns] \n```", "```py\nIn [18]: pd.set_option(\"expand_frame_repr\", False)\n\nIn [19]: wide_frame\nOut[19]: \n 0         1         2         3         4         5         6         7         8         9         10        11        12        13        14        15\n0 -0.548702  1.467327 -1.015962 -0.483075  1.637550 -1.217659 -0.291519 -1.745505 -0.263952  0.991460 -0.919069  0.266046 -0.709661  1.669052  1.037882 -1.705775\n1 -0.919854 -0.042379  1.247642 -0.009920  0.290213  0.495767  0.362949  1.548106 -1.131345 -0.089329  0.337863 -0.945867 -0.932132  1.956030  0.017587 -0.016692\n2 -0.575247  0.254161 -1.143704  0.215897  1.193555 -0.077118 -0.408530 -0.862495  1.346061  1.511763  1.627081 -0.990582 -0.441652  1.211526  0.268520  0.024580\n3 -1.577585  0.396823 -0.105381 -0.532532  1.453749  1.208843 -0.080952 -0.264610 -0.727965 -0.589346  0.339969 -0.693205 -0.339355  0.593616  0.884345  1.591431\n4  0.141809  0.220390  0.435589  0.192451 -0.096701  0.803351  1.715071 -0.708758 -1.202872 -1.814470  1.018601 -0.595447  1.395433 -0.392670  0.007207  1.928123 \n```", "```py\npd.set_option(\"line_width\", 40)\n\nwide_frame \n```", "```py\nIn [41]: store = pd.HDFStore('store.h5')\n\nIn [42]: df = pd.DataFrame(np.random.randn(8, 3),\n ....:                  index=pd.date_range('1/1/2000', periods=8),\n ....:                  columns=['A', 'B', 'C'])\n\nIn [43]: df\nOut[43]:\n A         B         C\n2000-01-01 -2.036047  0.000830 -0.955697\n2000-01-02 -0.898872 -0.725411  0.059904\n2000-01-03 -0.449644  1.082900 -1.221265\n2000-01-04  0.361078  1.330704  0.855932\n2000-01-05 -1.216718  1.488887  0.018993\n2000-01-06 -0.877046  0.045976  0.437274\n2000-01-07 -0.567182 -0.888657 -0.556383\n2000-01-08  0.655457  1.117949 -2.782376\n\n[8 rows x 3 columns]\n\n# appending data frames\nIn [44]: df1 = df[0:4]\n\nIn [45]: df2 = df[4:]\n\nIn [46]: store.append('df', df1)\n\nIn [47]: store.append('df', df2)\n\nIn [48]: store\nOut[48]:\n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n/df            frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n\n# selecting the entire store\nIn [49]: store.select('df')\nOut[49]:\n A         B         C\n2000-01-01 -2.036047  0.000830 -0.955697\n2000-01-02 -0.898872 -0.725411  0.059904\n2000-01-03 -0.449644  1.082900 -1.221265\n2000-01-04  0.361078  1.330704  0.855932\n2000-01-05 -1.216718  1.488887  0.018993\n2000-01-06 -0.877046  0.045976  0.437274\n2000-01-07 -0.567182 -0.888657 -0.556383\n2000-01-08  0.655457  1.117949 -2.782376\n\n[8 rows x 3 columns] \n```", "```py\nIn [50]: wp = pd.Panel(np.random.randn(2, 5, 4), items=['Item1', 'Item2'],\n ....:              major_axis=pd.date_range('1/1/2000', periods=5),\n ....:              minor_axis=['A', 'B', 'C', 'D'])\n\nIn [51]: wp\nOut[51]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 5 (major_axis) x 4 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D\n\n# storing a panel\nIn [52]: store.append('wp', wp)\n\n# selecting via A QUERY\nIn [53]: store.select('wp', [pd.Term('major_axis>20000102'),\n ....:                    pd.Term('minor_axis', '=', ['A', 'B'])])\n ....:\nOut[53]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 2 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-03 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to B\n\n# removing data from tables\nIn [54]: store.remove('wp', pd.Term('major_axis>20000103'))\nOut[54]: 8\n\nIn [55]: store.select('wp')\nOut[55]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 4 (minor_axis)\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-03 00:00:00\nMinor_axis axis: A to D\n\n# deleting a store\nIn [56]: del store['df']\n\nIn [57]: store\nOut[57]:\n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n/wp            wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis]) \n```", "```py\n    > In [58]: store.put('foo/bar/bah', df)\n    > \n    > In [59]: store.append('food/orange', df)\n    > \n    > In [60]: store.append('food/apple', df)\n    > \n    > In [61]: store\n    > Out[61]:\n    > <class 'pandas.io.pytables.HDFStore'>\n    > File path: store.h5\n    > /foo/bar/bah            frame        (shape->[8,3])\n    > /food/apple             frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n    > /food/orange            frame_table  (typ->appendable,nrows->8,ncols->3,indexers->[index])\n    > /wp                     wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis])\n    > \n    > # remove all nodes under this level\n    > In [62]: store.remove('food')\n    > \n    > In [63]: store\n    > Out[63]:\n    > <class 'pandas.io.pytables.HDFStore'>\n    > File path: store.h5\n    > /foo/bar/bah            frame        (shape->[8,3])\n    > /wp                     wide_table   (typ->appendable,nrows->12,ncols->2,indexers->[major_axis,minor_axis]) \n    > ```", "```py\n    > In [64]: df['string'] = 'string'\n    > \n    > In [65]: df['int'] = 1\n    > \n    > In [66]: store.append('df', df)\n    > \n    > In [67]: df1 = store.select('df')\n    > \n    > In [68]: df1\n    > Out[68]:\n    >  A         B         C  string  int\n    > 2000-01-01 -2.036047  0.000830 -0.955697  string    1\n    > 2000-01-02 -0.898872 -0.725411  0.059904  string    1\n    > 2000-01-03 -0.449644  1.082900 -1.221265  string    1\n    > 2000-01-04  0.361078  1.330704  0.855932  string    1\n    > 2000-01-05 -1.216718  1.488887  0.018993  string    1\n    > 2000-01-06 -0.877046  0.045976  0.437274  string    1\n    > 2000-01-07 -0.567182 -0.888657 -0.556383  string    1\n    > 2000-01-08  0.655457  1.117949 -2.782376  string    1\n    > \n    > [8 rows x 5 columns]\n    > \n    > In [69]: df1.get_dtype_counts()\n    > Out[69]:\n    > float64    3\n    > int64      1\n    > object     1\n    > dtype: int64 \n    > ```", "```py\nIn [58]: p4d = Panel4D(np.random.randn(2, 2, 5, 4),\n ....:       labels=['Label1','Label2'],\n ....:       items=['Item1', 'Item2'],\n ....:       major_axis=date_range('1/1/2000', periods=5),\n ....:       minor_axis=['A', 'B', 'C', 'D'])\n ....:\n\nIn [59]: p4d\nOut[59]:\n<class 'pandas.core.panelnd.Panel4D'>\nDimensions: 2 (labels) x 2 (items) x 5 (major_axis) x 4 (minor_axis)\nLabels axis: Label1 to Label2\nItems axis: Item1 to Item2\nMajor_axis axis: 2000-01-01 00:00:00 to 2000-01-05 00:00:00\nMinor_axis axis: A to D \n```"]