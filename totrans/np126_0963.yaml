- en: What’s New or Different
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/random/new-or-different.html](https://numpy.org/doc/1.26/reference/random/new-or-different.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NumPy 1.17.0 introduced [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") as an improved replacement for the [legacy](legacy.html#legacy)
    [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState").
    Here is a quick comparison of the two implementations.
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Older Equivalent | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    | [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    | `Generator` requires a stream source, called a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") A number of these are provided. `RandomState` uses
    the Mersenne Twister [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") by default, but can also be instantiated with any BitGenerator.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `random` | `random_sample`, `rand` | Access the values in a BitGenerator,
    convert them to `float64` in the interval `[0.0.,` `` 1.0)``. In addition to the
    `size` kwarg, now supports `dtype=''d''` or `dtype=''f''`, and an `out` kwarg
    to fill a user- supplied array.Many other distributions are also supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `integers` | `randint`, `random_integers` | Use the `endpoint` kwarg to adjust
    the inclusion or exclusion of the `high` interval endpoint |'
  prefs: []
  type: TYPE_TB
- en: The normal, exponential and gamma generators use 256-step Ziggurat methods which
    are 2-10 times faster than NumPy’s default implementation in [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"), [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential") or [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"). Because of the change in algorithms,
    it is not possible to reproduce the exact random values using `Generator` for
    these distributions or any distribution method that relies on them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers") is now the canonical way to generate integer
    random numbers from a discrete uniform distribution. This replaces both `randint`
    and the deprecated `random_integers`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rand` and `randn` methods are only available through the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Generator.random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random") is now the canonical way to generate floating-point
    random numbers, which replaces [`RandomState.random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample"), [`sample`](generated/numpy.random.sample.html#numpy.random.sample
    "numpy.random.sample"), and [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf
    "numpy.random.ranf"), all of which were aliases. This is consistent with Python’s
    [`random.random`](https://docs.python.org/3/library/random.html#random.random
    "(in Python v3.11)").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All bit generators can produce doubles, uint64s and uint32s via CTypes ([`ctypes`](bit_generators/generated/numpy.random.PCG64.ctypes.html#numpy.random.PCG64.ctypes
    "numpy.random.PCG64.ctypes")) and CFFI ([`cffi`](bit_generators/generated/numpy.random.PCG64.cffi.html#numpy.random.PCG64.cffi
    "numpy.random.PCG64.cffi")). This allows these bit generators to be used in numba.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bit generators can be used in downstream projects via Cython.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All bit generators use [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") to [convert seed integers to initialized states](bit_generators/index.html#seeding-and-entropy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional `dtype` argument that accepts `np.float32` or `np.float64` to produce
    either single or double precision uniform random variables for select distributions.
    [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers") accepts a `dtype` argument with any signed
    or unsigned integer dtype.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniforms ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random") and [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Normals ([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Gammas ([`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Exponentials ([`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Optional `out` argument that allows existing arrays to be filled for select
    distributions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniforms ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Normals ([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Gammas ([`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Exponentials ([`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows multithreading to fill large arrays in chunks using suitable BitGenerators
    in parallel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Optional `axis` argument for methods like [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice"), [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") and [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") that controls which axis an operation is performed
    over for multi-dimensional arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Added a method to sample from the complex normal distribution (*complex_normal*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
