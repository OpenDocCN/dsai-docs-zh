- en: numpy.ufunc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html](https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Functions that operate element by element on whole arrays.
  prefs: []
  type: TYPE_NORMAL
- en: To see the documentation for a specific ufunc, use [`info`](numpy.info.html#numpy.info
    "numpy.info"). For example, `np.info(np.sin)`. Because ufuncs are written in C
    (for speed) and linked into Python with NumPy’s ufunc facility, Python’s help()
    function finds this page whenever help() is called on a ufunc.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed explanation of ufuncs can be found in the docs for [Universal functions
    (ufunc)](../ufuncs.html#ufuncs).
  prefs: []
  type: TYPE_NORMAL
- en: '**Calling ufuncs:** `op(*x[, out], where=True, **kwargs)`'
  prefs: []
  type: TYPE_NORMAL
- en: Apply *op* to the arguments **x* elementwise, broadcasting the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The broadcasting rules are:'
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions of length 1 may be prepended to either array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays may be repeated along dimensions of length 1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate array object(s) in which to put the result; if provided, it must have
    a shape that the inputs broadcast to. A tuple of arrays (possible only as a keyword
    argument) must have length equal to the number of outputs; use None for uninitialized
    outputs to be allocated by the ufunc.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r**ndarray or tuple of ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: '*r* will have the shape that the arrays in *x* broadcast to; if *out* is provided,
    it will be returned. If not, *r* will be allocated and may contain uninitialized
    values. If the function has more than one output, then the result will be a tuple
    of arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`identity`](numpy.identity.html#numpy.identity "numpy.identity")'
  prefs: []
  type: TYPE_NORMAL
- en: The identity value.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nargs`](numpy.ufunc.nargs.html#numpy.ufunc.nargs "numpy.ufunc.nargs")'
  prefs: []
  type: TYPE_NORMAL
- en: The number of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nin`](numpy.ufunc.nin.html#numpy.ufunc.nin "numpy.ufunc.nin")'
  prefs: []
  type: TYPE_NORMAL
- en: The number of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nout`](numpy.ufunc.nout.html#numpy.ufunc.nout "numpy.ufunc.nout")'
  prefs: []
  type: TYPE_NORMAL
- en: The number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ntypes`](numpy.ufunc.ntypes.html#numpy.ufunc.ntypes "numpy.ufunc.ntypes")'
  prefs: []
  type: TYPE_NORMAL
- en: The number of types.
  prefs: []
  type: TYPE_NORMAL
- en: '[`signature`](numpy.ufunc.signature.html#numpy.ufunc.signature "numpy.ufunc.signature")'
  prefs: []
  type: TYPE_NORMAL
- en: Definition of the core elements a generalized ufunc operates on.
  prefs: []
  type: TYPE_NORMAL
- en: '[`types`](numpy.ufunc.types.html#numpy.ufunc.types "numpy.ufunc.types")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list with types grouped input->output.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](numpy.ufunc.__call__.html#numpy.ufunc.__call__ "numpy.ufunc.__call__")(*args, **kwargs)
    | Call self as a function. |'
  prefs: []
  type: TYPE_TB
- en: '| [`accumulate`](numpy.ufunc.accumulate.html#numpy.ufunc.accumulate "numpy.ufunc.accumulate")(array[, axis, dtype, out])
    | Accumulate the result of applying the operator to all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`at`](numpy.ufunc.at.html#numpy.ufunc.at "numpy.ufunc.at")(a, indices[, b])
    | Performs unbuffered in place operation on operand ''a'' for elements specified
    by ''indices''. |'
  prefs: []
  type: TYPE_TB
- en: '| [`outer`](numpy.ufunc.outer.html#numpy.ufunc.outer "numpy.ufunc.outer")(A, B, /, **kwargs)
    | Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce "numpy.ufunc.reduce")(array[, axis, dtype, out, keepdims, ...])
    | Reduces [`array`](numpy.array.html#numpy.array "numpy.array")''s dimension by
    one, by applying ufunc along one axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reduceat`](numpy.ufunc.reduceat.html#numpy.ufunc.reduceat "numpy.ufunc.reduceat")(array, indices[, axis, dtype, out])
    | Performs a (local) reduce with specified slices over a single axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resolve_dtypes`](numpy.ufunc.resolve_dtypes.html#numpy.ufunc.resolve_dtypes
    "numpy.ufunc.resolve_dtypes")(dtypes, *[, signature, ...]) | Find the dtypes NumPy
    will use for the operation. |'
  prefs: []
  type: TYPE_TB
