- en: Instance Segmentation Datasets Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/datasets/segment/`](https://docs.ultralytics.com/datasets/segment/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Supported Dataset Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultralytics YOLO format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dataset label format used for training YOLO segmentation models is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One text file per image: Each image in the dataset has a corresponding text
    file with the same name as the image file and the ".txt" extension.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One row per object: Each row in the text file corresponds to one object instance
    in the image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Object information per row: Each row contains the following information about
    the object instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Object class index: An integer representing the class of the object (e.g.,
    0 for person, 1 for car, etc.).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object bounding coordinates: The bounding coordinates around the mask area,
    normalized to be between 0 and 1.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The format for a single row in the segmentation dataset file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this format, `<class-index>` is the index of the class for the object, and
    `<x1> <y1> <x2> <y2> ... <xn> <yn>` are the bounding coordinates of the object's
    segmentation mask. The coordinates are separated by spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of the YOLO dataset format for a single image with two objects
    made up of a 3-point segment and a 5-point segment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The length of each row does **not** have to be equal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each segmentation label must have a **minimum of 3 xy points**: `<class-index>
    <x1> <y1> <x2> <y2> <x3> <y3>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dataset YAML format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ultralytics framework uses a YAML file format to define the dataset and
    model configuration for training Detection Models. Here is an example of the YAML
    format used for defining a detection dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `train` and `val` fields specify the paths to the directories containing
    the training and validation images, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '`names` is a dictionary of class names. The order of the names should match
    the order of the object class indices in the YOLO dataset files.'
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Supported Datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Supported Datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'COCO: A comprehensive dataset for object detection, segmentation, and captioning,
    featuring over 200K labeled images across a wide range of categories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'COCO8-seg: A compact, 8-image subset of COCO designed for quick testing of
    segmentation model training, ideal for CI checks and workflow validation in the
    `ultralytics` repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Carparts-seg: A specialized dataset focused on the segmentation of car parts,
    ideal for automotive applications. It includes a variety of vehicles with detailed
    annotations of individual car components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Crack-seg: A dataset tailored for the segmentation of cracks in various surfaces.
    Essential for infrastructure maintenance and quality control, it provides detailed
    imagery for training models to identify structural weaknesses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package-seg: A dataset dedicated to the segmentation of different types of
    packaging materials and shapes. It''s particularly useful for logistics and warehouse
    automation, aiding in the development of systems for package handling and sorting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your own dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have your own dataset and would like to use it for training segmentation
    models with Ultralytics YOLO format, ensure that it follows the format specified
    above under "Ultralytics YOLO format". Convert your annotations to the required
    format and specify the paths, number of classes, and class names in the YAML configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Port or Convert Label Formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: COCO Dataset Format to YOLO Format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily convert labels from the popular COCO dataset format to the YOLO
    format using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This conversion tool can be used to convert the COCO dataset or any dataset
    in the COCO format to the Ultralytics YOLO format.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to double-check if the dataset you want to use is compatible with your
    model and follows the necessary format conventions. Properly formatted datasets
    are crucial for training successful object detection models.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-Annotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Auto-annotation is an essential feature that allows you to generate a segmentation
    dataset using a pre-trained detection model. It enables you to quickly and accurately
    annotate a large number of images without the need for manual labeling, saving
    time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Generate Segmentation Dataset Using a Detection Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To auto-annotate your dataset using the Ultralytics framework, you can use
    the `auto_annotate` function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| Argument | Type | Description | Default |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `data` | `str` | Path to a folder containing images to be annotated. | `None`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `det_model` | `str, optional` | Pre-trained YOLO detection model. Defaults
    to `''yolov8x.pt''`. | `''yolov8x.pt''` |'
  prefs: []
  type: TYPE_TB
- en: '| `sam_model` | `str, optional` | Pre-trained SAM segmentation model. Defaults
    to `''sam_b.pt''`. | `''sam_b.pt''` |'
  prefs: []
  type: TYPE_TB
- en: '| `device` | `str, optional` | Device to run the models on. Defaults to an
    empty string (CPU or GPU, if available). | `''''` |'
  prefs: []
  type: TYPE_TB
- en: '| `output_dir` | `str or None, optional` | Directory to save the annotated
    results. Defaults to a `''labels''` folder in the same directory as `''data''`.
    | `None` |'
  prefs: []
  type: TYPE_TB
- en: The `auto_annotate` function takes the path to your images, along with optional
    arguments for specifying the pre-trained detection and SAM segmentation models,
    the device to run the models on, and the output directory for saving the annotated
    results.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging the power of pre-trained models, auto-annotation can significantly
    reduce the time and effort required for creating high-quality segmentation datasets.
    This feature is particularly useful for researchers and developers working with
    large image collections, as it allows them to focus on model development and evaluation
    rather than manual annotation.
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What dataset formats does Ultralytics YOLO support for instance segmentation?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLO supports several dataset formats for instance segmentation,
    with the primary format being its own Ultralytics YOLO format. Each image in your
    dataset needs a corresponding text file with object information segmented into
    multiple rows (one row per object), listing the class index and normalized bounding
    coordinates. For more detailed instructions on the YOLO dataset format, visit
    the Instance Segmentation Datasets Overview.
  prefs: []
  type: TYPE_NORMAL
- en: How can I convert COCO dataset annotations to the YOLO format?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Converting COCO format annotations to YOLO format is straightforward using
    Ultralytics tools. You can use the `convert_coco` function from the `ultralytics.data.converter`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This script converts your COCO dataset annotations to the required YOLO format,
    making it suitable for training your YOLO models. For more details, refer to Port
    or Convert Label Formats.
  prefs: []
  type: TYPE_NORMAL
- en: How do I prepare a YAML file for training Ultralytics YOLO models?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To prepare a YAML file for training YOLO models with Ultralytics, you need
    to define the dataset paths and class names. Here''s an example YAML configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Ensure you update the paths and class names according to your dataset. For more
    information, check the Dataset YAML Format section.
  prefs: []
  type: TYPE_NORMAL
- en: What is the auto-annotation feature in Ultralytics YOLO?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Auto-annotation in Ultralytics YOLO allows you to generate segmentation annotations
    for your dataset using a pre-trained detection model. This significantly reduces
    the need for manual labeling. You can use the `auto_annotate` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This function automates the annotation process, making it faster and more efficient.
    For more details, explore the Auto-Annotation section.
  prefs: []
  type: TYPE_NORMAL
