- en: Array manipulation routines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '数组操作程序  '
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.array-manipulation.html](https://numpy.org/doc/1.26/reference/routines.array-manipulation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原文：[https://numpy.org/doc/1.26/reference/routines.array-manipulation.html](https://numpy.org/doc/1.26/reference/routines.array-manipulation.html)  '
- en: Basic operations
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '基本操作  '
- en: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | Copies values from one array to another, broadcasting as necessary. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | 将值从一个数组复制到另一个数组，如有必要进行广播。 |  '
- en: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | Return
    the shape of an array. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | 返回数组的形状。
    |  '
- en: Changing array shape
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '改变数组形状  '
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | 给数组赋予新��状而不更改其数据。 |  '
- en: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | Return a contiguous flattened array. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | 返回一个连续的展平数组。 |  '
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | 数组的一维迭代器。 |  '
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | 返回折叠为一维的数组的副本。 |  '
- en: Transpose-like operations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '转置类操作  '
- en: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | Move axes of an array to new positions. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | 将数组的轴移动到新位置。 |  '
- en: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | Roll the specified axis backwards, until it lies in a given position. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | 将指定轴向后滚动，直到它位于给定位置。 |  '
- en: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | Interchange two axes of an array. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | 交换数组的两个轴。 |  '
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | 转置数组的视图。 |  '
- en: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | Returns an array with axes transposed. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | 返回具有转置轴的数组。 |  '
- en: Changing number of dimensions
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '改变维度个数  '
- en: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | Convert inputs to arrays with at least one dimension. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | 将输入转换为至少有一个维度的数组。 |  '
- en: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | View inputs as arrays with at least two dimensions. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | 将输入视为至少有两个维度的数组。 |  '
- en: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | View inputs as arrays with at least three dimensions. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | 将输入视为至少有三个维度的数组。 |  '
- en: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | Produce an object that mimics broadcasting. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | 生成模拟广播的对象。 |  '
- en: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | Broadcast an array to a new shape. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | 将数组广播到新形状。 |  '
- en: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | Broadcast any number of arrays against
    each other. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | 对多个数组进行广播。 |  '
- en: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | Expand the shape of an array. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | 扩展数组的形状。 |  '
- en: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | Remove axes of length one from *a*. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | 从 *a* 中删除长度为一的轴。 |  '
- en: Changing kind of array
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变数组类型
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | 将输入转换为数组。'
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | 将输入转换为ndarray，但传递ndarray子类。'
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | 将输入解释为矩阵。'
- en: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | Return an array converted to a float type. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | 返回转换为浮点类型的数组。'
- en: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | Return an array (ndim >= 1) laid out
    in Fortran order in memory. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | 返回按Fortran顺序在内存中布局的数组（ndim >= 1）。'
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | 返回内存中连续的数组（ndim >= 1）（C顺序）。'
- en: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | Convert the input to an array,
    checking for NaNs or Infs. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | 将输入转换为数组，检查NaN或Infs。'
- en: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | Return an ndarray of the provided type that satisfies requirements. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | 返回满足要求的提供类型的ndarray。'
- en: Joining arrays
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并数组
- en: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | Join a sequence of arrays along an existing axis. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | 沿现有轴连接一系列数组。'
- en: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | Join a sequence of arrays along a new axis. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | 沿新轴连接一系列数组。'
- en: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    Assemble an nd-array from nested lists of blocks. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    从块的嵌套列表中组装nd数组。'
- en: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | 垂直（行方向）按顺序堆叠数组。'
- en: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence horizontally (column wise). |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | 按顺序水平（列方向）堆叠数组。'
- en: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | Stack arrays in sequence depth wise (along third axis). |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | 深度逐层（沿第三轴）按顺序堆叠数组。'
- en: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | Stack 1-D arrays as columns into a 2-D array. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | 将1-D数组按列堆叠成2-D数组。'
- en: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | 垂直（行方向）按顺序堆叠数组。'
- en: Splitting arrays
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拆分数组
- en: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays as views into *ary*. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | 将数组拆分为多个子数组，作为对*ary*的视图。'
- en: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | 将数组拆分为多个子数组。'
- en: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | Split array into multiple sub-arrays along the 3rd axis (depth). |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | 沿第 3 轴（深度）将数组分割为多个子数组。|'
- en: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays horizontally (column-wise). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | 水平（沿列）分割数组为多个子数组。|'
- en: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays vertically (row-wise). |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | 垂直（沿行）分割数组为多个子数组。|'
- en: Tiling arrays
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平铺数组
- en: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | Construct
    an array by repeating A the number of times given by reps. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | 通过重复
    A 的次数构建一个数组。|'
- en: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | Repeat each element of an array after themselves |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | 将数组的每个元素重复多次。|'
- en: Adding and removing elements
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和删除元素
- en: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | Return a new array with sub-arrays along an axis deleted. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | 返回删除指定轴上子数组的新数组。|'
- en: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | Insert values along the given axis before the given indices. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | 在给定索引之前沿指定轴插入值。|'
- en: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | Append values to the end of an array. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | 将值附加到数组的末尾。|'
- en: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | Return a new array with the specified shape. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | 返回指定形状的新数组。|'
- en: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | Trim the leading and/or trailing zeros from a 1-D array or sequence. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | 从 1-D 数组或序列中修剪前导和/或尾随零。|'
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | 找到数组的唯一元素。|'
- en: Rearranging elements
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新排列元素
- en: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    Reverse the order of elements in an array along the given axis. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    反转数组中给定轴上的元素顺序。|'
- en: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    Reverse the order of elements along axis 1 (left/right). |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    反转沿轴 1（左/右）的元素顺序。|'
- en: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    Reverse the order of elements along axis 0 (up/down). |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    反转沿轴 0（上/下）的元素顺序。|'
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | 给数组赋予新的形状，但不更改其数据。|'
- en: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | Roll array elements along a given axis. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | 沿指定轴滚动数组元素。|'
- en: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | Rotate an array by 90 degrees in the plane specified by axes. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | 将数组在指定的平面上旋转 90 度。|'
- en: Basic operations
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本操作
- en: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | Copies values from one array to another, broadcasting as necessary. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`copyto`](generated/numpy.copyto.html#numpy.copyto "numpy.copyto")(dst, src[, casting, where])
    | 将一个数组的值复制到另一个数组，必要时进行广播。|'
- en: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | Return
    the shape of an array. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`shape`](generated/numpy.shape.html#numpy.shape "numpy.shape")(a) | 返回数组的形状。|'
- en: Changing array shape
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改数组形状
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | 为数组赋予一个新的形状，但不改变其数据。 |'
- en: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | Return a contiguous flattened array. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel")(a[, order])
    | 返回一个连续的扁平化数组。 |'
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | 数组的一维迭代器。 |'
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | 返回折叠成一维的数组的副本。 |'
- en: Transpose-like operations
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类似转置的操作
- en: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | Move axes of an array to new positions. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`moveaxis`](generated/numpy.moveaxis.html#numpy.moveaxis "numpy.moveaxis")(a, source, destination)
    | 将数组的轴移动到新的位置。 |'
- en: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | Roll the specified axis backwards, until it lies in a given position. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`rollaxis`](generated/numpy.rollaxis.html#numpy.rollaxis "numpy.rollaxis")(a, axis[, start])
    | 将指定轴向后滚动，直到它位于给定位置为止。 |'
- en: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | Interchange two axes of an array. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes "numpy.swapaxes")(a, axis1, axis2)
    | 交换数组的两个轴。 |'
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | 转置后的数组的视图。 |'
- en: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | Returns an array with axes transposed. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`transpose`](generated/numpy.transpose.html#numpy.transpose "numpy.transpose")(a[, axes])
    | 返回一个转置后的数组。 |'
- en: Changing number of dimensions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变维数
- en: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | Convert inputs to arrays with at least one dimension. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_1d`](generated/numpy.atleast_1d.html#numpy.atleast_1d "numpy.atleast_1d")(*arys)
    | 将输入转换为至少具有一维的数组。 |'
- en: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | View inputs as arrays with at least two dimensions. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_2d`](generated/numpy.atleast_2d.html#numpy.atleast_2d "numpy.atleast_2d")(*arys)
    | 将输入视为至少具有两个维度的数组。 |'
- en: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | View inputs as arrays with at least three dimensions. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`atleast_3d`](generated/numpy.atleast_3d.html#numpy.atleast_3d "numpy.atleast_3d")(*arys)
    | 将输入视为至少具有三个维度的数组。 |'
- en: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | Produce an object that mimics broadcasting. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast`](generated/numpy.broadcast.html#numpy.broadcast "numpy.broadcast")
    | 生成类似广播的对象。 |'
- en: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | Broadcast an array to a new shape. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast_to`](generated/numpy.broadcast_to.html#numpy.broadcast_to "numpy.broadcast_to")(array, shape[, subok])
    | 将数组广播到新的形状。 |'
- en: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | Broadcast any number of arrays against
    each other. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`broadcast_arrays`](generated/numpy.broadcast_arrays.html#numpy.broadcast_arrays
    "numpy.broadcast_arrays")(*args[, subok]) | 将任意数量的数组相互广播。 |'
- en: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | Expand the shape of an array. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`expand_dims`](generated/numpy.expand_dims.html#numpy.expand_dims "numpy.expand_dims")(a, axis)
    | 扩展数组的形状。 |'
- en: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | Remove axes of length one from *a*. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze")(a[, axis])
    | 从*a*中删除长度为一的轴。 |'
- en: Changing kind of array
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变数组类型
- en: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | Convert the input to an array. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.asarray.html#numpy.asarray "numpy.asarray")(a[, dtype, order, like])
    | 将输入转换为数组。 |'
- en: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | Convert the input to an ndarray, but pass ndarray subclasses through. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`asanyarray`](generated/numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")(a[, dtype, order, like])
    | 将输入转换为ndarray，但传递ndarray子类。 |'
- en: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | Interpret the input as a matrix. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`asmatrix`](generated/numpy.asmatrix.html#numpy.asmatrix "numpy.asmatrix")(data[, dtype])
    | 将输入解释为矩阵。 |'
- en: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | Return an array converted to a float type. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`asfarray`](generated/numpy.asfarray.html#numpy.asfarray "numpy.asfarray")(a[, dtype])
    | 返回转换为浮点类型的数组。 |'
- en: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | Return an array (ndim >= 1) laid out
    in Fortran order in memory. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`asfortranarray`](generated/numpy.asfortranarray.html#numpy.asfortranarray
    "numpy.asfortranarray")(a[, dtype, like]) | 返回以Fortran顺序排列在内存中的数组（ndim >= 1）。
    |'
- en: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | Return a contiguous array (ndim
    >= 1) in memory (C order). |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`ascontiguousarray`](generated/numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")(a[, dtype, like]) | 返回内存中连续的数组（ndim >= 1）（C顺序）。 |'
- en: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | Convert the input to an array,
    checking for NaNs or Infs. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray_chkfinite`](generated/numpy.asarray_chkfinite.html#numpy.asarray_chkfinite
    "numpy.asarray_chkfinite")(a[, dtype, order]) | 将输入转换为数组，检查NaN或Inf。 |'
- en: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | Return an ndarray of the provided type that satisfies requirements. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`require`](generated/numpy.require.html#numpy.require "numpy.require")(a[, dtype, requirements, like])
    | 返回满足要求的提供类型的ndarray。 |'
- en: Joining arrays
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组连接
- en: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | Join a sequence of arrays along an existing axis. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`concatenate`](generated/numpy.concatenate.html#numpy.concatenate "numpy.concatenate")([axis, out, dtype, casting])
    | 沿着已有的轴连接一系列数组。 |'
- en: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | Join a sequence of arrays along a new axis. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`stack`](generated/numpy.stack.html#numpy.stack "numpy.stack")(arrays[, axis, out, dtype, casting])
    | 沿新轴连接一系列数组。 |'
- en: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    Assemble an nd-array from nested lists of blocks. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`block`](generated/numpy.block.html#numpy.block "numpy.block")(arrays) |
    从块的嵌套列表中组装一个nd数组。 |'
- en: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`vstack`](generated/numpy.vstack.html#numpy.vstack "numpy.vstack")(tup, *[, dtype, casting])
    | 沿垂直方向（行）顺序堆叠数组。 |'
- en: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | Stack arrays in sequence horizontally (column wise). |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`hstack`](generated/numpy.hstack.html#numpy.hstack "numpy.hstack")(tup, *[, dtype, casting])
    | 沿水平方向（列）顺序堆叠数组。 |'
- en: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | Stack arrays in sequence depth wise (along third axis). |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`dstack`](generated/numpy.dstack.html#numpy.dstack "numpy.dstack")(tup)
    | 沿深度方向（第三个轴）顺序堆叠数组。 |'
- en: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | Stack 1-D arrays as columns into a 2-D array. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`column_stack`](generated/numpy.column_stack.html#numpy.column_stack "numpy.column_stack")(tup)
    | 将1-D数组作为列堆叠成2-D数组。 |'
- en: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | Stack arrays in sequence vertically (row wise). |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`row_stack`](generated/numpy.row_stack.html#numpy.row_stack "numpy.row_stack")(tup, *[, dtype, casting])
    | 沿垂直方向（行）顺序堆叠数组。 |'
- en: Splitting arrays
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组分割
- en: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays as views into *ary*. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](generated/numpy.split.html#numpy.split "numpy.split")(ary, indices_or_sections[, axis])
    | 将数组分割为多个子数组作为*ary*的视图。 |'
- en: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | Split an array into multiple sub-arrays. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`array_split`](generated/numpy.array_split.html#numpy.array_split "numpy.array_split")(ary, indices_or_sections[, axis])
    | 将数组分割为多个子数组。 |'
- en: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | Split array into multiple sub-arrays along the 3rd axis (depth). |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`dsplit`](generated/numpy.dsplit.html#numpy.dsplit "numpy.dsplit")(ary, indices_or_sections)
    | 沿第3轴（深度）将数组分割为多个子数组。 |'
- en: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays horizontally (column-wise). |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`hsplit`](generated/numpy.hsplit.html#numpy.hsplit "numpy.hsplit")(ary, indices_or_sections)
    | 沿水平方向（列）将数组分割为多个子数组。 |'
- en: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | Split an array into multiple sub-arrays vertically (row-wise). |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`vsplit`](generated/numpy.vsplit.html#numpy.vsplit "numpy.vsplit")(ary, indices_or_sections)
    | 沿垂直方向（行）将数组分割为多个子数组。 |'
- en: Tiling arrays
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瓷砖数组
- en: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | Construct
    an array by repeating A the number of times given by reps. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`tile`](generated/numpy.tile.html#numpy.tile "numpy.tile")(A, reps) | 通过重复A给定的次数构造数组。'
- en: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | Repeat each element of an array after themselves |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`repeat`](generated/numpy.repeat.html#numpy.repeat "numpy.repeat")(a, repeats[, axis])
    | 在数组中的每个元素之后重复它们自己。'
- en: Adding and removing elements
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和删除元素
- en: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | Return a new array with sub-arrays along an axis deleted. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [`delete`](generated/numpy.delete.html#numpy.delete "numpy.delete")(arr, obj[, axis])
    | 返回一个删除指定轴上子数组的新数组。'
- en: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | Insert values along the given axis before the given indices. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [`insert`](generated/numpy.insert.html#numpy.insert "numpy.insert")(arr, obj, values[, axis])
    | 在给定索引之前沿着给定轴插入值。'
- en: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | Append values to the end of an array. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [`append`](generated/numpy.append.html#numpy.append "numpy.append")(arr, values[, axis])
    | 在数组末尾添加值。'
- en: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | Return a new array with the specified shape. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`resize`](generated/numpy.resize.html#numpy.resize "numpy.resize")(a, new_shape)
    | 返回具有指定形状的新数组。'
- en: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | Trim the leading and/or trailing zeros from a 1-D array or sequence. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`trim_zeros`](generated/numpy.trim_zeros.html#numpy.trim_zeros "numpy.trim_zeros")(filt[, trim])
    | 从1-D数组或序列中修剪前导和/或后导零。'
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | 查找数组的唯一元素。'
- en: Rearranging elements
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新排列元素
- en: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    Reverse the order of elements in an array along the given axis. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`flip`](generated/numpy.flip.html#numpy.flip "numpy.flip")(m[, axis]) |
    反转数组沿着给定轴的元素顺序。'
- en: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    Reverse the order of elements along axis 1 (left/right). |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`fliplr`](generated/numpy.fliplr.html#numpy.fliplr "numpy.fliplr")(m) |
    反转数组m沿着轴1的元素顺序（左/右）。'
- en: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    Reverse the order of elements along axis 0 (up/down). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`flipud`](generated/numpy.flipud.html#numpy.flipud "numpy.flipud")(m) |
    反转数组m沿着轴0的元素顺序（上/下）。'
- en: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | Gives a new shape to an array without changing its data. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape")(a, newshape[, order])
    | 为数组重新定义形状，不改变数据。'
- en: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | Roll array elements along a given axis. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`roll`](generated/numpy.roll.html#numpy.roll "numpy.roll")(a, shift[, axis])
    | 沿着给定轴滚动数组元素。'
- en: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | Rotate an array by 90 degrees in the plane specified by axes. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`rot90`](generated/numpy.rot90.html#numpy.rot90 "numpy.rot90")(m[, k, axes])
    | 将数组顺时针旋转90度，指定旋转平面。'
