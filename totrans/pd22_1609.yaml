- en: pandas.core.groupby.SeriesGroupBy.apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.apply.html](https://pandas.pydata.org/docs/reference/api/pandas.core.groupby.SeriesGroupBy.apply.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply function `func` group-wise and combine the results together.
  prefs: []
  type: TYPE_NORMAL
- en: The function passed to `apply` must take a series as its first argument and
    return a DataFrame, Series or scalar. `apply` will then take care of combining
    the results back together into a single dataframe or series. `apply` is therefore
    a highly flexible grouping method.
  prefs: []
  type: TYPE_NORMAL
- en: While `apply` is a very flexible method, its downside is that using it can be
    quite a bit slower than using more specific methods like `agg` or `transform`.
    Pandas offers a wide range of method that will be much faster than using `apply`
    for their specific purposes, so try to use them before reaching for `apply`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable'
  prefs: []
  type: TYPE_NORMAL
- en: A callable that takes a series as its first argument, and returns a dataframe,
    a series or a scalar. In addition the callable may take positional and keyword
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**include_groups**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: When True, will attempt to apply `func` to the groupings in the case that they
    are columns of the DataFrame. If this raises a TypeError, the result will be computed
    with the groupings excluded. When False, the groupings will be excluded when applying
    `func`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.2.0: Setting include_groups to True is deprecated.
    Only the value False will be allowed in a future version of pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**args, kwargs**tuple and dict'
  prefs: []
  type: TYPE_NORMAL
- en: Optional positional and keyword arguments to pass to `func`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pipe`](pandas.core.groupby.SeriesGroupBy.pipe.html#pandas.core.groupby.SeriesGroupBy.pipe
    "pandas.core.groupby.SeriesGroupBy.pipe")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply function to the full GroupBy object instead of to each group.
  prefs: []
  type: TYPE_NORMAL
- en: '[`aggregate`](pandas.core.groupby.SeriesGroupBy.aggregate.html#pandas.core.groupby.SeriesGroupBy.aggregate
    "pandas.core.groupby.SeriesGroupBy.aggregate")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply aggregate function to the GroupBy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`transform`](pandas.core.groupby.SeriesGroupBy.transform.html#pandas.core.groupby.SeriesGroupBy.transform
    "pandas.core.groupby.SeriesGroupBy.transform")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply function column-by-column to the GroupBy object.
  prefs: []
  type: TYPE_NORMAL
- en: '`Series.apply`'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a function to a Series.
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.apply`'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a function to each row or column of a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.0: The resulting dtype will reflect the return value
    of the passed `func`, see the examples below.'
  prefs: []
  type: TYPE_NORMAL
- en: Functions that mutate the passed object can produce unexpected behavior or errors
    and are not supported. See [Mutating with User Defined Function (UDF) methods](../../user_guide/gotchas.html#gotchas-udf-mutation)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'From `s` above we can see that `g` has two groups, `a` and `b`. Notice that
    `g1` have `g2` have two groups, `a` and `b`, and only differ in their `group_keys`
    argument. Calling apply in various ways, we can get different grouping results:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: The function passed to apply takes a Series as its argument and
    returns a Series. apply combines the result for each group together into a new
    Series.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3.0: The resulting dtype will reflect the return value
    of the passed `func`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above, the groups are not part of the index. We can have them included
    by using `g2` where `group_keys=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2: The function passed to apply takes a Series as its argument and
    returns a scalar. apply combines the result for each group together into a Series,
    including setting the index as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `group_keys` argument has no effect here because the result is not like-indexed
    (i.e. [a transform](../../user_guide/groupby.html#groupby-transform)) when compared
    to the input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
