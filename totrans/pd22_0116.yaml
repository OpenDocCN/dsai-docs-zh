- en: pandas.merge_ordered
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.merge_ordered.html](https://pandas.pydata.org/docs/reference/api/pandas.merge_ordered.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Perform a merge for ordered data with optional filling/interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Designed for ordered data like time series data. Optionally perform group-wise
    merge (see examples).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**left**DataFrame or named Series'
  prefs: []
  type: TYPE_NORMAL
- en: '**right**DataFrame or named Series'
  prefs: []
  type: TYPE_NORMAL
- en: '**on**label or list'
  prefs: []
  type: TYPE_NORMAL
- en: Field names to join on. Must be found in both DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_on**label or list, or array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Field names to join on in left DataFrame. Can be a vector or list of vectors
    of the length of the DataFrame to use a particular vector as the join key instead
    of columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_on**label or list, or array-like'
  prefs: []
  type: TYPE_NORMAL
- en: Field names to join on in right DataFrame or vector/list of vectors per left_on
    docs.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_by**column name or list of column names'
  prefs: []
  type: TYPE_NORMAL
- en: Group left DataFrame by group columns and merge piece by piece with right DataFrame.
    Must be None if either left or right are a Series.
  prefs: []
  type: TYPE_NORMAL
- en: '**right_by**column name or list of column names'
  prefs: []
  type: TYPE_NORMAL
- en: Group right DataFrame by group columns and merge piece by piece with left DataFrame.
    Must be None if either left or right are a Series.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_method**{‘ffill’, None}, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation method for data.
  prefs: []
  type: TYPE_NORMAL
- en: '**suffixes**list-like, default is (“_x”, “_y”)'
  prefs: []
  type: TYPE_NORMAL
- en: A length-2 sequence where each element is optionally a string indicating the
    suffix to add to overlapping column names in left and right respectively. Pass
    a value of None instead of a string to indicate that the column name from left
    or right should be left as-is, with no suffix. At least one of the values must
    not be None.
  prefs: []
  type: TYPE_NORMAL
- en: '**how**{‘left’, ‘right’, ‘outer’, ‘inner’}, default ‘outer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'left: use only keys from left frame (SQL: left outer join)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'right: use only keys from right frame (SQL: right outer join)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'outer: use union of keys from both frames (SQL: full outer join)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inner: use intersection of keys from both frames (SQL: inner join).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: The merged DataFrame output type will be the same as ‘left’, if it is a subclass
    of DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge`](pandas.merge.html#pandas.merge "pandas.merge")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge with a database-style join.
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_asof`](pandas.merge_asof.html#pandas.merge_asof "pandas.merge_asof")'
  prefs: []
  type: TYPE_NORMAL
- en: Merge on nearest keys.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
