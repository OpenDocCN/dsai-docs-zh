- en: numpy.all
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.all.html](https://numpy.org/doc/1.26/reference/generated/numpy.all.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Test whether all array elements along a given axis evaluate to True.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array or object that can be converted to an array.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**None or int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which a logical AND reduction is performed. The default (`axis=None`)
    is to perform a logical AND over all the dimensions of the input array. *axis*
    may be negative, in which case it counts from the last to the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: If this is a tuple of ints, a reduction is performed on multiple axes, instead
    of a single axis or all the axes as before.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. It must have the same shape
    as the expected output and its type is preserved (e.g., if `dtype(out)` is float,
    the result will consist of 0.0’s and 1.0’s). See [Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the input array.
  prefs: []
  type: TYPE_NORMAL
- en: If the default value is passed, then *keepdims* will not be passed through to
    the [`all`](#numpy.all "numpy.all") method of sub-classes of [`ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), however any non-default value will be. If the sub-class’ method
    does not implement *keepdims* any exceptions will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in checking for all *True* values. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**all**ndarray, bool'
  prefs: []
  type: TYPE_NORMAL
- en: A new boolean or array is returned unless *out* is specified, in which case
    a reference to *out* is returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.all`](numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")'
  prefs: []
  type: TYPE_NORMAL
- en: equivalent method
  prefs: []
  type: TYPE_NORMAL
- en: '[`any`](numpy.any.html#numpy.any "numpy.any")'
  prefs: []
  type: TYPE_NORMAL
- en: Test whether any element along a given axis evaluates to True.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Not a Number (NaN), positive infinity and negative infinity evaluate to *True*
    because these are not equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
