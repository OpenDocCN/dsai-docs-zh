- en: NumPy 1.16.4 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.16.4-notes.html](https://numpy.org/doc/1.26/release/1.16.4-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The NumPy 1.16.4 release fixes bugs reported against the 1.16.3 release, and
    also backports several enhancements from master that seem appropriate for a release
    series that is the last to support Python 2.7\. The wheels on PyPI are linked
    with OpenBLAS v0.3.7-dev, which should fix issues on Skylake series cpus.
  prefs: []
  type: TYPE_NORMAL
- en: Downstream developers building this release should use Cython >= 0.29.2 and,
    if using OpenBLAS, OpenBLAS > v0.3.7\. The supported Python versions are 2.7 and
    3.5-3.7.
  prefs: []
  type: TYPE_NORMAL
- en: New deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writeable flag of C-API wrapped arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an array is created from the C-API to wrap a pointer to data, the only
    indication we have of the read-write nature of the data is the `writeable` flag
    set during creation. It is dangerous to force the flag to writeable. In the future
    it will not be possible to switch the writeable flag to `True` from python. This
    deprecation should not affect many users since arrays created in such a manner
    are very rare in practice and only available through the NumPy C-API.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Potential changes to the random stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to bugs in the application of log to random floating point numbers, the
    stream may change when sampling from `np.random.beta`, `np.random.binomial`, `np.random.laplace`,
    `np.random.logistic`, `np.random.logseries` or `np.random.multinomial` if a 0
    is generated in the underlying MT19937 random stream. There is a 1 in \(10^{53}\)
    chance of this occurring, and so the probability that the stream changes for any
    given seed is extremely small. If a 0 is encountered in the underlying generator,
    then the incorrect value produced (either `np.inf` or `np.nan`) is now dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.lib.recfunctions.structured_to_unstructured`](../user/basics.rec.html#numpy.lib.recfunctions.structured_to_unstructured
    "numpy.lib.recfunctions.structured_to_unstructured") does not squeeze single-field
    views'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously `structured_to_unstructured(arr[['a']])` would produce a squeezed
    result inconsistent with `structured_to_unstructured(arr[['a', b']])`. This was
    accidental. The old behavior can be retained with `structured_to_unstructured(arr[['a']]).squeeze(axis=-1)`
    or far more simply, `arr['a']`.
  prefs: []
  type: TYPE_NORMAL
- en: Contributors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 10 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Charles Harris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dennis Zollo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hunter Damron +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jingbei Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicola Soranzo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Berg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull requests merged
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 16 pull requests were merged for this release.
  prefs: []
  type: TYPE_NORMAL
- en: '[#13392](https://github.com/numpy/numpy/pull/13392): BUG: Some PyPy versions
    lack PyStructSequence_InitType2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13394](https://github.com/numpy/numpy/pull/13394): MAINT, DEP: Fix deprecated
    `assertEquals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13396](https://github.com/numpy/numpy/pull/13396): BUG: Fix structured_to_unstructured
    on single-field types (backport)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13549](https://github.com/numpy/numpy/pull/13549): BLD: Make CI pass again
    with pytest 4.5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13552](https://github.com/numpy/numpy/pull/13552): TST: Register markers
    in conftest.py.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13559](https://github.com/numpy/numpy/pull/13559): BUG: Removes ValueError
    for empty kwargs in arraymultiter_new'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13560](https://github.com/numpy/numpy/pull/13560): BUG: Add TypeError to
    accepted exceptions in crackfortran.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13561](https://github.com/numpy/numpy/pull/13561): BUG: Handle subarrays
    in descr_to_dtype'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13562](https://github.com/numpy/numpy/pull/13562): BUG: Protect generators
    from log(0.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13563](https://github.com/numpy/numpy/pull/13563): BUG: Always return views
    from structured_to_unstructured when…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13564](https://github.com/numpy/numpy/pull/13564): BUG: Catch stderr when
    checking compiler version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13565](https://github.com/numpy/numpy/pull/13565): BUG: longdouble(int) does
    not work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13587](https://github.com/numpy/numpy/pull/13587): BUG: distutils/system_info.py
    fix missing subprocess import (#13523)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13620](https://github.com/numpy/numpy/pull/13620): BUG,DEP: Fix writeable
    flag setting for arrays without base'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13641](https://github.com/numpy/numpy/pull/13641): MAINT: Prepare for the
    1.16.4 release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13644](https://github.com/numpy/numpy/pull/13644): BUG: special case object
    arrays when printing rel-, abs-error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writeable flag of C-API wrapped arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an array is created from the C-API to wrap a pointer to data, the only
    indication we have of the read-write nature of the data is the `writeable` flag
    set during creation. It is dangerous to force the flag to writeable. In the future
    it will not be possible to switch the writeable flag to `True` from python. This
    deprecation should not affect many users since arrays created in such a manner
    are very rare in practice and only available through the NumPy C-API.
  prefs: []
  type: TYPE_NORMAL
- en: Writeable flag of C-API wrapped arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an array is created from the C-API to wrap a pointer to data, the only
    indication we have of the read-write nature of the data is the `writeable` flag
    set during creation. It is dangerous to force the flag to writeable. In the future
    it will not be possible to switch the writeable flag to `True` from python. This
    deprecation should not affect many users since arrays created in such a manner
    are very rare in practice and only available through the NumPy C-API.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Potential changes to the random stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to bugs in the application of log to random floating point numbers, the
    stream may change when sampling from `np.random.beta`, `np.random.binomial`, `np.random.laplace`,
    `np.random.logistic`, `np.random.logseries` or `np.random.multinomial` if a 0
    is generated in the underlying MT19937 random stream. There is a 1 in \(10^{53}\)
    chance of this occurring, and so the probability that the stream changes for any
    given seed is extremely small. If a 0 is encountered in the underlying generator,
    then the incorrect value produced (either `np.inf` or `np.nan`) is now dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Potential changes to the random stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to bugs in the application of log to random floating point numbers, the
    stream may change when sampling from `np.random.beta`, `np.random.binomial`, `np.random.laplace`,
    `np.random.logistic`, `np.random.logseries` or `np.random.multinomial` if a 0
    is generated in the underlying MT19937 random stream. There is a 1 in \(10^{53}\)
    chance of this occurring, and so the probability that the stream changes for any
    given seed is extremely small. If a 0 is encountered in the underlying generator,
    then the incorrect value produced (either `np.inf` or `np.nan`) is now dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.lib.recfunctions.structured_to_unstructured`](../user/basics.rec.html#numpy.lib.recfunctions.structured_to_unstructured
    "numpy.lib.recfunctions.structured_to_unstructured") does not squeeze single-field
    views'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously `structured_to_unstructured(arr[['a']])` would produce a squeezed
    result inconsistent with `structured_to_unstructured(arr[['a', b']])`. This was
    accidental. The old behavior can be retained with `structured_to_unstructured(arr[['a']]).squeeze(axis=-1)`
    or far more simply, `arr['a']`.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.lib.recfunctions.structured_to_unstructured`](../user/basics.rec.html#numpy.lib.recfunctions.structured_to_unstructured
    "numpy.lib.recfunctions.structured_to_unstructured") does not squeeze single-field
    views'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously `structured_to_unstructured(arr[['a']])` would produce a squeezed
    result inconsistent with `structured_to_unstructured(arr[['a', b']])`. This was
    accidental. The old behavior can be retained with `structured_to_unstructured(arr[['a']]).squeeze(axis=-1)`
    or far more simply, `arr['a']`.
  prefs: []
  type: TYPE_NORMAL
- en: Contributors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 10 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Charles Harris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dennis Zollo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hunter Damron +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jingbei Li +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nicola Soranzo +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Berg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull requests merged
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 16 pull requests were merged for this release.
  prefs: []
  type: TYPE_NORMAL
- en: '[#13392](https://github.com/numpy/numpy/pull/13392): BUG: Some PyPy versions
    lack PyStructSequence_InitType2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13394](https://github.com/numpy/numpy/pull/13394): MAINT, DEP: Fix deprecated
    `assertEquals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13396](https://github.com/numpy/numpy/pull/13396): BUG: Fix structured_to_unstructured
    on single-field types (backport)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13549](https://github.com/numpy/numpy/pull/13549): BLD: Make CI pass again
    with pytest 4.5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13552](https://github.com/numpy/numpy/pull/13552): TST: Register markers
    in conftest.py.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13559](https://github.com/numpy/numpy/pull/13559): BUG: Removes ValueError
    for empty kwargs in arraymultiter_new'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13560](https://github.com/numpy/numpy/pull/13560): BUG: Add TypeError to
    accepted exceptions in crackfortran.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13561](https://github.com/numpy/numpy/pull/13561): BUG: Handle subarrays
    in descr_to_dtype'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13562](https://github.com/numpy/numpy/pull/13562): BUG: Protect generators
    from log(0.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13563](https://github.com/numpy/numpy/pull/13563): BUG: Always return views
    from structured_to_unstructured when…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13564](https://github.com/numpy/numpy/pull/13564): BUG: Catch stderr when
    checking compiler version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13565](https://github.com/numpy/numpy/pull/13565): BUG: longdouble(int) does
    not work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13587](https://github.com/numpy/numpy/pull/13587): BUG: distutils/system_info.py
    fix missing subprocess import (#13523)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13620](https://github.com/numpy/numpy/pull/13620): BUG,DEP: Fix writeable
    flag setting for arrays without base'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13641](https://github.com/numpy/numpy/pull/13641): MAINT: Prepare for the
    1.16.4 release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#13644](https://github.com/numpy/numpy/pull/13644): BUG: special case object
    arrays when printing rel-, abs-error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
