- en: numpy.load
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.load.html](https://numpy.org/doc/1.26/reference/generated/numpy.load.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Load arrays or pickled objects from `.npy`, `.npz` or pickled files.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Loading files that contain object arrays uses the `pickle` module, which is
    not secure against erroneous or maliciously constructed data. Consider passing
    `allow_pickle=False` to load data that is known not to contain object arrays for
    the safer handling of untrusted sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**file**file-like object, string, or pathlib.Path'
  prefs: []
  type: TYPE_NORMAL
- en: The file to read. File-like objects must support the `seek()` and `read()` methods
    and must always be opened in binary mode. Pickled files require that the file-like
    object support the `readline()` method as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**mmap_mode**{None, ‘r+’, ‘r’, ‘w+’, ‘c’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If not None, then memory-map the file, using the given mode (see [`numpy.memmap`](numpy.memmap.html#numpy.memmap
    "numpy.memmap") for a detailed description of the modes). A memory-mapped array
    is kept on disk. However, it can be accessed and sliced like any ndarray. Memory
    mapping is especially useful for accessing small fragments of large files without
    reading the entire file into memory.
  prefs: []
  type: TYPE_NORMAL
- en: '**allow_pickle**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Allow loading pickled object arrays stored in npy files. Reasons for disallowing
    pickles include security, as loading pickled data can execute arbitrary code.
    If pickles are disallowed, loading object arrays will fail. Default: False'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.16.3: Made default False in response to CVE-2019-6446.'
  prefs: []
  type: TYPE_NORMAL
- en: '**fix_imports**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Only useful when loading Python 2 generated pickled files on Python 3, which
    includes npy/npz files containing object arrays. If *fix_imports* is True, pickle
    will try to map the old Python 2 names to the new names used in Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'What encoding to use when reading Python 2 strings. Only useful when loading
    Python 2 generated pickled files in Python 3, which includes npy/npz files containing
    object arrays. Values other than ‘latin1’, ‘ASCII’, and ‘bytes’ are not allowed,
    as they can corrupt numerical data. Default: ‘ASCII’'
  prefs: []
  type: TYPE_NORMAL
- en: '**max_header_size**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum allowed size of the header. Large headers may not be safe to load securely
    and thus require explicitly passing a larger value. See [`ast.literal_eval`](https://docs.python.org/3/library/ast.html#ast.literal_eval
    "(in Python v3.11)") for details. This option is ignored when *allow_pickle* is
    passed. In that case the file is by definition trusted and the limit is unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result**array, tuple, dict, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Data stored in the file. For `.npz` files, the returned instance of NpzFile
    class must be closed to avoid leaking file descriptors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: OSError
  prefs: []
  type: TYPE_NORMAL
- en: If the input file does not exist or cannot be read.
  prefs: []
  type: TYPE_NORMAL
- en: UnpicklingError
  prefs: []
  type: TYPE_NORMAL
- en: If `allow_pickle=True`, but the file cannot be loaded as a pickle.
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: The file contains an object array, but `allow_pickle=False` given.
  prefs: []
  type: TYPE_NORMAL
- en: EOFError
  prefs: []
  type: TYPE_NORMAL
- en: When calling `np.load` multiple times on the same file handle, if all data has
    already been read
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`save`](numpy.save.html#numpy.save "numpy.save"), [`savez`](numpy.savez.html#numpy.savez
    "numpy.savez"), [`savez_compressed`](numpy.savez_compressed.html#numpy.savez_compressed
    "numpy.savez_compressed"), [`loadtxt`](numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`memmap`](numpy.memmap.html#numpy.memmap "numpy.memmap")'
  prefs: []
  type: TYPE_NORMAL
- en: Create a memory-map to an array stored in a file on disk.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lib.format.open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")'
  prefs: []
  type: TYPE_NORMAL
- en: Create or load a memory-mapped `.npy` file.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the file contains pickle data, then whatever object is stored in the pickle
    is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the file is a `.npy` file, then a single array is returned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the file is a `.npz` file, then a dictionary-like object is returned, containing
    `{filename: array}` key-value pairs, one for each file in the archive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the file is a `.npz` file, the returned value supports the context manager
    protocol in a similar fashion to the open function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The underlying file descriptor is closed when exiting the ‘with’ block.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Store data to disk, and load it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Store compressed data to disk, and load it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Mem-map the stored array, and then access the second row directly from disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
