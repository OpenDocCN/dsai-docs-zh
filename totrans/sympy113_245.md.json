["```py\nclass sympy.testing.runtests.PyTestReporter(verbose=False, tb='short', colors=True, force_colors=False, split=None)\n```", "```py\nwrite(text, color='', align='left', width=None, force_colors=False)\n```", "```py\nclass sympy.testing.runtests.Reporter\n```", "```py\nclass sympy.testing.runtests.SymPyDocTestFinder(verbose=False, parser=<doctest.DocTestParser object>, recurse=True, exclude_empty=True)\n```", "```py\nclass sympy.testing.runtests.SymPyDocTestRunner(checker=None, verbose=None, optionflags=0)\n```", "```py\nrun(test, compileflags=None, out=None, clear_globs=True)\n```", "```py\nclass sympy.testing.runtests.SymPyOutputChecker\n```", "```py\ncheck_output(want, got, optionflags)\n```", "```py\nclass sympy.testing.runtests.SymPyTestResults(failed, attempted)\n```", "```py\nattempted\n```", "```py\nfailed\n```", "```py\nsympy.testing.runtests.convert_to_native_paths(lst)\n```", "```py\nsympy.testing.runtests.doctest(*paths, subprocess=True, rerun=0, **kwargs)\n```", "```py\n>>> import sympy \n```", "```py\n>>> sympy.doctest() \n```", "```py\n>>> sympy.doctest(\"sympy/core/basic.py\") \n>>> sympy.doctest(\"polynomial.rst\") \n```", "```py\n>>> sympy.doctest(\"/functions\", \"basic.py\") \n```", "```py\n>>> sympy.doctest(\"polynomial\") \n```", "```py\n>>> sympy.doctest(split='1/2') \n```", "```py\nsympy.testing.runtests.get_sympy_dir()\n```", "```py\nsympy.testing.runtests.raise_on_deprecated()\n```", "```py\nsympy.testing.runtests.run_all_tests(test_args=(), test_kwargs=None, doctest_args=(), doctest_kwargs=None, examples_args=(), examples_kwargs=None)\n```", "```py\n>>> from sympy.testing.runtests import run_all_tests\n>>> run_all_tests(test_args=(\"solvers\",),\n... test_kwargs={\"colors:False\"}) \n```", "```py\nsympy.testing.runtests.run_in_subprocess_with_hash_randomization(function, function_args=(), function_kwargs=None, command='/opt/hostedtoolcache/Python/3.12.3/x64/bin/python', module='sympy.testing.runtests', force=False)\n```", "```py\n>>> from sympy.testing.runtests import (\n... run_in_subprocess_with_hash_randomization)\n>>> # run the core tests in verbose mode\n>>> run_in_subprocess_with_hash_randomization(\"_test\",\n... function_args=(\"core\",),\n... function_kwargs={'verbose': True}) \n# Will return 0 if sys.executable supports hash randomization and tests\n# pass, 1 if they fail, and False if it does not support hash\n# randomization. \n```", "```py\nsympy.testing.runtests.split_list(l, split, density=None)\n```", "```py\n>>> from sympy.testing.runtests import split_list\n>>> a = list(range(10))\n>>> split_list(a, '1/3')\n[0, 1, 2]\n>>> split_list(a, '2/3')\n[3, 4, 5]\n>>> split_list(a, '3/3')\n[6, 7, 8, 9] \n```", "```py\nsympy.testing.runtests.sympytestfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=<doctest.DocTestParser object>, encoding=None)\n```", "```py\nsympy.testing.runtests.test(*paths, subprocess=True, rerun=0, **kwargs)\n```", "```py\n>>> import sympy \n```", "```py\n>>> sympy.test() \n```", "```py\n>>> sympy.test(\"sympy/core/tests/test_basic.py\")    \n>>> sympy.test(\"_basic\") \n```", "```py\n>>> sympy.test(\"sympy/core/tests/test_basic.py\",\n...        \"sympy/functions\") \n```", "```py\n>>> sympy.test(\"/core\", \"/util\") \n```", "```py\n>>> sympy.test(\"sympy/core/tests/test_basic.py\",\n...        kw=\"test_equality\") \n```", "```py\n>>> sympy.test(kw=\"subs\") \n```", "```py\n>>> sympy.test(verbose=True) \n```", "```py\n>>> sympy.test(sort=False) \n```", "```py\n>>> sympy.test(pdb=True) \n```", "```py\n>>> sympy.test(colors=False) \n```", "```py\n>>> sympy.test(force_colors=False) \n```", "```py\n>>> sympy.test(tb='no') \n```", "```py\n>>> sympy.test(split='1/2') \n```", "```py\n>>> sympy.test(split='1/2', time_balance=True) \n```", "```py\n>>> sympy.test(subprocess=False) \n```", "```py\n>>> import os\n>>> os.environ['PYTHONHASHSEED'] = '42' \n```"]