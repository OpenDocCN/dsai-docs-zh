- en: numpy.result_type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.result_type
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.result_type.html](https://numpy.org/doc/1.26/reference/generated/numpy.result_type.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.result_type.html](https://numpy.org/doc/1.26/reference/generated/numpy.result_type.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Returns the type that results from applying the NumPy type promotion rules to
    the arguments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用NumPy类型提升规则到参数时的结果类型。
- en: Type promotion in NumPy works similarly to the rules in languages like C++,
    with some slight differences. When both scalars and arrays are used, the array’s
    type takes precedence and the actual value of the scalar is taken into account.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的类型提升与诸如C ++之类的语言中的规则类似，但略有不同。当同时使用标量和数组时，数组的类型优先，实际标量的值也会被考虑在内。
- en: For example, calculating 3*a, where a is an array of 32-bit floats, intuitively
    should result in a 32-bit float output. If the 3 is a 32-bit integer, the NumPy
    rules indicate it can’t convert losslessly into a 32-bit float, so a 64-bit float
    should be the result type. By examining the value of the constant, ‘3’, we see
    that it fits in an 8-bit integer, which can be cast losslessly into the 32-bit
    float.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，计算3*a，其中a是32位浮点数数组，直觉上应该会得到一个32位浮点数输出。如果3是32位整数，则NumPy规则表明它无法无损地转换为32位浮点数，因此结果类型应为64位浮点数。通过检查常量‘3’的值，我们可以看到它适合8位整数，可以无损地转换为32位浮点数。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**arrays_and_dtypes**list of arrays and dtypes'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**arrays_and_dtypes**数组和数据类型列表'
- en: The operands of some operation whose result type is needed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 需要结果类型的某些操作的操作数。
- en: 'Returns:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**out**dtype'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**out**数据类型'
- en: The result type.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 结果类型。
- en: See also
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), [`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types"), [`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type"), [`can_cast`](numpy.can_cast.html#numpy.can_cast "numpy.can_cast")'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), [`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types"), [`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type"), [`can_cast`](numpy.can_cast.html#numpy.can_cast "numpy.can_cast")'
- en: Notes
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: New in version 1.6.0.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.6.0中新增。
- en: The specific algorithm used is as follows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的特定算法如下。
- en: Categories are determined by first checking which of boolean, integer (int/uint),
    or floating point (float/complex) the maximum kind of all the arrays and the scalars
    are.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类别通过首先检查所有数组和标量的所有数组和标量中的最大类别是布尔值、整数（int/uint）还是浮点数（float/complex）来确定。
- en: If there are only scalars or the maximum category of the scalars is higher than
    the maximum category of the arrays, the data types are combined with [`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types") to produce the return value.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有标量或标量的最大类别高于数组的最大类别，则使用[`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types")将数据类型组合以生成返回值。
- en: Otherwise, [`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type") is called on each scalar, and the resulting data types
    are all combined with [`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types") to produce the return value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，对每个标量调用[`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type")，并使用[`promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types")组合所有结果数据类型以生成返回值。
- en: The set of int values is not a subset of the uint values for types with the
    same number of bits, something not reflected in [`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type"), but handled as a special case in [`result_type`](#numpy.result_type
    "numpy.result_type").
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有相同位数的类型，整数值的集合不是无符号整数值的子集，[`min_scalar_type`](numpy.min_scalar_type.html#numpy.min_scalar_type
    "numpy.min_scalar_type")中没有反映这一点，但在[`result_type`](#numpy.result_type "numpy.result_type")中作为特殊情况处理。
- en: Examples
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
