- en: A four bar linkage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/examples/four_bar_linkage_example.html](https://docs.sympy.org/latest/modules/physics/mechanics/examples/four_bar_linkage_example.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The four bar linkage is a common example used in mechanics, which can be formulated
    with only two holonomic constraints. This example will make use of joints functionality
    provided in [`sympy.physics.mechanics`](../index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics"). In summary we will use bodies and joints to define
    the open loop system. Next, we define the configuration constraints to close the
    loop. [`System`](../api/system.html#sympy.physics.mechanics.system.System "sympy.physics.mechanics.system.System")
    will be used to do the “book-keeping” of the entire system with [`KanesMethod`](../api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod") as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: <svg class="align-center" width="700" overflow="hidden" version="1.1" viewBox="0
    0 688.80481 280.10239"><text transform="rotate(20.636022)" x="217.61748" y="-6.2926989"
    fill="#ffffff" font-family="Arial, Arial_MSFontService, sans-serif" font-size="16px"
    font-weight="400" stroke-width=".193657">Link3</text> <text transform="rotate(-59.450547)"
    x="-9.7048655" y="361.74994" fill="#ffffff" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">Link2</text>
    <text transform="rotate(-64.933169)" x="-117.5733" y="126.01302" fill="#ffffff"
    font-family="Arial, Arial_MSFontService, sans-serif" font-size="16px" font-weight="400"
    stroke-width=".193657">Link4</text> <text x="505.32043" y="148.07506" fill="CurrentColor"
    font-family="Arial, Arial_MSFontService, sans-serif" font-size="16px" font-weight="400"
    stroke-width=".193657">Degree of Freedom (DoF)</text> <text x="506.57825" y="201.83926"
    fill="CurrentColor" font-family="Arial, Arial_MSFontService, sans-serif" font-size="16px"
    font-weight="400" stroke-width=".193657">Active constraint</text> <text x="505.75793"
    y="174.5529" fill="CurrentColor" font-family="Arial, Arial_MSFontService, sans-serif"
    font-size="16px" font-weight="400" stroke-width=".193657">Constrained DoF</text>
    <text x="505.36731" y="121.73777" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">Moving body</text>
    <text x="505.24231" y="95.400467" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">Fixed body</text>
    <text x="138.75917" y="240.86946" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657"><tspan fill="#ffffff">link1</tspan></text>
    <text x="326.16098" y="232.57265" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">q1, u1</text>
    <text x="32.488701" y="20.635042" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">q3, u3</text>
    <text x="327.66376" y="65.940979" fill="CurrentColor" font-family="Arial, Arial_MSFontService,
    sans-serif" font-size="16px" font-weight="400" stroke-width=".193657">q2, u2</text></svg>
  prefs: []
  type: TYPE_NORMAL
- en: First we need to create the [`dynamicsymbols()`](../../vector/api/functions.html#sympy.physics.vector.dynamicsymbols
    "sympy.physics.vector.dynamicsymbols") needed to describe the system as shown
    in the above diagram. In this case, the generalized coordinates \(q_1\), \(q_2\)
    and \(q_3\) represent the angles between the links. Likewise, the generalized
    speeds \(u_1\), \(u_2\) and \(u_3\) represent the angular velocities between the
    links. We also create some [`symbols()`](../../../core.html#sympy.core.symbol.symbols
    "sympy.core.symbol.symbols") to represent the lengths and density of the links.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With all symbols defined, we can now define the bodies and initialize our instance
    of [`System`](../api/system.html#sympy.physics.mechanics.system.System "sympy.physics.mechanics.system.System").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we also define the first three joints, which create the open loop pendulum,
    and add them to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we can formulate the holonomic constraint that will close the kinematic
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before generating the equations of motion we need to specify which generalized
    coordinates and speeds are independent and which are dependent. After which we
    can run [`validate_system()`](../api/system.html#sympy.physics.mechanics.system.System.validate_system
    "sympy.physics.mechanics.system.System.validate_system") to do some basic consistency
    checks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we have the entire system ready, we can now form the equations of motion
    using [`KanesMethod`](../api/kane_lagrange.html#sympy.physics.mechanics.kane.KanesMethod
    "sympy.physics.mechanics.kane.KanesMethod") as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Revealing noncontributing forces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To reveal the noncontributing forces at the closing joint, we must introduce
    auxiliary speeds in the x and y-direction at the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To ensure that speeds are included in the velocity constraints, we must manually
    overwrite the velocity constraints because those are by default specified as the
    time derivatives of the holonomic constraints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When adding the noncontributing forces we need them to depend only on the auxiliary
    velocity and not the velocity that is eliminated by the constraints. This can
    be achieved by applying an equal and opposite force to the non-auxiliary endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we can specify a new point that already subtracts the velocity
    eliminated by the constraints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next, we can add the auxiliary speeds and noncontributing forces to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To include gravity we can use [`apply_uniform_gravity()`](../api/system.html#sympy.physics.mechanics.system.System.apply_uniform_gravity
    "sympy.physics.mechanics.system.System.apply_uniform_gravity") before validating
    the system and forming the equations of motion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With the equations of motion formed we can solve the auxiliary equations for
    the noncontributing forces and compute their values for a simple configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
