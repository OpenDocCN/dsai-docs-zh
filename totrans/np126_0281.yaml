- en: numpy.ufunc.outer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.outer.html](https://numpy.org/doc/1.26/reference/generated/numpy.ufunc.outer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apply the ufunc *op* to all pairs (a, b) with a in *A* and b in *B*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let `M = A.ndim`, `N = B.ndim`. Then the result, *C*, of `op.outer(A, B)` is
    an array of dimension M + N such that:'
  prefs: []
  type: TYPE_NORMAL
- en: \[C[i_0, ..., i_{M-1}, j_0, ..., j_{N-1}] = op(A[i_0, ..., i_{M-1}], B[j_0,
    ..., j_{N-1}])\]
  prefs: []
  type: TYPE_NORMAL
- en: 'For *A* and *B* one-dimensional, this is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: First array
  prefs: []
  type: TYPE_NORMAL
- en: '**B**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Second array
  prefs: []
  type: TYPE_NORMAL
- en: '**kwargs**any'
  prefs: []
  type: TYPE_NORMAL
- en: Arguments to pass on to the ufunc. Typically [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") or *out*. See [`ufunc`](numpy.ufunc.html#numpy.ufunc "numpy.ufunc")
    for a comprehensive overview of all available arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Output array
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.outer`](numpy.outer.html#numpy.outer "numpy.outer")'
  prefs: []
  type: TYPE_NORMAL
- en: A less powerful version of `np.multiply.outer` that [`ravel`](numpy.ravel.html#numpy.ravel
    "numpy.ravel")s all inputs to 1D. This exists primarily for compatibility with
    old code.
  prefs: []
  type: TYPE_NORMAL
- en: '[`tensordot`](numpy.tensordot.html#numpy.tensordot "numpy.tensordot")'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.tensordot(a, b, axes=((), ()))` and `np.multiply.outer(a, b)` behave same
    for all dimensions of a and b.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A multi-dimensional example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
