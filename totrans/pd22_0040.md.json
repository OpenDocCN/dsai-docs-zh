["```py\n[2]: \n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\n\ndf = pd.DataFrame({\n    \"strings\": [\"Adam\", \"Mike\"],\n    \"ints\": [1, 3],\n    \"floats\": [1.123, 1000.23]\n})\ndf.style \\\n  .format(precision=3, thousands=\".\", decimal=\",\") \\\n  .format_index(str.upper, axis=1) \\\n  .relabel_index([\"row 1\", \"row 2\"], axis=0) \n```", "```py\n[2]: \n```", "```py\n[3]: \n```", "```py\nweather_df = pd.DataFrame(np.random.rand(10,2)*5,\n                          index=pd.date_range(start=\"2021-01-01\", periods=10),\n                          columns=[\"Tokyo\", \"Beijing\"])\n\ndef rain_condition(v):\n    if v < 1.75:\n        return \"Dry\"\n    elif v < 2.75:\n        return \"Rain\"\n    return \"Heavy Rain\"\n\ndef make_pretty(styler):\n    styler.set_caption(\"Weather Conditions\")\n    styler.format(rain_condition)\n    styler.format_index(lambda v: v.strftime(\"%A\"))\n    styler.background_gradient(axis=None, vmin=1, vmax=5, cmap=\"YlGnBu\")\n    return styler\n\nweather_df \n```", "```py\n[3]: \n```", "```py\n[4]: \n```", "```py\nweather_df.loc[\"2021-01-04\":\"2021-01-08\"].style.pipe(make_pretty) \n```", "```py\n[4]: \n```", "```py\n[5]: \n```", "```py\ndf = pd.DataFrame(np.random.randn(5, 5))\ndf.style \\\n  .hide(subset=[0, 2, 4], axis=0) \\\n  .hide(subset=[0, 2, 4], axis=1) \n```", "```py\n[5]: \n```", "```py\n[6]: \n```", "```py\nshow = [0, 2, 4]\ndf.style \\\n  .hide([row for row in df.index if row not in show], axis=0) \\\n  .hide([col for col in df.columns if col not in show], axis=1) \n```", "```py\n[6]: \n```", "```py\n[7]: \n```", "```py\nsummary_styler = df.agg([\"sum\", \"mean\"]).style \\\n                   .format(precision=3) \\\n                   .relabel_index([\"Sum\", \"Average\"])\ndf.style.format(precision=1).concat(summary_styler) \n```", "```py\n[7]: \n```", "```py\n[8]: \n```", "```py\ndf = pd.DataFrame([[38.0, 2.0, 18.0, 22.0, 21, np.nan],[19, 439, 6, 452, 226,232]],\n                  index=pd.Index(['Tumour (Positive)', 'Non-Tumour (Negative)'], name='Actual Label:'),\n                  columns=pd.MultiIndex.from_product([['Decision Tree', 'Regression', 'Random'],['Tumour', 'Non-Tumour']], names=['Model:', 'Predicted:']))\ndf.style \n```", "```py\n[8]: \n```", "```py\n[10]: \n```", "```py\ns \n```", "```py\n[10]: \n```", "```py\n[11]: \n```", "```py\ns = df.style.format('{:.0f}').hide([('Random', 'Tumour'), ('Random', 'Non-Tumour')], axis=\"columns\")\ns \n```", "```py\n[11]: \n```", "```py\ntr:hover {\n  background-color: #ffff99;\n} \n```", "```py\n[13]: \n```", "```py\ncell_hover = {  # for row hover use <tr> instead of <td>\n    'selector': 'td:hover',\n    'props': [('background-color', '#ffffb3')]\n}\nindex_names = {\n    'selector': '.index_name',\n    'props': 'font-style: italic; color: darkgrey; font-weight:normal;'\n}\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': 'background-color: #000066; color: white;'\n}\ns.set_table_styles([cell_hover, index_names, headers]) \n```", "```py\n[13]: \n```", "```py\n[15]: \n```", "```py\ns.set_table_styles([\n    {'selector': 'th.col_heading', 'props': 'text-align: center;'},\n    {'selector': 'th.col_heading.level0', 'props': 'font-size: 1.5em;'},\n    {'selector': 'td', 'props': 'text-align: center; font-weight: bold;'},\n], overwrite=False) \n```", "```py\n[15]: \n```", "```py\n[17]: \n```", "```py\ns.set_table_styles({\n    ('Regression', 'Tumour'): [{'selector': 'th', 'props': 'border-left: 1px solid white'},\n                               {'selector': 'td', 'props': 'border-left: 1px solid #000066'}]\n}, overwrite=False, axis=0) \n```", "```py\n[17]: \n```", "```py\n[19]: \n```", "```py\nout = s.set_table_attributes('class=\"my-table-cls\"').to_html()\nprint(out[out.find('<table'):][:109]) \n```", "```py\n<table id=\"T_xyz01\" class=\"my-table-cls\">\n  <thead>\n    <tr>\n      <th class=\"index_name level0\" >Model:</th>\n\n```", "```py\n[20]: \n```", "```py\ns.set_table_styles([  # create internal CSS classes\n    {'selector': '.true', 'props': 'background-color: #e6ffe6;'},\n    {'selector': '.false', 'props': 'background-color: #ffe6e6;'},\n], overwrite=False)\ncell_color = pd.DataFrame([['true ', 'false ', 'true ', 'false '],\n                           ['false ', 'true ', 'false ', 'true ']],\n                          index=df.index,\n                          columns=df.columns[:4])\ns.set_td_classes(cell_color) \n```", "```py\n[20]: \n```", "```py\n[22]: \n```", "```py\nnp.random.seed(0)\ndf2 = pd.DataFrame(np.random.randn(10,4), columns=['A','B','C','D'])\ndf2.style \n```", "```py\n[22]: \n```", "```py\n[23]: \n```", "```py\ndef style_negative(v, props=''):\n    return props if v < 0 else None\ns2 = df2.style.map(style_negative, props='color:red;')\\\n              .map(lambda v: 'opacity: 20%;' if (v < 0.3) and (v > -0.3) else None)\ns2 \n```", "```py\n[23]: \n```", "```py\n[25]: \n```", "```py\ndef highlight_max(s, props=''):\n    return np.where(s == np.nanmax(s.values), props, '')\ns2.apply(highlight_max, props='color:white;background-color:darkblue', axis=0) \n```", "```py\n[25]: \n```", "```py\n[27]: \n```", "```py\ns2.apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n  .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[27]: \n```", "```py\n[29]: \n```", "```py\ns2.map_index(lambda v: \"color:pink;\" if v>4 else \"color:darkblue;\", axis=0)\ns2.apply_index(lambda s: np.where(s.isin([\"A\", \"B\"]), \"color:pink;\", \"color:darkblue;\"), axis=1) \n```", "```py\n[29]: \n```", "```py\n[30]: \n```", "```py\ns.set_caption(\"Confusion matrix for multiple cancer prediction models.\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': 'caption-side: bottom; font-size:1.25em;'\n }], overwrite=False) \n```", "```py\n[30]: \n```", "```py\n[32]: \n```", "```py\ntt = pd.DataFrame([['This model has a very strong true positive rate',\n                    \"This model's total number of false negatives is too high\"]],\n                  index=['Tumour (Positive)'], columns=df.columns[[0,3]])\ns.set_tooltips(tt, props='visibility: hidden; position: absolute; z-index: 1; border: 1px solid #000066;'\n                         'background-color: white; color: #000066; font-size: 0.8em;'\n                         'transform: translate(0px, -24px); padding: 0.6em; border-radius: 0.5em;') \n```", "```py\n[32]: \n```", "```py\n[34]: \n```", "```py\ns.set_table_styles([  # create internal CSS classes\n    {'selector': '.border-red', 'props': 'border: 2px dashed red;'},\n    {'selector': '.border-green', 'props': 'border: 2px dashed green;'},\n], overwrite=False)\ncell_border = pd.DataFrame([['border-green ', ' ', ' ', 'border-red '],\n                           [' ', ' ', ' ', ' ']],\n                          index=df.index,\n                          columns=df.columns[:4])\ns.set_td_classes(cell_color + cell_border) \n```", "```py\n[34]: \n```", "```py\n[36]: \n```", "```py\ndf3 = pd.DataFrame(np.random.randn(4,4),\n                   pd.MultiIndex.from_product([['A', 'B'], ['r1', 'r2']]),\n                   columns=['c1','c2','c3','c4'])\ndf3 \n```", "```py\n[36]: \n```", "```py\n[37]: \n```", "```py\nslice_ = ['c3', 'c4']\ndf3.style.apply(highlight_max, props='color:red;', axis=0, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[37]: \n```", "```py\n[38]: \n```", "```py\nidx = pd.IndexSlice\nslice_ = idx[idx[:,'r1'], idx['c2':'c4']]\ndf3.style.apply(highlight_max, props='color:red;', axis=0, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[38]: \n```", "```py\n[39]: \n```", "```py\nslice_ = idx[idx[:,'r2'], :]\ndf3.style.apply(highlight_max, props='color:red;', axis=1, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[39]: \n```", "```py\n[40]: \n```", "```py\nslice_ = idx[idx[(df3['c1'] + df3['c3']) < -2.0], ['c2', 'c4']]\ndf3.style.apply(highlight_max, props='color:red;', axis=1, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[40]: \n```", "```py\nmy_func2 = functools.partial(my_func, subset=42) \n```", "```py\n[41]: \n```", "```py\ndf4 = pd.DataFrame([[1,2],[3,4]])\ns4 = df4.style \n```", "```py\n[42]: \n```", "```py\nfrom pandas.io.formats.style import Styler\ns4 = Styler(df4, uuid_len=0, cell_ids=False) \n```", "```py\n[43]: \n```", "```py\nprops = 'font-family: \"Times New Roman\", Times, serif; color: #e83e8c; font-size:1.3em;'\ndf4.style.map(lambda x: props, subset=[1]) \n```", "```py\n[43]: \n```", "```py\n[44]: \n```", "```py\ndf4.style.set_table_styles([{'selector': 'td.col1', 'props': props}]) \n```", "```py\n[44]: \n```", "```py\n[45]: \n```", "```py\ndf2.style.apply(highlight_max, props='color:white;background-color:darkblue;', axis=0)\\\n         .apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n         .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[45]: \n```", "```py\n[46]: \n```", "```py\nbuild = lambda x: pd.DataFrame(x, index=df2.index, columns=df2.columns)\ncls1 = build(df2.apply(highlight_max, props='cls-1 ', axis=0))\ncls2 = build(df2.apply(highlight_max, props='cls-2 ', axis=1, result_type='expand').values)\ncls3 = build(highlight_max(df2, props='cls-3 '))\ndf2.style.set_table_styles([\n    {'selector': '.cls-1', 'props': 'color:white;background-color:darkblue;'},\n    {'selector': '.cls-2', 'props': 'color:white;background-color:pink;'},\n    {'selector': '.cls-3', 'props': 'color:white;background-color:purple;'}\n]).set_td_classes(cls1 + cls2 + cls3) \n```", "```py\n[46]: \n```", "```py\n[47]: \n```", "```py\nmy_css = {\n    \"row_heading\": \"\",\n    \"col_heading\": \"\",\n    \"index_name\": \"\",\n    \"col\": \"c\",\n    \"row\": \"r\",\n    \"col_trim\": \"\",\n    \"row_trim\": \"\",\n    \"level\": \"l\",\n    \"data\": \"\",\n    \"blank\": \"\",\n}\nhtml = Styler(df4, uuid_len=0, cell_ids=False)\nhtml.set_table_styles([{'selector': 'td', 'props': props},\n                       {'selector': '.c1', 'props': 'color:green;'},\n                       {'selector': '.l0', 'props': 'color:blue;'}],\n                      css_class_names=my_css)\nprint(html.to_html()) \n```", "```py\n<style type=\"text/css\">\n#T_ td {\n  font-family: \"Times New Roman\", Times, serif;\n  color: #e83e8c;\n  font-size: 1.3em;\n}\n#T_ .c1 {\n  color: green;\n}\n#T_ .l0 {\n  color: blue;\n}\n</style>\n<table id=\"T_\">\n  <thead>\n    <tr>\n      <th class=\" l0\" >&nbsp;</th>\n      <th class=\" l0 c0\" >0</th>\n      <th class=\" l0 c1\" >1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th class=\" l0 r0\" >0</th>\n      <td class=\" r0 c0\" >1</td>\n      <td class=\" r0 c1\" >2</td>\n    </tr>\n    <tr>\n      <th class=\" l0 r1\" >1</th>\n      <td class=\" r1 c0\" >3</td>\n      <td class=\" r1 c1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[48]: \n```", "```py\nhtml \n```", "```py\n[48]: \n```", "```py\n[49]: \n```", "```py\ndf2.iloc[0,2] = np.nan\ndf2.iloc[4,3] = np.nan\ndf2.loc[:4].style.highlight_null(color='yellow') \n```", "```py\n[49]: \n```", "```py\n[50]: \n```", "```py\ndf2.loc[:4].style.highlight_max(axis=1, props='color:white; font-weight:bold; background-color:darkblue;') \n```", "```py\n[50]: \n```", "```py\n[51]: \n```", "```py\nleft = pd.Series([1.0, 0.0, 1.0], index=[\"A\", \"B\", \"D\"])\ndf2.loc[:4].style.highlight_between(left=left, right=1.5, axis=1, props='color:white; background-color:purple;') \n```", "```py\n[51]: \n```", "```py\n[52]: \n```", "```py\ndf2.loc[:4].style.highlight_quantile(q_left=0.85, axis=None, color='yellow') \n```", "```py\n[52]: \n```", "```py\n[53]: \n```", "```py\nimport seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ndf2.style.background_gradient(cmap=cm) \n```", "```py\n[53]: \n```", "```py\n[54]: \n```", "```py\ndf2.style.text_gradient(cmap=cm) \n```", "```py\n[54]: \n```", "```py\n[55]: \n```", "```py\ndf2.loc[:4].style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'}) \n```", "```py\n[55]: \n```", "```py\n[56]: \n```", "```py\ndf2.style.bar(subset=['A', 'B'], color='#d65f5f') \n```", "```py\n[56]: \n```", "```py\n[57]: \n```", "```py\ndf2.style.format('{:.3f}', na_rep=\"\")\\\n         .bar(align=0, vmin=-2.5, vmax=2.5, cmap=\"bwr\", height=50,\n              width=60, props=\"width: 120px; border-right: 1px solid black;\")\\\n         .text_gradient(cmap=\"bwr\", vmin=-2.5, vmax=2.5) \n```", "```py\n[57]: \n```", "```py\n[59]: \n```", "```py\nHTML(head) \n```", "```py\n[59]: \n```", "```py\n[60]: \n```", "```py\nstyle1 = df2.style\\\n            .map(style_negative, props='color:red;')\\\n            .map(lambda v: 'opacity: 20%;' if (v < 0.3) and (v > -0.3) else None)\\\n            .set_table_styles([{\"selector\": \"th\", \"props\": \"color: blue;\"}])\\\n            .hide(axis=\"index\")\nstyle1 \n```", "```py\n[60]: \n```", "```py\n[61]: \n```", "```py\nstyle2 = df3.style\nstyle2.use(style1.export())\nstyle2 \n```", "```py\n[61]: \n```", "```py\n[62]: \n```", "```py\nfrom ipywidgets import widgets\n@widgets.interact\ndef f(h_neg=(0, 359, 1), h_pos=(0, 359), s=(0., 99.9), l=(0., 99.9)):\n    return df2.style.background_gradient(\n        cmap=sns.palettes.diverging_palette(h_neg=h_neg, h_pos=h_pos, s=s, l=l,\n                                            as_cmap=True)\n    ) \n```", "```py\n[63]: \n```", "```py\ndef magnify():\n    return [dict(selector=\"th\",\n                 props=[(\"font-size\", \"4pt\")]),\n            dict(selector=\"td\",\n                 props=[('padding', \"0em 0em\")]),\n            dict(selector=\"th:hover\",\n                 props=[(\"font-size\", \"12pt\")]),\n            dict(selector=\"tr:hover td:hover\",\n                 props=[('max-width', '200px'),\n                        ('font-size', '12pt')])\n] \n```", "```py\n[64]: \n```", "```py\nnp.random.seed(25)\ncmap = cmap=sns.diverging_palette(5, 250, as_cmap=True)\nbigdf = pd.DataFrame(np.random.randn(20, 25)).cumsum()\n\nbigdf.style.background_gradient(cmap, axis=1)\\\n    .set_properties(**{'max-width': '80px', 'font-size': '1pt'})\\\n    .set_caption(\"Hover to magnify\")\\\n    .format(precision=2)\\\n    .set_table_styles(magnify()) \n```", "```py\n[64]: \n```", "```py\n[65]: \n```", "```py\nbigdf = pd.DataFrame(np.random.randn(16, 100))\nbigdf.style.set_sticky(axis=\"index\") \n```", "```py\n[65]: \n```", "```py\n[66]: \n```", "```py\nbigdf.index = pd.MultiIndex.from_product([[\"A\",\"B\"],[0,1],[0,1,2,3]])\nbigdf.style.set_sticky(axis=\"index\", pixel_size=18, levels=[1,2]) \n```", "```py\n[66]: \n```", "```py\n[67]: \n```", "```py\ndf4 = pd.DataFrame([['<div></div>', '\"&other\"', '<span></span>']])\ndf4.style \n```", "```py\n[67]: \n```", "```py\n[68]: \n```", "```py\ndf4.style.format(escape=\"html\") \n```", "```py\n[68]: \n```", "```py\n[69]: \n```", "```py\ndf4.style.format('<a href=\"https://pandas.pydata.org\" target=\"_blank\">{}</a>', escape=\"html\") \n```", "```py\n[69]: \n```", "```py\n[70]: \n```", "```py\ndf2.style.\\\n    map(style_negative, props='color:red;').\\\n    highlight_max(axis=0).\\\n    to_excel('styled.xlsx', engine='openpyxl') \n```", "```py\n[71]: \n```", "```py\nprint(pd.DataFrame([[1,2],[3,4]], index=['i1', 'i2'], columns=['c1', 'c2']).style.to_html()) \n```", "```py\n<style type=\"text/css\">\n</style>\n<table id=\"T_a1de3\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_a1de3_level0_col0\" class=\"col_heading level0 col0\" >c1</th>\n      <th id=\"T_a1de3_level0_col1\" class=\"col_heading level0 col1\" >c2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_a1de3_level0_row0\" class=\"row_heading level0 row0\" >i1</th>\n      <td id=\"T_a1de3_row0_col0\" class=\"data row0 col0\" >1</td>\n      <td id=\"T_a1de3_row0_col1\" class=\"data row0 col1\" >2</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1de3_level0_row1\" class=\"row_heading level0 row1\" >i2</th>\n      <td id=\"T_a1de3_row1_col0\" class=\"data row1 col0\" >3</td>\n      <td id=\"T_a1de3_row1_col1\" class=\"data row1 col1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[72]: \n```", "```py\ndf4 = pd.DataFrame([['text']])\ndf4.style.map(lambda x: 'color:green;')\\\n         .map(lambda x: 'color:red;') \n```", "```py\n[72]: \n```", "```py\n[73]: \n```", "```py\ndf4.style.map(lambda x: 'color:red;')\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[73]: \n```", "```py\n[74]: \n```", "```py\ndf4.style.set_uuid('a_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'}])\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[74]: \n```", "```py\n[75]: \n```", "```py\ndf4.style.set_uuid('b_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[75]: \n```", "```py\n[76]: \n```", "```py\ndf4.style.set_uuid('c_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[76]: \n```", "```py\n[77]: \n```", "```py\ndf4.style.set_uuid('d_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green !important;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[77]: \n```", "```py\n[78]: \n```", "```py\nfrom jinja2 import Environment, ChoiceLoader, FileSystemLoader\nfrom IPython.display import HTML\nfrom pandas.io.formats.style import Styler \n```", "```py\n[79]: \n```", "```py\nwith open(\"templates/myhtml.tpl\") as f:\n    print(f.read()) \n```", "```py\n{% extends \"html_table.tpl\" %}\n{% block table %}\n<h1>{{ table_title|default(\"My Table\") }}</h1>\n{{ super() }}\n{% endblock table %}\n\n```", "```py\n[80]: \n```", "```py\nclass MyStyler(Styler):\n    env = Environment(\n        loader=ChoiceLoader([\n            FileSystemLoader(\"templates\"),  # contains ours\n            Styler.loader,  # the default\n        ])\n    )\n    template_html_table = env.get_template(\"myhtml.tpl\") \n```", "```py\n[81]: \n```", "```py\nMyStyler(df3) \n```", "```py\n[81]: \n```", "```py\n[82]: \n```", "```py\nHTML(MyStyler(df3).to_html(table_title=\"Extending Example\")) \n```", "```py\n[82]: \n```", "```py\n[83]: \n```", "```py\nEasyStyler = Styler.from_custom_template(\"templates\", \"myhtml.tpl\")\nHTML(EasyStyler(df3).to_html(table_title=\"Another Title\")) \n```", "```py\n[83]: \n```", "```py\n[85]: \n```", "```py\nHTML(style_structure) \n```", "```py\n[85]: \n```", "```py\n<style type=\"text/css\">\n```", "```py\n</style>\n```", "```py\n[87]: \n```", "```py\nHTML(table_structure) \n```", "```py\n[87]: \n```", "```py\n<table ...>\n```", "```py\n</table>\n```", "```py\n[2]: \n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\n\ndf = pd.DataFrame({\n    \"strings\": [\"Adam\", \"Mike\"],\n    \"ints\": [1, 3],\n    \"floats\": [1.123, 1000.23]\n})\ndf.style \\\n  .format(precision=3, thousands=\".\", decimal=\",\") \\\n  .format_index(str.upper, axis=1) \\\n  .relabel_index([\"row 1\", \"row 2\"], axis=0) \n```", "```py\n[2]: \n```", "```py\n[3]: \n```", "```py\nweather_df = pd.DataFrame(np.random.rand(10,2)*5,\n                          index=pd.date_range(start=\"2021-01-01\", periods=10),\n                          columns=[\"Tokyo\", \"Beijing\"])\n\ndef rain_condition(v):\n    if v < 1.75:\n        return \"Dry\"\n    elif v < 2.75:\n        return \"Rain\"\n    return \"Heavy Rain\"\n\ndef make_pretty(styler):\n    styler.set_caption(\"Weather Conditions\")\n    styler.format(rain_condition)\n    styler.format_index(lambda v: v.strftime(\"%A\"))\n    styler.background_gradient(axis=None, vmin=1, vmax=5, cmap=\"YlGnBu\")\n    return styler\n\nweather_df \n```", "```py\n[3]: \n```", "```py\n[4]: \n```", "```py\nweather_df.loc[\"2021-01-04\":\"2021-01-08\"].style.pipe(make_pretty) \n```", "```py\n[4]: \n```", "```py\n[5]: \n```", "```py\ndf = pd.DataFrame(np.random.randn(5, 5))\ndf.style \\\n  .hide(subset=[0, 2, 4], axis=0) \\\n  .hide(subset=[0, 2, 4], axis=1) \n```", "```py\n[5]: \n```", "```py\n[6]: \n```", "```py\nshow = [0, 2, 4]\ndf.style \\\n  .hide([row for row in df.index if row not in show], axis=0) \\\n  .hide([col for col in df.columns if col not in show], axis=1) \n```", "```py\n[6]: \n```", "```py\n[7]: \n```", "```py\nsummary_styler = df.agg([\"sum\", \"mean\"]).style \\\n                   .format(precision=3) \\\n                   .relabel_index([\"Sum\", \"Average\"])\ndf.style.format(precision=1).concat(summary_styler) \n```", "```py\n[7]: \n```", "```py\n[2]: \n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\n\ndf = pd.DataFrame({\n    \"strings\": [\"Adam\", \"Mike\"],\n    \"ints\": [1, 3],\n    \"floats\": [1.123, 1000.23]\n})\ndf.style \\\n  .format(precision=3, thousands=\".\", decimal=\",\") \\\n  .format_index(str.upper, axis=1) \\\n  .relabel_index([\"row 1\", \"row 2\"], axis=0) \n```", "```py\n[2]: \n```", "```py\n[3]: \n```", "```py\nweather_df = pd.DataFrame(np.random.rand(10,2)*5,\n                          index=pd.date_range(start=\"2021-01-01\", periods=10),\n                          columns=[\"Tokyo\", \"Beijing\"])\n\ndef rain_condition(v):\n    if v < 1.75:\n        return \"Dry\"\n    elif v < 2.75:\n        return \"Rain\"\n    return \"Heavy Rain\"\n\ndef make_pretty(styler):\n    styler.set_caption(\"Weather Conditions\")\n    styler.format(rain_condition)\n    styler.format_index(lambda v: v.strftime(\"%A\"))\n    styler.background_gradient(axis=None, vmin=1, vmax=5, cmap=\"YlGnBu\")\n    return styler\n\nweather_df \n```", "```py\n[3]: \n```", "```py\n[4]: \n```", "```py\nweather_df.loc[\"2021-01-04\":\"2021-01-08\"].style.pipe(make_pretty) \n```", "```py\n[4]: \n```", "```py\n[5]: \n```", "```py\ndf = pd.DataFrame(np.random.randn(5, 5))\ndf.style \\\n  .hide(subset=[0, 2, 4], axis=0) \\\n  .hide(subset=[0, 2, 4], axis=1) \n```", "```py\n[5]: \n```", "```py\n[6]: \n```", "```py\nshow = [0, 2, 4]\ndf.style \\\n  .hide([row for row in df.index if row not in show], axis=0) \\\n  .hide([col for col in df.columns if col not in show], axis=1) \n```", "```py\n[6]: \n```", "```py\n[7]: \n```", "```py\nsummary_styler = df.agg([\"sum\", \"mean\"]).style \\\n                   .format(precision=3) \\\n                   .relabel_index([\"Sum\", \"Average\"])\ndf.style.format(precision=1).concat(summary_styler) \n```", "```py\n[7]: \n```", "```py\n[8]: \n```", "```py\ndf = pd.DataFrame([[38.0, 2.0, 18.0, 22.0, 21, np.nan],[19, 439, 6, 452, 226,232]],\n                  index=pd.Index(['Tumour (Positive)', 'Non-Tumour (Negative)'], name='Actual Label:'),\n                  columns=pd.MultiIndex.from_product([['Decision Tree', 'Regression', 'Random'],['Tumour', 'Non-Tumour']], names=['Model:', 'Predicted:']))\ndf.style \n```", "```py\n[8]: \n```", "```py\n[10]: \n```", "```py\ns \n```", "```py\n[10]: \n```", "```py\n[11]: \n```", "```py\ns = df.style.format('{:.0f}').hide([('Random', 'Tumour'), ('Random', 'Non-Tumour')], axis=\"columns\")\ns \n```", "```py\n[11]: \n```", "```py\ntr:hover {\n  background-color: #ffff99;\n} \n```", "```py\n[13]: \n```", "```py\ncell_hover = {  # for row hover use <tr> instead of <td>\n    'selector': 'td:hover',\n    'props': [('background-color', '#ffffb3')]\n}\nindex_names = {\n    'selector': '.index_name',\n    'props': 'font-style: italic; color: darkgrey; font-weight:normal;'\n}\nheaders = {\n    'selector': 'th:not(.index_name)',\n    'props': 'background-color: #000066; color: white;'\n}\ns.set_table_styles([cell_hover, index_names, headers]) \n```", "```py\n[13]: \n```", "```py\n[15]: \n```", "```py\ns.set_table_styles([\n    {'selector': 'th.col_heading', 'props': 'text-align: center;'},\n    {'selector': 'th.col_heading.level0', 'props': 'font-size: 1.5em;'},\n    {'selector': 'td', 'props': 'text-align: center; font-weight: bold;'},\n], overwrite=False) \n```", "```py\n[15]: \n```", "```py\n[17]: \n```", "```py\ns.set_table_styles({\n    ('Regression', 'Tumour'): [{'selector': 'th', 'props': 'border-left: 1px solid white'},\n                               {'selector': 'td', 'props': 'border-left: 1px solid #000066'}]\n}, overwrite=False, axis=0) \n```", "```py\n[17]: \n```", "```py\n[19]: \n```", "```py\nout = s.set_table_attributes('class=\"my-table-cls\"').to_html()\nprint(out[out.find('<table'):][:109]) \n```", "```py\n<table id=\"T_xyz01\" class=\"my-table-cls\">\n  <thead>\n    <tr>\n      <th class=\"index_name level0\" >Model:</th>\n\n```", "```py\n[20]: \n```", "```py\ns.set_table_styles([  # create internal CSS classes\n    {'selector': '.true', 'props': 'background-color: #e6ffe6;'},\n    {'selector': '.false', 'props': 'background-color: #ffe6e6;'},\n], overwrite=False)\ncell_color = pd.DataFrame([['true ', 'false ', 'true ', 'false '],\n                           ['false ', 'true ', 'false ', 'true ']],\n                          index=df.index,\n                          columns=df.columns[:4])\ns.set_td_classes(cell_color) \n```", "```py\n[20]: \n```", "```py\n[19]: \n```", "```py\nout = s.set_table_attributes('class=\"my-table-cls\"').to_html()\nprint(out[out.find('<table'):][:109]) \n```", "```py\n<table id=\"T_xyz01\" class=\"my-table-cls\">\n  <thead>\n    <tr>\n      <th class=\"index_name level0\" >Model:</th>\n\n```", "```py\n[20]: \n```", "```py\ns.set_table_styles([  # create internal CSS classes\n    {'selector': '.true', 'props': 'background-color: #e6ffe6;'},\n    {'selector': '.false', 'props': 'background-color: #ffe6e6;'},\n], overwrite=False)\ncell_color = pd.DataFrame([['true ', 'false ', 'true ', 'false '],\n                           ['false ', 'true ', 'false ', 'true ']],\n                          index=df.index,\n                          columns=df.columns[:4])\ns.set_td_classes(cell_color) \n```", "```py\n[20]: \n```", "```py\n[22]: \n```", "```py\nnp.random.seed(0)\ndf2 = pd.DataFrame(np.random.randn(10,4), columns=['A','B','C','D'])\ndf2.style \n```", "```py\n[22]: \n```", "```py\n[23]: \n```", "```py\ndef style_negative(v, props=''):\n    return props if v < 0 else None\ns2 = df2.style.map(style_negative, props='color:red;')\\\n              .map(lambda v: 'opacity: 20%;' if (v < 0.3) and (v > -0.3) else None)\ns2 \n```", "```py\n[23]: \n```", "```py\n[25]: \n```", "```py\ndef highlight_max(s, props=''):\n    return np.where(s == np.nanmax(s.values), props, '')\ns2.apply(highlight_max, props='color:white;background-color:darkblue', axis=0) \n```", "```py\n[25]: \n```", "```py\n[27]: \n```", "```py\ns2.apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n  .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[27]: \n```", "```py\n[29]: \n```", "```py\ns2.map_index(lambda v: \"color:pink;\" if v>4 else \"color:darkblue;\", axis=0)\ns2.apply_index(lambda s: np.where(s.isin([\"A\", \"B\"]), \"color:pink;\", \"color:darkblue;\"), axis=1) \n```", "```py\n[29]: \n```", "```py\n[22]: \n```", "```py\nnp.random.seed(0)\ndf2 = pd.DataFrame(np.random.randn(10,4), columns=['A','B','C','D'])\ndf2.style \n```", "```py\n[22]: \n```", "```py\n[23]: \n```", "```py\ndef style_negative(v, props=''):\n    return props if v < 0 else None\ns2 = df2.style.map(style_negative, props='color:red;')\\\n              .map(lambda v: 'opacity: 20%;' if (v < 0.3) and (v > -0.3) else None)\ns2 \n```", "```py\n[23]: \n```", "```py\n[25]: \n```", "```py\ndef highlight_max(s, props=''):\n    return np.where(s == np.nanmax(s.values), props, '')\ns2.apply(highlight_max, props='color:white;background-color:darkblue', axis=0) \n```", "```py\n[25]: \n```", "```py\n[27]: \n```", "```py\ns2.apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n  .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[27]: \n```", "```py\n[29]: \n```", "```py\ns2.map_index(lambda v: \"color:pink;\" if v>4 else \"color:darkblue;\", axis=0)\ns2.apply_index(lambda s: np.where(s.isin([\"A\", \"B\"]), \"color:pink;\", \"color:darkblue;\"), axis=1) \n```", "```py\n[29]: \n```", "```py\n[30]: \n```", "```py\ns.set_caption(\"Confusion matrix for multiple cancer prediction models.\")\\\n .set_table_styles([{\n     'selector': 'caption',\n     'props': 'caption-side: bottom; font-size:1.25em;'\n }], overwrite=False) \n```", "```py\n[30]: \n```", "```py\n[32]: \n```", "```py\ntt = pd.DataFrame([['This model has a very strong true positive rate',\n                    \"This model's total number of false negatives is too high\"]],\n                  index=['Tumour (Positive)'], columns=df.columns[[0,3]])\ns.set_tooltips(tt, props='visibility: hidden; position: absolute; z-index: 1; border: 1px solid #000066;'\n                         'background-color: white; color: #000066; font-size: 0.8em;'\n                         'transform: translate(0px, -24px); padding: 0.6em; border-radius: 0.5em;') \n```", "```py\n[32]: \n```", "```py\n[34]: \n```", "```py\ns.set_table_styles([  # create internal CSS classes\n    {'selector': '.border-red', 'props': 'border: 2px dashed red;'},\n    {'selector': '.border-green', 'props': 'border: 2px dashed green;'},\n], overwrite=False)\ncell_border = pd.DataFrame([['border-green ', ' ', ' ', 'border-red '],\n                           [' ', ' ', ' ', ' ']],\n                          index=df.index,\n                          columns=df.columns[:4])\ns.set_td_classes(cell_color + cell_border) \n```", "```py\n[34]: \n```", "```py\n[36]: \n```", "```py\ndf3 = pd.DataFrame(np.random.randn(4,4),\n                   pd.MultiIndex.from_product([['A', 'B'], ['r1', 'r2']]),\n                   columns=['c1','c2','c3','c4'])\ndf3 \n```", "```py\n[36]: \n```", "```py\n[37]: \n```", "```py\nslice_ = ['c3', 'c4']\ndf3.style.apply(highlight_max, props='color:red;', axis=0, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[37]: \n```", "```py\n[38]: \n```", "```py\nidx = pd.IndexSlice\nslice_ = idx[idx[:,'r1'], idx['c2':'c4']]\ndf3.style.apply(highlight_max, props='color:red;', axis=0, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[38]: \n```", "```py\n[39]: \n```", "```py\nslice_ = idx[idx[:,'r2'], :]\ndf3.style.apply(highlight_max, props='color:red;', axis=1, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[39]: \n```", "```py\n[40]: \n```", "```py\nslice_ = idx[idx[(df3['c1'] + df3['c3']) < -2.0], ['c2', 'c4']]\ndf3.style.apply(highlight_max, props='color:red;', axis=1, subset=slice_)\\\n         .set_properties(**{'background-color': '#ffffb3'}, subset=slice_) \n```", "```py\n[40]: \n```", "```py\nmy_func2 = functools.partial(my_func, subset=42) \n```", "```py\n[41]: \n```", "```py\ndf4 = pd.DataFrame([[1,2],[3,4]])\ns4 = df4.style \n```", "```py\n[42]: \n```", "```py\nfrom pandas.io.formats.style import Styler\ns4 = Styler(df4, uuid_len=0, cell_ids=False) \n```", "```py\n[43]: \n```", "```py\nprops = 'font-family: \"Times New Roman\", Times, serif; color: #e83e8c; font-size:1.3em;'\ndf4.style.map(lambda x: props, subset=[1]) \n```", "```py\n[43]: \n```", "```py\n[44]: \n```", "```py\ndf4.style.set_table_styles([{'selector': 'td.col1', 'props': props}]) \n```", "```py\n[44]: \n```", "```py\n[45]: \n```", "```py\ndf2.style.apply(highlight_max, props='color:white;background-color:darkblue;', axis=0)\\\n         .apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n         .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[45]: \n```", "```py\n[46]: \n```", "```py\nbuild = lambda x: pd.DataFrame(x, index=df2.index, columns=df2.columns)\ncls1 = build(df2.apply(highlight_max, props='cls-1 ', axis=0))\ncls2 = build(df2.apply(highlight_max, props='cls-2 ', axis=1, result_type='expand').values)\ncls3 = build(highlight_max(df2, props='cls-3 '))\ndf2.style.set_table_styles([\n    {'selector': '.cls-1', 'props': 'color:white;background-color:darkblue;'},\n    {'selector': '.cls-2', 'props': 'color:white;background-color:pink;'},\n    {'selector': '.cls-3', 'props': 'color:white;background-color:purple;'}\n]).set_td_classes(cls1 + cls2 + cls3) \n```", "```py\n[46]: \n```", "```py\n[47]: \n```", "```py\nmy_css = {\n    \"row_heading\": \"\",\n    \"col_heading\": \"\",\n    \"index_name\": \"\",\n    \"col\": \"c\",\n    \"row\": \"r\",\n    \"col_trim\": \"\",\n    \"row_trim\": \"\",\n    \"level\": \"l\",\n    \"data\": \"\",\n    \"blank\": \"\",\n}\nhtml = Styler(df4, uuid_len=0, cell_ids=False)\nhtml.set_table_styles([{'selector': 'td', 'props': props},\n                       {'selector': '.c1', 'props': 'color:green;'},\n                       {'selector': '.l0', 'props': 'color:blue;'}],\n                      css_class_names=my_css)\nprint(html.to_html()) \n```", "```py\n<style type=\"text/css\">\n#T_ td {\n  font-family: \"Times New Roman\", Times, serif;\n  color: #e83e8c;\n  font-size: 1.3em;\n}\n#T_ .c1 {\n  color: green;\n}\n#T_ .l0 {\n  color: blue;\n}\n</style>\n<table id=\"T_\">\n  <thead>\n    <tr>\n      <th class=\" l0\" >&nbsp;</th>\n      <th class=\" l0 c0\" >0</th>\n      <th class=\" l0 c1\" >1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th class=\" l0 r0\" >0</th>\n      <td class=\" r0 c0\" >1</td>\n      <td class=\" r0 c1\" >2</td>\n    </tr>\n    <tr>\n      <th class=\" l0 r1\" >1</th>\n      <td class=\" r1 c0\" >3</td>\n      <td class=\" r1 c1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[48]: \n```", "```py\nhtml \n```", "```py\n[48]: \n```", "```py\n[41]: \n```", "```py\ndf4 = pd.DataFrame([[1,2],[3,4]])\ns4 = df4.style \n```", "```py\n[42]: \n```", "```py\nfrom pandas.io.formats.style import Styler\ns4 = Styler(df4, uuid_len=0, cell_ids=False) \n```", "```py\n[43]: \n```", "```py\nprops = 'font-family: \"Times New Roman\", Times, serif; color: #e83e8c; font-size:1.3em;'\ndf4.style.map(lambda x: props, subset=[1]) \n```", "```py\n[43]: \n```", "```py\n[44]: \n```", "```py\ndf4.style.set_table_styles([{'selector': 'td.col1', 'props': props}]) \n```", "```py\n[44]: \n```", "```py\n[45]: \n```", "```py\ndf2.style.apply(highlight_max, props='color:white;background-color:darkblue;', axis=0)\\\n         .apply(highlight_max, props='color:white;background-color:pink;', axis=1)\\\n         .apply(highlight_max, props='color:white;background-color:purple', axis=None) \n```", "```py\n[45]: \n```", "```py\n[46]: \n```", "```py\nbuild = lambda x: pd.DataFrame(x, index=df2.index, columns=df2.columns)\ncls1 = build(df2.apply(highlight_max, props='cls-1 ', axis=0))\ncls2 = build(df2.apply(highlight_max, props='cls-2 ', axis=1, result_type='expand').values)\ncls3 = build(highlight_max(df2, props='cls-3 '))\ndf2.style.set_table_styles([\n    {'selector': '.cls-1', 'props': 'color:white;background-color:darkblue;'},\n    {'selector': '.cls-2', 'props': 'color:white;background-color:pink;'},\n    {'selector': '.cls-3', 'props': 'color:white;background-color:purple;'}\n]).set_td_classes(cls1 + cls2 + cls3) \n```", "```py\n[46]: \n```", "```py\n[47]: \n```", "```py\nmy_css = {\n    \"row_heading\": \"\",\n    \"col_heading\": \"\",\n    \"index_name\": \"\",\n    \"col\": \"c\",\n    \"row\": \"r\",\n    \"col_trim\": \"\",\n    \"row_trim\": \"\",\n    \"level\": \"l\",\n    \"data\": \"\",\n    \"blank\": \"\",\n}\nhtml = Styler(df4, uuid_len=0, cell_ids=False)\nhtml.set_table_styles([{'selector': 'td', 'props': props},\n                       {'selector': '.c1', 'props': 'color:green;'},\n                       {'selector': '.l0', 'props': 'color:blue;'}],\n                      css_class_names=my_css)\nprint(html.to_html()) \n```", "```py\n<style type=\"text/css\">\n#T_ td {\n  font-family: \"Times New Roman\", Times, serif;\n  color: #e83e8c;\n  font-size: 1.3em;\n}\n#T_ .c1 {\n  color: green;\n}\n#T_ .l0 {\n  color: blue;\n}\n</style>\n<table id=\"T_\">\n  <thead>\n    <tr>\n      <th class=\" l0\" >&nbsp;</th>\n      <th class=\" l0 c0\" >0</th>\n      <th class=\" l0 c1\" >1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th class=\" l0 r0\" >0</th>\n      <td class=\" r0 c0\" >1</td>\n      <td class=\" r0 c1\" >2</td>\n    </tr>\n    <tr>\n      <th class=\" l0 r1\" >1</th>\n      <td class=\" r1 c0\" >3</td>\n      <td class=\" r1 c1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[48]: \n```", "```py\nhtml \n```", "```py\n[48]: \n```", "```py\n[49]: \n```", "```py\ndf2.iloc[0,2] = np.nan\ndf2.iloc[4,3] = np.nan\ndf2.loc[:4].style.highlight_null(color='yellow') \n```", "```py\n[49]: \n```", "```py\n[50]: \n```", "```py\ndf2.loc[:4].style.highlight_max(axis=1, props='color:white; font-weight:bold; background-color:darkblue;') \n```", "```py\n[50]: \n```", "```py\n[51]: \n```", "```py\nleft = pd.Series([1.0, 0.0, 1.0], index=[\"A\", \"B\", \"D\"])\ndf2.loc[:4].style.highlight_between(left=left, right=1.5, axis=1, props='color:white; background-color:purple;') \n```", "```py\n[51]: \n```", "```py\n[52]: \n```", "```py\ndf2.loc[:4].style.highlight_quantile(q_left=0.85, axis=None, color='yellow') \n```", "```py\n[52]: \n```", "```py\n[53]: \n```", "```py\nimport seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ndf2.style.background_gradient(cmap=cm) \n```", "```py\n[53]: \n```", "```py\n[54]: \n```", "```py\ndf2.style.text_gradient(cmap=cm) \n```", "```py\n[54]: \n```", "```py\n[55]: \n```", "```py\ndf2.loc[:4].style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'}) \n```", "```py\n[55]: \n```", "```py\n[56]: \n```", "```py\ndf2.style.bar(subset=['A', 'B'], color='#d65f5f') \n```", "```py\n[56]: \n```", "```py\n[57]: \n```", "```py\ndf2.style.format('{:.3f}', na_rep=\"\")\\\n         .bar(align=0, vmin=-2.5, vmax=2.5, cmap=\"bwr\", height=50,\n              width=60, props=\"width: 120px; border-right: 1px solid black;\")\\\n         .text_gradient(cmap=\"bwr\", vmin=-2.5, vmax=2.5) \n```", "```py\n[57]: \n```", "```py\n[59]: \n```", "```py\nHTML(head) \n```", "```py\n[59]: \n```", "```py\n[49]: \n```", "```py\ndf2.iloc[0,2] = np.nan\ndf2.iloc[4,3] = np.nan\ndf2.loc[:4].style.highlight_null(color='yellow') \n```", "```py\n[49]: \n```", "```py\n[50]: \n```", "```py\ndf2.loc[:4].style.highlight_max(axis=1, props='color:white; font-weight:bold; background-color:darkblue;') \n```", "```py\n[50]: \n```", "```py\n[51]: \n```", "```py\nleft = pd.Series([1.0, 0.0, 1.0], index=[\"A\", \"B\", \"D\"])\ndf2.loc[:4].style.highlight_between(left=left, right=1.5, axis=1, props='color:white; background-color:purple;') \n```", "```py\n[51]: \n```", "```py\n[52]: \n```", "```py\ndf2.loc[:4].style.highlight_quantile(q_left=0.85, axis=None, color='yellow') \n```", "```py\n[52]: \n```", "```py\n[53]: \n```", "```py\nimport seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\n\ndf2.style.background_gradient(cmap=cm) \n```", "```py\n[53]: \n```", "```py\n[54]: \n```", "```py\ndf2.style.text_gradient(cmap=cm) \n```", "```py\n[54]: \n```", "```py\n[55]: \n```", "```py\ndf2.loc[:4].style.set_properties(**{'background-color': 'black',\n                           'color': 'lawngreen',\n                           'border-color': 'white'}) \n```", "```py\n[55]: \n```", "```py\n[56]: \n```", "```py\ndf2.style.bar(subset=['A', 'B'], color='#d65f5f') \n```", "```py\n[56]: \n```", "```py\n[57]: \n```", "```py\ndf2.style.format('{:.3f}', na_rep=\"\")\\\n         .bar(align=0, vmin=-2.5, vmax=2.5, cmap=\"bwr\", height=50,\n              width=60, props=\"width: 120px; border-right: 1px solid black;\")\\\n         .text_gradient(cmap=\"bwr\", vmin=-2.5, vmax=2.5) \n```", "```py\n[57]: \n```", "```py\n[59]: \n```", "```py\nHTML(head) \n```", "```py\n[59]: \n```", "```py\n[60]: \n```", "```py\nstyle1 = df2.style\\\n            .map(style_negative, props='color:red;')\\\n            .map(lambda v: 'opacity: 20%;' if (v < 0.3) and (v > -0.3) else None)\\\n            .set_table_styles([{\"selector\": \"th\", \"props\": \"color: blue;\"}])\\\n            .hide(axis=\"index\")\nstyle1 \n```", "```py\n[60]: \n```", "```py\n[61]: \n```", "```py\nstyle2 = df3.style\nstyle2.use(style1.export())\nstyle2 \n```", "```py\n[61]: \n```", "```py\n[62]: \n```", "```py\nfrom ipywidgets import widgets\n@widgets.interact\ndef f(h_neg=(0, 359, 1), h_pos=(0, 359), s=(0., 99.9), l=(0., 99.9)):\n    return df2.style.background_gradient(\n        cmap=sns.palettes.diverging_palette(h_neg=h_neg, h_pos=h_pos, s=s, l=l,\n                                            as_cmap=True)\n    ) \n```", "```py\n[63]: \n```", "```py\ndef magnify():\n    return [dict(selector=\"th\",\n                 props=[(\"font-size\", \"4pt\")]),\n            dict(selector=\"td\",\n                 props=[('padding', \"0em 0em\")]),\n            dict(selector=\"th:hover\",\n                 props=[(\"font-size\", \"12pt\")]),\n            dict(selector=\"tr:hover td:hover\",\n                 props=[('max-width', '200px'),\n                        ('font-size', '12pt')])\n] \n```", "```py\n[64]: \n```", "```py\nnp.random.seed(25)\ncmap = cmap=sns.diverging_palette(5, 250, as_cmap=True)\nbigdf = pd.DataFrame(np.random.randn(20, 25)).cumsum()\n\nbigdf.style.background_gradient(cmap, axis=1)\\\n    .set_properties(**{'max-width': '80px', 'font-size': '1pt'})\\\n    .set_caption(\"Hover to magnify\")\\\n    .format(precision=2)\\\n    .set_table_styles(magnify()) \n```", "```py\n[64]: \n```", "```py\n[65]: \n```", "```py\nbigdf = pd.DataFrame(np.random.randn(16, 100))\nbigdf.style.set_sticky(axis=\"index\") \n```", "```py\n[65]: \n```", "```py\n[66]: \n```", "```py\nbigdf.index = pd.MultiIndex.from_product([[\"A\",\"B\"],[0,1],[0,1,2,3]])\nbigdf.style.set_sticky(axis=\"index\", pixel_size=18, levels=[1,2]) \n```", "```py\n[66]: \n```", "```py\n[67]: \n```", "```py\ndf4 = pd.DataFrame([['<div></div>', '\"&other\"', '<span></span>']])\ndf4.style \n```", "```py\n[67]: \n```", "```py\n[68]: \n```", "```py\ndf4.style.format(escape=\"html\") \n```", "```py\n[68]: \n```", "```py\n[69]: \n```", "```py\ndf4.style.format('<a href=\"https://pandas.pydata.org\" target=\"_blank\">{}</a>', escape=\"html\") \n```", "```py\n[69]: \n```", "```py\n[62]: \n```", "```py\nfrom ipywidgets import widgets\n@widgets.interact\ndef f(h_neg=(0, 359, 1), h_pos=(0, 359), s=(0., 99.9), l=(0., 99.9)):\n    return df2.style.background_gradient(\n        cmap=sns.palettes.diverging_palette(h_neg=h_neg, h_pos=h_pos, s=s, l=l,\n                                            as_cmap=True)\n    ) \n```", "```py\n[63]: \n```", "```py\ndef magnify():\n    return [dict(selector=\"th\",\n                 props=[(\"font-size\", \"4pt\")]),\n            dict(selector=\"td\",\n                 props=[('padding', \"0em 0em\")]),\n            dict(selector=\"th:hover\",\n                 props=[(\"font-size\", \"12pt\")]),\n            dict(selector=\"tr:hover td:hover\",\n                 props=[('max-width', '200px'),\n                        ('font-size', '12pt')])\n] \n```", "```py\n[64]: \n```", "```py\nnp.random.seed(25)\ncmap = cmap=sns.diverging_palette(5, 250, as_cmap=True)\nbigdf = pd.DataFrame(np.random.randn(20, 25)).cumsum()\n\nbigdf.style.background_gradient(cmap, axis=1)\\\n    .set_properties(**{'max-width': '80px', 'font-size': '1pt'})\\\n    .set_caption(\"Hover to magnify\")\\\n    .format(precision=2)\\\n    .set_table_styles(magnify()) \n```", "```py\n[64]: \n```", "```py\n[65]: \n```", "```py\nbigdf = pd.DataFrame(np.random.randn(16, 100))\nbigdf.style.set_sticky(axis=\"index\") \n```", "```py\n[65]: \n```", "```py\n[66]: \n```", "```py\nbigdf.index = pd.MultiIndex.from_product([[\"A\",\"B\"],[0,1],[0,1,2,3]])\nbigdf.style.set_sticky(axis=\"index\", pixel_size=18, levels=[1,2]) \n```", "```py\n[66]: \n```", "```py\n[67]: \n```", "```py\ndf4 = pd.DataFrame([['<div></div>', '\"&other\"', '<span></span>']])\ndf4.style \n```", "```py\n[67]: \n```", "```py\n[68]: \n```", "```py\ndf4.style.format(escape=\"html\") \n```", "```py\n[68]: \n```", "```py\n[69]: \n```", "```py\ndf4.style.format('<a href=\"https://pandas.pydata.org\" target=\"_blank\">{}</a>', escape=\"html\") \n```", "```py\n[69]: \n```", "```py\n[70]: \n```", "```py\ndf2.style.\\\n    map(style_negative, props='color:red;').\\\n    highlight_max(axis=0).\\\n    to_excel('styled.xlsx', engine='openpyxl') \n```", "```py\n[71]: \n```", "```py\nprint(pd.DataFrame([[1,2],[3,4]], index=['i1', 'i2'], columns=['c1', 'c2']).style.to_html()) \n```", "```py\n<style type=\"text/css\">\n</style>\n<table id=\"T_a1de3\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_a1de3_level0_col0\" class=\"col_heading level0 col0\" >c1</th>\n      <th id=\"T_a1de3_level0_col1\" class=\"col_heading level0 col1\" >c2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_a1de3_level0_row0\" class=\"row_heading level0 row0\" >i1</th>\n      <td id=\"T_a1de3_row0_col0\" class=\"data row0 col0\" >1</td>\n      <td id=\"T_a1de3_row0_col1\" class=\"data row0 col1\" >2</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1de3_level0_row1\" class=\"row_heading level0 row1\" >i2</th>\n      <td id=\"T_a1de3_row1_col0\" class=\"data row1 col0\" >3</td>\n      <td id=\"T_a1de3_row1_col1\" class=\"data row1 col1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[72]: \n```", "```py\ndf4 = pd.DataFrame([['text']])\ndf4.style.map(lambda x: 'color:green;')\\\n         .map(lambda x: 'color:red;') \n```", "```py\n[72]: \n```", "```py\n[73]: \n```", "```py\ndf4.style.map(lambda x: 'color:red;')\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[73]: \n```", "```py\n[74]: \n```", "```py\ndf4.style.set_uuid('a_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'}])\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[74]: \n```", "```py\n[75]: \n```", "```py\ndf4.style.set_uuid('b_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[75]: \n```", "```py\n[76]: \n```", "```py\ndf4.style.set_uuid('c_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[76]: \n```", "```py\n[77]: \n```", "```py\ndf4.style.set_uuid('d_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green !important;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[77]: \n```", "```py\n[71]: \n```", "```py\nprint(pd.DataFrame([[1,2],[3,4]], index=['i1', 'i2'], columns=['c1', 'c2']).style.to_html()) \n```", "```py\n<style type=\"text/css\">\n</style>\n<table id=\"T_a1de3\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_a1de3_level0_col0\" class=\"col_heading level0 col0\" >c1</th>\n      <th id=\"T_a1de3_level0_col1\" class=\"col_heading level0 col1\" >c2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_a1de3_level0_row0\" class=\"row_heading level0 row0\" >i1</th>\n      <td id=\"T_a1de3_row0_col0\" class=\"data row0 col0\" >1</td>\n      <td id=\"T_a1de3_row0_col1\" class=\"data row0 col1\" >2</td>\n    </tr>\n    <tr>\n      <th id=\"T_a1de3_level0_row1\" class=\"row_heading level0 row1\" >i2</th>\n      <td id=\"T_a1de3_row1_col0\" class=\"data row1 col0\" >3</td>\n      <td id=\"T_a1de3_row1_col1\" class=\"data row1 col1\" >4</td>\n    </tr>\n  </tbody>\n</table>\n\n```", "```py\n[72]: \n```", "```py\ndf4 = pd.DataFrame([['text']])\ndf4.style.map(lambda x: 'color:green;')\\\n         .map(lambda x: 'color:red;') \n```", "```py\n[72]: \n```", "```py\n[73]: \n```", "```py\ndf4.style.map(lambda x: 'color:red;')\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[73]: \n```", "```py\n[74]: \n```", "```py\ndf4.style.set_uuid('a_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'}])\\\n         .map(lambda x: 'color:green;') \n```", "```py\n[74]: \n```", "```py\n[75]: \n```", "```py\ndf4.style.set_uuid('b_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[75]: \n```", "```py\n[76]: \n```", "```py\ndf4.style.set_uuid('c_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[76]: \n```", "```py\n[77]: \n```", "```py\ndf4.style.set_uuid('d_')\\\n         .set_table_styles([{'selector': 'td', 'props': 'color:red;'},\n                            {'selector': '.cls-1', 'props': 'color:blue;'},\n                            {'selector': 'td.data', 'props': 'color:yellow;'}])\\\n         .map(lambda x: 'color:green !important;')\\\n         .set_td_classes(pd.DataFrame([['cls-1']])) \n```", "```py\n[77]: \n```", "```py\n[78]: \n```", "```py\nfrom jinja2 import Environment, ChoiceLoader, FileSystemLoader\nfrom IPython.display import HTML\nfrom pandas.io.formats.style import Styler \n```", "```py\n[79]: \n```", "```py\nwith open(\"templates/myhtml.tpl\") as f:\n    print(f.read()) \n```", "```py\n{% extends \"html_table.tpl\" %}\n{% block table %}\n<h1>{{ table_title|default(\"My Table\") }}</h1>\n{{ super() }}\n{% endblock table %}\n\n```", "```py\n[80]: \n```", "```py\nclass MyStyler(Styler):\n    env = Environment(\n        loader=ChoiceLoader([\n            FileSystemLoader(\"templates\"),  # contains ours\n            Styler.loader,  # the default\n        ])\n    )\n    template_html_table = env.get_template(\"myhtml.tpl\") \n```", "```py\n[81]: \n```", "```py\nMyStyler(df3) \n```", "```py\n[81]: \n```", "```py\n[82]: \n```", "```py\nHTML(MyStyler(df3).to_html(table_title=\"Extending Example\")) \n```", "```py\n[82]: \n```", "```py\n[83]: \n```", "```py\nEasyStyler = Styler.from_custom_template(\"templates\", \"myhtml.tpl\")\nHTML(EasyStyler(df3).to_html(table_title=\"Another Title\")) \n```", "```py\n[83]: \n```", "```py\n[85]: \n```", "```py\nHTML(style_structure) \n```", "```py\n[85]: \n```", "```py\n<style type=\"text/css\">\n```", "```py\n</style>\n```", "```py\n[87]: \n```", "```py\nHTML(table_structure) \n```", "```py\n[87]: \n```", "```py\n<table ...>\n```", "```py\n</table>\n```", "```py\n[78]: \n```", "```py\nfrom jinja2 import Environment, ChoiceLoader, FileSystemLoader\nfrom IPython.display import HTML\nfrom pandas.io.formats.style import Styler \n```", "```py\n[79]: \n```", "```py\nwith open(\"templates/myhtml.tpl\") as f:\n    print(f.read()) \n```", "```py\n{% extends \"html_table.tpl\" %}\n{% block table %}\n<h1>{{ table_title|default(\"My Table\") }}</h1>\n{{ super() }}\n{% endblock table %}\n\n```", "```py\n[80]: \n```", "```py\nclass MyStyler(Styler):\n    env = Environment(\n        loader=ChoiceLoader([\n            FileSystemLoader(\"templates\"),  # contains ours\n            Styler.loader,  # the default\n        ])\n    )\n    template_html_table = env.get_template(\"myhtml.tpl\") \n```", "```py\n[81]: \n```", "```py\nMyStyler(df3) \n```", "```py\n[81]: \n```", "```py\n[82]: \n```", "```py\nHTML(MyStyler(df3).to_html(table_title=\"Extending Example\")) \n```", "```py\n[82]: \n```", "```py\n[83]: \n```", "```py\nEasyStyler = Styler.from_custom_template(\"templates\", \"myhtml.tpl\")\nHTML(EasyStyler(df3).to_html(table_title=\"Another Title\")) \n```", "```py\n[83]: \n```", "```py\n[85]: \n```", "```py\nHTML(style_structure) \n```", "```py\n[85]: \n```", "```py\n<style type=\"text/css\">\n```", "```py\n</style>\n```", "```py\n[87]: \n```", "```py\nHTML(table_structure) \n```", "```py\n[87]: \n```", "```py\n<table ...>\n```", "```py\n</table>\n```", "```py\n[85]: \n```", "```py\nHTML(style_structure) \n```", "```py\n[85]: \n```", "```py\n<style type=\"text/css\">\n```", "```py\n</style>\n```", "```py\n[87]: \n```", "```py\nHTML(table_structure) \n```", "```py\n[87]: \n```", "```py\n<table ...>\n```", "```py\n</table>\n```"]