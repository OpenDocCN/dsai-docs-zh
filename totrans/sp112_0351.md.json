["```py\nscipy.ndimage.generic_filter(input, function, size=None, footprint=None, output=None, mode='reflect', cval=0.0, origin=0, extra_arguments=(), extra_keywords=None)\n```", "```py\nint  callback(double  *buffer,  npy_intp  filter_size,\n  double  *return_value,  void  *user_data)\nint  callback(double  *buffer,  intptr_t  filter_size,\n  double  *return_value,  void  *user_data) \n```", "```py\n>>> import numpy as np\n>>> from scipy import datasets\n>>> from scipy.ndimage import generic_filter\n>>> import matplotlib.pyplot as plt\n>>> ascent = datasets.ascent() \n```", "```py\n>>> maximum_filter_result = generic_filter(ascent, np.amax, [10, 10]) \n```", "```py\n>>> def custom_filter(image):\n...     return np.amax(image) - np.amin(image)\n>>> custom_filter_result = generic_filter(ascent, custom_filter, [5, 5]) \n```", "```py\n>>> fig, axes = plt.subplots(3, 1, figsize=(4, 12))\n>>> plt.gray()  # show the filtered result in grayscale\n>>> top, middle, bottom = axes\n>>> for ax in axes:\n...     ax.set_axis_off()  # remove coordinate system\n>>> top.imshow(ascent)\n>>> top.set_title(\"Original image\")\n>>> middle.imshow(maximum_filter_result)\n>>> middle.set_title(\"Maximum filter, Kernel: 10x10\")\n>>> bottom.imshow(custom_filter_result)\n>>> bottom.set_title(\"Custom filter, Kernel: 5x5\")\n>>> fig.tight_layout() \n```"]