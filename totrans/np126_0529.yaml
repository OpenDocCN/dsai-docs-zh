- en: numpy.savetxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.savetxt.html](https://numpy.org/doc/1.26/reference/generated/numpy.savetxt.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save an array to a text file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fname**filename or file handle'
  prefs: []
  type: TYPE_NORMAL
- en: If the filename ends in `.gz`, the file is automatically saved in compressed
    gzip format. [`loadtxt`](numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt") understands
    gzipped files transparently.
  prefs: []
  type: TYPE_NORMAL
- en: '**X**1D or 2D array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Data to be saved to a text file.
  prefs: []
  type: TYPE_NORMAL
- en: '**fmt**str or sequence of strs, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A single format (%10.5f), a sequence of formats, or a multi-format string,
    e.g. ‘Iteration %d – %10.5f’, in which case *delimiter* is ignored. For complex
    *X*, the legal options for *fmt* are:'
  prefs: []
  type: TYPE_NORMAL
- en: a single specifier, *fmt=’%.4e’*, resulting in numbers formatted like *‘ (%s+%sj)’
    % (fmt, fmt)*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a full string specifying every real and imaginary part, e.g. *‘ %.4e %+.4ej
    %.4e %+.4ej %.4e %+.4ej’* for 3 columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list of specifiers, one per column - in this case, the real and imaginary
    part must have separate specifiers, e.g. *[‘%.3e + %.3ej’, ‘(%.15e%+.15ej)’]*
    for 2 columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delimiter**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String or character separating columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**newline**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String or character separating lines.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**header**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String that will be written at the beginning of the file.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**footer**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: String that will be written at the end of the file.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**comments**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'String that will be prepended to the `header` and `footer` strings, to mark
    them as comments. Default: ‘# ‘, as expected by e.g. `numpy.loadtxt`.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.7.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**{None, str}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding used to encode the outputfile. Does not apply to output streams. If
    the encoding is something other than ‘bytes’ or ‘latin1’ you will not be able
    to load the file in NumPy versions < 1.14\. Default is ‘latin1’.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`save`](numpy.save.html#numpy.save "numpy.save")'
  prefs: []
  type: TYPE_NORMAL
- en: Save an array to a binary file in NumPy `.npy` format
  prefs: []
  type: TYPE_NORMAL
- en: '[`savez`](numpy.savez.html#numpy.savez "numpy.savez")'
  prefs: []
  type: TYPE_NORMAL
- en: Save several arrays into an uncompressed `.npz` archive
  prefs: []
  type: TYPE_NORMAL
- en: '[`savez_compressed`](numpy.savez_compressed.html#numpy.savez_compressed "numpy.savez_compressed")'
  prefs: []
  type: TYPE_NORMAL
- en: Save several arrays into a compressed `.npz` archive
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Further explanation of the *fmt* parameter (`%[flag]width[.precision]specifier`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-` : left justify'
  prefs: []
  type: TYPE_NORMAL
- en: '`+` : Forces to precede result with + or -.'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` : Left pad the number with zeros instead of space (see width).'
  prefs: []
  type: TYPE_NORMAL
- en: 'width:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum number of characters to be printed. The value is not truncated if it
    has more characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'precision:'
  prefs: []
  type: TYPE_NORMAL
- en: For integer specifiers (eg. `d,i,o,x`), the minimum number of digits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `e, E` and `f` specifiers, the number of digits to print after the decimal
    point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `g` and `G`, the maximum number of significant digits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `s`, the maximum number of characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'specifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c` : character'
  prefs: []
  type: TYPE_NORMAL
- en: '`d` or `i` : signed decimal integer'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` or `E` : scientific notation with `e` or `E`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`f` : decimal floating point'
  prefs: []
  type: TYPE_NORMAL
- en: '`g,G` : use the shorter of `e,E` or `f`'
  prefs: []
  type: TYPE_NORMAL
- en: '`o` : signed octal'
  prefs: []
  type: TYPE_NORMAL
- en: '`s` : string of characters'
  prefs: []
  type: TYPE_NORMAL
- en: '`u` : unsigned decimal integer'
  prefs: []
  type: TYPE_NORMAL
- en: '`x,X` : unsigned hexadecimal integer'
  prefs: []
  type: TYPE_NORMAL
- en: This explanation of `fmt` is not complete, for an exhaustive specification see
    [[1]](#r672d4d5b6143-1).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Format Specification Mini-Language](https://docs.python.org/library/string.html#format-specification-mini-language),
    Python Documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
