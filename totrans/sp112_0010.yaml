- en: Sparse Arrays (scipy.sparse)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稀疏数组（scipy.sparse）
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/sparse.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/sparse.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/sparse.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/sparse.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 简介'
- en: '`scipy.sparse` and its submodules provide tools for working with *sparse arrays*.
    Sparse arrays are arrays where only a few locations in the array have any data,
    most of the locations are considered as “empty”. Sparse arrays are useful because
    they allow for simpler, faster, and/or less memory-intensive algorithms for linear
    algebra ([`scipy.sparse.linalg`](../reference/sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg")) or graph-based computations ([`scipy.sparse.csgraph`](../reference/sparse.csgraph.html#module-scipy.sparse.csgraph
    "scipy.sparse.csgraph")), but they are generally less flexible for operations
    like slicing, reshaping, or assignment. This guide will introduce the basics of
    sparse arrays in [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse"), explain the unique aspects of sparse data structures, and refer
    onward for other sections of the user guide explaining [sparse linear algebra](https://docs.scipy.org/doc/scipy/tutorial/arpack.html)
    and [graph methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.sparse` 及其子模块提供了用于处理*稀疏数组*的工具。稀疏数组是只有数组中少数位置包含任何数据的数组，大多数位置被视为“空”。稀疏数组很有用，因为它们允许用于线性代数（[`scipy.sparse.linalg`](../reference/sparse.linalg.html#module-scipy.sparse.linalg
    "scipy.sparse.linalg")）或基于图的计算（[`scipy.sparse.csgraph`](../reference/sparse.csgraph.html#module-scipy.sparse.csgraph
    "scipy.sparse.csgraph")）的算法更简单、更快速或内存消耗较少，但是它们通常在像切片、重塑或赋值等操作上不太灵活。本指南将介绍[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse")中稀疏数组的基础知识，解释稀疏数据结构的独特之处，并引导用户查看用户指南中解释[稀疏线性代数](https://docs.scipy.org/doc/scipy/tutorial/arpack.html)和[图方法](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html)的其他部分。'
- en: Getting started with sparse arrays
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门稀疏数组
- en: 'Sparse arrays are a special kind of array where only a few locations in the
    array have data. This allows for *compressed* representations of the data to be
    used, where only the locations where data exists are recorded. There are many
    different sparse array formats, each of which makes a different tradeoff between
    compression and functionality. To start, let’s build a very simple sparse array,
    the Coordinate (COO) array ([`coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")) and compare it to a dense array:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏数组是一种特殊类型的数组，其中数组中只有少数位置包含数据。这允许使用*压缩*表示数据，仅记录存在数据的位置。有许多不同的稀疏数组格式，每种格式在压缩和功能之间进行不同的权衡。首先，让我们构建一个非常简单的稀疏数组，即坐标（COO）数组
    ([`coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")) 并将其与密集数组进行比较：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that in our dense array, we have five nonzero values. For example, `2`
    is at location `0,3`, and `4` is at location `1,1`. All of the other values are
    zero. The sparse array records these five values *explicitly* (see the `5 stored
    elements in COOrdinate format`), and then represents all of the remaining zeros
    as *implicit* values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在我们的密集数组中，有五个非零值。例如，`2` 在位置 `0,3`，`4` 在位置 `1,1`。所有其他值都为零。稀疏数组*显式*记录这五个值（参见
    `COOrdinate format 中的 5 个存储元素`），然后将所有其余的零表示为*隐式*值。
- en: 'Most sparse array methods work in a similar fashion to dense array methods:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数稀疏数组方法的工作方式与密集数组方法类似：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A few “extra” properties, such as `.nnz` which returns the number of stored
    values, are present on sparse arrays as well:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏数组还具有一些“额外”的属性，例如 `.nnz`，它返回存储值的数量：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Most of the reduction operations, such as `.mean()`, `.sum()`, or `.max()`
    will return a numpy array when applied over an axis of the sparse array:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数减少操作，例如 `.mean()`、`.sum()` 或 `.max()`，在应用到稀疏数组的轴上时将返回一个 numpy 数组：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is because reductions over sparse arrays are often dense.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为稀疏数组上的减少操作通常是密集的。
- en: Understanding sparse array formats
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解稀疏数组格式
- en: 'Different kinds of sparse arrays have different capabilities. For example,
    COO arrays cannot be subscripted or sliced:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的稀疏数组具有不同的功能。例如，COO 数组不能被索引或切片：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But, other formats, such as the Compressed Sparse Row (CSR) [`csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array") support slicing and element indexing:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，其他格式，例如压缩稀疏行（CSR）[`csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array") 支持切片和元素索引：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Sometimes, [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")
    will return a different sparse matrix format than the input sparse matrix format.
    For example, the dot product of two sparse arrays in COO format will be a CSR
    format array:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")会返回与输入稀疏矩阵格式不同的稀疏矩阵格式。例如，COO格式的两个稀疏数组的点积将是CSR格式数组：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This change occurs because [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse") will change the format of input sparse arrays in order to use
    the most efficient computational method.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种改变是因为[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")会改变输入稀疏数组的格式，以使用最有效的计算方法。
- en: 'The [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")
    module contains the following formats, each with their own distinct advantages
    and disadvantages:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")模块包含以下格式，每种格式都有自己独特的优势和劣势：'
- en: Block Sparse Row (BSR) arrays [`scipy.sparse.bsr_array`](../reference/generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array"), which are most appropriate when the parts of the array
    with data occur in contiguous blocks.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块状稀疏行（BSR）数组[`scipy.sparse.bsr_array`](../reference/generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array")，在数组的数据部分以连续的块出现时最合适。
- en: Coordinate (COO) arrays [`scipy.sparse.coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array"), which provide a simple way to construct sparse arrays
    and modify them in place. COO can also be quickly converted into other formats,
    such CSR, CSC, or BSR.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 坐标（COO）数组[`scipy.sparse.coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")提供了一种简单的构建稀疏数组和原地修改它们的方法。COO也可以快速转换为其他格式，如CSR、CSC或BSR。
- en: Compressed Sparse Row (CSR) arrays [`scipy.sparse.csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array"), which are most useful for fast arithmetic, vector products,
    and slicing by row.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩稀疏行（CSR）数组[`scipy.sparse.csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array")，最适用于快速算术运算、向量乘积和按行切片。
- en: Compressed Sparse Column (CSC) arrays [`scipy.sparse.csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array"), which are most useful for fast arithmetic, vector products,
    and slicing by column.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩稀疏列（CSC）数组[`scipy.sparse.csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array")最适用于快速算术运算、向量乘积和按列切片。
- en: Diagonal (DIA) arrays [`scipy.sparse.dia_array`](../reference/generated/scipy.sparse.dia_array.html#scipy.sparse.dia_array
    "scipy.sparse.dia_array"), which are useful for efficient storage and fast arithmetic
    so long as the data primarily occurs along diagonals of the array.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对角线（DIA）数组[`scipy.sparse.dia_array`](../reference/generated/scipy.sparse.dia_array.html#scipy.sparse.dia_array
    "scipy.sparse.dia_array")，对于有效存储和快速算术运算很有用，只要数据主要沿着数组的对角线出现。
- en: Dictionary of Keys (DOK) arrays [`scipy.sparse.dok_array`](../reference/generated/scipy.sparse.dok_array.html#scipy.sparse.dok_array
    "scipy.sparse.dok_array"), which are useful for fast construction and single-element
    access.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键值字典（DOK）数组[`scipy.sparse.dok_array`](../reference/generated/scipy.sparse.dok_array.html#scipy.sparse.dok_array
    "scipy.sparse.dok_array")，对于快速构建和单元素访问很有用。
- en: List of Lists (LIL) arrays [`scipy.sparse.lil_array`](../reference/generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array"), which are useful for fast construction and modification
    of sparse arrays.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表列表（LIL）数组[`scipy.sparse.lil_array`](../reference/generated/scipy.sparse.lil_array.html#scipy.sparse.lil_array
    "scipy.sparse.lil_array")，对于快速构建和修改稀疏数组很有用。
- en: More information on the strengths and weaknesses of each of the sparse array
    formats can be found in [their documentation](https://docs.scipy.org/doc/scipy/reference/sparse.html#sparse-array-classes).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每种稀疏数组格式的优势和劣势的更多信息可以在[它们的文档](https://docs.scipy.org/doc/scipy/reference/sparse.html#sparse-array-classes)中找到。
- en: 'All formats of [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse") arrays can be constructed directly from a [`numpy.ndarray`](https://numpy.org/devdocs/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0.dev0)"). However, some sparse formats can be constructed in different
    ways, too. Each sparse array format has different strengths, and these strengths
    are documented in each class. For example, one of the most common methods for
    constructing sparse arrays is to build a sparse array from the individual `row`,
    `column`, and `data` values. For our array from before:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse "scipy.sparse")数组格式都可以直接从[`numpy.ndarray`](https://numpy.org/devdocs/reference/generated/numpy.ndarray.html#numpy.ndarray
    "(in NumPy v2.0.dev0)")构建。然而，某些稀疏格式也可以以不同的方式构建。每个稀疏数组格式都有不同的优势，并且这些优势在每个类中都有文档记录。例如，构建稀疏数组最常见的方法之一是从单独的`row`、`column`和`data`值构建稀疏数组。对于我们之前的数组：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `row`, `column`, and `data` arrays describe the rows, columns, and values
    where our sparse array has entries:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`row`、`column`和`data`数组描述了稀疏数组中条目的行、列和值：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using these, we can now define a sparse array without building a dense array
    first:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些，我们现在可以定义一个稀疏数组而不需要首先构建一个密集数组：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Different classes have different constructors, but the [`scipy.sparse.csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array"), [`scipy.sparse.csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array"), and [`scipy.sparse.coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array") allow for this style of construction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的类有不同的构造函数，但是[`scipy.sparse.csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array")、[`scipy.sparse.csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array")和[`scipy.sparse.coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")允许使用这种构造方式。
- en: Sparse arrays, implicit zeros, and duplicates
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏数组，隐式零和重复
- en: Sparse arrays are useful because they represent much of their values *implicitly*,
    without storing an actual placeholder value. In [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse"), the value used to represent “no data” is an *implicit zero*.
    This can be confusing when *explicit zeros* are required. For example, in [graph
    methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html) from [`scipy.sparse.csgraph`](../reference/sparse.csgraph.html#module-scipy.sparse.csgraph
    "scipy.sparse.csgraph"), we often need to be able to distinguish between (A) a
    link connecting nodes `i` and `j` with zero weight and (B) no link between `i`
    and `j`. Sparse matrices can do this, so long as we keep the *explicit* and *implicit*
    zeros in mind.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏数组很有用，因为它们表示大部分值是*隐式*的，而不是存储一个实际的占位值。在[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse")中，用于表示“无数据”的值是*隐式零*。当需要*显式零*时，这可能会令人困惑。例如，在[图方法](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html)中，我们经常需要能够区分（A）连接节点
    `i` 和 `j` 的权重为零的链接和（B）`i` 和 `j` 之间没有链接。稀疏矩阵可以做到这一点，只要我们记住*显式*和*隐式*零即可。
- en: 'For example, in our previous `csr` array, we could include an explicit zero
    by including it in the `data` list. Let’s treat the final entry in the array at
    the bottom row and last column as an *explicit zero*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我们之前的`csr`数组中，我们可以通过将它包含在`data`列表中来包含一个显式零。让我们把底行和最后一列数组中的最后一个条目视为*显式零*：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, our sparse array will have *six* stored elements, not five:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们的稀疏数组将有*六*个存储元素，而不是五个：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The “extra” element is our *explicit zero*. The two are still identical when
    converted back into a dense array, because dense arrays represent *everything*
    explicitly:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “额外”的元素就是我们的*显式零*。当转换回密集数组时，两者仍然是相同的，因为密集数组将*所有东西*都显式地表示：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'But, for sparse arithmetic, linear algebra, and graph methods, the value at
    `2,3` will be considered an *explicit zero*. To remove this explicit zero, we
    can use the `csr.eliminate_zeros()` method. This operates on the sparse array
    *in place*, and removes any zero-value stored elements:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于稀疏算术、线性代数和图方法，位置`2,3`处的值将被视为*显式零*。要去除此显式零，我们可以使用`csr.eliminate_zeros()`方法。这个方法在稀疏数组中*原地*操作，并移除任何零值存储元素：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Before `csr.eliminate_zeros()`, there were six stored elements. After, there
    are only five stored elements.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`csr.eliminate_zeros()`之前，有六个存储元素。之后，只有五个存储元素。
- en: 'Another point of complication arises from how *duplicates* are processed when
    constructing a sparse array. A *duplicate* can occur when we have two or more
    entries at `row,col` when constructing a sparse array. This often occurs when
    building sparse arrays using the `data`, `row`, and `col` vectors. For example,
    we might represent our previous array with a duplicate value at `1,1`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个复杂性点源于在构建稀疏数组时处理 *重复项* 的方式。当我们在构建稀疏数组时在 `row,col` 处有两个或更多条目时，就会发生 *重复项*。例如，我们可能用重复值在
    `1,1` 处表示先前的数组：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this case, we can see that there are *two* `data` values that correspond
    to the `1,1` location in our final array. [`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse") will store these values separately:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以看到有 *两个* `data` 值对应于我们最终数组中的 `1,1` 位置。[`scipy.sparse`](../reference/sparse.html#module-scipy.sparse
    "scipy.sparse") 将单独存储这些值：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Note that there are six stored elements in this sparse array, despite only
    having five unique locations where data occurs. When these arrays are converted
    back to dense arrays, the duplicate values are summed. So, at location `1,1`,
    the dense array will contain the sum of duplicate stored entries, `1 + 3`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个稀疏数组中有六个存储的元素，尽管只有五个唯一的数据位置。当这些数组转换回密集数组时，重复值将被求和。因此，在位置 `1,1` 处，密集数组将包含重复存储条目的总和，即
    `1 + 3`：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To remove duplicate values within the sparse array itself and thus reduce the
    number of stored elements, we can use the `.sum_duplicates()` method:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除稀疏数组本身中的重复值，从而减少存储元素的数量，可以使用 `.sum_duplicates()` 方法：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now there are only five stored elements in our sparse array, and it is identical
    to the array we have been working with throughout this guide:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的稀疏数组中只有五个存储的元素，且与本指南中一直使用的数组相同：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Canonical formats
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规范格式
- en: 'Several sparse array formats have “canonical formats” to allow for more efficient
    operations. Generally these consist of added restrictions like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 几种稀疏数组格式具有“规范格式”，以实现更高效的操作。通常这些格式包括像增加限制这样的额外条件：
- en: No duplicate entries for any value
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何值都没有重复条目
- en: Sorted indices
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已排序的索引
- en: 'Classes with a canonical form include: [`coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array"), [`csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array"), [`csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array"), and [`bsr_array`](../reference/generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array"). See the docstrings of these classes for details on
    each canonical representation.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 具有规范形式的类包括：[`coo_array`](../reference/generated/scipy.sparse.coo_array.html#scipy.sparse.coo_array
    "scipy.sparse.coo_array")，[`csr_array`](../reference/generated/scipy.sparse.csr_array.html#scipy.sparse.csr_array
    "scipy.sparse.csr_array")，[`csc_array`](../reference/generated/scipy.sparse.csc_array.html#scipy.sparse.csc_array
    "scipy.sparse.csc_array") 和 [`bsr_array`](../reference/generated/scipy.sparse.bsr_array.html#scipy.sparse.bsr_array
    "scipy.sparse.bsr_array")。详细信息请参阅这些类的文档字符串，了解每种规范表示的细节。
- en: 'To check if an instance of these classes is in canonical form, use the `.has_canonical_format`
    attribute:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查这些类的实例是否处于规范形式，请使用 `.has_canonical_format` 属性：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To convert an instance to canonical form, use the `.sum_duplicates()` method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要将实例转换为规范形式，请使用 `.sum_duplicates()` 方法：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next steps with sparse arrays
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏数组的下一步操作
- en: Sparse array types are most helpful when working with large, nearly empty arrays.
    Specifically, [sparse linear algebra](https://docs.scipy.org/doc/scipy/tutorial/arpack.html)
    and [sparse graph methods](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html)
    see the largest improvements in efficiency in these circumstances.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大型、几乎为空的数组时，稀疏数组类型最为有用。特别是在这些情况下，[稀疏线性代数](https://docs.scipy.org/doc/scipy/tutorial/arpack.html)和[稀疏图方法](https://docs.scipy.org/doc/scipy/tutorial/csgraph.html)的效率显著提高。
