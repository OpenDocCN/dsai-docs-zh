["```py\nscipy.special.stdtrit(df, p, out=None) = <ufunc 'stdtrit'>\n```", "```py\n>>> import numpy as np\n>>> from scipy.special import stdtr, stdtrit\n>>> import matplotlib.pyplot as plt\n>>> df = 3\n>>> x = 1\n>>> cdf_value = stdtr(df, x)\n>>> stdtrit(df, cdf_value)\n0.9999999994418539 \n```", "```py\n>>> x = np.linspace(0, 1, 1000)\n>>> parameters = [(1, \"solid\"), (2, \"dashed\"), (5, \"dotted\")]\n>>> fig, ax = plt.subplots()\n>>> for (df, linestyle) in parameters:\n...     ax.plot(x, stdtrit(df, x), ls=linestyle, label=f\"$df={df}$\")\n>>> ax.legend()\n>>> ax.set_ylim(-10, 10)\n>>> ax.set_title(\"Student t distribution quantile function\")\n>>> plt.show() \n```", "```py\n>>> stdtrit([1, 2, 3], 0.7)\narray([0.72654253, 0.6172134 , 0.58438973]) \n```", "```py\n>>> dfs = np.array([[1], [2], [3]])\n>>> p = np.array([0.2, 0.4, 0.7, 0.8])\n>>> dfs.shape, p.shape\n((3, 1), (4,)) \n```", "```py\n>>> stdtrit(dfs, p)\narray([[-1.37638192, -0.3249197 ,  0.72654253,  1.37638192],\n [-1.06066017, -0.28867513,  0.6172134 ,  1.06066017],\n [-0.97847231, -0.27667066,  0.58438973,  0.97847231]]) \n```", "```py\n>>> from scipy.stats import t\n>>> df, x = 3, 0.5\n>>> stdtrit_result = stdtrit(df, x)  # this can be faster than below\n>>> stats_result = t(df).ppf(x)\n>>> stats_result == stdtrit_result  # test that results are equal\nTrue \n```"]