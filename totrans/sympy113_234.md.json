["```py\nclass sympy.physics.control.lti.TransferFunction(num, den, var)\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction(s + a, s**2 + s + 1, s)\n>>> tf1\nTransferFunction(a + s, s**2 + s + 1, s)\n>>> tf1.num\na + s\n>>> tf1.den\ns**2 + s + 1\n>>> tf1.var\ns\n>>> tf1.args\n(a + s, s**2 + s + 1, s) \n```", "```py\n>>> tf2 = TransferFunction(a*p**3 - a*p**2 + s*p, p + a**2, p)\n>>> tf2\nTransferFunction(a*p**3 - a*p**2 + p*s, a**2 + p, p)\n>>> tf3 = TransferFunction((p + 3)*(p - 1), (p - 1)*(p + 5), p)\n>>> tf3\nTransferFunction((p - 1)*(p + 3), (p - 1)*(p + 5), p) \n```", "```py\n>>> tf4 = TransferFunction(-a + s, p**2 + s, p)\n>>> -tf4\nTransferFunction(a - s, p**2 + s, p)\n>>> tf5 = TransferFunction(s**4 - 2*s**3 + 5*s + 4, s + 4, s)\n>>> -tf5\nTransferFunction(-s**4 + 2*s**3 - 5*s - 4, s + 4, s) \n```", "```py\n>>> tf6 = TransferFunction(1/2, 4, s)\n>>> tf6.num\n0.500000000000000\n>>> tf6.den\n4\n>>> tf6.var\ns\n>>> tf6.args\n(0.5, 4, s) \n```", "```py\n>>> tf7 = TransferFunction(s + a, s - a, s)\n>>> tf7**3\nTransferFunction((a + s)**3, (-a + s)**3, s)\n>>> tf7**0\nTransferFunction(1, 1, s)\n>>> tf8 = TransferFunction(p + 4, p - 3, p)\n>>> tf8**-1\nTransferFunction(p - 3, p + 4, p) \n```", "```py\n>>> tf9 = TransferFunction(s + 1, s**2 + s + 1, s)\n>>> tf10 = TransferFunction(s - p, s + 3, s)\n>>> tf11 = TransferFunction(4*s**2 + 2*s - 4, s - 1, s)\n>>> tf12 = TransferFunction(1 - s, s**2 + 4, s)\n>>> tf9 + tf10\nParallel(TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(-p + s, s + 3, s))\n>>> tf10 - tf11\nParallel(TransferFunction(-p + s, s + 3, s), TransferFunction(-4*s**2 - 2*s + 4, s - 1, s))\n>>> tf9 * tf10\nSeries(TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(-p + s, s + 3, s))\n>>> tf10 - (tf9 + tf12)\nParallel(TransferFunction(-p + s, s + 3, s), TransferFunction(-s - 1, s**2 + s + 1, s), TransferFunction(s - 1, s**2 + 4, s))\n>>> tf10 - (tf9 * tf12)\nParallel(TransferFunction(-p + s, s + 3, s), Series(TransferFunction(-1, 1, s), TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(1 - s, s**2 + 4, s)))\n>>> tf11 * tf10 * tf9\nSeries(TransferFunction(4*s**2 + 2*s - 4, s - 1, s), TransferFunction(-p + s, s + 3, s), TransferFunction(s + 1, s**2 + s + 1, s))\n>>> tf9 * tf11 + tf10 * tf12\nParallel(Series(TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(4*s**2 + 2*s - 4, s - 1, s)), Series(TransferFunction(-p + s, s + 3, s), TransferFunction(1 - s, s**2 + 4, s)))\n>>> (tf9 + tf12) * (tf10 + tf11)\nSeries(Parallel(TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(1 - s, s**2 + 4, s)), Parallel(TransferFunction(-p + s, s + 3, s), TransferFunction(4*s**2 + 2*s - 4, s - 1, s))) \n```", "```py\n>>> ((tf9 + tf10) * tf12).doit()\nTransferFunction((1 - s)*((-p + s)*(s**2 + s + 1) + (s + 1)*(s + 3)), (s + 3)*(s**2 + 4)*(s**2 + s + 1), s)\n>>> (tf9 * tf10 - tf11 * tf12).rewrite(TransferFunction)\nTransferFunction(-(1 - s)*(s + 3)*(s**2 + s + 1)*(4*s**2 + 2*s - 4) + (-p + s)*(s - 1)*(s + 1)*(s**2 + 4), (s - 1)*(s + 3)*(s**2 + 4)*(s**2 + s + 1), s) \n```", "```py\ndc_gain()\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction(s + 3, s**2 - 9, s)\n>>> tf1.dc_gain()\n-1/3\n>>> tf2 = TransferFunction(p**2, p - 3 + p**3, p)\n>>> tf2.dc_gain()\n0\n>>> tf3 = TransferFunction(a*p**2 - b, s + b, s)\n>>> tf3.dc_gain()\n(a*p**2 - b)/b\n>>> tf4 = TransferFunction(1, s, s)\n>>> tf4.dc_gain()\noo \n```", "```py\nproperty den\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction\n>>> G1 = TransferFunction(s + 4, p**3 - 2*p + 4, s)\n>>> G1.den\np**3 - 2*p + 4\n>>> G2 = TransferFunction(3, 4, s)\n>>> G2.den\n4 \n```", "```py\neval_frequency(other)\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy import I\n>>> tf1 = TransferFunction(1, s**2 + 2*s + 1, s)\n>>> omega = 0.1\n>>> tf1.eval_frequency(I*omega)\n1/(0.99 + 0.2*I)\n>>> tf2 = TransferFunction(s**2, a*s + p, s)\n>>> tf2.eval_frequency(2)\n4/(2*a + p)\n>>> tf2.eval_frequency(I*2)\n-4/(2*I*a + p) \n```", "```py\nexpand()\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> G1 = TransferFunction((a - s)**2, (s**2 + a)**2, s)\n>>> G1.expand()\nTransferFunction(a**2 - 2*a*s + s**2, a**2 + 2*a*s**2 + s**4, s)\n>>> G2 = TransferFunction((p + 3*b)*(p - b), (p - b)*(p + 2*b), p)\n>>> G2.expand()\nTransferFunction(-3*b**2 + 2*b*p + p**2, -2*b**2 + b*p + p**2, p) \n```", "```py\nclassmethod from_coeff_lists(num_list, den_list, var)\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction\n>>> num = [1, 0, 2]\n>>> den = [3, 2, 2, 1]\n>>> tf = TransferFunction.from_coeff_lists(num, den, s)\n>>> tf\nTransferFunction(s**2 + 2, 3*s**3 + 2*s**2 + 2*s + 1, s) \n```", "```py\nclassmethod from_rational_expression(expr, var=None)\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy.physics.control.lti import TransferFunction\n>>> expr1 = (s + 5)/(3*s**2 + 2*s + 1)\n>>> tf1 = TransferFunction.from_rational_expression(expr1)\n>>> tf1\nTransferFunction(s + 5, 3*s**2 + 2*s + 1, s)\n>>> expr2 = (a*p**3 - a*p**2 + s*p)/(p + a**2)  # Expr with more than one variables\n>>> tf2 = TransferFunction.from_rational_expression(expr2, p)\n>>> tf2\nTransferFunction(a*p**3 - a*p**2 + p*s, a**2 + p, p) \n```", "```py\n>>> tf = TransferFunction.from_rational_expression((a + a*s)/(s**2 + s + 1))\nTraceback (most recent call last):\n...\nValueError: Conflicting values found for positional argument `var` ({a, s}). Specify it manually. \n```", "```py\n>>> tf = TransferFunction.from_rational_expression((a + a*s)/(s**2 + s + 1), s)\n>>> tf\nTransferFunction(a*s + a, s**2 + s + 1, s) \n```", "```py\n>>> tf3 = TransferFunction.from_rational_expression(10, s)\n>>> tf3\nTransferFunction(10, 1, s) \n```", "```py\nclassmethod from_zpk(zeros, poles, gain, var)\n```", "```py\n>>> from sympy.abc import s, p, k\n>>> from sympy.physics.control.lti import TransferFunction\n>>> zeros = [1, 2, 3]\n>>> poles = [6, 5, 4]\n>>> gain = 7\n>>> tf = TransferFunction.from_zpk(zeros, poles, gain, s)\n>>> tf\nTransferFunction(7*(s - 3)*(s - 2)*(s - 1), (s - 6)*(s - 5)*(s - 4), s) \n```", "```py\nproperty is_biproper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf1.is_biproper\nTrue\n>>> tf2 = TransferFunction(p**2, p + a, p)\n>>> tf2.is_biproper\nFalse \n```", "```py\nproperty is_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction(b*s**2 + p**2 - a*p + s, b - p**2, s)\n>>> tf1.is_proper\nFalse\n>>> tf2 = TransferFunction(p**2 - 4*p, p**3 + 3*p + 2, p)\n>>> tf2.is_proper\nTrue \n```", "```py\nis_stable()\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy import symbols\n>>> from sympy.physics.control.lti import TransferFunction\n>>> q, r = symbols('q, r', negative=True)\n>>> tf1 = TransferFunction((1 - s)**2, (s + 1)**2, s)\n>>> tf1.is_stable()\nTrue\n>>> tf2 = TransferFunction((1 - p)**2, (s**2 + 1)**2, s)\n>>> tf2.is_stable()\nFalse\n>>> tf3 = TransferFunction(4, q*s - r, s)\n>>> tf3.is_stable()\nFalse\n>>> tf4 = TransferFunction(p + 1, a*p - s**2, p)\n>>> tf4.is_stable() is None   # Not enough info about the symbols to determine stability\nTrue \n```", "```py\nproperty is_strictly_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf1.is_strictly_proper\nFalse\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tf2.is_strictly_proper\nTrue \n```", "```py\nproperty num\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction\n>>> G1 = TransferFunction(s**2 + p*s + 3, s - 4, s)\n>>> G1.num\np*s + s**2 + 3\n>>> G2 = TransferFunction((p + 5)*(p - 3), (p - 3)*(p + 1), p)\n>>> G2.num\n(p - 3)*(p + 5) \n```", "```py\npoles()\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction((p + 3)*(p - 1), (p - 1)*(p + 5), p)\n>>> tf1.poles()\n[-5, 1]\n>>> tf2 = TransferFunction((1 - s)**2, (s**2 + 1)**2, s)\n>>> tf2.poles()\n[I, I, -I, -I]\n>>> tf3 = TransferFunction(s**2, a*s + p, s)\n>>> tf3.poles()\n[-p/a] \n```", "```py\nto_expr()\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction\n>>> from sympy import Expr\n>>> tf1 = TransferFunction(s, a*s**2 + 1, s)\n>>> tf1.to_expr()\ns/(a*s**2 + 1)\n>>> isinstance(_, Expr)\nTrue\n>>> tf2 = TransferFunction(1, (p + 3*b)*(b - p), p)\n>>> tf2.to_expr()\n1/((b - p)*(3*b + p))\n>>> tf3 = TransferFunction((s - 2)*(s - 3), (s - 1)*(s - 2)*(s - 3), s)\n>>> tf3.to_expr()\n((s - 3)*(s - 2))/(((s - 3)*(s - 2)*(s - 1))) \n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G1.var\np\n>>> G2 = TransferFunction(0, s - 5, s)\n>>> G2.var\ns \n```", "```py\nzeros()\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy.physics.control.lti import TransferFunction\n>>> tf1 = TransferFunction((p + 3)*(p - 1), (p - 1)*(p + 5), p)\n>>> tf1.zeros()\n[-3, 1]\n>>> tf2 = TransferFunction((1 - s)**2, (s**2 + 1)**2, s)\n>>> tf2.zeros()\n[1, 1]\n>>> tf3 = TransferFunction(s**2, a*s + p, s)\n>>> tf3.zeros()\n[0, 0] \n```", "```py\nclass sympy.physics.control.lti.Series(*args, evaluate=False)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Series, Parallel\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tf3 = TransferFunction(p**2, p + s, s)\n>>> S1 = Series(tf1, tf2)\n>>> S1\nSeries(TransferFunction(a*p**2 + b*s, -p + s, s), TransferFunction(s**3 - 2, s**4 + 5*s + 6, s))\n>>> S1.var\ns\n>>> S2 = Series(tf2, Parallel(tf3, -tf1))\n>>> S2\nSeries(TransferFunction(s**3 - 2, s**4 + 5*s + 6, s), Parallel(TransferFunction(p**2, p + s, s), TransferFunction(-a*p**2 - b*s, -p + s, s)))\n>>> S2.var\ns\n>>> S3 = Series(Parallel(tf1, tf2), Parallel(tf2, tf3))\n>>> S3\nSeries(Parallel(TransferFunction(a*p**2 + b*s, -p + s, s), TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)), Parallel(TransferFunction(s**3 - 2, s**4 + 5*s + 6, s), TransferFunction(p**2, p + s, s)))\n>>> S3.var\ns \n```", "```py\n>>> S3 = Series(tf1, tf2, -tf3)\n>>> S3.doit()\nTransferFunction(-p**2*(s**3 - 2)*(a*p**2 + b*s), (-p + s)*(p + s)*(s**4 + 5*s + 6), s)\n>>> S4 = Series(tf2, Parallel(tf1, -tf3))\n>>> S4.doit()\nTransferFunction((s**3 - 2)*(-p**2*(-p + s) + (p + s)*(a*p**2 + b*s)), (-p + s)*(p + s)*(s**4 + 5*s + 6), s) \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Series\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> Series(tf2, tf1).doit()\nTransferFunction((s**3 - 2)*(a*p**2 + b*s), (-p + s)*(s**4 + 5*s + 6), s)\n>>> Series(-tf1, -tf2).doit()\nTransferFunction((2 - s**3)*(-a*p**2 - b*s), (-p + s)*(s**4 + 5*s + 6), s) \n```", "```py\nproperty is_biproper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Series\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(p, s**2, s)\n>>> tf3 = TransferFunction(s**2, 1, s)\n>>> S1 = Series(tf1, -tf2)\n>>> S1.is_biproper\nFalse\n>>> S2 = Series(tf2, tf3)\n>>> S2.is_biproper\nTrue \n```", "```py\nproperty is_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Series\n>>> tf1 = TransferFunction(b*s**2 + p**2 - a*p + s, b - p**2, s)\n>>> tf2 = TransferFunction(p**2 - 4*p, p**3 + 3*s + 2, s)\n>>> tf3 = TransferFunction(s, s**2 + s + 1, s)\n>>> S1 = Series(-tf2, tf1)\n>>> S1.is_proper\nFalse\n>>> S2 = Series(tf1, tf2, tf3)\n>>> S2.is_proper\nTrue \n```", "```py\nproperty is_strictly_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Series\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**2 + 5*s + 6, s)\n>>> tf3 = TransferFunction(1, s**2 + s + 1, s)\n>>> S1 = Series(tf1, tf2)\n>>> S1.is_strictly_proper\nFalse\n>>> S2 = Series(tf1, tf2, tf3)\n>>> S2.is_strictly_proper\nTrue \n```", "```py\nto_expr()\n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, Series, Parallel\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G2 = TransferFunction(p, 4 - p, p)\n>>> G3 = TransferFunction(0, p**4 - 1, p)\n>>> Series(G1, G2).var\np\n>>> Series(-G3, Parallel(G1, G2)).var\np \n```", "```py\nclass sympy.physics.control.lti.Parallel(*args, evaluate=False)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Parallel, Series\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tf3 = TransferFunction(p**2, p + s, s)\n>>> P1 = Parallel(tf1, tf2)\n>>> P1\nParallel(TransferFunction(a*p**2 + b*s, -p + s, s), TransferFunction(s**3 - 2, s**4 + 5*s + 6, s))\n>>> P1.var\ns\n>>> P2 = Parallel(tf2, Series(tf3, -tf1))\n>>> P2\nParallel(TransferFunction(s**3 - 2, s**4 + 5*s + 6, s), Series(TransferFunction(p**2, p + s, s), TransferFunction(-a*p**2 - b*s, -p + s, s)))\n>>> P2.var\ns\n>>> P3 = Parallel(Series(tf1, tf2), Series(tf2, tf3))\n>>> P3\nParallel(Series(TransferFunction(a*p**2 + b*s, -p + s, s), TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)), Series(TransferFunction(s**3 - 2, s**4 + 5*s + 6, s), TransferFunction(p**2, p + s, s)))\n>>> P3.var\ns \n```", "```py\n>>> Parallel(tf1, tf2, -tf3).doit()\nTransferFunction(-p**2*(-p + s)*(s**4 + 5*s + 6) + (-p + s)*(p + s)*(s**3 - 2) + (p + s)*(a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(p + s)*(s**4 + 5*s + 6), s)\n>>> Parallel(tf2, Series(tf1, -tf3)).doit()\nTransferFunction(-p**2*(a*p**2 + b*s)*(s**4 + 5*s + 6) + (-p + s)*(p + s)*(s**3 - 2), (-p + s)*(p + s)*(s**4 + 5*s + 6), s) \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Parallel\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> Parallel(tf2, tf1).doit()\nTransferFunction((-p + s)*(s**3 - 2) + (a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s)\n>>> Parallel(-tf1, -tf2).doit()\nTransferFunction((2 - s**3)*(-p + s) + (-a*p**2 - b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s) \n```", "```py\nproperty is_biproper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Parallel\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(p**2, p + s, s)\n>>> tf3 = TransferFunction(s, s**2 + s + 1, s)\n>>> P1 = Parallel(tf1, -tf2)\n>>> P1.is_biproper\nTrue\n>>> P2 = Parallel(tf2, tf3)\n>>> P2.is_biproper\nFalse \n```", "```py\nproperty is_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Parallel\n>>> tf1 = TransferFunction(b*s**2 + p**2 - a*p + s, b - p**2, s)\n>>> tf2 = TransferFunction(p**2 - 4*p, p**3 + 3*s + 2, s)\n>>> tf3 = TransferFunction(s, s**2 + s + 1, s)\n>>> P1 = Parallel(-tf2, tf1)\n>>> P1.is_proper\nFalse\n>>> P2 = Parallel(tf2, tf3)\n>>> P2.is_proper\nTrue \n```", "```py\nproperty is_strictly_proper\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Parallel\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tf3 = TransferFunction(s, s**2 + s + 1, s)\n>>> P1 = Parallel(tf1, tf2)\n>>> P1.is_strictly_proper\nFalse\n>>> P2 = Parallel(tf2, tf3)\n>>> P2.is_strictly_proper\nTrue \n```", "```py\nto_expr()\n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, Parallel, Series\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G2 = TransferFunction(p, 4 - p, p)\n>>> G3 = TransferFunction(0, p**4 - 1, p)\n>>> Parallel(G1, G2).var\np\n>>> Parallel(-G3, Series(G1, G2)).var\np \n```", "```py\nclass sympy.physics.control.lti.Feedback(sys1, sys2=None, sign=-1)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> plant = TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> controller = TransferFunction(5*s - 10, s + 7, s)\n>>> F1 = Feedback(plant, controller)\n>>> F1\nFeedback(TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s), TransferFunction(5*s - 10, s + 7, s), -1)\n>>> F1.var\ns\n>>> F1.args\n(TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s), TransferFunction(5*s - 10, s + 7, s), -1) \n```", "```py\n>>> F1.sys1\nTransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> F1.sys2\nTransferFunction(5*s - 10, s + 7, s) \n```", "```py\n>>> F1.doit()\nTransferFunction((s + 7)*(s**2 - 4*s + 2)*(3*s**2 + 7*s - 3), ((s + 7)*(s**2 - 4*s + 2) + (5*s - 10)*(3*s**2 + 7*s - 3))*(s**2 - 4*s + 2), s)\n>>> G = TransferFunction(2*s**2 + 5*s + 1, s**2 + 2*s + 3, s)\n>>> C = TransferFunction(5*s + 10, s + 10, s)\n>>> F2 = Feedback(G*C, TransferFunction(1, 1, s))\n>>> F2.doit()\nTransferFunction((s + 10)*(5*s + 10)*(s**2 + 2*s + 3)*(2*s**2 + 5*s + 1), (s + 10)*((s + 10)*(s**2 + 2*s + 3) + (5*s + 10)*(2*s**2 + 5*s + 1))*(s**2 + 2*s + 3), s) \n```", "```py\n>>> -F1\nFeedback(TransferFunction(-3*s**2 - 7*s + 3, s**2 - 4*s + 2, s), TransferFunction(10 - 5*s, s + 7, s), -1)\n>>> -F2\nFeedback(Series(TransferFunction(-1, 1, s), TransferFunction(2*s**2 + 5*s + 1, s**2 + 2*s + 3, s), TransferFunction(5*s + 10, s + 10, s)), TransferFunction(-1, 1, s), -1) \n```", "```py\nproperty den\n```", "```py\ndoit(cancel=False, expand=False, **hints)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> plant = TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> controller = TransferFunction(5*s - 10, s + 7, s)\n>>> F1 = Feedback(plant, controller)\n>>> F1.doit()\nTransferFunction((s + 7)*(s**2 - 4*s + 2)*(3*s**2 + 7*s - 3), ((s + 7)*(s**2 - 4*s + 2) + (5*s - 10)*(3*s**2 + 7*s - 3))*(s**2 - 4*s + 2), s)\n>>> G = TransferFunction(2*s**2 + 5*s + 1, s**2 + 2*s + 3, s)\n>>> F2 = Feedback(G, TransferFunction(1, 1, s))\n>>> F2.doit()\nTransferFunction((s**2 + 2*s + 3)*(2*s**2 + 5*s + 1), (s**2 + 2*s + 3)*(3*s**2 + 7*s + 4), s) \n```", "```py\n>>> F2.doit(cancel=True, expand=True)\nTransferFunction(2*s**2 + 5*s + 1, 3*s**2 + 7*s + 4, s)\n>>> F2.doit(expand=True)\nTransferFunction(2*s**4 + 9*s**3 + 17*s**2 + 17*s + 3, 3*s**4 + 13*s**3 + 27*s**2 + 29*s + 12, s) \n```", "```py\nproperty num\n```", "```py\nproperty sensitivity\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> C = TransferFunction(5*p + 10, p + 10, p)\n>>> P = TransferFunction(1 - p, p + 2, p)\n>>> F_1 = Feedback(P, C)\n>>> F_1.sensitivity\n1/((1 - p)*(5*p + 10)/((p + 2)*(p + 10)) + 1) \n```", "```py\nproperty sign\n```", "```py\nproperty sys1\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> plant = TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> controller = TransferFunction(5*s - 10, s + 7, s)\n>>> F1 = Feedback(plant, controller)\n>>> F1.sys1\nTransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> G = TransferFunction(2*s**2 + 5*s + 1, p**2 + 2*p + 3, p)\n>>> C = TransferFunction(5*p + 10, p + 10, p)\n>>> P = TransferFunction(1 - s, p + 2, p)\n>>> F2 = Feedback(TransferFunction(1, 1, p), G*C*P)\n>>> F2.sys1\nTransferFunction(1, 1, p) \n```", "```py\nproperty sys2\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> plant = TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> controller = TransferFunction(5*s - 10, s + 7, s)\n>>> F1 = Feedback(plant, controller)\n>>> F1.sys2\nTransferFunction(5*s - 10, s + 7, s)\n>>> G = TransferFunction(2*s**2 + 5*s + 1, p**2 + 2*p + 3, p)\n>>> C = TransferFunction(5*p + 10, p + 10, p)\n>>> P = TransferFunction(1 - s, p + 2, p)\n>>> F2 = Feedback(TransferFunction(1, 1, p), G*C*P)\n>>> F2.sys2\nSeries(TransferFunction(2*s**2 + 5*s + 1, p**2 + 2*p + 3, p), TransferFunction(5*p + 10, p + 10, p), TransferFunction(1 - s, p + 2, p)) \n```", "```py\nto_expr()\n```", "```py\n>>> from sympy.abc import s, a, b\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> from sympy import Expr\n>>> tf1 = TransferFunction(a+s, 1, s)\n>>> tf2 = TransferFunction(b+s, 1, s)\n>>> fd1 = Feedback(tf1, tf2)\n>>> fd1.to_expr()\n(a + s)/((a + s)*(b + s) + 1)\n>>> isinstance(_, Expr)\nTrue \n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction, Feedback\n>>> plant = TransferFunction(3*s**2 + 7*s - 3, s**2 - 4*s + 2, s)\n>>> controller = TransferFunction(5*s - 10, s + 7, s)\n>>> F1 = Feedback(plant, controller)\n>>> F1.var\ns\n>>> G = TransferFunction(2*s**2 + 5*s + 1, p**2 + 2*p + 3, p)\n>>> C = TransferFunction(5*p + 10, p + 10, p)\n>>> P = TransferFunction(1 - s, p + 2, p)\n>>> F2 = Feedback(TransferFunction(1, 1, p), G*C*P)\n>>> F2.var\np \n```", "```py\nclass sympy.physics.control.lti.TransferFunctionMatrix(arg)\n```", "```py\n>>> from sympy.abc import s, p, a\n>>> from sympy import pprint\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, Series, Parallel\n>>> tf_1 = TransferFunction(s + a, s**2 + s + 1, s)\n>>> tf_2 = TransferFunction(p**4 - 3*p + 2, s + p, s)\n>>> tf_3 = TransferFunction(3, s + 2, s)\n>>> tf_4 = TransferFunction(-a + p, 9*s - 9, s)\n>>> tfm_1 = TransferFunctionMatrix([[tf_1], [tf_2], [tf_3]])\n>>> tfm_1\nTransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(3, s + 2, s),)))\n>>> tfm_1.var\ns\n>>> tfm_1.num_inputs\n1\n>>> tfm_1.num_outputs\n3\n>>> tfm_1.shape\n(3, 1)\n>>> tfm_1.args\n(((TransferFunction(a + s, s**2 + s + 1, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(3, s + 2, s),)),)\n>>> tfm_2 = TransferFunctionMatrix([[tf_1, -tf_3], [tf_2, -tf_1], [tf_3, -tf_2]])\n>>> tfm_2\nTransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s), TransferFunction(-3, s + 2, s)), (TransferFunction(p**4 - 3*p + 2, p + s, s), TransferFunction(-a - s, s**2 + s + 1, s)), (TransferFunction(3, s + 2, s), TransferFunction(-p**4 + 3*p - 2, p + s, s))))\n>>> pprint(tfm_2, use_unicode=False)  # pretty-printing for better visualization\n[   a + s           -3       ]\n[ ----------       -----     ]\n[  2               s + 2     ]\n[ s  + s + 1                 ]\n[                            ]\n[ 4                          ]\n[p  - 3*p + 2      -a - s    ]\n[------------    ----------  ]\n[   p + s         2          ]\n[                s  + s + 1  ]\n[                            ]\n[                 4          ]\n[     3        - p  + 3*p - 2]\n[   -----      --------------]\n[   s + 2          p + s     ]{t} \n```", "```py\n>>> tfm_2.transpose()\nTransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s), TransferFunction(p**4 - 3*p + 2, p + s, s), TransferFunction(3, s + 2, s)), (TransferFunction(-3, s + 2, s), TransferFunction(-a - s, s**2 + s + 1, s), TransferFunction(-p**4 + 3*p - 2, p + s, s))))\n>>> pprint(_, use_unicode=False)\n[             4                          ]\n[  a + s     p  - 3*p + 2        3       ]\n[----------  ------------      -----     ]\n[ 2             p + s          s + 2     ]\n[s  + s + 1                              ]\n[                                        ]\n[                             4          ]\n[   -3          -a - s     - p  + 3*p - 2]\n[  -----      ----------   --------------]\n[  s + 2       2               p + s     ]\n[             s  + s + 1                 ]{t} \n```", "```py\n>>> tf_5 = TransferFunction(5, s, s)\n>>> tf_6 = TransferFunction(5*s, (2 + s**2), s)\n>>> tf_7 = TransferFunction(5, (s*(2 + s**2)), s)\n>>> tf_8 = TransferFunction(5, 1, s)\n>>> tfm_3 = TransferFunctionMatrix([[tf_5, tf_6], [tf_7, tf_8]])\n>>> tfm_3\nTransferFunctionMatrix(((TransferFunction(5, s, s), TransferFunction(5*s, s**2 + 2, s)), (TransferFunction(5, s*(s**2 + 2), s), TransferFunction(5, 1, s))))\n>>> pprint(tfm_3, use_unicode=False)\n[    5        5*s  ]\n[    -       ------]\n[    s        2    ]\n[            s  + 2]\n[                  ]\n[    5         5   ]\n[----------    -   ]\n[  / 2    \\    1   ]\n[s*\\s  + 2/        ]{t}\n>>> tfm_3.var\ns\n>>> tfm_3.shape\n(2, 2)\n>>> tfm_3.num_outputs\n2\n>>> tfm_3.num_inputs\n2\n>>> tfm_3.args\n(((TransferFunction(5, s, s), TransferFunction(5*s, s**2 + 2, s)), (TransferFunction(5, s*(s**2 + 2), s), TransferFunction(5, 1, s))),) \n```", "```py\n>>> tfm_3[1, 0]  # gives the TransferFunction present at 2nd Row and 1st Col. Similar to that in Matrix classes\nTransferFunction(5, s*(s**2 + 2), s)\n>>> tfm_3[0, 0]  # gives the TransferFunction present at 1st Row and 1st Col.\nTransferFunction(5, s, s)\n>>> tfm_3[:, 0]  # gives the first column\nTransferFunctionMatrix(((TransferFunction(5, s, s),), (TransferFunction(5, s*(s**2 + 2), s),)))\n>>> pprint(_, use_unicode=False)\n[    5     ]\n[    -     ]\n[    s     ]\n[          ]\n[    5     ]\n[----------]\n[  / 2    \\]\n[s*\\s  + 2/]{t}\n>>> tfm_3[0, :]  # gives the first row\nTransferFunctionMatrix(((TransferFunction(5, s, s), TransferFunction(5*s, s**2 + 2, s)),))\n>>> pprint(_, use_unicode=False)\n[5   5*s  ]\n[-  ------]\n[s   2    ]\n[   s  + 2]{t} \n```", "```py\n>>> tfm_4 = TransferFunctionMatrix([[tf_2], [-tf_1], [tf_3]])\n>>> -tfm_4\nTransferFunctionMatrix(((TransferFunction(-p**4 + 3*p - 2, p + s, s),), (TransferFunction(a + s, s**2 + s + 1, s),), (TransferFunction(-3, s + 2, s),)))\n>>> tfm_5 = TransferFunctionMatrix([[tf_1, tf_2], [tf_3, -tf_1]])\n>>> -tfm_5\nTransferFunctionMatrix(((TransferFunction(-a - s, s**2 + s + 1, s), TransferFunction(-p**4 + 3*p - 2, p + s, s)), (TransferFunction(-3, s + 2, s), TransferFunction(a + s, s**2 + s + 1, s)))) \n```", "```py\n>>> tfm_2.subs(p, 2)  #  substituting p everywhere in tfm_2 with 2.\nTransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s), TransferFunction(-3, s + 2, s)), (TransferFunction(12, s + 2, s), TransferFunction(-a - s, s**2 + s + 1, s)), (TransferFunction(3, s + 2, s), TransferFunction(-12, s + 2, s))))\n>>> pprint(_, use_unicode=False)\n[  a + s        -3     ]\n[----------    -----   ]\n[ 2            s + 2   ]\n[s  + s + 1            ]\n[                      ]\n[    12        -a - s  ]\n[  -----     ----------]\n[  s + 2      2        ]\n[            s  + s + 1]\n[                      ]\n[    3          -12    ]\n[  -----       -----   ]\n[  s + 2       s + 2   ]{t}\n>>> pprint(tfm_2, use_unicode=False) # State of tfm_2 is unchanged after substitution\n[   a + s           -3       ]\n[ ----------       -----     ]\n[  2               s + 2     ]\n[ s  + s + 1                 ]\n[                            ]\n[ 4                          ]\n[p  - 3*p + 2      -a - s    ]\n[------------    ----------  ]\n[   p + s         2          ]\n[                s  + s + 1  ]\n[                            ]\n[                 4          ]\n[     3        - p  + 3*p - 2]\n[   -----      --------------]\n[   s + 2          p + s     ]{t} \n```", "```py\n>>> tfm_2.subs({p: 2, a: 1})  # substituting p with 2 and a with 1\nTransferFunctionMatrix(((TransferFunction(s + 1, s**2 + s + 1, s), TransferFunction(-3, s + 2, s)), (TransferFunction(12, s + 2, s), TransferFunction(-s - 1, s**2 + s + 1, s)), (TransferFunction(3, s + 2, s), TransferFunction(-12, s + 2, s))))\n>>> pprint(_, use_unicode=False)\n[  s + 1        -3     ]\n[----------    -----   ]\n[ 2            s + 2   ]\n[s  + s + 1            ]\n[                      ]\n[    12        -s - 1  ]\n[  -----     ----------]\n[  s + 2      2        ]\n[            s  + s + 1]\n[                      ]\n[    3          -12    ]\n[  -----       -----   ]\n[  s + 2       s + 2   ]{t} \n```", "```py\n>>> tfm_6 = TransferFunctionMatrix([[Series(tf_3, tf_4), Parallel(tf_3, tf_4)]])\n>>> tfm_6\nTransferFunctionMatrix(((Series(TransferFunction(3, s + 2, s), TransferFunction(-a + p, 9*s - 9, s)), Parallel(TransferFunction(3, s + 2, s), TransferFunction(-a + p, 9*s - 9, s))),))\n>>> pprint(tfm_6, use_unicode=False)\n[-a + p    3    -a + p      3  ]\n[-------*-----  ------- + -----]\n[9*s - 9 s + 2  9*s - 9   s + 2]{t}\n>>> tfm_6.doit()\nTransferFunctionMatrix(((TransferFunction(-3*a + 3*p, (s + 2)*(9*s - 9), s), TransferFunction(27*s + (-a + p)*(s + 2) - 27, (s + 2)*(9*s - 9), s)),))\n>>> pprint(_, use_unicode=False)\n[    -3*a + 3*p     27*s + (-a + p)*(s + 2) - 27]\n[-----------------  ----------------------------]\n[(s + 2)*(9*s - 9)       (s + 2)*(9*s - 9)      ]{t}\n>>> tf_9 = TransferFunction(1, s, s)\n>>> tf_10 = TransferFunction(1, s**2, s)\n>>> tfm_7 = TransferFunctionMatrix([[Series(tf_9, tf_10), tf_9], [tf_10, Parallel(tf_9, tf_10)]])\n>>> tfm_7\nTransferFunctionMatrix(((Series(TransferFunction(1, s, s), TransferFunction(1, s**2, s)), TransferFunction(1, s, s)), (TransferFunction(1, s**2, s), Parallel(TransferFunction(1, s, s), TransferFunction(1, s**2, s)))))\n>>> pprint(tfm_7, use_unicode=False)\n[ 1      1   ]\n[----    -   ]\n[   2    s   ]\n[s*s         ]\n[            ]\n[ 1    1    1]\n[ --   -- + -]\n[  2    2   s]\n[ s    s     ]{t}\n>>> tfm_7.doit()\nTransferFunctionMatrix(((TransferFunction(1, s**3, s), TransferFunction(1, s, s)), (TransferFunction(1, s**2, s), TransferFunction(s**2 + s, s**3, s))))\n>>> pprint(_, use_unicode=False)\n[1     1   ]\n[--    -   ]\n[ 3    s   ]\n[s         ]\n[          ]\n[     2    ]\n[1   s  + s]\n[--  ------]\n[ 2     3  ]\n[s     s   ]{t} \n```", "```py\n>>> tfm_8 = TransferFunctionMatrix([[tf_3], [tf_2], [-tf_1]])\n>>> tfm_9 = TransferFunctionMatrix([[-tf_3]])\n>>> tfm_10 = TransferFunctionMatrix([[tf_1], [tf_2], [tf_4]])\n>>> tfm_11 = TransferFunctionMatrix([[tf_4], [-tf_1]])\n>>> tfm_12 = TransferFunctionMatrix([[tf_4, -tf_1, tf_3], [-tf_2, -tf_4, -tf_3]])\n>>> tfm_8 + tfm_10\nMIMOParallel(TransferFunctionMatrix(((TransferFunction(3, s + 2, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a - s, s**2 + s + 1, s),))), TransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a + p, 9*s - 9, s),))))\n>>> pprint(_, use_unicode=False)\n[     3      ]      [   a + s    ]\n[   -----    ]      [ ---------- ]\n[   s + 2    ]      [  2         ]\n[            ]      [ s  + s + 1 ]\n[ 4          ]      [            ]\n[p  - 3*p + 2]      [ 4          ]\n[------------]    + [p  - 3*p + 2]\n[   p + s    ]      [------------]\n[            ]      [   p + s    ]\n[   -a - s   ]      [            ]\n[ ---------- ]      [   -a + p   ]\n[  2         ]      [  -------   ]\n[ s  + s + 1 ]{t}   [  9*s - 9   ]{t}\n>>> -tfm_10 - tfm_8\nMIMOParallel(TransferFunctionMatrix(((TransferFunction(-a - s, s**2 + s + 1, s),), (TransferFunction(-p**4 + 3*p - 2, p + s, s),), (TransferFunction(a - p, 9*s - 9, s),))), TransferFunctionMatrix(((TransferFunction(-3, s + 2, s),), (TransferFunction(-p**4 + 3*p - 2, p + s, s),), (TransferFunction(a + s, s**2 + s + 1, s),))))\n>>> pprint(_, use_unicode=False)\n[    -a - s    ]      [     -3       ]\n[  ----------  ]      [    -----     ]\n[   2          ]      [    s + 2     ]\n[  s  + s + 1  ]      [              ]\n[              ]      [   4          ]\n[   4          ]      [- p  + 3*p - 2]\n[- p  + 3*p - 2]    + [--------------]\n[--------------]      [    p + s     ]\n[    p + s     ]      [              ]\n[              ]      [    a + s     ]\n[    a - p     ]      [  ----------  ]\n[   -------    ]      [   2          ]\n[   9*s - 9    ]{t}   [  s  + s + 1  ]{t}\n>>> tfm_12 * tfm_8\nMIMOSeries(TransferFunctionMatrix(((TransferFunction(3, s + 2, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a - s, s**2 + s + 1, s),))), TransferFunctionMatrix(((TransferFunction(-a + p, 9*s - 9, s), TransferFunction(-a - s, s**2 + s + 1, s), TransferFunction(3, s + 2, s)), (TransferFunction(-p**4 + 3*p - 2, p + s, s), TransferFunction(a - p, 9*s - 9, s), TransferFunction(-3, s + 2, s)))))\n>>> pprint(_, use_unicode=False)\n [     3      ]\n [   -----    ]\n[    -a + p        -a - s      3  ]    [   s + 2    ]\n[   -------      ----------  -----]    [            ]\n[   9*s - 9       2          s + 2]    [ 4          ]\n[                s  + s + 1       ]    [p  - 3*p + 2]\n[                                 ]   *[------------]\n[   4                             ]    [   p + s    ]\n[- p  + 3*p - 2    a - p      -3  ]    [            ]\n[--------------   -------    -----]    [   -a - s   ]\n[    p + s        9*s - 9    s + 2]{t} [ ---------- ]\n [  2         ]\n [ s  + s + 1 ]{t}\n>>> tfm_12 * tfm_8 * tfm_9\nMIMOSeries(TransferFunctionMatrix(((TransferFunction(-3, s + 2, s),),)), TransferFunctionMatrix(((TransferFunction(3, s + 2, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a - s, s**2 + s + 1, s),))), TransferFunctionMatrix(((TransferFunction(-a + p, 9*s - 9, s), TransferFunction(-a - s, s**2 + s + 1, s), TransferFunction(3, s + 2, s)), (TransferFunction(-p**4 + 3*p - 2, p + s, s), TransferFunction(a - p, 9*s - 9, s), TransferFunction(-3, s + 2, s)))))\n>>> pprint(_, use_unicode=False)\n [     3      ]\n [   -----    ]\n[    -a + p        -a - s      3  ]    [   s + 2    ]\n[   -------      ----------  -----]    [            ]\n[   9*s - 9       2          s + 2]    [ 4          ]\n[                s  + s + 1       ]    [p  - 3*p + 2]    [ -3  ]\n[                                 ]   *[------------]   *[-----]\n[   4                             ]    [   p + s    ]    [s + 2]{t}\n[- p  + 3*p - 2    a - p      -3  ]    [            ]\n[--------------   -------    -----]    [   -a - s   ]\n[    p + s        9*s - 9    s + 2]{t} [ ---------- ]\n [  2         ]\n [ s  + s + 1 ]{t}\n>>> tfm_10 + tfm_8*tfm_9\nMIMOParallel(TransferFunctionMatrix(((TransferFunction(a + s, s**2 + s + 1, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a + p, 9*s - 9, s),))), MIMOSeries(TransferFunctionMatrix(((TransferFunction(-3, s + 2, s),),)), TransferFunctionMatrix(((TransferFunction(3, s + 2, s),), (TransferFunction(p**4 - 3*p + 2, p + s, s),), (TransferFunction(-a - s, s**2 + s + 1, s),)))))\n>>> pprint(_, use_unicode=False)\n[   a + s    ]      [     3      ]\n[ ---------- ]      [   -----    ]\n[  2         ]      [   s + 2    ]\n[ s  + s + 1 ]      [            ]\n[            ]      [ 4          ]\n[ 4          ]      [p  - 3*p + 2]    [ -3  ]\n[p  - 3*p + 2]    + [------------]   *[-----]\n[------------]      [   p + s    ]    [s + 2]{t}\n[   p + s    ]      [            ]\n[            ]      [   -a - s   ]\n[   -a + p   ]      [ ---------- ]\n[  -------   ]      [  2         ]\n[  9*s - 9   ]{t}   [ s  + s + 1 ]{t} \n```", "```py\n>>> (-tfm_8 + tfm_10 + tfm_8*tfm_9).doit()\nTransferFunctionMatrix(((TransferFunction((a + s)*(s + 2)**3 - 3*(s + 2)**2*(s**2 + s + 1) - 9*(s + 2)*(s**2 + s + 1), (s + 2)**3*(s**2 + s + 1), s),), (TransferFunction((p + s)*(-3*p**4 + 9*p - 6), (p + s)**2*(s + 2), s),), (TransferFunction((-a + p)*(s + 2)*(s**2 + s + 1)**2 + (a + s)*(s + 2)*(9*s - 9)*(s**2 + s + 1) + (3*a + 3*s)*(9*s - 9)*(s**2 + s + 1), (s + 2)*(9*s - 9)*(s**2 + s + 1)**2, s),)))\n>>> (-tfm_12 * -tfm_8 * -tfm_9).rewrite(TransferFunctionMatrix)\nTransferFunctionMatrix(((TransferFunction(3*(-3*a + 3*p)*(p + s)*(s + 2)*(s**2 + s + 1)**2 + 3*(-3*a - 3*s)*(p + s)*(s + 2)*(9*s - 9)*(s**2 + s + 1) + 3*(a + s)*(s + 2)**2*(9*s - 9)*(-p**4 + 3*p - 2)*(s**2 + s + 1), (p + s)*(s + 2)**3*(9*s - 9)*(s**2 + s + 1)**2, s),), (TransferFunction(3*(-a + p)*(p + s)*(s + 2)**2*(-p**4 + 3*p - 2)*(s**2 + s + 1) + 3*(3*a + 3*s)*(p + s)**2*(s + 2)*(9*s - 9) + 3*(p + s)*(s + 2)*(9*s - 9)*(-3*p**4 + 9*p - 6)*(s**2 + s + 1), (p + s)**2*(s + 2)**3*(9*s - 9)*(s**2 + s + 1), s),))) \n```", "```py\nelem_poles()\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix\n>>> tf_1 = TransferFunction(3, (s + 1), s)\n>>> tf_2 = TransferFunction(s + 6, (s + 1)*(s + 2), s)\n>>> tf_3 = TransferFunction(s + 3, s**2 + 3*s + 2, s)\n>>> tf_4 = TransferFunction(s + 2, s**2 + 5*s - 10, s)\n>>> tfm_1 = TransferFunctionMatrix([[tf_1, tf_2], [tf_3, tf_4]])\n>>> tfm_1\nTransferFunctionMatrix(((TransferFunction(3, s + 1, s), TransferFunction(s + 6, (s + 1)*(s + 2), s)), (TransferFunction(s + 3, s**2 + 3*s + 2, s), TransferFunction(s + 2, s**2 + 5*s - 10, s))))\n>>> tfm_1.elem_poles()\n[[[-1], [-2, -1]], [[-2, -1], [-5/2 + sqrt(65)/2, -sqrt(65)/2 - 5/2]]] \n```", "```py\nelem_zeros()\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix\n>>> tf_1 = TransferFunction(3, (s + 1), s)\n>>> tf_2 = TransferFunction(s + 6, (s + 1)*(s + 2), s)\n>>> tf_3 = TransferFunction(s + 3, s**2 + 3*s + 2, s)\n>>> tf_4 = TransferFunction(s**2 - 9*s + 20, s**2 + 5*s - 10, s)\n>>> tfm_1 = TransferFunctionMatrix([[tf_1, tf_2], [tf_3, tf_4]])\n>>> tfm_1\nTransferFunctionMatrix(((TransferFunction(3, s + 1, s), TransferFunction(s + 6, (s + 1)*(s + 2), s)), (TransferFunction(s + 3, s**2 + 3*s + 2, s), TransferFunction(s**2 - 9*s + 20, s**2 + 5*s - 10, s))))\n>>> tfm_1.elem_zeros()\n[[[], [-6]], [[-3], [4, 5]]] \n```", "```py\neval_frequency(other)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix\n>>> from sympy import I\n>>> tf_1 = TransferFunction(3, (s + 1), s)\n>>> tf_2 = TransferFunction(s + 6, (s + 1)*(s + 2), s)\n>>> tf_3 = TransferFunction(s + 3, s**2 + 3*s + 2, s)\n>>> tf_4 = TransferFunction(s**2 - 9*s + 20, s**2 + 5*s - 10, s)\n>>> tfm_1 = TransferFunctionMatrix([[tf_1, tf_2], [tf_3, tf_4]])\n>>> tfm_1\nTransferFunctionMatrix(((TransferFunction(3, s + 1, s), TransferFunction(s + 6, (s + 1)*(s + 2), s)), (TransferFunction(s + 3, s**2 + 3*s + 2, s), TransferFunction(s**2 - 9*s + 20, s**2 + 5*s - 10, s))))\n>>> tfm_1.eval_frequency(2)\nMatrix([\n[   1, 2/3],\n[5/12, 3/2]])\n>>> tfm_1.eval_frequency(I*2)\nMatrix([\n[   3/5 - 6*I/5,                -I],\n[3/20 - 11*I/20, -101/74 + 23*I/74]]) \n```", "```py\nexpand(**hints)\n```", "```py\nclassmethod from_Matrix(matrix, var)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunctionMatrix\n>>> from sympy import Matrix, pprint\n>>> M = Matrix([[s, 1/s], [1/(s+1), s]])\n>>> M_tf = TransferFunctionMatrix.from_Matrix(M, s)\n>>> pprint(M_tf, use_unicode=False)\n[  s    1]\n[  -    -]\n[  1    s]\n[        ]\n[  1    s]\n[-----  -]\n[s + 1  1]{t}\n>>> M_tf.elem_poles()\n[[[], [0]], [[-1], []]]\n>>> M_tf.elem_zeros()\n[[[0], []], [[], [0]]] \n```", "```py\nproperty num_inputs\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix\n>>> G1 = TransferFunction(s + 3, s**2 - 3, s)\n>>> G2 = TransferFunction(4, s**2, s)\n>>> G3 = TransferFunction(p**2 + s**2, p - 3, s)\n>>> tfm_1 = TransferFunctionMatrix([[G2, -G1, G3], [-G2, -G1, -G3]])\n>>> tfm_1.num_inputs\n3 \n```", "```py\nproperty num_outputs\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunctionMatrix\n>>> from sympy import Matrix\n>>> M_1 = Matrix([[s], [1/s]])\n>>> TFM = TransferFunctionMatrix.from_Matrix(M_1, s)\n>>> print(TFM)\nTransferFunctionMatrix(((TransferFunction(s, 1, s),), (TransferFunction(1, s, s),)))\n>>> TFM.num_outputs\n2 \n```", "```py\nproperty shape\n```", "```py\n>>> from sympy.abc import s, p\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix\n>>> tf1 = TransferFunction(p**2 - 1, s**4 + s**3 - p, p)\n>>> tf2 = TransferFunction(1 - p, p**2 - 3*p + 7, p)\n>>> tf3 = TransferFunction(3, 4, p)\n>>> tfm1 = TransferFunctionMatrix([[tf1, -tf2]])\n>>> tfm1.shape\n(1, 2)\n>>> tfm2 = TransferFunctionMatrix([[-tf2, tf3], [tf1, -tf1]])\n>>> tfm2.shape\n(2, 2) \n```", "```py\ntranspose()\n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p, s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, Series, Parallel\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G2 = TransferFunction(p, 4 - p, p)\n>>> G3 = TransferFunction(0, p**4 - 1, p)\n>>> G4 = TransferFunction(s + 1, s**2 + s + 1, s)\n>>> S1 = Series(G1, G2)\n>>> S2 = Series(-G3, Parallel(G2, -G1))\n>>> tfm1 = TransferFunctionMatrix([[G1], [G2], [G3]])\n>>> tfm1.var\np\n>>> tfm2 = TransferFunctionMatrix([[-S1, -S2], [S1, S2]])\n>>> tfm2.var\np\n>>> tfm3 = TransferFunctionMatrix([[G4]])\n>>> tfm3.var\ns \n```", "```py\nclass sympy.physics.control.lti.MIMOSeries(*args, evaluate=False)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import MIMOSeries, TransferFunctionMatrix\n>>> from sympy import Matrix, pprint\n>>> mat_a = Matrix([[5*s], [5]])  # 2 Outputs 1 Input\n>>> mat_b = Matrix([[5, 1/(6*s**2)]])  # 1 Output 2 Inputs\n>>> mat_c = Matrix([[1, s], [5/s, 1]])  # 2 Outputs 2 Inputs\n>>> tfm_a = TransferFunctionMatrix.from_Matrix(mat_a, s)\n>>> tfm_b = TransferFunctionMatrix.from_Matrix(mat_b, s)\n>>> tfm_c = TransferFunctionMatrix.from_Matrix(mat_c, s)\n>>> MIMOSeries(tfm_c, tfm_b, tfm_a)\nMIMOSeries(TransferFunctionMatrix(((TransferFunction(1, 1, s), TransferFunction(s, 1, s)), (TransferFunction(5, s, s), TransferFunction(1, 1, s)))), TransferFunctionMatrix(((TransferFunction(5, 1, s), TransferFunction(1, 6*s**2, s)),)), TransferFunctionMatrix(((TransferFunction(5*s, 1, s),), (TransferFunction(5, 1, s),))))\n>>> pprint(_, use_unicode=False)  #  For Better Visualization\n[5*s]                 [1  s]\n[---]    [5   1  ]    [-  -]\n[ 1 ]    [-  ----]    [1  1]\n[   ]   *[1     2]   *[    ]\n[ 5 ]    [   6*s ]{t} [5  1]\n[ - ]                 [-  -]\n[ 1 ]{t}              [s  1]{t}\n>>> MIMOSeries(tfm_c, tfm_b, tfm_a).doit()\nTransferFunctionMatrix(((TransferFunction(150*s**4 + 25*s, 6*s**3, s), TransferFunction(150*s**4 + 5*s, 6*s**2, s)), (TransferFunction(150*s**3 + 25, 6*s**3, s), TransferFunction(150*s**3 + 5, 6*s**2, s))))\n>>> pprint(_, use_unicode=False)  # (2 Inputs -A-> 2 Outputs) -> (2 Inputs -B-> 1 Output) -> (1 Input -C-> 2 Outputs) is equivalent to (2 Inputs -Series Equivalent-> 2 Outputs).\n[     4              4      ]\n[150*s  + 25*s  150*s  + 5*s]\n[-------------  ------------]\n[        3             2    ]\n[     6*s           6*s     ]\n[                           ]\n[      3              3     ]\n[ 150*s  + 25    150*s  + 5 ]\n[ -----------    ---------- ]\n[        3             2    ]\n[     6*s           6*s     ]{t} \n```", "```py\ndoit(cancel=False, **kwargs)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, MIMOSeries, TransferFunctionMatrix\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tfm1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf2]])\n>>> tfm2 = TransferFunctionMatrix([[tf2, tf1], [tf1, tf1]])\n>>> MIMOSeries(tfm2, tfm1).doit()\nTransferFunctionMatrix(((TransferFunction(2*(-p + s)*(s**3 - 2)*(a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)**2*(s**4 + 5*s + 6)**2, s), TransferFunction((-p + s)**2*(s**3 - 2)*(a*p**2 + b*s) + (-p + s)*(a*p**2 + b*s)**2*(s**4 + 5*s + 6), (-p + s)**3*(s**4 + 5*s + 6), s)), (TransferFunction((-p + s)*(s**3 - 2)**2*(s**4 + 5*s + 6) + (s**3 - 2)*(a*p**2 + b*s)*(s**4 + 5*s + 6)**2, (-p + s)*(s**4 + 5*s + 6)**3, s), TransferFunction(2*(s**3 - 2)*(a*p**2 + b*s), (-p + s)*(s**4 + 5*s + 6), s)))) \n```", "```py\nproperty num_inputs\n```", "```py\nproperty num_outputs\n```", "```py\nproperty shape\n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, MIMOSeries, TransferFunctionMatrix\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G2 = TransferFunction(p, 4 - p, p)\n>>> G3 = TransferFunction(0, p**4 - 1, p)\n>>> tfm_1 = TransferFunctionMatrix([[G1, G2, G3]])\n>>> tfm_2 = TransferFunctionMatrix([[G1], [G2], [G3]])\n>>> MIMOSeries(tfm_2, tfm_1).var\np \n```", "```py\nclass sympy.physics.control.lti.MIMOParallel(*args, evaluate=False)\n```", "```py\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunctionMatrix, MIMOParallel\n>>> from sympy import Matrix, pprint\n>>> expr_1 = 1/s\n>>> expr_2 = s/(s**2-1)\n>>> expr_3 = (2 + s)/(s**2 - 1)\n>>> expr_4 = 5\n>>> tfm_a = TransferFunctionMatrix.from_Matrix(Matrix([[expr_1, expr_2], [expr_3, expr_4]]), s)\n>>> tfm_b = TransferFunctionMatrix.from_Matrix(Matrix([[expr_2, expr_1], [expr_4, expr_3]]), s)\n>>> tfm_c = TransferFunctionMatrix.from_Matrix(Matrix([[expr_3, expr_4], [expr_1, expr_2]]), s)\n>>> MIMOParallel(tfm_a, tfm_b, tfm_c)\nMIMOParallel(TransferFunctionMatrix(((TransferFunction(1, s, s), TransferFunction(s, s**2 - 1, s)), (TransferFunction(s + 2, s**2 - 1, s), TransferFunction(5, 1, s)))), TransferFunctionMatrix(((TransferFunction(s, s**2 - 1, s), TransferFunction(1, s, s)), (TransferFunction(5, 1, s), TransferFunction(s + 2, s**2 - 1, s)))), TransferFunctionMatrix(((TransferFunction(s + 2, s**2 - 1, s), TransferFunction(5, 1, s)), (TransferFunction(1, s, s), TransferFunction(s, s**2 - 1, s)))))\n>>> pprint(_, use_unicode=False)  #  For Better Visualization\n[  1       s   ]      [  s       1   ]      [s + 2     5   ]\n[  -     ------]      [------    -   ]      [------    -   ]\n[  s      2    ]      [ 2        s   ]      [ 2        1   ]\n[        s  - 1]      [s  - 1        ]      [s  - 1        ]\n[              ]    + [              ]    + [              ]\n[s + 2     5   ]      [  5     s + 2 ]      [  1       s   ]\n[------    -   ]      [  -     ------]      [  -     ------]\n[ 2        1   ]      [  1      2    ]      [  s      2    ]\n[s  - 1        ]{t}   [        s  - 1]{t}   [        s  - 1]{t}\n>>> MIMOParallel(tfm_a, tfm_b, tfm_c).doit()\nTransferFunctionMatrix(((TransferFunction(s**2 + s*(2*s + 2) - 1, s*(s**2 - 1), s), TransferFunction(2*s**2 + 5*s*(s**2 - 1) - 1, s*(s**2 - 1), s)), (TransferFunction(s**2 + s*(s + 2) + 5*s*(s**2 - 1) - 1, s*(s**2 - 1), s), TransferFunction(5*s**2 + 2*s - 3, s**2 - 1, s))))\n>>> pprint(_, use_unicode=False)\n[       2                              2       / 2    \\    ]\n[      s  + s*(2*s + 2) - 1         2*s  + 5*s*\\s  - 1/ - 1]\n[      --------------------         -----------------------]\n[             / 2    \\                       / 2    \\      ]\n[           s*\\s  - 1/                     s*\\s  - 1/      ]\n[                                                          ]\n[ 2                   / 2    \\             2               ]\n[s  + s*(s + 2) + 5*s*\\s  - 1/ - 1      5*s  + 2*s - 3     ]\n[---------------------------------      --------------     ]\n[              / 2    \\                      2             ]\n[            s*\\s  - 1/                     s  - 1         ]{t} \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy.abc import s, p, a, b\n>>> from sympy.physics.control.lti import TransferFunction, MIMOParallel, TransferFunctionMatrix\n>>> tf1 = TransferFunction(a*p**2 + b*s, s - p, s)\n>>> tf2 = TransferFunction(s**3 - 2, s**4 + 5*s + 6, s)\n>>> tfm_1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])\n>>> tfm_2 = TransferFunctionMatrix([[tf2, tf1], [tf1, tf2]])\n>>> MIMOParallel(tfm_1, tfm_2).doit()\nTransferFunctionMatrix(((TransferFunction((-p + s)*(s**3 - 2) + (a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s), TransferFunction((-p + s)*(s**3 - 2) + (a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s)), (TransferFunction((-p + s)*(s**3 - 2) + (a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s), TransferFunction((-p + s)*(s**3 - 2) + (a*p**2 + b*s)*(s**4 + 5*s + 6), (-p + s)*(s**4 + 5*s + 6), s)))) \n```", "```py\nproperty num_inputs\n```", "```py\nproperty num_outputs\n```", "```py\nproperty shape\n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOParallel\n>>> G1 = TransferFunction(p**2 + 2*p + 4, p - 6, p)\n>>> G2 = TransferFunction(p, 4 - p, p)\n>>> G3 = TransferFunction(0, p**4 - 1, p)\n>>> G4 = TransferFunction(p**2, p**2 - 1, p)\n>>> tfm_a = TransferFunctionMatrix([[G1, G2], [G3, G4]])\n>>> tfm_b = TransferFunctionMatrix([[G2, G1], [G4, G3]])\n>>> MIMOParallel(tfm_a, tfm_b).var\np \n```", "```py\nclass sympy.physics.control.lti.MIMOFeedback(sys1, sys2, sign=-1)\n```", "```py\n>>> from sympy import Matrix, pprint\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunctionMatrix, MIMOFeedback\n>>> plant_mat = Matrix([[1, 1/s], [0, 1]])\n>>> controller_mat = Matrix([[10, 0], [0, 10]])  # Constant Gain\n>>> plant = TransferFunctionMatrix.from_Matrix(plant_mat, s)\n>>> controller = TransferFunctionMatrix.from_Matrix(controller_mat, s)\n>>> feedback = MIMOFeedback(plant, controller)  # Negative Feedback (default)\n>>> pprint(feedback, use_unicode=False)\n/    [1  1]    [10  0 ]   \\-1   [1  1]\n|    [-  -]    [--  - ]   |     [-  -]\n|    [1  s]    [1   1 ]   |     [1  s]\n|I + [    ]   *[      ]   |   * [    ]\n|    [0  1]    [0   10]   |     [0  1]\n|    [-  -]    [-   --]   |     [-  -]\n\\    [1  1]{t} [1   1 ]{t}/     [1  1]{t} \n```", "```py\n>>> pprint(feedback.doit(), use_unicode=False)\n[1     1  ]\n[--  -----]\n[11  121*s]\n[         ]\n[0    1   ]\n[-    --  ]\n[1    11  ]{t} \n```", "```py\n>>> neg_feedback = -feedback\n>>> pprint(neg_feedback.doit(), use_unicode=False)\n[-1    -1  ]\n[---  -----]\n[11   121*s]\n[          ]\n[ 0    -1  ]\n[ -    --- ]\n[ 1    11  ]{t} \n```", "```py\ndoit(cancel=True, expand=False, **hints)\n```", "```py\n>>> from sympy import pprint\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOFeedback\n>>> tf1 = TransferFunction(s, 1 - s, s)\n>>> tf2 = TransferFunction(1, s, s)\n>>> tf3 = TransferFunction(5, 1, s)\n>>> tf4 = TransferFunction(s - 1, s, s)\n>>> tf5 = TransferFunction(0, 1, s)\n>>> sys1 = TransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])\n>>> sys2 = TransferFunctionMatrix([[tf3, tf5], [tf5, tf5]])\n>>> F_1 = MIMOFeedback(sys1, sys2, 1)\n>>> pprint(F_1, use_unicode=False)\n/    [  s      1  ]    [5  0]   \\-1   [  s      1  ]\n|    [-----    -  ]    [-  -]   |     [-----    -  ]\n|    [1 - s    s  ]    [1  1]   |     [1 - s    s  ]\n|I - [            ]   *[    ]   |   * [            ]\n|    [  5    s - 1]    [0  0]   |     [  5    s - 1]\n|    [  -    -----]    [-  -]   |     [  -    -----]\n\\    [  1      s  ]{t} [1  1]{t}/     [  1      s  ]{t}\n>>> pprint(F_1.doit(), use_unicode=False)\n[  -s           s - 1       ]\n[-------     -----------    ]\n[6*s - 1     s*(6*s - 1)    ]\n[                           ]\n[5*s - 5  (s - 1)*(6*s + 24)]\n[-------  ------------------]\n[6*s - 1     s*(6*s - 1)    ]{t} \n```", "```py\n>>> pprint(F_1.doit(cancel=False), use_unicode=False)\n[             s*(s - 1)                              s - 1               ]\n[         -----------------                       -----------            ]\n[         (1 - s)*(6*s - 1)                       s*(6*s - 1)            ]\n[                                                                        ]\n[s*(25*s - 25) + 5*(1 - s)*(6*s - 1)  s*(s - 1)*(6*s - 1) + s*(25*s - 25)]\n[-----------------------------------  -----------------------------------]\n[         (1 - s)*(6*s - 1)                        2                     ]\n[                                                 s *(6*s - 1)           ]{t} \n```", "```py\n>>> pprint(F_1.doit(expand=True), use_unicode=False)\n[  -s          s - 1      ]\n[-------      --------    ]\n[6*s - 1         2        ]\n[             6*s  - s    ]\n[                         ]\n[            2            ]\n[5*s - 5  6*s  + 18*s - 24]\n[-------  ----------------]\n[6*s - 1         2        ]\n[             6*s  - s    ]{t} \n```", "```py\nproperty sensitivity\n```", "```py\n>>> from sympy import pprint\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOFeedback\n>>> tf1 = TransferFunction(p, 1 - p, p)\n>>> tf2 = TransferFunction(1, p, p)\n>>> tf3 = TransferFunction(1, 1, p)\n>>> sys1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])\n>>> sys2 = TransferFunctionMatrix([[tf1, tf3], [tf3, tf2]])\n>>> F_1 = MIMOFeedback(sys1, sys2, 1)  # Positive feedback\n>>> F_2 = MIMOFeedback(sys1, sys2)  # Negative feedback\n>>> pprint(F_1.sensitivity, use_unicode=False)\n[   4      3      2               5      4      2           ]\n[- p  + 3*p  - 4*p  + 3*p - 1    p  - 2*p  + 3*p  - 3*p + 1 ]\n[----------------------------  -----------------------------]\n[  4      3      2              5      4      3      2      ]\n[ p  + 3*p  - 8*p  + 8*p - 3   p  + 3*p  - 8*p  + 8*p  - 3*p]\n[                                                           ]\n[       4    3    2                  3      2               ]\n[      p  - p  - p  + p           3*p  - 6*p  + 4*p - 1     ]\n[ --------------------------    --------------------------  ]\n[  4      3      2               4      3      2            ]\n[ p  + 3*p  - 8*p  + 8*p - 3    p  + 3*p  - 8*p  + 8*p - 3  ]\n>>> pprint(F_2.sensitivity, use_unicode=False)\n[ 4      3      2           5      4      2          ]\n[p  - 3*p  + 2*p  + p - 1  p  - 2*p  + 3*p  - 3*p + 1]\n[------------------------  --------------------------]\n[   4      3                   5      4      2       ]\n[  p  - 3*p  + 2*p - 1        p  - 3*p  + 2*p  - p   ]\n[                                                    ]\n[     4    3    2               4      3             ]\n[    p  - p  - p  + p        2*p  - 3*p  + 2*p - 1   ]\n[  -------------------       ---------------------   ]\n[   4      3                   4      3              ]\n[  p  - 3*p  + 2*p - 1        p  - 3*p  + 2*p - 1    ] \n```", "```py\nproperty sign\n```", "```py\nproperty sys1\n```", "```py\n>>> from sympy import pprint\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOFeedback\n>>> tf1 = TransferFunction(s**2 + s + 1, s**2 - s + 1, s)\n>>> tf2 = TransferFunction(1, s, s)\n>>> tf3 = TransferFunction(1, 1, s)\n>>> sys1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])\n>>> sys2 = TransferFunctionMatrix([[tf3, tf3], [tf3, tf2]])\n>>> F_1 = MIMOFeedback(sys1, sys2, 1)\n>>> F_1.sys1\nTransferFunctionMatrix(((TransferFunction(s**2 + s + 1, s**2 - s + 1, s), TransferFunction(1, s, s)), (TransferFunction(1, s, s), TransferFunction(s**2 + s + 1, s**2 - s + 1, s))))\n>>> pprint(_, use_unicode=False)\n[ 2                    ]\n[s  + s + 1      1     ]\n[----------      -     ]\n[ 2              s     ]\n[s  - s + 1            ]\n[                      ]\n[             2        ]\n[    1       s  + s + 1]\n[    -       ----------]\n[    s        2        ]\n[            s  - s + 1]{t} \n```", "```py\nproperty sys2\n```", "```py\n>>> from sympy import pprint\n>>> from sympy.abc import s\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOFeedback\n>>> tf1 = TransferFunction(s**2, s**3 - s + 1, s)\n>>> tf2 = TransferFunction(1, s, s)\n>>> tf3 = TransferFunction(1, 1, s)\n>>> sys1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])\n>>> sys2 = TransferFunctionMatrix([[tf1, tf3], [tf3, tf2]])\n>>> F_1 = MIMOFeedback(sys1, sys2)\n>>> F_1.sys2\nTransferFunctionMatrix(((TransferFunction(s**2, s**3 - s + 1, s), TransferFunction(1, 1, s)), (TransferFunction(1, 1, s), TransferFunction(1, s, s))))\n>>> pprint(_, use_unicode=False)\n[     2       ]\n[    s       1]\n[----------  -]\n[ 3          1]\n[s  - s + 1   ]\n[             ]\n[    1       1]\n[    -       -]\n[    1       s]{t} \n```", "```py\nproperty var\n```", "```py\n>>> from sympy.abc import p\n>>> from sympy.physics.control.lti import TransferFunction, TransferFunctionMatrix, MIMOFeedback\n>>> tf1 = TransferFunction(p, 1 - p, p)\n>>> tf2 = TransferFunction(1, p, p)\n>>> tf3 = TransferFunction(1, 1, p)\n>>> sys1 = TransferFunctionMatrix([[tf1, tf2], [tf2, tf1]])\n>>> sys2 = TransferFunctionMatrix([[tf1, tf3], [tf3, tf2]])\n>>> F_1 = MIMOFeedback(sys1, sys2, 1)  # Positive feedback\n>>> F_1.var\np \n```", "```py\nsympy.physics.control.lti.gbt(tf, sample_per, alpha)\n```", "```py\n>>> from sympy.physics.control.lti import TransferFunction, gbt\n>>> from sympy.abc import s, L, R, T \n```", "```py\n>>> tf = TransferFunction(1, s*L + R, s)\n>>> numZ, denZ = gbt(tf, T, 0.5)\n>>> numZ\n[T/(2*(L + R*T/2)), T/(2*(L + R*T/2))]\n>>> denZ\n[1, (-L + R*T/2)/(L + R*T/2)] \n```", "```py\n>>> numZ, denZ = gbt(tf, T, 0)\n>>> numZ\n[T/L]\n>>> denZ\n[1, (-L + R*T)/L] \n```", "```py\n>>> numZ, denZ = gbt(tf, T, 1)\n>>> numZ\n[T/(L + R*T), 0]\n>>> denZ\n[1, -L/(L + R*T)] \n```", "```py\n>>> numZ, denZ = gbt(tf, T, 0.3)\n>>> numZ\n[3*T/(10*(L + 3*R*T/10)), 7*T/(10*(L + 3*R*T/10))]\n>>> denZ\n[1, (-L + 7*R*T/10)/(L + 3*R*T/10)] \n```", "```py\nsympy.physics.control.lti.bilinear(tf, sample_per)\n```", "```py\n>>> from sympy.physics.control.lti import TransferFunction, bilinear\n>>> from sympy.abc import s, L, R, T \n```", "```py\n>>> tf = TransferFunction(1, s*L + R, s)\n>>> numZ, denZ = bilinear(tf, T)\n>>> numZ\n[T/(2*(L + R*T/2)), T/(2*(L + R*T/2))]\n>>> denZ\n[1, (-L + R*T/2)/(L + R*T/2)] \n```", "```py\nsympy.physics.control.lti.forward_diff(tf, sample_per)\n```", "```py\n>>> from sympy.physics.control.lti import TransferFunction, forward_diff\n>>> from sympy.abc import s, L, R, T \n```", "```py\n>>> tf = TransferFunction(1, s*L + R, s)\n>>> numZ, denZ = forward_diff(tf, T)\n>>> numZ\n[T/L]\n>>> denZ\n[1, (-L + R*T)/L] \n```", "```py\nsympy.physics.control.lti.backward_diff(tf, sample_per)\n```", "```py\n>>> from sympy.physics.control.lti import TransferFunction, backward_diff\n>>> from sympy.abc import s, L, R, T \n```", "```py\n>>> tf = TransferFunction(1, s*L + R, s)\n>>> numZ, denZ = backward_diff(tf, T)\n>>> numZ\n[T/(L + R*T), 0]\n>>> denZ\n[1, -L/(L + R*T)] \n```"]