- en: Simplification
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化
- en: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/simplification.html)
- en: To make this document easier to read, we are going to enable pretty printing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这份文档更易读，我们将启用漂亮的打印输出。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`simplify`'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`simplify`'
- en: Now let’s jump in and do some interesting mathematics. One of the most useful
    features of a symbolic manipulation system is the ability to simplify mathematical
    expressions. SymPy has dozens of functions to perform various kinds of simplification.
    There is also one general function called `simplify()` that attempts to apply
    all of these functions in an intelligent way to arrive at the simplest form of
    an expression. Here are some examples
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们跳进来做一些有趣的数学。符号操作系统最有用的功能之一是简化数学表达式的能力。SymPy有几十个函数来执行各种简化。还有一个名为`简化()`的通用函数，它尝试以智能方式应用所有这些函数，以得到表达式的最简形式。以下是一些示例
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `gamma(x)` is \(\Gamma(x)\), the [gamma function](https://en.wikipedia.org/wiki/Gamma_function).
    We see that `simplify()` is capable of handling a large class of expressions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`gamma(x)`是\(\Gamma(x)\)，即[伽玛函数](https://en.wikipedia.org/wiki/Gamma_function)。我们看到`简化()`能够处理大量的表达式类。
- en: 'But `simplify()` has a pitfall. It just applies all the major simplification
    operations in SymPy, and uses heuristics to determine the simplest result. But
    “simplest” is not a well-defined term. For example, say we wanted to “simplify”
    \(x^2 + 2x + 1\) into \((x + 1)^2\):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但`简化()`存在一个陷阱。它只是应用SymPy中的所有主要简化操作，并使用启发式方法来确定最简结果。但是，“最简”并不是一个明确定义的术语。例如，假设我们想将\(x^2
    + 2x + 1\)“简化”为\((x + 1)^2\)：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We did not get what we want. There is a function to perform this simplification,
    called `factor()`, which will be discussed below.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有得到我们想要的。有一个执行这种简化的函数，称为`factor()`，将在下面讨论。
- en: Another pitfall to `simplify()` is that it can be unnecessarily slow, since
    it tries many kinds of simplifications before picking the best one. If you already
    know exactly what kind of simplification you are after, it is better to apply
    the specific simplification function(s) that apply those simplifications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`简化()`的陷阱是它可能会不必要地慢，因为它在选择最佳选项之前尝试了许多种简化方法。如果您已经确切地知道需要哪种简化，最好应用特定的简化函数来执行这些简化。
- en: Applying specific simplification functions instead of `simplify()` also has
    the advantage that specific functions have certain guarantees about the form of
    their output. These will be discussed with each function below. For example, `factor()`,
    when called on a polynomial with rational coefficients, is guaranteed to factor
    the polynomial into irreducible factors. `simplify()` has no guarantees. It is
    entirely heuristical, and, as we saw above, it may even miss a possible type of
    simplification that SymPy is capable of doing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用特定的简化函数而不是`简化()`还有一个优点，即特定函数对其输出的形式有一定的保证。这些将在每个函数下面讨论。例如，当在具有有理系数的多项式上调用`factor()`时，保证将多项式因式分解为不可约因子。`简化()`没有任何保证。它完全是启发式的，并且如上所示，甚至可能会忽略SymPy能够执行的一种可能简化类型。
- en: '`simplify()` is best when used interactively, when you just want to whittle
    down an expression to a simpler form. You may then choose to apply specific functions
    once you see what `simplify()` returns, to get a more precise result. It is also
    useful when you have no idea what form an expression will take, and you need a
    catchall function to simplify it.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`简化()`在交互式使用时效果最佳，当您只想将表达式简化为更简单的形式时。然后，一旦看到`简化()`的返回结果，您可以选择应用特定函数以获得更精确的结果。当您不知道表达式将采用什么形式时，这也是一个有用的通用函数来简化它。'
- en: Polynomial/Rational Function Simplification
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多项式/有理函数简化
- en: expand
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: expand
- en: '`expand()` is one of the most common simplification functions in SymPy. Although
    it has a lot of scopes, for now, we will consider its function in expanding polynomial
    expressions. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`expand()`是SymPy中最常见的简化函数之一。虽然它有很多用途，但现在我们将考虑它在展开多项式表达式中的功能。例如：'
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Given a polynomial, `expand()` will put it into a canonical form of a sum of
    monomials.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 给定多项式，`expand()`将其放入一组单项式的标准形式。
- en: '`expand()` may not sound like a simplification function. After all, by its
    very name, it makes expressions bigger, not smaller. Usually this is the case,
    but often an expression will become smaller upon calling `expand()` on it due
    to cancellation.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`expand()` 可能听起来不像一个简化函数。毕竟，从其名称来看，它使表达式变大而不是变小。通常情况下确实如此，但经常调用 `expand()`
    后表达式会因为约简而变小。'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: factor
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: factor
- en: '`factor()` takes a polynomial and factors it into irreducible factors over
    the rational numbers. For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`factor()` 接受一个多项式并在有理数域上将其因式分解为不可约因子。例如：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For polynomials, `factor()` is the opposite of `expand()`. `factor()` uses a
    complete multivariate factorization algorithm over the rational numbers, which
    means that each of the factors returned by `factor()` is guaranteed to be irreducible.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多项式，`factor()` 是 `expand()` 的反函数。`factor()` 使用完整的多变量因式分解算法在有理数域上运行，这意味着 `factor()`
    返回的每个因子都保证是不可约的。
- en: If you are interested in the factors themselves, `factor_list` returns a more
    structured output.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对因子本身感兴趣，`factor_list` 返回一个更结构化的输出。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the input to `factor` and `expand` need not be polynomials in the
    strict sense. They will intelligently factor or expand any kind of expression
    (though note that the factors may not be irreducible if the input is no longer
    a polynomial over the rationals).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`factor` 和 `expand` 的输入不一定严格是多项式。它们会智能地因式分解或展开任何类型的表达式（尽管如果输入不再是有理数域上的多项式，则因子可能不是不可约的）。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: collect
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: collect
- en: '`collect()` collects common powers of a term in an expression. For example'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`collect()` 在表达式中收集一个项的公共幂次。例如'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`collect()` is particularly useful in conjunction with the `.coeff()` method.
    `expr.coeff(x, n)` gives the coefficient of `x**n` in `expr`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`collect()` 特别在与 `.coeff()` 方法一起使用时非常有用。`expr.coeff(x, n)` 给出 `expr` 中 `x**n`
    的系数：'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: cancel
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cancel
- en: '`cancel()` will take any rational function and put it into the standard canonical
    form, \(\frac{p}{q}\), where \(p\) and \(q\) are expanded polynomials with no
    common factors, and the leading coefficients of \(p\) and \(q\) do not have denominators
    (i.e., are integers).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancel()` 将任何有理函数放入标准的规范形式 \(\frac{p}{q}\)，其中 \(p\) 和 \(q\) 是没有公因式的展开多项式，并且
    \(p\) 和 \(q\) 的首项系数没有分母（即为整数）。'
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that since `factor()` will completely factorize both the numerator and
    the denominator of an expression, it can also be used to do the same thing:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于 `factor()` 将完全因式分解表达式的分子和分母，因此它也可以用来做同样的事情：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, if you are only interested in making sure that the expression is in
    canceled form, `cancel()` is more efficient than `factor()`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你只关心表达式是否处于约简形式，`cancel()` 比 `factor()` 更有效。
- en: apart
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: apart
- en: '`apart()` performs a [partial fraction decomposition](https://en.wikipedia.org/wiki/Partial_fraction_decomposition)
    on a rational function.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`apart()` 在有理函数上执行[偏分数分解](https://en.wikipedia.org/wiki/Partial_fraction_decomposition)。'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Trigonometric Simplification
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三角函数简化
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SymPy follows Python’s naming conventions for inverse trigonometric functions,
    which is to append an `a` to the front of the function’s name. For example, the
    inverse cosine, or arc cosine, is called `acos()`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 遵循 Python 的反三角函数命名约定，即在函数名前加上 `a`。例如，反余弦或弧余弦称为 `acos()`。
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: trigsimp
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: trigsimp
- en: To simplify expressions using trigonometric identities, use `trigsimp()`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用三角函数恒等式简化表达式，请使用 `trigsimp()`。
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`trigsimp()` also works with hyperbolic trig functions.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`trigsimp()` 也适用于双曲三角函数。'
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Much like `simplify()`, `trigsimp()` applies various trigonometric identities
    to the input expression, and then uses a heuristic to return the “best” one.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `simplify()` 类似，`trigsimp()` 对输入表达式应用各种三角函数恒等式，然后使用启发式算法返回“最佳”表达式。
- en: expand_trig
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: expand_trig
- en: To expand trigonometric functions, that is, apply the sum or double angle identities,
    use `expand_trig()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要展开三角函数，即应用和角或双角恒等式，请使用 `expand_trig()`。
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Because `expand_trig()` tends to make trigonometric expressions larger, and
    `trigsimp()` tends to make them smaller, these identities can be applied in reverse
    using `trigsimp()`
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `expand_trig()` 倾向于使三角函数表达式变大，而 `trigsimp()` 倾向于使其变小，所以可以用 `trigsimp()` 反向应用这些恒等式。
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Powers
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 幂次
- en: Before we introduce the power simplification functions, a mathematical discussion
    on the identities held by powers is in order. There are three kinds of identities
    satisfied by exponents
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们介绍幂简化函数之前，有必要就指数满足的三种恒等式进行数学讨论。
- en: \(x^ax^b = x^{a + b}\)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(x^ax^b = x^{a + b}\)
- en: \(x^ay^a = (xy)^a\)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(x^ay^a = (xy)^a\)
- en: \((x^a)^b = x^{ab}\)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \((x^a)^b = x^{ab}\)
- en: Identity 1 is always true.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 标识 1 总是成立。
- en: Identity 2 is not always true. For example, if \(x = y = -1\) and \(a = \frac{1}{2}\),
    then \(x^ay^a = \sqrt{-1}\sqrt{-1} = i\cdot i = -1\), whereas \((xy)^a = \sqrt{-1\cdot-1}
    = \sqrt{1} = 1\). However, identity 2 is true at least if \(x\) and \(y\) are
    nonnegative and \(a\) is real (it may also be true under other conditions as well).
    A common consequence of the failure of identity 2 is that \(\sqrt{x}\sqrt{y} \neq
    \sqrt{xy}\).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 标识 2 并非总是成立。例如，如果 \(x = y = -1\) 且 \(a = \frac{1}{2}\)，则 \(x^ay^a = \sqrt{-1}\sqrt{-1}
    = i\cdot i = -1\)，而 \((xy)^a = \sqrt{-1\cdot-1} = \sqrt{1} = 1\)。然而，标识 2 至少在 \(x\)
    和 \(y\) 非负且 \(a\) 是实数时成立（它可能在其他条件下也成立）。标识 2 失败的常见后果是 \(\sqrt{x}\sqrt{y} \neq \sqrt{xy}\)。
- en: Identity 3 is not always true. For example, if \(x = -1\), \(a = 2\), and \(b
    = \frac{1}{2}\), then \((x^a)^b = {\left((-1)^2\right)}^{1/2} = \sqrt{1} = 1\)
    and \(x^{ab} = (-1)^{2\cdot1/2} = (-1)^1 = -1\). However, identity 3 is true when
    \(b\) is an integer (again, it may also hold in other cases as well). Two common
    consequences of the failure of identity 3 are that \(\sqrt{x^2}\neq x\) and that
    \(\sqrt{\frac{1}{x}} \neq \frac{1}{\sqrt{x}}\).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 标识 3 并非总是成立。例如，如果 \(x = -1\)，\(a = 2\)，\(b = \frac{1}{2}\)，则 \((x^a)^b = {\left((-1)^2\right)}^{1/2}
    = \sqrt{1} = 1\)，而 \(x^{ab} = (-1)^{2\cdot1/2} = (-1)^1 = -1\)。然而，当 \(b\) 是整数时，标识
    3 成立（同样，在其他情况下也可能成立）。标识 3 失败的两个常见后果是 \(\sqrt{x^2}\neq x\) 和 \(\sqrt{\frac{1}{x}}
    \neq \frac{1}{\sqrt{x}}\)。
- en: To summarize
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: '| Identity | Sufficient conditions to hold | Counterexample when conditions
    are not met | Important consequences |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 标识 | 满足条件的充分条件 | 条件不满足时的反例 | 重要后果 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: \(x^ax^b = x^{a + b}\)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(x^ax^b = x^{a + b}\)
- en: '| Always true | None | None |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 总是成立 | 无 | 无 |'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: \(x^ay^a = (xy)^a\)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(x^ay^a = (xy)^a\)
- en: '| \(x, y \geq 0\) and \(a \in \mathbb{R}\) | \((-1)^{1/2}(-1)^{1/2} \neq (-1\cdot-1)^{1/2}\)
    | \(\sqrt{x}\sqrt{y} \neq \sqrt{xy}\) in general |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| \(x, y \geq 0\) 和 \(a \in \mathbb{R}\) | \((-1)^{1/2}(-1)^{1/2} \neq (-1\cdot-1)^{1/2}\)
    | \(\sqrt{x}\sqrt{y} \neq \sqrt{xy}\) 在一般情况下 |'
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: \((x^a)^b = x^{ab}\)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \((x^a)^b = x^{ab}\)
- en: '| \(b \in \mathbb{Z}\) | \({\left((-1)^2\right)}^{1/2} \neq (-1)^{2\cdot1/2}\)
    | \(\sqrt{x^2}\neq x\) and \(\sqrt{\frac{1}{x}}\neq\frac{1}{\sqrt{x}}\) in general
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| \(b \in \mathbb{Z}\) | \({\left((-1)^2\right)}^{1/2} \neq (-1)^{2\cdot1/2}\)
    | \(\sqrt{x^2}\neq x\) 和 \(\sqrt{\frac{1}{x}}\neq\frac{1}{\sqrt{x}}\) 在一般情况下 |'
- en: This is important to remember, because by default, SymPy will not perform simplifications
    if they are not true in general.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，因为默认情况下，如果在一般情况下简化不成立，SymPy 将不会执行这些简化。
- en: In order to make SymPy perform simplifications involving identities that are
    only true under certain assumptions, we need to put assumptions on our Symbols.
    We will undertake a full discussion of the assumptions system later, but for now,
    all we need to know are the following.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使 SymPy 进行涉及仅在某些假设下才成立的简化，我们需要在符号上加上假设。稍后我们将对假设系统进行全面讨论，但现在我们只需知道以下内容。
- en: By default, SymPy Symbols are assumed to be complex (elements of \(\mathbb{C}\)).
    That is, a simplification will not be applied to an expression with a given Symbol
    unless it holds for all complex numbers.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，SymPy 符号被假定为复数（属于 \(\mathbb{C}\) 的元素）。也就是说，除非对所有复数成立，否则不会对具有给定符号的表达式进行简化。
- en: Symbols can be given different assumptions by passing the assumption to `symbols()`.
    For the rest of this section, we will be assuming that `x` and `y` are positive,
    and that `a` and `b` are real. We will leave `z`, `t`, and `c` as arbitrary complex
    Symbols to demonstrate what happens in that case.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将假设传递给 `symbols()`，可以为符号提供不同的假设。在本节的其余部分中，我们假设 `x` 和 `y` 是正数，`a` 和 `b` 是实数。我们将保留
    `z`、`t` 和 `c` 作为任意复杂符号，以演示在这种情况下会发生什么。
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In SymPy, `sqrt(x)` is just a shortcut to `x**Rational(1, 2)`. They are exactly
    the same object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，`sqrt(x)` 只是 `x**Rational(1, 2)` 的一个快捷方式。它们是完全相同的对象。
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: powsimp
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: powsimp
- en: '`powsimp()` applies identities 1 and 2 from above, from left to right.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`powsimp()` 应用上述标识的 1 和 2 号，从左到右。'
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Notice that `powsimp()` refuses to do the simplification if it is not valid.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果简化不成立，`powsimp()` 将拒绝执行该简化。
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you know that you want to apply this simplification, but you don’t want to
    mess with assumptions, you can pass the `force=True` flag. This will force the
    simplification to take place, regardless of assumptions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道要应用这种简化，但不想涉及假设，可以传递 `force=True` 标志。这将强制进行简化，而不考虑假设。
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that in some instances, in particular, when the exponents are integers
    or rational numbers, and identity 2 holds, it will be applied automatically.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在某些情况下，特别是当指数是整数或有理数，并且恒等式2成立时，它将自动应用。
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This means that it will be impossible to undo this identity with `powsimp()`,
    because even if `powsimp()` were to put the bases together, they would be automatically
    split apart again.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着使用 `powsimp()` 将无法撤销此恒等式，因为即使 `powsimp()` 将基数放在一起，它们也会自动再次分开。
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: expand_power_exp / expand_power_base
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: expand_power_exp / expand_power_base
- en: '`expand_power_exp()` and `expand_power_base()` apply identities 1 and 2 from
    right to left, respectively.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`expand_power_exp()` 和 `expand_power_base()` 分别从右到左应用恒等式1和2。'
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As with `powsimp()`, identity 2 is not applied if it is not valid.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `powsimp()` 类似，如果不成立，则不会应用恒等式2。
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And as with `powsimp()`, you can force the expansion to happen without fiddling
    with assumptions by using `force=True`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `powsimp()` 类似，您可以通过使用 `force=True` 来强制发生扩展，而无需操作假设。
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As with identity 2, identity 1 is applied automatically if the power is a number,
    and hence cannot be undone with `expand_power_exp()`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与恒等式2一样，如果幂是一个数，则恒等式1会自动应用，因此无法通过`expand_power_exp()`来撤销。
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: powdenest
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: powdenest
- en: '`powdenest()` applies identity 3, from left to right.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`powdenest()`从左到右应用恒等式3。'
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As before, the identity is not applied if it is not true under the given assumptions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，如果在给定的假设下恒等式不成立，则不会应用该恒等式。
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: And as before, this can be manually overridden with `force=True`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可以通过`force=True`手动覆盖这一点。
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Exponentials and logarithms
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数和对数
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In SymPy, as in Python and most programming languages, `log` is the natural
    logarithm, also known as `ln`. SymPy automatically provides an alias `ln = log`
    in case you forget this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，就像在 Python 和大多数编程语言中一样，`log` 是自然对数，也称为 `ln`。SymPy 自动提供 `ln = log`
    的别名以防您忘记这一点。
- en: '[PRE35]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Logarithms have similar issues as powers. There are two main identities
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对数与幂具有类似的问题。主要有两个恒等式
- en: \(\log{(xy)} = \log{(x)} + \log{(y)}\)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(\log{(xy)} = \log{(x)} + \log{(y)}\)
- en: \(\log{(x^n)} = n\log{(x)}\)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: \(\log{(x^n)} = n\log{(x)}\)
- en: Neither identity is true for arbitrary complex \(x\) and \(y\), due to the branch
    cut in the complex plane for the complex logarithm. However, sufficient conditions
    for the identities to hold are if \(x\) and \(y\) are positive and \(n\) is real.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于复数对数的分支切割，恒等式对任意复数 \(x\) 和 \(y\) 都不成立。但是，如果 \(x\) 和 \(y\) 是正数，并且 \(n\) 是实数，则恒等式成立的充分条件。
- en: '[PRE36]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As before, `z` and `t` will be Symbols with no additional assumptions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，`z` 和 `t` 将是没有额外假设的符号。
- en: Note that the identity \(\log{\left(\frac{x}{y}\right)} = \log(x) - \log(y)\)
    is a special case of identities 1 and 2 by \(\log{\left(\frac{x}{y}\right)} =\)
    \(\log{\left(x\cdot\frac{1}{y}\right)} =\) \(\log(x) + \log{\left( y^{-1}\right)}
    =\) \(\log(x) - \log(y)\), and thus it also holds if \(x\) and \(y\) are positive,
    but may not hold in general.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，恒等式 \(\log{\left(\frac{x}{y}\right)} = \log(x) - \log(y)\) 是恒等式1和2的一个特殊情况，由
    \(\log{\left(\frac{x}{y}\right)} =\) \(\log{\left(x\cdot\frac{1}{y}\right)} =\)
    \(\log(x) + \log{\left( y^{-1}\right)} =\) \(\log(x) - \log(y)\) 得出，因此如果 \(x\)
    和 \(y\) 是正数，则它也成立，但不一定在一般情况下成立。
- en: We also see that \(\log{\left( e^x \right)} = x\) comes from \(\log{\left( e^x
    \right)} = x\log(e) = x\), and thus holds when \(x\) is real (and it can be verified
    that it does not hold in general for arbitrary complex \(x\), for example, \(\log{\left(e^{x
    + 2\pi i}\right)} = \log{\left(e^x\right)} = x \neq x + 2\pi i\)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到 \(\log{\left( e^x \right)} = x\) 来自 \(\log{\left( e^x \right)} = x\log(e)
    = x\)，因此在 \(x\) 是实数时成立（并且可以验证它对于任意复数 \(x\) 并不总是成立，例如，\(\log{\left(e^{x + 2\pi
    i}\right)} = \log{\left(e^x\right)} = x \neq x + 2\pi i\))。
- en: expand_log
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: expand_log
- en: To apply identities 1 and 2 from left to right, use `expand_log()`. As always,
    the identities will not be applied unless they are valid.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要从左到右应用恒等式1和2，请使用 `expand_log()`。除非它们有效，否则恒等式不会应用。
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As with `powsimp()` and `powdenest()`, `expand_log()` has a `force` option that
    can be used to ignore assumptions.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `powsimp()` 和 `powdenest()` 一样，`expand_log()` 也有一个 `force` 选项，可以用于忽略假设。
- en: '[PRE38]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: logcombine
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: logcombine
- en: To apply identities 1 and 2 from right to left, use `logcombine()`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要从右到左应用恒等式1和2，请使用 `logcombine()`。
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`logcombine()` also has a `force` option that can be used to ignore assumptions.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`logcombine()`还有一个`force`选项，可用于忽略假设。'
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Special Functions
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊函数
- en: SymPy implements dozens of special functions, ranging from functions in combinatorics
    to mathematical physics.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 实现了数十个特殊函数，涵盖从组合数学到数学物理的各种函数。
- en: An extensive list of the special functions included with SymPy and their documentation
    is at the [Functions Module](../../modules/functions/index.html#functions-contents)
    page.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy包含的特殊函数及其文档的详细列表位于[函数模块](../../modules/functions/index.html#functions-contents)页面。
- en: For the purposes of this tutorial, let’s introduce a few special functions in
    SymPy.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本教程的目的，让我们介绍SymPy中的一些特殊函数。
- en: Let’s define `x`, `y`, and `z` as regular, complex Symbols, removing any assumptions
    we put on them in the previous section. We will also define `k`, `m`, and `n`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`x`、`y`和`z`定义为常规复数符号，去除我们在前一节中对它们的任何假设。我们还将定义`k`、`m`和`n`。
- en: '[PRE41]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The [factorial](https://en.wikipedia.org/wiki/Factorial) function is `factorial`.
    `factorial(n)` represents \(n!= 1\cdot2\cdots(n - 1)\cdot n\). \(n!\) represents
    the number of permutations of \(n\) distinct items.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[阶乘](https://en.wikipedia.org/wiki/Factorial)函数是`factorial`。`factorial(n)`代表\(n!=
    1\cdot2\cdots(n - 1)\cdot n\)。\(n!\)表示\(n\)个不同项目的排列数。'
- en: '[PRE42]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The [binomial coefficient](https://en.wikipedia.org/wiki/Binomial_coefficient)
    function is `binomial`. `binomial(n, k)` represents \(\binom{n}{k}\), the number
    of ways to choose \(k\) items from a set of \(n\) distinct items. It is also often
    written as \(nCk\), and is pronounced “\(n\) choose \(k\)”.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[二项式系数](https://en.wikipedia.org/wiki/Binomial_coefficient)函数是`binomial`。`binomial(n,
    k)`代表\(\binom{n}{k}\)，即从\(n\)个不同项目中选择\(k\)个项目的方法数。它通常写作\(nCk\)，发音为“\(n\) choose
    \(k\)”。'
- en: '[PRE43]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The factorial function is closely related to the [gamma function](https://en.wikipedia.org/wiki/Gamma_function),
    `gamma`. `gamma(z)` represents \(\Gamma(z) = \int_0^\infty t^{z - 1}e^{-t}\,dt\),
    which for positive integer \(z\) is the same as \((z - 1)!\).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 阶乘函数与[伽玛函数](https://en.wikipedia.org/wiki/Gamma_function)密切相关，`gamma`。`gamma(z)`表示\(\Gamma(z)
    = \int_0^\infty t^{z - 1}e^{-t}\,dt\)，对于正整数\(z\)，与\((z - 1)!\)相同。
- en: '[PRE44]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The [generalized hypergeometric function](https://en.wikipedia.org/wiki/Generalized_hypergeometric_function)
    is `hyper`. `hyper([a_1, ..., a_p], [b_1, ..., b_q], z)` represents \({}_pF_q\left(\begin{matrix}
    a_1, \cdots, a_p \\ b_1, \cdots, b_q \end{matrix} \middle| z \right)\). The most
    common case is \({}_2F_1\), which is often referred to as the [ordinary hypergeometric
    function](https://en.wikipedia.org/wiki/Hypergeometric_function).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[广义超几何函数](https://en.wikipedia.org/wiki/Generalized_hypergeometric_function)是`hyper`。`hyper([a_1,
    ..., a_p], [b_1, ..., b_q], z)`表示\({}_pF_q\left(\begin{matrix} a_1, \cdots, a_p
    \\ b_1, \cdots, b_q \end{matrix} \middle| z \right)\)。最常见的情况是\({}_2F_1\)，通常称为[普通超几何函数](https://en.wikipedia.org/wiki/Hypergeometric_function)。'
- en: '[PRE45]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: rewrite
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重写
- en: A common way to deal with special functions is to rewrite them in terms of one
    another. This works for any function in SymPy, not just special functions. To
    rewrite an expression in terms of a function, use `expr.rewrite(function)`. For
    example,
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 处理特殊函数的常见方法是将它们重写为彼此的函数。这适用于SymPy中的任何函数，而不仅仅是特殊函数。要将表达式重写为函数形式，请使用`expr.rewrite(function)`。例如，
- en: '[PRE46]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: For some tips on applying more targeted rewriting, see the [Advanced Expression
    Manipulation](manipulation.html#tutorial-manipulation) section.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 关于应用更有针对性的重写的一些提示，请参阅[高级表达式操作](manipulation.html#tutorial-manipulation)部分。
- en: expand_func
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: expand_func
- en: To expand special functions in terms of some identities, use `expand_func()`.
    For example
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据一些恒等式扩展特殊函数，请使用`expand_func()`。例如
- en: '[PRE47]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: hyperexpand
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: hyperexpand
- en: To rewrite `hyper` in terms of more standard functions, use `hyperexpand()`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要用更标准的函数重写`hyper`，请使用`hyperexpand()`。
- en: '[PRE48]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`hyperexpand()` also works on the more general Meijer G-function (see [`its
    documentation`](../../modules/functions/special.html#sympy.functions.special.hyper.meijerg
    "sympy.functions.special.hyper.meijerg") for more information).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`hyperexpand()`还适用于更一般的Meijer G函数（有关更多信息，请参阅[`其文档`](../../modules/functions/special.html#sympy.functions.special.hyper.meijerg
    "sympy.functions.special.hyper.meijerg")）。'
- en: '[PRE49]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: combsimp
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: combsimp
- en: To simplify combinatorial expressions, use `combsimp()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要简化组合表达式，使用`combsimp()`。
- en: '[PRE50]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: gammasimp
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: gammasimp
- en: To simplify expressions with gamma functions or combinatorial functions with
    non-integer argument, use `gammasimp()`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要简化带有伽玛函数或非整数参数的组合函数的表达式，请使用`gammasimp()`。
- en: '[PRE51]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Example: Continued Fractions'
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：连分数
- en: Let’s use SymPy to explore continued fractions. A [continued fraction](https://en.wikipedia.org/wiki/Continued_fraction)
    is an expression of the form
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用SymPy探索连分数。[连分数](https://en.wikipedia.org/wiki/Continued_fraction)是形式为
- en: \[a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 + \cfrac{1}{ \ddots + \cfrac{1}{a_n} }}}\]
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: \[a_0 + \cfrac{1}{a_1 + \cfrac{1}{a_2 + \cfrac{1}{ \ddots + \cfrac{1}{a_n} }}}\]
- en: where \(a_0, \ldots, a_n\) are integers, and \(a_1, \ldots, a_n\) are positive.
    A continued fraction can also be infinite, but infinite objects are more difficult
    to represent in computers, so we will only examine the finite case here.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(a_0, \ldots, a_n\) 是整数，\(a_1, \ldots, a_n\) 是正数。连分数也可以是无限的，但无限对象在计算机中更难表示，因此我们这里只讨论有限情况。
- en: A continued fraction of the above form is often represented as a list \([a_0;
    a_1, \ldots, a_n]\). Let’s write a simple function that converts such a list to
    its continued fraction form. The easiest way to construct a continued fraction
    from a list is to work backwards. Note that despite the apparent symmetry of the
    definition, the first element, \(a_0\), must usually be handled differently from
    the rest.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式的连分数通常表示为一个列表 \([a_0; a_1, \ldots, a_n]\)。让我们写一个简单的函数，将这样的列表转换为其连分数形式。从列表构造连分数的最简单方法是从后向前工作。请注意，尽管定义表面上对称，但第一个元素
    \(a_0\) 通常必须与其他元素不同地处理。
- en: '[PRE52]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We use `Integer(0)` in `list_to_frac` so that the result will always be a SymPy
    object, even if we only pass in Python ints.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `list_to_frac` 中使用 `Integer(0)`，这样即使我们只传入 Python 整数，结果也将始终是一个 SymPy 对象。
- en: '[PRE53]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Every finite continued fraction is a rational number, but we are interested
    in symbolics here, so let’s create a symbolic continued fraction. The `symbols()`
    function that we have been using has a shortcut to create numbered symbols. `symbols('a0:5')`
    will create the symbols `a0`, `a1`, …, `a4`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 每个有限的连分数都是有理数，但在这里我们对符号感兴趣，因此让我们创建一个符号连分数。我们一直在使用的 `symbols()` 函数有一个快捷方式来创建带编号的符号。`symbols('a0:5')`
    将创建符号 `a0`、`a1`，直到 `a4`。
- en: '[PRE54]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This form is useful for understanding continued fractions, but lets put it into
    standard rational function form using `cancel()`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式对于理解连分数很有用，但让我们用 `cancel()` 将其放入标准有理函数形式中。
- en: '[PRE55]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Now suppose we were given `frac` in the above canceled form. In fact, we might
    be given the fraction in any form, but we can always put it into the above canonical
    form with `cancel()`. Suppose that we knew that it could be rewritten as a continued
    fraction. How could we do this with SymPy? A continued fraction is recursively
    \(c + \frac{1}{f}\), where \(c\) is an integer and \(f\) is a (smaller) continued
    fraction. If we could write the expression in this form, we could pull out each
    \(c\) recursively and add it to a list. We could then get a continued fraction
    with our `list_to_frac()` function.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们在上述取消的形式中给出了 `frac`。事实上，我们可能会以任何形式得到分数，但我们总是可以用 `cancel()` 将其转换为上述的标准形式。假设我们知道它可以被重写为一个连分数。我们可以如何使用
    SymPy 做到这一点？一个连分数递归地是 \(c + \frac{1}{f}\)，其中 \(c\) 是一个整数，\(f\) 是一个（较小的）连分数。如果我们能以这种形式写出表达式，我们就可以递归地提取每个
    \(c\) 并添加到一个列表中。然后我们可以用我们的 `list_to_frac()` 函数得到一个连分数。
- en: The key observation here is that we can convert an expression to the form \(c
    + \frac{1}{f}\) by doing a partial fraction decomposition with respect to \(c\).
    This is because \(f\) does not contain \(c\). This means we need to use the `apart()`
    function. We use `apart()` to pull the term out, then subtract it from the expression,
    and take the reciprocal to get the \(f\) part.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键观察是，我们可以通过对 \(c\) 进行部分分解来将一个表达式转换为 \(c + \frac{1}{f}\) 的形式。这是因为 \(f\) 不包含
    \(c\)。这意味着我们需要使用 `apart()` 函数。我们使用 `apart()` 来分离项，然后从表达式中减去它，并取倒数来得到 \(f\) 部分。
- en: '[PRE56]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now we repeat this process
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们重复这个过程。
- en: '[PRE57]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Of course, this exercise seems pointless, because we already know that our `frac`
    is `list_to_frac([a0, a1, a2, a3, a4])`. So try the following exercise. Take a
    list of symbols and randomize them, and create the canceled continued fraction,
    and see if you can reproduce the original list. For example
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个练习似乎毫无意义，因为我们已经知道我们的 `frac` 是 `list_to_frac([a0, a1, a2, a3, a4])`。所以试试以下练习。取一个符号列表并将它们随机化，然后创建被取消的连分数，并看看能否复制原始列表。例如
- en: '[PRE58]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: In SymPy, on the above example, try to reproduce `l` from `frac`. I have deleted
    `l` at the end to remove the temptation for peeking (you can check your answer
    at the end by calling `cancel(list_to_frac(l))` on the list that you generate
    at the end, and comparing it to `orig_frac`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 中，对上面的例子，尝试从 `frac` 复制出 `l`。我已经删除了末尾的 `l` 以消除偷看的诱惑（你可以在最后调用 `cancel(list_to_frac(l))`
    来检查你的答案，并与 `orig_frac` 进行比较。
- en: 'See if you can think of a way to figure out what symbol to pass to `apart()`
    at each stage (hint: think of what happens to \(a_0\) in the formula \(a_0 + \frac{1}{a_1
    + \cdots}\) when it is canceled).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你能否想出在每个阶段传递给 `apart()` 的符号的方法（提示：想想在公式 \(a_0 + \frac{1}{a_1 + \cdots}\) 中
    \(a_0\) 发生了什么）。
