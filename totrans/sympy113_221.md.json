["```py\nclass sympy.physics.quantum.grover.OracleGate(*args, **kwargs)\n```", "```py\n>>> from sympy.physics.quantum.qubit import IntQubit\n>>> from sympy.physics.quantum.qapply import qapply\n>>> from sympy.physics.quantum.grover import OracleGate\n>>> f = lambda qubits: qubits == IntQubit(2)\n>>> v = OracleGate(2, f)\n>>> qapply(v*IntQubit(2))\n-|2>\n>>> qapply(v*IntQubit(3))\n|3> \n```", "```py\nproperty search_function\n```", "```py\nproperty targets\n```", "```py\nclass sympy.physics.quantum.grover.WGate(*args, **kwargs)\n```", "```py\nsympy.physics.quantum.grover.apply_grover(oracle, nqubits, iterations=None)\n```", "```py\n>>> from sympy.physics.quantum.qapply import qapply\n>>> from sympy.physics.quantum.qubit import IntQubit\n>>> from sympy.physics.quantum.grover import apply_grover\n>>> f = lambda qubits: qubits == IntQubit(2)\n>>> qapply(apply_grover(f, 2))\n|2> \n```", "```py\nsympy.physics.quantum.grover.grover_iteration(qstate, oracle)\n```", "```py\n>>> from sympy.physics.quantum.qapply import qapply\n>>> from sympy.physics.quantum.qubit import IntQubit\n>>> from sympy.physics.quantum.grover import OracleGate\n>>> from sympy.physics.quantum.grover import superposition_basis\n>>> from sympy.physics.quantum.grover import grover_iteration\n>>> numqubits = 2\n>>> basis_states = superposition_basis(numqubits)\n>>> f = lambda qubits: qubits == IntQubit(2)\n>>> v = OracleGate(numqubits, f)\n>>> qapply(grover_iteration(basis_states, v))\n|2> \n```", "```py\nsympy.physics.quantum.grover.superposition_basis(nqubits)\n```", "```py\n>>> from sympy.physics.quantum.grover import superposition_basis\n>>> superposition_basis(2)\n|0>/2 + |1>/2 + |2>/2 + |3>/2 \n```"]