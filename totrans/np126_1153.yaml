- en: NumPy 1.16.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.16.0 发行说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.16.0-notes.html](https://numpy.org/doc/1.26/release/1.16.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.16.0-notes.html](https://numpy.org/doc/1.26/release/1.16.0-notes.html)
- en: This NumPy release is the last one to support Python 2.7 and will be maintained
    as a long term release with bug fixes until 2020\. Support for Python 3.4 been
    dropped, the supported Python versions are 2.7 and 3.5-3.7\. The wheels on PyPI
    are linked with OpenBLAS v0.3.4+, which should fix the known threading issues
    found in previous OpenBLAS versions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此 NumPy 版本是最后一个支持 Python 2.7 的版本，并将作为长期维护版本，直到 2020 年有 bug 修复。对 Python 3.4 的支持已经被移除，支持的
    Python 版本为 2.7 和 3.5-3.7。在 PyPI 上的 wheels 与 OpenBLAS v0.3.4+ 链接，应该解决了在之前版本的 OpenBLAS
    中发现的已知线程问题。
- en: Downstream developers building this release should use Cython >= 0.29 and, if
    using OpenBLAS, OpenBLAS > v0.3.4.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 构建此版本的下游开发者应该使用 Cython >= 0.29，并且，如果使用 OpenBLAS，则 OpenBLAS > v0.3.4。
- en: This release has seen a lot of refactoring and features many bug fixes, improved
    code organization, and better cross platform compatibility. Not all of these improvements
    will be visible to users, but they should help make maintenance easier going forward.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本经过大量重构，包含了许多 bug 修复，改进的代码组织和更好的跨平台兼容性。并不是所有这些改进对用户都是可见的，但它们应该有助于未来更轻松地进行维护。
- en: Highlights
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Experimental (opt-in only) support for overriding numpy functions, see `__array_function__`
    below.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 NumPy 函数进行实验性（仅限选择）支持，参见以下的`__array_function__`。
- en: The `matmul` function is now a ufunc. This provides better performance and allows
    overriding with `__array_ufunc__`.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul` 函数现在是一个 ufunc。这提供了更好的性能，并允许使用`__array_ufunc__`进行重写。'
- en: Improved support for the ARM and POWER architectures.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 ARM 和 POWER 架构的改进支持。
- en: Improved support for AIX and PyPy.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 AIX 和 PyPy 的改进支持。
- en: Improved interop with ctypes.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 ctypes 的互操作改进。
- en: Improved support for PEP 3118.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 PEP 3118 的改进支持。
- en: New functions
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新函数
- en: 'New functions added to the *numpy.lib.recfuntions* module to ease the structured
    assignment changes:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 *numpy.lib.recfuntions* 模块添加新的函数以方便结构化赋值的更改：
- en: '`assign_fields_by_name`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assign_fields_by_name`'
- en: ''
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`structured_to_unstructured`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`structured_to_unstructured`'
- en: ''
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`unstructured_to_structured`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unstructured_to_structured`'
- en: ''
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`apply_along_fields`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apply_along_fields`'
- en: ''
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`require_fields`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_fields`'
- en: See the user guide at <[https://docs.scipy.org/doc/numpy/user/basics.rec.html](https://docs.scipy.org/doc/numpy/user/basics.rec.html)>
    for more info.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看用户指南 <[https://docs.scipy.org/doc/numpy/user/basics.rec.html](https://docs.scipy.org/doc/numpy/user/basics.rec.html)>
    获取更多信息。
- en: New deprecations
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的弃用功能
- en: The type dictionaries *numpy.core.typeNA* and *numpy.core.sctypeNA* are deprecated.
    They were buggy and not documented and will be removed in the 1.18 release. Use`numpy.sctypeDict`
    instead.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型字典 *numpy.core.typeNA* 和 *numpy.core.sctypeNA* 已被弃用。它们存在 bug 且未经记录，并将在 1.18
    版本中删除。使用`numpy.sctypeDict`代替。
- en: The *numpy.asscalar* function is deprecated. It is an alias to the more powerful
    [`numpy.ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item"), not tested, and fails for scalars.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.asscalar* 函数已被弃用。它是更强大的[`numpy.ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item")的别名，没有经过测试，对标量失败。'
- en: The *numpy.set_array_ops* and *numpy.get_array_ops* functions are deprecated.
    As part of *NEP 15*, they have been deprecated along with the C-API functions
    [`PyArray_SetNumericOps`](../reference/c-api/array.html#c.PyArray_SetNumericOps
    "PyArray_SetNumericOps") and [`PyArray_GetNumericOps`](../reference/c-api/array.html#c.PyArray_GetNumericOps
    "PyArray_GetNumericOps"). Users who wish to override the inner loop functions
    in built-in ufuncs should use [`PyUFunc_ReplaceLoopBySignature`](../reference/c-api/ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature").
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.set_array_ops* 和 *numpy.get_array_ops* 函数已经被弃用。作为 *NEP 15* 的一部分，它们与
    C-API 函数[`PyArray_SetNumericOps`](../reference/c-api/array.html#c.PyArray_SetNumericOps
    "PyArray_SetNumericOps") 和 [`PyArray_GetNumericOps`](../reference/c-api/array.html#c.PyArray_GetNumericOps
    "PyArray_GetNumericOps") 一同被弃用。希望在内建 ufuncs 中重写内部循环函数的用户应该使用[`PyUFunc_ReplaceLoopBySignature`](../reference/c-api/ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature")。'
- en: The [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") keyword argument `dims` is deprecated, use `shape` instead.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") 关键字参数 `dims` 已被弃用，使用`shape`代替。'
- en: The [`numpy.histogram`](../reference/generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram") `normed` argument is deprecated. It was deprecated previously,
    but no warning was issued.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.histogram`](../reference/generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram") 的 `normed` 参数已被弃用。先前已弃用，但没有发出警告。'
- en: The `positive` operator (`+`) applied to non-numerical arrays is deprecated.
    See below for details.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用于非数值数组的 `positive` 运算符 (`+`) 已被弃用。详细信息请参阅下文。
- en: Passing an iterator to the stack functions is deprecated
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将迭代器传递给栈函数已被弃用
- en: Expired deprecations
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用
- en: NaT comparisons now return `False` without a warning, finishing a deprecation
    cycle begun in NumPy 1.11.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NaT 比较现在返回 `False`，不需要警告，结束了 NumPy 1.11 开始的弃用周期。
- en: '`np.lib.function_base.unique` was removed, finishing a deprecation cycle begun
    in NumPy 1.4\. Use [`numpy.unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique") instead.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.lib.function_base.unique` 已被移除，结束了 NumPy 1.4 开始的弃用周期。使用 [`numpy.unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique") 代替。'
- en: multi-field indexing now returns views instead of copies, finishing a deprecation
    cycle begun in NumPy 1.7\. The change was previously attempted in NumPy 1.14 but
    reverted until now.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在多字段索引返回视图而不是副本，结束了 NumPy 1.7 开始的弃用周期。此更改先前在 NumPy 1.14 中尝试，但现在被恢复。
- en: '`np.PackageLoader` and `np.pkgload` have been removed. These were deprecated
    in 1.10, had no tests, and seem to no longer work in 1.15.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.PackageLoader` 和 `np.pkgload` 已被移除。这些在 1.10 中已弃用，没有测试，并且在 1.15 中似乎不再起作用。'
- en: Future changes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的变化
- en: NumPy 1.17 will drop support for Python 2.7.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.17 将不再支持 Python 2.7。
- en: Compatibility notes
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: f2py script on Windows
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 上的 f2py 脚本
- en: On Windows, the installed script for running f2py is now an `.exe` file rather
    than a `*.py` file and should be run from the command line as `f2py` whenever
    the `Scripts` directory is in the path. Running `f2py` as a module `python -m
    numpy.f2py [...]` will work without path modification in any version of NumPy.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，用于运行 f2py 的安装脚本现在是一个`.exe`文件，而不是一个 `*.py` 文件，应该在命令行中作为 `f2py` 运行，只要
    `Scripts` 目录在路径中。在任何版本的 NumPy 中，在不修改路径的情况下作为模块 `python -m numpy.f2py [...]` 运行
    `f2py` 将可以正常工作。
- en: NaT comparisons
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NaT 比较
- en: Consistent with the behavior of NaN, all comparisons other than inequality checks
    with datetime64 or timedelta64 NaT (“not-a-time”) values now always return `False`,
    and inequality checks with NaT now always return `True`. This includes comparisons
    between NaT values. For compatibility with the old behavior, use `np.isnat` to
    explicitly check for NaT or convert datetime64/timedelta64 arrays with `.astype(np.int64)`
    before making comparisons.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NaN 的行为一致，除了与 datetime64 或 timedelta64 NaT（“非时间”）值的不等式检查外的所有比较现在始终返回 `False`，并且与
    NaT 的不等式检查现在始终返回 `True`。这包括 NaT 值之间的比较。为了与旧行为兼容，使用 `np.isnat` 明确检查 NaT，或在进行比较前使用
    `.astype(np.int64)` 将 datetime64/timedelta64 数组转换。
- en: complex64/128 alignment has changed
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: complex64/128 对齐方式已更改
- en: The memory alignment of complex types is now the same as a C-struct composed
    of two floating point values, while before it was equal to the size of the type.
    For many users (for instance on x64/unix/gcc) this means that complex64 is now
    4-byte aligned instead of 8-byte aligned. An important consequence is that aligned
    structured dtypes may now have a different size. For instance, `np.dtype('c8,u1',
    align=True)` used to have an itemsize of 16 (on x64/gcc) but now it is 12.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 复数类型的内存对齐现在与由两个浮点值组成的 C-struct 相同，而以前等于类型的大小。对于许多用户（例如 x64/unix/gcc）来说，这意味着
    complex64 现在是 4 字节对齐而不是 8 字节对齐。一个重要的结果是对齐的结构化 dtype 现在可能具有不同的大小。例如，`np.dtype('c8,u1',
    align=True)` 在以前的 x64/gcc 上的 itemsize 为 16，但现在是 12。
- en: More in detail, the complex64 type now has the same alignment as a C-struct
    `struct {float r, i;}`, according to the compiler used to compile numpy, and similarly
    for the complex128 and complex256 types.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说，complex64 类型现在具有与 C 结构 `struct {float r, i;}` 相同的对齐方式，根据用于编译 numpy 的编译器，complex128
    和 complex256 类型类似。
- en: nd_grid __len__ removal
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: nd_grid __len__ 已移除
- en: '`len(np.mgrid)` and `len(np.ogrid)` are now considered nonsensical and raise
    a `TypeError`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`len(np.mgrid)` 和 `len(np.ogrid)` 现在被认为是荒谬的，并引发了 `TypeError`。'
- en: '`np.unravel_index` now accepts `shape` keyword argument'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unravel_index` 现在接受 `shape` 关键字参数'
- en: Previously, only the `dims` keyword argument was accepted for specification
    of the shape of the array to be used for unraveling. `dims` remains supported,
    but is now deprecated.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，只接受 `dims` 关键字参数来指定用于展开的数组形状。`dims` 仍然受支持，但现在已被弃用。
- en: multi-field views return a view instead of a copy
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多字段视图返回视图而不是副本
- en: Indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    often have extra padding bytes corresponding to intervening fields in the original
    array, unlike before, which will affect code such as `arr[['f1', 'f3']].view('float64')`.
    This change has been planned since numpy 1.7\. Operations hitting this path have
    emitted `FutureWarnings` since then. Additional `FutureWarnings` about this change
    were added in 1.12.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 索引有多个字段的结构化数组，例如，`arr[['f1', 'f3']]`，会返回原始数组的视图，而不是副本。返回的视图通常会有额外的填充字节，对应原始数组中的介入字段，与以往不同，这将会影响如`arr[['f1',
    'f3']].view('float64')`的代码。自从numpy 1.7起，操作会生成`FutureWarnings`。此更改于1.12版中添加了关于此更改的额外`FutureWarnings`。
- en: To help users update their code to account for these changes, a number of functions
    have been added to the `numpy.lib.recfunctions` module which safely allow such
    operations. For instance, the code above can be replaced with `structured_to_unstructured(arr[['f1',
    'f3']], dtype='float64')`. See the “accessing multiple fields” section of the
    [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为帮助用户更新其代码以适应这些更改，已添加了一些功能到`numpy.lib.recfunctions`模块，该模块可以安全地允许这样的操作。例如，上面的代码可以替换为`structured_to_unstructured(arr[['f1',
    'f3']], dtype='float64')`。请参阅[用户指南](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields)中的“访问多个字段”部分。
- en: C API changes
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API更改
- en: 'The [`NPY_FEATURE_VERSION`](../reference/c-api/array.html#c.NPY_FEATURE_VERSION
    "NPY_FEATURE_VERSION") was incremented to 0x0000D, due to the addition of:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NPY_FEATURE_VERSION`](../reference/c-api/array.html#c.NPY_FEATURE_VERSION
    "NPY_FEATURE_VERSION")因新增内容而增加到0x0000D：'
- en: '[`PyUFuncObject.core_dim_flags`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_flags
    "PyUFuncObject.core_dim_flags")'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.core_dim_flags`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_flags
    "PyUFuncObject.core_dim_flags")'
- en: '[`PyUFuncObject.core_dim_sizes`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_sizes
    "PyUFuncObject.core_dim_sizes")'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.core_dim_sizes`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_sizes
    "PyUFuncObject.core_dim_sizes")'
- en: '[`PyUFuncObject.identity_value`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.identity_value
    "PyUFuncObject.identity_value")'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.identity_value`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.identity_value
    "PyUFuncObject.identity_value")'
- en: '[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")'
- en: New Features
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Integrated squared error (ISE) estimator added to `histogram`
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram`中添加了绝对平方误差（ISE）估计器'
- en: This method (`bins='stone'`) for optimizing the bin number is a generalization
    of the Scott’s rule. The Scott’s rule assumes the distribution is approximately
    Normal, while the [ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)
    is a non-parametric method based on cross-validation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 用于优化bin数量的`bins='stone'`方法是Scott's法则的一般化。Scott's法则假定分布大致为正态分布，而[ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)是一种基于交叉验证的非参数方法。
- en: '`max_rows` keyword added for `np.loadtxt`'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.loadtxt`添加了`max_rows`关键字'
- en: New keyword `max_rows` in [`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt
    "numpy.loadtxt") sets the maximum rows of the content to be read after `skiprows`,
    as in [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")中的新关键字`max_rows`设置了在`skiprows`后读取的内容的最大行数，如[`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")中一样。'
- en: modulus operator support added for `np.timedelta64` operands
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.timedelta64`操作数的模数运算符支持添加'
- en: The modulus (remainder) operator is now supported for two operands of type `np.timedelta64`.
    The operands may have different units and the return value will match the type
    of the operands.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在支持两个`np.timedelta64`类型操作数的模数（余数）操作符。操作数可以具有不同的单位，返回值将与操作数的类型匹配。
- en: Improvements
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: no-copy pickling of numpy arrays
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy数组的无拷贝pickle
- en: Up to protocol 4, numpy array pickling created 2 spurious copies of the data
    being serialized. With pickle protocol 5, and the `PickleBuffer` API, a large
    variety of numpy arrays can now be serialized without any copy using out-of-band
    buffers, and with one less copy using in-band buffers. This results, for large
    arrays, in an up to 66% drop in peak memory usage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到协议4为止，numpy数组拾取会创建2个数据被序列化的虚假副本。使用pickle协议5和`PickleBuffer` API，现在可以序列化大多数numpy数组，而无需使用带外缓冲区进行任何复制，使用带内缓冲区进行1次少复制。对于大型数组，这将导致内存使用峰值下降高达66%。
- en: build shell independence
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建shell独立性
- en: NumPy builds should no longer interact with the host machine shell directly.
    `exec_command` has been replaced with `subprocess.check_output` where appropriate.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy构建现在不应再直接与主机机器shell交互。在适当的地方，`exec_command`已被替换为`subprocess.check_output`。
- en: '*np.polynomial.Polynomial* classes render in LaTeX in Jupyter notebooks'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.polynomial.Polynomial* 类在Jupyter笔记本中以LaTeX呈现'
- en: When used in a front-end that supports it, *Polynomial* instances are now rendered
    through LaTeX. The current format is experimental, and is subject to change.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持的前端中使用时，*Polynomial*实例现在通过LaTeX呈现。当前格式是试验性的，可能会更改。
- en: '`randint` and `choice` now work on empty distributions'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`randint`和`choice`现在适用于空分布'
- en: Even when no elements needed to be drawn, `np.random.randint` and `np.random.choice`
    raised an error when the arguments described an empty distribution. This has been
    fixed so that e.g. `np.random.choice([], 0) == np.array([], dtype=float64)`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不需要绘制任何元素，当参数描述空分布时，`np.random.randint`和`np.random.choice`会引发错误。已修复此问题，以便例如`np.random.choice([],
    0) == np.array([], dtype=float64)`。
- en: '`linalg.lstsq`, `linalg.qr`, and `linalg.svd` now work with empty arrays'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.lstsq`、`linalg.qr`和`linalg.svd`现在可以使用空数组'
- en: Previously, a `LinAlgError` would be raised when an empty matrix/empty matrices
    (with zero rows and/or columns) is/are passed in. Now outputs of appropriate shapes
    are returned.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当传递空矩阵/空矩阵（行和/或列为零）时，会引发`LinAlgError`。现在将返回适当形状的输出。
- en: Chain exceptions to give better error messages for invalid PEP3118 format strings
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链式异常，以提供更好的无效PEP3118格式字符串错误消息
- en: This should help track down problems.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该有助于跟踪问题。
- en: Einsum optimization path updates and efficiency improvements
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum优化路径更新和效率改进
- en: Einsum was synchronized with the current upstream work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Einsum与当前上游工作同步。
- en: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")
    and [`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims") now work on `ndarray` subclasses'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")
    和 [`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims") 现在适用于`ndarray`子类'
- en: In particular, they now work for masked arrays.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是它们现在适用于屏蔽数组。
- en: '`NPY_NO_DEPRECATED_API` compiler warning suppression'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抑制`NPY_NO_DEPRECATED_API`编译器警告
- en: Setting `NPY_NO_DEPRECATED_API` to a value of 0 will suppress the current compiler
    warnings when the deprecated numpy API is used.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将`NPY_NO_DEPRECATED_API`设置为0将抑制当使用了已弃用的numpy API时的当前编译器警告。
- en: '`np.diff` Added kwargs prepend and append'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.diff` 添加了kwargs prepend和append'
- en: New kwargs `prepend` and `append`, allow for values to be inserted on either
    end of the differences. Similar to options for *ediff1d*. Now the inverse of *cumsum*
    can be obtained easily via `prepend=0`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 新kwargs `prepend`和`append`，允许在差异的任一端插入值。类似于*ediff1d*的选项。现在可以通过`prepend=0`轻松地获得*cumsum*的逆。
- en: ARM support updated
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新了ARM支持
- en: Support for ARM CPUs has been updated to accommodate 32 and 64 bit targets,
    and also big and little endian byte ordering. AARCH32 memory alignment issues
    have been addressed. CI testing has been expanded to include AARCH64 targets via
    the services of shippable.com.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 更新了对ARM CPU的支持，以适应32位和64位目标，以及大端和小端字节顺序。已解决AARCH32内存对齐问题。CI测试已扩展，以包括通过shippable.com的AARCH64目标服务。
- en: Appending to build flags
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加构建标志
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to *LDFLAGS* and other similar such
    environment variables for compiling Fortran extensions. Now, if the *NPY_DISTUTILS_APPEND_FLAGS*
    environment variable is set to 1, the behavior will be appending. This applied
    to: *LDFLAGS*, *F77FLAGS*, *F90FLAGS*, *FREEFLAGS*, *FOPT*, *FDEBUG*, and *FFLAGS*.
    See gh-11525 for more details.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")总是覆盖而不是追加
    *LDFLAGS* 和其他类似的用于编译Fortran扩展的环境变量。现在，如果将 *NPY_DISTUTILS_APPEND_FLAGS*环境变量设置为1，则行为将会追加。这适用于：*LDFLAGS*、*F77FLAGS*、*F90FLAGS*、*FREEFLAGS*、*FOPT*、*FDEBUG*
    和 *FFLAGS*。有关更多详细信息，请参见gh-11525。'
- en: Generalized ufunc signatures now allow fixed-size dimensions
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc签名现在允许固定大小的维度
- en: By using a numerical value in the signature of a generalized ufunc, one can
    indicate that the given function requires input or output to have dimensions with
    the given size. E.g., the signature of a function that converts a polar angle
    to a two-dimensional cartesian unit vector would be `()->(2)`; that for one that
    converts two spherical angles to a three-dimensional unit vector would be `(),()->(3)`;
    and that for the cross product of two three-dimensional vectors would be `(3),(3)->(3)`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在广义ufunc的签名中使用数值，可以指示给定函数需要输入或输出具有给定大小的维度。例如，将极坐标角转换为二维笛卡尔单位向量的函数的签名为`()->(2)`；将两个球面角转换为三维单位向量的函数的签名为`(),()->(3)`；将两个三维向量的叉乘的函数的签名为`(3),(3)->(3)`。
- en: Note that to the elementary function these dimensions are not treated any differently
    from variable ones indicated with a name starting with a letter; the loop still
    is passed the corresponding size, but it can now count on that size being equal
    to the fixed one given in the signature.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于元素函数而言，这些维度并不会受到任何与以字母开头的名称指示的变量不同的对待；循环仍然传递相应的大小，但现在可以依赖于该大小与签名中给定的固定大小相等。
- en: Generalized ufunc signatures now allow flexible dimensions
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义通用函数签名现在允许灵活的维度
- en: Some functions, in particular numpy’s implementation of `@` as `matmul`, are
    very similar to generalized ufuncs in that they operate over core dimensions,
    but one could not present them as such because they were able to deal with inputs
    in which a dimension is missing. To support this, it is now allowed to postfix
    a dimension name with a question mark to indicate that the dimension does not
    necessarily have to be present.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数，特别是numpy将`@` 实现为`matmul`的实现，与广义ufunc非常相似，因为它们在核心维度上操作，但由于它们能够处理输入的维度缺失，所以无法将它们呈现为这种形式。为了支持这一点，现在允许在维度名称后面加上一个问号，以指示该维度不一定要存在。
- en: With this addition, the signature for `matmul` can be expressed as `(m?,n),(n,p?)->(m?,p?)`.
    This indicates that if, e.g., the second operand has only one dimension, for the
    purposes of the elementary function it will be treated as if that input has core
    shape `(n, 1)`, and the output has the corresponding core shape of `(m, 1)`. The
    actual output array, however, has the flexible dimension removed, i.e., it will
    have shape `(..., m)`. Similarly, if both arguments have only a single dimension,
    the inputs will be presented as having shapes `(1, n)` and `(n, 1)` to the elementary
    function, and the output as `(1, 1)`, while the actual output array returned will
    have shape `()`. In this way, the signature allows one to use a single elementary
    function for four related but different signatures, `(m,n),(n,p)->(m,p)`, `(n),(n,p)->(p)`,
    `(m,n),(n)->(m)` and `(n),(n)->()`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这一变化，`matmul`的签名可以表示为`(m?,n),(n,p?)->(m?,p?)`。这表明，例如，如果第二个操作数只有一个维度，那么对于元素函数来说，将会被视为该输入具有核心形状`(n,
    1)`，并且输出具有相应的核心形状`(m, 1)`。然而，实际的输出数组会移除灵活的维度，也就是说，它将具有形状`(..., m)`。同样，如果两个参数只有一个维度，那么输入将被呈现为具有形状`(1,
    n)`和`(n, 1)`的元素函数，并且输出为`(1, 1)`，而实际的输出数组将具有形状`()`。通过这种方式，该签名允许使用一个单一的元素函数来处理四个相关但不同的签名，`(m,n),(n,p)->(m,p)`，`(n),(n,p)->(p)`，`(m,n),(n)->(m)`和`(n),(n)->()`。
- en: '`np.clip` and the `clip` method check for memory overlap'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.clip`和`clip`方法检查内存重叠'
- en: The `out` argument to these functions is now always tested for memory overlap
    to avoid corrupted results when memory overlap occurs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些函数的`out`参数现在始终进行内存重叠测试，以避免在发生内存重叠时出现损坏的结果。
- en: New value `unscaled` for option `cov` in `np.polyfit`
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`np.polyfit`中选项`cov`的新值`unscaled`
- en: A further possible value has been added to the `cov` parameter of the `np.polyfit`
    function. With `cov='unscaled'` the scaling of the covariance matrix is disabled
    completely (similar to setting `absolute_sigma=True` in `scipy.optimize.curve_fit`).
    This would be useful in occasions, where the weights are given by 1/sigma with
    sigma being the (known) standard errors of (Gaussian distributed) data points,
    in which case the unscaled matrix is already a correct estimate for the covariance
    matrix.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.polyfit`函数的`cov`参数现在增加了一个可能的值。使用`cov=''unscaled''`将完全禁用协方差矩阵的缩放（类似于在`scipy.optimize.curve_fit`中设置`absolute_sigma=True`）。在数据点的（已知）标准误差为1/σ（σ为高斯分布）时，无缩放矩阵已经是协方差矩阵的正确估计，因此这对于一些情况非常有用。'
- en: Detailed docstrings for scalar numeric types
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量数值类型的详细文档字符串
- en: The `help` function, when applied to numeric types such as [`numpy.intc`](../reference/arrays.scalars.html#numpy.intc
    "numpy.intc"), [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_ "numpy.int_"),
    and [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong"),
    now lists all of the aliased names for that type, distinguishing between platform
    -dependent and -independent aliases.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于诸如[`numpy.intc`](../reference/arrays.scalars.html#numpy.intc "numpy.intc")、[`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_")和[`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong")等数值类型时，`help`函数现在列出该类型的所有别名，区分平台相关和平台无关的别名。
- en: '`__module__` attribute now points to public modules'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__module__`属性现在指向公共模块'
- en: The `__module__` attribute on most NumPy functions has been updated to refer
    to the preferred public module from which to access a function, rather than the
    module in which the function happens to be defined. This produces more informative
    displays for functions in tools such as IPython, e.g., instead of `<function 'numpy.core.fromnumeric.sum'>`
    you now see `<function 'numpy.sum'>`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 NumPy 函数的`__module__`属性已更新，以指向首选的公共模块，而不是函数所在的模块。这会使 IPython 等工具中的函数显示更加详细，例如，现在你会看到`<function
    'numpy.sum'>`而不是`<function 'numpy.core.fromnumeric.sum'>`。
- en: Large allocations marked as suitable for transparent hugepages
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记为适用于透明大页的大内存分配
- en: On systems that support transparent hugepages over the madvise system call numpy
    now marks that large memory allocations can be backed by hugepages which reduces
    page fault overhead and can in some fault heavy cases improve performance significantly.
    On Linux the setting for huge pages to be used, */sys/kernel/mm/transparent_hugepage/enabled*,
    must be at least *madvise*. Systems which already have it set to *always* will
    not see much difference as the kernel will automatically use huge pages where
    appropriate.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持通过 madvise 系统调用的透明超大页的系统上，numpy 现在标记大内存分配可以由超大页支持，从而减少页面错误开销，并在某些错误密集的情况下显着提高性能。在
    Linux 上，用于使用超大页的设置为*/sys/kernel/mm/transparent_hugepage/enabled*，必须至少为*madvise*。已经将其设置为*always*的系统将看不到太大的区别，因为内核会自动在适当的情况下使用超大页。
- en: Users of very old Linux kernels (~3.x and older) should make sure that */sys/kernel/mm/transparent_hugepage/defrag*
    is not set to *always* to avoid performance problems due concurrency issues in
    the memory defragmentation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非常老的 Linux 内核（~3.x及更旧）的用户应确保*/sys/kernel/mm/transparent_hugepage/defrag*未设置为*always*，以避免由内存碎片整理并发问题导致的性能问题。
- en: Alpine Linux (and other musl c library distros) support
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Alpine Linux（和其他 musl c 类库版）支持
- en: We now default to use *fenv.h* for floating point status error reporting. Previously
    we had a broken default that sometimes would not report underflow, overflow, and
    invalid floating point operations. Now we can support non-glibc distributions
    like Alpine Linux as long as they ship *fenv.h*.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，默认使用 *fenv.h* 进行浮点状态错误报告。以前，我们的默认设置有时不会报告下溢、上溢和无效的浮点运算。现在我们可以支持像 Alpine Linux
    这样的非 glibc 发行版，只要它们提供 *fenv.h*。
- en: Speedup `np.block` for large arrays
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为大数组加速`np.block`
- en: Large arrays (greater than `512 * 512`) now use a blocking algorithm based on
    copying the data directly into the appropriate slice of the resulting array. This
    results in significant speedups for these large arrays, particularly for arrays
    being blocked along more than 2 dimensions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 大数组（大于`512 * 512`）现在使用基于直接复制数据到结果数组适当切片的分块算法。这对于这些大数组产生了显著的加速，特别是对于沿超过2个维度分块的数组。
- en: '`arr.ctypes.data_as(...)` holds a reference to arr'
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`arr.ctypes.data_as(...)`保存对 arr 的引用'
- en: Previously the caller was responsible for keeping the array alive for the lifetime
    of the pointer.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，调用者负责在指针的生命周期内保持数组的存活。
- en: Speedup `np.take` for read-only arrays
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加快了只读数组的 `np.take`
- en: The implementation of `np.take` no longer makes an unnecessary copy of the source
    array when its `writeable` flag is set to `False`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `writeable` 标志设置为 `False` 时，`np.take` 的实现不再不必要地复制源数组。
- en: Support path-like objects for more functions
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多函数支持类似路径的对象
- en: The `np.core.records.fromfile` function now supports `pathlib.Path` and other
    path-like objects in addition to a file object. Furthermore, the `np.load` function
    now also supports path-like objects when using memory mapping (`mmap_mode` keyword
    argument).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文件对象外，`np.core.records.fromfile` 函数现在还支持 `pathlib.Path` 和其他类似路径的对象。此外，当使用内存映射（`mmap_mode`
    关键字参数）时，`np.load` 函数现在也支持类似路径的对象。
- en: Better behaviour of ufunc identities during reductions
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在减少期间，ufunc的行为更好的identity
- en: Universal functions have an `.identity` which is used when `.reduce` is called
    on an empty axis.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有一个 `.identity`，在对空轴进行`.reduce` 时使用。
- en: As of this release, the logical binary ufuncs, *logical_and*, *logical_or*,
    and *logical_xor*, now have `identity` s of type *bool*, where previously they
    were of type *int*. This restores the 1.14 behavior of getting `bool` s when reducing
    empty object arrays with these ufuncs, while also keeping the 1.15 behavior of
    getting `int` s when reducing empty object arrays with arithmetic ufuncs like
    `add` and `multiply`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从此版本开始，逻辑二进制 ufunc，*logical_and*、*logical_or* 和 *logical_xor*，现在都具有 *bool* 类型的
    `identity`，而以前它们是 *int* 类型。这恢复了在使用这些 ufunc 减少空对象数组时获得 `bool` 的1.14行为，同时也保持了使用算术ufunc（如
    `add` 和 `multiply`）减少空对象数组时获得 `int` 的1.15行为。
- en: Additionally, *logaddexp* now has an identity of `-inf`, allowing it to be called
    on empty sequences, where previously it could not be.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*logaddexp* 现在具有 `-inf` 的标识，允许它在空序列上调用，而以前是不允许的。
- en: This is possible thanks to the new [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"), which allows arbitrary values
    to be used as identities now.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这得益于新的 [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")，它现在允许任意值被用作标识。
- en: Improved conversion from ctypes objects
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了从 ctypes 对象的转换
- en: 'Numpy has always supported taking a value or type from `ctypes` and converting
    it into an array or dtype, but only behaved correctly for simpler types. As of
    this release, this caveat is lifted - now:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 一直支持从 `ctypes` 中获取值或类型，并将其转换为数组或数据类型，但只对较简单的类型行为正确。从这个版本开始，这个警告被解除了——现在：
- en: The `_pack_` attribute of `ctypes.Structure`, used to emulate C’s `__attribute__((packed))`,
    is respected.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctypes.Structure` 的 `_pack_` 属性，用于模拟 C 的 `__attribute__((packed))`，受到尊重。'
- en: Endianness of all ctypes objects is preserved
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 ctypes 对象的字节顺序都得到保留
- en: '`ctypes.Union` is supported'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctypes.Union` 得到支持'
- en: 'Non-representable constructs raise exceptions, rather than producing dangerously
    incorrect results:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可表示的结构将引发异常，而不是产生危险的不正确结果：
- en: Bitfields are no longer interpreted as sub-arrays
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位字段不再被解释为子数组
- en: Pointers are no longer replaced with the type that they point to
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针不再被指向类型所替换
- en: A new `ndpointer.contents` member
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个新的 `ndpointer.contents` 成员
- en: This matches the `.contents` member of normal ctypes arrays, and can be used
    to construct an `np.array` around the pointers contents. This replaces `np.array(some_nd_pointer)`,
    which stopped working in 1.15\. As a side effect of this change, `ndpointer` now
    supports dtypes with overlapping fields and padding.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这与普通ctypes数组的`.contents`成员相匹配，并可用于在指针的内容周围构建一个 `np.array`。这代替了`np.array(some_nd_pointer)`，该方法在1.15中停止。作为此更改的副作用，`ndpointer`
    现在支持具有重叠字段和填充的数据类型。
- en: '`matmul` is now a `ufunc`'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`matmul` 现在是一个 `ufunc`'
- en: '[`numpy.matmul`](../reference/generated/numpy.matmul.html#numpy.matmul "numpy.matmul")
    is now a ufunc which means that both the function and the `__matmul__` operator
    can now be overridden by `__array_ufunc__`. Its implementation has also changed.
    It uses the same BLAS routines as [`numpy.dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), ensuring its performance is similar for large matrices.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.matmul`](../reference/generated/numpy.matmul.html#numpy.matmul "numpy.matmul")
    现在是一个 ufunc，这意味着函数和 `__matmul__` 运算符现在都可以通过 `__array_ufunc__` 进行覆盖。它的实现也已经改变。它使用与
    [`numpy.dot`](../reference/generated/numpy.dot.html#numpy.dot "numpy.dot") 相同的BLAS例程，确保其在大矩阵的性能上类似。'
- en: Start and stop arrays for `linspace`, `logspace` and `geomspace`
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linspace`，`logspace`和`geomspace`的起始和停止数组'
- en: These functions used to be limited to scalar stop and start values, but can
    now take arrays, which will be properly broadcast and result in an output which
    has one axis prepended. This can be used, e.g., to obtain linearly interpolated
    points between sets of points.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数以前仅限于标量停止和开始值，但现在可以接受数组，这些数组将得到适当广播，并导致输出结果的一轴被添加。例如，这可以用于在数据点集之间获取线性插值点。
- en: CI extended with additional services
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CI扩展了额外的服务
- en: 'We now use additional free CI services, thanks to the companies that provide:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在使用额外的免费CI服务，感谢提供服务的公司：
- en: Codecoverage testing via codecov.io
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过codecov.io进行代码覆盖测试
- en: Arm testing via shippable.com
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过shippable.com进行Arm测试
- en: Additional test runs on azure pipelines
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在azure pipelines上进行额外测试运行
- en: These are in addition to our continued use of travis, appveyor (for wheels)
    and LGTM
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们持续使用travis，appveyor（用于wheels）和LGTM
- en: Changes
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变化
- en: Comparison ufuncs will now error rather than return NotImplemented
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较ufunc现在将出错而不是返回NotImplemented
- en: Previously, comparison ufuncs such as `np.equal` would return *NotImplemented*
    if their arguments had structured dtypes, to help comparison operators such as
    `__eq__` deal with those. This is no longer needed, as the relevant logic has
    moved to the comparison operators proper (which thus do continue to return *NotImplemented*
    as needed). Hence, like all other ufuncs, the comparison ufuncs will now error
    on structured dtypes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，诸如`np.equal`的比较ufunc如果它们的参数具有结构化dtype，将返回*NotImplemented*，以帮助比较运算符如`__eq__`处理它们。这不再需要，因为相关逻辑已移动到比较运算符本身（因此碰到需要时，它们会继续返回*NotImplemented*）。因此，与所有其他ufunc一样，比较ufunc现在将在结构化dtype上出错。
- en: Positive will now raise a deprecation warning for non-numerical arrays
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`positive`现在对非数字数组会引发弃用警告'
- en: Previously, `+array` unconditionally returned a copy. Now, it will raise a `DeprecationWarning`
    if the array is not numerical (i.e., if `np.positive(array)` raises a `TypeError`.
    For `ndarray` subclasses that override the default `__array_ufunc__` implementation,
    the `TypeError` is passed on.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`+array`无条件返回一个副本。现在，如果数组不是数值（即如果`np.positive(array)`引发`TypeError`），它将引发`DeprecationWarning`。对于重写默认`__array_ufunc__`实现的`ndarray`子类，`TypeError`将被传递。
- en: '`NDArrayOperatorsMixin` now implements matrix multiplication'
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin`现在实现了矩阵乘法'
- en: Previously, `np.lib.mixins.NDArrayOperatorsMixin` did not implement the special
    methods for Python’s matrix multiplication operator (`@`). This has changed now
    that `matmul` is a ufunc and can be overridden using `__array_ufunc__`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.lib.mixins.NDArrayOperatorsMixin`未实现Python矩阵乘法运算符（`@`）的特殊方法。现在随着`matmul`成为ufunc并可以使用`__array_ufunc__`进行覆盖，情况已发生改变。
- en: The scaling of the covariance matrix in `np.polyfit` is different
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`np.polyfit`中协方差矩阵的缩放不同
- en: So far, `np.polyfit` used a non-standard factor in the scaling of the the covariance
    matrix. Namely, rather than using the standard `chisq/(M-N)`, it scaled it with
    `chisq/(M-N-2)` where M is the number of data points and N is the number of parameters.
    This scaling is inconsistent with other fitting programs such as e.g. `scipy.optimize.curve_fit`
    and was changed to `chisq/(M-N)`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`np.polyfit`在缩放协方差矩阵时使用了非标准因子。即，它不是使用标准的`chisq/(M-N)`，而是使用`chisq/(M-N-2)`进行缩放，其中M是数据点的数量，N是参数的数量。这种缩放与其他拟合程序（例如`scipy.optimize.curve_fit`）不一致，已更改为`chisq/(M-N)`。
- en: '`maximum` and `minimum` no longer emit warnings'
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`maximum`和`minimum`不再发出警告'
- en: As part of code introduced in 1.10, `float32` and `float64` set invalid float
    status when a Nan is encountered in [`numpy.maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum") and [`numpy.minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), when using SSE2 semantics. This caused a *RuntimeWarning* to
    sometimes be emitted. In 1.15 we fixed the inconsistencies which caused the warnings
    to become more conspicuous. Now no warnings will be emitted.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 作为1.10版本引入的代码的一部分，在[`numpy.maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum")和[`numpy.minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum")中，当使用SSE2语义时，如果遇到Nan，`float32`和`float64`会设置无效的浮点状态。这有时会导致*RuntimeWarning*。在1.15中，我们修复了导致警告更加引人注目的不一致性。现在不会发出警告。
- en: Umath and multiarray c-extension modules merged into a single module
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Umath和multiarray c扩展模块合并为单个模块
- en: The two modules were merged, according to [NEP 15](http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html).
    Previously *np.core.umath* and *np.core.multiarray* were separate c-extension
    modules. They are now python wrappers to the single *np.core/_multiarray_math*
    c-extension module.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[NEP 15](http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html)，这两个模块已合并。之前的*np.core.umath*和*np.core.multiarray*是不同的c扩展模块。现在它们是对单个*np.core/_multiarray_math*
    c扩展模块的python包装器。
- en: '`getfield` validity checks extended'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展了`getfield`的有效性检查。
- en: '[`numpy.ndarray.getfield`](../reference/generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield") now checks the dtype and offset arguments to prevent
    accessing invalid memory locations.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ndarray.getfield`](../reference/generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")现在检查dtype和offset参数，以防止访问无效的内存位置。'
- en: NumPy functions now support overrides with `__array_function__`
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy函数现在支持使用`__array_function__`进行覆盖。
- en: NumPy has a new experimental mechanism for overriding the implementation of
    almost all NumPy functions on non-NumPy arrays by defining an `__array_function__`
    method, as described in [NEP 18](http://www.numpy.org/neps/nep-0018-array-function-protocol.html).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个新的实验性机制，通过定义`__array_function__`方法来覆盖几乎所有非NumPy数组上的所有NumPy函数的实现，详见[NEP
    18](http://www.numpy.org/neps/nep-0018-array-function-protocol.html)。
- en: This feature is not yet been enabled by default, but has been released to facilitate
    experimentation by potential users. See the NEP for details on setting the appropriate
    environment variable. We expect the NumPy 1.17 release will enable overrides by
    default, which will also be more performant due to a new implementation written
    in C.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能目前还没有默认启用，但已发布以方便潜在用户进行实验。详见NEP以了解设置适当环境变量的细节。我们预计NumPy 1.17版本将默认启用覆盖，并且由于采用了新的C编写的实现，性能也会更高。
- en: Arrays based off readonly buffers cannot be set `writeable`
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于只读缓冲区的数组不能被设置为`writeable`。
- en: We now disallow setting the `writeable` flag True on arrays created from `fromstring(readonly-buffer)`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在不允许对从`fromstring(readonly-buffer)`创建的数组设置`writeable`标志为True。
- en: Highlights
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: Experimental (opt-in only) support for overriding numpy functions, see `__array_function__`
    below.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验性（仅限选择性）支持通过`__array_function__`来覆盖numpy函数，详见下方。
- en: The `matmul` function is now a ufunc. This provides better performance and allows
    overriding with `__array_ufunc__`.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matmul`函数现在是一个ufunc。这提供了更好的性能，并允许使用`__array_ufunc__`进行覆盖。'
- en: Improved support for the ARM and POWER architectures.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善对ARM和POWER架构的支持。
- en: Improved support for AIX and PyPy.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善对AIX和PyPy的支持。
- en: Improved interop with ctypes.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与ctypes的改良互操作性。
- en: Improved support for PEP 3118.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对PEP 3118的改善支持。
- en: New functions
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: 'New functions added to the *numpy.lib.recfuntions* module to ease the structured
    assignment changes:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加到*numpy.lib.recfuntions*模块的新函数以便于结构化赋值的更改：
- en: '`assign_fields_by_name`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assign_fields_by_name`'
- en: ''
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`structured_to_unstructured`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`structured_to_unstructured`'
- en: ''
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`unstructured_to_structured`'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unstructured_to_structured`'
- en: ''
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`apply_along_fields`'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apply_along_fields`'
- en: ''
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`require_fields`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_fields`'
- en: See the user guide at <[https://docs.scipy.org/doc/numpy/user/basics.rec.html](https://docs.scipy.org/doc/numpy/user/basics.rec.html)>
    for more info.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看用户指南<[https://docs.scipy.org/doc/numpy/user/basics.rec.html](https://docs.scipy.org/doc/numpy/user/basics.rec.html)>获取更多信息。
- en: New deprecations
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新废弃功能
- en: The type dictionaries *numpy.core.typeNA* and *numpy.core.sctypeNA* are deprecated.
    They were buggy and not documented and will be removed in the 1.18 release. Use`numpy.sctypeDict`
    instead.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 废弃类型词典*`numpy.core.typeNA`*和*`numpy.core.sctypeNA`*。它们存在bug并且没有文档记录，在1.18版本中将被移除。请使用`numpy.sctypeDict`代替。
- en: The *numpy.asscalar* function is deprecated. It is an alias to the more powerful
    [`numpy.ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item"), not tested, and fails for scalars.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.asscalar*函数已被废弃。它是更强大的[`numpy.ndarray.item`](../reference/generated/numpy.ndarray.item.html#numpy.ndarray.item
    "numpy.ndarray.item")的别名，没有经过测试，并且对标量失败。'
- en: The *numpy.set_array_ops* and *numpy.get_array_ops* functions are deprecated.
    As part of *NEP 15*, they have been deprecated along with the C-API functions
    [`PyArray_SetNumericOps`](../reference/c-api/array.html#c.PyArray_SetNumericOps
    "PyArray_SetNumericOps") and [`PyArray_GetNumericOps`](../reference/c-api/array.html#c.PyArray_GetNumericOps
    "PyArray_GetNumericOps"). Users who wish to override the inner loop functions
    in built-in ufuncs should use [`PyUFunc_ReplaceLoopBySignature`](../reference/c-api/ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature").
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*numpy.set_array_ops* 和 *numpy.get_array_ops* 函数已被弃用。作为 *NEP 15* 的一部分，它们已经与
    C-API 函数[`PyArray_SetNumericOps`](../reference/c-api/array.html#c.PyArray_SetNumericOps
    "PyArray_SetNumericOps")和[`PyArray_GetNumericOps`](../reference/c-api/array.html#c.PyArray_GetNumericOps
    "PyArray_GetNumericOps")一起被弃用。希望覆盖内置 ufuncs 中的内部循环函数的用户应该使用 [`PyUFunc_ReplaceLoopBySignature`](../reference/c-api/ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature")。'
- en: The [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") keyword argument `dims` is deprecated, use `shape` instead.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index")的关键参数`dims`已被弃用，请改用`shape`。'
- en: The [`numpy.histogram`](../reference/generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram") `normed` argument is deprecated. It was deprecated previously,
    but no warning was issued.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`numpy.histogram`](../reference/generated/numpy.histogram.html#numpy.histogram
    "numpy.histogram")的 `normed` 参数已经被弃用。它以前已经被弃用，但没有发出警告。'
- en: The `positive` operator (`+`) applied to non-numerical arrays is deprecated.
    See below for details.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用于非数值数组的`positive`运算符(`+`)已经被弃用。详细信息请参见下文。
- en: Passing an iterator to the stack functions is deprecated
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将迭代器传递给堆栈函数已经被弃用。
- en: Expired deprecations
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已过时的弃用
- en: NaT comparisons now return `False` without a warning, finishing a deprecation
    cycle begun in NumPy 1.11.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在 NaT 的比较返回`False`，而不会有警告，结束了 NumPy 1.11 开始的弃用周期。
- en: '`np.lib.function_base.unique` was removed, finishing a deprecation cycle begun
    in NumPy 1.4\. Use [`numpy.unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique") instead.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.lib.function_base.unique`已被移除，结束了在 NumPy 1.4 中开始的弃用周期。使用[`numpy.unique`](../reference/generated/numpy.unique.html#numpy.unique
    "numpy.unique")代替。'
- en: multi-field indexing now returns views instead of copies, finishing a deprecation
    cycle begun in NumPy 1.7\. The change was previously attempted in NumPy 1.14 but
    reverted until now.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多字段索引现在会返回视图，而不是副本，结束了从 NumPy 1.7 开始的弃用周期。这一变化之前曾在 NumPy 1.14 中尝试过，但现在重新引入。
- en: '`np.PackageLoader` and `np.pkgload` have been removed. These were deprecated
    in 1.10, had no tests, and seem to no longer work in 1.15.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.PackageLoader` 和 `np.pkgload`已被移除。这些在 1.10 版本时被弃用，没有测试，并且在 1.15 版本似乎已经不再起作用。'
- en: Future changes
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来的变化
- en: NumPy 1.17 will drop support for Python 2.7.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 1.17 将不再支持 Python 2.7。
- en: Compatibility notes
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: f2py script on Windows
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 上的 f2py 脚本
- en: On Windows, the installed script for running f2py is now an `.exe` file rather
    than a `*.py` file and should be run from the command line as `f2py` whenever
    the `Scripts` directory is in the path. Running `f2py` as a module `python -m
    numpy.f2py [...]` will work without path modification in any version of NumPy.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，用于运行 f2py 的安装脚本现在是一个 `.exe` 文件，而不是一个 `*.py` 文件，并且应该在命令行中作为`f2py`运行，只要
    `Scripts` 目录在路径中。在任何版本的 NumPy 中，在未修改路径的情况下作为模块`python -m numpy.f2py [...]`运行`f2py`将可以工作。
- en: NaT comparisons
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NaT 的比较
- en: Consistent with the behavior of NaN, all comparisons other than inequality checks
    with datetime64 or timedelta64 NaT (“not-a-time”) values now always return `False`,
    and inequality checks with NaT now always return `True`. This includes comparisons
    between NaT values. For compatibility with the old behavior, use `np.isnat` to
    explicitly check for NaT or convert datetime64/timedelta64 arrays with `.astype(np.int64)`
    before making comparisons.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NaN 的行为一致，与 datetime64 或 timedelta64 NaT（“not-a-time”）值进行的除不等比较，现在总是返回`False`，而与
    NaT 进行不等比较现在总是返回`True`。这包括 NaT 值之间的比较。为了与旧行为兼容，使用`np.isnat`来显式检查 NaT，或者在进行比较之前将
    datetime64/timedelta64 数组转换为`.astype(np.int64)`。
- en: complex64/128 alignment has changed
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: complex64/128 的对齐方式已经改变
- en: The memory alignment of complex types is now the same as a C-struct composed
    of two floating point values, while before it was equal to the size of the type.
    For many users (for instance on x64/unix/gcc) this means that complex64 is now
    4-byte aligned instead of 8-byte aligned. An important consequence is that aligned
    structured dtypes may now have a different size. For instance, `np.dtype('c8,u1',
    align=True)` used to have an itemsize of 16 (on x64/gcc) but now it is 12.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂类型的内存对齐现在与由两个浮点值组成的C结构相同，而以前等于类型的大小。对于许多用户（例如在x64/unix/gcc上），这意味着complex64现在的对齐是4字节而不是8字节。一个重要的结果是经过对齐的结构化dtype现在可能有不同的大小。例如，`np.dtype('c8,u1',
    align=True)`过去在x64/gcc上的itemsize为16，但现在是12。
- en: More in detail, the complex64 type now has the same alignment as a C-struct
    `struct {float r, i;}`, according to the compiler used to compile numpy, and similarly
    for the complex128 and complex256 types.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说，complex64类型现在与编译numpy的编译器使用的C-struct`struct {float r, i;}`具有相同的对齐方式，并且complex128和complex256类型类似。
- en: nd_grid __len__ removal
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除了nd_grid __len__
- en: '`len(np.mgrid)` and `len(np.ogrid)` are now considered nonsensical and raise
    a `TypeError`.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`len(np.mgrid)`和`len(np.ogrid)`现在被视为无意义，并引发`TypeError`。'
- en: '`np.unravel_index` now accepts `shape` keyword argument'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unravel_index`现在接受`shape`关键字参数'
- en: Previously, only the `dims` keyword argument was accepted for specification
    of the shape of the array to be used for unraveling. `dims` remains supported,
    but is now deprecated.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，仅接受`dims`关键字参数用于指定用于展开的数组的形状。`dims`仍然受支持，但现在已被弃用。
- en: multi-field views return a view instead of a copy
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多字段视图返回视图而不是副本
- en: Indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    often have extra padding bytes corresponding to intervening fields in the original
    array, unlike before, which will affect code such as `arr[['f1', 'f3']].view('float64')`.
    This change has been planned since numpy 1.7\. Operations hitting this path have
    emitted `FutureWarnings` since then. Additional `FutureWarnings` about this change
    were added in 1.12.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个字段对结构化数组进行索引，例如`arr[['f1', 'f3']]`，现在返回原始数组的视图而不是副本。返回的视图通常会有与原始数组中的中间字段对应的额外填充字节，这与以前不同，这会影响`arr[['f1',
    'f3']].view('float64')`等代码。这一变更计划自numpy 1.7版开始。此后这一路径上的操作已发出`FutureWarnings`。1.12版还增加了关于这一变更的其他`FutureWarnings`。
- en: To help users update their code to account for these changes, a number of functions
    have been added to the `numpy.lib.recfunctions` module which safely allow such
    operations. For instance, the code above can be replaced with `structured_to_unstructured(arr[['f1',
    'f3']], dtype='float64')`. See the “accessing multiple fields” section of the
    [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助用户更新他们的代码以适应这些变化，已经在`numpy.lib.recfunctions`模块中添加了许多函数, 可以安全地执行此类操作。例如，上面的代码可以替换为`structured_to_unstructured(arr[['f1',
    'f3']], dtype='float64')`。请参阅[user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields)的“访问多个字段”部分。
- en: f2py script on Windows
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows上的f2py脚本
- en: On Windows, the installed script for running f2py is now an `.exe` file rather
    than a `*.py` file and should be run from the command line as `f2py` whenever
    the `Scripts` directory is in the path. Running `f2py` as a module `python -m
    numpy.f2py [...]` will work without path modification in any version of NumPy.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，用于运行f2py的安装脚本现在是一个`.exe`文件而不是一个`*.py`文件，应该在命令行中作为`f2py`运行，每当`Scripts`目录在路径中时。在任何版本的NumPy中，作为模块`python
    -m numpy.f2py [...]`运行`f2py`将在不修改路径的情况下起作用。
- en: NaT comparisons
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NaT比较
- en: Consistent with the behavior of NaN, all comparisons other than inequality checks
    with datetime64 or timedelta64 NaT (“not-a-time”) values now always return `False`,
    and inequality checks with NaT now always return `True`. This includes comparisons
    between NaT values. For compatibility with the old behavior, use `np.isnat` to
    explicitly check for NaT or convert datetime64/timedelta64 arrays with `.astype(np.int64)`
    before making comparisons.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 与NaN的行为一致，除了与datetime64或timedelta64 NaT（“非时间”）值进行不等比较之外的所有比较现在都始终返回`False`，而与NaT进行不等比较现在总是返回`True`。这包括NaT值之间的比较。为了兼容旧的行为，可以使用`np.isnat`来显式检查NaT，或者在进行比较之前将datetime64/timedelta64数组转换为`.astype(np.int64)`。
- en: complex64/128 alignment has changed
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: complex64/128的对齐方式已更改
- en: The memory alignment of complex types is now the same as a C-struct composed
    of two floating point values, while before it was equal to the size of the type.
    For many users (for instance on x64/unix/gcc) this means that complex64 is now
    4-byte aligned instead of 8-byte aligned. An important consequence is that aligned
    structured dtypes may now have a different size. For instance, `np.dtype('c8,u1',
    align=True)` used to have an itemsize of 16 (on x64/gcc) but now it is 12.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 复数类型的内存对齐现在与由两个浮点值组成的 C 结构相同，而之前是等于类型的大小。对许多用户（例如在 x64/unix/gcc 上）来说，这意味着 complex64
    现在是 4 字节对齐而不是 8 字节对齐。一个重要的结果是，对齐的结构化数据类型现在可能具有不同的大小。例如，`np.dtype('c8,u1', align=True)`
    以前的 itemsize 是 16（在 x64/gcc 上），但现在是 12。
- en: More in detail, the complex64 type now has the same alignment as a C-struct
    `struct {float r, i;}`, according to the compiler used to compile numpy, and similarly
    for the complex128 and complex256 types.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细地说，complex64 类型现在具有与 C 结构 `struct {float r, i;}` 相同的对齐方式，根据用于编译 numpy 的编译器，complex128
    和 complex256 类型同样如此。
- en: nd_grid __len__ removal
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了 `nd_grid __len__`
- en: '`len(np.mgrid)` and `len(np.ogrid)` are now considered nonsensical and raise
    a `TypeError`.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`len(np.mgrid)` 和 `len(np.ogrid)` 现在被认为是荒谬的，并引发 `TypeError`。'
- en: '`np.unravel_index` now accepts `shape` keyword argument'
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.unravel_index` 现在接受 `shape` 关键字参数'
- en: Previously, only the `dims` keyword argument was accepted for specification
    of the shape of the array to be used for unraveling. `dims` remains supported,
    but is now deprecated.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，只接受 `dims` 关键字参数来指定用于展开的数组的形状。 `dims` 仍然受支持，但现已弃用。
- en: multi-field views return a view instead of a copy
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多字段视图返回视图而不是副本
- en: Indexing a structured array with multiple fields, e.g., `arr[['f1', 'f3']]`,
    returns a view into the original array instead of a copy. The returned view will
    often have extra padding bytes corresponding to intervening fields in the original
    array, unlike before, which will affect code such as `arr[['f1', 'f3']].view('float64')`.
    This change has been planned since numpy 1.7\. Operations hitting this path have
    emitted `FutureWarnings` since then. Additional `FutureWarnings` about this change
    were added in 1.12.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '用多个字段索引结构化数组，例如 `arr[[''f1'', ''f3'']]`，返回对原始数组的视图而不是副本。返回的视图通常会具有原始数组中介于字段之间的额外填充字节，与之前不同，这将影响诸如
    `arr[[''f1'', ''f3'']].view(''float64'')` 的代码。自 numpy 1.7 以来，已计划进行此更改。击中此路径的操作已经从那时起产生了
    `FutureWarnings`。1.12 中还添加了有关此更改的附加 `FutureWarnings`。 '
- en: To help users update their code to account for these changes, a number of functions
    have been added to the `numpy.lib.recfunctions` module which safely allow such
    operations. For instance, the code above can be replaced with `structured_to_unstructured(arr[['f1',
    'f3']], dtype='float64')`. See the “accessing multiple fields” section of the
    [user guide](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为帮助用户更新其代码以适应这些变化，已添加了一些函数到 `numpy.lib.recfunctions` 模块，可以安全地执行此类操作。例如，上述代码可以替换为
    `structured_to_unstructured(arr[['f1', 'f3']], dtype='float64')`。请参阅[用户指南](https://docs.scipy.org/doc/numpy/user/basics.rec.html#accessing-multiple-fields)中“访问多个字段”部分。
- en: C API changes
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API 变更
- en: 'The [`NPY_FEATURE_VERSION`](../reference/c-api/array.html#c.NPY_FEATURE_VERSION
    "NPY_FEATURE_VERSION") was incremented to 0x0000D, due to the addition of:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NPY_FEATURE_VERSION`](../reference/c-api/array.html#c.NPY_FEATURE_VERSION
    "NPY_FEATURE_VERSION") 已增加到 0x0000D，因为增加了：'
- en: '[`PyUFuncObject.core_dim_flags`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_flags
    "PyUFuncObject.core_dim_flags")'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.core_dim_flags`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_flags
    "PyUFuncObject.core_dim_flags")'
- en: '[`PyUFuncObject.core_dim_sizes`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_sizes
    "PyUFuncObject.core_dim_sizes")'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.core_dim_sizes`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.core_dim_sizes
    "PyUFuncObject.core_dim_sizes")'
- en: '[`PyUFuncObject.identity_value`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.identity_value
    "PyUFuncObject.identity_value")'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFuncObject.identity_value`](../reference/c-api/types-and-structures.html#c.PyUFuncObject.identity_value
    "PyUFuncObject.identity_value")'
- en: '[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")'
- en: New Features
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Integrated squared error (ISE) estimator added to `histogram`
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`histogram` 中添加了积分平方误差（ISE）估计器'
- en: This method (`bins='stone'`) for optimizing the bin number is a generalization
    of the Scott’s rule. The Scott’s rule assumes the distribution is approximately
    Normal, while the [ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)
    is a non-parametric method based on cross-validation.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法（`bins='stone'`）用于优化箱数，是Scott法则的一般化。Scott法则假定分布近似正态分布，而[ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)是一种基于交叉验证的非参数方法。
- en: '`max_rows` keyword added for `np.loadtxt`'
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`np.loadtxt`添加了`max_rows`关键词
- en: New keyword `max_rows` in [`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt
    "numpy.loadtxt") sets the maximum rows of the content to be read after `skiprows`,
    as in [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt").
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")中添加了新关键词`max_rows`，设置在`skiprows`后要读取的内容的最大行数，就像在[`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")中一样。
- en: modulus operator support added for `np.timedelta64` operands
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`np.timedelta64`操作数添加了模运算符的支持
- en: The modulus (remainder) operator is now supported for two operands of type `np.timedelta64`.
    The operands may have different units and the return value will match the type
    of the operands.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在支持`np.timedelta64`类型的两个操作数的模运算符（余数运算）。这些操作数可以具有不同的单位，返回值将匹配操作数的类型。
- en: Integrated squared error (ISE) estimator added to `histogram`
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成的平方误差（ISE）估计器添加到`histogram`
- en: This method (`bins='stone'`) for optimizing the bin number is a generalization
    of the Scott’s rule. The Scott’s rule assumes the distribution is approximately
    Normal, while the [ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)
    is a non-parametric method based on cross-validation.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法（`bins='stone'`）用于优化箱数，是Scott法则的一般化。Scott法则假定分布近似正态分布，而[ISE](https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error)是一种基于交叉验证的非参数方法。
- en: '`max_rows` keyword added for `np.loadtxt`'
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`np.loadtxt`添加了`max_rows`关键词
- en: New keyword `max_rows` in [`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt
    "numpy.loadtxt") sets the maximum rows of the content to be read after `skiprows`,
    as in [`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt").
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`numpy.loadtxt`](../reference/generated/numpy.loadtxt.html#numpy.loadtxt "numpy.loadtxt")中添加了新关键词`max_rows`，设置在`skiprows`后要读取的内容的最大行数，就像在[`numpy.genfromtxt`](../reference/generated/numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt")中一样。
- en: modulus operator support added for `np.timedelta64` operands
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`np.timedelta64`操作数添加了模运算符的支持
- en: The modulus (remainder) operator is now supported for two operands of type `np.timedelta64`.
    The operands may have different units and the return value will match the type
    of the operands.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在支持`np.timedelta64`类型的两个操作数的模运算符（余数运算）。这些操作数可以具有不同的单位，返回值将匹配操作数的类型。
- en: Improvements
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: no-copy pickling of numpy arrays
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: numpy数组的无复制拾取
- en: Up to protocol 4, numpy array pickling created 2 spurious copies of the data
    being serialized. With pickle protocol 5, and the `PickleBuffer` API, a large
    variety of numpy arrays can now be serialized without any copy using out-of-band
    buffers, and with one less copy using in-band buffers. This results, for large
    arrays, in an up to 66% drop in peak memory usage.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在协议4之前，numpy数组拾取创建了正在序列化的数据的2个虚假副本。使用pickle协议5和`PickleBuffer` API，现在可以使用带外缓冲区序列化各种numpy数组，而且使用带内缓冲区仅比带外缓冲区少一次复制。对于大型数组，这将导致峰值内存使用量减少高达66%。
- en: build shell independence
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建shell独立性
- en: NumPy builds should no longer interact with the host machine shell directly.
    `exec_command` has been replaced with `subprocess.check_output` where appropriate.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy构建现在不应直接与主机机器shell进行交互。`exec_command`已被`subprocess.check_output`替换为适当的位置。
- en: '*np.polynomial.Polynomial* classes render in LaTeX in Jupyter notebooks'
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.polynomial.Polynomial*类在Jupyter笔记本中以LaTeX格式显示'
- en: When used in a front-end that supports it, *Polynomial* instances are now rendered
    through LaTeX. The current format is experimental, and is subject to change.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持的前端中使用时，*Polynomial*实例现在可以通过LaTeX呈现。当前格式是实验性的，并且可能会更改。
- en: '`randint` and `choice` now work on empty distributions'
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`randint`和`choice`现在可以在空分布上工作'
- en: Even when no elements needed to be drawn, `np.random.randint` and `np.random.choice`
    raised an error when the arguments described an empty distribution. This has been
    fixed so that e.g. `np.random.choice([], 0) == np.array([], dtype=float64)`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有需要绘制的元素，`np.random.randint`和`np.random.choice`在描述空分布的参数时引发错误。已修复此问题，例如`np.random.choice([],
    0) == np.array([], dtype=float64)`。
- en: '`linalg.lstsq`, `linalg.qr`, and `linalg.svd` now work with empty arrays'
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.lstsq`，`linalg.qr`和`linalg.svd`现在可以处理空数组'
- en: Previously, a `LinAlgError` would be raised when an empty matrix/empty matrices
    (with zero rows and/or columns) is/are passed in. Now outputs of appropriate shapes
    are returned.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当传入空矩阵/空矩阵（行和/或列数为零）时会引发`LinAlgError`。现在会返回适当形状的输出。
- en: Chain exceptions to give better error messages for invalid PEP3118 format strings
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链式异常以提供更好的无效PEP3118格式字符串的错误消息
- en: This should help track down problems.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该有助于追踪问题。
- en: Einsum optimization path updates and efficiency improvements
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum优化路径更新和效率改进
- en: Einsum was synchronized with the current upstream work.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Einsum已与当前上游工作同步。
- en: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")
    and [`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims") now work on `ndarray` subclasses'
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")和[`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims")现在可用于`ndarray`子类'
- en: In particular, they now work for masked arrays.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，它们现在适用于蒙版数组。
- en: '`NPY_NO_DEPRECATED_API` compiler warning suppression'
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NPY_NO_DEPRECATED_API`编译器警告抑制'
- en: Setting `NPY_NO_DEPRECATED_API` to a value of 0 will suppress the current compiler
    warnings when the deprecated numpy API is used.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将`NPY_NO_DEPRECATED_API`设置为0将抑制使用已弃用的numpy API时出现的当前编译器警告。
- en: '`np.diff` Added kwargs prepend and append'
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.diff`增加了kwargs `prepend`和`append`'
- en: New kwargs `prepend` and `append`, allow for values to be inserted on either
    end of the differences. Similar to options for *ediff1d*. Now the inverse of *cumsum*
    can be obtained easily via `prepend=0`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 新的kwargs `prepend` 和 `append`，允许在差异的任一端插入值。类似于*ediff1d*的选项。现在可以通过`prepend=0`轻松获得*cumsum*的逆向操作。
- en: ARM support updated
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ARM支持已更新
- en: Support for ARM CPUs has been updated to accommodate 32 and 64 bit targets,
    and also big and little endian byte ordering. AARCH32 memory alignment issues
    have been addressed. CI testing has been expanded to include AARCH64 targets via
    the services of shippable.com.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 支持ARM CPU已更新，以适应32位和64位目标，以及大尾和小尾字节排序。已解决了AARCH32内存对齐问题。CI测试已扩展以包括通过shippable.com提供的AARCH64目标。
- en: Appending to build flags
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附加构建标志
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to *LDFLAGS* and other similar such
    environment variables for compiling Fortran extensions. Now, if the *NPY_DISTUTILS_APPEND_FLAGS*
    environment variable is set to 1, the behavior will be appending. This applied
    to: *LDFLAGS*, *F77FLAGS*, *F90FLAGS*, *FREEFLAGS*, *FOPT*, *FDEBUG*, and *FFLAGS*.
    See gh-11525 for more details.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    总是覆盖而不是附加*LDFLAGS*和其他类似的用于编译Fortran扩展的环境变量。现在，如果设置了*NPY_DISTUTILS_APPEND_FLAGS*环境变量为1，行为将会附加。这适用于：*LDFLAGS*，*F77FLAGS*，*F90FLAGS*，*FREEFLAGS*，*FOPT*，*FDEBUG*
    和 *FFLAGS*。更多细节请参见 gh-11525。'
- en: Generalized ufunc signatures now allow fixed-size dimensions
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc签名现在允许固定大小的维度
- en: By using a numerical value in the signature of a generalized ufunc, one can
    indicate that the given function requires input or output to have dimensions with
    the given size. E.g., the signature of a function that converts a polar angle
    to a two-dimensional cartesian unit vector would be `()->(2)`; that for one that
    converts two spherical angles to a three-dimensional unit vector would be `(),()->(3)`;
    and that for the cross product of two three-dimensional vectors would be `(3),(3)->(3)`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在广义ufunc的签名中使用数值，可以指示给定函数需要输入或输出具有给定大小的维度。例如，将极角转换为二维笛卡尔单位矢量的函数的签名为`()->(2)`；将两个球面角转换为三维单位矢量的函数的签名为`(),()->(3)`；而将两个三维矢量的叉乘的函数的签名为`(3),(3)->(3)`。
- en: Note that to the elementary function these dimensions are not treated any differently
    from variable ones indicated with a name starting with a letter; the loop still
    is passed the corresponding size, but it can now count on that size being equal
    to the fixed one given in the signature.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于基本函数来说，这些维度不会与以字母开头的变量维度有任何不同的对待；循环仍然会传递相应的大小，但现在可以依赖该大小等于签名中给定的固定大小。
- en: Generalized ufunc signatures now allow flexible dimensions
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc签名现在允许灵活的维度
- en: Some functions, in particular numpy’s implementation of `@` as `matmul`, are
    very similar to generalized ufuncs in that they operate over core dimensions,
    but one could not present them as such because they were able to deal with inputs
    in which a dimension is missing. To support this, it is now allowed to postfix
    a dimension name with a question mark to indicate that the dimension does not
    necessarily have to be present.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数，特别是numpy对`@`的实现为`matmul`，非常类似于广义ufuncs，因为它们是在核心维度上操作的，但它们不能被描述为这样，因为它们能够处理输入，其中一个维度是缺失的。为了支持这一点，现在允许在维度名称的尾部加上一个问号来表示该维度不一定要存在。
- en: With this addition, the signature for `matmul` can be expressed as `(m?,n),(n,p?)->(m?,p?)`.
    This indicates that if, e.g., the second operand has only one dimension, for the
    purposes of the elementary function it will be treated as if that input has core
    shape `(n, 1)`, and the output has the corresponding core shape of `(m, 1)`. The
    actual output array, however, has the flexible dimension removed, i.e., it will
    have shape `(..., m)`. Similarly, if both arguments have only a single dimension,
    the inputs will be presented as having shapes `(1, n)` and `(n, 1)` to the elementary
    function, and the output as `(1, 1)`, while the actual output array returned will
    have shape `()`. In this way, the signature allows one to use a single elementary
    function for four related but different signatures, `(m,n),(n,p)->(m,p)`, `(n),(n,p)->(p)`,
    `(m,n),(n)->(m)` and `(n),(n)->()`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一补充，`matmul`的签名可以表示为`(m?,n),(n,p?)->(m?,p?)`。这表明，例如，第二个操作数只有一个维度，在基本函数的目的上，它将被视为输入具有核心形状`(n,
    1)`，输出具有相应的核心形状`(m, 1)`。然而，实际的输出数组会移除灵活的维度，即它的形状为`(..., m)`。同样，如果两个参数只有一个维度，那么传递给基本函数的输入将被呈现为具有形状`(1,
    n)`和`(n, 1)`，输出为`(1, 1)`，而实际的输出数组返回将具有形状`() `。通过这种方式，签名允许一种基本函数来使用四个相关但不同的签名，`(m,n),(n,p)->(m,p)`、`(n),(n,p)->(p)`、`(m,n),(n)->(m)`和`(n),(n)->()`。
- en: '`np.clip` and the `clip` method check for memory overlap'
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.clip`和`clip`方法会检查内存重叠'
- en: The `out` argument to these functions is now always tested for memory overlap
    to avoid corrupted results when memory overlap occurs.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的`out`参数现在始终会检测内存重叠，以避免内存重叠时出现损坏的结果。
- en: New value `unscaled` for option `cov` in `np.polyfit`
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.polyfit`中选项`cov`的新值`unscaled`'
- en: A further possible value has been added to the `cov` parameter of the `np.polyfit`
    function. With `cov='unscaled'` the scaling of the covariance matrix is disabled
    completely (similar to setting `absolute_sigma=True` in `scipy.optimize.curve_fit`).
    This would be useful in occasions, where the weights are given by 1/sigma with
    sigma being the (known) standard errors of (Gaussian distributed) data points,
    in which case the unscaled matrix is already a correct estimate for the covariance
    matrix.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.polyfit`函数的`cov`参数中添加了一个可能的值。使用`cov=''unscaled''`会完全禁用协方差矩阵的缩放（类似于在`scipy.optimize.curve_fit`中设置`absolute_sigma=True`）。这在权重由1/σ给出，其中σ是（已知的）数据点的（高斯分布）标准误差时会很有用，这种情况下，未缩放的矩阵已经是协方差矩阵的正确估计。'
- en: Detailed docstrings for scalar numeric types
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量数值类型的详细文档字符串
- en: The `help` function, when applied to numeric types such as [`numpy.intc`](../reference/arrays.scalars.html#numpy.intc
    "numpy.intc"), [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_ "numpy.int_"),
    and [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong"),
    now lists all of the aliased names for that type, distinguishing between platform
    -dependent and -independent aliases.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用于诸如[`numpy.intc`](../reference/arrays.scalars.html#numpy.intc "numpy.intc")、[`numpy.int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_")和[`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong
    "numpy.longlong")等数值类型时，`help`函数现在列出了该类型的所有别名，区分了平台相关和独立的别名。
- en: '`__module__` attribute now points to public modules'
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__module__`属性现在指向公共模块'
- en: The `__module__` attribute on most NumPy functions has been updated to refer
    to the preferred public module from which to access a function, rather than the
    module in which the function happens to be defined. This produces more informative
    displays for functions in tools such as IPython, e.g., instead of `<function 'numpy.core.fromnumeric.sum'>`
    you now see `<function 'numpy.sum'>`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数NumPy函数的`__module__`属性已更新，以指向首选的公共模块，从中访问函数，而不是函数所在的模块。这样就可以在诸如IPython这样的工具中产生更具信息性的显示，例如，现在不再是`<function
    'numpy.core.fromnumeric.sum'>`，而是`<function 'numpy.sum'>`。
- en: Large allocations marked as suitable for transparent hugepages
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大内存分配标记为适合透明大页
- en: On systems that support transparent hugepages over the madvise system call numpy
    now marks that large memory allocations can be backed by hugepages which reduces
    page fault overhead and can in some fault heavy cases improve performance significantly.
    On Linux the setting for huge pages to be used, */sys/kernel/mm/transparent_hugepage/enabled*,
    must be at least *madvise*. Systems which already have it set to *always* will
    not see much difference as the kernel will automatically use huge pages where
    appropriate.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持透明大页的系统上，通过madvise系统调用，numpy现在标记大内存分配可以由大页支持，这减少了页面错误的开销，在某些页面错误频繁的情况下显著提高了性能。在Linux上，用于使用大页的设置，*/sys/kernel/mm/transparent_hugepage/enabled*，必须至少为*madvise*。已经将其设置为*always*的系统将看不到太大的区别，因为内核将自动在适当的地方使用大页。
- en: Users of very old Linux kernels (~3.x and older) should make sure that */sys/kernel/mm/transparent_hugepage/defrag*
    is not set to *always* to avoid performance problems due concurrency issues in
    the memory defragmentation.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 使用非常旧的Linux内核（~3.x及更旧）的用户应确保*/sys/kernel/mm/transparent_hugepage/defrag*未设置为*always*，以避免由内存碎片化的并发问题导致的性能问题。
- en: Alpine Linux (and other musl c library distros) support
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Alpine Linux（和其他musl c库的发行版）支持
- en: We now default to use *fenv.h* for floating point status error reporting. Previously
    we had a broken default that sometimes would not report underflow, overflow, and
    invalid floating point operations. Now we can support non-glibc distributions
    like Alpine Linux as long as they ship *fenv.h*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在默认使用*fenv.h*进行浮点状态错误报告。之前，我们有一个损坏的默认设置，有时不会报告浮点下溢、上溢和无效的浮点运算。现在，我们可以支持非glibc发行版，比如Alpine
    Linux，只要它们提供*fenv.h*。
- en: Speedup `np.block` for large arrays
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于大数组，加速`np.block`
- en: Large arrays (greater than `512 * 512`) now use a blocking algorithm based on
    copying the data directly into the appropriate slice of the resulting array. This
    results in significant speedups for these large arrays, particularly for arrays
    being blocked along more than 2 dimensions.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 大数组（大于`512 * 512`）现在使用基于直接将数据复制到结果数组的适当切片的阻塞算法。这对于这些大数组的速度提升很明显，特别是对于沿着超过2个维度被切块的数组。
- en: '`arr.ctypes.data_as(...)` holds a reference to arr'
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`arr.ctypes.data_as(...)` 持有对arr的引用'
- en: Previously the caller was responsible for keeping the array alive for the lifetime
    of the pointer.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，调用者要负责保持数组在指针的生存期内存活。
- en: Speedup `np.take` for read-only arrays
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速`np.take`对只读数组的速度
- en: The implementation of `np.take` no longer makes an unnecessary copy of the source
    array when its `writeable` flag is set to `False`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当`writeable`标志设置为`False`时，`np.take`的实现不再对源数组进行不必要的复制。
- en: Support path-like objects for more functions
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为更多函数支持类似路径的对象
- en: The `np.core.records.fromfile` function now supports `pathlib.Path` and other
    path-like objects in addition to a file object. Furthermore, the `np.load` function
    now also supports path-like objects when using memory mapping (`mmap_mode` keyword
    argument).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.core.records.fromfile`函数现在除了文件对象之外，还支持`pathlib.Path`和其他类似路径的对象。此外，当使用内存映射（`mmap_mode`关键字参数）时，`np.load`函数现在也支持类似路径的对象。'
- en: Better behaviour of ufunc identities during reductions
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在减少期间ufunc身份的更好行为
- en: Universal functions have an `.identity` which is used when `.reduce` is called
    on an empty axis.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有一个`.identity`，当在空轴上调用`.reduce`时使用。
- en: As of this release, the logical binary ufuncs, *logical_and*, *logical_or*,
    and *logical_xor*, now have `identity` s of type *bool*, where previously they
    were of type *int*. This restores the 1.14 behavior of getting `bool` s when reducing
    empty object arrays with these ufuncs, while also keeping the 1.15 behavior of
    getting `int` s when reducing empty object arrays with arithmetic ufuncs like
    `add` and `multiply`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, *logaddexp* now has an identity of `-inf`, allowing it to be called
    on empty sequences, where previously it could not be.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: This is possible thanks to the new [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"), which allows arbitrary values
    to be used as identities now.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Improved conversion from ctypes objects
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Numpy has always supported taking a value or type from `ctypes` and converting
    it into an array or dtype, but only behaved correctly for simpler types. As of
    this release, this caveat is lifted - now:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: The `_pack_` attribute of `ctypes.Structure`, used to emulate C’s `__attribute__((packed))`,
    is respected.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Endianness of all ctypes objects is preserved
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ctypes.Union` is supported'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Non-representable constructs raise exceptions, rather than producing dangerously
    incorrect results:'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitfields are no longer interpreted as sub-arrays
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pointers are no longer replaced with the type that they point to
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A new `ndpointer.contents` member
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This matches the `.contents` member of normal ctypes arrays, and can be used
    to construct an `np.array` around the pointers contents. This replaces `np.array(some_nd_pointer)`,
    which stopped working in 1.15\. As a side effect of this change, `ndpointer` now
    supports dtypes with overlapping fields and padding.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '`matmul` is now a `ufunc`'
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`numpy.matmul`](../reference/generated/numpy.matmul.html#numpy.matmul "numpy.matmul")
    is now a ufunc which means that both the function and the `__matmul__` operator
    can now be overridden by `__array_ufunc__`. Its implementation has also changed.
    It uses the same BLAS routines as [`numpy.dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), ensuring its performance is similar for large matrices.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Start and stop arrays for `linspace`, `logspace` and `geomspace`
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These functions used to be limited to scalar stop and start values, but can
    now take arrays, which will be properly broadcast and result in an output which
    has one axis prepended. This can be used, e.g., to obtain linearly interpolated
    points between sets of points.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: CI extended with additional services
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now use additional free CI services, thanks to the companies that provide:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Codecoverage testing via codecov.io
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arm testing via shippable.com
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional test runs on azure pipelines
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are in addition to our continued use of travis, appveyor (for wheels)
    and LGTM
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: no-copy pickling of numpy arrays
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up to protocol 4, numpy array pickling created 2 spurious copies of the data
    being serialized. With pickle protocol 5, and the `PickleBuffer` API, a large
    variety of numpy arrays can now be serialized without any copy using out-of-band
    buffers, and with one less copy using in-band buffers. This results, for large
    arrays, in an up to 66% drop in peak memory usage.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在协议4之前，numpy数组的pickling会创建2个数据的虚假副本。使用pickle协议5和`PickleBuffer`API，可以在无需任何副本的情况下使用带外带缓冲区序列化大量不同的numpy数组，以及在内带缓冲区使用一个较少的副本。对于大的数组，最大内存使用量可减少高达66%。
- en: build shell independence
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建shell独立性
- en: NumPy builds should no longer interact with the host machine shell directly.
    `exec_command` has been replaced with `subprocess.check_output` where appropriate.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy构建不再直接与主机机器shell交互。在适当的情况下，`exec_command`已被`subprocess.check_output`替换。
- en: '*np.polynomial.Polynomial* classes render in LaTeX in Jupyter notebooks'
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.polynomial.Polynomial*类现在在Jupyter笔记本中以LaTeX格式呈现。'
- en: When used in a front-end that supports it, *Polynomial* instances are now rendered
    through LaTeX. The current format is experimental, and is subject to change.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当用在支持的前端时，*Polynomial*实例现在通过LaTeX渲染。当前格式是实验性的，可能会发生变化。
- en: '`randint` and `choice` now work on empty distributions'
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`randint`和`choice`现在适用于空分布'
- en: Even when no elements needed to be drawn, `np.random.randint` and `np.random.choice`
    raised an error when the arguments described an empty distribution. This has been
    fixed so that e.g. `np.random.choice([], 0) == np.array([], dtype=float64)`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有需要绘制的元素，当参数描述一个空的分布时，`np.random.randint`和`np.random.choice`也会引发错误。已修复此问题，以便例如`np.random.choice([],
    0) == np.array([], dtype=float64)`。
- en: '`linalg.lstsq`, `linalg.qr`, and `linalg.svd` now work with empty arrays'
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`linalg.lstsq`, `linalg.qr`和`linalg.svd`现在可以处理空数组。'
- en: Previously, a `LinAlgError` would be raised when an empty matrix/empty matrices
    (with zero rows and/or columns) is/are passed in. Now outputs of appropriate shapes
    are returned.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当传入空矩阵/空矩阵（行和/或列为零）时会引发`LinAlgError`。现在返回适当形状的输出。
- en: Chain exceptions to give better error messages for invalid PEP3118 format strings
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链式异常以提供更好的无效PEP3118格式字符串错误消息
- en: This should help track down problems.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该有助于查找问题。
- en: Einsum optimization path updates and efficiency improvements
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Einsum优化路径更新和效率改进
- en: Einsum was synchronized with the current upstream work.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: Einsum已与当前上游工作同步。
- en: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")
    and [`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims") now work on `ndarray` subclasses'
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`numpy.angle`](../reference/generated/numpy.angle.html#numpy.angle "numpy.angle")和[`numpy.expand_dims`](../reference/generated/numpy.expand_dims.html#numpy.expand_dims
    "numpy.expand_dims")现在适用于`ndarray`子类'
- en: In particular, they now work for masked arrays.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是它们现在适用于掩码数组。
- en: '`NPY_NO_DEPRECATED_API` compiler warning suppression'
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NPY_NO_DEPRECATED_API`编译器警告抑制'
- en: Setting `NPY_NO_DEPRECATED_API` to a value of 0 will suppress the current compiler
    warnings when the deprecated numpy API is used.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 将`NPY_NO_DEPRECATED_API`设置为0将抑制当前编译器在使用废弃的numpy API时的警告。
- en: '`np.diff` Added kwargs prepend and append'
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.diff`添加了kwargs prepend和append'
- en: New kwargs `prepend` and `append`, allow for values to be inserted on either
    end of the differences. Similar to options for *ediff1d*. Now the inverse of *cumsum*
    can be obtained easily via `prepend=0`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 新的kwargs `prepend`和`append`允许在差异的两端插入值。类似于*ediff1d*的选项。现在可以通过`prepend=0`轻松得到*cumsum*的逆。
- en: ARM support updated
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ARM支持已更新。
- en: Support for ARM CPUs has been updated to accommodate 32 and 64 bit targets,
    and also big and little endian byte ordering. AARCH32 memory alignment issues
    have been addressed. CI testing has been expanded to include AARCH64 targets via
    the services of shippable.com.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 支持ARM CPU已更新，以适应32位和64位目标，以及大端和小端字节顺序。解决了AARCH32内存对齐问题。通过shippable.com的服务，CI测试已扩展到包括AARCH64目标。
- en: Appending to build flags
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 追加到构建标志
- en: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    has always overridden rather than appended to *LDFLAGS* and other similar such
    environment variables for compiling Fortran extensions. Now, if the *NPY_DISTUTILS_APPEND_FLAGS*
    environment variable is set to 1, the behavior will be appending. This applied
    to: *LDFLAGS*, *F77FLAGS*, *F90FLAGS*, *FREEFLAGS*, *FOPT*, *FDEBUG*, and *FFLAGS*.
    See gh-11525 for more details.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.distutils`](../reference/distutils.html#module-numpy.distutils "numpy.distutils")
    一直覆盖而不是追加*LDFLAGS*和其他类似的用于编译Fortran扩展的环境变量。现在，如果将*NPY_DISTUTILS_APPEND_FLAGS*环境变量设置为1，行为将会追加。这适用于：*LDFLAGS*、*F77FLAGS*、*F90FLAGS*、*FREEFLAGS*、*FOPT*、*FDEBUG*和*FFLAGS*。更多详细信息见gh-11525。'
- en: Generalized ufunc signatures now allow fixed-size dimensions
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc签名现在允许固定大小的维度
- en: By using a numerical value in the signature of a generalized ufunc, one can
    indicate that the given function requires input or output to have dimensions with
    the given size. E.g., the signature of a function that converts a polar angle
    to a two-dimensional cartesian unit vector would be `()->(2)`; that for one that
    converts two spherical angles to a three-dimensional unit vector would be `(),()->(3)`;
    and that for the cross product of two three-dimensional vectors would be `(3),(3)->(3)`.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在广义ufunc的签名中使用数值，可以指示给定函数要求输入或输出具有给定大小的维度。例如，将极坐标角转换为二维笛卡尔单位向量的函数的签名将是`()->(2)`；将两个球面角转换为三维单位向量的函数的签名将是`(),()->(3)`；两个三维向量的叉乘的函数的签名将是`(3),(3)->(3)`。
- en: Note that to the elementary function these dimensions are not treated any differently
    from variable ones indicated with a name starting with a letter; the loop still
    is passed the corresponding size, but it can now count on that size being equal
    to the fixed one given in the signature.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于基本函数来说，这些维度与以字母开头的名称指示的变量维度没有任何区别；循环仍然传递相应的大小，但现在可以确信这个大小等于签名中给定的固定大小。
- en: Generalized ufunc signatures now allow flexible dimensions
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 广义ufunc签名现在允许灵活的维度
- en: Some functions, in particular numpy’s implementation of `@` as `matmul`, are
    very similar to generalized ufuncs in that they operate over core dimensions,
    but one could not present them as such because they were able to deal with inputs
    in which a dimension is missing. To support this, it is now allowed to postfix
    a dimension name with a question mark to indicate that the dimension does not
    necessarily have to be present.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 一些函数，特别是numpy对`@`的实现作为`matmul`，非常类似于广义ufunc，因为它们在核心维度上运算，但不能将它们呈现为这样，因为它们能够处理缺少维度的输入。为了支持这一点，现在允许在维度名称后加上一个问号，表示该维度不一定要存在。
- en: With this addition, the signature for `matmul` can be expressed as `(m?,n),(n,p?)->(m?,p?)`.
    This indicates that if, e.g., the second operand has only one dimension, for the
    purposes of the elementary function it will be treated as if that input has core
    shape `(n, 1)`, and the output has the corresponding core shape of `(m, 1)`. The
    actual output array, however, has the flexible dimension removed, i.e., it will
    have shape `(..., m)`. Similarly, if both arguments have only a single dimension,
    the inputs will be presented as having shapes `(1, n)` and `(n, 1)` to the elementary
    function, and the output as `(1, 1)`, while the actual output array returned will
    have shape `()`. In this way, the signature allows one to use a single elementary
    function for four related but different signatures, `(m,n),(n,p)->(m,p)`, `(n),(n,p)->(p)`,
    `(m,n),(n)->(m)` and `(n),(n)->()`.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 加上这个附加功能后，`matmul`的签名可以表示为`(m?,n),(n,p?)->(m?,p?)`。这表示，例如，第二个操作数只有一个维度，对于基本函数来说，它将被视为输入具有核心形状`(n,
    1)`，输出具有相应的核心形状`(m, 1)`。然而，实际输出数组将去掉灵活的维度，即它将具有形状`(..., m)`。类似地，如果两个参数只有一个维度，那么输入将被呈现为具有形状`(1,
    n)`和`(n, 1)`到基本函数，并且输出为`(1, 1)`，而实际输出数组将具有形状`()`。通过这种方式，这个签名允许一个单一的基本函数用于四个相关但不同的签名，`(m,n),(n,p)->(m,p)`，`(n),(n,p)->(p)`，`(m,n),(n)->(m)`和`(n),(n)->()`。
- en: '`np.clip` and the `clip` method check for memory overlap'
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.clip`和`clip`方法检查内存重叠'
- en: The `out` argument to these functions is now always tested for memory overlap
    to avoid corrupted results when memory overlap occurs.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的`out`参数现在总是测试内存重叠，以避免当内存重叠发生时出现损坏的结果。
- en: New value `unscaled` for option `cov` in `np.polyfit`
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项`np.polyfit`中的`cov`的新值`unscaled`
- en: A further possible value has been added to the `cov` parameter of the `np.polyfit`
    function. With `cov='unscaled'` the scaling of the covariance matrix is disabled
    completely (similar to setting `absolute_sigma=True` in `scipy.optimize.curve_fit`).
    This would be useful in occasions, where the weights are given by 1/sigma with
    sigma being the (known) standard errors of (Gaussian distributed) data points,
    in which case the unscaled matrix is already a correct estimate for the covariance
    matrix.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Detailed docstrings for scalar numeric types
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `help` function, when applied to numeric types such as [`numpy.intc`](../reference/arrays.scalars.html#numpy.intc
    "numpy.intc"), [`numpy.int_`](../reference/arrays.scalars.html#numpy.int_ "numpy.int_"),
    and [`numpy.longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong"),
    now lists all of the aliased names for that type, distinguishing between platform
    -dependent and -independent aliases.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`__module__` attribute now points to public modules'
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `__module__` attribute on most NumPy functions has been updated to refer
    to the preferred public module from which to access a function, rather than the
    module in which the function happens to be defined. This produces more informative
    displays for functions in tools such as IPython, e.g., instead of `<function 'numpy.core.fromnumeric.sum'>`
    you now see `<function 'numpy.sum'>`.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: Large allocations marked as suitable for transparent hugepages
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On systems that support transparent hugepages over the madvise system call numpy
    now marks that large memory allocations can be backed by hugepages which reduces
    page fault overhead and can in some fault heavy cases improve performance significantly.
    On Linux the setting for huge pages to be used, */sys/kernel/mm/transparent_hugepage/enabled*,
    must be at least *madvise*. Systems which already have it set to *always* will
    not see much difference as the kernel will automatically use huge pages where
    appropriate.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Users of very old Linux kernels (~3.x and older) should make sure that */sys/kernel/mm/transparent_hugepage/defrag*
    is not set to *always* to avoid performance problems due concurrency issues in
    the memory defragmentation.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Alpine Linux (and other musl c library distros) support
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now default to use *fenv.h* for floating point status error reporting. Previously
    we had a broken default that sometimes would not report underflow, overflow, and
    invalid floating point operations. Now we can support non-glibc distributions
    like Alpine Linux as long as they ship *fenv.h*.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: Speedup `np.block` for large arrays
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Large arrays (greater than `512 * 512`) now use a blocking algorithm based on
    copying the data directly into the appropriate slice of the resulting array. This
    results in significant speedups for these large arrays, particularly for arrays
    being blocked along more than 2 dimensions.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '`arr.ctypes.data_as(...)` holds a reference to arr'
  id: totrans-376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Previously the caller was responsible for keeping the array alive for the lifetime
    of the pointer.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以前调用者需要确保数组在指针的生命周期内保持存活。
- en: '`arr.ctypes.data_as(...)` holds a reference to arr'
  id: totrans-378
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`arr.ctypes.data_as(...)` 保留对arr的引用'
- en: Previously the caller was responsible for keeping the array alive for the lifetime
    of the pointer.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 以前调用者需要确保数组在指针的生命周期内保持存活。
- en: Speedup `np.take` for read-only arrays
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速了只读数组的`np.take`
- en: The implementation of `np.take` no longer makes an unnecessary copy of the source
    array when its `writeable` flag is set to `False`.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 当其`writeable`标志设置为`False`时，`np.take`的实现不再对源数组进行不必要的复制。
- en: Support path-like objects for more functions
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为更多函数支持类似路径的对象
- en: The `np.core.records.fromfile` function now supports `pathlib.Path` and other
    path-like objects in addition to a file object. Furthermore, the `np.load` function
    now also supports path-like objects when using memory mapping (`mmap_mode` keyword
    argument).
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.core.records.fromfile`函数现在还支持`pathlib.Path`和其他类似路径的对象，而不仅仅是文件对象。此外，当使用内存映射（`mmap_mode`关键字参数）时，`np.load`函数现在也支持类似路径的对象。'
- en: Better behaviour of ufunc identities during reductions
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在缩减期间ufunc身份的更好行为
- en: Universal functions have an `.identity` which is used when `.reduce` is called
    on an empty axis.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数具有在空轴上调用`.reduce`时使用的`.identity`。
- en: As of this release, the logical binary ufuncs, *logical_and*, *logical_or*,
    and *logical_xor*, now have `identity` s of type *bool*, where previously they
    were of type *int*. This restores the 1.14 behavior of getting `bool` s when reducing
    empty object arrays with these ufuncs, while also keeping the 1.15 behavior of
    getting `int` s when reducing empty object arrays with arithmetic ufuncs like
    `add` and `multiply`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 从此版本开始，逻辑二进制ufuncs，*logical_and*、*logical_or*和*logical_xor*，现在类型为*bool*的`identity`，以前它们的类型是*int*。这恢复了1.14版的行为，在使用这些ufuncs缩减空对象数组时得到*bool*，同时保持了1.15版使用算术ufuncs如`add`和`multiply`在缩减空对象数组时得到*int*的行为。
- en: Additionally, *logaddexp* now has an identity of `-inf`, allowing it to be called
    on empty sequences, where previously it could not be.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，*logaddexp* 现在具有`-inf`的身份，允许在空序列上调用它，以前是不可行的。
- en: This is possible thanks to the new [`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity"), which allows arbitrary values
    to be used as identities now.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这得益于新的[`PyUFunc_FromFuncAndDataAndSignatureAndIdentity`](../reference/c-api/ufunc.html#c.PyUFunc_FromFuncAndDataAndSignatureAndIdentity
    "PyUFunc_FromFuncAndDataAndSignatureAndIdentity")，现在允许任意值作为身份使用。
- en: Improved conversion from ctypes objects
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进了从ctypes对象进行的转换
- en: 'Numpy has always supported taking a value or type from `ctypes` and converting
    it into an array or dtype, but only behaved correctly for simpler types. As of
    this release, this caveat is lifted - now:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy一直支持从`ctypes`获取值或类型并将其转换为数组或dtype，但只对更简单的类型行为正确。从此版本开始，这个警告已经解除 - 现在：
- en: The `_pack_` attribute of `ctypes.Structure`, used to emulate C’s `__attribute__((packed))`,
    is respected.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctypes.Structure`的`_pack_`属性，用于模拟C的`__attribute__((packed))`，现在得到尊重。'
- en: Endianness of all ctypes objects is preserved
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留了所有ctypes对象的字节顺序
- en: '`ctypes.Union` is supported'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持`ctypes.Union`
- en: 'Non-representable constructs raise exceptions, rather than producing dangerously
    incorrect results:'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可表示的结构会引发异常，而不是产生危险的不正确结果：
- en: Bitfields are no longer interpreted as sub-arrays
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位域不再被解释为子数组
- en: Pointers are no longer replaced with the type that they point to
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针不再被指向的类型替换
- en: A new `ndpointer.contents` member
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的`ndpointer.contents`成员
- en: This matches the `.contents` member of normal ctypes arrays, and can be used
    to construct an `np.array` around the pointers contents. This replaces `np.array(some_nd_pointer)`,
    which stopped working in 1.15\. As a side effect of this change, `ndpointer` now
    supports dtypes with overlapping fields and padding.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这与普通ctypes数组的`.contents`成员相匹配，并且可以用于构造指针内容的`np.array`。这取代了在1.15版中停止工作的`np.array(some_nd_pointer)`。由于此更改的副作用，`ndpointer`现在支持具有重叠字段和填充的dtype。
- en: '`matmul` is now a `ufunc`'
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`matmul`现在是一个`ufunc`'
- en: '[`numpy.matmul`](../reference/generated/numpy.matmul.html#numpy.matmul "numpy.matmul")
    is now a ufunc which means that both the function and the `__matmul__` operator
    can now be overridden by `__array_ufunc__`. Its implementation has also changed.
    It uses the same BLAS routines as [`numpy.dot`](../reference/generated/numpy.dot.html#numpy.dot
    "numpy.dot"), ensuring its performance is similar for large matrices.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Start and stop arrays for `linspace`, `logspace` and `geomspace`
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These functions used to be limited to scalar stop and start values, but can
    now take arrays, which will be properly broadcast and result in an output which
    has one axis prepended. This can be used, e.g., to obtain linearly interpolated
    points between sets of points.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: CI extended with additional services
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now use additional free CI services, thanks to the companies that provide:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: Codecoverage testing via codecov.io
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arm testing via shippable.com
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional test runs on azure pipelines
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are in addition to our continued use of travis, appveyor (for wheels)
    and LGTM
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Comparison ufuncs will now error rather than return NotImplemented
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, comparison ufuncs such as `np.equal` would return *NotImplemented*
    if their arguments had structured dtypes, to help comparison operators such as
    `__eq__` deal with those. This is no longer needed, as the relevant logic has
    moved to the comparison operators proper (which thus do continue to return *NotImplemented*
    as needed). Hence, like all other ufuncs, the comparison ufuncs will now error
    on structured dtypes.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: Positive will now raise a deprecation warning for non-numerical arrays
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `+array` unconditionally returned a copy. Now, it will raise a `DeprecationWarning`
    if the array is not numerical (i.e., if `np.positive(array)` raises a `TypeError`.
    For `ndarray` subclasses that override the default `__array_ufunc__` implementation,
    the `TypeError` is passed on.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`NDArrayOperatorsMixin` now implements matrix multiplication'
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, `np.lib.mixins.NDArrayOperatorsMixin` did not implement the special
    methods for Python’s matrix multiplication operator (`@`). This has changed now
    that `matmul` is a ufunc and can be overridden using `__array_ufunc__`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: The scaling of the covariance matrix in `np.polyfit` is different
  id: totrans-416
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, `np.polyfit` used a non-standard factor in the scaling of the the covariance
    matrix. Namely, rather than using the standard `chisq/(M-N)`, it scaled it with
    `chisq/(M-N-2)` where M is the number of data points and N is the number of parameters.
    This scaling is inconsistent with other fitting programs such as e.g. `scipy.optimize.curve_fit`
    and was changed to `chisq/(M-N)`.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '`maximum` and `minimum` no longer emit warnings'
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of code introduced in 1.10, `float32` and `float64` set invalid float
    status when a Nan is encountered in [`numpy.maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum") and [`numpy.minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), when using SSE2 semantics. This caused a *RuntimeWarning* to
    sometimes be emitted. In 1.15 we fixed the inconsistencies which caused the warnings
    to become more conspicuous. Now no warnings will be emitted.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 作为1.10版本引入的代码的一部分，当在[`numpy.maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum")和[`numpy.minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum")中遇到NaN时，`float32`和`float64`将设置无效的浮点状态，使用SSE2语义。这有时会引发*RuntimeWarning*。在1.15版本中，我们修复了导致警告变得更加显眼的不一致性。现在不会再有警告出现了。
- en: Umath and multiarray c-extension modules merged into a single module
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Umath和multiarray C扩展模块合并为一个单一模块
- en: The two modules were merged, according to [NEP 15](http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html).
    Previously *np.core.umath* and *np.core.multiarray* were separate c-extension
    modules. They are now python wrappers to the single *np.core/_multiarray_math*
    c-extension module.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[NEP 15](http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html)，这两个模块合并了。以前的*np.core.umath*和*np.core.multiarray*是独立的C扩展模块。它们现在是单一*np.core/_multiarray_math*
    C扩展模块的Python包装器。
- en: '`getfield` validity checks extended'
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`getfield`有效性检查进行了扩展'
- en: '[`numpy.ndarray.getfield`](../reference/generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield") now checks the dtype and offset arguments to prevent
    accessing invalid memory locations.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.ndarray.getfield`](../reference/generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")现在检查dtype和offset参数，以防止访问无效的内存位置。'
- en: NumPy functions now support overrides with `__array_function__`
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy函数现在支持用`__array_function__`重写
- en: NumPy has a new experimental mechanism for overriding the implementation of
    almost all NumPy functions on non-NumPy arrays by defining an `__array_function__`
    method, as described in [NEP 18](http://www.numpy.org/neps/nep-0018-array-function-protocol.html).
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个新的实验性机制，通过在非NumPy数组上定义一个`__array_function__`方法来覆盖几乎所有NumPy函数的实现，详见[NEP
    18](http://www.numpy.org/neps/nep-0018-array-function-protocol.html)。
- en: This feature is not yet been enabled by default, but has been released to facilitate
    experimentation by potential users. See the NEP for details on setting the appropriate
    environment variable. We expect the NumPy 1.17 release will enable overrides by
    default, which will also be more performant due to a new implementation written
    in C.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性尚未默认启用，但已发布以促进潜在用户的实验。有关设置适当环境变量的详细信息，请参阅NEP。我们预计NumPy 1.17版本将默认启用覆盖，由于新的C语言实现，这也将更高效。
- en: Arrays based off readonly buffers cannot be set `writeable`
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于只读缓冲区的数组不能设置为可写（writeable）
- en: We now disallow setting the `writeable` flag True on arrays created from `fromstring(readonly-buffer)`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不允许在从`fromstring(readonly-buffer)`创建的数组上将`writeable`标志设置为True。
- en: Comparison ufuncs will now error rather than return NotImplemented
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较ufuncs现在会出错而不是返回NotImplemented
- en: Previously, comparison ufuncs such as `np.equal` would return *NotImplemented*
    if their arguments had structured dtypes, to help comparison operators such as
    `__eq__` deal with those. This is no longer needed, as the relevant logic has
    moved to the comparison operators proper (which thus do continue to return *NotImplemented*
    as needed). Hence, like all other ufuncs, the comparison ufuncs will now error
    on structured dtypes.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，诸如`np.equal`的比较ufunc会在它们的参数具有结构化dtype时返回*NotImplemented*，以帮助比较运算符（如`__eq__`）处理这些情况。这不再需要，因为相关逻辑已移至比较运算符本身（因此，在需要时仍会返回*NotImplemented*）。因此，与所有其他ufunc一样，比较ufunc现在将在结构化dtype上出错。
- en: Positive will now raise a deprecation warning for non-numerical arrays
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正数现在将为非数值数组引发弃用警告
- en: Previously, `+array` unconditionally returned a copy. Now, it will raise a `DeprecationWarning`
    if the array is not numerical (i.e., if `np.positive(array)` raises a `TypeError`.
    For `ndarray` subclasses that override the default `__array_ufunc__` implementation,
    the `TypeError` is passed on.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`+array`会无条件返回一个副本。现在，如果数组不是数值（即，如果`np.positive(array)`引发了一个`TypeError`，它将引发一个`DeprecationWarning`。对于覆盖了默认`__array_ufunc__`实现的`ndarray`子类，`TypeError`将传递下去。
- en: '`NDArrayOperatorsMixin` now implements matrix multiplication'
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin`现在实现了矩阵乘法'
- en: Previously, `np.lib.mixins.NDArrayOperatorsMixin` did not implement the special
    methods for Python’s matrix multiplication operator (`@`). This has changed now
    that `matmul` is a ufunc and can be overridden using `__array_ufunc__`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: The scaling of the covariance matrix in `np.polyfit` is different
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, `np.polyfit` used a non-standard factor in the scaling of the the covariance
    matrix. Namely, rather than using the standard `chisq/(M-N)`, it scaled it with
    `chisq/(M-N-2)` where M is the number of data points and N is the number of parameters.
    This scaling is inconsistent with other fitting programs such as e.g. `scipy.optimize.curve_fit`
    and was changed to `chisq/(M-N)`.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '`maximum` and `minimum` no longer emit warnings'
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of code introduced in 1.10, `float32` and `float64` set invalid float
    status when a Nan is encountered in [`numpy.maximum`](../reference/generated/numpy.maximum.html#numpy.maximum
    "numpy.maximum") and [`numpy.minimum`](../reference/generated/numpy.minimum.html#numpy.minimum
    "numpy.minimum"), when using SSE2 semantics. This caused a *RuntimeWarning* to
    sometimes be emitted. In 1.15 we fixed the inconsistencies which caused the warnings
    to become more conspicuous. Now no warnings will be emitted.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Umath and multiarray c-extension modules merged into a single module
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two modules were merged, according to [NEP 15](http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html).
    Previously *np.core.umath* and *np.core.multiarray* were separate c-extension
    modules. They are now python wrappers to the single *np.core/_multiarray_math*
    c-extension module.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '`getfield` validity checks extended'
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`numpy.ndarray.getfield`](../reference/generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield") now checks the dtype and offset arguments to prevent
    accessing invalid memory locations.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: NumPy functions now support overrides with `__array_function__`
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy has a new experimental mechanism for overriding the implementation of
    almost all NumPy functions on non-NumPy arrays by defining an `__array_function__`
    method, as described in [NEP 18](http://www.numpy.org/neps/nep-0018-array-function-protocol.html).
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: This feature is not yet been enabled by default, but has been released to facilitate
    experimentation by potential users. See the NEP for details on setting the appropriate
    environment variable. We expect the NumPy 1.17 release will enable overrides by
    default, which will also be more performant due to a new implementation written
    in C.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Arrays based off readonly buffers cannot be set `writeable`
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now disallow setting the `writeable` flag True on arrays created from `fromstring(readonly-buffer)`.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
