- en: NumPy 1.21.0 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.21.0-notes.html](https://numpy.org/doc/1.26/release/1.21.0-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The NumPy 1.21.0 release highlights are
  prefs: []
  type: TYPE_NORMAL
- en: continued SIMD work covering more functions and platforms,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initial work on the new dtype infrastructure and casting,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: universal2 wheels for Python 3.8 and Python 3.9 on Mac,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved documentation,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: improved annotations,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: new `PCG64DXSM` bitgenerator for random numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition there are the usual large number of bug fixes and other improvements.
  prefs: []
  type: TYPE_NORMAL
- en: The Python versions supported for this release are 3.7-3.9\. Official support
    for Python 3.10 will be added when it is released.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: There are unresolved problems compiling NumPy 1.20.0 with gcc-11.1.
  prefs: []
  type: TYPE_NORMAL
- en: Optimization level *-O3* results in many incorrect warnings when running the
    tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On some hardware NumPY will hang in an infinite loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shape` argument [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The unused `PolyError` and `PolyDomainError` exceptions are removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.dtype` attribute must return a `dtype`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.typeDict` has been formally deprecated'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  prefs: []
  type: TYPE_NORMAL
- en: Four `ndarray.ctypes` methods have been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods in question are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shape` argument [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Error type changes in universal functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` argument validation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` and additional positional arguments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: Validate input values in `Generator.uniform`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  prefs: []
  type: TYPE_NORMAL
- en: '`/usr/include` removed from default include paths'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to comparisons with `dtype=...`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(2, 3, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(None, None, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  prefs: []
  type: TYPE_NORMAL
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to `dtype` and `signature` arguments in ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  prefs: []
  type: TYPE_NORMAL
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  prefs: []
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use of `ufunc->type_resolver` and “type tuple”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  prefs: []
  type: TYPE_NORMAL
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  prefs: []
  type: TYPE_NORMAL
- en: New `min_digits` argument for printing float values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  prefs: []
  type: TYPE_NORMAL
- en: f2py now recognizes Fortran abstract interface blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  prefs: []
  type: TYPE_NORMAL
- en: BLAS and LAPACK configuration via environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  prefs: []
  type: TYPE_NORMAL
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  prefs: []
  type: TYPE_NORMAL
- en: A runtime-subcriptable alias has been added for `ndarray`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  prefs: []
  type: TYPE_NORMAL
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arbitrary `period` option for `numpy.unwrap`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.unique` now returns single `NaN`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  prefs: []
  type: TYPE_NORMAL
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  prefs: []
  type: TYPE_NORMAL
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder annotations have been improved
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improved performance in integer division of NumPy arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  prefs: []
  type: TYPE_NORMAL
- en: Improve performance of `np.save` and `np.load` for small arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.save` is now a lot faster for small arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  prefs: []
  type: TYPE_NORMAL
- en: Enable Accelerate Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  prefs: []
  type: TYPE_NORMAL
- en: New functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  prefs: []
  type: TYPE_NORMAL
- en: Add [`PCG64DXSM`](../reference/random/bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") [`BitGenerator`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Uses of the `PCG64` `BitGenerator` in a massively-parallel context have been
    shown to have statistical weaknesses that were not apparent at the first release
    in numpy 1.17\. Most users will never observe this weakness and are safe to continue
    to use `PCG64`. We have introduced a new `PCG64DXSM` `BitGenerator` that will
    eventually become the new default `BitGenerator` implementation used by `default_rng`
    in future releases. `PCG64DXSM` solves the statistical weakness while preserving
    the performance and the features of `PCG64`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Upgrading PCG64 with PCG64DXSM](../reference/random/upgrading-pcg64.html#upgrading-pcg64)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18906](https://github.com/numpy/numpy/pull/18906))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shape` argument [`unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The unused `PolyError` and `PolyDomainError` exceptions are removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.dtype` attribute must return a `dtype`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.typeDict` has been formally deprecated'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  prefs: []
  type: TYPE_NORMAL
- en: Four `ndarray.ctypes` methods have been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods in question are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  prefs: []
  type: TYPE_NORMAL
- en: The `.dtype` attribute must return a `dtype`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `DeprecationWarning` is now given if the `.dtype` attribute of an object passed
    into `np.dtype` or as a `dtype=obj` argument is not a dtype. NumPy will stop attempting
    to recursively coerce the result of `.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-13578](https://github.com/numpy/numpy/pull/13578))
  prefs: []
  type: TYPE_NORMAL
- en: Inexact matches for `numpy.convolve` and `numpy.correlate` are deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`convolve`](../reference/generated/numpy.convolve.html#numpy.convolve "numpy.convolve")
    and [`correlate`](../reference/generated/numpy.correlate.html#numpy.correlate
    "numpy.correlate") now emit a warning when there are case insensitive and/or inexact
    matches found for `mode` argument in the functions. Pass full `"same"`, `"valid"`,
    `"full"` strings instead of `"s"`, `"v"`, `"f"` for the `mode` argument.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17492](https://github.com/numpy/numpy/pull/17492))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.typeDict` has been formally deprecated'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.typeDict` is a deprecated alias for `np.sctypeDict` and has been so for
    over 14 years ([6689502](https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d)).
    A deprecation warning will now be issued whenever getting `np.typeDict`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17586](https://github.com/numpy/numpy/pull/17586))
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions will be raised during array-like creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an object raised an exception during access of the special attributes `__array__`
    or `__array_interface__`, this exception was usually ignored. A warning is now
    given when the exception is anything but AttributeError. To silence the warning,
    the type raising the exception has to be adapted to raise an `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19001](https://github.com/numpy/numpy/pull/19001))
  prefs: []
  type: TYPE_NORMAL
- en: Four `ndarray.ctypes` methods have been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Four methods of the [`ndarray.ctypes`](../reference/generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") object have been deprecated, as they are (undocumentated)
    implementation artifacts of their respective properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods in question are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_ctypes.get_data` (use `_ctypes.data` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_shape` (use `_ctypes.shape` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_strides` (use `_ctypes.strides` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ctypes.get_as_parameter` (use `_ctypes._as_parameter_` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-19031](https://github.com/numpy/numpy/pull/19031))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `shape` argument [`numpy.unravel_index`](../reference/generated/numpy.unravel_index.html#numpy.unravel_index
    "numpy.unravel_index") cannot be passed as `dims` keyword argument anymore. (Was
    deprecated in NumPy 1.16.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-17900](https://github.com/numpy/numpy/pull/17900))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_GenericFunction` has been disabled. It was deprecated
    in NumPy 1.19\. Users should call the ufunc directly using the Python API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The function `PyUFunc_SetUsesArraysAsData` has been disabled. It was deprecated
    in NumPy 1.19.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-18697](https://github.com/numpy/numpy/pull/18697))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs: []
  type: TYPE_NORMAL
- en: Remove deprecated `PolyBase` and unused `PolyError` and `PolyDomainError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class `PolyBase` has been removed (deprecated in numpy 1.9.0). Please use
    the abstract `ABCPolyBase` class instead.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the unused `PolyError` and `PolyDomainError` exceptions are removed
    from the [`numpy.polynomial`](../reference/routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial").
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18963](https://github.com/numpy/numpy/pull/18963))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Error type changes in universal functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` argument validation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` and additional positional arguments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: Validate input values in `Generator.uniform`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  prefs: []
  type: TYPE_NORMAL
- en: '`/usr/include` removed from default include paths'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to comparisons with `dtype=...`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(2, 3, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(None, None, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  prefs: []
  type: TYPE_NORMAL
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to `dtype` and `signature` arguments in ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  prefs: []
  type: TYPE_NORMAL
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  prefs: []
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  prefs: []
  type: TYPE_NORMAL
- en: Error type changes in universal functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal functions may now raise different errors on invalid input in some
    cases. The main changes should be that a `RuntimeError` was replaced with a more
    fitting `TypeError`. When multiple errors were present in the same call, NumPy
    may now raise a different one.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` argument validation'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy will now partially validate arguments before calling `__array_ufunc__`.
    Previously, it was possible to pass on invalid arguments (such as a non-existing
    keyword argument) when dispatch was known to occur.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: '`__array_ufunc__` and additional positional arguments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, all positionally passed arguments were checked for `__array_ufunc__`
    support. In the case of `reduce`, `accumulate`, and `reduceat` all arguments may
    be passed by position. This means that when they were passed by position, they
    could previously have been asked to handle the ufunc call via `__array_ufunc__`.
    Since this depended on the way the arguments were passed (by position or by keyword),
    NumPy will now only dispatch on the input and output array. For example, NumPy
    will never dispatch on the `where` array in a reduction such as `np.add.reduce`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-15271](https://github.com/numpy/numpy/pull/15271))
  prefs: []
  type: TYPE_NORMAL
- en: Validate input values in `Generator.uniform`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Checked that `high - low >= 0` in `np.random.Generator.uniform`. Raises `ValueError`
    if `low > high`. Previously out-of-order inputs were accepted and silently swapped,
    so that if `low > high`, the value generated was `high + (low - high) * random()`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17921](https://github.com/numpy/numpy/pull/17921))
  prefs: []
  type: TYPE_NORMAL
- en: '`/usr/include` removed from default include paths'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default include paths when building a package with `numpy.distutils` no
    longer include `/usr/include`. This path is normally added by the compiler, and
    hardcoding it can be problematic. In case this causes a problem, please open an
    issue. A workaround is documented in PR 18658.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18658](https://github.com/numpy/numpy/pull/18658))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to comparisons with `dtype=...`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the `dtype=` (or `signature`) arguments to comparison ufuncs (`equal`,
    `less`, etc.) is used, this will denote the desired output dtype in the future.
    This means that:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(2, 3, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'will give a `FutureWarning` that it will return an `object` array in the future,
    which currently happens for:'
  prefs: []
  type: TYPE_NORMAL
- en: np.equal(None, None, dtype=object)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: due to the fact that `np.array(None)` is already an object array. (This also
    happens for some other dtypes.)
  prefs: []
  type: TYPE_NORMAL
- en: Since comparisons normally only return boolean arrays, providing any other dtype
    will always raise an error in the future and give a `DeprecationWarning` now.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Changes to `dtype` and `signature` arguments in ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The universal function arguments `dtype` and `signature` which are also valid
    for reduction such as `np.add.reduce` (which is the implementation for `np.sum`)
    will now issue a warning when the `dtype` provided is not a “basic” dtype.
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy almost always ignored metadata, byteorder or time units on these inputs.
    NumPy will now always ignore it and raise an error if byteorder or time unit changed.
    The following are the most important examples of changes which will give the error.
    In some cases previously the information stored was not ignored, in all of these
    an error is now raised:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The same applies for functions like `np.sum` which use these internally. This
    change is necessary to achieve consistent handling within NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: If you run into these, in most cases pass for example `dtype=np.timedelta64`
    which clearly denotes a general `timedelta64` without any unit or byte-order defined.
    If you need to specify the output dtype precisely, you may do so by either casting
    the inputs or providing an output array using *out=*.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy may choose to allow providing an exact output `dtype` here in the future,
    which would be preceded by a `FutureWarning`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Ufunc `signature=...` and `dtype=` generalization and `casting`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The behaviour for `np.ufunc(1.0, 1.0, signature=...)` or `np.ufunc(1.0, 1.0,
    dtype=...)` can now yield different loops in 1.21 compared to 1.20 because of
    changes in promotion. When `signature` was previously used, the casting check
    on inputs was relaxed, which could lead to downcasting inputs unsafely especially
    if combined with `casting="unsafe"`.
  prefs: []
  type: TYPE_NORMAL
- en: Casting is now guaranteed to be safe. If a signature is only partially provided,
    for example using `signature=("float64", None, None)`, this could lead to no loop
    being found (an error). In that case, it is necessary to provide the complete
    signature to enforce casting the inputs. If `dtype="float64"` is used or only
    outputs are set (e.g. `signature=(None, None, "float64")` the is unchanged. We
    expect that very few users are affected by this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, the meaning of `dtype="float64"` has been slightly modified and now
    strictly enforces only the correct output (and not input) DTypes. This means it
    is now always equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '(If the ufunc has two inputs and one output). Since this could lead to no loop
    being found in some cases, NumPy will normally also search for the loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: if the first search failed. In the future, this behaviour may be customized
    to achieve the expected results for more complex ufuncs. (For some universal functions
    such as `np.ldexp` inputs can have different DTypes.)
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18880](https://github.com/numpy/numpy/pull/18880))
  prefs: []
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy distutils will now always add the `-ffp-exception-behavior=strict` compiler
    flag when compiling with clang. Clang defaults to a non-strict version, which
    allows the compiler to generate code that does not set floating point warnings/errors
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19049](https://github.com/numpy/numpy/pull/19049))
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use of `ufunc->type_resolver` and “type tuple”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: Use of `ufunc->type_resolver` and “type tuple”
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now normalizes the “type tuple” argument to the type resolver functions
    before calling it. Note that in the use of this type resolver is legacy behaviour
    and NumPy will not do so when possible. Calling `ufunc->type_resolver` or `PyUFunc_DefaultTypeResolver`
    is strongly discouraged and will now enforce a normalized type tuple if done.
    Note that this does not affect providing a type resolver, which is expected to
    keep working in most circumstances. If you have an unexpected use-case for calling
    the type resolver, please inform the NumPy developers so that a solution can be
    found.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18718](https://github.com/numpy/numpy/pull/18718))
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  prefs: []
  type: TYPE_NORMAL
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  prefs: []
  type: TYPE_NORMAL
- en: New `min_digits` argument for printing float values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  prefs: []
  type: TYPE_NORMAL
- en: f2py now recognizes Fortran abstract interface blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  prefs: []
  type: TYPE_NORMAL
- en: BLAS and LAPACK configuration via environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  prefs: []
  type: TYPE_NORMAL
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  prefs: []
  type: TYPE_NORMAL
- en: A runtime-subcriptable alias has been added for `ndarray`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  prefs: []
  type: TYPE_NORMAL
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  prefs: []
  type: TYPE_NORMAL
- en: Added a mypy plugin for handling platform-specific `numpy.number` precisions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [mypy](http://mypy-lang.org/) plugin is now available for automatically assigning
    the (platform-dependent) precisions of certain [`number`](../reference/arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](../reference/arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](../reference/arrays.scalars.html#numpy.intp "numpy.intp")
    and [`longlong`](../reference/arrays.scalars.html#numpy.longlong "numpy.longlong").
    See the documentation on [scalar types](../reference/arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that while usage of the plugin is completely optional, without it the precision
    of above-mentioned classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-17843](https://github.com/numpy/numpy/pull/17843))
  prefs: []
  type: TYPE_NORMAL
- en: Let the mypy plugin manage extended-precision `numpy.number` subclasses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has been expanded: the plugin now removes annotations for platform-specific extended-precision
    types that are not available to the platform in question. For example, it will
    remove [`float128`](../reference/arrays.scalars.html#numpy.float128 "numpy.float128")
    when not available.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available on all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18322](https://github.com/numpy/numpy/pull/18322))
  prefs: []
  type: TYPE_NORMAL
- en: New `min_digits` argument for printing float values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new `min_digits` argument has been added to the dragon4 float printing functions
    [`format_float_positional`](../reference/generated/numpy.format_float_positional.html#numpy.format_float_positional
    "numpy.format_float_positional") and [`format_float_scientific`](../reference/generated/numpy.format_float_scientific.html#numpy.format_float_scientific
    "numpy.format_float_scientific") . This kwd guarantees that at least the given
    number of digits will be printed when printing in unique=True mode, even if the
    extra digits are unnecessary to uniquely specify the value. It is the counterpart
    to the precision argument which sets the maximum number of digits to be printed.
    When unique=False in fixed precision mode, it has no effect and the precision
    argument fixes the number of digits.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18629](https://github.com/numpy/numpy/pull/18629))
  prefs: []
  type: TYPE_NORMAL
- en: f2py now recognizes Fortran abstract interface blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`f2py`](../f2py/usage.html#module-numpy.f2py "numpy.f2py") can now parse abstract
    interface blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18695](https://github.com/numpy/numpy/pull/18695))
  prefs: []
  type: TYPE_NORMAL
- en: BLAS and LAPACK configuration via environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autodetection of installed BLAS and LAPACK libraries can be bypassed by using
    the `NPY_BLAS_LIBS` and `NPY_LAPACK_LIBS` environment variables. Instead, the
    link flags in these environment variables will be used directly, and the language
    is assumed to be F77\. This is especially useful in automated builds where the
    BLAS and LAPACK that are installed are known exactly. A use case is replacing
    the actual implementation at runtime via stub library links.
  prefs: []
  type: TYPE_NORMAL
- en: If `NPY_CBLAS_LIBS` is set (optional in addition to `NPY_BLAS_LIBS`), this will
    be used as well, by defining `HAVE_CBLAS` and appending the environment variable
    content to the link flags.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18737](https://github.com/numpy/numpy/pull/18737))
  prefs: []
  type: TYPE_NORMAL
- en: A runtime-subcriptable alias has been added for `ndarray`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.typing.NDArray` has been added, a runtime-subscriptable alias for `np.ndarray[Any,
    np.dtype[~Scalar]]`. The new type alias can be used for annotating arrays with
    a given dtype and unspecified shape. ¹'
  prefs: []
  type: TYPE_NORMAL
- en: ¹ NumPy does not support the annotating of array shapes as of 1.21, this is
    expected to change in the future though (see [**PEP 646**](https://peps.python.org/pep-0646/)).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-18935](https://github.com/numpy/numpy/pull/18935))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arbitrary `period` option for `numpy.unwrap`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.unique` now returns single `NaN`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  prefs: []
  type: TYPE_NORMAL
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  prefs: []
  type: TYPE_NORMAL
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder annotations have been improved
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary `period` option for `numpy.unwrap`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of the interval over which phases are unwrapped is no longer restricted
    to `2 * pi`. This is especially useful for unwrapping degrees, but can also be
    used for other intervals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-16987](https://github.com/numpy/numpy/pull/16987))
  prefs: []
  type: TYPE_NORMAL
- en: '`np.unique` now returns single `NaN`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `np.unique` operated on an array with multiple `NaN` entries, its return
    included a `NaN` for each entry that was `NaN` in the original array. This is
    now improved such that the returned array contains just one `NaN` as the last
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Also for complex arrays all `NaN` values are considered equivalent (no matter
    whether the `NaN` is in the real or imaginary part). As the representant for the
    returned array the smallest one in the lexicographical order is chosen - see `np.sort`
    for how the lexicographical order is defined for complex arrays.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18070](https://github.com/numpy/numpy/pull/18070))
  prefs: []
  type: TYPE_NORMAL
- en: '`Generator.rayleigh` and `Generator.geometric` performance improved'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The performance of Rayleigh and geometric random variate generation in `Generator`
    has improved. These are both transformation of exponential random variables and
    the slow log-based inverse cdf transformation has been replaced with the Ziggurat-based
    exponential variate generator.
  prefs: []
  type: TYPE_NORMAL
- en: This change breaks the stream of variates generated when variates from either
    of these distributions are produced.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18666](https://github.com/numpy/numpy/pull/18666))
  prefs: []
  type: TYPE_NORMAL
- en: Placeholder annotations have been improved
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All placeholder annotations, that were previously annotated as `typing.Any`,
    have been improved. Where appropriate they have been replaced with explicit function
    definitions, classes or other miscellaneous objects.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18934](https://github.com/numpy/numpy/pull/18934))
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Improved performance in integer division of NumPy arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  prefs: []
  type: TYPE_NORMAL
- en: Improve performance of `np.save` and `np.load` for small arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.save` is now a lot faster for small arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  prefs: []
  type: TYPE_NORMAL
- en: Improved performance in integer division of NumPy arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integer division of NumPy arrays now uses [libdivide](https://libdivide.com/)
    when the divisor is a constant. With the usage of libdivide and other minor optimizations,
    there is a large speedup. The `//` operator and `np.floor_divide` makes use of
    the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17727](https://github.com/numpy/numpy/pull/17727))
  prefs: []
  type: TYPE_NORMAL
- en: Improve performance of `np.save` and `np.load` for small arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.save` is now a lot faster for small arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: '`np.load` is also faster for small arrays, but only when serializing with a
    version >= `(3, 0)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Both are done by removing checks that are only relevant for Python 2, while
    still maintaining compatibility with arrays which might have been created by Python
    2.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18657](https://github.com/numpy/numpy/pull/18657))
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  prefs: []
  type: TYPE_NORMAL
- en: Enable Accelerate Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise") output class now matches the input class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When [`ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    subclasses are used on input to [`piecewise`](../reference/generated/numpy.piecewise.html#numpy.piecewise
    "numpy.piecewise"), they are passed on to the functions. The output will now be
    of the same subclass as well.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18110](https://github.com/numpy/numpy/pull/18110))
  prefs: []
  type: TYPE_NORMAL
- en: Enable Accelerate Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the release of macOS 11.3, several different issues that numpy was encountering
    when using Accelerate Framework’s implementation of BLAS and LAPACK should be
    resolved. This change enables the Accelerate Framework as an option on macOS.
    If additional issues are found, please file a bug report against Accelerate using
    the developer feedback assistant tool ([https://developer.apple.com/bug-reporting/](https://developer.apple.com/bug-reporting/)).
    We intend to address issues promptly and plan to continue supporting and updating
    our BLAS and LAPACK libraries.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18874](https://github.com/numpy/numpy/pull/18874))
  prefs: []
  type: TYPE_NORMAL
