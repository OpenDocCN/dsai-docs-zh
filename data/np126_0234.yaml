- en: numpy.nditer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.nditer
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html](https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html](https://numpy.org/doc/1.26/reference/generated/numpy.nditer.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Efficient multi-dimensional iterator object to iterate over arrays. To get started
    using this object, see the [introductory guide to array iteration](../arrays.nditer.html#arrays-nditer).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的多维迭代器对象，用于迭代数组。要开始使用此对象，请参阅 [数组迭代的入门指南](../arrays.nditer.html#arrays-nditer)。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**op**ndarray or sequence of array_like'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**op** ndarray 或数组类序列'
- en: The array(s) to iterate over.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要迭代的数组。
- en: '**flags**sequence of str, optional'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**flags** str 的序列，可选'
- en: Flags to control the behavior of the iterator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用于控制迭代器行为的标志。
- en: '`buffered` enables buffering when required.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buffered` 在需要时启用缓冲。'
- en: '`c_index` causes a C-order index to be tracked.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c_index` 导致 C 顺序索引被跟踪。'
- en: '`f_index` causes a Fortran-order index to be tracked.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f_index` 导致 Fortran 顺序索引被跟踪。'
- en: '`multi_index` causes a multi-index, or a tuple of indices with one per iteration
    dimension, to be tracked.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multi_index` 导致多索引，或每个迭代维度一个的索引元组，被跟踪。'
- en: '`common_dtype` causes all the operands to be converted to a common data type,
    with copying or buffering as necessary.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common_dtype` 导致所有操作数被转换为共同的数据类型，必要时进行复制或缓冲。'
- en: '`copy_if_overlap` causes the iterator to determine if read operands have overlap
    with write operands, and make temporary copies as necessary to avoid overlap.
    False positives (needless copying) are possible in some cases.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy_if_overlap` 导致迭代器确定读操作数是否与写操作数重叠，并根据需要进行临时复制以避免重叠。在某些情况下可能会出现误报（不必要的复制）。'
- en: '`delay_bufalloc` delays allocation of the buffers until a reset() call is made.
    Allows `allocate` operands to be initialized before their values are copied into
    the buffers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delay_bufalloc` 延迟直到调用 reset() 调用才分配缓冲区。允许在将其值复制到缓冲区之前初始化 `allocate` 操作数。'
- en: '`external_loop` causes the `values` given to be one-dimensional arrays with
    multiple values instead of zero-dimensional arrays.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`external_loop` 导致给定的`values`成为多值一维数组，而不是零维数组。'
- en: '`grow_inner` allows the `value` array sizes to be made larger than the buffer
    size when both `buffered` and `external_loop` is used.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grow_inner` 允许在使用 `buffered` 和 `external_loop` 时将 `value` 数组大小设置为大于缓冲区大小。'
- en: '`ranged` allows the iterator to be restricted to a sub-range of the iterindex
    values.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ranged` 允许将迭代器限制为 iterindex 值的子范围。'
- en: '`refs_ok` enables iteration of reference types, such as object arrays.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refs_ok` 启用引用类型的迭代，例如对象数组。'
- en: '`reduce_ok` enables iteration of `readwrite` operands which are broadcasted,
    also known as reduction operands.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce_ok` 启用广播的 `readwrite` 操作数的迭代，也称为约简操作数。'
- en: '`zerosize_ok` allows [`itersize`](numpy.nditer.itersize.html#numpy.nditer.itersize
    "numpy.nditer.itersize") to be zero.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zerosize_ok` 允许 [`itersize`](numpy.nditer.itersize.html#numpy.nditer.itersize
    "numpy.nditer.itersize") 为零。'
- en: '**op_flags**list of list of str, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**op_flags**列表的列表的 str，可选'
- en: This is a list of flags for each operand. At minimum, one of `readonly`, `readwrite`,
    or `writeonly` must be specified.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个操作数的标志列表。至少必须指定其中之一：`readonly`、`readwrite` 或 `writeonly`。
- en: '`readonly` indicates the operand will only be read from.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readonly` 表示操作数只会被读取。'
- en: '`readwrite` indicates the operand will be read from and written to.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readwrite` 表示操作数将被读取和写入。'
- en: '`writeonly` indicates the operand will only be written to.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writeonly` 表示操作数只会被写入。'
- en: '`no_broadcast` prevents the operand from being broadcasted.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_broadcast` 防止操作数被广播。'
- en: '`contig` forces the operand data to be contiguous.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contig` 强制操作数数据是连续的。'
- en: '`aligned` forces the operand data to be aligned.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aligned` 强制操作数数据对齐。'
- en: '`nbo` forces the operand data to be in native byte order.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nbo` 强制操作数数据采用本机字节顺序。'
- en: '`copy` allows a temporary read-only copy if required.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`copy` 如果需要，允许临时只读副本。'
- en: '`updateifcopy` allows a temporary read-write copy if required.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateifcopy` 如果需要，允许临时读写副本。'
- en: '`allocate` causes the array to be allocated if it is None in the `op` parameter.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allocate` 导致如果`op`参数中为 None，则分配数组。'
- en: '`no_subtype` prevents an `allocate` operand from using a subtype.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_subtype` 防止分配操作数使用子类型。'
- en: '`arraymask` indicates that this operand is the mask to use for selecting elements
    when writing to operands with the ‘writemasked’ flag set. The iterator does not
    enforce this, but when writing from a buffer back to the array, it only copies
    those elements indicated by this mask.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arraymask` 表示此操作数是在写入具有设置了 ‘writemasked’ 标志的操作数时使用的掩码。迭代器不强制此功能，但在将缓冲区写回数组时，只会复制由此掩码指示的元素。'
- en: '`writemasked` indicates that only elements where the chosen `arraymask` operand
    is True will be written to.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writemasked` 指示只有在选择的 `arraymask` 操作数为 True 时才会被写入的元素。'
- en: '`overlap_assume_elementwise` can be used to mark operands that are accessed
    only in the iterator order, to allow less conservative copying when `copy_if_overlap`
    is present.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlap_assume_elementwise` 可以用来标记只在迭代器顺序中访问的操作数，以在存在 `copy_if_overlap` 时允许更少保守的复制。'
- en: '**op_dtypes**dtype or tuple of dtype(s), optional'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**op_dtypes** 标量数据类型或数据类型的元组，可选'
- en: The required data type(s) of the operands. If copying or buffering is enabled,
    the data will be converted to/from their original types.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数的所需数据类型。如果启用了复制或缓冲，数据将转换为/从其原始类型。
- en: '**order**{‘C’, ‘F’, ‘A’, ‘K’}, optional'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**order** {‘C’, ‘F’, ‘A’, ‘K’}，可选'
- en: Controls the iteration order. ‘C’ means C order, ‘F’ means Fortran order, ‘A’
    means ‘F’ order if all the arrays are Fortran contiguous, ‘C’ order otherwise,
    and ‘K’ means as close to the order the array elements appear in memory as possible.
    This also affects the element memory order of `allocate` operands, as they are
    allocated to be compatible with iteration order. Default is ‘K’.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 控制迭代顺序。‘C’ 表示 C 顺序，‘F’ 表示 Fortran 顺序，‘A’ 表示如果所有数组都是 Fortran 连续的，则为 ‘F’ 顺序，否则为‘C’
    顺序，‘K’ 表示尽可能接近内存中数组元素出现的顺序。这也影响到 `allocate` 操作数的元素内存顺序，因为它们被分配为与迭代顺序兼容的。默认为 ‘K’。
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**casting** {‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}，可选'
- en: Controls what kind of data casting may occur when making a copy or buffering.
    Setting this to ‘unsafe’ is not recommended, as it can adversely affect accumulations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 控制在进行复制或缓冲时可能发生的数据类型转换的种类。不建议将其设置为 ‘unsafe’，因为它可能会对累积产生不利影响。
- en: ‘no’ means the data types should not be cast at all.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘no’ 表示数据类型根本不应该进行转换。
- en: ‘equiv’ means only byte-order changes are allowed.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘equiv’ 表示只允许字节顺序更改。
- en: ‘safe’ means only casts which can preserve values are allowed.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘safe’ 表示只允许可以保留值的转换。
- en: ‘same_kind’ means only safe casts or casts within a kind, like float64 to float32,
    are allowed.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘same_kind’ 表示只允许安全转换或同种类型的转换，例如 float64 到 float32。
- en: ‘unsafe’ means any data conversions may be done.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘unsafe’ 表示任何数据转换都可能发生。
- en: '**op_axes**list of list of ints, optional'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**op_axes** 整数的列表的列表，可选'
- en: If provided, is a list of ints or None for each operands. The list of axes for
    an operand is a mapping from the dimensions of the iterator to the dimensions
    of the operand. A value of -1 can be placed for entries, causing that dimension
    to be treated as [`newaxis`](../constants.html#numpy.newaxis "numpy.newaxis").
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了，则每个操作数应该是一个整数列表，或者是 None。操作数的轴列表是从迭代器的维度到操作数的维度的映射。可以对条目放置一个值为 -1 的值，导致该维度被视为
    [`newaxis`](../constants.html#numpy.newaxis "numpy.newaxis")。
- en: '**itershape**tuple of ints, optional'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**itershape** 整数的元组，可选'
- en: The desired shape of the iterator. This allows `allocate` operands with a dimension
    mapped by op_axes not corresponding to a dimension of a different operand to get
    a value not equal to 1 for that dimension.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器的期望形状。这允许维度由 op_axes 映射的 `allocate` 操作数在不对应于其他操作数的维度的情况下获得一个非等于 1 的值。
- en: '**buffersize**int, optional'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**buffersize** 整数，可选'
- en: When buffering is enabled, controls the size of the temporary buffers. Set to
    0 for the default value.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用缓冲时，控制临时缓冲区的大小。设置为 0 以使用默认值。
- en: Notes
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: '[`nditer`](#numpy.nditer "numpy.nditer") supersedes [`flatiter`](numpy.flatiter.html#numpy.flatiter
    "numpy.flatiter"). The iterator implementation behind [`nditer`](#numpy.nditer
    "numpy.nditer") is also exposed by the NumPy C API.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nditer`](#numpy.nditer "numpy.nditer") 代替了 [`flatiter`](numpy.flatiter.html#numpy.flatiter
    "numpy.flatiter")。[`nditer`](#numpy.nditer "numpy.nditer") 的迭代器实现也暴露在 NumPy C
    API 中。'
- en: The Python exposure supplies two iteration interfaces, one which follows the
    Python iterator protocol, and another which mirrors the C-style do-while pattern.
    The native Python approach is better in most cases, but if you need the coordinates
    or index of an iterator, use the C-style pattern.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python 扩展提供了两种迭代接口，一个遵循 Python 迭代器协议，另一个模仿了 C 风格的 do-while 模式。在大多数情况下，原生的 Python
    方法更好，但如果需要迭代器的坐标或索引，则可以使用 C 风格的模式。
- en: Examples
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Here is how we might write an `iter_add` function, using the Python iterator
    protocol:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可能如何编写 `iter_add` 函数，使用 Python 迭代器协议：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the same function, but following the C-style pattern:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相同的函数，但遵循 C 风格的模式：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is an example outer product function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个外积函数的示例：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is an example function which operates like a “lambda” ufunc:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个操作类似“lambda”的 ufunc 的示例函数：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If operand flags `"writeonly"` or `"readwrite"` are used the operands may be
    views into the original data with the *WRITEBACKIFCOPY* flag. In this case [`nditer`](#numpy.nditer
    "numpy.nditer") must be used as a context manager or the [`nditer.close`](numpy.nditer.close.html#numpy.nditer.close
    "numpy.nditer.close") method must be called before using the result. The temporary
    data will be written back to the original data when the `__exit__` function is
    called but not before:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作数标志为`“writeonly”`或`“readwrite”`，则操作数可能是对原始数据的视图，具有 *WRITEBACKIFCOPY* 标志。
    在这种情况下，必须使用 [`nditer`](#numpy.nditer "numpy.nditer") 作为上下文管理器，或者在使用结果之前必须调用 [`nditer.close`](numpy.nditer.close.html#numpy.nditer.close
    "numpy.nditer.close") 方法。 临时数据将在调用 `__exit__` 函数时写回原始数据，但在此之前不会：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is important to note that once the iterator is exited, dangling references
    (like *x* in the example) may or may not share data with the original data *a*.
    If writeback semantics were active, i.e. if *x.base.flags.writebackifcopy* is
    *True*, then exiting the iterator will sever the connection between *x* and *a*,
    writing to *x* will no longer write to *a*. If writeback semantics are not active,
    then *x.data* will still point at some part of *a.data*, and writing to one will
    affect the other.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，一旦迭代器退出，悬空引用（例如示例中的 *x*）可能与原始数据 *a* 共享数据，也可能不共享。 如果写回语义处于活动状态，即如果 *x.base.flags.writebackifcopy*
    为 *True*，那么退出迭代器将切断 *x* 与 *a* 之间的连接，向 *x* 写入将不再写入 *a*。 如果写回语义未激活，则 *x.data* 仍将指向
    *a.data* 的某个部分，对其中一个进行写入将影响另一个。
- en: Context management and the [`close`](numpy.nditer.close.html#numpy.nditer.close
    "numpy.nditer.close") method appeared in version 1.15.0.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理和 [`close`](numpy.nditer.close.html#numpy.nditer.close "numpy.nditer.close")
    方法出现在版本 1.15.0 中。
- en: 'Attributes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**dtypes**tuple of dtype(s)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**dtypes**dtype 元组'
- en: The data types of the values provided in [`value`](numpy.nditer.value.html#numpy.nditer.value
    "numpy.nditer.value"). This may be different from the operand data types if buffering
    is enabled. Valid only before the iterator is closed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [`value`](numpy.nditer.value.html#numpy.nditer.value "numpy.nditer.value")
    中提供的值的数据类型。 如果启用了缓冲，则可能与操作数数据类型不同。 仅在迭代器关闭之前有效。
- en: '**finished**bool'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**finished**布尔值'
- en: Whether the iteration over the operands is finished or not.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数上的迭代是否完成。
- en: '**has_delayed_bufalloc**bool'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**has_delayed_bufalloc**布尔值'
- en: If True, the iterator was created with the `delay_bufalloc` flag, and no reset()
    function was called on it yet.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则迭代器使用 `delay_bufalloc` 标志创建，并且尚未对其调用 reset() 函数。
- en: '**has_index**bool'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**has_index**布尔值'
- en: If True, the iterator was created with either the `c_index` or the `f_index`
    flag, and the property [`index`](numpy.nditer.index.html#numpy.nditer.index "numpy.nditer.index")
    can be used to retrieve it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则迭代器是使用 `c_index` 或 `f_index` 标志创建的，可以使用属性[`index`](numpy.nditer.index.html#numpy.nditer.index
    "numpy.nditer.index")来检索它。
- en: '**has_multi_index**bool'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**has_multi_index**布尔值'
- en: If True, the iterator was created with the `multi_index` flag, and the property
    [`multi_index`](numpy.nditer.multi_index.html#numpy.nditer.multi_index "numpy.nditer.multi_index")
    can be used to retrieve it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则迭代器使用 `multi_index` 标志创建，并且可以使用属性 [`multi_index`](numpy.nditer.multi_index.html#numpy.nditer.multi_index
    "numpy.nditer.multi_index") 来检索它。
- en: '**index**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**index**'
- en: When the `c_index` or `f_index` flag was used, this property provides access
    to the index. Raises a ValueError if accessed and `has_index` is False.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `c_index` 或 `f_index` 标志时，此属性提供对索引的访问。 如果访问并且 `has_index` 为 False，则引发 ValueError。
- en: '**iterationneedsapi**bool'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterationneedsapi**布尔值'
- en: Whether iteration requires access to the Python API, for example if one of the
    operands is an object array.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代是否需要访问 Python API，例如其中一个操作数是对象数组。
- en: '**iterindex**int'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**iterindex**整数'
- en: An index which matches the order of iteration.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个与迭代顺序匹配的索引。
- en: '**itersize**int'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**itersize**整数'
- en: Size of the iterator.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器的大小。
- en: '**itviews**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**itviews**'
- en: Structured view(s) of [`operands`](numpy.nditer.operands.html#numpy.nditer.operands
    "numpy.nditer.operands") in memory, matching the reordered and optimized iterator
    access pattern. Valid only before the iterator is closed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中的 [`operands`](numpy.nditer.operands.html#numpy.nditer.operands "numpy.nditer.operands")
    的结构化视图，匹配重新排序和优化的迭代器访问模式。 仅在迭代器关闭之前有效。
- en: '**multi_index**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**multi_index**'
- en: When the `multi_index` flag was used, this property provides access to the index.
    Raises a ValueError if accessed accessed and `has_multi_index` is False.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `multi_index` 标志时，此属性提供对索引的访问。如果访问并且 `has_multi_index` 为 False，则引发 ValueError。
- en: '**ndim**int'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**ndim**整数'
- en: The dimensions of the iterator.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器的维度。
- en: '**nop**int'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**nop**整数'
- en: The number of iterator operands.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器操作数的数量。
- en: '[`operands`](numpy.nditer.operands.html#numpy.nditer.operands "numpy.nditer.operands")tuple
    of operand(s)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[`operands`](numpy.nditer.operands.html#numpy.nditer.operands "numpy.nditer.operands")操作数的元组'
- en: operands[*Slice*]
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数[*切片*]
- en: '**shape**tuple of ints'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**shape**整数的元组'
- en: Shape tuple, the shape of the iterator.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 形状元组，迭代器的形状。
- en: '**value**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**'
- en: Value of `operands` at current iteration. Normally, this is a tuple of array
    scalars, but if the flag `external_loop` is used, it is a tuple of one dimensional
    arrays.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当前迭代的`operands`的值。通常，这是一个数组标量的元组，但如果使用 `external_loop` 标志，则是一个一维数组的元组。
- en: Methods
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`close`](numpy.nditer.close.html#numpy.nditer.close "numpy.nditer.close")()
    | Resolve all writeback semantics in writeable operands. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`close`](numpy.nditer.close.html#numpy.nditer.close "numpy.nditer.close")()
    | 解决可写操作数中所有回写语义。 |'
- en: '| [`copy`](numpy.nditer.copy.html#numpy.nditer.copy "numpy.nditer.copy")()
    | Get a copy of the iterator in its current state. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`copy`](numpy.nditer.copy.html#numpy.nditer.copy "numpy.nditer.copy")()
    | 获取迭代器在当前状态的副本。 |'
- en: '| [`debug_print`](numpy.nditer.debug_print.html#numpy.nditer.debug_print "numpy.nditer.debug_print")()
    | Print the current state of the [`nditer`](#numpy.nditer "numpy.nditer") instance
    and debug info to stdout. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`debug_print`](numpy.nditer.debug_print.html#numpy.nditer.debug_print "numpy.nditer.debug_print")()
    | 将当前[`nditer`](#numpy.nditer "numpy.nditer")实例的状态和调试信息打印到标准输出。 |'
- en: '| [`enable_external_loop`](numpy.nditer.enable_external_loop.html#numpy.nditer.enable_external_loop
    "numpy.nditer.enable_external_loop")() | When the "external_loop" was not used
    during construction, but is desired, this modifies the iterator to behave as if
    the flag was specified. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`enable_external_loop`](numpy.nditer.enable_external_loop.html#numpy.nditer.enable_external_loop
    "numpy.nditer.enable_external_loop")() | 在构造过程中未使用 "external_loop"，但希望使用时，此方法会修改迭代器以表现为已指定了该标志。
    |'
- en: '| [`iternext`](numpy.nditer.iternext.html#numpy.nditer.iternext "numpy.nditer.iternext")()
    | Check whether iterations are left, and perform a single internal iteration without
    returning the result. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`iternext`](numpy.nditer.iternext.html#numpy.nditer.iternext "numpy.nditer.iternext")()
    | 检查是否还有迭代次数，并执行单个内部迭代而不返回结果。 |'
- en: '| [`remove_axis`](numpy.nditer.remove_axis.html#numpy.nditer.remove_axis "numpy.nditer.remove_axis")(i, /)
    | Removes axis *i* from the iterator. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`remove_axis`](numpy.nditer.remove_axis.html#numpy.nditer.remove_axis "numpy.nditer.remove_axis")(i, /)
    | 从迭代器中删除轴 *i*。 |'
- en: '| [`remove_multi_index`](numpy.nditer.remove_multi_index.html#numpy.nditer.remove_multi_index
    "numpy.nditer.remove_multi_index")() | When the "multi_index" flag was specified,
    this removes it, allowing the internal iteration structure to be optimized further.
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`remove_multi_index`](numpy.nditer.remove_multi_index.html#numpy.nditer.remove_multi_index
    "numpy.nditer.remove_multi_index")() | 当指定了 "multi_index" 标志时，这会将其删除，从而允许进一步优化内部迭代结构。
    |'
- en: '| [`reset`](numpy.nditer.reset.html#numpy.nditer.reset "numpy.nditer.reset")()
    | Reset the iterator to its initial state. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`reset`](numpy.nditer.reset.html#numpy.nditer.reset "numpy.nditer.reset")()
    | 将迭代器重置为其初始状态。 |'
