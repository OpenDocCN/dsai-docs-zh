["```py\nclass scipy.interpolate.Rbf(*args, **kwargs)\n```", "```py\n'multiquadric': sqrt((r/self.epsilon)**2 + 1)\n'inverse': 1.0/sqrt((r/self.epsilon)**2 + 1)\n'gaussian': exp(-(r/self.epsilon)**2)\n'linear': r\n'cubic': r**3\n'quintic': r**5\n'thin_plate': r**2 * log(r) \n```", "```py\n>>> import numpy as np\n>>> from scipy.interpolate import Rbf\n>>> rng = np.random.default_rng()\n>>> x, y, z, d = rng.random((4, 50))\n>>> rbfi = Rbf(x, y, z, d)  # radial basis function interpolator instance\n>>> xi = yi = zi = np.linspace(0, 1, 20)\n>>> di = rbfi(xi, yi, zi)   # interpolated values\n>>> di.shape\n(20,) \n```"]