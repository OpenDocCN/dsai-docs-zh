["```py\nscipy.signal.freqz(b, a=1, worN=512, whole=False, plot=None, fs=6.283185307179586, include_nyquist=False)\n```", "```py\n jw                 -jw              -jwM\n   jw    B(e  )    b[0] + b[1]e    + ... + b[M]e\nH(e  ) = ------ = -----------------------------------\n            jw                 -jw              -jwN\n         A(e  )    a[0] + a[1]e    + ... + a[N]e \n```", "```py\nnp.linspace(0, fs if whole else fs/2, N, endpoint=include_nyquist) \n```", "```py\n>>> from scipy import signal\n>>> import numpy as np\n>>> b = signal.firwin(80, 0.5, window=('kaiser', 8))\n>>> w, h = signal.freqz(b) \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> fig, ax1 = plt.subplots()\n>>> ax1.set_title('Digital filter frequency response') \n```", "```py\n>>> ax1.plot(w, 20 * np.log10(abs(h)), 'b')\n>>> ax1.set_ylabel('Amplitude [dB]', color='b')\n>>> ax1.set_xlabel('Frequency [rad/sample]') \n```", "```py\n>>> ax2 = ax1.twinx()\n>>> angles = np.unwrap(np.angle(h))\n>>> ax2.plot(w, angles, 'g')\n>>> ax2.set_ylabel('Angle (radians)', color='g')\n>>> ax2.grid(True)\n>>> ax2.axis('tight')\n>>> plt.show() \n```", "```py\n>>> rng = np.random.default_rng()\n>>> b = rng.random((2, 25)) \n```", "```py\n>>> w, h = signal.freqz(b.T[..., np.newaxis], worN=1024)\n>>> w.shape\n(1024,)\n>>> h.shape\n(2, 1024) \n```", "```py\na = [   1      1  ]\n    [ -0.25, -0.5 ] \n```", "```py\n>>> b = np.array([0.5, 0.5])\n>>> a = np.array([[1, 1], [-0.25, -0.5]]) \n```", "```py\n>>> w, h = signal.freqz(b, a[..., np.newaxis], worN=1024)\n>>> w.shape\n(1024,)\n>>> h.shape\n(2, 1024) \n```"]