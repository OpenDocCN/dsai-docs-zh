- en: scipy.interpolate.make_interp_spline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_interp_spline.html#scipy.interpolate.make_interp_spline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.make_interp_spline.html#scipy.interpolate.make_interp_spline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the (coefficients of) interpolating B-spline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Abscissas.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like, shape (n, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Ordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: B-spline degree. Default is cubic, `k = 3`.
  prefs: []
  type: TYPE_NORMAL
- en: '**t**array_like, shape (nt + k + 1,), optional.'
  prefs: []
  type: TYPE_NORMAL
- en: Knots. The number of knots needs to agree with the number of data points and
    the number of derivatives at the edges. Specifically, `nt - n` must equal `len(deriv_l)
    + len(deriv_r)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**bc_type**2-tuple or None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Boundary conditions. Default is None, which means choosing the boundary conditions
    automatically. Otherwise, it must be a length-two tuple where the first element
    (`deriv_l`) sets the boundary conditions at `x[0]` and the second element (`deriv_r`)
    sets the boundary conditions at `x[-1]`. Each of these must be an iterable of
    pairs `(order, value)` which gives the values of derivatives of specified orders
    at the given edge of the interpolation interval. Alternatively, the following
    string aliases are recognized:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"clamped"`: The first derivatives at the ends are zero. This is'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: equivalent to `bc_type=([(1, 0.0)], [(1, 0.0)])`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"natural"`: The second derivatives at ends are zero. This is equivalent to
    `bc_type=([(2, 0.0)], [(2, 0.0)])`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"not-a-knot"` (default): The first and second segments are the same polynomial.
    This is equivalent to having `bc_type=None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"periodic"`: The values and the first `k-1` derivatives at the ends are equivalent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolation axis. Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input arrays contain only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination)
    if the inputs do contain infinities or NaNs. Default is True.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**a BSpline object of the degree `k` and with knots `t`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BSpline`](scipy.interpolate.BSpline.html#scipy.interpolate.BSpline "scipy.interpolate.BSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: base class representing the B-spline objects
  prefs: []
  type: TYPE_NORMAL
- en: '[`CubicSpline`](scipy.interpolate.CubicSpline.html#scipy.interpolate.CubicSpline
    "scipy.interpolate.CubicSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a cubic spline in the polynomial basis
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_lsq_spline`](scipy.interpolate.make_lsq_spline.html#scipy.interpolate.make_lsq_spline
    "scipy.interpolate.make_lsq_spline")'
  prefs: []
  type: TYPE_NORMAL
- en: a similar factory function for spline fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a wrapper over FITPACK spline fitting routines
  prefs: []
  type: TYPE_NORMAL
- en: '[`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a wrapper over FITPACK spline fitting routines
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Use cubic interpolation on Chebyshev nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that the default is a cubic spline with a not-a-knot boundary condition
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we use a ‘natural’ spline, with zero 2nd derivatives at edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Interpolation of parametric curves is also supported. As an example, we compute
    a discretization of a snail curve in polar coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Build an interpolating curve, parameterizing it by the angle
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the interpolant on a finer grid (note that we transpose the result
    to unpack it into a pair of x- and y-arrays)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Plot the result
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-make_interp_spline-1_00_00.png](../Images/35467e2de6a2e7926c1952169cc7c75b.png)'
  prefs: []
  type: TYPE_IMG
- en: Build a B-spline curve with 2 dimensional y
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Periodic condition is satisfied because y coordinates of points on the ends
    are equivalent
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-make_interp_spline-1_01_00.png](../Images/883e0852ff0ccd1f4df5607d54e5aeb9.png)'
  prefs: []
  type: TYPE_IMG
