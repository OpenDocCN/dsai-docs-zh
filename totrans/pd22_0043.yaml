- en: Time series / date functionality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列/日期功能
- en: 原文：[https://pandas.pydata.org/docs/user_guide/timeseries.html](https://pandas.pydata.org/docs/user_guide/timeseries.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/user_guide/timeseries.html](https://pandas.pydata.org/docs/user_guide/timeseries.html)
- en: pandas contains extensive capabilities and features for working with time series
    data for all domains. Using the NumPy `datetime64` and `timedelta64` dtypes, pandas
    has consolidated a large number of features from other Python libraries like `scikits.timeseries`
    as well as created a tremendous amount of new functionality for manipulating time
    series data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: pandas包含了广泛的功能和特性，用于处理各个领域的时间序列数据。使用NumPy的`datetime64`和`timedelta64`数据类型，pandas已经整合了许多其他Python��（如`scikits.timeseries`）的功能，并为操作时间序列数据创造了大量新功能。
- en: 'For example, pandas supports:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，pandas支持：
- en: Parsing time series information from various sources and formats
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从各种来源和格式解析时间序列信息
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Generate sequences of fixed-frequency dates and time spans
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 生成固定频率日期和时间跨度的序列
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Manipulating and converting date times with timezone information
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 操纵和转换带有时区信息的日期时间
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Resampling or converting a time series to a particular frequency
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对时间序列重新采样或转换为特定频率
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Performing date and time arithmetic with absolute or relative time increments
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用绝对或相对时间增量进行日期和时间算术运算
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: pandas provides a relatively compact and self-contained set of tools for performing
    the above tasks and more.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: pandas提供了一套相对紧凑和自包含的工具，用于执行上述任务以及更多任务。
- en: '## Overview'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '## 概述'
- en: 'pandas captures 4 general time related concepts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: pandas涵盖了4个与时间相关的概念：
- en: 'Date times: A specific date and time with timezone support. Similar to `datetime.datetime`
    from the standard library.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日期时间：具有时区支持的特定日期和时间。类似于标准库中的`datetime.datetime`。
- en: 'Time deltas: An absolute time duration. Similar to `datetime.timedelta` from
    the standard library.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间增量：绝对时间持续。类似于标准库中的`datetime.timedelta`。
- en: 'Time spans: A span of time defined by a point in time and its associated frequency.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间跨度：由时间点和其关联频率定义的时间跨度。
- en: 'Date offsets: A relative time duration that respects calendar arithmetic. Similar
    to `dateutil.relativedelta.relativedelta` from the `dateutil` package.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日期偏移：尊重日历算术的相对时间持续。类似于`dateutil`包中的`dateutil.relativedelta.relativedelta`。
- en: '| Concept | Scalar Class | Array Class | pandas Data Type | Primary Creation
    Method |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 概念 | 标量类 | 数组类 | pandas数据类型 | 主要创建方法 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Date times | `Timestamp` | `DatetimeIndex` | `datetime64[ns]` or `datetime64[ns,
    tz]` | `to_datetime` or `date_range` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 日期时间 | `Timestamp` | `DatetimeIndex` | `datetime64[ns]`或`datetime64[ns, tz]`
    | `to_datetime`或`date_range` |'
- en: '| Time deltas | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`
    or `timedelta_range` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 时间增量 | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`或`timedelta_range`
    |'
- en: '| Time spans | `Period` | `PeriodIndex` | `period[freq]` | `Period` or `period_range`
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 时间跨度 | `Period` | `PeriodIndex` | `period[freq]` | `Period`或`period_range`
    |'
- en: '| Date offsets | `DateOffset` | `None` | `None` | `DateOffset` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 日期偏移 | `DateOffset` | `None` | `None` | `DateOffset` |'
- en: For time series data, it’s conventional to represent the time component in the
    index of a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    so manipulations can be performed with respect to the time element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列数据，通常将时间组件表示为[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的索引，以便可以根据时间元素执行操作。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    can directly also support the time component as data itself.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")也可以直接支持时间组件作为数据本身。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    have extended data type support and functionality for `datetime`, `timedelta`
    and `Period` data when passed into those constructors. `DateOffset` data however
    will be stored as `object` data.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递到这些构造函数时，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")在`datetime`、`timedelta`和`Period`数据方面具有扩展的数据类型支持和功能。但是，`DateOffset`数据将被存储为`object`数据。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Lastly, pandas represents null date times, time deltas, and time spans as `NaT`
    which is useful for representing missing or null date like values and behaves
    similar as `np.nan` does for float data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，pandas将空日期时间、时间差和时间跨度表示为`NaT`，这对于表示缺失或空日期值非常有用，并且与`np.nan`对浮点数据的行为类似。
- en: '[PRE8]  ## Timestamps vs. time spans'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]  ## 时间戳 vs. 时间跨度'
- en: Timestamped data is the most basic type of time series data that associates
    values with points in time. For pandas objects it means using the points in time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳数据是将值与时间点关联的最基本类型的时间序列数据。对于pandas对象，这意味着使用时间点。
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, in many cases it is more natural to associate things like change variables
    with a time span instead. The span represented by `Period` can be specified explicitly,
    or inferred from datetime string format.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，将变量与时间跨度关联起来更为自然。`Period`表示的跨度可以明确指定，也可以从日期时间字符串格式中推断出。
- en: 'For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    and [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    can serve as an index. Lists of `Timestamp` and `Period` are automatically coerced
    to [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") respectively.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")和[`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period")可以用作索引。`Timestamp`和`Period`的列表会自动强制转换为[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")和[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex")。'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'pandas allows you to capture both representations and convert between them.
    Under the hood, pandas represents timestamps using instances of `Timestamp` and
    sequences of timestamps using instances of `DatetimeIndex`. For regular time spans,
    pandas uses `Period` objects for scalar values and `PeriodIndex` for sequences
    of spans. Better support for irregular intervals with arbitrary start and end
    points are forth-coming in future releases.  ## Converting to timestamps'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'pandas允许您捕获这两种表示形式并在它们之间进行转换。在内部，pandas使用`Timestamp`的实例表示时间戳，使用`DatetimeIndex`的实例表示时间戳序列。对于常规时间跨度，pandas使用`Period`对象表示标量值，使用`PeriodIndex`表示跨度序列。未来版本将更好地支持具有任意起始点和结束点的不规则间隔。  ##
    转换为时间戳'
- en: 'To convert a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or list-like object of date-like objects e.g. strings, epochs, or a mixture, you
    can use the `to_datetime` function. When passed a `Series`, this returns a `Series`
    (with the same index), while a list-like is converted to a `DatetimeIndex`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要将[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或类似列表的日期样式对象（例如字符串、时代或混合物）转换为`to_datetime`函数。当传递一个`Series`时，这将返回一个`Series`（具有相同的索引），而类似列表将转换为`DatetimeIndex`：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you use dates which start with the day first (i.e. European style), you
    can pass the `dayfirst` flag:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用以日期为首的日期（即欧洲风格），您可以传递`dayfirst`标志：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: You see in the above example that `dayfirst` isn’t strict. If a date can’t be
    parsed with the day being first it will be parsed as if `dayfirst` were `False`
    and a warning will also be raised.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在上面的示例中看到`dayfirst`并不是严格的。如果日期不能以日期为首解析，它将被解析为如果`dayfirst`为`False`，同时还会引发警告。
- en: If you pass a single string to `to_datetime`, it returns a single `Timestamp`.
    `Timestamp` can also accept string input, but it doesn’t accept string parsing
    options like `dayfirst` or `format`, so use `to_datetime` if these are required.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将单个字符串传递给`to_datetime`，它将返回一个单个`Timestamp`。`Timestamp`也可以接受字符串输入，但不接受像`dayfirst`或`format`这样的字符串解析选项，因此如果需要这些选项，请使用`to_datetime`。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also use the `DatetimeIndex` constructor directly:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以直接使用`DatetimeIndex`构造函数：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The string ‘infer’ can be passed in order to set the frequency of the index
    as the inferred frequency upon creation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递字符串‘infer’以将索引的频率设置为创建时推断的频率：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '### Providing a format argument'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '### 提供一个格式参数'
- en: In addition to the required datetime string, a `format` argument can be passed
    to ensure specific parsing. This could also potentially speed up the conversion
    considerably.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了必需的日期时间字符串外，还可以传递一个`format`参数以确保特定的解析。这也可能显著加快转换速度。
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: For more information on the choices available when specifying the `format` option,
    see the Python [datetime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在指定 `format` 选项时可用的选择的更多信息，请参阅 Python [datetime 文档](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)。
- en: Assembling datetime from multiple DataFrame columns
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从多个 DataFrame 列中组装日期时间
- en: You can also pass a `DataFrame` of integer or string columns to assemble into
    a `Series` of `Timestamps`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以传递一个整数或字符串列的 `DataFrame` 来组装成 `Timestamps` 的 `Series`。
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can pass only the columns that you need to assemble.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需传递需要组装的列。
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`pd.to_datetime` looks for standard designations of the datetime component
    in the column names, including:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.to_datetime` 会查找列名中日期时间组件的标准设计ations，包括：'
- en: 'required: `year`, `month`, `day`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必需的：`year`、`month`、`day`
- en: 'optional: `hour`, `minute`, `second`, `millisecond`, `microsecond`, `nanosecond`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的：`hour`、`minute`、`second`、`millisecond`、`microsecond`、`nanosecond`
- en: Invalid data
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效数据
- en: 'The default behavior, `errors=''raise''`, is to raise when unparsable:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为 `errors='raise'` 是在无法解析时引发异常：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Pass `errors=''coerce''` to convert unparsable data to `NaT` (not a time):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 传递 `errors='coerce'` 将无法解析的数据转换为 `NaT`（不是时间）：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '### Epoch timestamps'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '### Epoch 时间戳'
- en: pandas supports converting integer or float epoch times to `Timestamp` and `DatetimeIndex`.
    The default unit is nanoseconds, since that is how `Timestamp` objects are stored
    internally. However, epochs are often stored in another `unit` which can be specified.
    These are computed from the starting point specified by the `origin` parameter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持将整数或浮点 epoch 时间转换为 `Timestamp` 和 `DatetimeIndex`。默认单位是纳秒，因为这是 `Timestamp`
    对象在内部存储的方式。然而，epoch 通常以另一个可以指定的 `unit` 存储。这些是从 `origin` 参数指定的起始点计算出来的。
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `unit` parameter does not use the same strings as the `format` parameter
    that was discussed [above](#timeseries-converting-format)). The available units
    are listed on the documentation for [`pandas.to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`unit` 参数不使用与上面讨论的 `format` 参数相同的字符串。可用的单位在 [`pandas.to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") 的文档中列出。'
- en: 'Constructing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with an epoch timestamp with the `tz` argument specified
    will raise a ValueError. If you have epochs in wall time in another timezone,
    you can read the epochs as timezone-naive timestamps and then localize to the
    appropriate timezone:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定了 `tz` 参数的 epoch 时间戳构建 [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") 或 [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") 会引发 ValueError。如果你有另一个时区中的墙上时间的 epoch，你可以将 epoch 读取为时区无关的时间戳，然后本地化到适当的时区：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Epoch times will be rounded to the nearest nanosecond.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Epoch 时间将四舍五入到最接近的纳秒。
- en: Warning
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Conversion of float epoch times can lead to inaccurate and unexpected results.
    [Python floats](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(in Python v3.12)") have about 15 digits precision in decimal. Rounding during
    conversion from float to high precision `Timestamp` is unavoidable. The only way
    to achieve exact precision is to use a fixed-width types (e.g. an int64).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点 epoch 时间的转换可能导致不准确和意外的结果。[Python 浮点数](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(在 Python v3.12 中)") 在十进制中有大约 15 位数字的精度。在从浮点数转换为高精度 `Timestamp` 时进行四舍五入是不可避免的。实现精确精度的唯一方法是使用固定宽度类型（例如
    int64）。
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using the origin parameter](#timeseries-origin)  ### From timestamps to epoch'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 origin 参数](#timeseries-origin)  ### 从时间戳到 epoch'
- en: 'To invert the operation from above, namely, to convert from a `Timestamp` to
    a ‘unix’ epoch:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转上述操作，即从 `Timestamp` 转换为 ‘unix’ epoch：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We subtract the epoch (midnight at January 1, 1970 UTC) and then floor divide
    by the “unit” (1 second).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们减去 epoch（1970 年 1 月 1 日 UTC 的午夜）然后整除“unit”（1 秒）。
- en: '[PRE26]  ### Using the `origin` parameter'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]  ### 使用 `origin` 参数'
- en: 'Using the `origin` parameter, one can specify an alternative starting point
    for creation of a `DatetimeIndex`. For example, to use 1960-01-01 as the starting
    date:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `origin` 参数，可以指定创建 `DatetimeIndex` 的替代起始点。例如，要使用 1960-01-01 作为起始日期：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The default is set at `origin='unix'`, which defaults to `1970-01-01 00:00:00`.
    Commonly called ‘unix epoch’ or POSIX time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置为 `origin='unix'`，默认为 `1970-01-01 00:00:00`。通常称为 ‘unix epoch’ 或 POSIX 时间。
- en: '[PRE28]  ## Generating ranges of timestamps'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE28]  ## 生成时间戳范围'
- en: 'To generate an index with timestamps, you can use either the `DatetimeIndex`
    or `Index` constructor and pass in a list of datetime objects:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成带有时间戳的索引，您可以使用`DatetimeIndex`或`Index`构造函数，并传入一个日期时间对象列表：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In practice this becomes very cumbersome because we often need a very long
    index with a large number of timestamps. If we need timestamps on a regular frequency,
    we can use the [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") functions to create a `DatetimeIndex`. The default frequency
    for `date_range` is a **calendar day** while the default for `bdate_range` is
    a **business day**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这变得非常繁琐，因为我们经常需要一个带有大量时间戳的非常长的索引。如果我们需要定期频率的时间戳，我们可以使用[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range")和[`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range")函数来创建一个`DatetimeIndex`。`date_range`的默认频率是**日历日**，而`bdate_range`的默认频率是**工作日**：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Convenience functions like `date_range` and `bdate_range` can utilize a variety
    of [frequency aliases](#timeseries-offset-aliases):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 便利函数如`date_range`和`bdate_range`可以利用各种[frequency aliases](#timeseries-offset-aliases)：
- en: '[PRE31]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`date_range` and `bdate_range` make it easy to generate a range of dates using
    various combinations of parameters like `start`, `end`, `periods`, and `freq`.
    The start and end dates are strictly inclusive, so dates outside of those specified
    will not be generated:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`date_range`和`bdate_range`使得使用各种参数组合（如`start`、`end`、`periods`和`freq`）轻松生成一系列日期。开始和结束日期是严格包含的，因此不会生成指定范围之外的日期： '
- en: '[PRE32]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Specifying `start`, `end`, and `periods` will generate a range of evenly spaced
    dates from `start` to `end` inclusively, with `periods` number of elements in
    the resulting `DatetimeIndex`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`start`、`end`和`periods`将从`start`到`end`生成一系列均匀间隔的日期，结果`DatetimeIndex`中有`periods`个元素：
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '### Custom frequency ranges'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '### 自定义频率范围'
- en: '`bdate_range` can also generate a range of custom frequency dates by using
    the `weekmask` and `holidays` parameters. These parameters will only be used if
    a custom frequency string is passed.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`bdate_range`还可以通过使用`weekmask`和`holidays`参数生成一系列自定义频率日期。只有在传递自定义频率字符串时才会使用这些参数。'
- en: '[PRE34]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Custom business days](#timeseries-custombusinessdays)  ## Timestamp limitations'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[自定义工作日](#timeseries-custombusinessdays)  ## 时间戳限制'
- en: 'The limits of timestamp representation depend on the chosen resolution. For
    nanosecond resolution, the time span that can be represented using a 64-bit integer
    is limited to approximately 584 years:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳表示的限制取决于所选择的分辨率。对于纳秒分辨率，使用64位整数表示的时间跨度限制在大约584年左右：
- en: '[PRE35]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When choosing second-resolution, the available range grows to `+/- 2.9e11 years`.
    Different resolutions can be converted to each other through `as_unit`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 选择秒分辨率时，可用范围增加到`+/- 2.9e11年`。不同分辨率可以通过`as_unit`相互转换。
- en: See also
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Representing out-of-bounds spans](#timeseries-oob)  ## Indexing'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[表示超出范围的时间跨度](#timeseries-oob)  ## 索引'
- en: 'One of the main uses for `DatetimeIndex` is as an index for pandas objects.
    The `DatetimeIndex` class contains many time series related optimizations:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`的主要用途之一是作为pandas对象的索引。`DatetimeIndex`类包含许多与时间序列相关的优化：'
- en: A large range of dates for various offsets are pre-computed and cached under
    the hood in order to make generating subsequent date ranges very fast (just have
    to grab a slice).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预先计算并缓存了各种偏移的大量日期范围，以便在生成后续日期范围时非常快速（只需抓取一个片段）。
- en: Fast shifting using the `shift` method on pandas objects.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在pandas对象上使用`shift`方法进行快速移位。
- en: Unioning of overlapping `DatetimeIndex` objects with the same frequency is very
    fast (important for fast data alignment).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有相同频率的重叠`DatetimeIndex`对象的并集非常快速（对于快速数据对齐很重要）。
- en: Quick access to date fields via properties such as `year`, `month`, etc.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过属性（如`year`、`month`等）快速访问日期字段。
- en: Regularization functions like `snap` and very fast `asof` logic.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`shift`方法在pandas对象上进行快速移位。
- en: '`DatetimeIndex` objects have all the basic functionality of regular `Index`
    objects, and a smorgasbord of advanced time series specific methods for easy frequency
    processing.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`对象具有常规`Index`对象的所有基本功能，以及一系列用于简化频率处理的高级时间序列特定方法。'
- en: See also
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reindexing methods](basics.html#basics-reindexing)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新索引方法](basics.html#basics-reindexing)'
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While pandas does not force you to have a sorted date index, some of these methods
    may have unexpected or incorrect behavior if the dates are unsorted.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 pandas 不强制您拥有排序的日期索引，但如果日期未排序，则其中一些方法可能会产生意外或不正确的行为。
- en: '`DatetimeIndex` can be used like a regular index and offers all of its intelligent
    functionality like selection, slicing, etc.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`可以像常规索引一样使用，并提供其所有智能功能，如选择、切片等。'
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '### Partial string indexing'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '### 部分字符串索引'
- en: 'Dates and strings that parse to timestamps can be passed as indexing parameters:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将日期和解析为时间戳的字符串作为索引参数传递：
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To provide convenience for accessing longer time series, you can also pass
    in the year or year and month as strings:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便访问更长的时间序列，您也可以将年份或年份和月份作为字符串传入：
- en: '[PRE38]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This type of slicing will work on a `DataFrame` with a `DatetimeIndex` as well.
    Since the partial string selection is a form of label slicing, the endpoints **will
    be** included. This would include matching times on an included date:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的切片也适用于具有`DatetimeIndex`的`DataFrame`。由于部分字符串选择是一种标签切片的形式，端点**将被**包括在内。这将包括在包含日期上匹配的时间：
- en: Warning
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Indexing `DataFrame` rows with a *single* string with getitem (e.g. `frame[dtstring]`)
    is deprecated starting with pandas 1.2.0 (given the ambiguity whether it is indexing
    the rows or selecting a column) and will be removed in a future version. The equivalent
    with `.loc` (e.g. `frame.loc[dtstring]`) is still supported.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*单个*字符串对`DataFrame`行进行索引（例如`frame[dtstring]`）已从 pandas 1.2.0 开始弃用（由于不确定是索引行还是选择列而引起的歧义），并将在将来的版本中删除。仍支持使用`.loc`进行等效操作（例如`frame.loc[dtstring]`）。
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This starts on the very first time in the month, and includes the last date
    and time for the month:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这从月份的第一个时间开始，并包括该月份的最后日期和时间：
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This specifies a stop time **that includes all of the times on the last day**:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了一个包含最后一天所有时间的停止时间：
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This specifies an **exact** stop time (and is not the same as the above):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了一个**精确**的停止时间（与上述不同）：
- en: '[PRE42]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We are stopping on the included end-point as it is part of the index:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在包含的端点上停止，因为它是索引的一部分：
- en: '[PRE43]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`DatetimeIndex` partial string indexing also works on a `DataFrame` with a
    `MultiIndex`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`部分字符串索引也适用于具有`MultiIndex`的`DataFrame`：'
- en: '[PRE44]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Slicing with string indexing also honors UTC offset.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串索引进行切片也会考虑UTC偏移量。
- en: '[PRE45]  ### Slice vs. exact match'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE45]  ### 切片 vs. 精确匹配'
- en: The same string used as an indexing parameter can be treated either as a slice
    or as an exact match depending on the resolution of the index. If the string is
    less accurate than the index, it will be treated as a slice, otherwise as an exact
    match.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用作为索引参数的相同字符串，根据索引的分辨率，可以将其视为切片或精确匹配。如果字符串比索引不准确，则将其视为切片，否则视为精确匹配。
- en: 'Consider a `Series` object with a minute resolution index:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个具有分钟分辨率索引的`Series`对象：
- en: '[PRE46]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A timestamp string less accurate than a minute gives a `Series` object.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 不到一分钟的时间戳字符串会给出一个`Series`对象。
- en: '[PRE47]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: A timestamp string with minute resolution (or more accurate), gives a scalar
    instead, i.e. it is not casted to a slice.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 具有分钟分辨率（或更精确）的时间戳字符串会给出一个标量，即它不会被转换为切片。
- en: '[PRE48]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: If index resolution is second, then the minute-accurate timestamp gives a `Series`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索引分辨率为秒，则具有分钟精度时间戳会给出一个`Series`。
- en: '[PRE49]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If the timestamp string is treated as a slice, it can be used to index `DataFrame`
    with `.loc[]` as well.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果时间戳字符串被视为切片，则也可以使用`.loc[]`对`DataFrame`进行索引。
- en: '[PRE50]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Warning
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'However, if the string is treated as an exact match, the selection in `DataFrame`’s
    `[]` will be column-wise and not row-wise, see [Indexing Basics](indexing.html#indexing-basics).
    For example `dft_minute[''2011-12-31 23:59'']` will raise `KeyError` as `''2012-12-31
    23:59''` has the same resolution as the index and there is no column with such
    name:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果将字符串视为精确匹配，`DataFrame`的`[]`中的选择将是按列而不是按行进行的，请参见[Indexing Basics](indexing.html#indexing-basics)。例如，`dft_minute['2011-12-31
    23:59']`会引发`KeyError`，因为`'2012-12-31 23:59'`与索引具有相同的分辨率，并且没有这样的列名：
- en: To *always* have unambiguous selection, whether the row is treated as a slice
    or a single selection, use `.loc`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了*始终*有明确的选择，无论行是被视为切片还是单个选择，请使用`.loc`。
- en: '[PRE51]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note also that `DatetimeIndex` resolution cannot be less precise than day.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`DatetimeIndex`的分辨率不能低于天。
- en: '[PRE52]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Exact indexing
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精确索引
- en: As discussed in previous section, indexing a `DatetimeIndex` with a partial
    string depends on the “accuracy” of the period, in other words how specific the
    interval is in relation to the resolution of the index. In contrast, indexing
    with `Timestamp` or `datetime` objects is exact, because the objects have exact
    meaning. These also follow the semantics of *including both endpoints*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所讨论的，使用部分字符串索引 `DatetimeIndex` 取决于周期的“准确性”，换句话说，间隔相对于索引分辨率的具体性。相比之下，使用 `Timestamp`
    或 `datetime` 对象进行索引是精确的，因为这些对象具有确切的含义。这也遵循*包括两个端点*的语义。
- en: These `Timestamp` and `datetime` objects have exact `hours, minutes,` and `seconds`,
    even though they were not explicitly specified (they are `0`).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 `Timestamp` 和 `datetime` 对象具有确切的 `小时，分钟` 和 `秒`，即使它们没有明确指定（它们为 `0`）。
- en: '[PRE53]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: With no defaults.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 没有默认值。
- en: '[PRE54]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Truncating & fancy indexing
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 截断和花式索引
- en: 'A [`truncate()`](../reference/api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate") convenience function is provided that is similar
    to slicing. Note that `truncate` assumes a 0 value for any unspecified date component
    in a `DatetimeIndex` in contrast to slicing which returns any partially matching
    dates:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个类似于切片的 [`truncate()`](../reference/api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate") 便利函数。请注意，`truncate` 假定在 `DatetimeIndex` 中对于任何未指定的日期组件使用
    0 值，与切片返回任何部分匹配的日期不同：
- en: '[PRE55]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Even complicated fancy indexing that breaks the `DatetimeIndex` frequency regularity
    will result in a `DatetimeIndex`, although frequency is lost:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是复杂的花式索引打破了 `DatetimeIndex` 的频率规律，也会导致一个 `DatetimeIndex`，尽管频率会丢失：
- en: '[PRE56]  ## Time/date components'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE56]  ## 时间/日期组件'
- en: There are several time/date properties that one can access from `Timestamp`
    or a collection of timestamps like a `DatetimeIndex`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个时间/日期属性可以从 `Timestamp` 或时间戳集合（如 `DatetimeIndex`）中访问。
- en: '| Property | Description |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| year | The year of the datetime |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 年份 | 日期时间的年份 |'
- en: '| month | The month of the datetime |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 月份 | 日期时间的月份 |'
- en: '| day | The days of the datetime |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 天数 | 日期时间的天数 |'
- en: '| hour | The hour of the datetime |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 小时数 | 日期时间的小时数 |'
- en: '| minute | The minutes of the datetime |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 分钟数 | 日期时间的分钟数 |'
- en: '| second | The seconds of the datetime |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 秒数 | 日期时间的秒数 |'
- en: '| microsecond | The microseconds of the datetime |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 微秒 | 日期时间的微秒 |'
- en: '| nanosecond | The nanoseconds of the datetime |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 纳秒 | 日期时间的纳秒数 |'
- en: '| date | Returns datetime.date (does not contain timezone information) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 日期 | 返回日期时间.date（不包含时区信息） |'
- en: '| time | Returns datetime.time (does not contain timezone information) |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 返回日期时间.time（不包含时区信息） |'
- en: '| timetz | Returns datetime.time as local time with timezone information |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| timetz | 返回带有时区信息的本地时间日期.time |'
- en: '| dayofyear | The ordinal day of year |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 年份中的日期 | 年份的序数日期 |'
- en: '| day_of_year | The ordinal day of year |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 年份中的日期 | 年份的序数日期 |'
- en: '| weekofyear | The week ordinal of the year |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 年度周数 | 年份的周序数 |'
- en: '| week | The week ordinal of the year |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 周数 | 年份的周序数 |'
- en: '| dayofweek | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| dayofweek | 一周中的日期编号，星期一=0，星期日=6 |'
- en: '| day_of_week | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| day_of_week | 一周中的日期编号，星期一=0，星期日=6 |'
- en: '| weekday | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 工作日 | 一周中的日期编号，星期一=0，星期日=6 |'
- en: '| quarter | Quarter of the date: Jan-Mar = 1, Apr-Jun = 2, etc. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 季度 | 日期的季度：1月至3月=1，4月至6月=2，等等 |'
- en: '| days_in_month | The number of days in the month of the datetime |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 月份的天数 | 日期时间的月份的天数 |'
- en: '| is_month_start | Logical indicating if first day of month (defined by frequency)
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| is_month_start | 逻辑指示是否月份的第一天（由频率定义） |'
- en: '| is_month_end | Logical indicating if last day of month (defined by frequency)
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| is_month_end | 逻辑指示是否月份的最后一天（由频率定义） |'
- en: '| is_quarter_start | Logical indicating if first day of quarter (defined by
    frequency) |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| is_quarter_start | 逻辑指示是否季度的第一天（由频率定义） |'
- en: '| is_quarter_end | Logical indicating if last day of quarter (defined by frequency)
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| is_quarter_end | 逻辑指示是否季度的最后一天（由频率定义） |'
- en: '| is_year_start | Logical indicating if first day of year (defined by frequency)
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| is_year_start | 逻辑指示是否年份的第一天（由频率定义） |'
- en: '| is_year_end | Logical indicating if last day of year (defined by frequency)
    |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| is_year_end | 逻辑指示是否年份的最后一天（由频率定义） |'
- en: '| is_leap_year | Logical indicating if the date belongs to a leap year |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 是否闰年 | 逻辑指示日期是否属于闰年 |'
- en: Furthermore, if you have a `Series` with datetimelike values, then you can access
    these properties via the `.dt` accessor, as detailed in the section on [.dt accessors](basics.html#basics-dt-accessors).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您有一个具有日期时间值的`Series`，则可以通过`.dt`访问器访问这些属性，详细信息请参见[.dt 访问器](basics.html#basics-dt-accessors)部分。
- en: 'You may obtain the year, week and day components of the ISO year from the ISO
    8601 standard:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从ISO 8601标准中获取ISO年的年、周和日组件：
- en: '[PRE57]  ## DateOffset objects'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE57]  ## DateOffset 对象'
- en: 'In the preceding examples, frequency strings (e.g. `''D''`) were used to specify
    a frequency that defined:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，频率字符串（例如`'D'`）用于指定定义的频率：
- en: how the date times in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") were spaced when using [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range")
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range")时，了解[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")中的日期时间是如何间隔的
- en: the frequency of a [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex")
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")或[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex")的频率
- en: These frequency strings map to a `DateOffset` object and its subclasses. A `DateOffset`
    is similar to a [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") that represents a duration of time but follows specific calendar
    duration rules. For example, a [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") day will always increment `datetimes` by 24 hours, while a
    `DateOffset` day will increment `datetimes` to the same time the next day whether
    a day represents 23, 24 or 25 hours due to daylight savings time. However, all
    `DateOffset` subclasses that are an hour or smaller (`Hour`, `Minute`, `Second`,
    `Milli`, `Micro`, `Nano`) behave like [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") and respect absolute time.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这些频率字符串映射到一个`DateOffset`对象及其子类。`DateOffset`类似于表示时间持续的[`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta")，但遵循特定的日历持续规则。例如，[`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta")的一天总是增加`datetimes` 24小时，而`DateOffset`的一天将增加`datetimes`到第二天的同一时间，无论一天代表的是23、24还是25小时，都由于夏令时而变化。然而，所有一个小时或更小的`DateOffset`子类（`Hour`、`Minute`、`Second`、`Milli`、`Micro`、`Nano`）的行为类似于[`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta")，并且遵守绝对时间。
- en: The basic `DateOffset` acts similar to `dateutil.relativedelta` ([relativedelta
    documentation](https://dateutil.readthedocs.io/en/stable/relativedelta.html))
    that shifts a date time by the corresponding calendar duration specified. The
    arithmetic operator (`+`) can be used to perform the shift.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的`DateOffset`类似于`dateutil.relativedelta`（[relativedelta 文档](https://dateutil.readthedocs.io/en/stable/relativedelta.html)），它将日期时间按指定的日历持续时间进行偏移。可以使用算术运算符（`+`）执行偏移。
- en: '[PRE58]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Most `DateOffsets` have associated frequencies strings, or offset aliases,
    that can be passed into `freq` keyword arguments. The available date offsets and
    associated frequency strings can be found below:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数`DateOffsets`都有关联的频率字符串或偏移别名，可以传递给`freq`关键字参数。下面列出了可用的日期偏移和相关的频率字符串：
- en: '| Date Offset | Frequency String | Description |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 日期偏移 | 频率字符串 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| [`DateOffset`](../reference/api/pandas.tseries.offsets.DateOffset.html#pandas.tseries.offsets.DateOffset
    "pandas.tseries.offsets.DateOffset") | None | Generic offset class, defaults to
    absolute 24 hours |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| [`DateOffset`](../reference/api/pandas.tseries.offsets.DateOffset.html#pandas.tseries.offsets.DateOffset
    "pandas.tseries.offsets.DateOffset") | None | 通用偏移类，默认为绝对24小时 |'
- en: '| [`BDay`](../reference/api/pandas.tseries.offsets.BDay.html#pandas.tseries.offsets.BDay
    "pandas.tseries.offsets.BDay") or [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") | `''B''` | business day (weekday) |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| [`BDay`](../reference/api/pandas.tseries.offsets.BDay.html#pandas.tseries.offsets.BDay
    "pandas.tseries.offsets.BDay") 或 [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") | `''B''` | 工作日（周日） |'
- en: '| [`CDay`](../reference/api/pandas.tseries.offsets.CDay.html#pandas.tseries.offsets.CDay
    "pandas.tseries.offsets.CDay") or [`CustomBusinessDay`](../reference/api/pandas.tseries.offsets.CustomBusinessDay.html#pandas.tseries.offsets.CustomBusinessDay
    "pandas.tseries.offsets.CustomBusinessDay") | `''C''` | custom business day |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`CDay`](../reference/api/pandas.tseries.offsets.CDay.html#pandas.tseries.offsets.CDay
    "pandas.tseries.offsets.CDay") 或 [`CustomBusinessDay`](../reference/api/pandas.tseries.offsets.CustomBusinessDay.html#pandas.tseries.offsets.CustomBusinessDay
    "pandas.tseries.offsets.CustomBusinessDay") | `''C''` | 自定义工作日 |'
- en: '| [`Week`](../reference/api/pandas.tseries.offsets.Week.html#pandas.tseries.offsets.Week
    "pandas.tseries.offsets.Week") | `''W''` | one week, optionally anchored on a
    day of the week |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| [`Week`](../reference/api/pandas.tseries.offsets.Week.html#pandas.tseries.offsets.Week
    "pandas.tseries.offsets.Week") | `''W''` | 一周，可选择以一周中的某一天为锚点 |'
- en: '| [`WeekOfMonth`](../reference/api/pandas.tseries.offsets.WeekOfMonth.html#pandas.tseries.offsets.WeekOfMonth
    "pandas.tseries.offsets.WeekOfMonth") | `''WOM''` | the x-th day of the y-th week
    of each month |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| [`WeekOfMonth`](../reference/api/pandas.tseries.offsets.WeekOfMonth.html#pandas.tseries.offsets.WeekOfMonth
    "pandas.tseries.offsets.WeekOfMonth") | `''WOM''` | 每月第 y 周的第 x 天 |'
- en: '| [`LastWeekOfMonth`](../reference/api/pandas.tseries.offsets.LastWeekOfMonth.html#pandas.tseries.offsets.LastWeekOfMonth
    "pandas.tseries.offsets.LastWeekOfMonth") | `''LWOM''` | the x-th day of the last
    week of each month |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| [`LastWeekOfMonth`](../reference/api/pandas.tseries.offsets.LastWeekOfMonth.html#pandas.tseries.offsets.LastWeekOfMonth
    "pandas.tseries.offsets.LastWeekOfMonth") | `''LWOM''` | 每月最后一周的第 x 天 |'
- en: '| [`MonthEnd`](../reference/api/pandas.tseries.offsets.MonthEnd.html#pandas.tseries.offsets.MonthEnd
    "pandas.tseries.offsets.MonthEnd") | `''ME''` | calendar month end |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [`MonthEnd`](../reference/api/pandas.tseries.offsets.MonthEnd.html#pandas.tseries.offsets.MonthEnd
    "pandas.tseries.offsets.MonthEnd") | `''ME''` | 日历月结束 |'
- en: '| [`MonthBegin`](../reference/api/pandas.tseries.offsets.MonthBegin.html#pandas.tseries.offsets.MonthBegin
    "pandas.tseries.offsets.MonthBegin") | `''MS''` | calendar month begin |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [`MonthBegin`](../reference/api/pandas.tseries.offsets.MonthBegin.html#pandas.tseries.offsets.MonthBegin
    "pandas.tseries.offsets.MonthBegin") | `''MS''` | 日历月开始 |'
- en: '| [`BMonthEnd`](../reference/api/pandas.tseries.offsets.BMonthEnd.html#pandas.tseries.offsets.BMonthEnd
    "pandas.tseries.offsets.BMonthEnd") or [`BusinessMonthEnd`](../reference/api/pandas.tseries.offsets.BusinessMonthEnd.html#pandas.tseries.offsets.BusinessMonthEnd
    "pandas.tseries.offsets.BusinessMonthEnd") | `''BME''` | business month end |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [`BMonthEnd`](../reference/api/pandas.tseries.offsets.BMonthEnd.html#pandas.tseries.offsets.BMonthEnd
    "pandas.tseries.offsets.BMonthEnd") 或 [`BusinessMonthEnd`](../reference/api/pandas.tseries.offsets.BusinessMonthEnd.html#pandas.tseries.offsets.BusinessMonthEnd
    "pandas.tseries.offsets.BusinessMonthEnd") | `''BME''` | 工作月结束 |'
- en: '| [`BMonthBegin`](../reference/api/pandas.tseries.offsets.BMonthBegin.html#pandas.tseries.offsets.BMonthBegin
    "pandas.tseries.offsets.BMonthBegin") or [`BusinessMonthBegin`](../reference/api/pandas.tseries.offsets.BusinessMonthBegin.html#pandas.tseries.offsets.BusinessMonthBegin
    "pandas.tseries.offsets.BusinessMonthBegin") | `''BMS''` | business month begin
    |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [`BMonthBegin`](../reference/api/pandas.tseries.offsets.BMonthBegin.html#pandas.tseries.offsets.BMonthBegin
    "pandas.tseries.offsets.BMonthBegin") 或 [`BusinessMonthBegin`](../reference/api/pandas.tseries.offsets.BusinessMonthBegin.html#pandas.tseries.offsets.BusinessMonthBegin
    "pandas.tseries.offsets.BusinessMonthBegin") | `''BMS''` | 工作月开始 |'
- en: '| [`CBMonthEnd`](../reference/api/pandas.tseries.offsets.CBMonthEnd.html#pandas.tseries.offsets.CBMonthEnd
    "pandas.tseries.offsets.CBMonthEnd") or [`CustomBusinessMonthEnd`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthEnd.html#pandas.tseries.offsets.CustomBusinessMonthEnd
    "pandas.tseries.offsets.CustomBusinessMonthEnd") | `''CBME''` | custom business
    month end |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [`CBMonthEnd`](../reference/api/pandas.tseries.offsets.CBMonthEnd.html#pandas.tseries.offsets.CBMonthEnd
    "pandas.tseries.offsets.CBMonthEnd") 或 [`CustomBusinessMonthEnd`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthEnd.html#pandas.tseries.offsets.CustomBusinessMonthEnd
    "pandas.tseries.offsets.CustomBusinessMonthEnd") | `''CBME''` | 自定义工作月结束 |'
- en: '| [`CBMonthBegin`](../reference/api/pandas.tseries.offsets.CBMonthBegin.html#pandas.tseries.offsets.CBMonthBegin
    "pandas.tseries.offsets.CBMonthBegin") or [`CustomBusinessMonthBegin`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthBegin.html#pandas.tseries.offsets.CustomBusinessMonthBegin
    "pandas.tseries.offsets.CustomBusinessMonthBegin") | `''CBMS''` | custom business
    month begin |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| [`CBMonthBegin`](../reference/api/pandas.tseries.offsets.CBMonthBegin.html#pandas.tseries.offsets.CBMonthBegin
    "pandas.tseries.offsets.CBMonthBegin") 或 [`CustomBusinessMonthBegin`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthBegin.html#pandas.tseries.offsets.CustomBusinessMonthBegin
    "pandas.tseries.offsets.CustomBusinessMonthBegin") | `''CBMS''` | 自定义工作月开始 |'
- en: '| [`SemiMonthEnd`](../reference/api/pandas.tseries.offsets.SemiMonthEnd.html#pandas.tseries.offsets.SemiMonthEnd
    "pandas.tseries.offsets.SemiMonthEnd") | `''SME''` | 15th (or other day_of_month)
    and calendar month end |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [`SemiMonthEnd`](../reference/api/pandas.tseries.offsets.SemiMonthEnd.html#pandas.tseries.offsets.SemiMonthEnd
    "pandas.tseries.offsets.SemiMonthEnd") | `''SME''` | 每月 15 日（或其他日期）和日历月结束 |'
- en: '| [`SemiMonthBegin`](../reference/api/pandas.tseries.offsets.SemiMonthBegin.html#pandas.tseries.offsets.SemiMonthBegin
    "pandas.tseries.offsets.SemiMonthBegin") | `''SMS''` | 15th (or other day_of_month)
    and calendar month begin |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| [`SemiMonthBegin`](../reference/api/pandas.tseries.offsets.SemiMonthBegin.html#pandas.tseries.offsets.SemiMonthBegin
    "pandas.tseries.offsets.SemiMonthBegin") | `''SMS''` | 每月15日（或其他日期）和日历月开始 |'
- en: '| [`QuarterEnd`](../reference/api/pandas.tseries.offsets.QuarterEnd.html#pandas.tseries.offsets.QuarterEnd
    "pandas.tseries.offsets.QuarterEnd") | `''QE''` | calendar quarter end |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| [`QuarterEnd`](../reference/api/pandas.tseries.offsets.QuarterEnd.html#pandas.tseries.offsets.QuarterEnd
    "pandas.tseries.offsets.QuarterEnd") | `''QE''` | 日历季度结束 |'
- en: '| [`QuarterBegin`](../reference/api/pandas.tseries.offsets.QuarterBegin.html#pandas.tseries.offsets.QuarterBegin
    "pandas.tseries.offsets.QuarterBegin") | `''QS''` | calendar quarter begin |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| [`QuarterBegin`](../reference/api/pandas.tseries.offsets.QuarterBegin.html#pandas.tseries.offsets.QuarterBegin
    "pandas.tseries.offsets.QuarterBegin") | `''QS''` | 日历季度开始 |'
- en: '| [`BQuarterEnd`](../reference/api/pandas.tseries.offsets.BQuarterEnd.html#pandas.tseries.offsets.BQuarterEnd
    "pandas.tseries.offsets.BQuarterEnd") | `''BQE` | business quarter end |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| [`BQuarterEnd`](../reference/api/pandas.tseries.offsets.BQuarterEnd.html#pandas.tseries.offsets.BQuarterEnd
    "pandas.tseries.offsets.BQuarterEnd") | `''BQE` | 商业季度结束 |'
- en: '| [`BQuarterBegin`](../reference/api/pandas.tseries.offsets.BQuarterBegin.html#pandas.tseries.offsets.BQuarterBegin
    "pandas.tseries.offsets.BQuarterBegin") | `''BQS''` | business quarter begin |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| [`BQuarterBegin`](../reference/api/pandas.tseries.offsets.BQuarterBegin.html#pandas.tseries.offsets.BQuarterBegin
    "pandas.tseries.offsets.BQuarterBegin") | `''BQS''` | 商业季度开始 |'
- en: '| [`FY5253Quarter`](../reference/api/pandas.tseries.offsets.FY5253Quarter.html#pandas.tseries.offsets.FY5253Quarter
    "pandas.tseries.offsets.FY5253Quarter") | `''REQ''` | retail (aka 52-53 week)
    quarter |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [`FY5253Quarter`](../reference/api/pandas.tseries.offsets.FY5253Quarter.html#pandas.tseries.offsets.FY5253Quarter
    "pandas.tseries.offsets.FY5253Quarter") | `''REQ''` | 零售（又称52-53周）季度 |'
- en: '| [`YearEnd`](../reference/api/pandas.tseries.offsets.YearEnd.html#pandas.tseries.offsets.YearEnd
    "pandas.tseries.offsets.YearEnd") | `''YE''` | calendar year end |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| [`YearEnd`](../reference/api/pandas.tseries.offsets.YearEnd.html#pandas.tseries.offsets.YearEnd
    "pandas.tseries.offsets.YearEnd") | `''YE''` | 日历年度结束 |'
- en: '| [`YearBegin`](../reference/api/pandas.tseries.offsets.YearBegin.html#pandas.tseries.offsets.YearBegin
    "pandas.tseries.offsets.YearBegin") | `''YS''` or `''BYS''` | calendar year begin
    |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [`YearBegin`](../reference/api/pandas.tseries.offsets.YearBegin.html#pandas.tseries.offsets.YearBegin
    "pandas.tseries.offsets.YearBegin") | `''YS''` 或 `''BYS''` | 日历年度开始 |'
- en: '| [`BYearEnd`](../reference/api/pandas.tseries.offsets.BYearEnd.html#pandas.tseries.offsets.BYearEnd
    "pandas.tseries.offsets.BYearEnd") | `''BYE''` | business year end |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [`BYearEnd`](../reference/api/pandas.tseries.offsets.BYearEnd.html#pandas.tseries.offsets.BYearEnd
    "pandas.tseries.offsets.BYearEnd") | `''BYE''` | 商业年度结束 |'
- en: '| [`BYearBegin`](../reference/api/pandas.tseries.offsets.BYearBegin.html#pandas.tseries.offsets.BYearBegin
    "pandas.tseries.offsets.BYearBegin") | `''BYS''` | business year begin |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [`BYearBegin`](../reference/api/pandas.tseries.offsets.BYearBegin.html#pandas.tseries.offsets.BYearBegin
    "pandas.tseries.offsets.BYearBegin") | `''BYS''` | 商业年度开始 |'
- en: '| [`FY5253`](../reference/api/pandas.tseries.offsets.FY5253.html#pandas.tseries.offsets.FY5253
    "pandas.tseries.offsets.FY5253") | `''RE''` | retail (aka 52-53 week) year |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [`FY5253`](../reference/api/pandas.tseries.offsets.FY5253.html#pandas.tseries.offsets.FY5253
    "pandas.tseries.offsets.FY5253") | `''RE''` | 零售（又称52-53周）年 |'
- en: '| [`Easter`](../reference/api/pandas.tseries.offsets.Easter.html#pandas.tseries.offsets.Easter
    "pandas.tseries.offsets.Easter") | None | Easter holiday |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| [`Easter`](../reference/api/pandas.tseries.offsets.Easter.html#pandas.tseries.offsets.Easter
    "pandas.tseries.offsets.Easter") | None | 复活节假期 |'
- en: '| [`BusinessHour`](../reference/api/pandas.tseries.offsets.BusinessHour.html#pandas.tseries.offsets.BusinessHour
    "pandas.tseries.offsets.BusinessHour") | `''bh''` | business hour |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| [`BusinessHour`](../reference/api/pandas.tseries.offsets.BusinessHour.html#pandas.tseries.offsets.BusinessHour
    "pandas.tseries.offsets.BusinessHour") | `''bh''` | 工作小时 |'
- en: '| [`CustomBusinessHour`](../reference/api/pandas.tseries.offsets.CustomBusinessHour.html#pandas.tseries.offsets.CustomBusinessHour
    "pandas.tseries.offsets.CustomBusinessHour") | `''cbh''` | custom business hour
    |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| [`CustomBusinessHour`](../reference/api/pandas.tseries.offsets.CustomBusinessHour.html#pandas.tseries.offsets.CustomBusinessHour
    "pandas.tseries.offsets.CustomBusinessHour") | `''cbh''` | 自定义工作小时 |'
- en: '| [`Day`](../reference/api/pandas.tseries.offsets.Day.html#pandas.tseries.offsets.Day
    "pandas.tseries.offsets.Day") | `''D''` | one absolute day |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| [`Day`](../reference/api/pandas.tseries.offsets.Day.html#pandas.tseries.offsets.Day
    "pandas.tseries.offsets.Day") | `''D''` | 一天 |'
- en: '| [`Hour`](../reference/api/pandas.tseries.offsets.Hour.html#pandas.tseries.offsets.Hour
    "pandas.tseries.offsets.Hour") | `''h''` | one hour |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [`Hour`](../reference/api/pandas.tseries.offsets.Hour.html#pandas.tseries.offsets.Hour
    "pandas.tseries.offsets.Hour") | `''h''` | 一小时 |'
- en: '| [`Minute`](../reference/api/pandas.tseries.offsets.Minute.html#pandas.tseries.offsets.Minute
    "pandas.tseries.offsets.Minute") | `''min''` | one minute |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| [`Minute`](../reference/api/pandas.tseries.offsets.Minute.html#pandas.tseries.offsets.Minute
    "pandas.tseries.offsets.Minute") | `''min''` | 一分钟 |'
- en: '| [`Second`](../reference/api/pandas.tseries.offsets.Second.html#pandas.tseries.offsets.Second
    "pandas.tseries.offsets.Second") | `''s''` | one second |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| [`Second`](../reference/api/pandas.tseries.offsets.Second.html#pandas.tseries.offsets.Second
    "pandas.tseries.offsets.Second") | `''s''` | 一秒 |'
- en: '| [`Milli`](../reference/api/pandas.tseries.offsets.Milli.html#pandas.tseries.offsets.Milli
    "pandas.tseries.offsets.Milli") | `''ms''` | one millisecond |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| [`Milli`](../reference/api/pandas.tseries.offsets.Milli.html#pandas.tseries.offsets.Milli
    "pandas.tseries.offsets.Milli") | `''ms''` | 一毫秒 |'
- en: '| [`Micro`](../reference/api/pandas.tseries.offsets.Micro.html#pandas.tseries.offsets.Micro
    "pandas.tseries.offsets.Micro") | `''us''` | one microsecond |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| [`Micro`](../reference/api/pandas.tseries.offsets.Micro.html#pandas.tseries.offsets.Micro
    "pandas.tseries.offsets.Micro") | `''us''` | 一微秒 |'
- en: '| [`Nano`](../reference/api/pandas.tseries.offsets.Nano.html#pandas.tseries.offsets.Nano
    "pandas.tseries.offsets.Nano") | `''ns''` | one nanosecond |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| [`Nano`](../reference/api/pandas.tseries.offsets.Nano.html#pandas.tseries.offsets.Nano
    "pandas.tseries.offsets.Nano") | `''ns''` | 一纳秒 |'
- en: '`DateOffsets` additionally have `rollforward()` and `rollback()` methods for
    moving a date forward or backward respectively to a valid offset date relative
    to the offset. For example, business offsets will roll dates that land on the
    weekends (Saturday and Sunday) forward to Monday since business offsets operate
    on the weekdays.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`DateOffsets`还具有`rollforward()`和`rollback()`方法，用于将日期向前或向后移动到相对于偏移的有效偏移日期。例如，业务偏移将把落在周末（星期六和星期日）的日期向前滚动到星期一，因为业务偏移在工作日上运行。'
- en: '[PRE59]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: These operations preserve time (hour, minute, etc) information by default. To
    reset time to midnight, use `normalize()` before or after applying the operation
    (depending on whether you want the time information included in the operation).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作默认保留时间（小时、分钟等）信息。要将时间重置为午夜，请在应用操作之前或之后使用`normalize()`（取决于您是否希望在操作中包含时间信息）。
- en: '[PRE60]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Parametric offsets
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化偏移
- en: 'Some of the offsets can be “parameterized” when created to result in different
    behaviors. For example, the `Week` offset for generating weekly data accepts a
    `weekday` parameter which results in the generated dates always lying on a particular
    day of the week:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 创建时，某些偏移可以“参数化”以产生不同的行为。例如，用于生成每周数据的`Week`偏移接受`weekday`参数，这将导致生成的日期始终落在一周的特定某一天上：
- en: '[PRE61]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The `normalize` option will be effective for addition and subtraction.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`normalize`选项将对加法和减法有效。'
- en: '[PRE62]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Another example is parameterizing `YearEnd` with the specific ending month:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是使用特定的结束月份对`YearEnd`进行参数化：
- en: '[PRE63]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '### Using offsets with `Series` / `DatetimeIndex`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用`Series` / `DatetimeIndex`的偏移'
- en: Offsets can be used with either a `Series` or `DatetimeIndex` to apply the offset
    to each element.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将偏移与`Series`或`DatetimeIndex`一起使用，以将偏移应用于每个元素。
- en: '[PRE64]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: If the offset class maps directly to a `Timedelta` (`Day`, `Hour`, `Minute`,
    `Second`, `Micro`, `Milli`, `Nano`) it can be used exactly like a `Timedelta`
    - see the [Timedelta section](timedeltas.html#timedeltas-operations) for more
    examples.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果偏移类直接映射到`Timedelta`（`Day`、`Hour`、`Minute`、`Second`、`Micro`、`Milli`、`Nano`），则可以像使用`Timedelta`一样使用它
    - 有关更多示例，请参阅[Timedelta部分](timedeltas.html#timedeltas-operations)。
- en: '[PRE65]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Note that some offsets (such as `BQuarterEnd`) do not have a vectorized implementation.
    They can still be used but may calculate significantly slower and will show a
    `PerformanceWarning`
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些偏移（例如`BQuarterEnd`）没有矢量化实现。它们仍然可以使用，但可能计算速度较慢，并显示`PerformanceWarning`。
- en: '[PRE66]  ### Custom business days'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE66]  ### 自定义工作日'
- en: The `CDay` or `CustomBusinessDay` class provides a parametric `BusinessDay`
    class which can be used to create customized business day calendars which account
    for local holidays and local weekend conventions.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDay`或`CustomBusinessDay`类提供了一个参数化的`BusinessDay`类，可用于创建考虑本地节假日和本地周末惯例的自定义工作日日历。'
- en: As an interesting example, let’s look at Egypt where a Friday-Saturday weekend
    is observed.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个有趣的例子，让我们看看埃及，那里遵守星期五至星期六的周末。
- en: '[PRE67]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let’s map to the weekday names:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们映射到工作日名称：
- en: '[PRE68]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Holiday calendars can be used to provide the list of holidays. See the [holiday
    calendar](#timeseries-holiday) section for more information.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 节假日日历可用于提供节假日列表。有关更多信息，请参阅[节假日日历](#timeseries-holiday)部分。
- en: '[PRE69]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Monthly offsets that respect a certain holiday calendar can be defined in the
    usual way.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照通常的方式定义尊重某个节假日日历的月度偏移。
- en: '[PRE70]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The frequency string ‘C’ is used to indicate that a CustomBusinessDay DateOffset
    is used, it is important to note that since CustomBusinessDay is a parameterised
    type, instances of CustomBusinessDay may differ and this is not detectable from
    the ‘C’ frequency string. The user therefore needs to ensure that the ‘C’ frequency
    string is used consistently within the user’s application.  ### Business hour'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '频率字符串‘C’用于指示使用CustomBusinessDay DateOffset，重要的是要注意，由于CustomBusinessDay是一个参数化类型，CustomBusinessDay的实例可能不同，这在‘C’频率字符串中是不可检测的。因此，用户需要确保在用户应用程序中一致使用‘C’频率字符串。  ###
    营业时间'
- en: The `BusinessHour` class provides a business hour representation on `BusinessDay`,
    allowing to use specific start and end times.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`BusinessHour`类提供了在`BusinessDay`上的营业时间表示，允许使用特定的开始和结束时间。'
- en: By default, `BusinessHour` uses 9:00 - 17:00 as business hours. Adding `BusinessHour`
    will increment `Timestamp` by hourly frequency. If target `Timestamp` is out of
    business hours, move to the next business hour then increment it. If the result
    exceeds the business hours end, the remaining hours are added to the next business
    day.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`BusinessHour`使用9:00 - 17:00作为营业时间。添加`BusinessHour`将按小时频率递增`Timestamp`。如果目标`Timestamp`超出营业时间，则移至下一个营业时间，然后递增。如果结果超出营业时间结束，则剩余的小时将添加到下一个营业日。
- en: '[PRE71]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: You can also specify `start` and `end` time by keywords. The argument must be
    a `str` with an `hour:minute` representation or a `datetime.time` instance. Specifying
    seconds, microseconds and nanoseconds as business hour results in `ValueError`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过关键字指定`start`和`end`时间。参数必须是一个带有`hour:minute`表示或`datetime.time`实例的`str`。将秒、微秒和纳秒作为营业时间导致`ValueError`。
- en: '[PRE72]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Passing `start` time later than `end` represents midnight business hour. In
    this case, business hour exceeds midnight and overlap to the next day. Valid business
    hours are distinguished by whether it started from valid `BusinessDay`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 将`start`时间设置为晚于`end`表示午夜营业时间。在这种情况下，营业时间超过午夜并延伸到第二天。有效的营业时间通过它是否从有效的`BusinessDay`开始来区分。
- en: '[PRE73]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Applying `BusinessHour.rollforward` and `rollback` to out of business hours
    results in the next business hour start or previous day’s end. Different from
    other offsets, `BusinessHour.rollforward` may output different results from `apply`
    by definition.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将`BusinessHour.rollforward`和`rollback`应用于非营业时间会导致下一个营业时间开始或前一天的结束。与其他偏移不同，`BusinessHour.rollforward`可能根据定义产生与`apply`不同的结果。
- en: This is because one day’s business hour end is equal to next day’s business
    hour start. For example, under the default business hours (9:00 - 17:00), there
    is no gap (0 minutes) between `2014-08-01 17:00` and `2014-08-04 09:00`.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为一天的营业时间结束等于下一天的营业时间开始。例如，在默认的营业时间（9:00 - 17:00）下，`2014-08-01 17:00`和`2014-08-04
    09:00`之间没有间隙（0分钟）。
- en: '[PRE74]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '`BusinessHour` regards Saturday and Sunday as holidays. To use arbitrary holidays,
    you can use `CustomBusinessHour` offset, as explained in the following subsection.  ###
    Custom business hour'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`BusinessHour`将星期六和星期日视为假期。要使用任意假期，您可以使用`CustomBusinessHour`偏移，如下一节所述。  ###
    自定义营业时间'
- en: The `CustomBusinessHour` is a mixture of `BusinessHour` and `CustomBusinessDay`
    which allows you to specify arbitrary holidays. `CustomBusinessHour` works as
    the same as `BusinessHour` except that it skips specified custom holidays.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomBusinessHour`是`BusinessHour`和`CustomBusinessDay`的混合体，允许您指定任意假期。`CustomBusinessHour`的工作方式与`BusinessHour`相同，只是它跳过指定的自定义假期。'
- en: '[PRE75]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: You can use keyword arguments supported by either `BusinessHour` and `CustomBusinessDay`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`BusinessHour`和`CustomBusinessDay`支持的关键字参数。
- en: '[PRE76]  ### Offset aliases'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE76]  ### 偏移别名'
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *offset aliases*.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多字符串别名用于常见的时间序列频率。我们将这些别名称为*偏移别名*。
- en: '| Alias | Description |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 别名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| B | business day frequency |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| B | 营业日频率 |'
- en: '| C | custom business day frequency |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| C | 自定义��业日频率 |'
- en: '| D | calendar day frequency |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| D | 日历日频率 |'
- en: '| W | weekly frequency |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| W | 每周频率 |'
- en: '| ME | month end frequency |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| ME | 月末频率 |'
- en: '| SME | semi-month end frequency (15th and end of month) |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| SME | 半月末频率（15日和月底） |'
- en: '| BME | business month end frequency |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| BME | 营业月末频率 |'
- en: '| CBME | custom business month end frequency |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| CBME | 自定义营业月末频率 |'
- en: '| MS | month start frequency |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| MS | 月初频率 |'
- en: '| SMS | semi-month start frequency (1st and 15th) |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| SMS | 半月初频率（1日和15日） |'
- en: '| BMS | business month start frequency |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| BMS | 营业月初频率 |'
- en: '| CBMS | custom business month start frequency |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| CBMS | 自定义工作月开始频率 |'
- en: '| QE | quarter end frequency |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| QE | 季度结束频率 |'
- en: '| BQE | business quarter end frequency |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| BQE | 工作季度结束频率 |'
- en: '| QS | quarter start frequency |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| QS | 季度开始频率 |'
- en: '| BQS | business quarter start frequency |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| BQS | 工作季度开始频率 |'
- en: '| YE | year end frequency |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| YE | 年度结束频率 |'
- en: '| BYE | business year end frequency |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| BYE | 工作年度结束频率 |'
- en: '| YS | year start frequency |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| YS | 年度开始频率 |'
- en: '| BYS | business year start frequency |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| BYS | 工作年度开始频率 |'
- en: '| h | hourly frequency |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| h | 每小时频率 |'
- en: '| bh | business hour frequency |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| bh | 工作小时频率 |'
- en: '| cbh | custom business hour frequency |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| cbh | 自定义工作小时频率 |'
- en: '| min | minutely frequency |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| min | 每分钟频率 |'
- en: '| s | secondly frequency |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| s | 每秒频率 |'
- en: '| ms | milliseconds |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| ms | 毫秒 |'
- en: '| us | microseconds |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| us | 微秒 |'
- en: '| ns | nanoseconds |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| ns | 纳秒 |'
- en: 'Deprecated since version 2.2.0: Aliases `H`, `BH`, `CBH`, `T`, `S`, `L`, `U`,
    and `N` are deprecated in favour of the aliases `h`, `bh`, `cbh`, `min`, `s`,
    `ms`, `us`, and `ns`.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.2.0 起已弃用：别名 `H`、`BH`、`CBH`、`T`、`S`、`L`、`U` 和 `N` 已弃用，推荐使用别名 `h`、`bh`、`cbh`、`min`、`s`、`ms`、`us`
    和 `ns`。
- en: Note
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using the offset aliases above, it should be noted that functions such
    as [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), will only return timestamps that are in the interval defined
    by `start_date` and `end_date`. If the `start_date` does not correspond to the
    frequency, the returned timestamps will start at the next valid timestamp, same
    for `end_date`, the returned timestamps will stop at the previous valid timestamp.
  id: totrans-329
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用上述偏移别名时，应注意诸如[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range")、[`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") 等函数只会返回在 `start_date` 和 `end_date` 定义的时间间隔内的时间戳。如果 `start_date`
    不对应频率，则返回的时间戳将从下一个有效时间戳开始，`end_date` 也是一样，返回的时间戳将停在前一个有效时间戳。
- en: For example, for the offset `MS`, if the `start_date` is not the first of the
    month, the returned timestamps will start with the first day of the next month.
    If `end_date` is not the first day of a month, the last returned timestamp will
    be the first day of the corresponding month.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于偏移量 `MS`，如果 `start_date` 不是月份的第一天，则返回的时间戳将从下个月的第一天开始。如果 `end_date` 不是月份的第一天，则最后一个返回的时间戳将是对应月份的第一天。
- en: '[PRE77]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We can see in the above example [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") will only return the valid timestamps between the `start_date`
    and `end_date`. If these are not valid timestamps for the given frequency it will
    roll to the next value for `start_date` (respectively previous for the `end_date`)  ###
    Period aliases'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") 和 [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") 只会返回在 `start_date` 和 `end_date` 之间有效的时间戳。如果这些对于给定频率不是有效的时间戳，它们将会滚动到下一个值的
    `start_date`（分别是 `end_date` 的前一个值）。### 时期别名
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *period aliases*.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字符串别名用于常见的时间序列频率。我们将这些别名称为*时期别名*。
- en: '| Alias | Description |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| 别名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| B | business day frequency |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| B | 工作日频率 |'
- en: '| D | calendar day frequency |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| D | 日历日频率 |'
- en: '| W | weekly frequency |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| W | 每周频率 |'
- en: '| M | monthly frequency |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| M | 每月频率 |'
- en: '| Q | quarterly frequency |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| Q | 季度频率 |'
- en: '| Y | yearly frequency |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| Y | 每年频率 |'
- en: '| h | hourly frequency |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| h | 每小时频率 |'
- en: '| min | minutely frequency |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| min | 每分钟频率 |'
- en: '| s | secondly frequency |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| s | 每秒频率 |'
- en: '| ms | milliseconds |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| ms | 毫秒 |'
- en: '| us | microseconds |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| us | 微秒 |'
- en: '| ns | nanoseconds |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| ns | 纳秒 |'
- en: 'Deprecated since version 2.2.0: Aliases `A`, `H`, `T`, `S`, `L`, `U`, and `N`
    are deprecated in favour of the aliases `Y`, `h`, `min`, `s`, `ms`, `us`, and
    `ns`.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.2.0 起已弃用：别名 `A`、`H`、`T`、`S`、`L`、`U` 和 `N` 已弃用，推荐使用别名 `Y`、`h`、`min`、`s`、`ms`、`us`
    和 `ns`。
- en: Combining aliases
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结合别名
- en: 'As we have seen previously, the alias and the offset instance are fungible
    in most functions:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所见，大多数函数中别名和偏移实例是可互换的：
- en: '[PRE78]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'You can combine together day and intraday offsets:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以组合日和日内偏移：
- en: '[PRE79]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Anchored offsets
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锚定偏移
- en: 'For some frequencies you can specify an anchoring suffix:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些频率，您可以指定一个锚定后缀：
- en: '| Alias | Description |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 别名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| W-SUN | weekly frequency (Sundays). Same as ‘W’ |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| W-SUN | 每周频率（星期日）。与‘W’相同 |'
- en: '| W-MON | weekly frequency (Mondays) |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| W-MON | 每周频率（星期一） |'
- en: '| W-TUE | weekly frequency (Tuesdays) |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| W-TUE | 每周频率（星期二） |'
- en: '| W-WED | weekly frequency (Wednesdays) |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| W-WED | 每周频率（星期三） |'
- en: '| W-THU | weekly frequency (Thursdays) |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| W-THU | 每周频率（星期四） |'
- en: '| W-FRI | weekly frequency (Fridays) |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| W-FRI | 每周频率（星期五） |'
- en: '| W-SAT | weekly frequency (Saturdays) |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| W-SAT | 每周频率（星期六） |'
- en: '| (B)Q(E)(S)-DEC | quarterly frequency, year ends in December. Same as ‘QE’
    |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-DEC | 季度频率，年底在十二月。与‘QE’相同 |'
- en: '| (B)Q(E)(S)-JAN | quarterly frequency, year ends in January |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-JAN | 季度频率，年底在一月 |'
- en: '| (B)Q(E)(S)-FEB | quarterly frequency, year ends in February |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-FEB | 季度频率，年底在二月 |'
- en: '| (B)Q(E)(S)-MAR | quarterly frequency, year ends in March |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-MAR | 季度频率，年底在三月 |'
- en: '| (B)Q(E)(S)-APR | quarterly frequency, year ends in April |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-APR | 季度频率，年底在四月 |'
- en: '| (B)Q(E)(S)-MAY | quarterly frequency, year ends in May |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-MAY | 季度频率，年底在五月 |'
- en: '| (B)Q(E)(S)-JUN | quarterly frequency, year ends in June |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-JUN | 季度频率，年底在六月 |'
- en: '| (B)Q(E)(S)-JUL | quarterly frequency, year ends in July |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-JUL | 季度频率，年底在七月 |'
- en: '| (B)Q(E)(S)-AUG | quarterly frequency, year ends in August |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-AUG | 季度频率，年底在八月 |'
- en: '| (B)Q(E)(S)-SEP | quarterly frequency, year ends in September |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-SEP | 季度频率，年底在九月 |'
- en: '| (B)Q(E)(S)-OCT | quarterly frequency, year ends in October |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-OCT | 季度频率，年底在十月 |'
- en: '| (B)Q(E)(S)-NOV | quarterly frequency, year ends in November |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| (B)Q(E)(S)-NOV | 季度频率，年底在十一月 |'
- en: '| (B)Y(E)(S)-DEC | annual frequency, anchored end of December. Same as ‘YE’
    |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-DEC | 每年频率，锚定在十二月底。与‘YE’相同 |'
- en: '| (B)Y(E)(S)-JAN | annual frequency, anchored end of January |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-JAN | 每年频率，锚定在一月底 |'
- en: '| (B)Y(E)(S)-FEB | annual frequency, anchored end of February |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-FEB | 每年频率，锚定在二月底 |'
- en: '| (B)Y(E)(S)-MAR | annual frequency, anchored end of March |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-MAR | 每年频率，锚定在三月底 |'
- en: '| (B)Y(E)(S)-APR | annual frequency, anchored end of April |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-APR | 每年频率，锚定在四月底 |'
- en: '| (B)Y(E)(S)-MAY | annual frequency, anchored end of May |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-MAY | 每年频率，锚定在五月底 |'
- en: '| (B)Y(E)(S)-JUN | annual frequency, anchored end of June |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-JUN | 每年频率，锚定在六月底 |'
- en: '| (B)Y(E)(S)-JUL | annual frequency, anchored end of July |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-JUL | 每年频率，锚定在七月底 |'
- en: '| (B)Y(E)(S)-AUG | annual frequency, anchored end of August |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-AUG | 每年频率，锚定在八月底 |'
- en: '| (B)Y(E)(S)-SEP | annual frequency, anchored end of September |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-SEP | 每年频率，锚定在九月底 |'
- en: '| (B)Y(E)(S)-OCT | annual frequency, anchored end of October |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-OCT | 每年频率，锚定在十月底 |'
- en: '| (B)Y(E)(S)-NOV | annual frequency, anchored end of November |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| (B)Y(E)(S)-NOV | 每年频率，锚定在十一月底 |'
- en: These can be used as arguments to `date_range`, `bdate_range`, constructors
    for `DatetimeIndex`, as well as various other timeseries-related functions in
    pandas.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以作为`date_range`、`bdate_range`的参数，`DatetimeIndex`的构造函数，以及pandas中各种其他与时间序列相关的函数的参数。
- en: Anchored offset semantics
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 锚定偏移语义
- en: For those offsets that are anchored to the start or end of specific frequency
    (`MonthEnd`, `MonthBegin`, `WeekEnd`, etc), the following rules apply to rolling
    forward and backwards.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些锚定在特定频率（`MonthEnd`，`MonthBegin`，`WeekEnd`等）开始或结束的偏移量，以下规则适用于向前和向后滚动。
- en: When `n` is not 0, if the given date is not on an anchor point, it snapped to
    the next(previous) anchor point, and moved `|n|-1` additional steps forwards or
    backwards.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 当`n`不为0时，如果给定日期不在锚点上，则会被吸附到下一个（上一个）锚点，并向前或向后移动`|n|-1`步。
- en: '[PRE80]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: If the given date *is* on an anchor point, it is moved `|n|` points forwards
    or backwards.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定日期在锚点上，则向前或向后移动`|n|`个点。
- en: '[PRE81]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: For the case when `n=0`, the date is not moved if on an anchor point, otherwise
    it is rolled forward to the next anchor point.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`n=0`的情况，如果日期在锚点上，则日期不会移动，否则将向前滚动到下一个锚点。
- en: '[PRE82]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '### Holidays / holiday calendars'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '### 节假日/节假日日历'
- en: Holidays and calendars provide a simple way to define holiday rules to be used
    with `CustomBusinessDay` or in other analysis that requires a predefined set of
    holidays. The `AbstractHolidayCalendar` class provides all the necessary methods
    to return a list of holidays and only `rules` need to be defined in a specific
    holiday calendar class. Furthermore, the `start_date` and `end_date` class attributes
    determine over what date range holidays are generated. These should be overwritten
    on the `AbstractHolidayCalendar` class to have the range apply to all calendar
    subclasses. `USFederalHolidayCalendar` is the only calendar that exists and primarily
    serves as an example for developing other calendars.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 假期和日历提供了一种简单的方式来定义与 `CustomBusinessDay` 一起使用的假日规则，或者在需要预定义一组假日的其他分析中使用。`AbstractHolidayCalendar`
    类提供了返回假日列表所��的所有方法，只需在特定假日日历类中定义 `rules` 即可。此外，`start_date` 和 `end_date` 类属性确定生成假日的日期范围。这些属性应该在
    `AbstractHolidayCalendar` 类上被重写，以使范围适用于所有日历子类。`USFederalHolidayCalendar` 是唯一存在的日历，主要用作开发其他日历的示例。
- en: 'For holidays that occur on fixed dates (e.g., US Memorial Day or July 4th)
    an observance rule determines when that holiday is observed if it falls on a weekend
    or some other non-observed day. Defined observance rules are:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 对于固定日期的假期（例如美国阵亡将士纪念日或7月4日），如果假期落在周末或其他非观察日，观察规则将决定何时观察该假期。定义的观察规则包括：
- en: '| Rule | Description |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| 规则 | 描述 |'
- en: '| --- | --- |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| nearest_workday | move Saturday to Friday and Sunday to Monday |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| nearest_workday | 将周六移至周五，周日移至周一 |'
- en: '| sunday_to_monday | move Sunday to following Monday |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| sunday_to_monday | 将周日移至下周一 |'
- en: '| next_monday_or_tuesday | move Saturday to Monday and Sunday/Monday to Tuesday
    |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| next_monday_or_tuesday | 将周六移至周一，周日/周一移至周二 |'
- en: '| previous_friday | move Saturday and Sunday to previous Friday” |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| previous_friday | 将周六和周日移至上周五 |'
- en: '| next_monday | move Saturday and Sunday to following Monday |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| next_monday | 将周六和周日移至下周一 |'
- en: 'An example of how holidays and holiday calendars are defined:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 假期和假日日历的定义示例：
- en: '[PRE83]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'hint:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：
- en: '**weekday=MO(2)** is same as **2 * Week(weekday=2)**'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '**weekday=MO(2)** 等同于 **2 * Week(weekday=2)**'
- en: Using this calendar, creating an index or doing offset arithmetic skips weekends
    and holidays (i.e., Memorial Day/July 4th). For example, the below defines a custom
    business day offset using the `ExampleCalendar`. Like any other offset, it can
    be used to create a `DatetimeIndex` or added to `datetime` or `Timestamp` objects.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此日历，创建索引或进行偏移算术会跳过周末和假期（例如阵亡将士纪念日/7月4日）。例如，以下定义了使用 `ExampleCalendar` 创建自定义工作日偏移的示例。与任何其他偏移一样，它可以用于创建
    `DatetimeIndex` 或添加到 `datetime` 或 `Timestamp` 对象中。
- en: '[PRE84]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Ranges are defined by the `start_date` and `end_date` class attributes of `AbstractHolidayCalendar`.
    The defaults are shown below.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 范围由 `AbstractHolidayCalendar` 的 `start_date` 和 `end_date` 类属性定义。默认值如下所示。
- en: '[PRE85]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: These dates can be overwritten by setting the attributes as datetime/Timestamp/string.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日期可以通过设置属性为 datetime/Timestamp/string 来覆盖。
- en: '[PRE86]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Every calendar class is accessible by name using the `get_calendar` function
    which returns a holiday class instance. Any imported calendar class will automatically
    be available by this function. Also, `HolidayCalendarFactory` provides an easy
    interface to create calendars that are combinations of calendars or calendars
    with additional rules.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日历类都可以通过名称使用 `get_calendar` 函数访问，该函数返回一个假日类实例。任何导入的日历类都将自动通过此函数可用。此外，`HolidayCalendarFactory`
    提供了一个简单的接口来创建组合日历或具有额外规则的日历。
- en: '[PRE87]  ## Time Series-related instance methods'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE87]  ## 与时间序列相关的实例方法'
- en: Shifting / lagging
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动 / 拖延
- en: One may want to *shift* or *lag* the values in a time series back and forward
    in time. The method for this is [`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift"), which is available on all of the pandas objects.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 有时可能需要在时间序列中向前或向后移动值。用于此目的的方法是 [`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift")，可用于所有 pandas 对象。
- en: '[PRE88]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `shift` method accepts an `freq` argument which can accept a `DateOffset`
    class or other `timedelta`-like object or also an [offset alias](#timeseries-offset-aliases).
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`shift` 方法接受一个 `freq` 参数，该参数可以接受一个 `DateOffset` 类或其他类似于 `timedelta` 的对象，也可以是一个
    [偏移别名](#timeseries-offset-aliases)。'
- en: 'When `freq` is specified, `shift` method changes all the dates in the index
    rather than changing the alignment of the data and the index:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定 `freq` 时，`shift` 方法会更改索引中的所有日期，而不是更改数据和索引的对齐方式：
- en: '[PRE89]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note that with when `freq` is specified, the leading entry is no longer NaN
    because the data is not being realigned.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当指定`freq`时，由于数据未重新对齐，因此前导条目不再是NaN。
- en: Frequency conversion
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 频率转换
- en: The primary function for changing frequencies is the [`asfreq()`](../reference/api/pandas.Series.asfreq.html#pandas.Series.asfreq
    "pandas.Series.asfreq") method. For a `DatetimeIndex`, this is basically just
    a thin, but convenient wrapper around [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") which generates a `date_range` and calls `reindex`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 更改频率的主要函数是[`asfreq()`](../reference/api/pandas.Series.asfreq.html#pandas.Series.asfreq
    "pandas.Series.asfreq")方法。对于`DatetimeIndex`，这基本上只是一个薄的、但方便的`reindex()`的包装器，它生成一个`date_range`并调用`reindex`。
- en: '[PRE90]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '`asfreq` provides a further convenience so you can specify an interpolation
    method for any gaps that may appear after the frequency conversion.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`asfreq`提供了进一步的便利，因此您可以为频率转换后可能出现的任何间隙指定插值方法。'
- en: '[PRE91]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Filling forward / backward
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向前/向后填充
- en: Related to `asfreq` and `reindex` is [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna"), which is documented in the [missing data section](missing_data.html#missing-data-fillna).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 与`asfreq`和`reindex`相关的是[`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna")，该方法在[缺失数据部分](missing_data.html#missing-data-fillna)有文档记录。
- en: Converting to Python datetimes
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换为Python日期时间
- en: '`DatetimeIndex` can be converted to an array of Python native [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects using the `to_pydatetime` method.  ## Resampling'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`可以使用`to_pydatetime`方法转换为Python本机的[`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(在Python v3.12中)")对象数组。  ## 重新采样'
- en: pandas has a simple, powerful, and efficient functionality for performing resampling
    operations during frequency conversion (e.g., converting secondly data into 5-minutely
    data). This is extremely common in, but not limited to, financial applications.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: pandas具有简单、强大和高效的功能，用于在频率转换期间执行重新采样操作（例如，将每秒数据转换为每5分钟的数据）。这在金融应用中非常常见，但不限于此。
- en: '[`resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") is a time-based groupby, followed by a reduction method
    on each of its groups. See some [cookbook examples](cookbook.html#cookbook-resample)
    for some advanced strategies.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample")是基于时间的分组，然后对每个组进行减少方法。查看一些[食谱示例](cookbook.html#cookbook-resample)以了解一些高级策略。'
- en: The `resample()` method can be used directly from `DataFrameGroupBy` objects,
    see the [groupby docs](groupby.html#groupby-transform-window-resample).
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`resample()`方法可以直接从`DataFrameGroupBy`对象中使用，请参阅[groupby文档](groupby.html#groupby-transform-window-resample)。'
- en: Basics
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础知识
- en: '[PRE92]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The `resample` function is very flexible and allows you to specify many different
    parameters to control the frequency conversion and resampling operation.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`resample`函数非常灵活，允许您指定许多不同的参数来控制频率转换和重新采样操作。'
- en: 'Any built-in method available via [GroupBy](../reference/groupby.html#api-groupby)
    is available as a method of the returned object, including `sum`, `mean`, `std`,
    `sem`, `max`, `min`, `median`, `first`, `last`, `ohlc`:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[GroupBy](../reference/groupby.html#api-groupby)可用的任何内置方法都可以作为返回对象的方法使用，包括`sum`、`mean`、`std`、`sem`、`max`、`min`、`median`、`first`、`last`、`ohlc`：
- en: '[PRE93]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'For downsampling, `closed` can be set to ‘left’ or ‘right’ to specify which
    end of the interval is closed:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 对于降采样，`closed`可以设置为‘left’或‘right’来指定区间的哪一端是闭合的：
- en: '[PRE94]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Parameters like `label` are used to manipulate the resulting labels. `label`
    specifies whether the result is labeled with the beginning or the end of the interval.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 像`label`这样的参数用于操作生成的标签。`label`指定结果是用区间的开始还是结束标记的。
- en: '[PRE95]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Warning
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The default values for `label` and `closed` is ‘**left**’ for all frequency
    offsets except for ‘ME’, ‘YE’, ‘QE’, ‘BME’, ‘BYE’, ‘BQE’, and ‘W’ which all have
    a default of ‘right’.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有频率偏移，默认值为‘**left**’，除了‘ME’、‘YE’、‘QE’、‘BME’、‘BYE’、‘BQE’和‘W’，它们的默认值都为‘right’。
- en: 'This might unintendedly lead to looking ahead, where the value for a later
    time is pulled back to a previous time as in the following example with the [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") frequency:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会意外地导致向前查看，其中稍后时间的值被拉回到先前时间，如下例中使用[`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay")频率：
- en: '[PRE96]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Notice how the value for Sunday got pulled back to the previous Friday. To get
    the behavior where the value for Sunday is pushed to Monday, use instead
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 注意星期日的值如何被拉回到前一个星期五。要获得星期日的值被推到星期一的行为，请改用
- en: '[PRE97]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: The `axis` parameter can be set to 0 or 1 and allows you to resample the specified
    axis for a `DataFrame`.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`axis`参数可以设置为0或1，并允许您重新采样`DataFrame`的指定轴。'
- en: '`kind` can be set to ‘timestamp’ or ‘period’ to convert the resulting index
    to/from timestamp and time span representations. By default `resample` retains
    the input representation.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`kind`可以设置为‘timestamp’或‘period’，以将结果索引转换为时间戳和时间跨度表示。默认情况下，`resample`保留输入表示。'
- en: '`convention` can be set to ‘start’ or ‘end’ when resampling period data (detail
    below). It specifies how low frequency periods are converted to higher frequency
    periods.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 当重新采样周期数据时，`convention`可以设置为‘start’或‘end’。它指定了低频率周期如何转换为高频率周期。
- en: Upsampling
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上采样
- en: 'For upsampling, you can specify a way to upsample and the `limit` parameter
    to interpolate over the gaps that are created:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上采样，您可以指定一种上采样方式和`limit`参数以插值填补创建的间隙：
- en: '[PRE98]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Sparse resampling
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 稀疏重新采样
- en: Sparse timeseries are the ones where you have a lot fewer points relative to
    the amount of time you are looking to resample. Naively upsampling a sparse series
    can potentially generate lots of intermediate values. When you don’t want to use
    a method to fill these values, e.g. `fill_method` is `None`, then intermediate
    values will be filled with `NaN`.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏时间序列是指您拥有的点相对于您要重新采样的时间量要少得多的时间序列。简单地对稀疏系列进行上采样可能会产生大量中间值。当您不想使用填充这些值的方法时，例如`fill_method`为`None`，那么中间值将被填充为`NaN`。
- en: Since `resample` is a time-based groupby, the following is a method to efficiently
    resample only the groups that are not all `NaN`.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`resample`是基于时间的分组，以下是一种有效重新采样仅不全为`NaN`的组的方法。
- en: '[PRE99]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'If we want to resample to the full range of the series:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要重新采样到系列的完整范围：
- en: '[PRE100]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'We can instead only resample those groups where we have points as follows:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以只重新采样那些我们有点的组，如下所示：
- en: '[PRE101]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '### Aggregation'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '### 聚合'
- en: The `resample()` method returns a `pandas.api.typing.Resampler` instance. Similar
    to the [aggregating API](basics.html#basics-aggregate), [groupby API](groupby.html#groupby-aggregate),
    and the [window API](window.html#window-overview), a `Resampler` can be selectively
    resampled.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`resample()`方法返回一个`pandas.api.typing.Resampler`实例。类似于[聚合API](basics.html#basics-aggregate)、[分组API](groupby.html#groupby-aggregate)和[窗口API](window.html#window-overview)，`Resampler`可以选择性地重新采样。'
- en: Resampling a `DataFrame`, the default will be to act on all columns with the
    same function.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 对`DataFrame`进行重新采样，默认情况下将对所有列使用相同的函数。
- en: '[PRE102]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: We can select a specific column or columns using standard getitem.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准的getitem选择特定列或列。
- en: '[PRE103]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'You can pass a list or dict of functions to do aggregation with, outputting
    a `DataFrame`:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以传递一个函数列表或字典来进行聚合，输出一个`DataFrame`：
- en: '[PRE104]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'On a resampled `DataFrame`, you can pass a list of functions to apply to each
    column, which produces an aggregated result with a hierarchical index:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新采样的`DataFrame`上，您可以传递一个函数列表以应用于每列，这将产生一个带有分层索引的聚合结果：
- en: '[PRE105]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a `DataFrame`:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将字典传递给`aggregate`，您可以对`DataFrame`的列应用不同的聚合：
- en: '[PRE106]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on the resampled object:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称也可以是字符串。为了使字符串有效，必须在重新采样对象上实现它：
- en: '[PRE107]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Furthermore, you can also specify multiple aggregation functions for each column
    separately.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以为每列单独指定多个聚合函数。
- en: '[PRE108]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: If a `DataFrame` does not have a datetimelike index, but instead you want to
    resample based on datetimelike column in the frame, it can passed to the `on`
    keyword.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个`DataFrame`没有日期时间索引，而你想要根据帧中的日期时间列进行重新采样，可以传递给`on`关键字。
- en: '[PRE109]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Similarly, if you instead want to resample by a datetimelike level of `MultiIndex`,
    its name or location can be passed to the `level` keyword.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您希望按照`MultiIndex`的日期时间级别重新采样，则可以将其名称或位置传递给`level`关键字。
- en: '[PRE110]  ### Iterating through groups'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE110]  ### 通过组进行迭代'
- en: 'With the `Resampler` object in hand, iterating through the grouped data is
    very natural and functions similarly to [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(in Python v3.12)"):'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`Resampler`对象，通过分组数据进行迭代非常自然，并且类似于[`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(在Python v3.12中)")：
- en: '[PRE111]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'See [Iterating through groups](groupby.html#groupby-iterating-label) or `Resampler.__iter__`
    for more.  ### Use `origin` or `offset` to adjust the start of the bins'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[通过组进行迭代](groupby.html#groupby-iterating-label)或`Resampler.__iter__`获取更多信息。###
    使用`origin`或`offset`来调整箱子的起始点
- en: The bins of the grouping are adjusted based on the beginning of the day of the
    time series starting point. This works well with frequencies that are multiples
    of a day (like `30D`) or that divide a day evenly (like `90s` or `1min`). This
    can create inconsistencies with some frequencies that do not meet this criteria.
    To change this behavior you can specify a fixed Timestamp with the argument `origin`.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 分组的箱子根据时间序列起始点的当天开始时间进行调整。这适用于是天数的倍数（如`30D`）或能够均匀分割一天的频率（如`90s`或`1min`）。这可能会导致某些不符合此标准的频率出现不一致。要更改此行为，可以使用参数`origin`指定一个固定的Timestamp。
- en: 'For example:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE112]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Here we can see that, when using `origin` with its default value (`''start_day''`),
    the result after `''2000-10-02 00:00:00''` are not identical depending on the
    start of time series:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，当使用`origin`的默认值（`'start_day'`）时，根据时间序列的起始点，`'2000-10-02 00:00:00'`之后的结果并不相同：
- en: '[PRE113]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Here we can see that, when setting `origin` to `''epoch''`, the result after
    `''2000-10-02 00:00:00''` are identical depending on the start of time series:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，将`origin`设置为`'epoch'`时，根据时间序列的起始点，`'2000-10-02 00:00:00'`之后的结果是相同的：
- en: '[PRE114]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'If needed you can use a custom timestamp for `origin`:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，可以使用自定义时间戳作为`origin`：
- en: '[PRE115]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If needed you can just adjust the bins with an `offset` Timedelta that would
    be added to the default `origin`. Those two examples are equivalent for this time
    series:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以使用`offset` Timedelta调整箱子，该Timedelta将添加到默认的`origin`中。对于这个时间序列，这两个示例是等效的：
- en: '[PRE116]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Note the use of `'start'` for `origin` on the last example. In that case, `origin`
    will be set to the first value of the timeseries.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一个示例中对`origin`使用`'start'`而不是`origin`。在这种情况下，`origin`将被设置为时间序列的第一个值。
- en: Backward resample
  id: totrans-503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向后重新采样
- en: New in version 1.3.0.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.0中的新功能。
- en: Instead of adjusting the beginning of bins, sometimes we need to fix the end
    of the bins to make a backward resample with a given `freq`. The backward resample
    sets `closed` to `'right'` by default since the last value should be considered
    as the edge point for the last bin.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要调整箱子的开始而不是结束，以便使用给定的`freq`进行向后重新采样。向后重新采样默认将`closed`设置为`'right'`，因为最后一个值应被视为最后一个箱子的边缘点。
- en: We can set `origin` to `'end'`. The value for a specific `Timestamp` index stands
    for the resample result from the current `Timestamp` minus `freq` to the current
    `Timestamp` with a right close.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`origin`设置为`'end'`。特定`Timestamp`索引的值表示从当前`Timestamp`减去`freq`到当前`Timestamp`的右闭区间的重新采样结果。
- en: '[PRE117]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Besides, in contrast with the `'start_day'` option, `end_day` is supported.
    This will set the origin as the ceiling midnight of the largest `Timestamp`.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与`'start_day'`选项相反，支持`end_day`。这将把`origin`设置为最大`Timestamp`的午夜。
- en: '[PRE118]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The above result uses `2000-10-02 00:29:00` as the last bin’s right edge since
    the following computation.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 以上结果使用`2000-10-02 00:29:00`作为最后一个箱子的右边缘，因为以下计算。
- en: '[PRE119]  ## Time span representation'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE119]  ## 时间跨度表示'
- en: Regular intervals of time are represented by `Period` objects in pandas while
    sequences of `Period` objects are collected in a `PeriodIndex`, which can be created
    with the convenience function `period_range`.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，时间的常规间隔由`Period`对象表示，而`Period`对象的序列被收集在`PeriodIndex`中，可以使用便利函数`period_range`创建。
- en: Period
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 期间
- en: A `Period` represents a span of time (e.g., a day, a month, a quarter, etc).
    You can specify the span via `freq` keyword using a frequency alias like below.
    Because `freq` represents a span of `Period`, it cannot be negative like “-3D”.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`表示一段时间（例如，一天，一个月，一个季度等）。您可以通过使用频率别名来指定`freq`关键字来指定跨度。因为`freq`表示`Period`的跨度，所以不能像“-3D”那样是负数。'
- en: '[PRE120]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Adding and subtracting integers from periods shifts the period by its own frequency.
    Arithmetic is not allowed between `Period` with different `freq` (span).
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 从期间中添加和减去整数会按照其自身频率移动期间。不允许在具有不同`freq`（跨度）的`Period`之间进行算术运算。
- en: '[PRE121]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: If `Period` freq is daily or higher (`D`, `h`, `min`, `s`, `ms`, `us`, and `ns`),
    `offsets` and `timedelta`-like can be added if the result can have the same freq.
    Otherwise, `ValueError` will be raised.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Period`频率是每天或更高（`D`，`h`，`min`，`s`，`ms`，`us`和`ns`），则可以添加`offsets`和类似于`timedelta`的内容，如果结果具有相同的频率，则可以添加。否则，将引发`ValueError`。
- en: '[PRE122]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: If `Period` has other frequencies, only the same `offsets` can be added. Otherwise,
    `ValueError` will be raised.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Period`具有其他频率，则只能添加相同的`offsets`。否则，将引发`ValueError`。
- en: '[PRE124]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Taking the difference of `Period` instances with the same frequency will return
    the number of frequency units between them:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 具有相同频率的`Period`实例之间的差异将返回它们之间的频率单位数：
- en: '[PRE126]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: PeriodIndex and period_range
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PeriodIndex和period_range
- en: 'Regular sequences of `Period` objects can be collected in a `PeriodIndex`,
    which can be constructed using the `period_range` convenience function:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`对象的常规序列可以收集在`PeriodIndex`中，可以使用`period_range`便利函数构建：'
- en: '[PRE127]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The `PeriodIndex` constructor can also be used directly:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex`构造函数也可以直接使用：'
- en: '[PRE128]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Passing multiplied frequency outputs a sequence of `Period` which has multiplied
    span.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 传递乘以的频率会输出一个具有乘以跨度的`Period`序列。
- en: '[PRE129]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: If `start` or `end` are `Period` objects, they will be used as anchor endpoints
    for a `PeriodIndex` with frequency matching that of the `PeriodIndex` constructor.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`start`或`end`是`Period`对象，则它们将用作与`PeriodIndex`构造函数的频率匹配的锚定端点。
- en: '[PRE130]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Just like `DatetimeIndex`, a `PeriodIndex` can also be used to index pandas
    objects:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`DatetimeIndex`一样，`PeriodIndex`也可以用于索引pandas对象：
- en: '[PRE131]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '`PeriodIndex` supports addition and subtraction with the same rule as `Period`.'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex`支持与`Period`相同规则的加法和减法。'
- en: '[PRE132]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '`PeriodIndex` has its own dtype named `period`, refer to [Period Dtypes](#timeseries-period-dtype).'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex`有自己的名为`period`的dtype，请参考[Period Dtypes](#timeseries-period-dtype)。'
- en: '### Period dtypes'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '### 期间dtype'
- en: '`PeriodIndex` has a custom `period` dtype. This is a pandas extension dtype
    similar to the [timezone aware dtype](#timeseries-timezone-series) (`datetime64[ns,
    tz]`).'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex`具有自定义的`period` dtype。这是类似于[时区感知dtype](#timeseries-timezone-series)（`datetime64[ns,
    tz]`）的pandas扩展dtype。'
- en: The `period` dtype holds the `freq` attribute and is represented with `period[freq]`
    like `period[D]` or `period[M]`, using [frequency strings](#timeseries-period-aliases).
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`period` dtype保存`freq`属性，并且用`period[freq]`表示，如`period[D]`或`period[M]`，使用[频率字符串](#timeseries-period-aliases)。'
- en: '[PRE133]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The `period` dtype can be used in `.astype(...)`. It allows one to change the
    `freq` of a `PeriodIndex` like `.asfreq()` and convert a `DatetimeIndex` to `PeriodIndex`
    like `to_period()`:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`period` dtype可以在`.astype(...)`中使用。它允许更改`PeriodIndex`的`freq`，如`.asfreq()`，并将`DatetimeIndex`转换为`PeriodIndex`，如`to_period()`：'
- en: '[PRE134]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: PeriodIndex partial string indexing
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PeriodIndex部分字符串索引
- en: PeriodIndex now supports partial string slicing with non-monotonic indexes.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: PeriodIndex现在支持具有非单调索引的部分字符串切片。
- en: You can pass in dates and strings to `Series` and `DataFrame` with `PeriodIndex`,
    in the same manner as `DatetimeIndex`. For details, refer to [DatetimeIndex Partial
    String Indexing](#timeseries-partialindexing).
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像`DatetimeIndex`一样向`Series`和`DataFrame`传递日期和字符串，具有`PeriodIndex`，有关详细信息，请参考[DatetimeIndex部分字符串索引](#timeseries-partialindexing)。
- en: '[PRE135]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Passing a string representing a lower frequency than `PeriodIndex` returns partial
    sliced data.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 传递表示低于`PeriodIndex`的频率的字符串将返回部分切片数据。
- en: '[PRE136]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: As with `DatetimeIndex`, the endpoints will be included in the result. The example
    below slices data starting from 10:00 to 11:59.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 与`DatetimeIndex`一样，结果将包括端点。下面的示例从10:00开始切片数据到11:59。
- en: '[PRE137]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Frequency conversion and resampling with PeriodIndex
  id: totrans-554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用PeriodIndex进行频率转换和重采样
- en: 'The frequency of `Period` and `PeriodIndex` can be converted via the `asfreq`
    method. Let’s start with the fiscal year 2011, ending in December:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`和`PeriodIndex`的频率可以通过`asfreq`方法进行转换。让我们从2011财政年度开始，截至12月：'
- en: '[PRE138]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'We can convert it to a monthly frequency. Using the `how` parameter, we can
    specify whether to return the starting or ending month:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其转换为月度频率。使用`how`参数，我们可以指定是返回起始月份还是结束月份：
- en: '[PRE139]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The shorthands ‘s’ and ‘e’ are provided for convenience:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了‘s’和‘e’的简写形式以方便使用：
- en: '[PRE140]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Converting to a “super-period” (e.g., annual frequency is a super-period of
    quarterly frequency) automatically returns the super-period that includes the
    input period:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为“超期”（例如，年度频率是季度频率的超期）将自动返回包含输入期间的超期：
- en: '[PRE141]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Note that since we converted to an annual frequency that ends the year in November,
    the monthly period of December 2011 is actually in the 2012 Y-NOV period.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们转换为年度频率，年终在十一月，因此 2011 年 12 月的月度期间实际上在 2012 年 Y-NOV 期间。
- en: Period conversions with anchored frequencies are particularly useful for working
    with various quarterly data common to economics, business, and other fields. Many
    organizations define quarters relative to the month in which their fiscal year
    starts and ends. Thus, first quarter of 2011 could start in 2010 or a few months
    into 2011\. Via anchored frequencies, pandas works for all quarterly frequencies
    `Q-JAN` through `Q-DEC`.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 具有锚定频率的期间转换对于处理经济学、商业和其他领域常见的各种季度数据特别有用。许多组织将季度定义为其财政年度开始和结束的月份。因此，2011 年第一季度可能从
    2010 年开始，或者在 2011 年的几个月内开始。通过锚定频率，pandas 适用于所有季度频率 `Q-JAN` 到 `Q-DEC`。
- en: '`Q-DEC` define regular calendar quarters:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q-DEC` 定义常规日历季度：'
- en: '[PRE142]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '`Q-MAR` defines fiscal year end in March:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q-MAR` 定义了年度财政年度结束于三月：'
- en: '[PRE143]  ## Converting between representations'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE143]  ## 转换表示方式'
- en: 'Timestamped data can be converted to PeriodIndex-ed data using `to_period`
    and vice-versa using `to_timestamp`:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳数据可以使用 `to_period` 转换为 PeriodIndex 数据，反之亦然使用 `to_timestamp`：
- en: '[PRE144]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Remember that ‘s’ and ‘e’ can be used to return the timestamps at the start
    or end of the period:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，‘s’ 和 ‘e’ 可以用于返回期间开始或结束的时间戳：
- en: '[PRE145]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Converting between period and timestamp enables some convenient arithmetic
    functions to be used. In the following example, we convert a quarterly frequency
    with year ending in November to 9am of the end of the month following the quarter
    end:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在期间和时间戳之间进行转换可以使用一些方便的算术函数。在以下示例中，我们将将年终在十一月的季度频率转换为季度结束后一个月的月底上午9点：
- en: '[PRE146]  ## Representing out-of-bounds spans'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE146]  ## 表示超出范围的时间段'
- en: If you have data that is outside of the `Timestamp` bounds, see [Timestamp limitations](#timeseries-timestamp-limits),
    then you can use a `PeriodIndex` and/or `Series` of `Periods` to do computations.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的数据超出了 `Timestamp` 的范围，请参阅[时间戳限制](#timeseries-timestamp-limits)，然后您可以使用 `PeriodIndex`
    和/或 `Periods` 的 `Series` 进行计算。
- en: '[PRE147]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: To convert from an `int64` based YYYYMMDD representation.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 要从基于 `int64` 的 YYYYMMDD 表示形式转换。
- en: '[PRE148]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'These can easily be converted to a `PeriodIndex`:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以轻松转换为 `PeriodIndex`：
- en: '[PRE149]  ## Time zone handling'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE149]  ## 时区处理'
- en: pandas provides rich support for working with timestamps in different time zones
    using the `pytz` and `dateutil` libraries or [`datetime.timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone
    "(in Python v3.12)") objects from the standard library.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 提供了丰富的支持，使用 `pytz` 和 `dateutil` 库或标准库中的 [`datetime.timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone
    "(在 Python v3.12 中)") 对象，可以处理不同时区的时间戳。
- en: Working with time zones
  id: totrans-582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理时区
- en: 'By default, pandas objects are time zone unaware:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，pandas 对象不考虑时区：
- en: '[PRE150]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: To localize these dates to a time zone (assign a particular time zone to a naive
    date), you can use the `tz_localize` method or the `tz` keyword argument in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). You can either pass `pytz` or `dateutil` time zone objects
    or Olson time zone database strings. Olson time zone strings will return `pytz`
    time zone objects by default. To return `dateutil` time zone objects, append `dateutil/`
    before the string.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些日期本地化到时区（为一个无时区日期分配特定的时区），您可以使用 `tz_localize` 方法或 [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") 中的 `tz` 关键字参数，[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") 或 [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")。您可以传递 `pytz` 或 `dateutil` 时区对象或 Olson 时区数据库字符串。Olson 时区字符串将默认返回
    `pytz` 时区对象。要返回 `dateutil` 时区对象，请在字符串之前添加 `dateutil/`。
- en: In `pytz` you can find a list of common (and less common) time zones using `from
    pytz import common_timezones, all_timezones`.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `pytz` 中，您可以使用 `from pytz import common_timezones, all_timezones` 找到常见（以及不太常见）的时区列表。
- en: '`dateutil` uses the OS time zones so there isn’t a fixed list available. For
    common zones, the names are the same as `pytz`.'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dateutil` 使用操作系统时区，因此没有固定的列表可用。对于常见时区，名称与 `pytz` 相同。'
- en: '[PRE151]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Note that the `UTC` time zone is a special case in `dateutil` and should be
    constructed explicitly as an instance of `dateutil.tz.tzutc`. You can also construct
    other time zones objects explicitly first.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`UTC`时区在`dateutil`中是一个特殊情况，应该显式构造为`dateutil.tz.tzutc`的实例。您也可以首先显式构造其他时区对象。
- en: '[PRE153]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: To convert a time zone aware pandas object from one time zone to another, you
    can use the `tz_convert` method.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一个时区感知的 pandas 对象从一个时区转换到另一个时区，您可以使用`tz_convert`方法。
- en: '[PRE154]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Note
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using `pytz` time zones, [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") will construct a different time zone object than a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") for the same time zone input. A [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") can hold a collection of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects that may have different UTC offsets and cannot be
    succinctly represented by one `pytz` time zone instance while one [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") represents one point in time with a specific UTC offset.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`pytz`时区时，[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")将构造一个不同的时区对象，而对于相同的时区输入，[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")将构造一个不同的时区对象。一个[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")可以保存一组具有不同UTC偏移的[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")对象，而不能简洁地由一个`pytz`时区实例表示，而一个[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")代表一个具有特定UTC偏移的时间点。
- en: '[PRE155]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Warning
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Be wary of conversions between libraries. For some time zones, `pytz` and `dateutil`
    have different definitions of the zone. This is more of a problem for unusual
    time zones than for ‘standard’ zones like `US/Eastern`.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 要谨慎处理库之间的转换。对于一些时区，`pytz`和`dateutil`对时区的定义不同。这对于不寻常的时区比‘标准’时区如`US/Eastern`更有问题。
- en: Warning
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Be aware that a time zone definition across versions of time zone libraries
    may not be considered equal. This may cause problems when working with stored
    data that is localized using one version and operated on with a different version.
    See [here](io.html#io-hdf5-notes) for how to handle such a situation.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，跨时间区库版本的时区定义可能不被视为相等。这可能会在使用一个版本本地化的存储数据并在不同版本上操作时出现问题。请参见[这里](io.html#io-hdf5-notes)如何处理这种情况。
- en: Warning
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: For `pytz` time zones, it is incorrect to pass a time zone object directly into
    the `datetime.datetime` constructor (e.g., `datetime.datetime(2011, 1, 1, tzinfo=pytz.timezone('US/Eastern'))`.
    Instead, the datetime needs to be localized using the `localize` method on the
    `pytz` time zone object.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`pytz`时区，直接将一个时区对象传递给`datetime.datetime`构造函数是不正确的（例如，`datetime.datetime(2011,
    1, 1, tzinfo=pytz.timezone('US/Eastern'))`）。相反，需要使用`pytz`时区对象上的`localize`方法对日期时间进行本地化。
- en: Warning
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Be aware that for times in the future, correct conversion between time zones
    (and UTC) cannot be guaranteed by any time zone library because a timezone’s offset
    from UTC may be changed by the respective government.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于未来的时间，任何时区库都无法保证正确的时区（和UTC）之间的转换，因为时区与UTC的偏移可能会被各自的政府更改。
- en: Warning
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: If you are using dates beyond 2038-01-18, due to current deficiencies in the
    underlying libraries caused by the year 2038 problem, daylight saving time (DST)
    adjustments to timezone aware dates will not be applied. If and when the underlying
    libraries are fixed, the DST transitions will be applied.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的日期超过2038-01-18，由于底层库中当前存在的年2038问题导致的缺陷，时区感知日期的夏令时（DST）调整将不会被应用。如果底层库被修复，DST转换将会被应用。
- en: 'For example, for two dates that are in British Summer Time (and so would normally
    be GMT+1), both the following asserts evaluate as true:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于两个处于英国夏令时的日期（通常为GMT+1），以下断言都为真：
- en: '[PRE156]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Under the hood, all timestamps are stored in UTC. Values from a time zone aware
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") will have their fields (day, hour, minute, etc.) localized
    to the time zone. However, timestamps with the same UTC value are still considered
    to be equal even if they are in different time zones:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，所有时间戳都以UTC存储。来自时区感知的[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")或[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")的值将被本地化到时区。然而，具有相同UTC值的时间戳即使在不同时区中仍被视为相等：
- en: '[PRE157]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in different time zones will yield UTC [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), aligning the data on the UTC timestamps:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 不同时区中的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")之间的操作将产生UTC
    [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")，将数据对齐到UTC时间戳上：
- en: '[PRE158]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: To remove time zone information, use `tz_localize(None)` or `tz_convert(None)`.
    `tz_localize(None)` will remove the time zone yielding the local time representation.
    `tz_convert(None)` will remove the time zone after converting to UTC time.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除时区信息，请使用`tz_localize(None)`或`tz_convert(None)`。`tz_localize(None)`将删除时区，得到本地时间表示。`tz_convert(None)`将在转换为UTC时间后删除时区。
- en: '[PRE159]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '### Fold'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '### Fold'
- en: For ambiguous times, pandas supports explicitly specifying the keyword-only
    fold argument. Due to daylight saving time, one wall clock time can occur twice
    when shifting from summer to winter time; fold describes whether the datetime-like
    corresponds to the first (0) or the second time (1) the wall clock hits the ambiguous
    time. Fold is supported only for constructing from naive `datetime.datetime` (see
    [datetime documentation](https://docs.python.org/3/library/datetime.html) for
    details) or from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or for constructing from components (see below). Only `dateutil`
    timezones are supported (see [dateutil documentation](https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.enfold)
    for `dateutil` methods that deal with ambiguous datetimes) as `pytz` timezones
    do not support fold (see [pytz documentation](http://pytz.sourceforge.net/index.html)
    for details on how `pytz` deals with ambiguous datetimes). To localize an ambiguous
    datetime with `pytz`, please use [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"). In general, we recommend to rely on [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") when localizing ambiguous datetimes if you need
    direct control over how they are handled.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模糊时间，pandas支持显式指定仅关键字fold参数。由于夏令时，当从夏季时间转换到冬季时间时，一个挂钟时间可能发生两次；fold描述datetime-like是否对应于挂钟第一次（0）或第二次（1）命中模糊时间。仅支持从naive
    `datetime.datetime`（有关详细信息，请参阅[datetime文档](https://docs.python.org/3/library/datetime.html)）或从[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")构造或从组件构造（见下文）。仅支持`dateutil`时区（请参阅[dateutil文档](https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.enfold)以了解处理模糊日期时间的`dateutil`方法），因为`pytz`时区不支持fold（请参阅[pytz文档](http://pytz.sourceforge.net/index.html)以了解`pytz`如何处理模糊日期时间的详细信息）。要使用`pytz`本地化模糊日期时间，请使用[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")。一般来说，如果需要直接控制处理模糊日期时间的方式，我们建议在本地化模糊日期时间时依赖于[`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize")。
- en: '[PRE160]  ### Ambiguous times when localizing'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE160]  ### 本地化时的模糊时间'
- en: '`tz_localize` may not be able to determine the UTC offset of a timestamp because
    daylight savings time (DST) in a local time zone causes some times to occur twice
    within one day (“clocks fall back”). The following options are available:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '`tz_localize`可能无法确定时间戳的UTC偏移量，因为本地时区的夏令时导致某些时间在一天内发生两次（“时钟回拨”）。以下选项可用：'
- en: '`''raise''`: Raises a `pytz.AmbiguousTimeError` (the default behavior)'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''raise''`：引发`pytz.AmbiguousTimeError`（默认行为）'
- en: '`''infer''`: Attempt to determine the correct offset base on the monotonicity
    of the timestamps'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''infer''`：尝试根据时间戳的单调性确定正确的偏移量'
- en: '`''NaT''`: Replaces ambiguous times with `NaT`'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''NaT''`：用`NaT`替换模糊时间'
- en: '`bool`: `True` represents a DST time, `False` represents non-DST time. An array-like
    of `bool` values is supported for a sequence of times.'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`：`True`表示DST时间，`False`表示非DST时间。支持用于时间序列的`bool`值的类似数组。'
- en: '[PRE161]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: This will fail as there are ambiguous times (`'11/06/2011 01:00'`)
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 这将失败，因为存在模糊的时间（`'11/06/2011 01:00'`）
- en: '[PRE162]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Handle these ambiguous times by specifying the following.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定以下内容来处理这些模糊的时间。
- en: '[PRE163]  ### Nonexistent times when localizing'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE163]  ### 本地化不存在的时间'
- en: 'A DST transition may also shift the local time ahead by 1 hour creating nonexistent
    local times (“clocks spring forward”). The behavior of localizing a timeseries
    with nonexistent times can be controlled by the `nonexistent` argument. The following
    options are available:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: DST转换也可能会将当地时间向前调整1小时，从而创建不存在的本地时间（“时钟向前调整”）。可以通过`nonexistent`参数控制具有不存在时间的时间序列的本地化行为。可用的选项如下：
- en: '`''raise''`: Raises a `pytz.NonExistentTimeError` (the default behavior)'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''raise''`：引发`pytz.NonExistentTimeError`（默认行为）'
- en: '`''NaT''`: Replaces nonexistent times with `NaT`'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''NaT''`：用`NaT`替换不存在的时间'
- en: '`''shift_forward''`: Shifts nonexistent times forward to the closest real time'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''shift_forward''`：将不存在的时间向前移动到最近的真实时间'
- en: '`''shift_backward''`: Shifts nonexistent times backward to the closest real
    time'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''shift_backward''`：将不存在的时间向后移动到最近的真实时间'
- en: 'timedelta object: Shifts nonexistent times by the timedelta duration'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: timedelta对象：通过timedelta持续时间移动不存在的时间
- en: '[PRE164]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: Localization of nonexistent times will raise an error by default.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化不存在的时间将默认引发错误。
- en: '[PRE165]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Transform nonexistent times to `NaT` or shift the times.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 将不存在的时间转换为`NaT`或移动时间。
- en: '[PRE166]  ### Time zone Series operations'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE166]  ### 时区系列操作'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with time zone **naive** values is represented with a dtype of `datetime64[ns]`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 具有**naive**值的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")以`datetime64[ns]`的dtype表示。
- en: '[PRE167]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with a time zone **aware** values is represented with a dtype of `datetime64[ns,
    tz]` where `tz` is the time zone
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 具有**aware**值的[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")以`datetime64[ns,
    tz]`的dtype表示，其中`tz`是时区
- en: '[PRE168]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Both of these [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    time zone information can be manipulated via the `.dt` accessor, see [the dt accessor
    section](basics.html#basics-dt-accessors).
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")的时区信息可以通过`.dt`访问器进行操作，参见[dt访问器部分](basics.html#basics-dt-accessors)。
- en: For example, to localize and convert a naive stamp to time zone aware.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将naive时间戳本地化和转换为时区感知。
- en: '[PRE169]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Time zone information can also be manipulated using the `astype` method. This
    method can convert between different timezone-aware dtypes.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 时间区域信息也可以使用`astype`方法进行操作。该方法可以在不同的时区感知dtype之间进行转换。
- en: '[PRE170]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Note
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") on a `Series`, returns a NumPy array of the data. NumPy
    does not currently support time zones (even though it is *printing* in the local
    time zone!), therefore an object array of Timestamps is returned for time zone
    aware data:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Series`上使用[`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy")，返回数据的NumPy数组。 NumPy当前不支持时区（即使在本地时区*打印*！），因此对于时区感知数据，将返回时间戳的对象数组：
- en: '[PRE171]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'By converting to an object array of Timestamps, it preserves the time zone
    information. For example, when converting back to a Series:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转换为时间戳的对象数组，它保留了时区信息。例如，当转换回Series时：
- en: '[PRE172]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'However, if you want an actual NumPy `datetime64[ns]` array (with the values
    converted to UTC) instead of an array of objects, you can specify the `dtype`
    argument:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您想要一个实际的NumPy`datetime64[ns]`数组（其值已转换为UTC），而不是对象数组，您可以指定`dtype`参数：
- en: '[PRE173]  ## Overview'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE173]  ## 概述'
- en: 'pandas captures 4 general time related concepts:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: pandas捕获了4个通用的与时间相关的概念：
- en: 'Date times: A specific date and time with timezone support. Similar to `datetime.datetime`
    from the standard library.'
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '日期时间：具有时区支持的特定日期和时间。类似于标准库中的`datetime.datetime`。  '
- en: 'Time deltas: An absolute time duration. Similar to `datetime.timedelta` from
    the standard library.'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间增量：绝对时间持续时间。类似于标准库中的`datetime.timedelta`。
- en: 'Time spans: A span of time defined by a point in time and its associated frequency.'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间跨度：由时间点及其关联频率定义的时间跨度。
- en: 'Date offsets: A relative time duration that respects calendar arithmetic. Similar
    to `dateutil.relativedelta.relativedelta` from the `dateutil` package.'
  id: totrans-659
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日期偏移量：一种尊重日历算术的相对时间持续。类似于`dateutil`包中的`dateutil.relativedelta.relativedelta`。
- en: '| Concept | Scalar Class | Array Class | pandas Data Type | Primary Creation
    Method |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| 概念 | 标量类 | 数组类 | pandas数据类型 | 主要创建方法 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Date times | `Timestamp` | `DatetimeIndex` | `datetime64[ns]` or `datetime64[ns,
    tz]` | `to_datetime` or `date_range` |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| 日期时间 | `Timestamp` | `DatetimeIndex` | `datetime64[ns]`或`datetime64[ns, tz]`
    | `to_datetime`或`date_range` |'
- en: '| Time deltas | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`
    or `timedelta_range` |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| 时间增量 | `Timedelta` | `TimedeltaIndex` | `timedelta64[ns]` | `to_timedelta`或`timedelta_range`
    |'
- en: '| Time spans | `Period` | `PeriodIndex` | `period[freq]` | `Period` or `period_range`
    |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| 时间跨度 | `Period` | `PeriodIndex` | `period[freq]` | `Period`或`period_range`
    |'
- en: '| Date offsets | `DateOffset` | `None` | `None` | `DateOffset` |'
  id: totrans-665
  prefs: []
  type: TYPE_TB
  zh: '| 日期偏移量 | `DateOffset` | `None` | `None` | `DateOffset` |'
- en: For time series data, it’s conventional to represent the time component in the
    index of a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    so manipulations can be performed with respect to the time element.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列数据，习惯上将时间分量表示为[`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series")或[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")的索引，以便可以针对时间元素进行操作。
- en: '[PRE174]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: However, [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    can directly also support the time component as data itself.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")也可以直接支持时间组件作为数据本身。
- en: '[PRE175]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    have extended data type support and functionality for `datetime`, `timedelta`
    and `Period` data when passed into those constructors. `DateOffset` data however
    will be stored as `object` data.'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递到这些构造函数时，[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")和[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")支持`datetime`、`timedelta`和`Period`数据的扩展数据类型支持和功能。但是，`DateOffset`数据将以`object`数据存储。
- en: '[PRE176]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Lastly, pandas represents null date times, time deltas, and time spans as `NaT`
    which is useful for representing missing or null date like values and behaves
    similar as `np.nan` does for float data.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，pandas将空日期时间、时间增量和时间跨度表示为`NaT`，这对于表示缺失或空日期值非常有用，并且与`np.nan`对于浮点数据的行为类似。
- en: '[PRE177]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '## Timestamps vs. time spans'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '## 时间戳与时间跨度'
- en: Timestamped data is the most basic type of time series data that associates
    values with points in time. For pandas objects it means using the points in time.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳数据是与时间点关联值的最基本类型的时间序列数据。对于pandas对象，这意味着使用时间点。
- en: '[PRE178]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: However, in many cases it is more natural to associate things like change variables
    with a time span instead. The span represented by `Period` can be specified explicitly,
    or inferred from datetime string format.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在许多情况下，将变量的变化与时间跨度关联起来更自然。由`Period`表示的跨度可以明确指定，也可以从日期时间字符串格式中推断出来。
- en: 'For example:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE179]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    and [`Period`](../reference/api/pandas.Period.html#pandas.Period "pandas.Period")
    can serve as an index. Lists of `Timestamp` and `Period` are automatically coerced
    to [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") and [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex") respectively.'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")和[`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period")可以用作索引。`Timestamp`和`Period`的列表将自动强制转换为[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")和[`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex")。'
- en: '[PRE180]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: pandas allows you to capture both representations and convert between them.
    Under the hood, pandas represents timestamps using instances of `Timestamp` and
    sequences of timestamps using instances of `DatetimeIndex`. For regular time spans,
    pandas uses `Period` objects for scalar values and `PeriodIndex` for sequences
    of spans. Better support for irregular intervals with arbitrary start and end
    points are forth-coming in future releases.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: pandas允许您捕获两种表示形式并在它们之间进行转换。在底层，pandas使用`Timestamp`的实例表示时间戳，并使用`DatetimeIndex`的实例表示时间戳序列。对于常规时间跨度，pandas使用`Period`对象表示标量值，并使用`PeriodIndex`表示跨度序列。未来版本将更好地支持具有任意开始和结束点的不规则间隔。
- en: '## Converting to timestamps'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '## 转换为时间戳'
- en: 'To convert a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or list-like object of date-like objects e.g. strings, epochs, or a mixture, you
    can use the `to_datetime` function. When passed a `Series`, this returns a `Series`
    (with the same index), while a list-like is converted to a `DatetimeIndex`:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 要将[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")或类似列表的日期对象（例如字符串、时间戳或混合对象）转换为日期时间对象，您可以使用`to_datetime`函数。当传递一个`Series`时，它会返回一个相同索引的`Series`，而列表则会被转换为`DatetimeIndex`：
- en: '[PRE181]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'If you use dates which start with the day first (i.e. European style), you
    can pass the `dayfirst` flag:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用以日期开头的日期（即欧洲风格），您可以传递`dayfirst`标志：
- en: '[PRE182]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Warning
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: You see in the above example that `dayfirst` isn’t strict. If a date can’t be
    parsed with the day being first it will be parsed as if `dayfirst` were `False`
    and a warning will also be raised.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，`dayfirst`不是严格的。如果日期无法解析为以天为首的日期，它将被解析为`dayfirst`为`False`，同时还会引发警告。
- en: If you pass a single string to `to_datetime`, it returns a single `Timestamp`.
    `Timestamp` can also accept string input, but it doesn’t accept string parsing
    options like `dayfirst` or `format`, so use `to_datetime` if these are required.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将单个字符串传递给`to_datetime`，它将返回单个`Timestamp`。`Timestamp`也可以接受字符串输入，但它不接受像`dayfirst`或`format`这样的字符串解析选项，因此如果需要这些选项，请使用`to_datetime`。
- en: '[PRE183]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'You can also use the `DatetimeIndex` constructor directly:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以直接使用`DatetimeIndex`构造函数：
- en: '[PRE184]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'The string ‘infer’ can be passed in order to set the frequency of the index
    as the inferred frequency upon creation:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 可以传递字符串“infer”以设置索引的频率为创建时的推断频率：
- en: '[PRE185]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '### Providing a format argument'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '### 提供格式参数'
- en: In addition to the required datetime string, a `format` argument can be passed
    to ensure specific parsing. This could also potentially speed up the conversion
    considerably.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 除了必需的日期时间字符串之外，还可以传递一个`format`参数以确保特定的解析。这也可能显著加快转换速度。
- en: '[PRE186]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: For more information on the choices available when specifying the `format` option,
    see the Python [datetime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在指定`format`选项时可用的选项的更多信息，请参阅Python [datetime文档](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)。
- en: Assembling datetime from multiple DataFrame columns
  id: totrans-700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从多个DataFrame列组装日期时间
- en: You can also pass a `DataFrame` of integer or string columns to assemble into
    a `Series` of `Timestamps`.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以传递一个整数或字符串列的`DataFrame`以组装为`Timestamps`的`Series`。
- en: '[PRE187]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: You can pass only the columns that you need to assemble.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以只传递您需要组装的列。
- en: '[PRE188]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '`pd.to_datetime` looks for standard designations of the datetime component
    in the column names, including:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.to_datetime`会查找列名中datetime组件的标准标识，包括：'
- en: 'required: `year`, `month`, `day`'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必需的：`year`、`month`、`day`
- en: 'optional: `hour`, `minute`, `second`, `millisecond`, `microsecond`, `nanosecond`'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的：`hour`、`minute`、`second`、`millisecond`、`microsecond`、`nanosecond`
- en: Invalid data
  id: totrans-708
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效的数据
- en: 'The default behavior, `errors=''raise''`, is to raise when unparsable:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为`errors='raise'`是在无法解析时引发异常：
- en: '[PRE189]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Pass `errors=''coerce''` to convert unparsable data to `NaT` (not a time):'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`errors='coerce'`以将无法解析的数据转换为`NaT`（不是时间）：
- en: '[PRE190]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '### Epoch timestamps'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '### 纪元时间戳'
- en: pandas supports converting integer or float epoch times to `Timestamp` and `DatetimeIndex`.
    The default unit is nanoseconds, since that is how `Timestamp` objects are stored
    internally. However, epochs are often stored in another `unit` which can be specified.
    These are computed from the starting point specified by the `origin` parameter.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: pandas支持将整数或浮点数纪元时间转换为`Timestamp`和`DatetimeIndex`。默认单位是纳秒，因为`Timestamp`对象在内部存储时是以纳秒为单位的。然而，纪元时间通常以另一个单位存储，可以指定。这些是从`origin`参数指定的起始点计算出来的。
- en: '[PRE191]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Note
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `unit` parameter does not use the same strings as the `format` parameter
    that was discussed [above](#timeseries-converting-format)). The available units
    are listed on the documentation for [`pandas.to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`unit`参数不使用与上述讨论的`format`参数相同的字符串）。 可用单位在[`pandas.to_datetime()`的文档](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime")中列出。'
- en: 'Constructing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with an epoch timestamp with the `tz` argument specified
    will raise a ValueError. If you have epochs in wall time in another timezone,
    you can read the epochs as timezone-naive timestamps and then localize to the
    appropriate timezone:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tz`参数指定了epoch时间戳的[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")或[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex")构造会引发ValueError。如果你有另一个时区中的墙上时间的epoch，你可以将epoch读取为时区不敏感的时间戳，然后本地化到适当的时区：
- en: '[PRE192]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Note
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Epoch times will be rounded to the nearest nanosecond.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: Epoch时间将四舍五入到最近的纳秒。
- en: Warning
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Conversion of float epoch times can lead to inaccurate and unexpected results.
    [Python floats](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(in Python v3.12)") have about 15 digits precision in decimal. Rounding during
    conversion from float to high precision `Timestamp` is unavoidable. The only way
    to achieve exact precision is to use a fixed-width types (e.g. an int64).
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 将float型epoch时间转换可能导致不准确和意外的结果。[Python floats](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(in Python v3.12)")在十进制中有约15位数字精度。在从浮点数到高精度`Timestamp`的转换过程中进行舍入是不可避免的。实现精确精度的唯一方法是使用固定宽度的类型（例如int64）。
- en: '[PRE193]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: See also
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using the origin parameter](#timeseries-origin)  ### From timestamps to epoch'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用origin参数](#timeseries-origin)  ### 从时间戳到epoch'
- en: 'To invert the operation from above, namely, to convert from a `Timestamp` to
    a ‘unix’ epoch:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转上述操作，即从`Timestamp`转换为‘unix’ epoch：
- en: '[PRE194]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: We subtract the epoch (midnight at January 1, 1970 UTC) and then floor divide
    by the “unit” (1 second).
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 我们减去纪元（1970年1月1日UTC午夜），然后进行“单位”（1秒）的地板除法。
- en: '[PRE195]  ### Using the `origin` parameter'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE195]  ### 使用`origin`参数'
- en: 'Using the `origin` parameter, one can specify an alternative starting point
    for creation of a `DatetimeIndex`. For example, to use 1960-01-01 as the starting
    date:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`origin`参数，可以指定一个替代创建`DatetimeIndex`的起始点。例如，要使用1960-01-01作为起始日期：
- en: '[PRE196]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: The default is set at `origin='unix'`, which defaults to `1970-01-01 00:00:00`.
    Commonly called ‘unix epoch’ or POSIX time.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置为`origin='unix'`，默认为`1970-01-01 00:00:00`。通常称为“unix纪元”或POSIX时间。
- en: '[PRE197]  ### Providing a format argument'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE197]  ### 提供format参数'
- en: In addition to the required datetime string, a `format` argument can be passed
    to ensure specific parsing. This could also potentially speed up the conversion
    considerably.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 除了必需的datetime字符串之外，还可以传递一个`format`参数以确保特定的解析。这也可能显著加快转换速度。
- en: '[PRE198]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: For more information on the choices available when specifying the `format` option,
    see the Python [datetime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior).
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在指定`format`选项时可用选择的更多信息，请参阅Python [datetime文档](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)。
- en: Assembling datetime from multiple DataFrame columns
  id: totrans-738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从多个DataFrame列中组装datetime
- en: You can also pass a `DataFrame` of integer or string columns to assemble into
    a `Series` of `Timestamps`.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以传递一个整数或字符串列的`DataFrame`以组装成`Timestamps`的`Series`。
- en: '[PRE199]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: You can pass only the columns that you need to assemble.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要传递你需要组装的列。
- en: '[PRE200]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '`pd.to_datetime` looks for standard designations of the datetime component
    in the column names, including:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.to_datetime`查找列名中datetime组件的标准设计，包括：'
- en: 'required: `year`, `month`, `day`'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必需：`year`，`month`，`day`
- en: 'optional: `hour`, `minute`, `second`, `millisecond`, `microsecond`, `nanosecond`'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选：`hour`，`minute`，`second`，`millisecond`，`microsecond`，`nanosecond`
- en: Invalid data
  id: totrans-746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无效数据
- en: 'The default behavior, `errors=''raise''`, is to raise when unparsable:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为，`errors='raise'`，是在不可解析时引发异常：
- en: '[PRE201]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Pass `errors=''coerce''` to convert unparsable data to `NaT` (not a time):'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 传递`errors='coerce'`以将不可解析的数据转换为`NaT`（不是时间）：
- en: '[PRE202]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '### Epoch timestamps'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '### Epoch时间戳'
- en: pandas supports converting integer or float epoch times to `Timestamp` and `DatetimeIndex`.
    The default unit is nanoseconds, since that is how `Timestamp` objects are stored
    internally. However, epochs are often stored in another `unit` which can be specified.
    These are computed from the starting point specified by the `origin` parameter.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 支持将整数或浮点时代转换为`Timestamp`和`DatetimeIndex`。默认单位为纳秒，因为这是`Timestamp`对象在内部存储的方式。但是，时代通常以另一个可以指定的`unit`存储。这些是从由`origin`参数指定的起始点计算得出的。
- en: '[PRE203]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Note
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `unit` parameter does not use the same strings as the `format` parameter
    that was discussed [above](#timeseries-converting-format)). The available units
    are listed on the documentation for [`pandas.to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime").
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '`unit`参数不使用与上面讨论的`format`参数相同的字符串。可以在[`pandas.to_datetime()`](../reference/api/pandas.to_datetime.html#pandas.to_datetime
    "pandas.to_datetime") 的文档中找到可用的单位。'
- en: 'Constructing a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") with an epoch timestamp with the `tz` argument specified
    will raise a ValueError. If you have epochs in wall time in another timezone,
    you can read the epochs as timezone-naive timestamps and then localize to the
    appropriate timezone:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定了`tz`参数的时代时间戳构造[`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp")或[`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") 将引发 ValueError。如果您在另一个时区的壁钟时间中有时代，您可以将时代读取为时区不可知的时间戳，然后本地化到适当的时区：
- en: '[PRE204]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Note
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Epoch times will be rounded to the nearest nanosecond.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 时代时间将四舍五入到最接近的纳秒。
- en: Warning
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Conversion of float epoch times can lead to inaccurate and unexpected results.
    [Python floats](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(in Python v3.12)") have about 15 digits precision in decimal. Rounding during
    conversion from float to high precision `Timestamp` is unavoidable. The only way
    to achieve exact precision is to use a fixed-width types (e.g. an int64).
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点时代转换可能导致不准确和意外的结果。 [Python 浮点数](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
    "(在 Python v3.12 中)") 在十进制中具有约 15 位数字精度。在从浮点数转换为高精度`Timestamp`时进行四舍五入是不可避免的。实现精确精度的唯一方法是使用固定宽度的类型（例如
    int64）。
- en: '[PRE205]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: See also
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using the origin parameter](#timeseries-origin)'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用起始参数](#timeseries-origin)'
- en: '### From timestamps to epoch'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从时间戳到时代'
- en: 'To invert the operation from above, namely, to convert from a `Timestamp` to
    a ‘unix’ epoch:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 要反转上述操作，即从`Timestamp`转换为‘unix’时代：
- en: '[PRE206]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: We subtract the epoch (midnight at January 1, 1970 UTC) and then floor divide
    by the “unit” (1 second).
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 我们减去时代（1970 年 1 月 1 日 UTC 的午夜），然后除以“unit”（1 秒）。
- en: '[PRE207]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '### Using the `origin` parameter'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 `origin` 参数'
- en: 'Using the `origin` parameter, one can specify an alternative starting point
    for creation of a `DatetimeIndex`. For example, to use 1960-01-01 as the starting
    date:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`origin`参数，可以为创建`DatetimeIndex`指定替代起始点。例如，要使用 1960-01-01 作为起始日期：
- en: '[PRE208]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The default is set at `origin='unix'`, which defaults to `1970-01-01 00:00:00`.
    Commonly called ‘unix epoch’ or POSIX time.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置为`origin='unix'`，默认为`1970-01-01 00:00:00`。通常称为“unix时代”或 POSIX 时间。
- en: '[PRE209]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '## Generating ranges of timestamps'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '## 生成时间戳范围'
- en: 'To generate an index with timestamps, you can use either the `DatetimeIndex`
    or `Index` constructor and pass in a list of datetime objects:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成带有时间戳的索引，您可以使用`DatetimeIndex`或`Index`构造函数，并传递一个日期时间对象列表：
- en: '[PRE210]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'In practice this becomes very cumbersome because we often need a very long
    index with a large number of timestamps. If we need timestamps on a regular frequency,
    we can use the [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") functions to create a `DatetimeIndex`. The default frequency
    for `date_range` is a **calendar day** while the default for `bdate_range` is
    a **business day**:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这变得非常繁琐，因为我们经常需要一个非常长的索引，其中包含大量的时间戳。如果我们需要按照固定频率生成时间戳，我们可以使用[`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") 和[`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") 函数来创建`DatetimeIndex`。`date_range`的默认频率是**日历日**，而`bdate_range`的默认频率是**工作日**：
- en: '[PRE211]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Convenience functions like `date_range` and `bdate_range` can utilize a variety
    of [frequency aliases](#timeseries-offset-aliases):'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '`date_range` and `bdate_range` make it easy to generate a range of dates using
    various combinations of parameters like `start`, `end`, `periods`, and `freq`.
    The start and end dates are strictly inclusive, so dates outside of those specified
    will not be generated:'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'Specifying `start`, `end`, and `periods` will generate a range of evenly spaced
    dates from `start` to `end` inclusively, with `periods` number of elements in
    the resulting `DatetimeIndex`:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '### Custom frequency ranges'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: '`bdate_range` can also generate a range of custom frequency dates by using
    the `weekmask` and `holidays` parameters. These parameters will only be used if
    a custom frequency string is passed.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: See also
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom business days](#timeseries-custombusinessdays)  ### Custom frequency
    ranges'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: '`bdate_range` can also generate a range of custom frequency dates by using
    the `weekmask` and `holidays` parameters. These parameters will only be used if
    a custom frequency string is passed.'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: See also
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '[Custom business days](#timeseries-custombusinessdays)'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '## Timestamp limitations'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: 'The limits of timestamp representation depend on the chosen resolution. For
    nanosecond resolution, the time span that can be represented using a 64-bit integer
    is limited to approximately 584 years:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: When choosing second-resolution, the available range grows to `+/- 2.9e11 years`.
    Different resolutions can be converted to each other through `as_unit`.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: '[Representing out-of-bounds spans](#timeseries-oob)'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '## Indexing'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the main uses for `DatetimeIndex` is as an index for pandas objects.
    The `DatetimeIndex` class contains many time series related optimizations:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: A large range of dates for various offsets are pre-computed and cached under
    the hood in order to make generating subsequent date ranges very fast (just have
    to grab a slice).
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast shifting using the `shift` method on pandas objects.
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unioning of overlapping `DatetimeIndex` objects with the same frequency is very
    fast (important for fast data alignment).
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick access to date fields via properties such as `year`, `month`, etc.
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularization functions like `snap` and very fast `asof` logic.
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatetimeIndex` objects have all the basic functionality of regular `Index`
    objects, and a smorgasbord of advanced time series specific methods for easy frequency
    processing.'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '[Reindexing methods](basics.html#basics-reindexing)'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: While pandas does not force you to have a sorted date index, some of these methods
    may have unexpected or incorrect behavior if the dates are unsorted.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '`DatetimeIndex` can be used like a regular index and offers all of its intelligent
    functionality like selection, slicing, etc.'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '### Partial string indexing'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: 'Dates and strings that parse to timestamps can be passed as indexing parameters:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'To provide convenience for accessing longer time series, you can also pass
    in the year or year and month as strings:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'This type of slicing will work on a `DataFrame` with a `DatetimeIndex` as well.
    Since the partial string selection is a form of label slicing, the endpoints **will
    be** included. This would include matching times on an included date:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 这种切片方式也适用于具有`DatetimeIndex`的`DataFrame`。由于部分字符串选择是一种标签切片的形式，端点**将被**包括在内。这将包括在包含日期上匹配时间：
- en: Warning
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Indexing `DataFrame` rows with a *single* string with getitem (e.g. `frame[dtstring]`)
    is deprecated starting with pandas 1.2.0 (given the ambiguity whether it is indexing
    the rows or selecting a column) and will be removed in a future version. The equivalent
    with `.loc` (e.g. `frame.loc[dtstring]`) is still supported.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个字符串对`DataFrame`行进行索引（例如`frame[dtstring]`）已在pandas 1.2.0中弃用（由于不确定是索引行还是选择列而存在歧义），并将在将来的版本中删除。相应的`.loc`（例如`frame.loc[dtstring]）仍受支持。
- en: '[PRE221]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'This starts on the very first time in the month, and includes the last date
    and time for the month:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 这从月初开始，包括月底的日期和时间：
- en: '[PRE222]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'This specifies a stop time **that includes all of the times on the last day**:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了一个包括最后一天所有时间的停止时间：
- en: '[PRE223]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'This specifies an **exact** stop time (and is not the same as the above):'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了一个**精确的**停止时间（与上述不同）：
- en: '[PRE224]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'We are stopping on the included end-point as it is part of the index:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在包含的端点上停止，因为它是索引的一部分：
- en: '[PRE225]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '`DatetimeIndex` partial string indexing also works on a `DataFrame` with a
    `MultiIndex`:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeIndex`部分字符串索引也适用于具有`MultiIndex`的`DataFrame`：'
- en: '[PRE226]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Slicing with string indexing also honors UTC offset.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串索引进行切片也遵守UTC偏移。
- en: '[PRE227]  ### Slice vs. exact match'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE227]  ### 切片 vs. 精确匹配'
- en: The same string used as an indexing parameter can be treated either as a slice
    or as an exact match depending on the resolution of the index. If the string is
    less accurate than the index, it will be treated as a slice, otherwise as an exact
    match.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 使用作为索引参数的相同字符串，根据索引的分辨率，可以将其视为切片或精确匹配。如果字符串比索引不准确，则将其视为切片，否则视为精确匹配。
- en: 'Consider a `Series` object with a minute resolution index:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个具有分钟分辨率索引的`Series`对象：
- en: '[PRE228]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: A timestamp string less accurate than a minute gives a `Series` object.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 比分钟精度低的时间戳字符串会给出一个`Series`对象。
- en: '[PRE229]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: A timestamp string with minute resolution (or more accurate), gives a scalar
    instead, i.e. it is not casted to a slice.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 具有分钟分辨率（或更精确）的时间戳字符串会给出一个标量，即不会转换为切片。
- en: '[PRE230]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: If index resolution is second, then the minute-accurate timestamp gives a `Series`.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 如果索引分辨率为秒，则具有分钟精度的时间戳会给出一个`Series`。
- en: '[PRE231]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: If the timestamp string is treated as a slice, it can be used to index `DataFrame`
    with `.loc[]` as well.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将时间戳字符串视为切片，它也可以用于使用`.loc[]`索引`DataFrame`。
- en: '[PRE232]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Warning
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'However, if the string is treated as an exact match, the selection in `DataFrame`’s
    `[]` will be column-wise and not row-wise, see [Indexing Basics](indexing.html#indexing-basics).
    For example `dft_minute[''2011-12-31 23:59'']` will raise `KeyError` as `''2012-12-31
    23:59''` has the same resolution as the index and there is no column with such
    name:'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果将字符串视为精确匹配，`DataFrame`的`[]`中的选择将按列而不是按行进行，参见[索引基础知识](indexing.html#indexing-basics)。例如，`dft_minute['2011-12-31
    23:59']`将引发`KeyError`，因为`'2012-12-31 23:59'`的分辨率与索引相同，没有这样的列名：
- en: To *always* have unambiguous selection, whether the row is treated as a slice
    or a single selection, use `.loc`.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 为了*始终*具有明确的选择，无论行是作为切片还是单个选择，都使用`.loc`。
- en: '[PRE233]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Note also that `DatetimeIndex` resolution cannot be less precise than day.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`DatetimeIndex`的分辨率不能比天更精确。
- en: '[PRE234]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Exact indexing
  id: totrans-853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精确索引
- en: As discussed in previous section, indexing a `DatetimeIndex` with a partial
    string depends on the “accuracy” of the period, in other words how specific the
    interval is in relation to the resolution of the index. In contrast, indexing
    with `Timestamp` or `datetime` objects is exact, because the objects have exact
    meaning. These also follow the semantics of *including both endpoints*.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所讨论的，使用部分字符串索引`DatetimeIndex`取决于周期的“准确性”，换句话说，与索引的分辨率相比间隔的具体性。相比之下，使用`Timestamp`或`datetime`对象进行索引是精确的，因为这些对象具有确切的含义。这些也遵循*包括两个端点*的语义。
- en: These `Timestamp` and `datetime` objects have exact `hours, minutes,` and `seconds`,
    even though they were not explicitly specified (they are `0`).
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`Timestamp`和`datetime`对象具有精确的`小时，分钟`和`秒`，即使它们没有明确指定（它们为`0`）。
- en: '[PRE235]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: With no defaults.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 没有默认值。
- en: '[PRE236]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Truncating & fancy indexing
  id: totrans-859
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 截断和花式索引
- en: 'A [`truncate()`](../reference/api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate") convenience function is provided that is similar
    to slicing. Note that `truncate` assumes a 0 value for any unspecified date component
    in a `DatetimeIndex` in contrast to slicing which returns any partially matching
    dates:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Even complicated fancy indexing that breaks the `DatetimeIndex` frequency regularity
    will result in a `DatetimeIndex`, although frequency is lost:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '### Partial string indexing'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: 'Dates and strings that parse to timestamps can be passed as indexing parameters:'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'To provide convenience for accessing longer time series, you can also pass
    in the year or year and month as strings:'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'This type of slicing will work on a `DataFrame` with a `DatetimeIndex` as well.
    Since the partial string selection is a form of label slicing, the endpoints **will
    be** included. This would include matching times on an included date:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: Indexing `DataFrame` rows with a *single* string with getitem (e.g. `frame[dtstring]`)
    is deprecated starting with pandas 1.2.0 (given the ambiguity whether it is indexing
    the rows or selecting a column) and will be removed in a future version. The equivalent
    with `.loc` (e.g. `frame.loc[dtstring]`) is still supported.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'This starts on the very first time in the month, and includes the last date
    and time for the month:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'This specifies a stop time **that includes all of the times on the last day**:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'This specifies an **exact** stop time (and is not the same as the above):'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'We are stopping on the included end-point as it is part of the index:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '`DatetimeIndex` partial string indexing also works on a `DataFrame` with a
    `MultiIndex`:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Slicing with string indexing also honors UTC offset.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '### Slice vs. exact match'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: The same string used as an indexing parameter can be treated either as a slice
    or as an exact match depending on the resolution of the index. If the string is
    less accurate than the index, it will be treated as a slice, otherwise as an exact
    match.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a `Series` object with a minute resolution index:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: A timestamp string less accurate than a minute gives a `Series` object.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: A timestamp string with minute resolution (or more accurate), gives a scalar
    instead, i.e. it is not casted to a slice.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: If index resolution is second, then the minute-accurate timestamp gives a `Series`.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: If the timestamp string is treated as a slice, it can be used to index `DataFrame`
    with `.loc[]` as well.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Warning
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if the string is treated as an exact match, the selection in `DataFrame`’s
    `[]` will be column-wise and not row-wise, see [Indexing Basics](indexing.html#indexing-basics).
    For example `dft_minute[''2011-12-31 23:59'']` will raise `KeyError` as `''2012-12-31
    23:59''` has the same resolution as the index and there is no column with such
    name:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: To *always* have unambiguous selection, whether the row is treated as a slice
    or a single selection, use `.loc`.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Note also that `DatetimeIndex` resolution cannot be less precise than day.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Exact indexing
  id: totrans-903
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As discussed in previous section, indexing a `DatetimeIndex` with a partial
    string depends on the “accuracy” of the period, in other words how specific the
    interval is in relation to the resolution of the index. In contrast, indexing
    with `Timestamp` or `datetime` objects is exact, because the objects have exact
    meaning. These also follow the semantics of *including both endpoints*.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: These `Timestamp` and `datetime` objects have exact `hours, minutes,` and `seconds`,
    even though they were not explicitly specified (they are `0`).
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: With no defaults.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Truncating & fancy indexing
  id: totrans-909
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A [`truncate()`](../reference/api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate") convenience function is provided that is similar
    to slicing. Note that `truncate` assumes a 0 value for any unspecified date component
    in a `DatetimeIndex` in contrast to slicing which returns any partially matching
    dates:'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Even complicated fancy indexing that breaks the `DatetimeIndex` frequency regularity
    will result in a `DatetimeIndex`, although frequency is lost:'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '## Time/date components'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: There are several time/date properties that one can access from `Timestamp`
    or a collection of timestamps like a `DatetimeIndex`.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  id: totrans-916
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-917
  prefs: []
  type: TYPE_TB
- en: '| year | The year of the datetime |'
  id: totrans-918
  prefs: []
  type: TYPE_TB
- en: '| month | The month of the datetime |'
  id: totrans-919
  prefs: []
  type: TYPE_TB
- en: '| day | The days of the datetime |'
  id: totrans-920
  prefs: []
  type: TYPE_TB
- en: '| hour | The hour of the datetime |'
  id: totrans-921
  prefs: []
  type: TYPE_TB
- en: '| minute | The minutes of the datetime |'
  id: totrans-922
  prefs: []
  type: TYPE_TB
- en: '| second | The seconds of the datetime |'
  id: totrans-923
  prefs: []
  type: TYPE_TB
- en: '| microsecond | The microseconds of the datetime |'
  id: totrans-924
  prefs: []
  type: TYPE_TB
- en: '| nanosecond | The nanoseconds of the datetime |'
  id: totrans-925
  prefs: []
  type: TYPE_TB
- en: '| date | Returns datetime.date (does not contain timezone information) |'
  id: totrans-926
  prefs: []
  type: TYPE_TB
- en: '| time | Returns datetime.time (does not contain timezone information) |'
  id: totrans-927
  prefs: []
  type: TYPE_TB
- en: '| timetz | Returns datetime.time as local time with timezone information |'
  id: totrans-928
  prefs: []
  type: TYPE_TB
- en: '| dayofyear | The ordinal day of year |'
  id: totrans-929
  prefs: []
  type: TYPE_TB
- en: '| day_of_year | The ordinal day of year |'
  id: totrans-930
  prefs: []
  type: TYPE_TB
- en: '| weekofyear | The week ordinal of the year |'
  id: totrans-931
  prefs: []
  type: TYPE_TB
- en: '| week | The week ordinal of the year |'
  id: totrans-932
  prefs: []
  type: TYPE_TB
- en: '| dayofweek | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-933
  prefs: []
  type: TYPE_TB
- en: '| day_of_week | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-934
  prefs: []
  type: TYPE_TB
- en: '| weekday | The number of the day of the week with Monday=0, Sunday=6 |'
  id: totrans-935
  prefs: []
  type: TYPE_TB
- en: '| quarter | Quarter of the date: Jan-Mar = 1, Apr-Jun = 2, etc. |'
  id: totrans-936
  prefs: []
  type: TYPE_TB
- en: '| days_in_month | The number of days in the month of the datetime |'
  id: totrans-937
  prefs: []
  type: TYPE_TB
- en: '| is_month_start | Logical indicating if first day of month (defined by frequency)
    |'
  id: totrans-938
  prefs: []
  type: TYPE_TB
- en: '| is_month_end | Logical indicating if last day of month (defined by frequency)
    |'
  id: totrans-939
  prefs: []
  type: TYPE_TB
- en: '| is_quarter_start | Logical indicating if first day of quarter (defined by
    frequency) |'
  id: totrans-940
  prefs: []
  type: TYPE_TB
- en: '| is_quarter_end | Logical indicating if last day of quarter (defined by frequency)
    |'
  id: totrans-941
  prefs: []
  type: TYPE_TB
- en: '| is_year_start | Logical indicating if first day of year (defined by frequency)
    |'
  id: totrans-942
  prefs: []
  type: TYPE_TB
- en: '| is_year_end | Logical indicating if last day of year (defined by frequency)
    |'
  id: totrans-943
  prefs: []
  type: TYPE_TB
- en: '| is_leap_year | Logical indicating if the date belongs to a leap year |'
  id: totrans-944
  prefs: []
  type: TYPE_TB
- en: Furthermore, if you have a `Series` with datetimelike values, then you can access
    these properties via the `.dt` accessor, as detailed in the section on [.dt accessors](basics.html#basics-dt-accessors).
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: 'You may obtain the year, week and day components of the ISO year from the ISO
    8601 standard:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '## DateOffset objects'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding examples, frequency strings (e.g. `''D''`) were used to specify
    a frequency that defined:'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: how the date times in [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") were spaced when using [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range")
  id: totrans-950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the frequency of a [`Period`](../reference/api/pandas.Period.html#pandas.Period
    "pandas.Period") or [`PeriodIndex`](../reference/api/pandas.PeriodIndex.html#pandas.PeriodIndex
    "pandas.PeriodIndex")
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These frequency strings map to a `DateOffset` object and its subclasses. A `DateOffset`
    is similar to a [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") that represents a duration of time but follows specific calendar
    duration rules. For example, a [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") day will always increment `datetimes` by 24 hours, while a
    `DateOffset` day will increment `datetimes` to the same time the next day whether
    a day represents 23, 24 or 25 hours due to daylight savings time. However, all
    `DateOffset` subclasses that are an hour or smaller (`Hour`, `Minute`, `Second`,
    `Milli`, `Micro`, `Nano`) behave like [`Timedelta`](../reference/api/pandas.Timedelta.html#pandas.Timedelta
    "pandas.Timedelta") and respect absolute time.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: The basic `DateOffset` acts similar to `dateutil.relativedelta` ([relativedelta
    documentation](https://dateutil.readthedocs.io/en/stable/relativedelta.html))
    that shifts a date time by the corresponding calendar duration specified. The
    arithmetic operator (`+`) can be used to perform the shift.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: 'Most `DateOffsets` have associated frequencies strings, or offset aliases,
    that can be passed into `freq` keyword arguments. The available date offsets and
    associated frequency strings can be found below:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: '| Date Offset | Frequency String | Description |'
  id: totrans-956
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-957
  prefs: []
  type: TYPE_TB
- en: '| [`DateOffset`](../reference/api/pandas.tseries.offsets.DateOffset.html#pandas.tseries.offsets.DateOffset
    "pandas.tseries.offsets.DateOffset") | None | Generic offset class, defaults to
    absolute 24 hours |'
  id: totrans-958
  prefs: []
  type: TYPE_TB
- en: '| [`BDay`](../reference/api/pandas.tseries.offsets.BDay.html#pandas.tseries.offsets.BDay
    "pandas.tseries.offsets.BDay") or [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") | `''B''` | business day (weekday) |'
  id: totrans-959
  prefs: []
  type: TYPE_TB
- en: '| [`CDay`](../reference/api/pandas.tseries.offsets.CDay.html#pandas.tseries.offsets.CDay
    "pandas.tseries.offsets.CDay") or [`CustomBusinessDay`](../reference/api/pandas.tseries.offsets.CustomBusinessDay.html#pandas.tseries.offsets.CustomBusinessDay
    "pandas.tseries.offsets.CustomBusinessDay") | `''C''` | custom business day |'
  id: totrans-960
  prefs: []
  type: TYPE_TB
- en: '| [`Week`](../reference/api/pandas.tseries.offsets.Week.html#pandas.tseries.offsets.Week
    "pandas.tseries.offsets.Week") | `''W''` | one week, optionally anchored on a
    day of the week |'
  id: totrans-961
  prefs: []
  type: TYPE_TB
- en: '| [`WeekOfMonth`](../reference/api/pandas.tseries.offsets.WeekOfMonth.html#pandas.tseries.offsets.WeekOfMonth
    "pandas.tseries.offsets.WeekOfMonth") | `''WOM''` | the x-th day of the y-th week
    of each month |'
  id: totrans-962
  prefs: []
  type: TYPE_TB
- en: '| [`LastWeekOfMonth`](../reference/api/pandas.tseries.offsets.LastWeekOfMonth.html#pandas.tseries.offsets.LastWeekOfMonth
    "pandas.tseries.offsets.LastWeekOfMonth") | `''LWOM''` | the x-th day of the last
    week of each month |'
  id: totrans-963
  prefs: []
  type: TYPE_TB
- en: '| [`MonthEnd`](../reference/api/pandas.tseries.offsets.MonthEnd.html#pandas.tseries.offsets.MonthEnd
    "pandas.tseries.offsets.MonthEnd") | `''ME''` | calendar month end |'
  id: totrans-964
  prefs: []
  type: TYPE_TB
- en: '| [`MonthBegin`](../reference/api/pandas.tseries.offsets.MonthBegin.html#pandas.tseries.offsets.MonthBegin
    "pandas.tseries.offsets.MonthBegin") | `''MS''` | calendar month begin |'
  id: totrans-965
  prefs: []
  type: TYPE_TB
- en: '| [`BMonthEnd`](../reference/api/pandas.tseries.offsets.BMonthEnd.html#pandas.tseries.offsets.BMonthEnd
    "pandas.tseries.offsets.BMonthEnd") or [`BusinessMonthEnd`](../reference/api/pandas.tseries.offsets.BusinessMonthEnd.html#pandas.tseries.offsets.BusinessMonthEnd
    "pandas.tseries.offsets.BusinessMonthEnd") | `''BME''` | business month end |'
  id: totrans-966
  prefs: []
  type: TYPE_TB
- en: '| [`BMonthBegin`](../reference/api/pandas.tseries.offsets.BMonthBegin.html#pandas.tseries.offsets.BMonthBegin
    "pandas.tseries.offsets.BMonthBegin") or [`BusinessMonthBegin`](../reference/api/pandas.tseries.offsets.BusinessMonthBegin.html#pandas.tseries.offsets.BusinessMonthBegin
    "pandas.tseries.offsets.BusinessMonthBegin") | `''BMS''` | business month begin
    |'
  id: totrans-967
  prefs: []
  type: TYPE_TB
- en: '| [`CBMonthEnd`](../reference/api/pandas.tseries.offsets.CBMonthEnd.html#pandas.tseries.offsets.CBMonthEnd
    "pandas.tseries.offsets.CBMonthEnd") or [`CustomBusinessMonthEnd`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthEnd.html#pandas.tseries.offsets.CustomBusinessMonthEnd
    "pandas.tseries.offsets.CustomBusinessMonthEnd") | `''CBME''` | custom business
    month end |'
  id: totrans-968
  prefs: []
  type: TYPE_TB
- en: '| [`CBMonthBegin`](../reference/api/pandas.tseries.offsets.CBMonthBegin.html#pandas.tseries.offsets.CBMonthBegin
    "pandas.tseries.offsets.CBMonthBegin") or [`CustomBusinessMonthBegin`](../reference/api/pandas.tseries.offsets.CustomBusinessMonthBegin.html#pandas.tseries.offsets.CustomBusinessMonthBegin
    "pandas.tseries.offsets.CustomBusinessMonthBegin") | `''CBMS''` | custom business
    month begin |'
  id: totrans-969
  prefs: []
  type: TYPE_TB
- en: '| [`SemiMonthEnd`](../reference/api/pandas.tseries.offsets.SemiMonthEnd.html#pandas.tseries.offsets.SemiMonthEnd
    "pandas.tseries.offsets.SemiMonthEnd") | `''SME''` | 15th (or other day_of_month)
    and calendar month end |'
  id: totrans-970
  prefs: []
  type: TYPE_TB
- en: '| [`SemiMonthBegin`](../reference/api/pandas.tseries.offsets.SemiMonthBegin.html#pandas.tseries.offsets.SemiMonthBegin
    "pandas.tseries.offsets.SemiMonthBegin") | `''SMS''` | 15th (or other day_of_month)
    and calendar month begin |'
  id: totrans-971
  prefs: []
  type: TYPE_TB
- en: '| [`QuarterEnd`](../reference/api/pandas.tseries.offsets.QuarterEnd.html#pandas.tseries.offsets.QuarterEnd
    "pandas.tseries.offsets.QuarterEnd") | `''QE''` | calendar quarter end |'
  id: totrans-972
  prefs: []
  type: TYPE_TB
- en: '| [`QuarterBegin`](../reference/api/pandas.tseries.offsets.QuarterBegin.html#pandas.tseries.offsets.QuarterBegin
    "pandas.tseries.offsets.QuarterBegin") | `''QS''` | calendar quarter begin |'
  id: totrans-973
  prefs: []
  type: TYPE_TB
- en: '| [`BQuarterEnd`](../reference/api/pandas.tseries.offsets.BQuarterEnd.html#pandas.tseries.offsets.BQuarterEnd
    "pandas.tseries.offsets.BQuarterEnd") | `''BQE` | business quarter end |'
  id: totrans-974
  prefs: []
  type: TYPE_TB
- en: '| [`BQuarterBegin`](../reference/api/pandas.tseries.offsets.BQuarterBegin.html#pandas.tseries.offsets.BQuarterBegin
    "pandas.tseries.offsets.BQuarterBegin") | `''BQS''` | business quarter begin |'
  id: totrans-975
  prefs: []
  type: TYPE_TB
- en: '| [`FY5253Quarter`](../reference/api/pandas.tseries.offsets.FY5253Quarter.html#pandas.tseries.offsets.FY5253Quarter
    "pandas.tseries.offsets.FY5253Quarter") | `''REQ''` | retail (aka 52-53 week)
    quarter |'
  id: totrans-976
  prefs: []
  type: TYPE_TB
- en: '| [`YearEnd`](../reference/api/pandas.tseries.offsets.YearEnd.html#pandas.tseries.offsets.YearEnd
    "pandas.tseries.offsets.YearEnd") | `''YE''` | calendar year end |'
  id: totrans-977
  prefs: []
  type: TYPE_TB
- en: '| [`YearBegin`](../reference/api/pandas.tseries.offsets.YearBegin.html#pandas.tseries.offsets.YearBegin
    "pandas.tseries.offsets.YearBegin") | `''YS''` or `''BYS''` | calendar year begin
    |'
  id: totrans-978
  prefs: []
  type: TYPE_TB
- en: '| [`BYearEnd`](../reference/api/pandas.tseries.offsets.BYearEnd.html#pandas.tseries.offsets.BYearEnd
    "pandas.tseries.offsets.BYearEnd") | `''BYE''` | business year end |'
  id: totrans-979
  prefs: []
  type: TYPE_TB
- en: '| [`BYearBegin`](../reference/api/pandas.tseries.offsets.BYearBegin.html#pandas.tseries.offsets.BYearBegin
    "pandas.tseries.offsets.BYearBegin") | `''BYS''` | business year begin |'
  id: totrans-980
  prefs: []
  type: TYPE_TB
- en: '| [`FY5253`](../reference/api/pandas.tseries.offsets.FY5253.html#pandas.tseries.offsets.FY5253
    "pandas.tseries.offsets.FY5253") | `''RE''` | retail (aka 52-53 week) year |'
  id: totrans-981
  prefs: []
  type: TYPE_TB
- en: '| [`Easter`](../reference/api/pandas.tseries.offsets.Easter.html#pandas.tseries.offsets.Easter
    "pandas.tseries.offsets.Easter") | None | Easter holiday |'
  id: totrans-982
  prefs: []
  type: TYPE_TB
- en: '| [`BusinessHour`](../reference/api/pandas.tseries.offsets.BusinessHour.html#pandas.tseries.offsets.BusinessHour
    "pandas.tseries.offsets.BusinessHour") | `''bh''` | business hour |'
  id: totrans-983
  prefs: []
  type: TYPE_TB
- en: '| [`CustomBusinessHour`](../reference/api/pandas.tseries.offsets.CustomBusinessHour.html#pandas.tseries.offsets.CustomBusinessHour
    "pandas.tseries.offsets.CustomBusinessHour") | `''cbh''` | custom business hour
    |'
  id: totrans-984
  prefs: []
  type: TYPE_TB
- en: '| [`Day`](../reference/api/pandas.tseries.offsets.Day.html#pandas.tseries.offsets.Day
    "pandas.tseries.offsets.Day") | `''D''` | one absolute day |'
  id: totrans-985
  prefs: []
  type: TYPE_TB
- en: '| [`Hour`](../reference/api/pandas.tseries.offsets.Hour.html#pandas.tseries.offsets.Hour
    "pandas.tseries.offsets.Hour") | `''h''` | one hour |'
  id: totrans-986
  prefs: []
  type: TYPE_TB
- en: '| [`Minute`](../reference/api/pandas.tseries.offsets.Minute.html#pandas.tseries.offsets.Minute
    "pandas.tseries.offsets.Minute") | `''min''` | one minute |'
  id: totrans-987
  prefs: []
  type: TYPE_TB
- en: '| [`Second`](../reference/api/pandas.tseries.offsets.Second.html#pandas.tseries.offsets.Second
    "pandas.tseries.offsets.Second") | `''s''` | one second |'
  id: totrans-988
  prefs: []
  type: TYPE_TB
- en: '| [`Milli`](../reference/api/pandas.tseries.offsets.Milli.html#pandas.tseries.offsets.Milli
    "pandas.tseries.offsets.Milli") | `''ms''` | one millisecond |'
  id: totrans-989
  prefs: []
  type: TYPE_TB
- en: '| [`Micro`](../reference/api/pandas.tseries.offsets.Micro.html#pandas.tseries.offsets.Micro
    "pandas.tseries.offsets.Micro") | `''us''` | one microsecond |'
  id: totrans-990
  prefs: []
  type: TYPE_TB
- en: '| [`Nano`](../reference/api/pandas.tseries.offsets.Nano.html#pandas.tseries.offsets.Nano
    "pandas.tseries.offsets.Nano") | `''ns''` | one nanosecond |'
  id: totrans-991
  prefs: []
  type: TYPE_TB
- en: '`DateOffsets` additionally have `rollforward()` and `rollback()` methods for
    moving a date forward or backward respectively to a valid offset date relative
    to the offset. For example, business offsets will roll dates that land on the
    weekends (Saturday and Sunday) forward to Monday since business offsets operate
    on the weekdays.'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: These operations preserve time (hour, minute, etc) information by default. To
    reset time to midnight, use `normalize()` before or after applying the operation
    (depending on whether you want the time information included in the operation).
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Parametric offsets
  id: totrans-996
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the offsets can be “parameterized” when created to result in different
    behaviors. For example, the `Week` offset for generating weekly data accepts a
    `weekday` parameter which results in the generated dates always lying on a particular
    day of the week:'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: The `normalize` option will be effective for addition and subtraction.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'Another example is parameterizing `YearEnd` with the specific ending month:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '### Using offsets with `Series` / `DatetimeIndex`'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: Offsets can be used with either a `Series` or `DatetimeIndex` to apply the offset
    to each element.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: If the offset class maps directly to a `Timedelta` (`Day`, `Hour`, `Minute`,
    `Second`, `Micro`, `Milli`, `Nano`) it can be used exactly like a `Timedelta`
    - see the [Timedelta section](timedeltas.html#timedeltas-operations) for more
    examples.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Note that some offsets (such as `BQuarterEnd`) do not have a vectorized implementation.
    They can still be used but may calculate significantly slower and will show a
    `PerformanceWarning`
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]  ### Custom business days'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
- en: The `CDay` or `CustomBusinessDay` class provides a parametric `BusinessDay`
    class which can be used to create customized business day calendars which account
    for local holidays and local weekend conventions.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: As an interesting example, let’s look at Egypt where a Friday-Saturday weekend
    is observed.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Let’s map to the weekday names:'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Holiday calendars can be used to provide the list of holidays. See the [holiday
    calendar](#timeseries-holiday) section for more information.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Monthly offsets that respect a certain holiday calendar can be defined in the
    usual way.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Note
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: 'The frequency string ‘C’ is used to indicate that a CustomBusinessDay DateOffset
    is used, it is important to note that since CustomBusinessDay is a parameterised
    type, instances of CustomBusinessDay may differ and this is not detectable from
    the ‘C’ frequency string. The user therefore needs to ensure that the ‘C’ frequency
    string is used consistently within the user’s application.  ### Business hour'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: The `BusinessHour` class provides a business hour representation on `BusinessDay`,
    allowing to use specific start and end times.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: By default, `BusinessHour` uses 9:00 - 17:00 as business hours. Adding `BusinessHour`
    will increment `Timestamp` by hourly frequency. If target `Timestamp` is out of
    business hours, move to the next business hour then increment it. If the result
    exceeds the business hours end, the remaining hours are added to the next business
    day.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: You can also specify `start` and `end` time by keywords. The argument must be
    a `str` with an `hour:minute` representation or a `datetime.time` instance. Specifying
    seconds, microseconds and nanoseconds as business hour results in `ValueError`.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Passing `start` time later than `end` represents midnight business hour. In
    this case, business hour exceeds midnight and overlap to the next day. Valid business
    hours are distinguished by whether it started from valid `BusinessDay`.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Applying `BusinessHour.rollforward` and `rollback` to out of business hours
    results in the next business hour start or previous day’s end. Different from
    other offsets, `BusinessHour.rollforward` may output different results from `apply`
    by definition.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: This is because one day’s business hour end is equal to next day’s business
    hour start. For example, under the default business hours (9:00 - 17:00), there
    is no gap (0 minutes) between `2014-08-01 17:00` and `2014-08-04 09:00`.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '`BusinessHour` regards Saturday and Sunday as holidays. To use arbitrary holidays,
    you can use `CustomBusinessHour` offset, as explained in the following subsection.  ###
    Custom business hour'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: The `CustomBusinessHour` is a mixture of `BusinessHour` and `CustomBusinessDay`
    which allows you to specify arbitrary holidays. `CustomBusinessHour` works as
    the same as `BusinessHour` except that it skips specified custom holidays.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: You can use keyword arguments supported by either `BusinessHour` and `CustomBusinessDay`.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]  ### Offset aliases'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *offset aliases*.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1037
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1038
  prefs: []
  type: TYPE_TB
- en: '| B | business day frequency |'
  id: totrans-1039
  prefs: []
  type: TYPE_TB
- en: '| C | custom business day frequency |'
  id: totrans-1040
  prefs: []
  type: TYPE_TB
- en: '| D | calendar day frequency |'
  id: totrans-1041
  prefs: []
  type: TYPE_TB
- en: '| W | weekly frequency |'
  id: totrans-1042
  prefs: []
  type: TYPE_TB
- en: '| ME | month end frequency |'
  id: totrans-1043
  prefs: []
  type: TYPE_TB
- en: '| SME | semi-month end frequency (15th and end of month) |'
  id: totrans-1044
  prefs: []
  type: TYPE_TB
- en: '| BME | business month end frequency |'
  id: totrans-1045
  prefs: []
  type: TYPE_TB
- en: '| CBME | custom business month end frequency |'
  id: totrans-1046
  prefs: []
  type: TYPE_TB
- en: '| MS | month start frequency |'
  id: totrans-1047
  prefs: []
  type: TYPE_TB
- en: '| SMS | semi-month start frequency (1st and 15th) |'
  id: totrans-1048
  prefs: []
  type: TYPE_TB
- en: '| BMS | business month start frequency |'
  id: totrans-1049
  prefs: []
  type: TYPE_TB
- en: '| CBMS | custom business month start frequency |'
  id: totrans-1050
  prefs: []
  type: TYPE_TB
- en: '| QE | quarter end frequency |'
  id: totrans-1051
  prefs: []
  type: TYPE_TB
- en: '| BQE | business quarter end frequency |'
  id: totrans-1052
  prefs: []
  type: TYPE_TB
- en: '| QS | quarter start frequency |'
  id: totrans-1053
  prefs: []
  type: TYPE_TB
- en: '| BQS | business quarter start frequency |'
  id: totrans-1054
  prefs: []
  type: TYPE_TB
- en: '| YE | year end frequency |'
  id: totrans-1055
  prefs: []
  type: TYPE_TB
- en: '| BYE | business year end frequency |'
  id: totrans-1056
  prefs: []
  type: TYPE_TB
- en: '| YS | year start frequency |'
  id: totrans-1057
  prefs: []
  type: TYPE_TB
- en: '| BYS | business year start frequency |'
  id: totrans-1058
  prefs: []
  type: TYPE_TB
- en: '| h | hourly frequency |'
  id: totrans-1059
  prefs: []
  type: TYPE_TB
- en: '| bh | business hour frequency |'
  id: totrans-1060
  prefs: []
  type: TYPE_TB
- en: '| cbh | custom business hour frequency |'
  id: totrans-1061
  prefs: []
  type: TYPE_TB
- en: '| min | minutely frequency |'
  id: totrans-1062
  prefs: []
  type: TYPE_TB
- en: '| s | secondly frequency |'
  id: totrans-1063
  prefs: []
  type: TYPE_TB
- en: '| ms | milliseconds |'
  id: totrans-1064
  prefs: []
  type: TYPE_TB
- en: '| us | microseconds |'
  id: totrans-1065
  prefs: []
  type: TYPE_TB
- en: '| ns | nanoseconds |'
  id: totrans-1066
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 2.2.0: Aliases `H`, `BH`, `CBH`, `T`, `S`, `L`, `U`,
    and `N` are deprecated in favour of the aliases `h`, `bh`, `cbh`, `min`, `s`,
    `ms`, `us`, and `ns`.'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: When using the offset aliases above, it should be noted that functions such
    as [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), will only return timestamps that are in the interval defined
    by `start_date` and `end_date`. If the `start_date` does not correspond to the
    frequency, the returned timestamps will start at the next valid timestamp, same
    for `end_date`, the returned timestamps will stop at the previous valid timestamp.
  id: totrans-1069
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, for the offset `MS`, if the `start_date` is not the first of the
    month, the returned timestamps will start with the first day of the next month.
    If `end_date` is not the first day of a month, the last returned timestamp will
    be the first day of the corresponding month.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  id: totrans-1071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: 'We can see in the above example [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") will only return the valid timestamps between the `start_date`
    and `end_date`. If these are not valid timestamps for the given frequency it will
    roll to the next value for `start_date` (respectively previous for the `end_date`)  ###
    Period aliases'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *period aliases*.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1074
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1075
  prefs: []
  type: TYPE_TB
- en: '| B | business day frequency |'
  id: totrans-1076
  prefs: []
  type: TYPE_TB
- en: '| D | calendar day frequency |'
  id: totrans-1077
  prefs: []
  type: TYPE_TB
- en: '| W | weekly frequency |'
  id: totrans-1078
  prefs: []
  type: TYPE_TB
- en: '| M | monthly frequency |'
  id: totrans-1079
  prefs: []
  type: TYPE_TB
- en: '| Q | quarterly frequency |'
  id: totrans-1080
  prefs: []
  type: TYPE_TB
- en: '| Y | yearly frequency |'
  id: totrans-1081
  prefs: []
  type: TYPE_TB
- en: '| h | hourly frequency |'
  id: totrans-1082
  prefs: []
  type: TYPE_TB
- en: '| min | minutely frequency |'
  id: totrans-1083
  prefs: []
  type: TYPE_TB
- en: '| s | secondly frequency |'
  id: totrans-1084
  prefs: []
  type: TYPE_TB
- en: '| ms | milliseconds |'
  id: totrans-1085
  prefs: []
  type: TYPE_TB
- en: '| us | microseconds |'
  id: totrans-1086
  prefs: []
  type: TYPE_TB
- en: '| ns | nanoseconds |'
  id: totrans-1087
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 2.2.0: Aliases `A`, `H`, `T`, `S`, `L`, `U`, and `N`
    are deprecated in favour of the aliases `Y`, `h`, `min`, `s`, `ms`, `us`, and
    `ns`.'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: Combining aliases
  id: totrans-1089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have seen previously, the alias and the offset instance are fungible
    in most functions:'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'You can combine together day and intraday offsets:'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Anchored offsets
  id: totrans-1094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For some frequencies you can specify an anchoring suffix:'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1096
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1097
  prefs: []
  type: TYPE_TB
- en: '| W-SUN | weekly frequency (Sundays). Same as ‘W’ |'
  id: totrans-1098
  prefs: []
  type: TYPE_TB
- en: '| W-MON | weekly frequency (Mondays) |'
  id: totrans-1099
  prefs: []
  type: TYPE_TB
- en: '| W-TUE | weekly frequency (Tuesdays) |'
  id: totrans-1100
  prefs: []
  type: TYPE_TB
- en: '| W-WED | weekly frequency (Wednesdays) |'
  id: totrans-1101
  prefs: []
  type: TYPE_TB
- en: '| W-THU | weekly frequency (Thursdays) |'
  id: totrans-1102
  prefs: []
  type: TYPE_TB
- en: '| W-FRI | weekly frequency (Fridays) |'
  id: totrans-1103
  prefs: []
  type: TYPE_TB
- en: '| W-SAT | weekly frequency (Saturdays) |'
  id: totrans-1104
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-DEC | quarterly frequency, year ends in December. Same as ‘QE’
    |'
  id: totrans-1105
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JAN | quarterly frequency, year ends in January |'
  id: totrans-1106
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-FEB | quarterly frequency, year ends in February |'
  id: totrans-1107
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-MAR | quarterly frequency, year ends in March |'
  id: totrans-1108
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-APR | quarterly frequency, year ends in April |'
  id: totrans-1109
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-MAY | quarterly frequency, year ends in May |'
  id: totrans-1110
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JUN | quarterly frequency, year ends in June |'
  id: totrans-1111
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JUL | quarterly frequency, year ends in July |'
  id: totrans-1112
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-AUG | quarterly frequency, year ends in August |'
  id: totrans-1113
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-SEP | quarterly frequency, year ends in September |'
  id: totrans-1114
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-OCT | quarterly frequency, year ends in October |'
  id: totrans-1115
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-NOV | quarterly frequency, year ends in November |'
  id: totrans-1116
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-DEC | annual frequency, anchored end of December. Same as ‘YE’
    |'
  id: totrans-1117
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JAN | annual frequency, anchored end of January |'
  id: totrans-1118
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-FEB | annual frequency, anchored end of February |'
  id: totrans-1119
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-MAR | annual frequency, anchored end of March |'
  id: totrans-1120
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-APR | annual frequency, anchored end of April |'
  id: totrans-1121
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-MAY | annual frequency, anchored end of May |'
  id: totrans-1122
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JUN | annual frequency, anchored end of June |'
  id: totrans-1123
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JUL | annual frequency, anchored end of July |'
  id: totrans-1124
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-AUG | annual frequency, anchored end of August |'
  id: totrans-1125
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-SEP | annual frequency, anchored end of September |'
  id: totrans-1126
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-OCT | annual frequency, anchored end of October |'
  id: totrans-1127
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-NOV | annual frequency, anchored end of November |'
  id: totrans-1128
  prefs: []
  type: TYPE_TB
- en: These can be used as arguments to `date_range`, `bdate_range`, constructors
    for `DatetimeIndex`, as well as various other timeseries-related functions in
    pandas.
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: Anchored offset semantics
  id: totrans-1130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those offsets that are anchored to the start or end of specific frequency
    (`MonthEnd`, `MonthBegin`, `WeekEnd`, etc), the following rules apply to rolling
    forward and backwards.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
- en: When `n` is not 0, if the given date is not on an anchor point, it snapped to
    the next(previous) anchor point, and moved `|n|-1` additional steps forwards or
    backwards.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: If the given date *is* on an anchor point, it is moved `|n|` points forwards
    or backwards.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  id: totrans-1135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: For the case when `n=0`, the date is not moved if on an anchor point, otherwise
    it is rolled forward to the next anchor point.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '### Holidays / holiday calendars'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
- en: Holidays and calendars provide a simple way to define holiday rules to be used
    with `CustomBusinessDay` or in other analysis that requires a predefined set of
    holidays. The `AbstractHolidayCalendar` class provides all the necessary methods
    to return a list of holidays and only `rules` need to be defined in a specific
    holiday calendar class. Furthermore, the `start_date` and `end_date` class attributes
    determine over what date range holidays are generated. These should be overwritten
    on the `AbstractHolidayCalendar` class to have the range apply to all calendar
    subclasses. `USFederalHolidayCalendar` is the only calendar that exists and primarily
    serves as an example for developing other calendars.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: 'For holidays that occur on fixed dates (e.g., US Memorial Day or July 4th)
    an observance rule determines when that holiday is observed if it falls on a weekend
    or some other non-observed day. Defined observance rules are:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Description |'
  id: totrans-1141
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1142
  prefs: []
  type: TYPE_TB
- en: '| nearest_workday | move Saturday to Friday and Sunday to Monday |'
  id: totrans-1143
  prefs: []
  type: TYPE_TB
- en: '| sunday_to_monday | move Sunday to following Monday |'
  id: totrans-1144
  prefs: []
  type: TYPE_TB
- en: '| next_monday_or_tuesday | move Saturday to Monday and Sunday/Monday to Tuesday
    |'
  id: totrans-1145
  prefs: []
  type: TYPE_TB
- en: '| previous_friday | move Saturday and Sunday to previous Friday” |'
  id: totrans-1146
  prefs: []
  type: TYPE_TB
- en: '| next_monday | move Saturday and Sunday to following Monday |'
  id: totrans-1147
  prefs: []
  type: TYPE_TB
- en: 'An example of how holidays and holiday calendars are defined:'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  id: totrans-1149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'hint:'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: '**weekday=MO(2)** is same as **2 * Week(weekday=2)**'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: Using this calendar, creating an index or doing offset arithmetic skips weekends
    and holidays (i.e., Memorial Day/July 4th). For example, the below defines a custom
    business day offset using the `ExampleCalendar`. Like any other offset, it can
    be used to create a `DatetimeIndex` or added to `datetime` or `Timestamp` objects.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  id: totrans-1153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Ranges are defined by the `start_date` and `end_date` class attributes of `AbstractHolidayCalendar`.
    The defaults are shown below.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: These dates can be overwritten by setting the attributes as datetime/Timestamp/string.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  id: totrans-1157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Every calendar class is accessible by name using the `get_calendar` function
    which returns a holiday class instance. Any imported calendar class will automatically
    be available by this function. Also, `HolidayCalendarFactory` provides an easy
    interface to create calendars that are combinations of calendars or calendars
    with additional rules.
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  id: totrans-1159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Parametric offsets
  id: totrans-1160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the offsets can be “parameterized” when created to result in different
    behaviors. For example, the `Week` offset for generating weekly data accepts a
    `weekday` parameter which results in the generated dates always lying on a particular
    day of the week:'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: The `normalize` option will be effective for addition and subtraction.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  id: totrans-1164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'Another example is parameterizing `YearEnd` with the specific ending month:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  id: totrans-1166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '### Using offsets with `Series` / `DatetimeIndex`'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: Offsets can be used with either a `Series` or `DatetimeIndex` to apply the offset
    to each element.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: If the offset class maps directly to a `Timedelta` (`Day`, `Hour`, `Minute`,
    `Second`, `Micro`, `Milli`, `Nano`) it can be used exactly like a `Timedelta`
    - see the [Timedelta section](timedeltas.html#timedeltas-operations) for more
    examples.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Note that some offsets (such as `BQuarterEnd`) do not have a vectorized implementation.
    They can still be used but may calculate significantly slower and will show a
    `PerformanceWarning`
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '### Custom business days'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: The `CDay` or `CustomBusinessDay` class provides a parametric `BusinessDay`
    class which can be used to create customized business day calendars which account
    for local holidays and local weekend conventions.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: As an interesting example, let’s look at Egypt where a Friday-Saturday weekend
    is observed.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  id: totrans-1177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'Let’s map to the weekday names:'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  id: totrans-1179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Holiday calendars can be used to provide the list of holidays. See the [holiday
    calendar](#timeseries-holiday) section for more information.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Monthly offsets that respect a certain holiday calendar can be defined in the
    usual way.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  id: totrans-1183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Note
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: The frequency string ‘C’ is used to indicate that a CustomBusinessDay DateOffset
    is used, it is important to note that since CustomBusinessDay is a parameterised
    type, instances of CustomBusinessDay may differ and this is not detectable from
    the ‘C’ frequency string. The user therefore needs to ensure that the ‘C’ frequency
    string is used consistently within the user’s application.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: '### Business hour'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: The `BusinessHour` class provides a business hour representation on `BusinessDay`,
    allowing to use specific start and end times.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: By default, `BusinessHour` uses 9:00 - 17:00 as business hours. Adding `BusinessHour`
    will increment `Timestamp` by hourly frequency. If target `Timestamp` is out of
    business hours, move to the next business hour then increment it. If the result
    exceeds the business hours end, the remaining hours are added to the next business
    day.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: You can also specify `start` and `end` time by keywords. The argument must be
    a `str` with an `hour:minute` representation or a `datetime.time` instance. Specifying
    seconds, microseconds and nanoseconds as business hour results in `ValueError`.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  id: totrans-1191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Passing `start` time later than `end` represents midnight business hour. In
    this case, business hour exceeds midnight and overlap to the next day. Valid business
    hours are distinguished by whether it started from valid `BusinessDay`.
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  id: totrans-1193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Applying `BusinessHour.rollforward` and `rollback` to out of business hours
    results in the next business hour start or previous day’s end. Different from
    other offsets, `BusinessHour.rollforward` may output different results from `apply`
    by definition.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: This is because one day’s business hour end is equal to next day’s business
    hour start. For example, under the default business hours (9:00 - 17:00), there
    is no gap (0 minutes) between `2014-08-01 17:00` and `2014-08-04 09:00`.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  id: totrans-1196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '`BusinessHour` regards Saturday and Sunday as holidays. To use arbitrary holidays,
    you can use `CustomBusinessHour` offset, as explained in the following subsection.'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: '### Custom business hour'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: The `CustomBusinessHour` is a mixture of `BusinessHour` and `CustomBusinessDay`
    which allows you to specify arbitrary holidays. `CustomBusinessHour` works as
    the same as `BusinessHour` except that it skips specified custom holidays.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: You can use keyword arguments supported by either `BusinessHour` and `CustomBusinessDay`.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '### Offset aliases'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *offset aliases*.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1205
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1206
  prefs: []
  type: TYPE_TB
- en: '| B | business day frequency |'
  id: totrans-1207
  prefs: []
  type: TYPE_TB
- en: '| C | custom business day frequency |'
  id: totrans-1208
  prefs: []
  type: TYPE_TB
- en: '| D | calendar day frequency |'
  id: totrans-1209
  prefs: []
  type: TYPE_TB
- en: '| W | weekly frequency |'
  id: totrans-1210
  prefs: []
  type: TYPE_TB
- en: '| ME | month end frequency |'
  id: totrans-1211
  prefs: []
  type: TYPE_TB
- en: '| SME | semi-month end frequency (15th and end of month) |'
  id: totrans-1212
  prefs: []
  type: TYPE_TB
- en: '| BME | business month end frequency |'
  id: totrans-1213
  prefs: []
  type: TYPE_TB
- en: '| CBME | custom business month end frequency |'
  id: totrans-1214
  prefs: []
  type: TYPE_TB
- en: '| MS | month start frequency |'
  id: totrans-1215
  prefs: []
  type: TYPE_TB
- en: '| SMS | semi-month start frequency (1st and 15th) |'
  id: totrans-1216
  prefs: []
  type: TYPE_TB
- en: '| BMS | business month start frequency |'
  id: totrans-1217
  prefs: []
  type: TYPE_TB
- en: '| CBMS | custom business month start frequency |'
  id: totrans-1218
  prefs: []
  type: TYPE_TB
- en: '| QE | quarter end frequency |'
  id: totrans-1219
  prefs: []
  type: TYPE_TB
- en: '| BQE | business quarter end frequency |'
  id: totrans-1220
  prefs: []
  type: TYPE_TB
- en: '| QS | quarter start frequency |'
  id: totrans-1221
  prefs: []
  type: TYPE_TB
- en: '| BQS | business quarter start frequency |'
  id: totrans-1222
  prefs: []
  type: TYPE_TB
- en: '| YE | year end frequency |'
  id: totrans-1223
  prefs: []
  type: TYPE_TB
- en: '| BYE | business year end frequency |'
  id: totrans-1224
  prefs: []
  type: TYPE_TB
- en: '| YS | year start frequency |'
  id: totrans-1225
  prefs: []
  type: TYPE_TB
- en: '| BYS | business year start frequency |'
  id: totrans-1226
  prefs: []
  type: TYPE_TB
- en: '| h | hourly frequency |'
  id: totrans-1227
  prefs: []
  type: TYPE_TB
- en: '| bh | business hour frequency |'
  id: totrans-1228
  prefs: []
  type: TYPE_TB
- en: '| cbh | custom business hour frequency |'
  id: totrans-1229
  prefs: []
  type: TYPE_TB
- en: '| min | minutely frequency |'
  id: totrans-1230
  prefs: []
  type: TYPE_TB
- en: '| s | secondly frequency |'
  id: totrans-1231
  prefs: []
  type: TYPE_TB
- en: '| ms | milliseconds |'
  id: totrans-1232
  prefs: []
  type: TYPE_TB
- en: '| us | microseconds |'
  id: totrans-1233
  prefs: []
  type: TYPE_TB
- en: '| ns | nanoseconds |'
  id: totrans-1234
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 2.2.0: Aliases `H`, `BH`, `CBH`, `T`, `S`, `L`, `U`,
    and `N` are deprecated in favour of the aliases `h`, `bh`, `cbh`, `min`, `s`,
    `ms`, `us`, and `ns`.'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
- en: When using the offset aliases above, it should be noted that functions such
    as [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range"), will only return timestamps that are in the interval defined
    by `start_date` and `end_date`. If the `start_date` does not correspond to the
    frequency, the returned timestamps will start at the next valid timestamp, same
    for `end_date`, the returned timestamps will stop at the previous valid timestamp.
  id: totrans-1237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, for the offset `MS`, if the `start_date` is not the first of the
    month, the returned timestamps will start with the first day of the next month.
    If `end_date` is not the first day of a month, the last returned timestamp will
    be the first day of the corresponding month.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  id: totrans-1239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: We can see in the above example [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and [`bdate_range()`](../reference/api/pandas.bdate_range.html#pandas.bdate_range
    "pandas.bdate_range") will only return the valid timestamps between the `start_date`
    and `end_date`. If these are not valid timestamps for the given frequency it will
    roll to the next value for `start_date` (respectively previous for the `end_date`)
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: '### Period aliases'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: A number of string aliases are given to useful common time series frequencies.
    We will refer to these aliases as *period aliases*.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1243
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1244
  prefs: []
  type: TYPE_TB
- en: '| B | business day frequency |'
  id: totrans-1245
  prefs: []
  type: TYPE_TB
- en: '| D | calendar day frequency |'
  id: totrans-1246
  prefs: []
  type: TYPE_TB
- en: '| W | weekly frequency |'
  id: totrans-1247
  prefs: []
  type: TYPE_TB
- en: '| M | monthly frequency |'
  id: totrans-1248
  prefs: []
  type: TYPE_TB
- en: '| Q | quarterly frequency |'
  id: totrans-1249
  prefs: []
  type: TYPE_TB
- en: '| Y | yearly frequency |'
  id: totrans-1250
  prefs: []
  type: TYPE_TB
- en: '| h | hourly frequency |'
  id: totrans-1251
  prefs: []
  type: TYPE_TB
- en: '| min | minutely frequency |'
  id: totrans-1252
  prefs: []
  type: TYPE_TB
- en: '| s | secondly frequency |'
  id: totrans-1253
  prefs: []
  type: TYPE_TB
- en: '| ms | milliseconds |'
  id: totrans-1254
  prefs: []
  type: TYPE_TB
- en: '| us | microseconds |'
  id: totrans-1255
  prefs: []
  type: TYPE_TB
- en: '| ns | nanoseconds |'
  id: totrans-1256
  prefs: []
  type: TYPE_TB
- en: 'Deprecated since version 2.2.0: Aliases `A`, `H`, `T`, `S`, `L`, `U`, and `N`
    are deprecated in favour of the aliases `Y`, `h`, `min`, `s`, `ms`, `us`, and
    `ns`.'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
- en: Combining aliases
  id: totrans-1258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we have seen previously, the alias and the offset instance are fungible
    in most functions:'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  id: totrans-1260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: 'You can combine together day and intraday offsets:'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  id: totrans-1262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: Anchored offsets
  id: totrans-1263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For some frequencies you can specify an anchoring suffix:'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
- en: '| Alias | Description |'
  id: totrans-1265
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1266
  prefs: []
  type: TYPE_TB
- en: '| W-SUN | weekly frequency (Sundays). Same as ‘W’ |'
  id: totrans-1267
  prefs: []
  type: TYPE_TB
- en: '| W-MON | weekly frequency (Mondays) |'
  id: totrans-1268
  prefs: []
  type: TYPE_TB
- en: '| W-TUE | weekly frequency (Tuesdays) |'
  id: totrans-1269
  prefs: []
  type: TYPE_TB
- en: '| W-WED | weekly frequency (Wednesdays) |'
  id: totrans-1270
  prefs: []
  type: TYPE_TB
- en: '| W-THU | weekly frequency (Thursdays) |'
  id: totrans-1271
  prefs: []
  type: TYPE_TB
- en: '| W-FRI | weekly frequency (Fridays) |'
  id: totrans-1272
  prefs: []
  type: TYPE_TB
- en: '| W-SAT | weekly frequency (Saturdays) |'
  id: totrans-1273
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-DEC | quarterly frequency, year ends in December. Same as ‘QE’
    |'
  id: totrans-1274
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JAN | quarterly frequency, year ends in January |'
  id: totrans-1275
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-FEB | quarterly frequency, year ends in February |'
  id: totrans-1276
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-MAR | quarterly frequency, year ends in March |'
  id: totrans-1277
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-APR | quarterly frequency, year ends in April |'
  id: totrans-1278
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-MAY | quarterly frequency, year ends in May |'
  id: totrans-1279
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JUN | quarterly frequency, year ends in June |'
  id: totrans-1280
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-JUL | quarterly frequency, year ends in July |'
  id: totrans-1281
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-AUG | quarterly frequency, year ends in August |'
  id: totrans-1282
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-SEP | quarterly frequency, year ends in September |'
  id: totrans-1283
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-OCT | quarterly frequency, year ends in October |'
  id: totrans-1284
  prefs: []
  type: TYPE_TB
- en: '| (B)Q(E)(S)-NOV | quarterly frequency, year ends in November |'
  id: totrans-1285
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-DEC | annual frequency, anchored end of December. Same as ‘YE’
    |'
  id: totrans-1286
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JAN | annual frequency, anchored end of January |'
  id: totrans-1287
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-FEB | annual frequency, anchored end of February |'
  id: totrans-1288
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-MAR | annual frequency, anchored end of March |'
  id: totrans-1289
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-APR | annual frequency, anchored end of April |'
  id: totrans-1290
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-MAY | annual frequency, anchored end of May |'
  id: totrans-1291
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JUN | annual frequency, anchored end of June |'
  id: totrans-1292
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-JUL | annual frequency, anchored end of July |'
  id: totrans-1293
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-AUG | annual frequency, anchored end of August |'
  id: totrans-1294
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-SEP | annual frequency, anchored end of September |'
  id: totrans-1295
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-OCT | annual frequency, anchored end of October |'
  id: totrans-1296
  prefs: []
  type: TYPE_TB
- en: '| (B)Y(E)(S)-NOV | annual frequency, anchored end of November |'
  id: totrans-1297
  prefs: []
  type: TYPE_TB
- en: These can be used as arguments to `date_range`, `bdate_range`, constructors
    for `DatetimeIndex`, as well as various other timeseries-related functions in
    pandas.
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: Anchored offset semantics
  id: totrans-1299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those offsets that are anchored to the start or end of specific frequency
    (`MonthEnd`, `MonthBegin`, `WeekEnd`, etc), the following rules apply to rolling
    forward and backwards.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: When `n` is not 0, if the given date is not on an anchor point, it snapped to
    the next(previous) anchor point, and moved `|n|-1` additional steps forwards or
    backwards.
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  id: totrans-1302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: If the given date *is* on an anchor point, it is moved `|n|` points forwards
    or backwards.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  id: totrans-1304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: For the case when `n=0`, the date is not moved if on an anchor point, otherwise
    it is rolled forward to the next anchor point.
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  id: totrans-1306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '### Holidays / holiday calendars'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: Holidays and calendars provide a simple way to define holiday rules to be used
    with `CustomBusinessDay` or in other analysis that requires a predefined set of
    holidays. The `AbstractHolidayCalendar` class provides all the necessary methods
    to return a list of holidays and only `rules` need to be defined in a specific
    holiday calendar class. Furthermore, the `start_date` and `end_date` class attributes
    determine over what date range holidays are generated. These should be overwritten
    on the `AbstractHolidayCalendar` class to have the range apply to all calendar
    subclasses. `USFederalHolidayCalendar` is the only calendar that exists and primarily
    serves as an example for developing other calendars.
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: 'For holidays that occur on fixed dates (e.g., US Memorial Day or July 4th)
    an observance rule determines when that holiday is observed if it falls on a weekend
    or some other non-observed day. Defined observance rules are:'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Description |'
  id: totrans-1310
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1311
  prefs: []
  type: TYPE_TB
- en: '| nearest_workday | move Saturday to Friday and Sunday to Monday |'
  id: totrans-1312
  prefs: []
  type: TYPE_TB
- en: '| sunday_to_monday | move Sunday to following Monday |'
  id: totrans-1313
  prefs: []
  type: TYPE_TB
- en: '| next_monday_or_tuesday | move Saturday to Monday and Sunday/Monday to Tuesday
    |'
  id: totrans-1314
  prefs: []
  type: TYPE_TB
- en: '| previous_friday | move Saturday and Sunday to previous Friday” |'
  id: totrans-1315
  prefs: []
  type: TYPE_TB
- en: '| next_monday | move Saturday and Sunday to following Monday |'
  id: totrans-1316
  prefs: []
  type: TYPE_TB
- en: 'An example of how holidays and holiday calendars are defined:'
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: 'hint:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
- en: '**weekday=MO(2)** is same as **2 * Week(weekday=2)**'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: Using this calendar, creating an index or doing offset arithmetic skips weekends
    and holidays (i.e., Memorial Day/July 4th). For example, the below defines a custom
    business day offset using the `ExampleCalendar`. Like any other offset, it can
    be used to create a `DatetimeIndex` or added to `datetime` or `Timestamp` objects.
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  id: totrans-1322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Ranges are defined by the `start_date` and `end_date` class attributes of `AbstractHolidayCalendar`.
    The defaults are shown below.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: These dates can be overwritten by setting the attributes as datetime/Timestamp/string.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  id: totrans-1326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Every calendar class is accessible by name using the `get_calendar` function
    which returns a holiday class instance. Any imported calendar class will automatically
    be available by this function. Also, `HolidayCalendarFactory` provides an easy
    interface to create calendars that are combinations of calendars or calendars
    with additional rules.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  id: totrans-1328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '## Time Series-related instance methods'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: Shifting / lagging
  id: totrans-1330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One may want to *shift* or *lag* the values in a time series back and forward
    in time. The method for this is [`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift"), which is available on all of the pandas objects.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: The `shift` method accepts an `freq` argument which can accept a `DateOffset`
    class or other `timedelta`-like object or also an [offset alias](#timeseries-offset-aliases).
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: 'When `freq` is specified, `shift` method changes all the dates in the index
    rather than changing the alignment of the data and the index:'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  id: totrans-1335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Note that with when `freq` is specified, the leading entry is no longer NaN
    because the data is not being realigned.
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
- en: Frequency conversion
  id: totrans-1337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The primary function for changing frequencies is the [`asfreq()`](../reference/api/pandas.Series.asfreq.html#pandas.Series.asfreq
    "pandas.Series.asfreq") method. For a `DatetimeIndex`, this is basically just
    a thin, but convenient wrapper around [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") which generates a `date_range` and calls `reindex`.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '`asfreq` provides a further convenience so you can specify an interpolation
    method for any gaps that may appear after the frequency conversion.'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  id: totrans-1341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: Filling forward / backward
  id: totrans-1342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Related to `asfreq` and `reindex` is [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna"), which is documented in the [missing data section](missing_data.html#missing-data-fillna).
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: Converting to Python datetimes
  id: totrans-1344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`DatetimeIndex` can be converted to an array of Python native [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects using the `to_pydatetime` method.'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: Shifting / lagging
  id: totrans-1346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One may want to *shift* or *lag* the values in a time series back and forward
    in time. The method for this is [`shift()`](../reference/api/pandas.Series.shift.html#pandas.Series.shift
    "pandas.Series.shift"), which is available on all of the pandas objects.
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  id: totrans-1348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: The `shift` method accepts an `freq` argument which can accept a `DateOffset`
    class or other `timedelta`-like object or also an [offset alias](#timeseries-offset-aliases).
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: 'When `freq` is specified, `shift` method changes all the dates in the index
    rather than changing the alignment of the data and the index:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: Note that with when `freq` is specified, the leading entry is no longer NaN
    because the data is not being realigned.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: Frequency conversion
  id: totrans-1353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The primary function for changing frequencies is the [`asfreq()`](../reference/api/pandas.Series.asfreq.html#pandas.Series.asfreq
    "pandas.Series.asfreq") method. For a `DatetimeIndex`, this is basically just
    a thin, but convenient wrapper around [`reindex()`](../reference/api/pandas.Series.reindex.html#pandas.Series.reindex
    "pandas.Series.reindex") which generates a `date_range` and calls `reindex`.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '`asfreq` provides a further convenience so you can specify an interpolation
    method for any gaps that may appear after the frequency conversion.'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  id: totrans-1357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: Filling forward / backward
  id: totrans-1358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Related to `asfreq` and `reindex` is [`fillna()`](../reference/api/pandas.Series.fillna.html#pandas.Series.fillna
    "pandas.Series.fillna"), which is documented in the [missing data section](missing_data.html#missing-data-fillna).
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: Converting to Python datetimes
  id: totrans-1360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`DatetimeIndex` can be converted to an array of Python native [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects using the `to_pydatetime` method.'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: '## Resampling'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: pandas has a simple, powerful, and efficient functionality for performing resampling
    operations during frequency conversion (e.g., converting secondly data into 5-minutely
    data). This is extremely common in, but not limited to, financial applications.
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: '[`resample()`](../reference/api/pandas.Series.resample.html#pandas.Series.resample
    "pandas.Series.resample") is a time-based groupby, followed by a reduction method
    on each of its groups. See some [cookbook examples](cookbook.html#cookbook-resample)
    for some advanced strategies.'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: The `resample()` method can be used directly from `DataFrameGroupBy` objects,
    see the [groupby docs](groupby.html#groupby-transform-window-resample).
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  id: totrans-1366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE325]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: The `resample` function is very flexible and allows you to specify many different
    parameters to control the frequency conversion and resampling operation.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: 'Any built-in method available via [GroupBy](../reference/groupby.html#api-groupby)
    is available as a method of the returned object, including `sum`, `mean`, `std`,
    `sem`, `max`, `min`, `median`, `first`, `last`, `ohlc`:'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  id: totrans-1370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: 'For downsampling, `closed` can be set to ‘left’ or ‘right’ to specify which
    end of the interval is closed:'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  id: totrans-1372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: Parameters like `label` are used to manipulate the resulting labels. `label`
    specifies whether the result is labeled with the beginning or the end of the interval.
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  id: totrans-1374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Warning
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: The default values for `label` and `closed` is ‘**left**’ for all frequency
    offsets except for ‘ME’, ‘YE’, ‘QE’, ‘BME’, ‘BYE’, ‘BQE’, and ‘W’ which all have
    a default of ‘right’.
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: 'This might unintendedly lead to looking ahead, where the value for a later
    time is pulled back to a previous time as in the following example with the [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") frequency:'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  id: totrans-1378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Notice how the value for Sunday got pulled back to the previous Friday. To get
    the behavior where the value for Sunday is pushed to Monday, use instead
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  id: totrans-1380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: The `axis` parameter can be set to 0 or 1 and allows you to resample the specified
    axis for a `DataFrame`.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: '`kind` can be set to ‘timestamp’ or ‘period’ to convert the resulting index
    to/from timestamp and time span representations. By default `resample` retains
    the input representation.'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: '`convention` can be set to ‘start’ or ‘end’ when resampling period data (detail
    below). It specifies how low frequency periods are converted to higher frequency
    periods.'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: Upsampling
  id: totrans-1384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For upsampling, you can specify a way to upsample and the `limit` parameter
    to interpolate over the gaps that are created:'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  id: totrans-1386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: Sparse resampling
  id: totrans-1387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sparse timeseries are the ones where you have a lot fewer points relative to
    the amount of time you are looking to resample. Naively upsampling a sparse series
    can potentially generate lots of intermediate values. When you don’t want to use
    a method to fill these values, e.g. `fill_method` is `None`, then intermediate
    values will be filled with `NaN`.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: Since `resample` is a time-based groupby, the following is a method to efficiently
    resample only the groups that are not all `NaN`.
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  id: totrans-1390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'If we want to resample to the full range of the series:'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  id: totrans-1392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'We can instead only resample those groups where we have points as follows:'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  id: totrans-1394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '### Aggregation'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: The `resample()` method returns a `pandas.api.typing.Resampler` instance. Similar
    to the [aggregating API](basics.html#basics-aggregate), [groupby API](groupby.html#groupby-aggregate),
    and the [window API](window.html#window-overview), a `Resampler` can be selectively
    resampled.
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: Resampling a `DataFrame`, the default will be to act on all columns with the
    same function.
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  id: totrans-1398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: We can select a specific column or columns using standard getitem.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  id: totrans-1400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'You can pass a list or dict of functions to do aggregation with, outputting
    a `DataFrame`:'
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  id: totrans-1402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'On a resampled `DataFrame`, you can pass a list of functions to apply to each
    column, which produces an aggregated result with a hierarchical index:'
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  id: totrans-1404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a `DataFrame`:'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  id: totrans-1406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on the resampled object:'
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  id: totrans-1408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Furthermore, you can also specify multiple aggregation functions for each column
    separately.
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  id: totrans-1410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: If a `DataFrame` does not have a datetimelike index, but instead you want to
    resample based on datetimelike column in the frame, it can passed to the `on`
    keyword.
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  id: totrans-1412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: Similarly, if you instead want to resample by a datetimelike level of `MultiIndex`,
    its name or location can be passed to the `level` keyword.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]  ### Iterating through groups'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Resampler` object in hand, iterating through the grouped data is
    very natural and functions similarly to [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(in Python v3.12)"):'
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  id: totrans-1416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: 'See [Iterating through groups](groupby.html#groupby-iterating-label) or `Resampler.__iter__`
    for more.  ### Use `origin` or `offset` to adjust the start of the bins'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: The bins of the grouping are adjusted based on the beginning of the day of the
    time series starting point. This works well with frequencies that are multiples
    of a day (like `30D`) or that divide a day evenly (like `90s` or `1min`). This
    can create inconsistencies with some frequencies that do not meet this criteria.
    To change this behavior you can specify a fixed Timestamp with the argument `origin`.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  id: totrans-1420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: 'Here we can see that, when using `origin` with its default value (`''start_day''`),
    the result after `''2000-10-02 00:00:00''` are not identical depending on the
    start of time series:'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  id: totrans-1422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: 'Here we can see that, when setting `origin` to `''epoch''`, the result after
    `''2000-10-02 00:00:00''` are identical depending on the start of time series:'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'If needed you can use a custom timestamp for `origin`:'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  id: totrans-1426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: 'If needed you can just adjust the bins with an `offset` Timedelta that would
    be added to the default `origin`. Those two examples are equivalent for this time
    series:'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  id: totrans-1428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: Note the use of `'start'` for `origin` on the last example. In that case, `origin`
    will be set to the first value of the timeseries.
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: Backward resample
  id: totrans-1430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: Instead of adjusting the beginning of bins, sometimes we need to fix the end
    of the bins to make a backward resample with a given `freq`. The backward resample
    sets `closed` to `'right'` by default since the last value should be considered
    as the edge point for the last bin.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: We can set `origin` to `'end'`. The value for a specific `Timestamp` index stands
    for the resample result from the current `Timestamp` minus `freq` to the current
    `Timestamp` with a right close.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  id: totrans-1434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: Besides, in contrast with the `'start_day'` option, `end_day` is supported.
    This will set the origin as the ceiling midnight of the largest `Timestamp`.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  id: totrans-1436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: The above result uses `2000-10-02 00:29:00` as the last bin’s right edge since
    the following computation.
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: Basics
  id: totrans-1439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE353]'
  id: totrans-1440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: The `resample` function is very flexible and allows you to specify many different
    parameters to control the frequency conversion and resampling operation.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
- en: 'Any built-in method available via [GroupBy](../reference/groupby.html#api-groupby)
    is available as a method of the returned object, including `sum`, `mean`, `std`,
    `sem`, `max`, `min`, `median`, `first`, `last`, `ohlc`:'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  id: totrans-1443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: 'For downsampling, `closed` can be set to ‘left’ or ‘right’ to specify which
    end of the interval is closed:'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  id: totrans-1445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: Parameters like `label` are used to manipulate the resulting labels. `label`
    specifies whether the result is labeled with the beginning or the end of the interval.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  id: totrans-1447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Warning
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: The default values for `label` and `closed` is ‘**left**’ for all frequency
    offsets except for ‘ME’, ‘YE’, ‘QE’, ‘BME’, ‘BYE’, ‘BQE’, and ‘W’ which all have
    a default of ‘right’.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: 'This might unintendedly lead to looking ahead, where the value for a later
    time is pulled back to a previous time as in the following example with the [`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay") frequency:'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  id: totrans-1451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: Notice how the value for Sunday got pulled back to the previous Friday. To get
    the behavior where the value for Sunday is pushed to Monday, use instead
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  id: totrans-1453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: The `axis` parameter can be set to 0 or 1 and allows you to resample the specified
    axis for a `DataFrame`.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: '`kind` can be set to ‘timestamp’ or ‘period’ to convert the resulting index
    to/from timestamp and time span representations. By default `resample` retains
    the input representation.'
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: '`convention` can be set to ‘start’ or ‘end’ when resampling period data (detail
    below). It specifies how low frequency periods are converted to higher frequency
    periods.'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: Upsampling
  id: totrans-1457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For upsampling, you can specify a way to upsample and the `limit` parameter
    to interpolate over the gaps that are created:'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  id: totrans-1459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: Sparse resampling
  id: totrans-1460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sparse timeseries are the ones where you have a lot fewer points relative to
    the amount of time you are looking to resample. Naively upsampling a sparse series
    can potentially generate lots of intermediate values. When you don’t want to use
    a method to fill these values, e.g. `fill_method` is `None`, then intermediate
    values will be filled with `NaN`.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: Since `resample` is a time-based groupby, the following is a method to efficiently
    resample only the groups that are not all `NaN`.
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  id: totrans-1463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'If we want to resample to the full range of the series:'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  id: totrans-1465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'We can instead only resample those groups where we have points as follows:'
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  id: totrans-1467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '### Aggregation'
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
- en: The `resample()` method returns a `pandas.api.typing.Resampler` instance. Similar
    to the [aggregating API](basics.html#basics-aggregate), [groupby API](groupby.html#groupby-aggregate),
    and the [window API](window.html#window-overview), a `Resampler` can be selectively
    resampled.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: Resampling a `DataFrame`, the default will be to act on all columns with the
    same function.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  id: totrans-1471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: We can select a specific column or columns using standard getitem.
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  id: totrans-1473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'You can pass a list or dict of functions to do aggregation with, outputting
    a `DataFrame`:'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'On a resampled `DataFrame`, you can pass a list of functions to apply to each
    column, which produces an aggregated result with a hierarchical index:'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  id: totrans-1477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'By passing a dict to `aggregate` you can apply a different aggregation to the
    columns of a `DataFrame`:'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  id: totrans-1479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'The function names can also be strings. In order for a string to be valid it
    must be implemented on the resampled object:'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  id: totrans-1481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: Furthermore, you can also specify multiple aggregation functions for each column
    separately.
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  id: totrans-1483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: If a `DataFrame` does not have a datetimelike index, but instead you want to
    resample based on datetimelike column in the frame, it can passed to the `on`
    keyword.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  id: totrans-1485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Similarly, if you instead want to resample by a datetimelike level of `MultiIndex`,
    its name or location can be passed to the `level` keyword.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  id: totrans-1487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '### Iterating through groups'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Resampler` object in hand, iterating through the grouped data is
    very natural and functions similarly to [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby
    "(in Python v3.12)"):'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  id: totrans-1490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: See [Iterating through groups](groupby.html#groupby-iterating-label) or `Resampler.__iter__`
    for more.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: '### Use `origin` or `offset` to adjust the start of the bins'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: The bins of the grouping are adjusted based on the beginning of the day of the
    time series starting point. This works well with frequencies that are multiples
    of a day (like `30D`) or that divide a day evenly (like `90s` or `1min`). This
    can create inconsistencies with some frequencies that do not meet this criteria.
    To change this behavior you can specify a fixed Timestamp with the argument `origin`.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  id: totrans-1495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'Here we can see that, when using `origin` with its default value (`''start_day''`),
    the result after `''2000-10-02 00:00:00''` are not identical depending on the
    start of time series:'
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  id: totrans-1497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'Here we can see that, when setting `origin` to `''epoch''`, the result after
    `''2000-10-02 00:00:00''` are identical depending on the start of time series:'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  id: totrans-1499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'If needed you can use a custom timestamp for `origin`:'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  id: totrans-1501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'If needed you can just adjust the bins with an `offset` Timedelta that would
    be added to the default `origin`. Those two examples are equivalent for this time
    series:'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  id: totrans-1503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: Note the use of `'start'` for `origin` on the last example. In that case, `origin`
    will be set to the first value of the timeseries.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
- en: Backward resample
  id: totrans-1505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: Instead of adjusting the beginning of bins, sometimes we need to fix the end
    of the bins to make a backward resample with a given `freq`. The backward resample
    sets `closed` to `'right'` by default since the last value should be considered
    as the edge point for the last bin.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: We can set `origin` to `'end'`. The value for a specific `Timestamp` index stands
    for the resample result from the current `Timestamp` minus `freq` to the current
    `Timestamp` with a right close.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  id: totrans-1509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Besides, in contrast with the `'start_day'` option, `end_day` is supported.
    This will set the origin as the ceiling midnight of the largest `Timestamp`.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  id: totrans-1511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: The above result uses `2000-10-02 00:29:00` as the last bin’s right edge since
    the following computation.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  id: totrans-1513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '## Time span representation'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: Regular intervals of time are represented by `Period` objects in pandas while
    sequences of `Period` objects are collected in a `PeriodIndex`, which can be created
    with the convenience function `period_range`.
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
- en: Period
  id: totrans-1516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Period` represents a span of time (e.g., a day, a month, a quarter, etc).
    You can specify the span via `freq` keyword using a frequency alias like below.
    Because `freq` represents a span of `Period`, it cannot be negative like “-3D”.
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  id: totrans-1518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: Adding and subtracting integers from periods shifts the period by its own frequency.
    Arithmetic is not allowed between `Period` with different `freq` (span).
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  id: totrans-1520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: If `Period` freq is daily or higher (`D`, `h`, `min`, `s`, `ms`, `us`, and `ns`),
    `offsets` and `timedelta`-like can be added if the result can have the same freq.
    Otherwise, `ValueError` will be raised.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  id: totrans-1522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-1523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: If `Period` has other frequencies, only the same `offsets` can be added. Otherwise,
    `ValueError` will be raised.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  id: totrans-1525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: 'Taking the difference of `Period` instances with the same frequency will return
    the number of frequency units between them:'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: PeriodIndex and period_range
  id: totrans-1529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Regular sequences of `Period` objects can be collected in a `PeriodIndex`,
    which can be constructed using the `period_range` convenience function:'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  id: totrans-1531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'The `PeriodIndex` constructor can also be used directly:'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  id: totrans-1533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: Passing multiplied frequency outputs a sequence of `Period` which has multiplied
    span.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  id: totrans-1535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: If `start` or `end` are `Period` objects, they will be used as anchor endpoints
    for a `PeriodIndex` with frequency matching that of the `PeriodIndex` constructor.
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  id: totrans-1537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'Just like `DatetimeIndex`, a `PeriodIndex` can also be used to index pandas
    objects:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  id: totrans-1539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '`PeriodIndex` supports addition and subtraction with the same rule as `Period`.'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '`PeriodIndex` has its own dtype named `period`, refer to [Period Dtypes](#timeseries-period-dtype).'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: '### Period dtypes'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
- en: '`PeriodIndex` has a custom `period` dtype. This is a pandas extension dtype
    similar to the [timezone aware dtype](#timeseries-timezone-series) (`datetime64[ns,
    tz]`).'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: The `period` dtype holds the `freq` attribute and is represented with `period[freq]`
    like `period[D]` or `period[M]`, using [frequency strings](#timeseries-period-aliases).
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  id: totrans-1546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'The `period` dtype can be used in `.astype(...)`. It allows one to change the
    `freq` of a `PeriodIndex` like `.asfreq()` and convert a `DatetimeIndex` to `PeriodIndex`
    like `to_period()`:'
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  id: totrans-1548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: PeriodIndex partial string indexing
  id: totrans-1549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PeriodIndex now supports partial string slicing with non-monotonic indexes.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: You can pass in dates and strings to `Series` and `DataFrame` with `PeriodIndex`,
    in the same manner as `DatetimeIndex`. For details, refer to [DatetimeIndex Partial
    String Indexing](#timeseries-partialindexing).
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  id: totrans-1552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Passing a string representing a lower frequency than `PeriodIndex` returns partial
    sliced data.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: As with `DatetimeIndex`, the endpoints will be included in the result. The example
    below slices data starting from 10:00 to 11:59.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  id: totrans-1556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: Frequency conversion and resampling with PeriodIndex
  id: totrans-1557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The frequency of `Period` and `PeriodIndex` can be converted via the `asfreq`
    method. Let’s start with the fiscal year 2011, ending in December:'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  id: totrans-1559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: 'We can convert it to a monthly frequency. Using the `how` parameter, we can
    specify whether to return the starting or ending month:'
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  id: totrans-1561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: 'The shorthands ‘s’ and ‘e’ are provided for convenience:'
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  id: totrans-1563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'Converting to a “super-period” (e.g., annual frequency is a super-period of
    quarterly frequency) automatically returns the super-period that includes the
    input period:'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: Note that since we converted to an annual frequency that ends the year in November,
    the monthly period of December 2011 is actually in the 2012 Y-NOV period.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
- en: Period conversions with anchored frequencies are particularly useful for working
    with various quarterly data common to economics, business, and other fields. Many
    organizations define quarters relative to the month in which their fiscal year
    starts and ends. Thus, first quarter of 2011 could start in 2010 or a few months
    into 2011\. Via anchored frequencies, pandas works for all quarterly frequencies
    `Q-JAN` through `Q-DEC`.
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
- en: '`Q-DEC` define regular calendar quarters:'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  id: totrans-1569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '`Q-MAR` defines fiscal year end in March:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  id: totrans-1571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Period
  id: totrans-1572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `Period` represents a span of time (e.g., a day, a month, a quarter, etc).
    You can specify the span via `freq` keyword using a frequency alias like below.
    Because `freq` represents a span of `Period`, it cannot be negative like “-3D”.
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: Adding and subtracting integers from periods shifts the period by its own frequency.
    Arithmetic is not allowed between `Period` with different `freq` (span).
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  id: totrans-1576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: If `Period` freq is daily or higher (`D`, `h`, `min`, `s`, `ms`, `us`, and `ns`),
    `offsets` and `timedelta`-like can be added if the result can have the same freq.
    Otherwise, `ValueError` will be raised.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-1579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: If `Period` has other frequencies, only the same `offsets` can be added. Otherwise,
    `ValueError` will be raised.
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  id: totrans-1581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: 'Taking the difference of `Period` instances with the same frequency will return
    the number of frequency units between them:'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  id: totrans-1584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: PeriodIndex and period_range
  id: totrans-1585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Regular sequences of `Period` objects can be collected in a `PeriodIndex`,
    which can be constructed using the `period_range` convenience function:'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'The `PeriodIndex` constructor can also be used directly:'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  id: totrans-1589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Passing multiplied frequency outputs a sequence of `Period` which has multiplied
    span.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  id: totrans-1591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: If `start` or `end` are `Period` objects, they will be used as anchor endpoints
    for a `PeriodIndex` with frequency matching that of the `PeriodIndex` constructor.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  id: totrans-1593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: 'Just like `DatetimeIndex`, a `PeriodIndex` can also be used to index pandas
    objects:'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  id: totrans-1595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '`PeriodIndex` supports addition and subtraction with the same rule as `Period`.'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  id: totrans-1597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '`PeriodIndex` has its own dtype named `period`, refer to [Period Dtypes](#timeseries-period-dtype).'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
- en: '### Period dtypes'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
- en: '`PeriodIndex` has a custom `period` dtype. This is a pandas extension dtype
    similar to the [timezone aware dtype](#timeseries-timezone-series) (`datetime64[ns,
    tz]`).'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
- en: The `period` dtype holds the `freq` attribute and is represented with `period[freq]`
    like `period[D]` or `period[M]`, using [frequency strings](#timeseries-period-aliases).
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  id: totrans-1602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'The `period` dtype can be used in `.astype(...)`. It allows one to change the
    `freq` of a `PeriodIndex` like `.asfreq()` and convert a `DatetimeIndex` to `PeriodIndex`
    like `to_period()`:'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  id: totrans-1604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: PeriodIndex partial string indexing
  id: totrans-1605
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PeriodIndex now supports partial string slicing with non-monotonic indexes.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
- en: You can pass in dates and strings to `Series` and `DataFrame` with `PeriodIndex`,
    in the same manner as `DatetimeIndex`. For details, refer to [DatetimeIndex Partial
    String Indexing](#timeseries-partialindexing).
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  id: totrans-1608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: Passing a string representing a lower frequency than `PeriodIndex` returns partial
    sliced data.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  id: totrans-1610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: As with `DatetimeIndex`, the endpoints will be included in the result. The example
    below slices data starting from 10:00 to 11:59.
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  id: totrans-1612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Frequency conversion and resampling with PeriodIndex
  id: totrans-1613
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The frequency of `Period` and `PeriodIndex` can be converted via the `asfreq`
    method. Let’s start with the fiscal year 2011, ending in December:'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  id: totrans-1615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: 'We can convert it to a monthly frequency. Using the `how` parameter, we can
    specify whether to return the starting or ending month:'
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  id: totrans-1617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: 'The shorthands ‘s’ and ‘e’ are provided for convenience:'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  id: totrans-1619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'Converting to a “super-period” (e.g., annual frequency is a super-period of
    quarterly frequency) automatically returns the super-period that includes the
    input period:'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  id: totrans-1621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Note that since we converted to an annual frequency that ends the year in November,
    the monthly period of December 2011 is actually in the 2012 Y-NOV period.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
- en: Period conversions with anchored frequencies are particularly useful for working
    with various quarterly data common to economics, business, and other fields. Many
    organizations define quarters relative to the month in which their fiscal year
    starts and ends. Thus, first quarter of 2011 could start in 2010 or a few months
    into 2011\. Via anchored frequencies, pandas works for all quarterly frequencies
    `Q-JAN` through `Q-DEC`.
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
- en: '`Q-DEC` define regular calendar quarters:'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  id: totrans-1625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '`Q-MAR` defines fiscal year end in March:'
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  id: totrans-1627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '## Converting between representations'
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamped data can be converted to PeriodIndex-ed data using `to_period`
    and vice-versa using `to_timestamp`:'
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  id: totrans-1630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'Remember that ‘s’ and ‘e’ can be used to return the timestamps at the start
    or end of the period:'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  id: totrans-1632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'Converting between period and timestamp enables some convenient arithmetic
    functions to be used. In the following example, we convert a quarterly frequency
    with year ending in November to 9am of the end of the month following the quarter
    end:'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  id: totrans-1634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '## Representing out-of-bounds spans'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
- en: If you have data that is outside of the `Timestamp` bounds, see [Timestamp limitations](#timeseries-timestamp-limits),
    then you can use a `PeriodIndex` and/or `Series` of `Periods` to do computations.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  id: totrans-1637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: To convert from an `int64` based YYYYMMDD representation.
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  id: totrans-1639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'These can easily be converted to a `PeriodIndex`:'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  id: totrans-1641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '## Time zone handling'
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
- en: pandas provides rich support for working with timestamps in different time zones
    using the `pytz` and `dateutil` libraries or [`datetime.timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone
    "(in Python v3.12)") objects from the standard library.
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
- en: Working with time zones
  id: totrans-1644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, pandas objects are time zone unaware:'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  id: totrans-1646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: To localize these dates to a time zone (assign a particular time zone to a naive
    date), you can use the `tz_localize` method or the `tz` keyword argument in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). You can either pass `pytz` or `dateutil` time zone objects
    or Olson time zone database strings. Olson time zone strings will return `pytz`
    time zone objects by default. To return `dateutil` time zone objects, append `dateutil/`
    before the string.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
- en: In `pytz` you can find a list of common (and less common) time zones using `from
    pytz import common_timezones, all_timezones`.
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dateutil` uses the OS time zones so there isn’t a fixed list available. For
    common zones, the names are the same as `pytz`.'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE436]'
  id: totrans-1650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-1651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: Note that the `UTC` time zone is a special case in `dateutil` and should be
    constructed explicitly as an instance of `dateutil.tz.tzutc`. You can also construct
    other time zones objects explicitly first.
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  id: totrans-1653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: To convert a time zone aware pandas object from one time zone to another, you
    can use the `tz_convert` method.
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  id: totrans-1655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: Note
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
- en: When using `pytz` time zones, [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") will construct a different time zone object than a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") for the same time zone input. A [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") can hold a collection of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects that may have different UTC offsets and cannot be
    succinctly represented by one `pytz` time zone instance while one [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") represents one point in time with a specific UTC offset.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  id: totrans-1658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: Warning
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
- en: Be wary of conversions between libraries. For some time zones, `pytz` and `dateutil`
    have different definitions of the zone. This is more of a problem for unusual
    time zones than for ‘standard’ zones like `US/Eastern`.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that a time zone definition across versions of time zone libraries
    may not be considered equal. This may cause problems when working with stored
    data that is localized using one version and operated on with a different version.
    See [here](io.html#io-hdf5-notes) for how to handle such a situation.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
- en: For `pytz` time zones, it is incorrect to pass a time zone object directly into
    the `datetime.datetime` constructor (e.g., `datetime.datetime(2011, 1, 1, tzinfo=pytz.timezone('US/Eastern'))`.
    Instead, the datetime needs to be localized using the `localize` method on the
    `pytz` time zone object.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that for times in the future, correct conversion between time zones
    (and UTC) cannot be guaranteed by any time zone library because a timezone’s offset
    from UTC may be changed by the respective government.
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
- en: If you are using dates beyond 2038-01-18, due to current deficiencies in the
    underlying libraries caused by the year 2038 problem, daylight saving time (DST)
    adjustments to timezone aware dates will not be applied. If and when the underlying
    libraries are fixed, the DST transitions will be applied.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for two dates that are in British Summer Time (and so would normally
    be GMT+1), both the following asserts evaluate as true:'
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  id: totrans-1670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'Under the hood, all timestamps are stored in UTC. Values from a time zone aware
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") will have their fields (day, hour, minute, etc.) localized
    to the time zone. However, timestamps with the same UTC value are still considered
    to be equal even if they are in different time zones:'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  id: totrans-1672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: 'Operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in different time zones will yield UTC [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), aligning the data on the UTC timestamps:'
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  id: totrans-1674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: To remove time zone information, use `tz_localize(None)` or `tz_convert(None)`.
    `tz_localize(None)` will remove the time zone yielding the local time representation.
    `tz_convert(None)` will remove the time zone after converting to UTC time.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  id: totrans-1676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '### Fold'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
- en: For ambiguous times, pandas supports explicitly specifying the keyword-only
    fold argument. Due to daylight saving time, one wall clock time can occur twice
    when shifting from summer to winter time; fold describes whether the datetime-like
    corresponds to the first (0) or the second time (1) the wall clock hits the ambiguous
    time. Fold is supported only for constructing from naive `datetime.datetime` (see
    [datetime documentation](https://docs.python.org/3/library/datetime.html) for
    details) or from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or for constructing from components (see below). Only `dateutil`
    timezones are supported (see [dateutil documentation](https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.enfold)
    for `dateutil` methods that deal with ambiguous datetimes) as `pytz` timezones
    do not support fold (see [pytz documentation](http://pytz.sourceforge.net/index.html)
    for details on how `pytz` deals with ambiguous datetimes). To localize an ambiguous
    datetime with `pytz`, please use [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"). In general, we recommend to rely on [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") when localizing ambiguous datetimes if you need
    direct control over how they are handled.
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]  ### Ambiguous times when localizing'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
- en: '`tz_localize` may not be able to determine the UTC offset of a timestamp because
    daylight savings time (DST) in a local time zone causes some times to occur twice
    within one day (“clocks fall back”). The following options are available:'
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
- en: '`''raise''`: Raises a `pytz.AmbiguousTimeError` (the default behavior)'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''infer''`: Attempt to determine the correct offset base on the monotonicity
    of the timestamps'
  id: totrans-1682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''NaT''`: Replaces ambiguous times with `NaT`'
  id: totrans-1683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool`: `True` represents a DST time, `False` represents non-DST time. An array-like
    of `bool` values is supported for a sequence of times.'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE446]'
  id: totrans-1685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: This will fail as there are ambiguous times (`'11/06/2011 01:00'`)
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  id: totrans-1687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: Handle these ambiguous times by specifying the following.
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]  ### Nonexistent times when localizing'
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
- en: 'A DST transition may also shift the local time ahead by 1 hour creating nonexistent
    local times (“clocks spring forward”). The behavior of localizing a timeseries
    with nonexistent times can be controlled by the `nonexistent` argument. The following
    options are available:'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
- en: '`''raise''`: Raises a `pytz.NonExistentTimeError` (the default behavior)'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''NaT''`: Replaces nonexistent times with `NaT`'
  id: totrans-1692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''shift_forward''`: Shifts nonexistent times forward to the closest real time'
  id: totrans-1693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''shift_backward''`: Shifts nonexistent times backward to the closest real
    time'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'timedelta object: Shifts nonexistent times by the timedelta duration'
  id: totrans-1695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE449]'
  id: totrans-1696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: Localization of nonexistent times will raise an error by default.
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  id: totrans-1698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Transform nonexistent times to `NaT` or shift the times.
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]  ### Time zone Series operations'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with time zone **naive** values is represented with a dtype of `datetime64[ns]`.
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  id: totrans-1702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with a time zone **aware** values is represented with a dtype of `datetime64[ns,
    tz]` where `tz` is the time zone
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  id: totrans-1704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: Both of these [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    time zone information can be manipulated via the `.dt` accessor, see [the dt accessor
    section](basics.html#basics-dt-accessors).
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
- en: For example, to localize and convert a naive stamp to time zone aware.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  id: totrans-1707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Time zone information can also be manipulated using the `astype` method. This
    method can convert between different timezone-aware dtypes.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  id: totrans-1709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: Note
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
- en: 'Using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") on a `Series`, returns a NumPy array of the data. NumPy
    does not currently support time zones (even though it is *printing* in the local
    time zone!), therefore an object array of Timestamps is returned for time zone
    aware data:'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'By converting to an object array of Timestamps, it preserves the time zone
    information. For example, when converting back to a Series:'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  id: totrans-1714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: 'However, if you want an actual NumPy `datetime64[ns]` array (with the values
    converted to UTC) instead of an array of objects, you can specify the `dtype`
    argument:'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: Working with time zones
  id: totrans-1717
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, pandas objects are time zone unaware:'
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  id: totrans-1719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: To localize these dates to a time zone (assign a particular time zone to a naive
    date), you can use the `tz_localize` method or the `tz` keyword argument in [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), or [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). You can either pass `pytz` or `dateutil` time zone objects
    or Olson time zone database strings. Olson time zone strings will return `pytz`
    time zone objects by default. To return `dateutil` time zone objects, append `dateutil/`
    before the string.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
- en: In `pytz` you can find a list of common (and less common) time zones using `from
    pytz import common_timezones, all_timezones`.
  id: totrans-1721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dateutil` uses the OS time zones so there isn’t a fixed list available. For
    common zones, the names are the same as `pytz`.'
  id: totrans-1722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE460]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-1724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: Note that the `UTC` time zone is a special case in `dateutil` and should be
    constructed explicitly as an instance of `dateutil.tz.tzutc`. You can also construct
    other time zones objects explicitly first.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: To convert a time zone aware pandas object from one time zone to another, you
    can use the `tz_convert` method.
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  id: totrans-1728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Note
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
- en: When using `pytz` time zones, [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") will construct a different time zone object than a [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") for the same time zone input. A [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") can hold a collection of [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") objects that may have different UTC offsets and cannot be
    succinctly represented by one `pytz` time zone instance while one [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") represents one point in time with a specific UTC offset.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  id: totrans-1731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Warning
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
- en: Be wary of conversions between libraries. For some time zones, `pytz` and `dateutil`
    have different definitions of the zone. This is more of a problem for unusual
    time zones than for ‘standard’ zones like `US/Eastern`.
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that a time zone definition across versions of time zone libraries
    may not be considered equal. This may cause problems when working with stored
    data that is localized using one version and operated on with a different version.
    See [here](io.html#io-hdf5-notes) for how to handle such a situation.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
- en: For `pytz` time zones, it is incorrect to pass a time zone object directly into
    the `datetime.datetime` constructor (e.g., `datetime.datetime(2011, 1, 1, tzinfo=pytz.timezone('US/Eastern'))`.
    Instead, the datetime needs to be localized using the `localize` method on the
    `pytz` time zone object.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that for times in the future, correct conversion between time zones
    (and UTC) cannot be guaranteed by any time zone library because a timezone’s offset
    from UTC may be changed by the respective government.
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
- en: If you are using dates beyond 2038-01-18, due to current deficiencies in the
    underlying libraries caused by the year 2038 problem, daylight saving time (DST)
    adjustments to timezone aware dates will not be applied. If and when the underlying
    libraries are fixed, the DST transitions will be applied.
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for two dates that are in British Summer Time (and so would normally
    be GMT+1), both the following asserts evaluate as true:'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  id: totrans-1743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: 'Under the hood, all timestamps are stored in UTC. Values from a time zone aware
    [`DatetimeIndex`](../reference/api/pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") will have their fields (day, hour, minute, etc.) localized
    to the time zone. However, timestamps with the same UTC value are still considered
    to be equal even if they are in different time zones:'
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  id: totrans-1745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: 'Operations between [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") in different time zones will yield UTC [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), aligning the data on the UTC timestamps:'
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  id: totrans-1747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: To remove time zone information, use `tz_localize(None)` or `tz_convert(None)`.
    `tz_localize(None)` will remove the time zone yielding the local time representation.
    `tz_convert(None)` will remove the time zone after converting to UTC time.
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  id: totrans-1749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '### Fold'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
- en: For ambiguous times, pandas supports explicitly specifying the keyword-only
    fold argument. Due to daylight saving time, one wall clock time can occur twice
    when shifting from summer to winter time; fold describes whether the datetime-like
    corresponds to the first (0) or the second time (1) the wall clock hits the ambiguous
    time. Fold is supported only for constructing from naive `datetime.datetime` (see
    [datetime documentation](https://docs.python.org/3/library/datetime.html) for
    details) or from [`Timestamp`](../reference/api/pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") or for constructing from components (see below). Only `dateutil`
    timezones are supported (see [dateutil documentation](https://dateutil.readthedocs.io/en/stable/tz.html#dateutil.tz.enfold)
    for `dateutil` methods that deal with ambiguous datetimes) as `pytz` timezones
    do not support fold (see [pytz documentation](http://pytz.sourceforge.net/index.html)
    for details on how `pytz` deals with ambiguous datetimes). To localize an ambiguous
    datetime with `pytz`, please use [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize"). In general, we recommend to rely on [`Timestamp.tz_localize()`](../reference/api/pandas.Timestamp.tz_localize.html#pandas.Timestamp.tz_localize
    "pandas.Timestamp.tz_localize") when localizing ambiguous datetimes if you need
    direct control over how they are handled.
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '### Ambiguous times when localizing'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
- en: '`tz_localize` may not be able to determine the UTC offset of a timestamp because
    daylight savings time (DST) in a local time zone causes some times to occur twice
    within one day (“clocks fall back”). The following options are available:'
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
- en: '`''raise''`: Raises a `pytz.AmbiguousTimeError` (the default behavior)'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''infer''`: Attempt to determine the correct offset base on the monotonicity
    of the timestamps'
  id: totrans-1756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''NaT''`: Replaces ambiguous times with `NaT`'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool`: `True` represents a DST time, `False` represents non-DST time. An array-like
    of `bool` values is supported for a sequence of times.'
  id: totrans-1758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE470]'
  id: totrans-1759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: This will fail as there are ambiguous times (`'11/06/2011 01:00'`)
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  id: totrans-1761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Handle these ambiguous times by specifying the following.
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '### Nonexistent times when localizing'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
- en: 'A DST transition may also shift the local time ahead by 1 hour creating nonexistent
    local times (“clocks spring forward”). The behavior of localizing a timeseries
    with nonexistent times can be controlled by the `nonexistent` argument. The following
    options are available:'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
- en: '`''raise''`: Raises a `pytz.NonExistentTimeError` (the default behavior)'
  id: totrans-1766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''NaT''`: Replaces nonexistent times with `NaT`'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''shift_forward''`: Shifts nonexistent times forward to the closest real time'
  id: totrans-1768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''shift_backward''`: Shifts nonexistent times backward to the closest real
    time'
  id: totrans-1769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'timedelta object: Shifts nonexistent times by the timedelta duration'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE473]'
  id: totrans-1771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: Localization of nonexistent times will raise an error by default.
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  id: totrans-1773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Transform nonexistent times to `NaT` or shift the times.
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '### Time zone Series operations'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with time zone **naive** values is represented with a dtype of `datetime64[ns]`.
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    with a time zone **aware** values is represented with a dtype of `datetime64[ns,
    tz]` where `tz` is the time zone
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  id: totrans-1780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: Both of these [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    time zone information can be manipulated via the `.dt` accessor, see [the dt accessor
    section](basics.html#basics-dt-accessors).
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
- en: For example, to localize and convert a naive stamp to time zone aware.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  id: totrans-1783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Time zone information can also be manipulated using the `astype` method. This
    method can convert between different timezone-aware dtypes.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  id: totrans-1785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Note
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
- en: 'Using [`Series.to_numpy()`](../reference/api/pandas.Series.to_numpy.html#pandas.Series.to_numpy
    "pandas.Series.to_numpy") on a `Series`, returns a NumPy array of the data. NumPy
    does not currently support time zones (even though it is *printing* in the local
    time zone!), therefore an object array of Timestamps is returned for time zone
    aware data:'
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  id: totrans-1788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: 'By converting to an object array of Timestamps, it preserves the time zone
    information. For example, when converting back to a Series:'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  id: totrans-1790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: 'However, if you want an actual NumPy `datetime64[ns]` array (with the values
    converted to UTC) instead of an array of objects, you can specify the `dtype`
    argument:'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  id: totrans-1792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
