["```py\nclass sympy.combinatorics.prufer.Prufer(*args, **kw_args)\n```", "```py\nstatic edges(*runs)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer.edges([1, 2, 3], [2, 4, 5]) # a T\n([[0, 1], [1, 2], [1, 3], [3, 4]], 5) \n```", "```py\n>>> Prufer.edges([0, 1, 2, 3], [1, 4, 5], [1, 4, 6]) # a K\n([[0, 1], [1, 2], [1, 4], [2, 3], [4, 5], [4, 6]], 7) \n```", "```py\nnext(delta=1)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> a = Prufer([[0, 1], [0, 2], [0, 3]])\n>>> b = a.next(1) # == a.next()\n>>> b.tree_repr\n[[0, 2], [0, 1], [1, 3]]\n>>> b.rank\n1 \n```", "```py\nproperty nodes\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer([[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]]).nodes\n6\n>>> Prufer([1, 0, 0]).nodes\n5 \n```", "```py\nprev(delta=1)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> a = Prufer([[0, 1], [1, 2], [2, 3], [1, 4]])\n>>> a.rank\n36\n>>> b = a.prev()\n>>> b\nPrufer([1, 2, 0])\n>>> b.rank\n35 \n```", "```py\nprufer_rank()\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> a = Prufer([[0, 1], [0, 2], [0, 3]])\n>>> a.prufer_rank()\n0 \n```", "```py\nproperty prufer_repr\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer([[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]]).prufer_repr\n[3, 3, 3, 4]\n>>> Prufer([1, 0, 0]).prufer_repr\n[1, 0, 0] \n```", "```py\nproperty rank\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> p = Prufer([[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]])\n>>> p.rank\n778\n>>> p.next(1).rank\n779\n>>> p.prev().rank\n777 \n```", "```py\nproperty size\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer([0]*4).size == Prufer([6]*4).size == 1296\nTrue \n```", "```py\nstatic to_prufer(tree, n)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> a = Prufer([[0, 1], [0, 2], [0, 3]])\n>>> a.prufer_repr\n[0, 0]\n>>> Prufer.to_prufer([[0, 1], [0, 2], [0, 3]], 4)\n[0, 0] \n```", "```py\nstatic to_tree(prufer)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> a = Prufer([0, 2], 4)\n>>> a.tree_repr\n[[0, 1], [0, 2], [2, 3]]\n>>> Prufer.to_tree([0, 2])\n[[0, 1], [0, 2], [2, 3]] \n```", "```py\nproperty tree_repr\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer([[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]]).tree_repr\n[[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]]\n>>> Prufer([1, 0, 0]).tree_repr\n[[1, 2], [0, 1], [0, 3], [0, 4]] \n```", "```py\nclassmethod unrank(rank, n)\n```", "```py\n>>> from sympy.combinatorics.prufer import Prufer\n>>> Prufer.unrank(0, 4)\nPrufer([0, 0]) \n```"]