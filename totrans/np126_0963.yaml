- en: What’s New or Different
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新功能或不同之处
- en: 原文：[https://numpy.org/doc/1.26/reference/random/new-or-different.html](https://numpy.org/doc/1.26/reference/random/new-or-different.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/new-or-different.html](https://numpy.org/doc/1.26/reference/random/new-or-different.html)
- en: NumPy 1.17.0 introduced [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") as an improved replacement for the [legacy](legacy.html#legacy)
    [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState").
    Here is a quick comparison of the two implementations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.17.0引入了[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")作为[传统](legacy.html#legacy)
    [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")的改进替代品。以下快速比较这两种实现。
- en: '| Feature | Older Equivalent | Notes |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | 旧等价物 | 注释 |'
- en: '| [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    | [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    | `Generator` requires a stream source, called a [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") A number of these are provided. `RandomState` uses
    the Mersenne Twister [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") by default, but can also be instantiated with any BitGenerator.
    |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    | [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    | `Generator`需要一个称为[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 的流源。这里提供了许多BitGenerator。默认情况下，`RandomState`使用Mersenne
    Twister [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")，但也可以用任何BitGenerator来实例化。'
- en: '| `random` | `random_sample`, `rand` | Access the values in a BitGenerator,
    convert them to `float64` in the interval `[0.0.,` `` 1.0)``. In addition to the
    `size` kwarg, now supports `dtype=''d''` or `dtype=''f''`, and an `out` kwarg
    to fill a user- supplied array.Many other distributions are also supported. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `random` | `random_sample`, `rand`| 存取BitGenerator中的值，在区间`[0.0, 1.0)`中转换为`float64`。除了`size`关键字参数，现在还支持`dtype=''d''`或`dtype=''f''`，以及`out`关键字参数来填充用户提供的数组。还支持许多其他分布。|'
- en: '| `integers` | `randint`, `random_integers` | Use the `endpoint` kwarg to adjust
    the inclusion or exclusion of the `high` interval endpoint |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `integers` | `randint`, `random_integers` | 使用`endpoint`关键字参数来调整`high`区间端点的包含或排除。'
- en: The normal, exponential and gamma generators use 256-step Ziggurat methods which
    are 2-10 times faster than NumPy’s default implementation in [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"), [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential") or [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"). Because of the change in algorithms,
    it is not possible to reproduce the exact random values using `Generator` for
    these distributions or any distribution method that relies on them.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正态、指数和伽马生成器使用了256步的Ziggurat方法，比NumPy默认实现的[`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")、[`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")或[`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma") 快2-10倍。由于算法的改变，使用`Generator`无法复现这些分布的确切随机值或依赖于它们的任何分布方法。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers") is now the canonical way to generate integer
    random numbers from a discrete uniform distribution. This replaces both `randint`
    and the deprecated `random_integers`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers") 现在是从离散均匀分布生成整数随机数的正式方法。这取代了`randint`和被弃用的`random_integers`。'
- en: The `rand` and `randn` methods are only available through the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState").
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rand`和`randn`方法只能通过传统的[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")来使用。'
- en: '[`Generator.random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random") is now the canonical way to generate floating-point
    random numbers, which replaces [`RandomState.random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample"), [`sample`](generated/numpy.random.sample.html#numpy.random.sample
    "numpy.random.sample"), and [`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf
    "numpy.random.ranf"), all of which were aliases. This is consistent with Python’s
    [`random.random`](https://docs.python.org/3/library/random.html#random.random
    "(in Python v3.11)").'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Generator.random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")现在是生成浮点随机数的规范方式，取代了[`RandomState.random_sample`](generated/numpy.random.RandomState.random_sample.html#numpy.random.RandomState.random_sample
    "numpy.random.RandomState.random_sample")、[`sample`](generated/numpy.random.sample.html#numpy.random.sample
    "numpy.random.sample")和[`ranf`](generated/numpy.random.ranf.html#numpy.random.ranf
    "numpy.random.ranf")，所有这些都是别名。 这与Python的[`random.random`](https://docs.python.org/3/library/random.html#random.random
    "(在Python v3.11)")一致。'
- en: All bit generators can produce doubles, uint64s and uint32s via CTypes ([`ctypes`](bit_generators/generated/numpy.random.PCG64.ctypes.html#numpy.random.PCG64.ctypes
    "numpy.random.PCG64.ctypes")) and CFFI ([`cffi`](bit_generators/generated/numpy.random.PCG64.cffi.html#numpy.random.PCG64.cffi
    "numpy.random.PCG64.cffi")). This allows these bit generators to be used in numba.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有比特生成器可以通过CTypes（[`ctypes`](bit_generators/generated/numpy.random.PCG64.ctypes.html#numpy.random.PCG64.ctypes
    "numpy.random.PCG64.ctypes")）和CFFI（[`cffi`](bit_generators/generated/numpy.random.PCG64.cffi.html#numpy.random.PCG64.cffi
    "numpy.random.PCG64.cffi")）生成双精度、uint64和uint32。 这使得这些比特生成器可以在numba中使用。
- en: The bit generators can be used in downstream projects via Cython.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特生成器可以通过Cython在下游项目中使用。
- en: All bit generators use [`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") to [convert seed integers to initialized states](bit_generators/index.html#seeding-and-entropy).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有比特生成器都使用[`SeedSequence`](bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")来[将种子整数转换为初始化状态](bit_generators/index.html#seeding-and-entropy)。
- en: Optional `dtype` argument that accepts `np.float32` or `np.float64` to produce
    either single or double precision uniform random variables for select distributions.
    [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers") accepts a `dtype` argument with any signed
    or unsigned integer dtype.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的`dtype`参数接受`np.float32`或`np.float64`，以生成选择分布的单精度或双精度均匀随机变量。 [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers")接受带有任何有符号或无符号整数dtype的`dtype`参数。
- en: Uniforms ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random") and [`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers"))
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均匀分布([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")和[`integers`](generated/numpy.random.Generator.integers.html#numpy.random.Generator.integers
    "numpy.random.Generator.integers"))
- en: Normals ([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准正态分布([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
- en: Standard Gammas ([`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"))
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准γ分布([`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"))
- en: Standard Exponentials ([`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"))
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准指数分布([`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"))
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Optional `out` argument that allows existing arrays to be filled for select
    distributions
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的`out`参数允许填充现有数组以选择分布。
- en: Uniforms ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random"))
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均匀分布([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random"))
- en: Normals ([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准正态分布([`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"))
- en: Standard Gammas ([`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma"))
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准Gamma分布（[`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")）
- en: Standard Exponentials ([`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"))
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准指数分布（[`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")）
- en: This allows multithreading to fill large arrays in chunks using suitable BitGenerators
    in parallel.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许使用适当的BitGenerators并行地通过多线程以块的方式填充大型数组。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Optional `axis` argument for methods like [`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice"), [`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation") and [`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle") that controls which axis an operation is performed
    over for multi-dimensional arrays.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法可选的`axis`参数，例如[`choice`](generated/numpy.random.Generator.choice.html#numpy.random.Generator.choice
    "numpy.random.Generator.choice")、[`permutation`](generated/numpy.random.Generator.permutation.html#numpy.random.Generator.permutation
    "numpy.random.Generator.permutation")和[`shuffle`](generated/numpy.random.Generator.shuffle.html#numpy.random.Generator.shuffle
    "numpy.random.Generator.shuffle")，用于控制多维数组上的操作执行的轴。
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Added a method to sample from the complex normal distribution (*complex_normal*)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了从复数正态分布（*complex_normal*）中抽样的方法。
