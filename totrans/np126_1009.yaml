- en: numpy.nanvar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.nanvar.html](https://numpy.org/doc/1.26/reference/generated/numpy.nanvar.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the variance along the specified axis, while ignoring NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the variance of the array elements, a measure of the spread of a distribution.
    The variance is computed for the flattened array by default, otherwise over the
    specified axis.
  prefs: []
  type: TYPE_NORMAL
- en: For all-NaN slices or slices with zero degrees of freedom, NaN is returned and
    a *RuntimeWarning* is raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array containing numbers whose variance is desired. If *a* is not an array,
    a conversion is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{int, tuple of int, None}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis or axes along which the variance is computed. The default is to compute
    the variance of the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type to use in computing the variance. For arrays of integer type the default
    is [`float64`](../arrays.scalars.html#numpy.float64 "numpy.float64"); for arrays
    of float types it is the same as the array type.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Alternate output array in which to place the result. It must have the same shape
    as the expected output, but the type is cast if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**ddof**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '“Delta Degrees of Freedom”: the divisor used in the calculation is `N - ddof`,
    where `N` represents the number of non-NaN elements. By default *ddof* is zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '**keepdims**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If this is set to True, the axes which are reduced are left in the result as
    dimensions with size one. With this option, the result will broadcast correctly
    against the original *a*.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like of bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Elements to include in the variance. See [`reduce`](numpy.ufunc.reduce.html#numpy.ufunc.reduce
    "numpy.ufunc.reduce") for details.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.22.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**variance**ndarray, see dtype parameter above'
  prefs: []
  type: TYPE_NORMAL
- en: If *out* is None, return a new array containing the variance, otherwise return
    a reference to the output array. If ddof is >= the number of non-NaN elements
    in a slice or the slice contains only NaNs, then the result for that slice is
    NaN.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`std`](numpy.std.html#numpy.std "numpy.std")'
  prefs: []
  type: TYPE_NORMAL
- en: Standard deviation
  prefs: []
  type: TYPE_NORMAL
- en: '[`mean`](numpy.mean.html#numpy.mean "numpy.mean")'
  prefs: []
  type: TYPE_NORMAL
- en: Average
  prefs: []
  type: TYPE_NORMAL
- en: '[`var`](numpy.var.html#numpy.var "numpy.var")'
  prefs: []
  type: TYPE_NORMAL
- en: Variance while not ignoring NaNs
  prefs: []
  type: TYPE_NORMAL
- en: '[`nanstd`](numpy.nanstd.html#numpy.nanstd "numpy.nanstd"), [`nanmean`](numpy.nanmean.html#numpy.nanmean
    "numpy.nanmean")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Output type determination](../../user/basics.ufuncs.html#ufuncs-output-type)'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The variance is the average of the squared deviations from the mean, i.e., `var
    = mean(abs(x - x.mean())**2)`.
  prefs: []
  type: TYPE_NORMAL
- en: The mean is normally calculated as `x.sum() / N`, where `N = len(x)`. If, however,
    *ddof* is specified, the divisor `N - ddof` is used instead. In standard statistical
    practice, `ddof=1` provides an unbiased estimator of the variance of a hypothetical
    infinite population. `ddof=0` provides a maximum likelihood estimate of the variance
    for normally distributed variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for complex numbers, the absolute value is taken before squaring,
    so that the result is always real and nonnegative.
  prefs: []
  type: TYPE_NORMAL
- en: For floating-point input, the variance is computed using the same precision
    the input has. Depending on the input data, this can cause the results to be inaccurate,
    especially for [`float32`](../arrays.scalars.html#numpy.float32 "numpy.float32")
    (see example below). Specifying a higher-accuracy accumulator using the `dtype`
    keyword can alleviate this issue.
  prefs: []
  type: TYPE_NORMAL
- en: For this function to work on sub-classes of ndarray, they must define [`sum`](numpy.sum.html#numpy.sum
    "numpy.sum") with the kwarg *keepdims*
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
