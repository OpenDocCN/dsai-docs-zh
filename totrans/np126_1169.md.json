["```py\n { 0   if x < 0,\nheaviside(x, h0) = { h0  if x == 0,\n                   { 1   if x > 0. \n```", "```py\n>>> A = np.eye(2) * 2\n>>> B = np.eye(3) * 3\n>>> np.block([\n...     [A,               np.zeros((2, 3))],\n...     [np.ones((3, 2)), B               ]\n... ])\narray([[ 2.,  0.,  0.,  0.,  0.],\n [ 0.,  2.,  0.,  0.,  0.],\n [ 1.,  1.,  3.,  0.,  0.],\n [ 1.,  1.,  0.,  3.,  0.],\n [ 1.,  1.,  0.,  0.,  3.]]) \n```", "```py\n>>> f = np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float_)\n>>> dx = 2.\n>>> y = [1., 1.5, 3.5]\n>>> np.gradient(f, dx, y)\n[array([[ 1\\. ,  1\\. , -0.5], [ 1\\. ,  1\\. , -0.5]]),\n array([[ 2\\. ,  2\\. ,  2\\. ], [ 2\\. ,  1.7,  0.5]])] \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[1:]) \n```", "```py\n>>> np.add(x[1:].copy(), x[:-1].copy(), out=x[1:]) \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[:-1]) \n```", "```py\n>>> x = np.random.rand(500, 500)\n>>> x += x.T \n```", "```py\n { 0   if x < 0,\nheaviside(x, h0) = { h0  if x == 0,\n                   { 1   if x > 0. \n```", "```py\n>>> A = np.eye(2) * 2\n>>> B = np.eye(3) * 3\n>>> np.block([\n...     [A,               np.zeros((2, 3))],\n...     [np.ones((3, 2)), B               ]\n... ])\narray([[ 2.,  0.,  0.,  0.,  0.],\n [ 0.,  2.,  0.,  0.,  0.],\n [ 1.,  1.,  3.,  0.,  0.],\n [ 1.,  1.,  0.,  3.,  0.],\n [ 1.,  1.,  0.,  0.,  3.]]) \n```", "```py\n>>> f = np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float_)\n>>> dx = 2.\n>>> y = [1., 1.5, 3.5]\n>>> np.gradient(f, dx, y)\n[array([[ 1\\. ,  1\\. , -0.5], [ 1\\. ,  1\\. , -0.5]]),\n array([[ 2\\. ,  2\\. ,  2\\. ], [ 2\\. ,  1.7,  0.5]])] \n```", "```py\n { 0   if x < 0,\nheaviside(x, h0) = { h0  if x == 0,\n                   { 1   if x > 0. \n```", "```py\n>>> A = np.eye(2) * 2\n>>> B = np.eye(3) * 3\n>>> np.block([\n...     [A,               np.zeros((2, 3))],\n...     [np.ones((3, 2)), B               ]\n... ])\narray([[ 2.,  0.,  0.,  0.,  0.],\n [ 0.,  2.,  0.,  0.,  0.],\n [ 1.,  1.,  3.,  0.,  0.],\n [ 1.,  1.,  0.,  3.,  0.],\n [ 1.,  1.,  0.,  0.,  3.]]) \n```", "```py\n>>> f = np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float_)\n>>> dx = 2.\n>>> y = [1., 1.5, 3.5]\n>>> np.gradient(f, dx, y)\n[array([[ 1\\. ,  1\\. , -0.5], [ 1\\. ,  1\\. , -0.5]]),\n array([[ 2\\. ,  2\\. ,  2\\. ], [ 2\\. ,  1.7,  0.5]])] \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[1:]) \n```", "```py\n>>> np.add(x[1:].copy(), x[:-1].copy(), out=x[1:]) \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[:-1]) \n```", "```py\n>>> x = np.random.rand(500, 500)\n>>> x += x.T \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[1:]) \n```", "```py\n>>> np.add(x[1:].copy(), x[:-1].copy(), out=x[1:]) \n```", "```py\n>>> x = np.arange(16).astype(float)\n>>> np.add(x[1:], x[:-1], out=x[:-1]) \n```", "```py\n>>> x = np.random.rand(500, 500)\n>>> x += x.T \n```"]