["```py\n>>> from sympy.holonomic import DifferentialOperators, HolonomicFunction\n>>> from sympy.abc import x\n>>> from sympy import ZZ\n>>> R, D = DifferentialOperators(ZZ.old_poly_ring(x), 'D')\n>>> HolonomicFunction(D**2 + 1, x, 0, [0, 1])\nHolonomicFunction((1) + (1)*D**2, x, 0, [0, 1]) \n```", "```py\nclass sympy.holonomic.holonomic.HolonomicFunction(annihilator, x, x0=0, y0=None)\n```", "```py\n>>> from sympy.holonomic.holonomic import HolonomicFunction, DifferentialOperators\n>>> from sympy import QQ\n>>> from sympy import symbols, S\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(QQ.old_poly_ring(x),'Dx') \n```", "```py\n>>> p = HolonomicFunction(Dx - 1, x, 0, [1])  # e^x\n>>> q = HolonomicFunction(Dx**2 + 1, x, 0, [0, 1])  # sin(x) \n```", "```py\n>>> p + q  # annihilator of e^x + sin(x)\nHolonomicFunction((-1) + (1)*Dx + (-1)*Dx**2 + (1)*Dx**3, x, 0, [1, 2, 1]) \n```", "```py\n>>> p * q  # annihilator of e^x * sin(x)\nHolonomicFunction((2) + (-2)*Dx + (1)*Dx**2, x, 0, [0, 1]) \n```", "```py\n>>> HolonomicFunction(-S(1)/2 + x*Dx, x, 0, {S(1)/2: [1]})\nHolonomicFunction((-1/2) + (x)*Dx, x, 0, {1/2: [1]}) \n```", "```py\n>>> HolonomicFunction(-S(1)/2 + x*Dx, x, 0, {S(1)/2: [1]}).to_expr()\nsqrt(x) \n```", "```py\n>>> import sympy.holonomic \n>>> from sympy import var, sin \n>>> import matplotlib.pyplot as plt \n>>> import numpy as np \n>>> var(\"x\") \n>>> r = np.linspace(1, 5, 100) \n>>> y = sympy.holonomic.expr_to_holonomic(sin(x)**2/x, x0=1).evalf(r) \n>>> plt.plot(r, y, label=\"holonomic function\") \n>>> plt.show() \n```", "```py\nclass sympy.holonomic.holonomic.DifferentialOperator(list_of_poly, parent)\n```", "```py\n>>> from sympy.holonomic.holonomic import DifferentialOperator, DifferentialOperators\n>>> from sympy import ZZ\n>>> from sympy import symbols\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x),'Dx') \n```", "```py\n>>> DifferentialOperator([0, 1, x**2], R)\n(1)*Dx + (x**2)*Dx**2 \n```", "```py\n>>> (x*Dx*x + 1 - Dx**2)**2\n(2*x**2 + 2*x + 1) + (4*x**3 + 2*x**2 - 4)*Dx + (x**4 - 6*x - 2)*Dx**2 + (-2*x**2)*Dx**3 + (1)*Dx**4 \n```", "```py\nis_singular(x0)\n```", "```py\nsympy.holonomic.holonomic.DifferentialOperators(base, generator)\n```", "```py\n>>> from sympy import ZZ\n>>> from sympy.abc import x\n>>> from sympy.holonomic.holonomic import DifferentialOperators\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x), 'Dx')\n>>> R\nUnivariate Differential Operator Algebra in intermediate Dx over the base ring ZZ[x]\n>>> Dx*x\n(1) + (x)*Dx \n```", "```py\nclass sympy.holonomic.holonomic.DifferentialOperatorAlgebra(base, generator)\n```", "```py\n>>> from sympy import ZZ\n>>> from sympy import symbols\n>>> from sympy.holonomic.holonomic import DifferentialOperators\n>>> x = symbols('x')\n>>> R, Dx = DifferentialOperators(ZZ.old_poly_ring(x), 'Dx')\n>>> R\nUnivariate Differential Operator Algebra in intermediate Dx over the base ring\nZZ[x] \n```"]