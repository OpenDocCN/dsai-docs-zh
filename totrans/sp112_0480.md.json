["```py\nscipy.optimize.fmin_cg(f, x0, fprime=None, args=(), gtol=1e-05, norm=inf, epsilon=1.4901161193847656e-08, maxiter=None, full_output=0, disp=1, retall=0, callback=None, c1=0.0001, c2=0.4)\n```", "```py\n>>> import numpy as np\n>>> args = (2, 3, 7, 8, 9, 10)  # parameter values\n>>> def f(x, *args):\n...     u, v = x\n...     a, b, c, d, e, f = args\n...     return a*u**2 + b*u*v + c*v**2 + d*u + e*v + f\n>>> def gradf(x, *args):\n...     u, v = x\n...     a, b, c, d, e, f = args\n...     gu = 2*a*u + b*v + d     # u-component of the gradient\n...     gv = b*u + 2*c*v + e     # v-component of the gradient\n...     return np.asarray((gu, gv))\n>>> x0 = np.asarray((0, 0))  # Initial guess.\n>>> from scipy import optimize\n>>> res1 = optimize.fmin_cg(f, x0, fprime=gradf, args=args)\nOptimization terminated successfully.\n Current function value: 1.617021\n Iterations: 4\n Function evaluations: 8\n Gradient evaluations: 8\n>>> res1\narray([-1.80851064, -0.25531915]) \n```", "```py\n>>> opts = {'maxiter' : None,    # default value.\n...         'disp' : True,    # non-default value.\n...         'gtol' : 1e-5,    # default value.\n...         'norm' : np.inf,  # default value.\n...         'eps' : 1.4901161193847656e-08}  # default value.\n>>> res2 = optimize.minimize(f, x0, jac=gradf, args=args,\n...                          method='CG', options=opts)\nOptimization terminated successfully.\n Current function value: 1.617021\n Iterations: 4\n Function evaluations: 8\n Gradient evaluations: 8\n>>> res2.x  # minimum found\narray([-1.80851064, -0.25531915]) \n```"]