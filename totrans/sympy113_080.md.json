["```py\nsympy.series.limits.limit(e, z, z0, dir='+')\n```", "```py\n>>> from sympy import limit, sin, oo\n>>> from sympy.abc import x\n>>> limit(sin(x)/x, x, 0)\n1\n>>> limit(1/x, x, 0) # default dir='+'\noo\n>>> limit(1/x, x, 0, dir=\"-\")\n-oo\n>>> limit(1/x, x, 0, dir='+-')\nzoo\n>>> limit(1/x, x, oo)\n0 \n```", "```py\nclass sympy.series.limits.Limit(e, z, z0, dir='+')\n```", "```py\n>>> from sympy import Limit, sin\n>>> from sympy.abc import x\n>>> Limit(sin(x)/x, x, 0)\nLimit(sin(x)/x, x, 0, dir='+')\n>>> Limit(1/x, x, 0, dir=\"-\")\nLimit(1/x, x, 0, dir='-') \n```", "```py\ndoit(**hints)\n```", "```py\nsympy.series.gruntz.gruntz(e, z, z0, dir='+')\n```", "```py\nsympy.series.gruntz.compare(a, b, x)\n```", "```py\nsympy.series.gruntz.rewrite(e, Omega, x, wsym)\n```", "```py\nsympy.series.gruntz.build_expression_tree(Omega, rewrites)\n```", "```py\ne1 ---> e2 ---> e3\n         \\\n          -> e4 \n```", "```py\nsympy.series.gruntz.mrv_leadterm(e, x)\n```", "```py\nsympy.series.gruntz.calculate_series(e, x, logx=None)\n```", "```py\nsympy.series.gruntz.limitinf(e, x)\n```", "```py\nsympy.series.gruntz.sign(e, x)\n```", "```py\ne >  0 for x sufficiently large ...  1\ne == 0 for x sufficiently large ...  0\ne <  0 for x sufficiently large ... -1 \n```", "```py\nsympy.series.gruntz.mrv(e, x)\n```", "```py\nsympy.series.gruntz.mrv_max1(f, g, exps, x)\n```", "```py\nsympy.series.gruntz.mrv_max3(f, expsf, g, expsg, union, expsboth, x)\n```", "```py\nclass sympy.series.gruntz.SubsSet\n```", "```py\n> Omega=[exp(exp(_p - exp(-_p))/(1 - 1/_p)), exp(exp(_p))]\n> O2=[exp(-exp(_p) + exp(-exp(-_p))*exp(_p)/(1 - 1/_p))/_w, 1/_w]\n> e = exp(exp(_p - exp(-_p))/(1 - 1/_p)) - exp(exp(_p))\n> e.subs(Omega[0],O2[0]).subs(Omega[1],O2[1])\n-1/w + exp(exp(p)*exp(-exp(-p))/(1 - 1/p)) \n```", "```py\nexp(x - exp(-x)) + exp(x) + x. \n```", "```py\nd3 + d1 + x. \n```", "```py\n{exp(x): d1, exp(-x): d2, exp(x - exp(-x)): d3}. \n```", "```py\n{d3: exp(x-d2)}. \n```", "```py\nexp(-w)/w + 1/w + x. \n```", "```py\ncopy()\n```", "```py\ndo_subs(e)\n```", "```py\nmeets(s2)\n```", "```py\nunion(s2, exps=None)\n```", "```py\n>>> from sympy import Symbol, cos, series\n>>> x = Symbol('x')\n>>> series(cos(x),x)\n1 - x**2/2 + x**4/24 + O(x**6) \n```", "```py\nsympy.series.series.series(expr, x=None, x0=0, n=6, dir='+')\n```", "```py\n>>> from sympy import series, tan, oo\n>>> from sympy.abc import x\n>>> f = tan(x)\n>>> series(f, x, 2, 6, \"+\")\ntan(2) + (1 + tan(2)**2)*(x - 2) + (x - 2)**2*(tan(2)**3 + tan(2)) +\n(x - 2)**3*(1/3 + 4*tan(2)**2/3 + tan(2)**4) + (x - 2)**4*(tan(2)**5 +\n5*tan(2)**3/3 + 2*tan(2)/3) + (x - 2)**5*(2/15 + 17*tan(2)**2/15 +\n2*tan(2)**4 + tan(2)**6) + O((x - 2)**6, (x, 2)) \n```", "```py\n>>> series(f, x, 2, 3, \"-\")\ntan(2) + (2 - x)*(-tan(2)**2 - 1) + (2 - x)**2*(tan(2)**3 + tan(2))\n+ O((x - 2)**3, (x, 2)) \n```", "```py\n>>> series(f, x, 2, oo, \"+\")\nTraceback (most recent call last):\n...\nTypeError: 'Infinity' object cannot be interpreted as an integer \n```", "```py\n>>> from sympy import Symbol, Order\n>>> x = Symbol('x')\n>>> Order(x) + x**2\nO(x)\n>>> Order(x) + 1\n1 + O(x) \n```", "```py\nclass sympy.series.order.Order(expr, *args, **kwargs)\n```", "```py\n>>> from sympy import O, oo, cos, pi\n>>> from sympy.abc import x, y \n```", "```py\n>>> O(x + x**2)\nO(x)\n>>> O(x + x**2, (x, 0))\nO(x)\n>>> O(x + x**2, (x, oo))\nO(x**2, (x, oo)) \n```", "```py\n>>> O(1 + x*y)\nO(1, x, y)\n>>> O(1 + x*y, (x, 0), (y, 0))\nO(1, x, y)\n>>> O(1 + x*y, (x, oo), (y, oo))\nO(x*y, (x, oo), (y, oo)) \n```", "```py\n>>> O(1) in O(1, x)\nTrue\n>>> O(1, x) in O(1)\nFalse\n>>> O(x) in O(1, x)\nTrue\n>>> O(x**2) in O(x)\nTrue \n```", "```py\n>>> O(x)*x\nO(x**2)\n>>> O(x) - O(x)\nO(x)\n>>> O(cos(x))\nO(1)\n>>> O(cos(x), (x, pi/2))\nO(x - pi/2, (x, pi/2)) \n```", "```py\ncontains(expr)\n```", "```py\nsympy.series.acceleration.richardson(A, k, n, N)\n```", "```py\n>>> from sympy.abc import n\n>>> e = (1 + 1/n)**n\n>>> print(round(e.subs(n, 100).evalf(), 10))\n2.7048138294 \n```", "```py\n>>> from sympy import E\n>>> from sympy.series.acceleration import richardson\n>>> print(round(richardson(e, n, 10, 20).evalf(), 10))\n2.7182818285\n>>> print(round(E.evalf(), 10))\n2.7182818285 \n```", "```py\n>>> from sympy.abc import k, n\n>>> from sympy import Sum\n>>> A = Sum(k**-2, (k, 1, n))\n>>> print(round(A.subs(n, 100).evalf(), 10))\n1.6349839002 \n```", "```py\n>>> from sympy import pi\n>>> print(round(richardson(A, n, 10, 20).evalf(), 10))\n1.6449340668\n>>> print(round(((pi**2)/6).evalf(), 10))     # Exact value\n1.6449340668 \n```", "```py\nsympy.series.acceleration.shanks(A, k, n, m=1)\n```", "```py\n>>> from sympy.abc import k, n\n>>> from sympy import Sum, Integer\n>>> from sympy.series.acceleration import shanks\n>>> A = Sum(Integer(-1)**(k+1) / k, (k, 1, n))\n>>> print(round(A.subs(n, 100).doit().evalf(), 10))\n0.6881721793\n>>> print(round(shanks(A, n, 25).evalf(), 10))\n0.6931396564\n>>> print(round(shanks(A, n, 25, 5).evalf(), 10))\n0.6931471806 \n```", "```py\nsympy.series.residues.residue(expr, x, x0)\n```", "```py\n>>> from sympy import Symbol, residue, sin\n>>> x = Symbol(\"x\")\n>>> residue(1/x, x, 0)\n1\n>>> residue(1/x**2, x, 0)\n0\n>>> residue(2/sin(x), x, 0)\n2 \n```"]