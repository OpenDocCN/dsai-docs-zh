["```py\nscipy.ndimage.generate_binary_structure(rank, connectivity)\n```", "```py\n>>> from scipy import ndimage\n>>> import numpy as np\n>>> struct = ndimage.generate_binary_structure(2, 1)\n>>> struct\narray([[False,  True, False],\n [ True,  True,  True],\n [False,  True, False]], dtype=bool)\n>>> a = np.zeros((5,5))\n>>> a[2, 2] = 1\n>>> a\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> b = ndimage.binary_dilation(a, structure=struct).astype(a.dtype)\n>>> b\narray([[ 0.,  0.,  0.,  0.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  0.,  0.,  0.,  0.]])\n>>> ndimage.binary_dilation(b, structure=struct).astype(a.dtype)\narray([[ 0.,  0.,  1.,  0.,  0.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 1.,  1.,  1.,  1.,  1.],\n [ 0.,  1.,  1.,  1.,  0.],\n [ 0.,  0.,  1.,  0.,  0.]])\n>>> struct = ndimage.generate_binary_structure(2, 2)\n>>> struct\narray([[ True,  True,  True],\n [ True,  True,  True],\n [ True,  True,  True]], dtype=bool)\n>>> struct = ndimage.generate_binary_structure(3, 1)\n>>> struct # no diagonal elements\narray([[[False, False, False],\n [False,  True, False],\n [False, False, False]],\n [[False,  True, False],\n [ True,  True,  True],\n [False,  True, False]],\n [[False, False, False],\n [False,  True, False],\n [False, False, False]]], dtype=bool) \n```"]