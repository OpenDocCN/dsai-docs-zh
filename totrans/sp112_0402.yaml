- en: scipy.ndimage.binary_propagation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.binary_propagation.html#scipy.ndimage.binary_propagation](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.binary_propagation.html#scipy.ndimage.binary_propagation)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional binary propagation with the given structuring element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Binary image to be propagated inside *mask*.
  prefs: []
  type: TYPE_NORMAL
- en: '**structure**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring element used in the successive dilations. The output may depend
    on the structuring element, especially if *mask* has several connex components.
    If no structuring element is provided, an element is generated with a squared
    connectivity equal to one.
  prefs: []
  type: TYPE_NORMAL
- en: '**mask**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Binary mask defining the region into which *input* is allowed to propagate.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Array of the same shape as input, into which the output is placed. By default,
    a new array is created.
  prefs: []
  type: TYPE_NORMAL
- en: '**border_value**int (cast to 0 or 1), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value at the border in the output array.
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Placement of the filter, by default 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**binary_propagation**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Binary propagation of *input* inside *mask*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is functionally equivalent to calling binary_dilation with the
    number of iterations less than one: iterative dilation until the result does not
    change anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: The succession of an erosion and propagation inside the original image can be
    used instead of an *opening* for deleting small objects while keeping the contours
    of larger objects untouched.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://cmm.ensmp.fr/~serra/cours/pdf/en/ch6en.pdf](http://cmm.ensmp.fr/~serra/cours/pdf/en/ch6en.pdf),
    slide 15.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: I.T. Young, J.J. Gerbrands, and L.J. van Vliet, “Fundamentals of image processing”,
    1998 [ftp://qiftp.tudelft.nl/DIPimage/docs/FIP2.3.pdf](ftp://qiftp.tudelft.nl/DIPimage/docs/FIP2.3.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
