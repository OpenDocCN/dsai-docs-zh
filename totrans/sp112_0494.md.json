["```py\nscipy.optimize.newton_krylov(F, xin, iter=None, rdiff=None, method='lgmres', inner_maxiter=20, inner_M=None, outer_k=10, verbose=False, maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None, tol_norm=None, line_search='armijo', callback=None, **kw)\n```", "```py\n>>> from scipy.optimize import BroydenFirst, KrylovJacobian\n>>> from scipy.optimize import InverseJacobian\n>>> jac = BroydenFirst()\n>>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac)) \n```", "```py\n>>> def fun(x):\n...     return [x[0] + 0.5 * x[1] - 1.0,\n...             0.5 * (x[1] - x[0]) ** 2] \n```", "```py\n>>> from scipy import optimize\n>>> sol = optimize.newton_krylov(fun, [0, 0])\n>>> sol\narray([0.66731771, 0.66536458]) \n```"]