- en: Classical Mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/index.html](https://docs.sympy.org/latest/modules/physics/mechanics/index.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Vector'
  prefs: []
  type: TYPE_NORMAL
- en: This module derives the vector-related abilities and related functionalities
    from [`sympy.physics.vector`](../vector/index.html#module-sympy.physics.vector
    "sympy.physics.vector"). Please have a look at the documentation of [`sympy.physics.vector`](../vector/index.html#module-sympy.physics.vector
    "sympy.physics.vector") and its necessary API to understand the vector capabilities
    of [`sympy.physics.mechanics`](#module-sympy.physics.mechanics "sympy.physics.mechanics").
  prefs: []
  type: TYPE_NORMAL
- en: Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In physics, mechanics describes conditions of rest (statics) or motion (dynamics).
    There are a few common steps to all mechanics problems. First, an idealized representation
    of a system is described. Next, we use physical laws to generate equations that
    define the system’s behavior. Then, we solve these equations, sometimes analytically
    but usually numerically. Finally, we extract information from these equations
    and solutions. The current scope of the module is multi-body dynamics: the motion
    of systems of multiple particles and/or rigid bodies. For example, this module
    could be used to understand the motion of a double pendulum, planets, robotic
    manipulators, bicycles, and any other system of rigid bodies that may fascinate
    us.'
  prefs: []
  type: TYPE_NORMAL
- en: Often, the objective in multi-body dynamics is to obtain the trajectory of a
    system of rigid bodies through time. The challenge for this task is to first formulate
    the equations of motion of the system. Once they are formulated, they must be
    solved, that is, integrated forward in time. When digital computers came around,
    solving became the easy part of the problem. Now, we can tackle more complicated
    problems, which leaves the challenge of formulating the equations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The term “equations of motion” is used to describe the application of Newton’s
    second law to multi-body systems. The form of the equations of motion depends
    on the method used to generate them. This package implements two of these methods:
    Kane’s method and Lagrange’s method. This module facilitates the formulation of
    equations of motion, which can then be solved (integrated) using generic ordinary
    differential equation (ODE) solvers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The approach to a particular class of dynamics problems, that of forward dynamics,
    has the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: describing the system’s geometry and configuration,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: specifying the way the system can move, including constraints on its motion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: describing the external forces and moments on the system,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: combining the above information according to Newton’s second law (\(\mathbf{F}=m\mathbf{a}\)),
    and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: organizing the resulting equations so that they can be integrated to obtain
    the system’s trajectory through time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Together with the rest of SymPy, this module performs steps 4 and 5, provided
    that the user can perform 1 through 3 for the module. That is to say, the user
    must provide a complete representation of the free body diagrams that themselves
    represent the system, with which this code can provide equations of motion in
    a form amenable to numerical integration. Step 5 above amounts to arduous algebra
    for even fairly simple multi-body systems. Thus, it is desirable to use a symbolic
    math package, such as SymPy, to perform this step. It is for this reason that
    this module is a part of SymPy. Step 4 amounts to this specific module, sympy.physics.mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Guide to Mechanics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Masses, Inertias, Particles and Rigid Bodies in Physics/Mechanics](masses.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kane’s Method in Physics/Mechanics](kane.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lagrange’s Method in Physics/Mechanics](lagrange.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Joints Framework in Physics/Mechanics](joints.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Symbolic Systems in Physics/Mechanics](symsystem.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linearization in Physics/Mechanics](linearize.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nonminimal Coordinates Pendulum](examples/lin_pend_nonmin_example.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examples for Physics/Mechanics](examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A rolling disc](examples/rollingdisc_example.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A rolling disc, with Kane’s method](examples/rollingdisc_example_kane.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A rolling disc, with Kane’s method and constraint forces](examples/rollingdisc_example_kane_constraints.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A rolling disc using Lagrange’s Method](examples/rollingdisc_example_lagrange.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A bicycle](examples/bicycle_example.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nonminimal Coordinates Pendulum](examples/lin_pend_nonmin_example.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multi Degree of Freedom Holonomic System](examples/multi_degree_freedom_holonomic_system.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A four bar linkage](examples/four_bar_linkage_example.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Potential Issues/Advanced Topics/Future Features in Physics/Mechanics](advanced.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[References for Physics/Mechanics](reference.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Autolev Parser](autolev_parser.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SymPy Mechanics for Autolev Users](sympy_mechanics_for_autolev_users.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mechanics API Reference](api/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bodies, Inertias, Loads & Other Functions (Docstrings)](api/part_bod.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kane’s Method & Lagrange’s Method (Docstrings)](api/kane_lagrange.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Joints Framework (Docstrings)](api/joint.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[System (Docstrings)](api/system.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linearization (Docstrings)](api/linearize.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Expression Manipulation (Docstrings)](api/expr_manip.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Printing (Docstrings)](api/printing.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pathway (Docstrings)](api/pathway.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Actuator (Docstrings)](api/actuator.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wrapping Geometry (Docstrings)](api/wrapping_geometry.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deprecated Classes (Docstrings)](api/deprecated_classes.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
