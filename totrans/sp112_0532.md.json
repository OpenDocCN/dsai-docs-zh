["```py\nscipy.signal.filtfilt(b, a, x, axis=-1, padtype='odd', padlen=None, method='pad', irlen=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> t = np.linspace(0, 1.0, 2001)\n>>> xlow = np.sin(2 * np.pi * 5 * t)\n>>> xhigh = np.sin(2 * np.pi * 250 * t)\n>>> x = xlow + xhigh \n```", "```py\n>>> b, a = signal.butter(8, 0.125)\n>>> y = signal.filtfilt(b, a, x, padlen=150)\n>>> np.abs(y - xlow).max()\n9.1086182074789912e-06 \n```", "```py\n>>> b, a = signal.ellip(4, 0.01, 120, 0.125)  # Filter to be applied. \n```", "```py\n>>> rng = np.random.default_rng()\n>>> n = 60\n>>> sig = rng.standard_normal(n)**3 + 3*rng.standard_normal(n).cumsum() \n```", "```py\n>>> fgust = signal.filtfilt(b, a, sig, method=\"gust\")\n>>> fpad = signal.filtfilt(b, a, sig, padlen=50)\n>>> plt.plot(sig, 'k-', label='input')\n>>> plt.plot(fgust, 'b-', linewidth=4, label='gust')\n>>> plt.plot(fpad, 'c-', linewidth=1.5, label='pad')\n>>> plt.legend(loc='best')\n>>> plt.show() \n```", "```py\n>>> z, p, k = signal.tf2zpk(b, a)\n>>> eps = 1e-9\n>>> r = np.max(np.abs(p))\n>>> approx_impulse_len = int(np.ceil(np.log(eps) / np.log(r)))\n>>> approx_impulse_len\n137 \n```", "```py\n>>> x = rng.standard_normal(4000)\n>>> y1 = signal.filtfilt(b, a, x, method='gust')\n>>> y2 = signal.filtfilt(b, a, x, method='gust', irlen=approx_impulse_len)\n>>> print(np.max(np.abs(y1 - y2)))\n2.875334415008979e-10 \n```"]