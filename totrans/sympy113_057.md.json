["```py\nclass sympy.combinatorics.permutations.Permutation(*args, size=None, **kwargs)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False) \n```", "```py\n>>> p = Permutation([0, 2, 1]); p\nPermutation([0, 2, 1]) \n```", "```py\n>>> [i^p for i in range(p.size)]\n[0, 2, 1] \n```", "```py\n>>> q = Permutation([2, 1, 0])\n>>> [i^p^q for i in range(3)]\n[2, 0, 1]\n>>> [i^(p*q) for i in range(3)]\n[2, 0, 1] \n```", "```py\n>>> [(p*q)(i) for i in range(p.size)]\n[2, 0, 1]\n>>> [q(p(i)) for i in range(p.size)]\n[2, 0, 1]\n>>> [p(q(i)) for i in range(p.size)]\n[1, 2, 0] \n```", "```py\n>>> Permutation(1,2,3) == Permutation(2,3,1) == Permutation(3,1,2)\nTrue \n```", "```py\n>>> Permutation(1, 2)(3, 5) == Permutation([[1, 2], [3, 5]])\nTrue \n```", "```py\n>>> Permutation(1, 2)(1, 3)(2, 3)\nPermutation([0, 3, 2, 1])\n>>> _ == Permutation([[1, 2]])*Permutation([[1, 3]])*Permutation([[2, 3]])\nTrue \n```", "```py\n> >>> Permutation(1, 2)(2, 3) == Permutation([(1, 2), (2, 3)])\n> \n> True\n> \n> >>> Permutation(1, 2)(2, 3).list()\n> \n> [0, 3, 1, 2] \n> ```", "```py\n> >>> Permutation([(1, 2), (2, 3)][::-1]).list()\n> \n> [0, 2, 3, 1] \n> ```", "```py\n>>> Permutation([[1, 2], [9]])\nPermutation([0, 2, 1], size=10)\n>>> Permutation([[1, 2]], size=10)\nPermutation([0, 2, 1], size=10) \n```", "```py\n>>> Permutation(1, 2, size=10)\nPermutation([0, 2, 1], size=10)\n>>> Permutation(9)(1, 2)\nPermutation([0, 2, 1], size=10) \n```", "```py\n>>> Permutation(5)\nPermutation([], size=6) \n```", "```py\n>>> Permutation(1, 2)(3)\nTraceback (most recent call last):\n...\nIndexError: list index out of range \n```", "```py\n>>> Permutation(3)(1, 2)\nPermutation([0, 2, 1, 3])\n>>> Permutation(1, 2)(3, 4) == Permutation(3, 4)(1, 2)\nTrue \n```", "```py\n>>> Permutation([1, 0, 2, 3]) == Permutation([1, 0])\nFalse \n```", "```py\n>>> I = Permutation([0, 1, 2, 3])\n>>> all(p == I for p in [\n... Permutation(3),\n... Permutation(range(4)),\n... Permutation([], size=4),\n... Permutation(size=4)])\nTrue \n```", "```py\n>>> I == Permutation([range(4)])\nFalse \n```", "```py\n>>> from sympy import init_printing\n>>> p = Permutation(1, 2)(4, 5)(3, 4)\n>>> p\nPermutation([0, 2, 1, 4, 5, 3]) \n```", "```py\n>>> init_printing(perm_cyclic=True, pretty_print=False)\n>>> p\n(1 2)(3 4 5) \n```", "```py\n>>> p.array_form\n[0, 2, 1, 4, 5, 3]\n>>> p.cyclic_form\n[[1, 2], [3, 4, 5]]\n>>> Permutation(_) == p\nTrue \n```", "```py\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> Permutation([1, 0, 2, 3])\nPermutation([1, 0, 2, 3])\n>>> Permutation([1, 0, 2, 3], size=20)\nPermutation([1, 0], size=20)\n>>> Permutation([1, 0, 2, 4, 3, 5, 6], size=20)\nPermutation([1, 0, 2, 4, 3], size=20) \n```", "```py\n>>> p = Permutation([1, 0, 2, 3])\n>>> init_printing(perm_cyclic=True, pretty_print=False)\n>>> p\n(3)(0 1)\n>>> init_printing(perm_cyclic=False, pretty_print=False) \n```", "```py\n>>> p.array_form\n[1, 0, 2, 3]\n>>> p.size\n4 \n```", "```py\n>>> q = Permutation([5, 2, 3, 4, 1, 0])\n>>> q.array_form[1] # the hard way\n2\n>>> q(1) # the easy way\n2\n>>> {i: q(i) for i in range(q.size)} # showing the bijection\n{0: 5, 1: 2, 2: 3, 3: 4, 4: 1, 5: 0} \n```", "```py\n>>> p.full_cyclic_form\n[[0, 1], [2], [3]] \n```", "```py\n>>> Permutation([[1, 2], [3, 4, 5]]).transpositions()\n[(1, 2), (3, 5), (3, 4)]\n>>> Permutation.rmul(*[Permutation([ti], size=6) for ti in _]).cyclic_form\n[[1, 2], [3, 4, 5]] \n```", "```py\n>>> p.size\n4\n>>> p.cardinality\n24 \n```", "```py\n>>> p.rank()\n6\n>>> p + 1\nPermutation([1, 0, 3, 2])\n>>> p.next_lex()\nPermutation([1, 0, 3, 2])\n>>> _.rank()\n7\n>>> p.unrank_lex(p.size, rank=7)\nPermutation([1, 0, 3, 2]) \n```", "```py\n>>> p = Permutation([1, 0, 2, 3])\n>>> q = Permutation([2, 3, 1, 0])\n>>> list(q*p)\n[2, 3, 0, 1]\n>>> list(p*q)\n[3, 2, 1, 0]\n>>> [q(p(i)) for i in range(p.size)]\n[3, 2, 1, 0] \n```", "```py\n>>> p(['zero', 'one', 'four', 'two'])\n['one', 'zero', 'four', 'two']\n>>> p('zo42')\n['o', 'z', '4', '2'] \n```", "```py\n>>> Permutation.from_sequence('SymPy')\nPermutation([1, 3, 2, 0, 4]) \n```", "```py\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=True, pretty_print=False)\n>>> from sympy.combinatorics import Cycle, Permutation\n>>> from sympy.combinatorics.perm_groups import PermutationGroup\n>>> G = PermutationGroup(Cycle(2, 3)(4, 5), Cycle(1, 2, 3, 4, 5))\n>>> p1 = Permutation(Cycle(2, 5, 3))\n>>> p2 = Permutation(Cycle(1, 2, 3))\n>>> a1 = Permutation(Cycle(1, 2, 3).list(6))\n>>> a2 = Permutation(Cycle(1, 2, 3)(5))\n>>> a3 = Permutation(Cycle(1, 2, 3),size=6)\n>>> for p in [p1,p2,a1,a2,a3]: p, G.contains(p)\n((2 5 3), True)\n((1 2 3), False)\n((5)(1 2 3), True)\n((5)(1 2 3), True)\n((5)(1 2 3), True) \n```", "```py\n>>> G.contains(p2,strict=False)\nTrue \n```", "```py\napply(i)\n```", "```py\nproperty array_form\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([[2, 0], [3, 1]])\n>>> p.array_form\n[2, 3, 0, 1]\n>>> Permutation([[2, 0, 3, 1]]).array_form\n[3, 2, 0, 1]\n>>> Permutation([2, 0, 3, 1]).array_form\n[2, 0, 3, 1]\n>>> Permutation([[1, 2], [4, 5]]).array_form\n[0, 2, 1, 3, 5, 4] \n```", "```py\nascents()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([4, 0, 1, 3, 2])\n>>> p.ascents()\n[1, 2] \n```", "```py\natoms()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([0, 1, 2, 3, 4, 5]).atoms()\n{0, 1, 2, 3, 4, 5}\n>>> Permutation([[0, 1], [2, 3], [4, 5]]).atoms()\n{0, 1, 2, 3, 4, 5} \n```", "```py\nproperty cardinality\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.cardinality\n24 \n```", "```py\ncommutator(x)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> p = Permutation([0, 2, 3, 1])\n>>> x = Permutation([2, 0, 3, 1])\n>>> c = p.commutator(x); c\nPermutation([2, 1, 3, 0])\n>>> c == ~x*~p*x*p\nTrue \n```", "```py\n>>> I = Permutation(3)\n>>> p = [I + i for i in range(6)]\n>>> for i in range(len(p)):\n...     for j in range(len(p)):\n...         c = p[i].commutator(p[j])\n...         if p[i]*p[j] == p[j]*p[i]:\n...             assert c == I\n...         else:\n...             assert c != I\n... \n```", "```py\ncommutes_with(other)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> a = Permutation([1, 4, 3, 0, 2, 5])\n>>> b = Permutation([0, 1, 2, 3, 4, 5])\n>>> a.commutes_with(b)\nTrue\n>>> b = Permutation([2, 3, 5, 4, 1, 0])\n>>> a.commutes_with(b)\nFalse \n```", "```py\nproperty cycle_structure\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation(3).cycle_structure\n{1: 4}\n>>> Permutation(0, 4, 3)(1, 2)(5, 6).cycle_structure\n{2: 2, 3: 1} \n```", "```py\nproperty cycles\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([0, 1, 2]).cycles\n3\n>>> Permutation([0, 1, 2]).full_cyclic_form\n[[0], [1], [2]]\n>>> Permutation(0, 1)(2, 3).cycles\n2 \n```", "```py\nproperty cyclic_form\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 3, 1, 2])\n>>> p.cyclic_form\n[[1, 3, 2]]\n>>> Permutation([1, 0, 2, 4, 3, 5]).cyclic_form\n[[0, 1], [3, 4]] \n```", "```py\ndescents()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([4, 0, 1, 3, 2])\n>>> p.descents()\n[0, 3] \n```", "```py\nclassmethod from_inversion_vector(inversion)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> Permutation.from_inversion_vector([3, 2, 1, 0, 0])\nPermutation([3, 2, 1, 0, 4, 5]) \n```", "```py\nclassmethod from_sequence(i, key=None)\n```", "```py\n>>> from sympy.combinatorics import Permutation \n```", "```py\n>>> Permutation.from_sequence('SymPy')\n(4)(0 1 3)\n>>> _(sorted(\"SymPy\"))\n['S', 'y', 'm', 'P', 'y']\n>>> Permutation.from_sequence('SymPy', key=lambda x: x.lower())\n(4)(0 2)(1 3) \n```", "```py\nproperty full_cyclic_form\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([0, 2, 1]).full_cyclic_form\n[[0], [1, 2]] \n```", "```py\nget_adjacency_distance(other)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 3, 1, 2, 4])\n>>> q = Permutation.josephus(4, 5, 2)\n>>> p.get_adjacency_distance(q)\n3\n>>> r = Permutation([0, 2, 1, 4, 3])\n>>> p.get_adjacency_distance(r)\n4 \n```", "```py\nget_adjacency_matrix()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation.josephus(3, 6, 1)\n>>> p.get_adjacency_matrix()\nMatrix([\n[0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 1, 0],\n[0, 0, 0, 0, 0, 1],\n[0, 1, 0, 0, 0, 0],\n[1, 0, 0, 0, 0, 0],\n[0, 0, 0, 1, 0, 0]])\n>>> q = Permutation([0, 1, 2, 3])\n>>> q.get_adjacency_matrix()\nMatrix([\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1],\n[0, 0, 0, 0]]) \n```", "```py\nget_positional_distance(other)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 3, 1, 2, 4])\n>>> q = Permutation.josephus(4, 5, 2)\n>>> r = Permutation([3, 1, 4, 0, 2])\n>>> p.get_positional_distance(q)\n12\n>>> p.get_positional_distance(r)\n12 \n```", "```py\nget_precedence_distance(other)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([2, 0, 4, 3, 1])\n>>> q = Permutation([3, 1, 2, 4, 0])\n>>> p.get_precedence_distance(q)\n7\n>>> q.get_precedence_distance(p)\n7 \n```", "```py\nget_precedence_matrix()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> p = Permutation.josephus(3, 6, 1)\n>>> p\nPermutation([2, 5, 3, 1, 4, 0])\n>>> p.get_precedence_matrix()\nMatrix([\n[0, 0, 0, 0, 0, 0],\n[1, 0, 0, 0, 1, 0],\n[1, 1, 0, 1, 1, 1],\n[1, 1, 0, 0, 1, 0],\n[1, 0, 0, 0, 0, 0],\n[1, 1, 0, 1, 1, 0]]) \n```", "```py\nindex()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([3, 0, 2, 1, 4])\n>>> p.index()\n2 \n```", "```py\ninversion_vector()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([4, 8, 0, 7, 1, 5, 3, 6, 2])\n>>> p.inversion_vector()\n[4, 7, 0, 5, 0, 2, 1, 1]\n>>> p = Permutation([3, 2, 1, 0])\n>>> p.inversion_vector()\n[3, 2, 1] \n```", "```py\n>>> p = Permutation(2)\n>>> while p:\n...     print('%s  %s  %s' % (p, p.inversion_vector(), p.rank()))\n...     p = p.next_lex()\n(2) [0, 0] 0\n(1 2) [0, 1] 1\n(2)(0 1) [1, 0] 2\n(0 1 2) [1, 1] 3\n(0 2 1) [2, 0] 4\n(0 2) [2, 1] 5 \n```", "```py\ninversions()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3, 4, 5])\n>>> p.inversions()\n0\n>>> Permutation([3, 2, 1, 0]).inversions()\n6 \n```", "```py\nproperty is_Empty\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([]).is_Empty\nTrue\n>>> Permutation([0]).is_Empty\nFalse \n```", "```py\nproperty is_Identity\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([])\n>>> p.is_Identity\nTrue\n>>> p = Permutation([[0], [1], [2]])\n>>> p.is_Identity\nTrue\n>>> p = Permutation([0, 1, 2])\n>>> p.is_Identity\nTrue\n>>> p = Permutation([0, 2, 1])\n>>> p.is_Identity\nFalse \n```", "```py\nproperty is_Singleton\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([0]).is_Singleton\nTrue\n>>> Permutation([0, 1]).is_Singleton\nFalse \n```", "```py\nproperty is_even\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.is_even\nTrue\n>>> p = Permutation([3, 2, 1, 0])\n>>> p.is_even\nTrue \n```", "```py\nproperty is_odd\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.is_odd\nFalse\n>>> p = Permutation([3, 2, 0, 1])\n>>> p.is_odd\nTrue \n```", "```py\nclassmethod josephus(m, n, s=1)\n```", "```py\nchoices    chosen\n========   ======\n  012345\n  01 345   2\n  01 34    25\n  01  4    253\n  0   4    2531\n  0        25314\n           253140 \n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation.josephus(3, 6, 2).array_form\n[2, 5, 3, 1, 4, 0] \n```", "```py\nlength()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([0, 3, 2, 1]).length()\n2\n>>> Permutation([[0, 1], [2, 3]]).length()\n4 \n```", "```py\nlist(size=None)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation(2, 3)(4, 5)\n>>> p.list()\n[0, 1, 3, 2, 5, 4]\n>>> p.list(10)\n[0, 1, 3, 2, 5, 4, 6, 7, 8, 9] \n```", "```py\n>>> Permutation(2, 4)(1, 2, 4).list(-1)\n[0, 2, 1]\n>>> Permutation(3).list(-1)\n[] \n```", "```py\nmax() → int\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([1, 0, 2, 3, 4])\n>>> p.max()\n1 \n```", "```py\nmin() → int\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 4, 3, 2])\n>>> p.min()\n2 \n```", "```py\nmul_inv(other)\n```", "```py\nnext_lex()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([2, 3, 1, 0])\n>>> p = Permutation([2, 3, 1, 0]); p.rank()\n17\n>>> p = p.next_lex(); p.rank()\n18 \n```", "```py\nnext_nonlex()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> p = Permutation([2, 0, 3, 1]); p.rank_nonlex()\n5\n>>> p = p.next_nonlex(); p\nPermutation([3, 0, 1, 2])\n>>> p.rank_nonlex()\n6 \n```", "```py\nnext_trotterjohnson()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> p = Permutation([3, 0, 2, 1])\n>>> p.rank_trotterjohnson()\n4\n>>> p = p.next_trotterjohnson(); p\nPermutation([0, 3, 2, 1])\n>>> p.rank_trotterjohnson()\n5 \n```", "```py\norder()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> p = Permutation([3, 1, 5, 2, 4, 0])\n>>> p.order()\n4\n>>> (p**(p.order()))\nPermutation([], size=6) \n```", "```py\nparity()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.parity()\n0\n>>> p = Permutation([3, 2, 0, 1])\n>>> p.parity()\n1 \n```", "```py\nclassmethod random(n)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation.random(2) in (Permutation([1, 0]), Permutation([0, 1]))\nTrue \n```", "```py\nrank()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.rank()\n0\n>>> p = Permutation([3, 2, 1, 0])\n>>> p.rank()\n23 \n```", "```py\nrank_nonlex(inv_perm=None)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.rank_nonlex()\n23 \n```", "```py\nrank_trotterjohnson()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2, 3])\n>>> p.rank_trotterjohnson()\n0\n>>> p = Permutation([0, 2, 1, 3])\n>>> p.rank_trotterjohnson()\n7 \n```", "```py\nresize(n)\n```", "```py\n>>> from sympy.combinatorics import Permutation \n```", "```py\n>>> p = Permutation(0, 1, 2)\n>>> p = p.resize(5)\n>>> p\n(4)(0 1 2) \n```", "```py\n>>> p = p.resize(4)\n>>> p\n(3)(0 1 2) \n```", "```py\n>>> p.resize(2)\nTraceback (most recent call last):\n...\nValueError: The permutation cannot be resized to 2 because the\ncycle (0, 1, 2) may break. \n```", "```py\nstatic rmul(*args)\n```", "```py\n>>> from sympy.combinatorics import Permutation \n```", "```py\n>>> a, b = [1, 0, 2], [0, 2, 1]\n>>> a = Permutation(a); b = Permutation(b)\n>>> list(Permutation.rmul(a, b))\n[1, 2, 0]\n>>> [a(b(i)) for i in range(3)]\n[1, 2, 0] \n```", "```py\n>>> a = Permutation(a); b = Permutation(b)\n>>> list(a*b)\n[2, 0, 1]\n>>> [b(a(i)) for i in range(3)]\n[2, 0, 1] \n```", "```py\n>>> Permutation.rmul(a, [0, 2, 1]) == Permutation.rmul(a, b)\nTrue \n```", "```py\nclassmethod rmul_with_af(*args)\n```", "```py\nruns()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([2, 5, 7, 3, 6, 0, 1, 4, 8])\n>>> p.runs()\n[[2, 5, 7], [3, 6], [0, 1, 4, 8]]\n>>> q = Permutation([1,3,2,0])\n>>> q.runs()\n[[1, 3], [2], [0]] \n```", "```py\nsignature()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([0, 1, 2])\n>>> p.inversions()\n0\n>>> p.signature()\n1\n>>> q = Permutation([0,2,1])\n>>> q.inversions()\n1\n>>> q.signature()\n-1 \n```", "```py\nproperty size\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> Permutation([[3, 2], [0, 1]]).size\n4 \n```", "```py\nsupport()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([[3, 2], [0, 1], [4]])\n>>> p.array_form\n[1, 0, 3, 2, 4]\n>>> p.support()\n[0, 1, 2, 3] \n```", "```py\ntranspositions()\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> p = Permutation([[1, 2, 3], [0, 4, 5, 6, 7]])\n>>> t = p.transpositions()\n>>> t\n[(0, 7), (0, 6), (0, 5), (0, 4), (1, 3), (1, 2)]\n>>> print(''.join(str(c) for c in t))\n(0, 7)(0, 6)(0, 5)(0, 4)(1, 3)(1, 2)\n>>> Permutation.rmul(*[Permutation([ti], size=p.size) for ti in t]) == p\nTrue \n```", "```py\nclassmethod unrank_lex(size, rank)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> a = Permutation.unrank_lex(5, 10)\n>>> a.rank()\n10\n>>> a\nPermutation([0, 2, 4, 1, 3]) \n```", "```py\nclassmethod unrank_nonlex(n, r)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> Permutation.unrank_nonlex(4, 5)\nPermutation([2, 0, 3, 1])\n>>> Permutation.unrank_nonlex(4, -1)\nPermutation([0, 1, 2, 3]) \n```", "```py\nclassmethod unrank_trotterjohnson(size, rank)\n```", "```py\n>>> from sympy.combinatorics import Permutation\n>>> from sympy import init_printing\n>>> init_printing(perm_cyclic=False, pretty_print=False)\n>>> Permutation.unrank_trotterjohnson(5, 10)\nPermutation([0, 3, 1, 2, 4]) \n```", "```py\nclass sympy.combinatorics.permutations.Cycle(*args)\n```", "```py\n>>> from sympy.combinatorics.permutations import Perm, Cycle \n```", "```py\n>>> Cycle(1, 2)(2, 3)\n(1 3 2) \n```", "```py\n>>> Cycle()(1, 2)(2, 3)\n(1 3 2) \n```", "```py\n>>> a = Cycle(1, 2)\n>>> a.list()\n[0, 2, 1]\n>>> list(a)\n[0, 2, 1] \n```", "```py\n>>> b = Cycle(2, 4)(1, 2)(3, 1, 4)(1, 3)\n>>> b.list()\n[0, 2, 1, 3, 4]\n>>> b.list(b.size + 1)\n[0, 2, 1, 3, 4, 5]\n>>> b.list(-1)\n[0, 2, 1] \n```", "```py\n>>> Cycle(1, 4, 10)(4, 5)\n(1 5 4 10)\n>>> Cycle(1, 2)(4)(5)(10)\n(1 2)(10) \n```", "```py\n>>> Perm(Cycle(1, 2)(3, 4).list()).transpositions()\n[(1, 2), (3, 4)] \n```", "```py\n>>> list(Cycle(1, 2).items())\n[(1, 2), (2, 1)] \n```", "```py\nlist(size=None)\n```", "```py\n>>> from sympy.combinatorics import Cycle\n>>> p = Cycle(2, 3)(4, 5)\n>>> p.list()\n[0, 1, 3, 2, 5, 4]\n>>> p.list(10)\n[0, 1, 3, 2, 5, 4, 6, 7, 8, 9] \n```", "```py\n>>> Cycle(2, 4)(1, 2, 4).list(-1)\n[0, 2, 1] \n```", "```py\nsympy.combinatorics.permutations._af_parity(pi)\n```", "```py\n>>> from sympy.combinatorics.permutations import _af_parity\n>>> _af_parity([0, 1, 2, 3])\n0\n>>> _af_parity([3, 2, 0, 1])\n1 \n```", "```py\ngenerators.symmetric()\n```", "```py\n>>> from sympy.combinatorics.generators import symmetric\n>>> list(symmetric(3))\n[(2), (1 2), (2)(0 1), (0 1 2), (0 2 1), (0 2)] \n```", "```py\ngenerators.cyclic()\n```", "```py\n>>> from sympy.combinatorics.generators import cyclic\n>>> list(cyclic(5))\n[(4), (0 1 2 3 4), (0 2 4 1 3),\n (0 3 1 4 2), (0 4 3 2 1)] \n```", "```py\ngenerators.alternating()\n```", "```py\n>>> from sympy.combinatorics.generators import alternating\n>>> list(alternating(3))\n[(2), (0 1 2), (0 2 1)] \n```", "```py\ngenerators.dihedral()\n```", "```py\n>>> from sympy.combinatorics.generators import dihedral\n>>> list(dihedral(3))\n[(2), (0 2), (0 1 2), (1 2), (0 2 1), (2)(0 1)] \n```"]