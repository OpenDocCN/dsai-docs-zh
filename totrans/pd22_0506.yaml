- en: pandas.Timedelta
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html](https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represents a duration, the difference between two dates or times.
  prefs: []
  type: TYPE_NORMAL
- en: Timedelta is the pandas equivalent of python’s `datetime.timedelta` and is interchangeable
    with it in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value**Timedelta, timedelta, np.timedelta64, str, or int'
  prefs: []
  type: TYPE_NORMAL
- en: '**unit**str, default ‘ns’'
  prefs: []
  type: TYPE_NORMAL
- en: Denote the unit of the input, if input is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Possible values:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘W’, or ‘D’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘days’, or ‘day’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘hours’, ‘hour’, ‘hr’, or ‘h’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘minutes’, ‘minute’, ‘min’, or ‘m’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘seconds’, ‘second’, ‘sec’, or ‘s’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘milliseconds’, ‘millisecond’, ‘millis’, ‘milli’, or ‘ms’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘microseconds’, ‘microsecond’, ‘micros’, ‘micro’, or ‘us’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘nanoseconds’, ‘nanosecond’, ‘nanos’, ‘nano’, or ‘ns’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.2.0: Values H, T, S, L, U, and N are deprecated
    in favour of the values h, min, s, ms, us, and ns.'
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available kwargs: {days, seconds, microseconds, milliseconds, minutes, hours,
    weeks}. Values for construction in compat with datetime.timedelta. Numpy ints
    and floats will be coerced to python ints and floats.'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The constructor may take in either both values of value and unit or kwargs as
    above. Either one of them must be used during initialization
  prefs: []
  type: TYPE_NORMAL
- en: The `.value` attribute is always in ns.
  prefs: []
  type: TYPE_NORMAL
- en: If the precision is higher than nanoseconds, the precision of the duration is
    truncated to nanoseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Here we initialize Timedelta object with both value and unit
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we initialize the Timedelta object with kwargs
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We see that either way we get the same result
  prefs: []
  type: TYPE_NORMAL
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| [`asm8`](pandas.Timedelta.asm8.html#pandas.Timedelta.asm8 "pandas.Timedelta.asm8")
    | Return a numpy timedelta64 array scalar view. |'
  prefs: []
  type: TYPE_TB
- en: '| [`components`](pandas.Timedelta.components.html#pandas.Timedelta.components
    "pandas.Timedelta.components") | Return a components namedtuple-like. |'
  prefs: []
  type: TYPE_TB
- en: '| [`days`](pandas.Timedelta.days.html#pandas.Timedelta.days "pandas.Timedelta.days")
    | Returns the days of the timedelta. |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](pandas.Timedelta.max.html#pandas.Timedelta.max "pandas.Timedelta.max")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`microseconds`](pandas.Timedelta.microseconds.html#pandas.Timedelta.microseconds
    "pandas.Timedelta.microseconds") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](pandas.Timedelta.min.html#pandas.Timedelta.min "pandas.Timedelta.min")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanoseconds`](pandas.Timedelta.nanoseconds.html#pandas.Timedelta.nanoseconds
    "pandas.Timedelta.nanoseconds") | Return the number of nanoseconds (n), where
    0 <= n < 1 microsecond. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resolution`](pandas.Timedelta.resolution.html#pandas.Timedelta.resolution
    "pandas.Timedelta.resolution") |  |'
  prefs: []
  type: TYPE_TB
- en: '| `resolution_string` | Return a string representing the lowest timedelta resolution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`seconds`](pandas.Timedelta.seconds.html#pandas.Timedelta.seconds "pandas.Timedelta.seconds")
    | Return the total hours, minutes, and seconds of the timedelta as seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`unit`](pandas.Timedelta.unit.html#pandas.Timedelta.unit "pandas.Timedelta.unit")
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`value`](pandas.Timedelta.value.html#pandas.Timedelta.value "pandas.Timedelta.value")
    |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`as_unit`](pandas.Timedelta.as_unit.html#pandas.Timedelta.as_unit "pandas.Timedelta.as_unit")(unit[, round_ok])
    | Convert the underlying int64 representation to the given unit. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ceil`](pandas.Timedelta.ceil.html#pandas.Timedelta.ceil "pandas.Timedelta.ceil")(freq)
    | Return a new Timedelta ceiled to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`floor`](pandas.Timedelta.floor.html#pandas.Timedelta.floor "pandas.Timedelta.floor")(freq)
    | Return a new Timedelta floored to this resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isoformat`](pandas.Timedelta.isoformat.html#pandas.Timedelta.isoformat
    "pandas.Timedelta.isoformat")() | Format the Timedelta as ISO 8601 Duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](pandas.Timedelta.round.html#pandas.Timedelta.round "pandas.Timedelta.round")(freq)
    | Round the Timedelta to the specified resolution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_numpy`](pandas.Timedelta.to_numpy.html#pandas.Timedelta.to_numpy "pandas.Timedelta.to_numpy")([dtype, copy])
    | Convert the Timedelta to a NumPy timedelta64. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_pytimedelta`](pandas.Timedelta.to_pytimedelta.html#pandas.Timedelta.to_pytimedelta
    "pandas.Timedelta.to_pytimedelta")() | Convert a pandas Timedelta object into
    a python `datetime.timedelta` object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`to_timedelta64`](pandas.Timedelta.to_timedelta64.html#pandas.Timedelta.to_timedelta64
    "pandas.Timedelta.to_timedelta64")() | Return a numpy.timedelta64 object with
    ''ns'' precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`total_seconds`](pandas.Timedelta.total_seconds.html#pandas.Timedelta.total_seconds
    "pandas.Timedelta.total_seconds")() | Total seconds in the duration. |'
  prefs: []
  type: TYPE_TB
- en: '| [`view`](pandas.Timedelta.view.html#pandas.Timedelta.view "pandas.Timedelta.view")(dtype)
    | Array view compatibility. |'
  prefs: []
  type: TYPE_TB
