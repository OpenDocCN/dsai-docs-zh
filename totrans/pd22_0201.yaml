- en: DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/frame.html](https://pandas.pydata.org/docs/reference/frame.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Constructor'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | Two-dimensional, size-mutable, potentially heterogeneous tabular data. |'
  prefs: []
  type: TYPE_TB
- en: Attributes and underlying data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Axes**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | The index (row labels) of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | The column labels of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | Return the dtypes in the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | Print a concise summary of a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | Return a subset of the
    DataFrame''s columns based on the column dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | Return a Numpy representation of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | Return a list representing the axes of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | Return an int representing the number of axes / array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | Return an int representing the number of elements in this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | Return a tuple representing the dimensionality of
    the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | Return the memory usage of each
    column in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | Indicator whether Series/DataFrame is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | Cast a pandas object to a
    specified dtype `dtype`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | Convert columns to
    the best possible dtypes using dtypes supporting `pd.NA`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | Attempt to infer better dtypes for
    object columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | Convert the DataFrame
    to a NumPy array. |'
  prefs: []
  type: TYPE_TB
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | Access a single value for a row/column label pair. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | Access a single value for a row/column pair by integer position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | Insert column into DataFrame
    at specified location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | Iterate over info axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | Iterate over (column name, Series) pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | Get the ''info axis'' (see Indexing for more). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | Iterate over DataFrame rows as (index, Series)
    pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | Iterate over DataFrame rows as
    namedtuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | Return item and drop from frame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | Whether each element in the DataFrame is contained in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | Replace values where
    the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | Replace values where the condition is True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | Query the columns of a DataFrame
    with a boolean expression. |'
  prefs: []
  type: TYPE_TB
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
- en: Binary operator functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | Get Addition of DataFrame and other, column-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator add). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator sub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator mul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator floordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    pow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | Compute the matrix multiplication between the DataFrame and other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator radd). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator rsub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator rmul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator rfloordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator rmod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    rpow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | Get Less than of dataframe and other, element-wise (binary operator lt). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | Get Greater than of dataframe and other, element-wise (binary operator gt).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | Get Less than or equal to of dataframe and other, element-wise (binary operator
    le). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | Get Greater than or equal to of dataframe and other, element-wise (binary operator
    ge). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | Get Not equal to of dataframe and other, element-wise (binary operator ne).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | Get Equal to of dataframe and other, element-wise (binary operator eq). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | Perform column-wise
    combine with another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | Update null elements with value in
    the same location in other. |'
  prefs: []
  type: TYPE_TB
- en: Function application, GroupBy & window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | Apply a function along an
    axis of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | Apply a function to a Dataframe elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | (DEPRECATED) Apply a function
    to a Dataframe elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | Call `func` on self producing a
    DataFrame with the same axis shape as self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | Group DataFrame using a
    mapper or by a Series of columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | Provide rolling window
    calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | Provide expanding
    window calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  prefs: []
  type: TYPE_TB
- en: '## Computations / descriptive stats'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | Compute pairwise correlation of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | Compute pairwise correlation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | Count non-NA cells for each
    column or row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | Compute pairwise covariance of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | Return cumulative maximum over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | Return cumulative minimum over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | Return cumulative product over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | Return cumulative sum over a DataFrame
    or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | First discrete difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | Evaluate a string describing operations on DataFrame columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | Return the median of
    the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | Get the mode(s) of each element along the selected axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | Fractional change
    between the current and a prior element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | Return the product of the values
    over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | Return values at
    the given quantile over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | Round a DataFrame to a variable number
    of decimal places. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | Count number of distinct elements
    in specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | Return a Series containing
    the frequency of each distinct row in the Dataframe. |'
  prefs: []
  type: TYPE_TB
- en: Reindexing / selection / label manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | Align two objects
    on their axes with the specified join method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | Select values at particular
    time of day (e.g., 9:30AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | Drop specified labels from rows or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | Return DataFrame with
    duplicate rows removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | Return boolean Series denoting
    duplicate rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | Test whether two objects contain the same
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | Subset the dataframe
    rows or columns according to the specified index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (DEPRECATED) Select initial periods of time
    series data based on a date offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | Return index of first
    occurrence of maximum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | Return index of first
    occurrence of minimum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | Conform DataFrame
    to new index with optional filling logic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | Return an object with
    matching indices as other object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | Rename columns or
    index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | Set the name of the axis
    for the index or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | Reset the index, or a level
    of it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | Return a random sample of
    items from an axis of object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | Assign desired index to
    given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | Set the DataFrame
    index using existing columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | Truncate a Series
    or DataFrame before and after some index value. |'
  prefs: []
  type: TYPE_TB
- en: '## Missing data handling'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (DEPRECATED) Fill NA/NaN
    values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | Remove missing values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by propagating the last valid observation to next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | Fill NA/NaN values using
    the specified method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | Fill NaN values
    using an interpolation method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull is an alias for DataFrame.isna.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull is an alias for DataFrame.notna.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | Replace values given in
    to_replace with value. |'
  prefs: []
  type: TYPE_TB
- en: Reshaping, sorting, transposing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | Return reshaped DataFrame
    organized by given index / column values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | Create a spreadsheet-style
    pivot table as a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | Rearrange index levels using
    input order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | Sort by the values along
    either axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | Sort object by labels
    (along an axis). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in descending order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in ascending order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | Stack the prescribed level(s)
    from columns to index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | Pivot a level of the
    (necessarily hierarchical) index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | (DEPRECATED) Interchange
    axes and swap values axes appropriately. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | Transform each element of
    a list-like to a row, replicating index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | Squeeze 1 dimensional axis objects into
    scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | Return an xarray object from the pandas object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | The transpose of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | Transpose index and columns. |'
  prefs: []
  type: TYPE_TB
- en: Combining / comparing / joining / merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | Assign new columns to a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | Compare to another DataFrame
    and show the differences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | Join columns of another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | Merge DataFrame or
    named Series objects with a database-style join. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | Modify in place using
    non-NA values from another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: Time Series-related
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | Convert time series to
    specified frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | Shift index by desired
    number of periods with an optional time freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | Return index for first non-NA value
    or None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | Return index for last non-NA value or
    None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | Resample time-series
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | Convert DataFrame from DatetimeIndex
    to PeriodIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | Cast to DatetimeIndex
    of timestamps, at *beginning* of period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis
    to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | Localize tz-naive index
    of a Series or DataFrame to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '## Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |  ## Metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") is a dictionary for storing global metadata for this
    DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.attrs` is considered experimental and may change without warning.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | Dictionary of global attributes of this dataset. |  ##
    Plotting'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `DataFrame.plot.<kind>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame plotting accessor and method |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | Vertical bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | Make a box plot of the DataFrame columns.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | Generate a hexagonal binning
    plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | Generate a pie plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | Create a scatter plot with varying
    marker point size and color. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | Make a box plot from DataFrame
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | Make a histogram of the DataFrame''s columns. |  ## Sparse accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse-dtype specific methods and attributes are provided under the `DataFrame.sparse`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | Ratio of non-sparse points to total (dense)
    data points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | Create a new DataFrame
    from a scipy sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | Return the contents of the frame as a sparse
    SciPy COO matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | Convert a DataFrame with sparse values
    to dense. |'
  prefs: []
  type: TYPE_TB
- en: Serialization / IO / conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | Construct DataFrame
    from dict of array-like or dicts. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, ...]) | Convert structured or record
    ndarray to DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | Write the contained data
    to an HDF5 file using HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | Convert the DataFrame to
    a dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | (DEPRECATED) Write a
    DataFrame to a Google BigQuery table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | Convert DataFrame
    to a NumPy record array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | Render a DataFrame to a console-friendly
    tabular output. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | Print DataFrame in
    Markdown-friendly format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | Returns a Styler object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | Return the dataframe interchange
    object implementing the interchange protocol. |'
  prefs: []
  type: TYPE_TB
- en: Constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame`](api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")([data, index, columns, dtype, copy])
    | Two-dimensional, size-mutable, potentially heterogeneous tabular data. |'
  prefs: []
  type: TYPE_TB
- en: Attributes and underlying data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Axes**'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.index`](api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") | The index (row labels) of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.columns`](api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") | The column labels of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dtypes`](api/pandas.DataFrame.dtypes.html#pandas.DataFrame.dtypes
    "pandas.DataFrame.dtypes") | Return the dtypes in the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.info`](api/pandas.DataFrame.info.html#pandas.DataFrame.info "pandas.DataFrame.info")([verbose, buf, max_cols, ...])
    | Print a concise summary of a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.select_dtypes`](api/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes
    "pandas.DataFrame.select_dtypes")([include, exclude]) | Return a subset of the
    DataFrame''s columns based on the column dtypes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.values`](api/pandas.DataFrame.values.html#pandas.DataFrame.values
    "pandas.DataFrame.values") | Return a Numpy representation of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.axes`](api/pandas.DataFrame.axes.html#pandas.DataFrame.axes "pandas.DataFrame.axes")
    | Return a list representing the axes of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ndim`](api/pandas.DataFrame.ndim.html#pandas.DataFrame.ndim "pandas.DataFrame.ndim")
    | Return an int representing the number of axes / array dimensions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.size`](api/pandas.DataFrame.size.html#pandas.DataFrame.size "pandas.DataFrame.size")
    | Return an int representing the number of elements in this object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.shape`](api/pandas.DataFrame.shape.html#pandas.DataFrame.shape
    "pandas.DataFrame.shape") | Return a tuple representing the dimensionality of
    the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.memory_usage`](api/pandas.DataFrame.memory_usage.html#pandas.DataFrame.memory_usage
    "pandas.DataFrame.memory_usage")([index, deep]) | Return the memory usage of each
    column in bytes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.empty`](api/pandas.DataFrame.empty.html#pandas.DataFrame.empty
    "pandas.DataFrame.empty") | Indicator whether Series/DataFrame is empty. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_flags`](api/pandas.DataFrame.set_flags.html#pandas.DataFrame.set_flags
    "pandas.DataFrame.set_flags")(*[, copy, ...]) | Return a new object with updated
    flags. |'
  prefs: []
  type: TYPE_TB
- en: Conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.astype`](api/pandas.DataFrame.astype.html#pandas.DataFrame.astype
    "pandas.DataFrame.astype")(dtype[, copy, errors]) | Cast a pandas object to a
    specified dtype `dtype`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.convert_dtypes`](api/pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")([infer_objects, ...]) | Convert columns to
    the best possible dtypes using dtypes supporting `pd.NA`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.infer_objects`](api/pandas.DataFrame.infer_objects.html#pandas.DataFrame.infer_objects
    "pandas.DataFrame.infer_objects")([copy]) | Attempt to infer better dtypes for
    object columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.copy`](api/pandas.DataFrame.copy.html#pandas.DataFrame.copy "pandas.DataFrame.copy")([deep])
    | Make a copy of this object''s indices and data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.bool`](api/pandas.DataFrame.bool.html#pandas.DataFrame.bool "pandas.DataFrame.bool")()
    | (DEPRECATED) Return the bool of a single element Series or DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_numpy`](api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy")([dtype, copy, na_value]) | Convert the DataFrame
    to a NumPy array. |'
  prefs: []
  type: TYPE_TB
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.at`](api/pandas.DataFrame.at.html#pandas.DataFrame.at "pandas.DataFrame.at")
    | Access a single value for a row/column label pair. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iat`](api/pandas.DataFrame.iat.html#pandas.DataFrame.iat "pandas.DataFrame.iat")
    | Access a single value for a row/column pair by integer position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.loc`](api/pandas.DataFrame.loc.html#pandas.DataFrame.loc "pandas.DataFrame.loc")
    | Access a group of rows and columns by label(s) or a boolean array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iloc`](api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc "pandas.DataFrame.iloc")
    | (DEPRECATED) Purely integer-location based indexing for selection by position.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.insert`](api/pandas.DataFrame.insert.html#pandas.DataFrame.insert
    "pandas.DataFrame.insert")(loc, column, value[, ...]) | Insert column into DataFrame
    at specified location. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.__iter__`](api/pandas.DataFrame.__iter__.html#pandas.DataFrame.__iter__
    "pandas.DataFrame.__iter__")() | Iterate over info axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.items`](api/pandas.DataFrame.items.html#pandas.DataFrame.items
    "pandas.DataFrame.items")() | Iterate over (column name, Series) pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.keys`](api/pandas.DataFrame.keys.html#pandas.DataFrame.keys "pandas.DataFrame.keys")()
    | Get the ''info axis'' (see Indexing for more). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.iterrows`](api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows
    "pandas.DataFrame.iterrows")() | Iterate over DataFrame rows as (index, Series)
    pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.itertuples`](api/pandas.DataFrame.itertuples.html#pandas.DataFrame.itertuples
    "pandas.DataFrame.itertuples")([index, name]) | Iterate over DataFrame rows as
    namedtuples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pop`](api/pandas.DataFrame.pop.html#pandas.DataFrame.pop "pandas.DataFrame.pop")(item)
    | Return item and drop from frame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.xs`](api/pandas.DataFrame.xs.html#pandas.DataFrame.xs "pandas.DataFrame.xs")(key[, axis, level, drop_level])
    | Return cross-section from the Series/DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.get`](api/pandas.DataFrame.get.html#pandas.DataFrame.get "pandas.DataFrame.get")(key[, default])
    | Get item from object for given key (ex: DataFrame column). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isin`](api/pandas.DataFrame.isin.html#pandas.DataFrame.isin "pandas.DataFrame.isin")(values)
    | Whether each element in the DataFrame is contained in values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.where`](api/pandas.DataFrame.where.html#pandas.DataFrame.where
    "pandas.DataFrame.where")(cond[, other, inplace, ...]) | Replace values where
    the condition is False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mask`](api/pandas.DataFrame.mask.html#pandas.DataFrame.mask "pandas.DataFrame.mask")(cond[, other, inplace, axis, ...])
    | Replace values where the condition is True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.query`](api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")(expr, *[, inplace]) | Query the columns of a DataFrame
    with a boolean expression. |'
  prefs: []
  type: TYPE_TB
- en: For more information on `.at`, `.iat`, `.loc`, and `.iloc`, see the [indexing
    documentation](../user_guide/indexing.html#indexing).
  prefs: []
  type: TYPE_NORMAL
- en: Binary operator functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.__add__`](api/pandas.DataFrame.__add__.html#pandas.DataFrame.__add__
    "pandas.DataFrame.__add__")(other) | Get Addition of DataFrame and other, column-wise.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.add`](api/pandas.DataFrame.add.html#pandas.DataFrame.add "pandas.DataFrame.add")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator add). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sub`](api/pandas.DataFrame.sub.html#pandas.DataFrame.sub "pandas.DataFrame.sub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator sub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mul`](api/pandas.DataFrame.mul.html#pandas.DataFrame.mul "pandas.DataFrame.mul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator mul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.div`](api/pandas.DataFrame.div.html#pandas.DataFrame.div "pandas.DataFrame.div")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.truediv`](api/pandas.DataFrame.truediv.html#pandas.DataFrame.truediv
    "pandas.DataFrame.truediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator truediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.floordiv`](api/pandas.DataFrame.floordiv.html#pandas.DataFrame.floordiv
    "pandas.DataFrame.floordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator floordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mod`](api/pandas.DataFrame.mod.html#pandas.DataFrame.mod "pandas.DataFrame.mod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator mod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pow`](api/pandas.DataFrame.pow.html#pandas.DataFrame.pow "pandas.DataFrame.pow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    pow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dot`](api/pandas.DataFrame.dot.html#pandas.DataFrame.dot "pandas.DataFrame.dot")(other)
    | Compute the matrix multiplication between the DataFrame and other. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.radd`](api/pandas.DataFrame.radd.html#pandas.DataFrame.radd "pandas.DataFrame.radd")(other[, axis, level, fill_value])
    | Get Addition of dataframe and other, element-wise (binary operator radd). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rsub`](api/pandas.DataFrame.rsub.html#pandas.DataFrame.rsub "pandas.DataFrame.rsub")(other[, axis, level, fill_value])
    | Get Subtraction of dataframe and other, element-wise (binary operator rsub).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rmul`](api/pandas.DataFrame.rmul.html#pandas.DataFrame.rmul "pandas.DataFrame.rmul")(other[, axis, level, fill_value])
    | Get Multiplication of dataframe and other, element-wise (binary operator rmul).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rdiv`](api/pandas.DataFrame.rdiv.html#pandas.DataFrame.rdiv "pandas.DataFrame.rdiv")(other[, axis, level, fill_value])
    | Get Floating division of dataframe and other, element-wise (binary operator
    rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rtruediv`](api/pandas.DataFrame.rtruediv.html#pandas.DataFrame.rtruediv
    "pandas.DataFrame.rtruediv")(other[, axis, level, ...]) | Get Floating division
    of dataframe and other, element-wise (binary operator rtruediv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rfloordiv`](api/pandas.DataFrame.rfloordiv.html#pandas.DataFrame.rfloordiv
    "pandas.DataFrame.rfloordiv")(other[, axis, level, ...]) | Get Integer division
    of dataframe and other, element-wise (binary operator rfloordiv). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rmod`](api/pandas.DataFrame.rmod.html#pandas.DataFrame.rmod "pandas.DataFrame.rmod")(other[, axis, level, fill_value])
    | Get Modulo of dataframe and other, element-wise (binary operator rmod). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rpow`](api/pandas.DataFrame.rpow.html#pandas.DataFrame.rpow "pandas.DataFrame.rpow")(other[, axis, level, fill_value])
    | Get Exponential power of dataframe and other, element-wise (binary operator
    rpow). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.lt`](api/pandas.DataFrame.lt.html#pandas.DataFrame.lt "pandas.DataFrame.lt")(other[, axis, level])
    | Get Less than of dataframe and other, element-wise (binary operator lt). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.gt`](api/pandas.DataFrame.gt.html#pandas.DataFrame.gt "pandas.DataFrame.gt")(other[, axis, level])
    | Get Greater than of dataframe and other, element-wise (binary operator gt).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.le`](api/pandas.DataFrame.le.html#pandas.DataFrame.le "pandas.DataFrame.le")(other[, axis, level])
    | Get Less than or equal to of dataframe and other, element-wise (binary operator
    le). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ge`](api/pandas.DataFrame.ge.html#pandas.DataFrame.ge "pandas.DataFrame.ge")(other[, axis, level])
    | Get Greater than or equal to of dataframe and other, element-wise (binary operator
    ge). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ne`](api/pandas.DataFrame.ne.html#pandas.DataFrame.ne "pandas.DataFrame.ne")(other[, axis, level])
    | Get Not equal to of dataframe and other, element-wise (binary operator ne).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.eq`](api/pandas.DataFrame.eq.html#pandas.DataFrame.eq "pandas.DataFrame.eq")(other[, axis, level])
    | Get Equal to of dataframe and other, element-wise (binary operator eq). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.combine`](api/pandas.DataFrame.combine.html#pandas.DataFrame.combine
    "pandas.DataFrame.combine")(other, func[, fill_value, ...]) | Perform column-wise
    combine with another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.combine_first`](api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")(other) | Update null elements with value in
    the same location in other. |'
  prefs: []
  type: TYPE_TB
- en: Function application, GroupBy & window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.apply`](api/pandas.DataFrame.apply.html#pandas.DataFrame.apply
    "pandas.DataFrame.apply")(func[, axis, raw, ...]) | Apply a function along an
    axis of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.map`](api/pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")(func[, na_action])
    | Apply a function to a Dataframe elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.applymap`](api/pandas.DataFrame.applymap.html#pandas.DataFrame.applymap
    "pandas.DataFrame.applymap")(func[, na_action]) | (DEPRECATED) Apply a function
    to a Dataframe elementwise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pipe`](api/pandas.DataFrame.pipe.html#pandas.DataFrame.pipe "pandas.DataFrame.pipe")(func, *args, **kwargs)
    | Apply chainable functions that expect Series or DataFrames. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.agg`](api/pandas.DataFrame.agg.html#pandas.DataFrame.agg "pandas.DataFrame.agg")([func, axis])
    | Aggregate using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.aggregate`](api/pandas.DataFrame.aggregate.html#pandas.DataFrame.aggregate
    "pandas.DataFrame.aggregate")([func, axis]) | Aggregate using one or more operations
    over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.transform`](api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform")(func[, axis]) | Call `func` on self producing a
    DataFrame with the same axis shape as self. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.groupby`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby")([by, axis, level, ...]) | Group DataFrame using a
    mapper or by a Series of columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rolling`](api/pandas.DataFrame.rolling.html#pandas.DataFrame.rolling
    "pandas.DataFrame.rolling")(window[, min_periods, ...]) | Provide rolling window
    calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.expanding`](api/pandas.DataFrame.expanding.html#pandas.DataFrame.expanding
    "pandas.DataFrame.expanding")([min_periods, axis, method]) | Provide expanding
    window calculations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ewm`](api/pandas.DataFrame.ewm.html#pandas.DataFrame.ewm "pandas.DataFrame.ewm")([com, span, halflife, alpha, ...])
    | Provide exponentially weighted (EW) calculations. |'
  prefs: []
  type: TYPE_TB
- en: '## Computations / descriptive stats'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.abs`](api/pandas.DataFrame.abs.html#pandas.DataFrame.abs "pandas.DataFrame.abs")()
    | Return a Series/DataFrame with absolute numeric value of each element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.all`](api/pandas.DataFrame.all.html#pandas.DataFrame.all "pandas.DataFrame.all")([axis, bool_only, skipna])
    | Return whether all elements are True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.any`](api/pandas.DataFrame.any.html#pandas.DataFrame.any "pandas.DataFrame.any")(*[, axis, bool_only, skipna])
    | Return whether any element is True, potentially over an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.clip`](api/pandas.DataFrame.clip.html#pandas.DataFrame.clip "pandas.DataFrame.clip")([lower, upper, axis, inplace])
    | Trim values at input threshold(s). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.corr`](api/pandas.DataFrame.corr.html#pandas.DataFrame.corr "pandas.DataFrame.corr")([method, min_periods, ...])
    | Compute pairwise correlation of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.corrwith`](api/pandas.DataFrame.corrwith.html#pandas.DataFrame.corrwith
    "pandas.DataFrame.corrwith")(other[, axis, drop, ...]) | Compute pairwise correlation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.count`](api/pandas.DataFrame.count.html#pandas.DataFrame.count
    "pandas.DataFrame.count")([axis, numeric_only]) | Count non-NA cells for each
    column or row. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cov`](api/pandas.DataFrame.cov.html#pandas.DataFrame.cov "pandas.DataFrame.cov")([min_periods, ddof, numeric_only])
    | Compute pairwise covariance of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cummax`](api/pandas.DataFrame.cummax.html#pandas.DataFrame.cummax
    "pandas.DataFrame.cummax")([axis, skipna]) | Return cumulative maximum over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cummin`](api/pandas.DataFrame.cummin.html#pandas.DataFrame.cummin
    "pandas.DataFrame.cummin")([axis, skipna]) | Return cumulative minimum over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cumprod`](api/pandas.DataFrame.cumprod.html#pandas.DataFrame.cumprod
    "pandas.DataFrame.cumprod")([axis, skipna]) | Return cumulative product over a
    DataFrame or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.cumsum`](api/pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum
    "pandas.DataFrame.cumsum")([axis, skipna]) | Return cumulative sum over a DataFrame
    or Series axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.describe`](api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe")([percentiles, include, ...]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.diff`](api/pandas.DataFrame.diff.html#pandas.DataFrame.diff "pandas.DataFrame.diff")([periods, axis])
    | First discrete difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.eval`](api/pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")(expr, *[, inplace])
    | Evaluate a string describing operations on DataFrame columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.kurt`](api/pandas.DataFrame.kurt.html#pandas.DataFrame.kurt "pandas.DataFrame.kurt")([axis, skipna, numeric_only])
    | Return unbiased kurtosis over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.kurtosis`](api/pandas.DataFrame.kurtosis.html#pandas.DataFrame.kurtosis
    "pandas.DataFrame.kurtosis")([axis, skipna, numeric_only]) | Return unbiased kurtosis
    over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.max`](api/pandas.DataFrame.max.html#pandas.DataFrame.max "pandas.DataFrame.max")([axis, skipna, numeric_only])
    | Return the maximum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mean`](api/pandas.DataFrame.mean.html#pandas.DataFrame.mean "pandas.DataFrame.mean")([axis, skipna, numeric_only])
    | Return the mean of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.median`](api/pandas.DataFrame.median.html#pandas.DataFrame.median
    "pandas.DataFrame.median")([axis, skipna, numeric_only]) | Return the median of
    the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.min`](api/pandas.DataFrame.min.html#pandas.DataFrame.min "pandas.DataFrame.min")([axis, skipna, numeric_only])
    | Return the minimum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.mode`](api/pandas.DataFrame.mode.html#pandas.DataFrame.mode "pandas.DataFrame.mode")([axis, numeric_only, dropna])
    | Get the mode(s) of each element along the selected axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pct_change`](api/pandas.DataFrame.pct_change.html#pandas.DataFrame.pct_change
    "pandas.DataFrame.pct_change")([periods, fill_method, ...]) | Fractional change
    between the current and a prior element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.prod`](api/pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")([axis, skipna, numeric_only, ...])
    | Return the product of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.product`](api/pandas.DataFrame.product.html#pandas.DataFrame.product
    "pandas.DataFrame.product")([axis, skipna, ...]) | Return the product of the values
    over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.quantile`](api/pandas.DataFrame.quantile.html#pandas.DataFrame.quantile
    "pandas.DataFrame.quantile")([q, axis, numeric_only, ...]) | Return values at
    the given quantile over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rank`](api/pandas.DataFrame.rank.html#pandas.DataFrame.rank "pandas.DataFrame.rank")([axis, method, numeric_only, ...])
    | Compute numerical data ranks (1 through n) along axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.round`](api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round")([decimals]) | Round a DataFrame to a variable number
    of decimal places. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sem`](api/pandas.DataFrame.sem.html#pandas.DataFrame.sem "pandas.DataFrame.sem")([axis, skipna, ddof, numeric_only])
    | Return unbiased standard error of the mean over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.skew`](api/pandas.DataFrame.skew.html#pandas.DataFrame.skew "pandas.DataFrame.skew")([axis, skipna, numeric_only])
    | Return unbiased skew over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sum`](api/pandas.DataFrame.sum.html#pandas.DataFrame.sum "pandas.DataFrame.sum")([axis, skipna, numeric_only, ...])
    | Return the sum of the values over the requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.std`](api/pandas.DataFrame.std.html#pandas.DataFrame.std "pandas.DataFrame.std")([axis, skipna, ddof, numeric_only])
    | Return sample standard deviation over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.var`](api/pandas.DataFrame.var.html#pandas.DataFrame.var "pandas.DataFrame.var")([axis, skipna, ddof, numeric_only])
    | Return unbiased variance over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nunique`](api/pandas.DataFrame.nunique.html#pandas.DataFrame.nunique
    "pandas.DataFrame.nunique")([axis, dropna]) | Count number of distinct elements
    in specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.value_counts`](api/pandas.DataFrame.value_counts.html#pandas.DataFrame.value_counts
    "pandas.DataFrame.value_counts")([subset, normalize, ...]) | Return a Series containing
    the frequency of each distinct row in the Dataframe. |'
  prefs: []
  type: TYPE_TB
- en: Reindexing / selection / label manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.add_prefix`](api/pandas.DataFrame.add_prefix.html#pandas.DataFrame.add_prefix
    "pandas.DataFrame.add_prefix")(prefix[, axis]) | Prefix labels with string prefix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.add_suffix`](api/pandas.DataFrame.add_suffix.html#pandas.DataFrame.add_suffix
    "pandas.DataFrame.add_suffix")(suffix[, axis]) | Suffix labels with string suffix.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.align`](api/pandas.DataFrame.align.html#pandas.DataFrame.align
    "pandas.DataFrame.align")(other[, join, axis, level, ...]) | Align two objects
    on their axes with the specified join method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.at_time`](api/pandas.DataFrame.at_time.html#pandas.DataFrame.at_time
    "pandas.DataFrame.at_time")(time[, asof, axis]) | Select values at particular
    time of day (e.g., 9:30AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.between_time`](api/pandas.DataFrame.between_time.html#pandas.DataFrame.between_time
    "pandas.DataFrame.between_time")(start_time, end_time) | Select values between
    particular times of the day (e.g., 9:00-9:30 AM). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.drop`](api/pandas.DataFrame.drop.html#pandas.DataFrame.drop "pandas.DataFrame.drop")([labels, axis, index, ...])
    | Drop specified labels from rows or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.drop_duplicates`](api/pandas.DataFrame.drop_duplicates.html#pandas.DataFrame.drop_duplicates
    "pandas.DataFrame.drop_duplicates")([subset, keep, ...]) | Return DataFrame with
    duplicate rows removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.duplicated`](api/pandas.DataFrame.duplicated.html#pandas.DataFrame.duplicated
    "pandas.DataFrame.duplicated")([subset, keep]) | Return boolean Series denoting
    duplicate rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.equals`](api/pandas.DataFrame.equals.html#pandas.DataFrame.equals
    "pandas.DataFrame.equals")(other) | Test whether two objects contain the same
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.filter`](api/pandas.DataFrame.filter.html#pandas.DataFrame.filter
    "pandas.DataFrame.filter")([items, like, regex, axis]) | Subset the dataframe
    rows or columns according to the specified index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.first`](api/pandas.DataFrame.first.html#pandas.DataFrame.first
    "pandas.DataFrame.first")(offset) | (DEPRECATED) Select initial periods of time
    series data based on a date offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.head`](api/pandas.DataFrame.head.html#pandas.DataFrame.head "pandas.DataFrame.head")([n])
    | Return the first n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.idxmax`](api/pandas.DataFrame.idxmax.html#pandas.DataFrame.idxmax
    "pandas.DataFrame.idxmax")([axis, skipna, numeric_only]) | Return index of first
    occurrence of maximum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.idxmin`](api/pandas.DataFrame.idxmin.html#pandas.DataFrame.idxmin
    "pandas.DataFrame.idxmin")([axis, skipna, numeric_only]) | Return index of first
    occurrence of minimum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.last`](api/pandas.DataFrame.last.html#pandas.DataFrame.last "pandas.DataFrame.last")(offset)
    | (DEPRECATED) Select final periods of time series data based on a date offset.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reindex`](api/pandas.DataFrame.reindex.html#pandas.DataFrame.reindex
    "pandas.DataFrame.reindex")([labels, index, columns, ...]) | Conform DataFrame
    to new index with optional filling logic. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reindex_like`](api/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")(other[, method, ...]) | Return an object with
    matching indices as other object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rename`](api/pandas.DataFrame.rename.html#pandas.DataFrame.rename
    "pandas.DataFrame.rename")([mapper, index, columns, ...]) | Rename columns or
    index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.rename_axis`](api/pandas.DataFrame.rename_axis.html#pandas.DataFrame.rename_axis
    "pandas.DataFrame.rename_axis")([mapper, index, ...]) | Set the name of the axis
    for the index or columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reset_index`](api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")([level, drop, ...]) | Reset the index, or a level
    of it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sample`](api/pandas.DataFrame.sample.html#pandas.DataFrame.sample
    "pandas.DataFrame.sample")([n, frac, replace, ...]) | Return a random sample of
    items from an axis of object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_axis`](api/pandas.DataFrame.set_axis.html#pandas.DataFrame.set_axis
    "pandas.DataFrame.set_axis")(labels, *[, axis, copy]) | Assign desired index to
    given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.set_index`](api/pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")(keys, *[, drop, append, ...]) | Set the DataFrame
    index using existing columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tail`](api/pandas.DataFrame.tail.html#pandas.DataFrame.tail "pandas.DataFrame.tail")([n])
    | Return the last n rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.take`](api/pandas.DataFrame.take.html#pandas.DataFrame.take "pandas.DataFrame.take")(indices[, axis])
    | Return the elements in the given *positional* indices along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.truncate`](api/pandas.DataFrame.truncate.html#pandas.DataFrame.truncate
    "pandas.DataFrame.truncate")([before, after, axis, copy]) | Truncate a Series
    or DataFrame before and after some index value. |'
  prefs: []
  type: TYPE_TB
- en: '## Missing data handling'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.backfill`](api/pandas.DataFrame.backfill.html#pandas.DataFrame.backfill
    "pandas.DataFrame.backfill")(*[, axis, inplace, ...]) | (DEPRECATED) Fill NA/NaN
    values by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.bfill`](api/pandas.DataFrame.bfill.html#pandas.DataFrame.bfill
    "pandas.DataFrame.bfill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by using the next valid observation to fill the gap. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.dropna`](api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna")(*[, axis, how, thresh, ...]) | Remove missing values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.ffill`](api/pandas.DataFrame.ffill.html#pandas.DataFrame.ffill
    "pandas.DataFrame.ffill")(*[, axis, inplace, limit, ...]) | Fill NA/NaN values
    by propagating the last valid observation to next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.fillna`](api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna")([value, method, axis, ...]) | Fill NA/NaN values using
    the specified method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.interpolate`](api/pandas.DataFrame.interpolate.html#pandas.DataFrame.interpolate
    "pandas.DataFrame.interpolate")([method, axis, limit, ...]) | Fill NaN values
    using an interpolation method. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isna`](api/pandas.DataFrame.isna.html#pandas.DataFrame.isna "pandas.DataFrame.isna")()
    | Detect missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.isnull`](api/pandas.DataFrame.isnull.html#pandas.DataFrame.isnull
    "pandas.DataFrame.isnull")() | DataFrame.isnull is an alias for DataFrame.isna.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.notna`](api/pandas.DataFrame.notna.html#pandas.DataFrame.notna
    "pandas.DataFrame.notna")() | Detect existing (non-missing) values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.notnull`](api/pandas.DataFrame.notnull.html#pandas.DataFrame.notnull
    "pandas.DataFrame.notnull")() | DataFrame.notnull is an alias for DataFrame.notna.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pad`](api/pandas.DataFrame.pad.html#pandas.DataFrame.pad "pandas.DataFrame.pad")(*[, axis, inplace, limit, ...])
    | (DEPRECATED) Fill NA/NaN values by propagating the last valid observation to
    next valid. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.replace`](api/pandas.DataFrame.replace.html#pandas.DataFrame.replace
    "pandas.DataFrame.replace")([to_replace, value, ...]) | Replace values given in
    to_replace with value. |'
  prefs: []
  type: TYPE_TB
- en: Reshaping, sorting, transposing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.droplevel`](api/pandas.DataFrame.droplevel.html#pandas.DataFrame.droplevel
    "pandas.DataFrame.droplevel")(level[, axis]) | Return Series/DataFrame with requested
    index / column level(s) removed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pivot`](api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot")(*, columns[, index, values]) | Return reshaped DataFrame
    organized by given index / column values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.pivot_table`](api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table")([values, index, ...]) | Create a spreadsheet-style
    pivot table as a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.reorder_levels`](api/pandas.DataFrame.reorder_levels.html#pandas.DataFrame.reorder_levels
    "pandas.DataFrame.reorder_levels")(order[, axis]) | Rearrange index levels using
    input order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sort_values`](api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values")(by, *[, axis, ...]) | Sort by the values along
    either axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sort_index`](api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index")(*[, axis, level, ...]) | Sort object by labels
    (along an axis). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nlargest`](api/pandas.DataFrame.nlargest.html#pandas.DataFrame.nlargest
    "pandas.DataFrame.nlargest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in descending order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.nsmallest`](api/pandas.DataFrame.nsmallest.html#pandas.DataFrame.nsmallest
    "pandas.DataFrame.nsmallest")(n, columns[, keep]) | Return the first n rows ordered
    by columns in ascending order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.swaplevel`](api/pandas.DataFrame.swaplevel.html#pandas.DataFrame.swaplevel
    "pandas.DataFrame.swaplevel")([i, j, axis]) | Swap levels i and j in a [`MultiIndex`](api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"). |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.stack`](api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")([level, dropna, sort, ...]) | Stack the prescribed level(s)
    from columns to index. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.unstack`](api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")([level, fill_value, sort]) | Pivot a level of the
    (necessarily hierarchical) index labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.swapaxes`](api/pandas.DataFrame.swapaxes.html#pandas.DataFrame.swapaxes
    "pandas.DataFrame.swapaxes")(axis1, axis2[, copy]) | (DEPRECATED) Interchange
    axes and swap values axes appropriately. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.melt`](api/pandas.DataFrame.melt.html#pandas.DataFrame.melt "pandas.DataFrame.melt")([id_vars, value_vars, ...])
    | Unpivot a DataFrame from wide to long format, optionally leaving identifiers
    set. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.explode`](api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode")(column[, ignore_index]) | Transform each element of
    a list-like to a row, replicating index values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.squeeze`](api/pandas.DataFrame.squeeze.html#pandas.DataFrame.squeeze
    "pandas.DataFrame.squeeze")([axis]) | Squeeze 1 dimensional axis objects into
    scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_xarray`](api/pandas.DataFrame.to_xarray.html#pandas.DataFrame.to_xarray
    "pandas.DataFrame.to_xarray")() | Return an xarray object from the pandas object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.T`](api/pandas.DataFrame.T.html#pandas.DataFrame.T "pandas.DataFrame.T")
    | The transpose of the DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.transpose`](api/pandas.DataFrame.transpose.html#pandas.DataFrame.transpose
    "pandas.DataFrame.transpose")(*args[, copy]) | Transpose index and columns. |'
  prefs: []
  type: TYPE_TB
- en: Combining / comparing / joining / merging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.assign`](api/pandas.DataFrame.assign.html#pandas.DataFrame.assign
    "pandas.DataFrame.assign")(**kwargs) | Assign new columns to a DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.compare`](api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare")(other[, align_axis, ...]) | Compare to another DataFrame
    and show the differences. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.join`](api/pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")(other[, on, how, lsuffix, ...])
    | Join columns of another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.merge`](api/pandas.DataFrame.merge.html#pandas.DataFrame.merge
    "pandas.DataFrame.merge")(right[, how, on, left_on, ...]) | Merge DataFrame or
    named Series objects with a database-style join. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.update`](api/pandas.DataFrame.update.html#pandas.DataFrame.update
    "pandas.DataFrame.update")(other[, join, overwrite, ...]) | Modify in place using
    non-NA values from another DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: Time Series-related
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.asfreq`](api/pandas.DataFrame.asfreq.html#pandas.DataFrame.asfreq
    "pandas.DataFrame.asfreq")(freq[, method, how, ...]) | Convert time series to
    specified frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.asof`](api/pandas.DataFrame.asof.html#pandas.DataFrame.asof "pandas.DataFrame.asof")(where[, subset])
    | Return the last row(s) without any NaNs before where. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.shift`](api/pandas.DataFrame.shift.html#pandas.DataFrame.shift
    "pandas.DataFrame.shift")([periods, freq, axis, ...]) | Shift index by desired
    number of periods with an optional time freq. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.first_valid_index`](api/pandas.DataFrame.first_valid_index.html#pandas.DataFrame.first_valid_index
    "pandas.DataFrame.first_valid_index")() | Return index for first non-NA value
    or None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.last_valid_index`](api/pandas.DataFrame.last_valid_index.html#pandas.DataFrame.last_valid_index
    "pandas.DataFrame.last_valid_index")() | Return index for last non-NA value or
    None, if no non-NA value is found. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.resample`](api/pandas.DataFrame.resample.html#pandas.DataFrame.resample
    "pandas.DataFrame.resample")(rule[, axis, closed, ...]) | Resample time-series
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_period`](api/pandas.DataFrame.to_period.html#pandas.DataFrame.to_period
    "pandas.DataFrame.to_period")([freq, axis, copy]) | Convert DataFrame from DatetimeIndex
    to PeriodIndex. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_timestamp`](api/pandas.DataFrame.to_timestamp.html#pandas.DataFrame.to_timestamp
    "pandas.DataFrame.to_timestamp")([freq, how, axis, copy]) | Cast to DatetimeIndex
    of timestamps, at *beginning* of period. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tz_convert`](api/pandas.DataFrame.tz_convert.html#pandas.DataFrame.tz_convert
    "pandas.DataFrame.tz_convert")(tz[, axis, level, copy]) | Convert tz-aware axis
    to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.tz_localize`](api/pandas.DataFrame.tz_localize.html#pandas.DataFrame.tz_localize
    "pandas.DataFrame.tz_localize")(tz[, axis, level, ...]) | Localize tz-naive index
    of a Series or DataFrame to target time zone. |'
  prefs: []
  type: TYPE_TB
- en: '## Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Flags refer to attributes of the pandas object. Properties of the dataset (like
    the date is was recorded, the URL it was accessed from, etc.) should be stored
    in [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs").
  prefs: []
  type: TYPE_NORMAL
- en: '| [`Flags`](api/pandas.Flags.html#pandas.Flags "pandas.Flags")(obj, *, allows_duplicate_labels)
    | Flags that apply to pandas objects. |'
  prefs: []
  type: TYPE_TB
- en: '## Metadata'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") is a dictionary for storing global metadata for this
    DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.attrs` is considered experimental and may change without warning.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.attrs`](api/pandas.DataFrame.attrs.html#pandas.DataFrame.attrs
    "pandas.DataFrame.attrs") | Dictionary of global attributes of this dataset. |'
  prefs: []
  type: TYPE_TB
- en: '## Plotting'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.plot` is both a callable method and a namespace attribute for specific
    plotting methods of the form `DataFrame.plot.<kind>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.plot`](api/pandas.DataFrame.plot.html#pandas.DataFrame.plot "pandas.DataFrame.plot")([x, y, kind, ax, ....])
    | DataFrame plotting accessor and method |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.area`](api/pandas.DataFrame.plot.area.html#pandas.DataFrame.plot.area
    "pandas.DataFrame.plot.area")([x, y, stacked]) | Draw a stacked area plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.bar`](api/pandas.DataFrame.plot.bar.html#pandas.DataFrame.plot.bar
    "pandas.DataFrame.plot.bar")([x, y]) | Vertical bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.barh`](api/pandas.DataFrame.plot.barh.html#pandas.DataFrame.plot.barh
    "pandas.DataFrame.plot.barh")([x, y]) | Make a horizontal bar plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.box`](api/pandas.DataFrame.plot.box.html#pandas.DataFrame.plot.box
    "pandas.DataFrame.plot.box")([by]) | Make a box plot of the DataFrame columns.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.density`](api/pandas.DataFrame.plot.density.html#pandas.DataFrame.plot.density
    "pandas.DataFrame.plot.density")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.hexbin`](api/pandas.DataFrame.plot.hexbin.html#pandas.DataFrame.plot.hexbin
    "pandas.DataFrame.plot.hexbin")(x, y[, C, ...]) | Generate a hexagonal binning
    plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.hist`](api/pandas.DataFrame.plot.hist.html#pandas.DataFrame.plot.hist
    "pandas.DataFrame.plot.hist")([by, bins]) | Draw one histogram of the DataFrame''s
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.kde`](api/pandas.DataFrame.plot.kde.html#pandas.DataFrame.plot.kde
    "pandas.DataFrame.plot.kde")([bw_method, ind]) | Generate Kernel Density Estimate
    plot using Gaussian kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.line`](api/pandas.DataFrame.plot.line.html#pandas.DataFrame.plot.line
    "pandas.DataFrame.plot.line")([x, y]) | Plot Series or DataFrame as lines. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.pie`](api/pandas.DataFrame.plot.pie.html#pandas.DataFrame.plot.pie
    "pandas.DataFrame.plot.pie")(**kwargs) | Generate a pie plot. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.plot.scatter`](api/pandas.DataFrame.plot.scatter.html#pandas.DataFrame.plot.scatter
    "pandas.DataFrame.plot.scatter")(x, y[, s, c]) | Create a scatter plot with varying
    marker point size and color. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.boxplot`](api/pandas.DataFrame.boxplot.html#pandas.DataFrame.boxplot
    "pandas.DataFrame.boxplot")([column, by, ax, ...]) | Make a box plot from DataFrame
    columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.hist`](api/pandas.DataFrame.hist.html#pandas.DataFrame.hist "pandas.DataFrame.hist")([column, by, grid, ...])
    | Make a histogram of the DataFrame''s columns. |'
  prefs: []
  type: TYPE_TB
- en: '## Sparse accessor'
  prefs: []
  type: TYPE_NORMAL
- en: Sparse-dtype specific methods and attributes are provided under the `DataFrame.sparse`
    accessor.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`DataFrame.sparse.density`](api/pandas.DataFrame.sparse.density.html#pandas.DataFrame.sparse.density
    "pandas.DataFrame.sparse.density") | Ratio of non-sparse points to total (dense)
    data points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.from_spmatrix`](api/pandas.DataFrame.sparse.from_spmatrix.html#pandas.DataFrame.sparse.from_spmatrix
    "pandas.DataFrame.sparse.from_spmatrix")(data[, ...]) | Create a new DataFrame
    from a scipy sparse matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.to_coo`](api/pandas.DataFrame.sparse.to_coo.html#pandas.DataFrame.sparse.to_coo
    "pandas.DataFrame.sparse.to_coo")() | Return the contents of the frame as a sparse
    SciPy COO matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.sparse.to_dense`](api/pandas.DataFrame.sparse.to_dense.html#pandas.DataFrame.sparse.to_dense
    "pandas.DataFrame.sparse.to_dense")() | Convert a DataFrame with sparse values
    to dense. |'
  prefs: []
  type: TYPE_TB
- en: Serialization / IO / conversion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrame.from_dict`](api/pandas.DataFrame.from_dict.html#pandas.DataFrame.from_dict
    "pandas.DataFrame.from_dict")(data[, orient, dtype, ...]) | Construct DataFrame
    from dict of array-like or dicts. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.from_records`](api/pandas.DataFrame.from_records.html#pandas.DataFrame.from_records
    "pandas.DataFrame.from_records")(data[, index, ...]) | Convert structured or record
    ndarray to DataFrame. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_orc`](api/pandas.DataFrame.to_orc.html#pandas.DataFrame.to_orc
    "pandas.DataFrame.to_orc")([path, engine, index, ...]) | Write a DataFrame to
    the ORC format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_parquet`](api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")([path, engine, ...]) | Write a DataFrame to the
    binary parquet format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_pickle`](api/pandas.DataFrame.to_pickle.html#pandas.DataFrame.to_pickle
    "pandas.DataFrame.to_pickle")(path, *[, compression, ...]) | Pickle (serialize)
    object to file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_csv`](api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")([path_or_buf, sep, na_rep, ...]) | Write object to
    a comma-separated values (csv) file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_hdf`](api/pandas.DataFrame.to_hdf.html#pandas.DataFrame.to_hdf
    "pandas.DataFrame.to_hdf")(path_or_buf, *, key[, ...]) | Write the contained data
    to an HDF5 file using HDFStore. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_sql`](api/pandas.DataFrame.to_sql.html#pandas.DataFrame.to_sql
    "pandas.DataFrame.to_sql")(name, con, *[, schema, ...]) | Write records stored
    in a DataFrame to a SQL database. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_dict`](api/pandas.DataFrame.to_dict.html#pandas.DataFrame.to_dict
    "pandas.DataFrame.to_dict")([orient, into, index]) | Convert the DataFrame to
    a dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_excel`](api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel")(excel_writer, *[, ...]) | Write object to an Excel
    sheet. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_json`](api/pandas.DataFrame.to_json.html#pandas.DataFrame.to_json
    "pandas.DataFrame.to_json")([path_or_buf, orient, ...]) | Convert the object to
    a JSON string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_html`](api/pandas.DataFrame.to_html.html#pandas.DataFrame.to_html
    "pandas.DataFrame.to_html")([buf, columns, col_space, ...]) | Render a DataFrame
    as an HTML table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_feather`](api/pandas.DataFrame.to_feather.html#pandas.DataFrame.to_feather
    "pandas.DataFrame.to_feather")(path, **kwargs) | Write a DataFrame to the binary
    Feather format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_latex`](api/pandas.DataFrame.to_latex.html#pandas.DataFrame.to_latex
    "pandas.DataFrame.to_latex")([buf, columns, header, ...]) | Render object to a
    LaTeX tabular, longtable, or nested table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_stata`](api/pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")(path, *[, convert_dates, ...]) | Export DataFrame
    object to Stata dta format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_gbq`](api/pandas.DataFrame.to_gbq.html#pandas.DataFrame.to_gbq
    "pandas.DataFrame.to_gbq")(destination_table, *[, ...]) | (DEPRECATED) Write a
    DataFrame to a Google BigQuery table. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_records`](api/pandas.DataFrame.to_records.html#pandas.DataFrame.to_records
    "pandas.DataFrame.to_records")([index, column_dtypes, ...]) | Convert DataFrame
    to a NumPy record array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_string`](api/pandas.DataFrame.to_string.html#pandas.DataFrame.to_string
    "pandas.DataFrame.to_string")([buf, columns, ...]) | Render a DataFrame to a console-friendly
    tabular output. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_clipboard`](api/pandas.DataFrame.to_clipboard.html#pandas.DataFrame.to_clipboard
    "pandas.DataFrame.to_clipboard")(*[, excel, sep]) | Copy object to the system
    clipboard. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.to_markdown`](api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown")([buf, mode, index, ...]) | Print DataFrame in
    Markdown-friendly format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.style`](api/pandas.DataFrame.style.html#pandas.DataFrame.style
    "pandas.DataFrame.style") | Returns a Styler object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrame.__dataframe__`](api/pandas.DataFrame.__dataframe__.html#pandas.DataFrame.__dataframe__
    "pandas.DataFrame.__dataframe__")([nan_as_null, ...]) | Return the dataframe interchange
    object implementing the interchange protocol. |'
  prefs: []
  type: TYPE_TB
