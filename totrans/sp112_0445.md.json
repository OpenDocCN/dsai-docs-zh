["```py\nscipy.optimize.shgo(func, bounds, args=(), constraints=None, n=100, iters=1, callback=None, minimizer_kwargs=None, options=None, sampling_method='simplicial', *, workers=1)\n```", "```py\nminimize f(x) subject to\n\ng_i(x) >= 0,  i = 1,...,m\nh_j(x)  = 0,  j = 1,...,p \n```", "```py\n>>> from scipy.optimize import rosen, shgo\n>>> bounds = [(0,2), (0, 2), (0, 2), (0, 2), (0, 2)]\n>>> result = shgo(rosen, bounds)\n>>> result.x, result.fun\n(array([1., 1., 1., 1., 1.]), 2.920392374190081e-18) \n```", "```py\n>>> bounds = [(None, None), ]*4\n>>> result = shgo(rosen, bounds)\n>>> result.x\narray([0.99999851, 0.99999704, 0.99999411, 0.9999882 ]) \n```", "```py\n>>> import numpy as np\n>>> def eggholder(x):\n...     return (-(x[1] + 47.0)\n...             * np.sin(np.sqrt(abs(x[0]/2.0 + (x[1] + 47.0))))\n...             - x[0] * np.sin(np.sqrt(abs(x[0] - (x[1] + 47.0))))\n...             )\n...\n>>> bounds = [(-512, 512), (-512, 512)] \n```", "```py\n>>> result = shgo(eggholder, bounds, n=64, sampling_method='sobol')\n>>> result.x, result.fun\n(array([512\\.        , 404.23180824]), -959.6406627208397) \n```", "```py\n>>> result.xl\narray([[ 512\\.        ,  404.23180824],\n [ 283.0759062 , -487.12565635],\n [-294.66820039, -462.01964031],\n [-105.87688911,  423.15323845],\n [-242.97926   ,  274.38030925],\n [-506.25823477,    6.3131022 ],\n [-408.71980731, -156.10116949],\n [ 150.23207937,  301.31376595],\n [  91.00920901, -391.283763  ],\n [ 202.89662724, -269.38043241],\n [ 361.66623976, -106.96493868],\n [-219.40612786, -244.06020508]]) \n```", "```py\n>>> result.funl\narray([-959.64066272, -718.16745962, -704.80659592, -565.99778097,\n -559.78685655, -557.36868733, -507.87385942, -493.9605115 ,\n -426.48799655, -421.15571437, -419.31194957, -410.98477763]) \n```", "```py\n>>> result_2 = shgo(eggholder,\n...                 bounds, n=64, iters=3, sampling_method='sobol')\n>>> len(result.xl), len(result_2.xl)\n(12, 23) \n```", "```py\nminimize: f = 24.55 * x_1 + 26.75 * x_2 + 39 * x_3 + 40.50 * x_4\n\nsubject to: 2.3 * x_1 + 5.6 * x_2 + 11.1 * x_3 + 1.3 * x_4 - 5    >= 0,\n\n            12 * x_1 + 11.9 * x_2 + 41.8 * x_3 + 52.1 * x_4 - 21\n                -1.645 * sqrt(0.28 * x_1**2 + 0.19 * x_2**2 +\n                              20.5 * x_3**2 + 0.62 * x_4**2)      >= 0,\n\n            x_1 + x_2 + x_3 + x_4 - 1                             == 0,\n\n            1 >= x_i >= 0 for all i \n```", "```py\nf([0.6355216, -0.12e-11, 0.3127019, 0.05177655]) = 29.894378 \n```", "```py\n>>> def f(x):  # (cattle-feed)\n...     return 24.55*x[0] + 26.75*x[1] + 39*x[2] + 40.50*x[3]\n...\n>>> def g1(x):\n...     return 2.3*x[0] + 5.6*x[1] + 11.1*x[2] + 1.3*x[3] - 5  # >=0\n...\n>>> def g2(x):\n...     return (12*x[0] + 11.9*x[1] +41.8*x[2] + 52.1*x[3] - 21\n...             - 1.645 * np.sqrt(0.28*x[0]**2 + 0.19*x[1]**2\n...                             + 20.5*x[2]**2 + 0.62*x[3]**2)\n...             ) # >=0\n...\n>>> def h1(x):\n...     return x[0] + x[1] + x[2] + x[3] - 1  # == 0\n...\n>>> cons = ({'type': 'ineq', 'fun': g1},\n...         {'type': 'ineq', 'fun': g2},\n...         {'type': 'eq', 'fun': h1})\n>>> bounds = [(0, 1.0),]*4\n>>> res = shgo(f, bounds, n=150, constraints=cons)\n>>> res\n message: Optimization terminated successfully.\n success: True\n fun: 29.894378159142136\n funl: [ 2.989e+01]\n x: [ 6.355e-01  1.137e-13  3.127e-01  5.178e-02] # may vary\n xl: [[ 6.355e-01  1.137e-13  3.127e-01  5.178e-02]] # may vary\n nit: 1\n nfev: 142 # may vary\n nlfev: 35 # may vary\n nljev: 5\n nlhev: 0 \n```", "```py\n>>> g1(res.x), g2(res.x), h1(res.x)\n(-5.062616992290714e-14, -2.9594104944408173e-12, 0.0) \n```"]