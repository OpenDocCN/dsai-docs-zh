- en: Lambdify
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambdify
- en: Original text：[https://docs.sympy.org/latest/modules/utilities/lambdify.html](https://docs.sympy.org/latest/modules/utilities/lambdify.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.sympy.org/latest/modules/utilities/lambdify.html](https://docs.sympy.org/latest/modules/utilities/lambdify.html)
- en: This module provides convenient functions to transform SymPy expressions to
    lambda functions which can be used to calculate numerical values very fast.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供便捷函数，将 SymPy 表达式转换为可以快速计算数值的 lambda 函数。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add numerical `implementation` to function `symfunc`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将数值 `implementation` 添加到函数 `symfunc` 中。
- en: '`symfunc` can be an `UndefinedFunction` instance, or a name string. In the
    latter case we create an `UndefinedFunction` instance with that name.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`symfunc` 可以是一个 `UndefinedFunction` 实例，或者是一个名称字符串。在后一种情况下，我们将创建一个具有该名称的 `UndefinedFunction`
    实例。'
- en: Be aware that this is a quick workaround, not a general method to create special
    symbolic functions. If you want to create a symbolic function to be used by all
    the machinery of SymPy you should subclass the `Function` class.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个快速的解决方法，而不是创建特殊符号函数的通用方法。如果要创建一个可以由 SymPy 所有机制使用的符号函数，您应该子类化 `Function`
    类。
- en: 'Parameters:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**symfunc** : `str` or `UndefinedFunction` instance'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**symfunc**：`str` 或 `UndefinedFunction` 实例'
- en: If `str`, then create new `UndefinedFunction` with this as name. If `symfunc`
    is an Undefined function, create a new function with the same name and the implemented
    function attached.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果是 `str`，则使用此名称创建新的 `UndefinedFunction`。如果 `symfunc` 是一个未定义的函数，则创建一个具有相同名称和附加的实现函数的新函数。
- en: '**implementation** : callable'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**implementation**：可调用对象'
- en: numerical implementation to be called by `evalf()` or `lambdify`
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可通过 `evalf()` 或 `lambdify` 调用数值实现。
- en: 'Returns:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**afunc** : sympy.FunctionClass instance'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**afunc**：sympy.FunctionClass 实例'
- en: function with attached implementation
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 带有附加实现的函数
- en: Examples
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Returns a string that can be evaluated to a lambda function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可以评估为 lambda 函数的字符串。
- en: Examples
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Although tuples may not appear as arguments to lambda in Python 3, lambdastr
    will create a lambda function that will unpack the original arguments so that
    nested arguments can be handled:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管元组在 Python 3 中可能不会作为 lambda 的参数出现，lambdastr 将创建一个 lambda 函数，以便展开原始参数，从而可以处理嵌套参数：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Convert a SymPy expression into a function that allows for fast numeric evaluation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将 SymPy 表达式转换为允许快速数值评估的函数。
- en: Warning
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: This function uses `exec`, and thus should not be used on unsanitized input.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数使用 `exec`，因此不应在未经过消毒的输入上使用。
- en: 'Deprecated since version 1.7: Passing a set for the *args* parameter is deprecated
    as sets are unordered. Use an ordered iterable such as a list or tuple.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.7起已弃用：将 *args* 参数传递给集合因为集合是无序的。请使用有序可迭代对象如列表或元组。
- en: 'Parameters:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**args** : List[Symbol]'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**args**：List[Symbol]'
- en: A variable or a list of variables whose nesting represents the nesting of the
    arguments that will be passed to the function.
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 变量或其嵌套表示将传递给函数的参数的嵌套列表。
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Variables can be symbols, undefined functions, or matrix symbols.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 变量可以是符号、未定义函数或矩阵符号。
- en: ''
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ''
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The list of variables should match the structure of how the arguments will be
    passed to the function. Simply enclose the parameters as they will be passed in
    a list.
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 变量列表应与将传递给函数的参数结构相匹配。只需将参数如它们将在列表中传递一样包围起来。
- en: ''
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To call a function like `f(x)` then `[x]` should be the first argument to `lambdify`;
    for this case a single `x` can also be used:'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要调用类似 `f(x)` 的函数，然后 `[x]` 应该是 `lambdify` 的第一个参数；对于这种情况，也可以使用单个 `x`：
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To call a function like `f(x, y)` then `[x, y]` will be the first argument
    of the `lambdify`:'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要调用类似 `f(x, y)` 的函数，然后 `[x, y]` 将是 `lambdify` 的第一个参数：
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To call a function with a single 3-element tuple like `f((x, y, z))` then `[(x,
    y, z)]` will be the first argument of the `lambdify`:'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要使用单个 3 元组调用函数如 `f((x, y, z))`，则 `[(x, y, z)]` 将是 `lambdify` 的第一个参数：
- en: ''
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If two args will be passed and the first is a scalar but the second is a tuple
    with two arguments then the items in the list should match that structure:'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果将传递两个参数，并且第一个是标量，但第二个是包含两个参数的元组，则列表中的项应与该结构匹配：
- en: ''
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**expr** : Expr'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**：Expr'
- en: An expression, list of expressions, or matrix to be evaluated.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要评估的表达式、表达式列表或矩阵。
- en: ''
  id: totrans-55
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Lists may be nested. If the expression is a list, the output will also be a
    list.
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列表可以是嵌套的。如果表达式是列表，则输出也将是列表。
- en: ''
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If it is a matrix, an array will be returned (for the NumPy module).
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果是矩阵，则将返回一个数组（用于 NumPy 模块）。
- en: ''
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ''
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note that the argument order here (variables then expression) is used to emulate
    the Python `lambda` keyword. `lambdify(x, expr)` works (roughly) like `lambda
    x: expr` (see [How It Works](#lambdify-how-it-works) below).'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '请注意，此处的参数顺序（变量然后表达式）用于模仿Python的`lambda`关键字。`lambdify(x, expr)`的工作方式（大致）类似于`lambda
    x: expr`（见下文的[How It Works](#lambdify-how-it-works)）。'
- en: '**modules** : str, optional'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**modules** : 字符串，可选'
- en: Specifies the numeric library to use.
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定要使用的数值库。
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If not specified, *modules* defaults to:'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果未指定，默认情况下*模块*为：
- en: ''
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`["scipy", "numpy"]` if SciPy is installed'
  id: totrans-70
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果安装了SciPy，则为`["scipy", "numpy"]`。
- en: ''
  id: totrans-71
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-72
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`["numpy"]` if only NumPy is installed'
  id: totrans-73
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果仅安装了NumPy，则为`["numpy"]`。
- en: ''
  id: totrans-74
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-75
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`["math", "mpmath", "sympy"]` if neither is installed.'
  id: totrans-76
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未安装任何一个，则为`["math", "mpmath", "sympy"]`。
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is, SymPy functions are replaced as far as possible by either `scipy` or
    `numpy` functions if available, and Python’s standard library `math`, or `mpmath`
    functions otherwise.
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 换句话说，尽可能地将SymPy函数替换为`scipy`或`numpy`函数（如果可用），或Python的标准库`math`或`mpmath`函数（否则）。
- en: ''
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*modules* can be one of the following types:'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*模块*可以是以下类型之一：'
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The strings `"math"`, `"mpmath"`, `"numpy"`, `"numexpr"`, `"scipy"`, `"sympy"`,
    or `"tensorflow"` or `"jax"`. This uses the corresponding printer and namespace
    mapping for that module.
  id: totrans-84
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串`"math"`、`"mpmath"`、`"numpy"`、`"numexpr"`、`"scipy"`、`"sympy"`或`"tensorflow"`或`"jax"`。这使用该模块的相应打印机和命名空间映射。
- en: ''
  id: totrans-85
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A module (e.g., `math`). This uses the global namespace of the module. If the
    module is one of the above known modules, it will also use the corresponding printer
    and namespace mapping (i.e., `modules=numpy` is equivalent to `modules="numpy"`).
  id: totrans-87
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个模块（例如，`math`）。这使用模块的全局命名空间。如果模块是上述已知模块之一，则还将使用相应的打印机和命名空间映射（即`modules=numpy`相当于`modules="numpy"`）。
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-89
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A dictionary that maps names of SymPy functions to arbitrary functions (e.g.,
    `{''sin'': custom_sin}`).'
  id: totrans-90
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '一个字典，将SymPy函数的名称映射到任意函数（例如，`{''sin'': custom_sin}`）。'
- en: ''
  id: totrans-91
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A list that contains a mix of the arguments above, with higher priority given
    to entries appearing first (e.g., to use the NumPy module but override the `sin`
    function with a custom version, you can use `[{''sin'': custom_sin}, ''numpy'']`).'
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '包含上述参数混合的列表，优先考虑首次出现的条目（例如，要使用NumPy模块但使用自定义版本覆盖`sin`函数，可以使用`[{''sin'': custom_sin},
    ''numpy'']`）。'
- en: '**dummify** : bool, optional'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**dummify** : 布尔值，可选'
- en: Whether or not the variables in the provided expression that are not valid Python
    identifiers are substituted with dummy symbols.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是否将提供的表达式中不是有效Python标识符的变量替换为虚拟符号。
- en: ''
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This allows for undefined functions like `Function('f')(t)` to be supplied as
    arguments. By default, the variables are only dummified if they are not valid
    Python identifiers.
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这允许像`Function('f')(t)`这样的未定义函数作为参数提供。默认情况下，仅当它们不是有效的Python标识符时，变量才会被dummy化。
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Set `dummify=True` to replace all arguments with dummy symbols (if `args` is
    not a string) - for example, to ensure that the arguments do not redefine any
    built-in names.
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设置`dummify=True`以将所有参数替换为虚拟符号（如果`args`不是字符串），例如，确保参数不重新定义任何内置名称。
- en: '**cse** : bool, or callable, optional'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**cse** : 布尔值或可调用对象，可选'
- en: Large expressions can be computed more efficiently when common subexpressions
    are identified and precomputed before being used multiple time. Finding the subexpressions
    will make creation of the ‘lambdify’ function slower, however.
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当识别和预先计算常见子表达式以便在多次使用之前时，可以更高效地计算大型表达式。然而，找到这些子表达式会使创建‘lambdify’函数变慢。
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When `True`, `sympy.simplify.cse` is used, otherwise (the default) the user
    may pass a function matching the `cse` signature.
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当设置为`True`时，使用`sympy.simplify.cse`，否则（默认情况下），用户可以传递与`cse`签名匹配的函数。
- en: '**docstring_limit** : int or None'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**docstring_limit** : 整数或None'
- en: When lambdifying large expressions, a significant proportion of the time spent
    inside `lambdify` is spent producing a string representation of the expression
    for use in the automatically generated docstring of the returned function. For
    expressions containing hundreds or more nodes the resulting docstring often becomes
    so long and dense that it is difficult to read. To reduce the runtime of lambdify,
    the rendering of the full expression inside the docstring can be disabled.
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在lambdify大型表达式时，lambdify内部花费的大部分时间都用于生成表达式的字符串表示，以用于返回函数的自动生成文档字符串。对于包含数百个或更多节点的表达式，生成的文档字符串通常变得如此之长和密集，以至于难以阅读。为了减少lambdify的运行时间，可以禁用文档字符串内部完整表达式的渲染。
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When `None`, the full expression is rendered in the docstring. When `0` or a
    negative `int`, an ellipsis is rendering in the docstring instead of the expression.
    When a strictly positive `int`, if the number of nodes in the expression exceeds
    `docstring_limit` an ellipsis is rendered in the docstring, otherwise a string
    representation of the expression is rendered as normal. The default is `1000`.
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当为 `None` 时，完整表达式将在文档字符串中呈现。当为 `0` 或负整数时，文档字符串中会呈现省略号而不是表达式。当为严格正整数时，如果表达式中的节点数超过
    `docstring_limit`，则在文档字符串中呈现省略号，否则正常呈现表达式的字符串表示。默认为 `1000`。
- en: Explanation
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'For example, to convert the SymPy expression `sin(x) + cos(x)` to an equivalent
    NumPy function that numerically evaluates it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将 SymPy 表达式 `sin(x) + cos(x)` 转换为一个等效的 NumPy 函数来进行数值评估：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The primary purpose of this function is to provide a bridge from SymPy expressions
    to numerical libraries such as NumPy, SciPy, NumExpr, mpmath, and tensorflow.
    In general, SymPy functions do not work with objects from other libraries, such
    as NumPy arrays, and functions from numeric libraries like NumPy or mpmath do
    not work on SymPy expressions. `lambdify` bridges the two by converting a SymPy
    expression to an equivalent numeric function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的主要目的是提供从 SymPy 表达式到数值库（如 NumPy、SciPy、NumExpr、mpmath 和 tensorflow）的桥梁。一般来说，SymPy
    函数不适用于来自其他库（如 NumPy 数组）的对象，而来自数值库（如 NumPy 或 mpmath）的函数不适用于 SymPy 表达式。`lambdify`
    通过将 SymPy 表达式转换为等效的数值函数来连接这两者。
- en: The basic workflow with `lambdify` is to first create a SymPy expression representing
    whatever mathematical function you wish to evaluate. This should be done using
    only SymPy functions and expressions. Then, use `lambdify` to convert this to
    an equivalent function for numerical evaluation. For instance, above we created
    `expr` using the SymPy symbol `x` and SymPy functions `sin` and `cos`, then converted
    it to an equivalent NumPy function `f`, and called it on a NumPy array `a`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `lambdify` 的基本工作流程是首先创建一个表示您希望评估的任何数学函数的 SymPy 表达式。这应该仅使用 SymPy 函数和表达式来完成。然后，使用
    `lambdify` 将其转换为等效的用于数值评估的函数。例如，我们以上述方法使用 SymPy 符号 `x` 和 SymPy 函数 `sin` 和 `cos`
    创建了 `expr`，然后将其转换为等效的 NumPy 函数 `f`，并在 NumPy 数组 `a` 上调用它。
- en: Examples
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`lambdify` can be used to translate SymPy expressions into mpmath functions.
    This may be preferable to using `evalf` (which uses mpmath on the backend) in
    some cases.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambdify` 可以用于将 SymPy 表达式转换为 mpmath 函数。在某些情况下，这可能比使用 `evalf` 更可取（它在后端使用 mpmath）。'
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Tuple arguments are handled and the lambdified function should be called with
    the same type of arguments as were used to create the function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 元组参数将被处理，lambdify 函数应该使用创建函数时使用的相同类型的参数进行调用：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `flatten` function can be used to always work with flattened arguments:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatten` 函数可用于始终使用展平的参数进行操作：'
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Functions present in `expr` can also carry their own numerical implementations,
    in a callable attached to the `_imp_` attribute. This can be used with undefined
    functions using the `implemented_function` factory:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `expr` 中存在的函数也可以携带自己的数值实现，作为附加到 `_imp_` 属性的可调用函数。这可以与使用 `implemented_function`
    工厂函数的未定义函数一起使用：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`lambdify` always prefers `_imp_` implementations to implementations in other
    namespaces, unless the `use_imps` input parameter is False.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambdify` 总是优先 `_imp_` 命名空间中的实现，而不是其他命名空间中的实现，除非 `use_imps` 输入参数为 False。'
- en: 'Usage with Tensorflow:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Tensorflow：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After tensorflow v2, eager execution is enabled by default. If you want to get
    the compatible result across tensorflow v1 and v2 as same as this tutorial, run
    this line.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 tensorflow v2 之后，默认启用即时执行。如果您想要在 tensorflow v1 和 v2 中获取兼容的结果，就像本教程一样，请运行此行。
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you have eager execution enabled, you can get the result out immediately
    as you can use numpy.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了即时执行，您可以立即将结果输出，因为您可以使用 numpy。
- en: If you pass tensorflow objects, you may get an `EagerTensor` object instead
    of value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递 tensorflow 对象，则可能会得到一个 `EagerTensor` 对象而不是值。
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can use `.numpy()` to get the numpy value of the tensor.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `.numpy()` 来获取张量的 numpy 值。
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: And it works with any shape array.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它适用于任何形状的数组。
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Notes
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For functions involving large array calculations, numexpr can provide a significant
    speedup over numpy. Please note that the available functions for numexpr are more
    limited than numpy but can be expanded with `implemented_function` and user defined
    subclasses of Function. If specified, numexpr may be the only option in modules.
    The official list of numexpr functions can be found at: [https://numexpr.readthedocs.io/en/latest/user_guide.html#supported-functions](https://numexpr.readthedocs.io/en/latest/user_guide.html#supported-functions)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于涉及大数组计算的函数，`numexpr` 可以比numpy提供显著的加速。请注意，`numexpr` 的可用函数比numpy有限，但可以通过`implemented_function`和用户定义的Function子类进行扩展。如果指定了，`numexpr`
    可能是模块中唯一的选项。`numexpr` 的官方函数列表可以在这里找到：[https://numexpr.readthedocs.io/en/latest/user_guide.html#supported-functions](https://numexpr.readthedocs.io/en/latest/user_guide.html#supported-functions)
- en: 'In the above examples, the generated functions can accept scalar values or
    numpy arrays as arguments. However, in some cases the generated function relies
    on the input being a numpy array:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上述示例中，生成的函数可以接受标量值或numpy数组作为参数。但是，在某些情况下，生成的函数依赖于输入是一个numpy数组：
- en: '[PRE27]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In such cases, the input should be wrapped in a numpy array:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，输入应该包装在一个numpy数组中：
- en: '[PRE30]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or if numpy functionality is not required another module can be used:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者如果不需要numpy功能，则可以使用另一个模块：
- en: '[PRE31]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How It Works
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 工作原理
- en: When using this function, it helps a great deal to have an idea of what it is
    doing. At its core, lambdify is nothing more than a namespace translation, on
    top of a special printer that makes some corner cases work properly.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用此函数时，理解它的工作原理非常有帮助。在核心上，`lambdify` 只是一个命名空间的转换，在一个特殊的打印机之上，使一些边缘情况正常工作。
- en: To understand lambdify, first we must properly understand how Python namespaces
    work. Say we had two files. One called `sin_cos_sympy.py`, with
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`lambdify`，首先我们必须正确理解Python命名空间的工作方式。假设我们有两个文件。一个名为`sin_cos_sympy.py`，其中包含
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: and one called `sin_cos_numpy.py` with
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 和一个称为`sin_cos_numpy.py`的文件与
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The two files define an identical function `sin_cos`. However, in the first
    file, `sin` and `cos` are defined as the SymPy `sin` and `cos`. In the second,
    they are defined as the NumPy versions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件定义了一个相同的函数`sin_cos`。但是，在第一个文件中，`sin`和`cos`被定义为SymPy的`sin`和`cos`。在第二个文件中，它们被定义为NumPy的版本。
- en: If we were to import the first file and use the `sin_cos` function, we would
    get something like
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导入第一个文件并使用`sin_cos`函数，我们将得到类似于
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: On the other hand, if we imported `sin_cos` from the second file, we would get
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果我们从第二个文件导入`sin_cos`，我们将得到
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the first case we got a symbolic output, because it used the symbolic `sin`
    and `cos` functions from SymPy. In the second, we got a numeric result, because
    `sin_cos` used the numeric `sin` and `cos` functions from NumPy. But notice that
    the versions of `sin` and `cos` that were used was not inherent to the `sin_cos`
    function definition. Both `sin_cos` definitions are exactly the same. Rather,
    it was based on the names defined at the module where the `sin_cos` function was
    defined.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，我们得到了一个符号输出，因为它使用了SymPy的符号`sin`和`cos`函数。在第二种情况下，我们得到了一个数值结果，因为`sin_cos`使用了NumPy的数值`sin`和`cos`函数。但请注意，使用的`sin`和`cos`的版本并不是`sin_cos`函数定义本身固有的。这两个`sin_cos`定义是完全相同的。相反，它基于定义`sin_cos`函数的模块中定义的名称。
- en: The key point here is that when function in Python references a name that is
    not defined in the function, that name is looked up in the “global” namespace
    of the module where that function is defined.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键点是，在Python函数中引用一个未在函数中定义的名称时，该名称会在定义该函数的模块的“全局”命名空间中查找。
- en: 'Now, in Python, we can emulate this behavior without actually writing a file
    to disk using the `exec` function. `exec` takes a string containing a block of
    Python code, and a dictionary that should contain the global variables of the
    module. It then executes the code “in” that dictionary, as if it were the module
    globals. The following is equivalent to the `sin_cos` defined in `sin_cos_sympy.py`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Python中，我们可以模拟这种行为，而无需实际将文件写入磁盘，使用`exec`函数。`exec`接受一个包含Python代码块的字符串，并且一个应该包含模块全局变量的字典。然后，它在该字典中“执行”代码，就像它是模块全局变量一样。以下与在`sin_cos_sympy.py`中定义的`sin_cos`相同：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'and similarly with `sin_cos_numpy`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 同样与`sin_cos_numpy`：
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'So now we can get an idea of how `lambdify` works. The name “lambdify” comes
    from the fact that we can think of something like `lambdify(x, sin(x) + cos(x),
    ''numpy'')` as `lambda x: sin(x) + cos(x)`, where `sin` and `cos` come from the
    `numpy` namespace. This is also why the symbols argument is first in `lambdify`,
    as opposed to most SymPy functions where it comes after the expression: to better
    mimic the `lambda` keyword.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们可以了解`lambdify`的工作原理了。名称“lambdify”来源于我们可以将类似`lambdify(x, sin(x) + cos(x),
    ''numpy'')`的东西视为`lambda x: sin(x) + cos(x)`，其中`sin`和`cos`来自`numpy`命名空间。这也是为什么`lambdify`中符号参数在第一位，而不是大多数SymPy函数中表达式之后的原因：为了更好地模仿`lambda`关键字。'
- en: '`lambdify` takes the input expression (like `sin(x) + cos(x)`) and'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`lambdify`接受输入表达式（例如`sin(x) + cos(x)`）并'
- en: Converts it to a string
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其转换为字符串
- en: Creates a module globals dictionary based on the modules that are passed in
    (by default, it uses the NumPy module)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于传入的模块创建一个模块全局字典（默认情况下使用NumPy模块）
- en: 'Creates the string `"def func({vars}): return {expr}"`, where `{vars}` is the
    list of variables separated by commas, and `{expr}` is the string created in step
    1., then [PRE38].'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建字符串`"def func({vars}): return {expr}"`，其中`{vars}`是以逗号分隔的变量列表，`{expr}`是步骤1中创建的字符串，然后[PRE38]。'
- en: In fact, functions returned by `lambdify` support inspection. So you can see
    exactly how they are defined by using `inspect.getsource`, or `??` if you are
    using IPython or the Jupyter notebook.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`lambdify`返回的函数支持检查。因此，您可以使用`inspect.getsource`或IPython或Jupyter笔记本中的`??`来准确查看它们是如何定义的。
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This shows us the source code of the function, but not the namespace it was
    defined in. We can inspect that by looking at the `__globals__` attribute of `f`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们展示了函数的源代码，但没有显示它被定义在哪个命名空间。我们可以通过查看`f`的`__globals__`属性来检查这一点：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This shows us that `sin` and `cos` in the namespace of `f` will be `numpy.sin`
    and `numpy.cos`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这向我们展示了`f`命名空间中的`sin`和`cos`将是`numpy.sin`和`numpy.cos`。
- en: Note that there are some convenience layers in each of these steps, but at the
    core, this is how `lambdify` works. Step 1 is done using the `LambdaPrinter` printers
    defined in the printing module (see [`sympy.printing.lambdarepr`](../printing.html#module-sympy.printing.lambdarepr
    "sympy.printing.lambdarepr")). This allows different SymPy expressions to define
    how they should be converted to a string for different modules. You can change
    which printer `lambdify` uses by passing a custom printer in to the `printer`
    argument.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个步骤中都有一些便利层，但在核心部分，`lambdify`的工作方式就是如此。第1步是使用打印模块中定义的`LambdaPrinter`打印机（参见[`sympy.printing.lambdarepr`](../printing.html#module-sympy.printing.lambdarepr
    "sympy.printing.lambdarepr")）。这允许不同的SymPy表达式定义它们应该如何为不同模块转换为字符串。您可以通过向`printer`参数传递自定义打印机来更改`lambdify`使用的打印机。
- en: Step 2 is augmented by certain translations. There are default translations
    for each module, but you can provide your own by passing a list to the `modules`
    argument. For instance,
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步通过某些翻译来增强。每个模块都有默认的翻译，但您可以通过将列表传递给`modules`参数来提供自己的翻译。例如，
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The globals dictionary is generated from the list by merging the dictionary
    `{''sin'': mysin}` and the module dictionary for NumPy. The merging is done so
    that earlier items take precedence, which is why `mysin` is used above instead
    of `numpy.sin`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '全局字典是通过合并字典`{''sin'': mysin}`和NumPy的模块字典生成的。合并是这样做的，早期的项目优先，这就是为什么上面使用`mysin`而不是`numpy.sin`的原因。'
- en: If you want to modify the way `lambdify` works for a given function, it is usually
    easiest to do so by modifying the globals dictionary as such. In more complicated
    cases, it may be necessary to create and pass in a custom printer.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想修改`lambdify`处理给定函数的方式，通常最容易的方法是通过修改全局字典来实现。在更复杂的情况下，可能需要创建并传递自定义的打印机。
- en: Finally, step 3 is augmented with certain convenience operations, such as the
    addition of a docstring.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第3步通过某些便利操作进行增强，例如添加文档字符串。
- en: Understanding how `lambdify` works can make it easier to avoid certain gotchas
    when using it. For instance, a common mistake is to create a lambdified function
    for one module (say, NumPy), and pass it objects from another (say, a SymPy expression).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 理解`lambdify`的工作方式可以使在使用它时更容易避免某些陷阱。例如，常见的错误是为一个模块（比如NumPy）创建一个lambdified函数，并将来自另一个模块（例如SymPy表达式）的对象传递给它。
- en: For instance, say we create
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们创建
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now if we pass in a NumPy array, we get that array plus 1
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们传递一个NumPy数组，我们将得到该数组加上1
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'But what happens if you make the mistake of passing in a SymPy expression instead
    of a NumPy array:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您错误地传递SymPy表达式而不是NumPy数组会发生什么：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This worked, but it was only by accident. Now take a different lambdified function:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法确实有效，但只是偶然的。现在我们来看一个不同的 lambdify 函数：
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This works as expected on NumPy arrays:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 数组上运行如预期：
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: But if we try to pass in a SymPy expression, it fails
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们尝试传入一个 SymPy 表达式，它会失败
- en: '[PRE47]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, let’s look at what happened. The reason this fails is that `g` calls `numpy.sin`
    on the input expression, and `numpy.sin` does not know how to operate on a SymPy
    object. **As a general rule, NumPy functions do not know how to operate on SymPy
    expressions, and SymPy functions do not know how to operate on NumPy arrays. This
    is why lambdify exists: to provide a bridge between SymPy and NumPy.**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看发生了什么。这种方法失败的原因是 `g` 在输入表达式上调用了 `numpy.sin`，而 `numpy.sin` 不知道如何处理 SymPy
    对象。**作为一个一般规则，NumPy 函数不知道如何操作 SymPy 表达式，而 SymPy 函数也不知道如何操作 NumPy 数组。这就是为什么 lambdify
    存在的原因：它提供了 SymPy 和 NumPy 之间的桥梁。**
- en: 'However, why is it that `f` did work? That’s because `f` does not call any
    functions, it only adds 1\. So the resulting function that is created, `def _lambdifygenerated(x):
    return x + 1` does not depend on the globals namespace it is defined in. Thus
    it works, but only by accident. A future version of `lambdify` may remove this
    behavior.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，为什么 `f` 能够工作呢？那是因为 `f` 没有调用任何函数，它只是加了 1。因此，所创建的结果函数 `def _lambdifygenerated(x):
    return x + 1` 不依赖于它所定义的全局命名空间。因此它能工作，但只是偶然的。未来版本的 `lambdify` 可能会移除这种行为。'
- en: Be aware that certain implementation details described here may change in future
    versions of SymPy. The API of passing in custom modules and printers will not
    change, but the details of how a lambda function is created may change. However,
    the basic idea will remain the same, and understanding it will be helpful to understanding
    the behavior of lambdify.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此处描述的某些实现细节可能会在 SymPy 的未来版本中发生变化。传入自定义模块和打印机的 API 将不会更改，但是创建 Lambda 函数的详细信息可能会发生变化。然而，基本理念将保持不变，并且理解它将有助于理解
    lambdify 的行为。
- en: '**In general: you should create lambdified functions for one module (say, NumPy),
    and only pass it input types that are compatible with that module (say, NumPy
    arrays).** Remember that by default, if the `module` argument is not provided,
    `lambdify` creates functions using the NumPy and SciPy namespaces.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**一般而言：您应该为一个模块（比如 NumPy）创建 Lambda 函数，并且只传递与该模块兼容的输入类型（比如 NumPy 数组）。** 请记住，默认情况下，如果未提供
    `module` 参数，`lambdify` 将使用 NumPy 和 SciPy 命名空间创建函数。'
