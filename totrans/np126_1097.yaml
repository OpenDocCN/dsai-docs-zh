- en: How to contribute to the NumPy documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/howto-docs.html](https://numpy.org/doc/1.26/dev/howto-docs.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This guide will help you decide what to contribute and how to submit it to the
    official NumPy documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation team meetings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NumPy community has set a firm goal of improving its documentation. We hold
    regular documentation meetings on Zoom (dates are announced on the [numpy-discussion
    mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)), and
    everyone is welcome. Reach out if you have questions or need someone to guide
    you through your first steps – we’re happy to help. Minutes are taken [on hackmd.io](https://hackmd.io/oB_boakvRqKR-_2jRV-Qjg)
    and stored in the [NumPy Archive repository](https://github.com/numpy/archive).
  prefs: []
  type: TYPE_NORMAL
- en: What’s needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [NumPy Documentation](../index.html#numpy-docs-mainpage) has the details
    covered. API reference documentation is generated directly from [docstrings](https://www.python.org/dev/peps/pep-0257/)
    in the code when the documentation is [built](howto_build_docs.html#howto-build-docs).
    Although we have mostly complete reference documentation for each function and
    class exposed to users, there is a lack of usage examples for some of them.
  prefs: []
  type: TYPE_NORMAL
- en: What we lack are docs with broader scope – tutorials, how-tos, and explanations.
    Reporting defects is another way to contribute. We discuss both.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing fixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re eager to hear about and fix doc defects. But to attack the biggest problems
    we end up having to defer or overlook some bug reports. Here are the best defects
    to go after.
  prefs: []
  type: TYPE_NORMAL
- en: Top priority goes to **technical inaccuracies** – a docstring missing a parameter,
    a faulty description of a function/parameter/method, and so on. Other “structural”
    defects like broken links also get priority. All these fixes are easy to confirm
    and put in place. You can submit a [pull request (PR)](https://numpy.org/devdocs/dev/index.html#devindex)
    with the fix, if you know how to do that; otherwise please [open an issue](https://github.com/numpy/numpy/issues).
  prefs: []
  type: TYPE_NORMAL
- en: '**Typos and misspellings** fall on a lower rung; we welcome hearing about them
    but may not be able to fix them promptly. These too can be handled as pull requests
    or issues.'
  prefs: []
  type: TYPE_NORMAL
- en: Obvious **wording** mistakes (like leaving out a “not”) fall into the typo category,
    but other rewordings – even for grammar – require a judgment call, which raises
    the bar. Test the waters by first presenting the fix as an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Some functions/objects like numpy.ndarray.transpose, numpy.array etc. defined
    in C-extension modules have their docstrings defined separately in [_add_newdocs.py](https://github.com/numpy/numpy/blob/main/numpy/core/_add_newdocs.py)
  prefs: []
  type: TYPE_NORMAL
- en: Contributing new pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your frustrations using our documents are our best guide to what needs fixing.
  prefs: []
  type: TYPE_NORMAL
- en: If you write a missing doc you join the front line of open source, but it’s
    a meaningful contribution just to let us know what’s missing. If you want to compose
    a doc, run your thoughts by the [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)
    for further ideas and feedback. If you want to alert us to a gap, [open an issue](https://github.com/numpy/numpy/issues).
    See [this issue](https://github.com/numpy/numpy/issues/15760) for an example.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking for subjects, our formal roadmap for documentation is a *NumPy
    Enhancement Proposal (NEP)*, [NEP 44 - Restructuring the NumPy Documentation](https://www.numpy.org/neps/nep-0044-restructuring-numpy-docs).
    It identifies areas where our docs need help and lists several additions we’d
    like to see, including [Jupyter notebooks](#numpy-tutorials).
  prefs: []
  type: TYPE_NORMAL
- en: '### Documentation framework'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are formulas for writing useful documents, and four formulas cover nearly
    everything. There are four formulas because there are four categories of document
    – `tutorial`, `how-to guide`, `explanation`, and `reference`. The insight that
    docs divide up this way belongs to Daniele Procida and his [Diátaxis Framework](https://diataxis.fr/).
    When you begin a document or propose one, have in mind which of these types it
    will be.  ### NumPy tutorials'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the documentation that is part of the NumPy source tree, you
    can submit content in Jupyter Notebook format to the [NumPy Tutorials](https://numpy.org/numpy-tutorials)
    page. This set of tutorials and educational materials is meant to provide high-quality
    resources by the NumPy project, both for self-learning and for teaching classes
    with. These resources are developed in a separate GitHub repository, [numpy-tutorials](https://github.com/numpy/numpy-tutorials),
    where you can check out existing notebooks, open issues to suggest new topics
    or submit your own tutorials as pull requests.  ### More on contributing'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry if English is not your first language, or if you can only come up
    with a rough draft. Open source is a community effort. Do your best – we’ll help
    fix issues.
  prefs: []
  type: TYPE_NORMAL
- en: Images and real-life data make text more engaging and powerful, but be sure
    what you use is appropriately licensed and available. Here again, even a rough
    idea for artwork can be polished by others.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only data formats accepted by NumPy are those also used by other
    Python scientific libraries like pandas, SciPy, or Matplotlib. We’re developing
    a package to accept more formats; contact us for details.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy documentation is kept in the source code tree. To get your document into
    the docbase you must download the tree, [build it](howto_build_docs.html#howto-build-docs),
    and submit a pull request. If GitHub and pull requests are new to you, check our
    [Contributor Guide](index.html#devindex).
  prefs: []
  type: TYPE_NORMAL
- en: Our markup language is reStructuredText (rST), which is more elaborate than
    Markdown. Sphinx, the tool many Python projects use to build and link project
    documentation, converts the rST into HTML and other formats. For more on rST,
    see the [Quick reStructuredText Guide](https://docutils.sourceforge.io/docs/user/rst/quickref.html)
    or the [reStructuredText Primer](http://www.sphinx-doc.org/en/stable/usage/restructuredtext/basics.html)
  prefs: []
  type: TYPE_NORMAL
- en: Contributing indirectly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you run across outside material that would be a useful addition to the NumPy
    docs, let us know by [opening an issue](https://github.com/numpy/numpy/issues).
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to contribute here to contribute to NumPy. You’ve contributed
    if you write a tutorial on your blog, create a YouTube video, or answer questions
    on Stack Overflow and other sites.
  prefs: []
  type: TYPE_NORMAL
- en: '## Documentation style'
  prefs: []
  type: TYPE_NORMAL
- en: '### User documentation'
  prefs: []
  type: TYPE_NORMAL
- en: In general, we follow the [Google developer documentation style guide](https://developers.google.com/style)
    for the User Guide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NumPy style governs cases where:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google has no guidance, or
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: We prefer not to use the Google style
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our current rules:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We pluralize *index* as *indices* rather than [indexes](https://developers.google.com/style/word-list#letter-i),
    following the precedent of [`numpy.indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices").
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For consistency we also pluralize *matrix* as *matrices*.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Grammatical issues inadequately addressed by the NumPy or Google rules are decided
    by the section on “Grammar and Usage” in the most recent edition of the [Chicago
    Manual of Style](https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We welcome being [alerted](https://github.com/numpy/numpy/issues) to cases
    we should add to the NumPy style rules.  ### Docstrings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using [Sphinx](http://www.sphinx-doc.org/) in combination with the NumPy
    conventions, you should use the `numpydoc` extension so that your docstrings will
    be handled correctly. For example, Sphinx will extract the `Parameters` section
    from your docstring and convert it into a field list. Using `numpydoc` will also
    avoid the reStructuredText errors produced by plain Sphinx when it encounters
    NumPy docstring conventions like section headers (e.g. `-------------`) that sphinx
    does not expect to find in docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is available from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[numpydoc on PyPI](https://pypi.python.org/pypi/numpydoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[numpydoc on GitHub](https://github.com/numpy/numpydoc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that for documentation within NumPy, it is not necessary to do `import
    numpy as np` at the beginning of an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please use the `numpydoc` [formatting standard](https://numpydoc.readthedocs.io/en/latest/format.html#format
    "(in numpydoc v1.6.0rc3.dev0)") as shown in their [example](https://numpydoc.readthedocs.io/en/latest/example.html#example
    "(in numpydoc v1.6.0rc3.dev0)").  ### Documenting C/C++ Code'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses [Doxygen](https://www.doxygen.nl/index.html) to parse specially-formatted
    C/C++ comment blocks. This generates XML files, which are converted by [Breathe](https://breathe.readthedocs.io/en/latest/)
    into RST, which is used by Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: '**It takes three steps to complete the documentation process**:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Writing the comment blocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although there is still no commenting style set to follow, the Javadoc is more
    preferable than the others due to the similarities with the current existing non-indexed
    comment blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please see [“Documenting the code”](https://www.doxygen.nl/manual/docblocks.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**This is what Javadoc style looks like**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This a simple brief.
  prefs: []
  type: TYPE_NORMAL
- en: And the details goes here. Multi lines are welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**num** – leave a comment for parameter num.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**str** – leave a comment for the second parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: leave a comment for the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: '**For line comment, you can use a triple forward slash. For example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Template to represent limbo numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Specializations for integer types that are part of nowhere. It doesn’t support
    with any real types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param Tp:'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the integer. Required to be an integer type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param N:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Public Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Default constructor. Initialize nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Set Default behavior for copy the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns the raw data for the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: Protected Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Example for inline comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Doxygen Tags:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more tags/commands, please take a look at [https://www.doxygen.nl/manual/commands.html](https://www.doxygen.nl/manual/commands.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`@brief`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a paragraph that serves as a brief description. By default the first
    sentence of the documentation block is automatically treated as a brief description,
    since option [JAVADOC_AUTOBRIEF](https://www.doxygen.nl/manual/config.html#cfg_javadoc_autobrief)
    is enabled within doxygen configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '`@details`'
  prefs: []
  type: TYPE_NORMAL
- en: Just like `@brief` starts a brief description, `@details` starts the detailed
    description. You can also start a new paragraph (blank line) then the `@details`
    command is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '`@param`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a parameter description for a function parameter with name <parameter-name>,
    followed by a description of the parameter. The existence of the parameter is
    checked and a warning is given if the documentation of this (or any other) parameter
    is missing or not present in the function declaration or definition.
  prefs: []
  type: TYPE_NORMAL
- en: '`@return`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a return value description for a function. Multiple adjacent `@return`
    commands will be joined into a single paragraph. The `@return` description ends
    when a blank line or some other sectioning command is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '`@code/@endcode`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of code. A code block is treated differently from ordinary
    text. It is interpreted as source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`@rst/@endrst`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Take a look at the following example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A comment block contains reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [Breathe](https://breathe.readthedocs.io/en/latest/), we were able
    to bring it to [Doxygen](https://www.doxygen.nl/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Feeding Doxygen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all headers files are collected automatically. You have to add the desired
    C/C++ header paths within the sub-config files of Doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-config files have the unique name `.doxyfile`, which you can usually find
    near directories that contain documented headers. You need to create a new config
    file if there’s not one located in a path close(2-depth) to the headers you want
    to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-config files can accept any of [Doxygen](https://www.doxygen.nl/index.html)
    [configuration options](https://www.doxygen.nl/manual/config.html), but do not
    override or re-initialize any configuration option, rather only use the concatenation
    operator “+=”. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '@CUR_DIR is a template constant returns the current dir path of the sub-config
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Inclusion directives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Breathe](https://breathe.readthedocs.io/en/latest/) provides a wide range
    of custom directives to allow converting the documents generated by [Doxygen](https://www.doxygen.nl/index.html)
    into reST files.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please check out “[Directives & Config Variables](https://breathe.readthedocs.io/en/latest/directives.html)”
  prefs: []
  type: TYPE_NORMAL
- en: 'Common directives:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`doxygenfunction`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for a single function. The function
    name is required to be unique in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [example](https://breathe.readthedocs.io/en/latest/function.html#function-example)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygenclass`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive generates the appropriate output for a single class. It takes
    the standard project, path, outline and no-link options and additionally the members,
    protected-members, private-members, undoc-members, membergroups and members-only
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the *doxygenclass documentation <https://breathe.readthedocs.io/en/latest/class.html#class-example>_*
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygennamespace`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a namespace.
    It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options. To reference a nested namespace, the full namespaced path must be provided,
    e.g. foo::bar for the bar namespace inside the foo namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygennamespace documentation](https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygengroup`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a doxygen
    group. A doxygen group can be declared with specific doxygen markup in the source
    comments as covered in the doxygen [grouping documentation](https://www.doxygen.nl/manual/grouping.html).
  prefs: []
  type: TYPE_NORMAL
- en: It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygengroup documentation](https://breathe.readthedocs.io/en/latest/group.html#group-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The leading organization of technical writers, [Write the Docs](https://www.writethedocs.org/),
    holds conferences, hosts learning resources, and runs a Slack channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Every engineer is also a writer,” says Google’s [collection of technical writing
    resources](https://developers.google.com/tech-writing), which includes free online
    courses for developers in planning and writing documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Software Carpentry’s](https://software-carpentry.org/lessons) mission is teaching
    software to researchers. In addition to hosting the curriculum, the website explains
    how to present ideas effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation team meetings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NumPy community has set a firm goal of improving its documentation. We hold
    regular documentation meetings on Zoom (dates are announced on the [numpy-discussion
    mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)), and
    everyone is welcome. Reach out if you have questions or need someone to guide
    you through your first steps – we’re happy to help. Minutes are taken [on hackmd.io](https://hackmd.io/oB_boakvRqKR-_2jRV-Qjg)
    and stored in the [NumPy Archive repository](https://github.com/numpy/archive).
  prefs: []
  type: TYPE_NORMAL
- en: What’s needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [NumPy Documentation](../index.html#numpy-docs-mainpage) has the details
    covered. API reference documentation is generated directly from [docstrings](https://www.python.org/dev/peps/pep-0257/)
    in the code when the documentation is [built](howto_build_docs.html#howto-build-docs).
    Although we have mostly complete reference documentation for each function and
    class exposed to users, there is a lack of usage examples for some of them.
  prefs: []
  type: TYPE_NORMAL
- en: What we lack are docs with broader scope – tutorials, how-tos, and explanations.
    Reporting defects is another way to contribute. We discuss both.
  prefs: []
  type: TYPE_NORMAL
- en: Contributing fixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re eager to hear about and fix doc defects. But to attack the biggest problems
    we end up having to defer or overlook some bug reports. Here are the best defects
    to go after.
  prefs: []
  type: TYPE_NORMAL
- en: Top priority goes to **technical inaccuracies** – a docstring missing a parameter,
    a faulty description of a function/parameter/method, and so on. Other “structural”
    defects like broken links also get priority. All these fixes are easy to confirm
    and put in place. You can submit a [pull request (PR)](https://numpy.org/devdocs/dev/index.html#devindex)
    with the fix, if you know how to do that; otherwise please [open an issue](https://github.com/numpy/numpy/issues).
  prefs: []
  type: TYPE_NORMAL
- en: '**Typos and misspellings** fall on a lower rung; we welcome hearing about them
    but may not be able to fix them promptly. These too can be handled as pull requests
    or issues.'
  prefs: []
  type: TYPE_NORMAL
- en: Obvious **wording** mistakes (like leaving out a “not”) fall into the typo category,
    but other rewordings – even for grammar – require a judgment call, which raises
    the bar. Test the waters by first presenting the fix as an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Some functions/objects like numpy.ndarray.transpose, numpy.array etc. defined
    in C-extension modules have their docstrings defined separately in [_add_newdocs.py](https://github.com/numpy/numpy/blob/main/numpy/core/_add_newdocs.py)
  prefs: []
  type: TYPE_NORMAL
- en: Contributing new pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your frustrations using our documents are our best guide to what needs fixing.
  prefs: []
  type: TYPE_NORMAL
- en: If you write a missing doc you join the front line of open source, but it’s
    a meaningful contribution just to let us know what’s missing. If you want to compose
    a doc, run your thoughts by the [mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion)
    for further ideas and feedback. If you want to alert us to a gap, [open an issue](https://github.com/numpy/numpy/issues).
    See [this issue](https://github.com/numpy/numpy/issues/15760) for an example.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking for subjects, our formal roadmap for documentation is a *NumPy
    Enhancement Proposal (NEP)*, [NEP 44 - Restructuring the NumPy Documentation](https://www.numpy.org/neps/nep-0044-restructuring-numpy-docs).
    It identifies areas where our docs need help and lists several additions we’d
    like to see, including [Jupyter notebooks](#numpy-tutorials).
  prefs: []
  type: TYPE_NORMAL
- en: '### Documentation framework'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are formulas for writing useful documents, and four formulas cover nearly
    everything. There are four formulas because there are four categories of document
    – `tutorial`, `how-to guide`, `explanation`, and `reference`. The insight that
    docs divide up this way belongs to Daniele Procida and his [Diátaxis Framework](https://diataxis.fr/).
    When you begin a document or propose one, have in mind which of these types it
    will be.  ### NumPy tutorials'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the documentation that is part of the NumPy source tree, you
    can submit content in Jupyter Notebook format to the [NumPy Tutorials](https://numpy.org/numpy-tutorials)
    page. This set of tutorials and educational materials is meant to provide high-quality
    resources by the NumPy project, both for self-learning and for teaching classes
    with. These resources are developed in a separate GitHub repository, [numpy-tutorials](https://github.com/numpy/numpy-tutorials),
    where you can check out existing notebooks, open issues to suggest new topics
    or submit your own tutorials as pull requests.  ### More on contributing'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry if English is not your first language, or if you can only come up
    with a rough draft. Open source is a community effort. Do your best – we’ll help
    fix issues.
  prefs: []
  type: TYPE_NORMAL
- en: Images and real-life data make text more engaging and powerful, but be sure
    what you use is appropriately licensed and available. Here again, even a rough
    idea for artwork can be polished by others.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only data formats accepted by NumPy are those also used by other
    Python scientific libraries like pandas, SciPy, or Matplotlib. We’re developing
    a package to accept more formats; contact us for details.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy documentation is kept in the source code tree. To get your document into
    the docbase you must download the tree, [build it](howto_build_docs.html#howto-build-docs),
    and submit a pull request. If GitHub and pull requests are new to you, check our
    [Contributor Guide](index.html#devindex).
  prefs: []
  type: TYPE_NORMAL
- en: 'Our markup language is reStructuredText (rST), which is more elaborate than
    Markdown. Sphinx, the tool many Python projects use to build and link project
    documentation, converts the rST into HTML and other formats. For more on rST,
    see the [Quick reStructuredText Guide](https://docutils.sourceforge.io/docs/user/rst/quickref.html)
    or the [reStructuredText Primer](http://www.sphinx-doc.org/en/stable/usage/restructuredtext/basics.html)  ###
    Documentation framework'
  prefs: []
  type: TYPE_NORMAL
- en: There are formulas for writing useful documents, and four formulas cover nearly
    everything. There are four formulas because there are four categories of document
    – `tutorial`, `how-to guide`, `explanation`, and `reference`. The insight that
    docs divide up this way belongs to Daniele Procida and his [Diátaxis Framework](https://diataxis.fr/).
    When you begin a document or propose one, have in mind which of these types it
    will be.
  prefs: []
  type: TYPE_NORMAL
- en: '### NumPy tutorials'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the documentation that is part of the NumPy source tree, you
    can submit content in Jupyter Notebook format to the [NumPy Tutorials](https://numpy.org/numpy-tutorials)
    page. This set of tutorials and educational materials is meant to provide high-quality
    resources by the NumPy project, both for self-learning and for teaching classes
    with. These resources are developed in a separate GitHub repository, [numpy-tutorials](https://github.com/numpy/numpy-tutorials),
    where you can check out existing notebooks, open issues to suggest new topics
    or submit your own tutorials as pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: '### More on contributing'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry if English is not your first language, or if you can only come up
    with a rough draft. Open source is a community effort. Do your best – we’ll help
    fix issues.
  prefs: []
  type: TYPE_NORMAL
- en: Images and real-life data make text more engaging and powerful, but be sure
    what you use is appropriately licensed and available. Here again, even a rough
    idea for artwork can be polished by others.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the only data formats accepted by NumPy are those also used by other
    Python scientific libraries like pandas, SciPy, or Matplotlib. We’re developing
    a package to accept more formats; contact us for details.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy documentation is kept in the source code tree. To get your document into
    the docbase you must download the tree, [build it](howto_build_docs.html#howto-build-docs),
    and submit a pull request. If GitHub and pull requests are new to you, check our
    [Contributor Guide](index.html#devindex).
  prefs: []
  type: TYPE_NORMAL
- en: Our markup language is reStructuredText (rST), which is more elaborate than
    Markdown. Sphinx, the tool many Python projects use to build and link project
    documentation, converts the rST into HTML and other formats. For more on rST,
    see the [Quick reStructuredText Guide](https://docutils.sourceforge.io/docs/user/rst/quickref.html)
    or the [reStructuredText Primer](http://www.sphinx-doc.org/en/stable/usage/restructuredtext/basics.html)
  prefs: []
  type: TYPE_NORMAL
- en: Contributing indirectly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you run across outside material that would be a useful addition to the NumPy
    docs, let us know by [opening an issue](https://github.com/numpy/numpy/issues).
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to contribute here to contribute to NumPy. You’ve contributed
    if you write a tutorial on your blog, create a YouTube video, or answer questions
    on Stack Overflow and other sites.
  prefs: []
  type: TYPE_NORMAL
- en: '## Documentation style'
  prefs: []
  type: TYPE_NORMAL
- en: '### User documentation'
  prefs: []
  type: TYPE_NORMAL
- en: In general, we follow the [Google developer documentation style guide](https://developers.google.com/style)
    for the User Guide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NumPy style governs cases where:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google has no guidance, or
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: We prefer not to use the Google style
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our current rules:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We pluralize *index* as *indices* rather than [indexes](https://developers.google.com/style/word-list#letter-i),
    following the precedent of [`numpy.indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices").
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For consistency we also pluralize *matrix* as *matrices*.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Grammatical issues inadequately addressed by the NumPy or Google rules are decided
    by the section on “Grammar and Usage” in the most recent edition of the [Chicago
    Manual of Style](https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We welcome being [alerted](https://github.com/numpy/numpy/issues) to cases
    we should add to the NumPy style rules.  ### Docstrings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using [Sphinx](http://www.sphinx-doc.org/) in combination with the NumPy
    conventions, you should use the `numpydoc` extension so that your docstrings will
    be handled correctly. For example, Sphinx will extract the `Parameters` section
    from your docstring and convert it into a field list. Using `numpydoc` will also
    avoid the reStructuredText errors produced by plain Sphinx when it encounters
    NumPy docstring conventions like section headers (e.g. `-------------`) that sphinx
    does not expect to find in docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is available from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[numpydoc on PyPI](https://pypi.python.org/pypi/numpydoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[numpydoc on GitHub](https://github.com/numpy/numpydoc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that for documentation within NumPy, it is not necessary to do `import
    numpy as np` at the beginning of an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please use the `numpydoc` [formatting standard](https://numpydoc.readthedocs.io/en/latest/format.html#format
    "(in numpydoc v1.6.0rc3.dev0)") as shown in their [example](https://numpydoc.readthedocs.io/en/latest/example.html#example
    "(in numpydoc v1.6.0rc3.dev0)").  ### Documenting C/C++ Code'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses [Doxygen](https://www.doxygen.nl/index.html) to parse specially-formatted
    C/C++ comment blocks. This generates XML files, which are converted by [Breathe](https://breathe.readthedocs.io/en/latest/)
    into RST, which is used by Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: '**It takes three steps to complete the documentation process**:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Writing the comment blocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although there is still no commenting style set to follow, the Javadoc is more
    preferable than the others due to the similarities with the current existing non-indexed
    comment blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please see [“Documenting the code”](https://www.doxygen.nl/manual/docblocks.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**This is what Javadoc style looks like**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This a simple brief.
  prefs: []
  type: TYPE_NORMAL
- en: And the details goes here. Multi lines are welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**num** – leave a comment for parameter num.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**str** – leave a comment for the second parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: leave a comment for the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: '**For line comment, you can use a triple forward slash. For example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Template to represent limbo numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Specializations for integer types that are part of nowhere. It doesn’t support
    with any real types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param Tp:'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the integer. Required to be an integer type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param N:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Public Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Default constructor. Initialize nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Set Default behavior for copy the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Returns the raw data for the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: Protected Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Example for inline comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Doxygen Tags:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more tags/commands, please take a look at [https://www.doxygen.nl/manual/commands.html](https://www.doxygen.nl/manual/commands.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`@brief`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a paragraph that serves as a brief description. By default the first
    sentence of the documentation block is automatically treated as a brief description,
    since option [JAVADOC_AUTOBRIEF](https://www.doxygen.nl/manual/config.html#cfg_javadoc_autobrief)
    is enabled within doxygen configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '`@details`'
  prefs: []
  type: TYPE_NORMAL
- en: Just like `@brief` starts a brief description, `@details` starts the detailed
    description. You can also start a new paragraph (blank line) then the `@details`
    command is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '`@param`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a parameter description for a function parameter with name <parameter-name>,
    followed by a description of the parameter. The existence of the parameter is
    checked and a warning is given if the documentation of this (or any other) parameter
    is missing or not present in the function declaration or definition.
  prefs: []
  type: TYPE_NORMAL
- en: '`@return`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a return value description for a function. Multiple adjacent `@return`
    commands will be joined into a single paragraph. The `@return` description ends
    when a blank line or some other sectioning command is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '`@code/@endcode`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of code. A code block is treated differently from ordinary
    text. It is interpreted as source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`@rst/@endrst`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Take a look at the following example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A comment block contains reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [Breathe](https://breathe.readthedocs.io/en/latest/), we were able
    to bring it to [Doxygen](https://www.doxygen.nl/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Feeding Doxygen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all headers files are collected automatically. You have to add the desired
    C/C++ header paths within the sub-config files of Doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-config files have the unique name `.doxyfile`, which you can usually find
    near directories that contain documented headers. You need to create a new config
    file if there’s not one located in a path close(2-depth) to the headers you want
    to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-config files can accept any of [Doxygen](https://www.doxygen.nl/index.html)
    [configuration options](https://www.doxygen.nl/manual/config.html), but do not
    override or re-initialize any configuration option, rather only use the concatenation
    operator “+=”. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '@CUR_DIR is a template constant returns the current dir path of the sub-config
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Inclusion directives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Breathe](https://breathe.readthedocs.io/en/latest/) provides a wide range
    of custom directives to allow converting the documents generated by [Doxygen](https://www.doxygen.nl/index.html)
    into reST files.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please check out “[Directives & Config Variables](https://breathe.readthedocs.io/en/latest/directives.html)”
  prefs: []
  type: TYPE_NORMAL
- en: 'Common directives:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`doxygenfunction`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for a single function. The function
    name is required to be unique in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [example](https://breathe.readthedocs.io/en/latest/function.html#function-example)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygenclass`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive generates the appropriate output for a single class. It takes
    the standard project, path, outline and no-link options and additionally the members,
    protected-members, private-members, undoc-members, membergroups and members-only
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the *doxygenclass documentation <https://breathe.readthedocs.io/en/latest/class.html#class-example>_*
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygennamespace`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a namespace.
    It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options. To reference a nested namespace, the full namespaced path must be provided,
    e.g. foo::bar for the bar namespace inside the foo namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygennamespace documentation](https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygengroup`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a doxygen
    group. A doxygen group can be declared with specific doxygen markup in the source
    comments as covered in the doxygen [grouping documentation](https://www.doxygen.nl/manual/grouping.html).
  prefs: []
  type: TYPE_NORMAL
- en: It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Checkout the [doxygengroup documentation](https://breathe.readthedocs.io/en/latest/group.html#group-example)
    for more details and to see it in action.  ### User documentation'
  prefs: []
  type: TYPE_NORMAL
- en: In general, we follow the [Google developer documentation style guide](https://developers.google.com/style)
    for the User Guide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NumPy style governs cases where:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google has no guidance, or
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: We prefer not to use the Google style
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our current rules:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We pluralize *index* as *indices* rather than [indexes](https://developers.google.com/style/word-list#letter-i),
    following the precedent of [`numpy.indices`](../reference/generated/numpy.indices.html#numpy.indices
    "numpy.indices").
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For consistency we also pluralize *matrix* as *matrices*.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Grammatical issues inadequately addressed by the NumPy or Google rules are decided
    by the section on “Grammar and Usage” in the most recent edition of the [Chicago
    Manual of Style](https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We welcome being [alerted](https://github.com/numpy/numpy/issues) to cases we
    should add to the NumPy style rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Docstrings'
  prefs: []
  type: TYPE_NORMAL
- en: When using [Sphinx](http://www.sphinx-doc.org/) in combination with the NumPy
    conventions, you should use the `numpydoc` extension so that your docstrings will
    be handled correctly. For example, Sphinx will extract the `Parameters` section
    from your docstring and convert it into a field list. Using `numpydoc` will also
    avoid the reStructuredText errors produced by plain Sphinx when it encounters
    NumPy docstring conventions like section headers (e.g. `-------------`) that sphinx
    does not expect to find in docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is available from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[numpydoc on PyPI](https://pypi.python.org/pypi/numpydoc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[numpydoc on GitHub](https://github.com/numpy/numpydoc/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that for documentation within NumPy, it is not necessary to do `import
    numpy as np` at the beginning of an example.
  prefs: []
  type: TYPE_NORMAL
- en: Please use the `numpydoc` [formatting standard](https://numpydoc.readthedocs.io/en/latest/format.html#format
    "(in numpydoc v1.6.0rc3.dev0)") as shown in their [example](https://numpydoc.readthedocs.io/en/latest/example.html#example
    "(in numpydoc v1.6.0rc3.dev0)").
  prefs: []
  type: TYPE_NORMAL
- en: '### Documenting C/C++ Code'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy uses [Doxygen](https://www.doxygen.nl/index.html) to parse specially-formatted
    C/C++ comment blocks. This generates XML files, which are converted by [Breathe](https://breathe.readthedocs.io/en/latest/)
    into RST, which is used by Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: '**It takes three steps to complete the documentation process**:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Writing the comment blocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although there is still no commenting style set to follow, the Javadoc is more
    preferable than the others due to the similarities with the current existing non-indexed
    comment blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please see [“Documenting the code”](https://www.doxygen.nl/manual/docblocks.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**This is what Javadoc style looks like**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This a simple brief.
  prefs: []
  type: TYPE_NORMAL
- en: And the details goes here. Multi lines are welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**num** – leave a comment for parameter num.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**str** – leave a comment for the second parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: leave a comment for the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: '**For line comment, you can use a triple forward slash. For example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Template to represent limbo numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Specializations for integer types that are part of nowhere. It doesn’t support
    with any real types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param Tp:'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the integer. Required to be an integer type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param N:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Public Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Default constructor. Initialize nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Set Default behavior for copy the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the raw data for the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: Protected Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Example for inline comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Doxygen Tags:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more tags/commands, please take a look at [https://www.doxygen.nl/manual/commands.html](https://www.doxygen.nl/manual/commands.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`@brief`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a paragraph that serves as a brief description. By default the first
    sentence of the documentation block is automatically treated as a brief description,
    since option [JAVADOC_AUTOBRIEF](https://www.doxygen.nl/manual/config.html#cfg_javadoc_autobrief)
    is enabled within doxygen configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '`@details`'
  prefs: []
  type: TYPE_NORMAL
- en: Just like `@brief` starts a brief description, `@details` starts the detailed
    description. You can also start a new paragraph (blank line) then the `@details`
    command is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '`@param`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a parameter description for a function parameter with name <parameter-name>,
    followed by a description of the parameter. The existence of the parameter is
    checked and a warning is given if the documentation of this (or any other) parameter
    is missing or not present in the function declaration or definition.
  prefs: []
  type: TYPE_NORMAL
- en: '`@return`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a return value description for a function. Multiple adjacent `@return`
    commands will be joined into a single paragraph. The `@return` description ends
    when a blank line or some other sectioning command is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '`@code/@endcode`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of code. A code block is treated differently from ordinary
    text. It is interpreted as source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`@rst/@endrst`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Take a look at the following example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: A comment block contains reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [Breathe](https://breathe.readthedocs.io/en/latest/), we were able
    to bring it to [Doxygen](https://www.doxygen.nl/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Feeding Doxygen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all headers files are collected automatically. You have to add the desired
    C/C++ header paths within the sub-config files of Doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-config files have the unique name `.doxyfile`, which you can usually find
    near directories that contain documented headers. You need to create a new config
    file if there’s not one located in a path close(2-depth) to the headers you want
    to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-config files can accept any of [Doxygen](https://www.doxygen.nl/index.html)
    [configuration options](https://www.doxygen.nl/manual/config.html), but do not
    override or re-initialize any configuration option, rather only use the concatenation
    operator “+=”. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '@CUR_DIR is a template constant returns the current dir path of the sub-config
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Inclusion directives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Breathe](https://breathe.readthedocs.io/en/latest/) provides a wide range
    of custom directives to allow converting the documents generated by [Doxygen](https://www.doxygen.nl/index.html)
    into reST files.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please check out “[Directives & Config Variables](https://breathe.readthedocs.io/en/latest/directives.html)”
  prefs: []
  type: TYPE_NORMAL
- en: 'Common directives:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`doxygenfunction`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for a single function. The function
    name is required to be unique in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [example](https://breathe.readthedocs.io/en/latest/function.html#function-example)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygenclass`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive generates the appropriate output for a single class. It takes
    the standard project, path, outline and no-link options and additionally the members,
    protected-members, private-members, undoc-members, membergroups and members-only
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the *doxygenclass documentation <https://breathe.readthedocs.io/en/latest/class.html#class-example>_*
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygennamespace`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a namespace.
    It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options. To reference a nested namespace, the full namespaced path must be provided,
    e.g. foo::bar for the bar namespace inside the foo namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygennamespace documentation](https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygengroup`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a doxygen
    group. A doxygen group can be declared with specific doxygen markup in the source
    comments as covered in the doxygen [grouping documentation](https://www.doxygen.nl/manual/grouping.html).
  prefs: []
  type: TYPE_NORMAL
- en: It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygengroup documentation](https://breathe.readthedocs.io/en/latest/group.html#group-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Writing the comment blocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although there is still no commenting style set to follow, the Javadoc is more
    preferable than the others due to the similarities with the current existing non-indexed
    comment blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please see [“Documenting the code”](https://www.doxygen.nl/manual/docblocks.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**This is what Javadoc style looks like**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This a simple brief.
  prefs: []
  type: TYPE_NORMAL
- en: And the details goes here. Multi lines are welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**num** – leave a comment for parameter num.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**str** – leave a comment for the second parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: leave a comment for the returned value.
  prefs: []
  type: TYPE_NORMAL
- en: '**For line comment, you can use a triple forward slash. For example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Template to represent limbo numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Specializations for integer types that are part of nowhere. It doesn’t support
    with any real types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param Tp:'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the integer. Required to be an integer type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Param N:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements.
  prefs: []
  type: TYPE_NORMAL
- en: Public Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Default constructor. Initialize nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Set Default behavior for copy the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Returns the raw data for the limbo.
  prefs: []
  type: TYPE_NORMAL
- en: Protected Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Example for inline comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Doxygen Tags:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more tags/commands, please take a look at [https://www.doxygen.nl/manual/commands.html](https://www.doxygen.nl/manual/commands.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`@brief`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a paragraph that serves as a brief description. By default the first
    sentence of the documentation block is automatically treated as a brief description,
    since option [JAVADOC_AUTOBRIEF](https://www.doxygen.nl/manual/config.html#cfg_javadoc_autobrief)
    is enabled within doxygen configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '`@details`'
  prefs: []
  type: TYPE_NORMAL
- en: Just like `@brief` starts a brief description, `@details` starts the detailed
    description. You can also start a new paragraph (blank line) then the `@details`
    command is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '`@param`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a parameter description for a function parameter with name <parameter-name>,
    followed by a description of the parameter. The existence of the parameter is
    checked and a warning is given if the documentation of this (or any other) parameter
    is missing or not present in the function declaration or definition.
  prefs: []
  type: TYPE_NORMAL
- en: '`@return`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a return value description for a function. Multiple adjacent `@return`
    commands will be joined into a single paragraph. The `@return` description ends
    when a blank line or some other sectioning command is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '`@code/@endcode`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of code. A code block is treated differently from ordinary
    text. It is interpreted as source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`@rst/@endrst`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Take a look at the following example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: A comment block contains reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [Breathe](https://breathe.readthedocs.io/en/latest/), we were able
    to bring it to [Doxygen](https://www.doxygen.nl/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Doxygen Tags:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more tags/commands, please take a look at [https://www.doxygen.nl/manual/commands.html](https://www.doxygen.nl/manual/commands.html)
  prefs: []
  type: TYPE_NORMAL
- en: '`@brief`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a paragraph that serves as a brief description. By default the first
    sentence of the documentation block is automatically treated as a brief description,
    since option [JAVADOC_AUTOBRIEF](https://www.doxygen.nl/manual/config.html#cfg_javadoc_autobrief)
    is enabled within doxygen configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '`@details`'
  prefs: []
  type: TYPE_NORMAL
- en: Just like `@brief` starts a brief description, `@details` starts the detailed
    description. You can also start a new paragraph (blank line) then the `@details`
    command is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: '`@param`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a parameter description for a function parameter with name <parameter-name>,
    followed by a description of the parameter. The existence of the parameter is
    checked and a warning is given if the documentation of this (or any other) parameter
    is missing or not present in the function declaration or definition.
  prefs: []
  type: TYPE_NORMAL
- en: '`@return`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts a return value description for a function. Multiple adjacent `@return`
    commands will be joined into a single paragraph. The `@return` description ends
    when a blank line or some other sectioning command is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: '`@code/@endcode`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of code. A code block is treated differently from ordinary
    text. It is interpreted as source code.
  prefs: []
  type: TYPE_NORMAL
- en: '`@rst/@endrst`'
  prefs: []
  type: TYPE_NORMAL
- en: Starts/Ends a block of reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '**Take a look at the following example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**And here is how it is rendered**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: A comment block contains reST markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [Breathe](https://breathe.readthedocs.io/en/latest/), we were able
    to bring it to [Doxygen](https://www.doxygen.nl/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Feeding Doxygen
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all headers files are collected automatically. You have to add the desired
    C/C++ header paths within the sub-config files of Doxygen.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-config files have the unique name `.doxyfile`, which you can usually find
    near directories that contain documented headers. You need to create a new config
    file if there’s not one located in a path close(2-depth) to the headers you want
    to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-config files can accept any of [Doxygen](https://www.doxygen.nl/index.html)
    [configuration options](https://www.doxygen.nl/manual/config.html), but do not
    override or re-initialize any configuration option, rather only use the concatenation
    operator “+=”. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '@CUR_DIR is a template constant returns the current dir path of the sub-config
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Inclusion directives
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Breathe](https://breathe.readthedocs.io/en/latest/) provides a wide range
    of custom directives to allow converting the documents generated by [Doxygen](https://www.doxygen.nl/index.html)
    into reST files.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please check out “[Directives & Config Variables](https://breathe.readthedocs.io/en/latest/directives.html)”
  prefs: []
  type: TYPE_NORMAL
- en: 'Common directives:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`doxygenfunction`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for a single function. The function
    name is required to be unique in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [example](https://breathe.readthedocs.io/en/latest/function.html#function-example)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygenclass`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive generates the appropriate output for a single class. It takes
    the standard project, path, outline and no-link options and additionally the members,
    protected-members, private-members, undoc-members, membergroups and members-only
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the *doxygenclass documentation <https://breathe.readthedocs.io/en/latest/class.html#class-example>_*
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygennamespace`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a namespace.
    It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options. To reference a nested namespace, the full namespaced path must be provided,
    e.g. foo::bar for the bar namespace inside the foo namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygennamespace documentation](https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygengroup`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a doxygen
    group. A doxygen group can be declared with specific doxygen markup in the source
    comments as covered in the doxygen [grouping documentation](https://www.doxygen.nl/manual/grouping.html).
  prefs: []
  type: TYPE_NORMAL
- en: It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygengroup documentation](https://breathe.readthedocs.io/en/latest/group.html#group-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common directives:'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '`doxygenfunction`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for a single function. The function
    name is required to be unique in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [example](https://breathe.readthedocs.io/en/latest/function.html#function-example)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygenclass`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This directive generates the appropriate output for a single class. It takes
    the standard project, path, outline and no-link options and additionally the members,
    protected-members, private-members, undoc-members, membergroups and members-only
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the *doxygenclass documentation <https://breathe.readthedocs.io/en/latest/class.html#class-example>_*
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygennamespace`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a namespace.
    It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options. To reference a nested namespace, the full namespaced path must be provided,
    e.g. foo::bar for the bar namespace inside the foo namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygennamespace documentation](https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '`doxygengroup`'
  prefs: []
  type: TYPE_NORMAL
- en: This directive generates the appropriate output for the contents of a doxygen
    group. A doxygen group can be declared with specific doxygen markup in the source
    comments as covered in the doxygen [grouping documentation](https://www.doxygen.nl/manual/grouping.html).
  prefs: []
  type: TYPE_NORMAL
- en: It takes the standard project, path, outline and no-link options and additionally
    the content-only, members, protected-members, private-members and undoc-members
    options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Checkout the [doxygengroup documentation](https://breathe.readthedocs.io/en/latest/group.html#group-example)
    for more details and to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The leading organization of technical writers, [Write the Docs](https://www.writethedocs.org/),
    holds conferences, hosts learning resources, and runs a Slack channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Every engineer is also a writer,” says Google’s [collection of technical writing
    resources](https://developers.google.com/tech-writing), which includes free online
    courses for developers in planning and writing documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Software Carpentry’s](https://software-carpentry.org/lessons) mission is teaching
    software to researchers. In addition to hosting the curriculum, the website explains
    how to present ideas effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
