- en: pandas.read_parquet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html](https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Load a parquet object from the file path, returning a DataFrame.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '**path**str, path object or file-like object'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'String, path object (implementing `os.PathLike[str]`), or file-like object
    implementing a binary `read()` function. The string could be a URL. Valid URL
    schemes include http, ftp, s3, gs, and file. For file URLs, a host is expected.
    A local file could be: `file://localhost/path/to/table.parquet`. A file URL can
    also be a path to a directory that contains multiple partitioned parquet files.
    Both pyarrow and fastparquet support paths to directories as well as file URLs.
    A directory path could be: `file://localhost/path/to/tables` or `s3://bucket/partition_dir`.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**engine**{‘auto’, ‘pyarrow’, ‘fastparquet’}, default ‘auto’'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Parquet library to use. If ‘auto’, then the option `io.parquet.engine` is used.
    The default `io.parquet.engine` behavior is to try ‘pyarrow’, falling back to
    ‘fastparquet’ if ‘pyarrow’ is unavailable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: When using the `'pyarrow'` engine and no storage options are provided and a
    filesystem is implemented by both `pyarrow.fs` and `fsspec` (e.g. “s3://”), then
    the `pyarrow.fs` filesystem is attempted first. Use the filesystem keyword with
    an instantiated fsspec filesystem if you wish to use its implementation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**columns**list, default=None'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: If not None, only these columns will be read from the file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.0.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**use_nullable_dtypes**bool, default False'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'If True, use dtypes that use `pd.NA` as missing value indicator for the resulting
    DataFrame. (only applicable for the `pyarrow` engine) As new dtypes are added
    that support `pd.NA` in the future, the output with this option will change to
    use those dtypes. Note: this is an experimental option, and behaviour (e.g. additional
    support dtypes) may change without notice.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.0.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"pyarrow"`：返回由 pyarrow 支持的可空 [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame。'
- en: New in version 2.0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '**filesystem**fsspec or pyarrow filesystem, default None'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**filesystem**fsspec 或 pyarrow 文件系统，默认为 None'
- en: Filesystem object to use when reading the parquet file. Only implemented for
    `engine="pyarrow"`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取 parquet 文件时要使用的文件系统对象。仅对`engine="pyarrow"`实现。
- en: New in version 2.1.0.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.1.0 中新增。
- en: '**filters**List[Tuple] or List[List[Tuple]], default None'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**filters**List[Tuple] 或 List[List[Tuple]]，默认为 None'
- en: 'To filter out data. Filter syntax: [[(column, op, val), …],…] where op is [==,
    =, >, >=, <, <=, !=, in, not in] The innermost tuples are transposed into a set
    of filters applied through an AND operation. The outer list combines these sets
    of filters through an OR operation. A single list of tuples can also be used,
    meaning that no OR operation between set of filters is to be conducted.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤数据。过滤器语法：[[(column, op, val), …],…]，其中 op 为 [==, =, >, >=, <, <=, !=, in,
    not in]。最内层元组通过 AND 操作转置为一组过滤器。外部列表通过 OR 操作组合这些过滤器集。也可以使用单个元组列表，意味着不进行过滤器集之间的
    OR 操作。
- en: Using this argument will NOT result in row-wise filtering of the final partitions
    unless `engine="pyarrow"` is also specified. For other engines, filtering is only
    performed at the partition level, that is, to prevent the loading of some row-groups
    and/or files.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此参数不会导致最终分区按行进行筛选，除非也指定了`engine="pyarrow"`。对于其他引擎，筛选仅在分区级别执行，即防止加载某些行组和/或文件。
- en: New in version 2.1.0.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.1.0 中新增。
- en: '****kwargs**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '****kwargs**'
- en: Any additional kwargs are passed to the engine.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 任何额外的 kwargs 都将传递给引擎。
- en: 'Returns:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: DataFrame
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame
- en: See also
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DataFrame.to_parquet`](pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.to_parquet`](pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet
    "pandas.DataFrame.to_parquet")'
- en: Create a parquet object that serializes a DataFrame.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建序列化 DataFrame 的 Parquet 对象。
- en: Examples
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function uses kwargs that are passed directly to the engine. In the following
    example, we use the filters argument of the pyarrow engine to filter the rows
    of the DataFrame.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用直接传递给引擎的 kwargs。在下面的示例中，我们使用 pyarrow 引擎的 filters 参数来过滤 DataFrame 的行。
- en: Since pyarrow is the default engine, we can omit the engine argument. Note that
    the filters argument is implemented by the pyarrow engine, which can benefit from
    multithreading and also potentially be more economical in terms of memory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 pyarrow 是默认引擎，我们可以省略引擎参数。请注意，filters 参数由 pyarrow 引擎实现，这可以从多线程中受益，并且在内存方面也可能更经济。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
