- en: numpy.testing.assert_array_almost_equal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_almost_equal.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Raises an AssertionError if two objects are not equal up to desired precision.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to use one of [`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of this function for more consistent
    floating point comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: The test verifies identical shapes and that the elements of `actual` and `desired`
    satisfy.
  prefs: []
  type: TYPE_NORMAL
- en: '`abs(desired-actual) < 1.5 * 10**(-decimal)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is a looser test than originally documented, but agrees with what the actual
    implementation did up to rounding vagaries. An exception is raised at shape mismatch
    or conflicting values. In contrast to the standard usage in numpy, NaNs are compared
    like numbers, no assertion is raised if both objects have NaNs in the same positions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The actual object to check.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The desired, expected object.
  prefs: []
  type: TYPE_NORMAL
- en: '**decimal**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired precision, default is 6.
  prefs: []
  type: TYPE_NORMAL
- en: '**err_msg**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The error message to be printed in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: '**verbose**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the conflicting values are appended to the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: AssertionError
  prefs: []
  type: TYPE_NORMAL
- en: If actual and desired are not equal up to specified precision.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare two array_like objects for equality with desired relative and/or absolute
    precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp"), [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp"), [`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: the first assert does not raise an exception
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
