- en: Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: 原文：[https://numpy.org/doc/1.26/reference/random/performance.html](https://numpy.org/doc/1.26/reference/random/performance.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/performance.html](https://numpy.org/doc/1.26/reference/random/performance.html)
- en: Recommendation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐
- en: The recommended generator for general use is [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64") or its upgraded variant [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") for heavily-parallel use cases. They are statistically
    high quality, full-featured, and fast on most platforms, but somewhat slow when
    compiled for 32-bit processes. See [Upgrading PCG64 with PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)
    for details on when heavy parallelism would indicate using [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通用用途推荐的生成器是[`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64 "numpy.random.PCG64")或其升级版[`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM")，适用于高度并行的用例。它们在大多数平台上具有统计学上的高质量、完整功能并且运行速度快，但在32位进程编译时略慢。有关何时使用[`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM")进行重型并行的详细信息，请参阅[使用 PCG64DXSM 升级 PCG64](upgrading-pcg64.html#upgrading-pcg64)。
- en: '[`Philox`](bit_generators/philox.html#numpy.random.Philox "numpy.random.Philox")
    is fairly slow, but its statistical properties have very high quality, and it
    is easy to get an assuredly-independent stream by using unique keys. If that is
    the style you wish to use for parallel streams, or you are porting from another
    system that uses that style, then [`Philox`](bit_generators/philox.html#numpy.random.Philox
    "numpy.random.Philox") is your choice.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Philox`](bit_generators/philox.html#numpy.random.Philox "numpy.random.Philox")相对较慢，但其统计属性非常高质量，通过使用唯一密钥可以轻松获得确定性独立的流。如果这是您希望用于并行流的样式，或者您正在从使用该样式的其他系统进行移植，那么[`Philox`](bit_generators/philox.html#numpy.random.Philox
    "numpy.random.Philox")是您的选择。'
- en: '[`SFC64`](bit_generators/sfc64.html#numpy.random.SFC64 "numpy.random.SFC64")
    is statistically high quality and very fast. However, it lacks jumpability. If
    you are not using that capability and want lots of speed, even on 32-bit processes,
    this is your choice.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SFC64`](bit_generators/sfc64.html#numpy.random.SFC64 "numpy.random.SFC64")具有统计上的高质量和非常快的运行速度。然而，它缺乏可跳跃性。如果您不使用该功能并且希望在32位进程上也能获得很高的速度，这是您的选择。'
- en: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    [fails some statistical tests](https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf)
    and is not especially fast compared to modern PRNGs. For these reasons, we mostly
    do not recommend using it on its own, only through the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") for reproducing old results. That said, it has a very
    long history as a default in many systems.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    [未通过某些统计测试](https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf)，与现代伪随机数生成器相比速度不是特别快。基于这些原因，我们大多不建议单独使用它，只通过遗留的[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")来重现旧的结果。尽管如此，作为许多系统中的默认值，它有着非常悠久的历史。'
- en: Timings
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间
- en: The timings below are the time in ns to produce 1 random value from a specific
    distribution. The original [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") generator is much slower since it requires 2 32-bit values
    to equal the output of the faster generators.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的时间是生成特定分布的1个随机值所需的时间（单位：纳秒）。由于需要2个32位值才能等于更快的生成器的输出，原始的[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937")生成器要慢得多。
- en: Integer performance has a similar ordering.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 整数性能具有类似的排序。
- en: The pattern is similar for other, more complex generators. The normal performance
    of the legacy [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    generator is much lower than the other since it uses the Box-Muller transform
    rather than the Ziggurat method. The performance gap for Exponentials is also
    large due to the cost of computing the log function to invert the CDF. The column
    labeled MT19973 uses the same 32-bit generator as [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") but produces random variates using [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他更复杂的发生器，其模式也类似。传统 [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    生成器的正常性能要低得多，因为它使用的是 Box-Muller 变换而不是 Ziggurat 方法。对于指数分布的性能差距也很大，这是由于计算对数函数以反演
    CDF 的成本很高。标有 MT19973 的列使用与 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 相同的 32 位生成器，但是利用 [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") 生成随机变量。
- en: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 | RandomState |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 | RandomState |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 3.3 | 1.9 | 2.0 | 3.3 | 1.8 | 3.1 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 32 位无符号整数 | 3.3 | 1.9 | 2.0 | 3.3 | 1.8 | 3.1 |'
- en: '| 64-bit Unsigned Ints | 5.6 | 3.2 | 2.9 | 4.9 | 2.5 | 5.5 |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 64 位无符号整数 | 5.6 | 3.2 | 2.9 | 4.9 | 2.5 | 5.5 |'
- en: '| Uniforms | 5.9 | 3.1 | 2.9 | 5.0 | 2.6 | 6.0 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 5.9 | 3.1 | 2.9 | 5.0 | 2.6 | 6.0 |'
- en: '| Normals | 13.9 | 10.8 | 10.5 | 12.0 | 8.3 | 56.8 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 13.9 | 10.8 | 10.5 | 12.0 | 8.3 | 56.8 |'
- en: '| Exponentials | 9.1 | 6.0 | 5.8 | 8.1 | 5.4 | 63.9 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 9.1 | 6.0 | 5.8 | 8.1 | 5.4 | 63.9 |'
- en: '| Gammas | 37.2 | 30.8 | 28.9 | 34.0 | 27.5 | 77.0 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 伽玛分布 | 37.2 | 30.8 | 28.9 | 34.0 | 27.5 | 77.0 |'
- en: '| Binomials | 21.3 | 17.4 | 17.6 | 19.3 | 15.6 | 21.4 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 二项分布 | 21.3 | 17.4 | 17.6 | 19.3 | 15.6 | 21.4 |'
- en: '| Laplaces | 73.2 | 72.3 | 76.1 | 73.0 | 72.3 | 82.5 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 拉普拉斯分布 | 73.2 | 72.3 | 76.1 | 73.0 | 72.3 | 82.5 |'
- en: '| Poissons | 111.7 | 103.4 | 100.5 | 109.4 | 90.7 | 115.2 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 泊松分布 | 111.7 | 103.4 | 100.5 | 109.4 | 90.7 | 115.2 |'
- en: The next table presents the performance in percentage relative to values generated
    by the legacy generator, `RandomState(MT19937())`. The overall performance was
    computed using a geometric mean.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个表格显示了性能相对于传统生成器 `RandomState(MT19937())` 生成值的百分比。整体性能是使用几何均值计算的。
- en: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 96 | 162 | 160 | 96 | 175 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 32 位无符号整数 | 96 | 162 | 160 | 96 | 175 |'
- en: '| 64-bit Unsigned Ints | 97 | 171 | 188 | 113 | 218 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 64 位无符号整数 | 97 | 171 | 188 | 113 | 218 |'
- en: '| Uniforms | 102 | 192 | 206 | 121 | 233 |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 102 | 192 | 206 | 121 | 233 |'
- en: '| Normals | 409 | 526 | 541 | 471 | 684 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 409 | 526 | 541 | 471 | 684 |'
- en: '| Exponentials | 701 | 1071 | 1101 | 784 | 1179 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 701 | 1071 | 1101 | 784 | 1179 |'
- en: '| Gammas | 207 | 250 | 266 | 227 | 281 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 伽玛分布 | 207 | 250 | 266 | 227 | 281 |'
- en: '| Binomials | 100 | 123 | 122 | 111 | 138 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 二项式分布 | 100 | 123 | 122 | 111 | 138 |'
- en: '| Laplaces | 113 | 114 | 108 | 113 | 114 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 拉普拉斯分布 | 113 | 114 | 108 | 113 | 114 |'
- en: '| Poissons | 103 | 111 | 115 | 105 | 127 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 泊松分布 | 103 | 111 | 115 | 105 | 127 |'
- en: '| Overall | 159 | 219 | 225 | 174 | 251 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 总体 | 159 | 219 | 225 | 174 | 251 |'
- en: Note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: All timings were taken using Linux on an AMD Ryzen 9 3900X processor.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有时间均使用 AMD Ryzen 9 3900X 处理器在 Linux 上进行。
- en: Performance on different Operating Systems
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同操作系统上的性能
- en: Performance differs across platforms due to compiler and hardware availability
    (e.g., register width) differences. The default bit generator has been chosen
    to perform well on 64-bit platforms. Performance on 32-bit operating systems is
    very different.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不同平台的性能存在差异，这是因为编译器和硬件可用性（如寄存器宽度）的差异。默认比特生成器已被选为在 64 位平台上表现良好。32 位操作系统的性能则截然不同。
- en: The values reported are normalized relative to the speed of MT19937 in each
    table. A value of 100 indicates that the performance matches the MT19937. Higher
    values indicate improved performance. These values cannot be compared across tables.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 报告的值是相对于每个表中 MT19937 速度的归一化值。值为 100 表示性能与 MT19937 相匹配。较高的值表示性能提高。这些值不能跨表进行比较。
- en: 64-bit Linux
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64 位 Linux
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 168 | 166 | 100 | 182 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 32 位无符号整数 | 100 | 168 | 166 | 100 | 182 |'
- en: '| 64-bit Unsigned Ints | 100 | 176 | 193 | 116 | 224 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 64 位无符号整数 | 100 | 176 | 193 | 116 | 224 |'
- en: '| Uniforms | 100 | 188 | 202 | 118 | 228 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 100 | 188 | 202 | 118 | 228 |'
- en: '| Normals | 100 | 128 | 132 | 115 | 167 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 100 | 128 | 132 | 115 | 167 |'
- en: '| Exponentials | 100 | 152 | 157 | 111 | 168 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 152 | 157 | 111 | 168 |'
- en: '| Overall | 100 | 161 | 168 | 112 | 192 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 总体 | 100 | 161 | 168 | 112 | 192 |'
- en: 64-bit Windows
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64位 Windows
- en: The relative performance on 64-bit Linux and 64-bit Windows is broadly similar
    with the notable exception of the Philox generator.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在64位 Linux 和 64位 Windows 上的相对性能大致相似，但与 Philox 生成器明显不同。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 155 | 131 | 29 | 150 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 32位 无符号整数 | 100 | 155 | 131 | 29 | 150 |'
- en: '| 64-bit Unsigned Ints | 100 | 157 | 143 | 25 | 154 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 64位 无符号整数 | 100 | 157 | 143 | 25 | 154 |'
- en: '| Uniforms | 100 | 151 | 144 | 24 | 155 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 100 | 151 | 144 | 24 | 155 |'
- en: '| Normals | 100 | 129 | 128 | 37 | 150 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 100 | 129 | 128 | 37 | 150 |'
- en: '| Exponentials | 100 | 150 | 145 | 28 | 159 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 指数分布 | 100 | 150 | 145 | 28 | 159 |'
- en: '| **Overall** | 100 | 148 | 138 | 28 | 154 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 148 | 138 | 28 | 154 |'
- en: 32-bit Windows
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32位 Windows
- en: The performance of 64-bit generators on 32-bit Windows is much lower than on
    64-bit operating systems due to register width. MT19937, the generator that has
    been in NumPy since 2005, operates on 32-bit integers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 64位生成器在32位 Windows 上的性能远远低于64位操作系统，这是由于寄存器宽度。自2005年以来一直在NumPy中的生成器 MT19937 使用32位整数进行操作。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 24 | 34 | 14 | 57 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 32位 无符号整数 | 100 | 24 | 34 | 14 | 57 |'
- en: '| 64-bit Unsigned Ints | 100 | 21 | 32 | 14 | 74 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 64位 无符号整数 | 100 | 21 | 32 | 14 | 74 |'
- en: '| Uniforms | 100 | 21 | 34 | 16 | 73 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 100 | 21 | 34 | 16 | 73 |'
- en: '| Normals | 100 | 36 | 57 | 28 | 101 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 100 | 36 | 57 | 28 | 101 |'
- en: '| Exponentials | 100 | 28 | 44 | 20 | 88 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 指数分布 | 100 | 28 | 44 | 20 | 88 |'
- en: '| **Overall** | 100 | 25 | 39 | 18 | 77 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 25 | 39 | 18 | 77 |'
- en: Note
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Linux timings used Ubuntu 20.04 and GCC 9.3.0\. Windows timings were made on
    Windows 10 using Microsoft C/C++ Optimizing Compiler Version 19 (Visual Studio
    2019). All timings were produced on an AMD Ryzen 9 3900X processor.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 时间使用 Ubuntu 20.04 和 GCC 9.3.0。Windows 时间使用 Windows 10 并使用 Microsoft C/C++
    优化编译器版本 19 (Visual Studio 2019)。所有时间均在 AMD Ryzen 9 3900X 处理器上生成。
- en: Recommendation
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐
- en: The recommended generator for general use is [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64
    "numpy.random.PCG64") or its upgraded variant [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM") for heavily-parallel use cases. They are statistically
    high quality, full-featured, and fast on most platforms, but somewhat slow when
    compiled for 32-bit processes. See [Upgrading PCG64 with PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)
    for details on when heavy parallelism would indicate using [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM
    "numpy.random.PCG64DXSM").
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 用于一般用途的推荐生成器是 [`PCG64`](bit_generators/pcg64.html#numpy.random.PCG64 "numpy.random.PCG64")
    或其升级变体 [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM "numpy.random.PCG64DXSM")，用于密集并行使用情况。它们在统计上具有高质量、功能齐全，在大多数平台上运行速度快，但在编译为32位进程时略慢。有关何时指示使用
    [`PCG64DXSM`](bit_generators/pcg64dxsm.html#numpy.random.PCG64DXSM "numpy.random.PCG64DXSM")
    的详细信息，请参见 [将 PCG64 升级为 PCG64DXSM](upgrading-pcg64.html#upgrading-pcg64)。
- en: '[`Philox`](bit_generators/philox.html#numpy.random.Philox "numpy.random.Philox")
    is fairly slow, but its statistical properties have very high quality, and it
    is easy to get an assuredly-independent stream by using unique keys. If that is
    the style you wish to use for parallel streams, or you are porting from another
    system that uses that style, then [`Philox`](bit_generators/philox.html#numpy.random.Philox
    "numpy.random.Philox") is your choice.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Philox`](bit_generators/philox.html#numpy.random.Philox "numpy.random.Philox")
    是相当慢的，但其统计特性非常高，使用唯一键可以轻松获得保证独立的流。如果这是您希望用于并行流的风格，或者您正在从使用该风格的其他系统进行移植，则 [`Philox`](bit_generators/philox.html#numpy.random.Philox
    "numpy.random.Philox") 是您的选择。'
- en: '[`SFC64`](bit_generators/sfc64.html#numpy.random.SFC64 "numpy.random.SFC64")
    is statistically high quality and very fast. However, it lacks jumpability. If
    you are not using that capability and want lots of speed, even on 32-bit processes,
    this is your choice.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SFC64`](bit_generators/sfc64.html#numpy.random.SFC64 "numpy.random.SFC64")
    在统计上具有高质量并且非常快速。然而，它缺乏可跳跃性。如果您不使用该功能，并且想要大量速度，甚至在32位进程上，这是您的选择。'
- en: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    [fails some statistical tests](https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf)
    and is not especially fast compared to modern PRNGs. For these reasons, we mostly
    do not recommend using it on its own, only through the legacy [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") for reproducing old results. That said, it has a very
    long history as a default in many systems.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937 "numpy.random.MT19937")
    [在一些统计测试中失败](https://www.iro.umontreal.ca/~lecuyer/myftp/papers/testu01.pdf)，与现代
    PRNG 相比也不特别快。因此，我们大多数情况下不推荐单独使用它，而是通过遗留的 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 来复现旧的结果。尽管如此，在许多系统中，它作为默认选项存在已有很长时间的历史。'
- en: Timings
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时间
- en: The timings below are the time in ns to produce 1 random value from a specific
    distribution. The original [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") generator is much slower since it requires 2 32-bit values
    to equal the output of the faster generators.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下计时是以纳秒为单位生成特定分布的 1 个随机值所需的时间。原始的 [`MT19937`](bit_generators/mt19937.html#numpy.random.MT19937
    "numpy.random.MT19937") 生成器较慢，因为它需要 2 个 32 位值才能等于更快生成器的输出。
- en: Integer performance has a similar ordering.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 整数性能具有类似的顺序。
- en: The pattern is similar for other, more complex generators. The normal performance
    of the legacy [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    generator is much lower than the other since it uses the Box-Muller transform
    rather than the Ziggurat method. The performance gap for Exponentials is also
    large due to the cost of computing the log function to invert the CDF. The column
    labeled MT19973 uses the same 32-bit generator as [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") but produces random variates using [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他更复杂的生成器，模式是相似的。由于它使用的是 Box-Muller 方法而不是 Ziggurat 方法，旧的 [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") 生成器的正常表现远低于其他生成器。指数分布的性能差距也很大，这是由于计算对数函数以求逆 CDF 的成本较高。标记为
    MT19973 的列使用与 [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    相同的 32 位生成器，但使用 [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    生成随机变量。
- en: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 | RandomState |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 | RandomState |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 3.3 | 1.9 | 2.0 | 3.3 | 1.8 | 3.1 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 32 位无符号整数 | 3.3 | 1.9 | 2.0 | 3.3 | 1.8 | 3.1 |'
- en: '| 64-bit Unsigned Ints | 5.6 | 3.2 | 2.9 | 4.9 | 2.5 | 5.5 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 64 位无符号整数 | 5.6 | 3.2 | 2.9 | 4.9 | 2.5 | 5.5 |'
- en: '| Uniforms | 5.9 | 3.1 | 2.9 | 5.0 | 2.6 | 6.0 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 5.9 | 3.1 | 2.9 | 5.0 | 2.6 | 6.0 |'
- en: '| Normals | 13.9 | 10.8 | 10.5 | 12.0 | 8.3 | 56.8 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 13.9 | 10.8 | 10.5 | 12.0 | 8.3 | 56.8 |'
- en: '| Exponentials | 9.1 | 6.0 | 5.8 | 8.1 | 5.4 | 63.9 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 指数分布 | 9.1 | 6.0 | 5.8 | 8.1 | 5.4 | 63.9 |'
- en: '| Gammas | 37.2 | 30.8 | 28.9 | 34.0 | 27.5 | 77.0 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| Gammas | 37.2 | 30.8 | 28.9 | 34.0 | 27.5 | 77.0 |'
- en: '| Binomials | 21.3 | 17.4 | 17.6 | 19.3 | 15.6 | 21.4 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 二项分布 | 21.3 | 17.4 | 17.6 | 19.3 | 15.6 | 21.4 |'
- en: '| Laplaces | 73.2 | 72.3 | 76.1 | 73.0 | 72.3 | 82.5 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Laplaces | 73.2 | 72.3 | 76.1 | 73.0 | 72.3 | 82.5 |'
- en: '| Poissons | 111.7 | 103.4 | 100.5 | 109.4 | 90.7 | 115.2 |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 泊松分布 | 111.7 | 103.4 | 100.5 | 109.4 | 90.7 | 115.2 |'
- en: The next table presents the performance in percentage relative to values generated
    by the legacy generator, `RandomState(MT19937())`. The overall performance was
    computed using a geometric mean.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下表以相对于使用旧生成器 `RandomState(MT19937())` 生成的值的百分比的形式展示了性能。整体性能是使用几何平均计算得出的。
- en: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|  | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 96 | 162 | 160 | 96 | 175 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 32 位无符号整数 | 96 | 162 | 160 | 96 | 175 |'
- en: '| 64-bit Unsigned Ints | 97 | 171 | 188 | 113 | 218 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 64 位无符号整数 | 97 | 171 | 188 | 113 | 218 |'
- en: '| Uniforms | 102 | 192 | 206 | 121 | 233 |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 均匀分布 | 102 | 192 | 206 | 121 | 233 |'
- en: '| Normals | 409 | 526 | 541 | 471 | 684 |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 409 | 526 | 541 | 471 | 684 |'
- en: '| Exponentials | 701 | 1071 | 1101 | 784 | 1179 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 指数分布 | 701 | 1071 | 1101 | 784 | 1179 |'
- en: '| Gammas | 207 | 250 | 266 | 227 | 281 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| Gammas | 207 | 250 | 266 | 227 | 281 |'
- en: '| Binomials | 100 | 123 | 122 | 111 | 138 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 二项分布 | 100 | 123 | 122 | 111 | 138 |'
- en: '| Laplaces | 113 | 114 | 108 | 113 | 114 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| Laplaces | 113 | 114 | 108 | 113 | 114 |'
- en: '| Poissons | 103 | 111 | 115 | 105 | 127 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 泊松分布 | 103 | 111 | 115 | 105 | 127 |'
- en: '| Overall | 159 | 219 | 225 | 174 | 251 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 总体性能 | 159 | 219 | 225 | 174 | 251 |'
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All timings were taken using Linux on an AMD Ryzen 9 3900X processor.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的计时都是在 AMD Ryzen 9 3900X 处理器上使用 Linux 进行的。
- en: Performance on different Operating Systems
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同操作系统上的性能
- en: Performance differs across platforms due to compiler and hardware availability
    (e.g., register width) differences. The default bit generator has been chosen
    to perform well on 64-bit platforms. Performance on 32-bit operating systems is
    very different.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于编译器和硬件可用性（例如，寄存器宽度）的不同，表现在不同平台上有所不同。默认比特生成器被选择为在64位平台上表现良好。在32位操作系统上性能差别非常大。
- en: The values reported are normalized relative to the speed of MT19937 in each
    table. A value of 100 indicates that the performance matches the MT19937. Higher
    values indicate improved performance. These values cannot be compared across tables.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 报告的数值是相对于每个表中MT19937速度的正常化值。数值为100表示性能与MT19937匹配。数值越高表示性能越好。这些数值不能在各表之间进行比较。
- en: 64-bit Linux
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64位 Linux
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 168 | 166 | 100 | 182 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 168 | 166 | 100 | 182 |'
- en: '| 64-bit Unsigned Ints | 100 | 176 | 193 | 116 | 224 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 176 | 193 | 116 | 224 |'
- en: '| Uniforms | 100 | 188 | 202 | 118 | 228 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 均匀性 | 100 | 188 | 202 | 118 | 228 |'
- en: '| Normals | 100 | 128 | 132 | 115 | 167 |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 标准 | 100 | 128 | 132 | 115 | 167 |'
- en: '| Exponentials | 100 | 152 | 157 | 111 | 168 |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 152 | 157 | 111 | 168 |'
- en: '| Overall | 100 | 161 | 168 | 112 | 192 |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 161 | 168 | 112 | 192 |'
- en: 64-bit Windows
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64位 Windows
- en: The relative performance on 64-bit Linux and 64-bit Windows is broadly similar
    with the notable exception of the Philox generator.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于64位Linux和64位Windows的性能大致相似，但Philox生成器是个显著的例外。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 155 | 131 | 29 | 150 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 155 | 131 | 29 | 150 |'
- en: '| 64-bit Unsigned Ints | 100 | 157 | 143 | 25 | 154 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 157 | 143 | 25 | 154 |'
- en: '| Uniforms | 100 | 151 | 144 | 24 | 155 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 均匀性 | 100 | 151 | 144 | 24 | 155 |'
- en: '| Normals | 100 | 129 | 128 | 37 | 150 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 标准 | 100 | 129 | 128 | 37 | 150 |'
- en: '| Exponentials | 100 | 150 | 145 | 28 | 159 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 150 | 145 | 28 | 159 |'
- en: '| **Overall** | 100 | 148 | 138 | 28 | 154 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 148 | 138 | 28 | 154 |'
- en: 32-bit Windows
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32位 Windows
- en: The performance of 64-bit generators on 32-bit Windows is much lower than on
    64-bit operating systems due to register width. MT19937, the generator that has
    been in NumPy since 2005, operates on 32-bit integers.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 64位生成器在32位Windows上的性能远低于64位操作系统，这是由于寄存器宽度引起的。自2005年以来一直存在于NumPy中的MT19937生成器使用32位整数。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 24 | 34 | 14 | 57 |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 24 | 34 | 14 | 57 |'
- en: '| 64-bit Unsigned Ints | 100 | 21 | 32 | 14 | 74 |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 21 | 32 | 14 | 74 |'
- en: '| Uniforms | 100 | 21 | 34 | 16 | 73 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 均匀性 | 100 | 21 | 34 | 16 | 73 |'
- en: '| Normals | 100 | 36 | 57 | 28 | 101 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 标准 | 100 | 36 | 57 | 28 | 101 |'
- en: '| Exponentials | 100 | 28 | 44 | 20 | 88 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 28 | 44 | 20 | 88 |'
- en: '| **Overall** | 100 | 25 | 39 | 18 | 77 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 25 | 39 | 18 | 77 |'
- en: Note
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Linux timings used Ubuntu 20.04 and GCC 9.3.0\. Windows timings were made on
    Windows 10 using Microsoft C/C++ Optimizing Compiler Version 19 (Visual Studio
    2019). All timings were produced on an AMD Ryzen 9 3900X processor.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Linux时间使用Ubuntu 20.04和GCC 9.3.0。Windows时间在Windows 10上使用Microsoft C/C++优化编译器版本19（Visual
    Studio 2019）进行。所有时间均在AMD Ryzen 9 3900X处理器上产生。
- en: 64-bit Linux
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64位 Linux
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 168 | 166 | 100 | 182 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 168 | 166 | 100 | 182 |'
- en: '| 64-bit Unsigned Ints | 100 | 176 | 193 | 116 | 224 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 176 | 193 | 116 | 224 |'
- en: '| Uniforms | 100 | 188 | 202 | 118 | 228 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 均匀性 | 100 | 188 | 202 | 118 | 228 |'
- en: '| Normals | 100 | 128 | 132 | 115 | 167 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 标准 | 100 | 128 | 132 | 115 | 167 |'
- en: '| Exponentials | 100 | 152 | 157 | 111 | 168 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 152 | 157 | 111 | 168 |'
- en: '| Overall | 100 | 161 | 168 | 112 | 192 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 161 | 168 | 112 | 192 |'
- en: 64-bit Windows
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 64位 Windows
- en: The relative performance on 64-bit Linux and 64-bit Windows is broadly similar
    with the notable exception of the Philox generator.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于64位Linux和64位Windows的性能大致相似，但Philox生成器是个显著的例外。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 155 | 131 | 29 | 150 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 155 | 131 | 29 | 150 |'
- en: '| 64-bit Unsigned Ints | 100 | 157 | 143 | 25 | 154 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 157 | 143 | 25 | 154 |'
- en: '| Uniforms | 100 | 151 | 144 | 24 | 155 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 统一 | 100 | 151 | 144 | 24 | 155 |'
- en: '| Normals | 100 | 129 | 128 | 37 | 150 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 100 | 129 | 128 | 37 | 150 |'
- en: '| Exponentials | 100 | 150 | 145 | 28 | 159 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 150 | 145 | 28 | 159 |'
- en: '| **Overall** | 100 | 148 | 138 | 28 | 154 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 148 | 138 | 28 | 154 |'
- en: 32-bit Windows
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32位Windows
- en: The performance of 64-bit generators on 32-bit Windows is much lower than on
    64-bit operating systems due to register width. MT19937, the generator that has
    been in NumPy since 2005, operates on 32-bit integers.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 64位生成器在32位Windows上的性能远低于64位操作系统，这是由于寄存器宽度造成的。自2005年以来在NumPy中存在的生成器MT19937是基于32位整数运行的。
- en: '| Distribution | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 分布 | MT19937 | PCG64 | PCG64DXSM | Philox | SFC64 |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| 32-bit Unsigned Ints | 100 | 24 | 34 | 14 | 57 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 32位无符号整数 | 100 | 24 | 34 | 14 | 57 |'
- en: '| 64-bit Unsigned Ints | 100 | 21 | 32 | 14 | 74 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 64位无符号整数 | 100 | 21 | 32 | 14 | 74 |'
- en: '| Uniforms | 100 | 21 | 34 | 16 | 73 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 统一 | 100 | 21 | 34 | 16 | 73 |'
- en: '| Normals | 100 | 36 | 57 | 28 | 101 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 正态分布 | 100 | 36 | 57 | 28 | 101 |'
- en: '| Exponentials | 100 | 28 | 44 | 20 | 88 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 指数 | 100 | 28 | 44 | 20 | 88 |'
- en: '| **Overall** | 100 | 25 | 39 | 18 | 77 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| **总体** | 100 | 25 | 39 | 18 | 77 |'
- en: Note
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Linux timings used Ubuntu 20.04 and GCC 9.3.0\. Windows timings were made on
    Windows 10 using Microsoft C/C++ Optimizing Compiler Version 19 (Visual Studio
    2019). All timings were produced on an AMD Ryzen 9 3900X processor.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的计时使用了Ubuntu 20.04和GCC 9.3.0。Windows的计时是在Windows 10上使用Microsoft C/C++优化编译器版本19（Visual
    Studio 2019）进行的。所有计时都是在AMD Ryzen 9 3900X处理器上完成的。
