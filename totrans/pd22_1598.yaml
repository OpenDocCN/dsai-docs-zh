- en: GroupBy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/groupby.html](https://pandas.pydata.org/docs/reference/groupby.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pandas.api.typing.DataFrameGroupBy` and `pandas.api.typing.SeriesGroupBy`
    instances are returned by groupby calls [`pandas.DataFrame.groupby()`](api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby
    "pandas.DataFrame.groupby") and [`pandas.Series.groupby()`](api/pandas.Series.groupby.html#pandas.Series.groupby
    "pandas.Series.groupby") respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.__iter__`](api/pandas.core.groupby.DataFrameGroupBy.__iter__.html#pandas.core.groupby.DataFrameGroupBy.__iter__
    "pandas.core.groupby.DataFrameGroupBy.__iter__")() | Groupby iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.__iter__`](api/pandas.core.groupby.SeriesGroupBy.__iter__.html#pandas.core.groupby.SeriesGroupBy.__iter__
    "pandas.core.groupby.SeriesGroupBy.__iter__")() | Groupby iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.groups`](api/pandas.core.groupby.DataFrameGroupBy.groups.html#pandas.core.groupby.DataFrameGroupBy.groups
    "pandas.core.groupby.DataFrameGroupBy.groups") | Dict {group name -> group labels}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.groups`](api/pandas.core.groupby.SeriesGroupBy.groups.html#pandas.core.groupby.SeriesGroupBy.groups
    "pandas.core.groupby.SeriesGroupBy.groups") | Dict {group name -> group labels}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.indices`](api/pandas.core.groupby.DataFrameGroupBy.indices.html#pandas.core.groupby.DataFrameGroupBy.indices
    "pandas.core.groupby.DataFrameGroupBy.indices") | Dict {group name -> group indices}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.indices`](api/pandas.core.groupby.SeriesGroupBy.indices.html#pandas.core.groupby.SeriesGroupBy.indices
    "pandas.core.groupby.SeriesGroupBy.indices") | Dict {group name -> group indices}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.get_group`](api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group")(name[, obj]) | Construct DataFrame
    from group with provided name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.get_group`](api/pandas.core.groupby.SeriesGroupBy.get_group.html#pandas.core.groupby.SeriesGroupBy.get_group
    "pandas.core.groupby.SeriesGroupBy.get_group")(name[, obj]) | Construct DataFrame
    from group with provided name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Grouper`](api/pandas.Grouper.html#pandas.Grouper "pandas.Grouper")(*args, **kwargs)
    | A Grouper allows the user to specify a groupby instruction for an object. |'
  prefs: []
  type: TYPE_TB
- en: Function application helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`NamedAgg`](api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")(column, aggfunc)
    | Helper for column specific aggregation with control over output column names.
    |'
  prefs: []
  type: TYPE_TB
- en: Function application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`SeriesGroupBy.apply`](api/pandas.core.groupby.SeriesGroupBy.apply.html#pandas.core.groupby.SeriesGroupBy.apply
    "pandas.core.groupby.SeriesGroupBy.apply")(func, *args, **kwargs) | Apply function
    `func` group-wise and combine the results together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.apply`](api/pandas.core.groupby.DataFrameGroupBy.apply.html#pandas.core.groupby.DataFrameGroupBy.apply
    "pandas.core.groupby.DataFrameGroupBy.apply")(func, *args[, ...]) | Apply function
    `func` group-wise and combine the results together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.agg`](api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg")([func, engine, engine_kwargs]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.agg`](api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg")([func, engine, ...]) | Aggregate using
    one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.aggregate`](api/pandas.core.groupby.SeriesGroupBy.aggregate.html#pandas.core.groupby.SeriesGroupBy.aggregate
    "pandas.core.groupby.SeriesGroupBy.aggregate")([func, engine, ...]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.aggregate`](api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")([func, engine, ...]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.transform`](api/pandas.core.groupby.SeriesGroupBy.transform.html#pandas.core.groupby.SeriesGroupBy.transform
    "pandas.core.groupby.SeriesGroupBy.transform")(func, *args[, ...]) | Call function
    producing a same-indexed Series on each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.transform`](api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform")(func, *args[, ...]) | Call function
    producing a same-indexed DataFrame on each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.pipe`](api/pandas.core.groupby.SeriesGroupBy.pipe.html#pandas.core.groupby.SeriesGroupBy.pipe
    "pandas.core.groupby.SeriesGroupBy.pipe")(func, *args, **kwargs) | Apply a `func`
    with arguments to this GroupBy object and return its result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.pipe`](api/pandas.core.groupby.DataFrameGroupBy.pipe.html#pandas.core.groupby.DataFrameGroupBy.pipe
    "pandas.core.groupby.DataFrameGroupBy.pipe")(func, *args, **kwargs) | Apply a
    `func` with arguments to this GroupBy object and return its result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.filter`](api/pandas.core.groupby.DataFrameGroupBy.filter.html#pandas.core.groupby.DataFrameGroupBy.filter
    "pandas.core.groupby.DataFrameGroupBy.filter")(func[, dropna]) | Filter elements
    from groups that don''t satisfy a criterion. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.filter`](api/pandas.core.groupby.SeriesGroupBy.filter.html#pandas.core.groupby.SeriesGroupBy.filter
    "pandas.core.groupby.SeriesGroupBy.filter")(func[, dropna]) | Filter elements
    from groups that don''t satisfy a criterion. |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrameGroupBy` computations / descriptive stats'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.all`](api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all")([skipna]) | Return True if all values
    in the group are truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.any`](api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any")([skipna]) | Return True if any value
    in the group is truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.bfill`](api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill")([limit]) | Backward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.corr`](api/pandas.core.groupby.DataFrameGroupBy.corr.html#pandas.core.groupby.DataFrameGroupBy.corr
    "pandas.core.groupby.DataFrameGroupBy.corr")([method, min_periods, ...]) | Compute
    pairwise correlation of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.corrwith`](api/pandas.core.groupby.DataFrameGroupBy.corrwith.html#pandas.core.groupby.DataFrameGroupBy.corrwith
    "pandas.core.groupby.DataFrameGroupBy.corrwith")(other[, axis, ...]) | Compute
    pairwise correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.count`](api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count")() | Compute count of group, excluding
    missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cov`](api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov")([min_periods, ddof, ...]) | Compute
    pairwise covariance of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumcount`](api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount")([ascending]) | Number each item
    in each group from 0 to the length of that group - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cummax`](api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax")([axis, numeric_only]) | Cumulative
    max for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cummin`](api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin")([axis, numeric_only]) | Cumulative
    min for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumprod`](api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod")([axis]) | Cumulative product for
    each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumsum`](api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum")([axis]) | Cumulative sum for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.describe`](api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe")([percentiles, ...]) | Generate
    descriptive statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.diff`](api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff")([periods, axis]) | First discrete
    difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ffill`](api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill")([limit]) | Forward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.fillna`](api/pandas.core.groupby.DataFrameGroupBy.fillna.html#pandas.core.groupby.DataFrameGroupBy.fillna
    "pandas.core.groupby.DataFrameGroupBy.fillna")([value, method, ...]) | (DEPRECATED)
    Fill NA/NaN values using the specified method within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.first`](api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first")([numeric_only, ...]) | Compute the
    first entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.head`](api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head")([n]) | Return first n rows of each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.idxmax`](api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax")([axis, skipna, ...]) | Return index
    of first occurrence of maximum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.idxmin`](api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin")([axis, skipna, ...]) | Return index
    of first occurrence of minimum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.last`](api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last")([numeric_only, ...]) | Compute the
    last entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.max`](api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max")([numeric_only, ...]) | Compute max
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.mean`](api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean")([numeric_only, ...]) | Compute mean
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.median`](api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median")([numeric_only]) | Compute median
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.min`](api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min")([numeric_only, ...]) | Compute min
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ngroup`](api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")([ascending]) | Number each group
    from 0 to the number of groups - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.nth`](api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | Take the nth row from each group
    if n is an int, otherwise a subset of rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.nunique`](api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique")([dropna]) | Return DataFrame with
    counts of unique elements in each position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ohlc`](api/pandas.core.groupby.DataFrameGroupBy.ohlc.html#pandas.core.groupby.DataFrameGroupBy.ohlc
    "pandas.core.groupby.DataFrameGroupBy.ohlc")() | Compute open, high, low and close
    values of a group, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.pct_change`](api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change")([periods, ...]) | Calculate
    pct_change of each value to previous entry in group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.prod`](api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod")([numeric_only, min_count]) | Compute
    prod of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.quantile`](api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile")([q, ...]) | Return group values
    at the given quantile, a la numpy.percentile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.rank`](api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank")([method, ascending, ...]) | Provide
    the rank of values within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.resample`](api/pandas.core.groupby.DataFrameGroupBy.resample.html#pandas.core.groupby.DataFrameGroupBy.resample
    "pandas.core.groupby.DataFrameGroupBy.resample")(rule, *args[, ...]) | Provide
    resampling when using a TimeGrouper. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.rolling`](api/pandas.core.groupby.DataFrameGroupBy.rolling.html#pandas.core.groupby.DataFrameGroupBy.rolling
    "pandas.core.groupby.DataFrameGroupBy.rolling")(*args, **kwargs) | Return a rolling
    grouper, providing rolling functionality per group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sample`](api/pandas.core.groupby.DataFrameGroupBy.sample.html#pandas.core.groupby.DataFrameGroupBy.sample
    "pandas.core.groupby.DataFrameGroupBy.sample")([n, frac, replace, ...]) | Return
    a random sample of items from each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sem`](api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem")([ddof, numeric_only]) | Compute standard
    error of the mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.shift`](api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift")([periods, freq, ...]) | Shift each
    group by periods observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.size`](api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size")() | Compute group sizes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.skew`](api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew")([axis, skipna, ...]) | Return unbiased
    skew within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.std`](api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std")([ddof, engine, ...]) | Compute standard
    deviation of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sum`](api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum")([numeric_only, ...]) | Compute sum
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.var`](api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var")([ddof, engine, ...]) | Compute variance
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.tail`](api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail")([n]) | Return last n rows of each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.take`](api/pandas.core.groupby.DataFrameGroupBy.take.html#pandas.core.groupby.DataFrameGroupBy.take
    "pandas.core.groupby.DataFrameGroupBy.take")(indices[, axis]) | Return the elements
    in the given *positional* indices in each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.value_counts`](api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts")([subset, ...]) | Return a
    Series or DataFrame containing counts of unique rows. |'
  prefs: []
  type: TYPE_TB
- en: '`SeriesGroupBy` computations / descriptive stats'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`SeriesGroupBy.all`](api/pandas.core.groupby.SeriesGroupBy.all.html#pandas.core.groupby.SeriesGroupBy.all
    "pandas.core.groupby.SeriesGroupBy.all")([skipna]) | Return True if all values
    in the group are truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.any`](api/pandas.core.groupby.SeriesGroupBy.any.html#pandas.core.groupby.SeriesGroupBy.any
    "pandas.core.groupby.SeriesGroupBy.any")([skipna]) | Return True if any value
    in the group is truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.bfill`](api/pandas.core.groupby.SeriesGroupBy.bfill.html#pandas.core.groupby.SeriesGroupBy.bfill
    "pandas.core.groupby.SeriesGroupBy.bfill")([limit]) | Backward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.corr`](api/pandas.core.groupby.SeriesGroupBy.corr.html#pandas.core.groupby.SeriesGroupBy.corr
    "pandas.core.groupby.SeriesGroupBy.corr")(other[, method, min_periods]) | Compute
    correlation with other Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.count`](api/pandas.core.groupby.SeriesGroupBy.count.html#pandas.core.groupby.SeriesGroupBy.count
    "pandas.core.groupby.SeriesGroupBy.count")() | Compute count of group, excluding
    missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cov`](api/pandas.core.groupby.SeriesGroupBy.cov.html#pandas.core.groupby.SeriesGroupBy.cov
    "pandas.core.groupby.SeriesGroupBy.cov")(other[, min_periods, ddof]) | Compute
    covariance with Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumcount`](api/pandas.core.groupby.SeriesGroupBy.cumcount.html#pandas.core.groupby.SeriesGroupBy.cumcount
    "pandas.core.groupby.SeriesGroupBy.cumcount")([ascending]) | Number each item
    in each group from 0 to the length of that group - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cummax`](api/pandas.core.groupby.SeriesGroupBy.cummax.html#pandas.core.groupby.SeriesGroupBy.cummax
    "pandas.core.groupby.SeriesGroupBy.cummax")([axis, numeric_only]) | Cumulative
    max for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cummin`](api/pandas.core.groupby.SeriesGroupBy.cummin.html#pandas.core.groupby.SeriesGroupBy.cummin
    "pandas.core.groupby.SeriesGroupBy.cummin")([axis, numeric_only]) | Cumulative
    min for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumprod`](api/pandas.core.groupby.SeriesGroupBy.cumprod.html#pandas.core.groupby.SeriesGroupBy.cumprod
    "pandas.core.groupby.SeriesGroupBy.cumprod")([axis]) | Cumulative product for
    each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumsum`](api/pandas.core.groupby.SeriesGroupBy.cumsum.html#pandas.core.groupby.SeriesGroupBy.cumsum
    "pandas.core.groupby.SeriesGroupBy.cumsum")([axis]) | Cumulative sum for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.describe`](api/pandas.core.groupby.SeriesGroupBy.describe.html#pandas.core.groupby.SeriesGroupBy.describe
    "pandas.core.groupby.SeriesGroupBy.describe")([percentiles, ...]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.diff`](api/pandas.core.groupby.SeriesGroupBy.diff.html#pandas.core.groupby.SeriesGroupBy.diff
    "pandas.core.groupby.SeriesGroupBy.diff")([periods, axis]) | First discrete difference
    of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ffill`](api/pandas.core.groupby.SeriesGroupBy.ffill.html#pandas.core.groupby.SeriesGroupBy.ffill
    "pandas.core.groupby.SeriesGroupBy.ffill")([limit]) | Forward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.fillna`](api/pandas.core.groupby.SeriesGroupBy.fillna.html#pandas.core.groupby.SeriesGroupBy.fillna
    "pandas.core.groupby.SeriesGroupBy.fillna")([value, method, axis, ...]) | (DEPRECATED)
    Fill NA/NaN values using the specified method within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.first`](api/pandas.core.groupby.SeriesGroupBy.first.html#pandas.core.groupby.SeriesGroupBy.first
    "pandas.core.groupby.SeriesGroupBy.first")([numeric_only, ...]) | Compute the
    first entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.head`](api/pandas.core.groupby.SeriesGroupBy.head.html#pandas.core.groupby.SeriesGroupBy.head
    "pandas.core.groupby.SeriesGroupBy.head")([n]) | Return first n rows of each group.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.last`](api/pandas.core.groupby.SeriesGroupBy.last.html#pandas.core.groupby.SeriesGroupBy.last
    "pandas.core.groupby.SeriesGroupBy.last")([numeric_only, ...]) | Compute the last
    entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.idxmax`](api/pandas.core.groupby.SeriesGroupBy.idxmax.html#pandas.core.groupby.SeriesGroupBy.idxmax
    "pandas.core.groupby.SeriesGroupBy.idxmax")([axis, skipna]) | Return the row label
    of the maximum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.idxmin`](api/pandas.core.groupby.SeriesGroupBy.idxmin.html#pandas.core.groupby.SeriesGroupBy.idxmin
    "pandas.core.groupby.SeriesGroupBy.idxmin")([axis, skipna]) | Return the row label
    of the minimum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.is_monotonic_increasing`](api/pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing
    "pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing") | Return whether
    each group''s values are monotonically increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.is_monotonic_decreasing`](api/pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing
    "pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing") | Return whether
    each group''s values are monotonically decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.max`](api/pandas.core.groupby.SeriesGroupBy.max.html#pandas.core.groupby.SeriesGroupBy.max
    "pandas.core.groupby.SeriesGroupBy.max")([numeric_only, min_count, ...]) | Compute
    max of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.mean`](api/pandas.core.groupby.SeriesGroupBy.mean.html#pandas.core.groupby.SeriesGroupBy.mean
    "pandas.core.groupby.SeriesGroupBy.mean")([numeric_only, engine, ...]) | Compute
    mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.median`](api/pandas.core.groupby.SeriesGroupBy.median.html#pandas.core.groupby.SeriesGroupBy.median
    "pandas.core.groupby.SeriesGroupBy.median")([numeric_only]) | Compute median of
    groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.min`](api/pandas.core.groupby.SeriesGroupBy.min.html#pandas.core.groupby.SeriesGroupBy.min
    "pandas.core.groupby.SeriesGroupBy.min")([numeric_only, min_count, ...]) | Compute
    min of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ngroup`](api/pandas.core.groupby.SeriesGroupBy.ngroup.html#pandas.core.groupby.SeriesGroupBy.ngroup
    "pandas.core.groupby.SeriesGroupBy.ngroup")([ascending]) | Number each group from
    0 to the number of groups - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nlargest`](api/pandas.core.groupby.SeriesGroupBy.nlargest.html#pandas.core.groupby.SeriesGroupBy.nlargest
    "pandas.core.groupby.SeriesGroupBy.nlargest")([n, keep]) | Return the largest
    n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nsmallest`](api/pandas.core.groupby.SeriesGroupBy.nsmallest.html#pandas.core.groupby.SeriesGroupBy.nsmallest
    "pandas.core.groupby.SeriesGroupBy.nsmallest")([n, keep]) | Return the smallest
    n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nth`](api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth") | Take the nth row from each group if
    n is an int, otherwise a subset of rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nunique`](api/pandas.core.groupby.SeriesGroupBy.nunique.html#pandas.core.groupby.SeriesGroupBy.nunique
    "pandas.core.groupby.SeriesGroupBy.nunique")([dropna]) | Return number of unique
    elements in the group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.unique`](api/pandas.core.groupby.SeriesGroupBy.unique.html#pandas.core.groupby.SeriesGroupBy.unique
    "pandas.core.groupby.SeriesGroupBy.unique")() | Return unique values for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ohlc`](api/pandas.core.groupby.SeriesGroupBy.ohlc.html#pandas.core.groupby.SeriesGroupBy.ohlc
    "pandas.core.groupby.SeriesGroupBy.ohlc")() | Compute open, high, low and close
    values of a group, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.pct_change`](api/pandas.core.groupby.SeriesGroupBy.pct_change.html#pandas.core.groupby.SeriesGroupBy.pct_change
    "pandas.core.groupby.SeriesGroupBy.pct_change")([periods, ...]) | Calculate pct_change
    of each value to previous entry in group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.prod`](api/pandas.core.groupby.SeriesGroupBy.prod.html#pandas.core.groupby.SeriesGroupBy.prod
    "pandas.core.groupby.SeriesGroupBy.prod")([numeric_only, min_count]) | Compute
    prod of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.quantile`](api/pandas.core.groupby.SeriesGroupBy.quantile.html#pandas.core.groupby.SeriesGroupBy.quantile
    "pandas.core.groupby.SeriesGroupBy.quantile")([q, interpolation, ...]) | Return
    group values at the given quantile, a la numpy.percentile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.rank`](api/pandas.core.groupby.SeriesGroupBy.rank.html#pandas.core.groupby.SeriesGroupBy.rank
    "pandas.core.groupby.SeriesGroupBy.rank")([method, ascending, ...]) | Provide
    the rank of values within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.resample`](api/pandas.core.groupby.SeriesGroupBy.resample.html#pandas.core.groupby.SeriesGroupBy.resample
    "pandas.core.groupby.SeriesGroupBy.resample")(rule, *args[, ...]) | Provide resampling
    when using a TimeGrouper. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.rolling`](api/pandas.core.groupby.SeriesGroupBy.rolling.html#pandas.core.groupby.SeriesGroupBy.rolling
    "pandas.core.groupby.SeriesGroupBy.rolling")(*args, **kwargs) | Return a rolling
    grouper, providing rolling functionality per group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sample`](api/pandas.core.groupby.SeriesGroupBy.sample.html#pandas.core.groupby.SeriesGroupBy.sample
    "pandas.core.groupby.SeriesGroupBy.sample")([n, frac, replace, ...]) | Return
    a random sample of items from each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sem`](api/pandas.core.groupby.SeriesGroupBy.sem.html#pandas.core.groupby.SeriesGroupBy.sem
    "pandas.core.groupby.SeriesGroupBy.sem")([ddof, numeric_only]) | Compute standard
    error of the mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.shift`](api/pandas.core.groupby.SeriesGroupBy.shift.html#pandas.core.groupby.SeriesGroupBy.shift
    "pandas.core.groupby.SeriesGroupBy.shift")([periods, freq, axis, ...]) | Shift
    each group by periods observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.size`](api/pandas.core.groupby.SeriesGroupBy.size.html#pandas.core.groupby.SeriesGroupBy.size
    "pandas.core.groupby.SeriesGroupBy.size")() | Compute group sizes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.skew`](api/pandas.core.groupby.SeriesGroupBy.skew.html#pandas.core.groupby.SeriesGroupBy.skew
    "pandas.core.groupby.SeriesGroupBy.skew")([axis, skipna, numeric_only]) | Return
    unbiased skew within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.std`](api/pandas.core.groupby.SeriesGroupBy.std.html#pandas.core.groupby.SeriesGroupBy.std
    "pandas.core.groupby.SeriesGroupBy.std")([ddof, engine, ...]) | Compute standard
    deviation of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sum`](api/pandas.core.groupby.SeriesGroupBy.sum.html#pandas.core.groupby.SeriesGroupBy.sum
    "pandas.core.groupby.SeriesGroupBy.sum")([numeric_only, min_count, ...]) | Compute
    sum of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.var`](api/pandas.core.groupby.SeriesGroupBy.var.html#pandas.core.groupby.SeriesGroupBy.var
    "pandas.core.groupby.SeriesGroupBy.var")([ddof, engine, ...]) | Compute variance
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.tail`](api/pandas.core.groupby.SeriesGroupBy.tail.html#pandas.core.groupby.SeriesGroupBy.tail
    "pandas.core.groupby.SeriesGroupBy.tail")([n]) | Return last n rows of each group.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.take`](api/pandas.core.groupby.SeriesGroupBy.take.html#pandas.core.groupby.SeriesGroupBy.take
    "pandas.core.groupby.SeriesGroupBy.take")(indices[, axis]) | Return the elements
    in the given *positional* indices in each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.value_counts`](api/pandas.core.groupby.SeriesGroupBy.value_counts.html#pandas.core.groupby.SeriesGroupBy.value_counts
    "pandas.core.groupby.SeriesGroupBy.value_counts")([normalize, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: Plotting and visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.boxplot`](api/pandas.core.groupby.DataFrameGroupBy.boxplot.html#pandas.core.groupby.DataFrameGroupBy.boxplot
    "pandas.core.groupby.DataFrameGroupBy.boxplot")([subplots, column, ...]) | Make
    box plots from DataFrameGroupBy data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.hist`](api/pandas.core.groupby.DataFrameGroupBy.hist.html#pandas.core.groupby.DataFrameGroupBy.hist
    "pandas.core.groupby.DataFrameGroupBy.hist")([column, by, grid, ...]) | Make a
    histogram of the DataFrame''s columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.hist`](api/pandas.core.groupby.SeriesGroupBy.hist.html#pandas.core.groupby.SeriesGroupBy.hist
    "pandas.core.groupby.SeriesGroupBy.hist")([by, ax, grid, ...]) | Draw histogram
    of the input series using matplotlib. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.plot`](api/pandas.core.groupby.DataFrameGroupBy.plot.html#pandas.core.groupby.DataFrameGroupBy.plot
    "pandas.core.groupby.DataFrameGroupBy.plot") | Make plots of Series or DataFrame.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.plot`](api/pandas.core.groupby.SeriesGroupBy.plot.html#pandas.core.groupby.SeriesGroupBy.plot
    "pandas.core.groupby.SeriesGroupBy.plot") | Make plots of Series or DataFrame.
    |'
  prefs: []
  type: TYPE_TB
- en: Indexing, iteration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.__iter__`](api/pandas.core.groupby.DataFrameGroupBy.__iter__.html#pandas.core.groupby.DataFrameGroupBy.__iter__
    "pandas.core.groupby.DataFrameGroupBy.__iter__")() | Groupby iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.__iter__`](api/pandas.core.groupby.SeriesGroupBy.__iter__.html#pandas.core.groupby.SeriesGroupBy.__iter__
    "pandas.core.groupby.SeriesGroupBy.__iter__")() | Groupby iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.groups`](api/pandas.core.groupby.DataFrameGroupBy.groups.html#pandas.core.groupby.DataFrameGroupBy.groups
    "pandas.core.groupby.DataFrameGroupBy.groups") | Dict {group name -> group labels}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.groups`](api/pandas.core.groupby.SeriesGroupBy.groups.html#pandas.core.groupby.SeriesGroupBy.groups
    "pandas.core.groupby.SeriesGroupBy.groups") | Dict {group name -> group labels}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.indices`](api/pandas.core.groupby.DataFrameGroupBy.indices.html#pandas.core.groupby.DataFrameGroupBy.indices
    "pandas.core.groupby.DataFrameGroupBy.indices") | Dict {group name -> group indices}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.indices`](api/pandas.core.groupby.SeriesGroupBy.indices.html#pandas.core.groupby.SeriesGroupBy.indices
    "pandas.core.groupby.SeriesGroupBy.indices") | Dict {group name -> group indices}.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.get_group`](api/pandas.core.groupby.DataFrameGroupBy.get_group.html#pandas.core.groupby.DataFrameGroupBy.get_group
    "pandas.core.groupby.DataFrameGroupBy.get_group")(name[, obj]) | Construct DataFrame
    from group with provided name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.get_group`](api/pandas.core.groupby.SeriesGroupBy.get_group.html#pandas.core.groupby.SeriesGroupBy.get_group
    "pandas.core.groupby.SeriesGroupBy.get_group")(name[, obj]) | Construct DataFrame
    from group with provided name. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Grouper`](api/pandas.Grouper.html#pandas.Grouper "pandas.Grouper")(*args, **kwargs)
    | A Grouper allows the user to specify a groupby instruction for an object. |'
  prefs: []
  type: TYPE_TB
- en: Function application helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`NamedAgg`](api/pandas.NamedAgg.html#pandas.NamedAgg "pandas.NamedAgg")(column, aggfunc)
    | Helper for column specific aggregation with control over output column names.
    |'
  prefs: []
  type: TYPE_TB
- en: Function application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`SeriesGroupBy.apply`](api/pandas.core.groupby.SeriesGroupBy.apply.html#pandas.core.groupby.SeriesGroupBy.apply
    "pandas.core.groupby.SeriesGroupBy.apply")(func, *args, **kwargs) | Apply function
    `func` group-wise and combine the results together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.apply`](api/pandas.core.groupby.DataFrameGroupBy.apply.html#pandas.core.groupby.DataFrameGroupBy.apply
    "pandas.core.groupby.DataFrameGroupBy.apply")(func, *args[, ...]) | Apply function
    `func` group-wise and combine the results together. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.agg`](api/pandas.core.groupby.SeriesGroupBy.agg.html#pandas.core.groupby.SeriesGroupBy.agg
    "pandas.core.groupby.SeriesGroupBy.agg")([func, engine, engine_kwargs]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.agg`](api/pandas.core.groupby.DataFrameGroupBy.agg.html#pandas.core.groupby.DataFrameGroupBy.agg
    "pandas.core.groupby.DataFrameGroupBy.agg")([func, engine, ...]) | Aggregate using
    one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.aggregate`](api/pandas.core.groupby.SeriesGroupBy.aggregate.html#pandas.core.groupby.SeriesGroupBy.aggregate
    "pandas.core.groupby.SeriesGroupBy.aggregate")([func, engine, ...]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.aggregate`](api/pandas.core.groupby.DataFrameGroupBy.aggregate.html#pandas.core.groupby.DataFrameGroupBy.aggregate
    "pandas.core.groupby.DataFrameGroupBy.aggregate")([func, engine, ...]) | Aggregate
    using one or more operations over the specified axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.transform`](api/pandas.core.groupby.SeriesGroupBy.transform.html#pandas.core.groupby.SeriesGroupBy.transform
    "pandas.core.groupby.SeriesGroupBy.transform")(func, *args[, ...]) | Call function
    producing a same-indexed Series on each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.transform`](api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform
    "pandas.core.groupby.DataFrameGroupBy.transform")(func, *args[, ...]) | Call function
    producing a same-indexed DataFrame on each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.pipe`](api/pandas.core.groupby.SeriesGroupBy.pipe.html#pandas.core.groupby.SeriesGroupBy.pipe
    "pandas.core.groupby.SeriesGroupBy.pipe")(func, *args, **kwargs) | Apply a `func`
    with arguments to this GroupBy object and return its result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.pipe`](api/pandas.core.groupby.DataFrameGroupBy.pipe.html#pandas.core.groupby.DataFrameGroupBy.pipe
    "pandas.core.groupby.DataFrameGroupBy.pipe")(func, *args, **kwargs) | Apply a
    `func` with arguments to this GroupBy object and return its result. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.filter`](api/pandas.core.groupby.DataFrameGroupBy.filter.html#pandas.core.groupby.DataFrameGroupBy.filter
    "pandas.core.groupby.DataFrameGroupBy.filter")(func[, dropna]) | Filter elements
    from groups that don''t satisfy a criterion. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.filter`](api/pandas.core.groupby.SeriesGroupBy.filter.html#pandas.core.groupby.SeriesGroupBy.filter
    "pandas.core.groupby.SeriesGroupBy.filter")(func[, dropna]) | Filter elements
    from groups that don''t satisfy a criterion. |'
  prefs: []
  type: TYPE_TB
- en: '`DataFrameGroupBy` computations / descriptive stats'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.all`](api/pandas.core.groupby.DataFrameGroupBy.all.html#pandas.core.groupby.DataFrameGroupBy.all
    "pandas.core.groupby.DataFrameGroupBy.all")([skipna]) | Return True if all values
    in the group are truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.any`](api/pandas.core.groupby.DataFrameGroupBy.any.html#pandas.core.groupby.DataFrameGroupBy.any
    "pandas.core.groupby.DataFrameGroupBy.any")([skipna]) | Return True if any value
    in the group is truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.bfill`](api/pandas.core.groupby.DataFrameGroupBy.bfill.html#pandas.core.groupby.DataFrameGroupBy.bfill
    "pandas.core.groupby.DataFrameGroupBy.bfill")([limit]) | Backward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.corr`](api/pandas.core.groupby.DataFrameGroupBy.corr.html#pandas.core.groupby.DataFrameGroupBy.corr
    "pandas.core.groupby.DataFrameGroupBy.corr")([method, min_periods, ...]) | Compute
    pairwise correlation of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.corrwith`](api/pandas.core.groupby.DataFrameGroupBy.corrwith.html#pandas.core.groupby.DataFrameGroupBy.corrwith
    "pandas.core.groupby.DataFrameGroupBy.corrwith")(other[, axis, ...]) | Compute
    pairwise correlation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.count`](api/pandas.core.groupby.DataFrameGroupBy.count.html#pandas.core.groupby.DataFrameGroupBy.count
    "pandas.core.groupby.DataFrameGroupBy.count")() | Compute count of group, excluding
    missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cov`](api/pandas.core.groupby.DataFrameGroupBy.cov.html#pandas.core.groupby.DataFrameGroupBy.cov
    "pandas.core.groupby.DataFrameGroupBy.cov")([min_periods, ddof, ...]) | Compute
    pairwise covariance of columns, excluding NA/null values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumcount`](api/pandas.core.groupby.DataFrameGroupBy.cumcount.html#pandas.core.groupby.DataFrameGroupBy.cumcount
    "pandas.core.groupby.DataFrameGroupBy.cumcount")([ascending]) | Number each item
    in each group from 0 to the length of that group - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cummax`](api/pandas.core.groupby.DataFrameGroupBy.cummax.html#pandas.core.groupby.DataFrameGroupBy.cummax
    "pandas.core.groupby.DataFrameGroupBy.cummax")([axis, numeric_only]) | Cumulative
    max for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cummin`](api/pandas.core.groupby.DataFrameGroupBy.cummin.html#pandas.core.groupby.DataFrameGroupBy.cummin
    "pandas.core.groupby.DataFrameGroupBy.cummin")([axis, numeric_only]) | Cumulative
    min for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumprod`](api/pandas.core.groupby.DataFrameGroupBy.cumprod.html#pandas.core.groupby.DataFrameGroupBy.cumprod
    "pandas.core.groupby.DataFrameGroupBy.cumprod")([axis]) | Cumulative product for
    each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.cumsum`](api/pandas.core.groupby.DataFrameGroupBy.cumsum.html#pandas.core.groupby.DataFrameGroupBy.cumsum
    "pandas.core.groupby.DataFrameGroupBy.cumsum")([axis]) | Cumulative sum for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.describe`](api/pandas.core.groupby.DataFrameGroupBy.describe.html#pandas.core.groupby.DataFrameGroupBy.describe
    "pandas.core.groupby.DataFrameGroupBy.describe")([percentiles, ...]) | Generate
    descriptive statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.diff`](api/pandas.core.groupby.DataFrameGroupBy.diff.html#pandas.core.groupby.DataFrameGroupBy.diff
    "pandas.core.groupby.DataFrameGroupBy.diff")([periods, axis]) | First discrete
    difference of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ffill`](api/pandas.core.groupby.DataFrameGroupBy.ffill.html#pandas.core.groupby.DataFrameGroupBy.ffill
    "pandas.core.groupby.DataFrameGroupBy.ffill")([limit]) | Forward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.fillna`](api/pandas.core.groupby.DataFrameGroupBy.fillna.html#pandas.core.groupby.DataFrameGroupBy.fillna
    "pandas.core.groupby.DataFrameGroupBy.fillna")([value, method, ...]) | (DEPRECATED)
    Fill NA/NaN values using the specified method within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.first`](api/pandas.core.groupby.DataFrameGroupBy.first.html#pandas.core.groupby.DataFrameGroupBy.first
    "pandas.core.groupby.DataFrameGroupBy.first")([numeric_only, ...]) | Compute the
    first entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.head`](api/pandas.core.groupby.DataFrameGroupBy.head.html#pandas.core.groupby.DataFrameGroupBy.head
    "pandas.core.groupby.DataFrameGroupBy.head")([n]) | Return first n rows of each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.idxmax`](api/pandas.core.groupby.DataFrameGroupBy.idxmax.html#pandas.core.groupby.DataFrameGroupBy.idxmax
    "pandas.core.groupby.DataFrameGroupBy.idxmax")([axis, skipna, ...]) | Return index
    of first occurrence of maximum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.idxmin`](api/pandas.core.groupby.DataFrameGroupBy.idxmin.html#pandas.core.groupby.DataFrameGroupBy.idxmin
    "pandas.core.groupby.DataFrameGroupBy.idxmin")([axis, skipna, ...]) | Return index
    of first occurrence of minimum over requested axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.last`](api/pandas.core.groupby.DataFrameGroupBy.last.html#pandas.core.groupby.DataFrameGroupBy.last
    "pandas.core.groupby.DataFrameGroupBy.last")([numeric_only, ...]) | Compute the
    last entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.max`](api/pandas.core.groupby.DataFrameGroupBy.max.html#pandas.core.groupby.DataFrameGroupBy.max
    "pandas.core.groupby.DataFrameGroupBy.max")([numeric_only, ...]) | Compute max
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.mean`](api/pandas.core.groupby.DataFrameGroupBy.mean.html#pandas.core.groupby.DataFrameGroupBy.mean
    "pandas.core.groupby.DataFrameGroupBy.mean")([numeric_only, ...]) | Compute mean
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.median`](api/pandas.core.groupby.DataFrameGroupBy.median.html#pandas.core.groupby.DataFrameGroupBy.median
    "pandas.core.groupby.DataFrameGroupBy.median")([numeric_only]) | Compute median
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.min`](api/pandas.core.groupby.DataFrameGroupBy.min.html#pandas.core.groupby.DataFrameGroupBy.min
    "pandas.core.groupby.DataFrameGroupBy.min")([numeric_only, ...]) | Compute min
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ngroup`](api/pandas.core.groupby.DataFrameGroupBy.ngroup.html#pandas.core.groupby.DataFrameGroupBy.ngroup
    "pandas.core.groupby.DataFrameGroupBy.ngroup")([ascending]) | Number each group
    from 0 to the number of groups - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.nth`](api/pandas.core.groupby.DataFrameGroupBy.nth.html#pandas.core.groupby.DataFrameGroupBy.nth
    "pandas.core.groupby.DataFrameGroupBy.nth") | Take the nth row from each group
    if n is an int, otherwise a subset of rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.nunique`](api/pandas.core.groupby.DataFrameGroupBy.nunique.html#pandas.core.groupby.DataFrameGroupBy.nunique
    "pandas.core.groupby.DataFrameGroupBy.nunique")([dropna]) | Return DataFrame with
    counts of unique elements in each position. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.ohlc`](api/pandas.core.groupby.DataFrameGroupBy.ohlc.html#pandas.core.groupby.DataFrameGroupBy.ohlc
    "pandas.core.groupby.DataFrameGroupBy.ohlc")() | Compute open, high, low and close
    values of a group, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.pct_change`](api/pandas.core.groupby.DataFrameGroupBy.pct_change.html#pandas.core.groupby.DataFrameGroupBy.pct_change
    "pandas.core.groupby.DataFrameGroupBy.pct_change")([periods, ...]) | Calculate
    pct_change of each value to previous entry in group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.prod`](api/pandas.core.groupby.DataFrameGroupBy.prod.html#pandas.core.groupby.DataFrameGroupBy.prod
    "pandas.core.groupby.DataFrameGroupBy.prod")([numeric_only, min_count]) | Compute
    prod of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.quantile`](api/pandas.core.groupby.DataFrameGroupBy.quantile.html#pandas.core.groupby.DataFrameGroupBy.quantile
    "pandas.core.groupby.DataFrameGroupBy.quantile")([q, ...]) | Return group values
    at the given quantile, a la numpy.percentile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.rank`](api/pandas.core.groupby.DataFrameGroupBy.rank.html#pandas.core.groupby.DataFrameGroupBy.rank
    "pandas.core.groupby.DataFrameGroupBy.rank")([method, ascending, ...]) | Provide
    the rank of values within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.resample`](api/pandas.core.groupby.DataFrameGroupBy.resample.html#pandas.core.groupby.DataFrameGroupBy.resample
    "pandas.core.groupby.DataFrameGroupBy.resample")(rule, *args[, ...]) | Provide
    resampling when using a TimeGrouper. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.rolling`](api/pandas.core.groupby.DataFrameGroupBy.rolling.html#pandas.core.groupby.DataFrameGroupBy.rolling
    "pandas.core.groupby.DataFrameGroupBy.rolling")(*args, **kwargs) | Return a rolling
    grouper, providing rolling functionality per group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sample`](api/pandas.core.groupby.DataFrameGroupBy.sample.html#pandas.core.groupby.DataFrameGroupBy.sample
    "pandas.core.groupby.DataFrameGroupBy.sample")([n, frac, replace, ...]) | Return
    a random sample of items from each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sem`](api/pandas.core.groupby.DataFrameGroupBy.sem.html#pandas.core.groupby.DataFrameGroupBy.sem
    "pandas.core.groupby.DataFrameGroupBy.sem")([ddof, numeric_only]) | Compute standard
    error of the mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.shift`](api/pandas.core.groupby.DataFrameGroupBy.shift.html#pandas.core.groupby.DataFrameGroupBy.shift
    "pandas.core.groupby.DataFrameGroupBy.shift")([periods, freq, ...]) | Shift each
    group by periods observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.size`](api/pandas.core.groupby.DataFrameGroupBy.size.html#pandas.core.groupby.DataFrameGroupBy.size
    "pandas.core.groupby.DataFrameGroupBy.size")() | Compute group sizes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.skew`](api/pandas.core.groupby.DataFrameGroupBy.skew.html#pandas.core.groupby.DataFrameGroupBy.skew
    "pandas.core.groupby.DataFrameGroupBy.skew")([axis, skipna, ...]) | Return unbiased
    skew within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.std`](api/pandas.core.groupby.DataFrameGroupBy.std.html#pandas.core.groupby.DataFrameGroupBy.std
    "pandas.core.groupby.DataFrameGroupBy.std")([ddof, engine, ...]) | Compute standard
    deviation of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.sum`](api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum")([numeric_only, ...]) | Compute sum
    of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.var`](api/pandas.core.groupby.DataFrameGroupBy.var.html#pandas.core.groupby.DataFrameGroupBy.var
    "pandas.core.groupby.DataFrameGroupBy.var")([ddof, engine, ...]) | Compute variance
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.tail`](api/pandas.core.groupby.DataFrameGroupBy.tail.html#pandas.core.groupby.DataFrameGroupBy.tail
    "pandas.core.groupby.DataFrameGroupBy.tail")([n]) | Return last n rows of each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.take`](api/pandas.core.groupby.DataFrameGroupBy.take.html#pandas.core.groupby.DataFrameGroupBy.take
    "pandas.core.groupby.DataFrameGroupBy.take")(indices[, axis]) | Return the elements
    in the given *positional* indices in each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.value_counts`](api/pandas.core.groupby.DataFrameGroupBy.value_counts.html#pandas.core.groupby.DataFrameGroupBy.value_counts
    "pandas.core.groupby.DataFrameGroupBy.value_counts")([subset, ...]) | Return a
    Series or DataFrame containing counts of unique rows. |'
  prefs: []
  type: TYPE_TB
- en: '`SeriesGroupBy` computations / descriptive stats'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`SeriesGroupBy.all`](api/pandas.core.groupby.SeriesGroupBy.all.html#pandas.core.groupby.SeriesGroupBy.all
    "pandas.core.groupby.SeriesGroupBy.all")([skipna]) | Return True if all values
    in the group are truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.any`](api/pandas.core.groupby.SeriesGroupBy.any.html#pandas.core.groupby.SeriesGroupBy.any
    "pandas.core.groupby.SeriesGroupBy.any")([skipna]) | Return True if any value
    in the group is truthful, else False. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.bfill`](api/pandas.core.groupby.SeriesGroupBy.bfill.html#pandas.core.groupby.SeriesGroupBy.bfill
    "pandas.core.groupby.SeriesGroupBy.bfill")([limit]) | Backward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.corr`](api/pandas.core.groupby.SeriesGroupBy.corr.html#pandas.core.groupby.SeriesGroupBy.corr
    "pandas.core.groupby.SeriesGroupBy.corr")(other[, method, min_periods]) | Compute
    correlation with other Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.count`](api/pandas.core.groupby.SeriesGroupBy.count.html#pandas.core.groupby.SeriesGroupBy.count
    "pandas.core.groupby.SeriesGroupBy.count")() | Compute count of group, excluding
    missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cov`](api/pandas.core.groupby.SeriesGroupBy.cov.html#pandas.core.groupby.SeriesGroupBy.cov
    "pandas.core.groupby.SeriesGroupBy.cov")(other[, min_periods, ddof]) | Compute
    covariance with Series, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumcount`](api/pandas.core.groupby.SeriesGroupBy.cumcount.html#pandas.core.groupby.SeriesGroupBy.cumcount
    "pandas.core.groupby.SeriesGroupBy.cumcount")([ascending]) | Number each item
    in each group from 0 to the length of that group - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cummax`](api/pandas.core.groupby.SeriesGroupBy.cummax.html#pandas.core.groupby.SeriesGroupBy.cummax
    "pandas.core.groupby.SeriesGroupBy.cummax")([axis, numeric_only]) | Cumulative
    max for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cummin`](api/pandas.core.groupby.SeriesGroupBy.cummin.html#pandas.core.groupby.SeriesGroupBy.cummin
    "pandas.core.groupby.SeriesGroupBy.cummin")([axis, numeric_only]) | Cumulative
    min for each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumprod`](api/pandas.core.groupby.SeriesGroupBy.cumprod.html#pandas.core.groupby.SeriesGroupBy.cumprod
    "pandas.core.groupby.SeriesGroupBy.cumprod")([axis]) | Cumulative product for
    each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.cumsum`](api/pandas.core.groupby.SeriesGroupBy.cumsum.html#pandas.core.groupby.SeriesGroupBy.cumsum
    "pandas.core.groupby.SeriesGroupBy.cumsum")([axis]) | Cumulative sum for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.describe`](api/pandas.core.groupby.SeriesGroupBy.describe.html#pandas.core.groupby.SeriesGroupBy.describe
    "pandas.core.groupby.SeriesGroupBy.describe")([percentiles, ...]) | Generate descriptive
    statistics. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.diff`](api/pandas.core.groupby.SeriesGroupBy.diff.html#pandas.core.groupby.SeriesGroupBy.diff
    "pandas.core.groupby.SeriesGroupBy.diff")([periods, axis]) | First discrete difference
    of element. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ffill`](api/pandas.core.groupby.SeriesGroupBy.ffill.html#pandas.core.groupby.SeriesGroupBy.ffill
    "pandas.core.groupby.SeriesGroupBy.ffill")([limit]) | Forward fill the values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.fillna`](api/pandas.core.groupby.SeriesGroupBy.fillna.html#pandas.core.groupby.SeriesGroupBy.fillna
    "pandas.core.groupby.SeriesGroupBy.fillna")([value, method, axis, ...]) | (DEPRECATED)
    Fill NA/NaN values using the specified method within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.first`](api/pandas.core.groupby.SeriesGroupBy.first.html#pandas.core.groupby.SeriesGroupBy.first
    "pandas.core.groupby.SeriesGroupBy.first")([numeric_only, ...]) | Compute the
    first entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.head`](api/pandas.core.groupby.SeriesGroupBy.head.html#pandas.core.groupby.SeriesGroupBy.head
    "pandas.core.groupby.SeriesGroupBy.head")([n]) | Return first n rows of each group.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.last`](api/pandas.core.groupby.SeriesGroupBy.last.html#pandas.core.groupby.SeriesGroupBy.last
    "pandas.core.groupby.SeriesGroupBy.last")([numeric_only, ...]) | Compute the last
    entry of each column within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.idxmax`](api/pandas.core.groupby.SeriesGroupBy.idxmax.html#pandas.core.groupby.SeriesGroupBy.idxmax
    "pandas.core.groupby.SeriesGroupBy.idxmax")([axis, skipna]) | Return the row label
    of the maximum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.idxmin`](api/pandas.core.groupby.SeriesGroupBy.idxmin.html#pandas.core.groupby.SeriesGroupBy.idxmin
    "pandas.core.groupby.SeriesGroupBy.idxmin")([axis, skipna]) | Return the row label
    of the minimum value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.is_monotonic_increasing`](api/pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing
    "pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing") | Return whether
    each group''s values are monotonically increasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.is_monotonic_decreasing`](api/pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing.html#pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing
    "pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing") | Return whether
    each group''s values are monotonically decreasing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.max`](api/pandas.core.groupby.SeriesGroupBy.max.html#pandas.core.groupby.SeriesGroupBy.max
    "pandas.core.groupby.SeriesGroupBy.max")([numeric_only, min_count, ...]) | Compute
    max of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.mean`](api/pandas.core.groupby.SeriesGroupBy.mean.html#pandas.core.groupby.SeriesGroupBy.mean
    "pandas.core.groupby.SeriesGroupBy.mean")([numeric_only, engine, ...]) | Compute
    mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.median`](api/pandas.core.groupby.SeriesGroupBy.median.html#pandas.core.groupby.SeriesGroupBy.median
    "pandas.core.groupby.SeriesGroupBy.median")([numeric_only]) | Compute median of
    groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.min`](api/pandas.core.groupby.SeriesGroupBy.min.html#pandas.core.groupby.SeriesGroupBy.min
    "pandas.core.groupby.SeriesGroupBy.min")([numeric_only, min_count, ...]) | Compute
    min of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ngroup`](api/pandas.core.groupby.SeriesGroupBy.ngroup.html#pandas.core.groupby.SeriesGroupBy.ngroup
    "pandas.core.groupby.SeriesGroupBy.ngroup")([ascending]) | Number each group from
    0 to the number of groups - 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nlargest`](api/pandas.core.groupby.SeriesGroupBy.nlargest.html#pandas.core.groupby.SeriesGroupBy.nlargest
    "pandas.core.groupby.SeriesGroupBy.nlargest")([n, keep]) | Return the largest
    n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nsmallest`](api/pandas.core.groupby.SeriesGroupBy.nsmallest.html#pandas.core.groupby.SeriesGroupBy.nsmallest
    "pandas.core.groupby.SeriesGroupBy.nsmallest")([n, keep]) | Return the smallest
    n elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nth`](api/pandas.core.groupby.SeriesGroupBy.nth.html#pandas.core.groupby.SeriesGroupBy.nth
    "pandas.core.groupby.SeriesGroupBy.nth") | Take the nth row from each group if
    n is an int, otherwise a subset of rows. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.nunique`](api/pandas.core.groupby.SeriesGroupBy.nunique.html#pandas.core.groupby.SeriesGroupBy.nunique
    "pandas.core.groupby.SeriesGroupBy.nunique")([dropna]) | Return number of unique
    elements in the group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.unique`](api/pandas.core.groupby.SeriesGroupBy.unique.html#pandas.core.groupby.SeriesGroupBy.unique
    "pandas.core.groupby.SeriesGroupBy.unique")() | Return unique values for each
    group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.ohlc`](api/pandas.core.groupby.SeriesGroupBy.ohlc.html#pandas.core.groupby.SeriesGroupBy.ohlc
    "pandas.core.groupby.SeriesGroupBy.ohlc")() | Compute open, high, low and close
    values of a group, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.pct_change`](api/pandas.core.groupby.SeriesGroupBy.pct_change.html#pandas.core.groupby.SeriesGroupBy.pct_change
    "pandas.core.groupby.SeriesGroupBy.pct_change")([periods, ...]) | Calculate pct_change
    of each value to previous entry in group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.prod`](api/pandas.core.groupby.SeriesGroupBy.prod.html#pandas.core.groupby.SeriesGroupBy.prod
    "pandas.core.groupby.SeriesGroupBy.prod")([numeric_only, min_count]) | Compute
    prod of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.quantile`](api/pandas.core.groupby.SeriesGroupBy.quantile.html#pandas.core.groupby.SeriesGroupBy.quantile
    "pandas.core.groupby.SeriesGroupBy.quantile")([q, interpolation, ...]) | Return
    group values at the given quantile, a la numpy.percentile. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.rank`](api/pandas.core.groupby.SeriesGroupBy.rank.html#pandas.core.groupby.SeriesGroupBy.rank
    "pandas.core.groupby.SeriesGroupBy.rank")([method, ascending, ...]) | Provide
    the rank of values within each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.resample`](api/pandas.core.groupby.SeriesGroupBy.resample.html#pandas.core.groupby.SeriesGroupBy.resample
    "pandas.core.groupby.SeriesGroupBy.resample")(rule, *args[, ...]) | Provide resampling
    when using a TimeGrouper. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.rolling`](api/pandas.core.groupby.SeriesGroupBy.rolling.html#pandas.core.groupby.SeriesGroupBy.rolling
    "pandas.core.groupby.SeriesGroupBy.rolling")(*args, **kwargs) | Return a rolling
    grouper, providing rolling functionality per group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sample`](api/pandas.core.groupby.SeriesGroupBy.sample.html#pandas.core.groupby.SeriesGroupBy.sample
    "pandas.core.groupby.SeriesGroupBy.sample")([n, frac, replace, ...]) | Return
    a random sample of items from each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sem`](api/pandas.core.groupby.SeriesGroupBy.sem.html#pandas.core.groupby.SeriesGroupBy.sem
    "pandas.core.groupby.SeriesGroupBy.sem")([ddof, numeric_only]) | Compute standard
    error of the mean of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.shift`](api/pandas.core.groupby.SeriesGroupBy.shift.html#pandas.core.groupby.SeriesGroupBy.shift
    "pandas.core.groupby.SeriesGroupBy.shift")([periods, freq, axis, ...]) | Shift
    each group by periods observations. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.size`](api/pandas.core.groupby.SeriesGroupBy.size.html#pandas.core.groupby.SeriesGroupBy.size
    "pandas.core.groupby.SeriesGroupBy.size")() | Compute group sizes. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.skew`](api/pandas.core.groupby.SeriesGroupBy.skew.html#pandas.core.groupby.SeriesGroupBy.skew
    "pandas.core.groupby.SeriesGroupBy.skew")([axis, skipna, numeric_only]) | Return
    unbiased skew within groups. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.std`](api/pandas.core.groupby.SeriesGroupBy.std.html#pandas.core.groupby.SeriesGroupBy.std
    "pandas.core.groupby.SeriesGroupBy.std")([ddof, engine, ...]) | Compute standard
    deviation of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.sum`](api/pandas.core.groupby.SeriesGroupBy.sum.html#pandas.core.groupby.SeriesGroupBy.sum
    "pandas.core.groupby.SeriesGroupBy.sum")([numeric_only, min_count, ...]) | Compute
    sum of group values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.var`](api/pandas.core.groupby.SeriesGroupBy.var.html#pandas.core.groupby.SeriesGroupBy.var
    "pandas.core.groupby.SeriesGroupBy.var")([ddof, engine, ...]) | Compute variance
    of groups, excluding missing values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.tail`](api/pandas.core.groupby.SeriesGroupBy.tail.html#pandas.core.groupby.SeriesGroupBy.tail
    "pandas.core.groupby.SeriesGroupBy.tail")([n]) | Return last n rows of each group.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.take`](api/pandas.core.groupby.SeriesGroupBy.take.html#pandas.core.groupby.SeriesGroupBy.take
    "pandas.core.groupby.SeriesGroupBy.take")(indices[, axis]) | Return the elements
    in the given *positional* indices in each group. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.value_counts`](api/pandas.core.groupby.SeriesGroupBy.value_counts.html#pandas.core.groupby.SeriesGroupBy.value_counts
    "pandas.core.groupby.SeriesGroupBy.value_counts")([normalize, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: Plotting and visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`DataFrameGroupBy.boxplot`](api/pandas.core.groupby.DataFrameGroupBy.boxplot.html#pandas.core.groupby.DataFrameGroupBy.boxplot
    "pandas.core.groupby.DataFrameGroupBy.boxplot")([subplots, column, ...]) | Make
    box plots from DataFrameGroupBy data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.hist`](api/pandas.core.groupby.DataFrameGroupBy.hist.html#pandas.core.groupby.DataFrameGroupBy.hist
    "pandas.core.groupby.DataFrameGroupBy.hist")([column, by, grid, ...]) | Make a
    histogram of the DataFrame''s columns. |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.hist`](api/pandas.core.groupby.SeriesGroupBy.hist.html#pandas.core.groupby.SeriesGroupBy.hist
    "pandas.core.groupby.SeriesGroupBy.hist")([by, ax, grid, ...]) | Draw histogram
    of the input series using matplotlib. |'
  prefs: []
  type: TYPE_TB
- en: '| [`DataFrameGroupBy.plot`](api/pandas.core.groupby.DataFrameGroupBy.plot.html#pandas.core.groupby.DataFrameGroupBy.plot
    "pandas.core.groupby.DataFrameGroupBy.plot") | Make plots of Series or DataFrame.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`SeriesGroupBy.plot`](api/pandas.core.groupby.SeriesGroupBy.plot.html#pandas.core.groupby.SeriesGroupBy.plot
    "pandas.core.groupby.SeriesGroupBy.plot") | Make plots of Series or DataFrame.
    |'
  prefs: []
  type: TYPE_TB
