- en: scipy.fft.ifft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft.html#scipy.fft.ifft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ifft.html#scipy.fft.ifft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the 1-D inverse discrete Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the inverse of the 1-D *n*-point discrete Fourier transform
    computed by [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft"). In other
    words, `ifft(fft(x)) == x` to within numerical accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: The input should be ordered in the same way as is returned by [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft"), i.e.,
  prefs: []
  type: TYPE_NORMAL
- en: '`x[0]` should contain the zero frequency term,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[1:n//2]` should contain the positive-frequency terms,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x[n//2 + 1:]` should contain the negative-frequency terms, in increasing order
    starting from the most negative frequency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an even number of input points, `x[n//2]` represents the sum of the values
    at the positive and negative Nyquist frequencies, as the two are aliased together.
    See [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft") for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array, can be complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the transformed axis of the output. If *n* is smaller than the length
    of the input, the input is cropped. If it is larger, the input is padded with
    zeros. If *n* is not given, the length of the input along the axis specified by
    *axis* is used. See notes about padding issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the inverse DFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")).
    Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: IndexError
  prefs: []
  type: TYPE_NORMAL
- en: If *axes* is larger than the last axis of *x*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")'
  prefs: []
  type: TYPE_NORMAL
- en: The 1-D (forward) FFT, of which [`ifft`](#scipy.fft.ifft "scipy.fft.ifft") is
    the inverse.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifft2`](scipy.fft.ifft2.html#scipy.fft.ifft2 "scipy.fft.ifft2")'
  prefs: []
  type: TYPE_NORMAL
- en: The 2-D inverse FFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ifftn`](scipy.fft.ifftn.html#scipy.fft.ifftn "scipy.fft.ifftn")'
  prefs: []
  type: TYPE_NORMAL
- en: The N-D inverse FFT.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If the input parameter *n* is larger than the size of the input, the input is
    padded by appending zeros at the end. Even though this is the common approach,
    it might lead to surprising results. If a different padding is desired, it must
    be performed before calling [`ifft`](#scipy.fft.ifft "scipy.fft.ifft").
  prefs: []
  type: TYPE_NORMAL
- en: If `x` is a 1-D array, then the [`ifft`](#scipy.fft.ifft "scipy.fft.ifft") is
    equivalent to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As with [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft"), [`ifft`](#scipy.fft.ifft
    "scipy.fft.ifft") has support for all floating point types and is optimized for
    real input.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and plot a band-limited signal with random phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-fft-ifft-1.png](../Images/db380e9db3f6f459d67aeddc898fd085.png)'
  prefs: []
  type: TYPE_IMG
