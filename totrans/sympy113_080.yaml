- en: Series Expansions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 级数展开
- en: 原文：[https://docs.sympy.org/latest/modules/series/series.html](https://docs.sympy.org/latest/modules/series/series.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/series/series.html](https://docs.sympy.org/latest/modules/series/series.html)
- en: '## Limits'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 极限'
- en: The main purpose of this module is the computation of limits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块的主要目的是计算极限。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Computes the limit of `e(z)` at the point `z0`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算在点`z0`处的`e(z)`的极限。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**e** : expression, the limit of which is to be taken'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**e** : 表达式，要计算其极限'
- en: '**z** : symbol representing the variable in the limit.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**z** : 表示极限中的变量的符号。'
- en: Other symbols are treated as constants. Multivariate limits are not supported.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他符号被视为常数。不支持多变量极限。
- en: '**z0** : the value toward which `z` tends. Can be any expression,'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**z0** : `z`趋向的值。可以是任何表达式，'
- en: including `oo` and `-oo`.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 包括`oo`和`-oo`。
- en: '**dir** : string, optional (default: “+”)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**dir** : 字符串，可选（默认为“+”）'
- en: The limit is bi-directional if `dir="+-"`, from the right (z->z0+) if `dir="+"`,
    and from the left (z->z0-) if `dir="-"`. For infinite `z0` (`oo` or `-oo`), the
    `dir` argument is determined from the direction of the infinity (i.e., `dir="-"`
    for `oo`).
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果`dir="+-"`，则极限是双向的，如果`dir="+"`，则从右侧（z->z0+）；如果`dir="-"`，则从左侧（z->z0-）。对于无限的`z0`（`oo`或`-oo`），`dir`参数由无限方向确定（即对于`oo`，`dir="-"`）。
- en: Examples
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notes
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: First we try some heuristics for easy and frequent cases like “x”, “1/x”, “x**2”
    and similar, so that it’s fast. For all other cases, we use the Gruntz algorithm
    (see the gruntz() function).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们尝试一些启发式方法处理像“x”，“1/x”，“x**2”和类似的简单和频繁的情况，以便处理速度更快。对于所有其他情况，我们使用Gruntz算法（请参阅gruntz()函数）。
- en: See also
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`limit_seq`](limitseq.html#sympy.series.limitseq.limit_seq "sympy.series.limitseq.limit_seq")'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[`limit_seq`](limitseq.html#sympy.series.limitseq.limit_seq "sympy.series.limitseq.limit_seq")'
- en: returns the limit of a sequence.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 返回序列的极限。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Represents an unevaluated limit.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个未评估的极限。
- en: Examples
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Evaluates the limit.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 评估极限。
- en: 'Parameters:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**deep** : bool, optional (default: True)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**deep** : bool, optional (default: True)'
- en: Invoke the `doit` method of the expressions involved before taking the limit.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在进行极限之前调用涉及的表达式的`doit`方法。
- en: '**hints** : optional keyword arguments'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**hints** : optional keyword arguments'
- en: To be passed to `doit` methods; only used if deep is True.
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 被传递给`doit`方法；仅在deep为True时使用。
- en: As is explained above, the workhorse for limit computations is the function
    gruntz() which implements Gruntz’ algorithm for computing limits.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，极限计算的主要工具是gruntz()函数，它实现了Gruntz算法来计算极限。
- en: The Gruntz Algorithm
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gruntz算法
- en: This section explains the basics of the algorithm used for computing limits.
    Most of the time the limit() function should just work. However it is still useful
    to keep in mind how it is implemented in case something does not work as expected.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了用于计算极限的算法基础。大多数情况下，limit()函数应该正常工作。但是，记住它的实现方式仍然很有用，以防某些情况出乎意料。
- en: First we define an ordering on functions. Suppose \(f(x)\) and \(g(x)\) are
    two real-valued functions such that \(\lim_{x \to \infty} f(x) = \infty\) and
    similarly \(\lim_{x \to \infty} g(x) = \infty\). We shall say that \(f(x)\) *dominates*
    \(g(x)\), written \(f(x) \succ g(x)\), if for all \(a, b \in \mathbb{R}_{>0}\)
    we have \(\lim_{x \to \infty} \frac{f(x)^a}{g(x)^b} = \infty\). We also say that
    \(f(x)\) and \(g(x)\) are *of the same comparability class* if neither \(f(x)
    \succ g(x)\) nor \(g(x) \succ f(x)\) and shall denote it as \(f(x) \asymp g(x)\).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先我们定义函数的一个排序。假设\(f(x)\)和\(g(x)\)是两个实值函数，使得\(\lim_{x \to \infty} f(x) = \infty\)和同样\(\lim_{x
    \to \infty} g(x) = \infty\)。我们将说\(f(x)\) *支配* \(g(x)\)，写作\(f(x) \succ g(x)\)，如果对于所有\(a,
    b \in \mathbb{R}_{>0}\)，我们有\(\lim_{x \to \infty} \frac{f(x)^a}{g(x)^b} = \infty\)。我们还说\(f(x)\)和\(g(x)\)
    *具有相同的可比性类*，如果既不是\(f(x) \succ g(x)\)也不是\(g(x) \succ f(x)\)，并将其表示为\(f(x) \asymp
    g(x)\)。
- en: Note that whenever \(a, b \in \mathbb{R}_{>0}\) then \(a f(x)^b \asymp f(x)\),
    and we shall use this to extend the definition of \(\succ\) to all functions which
    tend to \(0\) or \(\pm \infty\) as \(x \to \infty\). Thus we declare that \(f(x)
    \asymp 1/f(x)\) and \(f(x) \asymp -f(x)\).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，无论何时\(a, b \in \mathbb{R}_{>0}\)，则\(a f(x)^b \asymp f(x)\)，我们将使用此来扩展对所有函数的定义，它们随着\(x
    \to \infty\)趋向于\(0\)或\(\pm \infty\)。因此，我们声明\(f(x) \asymp 1/f(x)\)和\(f(x) \asymp
    -f(x)\)。
- en: 'It is easy to show the following examples:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以轻松展示以下示例：
- en: \(e^x \succ x^m\)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(e^x \succ x^m\)
- en: \(e^{x^2} \succ e^{mx}\)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(e^{x^2} \succ e^{mx}\)
- en: \(e^{e^x} \succ e^{x^m}\)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(e^{e^x} \succ e^{x^m}\)
- en: \(x^m \asymp x^n\)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(x^m \asymp x^n\)
- en: \(e^{x + \frac{1}{x}} \asymp e^{x + \log{x}} \asymp e^x\).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(e^{x + \frac{1}{x}} \asymp e^{x + \log{x}} \asymp e^x\)。
- en: 'From the above definition, it is possible to prove the following property:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述定义，可以证明以下属性：
- en: Suppose \(\omega\), \(g_1, g_2, \ldots\) are functions of \(x\), \(\lim_{x \to
    \infty} \omega = 0\) and \(\omega \succ g_i\) for all \(i\). Let \(c_1, c_2, \ldots
    \in \mathbb{R}\) with \(c_1 < c_2 < \cdots\).
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设\(\omega\)，\(g_1, g_2, \ldots\)是\(x\)的函数，\(\lim_{x \to \infty} \omega = 0\)，并且对于所有\(i\)，\(\omega
    \succ g_i\)。让\(c_1, c_2, \ldots \in \mathbb{R}\)，其中\(c_1 < c_2 < \cdots\)。
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Then \(\lim_{x \to \infty} \sum_i g_i \omega^{c_i} = \lim_{x \to \infty} g_1
    \omega^{c_1}\).
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 然后\(\lim_{x \to \infty} \sum_i g_i \omega^{c_i} = \lim_{x \to \infty} g_1 \omega^{c_1}\)。
- en: 'For \(g_1 = g\) and \(\omega\) as above we also have the following easy result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于\(g_1 = g\)和如上所述的\(\omega\)，我们还有以下简单的结果：
- en: \(\lim_{x \to \infty} g \omega^c = 0\) for \(c > 0\)
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于\(c > 0\)，\(\lim_{x \to \infty} g \omega^c = 0\)
- en: ''
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\lim_{x \to \infty} g \omega^c = \pm \infty\) for \(c < 0\), where the sign
    is determined by the (eventual) sign of \(g\)
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于\(c < 0\)，当\(g\)的符号（最终）确定时，\(\lim_{x \to \infty} g \omega^c = \pm \infty\)，其中符号由\(g\)的符号确定。
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(\lim_{x \to \infty} g \omega^0 = \lim_{x \to \infty} g\).
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: \(\lim_{x \to \infty} g \omega^0 = \lim_{x \to \infty} g\).
- en: 'Using these results yields the following strategy for computing \(\lim_{x \to
    \infty} f(x)\):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些结果产生了计算\(\lim_{x \to \infty} f(x)\)的以下策略：
- en: Find the set of *most rapidly varying subexpressions* (MRV set) of \(f(x)\).
    That is, from the set of all subexpressions of \(f(x)\), find the elements that
    are maximal under the relation \(\succ\).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到*最快变化子表达式*（MRV集合）的集合\(f(x)\)。也就是说，从\(f(x)\)的所有子表达式集合中，找到在关系\(\succ\)下是最大的元素。
- en: Choose a function \(\omega\) that is in the same comparability class as the
    elements in the MRV set, such that \(\lim_{x \to \infty} \omega = 0\).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个与MRV集合中的元素相同可比性类的函数\(\omega\)，使得\(\lim_{x \to \infty} \omega = 0\)。
- en: Expand \(f(x)\) as a series in \(\omega\) in such a way that the antecedents
    of the above theorem are satisfied.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将\(f(x)\)在\(\omega\)中作为级数展开，以满足上述定理的前提条件。
- en: Apply the theorem and conclude the computation of \(\lim_{x \to \infty} f(x)\),
    possibly by recursively working on \(g_1(x)\).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用定理并得出对\(\lim_{x \to \infty} f(x)\)的计算结果，可能通过递归地处理\(g_1(x)\)。
- en: Notes
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注释
- en: 'This exposition glossed over several details. Many are described in the file
    gruntz.py, and all can be found in Gruntz’ very readable thesis. The most important
    points that have not been explained are:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段阐述省略了几个细节。许多细节在gruntz.py文件中有描述，并且都可以在格伦茨非常易读的论文中找到。尚未解释的最重要的几点是：
- en: Given f(x) and g(x), how do we determine if \(f(x) \succ g(x)\), \(g(x) \succ
    f(x)\) or \(g(x) \asymp f(x)\)?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定\(f(x)\)和\(g(x)\)，我们如何确定\(f(x) \succ g(x)\)，\(g(x) \succ f(x)\)或\(g(x) \asymp
    f(x)\)？
- en: How do we find the MRV set of an expression?
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何找到一个表达式的MRV集合？
- en: How do we compute series expansions?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何计算级数展开？
- en: Why does the algorithm terminate?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么算法会终止？
- en: If you are interested, be sure to take a look at [Gruntz Thesis](https://www.cybertester.com/data/gruntz.pdf).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣，请务必查看[格伦茨论文](https://www.cybertester.com/data/gruntz.pdf)。
- en: Reference
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参考
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Compute the limit of e(z) at the point z0 using the Gruntz algorithm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Gruntz算法计算在点z0处的e(z)的极限。
- en: Explanation
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`z0` can be any expression, including oo and -oo.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`z0`可以是任何表达式，包括oo和-oo。'
- en: For `dir="+"` (default) it calculates the limit from the right (z->z0+) and
    for `dir="-"` the limit from the left (z->z0-). For infinite z0 (oo or -oo), the
    dir argument does not matter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`dir="+"`（默认），它从右侧计算极限（z->z0+），对于`dir="-"`，从左侧计算极限（z->z0-）。对于无穷大z0（oo或-oo），dir参数无关紧要。
- en: This algorithm is fully described in the module docstring in the gruntz.py file.
    It relies heavily on the series expansion. Most frequently, gruntz() is only used
    if the faster limit() function (which uses heuristics) fails.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法完全在gruntz.py文件的模块文档字符串中进行了详细描述。它严重依赖于级数展开。在大多数情况下，仅当速度更快的limit()函数（使用启发式算法）失败时才会使用gruntz()。
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Returns “<” if a<b, “=” for a == b, “>” for a>b
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果a<b，则返回“<”，如果a == b，则返回“=”，如果a>b，则返回“>”
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: e(x) … the function Omega … the mrv set wsym … the symbol which is going to
    be used for w
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: e(x) … 函数Omega … mrv集合wsym … 将用于w的符号
- en: Returns the rewritten e in terms of w and log(w). See test_rewrite1() for examples
    and correct results.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回以w和log(w)的术语重写的e。有关示例和正确结果，请参阅test_rewrite1()。
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Helper function for rewrite.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重写的辅助函数。
- en: 'We need to sort Omega (mrv set) so that we replace an expression before we
    replace any expression in terms of which it has to be rewritten:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对Omega（mrv集合）进行排序，以便在替换任何需要重写的表达式之前替换表达式：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we can do e1, e2, e3, e4 or e1, e2, e4, e3. To do this we assemble the
    nodes into a tree, and sort them by height.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以执行e1, e2, e3, e4或e1, e2, e4, e3。为此，我们将节点组装成树，并按高度排序。
- en: This function builds the tree, rewrites then sorts the nodes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数构建树，然后重写并对节点进行排序。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Returns (c0, e0) for e.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 e 返回 (c0, e0)。
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Calculates at least one term of the series of `e` in `x`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 `e` 在 `x` 中至少一个系列项。
- en: This is a place that fails most often, so it is in its own function.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常失败的地方，因此它处于自己的函数中。
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Limit e(x) for x-> oo.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当 x-> oo 时限制 e(x)。
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Returns a sign of an expression e(x) for x->oo.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 x-> oo 返回表达式 e(x) 的符号。
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The result of this function is currently undefined if e changes sign arbitrarily
    often for arbitrarily large x (e.g. sin(x)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 e 对于任意大的 x 改变符号，这个函数的结果目前未定义（例如 sin(x)）。
- en: Note that this returns zero only if e is *constantly* zero for x sufficiently
    large. [If e is constant, of course, this is just the same thing as the sign of
    e.]
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，仅当 e 对于足够大的 x 是 *常数* 时，此函数才返回零。[如果 e 是常数，当然，这与 e 的符号是相同的。]
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Returns a SubsSet of most rapidly varying (mrv) subexpressions of ‘e’, and e
    rewritten in terms of these
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 ‘e’ 中最迅速变化（mrv）子表达式的子集，并且用这些子表达式重写 ‘e’。
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Computes the maximum of two sets of expressions f and g, which are in the same
    comparability class, i.e. mrv_max1() compares (two elements of) f and g and returns
    the set, which is in the higher comparability class of the union of both, if they
    have the same order of variation. Also returns exps, with the appropriate substitutions
    made.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两组表达式 f 和 g 的最大值，它们处于相同的可比较类中，即 mrv_max1() 比较 f 和 g（两个元素）并返回集合，如果它们具有相同的变化顺序，则返回相应的替换。
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Computes the maximum of two sets of expressions f and g, which are in the same
    comparability class, i.e. max() compares (two elements of) f and g and returns
    either (f, expsf) [if f is larger], (g, expsg) [if g is larger] or (union, expsboth)
    [if f, g are of the same class].
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两组表达式 f 和 g 的最大值，它们处于相同的可比较类中，即 max() 比较 f 和 g（两个元素）并返回 (f, expsf)（如果 f 更大），(g,
    expsg)（如果 g 更大），或者 (union, expsboth)（如果 f、g 属于相同类）。
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Stores (expr, dummy) pairs, and how to rewrite expr-s.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 存储 (expr, dummy) 对及如何重写表达式的方法。
- en: Explanation
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'The gruntz algorithm needs to rewrite certain expressions in term of a new
    variable w. We cannot use subs, because it is just too smart for us. For example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: gruntz 算法需要将某些表达式重写为一个新变量 w 的术语。我们不能使用 subs，因为它对我们来说太智能了。例如：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: is really not what we want!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 真的不是我们想要的！
- en: 'So we do it the hard way and keep track of all the things we potentially want
    to substitute by dummy variables. Consider the expression:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们采取了更难的方式，并记录了所有我们可能想要用虚拟变量替换的东西。考虑表达式：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The mrv set is {exp(x), exp(-x), exp(x - exp(-x))}. We introduce corresponding
    dummy variables d1, d2, d3 and rewrite:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: mrv 集合为 {exp(x), exp(-x), exp(x - exp(-x))}。我们引入对应的虚拟变量 d1, d2, d3 并重新表述：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This class first of all keeps track of the mapping expr->variable, i.e. will
    at this stage be a dictionary:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该类首先跟踪映射 expr->variable，即此阶段将是一个字典：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[It turns out to be more convenient this way round.] But sometimes expressions
    in the mrv set have other expressions from the mrv set as subexpressions, and
    we need to keep track of that as well. In this case, d3 is really exp(x - d2),
    so rewrites at this stage is:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[原来这样做更方便。] 但有时 mrv 集合中的表达式具有其他 mrv 集合中的表达式作为子表达式，我们也需要跟踪这一点。在这种情况下，d3 实际上是
    exp(x - d2)，因此在这个阶段重写为：'
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The function rewrite uses all this information to correctly rewrite our expression
    in terms of w. In this case w can be chosen to be exp(-x), i.e. d2\. The correct
    rewriting then is:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 rewrite 利用所有这些信息来正确地用 w 的术语重写我们的表达式。在这种情况下，w 可以选择为 exp(-x)，即 d2。正确的重写如下：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a shallow copy of SubsSet
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 SubsSet 的浅拷贝
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Substitute the variables with expressions
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 用表达式替换变量
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tell whether or not self and s2 have non-empty intersection
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们 self 和 s2 是否有非空交集
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Compute the union of self and s2, adjusting exps
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 self 和 s2 的并集，并调整 exps
- en: More Intuitive Series Expansion
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更直观的级数展开
- en: This is achieved by creating a wrapper around Basic.series(). This allows for
    the use of series(x*cos(x),x), which is possibly more intuitive than (x*cos(x)).series(x).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过创建 Basic.series() 的包装来实现。这允许使用 series(x*cos(x),x)，可能比 (x*cos(x)).series(x)
    更直观。
- en: Examples
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Reference
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Series expansion of expr around point \(x = x0\).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 关于点 \(x = x0\) 周围的表达式的级数展开。
- en: 'Parameters:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**expr** : Expression'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**：表达式'
- en: The expression whose series is to be expanded.
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将要展开级数的表达式。
- en: '**x** : Symbol'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**：符号'
- en: It is the variable of the expression to be calculated.
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是要计算的表达式的变量。
- en: '**x0** : Value'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**：数值'
- en: The value around which `x` is calculated. Can be any value from `-oo` to `oo`.
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算中 `x` 计算的值。可以是从 `-oo` 到 `oo` 的任意值。
- en: '**n** : Value'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : 值'
- en: The number of terms upto which the series is to be expanded.
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要展开的级数项数。
- en: '**dir** : String, optional'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**dir** : 字符串，可选'
- en: The series-expansion can be bi-directional. If `dir="+"`, then (x->x0+). If
    `dir="-"`, then (x->x0-). For infinite `x0` (`oo` or `-oo`), the `dir` argument
    is determined from the direction of the infinity (i.e., `dir="-"` for `oo`).
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 级数展开可以是双向的。如果 `dir="+"`，则 (x->x0+)。如果 `dir="-"`，则 (x->x0-)。对于无限的 `x0` (`oo`
    或 `-oo`)，`dir` 参数由无穷的方向确定（即 `dir="-"` 适用于 `oo`）。
- en: 'Returns:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Expr
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式
- en: Series expansion of the expression about x0
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关于 x0 的表达式的级数展开
- en: Examples
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.core.expr.Expr.series`](../core.html#sympy.core.expr.Expr.series "sympy.core.expr.Expr.series")'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.core.expr.Expr.series`](../core.html#sympy.core.expr.Expr.series "sympy.core.expr.Expr.series")'
- en: See the docstring of Expr.series() for complete details of this wrapper.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 `Expr.series()` 的文档字符串以获取此包装器的完整详细信息。
- en: Order Terms
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阶数项
- en: This module also implements automatic keeping track of the order of your expansion.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块还实现了自动跟踪展开的阶数。
- en: Examples
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Reference
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Represents the limiting behavior of some function.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 表示某些函数的极限行为。
- en: Explanation
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: The order of a function characterizes the function based on the limiting behavior
    of the function as it goes to some limit. Only taking the limit point to be a
    number is currently supported. This is expressed in big O notation [[R835]](#r835).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的阶基于函数在某个极限处的极限行为进行特征化。当前仅支持将极限点设为数字。这以大 O 表示法表示 [[R835]](#r835)。
- en: The formal definition for the order of a function \(g(x)\) about a point \(a\)
    is such that \(g(x) = O(f(x))\) as \(x \rightarrow a\) if and only if there exists
    a \(\delta > 0\) and an \(M > 0\) such that \(|g(x)| \leq M|f(x)|\) for \(|x-a|
    < \delta\). This is equivalent to \(\limsup_{x \rightarrow a} |g(x)/f(x)| < \infty\).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 \(g(x)\) 关于点 \(a\) 的阶的正式定义是，当 \(x \rightarrow a\) 时，\(g(x) = O(f(x))\) 当且仅当存在
    \(\delta > 0\) 和 \(M > 0\)，使得 \(|g(x)| \leq M|f(x)|\) 对于 \(|x-a| < \delta\) 成立。这等价于
    \(\limsup_{x \rightarrow a} |g(x)/f(x)| < \infty\)。
- en: 'Let’s illustrate it on the following example by taking the expansion of \(\sin(x)\)
    about 0:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来说明，通过对 \(\sin(x)\) 在 0 处的展开来理解：
- en: \[\sin(x) = x - x^3/3! + O(x^5)\]
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sin(x) = x - x^3/3! + O(x^5)\]
- en: 'where in this case \(O(x^5) = x^5/5! - x^7/7! + \cdots\). By the definition
    of \(O\), there is a \(\delta > 0\) and an \(M\) such that:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，\(O(x^5) = x^5/5! - x^7/7! + \cdots\)。根据 \(O\) 的定义，存在 \(\delta > 0\)
    和 \(M\)，使得：
- en: \[|x^5/5! - x^7/7! + ....| <= M|x^5| \text{ for } |x| < \delta\]
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: \[|x^5/5! - x^7/7! + ....| <= M|x^5| \text{ for } |x| < \delta\]
- en: 'or by the alternate definition:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 或由备用定义：
- en: \[\lim_{x \rightarrow 0} | (x^5/5! - x^7/7! + ....) / x^5| < \infty\]
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: \[\lim_{x \rightarrow 0} | (x^5/5! - x^7/7! + ....) / x^5| < \infty\]
- en: which surely is true, because
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这当然是正确的，因为
- en: \[\lim_{x \rightarrow 0} | (x^5/5! - x^7/7! + ....) / x^5| = 1/5!\]
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: \[\lim_{x \rightarrow 0} | (x^5/5! - x^7/7! + ....) / x^5| = 1/5!\]
- en: As it is usually used, the order of a function can be intuitively thought of
    representing all terms of powers greater than the one specified. For example,
    \(O(x^3)\) corresponds to any terms proportional to \(x^3, x^4,\ldots\) and any
    higher power. For a polynomial, this leaves terms proportional to \(x^2\), \(x\)
    and constants.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如通常所用，函数的阶可以直观地被认为代表大于指定幂的所有项。例如，\(O(x^3)\) 对应于任何与 \(x^3, x^4,\ldots\) 和任何更高幂次成比例的项。对于多项式，这将留下与
    \(x^2\)、\(x\) 和常数成比例的项。
- en: Examples
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Notes
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In `O(f(x), x)` the expression `f(x)` is assumed to have a leading term. `O(f(x),
    x)` is automatically transformed to `O(f(x).as_leading_term(x),x)`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `O(f(x), x)` 中，假定表达式 `f(x)` 具有主导项。`O(f(x), x)` 自动转换为 `O(f(x).as_leading_term(x),x)`。
- en: '`O(expr*f(x), x)` is `O(f(x), x)`'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`O(expr*f(x), x)` 是 `O(f(x), x)`'
- en: ''
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`O(expr, x)` is `O(1)`'
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`O(expr, x)` 是 `O(1)`'
- en: ''
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`O(0, x)` is 0.'
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`O(0, x)` 等于 0。'
- en: 'Multivariate O is also supported:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 多变量 O 也是支持的：
- en: '`O(f(x, y), x, y)` is transformed to `O(f(x, y).as_leading_term(x,y).as_leading_term(y),
    x, y)`'
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`O(f(x, y), x, y)` 被转换为 `O(f(x, y).as_leading_term(x,y).as_leading_term(y),
    x, y)`'
- en: In the multivariate case, it is assumed the limits w.r.t. the various symbols
    commute.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在多变量情况下，假设关于各个符号的极限交换。
- en: If no symbols are passed then all symbols in the expression are used and the
    limit point is assumed to be zero.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递符号，则表达式中的所有符号都被使用，并且假定极限点为零。
- en: References
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 参考
- en: '[R835] ([1](#id5),[2](#id6))'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[R835] ([1](#id5),[2](#id6))'
- en: '[Big O notation](https://en.wikipedia.org/wiki/Big_O_notation)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[大 O 表示法](https://en.wikipedia.org/wiki/Big_O_notation)'
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Return True if expr belongs to Order(self.expr, *self.variables). Return False
    if self belongs to expr. Return None if the inclusion relation cannot be determined
    (e.g. when self and expr have different symbols).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`expr`属于`Order(self.expr, *self.variables)`，则返回True。如果`self`属于`expr`，则返回False。如果无法确定包含关系（例如当`self`和`expr`具有不同的符号时），则返回None。
- en: Series Acceleration
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级数加速
- en: TODO
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: TODO
- en: Reference
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: '[PRE42]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Calculate an approximation for lim k->oo A(k) using Richardson extrapolation
    with the terms A(n), A(n+1), …, A(n+N+1). Choosing N ~= 2*n often gives good results.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用具有项A(n), A(n+1), …, A(n+N+1)的Richardson外推计算lim k->oo A(k)的近似。通常选择N ~= 2*n可以得到良好的结果。
- en: Examples
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'A simple example is to calculate exp(1) using the limit definition. This limit
    converges slowly; n = 100 only produces two accurate digits:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子是使用极限定义计算exp(1)。这个极限收敛缓慢；n = 100只能产生两个准确的数字：
- en: '[PRE43]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Richardson extrapolation with 11 appropriately chosen terms gives a value that
    is accurate to the indicated precision:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用11个适当选择的项进行Richardson外推得到的值精确到指定的精度：
- en: '[PRE44]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Another useful application is to speed up convergence of series. Computing
    100 terms of the zeta(2) series 1/k**2 yields only two accurate digits:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的应用是加快级数的收敛速度。计算zeta(2)级数1/k**2的前100项仅产生两个准确的数字：
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Richardson extrapolation performs much better:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Richardson外推表现得更好：
- en: '[PRE46]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Calculate an approximation for lim k->oo A(k) using the n-term Shanks transformation
    S(A)(n). With m > 1, calculate the m-fold recursive Shanks transformation S(S(…S(A)…))(n).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用n项Shanks变换S(A)(n)计算lim k->oo A(k)的近似。当m > 1时，计算m倍递归Shanks变换S(S(…S(A)…))(n)。
- en: 'The Shanks transformation is useful for summing Taylor series that converge
    slowly near a pole or singularity, e.g. for log(2):'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Shanks变换适用于在极点或奇点附近收敛缓慢的泰勒级数求和，例如对于log(2)：
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The correct value is 0.6931471805599453094172321215.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的值为0.6931471805599453094172321215。
- en: Residues
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 余项
- en: TODO
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: TODO
- en: Reference
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考
- en: '[PRE49]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Finds the residue of `expr` at the point x=x0.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在点x=x0处找到`expr`的余项。
- en: The residue is defined as the coefficient of `1/(x-x0)` in the power series
    expansion about `x=x0`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 余项定义为关于`x=x0`的幂级数展开中`1/(x-x0)`的系数。
- en: Examples
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE50]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This function is essential for the Residue Theorem [1].
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数对于余项定理[1]至关重要。
- en: References
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R836](#id9)]'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R836](#id9)]'
- en: '[https://en.wikipedia.org/wiki/Residue_theorem](https://en.wikipedia.org/wiki/Residue_theorem)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Residue_theorem](https://en.wikipedia.org/wiki/Residue_theorem)'
