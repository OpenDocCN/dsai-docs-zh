- en: scipy.stats.CensoredData
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.CensoredData.html#scipy.stats.CensoredData)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Instances of this class represent censored data.
  prefs: []
  type: TYPE_NORMAL
- en: Instances may be passed to the `fit` method of continuous univariate SciPy distributions
    for maximum likelihood estimation. The *only* method of the univariate continuous
    distributions that understands [`CensoredData`](#scipy.stats.CensoredData "scipy.stats.CensoredData")
    is the `fit` method. An instance of [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData") can not be passed to methods such as `pdf` and `cdf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An observation is said to be *censored* when the precise value is unknown,
    but it has a known upper and/or lower bound. The conventional terminology is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'left-censored: an observation is below a certain value but it is unknown by
    how much.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'right-censored: an observation is above a certain value but it is unknown by
    how much.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'interval-censored: an observation lies somewhere on an interval between two
    values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left-, right-, and interval-censored data can be represented by [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData").
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, the class methods `left_censored` and `right_censored` are
    provided to create a [`CensoredData`](#scipy.stats.CensoredData "scipy.stats.CensoredData")
    instance from a single one-dimensional array of measurements and a corresponding
    boolean array to indicate which measurements are censored. The class method `interval_censored`
    accepts two one-dimensional arrays that hold the lower and upper bounds of the
    intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**uncensored**array_like, 1D'
  prefs: []
  type: TYPE_NORMAL
- en: Uncensored observations.
  prefs: []
  type: TYPE_NORMAL
- en: '**left**array_like, 1D'
  prefs: []
  type: TYPE_NORMAL
- en: Left-censored observations.
  prefs: []
  type: TYPE_NORMAL
- en: '**right**array_like, 1D'
  prefs: []
  type: TYPE_NORMAL
- en: Right-censored observations.
  prefs: []
  type: TYPE_NORMAL
- en: '**interval**array_like, 2D, with shape (m, 2)'
  prefs: []
  type: TYPE_NORMAL
- en: Interval-censored observations. Each row `interval[k, :]` represents the interval
    for the kth interval-censored observation.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: In the input array *interval*, the lower bound of the interval may be `-inf`,
    and the upper bound may be `inf`, but at least one must be finite. When the lower
    bound is `-inf`, the row represents a left- censored observation, and when the
    upper bound is `inf`, the row represents a right-censored observation. If the
    length of an interval is 0 (i.e. `interval[k, 0] == interval[k, 1]`, the observation
    is treated as uncensored. So one can represent all the types of censored and uncensored
    data in `interval`, but it is generally more convenient to use *uncensored*, *left*
    and *right* for uncensored, left-censored and right-censored observations, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: In the most general case, a censored data set may contain values that are left-censored,
    right-censored, interval-censored, and uncensored. For example, here we create
    a data set with five observations. Two are uncensored (values 1 and 1.5), one
    is a left-censored observation of 0, one is a right-censored observation of 10
    and one is interval-censored in the interval [2, 3].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Equivalently,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A common case is to have a mix of uncensored observations and censored observations
    that are all right-censored (or all left-censored). For example, consider an experiment
    in which six devices are started at various times and left running until they
    fail. Assume that time is measured in hours, and the experiment is stopped after
    30 hours, even if all the devices have not failed by that time. We might end up
    with data such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Two of the devices had not failed when the experiment was stopped; the observations
    of the time-to-failure for these two devices are right-censored. We can represent
    this data with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we can use the method [`CensoredData.right_censored`](scipy.stats.CensoredData.right_censored.html#scipy.stats.CensoredData.right_censored
    "scipy.stats.CensoredData.right_censored") to create a representation of this
    data. The time-to-failure observations are put the list `ttf`. The `censored`
    list indicates which values in `ttf` are censored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Pass these lists to [`CensoredData.right_censored`](scipy.stats.CensoredData.right_censored.html#scipy.stats.CensoredData.right_censored
    "scipy.stats.CensoredData.right_censored") to create an instance of [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the input data is interval censored and already stored in two arrays, one
    holding the low end of the intervals and another holding the high ends, the class
    method `interval_censored` can be used to create the [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData") instance.
  prefs: []
  type: TYPE_NORMAL
- en: This example creates an instance with four interval-censored values. The intervals
    are [10, 11], [0.5, 1], [2, 3], and [12.5, 13.5].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we create and censor some data from the [`weibull_min`](scipy.stats.weibull_min.html#scipy.stats.weibull_min
    "scipy.stats.weibull_min") distribution, and then fit [`weibull_min`](scipy.stats.weibull_min.html#scipy.stats.weibull_min
    "scipy.stats.weibull_min") to that data. We’ll assume that the location parameter
    is known to be 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Create the random data set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create the [`CensoredData`](#scipy.stats.CensoredData "scipy.stats.CensoredData")
    instance with the [`right_censored`](scipy.stats.CensoredData.right_censored.html#scipy.stats.CensoredData.right_censored
    "scipy.stats.CensoredData.right_censored") method. The censored values are those
    where the value is 40.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 35 values have been right-censored.
  prefs: []
  type: TYPE_NORMAL
- en: Fit [`weibull_min`](scipy.stats.weibull_min.html#scipy.stats.weibull_min "scipy.stats.weibull_min")
    to the censored data. We expect to shape and scale to be approximately 2.5 and
    30, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__len__`](scipy.stats.CensoredData.__len__.html#scipy.stats.CensoredData.__len__
    "scipy.stats.CensoredData.__len__")() | The number of values (censored and not
    censored). |'
  prefs: []
  type: TYPE_TB
- en: '| [`interval_censored`](scipy.stats.CensoredData.interval_censored.html#scipy.stats.CensoredData.interval_censored
    "scipy.stats.CensoredData.interval_censored")(low, high) | Create a [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData") instance of interval-censored data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`left_censored`](scipy.stats.CensoredData.left_censored.html#scipy.stats.CensoredData.left_censored
    "scipy.stats.CensoredData.left_censored")(x, censored) | Create a [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData") instance of left-censored data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`num_censored`](scipy.stats.CensoredData.num_censored.html#scipy.stats.CensoredData.num_censored
    "scipy.stats.CensoredData.num_censored")() | Number of censored values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`right_censored`](scipy.stats.CensoredData.right_censored.html#scipy.stats.CensoredData.right_censored
    "scipy.stats.CensoredData.right_censored")(x, censored) | Create a [`CensoredData`](#scipy.stats.CensoredData
    "scipy.stats.CensoredData") instance of right-censored data. |'
  prefs: []
  type: TYPE_TB
