- en: NumPy 1.22.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.22.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.22.0-notes.html](https://numpy.org/doc/1.26/release/1.22.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.22.0-notes.html](https://numpy.org/doc/1.26/release/1.22.0-notes.html)
- en: 'NumPy 1.22.0 is a big release featuring the work of 153 contributors spread
    over 609 pull requests. There have been many improvements, highlights are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.22.0 是一个重要的发布版本，涵盖了来自 153 位贡献者的工作，分布在 609 个拉取请求中。有许多改进，重点包括：
- en: Annotations of the main namespace are essentially complete. Upstream is a moving
    target, so there will likely be further improvements, but the major work is done.
    This is probably the most user visible enhancement in this release.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主命名空间的注释基本完成。上游是一个不断变化的目标，所以可能会有进一步的改进，但主要工作已经完成。这可能是本次发布中最为用户可见的增强功能。
- en: A preliminary version of the proposed Array-API is provided. This is a step
    in creating a standard collection of functions that can be used across applications
    such as CuPy and JAX.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了拟议的 Array-API 的初步版本。这是创建可在应用程序（如 CuPy 和 JAX）中使用的标准函数集的一步。
- en: NumPy now has a DLPack backend. DLPack provides a common interchange format
    for array (tensor) data.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 现在具有 DLPack 后端。DLPack 为数组（张量）数据提供了一个通用的交换格式。
- en: New methods for `quantile`, `percentile`, and related functions. The new methods
    provide a complete set of the methods commonly found in the literature.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quantile`、`percentile` 和相关函数的新方法。这些新方法提供了文献中常见的方法的完整集合。'
- en: The universal functions have been refactored to implement most of [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)"). This also unlocks the ability to experiment
    with the future DType API.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用函数已重构以实现大部分[NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(在 NumPy Enhancement Proposals)")。这也解锁了对未来 DType API 进行实验的能力。
- en: A new configurable allocator for use by downstream projects.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于下游项目的新可配置分配器。
- en: These are in addition to the ongoing work to provide SIMD support for commonly
    used functions, improvements to F2PY, and better documentation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了为常用函数提供 SIMD 支持、改进 F2PY 和改进文档之外，还有持续进行的工作。
- en: The Python versions supported in this release are 3.8-3.10, Python 3.7 has been
    dropped. Note that the Mac wheels are now based on OS X 10.14 rather than 10.9
    that was used in previous NumPy release cycles. 10.14 is the oldest release supported
    by Apple. Also note that 32 bit wheels are only provided for Python 3.8 and 3.9
    on Windows, all other wheels are 64 bits on account of Ubuntu, Fedora, and other
    Linux distributions dropping 32 bit support. All 64 bit wheels are also linked
    with 64 bit integer OpenBLAS, which should fix the occasional problems encountered
    by folks using truly huge arrays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本次发布支持的 Python 版本为 3.8-3.10，Python 3.7 已被删除。请注意，Mac wheels 现在基于 OS X 10.14 而不是之前
    NumPy 发布周期中使用的 10.9。10.14 是 Apple 支持的最旧版本。还请注意，32 位 wheels 仅提供给 Windows 上的 Python
    3.8 和 3.9，所有其他 wheels 都是 64 位的，因为 Ubuntu、Fedora 和其他 Linux 发行版已经放弃了 32 位支持。所有 64
    位 wheels 也与 64 位整数 OpenBLAS 链接，这应该解决那些使用真正巨大数组时遇到的偶发问题。
- en: Expired deprecations
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用
- en: Deprecated numeric style dtype strings have been removed
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已删除了不推荐使用的数值样式 dtype 字符串。
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串 `"Bytes0"`、`"Datetime64"`、`"Str0"`、`"Uint32"` 和 `"Uint64"` 作为 dtype 现在会引发
    `TypeError`。
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npyio 中的 `loads`、`ndfromtxt` 和 `mafromtxt` 的弃用已过期
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loads` 在 v1.15 中已弃用，建议用户改用 `pickle.loads`。`ndfromtxt` 和 `mafromtxt`
    在 v1.17 中都已弃用 - 用户应该改用 `numpy.genfromtxt`，并使用适当的值作为 `usemask` 参数。'
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
- en: Deprecations
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃���
- en: Use delimiter rather than delimitor as kwarg in mrecords
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 mrecords 中使用 delimiter 而不是 delimitor 作为 kwarg
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 已将 `numpy.ma.mrecords.fromtextfile()` 的拼写错误关键字参数 `delimitor` 更改为 `delimiter`，使用它将会发出弃用警告。
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将布尔值 `kth` 传递给（arg-）partition 已被弃用
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.partition` 和 `numpy.argpartition` 以前会接受 `kth` 参数的布尔值，随后会被转换为整数。这种行为现在已被弃用。'
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
- en: The `np.MachAr` class has been deprecated
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.MachAr` 类已被弃用'
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.MachAr` 类和 `finfo.machar <numpy.finfo>` 属性已被弃用。鼓励用户直接从相应的 `numpy.finfo`
    属性中访问感兴趣的属性。'
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
- en: Compatibility notes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Distutils forces strict floating point model on clang
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils 在 clang 上强制使用严格的浮点模型
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 现在在 clang 上设置了 `-ftrapping-math` 选项，以强制执行正确的浮点错误处理对于通用函数。否则，Clang 默认为非
    IEEE 和 C99 兼容行为。这个更改（使用等效但更新的 `-ffp-exception-behavior=strict`）在 NumPy 1.21 中尝试过，但实际上从未被使用。
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
- en: Removed floor division support for complex types
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了复杂类型的 floor division 支持
- en: Floor division of complex types will now result in a `TypeError`
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂类型的 floor division 现在会导致 `TypeError`
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.vectorize` 函数现在产生与基本函数相同的输出类'
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个尊重 `numpy.ndarray` 子类的函数被使用 `numpy.vectorize` 向量化时，向量化函数现在也对子类安全，即使在给定签名的情况下（即，创建
    `gufunc` 时）：输出类将与首次调用基础函数时返回的类相同。
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
- en: Python 3.7 is no longer supported
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不再支持 Python 3.7
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python 支持已被移除。这是相当严格的，有些更改需要 Python >= 3.8。
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
- en: str/repr of complex dtypes now include space after punctuation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复杂数据类型的 str/repr 现在在标点符号后包含空格。
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})` 的 repr 现在是 `dtype({''names'':
    [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'': 10})`，而以前在冒号后和字段之间省略了空格。'
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 旧行为可以通过 `np.set_printoptions(legacy="1.21")` 恢复。
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修正了`PCG64DSXM`和`PCG64`中的`advance`
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了`PCG64DSXM`和`PCG64`的`advance`方法中的一个 bug。该 bug 仅影响在步长大于\(2^{64}\)时的结果，这种情况发生在不支持128位整数的平台上（例如
    Windows 和32位 Linux）。
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
- en: Change in generation of random 32 bit floating point variates
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改生成随机32位浮点变量的方式
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 生成32位浮点值的均匀分布中存在一个 bug，导致随机变量的最低有效位始终为0。这个问题已经修复。
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改影响由 `random.Generator` 方法 `random`、`standard_normal`、`standard_exponential`
    和 `standard_gamma` 生成的变量，但仅当 dtype 指定为 `numpy.float32` 时。
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
- en: C API changes
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API 更改
- en: Masked inner-loops cannot be customized anymore
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掩码内部循环不再可以自定义
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码内部循环选择器现在不再使用。在极少数情况下自定义时会发出警告。
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望任何代码使用这个功能。如果您确实使用了它，必须在更新的 NumPy 版本上取消选择器。还请联系 NumPy 开发人员，我们预计会提供一种新的、更具体的机制。
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 定制是一个从未实现的功能的一部分，允许更快的掩码操作。
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
- en: Experimental exposure of future DType and UFunc API
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验性地暴露未来的 DType 和 UFunc API
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 新的头文件 `experimental_public_dtype_api.h` 允许尝试未来的 API，以改进通用函数和特别是用户 DType 的支持。此时建议使用
    NumPy 的开发版本进行实验，因为预计会有一些变化，并且将解锁新功能。
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
- en: New Features
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: NEP 49 configurable allocators
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NEP 49 可配置分配器
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [NEP 49](https://numpy.org/neps/nep-0049.html) 中详细描述的那样，用于分配 ndarray 数据段的函数可以更改。策略可以在全局或上下文中设置。有关更多信息，请参阅
    NEP 和 [NumPy 中的内存管理](../reference/c-api/data_memory.html#data-memory) 参考文档。还添加了
    `NUMPY_WARN_IF_NO_MEM_POLICY` 覆盖，以警告在设置 `NPY_ARRAY_OWNDATA` 时危险地转移所有权的使用。
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
- en: Implementation of the NEP 47 (adopting the array API standard)
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现了 NEP 47（采用数组 API 标准）
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 `numpy.array_api` 添加了 [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)（采用数组
    API 标准）的初始实现。该实现是实验性的，并在导入时会发出 UserWarning，因为 [数组 API 标准](https://data-apis.org/array-api/latest/index.html)
    仍处于草案状态。`numpy.array_api` 是数组 API 标准的符合实现，也是最小的，意味着只实现了标准要求的那些函数和行为（请参阅 NEP 了解更多信息）。鼓励希望使用数组
    API 标准的库使用 `numpy.array_api` 来检查他们只使用了标准符合实现中保证存在的功能。
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以从注释块生成 C/C++ API 参考文档
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能在生成过程中依赖于 [Doxygen](https://www.doxygen.nl/index.html)，并且依赖于 [Breathe](https://breathe.readthedocs.io/en/latest/)
    与 Sphinx 集成。
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过一个 mypy 插件分配平台特定的 `c_intp` 精度。
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy](http://mypy-lang.org/) 插件，在 [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843)
    中引入，现已扩展：插件现在负责设置 `numpy.ctypeslib.c_intp` 的平台特定精度，后者用作各种 `numpy.ndarray.ctypes`
    属性的数据类型。'
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 没有插件，上述类型将默认为 `ctypes.c_int64`。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到其 mypy [配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)
    中：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
- en: Add NEP 47-compatible dlpack support
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了符合 NEP 47 的 dlpack 支持。
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个 `ndarray.__dlpack__()` 方法，返回一个包装在 `PyCapsule` 中的 `dlpack` C 结构。还添加了一个
    `np._from_dlpack(obj)` 函数，其中 `obj` 支持 `__dlpack__()`，并返回一个 `ndarray`。
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims` 可选参数已添加到 `numpy.argmin`、`numpy.argmax`。'
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`keepdims` 参数已添加到 `numpy.argmin`、`numpy.argmax`。如果设置为 `True`，则被减少的轴将保留在结果中作为大小为一的维度。结果数组具有相同数量的维度，并将与输入数组进行广播。'
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
- en: '`bit_count` to compute the number of 1-bits in an integer'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bit_count` 用于计算整数中的 1 位数。'
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入绝对值中的 1 位数。这适用于所有 numpy 整数类型。类似于内置的 `int.bit_count` 或 C++ 中的 `popcount`。
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndim` 和 `axis` 属性已添加到 `numpy.AxisError` 中。'
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndim` 和 `axis` 参数现在也作为每个 `numpy.AxisError` 实例的属性存储。'
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
- en: Preliminary support for `windows/arm64` target
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 `windows/arm64` 目标的初步支持。
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy` 增加了对 windows/arm64 目标的支持。请注意，`OpenBLAS` 对于 windows/arm64 目标尚不可用。'
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
- en: Added support for LoongArch
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加了对 LoongArch 的支持。
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: LoongArch 是一种新的指令集，numpy 在 LoongArch 架构上编译失败，因此添加了该提交。
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
- en: A `.clang-format` file has been added
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个 `.clang-format` 文件。
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-format 是一个 C/C++ 代码格式化工具，与添加的 `.clang-format` 文件一起，它生成的代码与 NumPy C_STYLE_GUIDE
    接近，可供一般使用。由于使用了几个新功能，需要 Clang-format 版本 12+，它在 Fedora 34 和 Ubuntu Focal 等其他发行版中可用。
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`is_integer` 现在适用于 `numpy.floating` 和 `numpy.integer`。'
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Python 中的`float`和`int`，numpy 浮点和整数类型现在支持`float.is_integer`。如果数字是有限的整数值，则返回`True`，否则返回`False`。
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
- en: Symbolic parser for Fortran dimension specifications
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于 Fortran 维度规范的符号解析器
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 f2py 中添加了一个新的符号解析器，以正确解析维度规范。该解析器是未来改进的基础，并与 Draft Fortran 202x 兼容。
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray`、`dtype`和`number`现在可以在运行时进行下标访问'
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿[**PEP 585**](https://peps.python.org/pep-0585/)，`numpy.ndarray`、`numpy.dtype`和`numpy.number`类现在可以在
    Python 3.9及更高版本中进行下标访问。因此，以前只允许在.pyi存根文件中或借助`from __future__ import annotations`的帮助下的表达式现在也在运行时合法。
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
- en: Improvements
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`ctypeslib.load_library` can now take any path-like object'
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ctypeslib.load_library`现在可以接受任何路径类对象'
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有参数都可以接受任何[path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)")。这包括字符串、字节和实现[`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)")协议的对象。
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`finfo`添加`smallest_normal`和`smallest_subnormal`属性
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`smallest_normal`和`smallest_subnormal`作为`finfo`类的扩展可用于任何浮点数据类型。要使用这些新属性，请写`np.finfo(np.float64).smallest_normal`或`np.finfo(np.float64).smallest_subnormal`。
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`接受堆叠矩阵作为输入'
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`能够为堆叠矩阵生成结果。此外，QR 分解的实现已从 Python 转移到 C。'
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受`os.PathLike`实现'
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受实现`__fspath__<os.PathLike>`协议的对象，例如`pathlib.Path`。'
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
- en: Add new methods for `quantile` and `percentile`
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`quantile`和`percentile`添加新方法
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`quantile`和`percentile`现在具有`method=`关键字参数，支持13种不同的方法。这取代了`interpolation=`关键字参数。'
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法现在与科学文献和 R 语言中的九种方法保持一致。其余方法是默认“linear”方法的以前不连续的变体。
- en: Please see the documentation of `numpy.percentile` for more information.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看`numpy.percentile`的文档以获取更多信息。
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
- en: Missing parameters have been added to the `nan<x>` functions
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已向`nan<x>`函数添加了缺失的参数
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一些`nan<x>`函数以前缺少其`<x>`对应函数中存在的参数，*例如* `numpy.mean`中存在的`where`参数在`numpy.nanmean`中不存在。
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已将以下参数添加到`nan<x>`函数中：
- en: 'nanmin: `initial` & `where`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmin: `initial` 和 `where`'
- en: 'nanmax: `initial` & `where`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmax: `initial` 和 `where`'
- en: 'nanargmin: `keepdims` & `out`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanargmin: `keepdims` 和 `out`'
- en: 'nanargmax: `keepdims` & `out`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanargmax: `keepdims` 和 `out`'
- en: 'nansum: `initial` & `where`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nansum: `initial` 和 `where`'
- en: 'nanprod: `initial` & `where`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanprod: `initial` 和 `where`'
- en: 'nanmean: `where`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmean: `where`'
- en: 'nanvar: `where`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanvar: `where`'
- en: 'nanstd: `where`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanstd: `where`'
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
- en: Annotating the main Numpy namespace
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对主要Numpy命名空间进行注释
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.20版本开始，NumPy库的部分部分已包含PEP 484类型注释；对剩余函数进行注释仍在进行中。随着1.22版本的发布，主要NumPy命名空间的这一过程已经完成，现在已完全注释。
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 除了主命名空间外，一些子包也包含注释。其中包括`numpy.testing`、`numpy.linalg`和`numpy.random`（自1.21版本起可用）。
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
- en: Vectorize umath module using AVX-512
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AVX-512对umath模块进行矢量化
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用英特尔短向量数学库（SVML），18个umath函数（`exp2`、`log2`、`log10`、`expm1`、`log1p`、`cbrt`、`sin`、`cos`、`tan`、`arcsin`、`arccos`、`arctan`、`sinh`、`cosh`、`tanh`、`arcsinh`、`arccosh`、`arctanh`）使用AVX-512指令集进行矢量化，适用于单精度和双精度实现。此更改目前仅适用于Linux用户和具有AVX-512指令集的处理器。对于单精度和双精度函数，平均加速比分别为32倍和14倍。
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
- en: OpenBLAS v0.3.18
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenBLAS v0.3.18
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 更新测试和wheels中使用的OpenBLAS至v0.3.18
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
- en: Expired deprecations
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用功能
- en: Deprecated numeric style dtype strings have been removed
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已删除弃用的数字样式dtype字符串
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串`"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, 和 `"Uint64"`作为dtype现在会引发`TypeError`错误。
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npyio中`loads`、`ndfromtxt`和`mafromtxt`的弃用已过期
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loads`在v1.15中已弃用，建议用户改用`pickle.loads`。`ndfromtxt`和`mafromtxt`在v1.17中都已弃用
    - 用户应该改用`numpy.genfromtxt`，并使用适当的值作为`usemask`参数。'
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
- en: Deprecated numeric style dtype strings have been removed
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已删除弃用的数字样式dtype字符串
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串`"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, 和 `"Uint64"`作为dtype现在会引发`TypeError`错误。
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npyio中`loads`、`ndfromtxt`和`mafromtxt`的弃用已过期
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.loads`在v1.15中已被弃用，建议用户改用`pickle.loads`。`ndfromtxt`和`mafromtxt`在v1.17中都已被弃用
    - 用户应该改用`numpy.genfromtxt`，并使用`usemask`参数的适当值。'
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
- en: Deprecations
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: Use delimiter rather than delimitor as kwarg in mrecords
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在mrecords中使用delimiter而不是delimitor作为kwarg
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ma.mrecords.fromtextfile()`的拼写错误关键字参数`delimitor`已更改为`delimiter`，使用它将会发出弃用警告。'
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将布尔值`kth`传递给（arg-）partition已被弃用
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.partition`和`numpy.argpartition`以前会接受`kth`参数的布尔值，随后会被转换为整数。这种行为现已被弃用。'
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
- en: The `np.MachAr` class has been deprecated
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.MachAr`类已被弃用'
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.MachAr`类和`finfo.machar <numpy.finfo>`属性已被弃用。鼓励用户直接从相应的`numpy.finfo`属性中访问感兴趣的属性。'
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
- en: Use delimiter rather than delimitor as kwarg in mrecords
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在mrecords中使用delimiter而不是delimitor作为kwarg
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.ma.mrecords.fromtextfile()`的拼写错误关键字参数`delimitor`已更改为`delimiter`，使用它将会发出弃用警告。'
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将布尔值`kth`传递给（arg-）partition已被弃用
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.partition`和`numpy.argpartition`以前会接受`kth`参数的布尔值，随后会被转换为整数。这种行为现已被弃用。'
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
- en: The `np.MachAr` class has been deprecated
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.MachAr`类已被弃用'
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.MachAr`类和`finfo.machar <numpy.finfo>`属性已被弃用。鼓励用户直接从相应的`numpy.finfo`属性中访问感兴趣的属性。'
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
- en: Compatibility notes
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: Distutils forces strict floating point model on clang
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils在clang上强制使用严格的浮点模型
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在在clang上设置了`-ftrapping-math`选项，以强制正确处理通用函数的浮点错误处理。否则，Clang默认为非IEEE和C99符合行为。这种更改（使用等效但更新的`-ffp-exception-behavior=strict`）曾在NumPy
    1.21中尝试过，但实际上从未被使用过。
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
- en: Removed floor division support for complex types
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了复数类型的地板除法支持
- en: Floor division of complex types will now result in a `TypeError`
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 复数类型的地板除法现在将导致`TypeError`
- en: '[PRE5]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.vectorize`函数现在产生与基本函数相同的输出类'
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个尊重`numpy.ndarray`子类的函数被使用`numpy.vectorize`向量化时，对于给定签名的情况（即创建`gufunc`时），向量化函数现在也将对子类安全：输出类将与对底层函数的第一次调用返回的类相同。
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
- en: Python 3.7 is no longer supported
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 3.7 不再受支持
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持已被删除。这是相当严格的，有些更改需要Python >= 3.8。
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
- en: str/repr of complex dtypes now include space after punctuation
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复数dtype的str/repr现在在标点符号后包含空格。
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`的repr现在是`dtype({''names'':
    [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'': 10})`，而以前在冒号后和字段之间省略了空格。'
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 旧行为可以通过`np.set_printoptions(legacy="1.21")`恢复。
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修正了`PCG64DSXM`和`PCG64`中的`advance`
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了`PCG64DSXM`和`PCG64`的`advance`方法中的一个错误。该错误仅影响在步长大于\(2^{64}\)时的结果，这种情况发生在不支持128位整数的平台上（例如Windows和32位Linux）。
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
- en: Change in generation of random 32 bit floating point variates
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改生成随机32位浮点变量的方式
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个bug，即从均匀分布生成32位浮点值的最低有效位始终为0。已修复此问题。
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改影响由`random.Generator`方法`random`、`standard_normal`、`standard_exponential`和`standard_gamma`生成的变量，但仅当dtype指定为`numpy.float32`时。
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
- en: Distutils forces strict floating point model on clang
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Distutils在clang上强制使用严格的浮点模型
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在在clang上设置了`-ftrapping-math`选项，以强制执行通用函数的正确浮点错误处理。否则，Clang默认为非IEEE和C99符合的行为。这种变化（使用等效但更新的`-ffp-exception-behavior=strict`）曾在NumPy
    1.21中尝试过，但实际上从未被使用。
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
- en: Removed floor division support for complex types
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了复数类型的地板除法支持
- en: Floor division of complex types will now result in a `TypeError`
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 复数类型的地板除法现在将导致`TypeError`
- en: '[PRE6]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.vectorize`函数现在产生与基本函数相同的输出类'
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个尊重`numpy.ndarray`子类的函数被使用`numpy.vectorize`向量化时，对于给定签名的情况（即创建`gufunc`时），向量化函数现在也将对子类安全：输出类将与对底层函数的第一次调用返回的类相同。
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
- en: Python 3.7 is no longer supported
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 3.7 不再受支持
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持已被移除。这是相当严格的，有些更改要求Python >= 3.8。
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
- en: str/repr of complex dtypes now include space after punctuation
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复数dtype的str/repr现在在标点符号后包含空格
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`的repr现在是`dtype({''names'':
    [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'': 10})`，而以前在冒号后和字段之间省略了空格。'
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过`np.set_printoptions(legacy="1.21")`恢复旧行为。
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修正了`PCG64DSXM`和`PCG64`中的`advance`
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 修复了`PCG64DSXM`和`PCG64`的`advance`方法中的一个bug。该bug仅影响在步长大于\(2^{64}\)时在不支持128位整数的平台上的结果（例如Windows和32位Linux）。
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
- en: Change in generation of random 32 bit floating point variates
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改生成随机32位浮点变量的方式
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在从均匀分布生成32位浮点值时存在bug，导致随机变量的最低有效位始终为0。已修复此问题。
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改影响由`random.Generator`方法`random`、`standard_normal`、`standard_exponential`和`standard_gamma`生成的变量，但仅当dtype指定为`numpy.float32`时。
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
- en: C API changes
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C API更改
- en: Masked inner-loops cannot be customized anymore
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无法再自定义掩码内部循环
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码内部循环选择器现在不再使用。在极少情况下，如果进行了自定义，将发出警告。
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望任何代码使用此功能。如果您确实使用了，请在更新的NumPy版本上取消选择器。还请联系NumPy开发人员，我们预计会提供一种新的、更具体的机制。
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义是一个从未实现的功能的一部分，旨在实现更快的掩码操作。
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
- en: Experimental exposure of future DType and UFunc API
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验性暴露未来的DType和UFunc API
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 新的头文件`experimental_public_dtype_api.h`允许尝试使用未来的API来改进通用函数，特别是用户DType的支持。目前建议使用NumPy的开发版本进行实验，因为预计会有一些变化并且将解锁新功能。
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
- en: Masked inner-loops cannot be customized anymore
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无法再自定义掩码内部循环
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码内部循环选择器现在不再使用。在极少情况下，如果进行了自定义，将发出警告。
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望任何代码使用此功能。如果您确实使用了，请在更新的NumPy版本上取消选择器。还请联系NumPy开发人员，我们预计会提供一种新的、更具体的机制。
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义是一个从未实现的功能的一部分，旨在实现更快的掩码操作。
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
- en: Experimental exposure of future DType and UFunc API
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验性暴露未来的DType和UFunc API
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 新的头文件`experimental_public_dtype_api.h`允许尝试未来用于改进通用函数和特别是用户DType支持的API。此时建议使用NumPy的开发版本进行实验，因为预计会有一些更改并将解锁新功能。
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
- en: New Features
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新特性
- en: NEP 49 configurable allocators
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NEP 49可配置分配器
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 如[NEP 49](https://numpy.org/neps/nep-0049.html)中详细说明，可以更改用于分配ndarray数据段的函数。策略可以在全局或上下文中设置。有关更多信息，请参阅NEP和[NumPy中的内存管理](../reference/c-api/data_memory.html#data-memory)参考文档。还添加了`NUMPY_WARN_IF_NO_MEM_POLICY`覆盖，以警告通过设置`NPY_ARRAY_OWNDATA`来传递所有权的危险用法。
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
- en: Implementation of the NEP 47 (adopting the array API standard)
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现NEP 47（采用数组API标准）
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)的初始实现（采用数组API标准）已添加为`numpy.array_api`。该实现是实验性的，并在导入时会发出UserWarning，因为[数组API标准](https://data-apis.org/array-api/latest/index.html)仍处于草案状态。`numpy.array_api`是数组API标准的符合实现，也是最小的，意味着只实现了标准要求的那些函数和行为（详细信息请参阅NEP）。鼓励希望使用数组API标准的库使用`numpy.array_api`来检查他们只使用标准符合实现中保证存在的功能。'
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以从注释块生成C/C++ API参考文档
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能依赖于[Doxygen](https://www.doxygen.nl/index.html)在生成过程中以及[Breathe](https://breathe.readthedocs.io/en/latest/)与Sphinx集成。
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过mypy插件分配平台特定的`c_intp`精度
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy](http://mypy-lang.org/)插件，引入自[numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843)，再次被扩展：该插件现在负责设置`numpy.ctypeslib.c_intp`的平台特定精度，后者被用作各种`numpy.ndarray.ctypes`属性的数据类型。'
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 没有插件，上述类型将默认为`ctypes.c_int64`。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到其mypy[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE7]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
- en: Add NEP 47-compatible dlpack support
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加NEP 47兼容的dlpack支持
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个 `ndarray.__dlpack__()` 方法，返回一个包装在 `PyCapsule` 中的 `dlpack` C 结构。还添加了一个
    `np._from_dlpack(obj)` 函数，其中 `obj` 支持 `__dlpack__()`，并返回一个 `ndarray`。
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims` 可选参数已添加到 `numpy.argmin`、`numpy.argmax` 中'
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`keepdims` 参数已添加到 `numpy.argmin`、`numpy.argmax` 中。如果设置为 `True`，则被减少的轴将保留在结果中作为大小为一的维度。结果数组具有相同数量的维度，并将与输入数组进行广播。'
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
- en: '`bit_count` to compute the number of 1-bits in an integer'
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bit_count` 用于计算整数中的1位数'
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入的绝对值中的1位数。这适用于所有 numpy 整数类型。类似于内置的 `int.bit_count` 或 C++ 中的 `popcount`。
- en: '[PRE8]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndim` 和 `axis` 属性已添加到 `numpy.AxisError` 中'
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndim` 和 `axis` 参数现在也作为每个 `numpy.AxisError` 实例的属性存储。'
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
- en: Preliminary support for `windows/arm64` target
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`windows/arm64` 目标的初步支持'
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy` 增加了对 windows/arm64 目标的支持。请注意，windows/arm64 目标尚不支持 `OpenBLAS`。'
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
- en: Added support for LoongArch
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加了对龙芯架构的支持
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: LoongArch 是一种新的指令集，numpy 在 LoongArch 架构上编译失败，因此添加了该提交。
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
- en: A `.clang-format` file has been added
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个 `.clang-format` 文件
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-format 是一个 C/C++ 代码格式化工具，与新增的 `.clang-format` 文件一起，它生成的代码与 NumPy C_STYLE_GUIDE
    接近，可供一般使用。由于使用了几个新功能，需要 Clang-format 版本 12+，它在 Fedora 34 和 Ubuntu Focal 等其他发行版中可用。
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`is_integer` 现在适用于 `numpy.floating` 和 `numpy.integer`'
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Python 中 `float` 和 `int` 的对应物，numpy 浮点和整数类型现在支持 `float.is_integer`。如果数字是有限的整数值，则返回
    `True`，否则返回 `False`。
- en: '[PRE9]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
- en: Symbolic parser for Fortran dimension specifications
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于 Fortran 维度规范的符号解析器
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在 f2py 中添加了一个新的符号解析器，以正确解析维度规范。该解析器是未来改进的基础，并提供了与 Draft Fortran 202x 的兼容性。
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray`、`dtype` 和 `number` 现在支持运行时下标'
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿 [**PEP 585**](https://peps.python.org/pep-0585/)，`numpy.ndarray`、`numpy.dtype`
    和 `numpy.number` 类现在可以在 Python 3.9 及更高版本中进行下标操作。因此，以前仅允许在 .pyi 存根文件中或通过 `from
    __future__ import annotations` 的帮助下允许的表达式现在也在运行时合法。
- en: '[PRE10]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
- en: NEP 49 configurable allocators
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NEP 49 可配置的分配器
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [NEP 49](https://numpy.org/neps/nep-0049.html) 中详细说明的，可以更改用于分配 ndarray 数据段的函数。策略可以在全局或上下文中设置。有关更多信息，请参阅
    NEP 和 [NumPy 中的内存管理](../reference/c-api/data_memory.html#data-memory) 参考文档。还添加了一个
    `NUMPY_WARN_IF_NO_MEM_POLICY` 覆盖，以警告危险的所有权转移设置 `NPY_ARRAY_OWNDATA`。
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
- en: Implementation of the NEP 47 (adopting the array API standard)
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现 NEP 47（采用数组 API 标准）
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html) 的初始实现（采用数组
    API 标准）已添加为 `numpy.array_api`。该实现是实验性的，并将在导入时发出 UserWarning，因为 [数组 API 标准](https://data-apis.org/array-api/latest/index.html)
    仍处于草案状态。`numpy.array_api` 是数组 API 标准的符合实现，也是最小的，意味着只实现了标准要求的那些功能和行为（请参阅 NEP 了解更多信息）。鼓励希望使用数组
    API 标准的库使用 `numpy.array_api` 来检查他们只使用标准符合实现中保证存在的功能。'
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在可以从注释块生成 C/C++ API 参考文档
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能依赖于 [Doxygen](https://www.doxygen.nl/index.html) 的生成过程和 [Breathe](https://breathe.readthedocs.io/en/latest/)
    与 Sphinx 集成。
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过一个 mypy 插件分配特定于平台的 `c_intp` 精度
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843) 中引入的 [mypy](http://mypy-lang.org/)
    插件再次扩展：插件现在负责设置 `numpy.ctypeslib.c_intp` 的特定于平台的精度，后者用作各种 `numpy.ndarray.ctypes`
    属性的数据类型。
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 没有插件，上述类型将默认为 `ctypes.c_int64`。
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到其 mypy [配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)
    中：
- en: '[PRE11]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
- en: Add NEP 47-compatible dlpack support
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 NEP 47 兼容的 dlpack 支持
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个`ndarray.__dlpack__()`方法，返回一个包装在`PyCapsule`中的`dlpack` C结构。同时添加了一个`np._from_dlpack(obj)`函数，其中`obj`支持`__dlpack__()`，并返回一个`ndarray`。
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`keepdims`可选参数已添加到`numpy.argmin`，`numpy.argmax`'
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`keepdims`参数已添加到`numpy.argmin`，`numpy.argmax`。如果设置为`True`，则被减少的轴将作为大小为一的维度保留在结果中。结果数组具有相同数量的维度，并将与输入数组进行广播。'
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
- en: '`bit_count` to compute the number of 1-bits in an integer'
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`bit_count`用于计算整数中1位的数量'
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 计算输入绝对值中1位的数量。适用于所有numpy整数类型。类似于内置的`int.bit_count`或C++中的`popcount`。
- en: '[PRE12]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndim`和`axis`属性已添加到`numpy.AxisError`'
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndim`和`axis`参数现在也作为每个`numpy.AxisError`实例的属性存储。'
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
- en: Preliminary support for `windows/arm64` target
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对`windows/arm64`目标的初步支持
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy`现已支持Windows/arm64目标。请注意，Windows/arm64目标尚不支持`OpenBLAS`。'
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
- en: Added support for LoongArch
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了对LoongArch的支持
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: LoongArch是一种新的指令集，numpy在LoongArch架构上的编译失败，因此添加了该提交。
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
- en: A `.clang-format` file has been added
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了一个`.clang-format`文件
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Clang-format是一个C/C++代码格式化工具，与新增的`.clang-format`文件一起，它生成与NumPy C_STYLE_GUIDE接近的代码，可供一般使用。由于使用了几个新功能，需要Clang-format版本12+，它在Fedora
    34和Ubuntu Focal等其他发行版中可用。
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`is_integer`现在适用于`numpy.floating`和`numpy.integer`'
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Python中`float`和`int`的对应物，numpy浮点和整数类型现在支持`float.is_integer`。如果数字是有限的整数值，则返回`True`，否则返回`False`。
- en: '[PRE13]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
- en: Symbolic parser for Fortran dimension specifications
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fortran维度规范的符号解析器
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确解析维度规范，f2py添加了一个新的符号解析器。该解析器是未来改进的基础，并与Draft Fortran 202x兼容。
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ndarray`，`dtype`和`number`现在可以在运行时进行下标访问'
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 模仿[**PEP 585**](https://peps.python.org/pep-0585/)，`numpy.ndarray`、`numpy.dtype`和`numpy.number`类现在可以在Python
    3.9及更高版本中进行下标操作。因此，以前只允许在.pyi存根文件中或借助`from __future__ import annotations`的帮助下的表达式现在也在运行时合法。
- en: '[PRE14]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
- en: Improvements
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`ctypeslib.load_library` can now take any path-like object'
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ctypeslib.load_library`现在可以接受任何类似路径的对象'
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有参数都可以接受任何[path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(在Python v3.11中)"). 这包括字符串、字节和实现[`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(在Python v3.11中)")协议的对象。
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向`finfo`添加`smallest_normal`和`smallest_subnormal`属性
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`smallest_normal`和`smallest_subnormal`作为任何浮点数据类型的`finfo`类的扩展可用。要使用这些新属性，写`np.finfo(np.float64).smallest_normal`或`np.finfo(np.float64).smallest_subnormal`。
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`接受堆叠矩阵作为输入'
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`能够为堆叠矩阵产生结果。此外，QR分解的实现已从Python转移到C。'
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受`os.PathLike`实现'
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受实现`__fspath__<os.PathLike>`协议的对象，*例如* `pathlib.Path`。'
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
- en: Add new methods for `quantile` and `percentile`
  id: totrans-360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了`quantile`和`percentile`的新方法
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`quantile`和`percentile`现在有一个`method=`关键字参数，支持13种不同的方法。这取代了`interpolation=`关键字参数。'
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法现在与科学文献和R语言中的九种方法保持一致。其余方法是默认的“linear”方法的以前不连续的变体。
- en: Please see the documentation of `numpy.percentile` for more information.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看`numpy.percentile`的文档以获取更多信息。
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
- en: Missing parameters have been added to the `nan<x>` functions
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`nan<x>`函数中添加了缺失的参数'
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 一些`nan<x>`函数以前缺少其`<x>`对应函数中存在的参数，*例如* `numpy.mean`中存在的`where`参数���`numpy.nanmean`中缺失。
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已将以下参数添加到`nan<x>`函数中：
- en: 'nanmin: `initial` & `where`'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanmin：`initial`和`where`
- en: 'nanmax: `initial` & `where`'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanmax：`initial`和`where`
- en: 'nanargmin: `keepdims` & `out`'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanargmin：`keepdims`和`out`
- en: 'nanargmax: `keepdims` & `out`'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanargmax：`keepdims`和`out`
- en: 'nansum: `initial` & `where`'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nansum：`initial`和`where`
- en: 'nanprod: `initial` & `where`'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanprod：`initial`和`where`
- en: 'nanmean: `where`'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanmean：`where`
- en: 'nanvar: `where`'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanvar：`where`
- en: 'nanstd: `where`'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nanstd：`where`
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
- en: Annotating the main Numpy namespace
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对主要的Numpy命名空间进行注释
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.20版本开始，NumPy库的部分部分已包含PEP 484类型注释；对其余函数进行注释仍在进行中。随着1.22版本的发布，主要NumPy命名空间的此过程已完成，现在已完全注释。
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 除主命名空间外，一些子包也包含注释。其中包括`numpy.testing`、`numpy.linalg`和`numpy.random`（自1.21版本起可用）。
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
- en: Vectorize umath module using AVX-512
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AVX-512对umath模块进行矢量化
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用英特尔短向量数学库（SVML），18个umath函数（`exp2`、`log2`、`log10`、`expm1`、`log1p`、`cbrt`、`sin`、`cos`、`tan`、`arcsin`、`arccos`、`arctan`、`sinh`、`cosh`、`tanh`、`arcsinh`、`arccosh`、`arctanh`）使用AVX-512指令集进行矢量化，适用于单精度和双精度实现。此更改目前仅对Linux用户和具有AVX-512指令集的处理器启用。它为单精度和双精度函数提供平均加速比分别为32倍和14倍。
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
- en: OpenBLAS v0.3.18
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenBLAS v0.3.18
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 更新用于测试和轮毂中的OpenBLAS至v0.3.18
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
- en: '`ctypeslib.load_library` can now take any path-like object'
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ctypeslib.load_library`现在可以接受任何类似路径的对象'
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有参数都可以接受任何[类似路径的对象](https://docs.python.org/3/glossary.html#term-path-like-object
    "(在Python v3.11中)")。这包括字符串、字节和实现[`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(在Python v3.11中)")协议的对象。
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将`smallest_normal`和`smallest_subnormal`属性添加到`finfo`
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`smallest_normal`和`smallest_subnormal`作为任何浮点数据类型的`finfo`类的扩展可用。要使用这些新属性，请写`np.finfo(np.float64).smallest_normal`或`np.finfo(np.float64).smallest_subnormal`。
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`接受堆叠矩阵作为输入'
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.linalg.qr`能够为堆叠矩阵生成结果。此外，QR分解的实现已从Python转移到C。'
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受`os.PathLike`实现'
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.fromregex`现在接受实现`__fspath__<os.PathLike>`协议的对象，*例如* `pathlib.Path`。'
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
- en: Add new methods for `quantile` and `percentile`
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为`quantile`和`percentile`添加新方法
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`quantile`和`percentile`现在有一个`method=`关键字参数，支持13种不同的方法。这取代了`interpolation=`关键字参数。'
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法现在与科学文献和R语言中的九种方法保持一致。其余方法是默认“linear”方法的以前不连续的变体。
- en: Please see the documentation of `numpy.percentile` for more information.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅`numpy.percentile`的文档。
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
- en: Missing parameters have been added to the `nan<x>` functions
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已添加缺失的参数到`nan<x>`函数中
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 一些以前的`nan<x>`函数缺少其基于`<x>`的对应函数中存在的参数，例如`numpy.mean`中存在`where`参数，但在`numpy.nanmean`中不存在。
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已将以下参数添加到`nan<x>`函数中：
- en: 'nanmin: `initial` & `where`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmin: `initial` & `where`'
- en: 'nanmax: `initial` & `where`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmax: `initial` & `where`'
- en: 'nanargmin: `keepdims` & `out`'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanargmin: `keepdims` & `out`'
- en: 'nanargmax: `keepdims` & `out`'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanargmax: `keepdims` & `out`'
- en: 'nansum: `initial` & `where`'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nansum: `initial` & `where`'
- en: 'nanprod: `initial` & `where`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanprod: `initial` & `where`'
- en: 'nanmean: `where`'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanmean: `where`'
- en: 'nanvar: `where`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanvar: `where`'
- en: 'nanstd: `where`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'nanstd: `where`'
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
- en: Annotating the main Numpy namespace
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释主要Numpy命名空间
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.20版本开始，NumPy库的部分部分已包含PEP 484类型注释；对其余函数进行注释仍在进行中。随着1.22版本的发布，主要NumPy命名空间的这一过程已完成，现在已完全注释。
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 除主命名空间外，一些子包也包含注释。其中包括`numpy.testing`、`numpy.linalg`和`numpy.random`（自1.21版本起可用）。
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
- en: Vectorize umath module using AVX-512
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AVX-512对umath模块进行矢量化
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用英特尔短向量数学库（SVML），18个umath函数（`exp2`、`log2`、`log10`、`expm1`、`log1p`、`cbrt`、`sin`、`cos`、`tan`、`arcsin`、`arccos`、`arctan`、`sinh`、`cosh`、`tanh`、`arcsinh`、`arccosh`、`arctanh`）使用AVX-512指令集进行矢量化，适用于单精度和双精度实现。此更改目前仅适用于Linux用户和具有AVX-512指令集的处理器。对于单精度和双精度函数，平均加速比分别为32倍和14倍。
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
- en: OpenBLAS v0.3.18
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenBLAS v0.3.18
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 更新测试和轮子中使用的OpenBLAS至v0.3.18
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
