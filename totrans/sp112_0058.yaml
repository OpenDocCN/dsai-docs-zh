- en: scipy.fft.ihfft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ihfft.html#scipy.fft.ihfft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.fft.ihfft.html#scipy.fft.ihfft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the inverse FFT of a signal that has Hermitian symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the inverse FFT, the number of points along transformation axis in
    the input to use. If *n* is smaller than the length of the input, the input is
    cropped. If it is larger, the input is padded with zeros. If *n* is not given,
    the length of the input along the axis specified by *axis* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis over which to compute the inverse FFT. If not given, the last axis is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**norm**{“backward”, “ortho”, “forward”}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization mode (see [`fft`](scipy.fft.fft.html#scipy.fft.fft "scipy.fft.fft")).
    Default is “backward”.
  prefs: []
  type: TYPE_NORMAL
- en: '**overwrite_x**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the contents of *x* can be destroyed; the default is False. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**workers**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of workers to use for parallel computation. If negative, the
    value wraps around from `os.cpu_count()`. See [`fft`](scipy.fft.fft.html#scipy.fft.fft
    "scipy.fft.fft") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '**plan**object, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This argument is reserved for passing in a precomputed plan provided by downstream
    FFT vendors. It is currently not used in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**complex ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The truncated or zero-padded input, transformed along the axis indicated by
    *axis*, or the last one if *axis* is not specified. The length of the transformed
    axis is `n//2 + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`hfft`](scipy.fft.hfft.html#scipy.fft.hfft "scipy.fft.hfft"), [`irfft`](scipy.fft.irfft.html#scipy.fft.irfft
    "scipy.fft.irfft")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '[`hfft`](scipy.fft.hfft.html#scipy.fft.hfft "scipy.fft.hfft")/[`ihfft`](#scipy.fft.ihfft
    "scipy.fft.ihfft") are a pair analogous to [`rfft`](scipy.fft.rfft.html#scipy.fft.rfft
    "scipy.fft.rfft")/[`irfft`](scipy.fft.irfft.html#scipy.fft.irfft "scipy.fft.irfft"),
    but for the opposite case: here, the signal has Hermitian symmetry in the time
    domain and is real in the frequency domain. So, here, it’s [`hfft`](scipy.fft.hfft.html#scipy.fft.hfft
    "scipy.fft.hfft"), for which you must supply the length of the result if it is
    to be odd: * even: `ihfft(hfft(a, 2*len(a) - 2) == a`, within roundoff error,
    * odd: `ihfft(hfft(a, 2*len(a) - 1) == a`, within roundoff error.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
