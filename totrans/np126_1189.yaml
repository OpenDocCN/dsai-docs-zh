- en: NumPy 1.7.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.7.0 发行说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.7.0-notes.html](https://numpy.org/doc/1.26/release/1.7.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.7.0-notes.html](https://numpy.org/doc/1.26/release/1.7.0-notes.html)
- en: This release includes several new features as well as numerous bug fixes and
    refactorings. It supports Python 2.4 - 2.7 and 3.1 - 3.3 and is the last release
    that supports Python 2.4 - 2.5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本包括几个新功能以及大量的错误修复和重构。它支持Python 2.4 - 2.7和3.1 - 3.3，并且是最后一个支持Python 2.4 - 2.5的版本。
- en: Highlights
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: '`where=` parameter to ufuncs (allows the use of boolean arrays to choose where
    a computation should be done)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where=`参数用于ufuncs（允许使用布尔数组选择计算应该在哪里进行）'
- en: '`vectorize` improvements (added ‘excluded’ and ‘cache’ keyword, general cleanup
    and bug fixes)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vectorize`改进（添加了“excluded”和“cache”关键字，进行了一般清理和错误修复）'
- en: '`numpy.random.choice` (random sample generating function)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.random.choice`（随机样本生成函数）'
- en: Compatibility notes
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: In a future version of numpy, the functions np.diag, np.diagonal, and the diagonal
    method of ndarrays will return a view onto the original array, instead of producing
    a copy as they do now. This makes a difference if you write to the array returned
    by any of these functions. To facilitate this transition, numpy 1.7 produces a
    FutureWarning if it detects that you may be attempting to write to such an array.
    See the documentation for np.diagonal for details.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的numpy版本中，函数np.diag、np.diagonal和ndarrays的diagonal方法将返回对原始数组的视图，而不是像现在一样生成副本。如果您向这些函数返回的数组写入数据，这将产生差异。为了促进这一过渡，如果numpy
    1.7检测到您可能正在尝试向这样的数组写入数据，它会产生一个FutureWarning。有关详细信息，请参阅np.diagonal的文档。
- en: Similar to np.diagonal above, in a future version of numpy, indexing a record
    array by a list of field names will return a view onto the original array, instead
    of producing a copy as they do now. As with np.diagonal, numpy 1.7 produces a
    FutureWarning if it detects that you may be attempting to write to such an array.
    See the documentation for array indexing for details.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面的np.diagonal类似，在未来的numpy版本中，通过字段名称列表对记录数组进行索引将返回对原始数组的视图，而不是像现在一样生成副本。与np.diagonal一样，如果numpy
    1.7检测到您可能正在尝试向这样的数组写入数据，它会产生一个FutureWarning。有关详细信息，请参阅数组索引的文档。
- en: In a future version of numpy, the default casting rule for UFunc out= parameters
    will be changed from ‘unsafe’ to ‘same_kind’. (This also applies to in-place operations
    like a += b, which is equivalent to np.add(a, b, out=a).) Most usages which violate
    the ‘same_kind’ rule are likely bugs, so this change may expose previously undetected
    errors in projects that depend on NumPy. In this version of numpy, such usages
    will continue to succeed, but will raise a DeprecationWarning.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的numpy版本中，UFunc的默认转换规则将从“unsafe”更改为“same_kind”（这也适用于像a += b这样的原地操作，它等同于np.add(a,
    b, out=a)）。大多数违反“same_kind”规则的用法可能是错误，因此此更改可能会暴露依赖于NumPy的项目中以前未检测到的错误。在这个版本的numpy中，这样的用法将继续成功，但会引发DeprecationWarning。
- en: Full-array boolean indexing has been optimized to use a different, optimized
    code path. This code path should produce the same results, but any feedback about
    changes to your code would be appreciated.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完整数组布尔索引已经优化为使用不同的、优化的代码路径。这个代码路径应该产生相同的结果，但对于您代码的任何变化的反馈将不胜感激。
- en: Attempting to write to a read-only array (one with `arr.flags.writeable` set
    to `False`) used to raise either a RuntimeError, ValueError, or TypeError inconsistently,
    depending on which code path was taken. It now consistently raises a ValueError.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试向只读数组（`arr.flags.writeable`设置为`False`的数组）写入数据以前会不一致地引发RuntimeError、ValueError或TypeError，具体取决于采取的代码路径。现在它会一致地引发ValueError。
- en: The <ufunc>.reduce functions evaluate some reductions in a different order than
    in previous versions of NumPy, generally providing higher performance. Because
    of the nature of floating-point arithmetic, this may subtly change some results,
    just as linking NumPy to a different BLAS implementations such as MKL can.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ufunc>.reduce`函数以与以前版本的NumPy不同的顺序评估一些缩减操作，通常提供更高的性能。由于浮点运算的性质，这可能会微妙地改变一些结果，就像将NumPy链接到不同的BLAS实现（如MKL）一样。'
- en: If upgrading from 1.5, then generally in 1.6 and 1.7 there have been substantial
    code added and some code paths altered, particularly in the areas of type resolution
    and buffered iteration over universal functions. This might have an impact on
    your code particularly if you relied on accidental behavior in the past.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从1.5版本升级，那么在1.6和1.7版本中通常会添加大量代码并更改一些代码路径，特别是在类型解析和通用函数的缓冲迭代领域。这可能会对您的代码产生影响，特别是如果您过去依赖于偶然行为。
- en: New features
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Reduction UFuncs Generalize axis= Parameter
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reduction UFuncs泛化axis=参数
- en: Any ufunc.reduce function call, as well as other reductions like sum, prod,
    any, all, max and min support the ability to choose a subset of the axes to reduce
    over. Previously, one could say axis=None to mean all the axes or axis=# to pick
    a single axis. Now, one can also say axis=(#,#) to pick a list of axes for reduction.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 任何ufunc.reduce函数调用，以及其他减少操作如sum、prod、any、all、max和min都支持选择要减少的轴的能力。以前，可以说axis=None表示所有轴或axis=#表示选择单个轴。现在，还可以说axis=(#,#)来选择要减少的轴列表。
- en: Reduction UFuncs New keepdims= Parameter
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reduction UFuncs新的keepdims=参数
- en: There is a new keepdims= parameter, which if set to True, doesn’t throw away
    the reduction axes but instead sets them to have size one. When this option is
    set, the reduction result will broadcast correctly to the original operand which
    was reduced.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的keepdims=参数，如果设置为True，则不会丢弃减少轴，而是将它们设置为大小为一。当设置此选项时，减少结果将正确广播到原始被减少的操作数。
- en: Datetime support
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期时间支持
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The datetime API is *experimental* in 1.7.0, and may undergo changes in future
    versions of NumPy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1.7.0版本中的datetime API是*实验性的*，可能会在未来的NumPy版本中发生变化。
- en: 'There have been a lot of fixes and enhancements to datetime64 compared to NumPy
    1.6:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与NumPy 1.6相比，datetime64有许多修复和增强：
- en: the parser is quite strict about only accepting ISO 8601 dates, with a few convenience
    extensions
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器非常严格，只接受ISO 8601日期，带有一些方便的扩展。
- en: converts between units correctly
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确转换单位
- en: datetime arithmetic works correctly
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间算术运算正确
- en: business day functionality (allows the datetime to be used in contexts where
    only certain days of the week are valid)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作日功能（允许日期时间在只有某些周几有效的情况下使用）
- en: The notes in [doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)
    (also available in the online docs at [arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html))
    should be consulted for more details.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应查阅[doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)中的注释（也可在[arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)的在线文档中找到）以获取更多详细信息。
- en: Custom formatter for printing arrays
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于打印数组的自定义格式化程序
- en: See the new `formatter` parameter of the `numpy.set_printoptions` function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`numpy.set_printoptions`函数的新`formatter`参数。
- en: New function numpy.random.choice
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数numpy.random.choice
- en: A generic sampling function has been added which will generate samples from
    a given array-like. The samples can be with or without replacement, and with uniform
    or given non-uniform probabilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个通用的抽样函数，它将从给定的类似数组中生成样本。样本可以有或没有替换，并且具有均匀或给定的非均匀概率。
- en: New function isclose
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数isclose
- en: Returns a boolean array where two arrays are element-wise equal within a tolerance.
    Both relative and absolute tolerance can be specified.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个布尔数组，其中两个数组在容差范围内逐元素相等。可以指定相对容差和绝对容差。
- en: Preliminary multi-dimensional support in the polynomial package
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式包中的初步多维支持
- en: Axis keywords have been added to the integration and differentiation functions
    and a tensor keyword was added to the evaluation functions. These additions allow
    multi-dimensional coefficient arrays to be used in those functions. New functions
    for evaluating 2-D and 3-D coefficient arrays on grids or sets of points were
    added together with 2-D and 3-D pseudo-Vandermonde matrices that can be used for
    fitting.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在积分和微分函数中添加了轴关键字，并添加了一个张量关键字到评估函数中。这些添加允许在这些函数中使用多维系数数组。还添加了用于在网格或点集上评估2-D和3-D系数数组的新函数，以及用于拟合的2-D和3-D伪范德蒙矩阵。
- en: Ability to pad rank-n arrays
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能够填充秩为n的数组
- en: 'A pad module containing functions for padding n-dimensional arrays has been
    added. The various private padding functions are exposed as options to a public
    ‘pad’ function. Example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个包含用于填充n维数组的函数的pad模块。各种私有填充函数作为公共'pad'函数的选项暴露出来。示例：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Current modes are `constant`, `edge`, `linear_ramp`, `maximum`, `mean`, `median`,
    `minimum`, `reflect`, `symmetric`, `wrap`, and `<function>`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: New argument to searchsorted
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function searchsorted now accepts a ‘sorter’ argument that is a permutation
    array that sorts the array to search.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Build system
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Added experimental support for the AArch64 architecture.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: C API
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New function `PyArray_FailUnlessWriteable` provides a consistent interface for
    checking array writeability – any C code which works with arrays whose WRITEABLE
    flag is not known to be True a priori, should make sure to call this function
    before writing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: NumPy C Style Guide added (`doc/C_STYLE_GUIDE.rst`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: General
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function np.concatenate tries to match the layout of its input arrays. Previously,
    the layout did not follow any particular reason, and depended in an undesirable
    way on the particular axis chosen for concatenation. A bug was also fixed which
    silently allowed out of bounds axis arguments.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: The ufuncs logical_or, logical_and, and logical_not now follow Python’s behavior
    with object arrays, instead of trying to call methods on the objects. For example
    the expression (3 and ‘test’) produces the string ‘test’, and now np.logical_and(np.array(3,
    ‘O’), np.array(‘test’, ‘O’)) produces ‘test’ as well.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.base` attribute on ndarrays, which is used on views to ensure that the
    underlying array owning the memory is not deallocated prematurely, now collapses
    out references when you have a view-of-a-view. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In numpy 1.6, `c.base` is `b`, and `c.base.base` is `a`. In numpy 1.7, `c.base`
    is `a`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'To increase backwards compatibility for software which relies on the old behaviour
    of `.base`, we only ‘skip over’ objects which have exactly the same type as the
    newly created view. This makes a difference if you use `ndarray` subclasses. For
    example, if we have a mix of `ndarray` and `matrix` objects which are all views
    on the same original `ndarray`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: then `d.base` will be `b`. This is because `d` is a `matrix` object, and so
    the collapsing process only continues so long as it encounters other `matrix`
    objects. It considers `c`, `b`, and `a` in that order, and `b` is the last entry
    in that list which is a `matrix` object.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Casting Rules
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Casting rules have undergone some changes in corner cases, due to the NA-related
    work. In particular for combinations of scalar+scalar:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: the *longlong* type (*q*) now stays *longlong* for operations with any other
    number (*? b h i l q p B H I*), previously it was cast as *int_* (*l*). The *ulonglong*
    type (*Q*) now stays as *ulonglong* instead of *uint* (*L*).
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the *timedelta64* type (*m*) can now be mixed with any integer type (*b h i
    l q p B H I L Q P*), previously it raised *TypeError*.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For array + scalar, the above rules just broadcast except the case when the
    array and scalars are unsigned/signed integers, then the result gets converted
    to the array type (of possibly larger size) as illustrated by the following examples:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Whether the size gets increased depends on the size of the scalar, for example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 数量是否增加取决于标量的大小，例如：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Also a `complex128` scalar + `float32` array is cast to `complex64`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`complex128` 标量 + `float32` 数组也会转换为 `complex64`。'
- en: In NumPy 1.7 the *datetime64* type (*M*) must be constructed by explicitly specifying
    the type as the second argument (e.g. `np.datetime64(2000, 'Y')`).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.7 中，*datetime64* 类型 (*M*) 必须通过显式指定类型作为第二个参数来构造（例如 `np.datetime64(2000,
    'Y')`）。
- en: Deprecations
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: General
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: Specifying a custom string formatter with a *_format* array attribute is deprecated.
    The new *formatter* keyword in `numpy.set_printoptions` or `numpy.array2string`
    can be used instead.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *_format* 数组属性指定自定义字符串格式化器已被弃用。可以改用 `numpy.set_printoptions` 或 `numpy.array2string`
    中的新 *formatter* 关键字。
- en: The deprecated imports in the polynomial package have been removed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式包中的已弃用导入已被移除。
- en: '`concatenate` now raises DepractionWarning for 1D arrays if `axis != 0`. Versions
    of numpy < 1.7.0 ignored axis argument value for 1D arrays. We allow this for
    now, but in due course we will raise an error.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `concatenate` 的 `axis != 0`，现在会为 1D 数组引发 DepractionWarning。numpy < 1.7.0
    版本忽略了 1D 数组的 axis 参数值。我们现在允许这样做，但在适当的时候我们会引发错误。
- en: C-API
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Direct access to the fields of PyArrayObject* has been deprecated. Direct access
    has been recommended against for many releases. Expect similar deprecations for
    PyArray_Descr* and other core objects in the future as preparation for NumPy 2.0.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用对 PyArrayObject* 字段的直接访问。多个版本已经不推荐直接访问。为了准备 NumPy 2.0，未来可能会对 PyArray_Descr*
    和其他核心对象进行类似的弃用。
- en: The macros in old_defines.h are deprecated and will be removed in the next major
    release (>= 2.0). The sed script tools/replace_old_macros.sed can be used to replace
    these macros with the newer versions.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: old_defines.h 中的宏已被弃用，并将在下一个主要版本（>= 2.0）中删除。可以使用 sed 脚本 tools/replace_old_macros.sed
    将这些宏替换为更新版本。
- en: You can test your code against the deprecated C API by adding a line composed
    of `#define NPY_NO_DEPRECATED_API` and the target version number, such as `NPY_1_7_API_VERSION`,
    before including any NumPy headers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在包含任何 NumPy 头文件之前添加一行 `#define NPY_NO_DEPRECATED_API` 和目标版本号（例如 `NPY_1_7_API_VERSION`）来针对弃用的
    C API 测试您的代码。
- en: The `NPY_CHAR` member of the `NPY_TYPES` enum is deprecated and will be removed
    in NumPy 1.8\. See the discussion at [gh-2801](https://github.com/numpy/numpy/issues/2801)
    for more details.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`NPY_TYPES` 枚举的 `NPY_CHAR` 成员已被弃用，并将在 NumPy 1.8 中删除。有关更多详细信息，请参阅 [gh-2801](https://github.com/numpy/numpy/issues/2801)
    中的讨论。'
- en: Highlights
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亮点
- en: '`where=` parameter to ufuncs (allows the use of boolean arrays to choose where
    a computation should be done)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where=` 参数用于 ufuncs（允许使用布尔数组选择计算应该在哪里进行）'
- en: '`vectorize` improvements (added ‘excluded’ and ‘cache’ keyword, general cleanup
    and bug fixes)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vectorize` 改进（添加了 ''excluded'' 和 ''cache'' 关键字，进行了一般清理和错误修复）'
- en: '`numpy.random.choice` (random sample generating function)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.random.choice`（随机样本生成函数）'
- en: Compatibility notes
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: In a future version of numpy, the functions np.diag, np.diagonal, and the diagonal
    method of ndarrays will return a view onto the original array, instead of producing
    a copy as they do now. This makes a difference if you write to the array returned
    by any of these functions. To facilitate this transition, numpy 1.7 produces a
    FutureWarning if it detects that you may be attempting to write to such an array.
    See the documentation for np.diagonal for details.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的 numpy 版本中，函数 np.diag、np.diagonal 和 ndarrays 的 diagonal 方法将返回原始数组的视图，而不是像现在一样生成副本。如果您向这些函数返回的数组写入数据，这将产生差异。为了促进这一过渡，numpy
    1.7 在检测到您可能试图向这样的数组写入数据时会产生 FutureWarning。有关详细信息，请参阅 np.diagonal 的文档。
- en: Similar to np.diagonal above, in a future version of numpy, indexing a record
    array by a list of field names will return a view onto the original array, instead
    of producing a copy as they do now. As with np.diagonal, numpy 1.7 produces a
    FutureWarning if it detects that you may be attempting to write to such an array.
    See the documentation for array indexing for details.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述 np.diagonal 类似，在未来的 numpy 版本中，通过字段名称列表对记录数组进行索引将返回原始数组的视图，而不是像现在一样生成副本。与
    np.diagonal 一样，numpy 1.7 在检测到您可能试图向这样的数组写入数据时会产生 FutureWarning。有关详细信息，请参阅数组索引的文档。
- en: In a future version of numpy, the default casting rule for UFunc out= parameters
    will be changed from ‘unsafe’ to ‘same_kind’. (This also applies to in-place operations
    like a += b, which is equivalent to np.add(a, b, out=a).) Most usages which violate
    the ‘same_kind’ rule are likely bugs, so this change may expose previously undetected
    errors in projects that depend on NumPy. In this version of numpy, such usages
    will continue to succeed, but will raise a DeprecationWarning.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的 numpy 版本中，UFunc `out=` 参数的默认转换规则将从‘unsafe’更改为‘same_kind’。 （这也适用于像 `a +=
    b` 这样的原地操作，它等同于 `np.add(a, b, out=a)`。）违反‘same_kind’规则的大多数用法可能是错误，因此此更改可能会暴露依赖于
    NumPy 的项目中以前未检测到的错误。在这个 numpy 版本中，这样的用法将继续成功，但会引发 DeprecationWarning。
- en: Full-array boolean indexing has been optimized to use a different, optimized
    code path. This code path should produce the same results, but any feedback about
    changes to your code would be appreciated.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整数组布尔索引已经优化为使用不同的、优化的代码路径。这个代码路径应该产生相同的结果，但对于代码变化的任何反馈将不胜感激。
- en: Attempting to write to a read-only array (one with `arr.flags.writeable` set
    to `False`) used to raise either a RuntimeError, ValueError, or TypeError inconsistently,
    depending on which code path was taken. It now consistently raises a ValueError.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试向只读数组（`arr.flags.writeable` 设置为 `False` 的数组）写入以前会不一致地引发 RuntimeError、ValueError
    或 TypeError，取决于采取的代码路径。现在它会一致地引发 ValueError。
- en: The <ufunc>.reduce functions evaluate some reductions in a different order than
    in previous versions of NumPy, generally providing higher performance. Because
    of the nature of floating-point arithmetic, this may subtly change some results,
    just as linking NumPy to a different BLAS implementations such as MKL can.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ufunc>.reduce` 函数在 NumPy 的先前版本中以不同的顺序执行一些缩减操作，通常提供更高的性能。由于浮点运算的性质，这可能会微妙地改变一些结果，就像将
    NumPy 链接到不同的 BLAS 实现（如 MKL）一样。'
- en: If upgrading from 1.5, then generally in 1.6 and 1.7 there have been substantial
    code added and some code paths altered, particularly in the areas of type resolution
    and buffered iteration over universal functions. This might have an impact on
    your code particularly if you relied on accidental behavior in the past.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从 1.5 升级，那么在 1.6 和 1.7 中通常添加了大量代码，并且一些代码路径已经改变，特别是在类型解析和通用函数的缓冲迭代领域。这可能会对您的代码产生影响，特别是如果您过去依赖于意外行为。
- en: New features
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: Reduction UFuncs Generalize axis= Parameter
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩减 UFuncs 泛化 `axis=` 参数
- en: Any ufunc.reduce function call, as well as other reductions like sum, prod,
    any, all, max and min support the ability to choose a subset of the axes to reduce
    over. Previously, one could say axis=None to mean all the axes or axis=# to pick
    a single axis. Now, one can also say axis=(#,#) to pick a list of axes for reduction.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 `ufunc.reduce` 函数调用，以及其他缩减操作如 sum、prod、any、all、max 和 min 支持选择要缩减的轴的能力。以前，可以说
    `axis=None` 表示所有轴或 `axis=#` 表示选择单个轴。现在，还可以说 `axis=(#,#)` 来选择要缩减的轴列表。
- en: Reduction UFuncs New keepdims= Parameter
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩减 UFuncs 新的 `keepdims=` 参数
- en: There is a new keepdims= parameter, which if set to True, doesn’t throw away
    the reduction axes but instead sets them to have size one. When this option is
    set, the reduction result will broadcast correctly to the original operand which
    was reduced.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个新的 `keepdims=` 参数，如果设置为 True，则不会丢弃缩减轴，而是将它们设置为大小为一。当设置此选项时，缩减结果将正确广播到原始被缩减的操作数。
- en: Datetime support
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期时间支持
- en: Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The datetime API is *experimental* in 1.7.0, and may undergo changes in future
    versions of NumPy.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 1.7.0 版本中的日期时间 API 是*实验性的*，可能会在未来的 NumPy 版本中发生变化。
- en: 'There have been a lot of fixes and enhancements to datetime64 compared to NumPy
    1.6:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 1.6 相比，datetime64 有很多修复和增强：
- en: the parser is quite strict about only accepting ISO 8601 dates, with a few convenience
    extensions
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器对只接受 ISO 8601 日期非常严格，带有一些方便的扩展
- en: converts between units correctly
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确地转换单位
- en: datetime arithmetic works correctly
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间算术运算正常工作
- en: business day functionality (allows the datetime to be used in contexts where
    only certain days of the week are valid)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作日功能（允许日期时间在只有某些周几有效的情境中使用）
- en: The notes in [doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)
    (also available in the online docs at [arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html))
    should be consulted for more details.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应查阅 [doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)
    中的注释（也可在在线文档 [arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
    中找到）以获取更多详细信息。
- en: Custom formatter for printing arrays
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于打印数组的自定义格式化程序
- en: See the new `formatter` parameter of the `numpy.set_printoptions` function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `numpy.set_printoptions` 函数的新 `formatter` 参数。
- en: New function numpy.random.choice
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数 numpy.random.choice
- en: A generic sampling function has been added which will generate samples from
    a given array-like. The samples can be with or without replacement, and with uniform
    or given non-uniform probabilities.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个通用的抽样函数，可以从给定的类似数组中生成样本。样本可以是有放回或无放回的，并且可以具有均匀或给定的非均匀概率。
- en: New function isclose
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数 isclose
- en: Returns a boolean array where two arrays are element-wise equal within a tolerance.
    Both relative and absolute tolerance can be specified.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个布尔数组，其中两个数组在容差范围内逐元素相等。可以指定相对容差和绝对容差。
- en: Preliminary multi-dimensional support in the polynomial package
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式包中的初步多维支持
- en: Axis keywords have been added to the integration and differentiation functions
    and a tensor keyword was added to the evaluation functions. These additions allow
    multi-dimensional coefficient arrays to be used in those functions. New functions
    for evaluating 2-D and 3-D coefficient arrays on grids or sets of points were
    added together with 2-D and 3-D pseudo-Vandermonde matrices that can be used for
    fitting.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对积分和微分函数添加了轴关键字，并添加了一个张量关键字到评估函数中。这些添加允许在这些函数中使用多维系数数组。还添加了用于在网格或点集上评估 2-D 和
    3-D 系数数组的新函数，以及可用于拟合的 2-D 和 3-D 伪范德蒙矩阵。
- en: Ability to pad rank-n arrays
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能够填充秩为 n 的数组
- en: 'A pad module containing functions for padding n-dimensional arrays has been
    added. The various private padding functions are exposed as options to a public
    ‘pad’ function. Example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个包含用于填充 n 维数组的函数的 pad 模块。各种私有填充函数作为公共 'pad' 函数的选项暴露出来。示例：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Current modes are `constant`, `edge`, `linear_ramp`, `maximum`, `mean`, `median`,
    `minimum`, `reflect`, `symmetric`, `wrap`, and `<function>`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当前模式为 `constant`、`edge`、`linear_ramp`、`maximum`、`mean`、`median`、`minimum`、`reflect`、`symmetric`、`wrap`
    和 `<function>`。
- en: New argument to searchsorted
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: searchsorted 的新参数
- en: The function searchsorted now accepts a ‘sorter’ argument that is a permutation
    array that sorts the array to search.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 searchsorted 现在接受一个 'sorter' 参数，该参数是对数组进行排序的排列数组。
- en: Build system
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the AArch64 architecture.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对 AArch64 架构的实验性支持。
- en: C API
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: New function `PyArray_FailUnlessWriteable` provides a consistent interface for
    checking array writeability – any C code which works with arrays whose WRITEABLE
    flag is not known to be True a priori, should make sure to call this function
    before writing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `PyArray_FailUnlessWriteable` 提供了一个一致的接口来检查数组的可写性 - 任何使用 WRITEABLE 标志未知为
    True 的数组的 C 代码，在写入之前应确保调用此函数。
- en: NumPy C Style Guide added (`doc/C_STYLE_GUIDE.rst`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了 NumPy C 风格指南（`doc/C_STYLE_GUIDE.rst`）。
- en: Reduction UFuncs Generalize axis= Parameter
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩减 UFuncs 泛化 axis= 参数
- en: Any ufunc.reduce function call, as well as other reductions like sum, prod,
    any, all, max and min support the ability to choose a subset of the axes to reduce
    over. Previously, one could say axis=None to mean all the axes or axis=# to pick
    a single axis. Now, one can also say axis=(#,#) to pick a list of axes for reduction.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 ufunc.reduce 函数调用，以及其他缩减函数如 sum、prod、any、all、max 和 min 支持选择要缩减的轴的能力。以前，可以说
    axis=None 表示所有轴或 axis=# 选择单个轴。现在，还可以说 axis=(#,#) 选择要缩减的轴列表。
- en: Reduction UFuncs New keepdims= Parameter
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩减 UFuncs 新 keepdims= 参数
- en: There is a new keepdims= parameter, which if set to True, doesn’t throw away
    the reduction axes but instead sets them to have size one. When this option is
    set, the reduction result will broadcast correctly to the original operand which
    was reduced.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 keepdims= 参数，如果设置为 True，则不会丢弃缩减轴，而是将它们设置为大小为一。当设置此选项时，缩减结果将正确广播到原始被缩减的操作数。
- en: Datetime support
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日期时间支持
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The datetime API is *experimental* in 1.7.0, and may undergo changes in future
    versions of NumPy.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 1.7.0 版本中的日期时间 API 是 *实验性的*，可能在 NumPy 的未来版本中发生变化。
- en: 'There have been a lot of fixes and enhancements to datetime64 compared to NumPy
    1.6:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 1.6 相比，datetime64 有许多修复和增强：
- en: the parser is quite strict about only accepting ISO 8601 dates, with a few convenience
    extensions
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器对仅接受 ISO 8601 日期非常严格，具有一些方便的扩展
- en: converts between units correctly
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单位之间正确转换
- en: datetime arithmetic works correctly
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期时间算术运算正确
- en: business day functionality (allows the datetime to be used in contexts where
    only certain days of the week are valid)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作日功能（允许日期时间在仅某些周几有效的情境中使用）
- en: The notes in [doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)
    (also available in the online docs at [arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html))
    should be consulted for more details.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 应该查阅 [doc/source/reference/arrays.datetime.rst](https://github.com/numpy/numpy/blob/maintenance/1.7.x/doc/source/reference/arrays.datetime.rst)
    中的注释（也可以在在线文档 [arrays.datetime.html](https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html)
    中找到更多详细信息）。
- en: Custom formatter for printing arrays
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于打印数组的自定义格式化程序
- en: See the new `formatter` parameter of the `numpy.set_printoptions` function.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `numpy.set_printoptions` 函数的新 `formatter` 参数。
- en: New function numpy.random.choice
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新功能 numpy.random.choice
- en: A generic sampling function has been added which will generate samples from
    a given array-like. The samples can be with or without replacement, and with uniform
    or given non-uniform probabilities.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个通用的抽样函数，它将从给定的类似数组中生成样本。样本可以是有放回或无放回的，并且可以具有均匀或给定的非均匀概率。
- en: New function isclose
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新函数 isclose
- en: Returns a boolean array where two arrays are element-wise equal within a tolerance.
    Both relative and absolute tolerance can be specified.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个布尔数组，其中两个数组在容差范围内逐元素相等。可以指定相对容差和绝对容差。
- en: Preliminary multi-dimensional support in the polynomial package
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多项式包中的初步多维支持
- en: Axis keywords have been added to the integration and differentiation functions
    and a tensor keyword was added to the evaluation functions. These additions allow
    multi-dimensional coefficient arrays to be used in those functions. New functions
    for evaluating 2-D and 3-D coefficient arrays on grids or sets of points were
    added together with 2-D and 3-D pseudo-Vandermonde matrices that can be used for
    fitting.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在积分和微分函数中添加了轴关键字，并添加了一个张量关键字到评估函数中。这些添加允许在这些函数中使用多维系数数组。还添加了用于在网格或点集上评估2-D和3-D系数数组的新函数，以及用于拟合的2-D和3-D伪范德蒙矩阵。
- en: Ability to pad rank-n arrays
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能够填充秩为n的数组
- en: 'A pad module containing functions for padding n-dimensional arrays has been
    added. The various private padding functions are exposed as options to a public
    ‘pad’ function. Example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一个包含用于填充n维数组的函数的 pad 模块。各种私有填充函数作为公共 'pad' 函数的选项暴露。示例：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Current modes are `constant`, `edge`, `linear_ramp`, `maximum`, `mean`, `median`,
    `minimum`, `reflect`, `symmetric`, `wrap`, and `<function>`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当前模式为 `constant`, `edge`, `linear_ramp`, `maximum`, `mean`, `median`, `minimum`,
    `reflect`, `symmetric`, `wrap`, 和 `<function>`。
- en: New argument to searchsorted
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: searchsorted 的新参数
- en: The function searchsorted now accepts a ‘sorter’ argument that is a permutation
    array that sorts the array to search.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 searchsorted 现在接受一个 'sorter' 参数，该参数是一个对数组进行排序的排列数组。
- en: Build system
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建系统
- en: Added experimental support for the AArch64 architecture.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对 AArch64 架构的实验性支持。
- en: C API
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C API
- en: New function `PyArray_FailUnlessWriteable` provides a consistent interface for
    checking array writeability – any C code which works with arrays whose WRITEABLE
    flag is not known to be True a priori, should make sure to call this function
    before writing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数 `PyArray_FailUnlessWriteable` 提供了一个一致的接口，用于检查数组的可写性 - 任何使用数组的 C 代码，在写入之前应该确保调用此函数。
- en: NumPy C Style Guide added (`doc/C_STYLE_GUIDE.rst`).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了 NumPy C 风格指南（`doc/C_STYLE_GUIDE.rst`）。
- en: Changes
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: General
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: The function np.concatenate tries to match the layout of its input arrays. Previously,
    the layout did not follow any particular reason, and depended in an undesirable
    way on the particular axis chosen for concatenation. A bug was also fixed which
    silently allowed out of bounds axis arguments.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 np.concatenate 尝试匹配其输入数组的布局。以前，布局没有遵循任何特定的原因，并且以一种不希望的方式依赖于选择用于连接的特定轴。还修复了一个错误，以前允许静默地使用超出范围的轴参数。
- en: The ufuncs logical_or, logical_and, and logical_not now follow Python’s behavior
    with object arrays, instead of trying to call methods on the objects. For example
    the expression (3 and ‘test’) produces the string ‘test’, and now np.logical_and(np.array(3,
    ‘O’), np.array(‘test’, ‘O’)) produces ‘test’ as well.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，ufuncs logical_or、logical_and和logical_not遵循Python在对象数组上的行为，而不是尝试在对象上调用方法。例如，表达式(3
    and ‘test’)会产生字符串‘test’，现在np.logical_and(np.array(3, ‘O’), np.array(‘test’, ‘O’))也会产生‘test’。
- en: 'The `.base` attribute on ndarrays, which is used on views to ensure that the
    underlying array owning the memory is not deallocated prematurely, now collapses
    out references when you have a view-of-a-view. For example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在ndarrays上的`.base`属性，用于在视图上确保内存所有权的基础数组不会过早释放，现在在视图的视图中引用时会折叠引用。例如：
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In numpy 1.6, `c.base` is `b`, and `c.base.base` is `a`. In numpy 1.7, `c.base`
    is `a`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在numpy 1.6中，`c.base`是`b`，`c.base.base`是`a`。在numpy 1.7中，`c.base`是`a`。
- en: 'To increase backwards compatibility for software which relies on the old behaviour
    of `.base`, we only ‘skip over’ objects which have exactly the same type as the
    newly created view. This makes a difference if you use `ndarray` subclasses. For
    example, if we have a mix of `ndarray` and `matrix` objects which are all views
    on the same original `ndarray`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加对依赖于`.base`旧行为的软件的向后兼容性，我们只会‘跳过’与新创建视图具有完全相同类型的对象。如果使用`ndarray`子类，这会产生差异。例如，如果我们有一组`ndarray`和`matrix`对象，它们都是对同一原始`ndarray`的视图：
- en: '[PRE8]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: then `d.base` will be `b`. This is because `d` is a `matrix` object, and so
    the collapsing process only continues so long as it encounters other `matrix`
    objects. It considers `c`, `b`, and `a` in that order, and `b` is the last entry
    in that list which is a `matrix` object.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`d.base`将是`b`。这是因为`d`是一个`matrix`对象，所以折叠过程只会在遇到其他`matrix`对象时继续进行。它按顺序考虑`c`、`b`和`a`，而`b`是列表中最后一个是`matrix`对象的条目。
- en: Casting Rules
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换规则
- en: 'Casting rules have undergone some changes in corner cases, due to the NA-related
    work. In particular for combinations of scalar+scalar:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NA相关工作，转换规则在一些边缘情况下发生了变化。特别是对于标量+标量的组合：
- en: the *longlong* type (*q*) now stays *longlong* for operations with any other
    number (*? b h i l q p B H I*), previously it was cast as *int_* (*l*). The *ulonglong*
    type (*Q*) now stays as *ulonglong* instead of *uint* (*L*).
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*longlong*类型(*q*)现在与任何其他数字(*? b h i l q p B H I*)进行操作时仍保持为*longlong*，以前会转换为*int_*(*l*)。*ulonglong*类型(*Q*)现在保持为*ulonglong*，而不是*uint*(*L*)。'
- en: the *timedelta64* type (*m*) can now be mixed with any integer type (*b h i
    l q p B H I L Q P*), previously it raised *TypeError*.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*timedelta64*类型(*m*)现在可以与任何整数类型(*b h i l q p B H I L Q P*)混合使用，以前会引发*TypeError*。'
- en: 'For array + scalar, the above rules just broadcast except the case when the
    array and scalars are unsigned/signed integers, then the result gets converted
    to the array type (of possibly larger size) as illustrated by the following examples:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组+标量，上述规则只是广播，除非数组和标量是无符号/有符号整数，然后结果会转换为数组类型(可能更大)如下例所示：
- en: '[PRE9]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Whether the size gets increased depends on the size of the scalar, for example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 增加的大小取决于标量的大小，例如：
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Also a `complex128` scalar + `float32` array is cast to `complex64`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`complex128`标量+`float32`数组会转换为`complex64`。
- en: In NumPy 1.7 the *datetime64* type (*M*) must be constructed by explicitly specifying
    the type as the second argument (e.g. `np.datetime64(2000, 'Y')`).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy 1.7中，*datetime64*类型(*M*)必须通过显式指定类型作为第二个参数来构造(例如`np.datetime64(2000, 'Y')`)。
- en: General
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: The function np.concatenate tries to match the layout of its input arrays. Previously,
    the layout did not follow any particular reason, and depended in an undesirable
    way on the particular axis chosen for concatenation. A bug was also fixed which
    silently allowed out of bounds axis arguments.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 函数np.concatenate尝试匹配其输入数组的布局。以前，布局没有遵循任何特定原因，并且以一种不希望的方式取决于选择用于连接的特定轴。还修复了一个允许超出边界轴参数的错误。
- en: The ufuncs logical_or, logical_and, and logical_not now follow Python’s behavior
    with object arrays, instead of trying to call methods on the objects. For example
    the expression (3 and ‘test’) produces the string ‘test’, and now np.logical_and(np.array(3,
    ‘O’), np.array(‘test’, ‘O’)) produces ‘test’ as well.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，ufuncs logical_or、logical_and和logical_not遵循Python在对象数组上的行为，而不是尝试在对象上调用方法。例如，表达式(3
    and ‘test’)会产生字符串‘test’，现在np.logical_and(np.array(3, ‘O’), np.array(‘test’, ‘O’))也会产生‘test’。
- en: 'The `.base` attribute on ndarrays, which is used on views to ensure that the
    underlying array owning the memory is not deallocated prematurely, now collapses
    out references when you have a view-of-a-view. For example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ndarrays 上的 `.base` 属性，用于在视图上确保拥有内存的底层数组不会过早释放，现在在视图的视图中折叠引用。例如：
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In numpy 1.6, `c.base` is `b`, and `c.base.base` is `a`. In numpy 1.7, `c.base`
    is `a`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 numpy 1.6 中，`c.base` 是 `b`，而 `c.base.base` 是 `a`。在 numpy 1.7 中，`c.base` 是
    `a`。
- en: 'To increase backwards compatibility for software which relies on the old behaviour
    of `.base`, we only ‘skip over’ objects which have exactly the same type as the
    newly created view. This makes a difference if you use `ndarray` subclasses. For
    example, if we have a mix of `ndarray` and `matrix` objects which are all views
    on the same original `ndarray`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加对依赖于旧版本 `.base` 行为的软件的向后兼容性，我们只会‘跳过’与新创建视图具有完全相同类型的对象。如果我们有一组 `ndarray`
    和 `matrix` 对象，它们都是同一个原始 `ndarray` 的视图：
- en: '[PRE12]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: then `d.base` will be `b`. This is because `d` is a `matrix` object, and so
    the collapsing process only continues so long as it encounters other `matrix`
    objects. It considers `c`, `b`, and `a` in that order, and `b` is the last entry
    in that list which is a `matrix` object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `d.base` 将会是 `b`。这是因为 `d` 是一个 `matrix` 对象，所以只有在遇到其他 `matrix` 对象时，折叠过程才会继续进行。它按照
    `c`、`b` 和 `a` 的顺序考虑，而 `b` 是列表中最后一个 `matrix` 对象。
- en: Casting Rules
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换规则
- en: 'Casting rules have undergone some changes in corner cases, due to the NA-related
    work. In particular for combinations of scalar+scalar:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 转换规则在一些边缘情况下发生了一些变化，这是由于 NA 相关工作。特别是对于标量+标量的组合：
- en: the *longlong* type (*q*) now stays *longlong* for operations with any other
    number (*? b h i l q p B H I*), previously it was cast as *int_* (*l*). The *ulonglong*
    type (*Q*) now stays as *ulonglong* instead of *uint* (*L*).
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*longlong* 类型 (*q*) 现在在与任何其他数字 (*? b h i l q p B H I*) 进行操作时仍保持为 *longlong*，以前它被转换为
    *int_* (*l*)。*ulonglong* 类型 (*Q*) 现在保持为 *ulonglong* 而不是 *uint* (*L*)。'
- en: the *timedelta64* type (*m*) can now be mixed with any integer type (*b h i
    l q p B H I L Q P*), previously it raised *TypeError*.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*timedelta64* 类型 (*m*) 现在可以与任何整数类型 (*b h i l q p B H I L Q P*) 混合，以前会引发 *TypeError*。'
- en: 'For array + scalar, the above rules just broadcast except the case when the
    array and scalars are unsigned/signed integers, then the result gets converted
    to the array type (of possibly larger size) as illustrated by the following examples:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组 + 标量，上述规则只是广播，除非数组和标量是无符号/有符号整数，那么结果会转换为数组类型（可能更大的大小），如下例所示：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Whether the size gets increased depends on the size of the scalar, for example:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 是否增加大小取决于标量的大小，例如：
- en: '[PRE14]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Also a `complex128` scalar + `float32` array is cast to `complex64`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `complex128` 标量 + `float32` 数组会被转换为 `complex64`。
- en: In NumPy 1.7 the *datetime64* type (*M*) must be constructed by explicitly specifying
    the type as the second argument (e.g. `np.datetime64(2000, 'Y')`).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.7 中，*datetime64* 类型 (*M*) 必须通过显式指定类型作为第二个参数来构造（例如 `np.datetime64(2000,
    'Y')`）。
- en: Deprecations
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: General
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: Specifying a custom string formatter with a *_format* array attribute is deprecated.
    The new *formatter* keyword in `numpy.set_printoptions` or `numpy.array2string`
    can be used instead.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *_format* 数组属性指定自定义字符串格式化程序已被弃用。可以使用 `numpy.set_printoptions` 或 `numpy.array2string`
    中的新 *formatter* 关键字代替。
- en: The deprecated imports in the polynomial package have been removed.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式包中的已弃用导入已被移除。
- en: '`concatenate` now raises DepractionWarning for 1D arrays if `axis != 0`. Versions
    of numpy < 1.7.0 ignored axis argument value for 1D arrays. We allow this for
    now, but in due course we will raise an error.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`concatenate` 现在对于 1D 数组如果 `axis != 0` 会引发 DepractionWarning。numpy < 1.7.0
    版本对于 1D 数组忽略了 axis 参数值。我们暂时允许这样，但在适当的时候我们会引发错误。'
- en: C-API
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Direct access to the fields of PyArrayObject* has been deprecated. Direct access
    has been recommended against for many releases. Expect similar deprecations for
    PyArray_Descr* and other core objects in the future as preparation for NumPy 2.0.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用对 PyArrayObject* 字段的直接访问。对于许多版本，已经不推荐直接访问。为了为 NumPy 2.0 做准备，未来可能会对 PyArray_Descr*
    和其他核心对象进行类似的弃用。
- en: The macros in old_defines.h are deprecated and will be removed in the next major
    release (>= 2.0). The sed script tools/replace_old_macros.sed can be used to replace
    these macros with the newer versions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: old_defines.h 中的宏已被弃用，并将在下一个主要版本（>= 2.0）中删除。sed 脚本 tools/replace_old_macros.sed
    可用于将这些宏替换为更新版本。
- en: You can test your code against the deprecated C API by adding a line composed
    of `#define NPY_NO_DEPRECATED_API` and the target version number, such as `NPY_1_7_API_VERSION`,
    before including any NumPy headers.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在包含任何 NumPy 头文件之前添加一行由 `#define NPY_NO_DEPRECATED_API` 和目标版本号（如 `NPY_1_7_API_VERSION`）组成的代码来针对弃用的
    C API 测试您的代码。
- en: The `NPY_CHAR` member of the `NPY_TYPES` enum is deprecated and will be removed
    in NumPy 1.8\. See the discussion at [gh-2801](https://github.com/numpy/numpy/issues/2801)
    for more details.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`NPY_TYPES` 枚举的 `NPY_CHAR` 成员已被弃用，并将在 NumPy 1.8 中移除。有关更多详细信息，请参阅 [gh-2801](https://github.com/numpy/numpy/issues/2801)
    上的讨论。'
- en: General
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: Specifying a custom string formatter with a *_format* array attribute is deprecated.
    The new *formatter* keyword in `numpy.set_printoptions` or `numpy.array2string`
    can be used instead.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *_format* 数组属性指定自定义字符串格式化程序已被弃用。可以改用 `numpy.set_printoptions` 或 `numpy.array2string`
    中的新 *formatter* 关键字。
- en: The deprecated imports in the polynomial package have been removed.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式包中的已弃用导入已被移除。
- en: '`concatenate` now raises DepractionWarning for 1D arrays if `axis != 0`. Versions
    of numpy < 1.7.0 ignored axis argument value for 1D arrays. We allow this for
    now, but in due course we will raise an error.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `axis != 0`，`concatenate` 现在会为 1D 数组引发 DepractionWarning。numpy < 1.7.0 版本忽略了
    1D 数组的 axis 参数值。我们暂时允许这样，但在适当的时候我们将引发错误。
- en: C-API
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C-API
- en: Direct access to the fields of PyArrayObject* has been deprecated. Direct access
    has been recommended against for many releases. Expect similar deprecations for
    PyArray_Descr* and other core objects in the future as preparation for NumPy 2.0.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用对 PyArrayObject* 字段的直接访问。对于许多版本，已经不推荐直接访问。作为准备 NumPy 2.0 的一部分，未来可能会对 PyArray_Descr*
    和其他核心对象进行类似的弃用。
- en: The macros in old_defines.h are deprecated and will be removed in the next major
    release (>= 2.0). The sed script tools/replace_old_macros.sed can be used to replace
    these macros with the newer versions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的 old_defines.h 中的宏已被弃用，并将在下一个主要版本发布（>= 2.0）时移除。可以使用 sed 脚本 tools/replace_old_macros.sed
    将这些宏替换为更新版本。
- en: You can test your code against the deprecated C API by adding a line composed
    of `#define NPY_NO_DEPRECATED_API` and the target version number, such as `NPY_1_7_API_VERSION`,
    before including any NumPy headers.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在包含任何 NumPy 头文件之前添加一行由 `#define NPY_NO_DEPRECATED_API` 和目标版本号（如 `NPY_1_7_API_VERSION`）组成的代码来针对弃用的
    C API 测试您的代码。
- en: The `NPY_CHAR` member of the `NPY_TYPES` enum is deprecated and will be removed
    in NumPy 1.8\. See the discussion at [gh-2801](https://github.com/numpy/numpy/issues/2801)
    for more details.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`NPY_TYPES` 枚举的 `NPY_CHAR` 成员已被弃用，并将在 NumPy 1.8 中移除。有关更多详细信息，请参阅 [gh-2801](https://github.com/numpy/numpy/issues/2801)
    上的讨论。'
