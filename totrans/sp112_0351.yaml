- en: scipy.ndimage.generic_filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.generic_filter.html#scipy.ndimage.generic_filter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.generic_filter.html#scipy.ndimage.generic_filter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate a multidimensional filter using the given function.
  prefs: []
  type: TYPE_NORMAL
- en: At each element the provided function is called. The input values within the
    filter footprint at that element are passed to the function as a 1-D array of
    double values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**function**{callable, scipy.LowLevelCallable}'
  prefs: []
  type: TYPE_NORMAL
- en: Function to apply at each element.
  prefs: []
  type: TYPE_NORMAL
- en: '**size**scalar or tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: See footprint, below. Ignored if footprint is given.
  prefs: []
  type: TYPE_NORMAL
- en: '**footprint**array, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Either *size* or *footprint* must be defined. *size* gives the shape that is
    taken from the input array, at every element position, to define the input to
    the filter function. *footprint* is a boolean array that specifies (implicitly)
    a shape, but also which of the elements within this shape will get passed to the
    filter function. Thus `size=(n,m)` is equivalent to `footprint=np.ones((n,m))`.
    We adjust *size* to the number of dimensions of the input array, so that, if the
    input array is shape (10,10,10), and *size* is 2, then the actual size used is
    (2,2,2). When *footprint* is given, *size* is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**{‘reflect’, ‘constant’, ‘nearest’, ‘mirror’, ‘wrap’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended beyond its
    boundaries. Default is ‘reflect’. Behavior for each valid value is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'For consistency with the interpolation functions, the following mode names
    can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘wrap’.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**int or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the placement of the filter on the input array’s pixels. A value of
    0 (the default) centers the filter over the pixel, with positive values shifting
    the filter to the left, and negative ones to the right. By passing a sequence
    of origins with length equal to the number of dimensions of the input array, different
    shifts can be specified along each axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_arguments**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of extra positional arguments to pass to passed function.
  prefs: []
  type: TYPE_NORMAL
- en: '**extra_keywords**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: dict of extra keyword arguments to pass to passed function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**generic_filter**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Filtered array. Has the same shape as *input*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function also accepts low-level callback functions with one of the following
    signatures and wrapped in [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The calling function iterates over the elements of the input and output arrays,
    calling the callback function at each element. The elements within the footprint
    of the filter at the current element are passed through the `buffer` parameter,
    and the number of elements within the footprint through `filter_size`. The calculated
    value is returned in `return_value`. `user_data` is the data pointer provided
    to [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable") as-is.
  prefs: []
  type: TYPE_NORMAL
- en: The callback function must return an integer error status that is zero if something
    went wrong and one otherwise. If an error occurs, you should normally set the
    python error status with an informative message before returning, otherwise a
    default error message is set by the calling function.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, some other low-level function pointer specifications are accepted,
    but these are for backward compatibility only and should not be used in new code.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Import the necessary modules and load the example image used for filtering.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute a maximum filter with kernel size 10 by passing a simple NumPy aggregation
    function as argument to *function*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: While a maximmum filter could also directly be obtained using [`maximum_filter`](scipy.ndimage.maximum_filter.html#scipy.ndimage.maximum_filter
    "scipy.ndimage.maximum_filter"), [`generic_filter`](#scipy.ndimage.generic_filter
    "scipy.ndimage.generic_filter") allows generic Python function or [`scipy.LowLevelCallable`](scipy.LowLevelCallable.html#scipy.LowLevelCallable
    "scipy.LowLevelCallable") to be used as a filter. Here, we compute the range between
    maximum and minimum value as an example for a kernel size of 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Plot the original and filtered images.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-ndimage-generic_filter-1.png](../Images/09ae5c180cc145c3006015c29c02ded5.png)'
  prefs: []
  type: TYPE_IMG
