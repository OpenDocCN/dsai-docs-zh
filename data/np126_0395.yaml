- en: String operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串操作
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.char.html](https://numpy.org/doc/1.26/reference/routines.char.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.char.html](https://numpy.org/doc/1.26/reference/routines.char.html)
- en: The [`numpy.char`](#module-numpy.char "numpy.char") module provides a set of
    vectorized string operations for arrays of type [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_") or [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_").
    For example
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.char`](#module-numpy.char "numpy.char") 模块为类型为 [`numpy.str_`](arrays.scalars.html#numpy.str_
    "numpy.str_") 或 [`numpy.bytes_`](arrays.scalars.html#numpy.bytes_ "numpy.bytes_")
    的数组提供一组矢量化的字符串操作。例如'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The methods in this module are based on the methods in `String`
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块中的方法基于 `String` 模块中的方法
- en: String operations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串操作
- en: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | Return element-wise string concatenation for two arrays of str or unicode. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | 返回两个 str 或 unicode 类型的数组逐元素进行字符串拼接的结果。'
- en: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | Return (a * i), that is string multiple concatenation, element-wise. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | 返回(a * i)，即字符串的多次连接，逐个元素进行。'
- en: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise
    for a pair of array_likes of str or unicode. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | 返回(a % i)，即对一对 str 或 unicode 类型的数组进行原始的 Python 2.6 字符串格式化（插值）。'
- en: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | Return a copy of *a* with only the first character
    of each element capitalized. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | 返回一个只有每个元素的首字母大写的副本。'
- en: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | Return a copy of *a* with its elements centered in a string of length *width*.
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | 返回一个将其元素居中在长度为 *width* 的字符串中的副本。'
- en: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | 调用 `bytes.decode` 逐个进行。'
- en: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | Calls *str.encode* element-wise. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | 调用 *str.encode* 逐个进行。'
- en: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | 返回将每个字符串元素中的制表符字符替换为一个或多个空格的副本。'
- en: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | 返回一个字符串，是序列 *seq* 中字符串的连接。'
- en: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | Return an array with the elements of *a* left-justified in a string of length
    *width*. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | 返回一个将 *a* 的元素左对齐在长度为 *width* 的字符串中的副本。'
- en: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | Return an array with the elements converted to lowercase. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | 返回将元素转换为小写的数组。'
- en: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | For each element in *a*, return a copy with the leading characters removed.
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | 对于 *a* 中的每个元素，返回一个去除了前导字符的副本。'
- en: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | Partition each element in *a* around *sep*. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | 分割 *a* 中的每个元素，围绕 *sep* 进行。'
- en: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | For each element in *a*, return a copy of the string with all occurrences of
    substring *old* replaced by *new*. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | 对于 *a* 中的每个元素，返回一个将所有子字符串 *old* 替换为 *new* 的字符串副本。'
- en: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | Return an array with the elements of *a* right-justified in a string of length
    *width*. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | 返回*a*元素的一个数组，右对齐在一个长度为*width*的字符串中。 |'
- en: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | Partition (split) each element around the right-most
    separator. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | 每个元素围绕最右边的分隔符分隔（拆分）元素。 |'
- en: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | 对于*a*中的每个元素，返回字符串中的单词列表，使用*sep*作为分隔符字符串。 |'
- en: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | For each element in *a*, return a copy with the trailing characters removed.
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | 对于*a*中的每个元素，返回带有去除尾随字符的副本。 |'
- en: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | 对于*a*中的每个元素，返回字符串中的单词列表，使用*sep*作为分隔符字符串。 |'
- en: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | For each element in *a*, return a list
    of the lines in the element, breaking at line boundaries. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | 对于*a*中的每个元素，返回元素中的行列表，按行分隔。 |'
- en: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | For each element in *a*, return a copy with the leading and trailing characters
    removed. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | 对于*a*中的每个元素，返回一个去除了前导和尾随字符的副本。 |'
- en: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | Return element-wise a copy of the string with uppercase characters converted
    to lowercase and vice versa. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | 返回字符串的每个元素的副本，其中大写字母转换为小写字母，反之亦然。 |'
- en: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | Return element-wise title cased version of string or unicode. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | 返回经过标题大小写处理的字符串或Unicode的每个元素方式。 |'
- en: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | For each element in *a*, return a copy of the string where all characters occurring
    in the optional argument *deletechars* are removed, and the remaining characters
    have been mapped through the given translation table. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | 对于*a*中的每个元素，返回去除了所有出现在可选参数*deletechars*中的字符的字符串的副本，并且剩余的字符已通过给定的转换表进行映射。 |'
- en: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | Return an array with the elements converted to uppercase. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | 返回��元素转换为大写的数组。 |'
- en: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | Return the numeric string left-filled with zeros |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | 返回用零填充的数字字符串 |'
- en: Comparison
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: Unlike the standard numpy comparison operators, the ones in the *char* module
    strip trailing whitespace characters before performing the comparison.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准的numpy比较运算符不同，*char*模块中的运算符在执行比较之前会去除尾随的空白字符。
- en: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | Return (x1 == x2) element-wise. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | 返回(x1 == x2)元素方式。 |'
- en: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | Return (x1 != x2) element-wise. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | 返回(x1 != x2)元素方式。 |'
- en: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | Return (x1 >= x2) element-wise. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | 返回(x1 >= x2)元素方式。 |'
- en: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | Return (x1 <= x2) element-wise. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | 按元素方式返回 (x1 <= x2)。'
- en: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | Return (x1 > x2) element-wise. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | 按元素方式返回 (x1 > x2)。'
- en: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | Return (x1 < x2) element-wise. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | 按��素方式返回 (x1 < x2)。'
- en: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | Performs element-wise
    comparison of two string arrays using the comparison operator specified by *cmp_op*.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | 使用*cmp_op*指定的比较运算符对两个字符串数组进行按元素比较。'
- en: String information
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串信息
- en: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | 返回一个数组，其中包含子字符串 *sub* 在范围 [*start*, *end*] 中的非重叠出现次数。'
- en: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | Returns a boolean array which is *True* where the string element in *a* ends
    with *suffix*, otherwise *False*. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | 返回一个布尔数组，其中字符串元素在 *a* 末尾以 *suffix* 结尾时为 *True*，否则为 *False*。'
- en: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | 对于每个元素，返回字符串中找到子字符串 *sub* 的最低索引。'
- en: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | Like [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find"),
    but raises *ValueError* when the substring is not found. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | 类似于[`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")，但在子字符串未找到时会引发*ValueError*。'
- en: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | Returns true for each element if all characters in the string are alphabetic
    and there is at least one character, false otherwise. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | 如果字符串中所有字符都是字母并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | Returns true for each element if all characters in the string are alphanumeric
    and there is at least one character, false otherwise. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | 如果字符串中所有字符都是字母数字并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | For each element, return True if there are only decimal characters in the element.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | 对于每个元素，如果元素中只有十进制字符，则返回True。'
- en: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | Returns true for each element if all characters in the string are digits and
    there is at least one character, false otherwise. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | 如果字符串中所有字符都是数字并且至少有一个字符，则对每个元素返回true，否则返回false。'
- en: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | Returns true for each element if all cased characters in the string are lowercase
    and there is at least one cased character, false otherwise. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | 如果字符串中所有大小写字符都是小写并且至少有一个大小写字符，则对每个元素返回true，否则返回false。'
- en: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | For each element, return True if there are only numeric characters in the element.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | 对于每个元素，如果元素中只有数字字符，则返回True。'
- en: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | Returns true for each element if there are only whitespace characters in the
    string and there is at least one character, false otherwise. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | 如果字符串中只有空白字符且至少包含一个字符，则返回true，否则返回false。 |'
- en: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | Returns true for each element if the element is a titlecased string and there
    is at least one character, false otherwise. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | 如果元素是titlecased字符串且至少包含一个字符，则返回true，否则返回false。 |'
- en: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | Return true for each element if all cased characters in the string are uppercase
    and there is at least one character, false otherwise. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | 如果字符串中的所有大小写字符都是大写且至少包含一个字符，则返回true，否则返回false。 |'
- en: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | For each element in *a*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | 对于*a*中的每个元素，返回字符串中子字符串*sub*所在的最高索引，使得*sub*包含在[*start*, *end*]内。 |'
- en: '| [`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | Like [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind"),
    but raises *ValueError* when the substring *sub* is not found. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | 类似于[`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")，但当未找到子字符串*sub*时引发*ValueError*。
    |'
- en: '| [`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith
    "numpy.char.startswith")(a, prefix[, start, end]) | Returns a boolean array which
    is *True* where the string element in *a* starts with *prefix*, otherwise *False*.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith
    "numpy.char.startswith")(a, prefix[, start, end]) | 返回布尔数组，其中*True*表示*a*中的字符串元素以*prefix*开头，否则为*False*。
    |'
- en: '| [`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | Return len(a) element-wise. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | 返回逐元素的len(a)。 |'
- en: Convenience class
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 便捷类
- en: '| [`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"). |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | 创建一个[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")。
    |'
- en: '| [`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | Convert the input to a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"), copying the data only if necessary. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | 将输入转换为[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray")，只在必要时复制数据。 |'
- en: '| [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | Provides a convenient view on arrays of string and unicode values. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | 提供对字符串和unicode值数组的便捷视图。 |'
- en: String operations
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串操作
- en: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | Return element-wise string concatenation for two arrays of str or unicode. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| [`add`](generated/numpy.char.add.html#numpy.char.add "numpy.char.add")(x1, x2)
    | 返回两个str或unicode数组的逐元素字符串连接。 |'
- en: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | Return (a * i), that is string multiple concatenation, element-wise. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| [`multiply`](generated/numpy.char.multiply.html#numpy.char.multiply "numpy.char.multiply")(a, i)
    | 返回(a * i)，即字符串多次连接，逐元素处理。 |'
- en: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | Return (a % i), that is pre-Python 2.6 string formatting (interpolation), element-wise
    for a pair of array_likes of str or unicode. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`mod`](generated/numpy.char.mod.html#numpy.char.mod "numpy.char.mod")(a, values)
    | 为一对str或unicode的数组对返回(a % i)，即Python 2.6之前的字符串格式化（插值），逐元素处理。 |'
- en: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | Return a copy of *a* with only the first character
    of each element capitalized. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`capitalize`](generated/numpy.char.capitalize.html#numpy.char.capitalize
    "numpy.char.capitalize")(a) | 仅将每个元素的第一个字符大写后返回*a*的副本。 |'
- en: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | Return a copy of *a* with its elements centered in a string of length *width*.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`center`](generated/numpy.char.center.html#numpy.char.center "numpy.char.center")(a, width[, fillchar])
    | 返回在长度为*width*的字符串中，*a*的元素居中的副本。 |'
- en: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | Calls `bytes.decode` element-wise. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`decode`](generated/numpy.char.decode.html#numpy.char.decode "numpy.char.decode")(a[, encoding, errors])
    | 逐个调用`bytes.decode`。 |'
- en: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | Calls *str.encode* element-wise. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`encode`](generated/numpy.char.encode.html#numpy.char.encode "numpy.char.encode")(a[, encoding, errors])
    | 逐个调用*str.encode*。 |'
- en: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | Return a copy of each string element
    where all tab characters are replaced by one or more spaces. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`expandtabs`](generated/numpy.char.expandtabs.html#numpy.char.expandtabs
    "numpy.char.expandtabs")(a[, tabsize]) | 返回每个字符串元素的副本，其中所有制表符都被一个或多个空格替换。 |'
- en: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | Return a string which is the concatenation of the strings in the sequence *seq*.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [`join`](generated/numpy.char.join.html#numpy.char.join "numpy.char.join")(sep, seq)
    | 返回一个字符串，���中是序列*seq*中字符串的串联。 |'
- en: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | Return an array with the elements of *a* left-justified in a string of length
    *width*. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`ljust`](generated/numpy.char.ljust.html#numpy.char.ljust "numpy.char.ljust")(a, width[, fillchar])
    | 返回一个数组，其中*a*中的元素左对齐在长度为*width*的字符串中。 |'
- en: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | Return an array with the elements converted to lowercase. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`lower`](generated/numpy.char.lower.html#numpy.char.lower "numpy.char.lower")(a)
    | 返回将元素转换为小写的数组。 |'
- en: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | For each element in *a*, return a copy with the leading characters removed.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`lstrip`](generated/numpy.char.lstrip.html#numpy.char.lstrip "numpy.char.lstrip")(a[, chars])
    | 对于*a*中的每个元素，返回删除开头字符的副本。 |'
- en: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | Partition each element in *a* around *sep*. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`partition`](generated/numpy.char.partition.html#numpy.char.partition "numpy.char.partition")(a, sep)
    | 围绕*sep*对*a*中的每个元素进行划分。 |'
- en: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | For each element in *a*, return a copy of the string with all occurrences of
    substring *old* replaced by *new*. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`replace`](generated/numpy.char.replace.html#numpy.char.replace "numpy.char.replace")(a, old, new[, count])
    | 对于*a*中的每个元素，返回所有子字符串*old*替换为*new*的副本。 |'
- en: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | Return an array with the elements of *a* right-justified in a string of length
    *width*. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`rjust`](generated/numpy.char.rjust.html#numpy.char.rjust "numpy.char.rjust")(a, width[, fillchar])
    | 返回一个数组，其中*a*中的元素右对齐在长度为*width*的字符串中。 |'
- en: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | Partition (split) each element around the right-most
    separator. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`rpartition`](generated/numpy.char.rpartition.html#numpy.char.rpartition
    "numpy.char.rpartition")(a, sep) | 围绕最右边的分隔符对每个元素进行划分。 |'
- en: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`rsplit`](generated/numpy.char.rsplit.html#numpy.char.rsplit "numpy.char.rsplit")(a[, sep, maxsplit])
    | 对于*a*中的每个元素，使用*sep*作为分隔符，返回字符串中单词的列表。 |'
- en: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | For each element in *a*, return a copy with the trailing characters removed.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`rstrip`](generated/numpy.char.rstrip.html#numpy.char.rstrip "numpy.char.rstrip")(a[, chars])
    | 对于*a*中的每个元素，返回删除尾随字符的副本。 |'
- en: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | For each element in *a*, return a list of the words in the string, using *sep*
    as the delimiter string. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`split`](generated/numpy.char.split.html#numpy.char.split "numpy.char.split")(a[, sep, maxsplit])
    | 对于*a*中的每个元素，使用*sep*作为分隔符，返回字符串中单词的列表。 |'
- en: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | For each element in *a*, return a list
    of the lines in the element, breaking at line boundaries. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`splitlines`](generated/numpy.char.splitlines.html#numpy.char.splitlines
    "numpy.char.splitlines")(a[, keepends]) | 对于*a*中的每个元素，返回元素中的行列表，在行边界处断开。'
- en: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | For each element in *a*, return a copy with the leading and trailing characters
    removed. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`strip`](generated/numpy.char.strip.html#numpy.char.strip "numpy.char.strip")(a[, chars])
    | 对于*a*中的每个元素，返回一个删除了前导和尾随字符的副本。'
- en: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | Return element-wise a copy of the string with uppercase characters converted
    to lowercase and vice versa. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`swapcase`](generated/numpy.char.swapcase.html#numpy.char.swapcase "numpy.char.swapcase")(a)
    | 返回一个字符串的副本，其中大写字符转换为小写，反之亦然。'
- en: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | Return element-wise title cased version of string or unicode. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`title`](generated/numpy.char.title.html#numpy.char.title "numpy.char.title")(a)
    | 返回元素主题式大小写版本的字符串或Unicode。'
- en: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | For each element in *a*, return a copy of the string where all characters occurring
    in the optional argument *deletechars* are removed, and the remaining characters
    have been mapped through the given translation table. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`translate`](generated/numpy.char.translate.html#numpy.char.translate "numpy.char.translate")(a, table[, deletechars])
    | 对于*a*中的每个元素，返回一个字符串的副本，在这个副本中，所有出现在可选参数*deletechars*中的字符都被删除，其余字符通过给定的翻译表进行映射。'
- en: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | Return an array with the elements converted to uppercase. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [`upper`](generated/numpy.char.upper.html#numpy.char.upper "numpy.char.upper")(a)
    | 返回一个元素转换为大写的数组。'
- en: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | Return the numeric string left-filled with zeros |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [`zfill`](generated/numpy.char.zfill.html#numpy.char.zfill "numpy.char.zfill")(a, width)
    | 返回以零填充的数值字符串'
- en: Comparison
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: Unlike the standard numpy comparison operators, the ones in the *char* module
    strip trailing whitespace characters before performing the comparison.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准numpy比较运算符不同，*char*模块中的比较运算符在执行比较之前会去除尾随的空白字符。
- en: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | Return (x1 == x2) element-wise. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`equal`](generated/numpy.char.equal.html#numpy.char.equal "numpy.char.equal")(x1, x2)
    | 返回(x1 == x2)的每个元素。'
- en: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | Return (x1 != x2) element-wise. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`not_equal`](generated/numpy.char.not_equal.html#numpy.char.not_equal "numpy.char.not_equal")(x1, x2)
    | 返回(x1 != x2)的每个元素。'
- en: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | Return (x1 >= x2) element-wise. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`greater_equal`](generated/numpy.char.greater_equal.html#numpy.char.greater_equal
    "numpy.char.greater_equal")(x1, x2) | 返回(x1 >= x2)的每个元素。'
- en: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | Return (x1 <= x2) element-wise. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`less_equal`](generated/numpy.char.less_equal.html#numpy.char.less_equal
    "numpy.char.less_equal")(x1, x2) | 返回(x1 <= x2)的每个元素。'
- en: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | Return (x1 > x2) element-wise. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`greater`](generated/numpy.char.greater.html#numpy.char.greater "numpy.char.greater")(x1, x2)
    | 返回(x1 > x2)的每个元素。'
- en: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | Return (x1 < x2) element-wise. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| [`less`](generated/numpy.char.less.html#numpy.char.less "numpy.char.less")(x1, x2)
    | 返回(x1 < x2)的每个元素。'
- en: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | Performs element-wise
    comparison of two string arrays using the comparison operator specified by *cmp_op*.
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| [`compare_chararrays`](generated/numpy.char.compare_chararrays.html#numpy.char.compare_chararrays
    "numpy.char.compare_chararrays")(a1, a2, cmp, rstrip) | 使用*cmp_op*指定的比较运算符，对两个字符串数组进行逐元素比较。'
- en: String information
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串信息
- en: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | Returns an array with the number of non-overlapping occurrences of substring
    *sub* in the range [*start*, *end*]. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`count`](generated/numpy.char.count.html#numpy.char.count "numpy.char.count")(a, sub[, start, end])
    | 返回一个数组，其中包含范围[*start*, *end*]内子字符串*sub*的非重叠出现次数。'
- en: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | Returns a boolean array which is *True* where the string element in *a* ends
    with *suffix*, otherwise *False*. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`endswith`](generated/numpy.char.endswith.html#numpy.char.endswith "numpy.char.endswith")(a, suffix[, start, end])
    | 返回一个布尔数组，其中 *True* 表示 *a* 中的字符串元素以 *suffix* 结尾，否则为 *False*。 |'
- en: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | For each element, return the lowest index in the string where substring *sub*
    is found. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")(a, sub[, start, end])
    | 对每个元素，返回子字符串 *sub* 第一次出现的最低索引。 |'
- en: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | Like [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find"),
    but raises *ValueError* when the substring is not found. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`index`](generated/numpy.char.index.html#numpy.char.index "numpy.char.index")(a, sub[, start, end])
    | 类似于 [`find`](generated/numpy.char.find.html#numpy.char.find "numpy.char.find")，但在子字符串未找到时引发
    *ValueError*。 |'
- en: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | Returns true for each element if all characters in the string are alphabetic
    and there is at least one character, false otherwise. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`isalpha`](generated/numpy.char.isalpha.html#numpy.char.isalpha "numpy.char.isalpha")(a)
    | 如果字符串中所有字符都是字母且至少有一个字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | Returns true for each element if all characters in the string are alphanumeric
    and there is at least one character, false otherwise. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`isalnum`](generated/numpy.char.isalnum.html#numpy.char.isalnum "numpy.char.isalnum")(a)
    | 对每个元素，如果字符串中所有字符都是字母数字且至少有一个字符，则返回 true，否则返回 false。 |'
- en: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | For each element, return True if there are only decimal characters in the element.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`isdecimal`](generated/numpy.char.isdecimal.html#numpy.char.isdecimal "numpy.char.isdecimal")(a)
    | 对每个元素，如果元素中只��十进制字符，则返回 True。 |'
- en: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | Returns true for each element if all characters in the string are digits and
    there is at least one character, false otherwise. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`isdigit`](generated/numpy.char.isdigit.html#numpy.char.isdigit "numpy.char.isdigit")(a)
    | 对每个元素，如果字符串中所有字符都是数字且至少有一个字符，则返回 true，否则返回 false。 |'
- en: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | Returns true for each element if all cased characters in the string are lowercase
    and there is at least one cased character, false otherwise. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`islower`](generated/numpy.char.islower.html#numpy.char.islower "numpy.char.islower")(a)
    | 如果字符串中所有大小写字符都是小写且至少有一个大小写字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | For each element, return True if there are only numeric characters in the element.
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`isnumeric`](generated/numpy.char.isnumeric.html#numpy.char.isnumeric "numpy.char.isnumeric")(a)
    | 对每个元素，如果元素中只有数字字符，则返回 True。 |'
- en: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | Returns true for each element if there are only whitespace characters in the
    string and there is at least one character, false otherwise. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`isspace`](generated/numpy.char.isspace.html#numpy.char.isspace "numpy.char.isspace")(a)
    | 对每个元素，如果字符串中只有空格字符且至少有一个字符，则返回 true，否则返回 false。 |'
- en: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | Returns true for each element if the element is a titlecased string and there
    is at least one character, false otherwise. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`istitle`](generated/numpy.char.istitle.html#numpy.char.istitle "numpy.char.istitle")(a)
    | 如果元素是首字母大写且至少有一个字符，则对每个元素返回 true，否则返回 false。 |'
- en: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | Return true for each element if all cased characters in the string are uppercase
    and there is at least one character, false otherwise. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`isupper`](generated/numpy.char.isupper.html#numpy.char.isupper "numpy.char.isupper")(a)
    | 对每个元素，如果字符串中所有大小写字符都是大写且至少有一个大小写字符，则返回 true，否则返回 false。 |'
- en: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | For each element in *a*, return the highest index in the string where substring
    *sub* is found, such that *sub* is contained within [*start*, *end*]. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")(a, sub[, start, end])
    | 对于 *a* 中的每个元素，返回子字符串 *sub* 最后一次出现的最高索引，使得 *sub* 包含在 [*start*, *end*] 中。 |'
- en: '| [`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | Like [`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind"),
    but raises *ValueError* when the substring *sub* is not found. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '[`rindex`](generated/numpy.char.rindex.html#numpy.char.rindex "numpy.char.rindex")(a, sub[, start, end])
    | 类似于[`rfind`](generated/numpy.char.rfind.html#numpy.char.rfind "numpy.char.rfind")，但在子字符串*sub*未找到时引发*ValueError*错误。'
- en: '| [`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith
    "numpy.char.startswith")(a, prefix[, start, end]) | Returns a boolean array which
    is *True* where the string element in *a* starts with *prefix*, otherwise *False*.
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '[`startswith`](generated/numpy.char.startswith.html#numpy.char.startswith "numpy.char.startswith")(a, prefix[, start, end])
    | 返回一个布尔数组，其中字符串元素在*a*中以*prefix*开头为*True*，否则为*False*。'
- en: '| [`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | Return len(a) element-wise. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '[`str_len`](generated/numpy.char.str_len.html#numpy.char.str_len "numpy.char.str_len")(a)
    | 返回元素a的长度。'
- en: Convenience class
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 便利类
- en: '| [`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | Create a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '[`array`](generated/numpy.char.array.html#numpy.char.array "numpy.char.array")(obj[, itemsize, copy, unicode, order])
    | 创建一个[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")。'
- en: '| [`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | Convert the input to a [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray"), copying the data only if necessary. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '[`asarray`](generated/numpy.char.asarray.html#numpy.char.asarray "numpy.char.asarray")(obj[, itemsize, unicode, order])
    | 将输入转换为[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray
    "numpy.char.chararray")，仅在必要时复制数据。'
- en: '| [`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | Provides a convenient view on arrays of string and unicode values. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '[`chararray`](generated/numpy.char.chararray.html#numpy.char.chararray "numpy.char.chararray")(shape[, itemsize, unicode, ...])
    | 为字符串和unicode值的数组提供了便利的视图。'
