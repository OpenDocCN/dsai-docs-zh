- en: Input and output (scipy.io)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/io.html](https://docs.scipy.org/doc/scipy-1.12.0/reference/io.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SciPy has many modules, classes, and functions available to read data from and
    write data to a variety of file formats.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[NumPy IO routines](https://www.numpy.org/devdocs/reference/routines.io.html)'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB® files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`loadmat`](generated/scipy.io.loadmat.html#scipy.io.loadmat "scipy.io.loadmat")(file_name[, mdict, appendmat])
    | Load MATLAB file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`savemat`](generated/scipy.io.savemat.html#scipy.io.savemat "scipy.io.savemat")(file_name, mdict[, appendmat, ...])
    | Save a dictionary of names and arrays into a MATLAB-style .mat file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`whosmat`](generated/scipy.io.whosmat.html#scipy.io.whosmat "scipy.io.whosmat")(file_name[, appendmat])
    | List variables inside a MATLAB file. |'
  prefs: []
  type: TYPE_TB
- en: For low-level MATLAB reading and writing utilities, see [`scipy.io.matlab`](io.matlab.html#module-scipy.io.matlab
    "scipy.io.matlab").
  prefs: []
  type: TYPE_NORMAL
- en: IDL® files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`readsav`](generated/scipy.io.readsav.html#scipy.io.readsav "scipy.io.readsav")(file_name[, idict, python_dict, ...])
    | Read an IDL .sav file. |'
  prefs: []
  type: TYPE_TB
- en: Matrix Market files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`mminfo`](generated/scipy.io.mminfo.html#scipy.io.mminfo "scipy.io.mminfo")(source)
    | Return size and storage parameters from Matrix Market file-like ''source''.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mmread`](generated/scipy.io.mmread.html#scipy.io.mmread "scipy.io.mmread")(source)
    | Reads the contents of a Matrix Market file-like ''source'' into a matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mmwrite`](generated/scipy.io.mmwrite.html#scipy.io.mmwrite "scipy.io.mmwrite")(target, a[, comment, field, ...])
    | Writes the sparse or dense array *a* to Matrix Market file-like *target*. |'
  prefs: []
  type: TYPE_TB
- en: Unformatted Fortran files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`FortranFile`](generated/scipy.io.FortranFile.html#scipy.io.FortranFile
    "scipy.io.FortranFile")(filename[, mode, header_dtype]) | A file object for unformatted
    sequential files from Fortran code. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FortranEOFError`](generated/scipy.io.FortranEOFError.html#scipy.io.FortranEOFError
    "scipy.io.FortranEOFError") | Indicates that the file ended properly. |'
  prefs: []
  type: TYPE_TB
- en: '| [`FortranFormattingError`](generated/scipy.io.FortranFormattingError.html#scipy.io.FortranFormattingError
    "scipy.io.FortranFormattingError") | Indicates that the file ended mid-record.
    |'
  prefs: []
  type: TYPE_TB
- en: Netcdf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`netcdf_file`](generated/scipy.io.netcdf_file.html#scipy.io.netcdf_file
    "scipy.io.netcdf_file")(filename[, mode, mmap, version, ...]) | A file object
    for NetCDF data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`netcdf_variable`](generated/scipy.io.netcdf_variable.html#scipy.io.netcdf_variable
    "scipy.io.netcdf_variable")(data, typecode, size, shape, ...) | A data object
    for netcdf files. |'
  prefs: []
  type: TYPE_TB
- en: Harwell-Boeing files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`hb_read`](generated/scipy.io.hb_read.html#scipy.io.hb_read "scipy.io.hb_read")(path_or_open_file)
    | Read HB-format file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`hb_write`](generated/scipy.io.hb_write.html#scipy.io.hb_write "scipy.io.hb_write")(path_or_open_file, m[, hb_info])
    | Write HB-format file. |'
  prefs: []
  type: TYPE_TB
- en: '## Wav sound files ([`scipy.io.wavfile`](#module-scipy.io.wavfile "scipy.io.wavfile"))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`read`](generated/scipy.io.wavfile.read.html#scipy.io.wavfile.read "scipy.io.wavfile.read")(filename[, mmap])
    | Open a WAV file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write`](generated/scipy.io.wavfile.write.html#scipy.io.wavfile.write "scipy.io.wavfile.write")(filename, rate, data)
    | Write a NumPy array as a WAV file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`WavFileWarning`](generated/scipy.io.wavfile.WavFileWarning.html#scipy.io.wavfile.WavFileWarning
    "scipy.io.wavfile.WavFileWarning") |  |  ## Arff files ([`scipy.io.arff`](#module-scipy.io.arff
    "scipy.io.arff"))'
  prefs: []
  type: TYPE_NORMAL
- en: '| [`loadarff`](generated/scipy.io.arff.loadarff.html#scipy.io.arff.loadarff
    "scipy.io.arff.loadarff")(f) | Read an arff file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`MetaData`](generated/scipy.io.arff.MetaData.html#scipy.io.arff.MetaData
    "scipy.io.arff.MetaData")(rel, attr) | Small container to keep useful information
    on a ARFF dataset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ArffError`](generated/scipy.io.arff.ArffError.html#scipy.io.arff.ArffError
    "scipy.io.arff.ArffError") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`ParseArffError`](generated/scipy.io.arff.ParseArffError.html#scipy.io.arff.ParseArffError
    "scipy.io.arff.ParseArffError") |  |'
  prefs: []
  type: TYPE_TB
