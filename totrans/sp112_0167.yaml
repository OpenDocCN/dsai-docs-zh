- en: scipy.interpolate.PchipInterpolator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy.interpolate.PchipInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.PchipInterpolator.html#scipy.interpolate.PchipInterpolator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: PCHIP 1-D monotonic cubic interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: '`x` and `y` are arrays of values used to approximate some function f, with
    `y = f(x)`. The interpolant uses monotonic cubic splines to find the value of
    new points. (PCHIP stands for Piecewise Cubic Hermite Interpolating Polynomial).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray, shape (npoints, )'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D array of monotonically increasing real values. `x` cannot include duplicate
    values (otherwise f is overspecified)
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray, shape (…, npoints, …)'
  prefs: []
  type: TYPE_NORMAL
- en: A N-D array of real values. `y`’s length along the interpolation axis must be
    equal to the length of `x`. Use the `axis` parameter to select the interpolation
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis in the `y` array corresponding to the x-coordinate values. Defaults to
    `axis=0`.
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to extrapolate to out-of-bounds points based on first and last intervals,
    or to return NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`CubicHermiteSpline`](scipy.interpolate.CubicHermiteSpline.html#scipy.interpolate.CubicHermiteSpline
    "scipy.interpolate.CubicHermiteSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise-cubic interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Akima1DInterpolator`](scipy.interpolate.Akima1DInterpolator.html#scipy.interpolate.Akima1DInterpolator
    "scipy.interpolate.Akima1DInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Akima 1D interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`CubicSpline`](scipy.interpolate.CubicSpline.html#scipy.interpolate.CubicSpline
    "scipy.interpolate.CubicSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Cubic spline data interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly "scipy.interpolate.PPoly")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise polynomial in terms of coefficients and breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The interpolator preserves monotonicity in the interpolation data and does not
    overshoot if the data is not smooth.
  prefs: []
  type: TYPE_NORMAL
- en: The first derivatives are guaranteed to be continuous, but the second derivatives
    may jump at \(x_k\).
  prefs: []
  type: TYPE_NORMAL
- en: Determines the derivatives at the points \(x_k\), \(f'_k\), by using PCHIP algorithm
    [[1]](#r3e36c047ec9d-1).
  prefs: []
  type: TYPE_NORMAL
- en: Let \(h_k = x_{k+1} - x_k\), and \(d_k = (y_{k+1} - y_k) / h_k\) are the slopes
    at internal points \(x_k\). If the signs of \(d_k\) and \(d_{k-1}\) are different
    or either of them equals zero, then \(f'_k = 0\). Otherwise, it is given by the
    weighted harmonic mean
  prefs: []
  type: TYPE_NORMAL
- en: \[\frac{w_1 + w_2}{f'_k} = \frac{w_1}{d_{k-1}} + \frac{w_2}{d_k}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(w_1 = 2 h_k + h_{k-1}\) and \(w_2 = h_k + 2 h_{k-1}\).
  prefs: []
  type: TYPE_NORMAL
- en: The end slopes are set using a one-sided scheme [[2]](#r3e36c047ec9d-2).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: F. N. Fritsch and J. Butland, A method for constructing local monotone piecewise
    cubic interpolants, SIAM J. Sci. Comput., 5(2), 300-304 (1984). [DOI:10.1137/0905021](https://doi.org/10.1137/0905021).
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: see, e.g., C. Moler, Numerical Computing with Matlab, 2004. [DOI:10.1137/1.9780898717952](https://doi.org/10.1137/1.9780898717952)
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**'
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**'
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.PchipInterpolator.__call__.html#scipy.interpolate.PchipInterpolator.__call__
    "scipy.interpolate.PchipInterpolator.__call__")(x[, nu, extrapolate]) | Evaluate
    the piecewise polynomial or its derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.PchipInterpolator.derivative.html#scipy.interpolate.PchipInterpolator.derivative
    "scipy.interpolate.PchipInterpolator.derivative")([nu]) | Construct a new piecewise
    polynomial representing the derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.PchipInterpolator.antiderivative.html#scipy.interpolate.PchipInterpolator.antiderivative
    "scipy.interpolate.PchipInterpolator.antiderivative")([nu]) | Construct a new
    piecewise polynomial representing the antiderivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots`](scipy.interpolate.PchipInterpolator.roots.html#scipy.interpolate.PchipInterpolator.roots
    "scipy.interpolate.PchipInterpolator.roots")([discontinuity, extrapolate]) | Find
    real roots of the piecewise polynomial. |'
  prefs: []
  type: TYPE_TB
