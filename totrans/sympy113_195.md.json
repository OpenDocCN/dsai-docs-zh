["```py\nclass sympy.physics.mechanics.actuator.ActuatorBase\n```", "```py\nabstract to_loads()\n```", "```py\nclass sympy.physics.mechanics.actuator.DuffingSpring(linear_stiffness, nonlinear_stiffness, pathway, equilibrium_length=0)\n```", "```py\nproperty force\n```", "```py\nclass sympy.physics.mechanics.actuator.ForceActuator(force, pathway)\n```", "```py\nP           Q\no<--- F --->o\n|           |\n|<--l(t)--->| \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (ForceActuator, LinearPathway,\n...     Point, ReferenceFrame)\n>>> from sympy.physics.vector import dynamicsymbols\n>>> N = ReferenceFrame('N')\n>>> q = dynamicsymbols('q')\n>>> force = symbols('F')\n>>> pA, pB = Point('pA'), Point('pB')\n>>> pA.set_vel(N, 0)\n>>> pB.set_pos(pA, q*N.x)\n>>> pB.pos_from(pA)\nq(t)*N.x\n>>> linear_pathway = LinearPathway(pA, pB)\n>>> actuator = ForceActuator(force, linear_pathway)\n>>> actuator\nForceActuator(F, LinearPathway(pA, pB)) \n```", "```py\nproperty force\n```", "```py\nproperty pathway\n```", "```py\nto_loads()\n```", "```py\n>>> from sympy.physics.mechanics import (LinearPathway, Point,\n...     ReferenceFrame)\n>>> from sympy.physics.vector import dynamicsymbols\n>>> q = dynamicsymbols('q')\n>>> N = ReferenceFrame('N')\n>>> pA, pB = Point('pA'), Point('pB')\n>>> pB.set_pos(pA, q*N.x)\n>>> pathway = LinearPathway(pA, pB) \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import ForceActuator\n>>> stiffness = symbols('k')\n>>> spring_force = -stiffness*pathway.length\n>>> spring = ForceActuator(spring_force, pathway) \n```", "```py\n>>> spring.to_loads()\n[(pA, k*q(t)*N.x), (pB, - k*q(t)*N.x)] \n```", "```py\n>>> damping_coefficient = symbols('c')\n>>> damping_force = -damping_coefficient*pathway.extension_velocity\n>>> damper = ForceActuator(damping_force, pathway) \n```", "```py\n>>> damper.to_loads()\n[(pA, c*Derivative(q(t), t)*N.x), (pB, - c*Derivative(q(t), t)*N.x)] \n```", "```py\nclass sympy.physics.mechanics.actuator.LinearDamper(damping, pathway)\n```", "```py\nP           Q\no<--- F --->o\n|           |\n|<--l(t)--->| \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (LinearDamper, LinearPathway,\n...     Point, ReferenceFrame)\n>>> from sympy.physics.vector import dynamicsymbols\n>>> N = ReferenceFrame('N')\n>>> q = dynamicsymbols('q')\n>>> damping = symbols('c')\n>>> pA, pB = Point('pA'), Point('pB')\n>>> pA.set_vel(N, 0)\n>>> pB.set_pos(pA, q*N.x)\n>>> pB.pos_from(pA)\nq(t)*N.x\n>>> pB.vel(N)\nDerivative(q(t), t)*N.x\n>>> linear_pathway = LinearPathway(pA, pB)\n>>> damper = LinearDamper(damping, linear_pathway)\n>>> damper\nLinearDamper(c, LinearPathway(pA, pB)) \n```", "```py\n>>> damper.force\n-c*sqrt(q(t)**2)*Derivative(q(t), t)/q(t) \n```", "```py\nproperty damping\n```", "```py\nproperty force\n```", "```py\nclass sympy.physics.mechanics.actuator.LinearSpring(stiffness, pathway, equilibrium_length=0)\n```", "```py\nP           Q\no<--- F --->o\n|           |\n|<--l(t)--->| \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (LinearPathway, LinearSpring,\n...     Point, ReferenceFrame)\n>>> from sympy.physics.vector import dynamicsymbols\n>>> N = ReferenceFrame('N')\n>>> q = dynamicsymbols('q')\n>>> stiffness = symbols('k')\n>>> pA, pB = Point('pA'), Point('pB')\n>>> pA.set_vel(N, 0)\n>>> pB.set_pos(pA, q*N.x)\n>>> pB.pos_from(pA)\nq(t)*N.x\n>>> linear_pathway = LinearPathway(pA, pB)\n>>> spring = LinearSpring(stiffness, linear_pathway)\n>>> spring\nLinearSpring(k, LinearPathway(pA, pB)) \n```", "```py\n>>> spring.force\n-k*sqrt(q(t)**2) \n```", "```py\n>>> l = symbols('l')\n>>> spring = LinearSpring(stiffness, linear_pathway, equilibrium_length=l)\n>>> spring\nLinearSpring(k, LinearPathway(pA, pB), equilibrium_length=l) \n```", "```py\n>>> spring.force\n-k*(-l + sqrt(q(t)**2)) \n```", "```py\nproperty equilibrium_length\n```", "```py\nproperty force\n```", "```py\nproperty stiffness\n```", "```py\nclass sympy.physics.mechanics.actuator.TorqueActuator(torque, axis, target_frame, reaction_frame=None)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (ReferenceFrame, RigidBody,\n...     TorqueActuator)\n>>> N = ReferenceFrame('N')\n>>> A = ReferenceFrame('A')\n>>> torque = symbols('T')\n>>> axis = N.z\n>>> parent = RigidBody('parent', frame=N)\n>>> child = RigidBody('child', frame=A)\n>>> bodies = (child, parent)\n>>> actuator = TorqueActuator(torque, axis, *bodies)\n>>> actuator\nTorqueActuator(T, axis=N.z, target_frame=A, reaction_frame=N) \n```", "```py\nclassmethod at_pin_joint(torque, pin_joint)\n```", "```py\n>>> from sympy.physics.mechanics import (PinJoint, ReferenceFrame,\n...     RigidBody, TorqueActuator)\n>>> N = ReferenceFrame('N')\n>>> A = ReferenceFrame('A')\n>>> parent = RigidBody('parent', frame=N)\n>>> child = RigidBody('child', frame=A)\n>>> pin_joint = PinJoint(\n...     'pin',\n...     parent,\n...     child,\n...     joint_axis=N.z,\n... ) \n```", "```py\n>>> from sympy import symbols\n>>> torque = symbols('T') \n```", "```py\n>>> actuator = TorqueActuator.at_pin_joint(torque, pin_joint)\n>>> actuator\nTorqueActuator(T, axis=N.z, target_frame=A, reaction_frame=N) \n```", "```py\nproperty axis\n```", "```py\nproperty reaction_frame\n```", "```py\nproperty target_frame\n```", "```py\nto_loads()\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (PinJoint, ReferenceFrame,\n...     RigidBody, TorqueActuator)\n>>> torque = symbols('T')\n>>> N = ReferenceFrame('N')\n>>> A = ReferenceFrame('A')\n>>> parent = RigidBody('parent', frame=N)\n>>> child = RigidBody('child', frame=A)\n>>> pin_joint = PinJoint(\n...     'pin',\n...     parent,\n...     child,\n...     joint_axis=N.z,\n... )\n>>> actuator = TorqueActuator.at_pin_joint(torque, pin_joint) \n```", "```py\n>>> actuator.to_loads()\n[(A, T*N.z), (N, - T*N.z)] \n```", "```py\n>>> actuator = TorqueActuator(torque, N.z, N)\n>>> actuator.to_loads()\n[(N, T*N.z)] \n```", "```py\nproperty torque\n```"]