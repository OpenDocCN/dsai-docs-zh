- en: scipy.signal.hilbert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.hilbert.html#scipy.signal.hilbert](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.hilbert.html#scipy.signal.hilbert)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the analytic signal, using the Hilbert transform.
  prefs: []
  type: TYPE_NORMAL
- en: The transformation is done along the last axis by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Signal data. Must be real.
  prefs: []
  type: TYPE_NORMAL
- en: '**N**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Number of Fourier components. Default: `x.shape[axis]`'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Axis along which to do the transformation. Default: -1.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xa**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Analytic signal of *x*, of each 1-D array along *axis*
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The analytic signal `x_a(t)` of signal `x(t)` is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[x_a = F^{-1}(F(x) 2U) = x + i y\]
  prefs: []
  type: TYPE_NORMAL
- en: where *F* is the Fourier transform, *U* the unit step function, and *y* the
    Hilbert transform of *x*. [[1]](#r37d8c8a6fd16-1)
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the negative half of the frequency spectrum is zeroed out, turning
    the real-valued signal into a complex signal. The Hilbert transformed signal can
    be obtained from `np.imag(hilbert(x))`, and the original signal from `np.real(hilbert(x))`.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Analytic signal”. [https://en.wikipedia.org/wiki/Analytic_signal](https://en.wikipedia.org/wiki/Analytic_signal)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Leon Cohen, “Time-Frequency Analysis”, 1995\. Chapter 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alan V. Oppenheim, Ronald W. Schafer. Discrete-Time Signal Processing, Third
    Edition, 2009\. Chapter 12. ISBN 13: 978-1292-02572-8'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: In this example we use the Hilbert transform to determine the amplitude envelope
    and instantaneous frequency of an amplitude-modulated signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We create a chirp of which the frequency increases from 20 Hz to 100 Hz and
    apply an amplitude modulation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The amplitude envelope is given by magnitude of the analytic signal. The instantaneous
    frequency can be obtained by differentiating the instantaneous phase in respect
    to time. The instantaneous phase corresponds to the phase angle of the analytic
    signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-hilbert-1.png](../Images/37b73fc899e51d1ce7341215909539e7.png)'
  prefs: []
  type: TYPE_IMG
