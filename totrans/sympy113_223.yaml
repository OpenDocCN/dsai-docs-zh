- en: Qubit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/qubit.html](https://docs.sympy.org/latest/modules/physics/quantum/qubit.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Qubits for quantum computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Todo: * Finish implementing measurement logic. This should include POVM. *
    Update docstrings. * Update tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A qubit ket that store integers as binary numbers in qubit values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The differences between this class and `Qubit` are:'
  prefs: []
  type: TYPE_NORMAL
- en: The form of the constructor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The qubit values are printed as their corresponding integer, rather than the
    raw qubit values. The internal storage format of the qubit values in the same
    as `Qubit`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values** : int, tuple'
  prefs: []
  type: TYPE_NORMAL
- en: If a single argument, the integer we want to represent in the qubit values.
    This integer will be represented using the fewest possible number of qubits. If
    a pair of integers and the second value is more than one, the first integer gives
    the integer to represent in binary form and the second integer gives the number
    of qubits to use. List of zeros and ones is also accepted to generate qubit by
    bit pattern.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**nqubits** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The integer that represents the number of qubits. This number should be passed
    with keyword `nqubits=N`. You can use this in order to avoid ambiguity of Qubit-style
    tuple of bits. Please see the example below for more details.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a qubit for the integer 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can also create an `IntQubit` by passing a `Qubit` instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can go back to the regular qubit form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Please note that `IntQubit` also accepts a `Qubit`-style list of bits. So, the
    code below yields qubits 3, not a single bit `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To avoid ambiguity, use `nqubits` parameter. Use of this keyword is recommended
    especially when you provide the values by variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A qubit bra that store integers as binary numbers in qubit values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A multi-qubit ket in the computational (z) basis.
  prefs: []
  type: TYPE_NORMAL
- en: We use the normal convention that the least significant qubit is on the right,
    so `|00001>` has a 1 in the least significant qubit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values** : list, str'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit values as a list of ints ([0,0,0,1,1,]) or a string (‘011’).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a qubit in a couple of different ways and look at their attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can flip the value of an individual qubit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can take the dagger of a Qubit to get a bra:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inner products work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A multi-qubit bra in the computational (z) basis.
  prefs: []
  type: TYPE_NORMAL
- en: We use the normal convention that the least significant qubit is on the right,
    so `|00001>` has a 1 in the least significant qubit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values** : list, str'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit values as a list of ints ([0,0,0,1,1,]) or a string (‘011’).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Qubit`](#sympy.physics.quantum.qubit.Qubit "sympy.physics.quantum.qubit.Qubit")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples using qubits
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Works by finding the eigenvectors and eigenvalues of the matrix. We know we
    can decompose rho by doing: sum(EigenVal*|Eigenvect><Eigenvect|)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Convert from the matrix repr. to a sum of Qubit objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**matrix** : Matrix, numpy.matrix, scipy.sparse'
  prefs: []
  type: TYPE_NORMAL
- en: The matrix to build the Qubit representation of. This works with SymPy matrices,
    numpy matrices and scipy.sparse sparse matrices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Represent a state and then go back to its qubit form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Perform an ensemble measurement of all qubits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**qubit** : Qubit, Add'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit to measure. This can be any Qubit or a linear combination of them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format of the intermediate matrices to use. Possible values are (‘sympy’,’numpy’,’scipy.sparse’).
    Currently only ‘sympy’ is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** : list'
  prefs: []
  type: TYPE_NORMAL
- en: A list that consists of primitive states and their probabilities.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Perform a oneshot ensemble measurement on all qubits.
  prefs: []
  type: TYPE_NORMAL
- en: A oneshot measurement is equivalent to performing a measurement on a quantum
    system. This type of measurement does not return the probabilities like an ensemble
    measurement does, but rather returns *one* of the possible resulting states. The
    exact state that is returned is determined by picking a state randomly according
    to the ensemble probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**qubits** : Qubit'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit to measure. This can be any Qubit or a linear combination of them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format of the intermediate matrices to use. Possible values are (‘sympy’,’numpy’,’scipy.sparse’).
    Currently only ‘sympy’ is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** : Qubit'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit that the system collapsed to upon measurement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Perform a partial ensemble measure on the specified qubits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**qubits** : Qubit'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit to measure. This can be any Qubit or a linear combination of them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**bits** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The qubits to measure.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format of the intermediate matrices to use. Possible values are (‘sympy’,’numpy’,’scipy.sparse’).
    Currently only ‘sympy’ is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** : list'
  prefs: []
  type: TYPE_NORMAL
- en: A list that consists of primitive states and their probabilities.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Perform a partial oneshot measurement on the specified qubits.
  prefs: []
  type: TYPE_NORMAL
- en: A oneshot measurement is equivalent to performing a measurement on a quantum
    system. This type of measurement does not return the probabilities like an ensemble
    measurement does, but rather returns *one* of the possible resulting states. The
    exact state that is returned is determined by picking a state randomly according
    to the ensemble probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**qubits** : Qubit'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit to measure. This can be any Qubit or a linear combination of them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**bits** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The qubits to measure.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**format** : str'
  prefs: []
  type: TYPE_NORMAL
- en: The format of the intermediate matrices to use. Possible values are (‘sympy’,’numpy’,’scipy.sparse’).
    Currently only ‘sympy’ is implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**result** : Qubit'
  prefs: []
  type: TYPE_NORMAL
- en: The qubit that the system collapsed to upon measurement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Converts an Add/Mul of Qubit objects into it’s matrix representation
  prefs: []
  type: TYPE_NORMAL
- en: This function is the inverse of `matrix_to_qubit` and is a shorthand for `represent(qubit)`.
  prefs: []
  type: TYPE_NORMAL
