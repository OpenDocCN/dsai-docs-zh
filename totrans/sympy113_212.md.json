["```py\nclass sympy.physics.quantum.hilbert.ComplexSpace(dimension)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.quantum.hilbert import ComplexSpace\n>>> c1 = ComplexSpace(2)\n>>> c1\nC(2)\n>>> c1.dimension\n2 \n```", "```py\n>>> n = symbols('n')\n>>> c2 = ComplexSpace(n)\n>>> c2\nC(n)\n>>> c2.dimension\nn \n```", "```py\nclass sympy.physics.quantum.hilbert.DirectSumHilbertSpace(*args)\n```", "```py\n>>> from sympy.physics.quantum.hilbert import ComplexSpace, FockSpace \n```", "```py\n>>> c = ComplexSpace(2)\n>>> f = FockSpace()\n>>> hs = c+f\n>>> hs\nC(2)+F\n>>> hs.dimension\noo\n>>> list(hs.spaces)\n[C(2), F] \n```", "```py\nclassmethod eval(args)\n```", "```py\nproperty spaces\n```", "```py\nclass sympy.physics.quantum.hilbert.FockSpace\n```", "```py\n>>> from sympy.physics.quantum.hilbert import FockSpace\n>>> hs = FockSpace()\n>>> hs\nF\n>>> hs.dimension\noo \n```", "```py\nclass sympy.physics.quantum.hilbert.HilbertSpace\n```", "```py\n>>> from sympy.physics.quantum.hilbert import HilbertSpace\n>>> hs = HilbertSpace()\n>>> hs\nH \n```", "```py\nproperty dimension\n```", "```py\nclass sympy.physics.quantum.hilbert.L2(interval)\n```", "```py\n>>> from sympy import Interval, oo\n>>> from sympy.physics.quantum.hilbert import L2\n>>> hs = L2(Interval(0,oo))\n>>> hs\nL2(Interval(0, oo))\n>>> hs.dimension\noo\n>>> hs.interval\nInterval(0, oo) \n```", "```py\nclass sympy.physics.quantum.hilbert.TensorPowerHilbertSpace(*args)\n```", "```py\n>>> from sympy.physics.quantum.hilbert import ComplexSpace, FockSpace\n>>> from sympy import symbols \n```", "```py\n>>> n = symbols('n')\n>>> c = ComplexSpace(2)\n>>> hs = c**n\n>>> hs\nC(2)**n\n>>> hs.dimension\n2**n \n```", "```py\n>>> c = ComplexSpace(2)\n>>> c*c\nC(2)**2\n>>> f = FockSpace()\n>>> c*f*f\nC(2)*F**2 \n```", "```py\nclass sympy.physics.quantum.hilbert.TensorProductHilbertSpace(*args)\n```", "```py\n>>> from sympy.physics.quantum.hilbert import ComplexSpace, FockSpace\n>>> from sympy import symbols \n```", "```py\n>>> c = ComplexSpace(2)\n>>> f = FockSpace()\n>>> hs = c*f\n>>> hs\nC(2)*F\n>>> hs.dimension\noo\n>>> hs.spaces\n(C(2), F) \n```", "```py\n>>> c1 = ComplexSpace(2)\n>>> n = symbols('n')\n>>> c2 = ComplexSpace(n)\n>>> hs = c1*c2\n>>> hs\nC(2)*C(n)\n>>> hs.dimension\n2*n \n```", "```py\nclassmethod eval(args)\n```", "```py\nproperty spaces\n```"]