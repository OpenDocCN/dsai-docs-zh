- en: pandas.DataFrame.merge
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.DataFrame.merge
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.merge.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Merge DataFrame or named Series objects with a database-style join.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用数据库风格的连接合并数据框或命名系列对象。
- en: A named Series object is treated as a DataFrame with a single named column.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 命名系列对象被视为具有单个命名列的数据框。
- en: The join is done on columns or indexes. If joining columns on columns, the DataFrame
    indexes *will be ignored*. Otherwise if joining indexes on indexes or indexes
    on a column or columns, the index will be passed on. When performing a cross merge,
    no column specifications to merge on are allowed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 连接是在列或索引上完成的。如果在列上连接列，则数据框索引*将被忽略*。否则，如果在索引上连接索引或在列或列上连接索引，则索引将被传递。执行交叉合并时，不允许对要合并的列进行规范。
- en: Warning
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: If both key columns contain rows where the key is a null value, those rows will
    be matched against each other. This is different from usual SQL join behaviour
    and can lead to unexpected results.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个键列都包含键为 null 值的行，则这些行将与彼此匹配。这与通常的 SQL 连接行为不同，可能导致意外结果。
- en: 'Parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**right**DataFrame or named Series'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**right**数据框或命名系列'
- en: Object to merge with.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并的对象。
- en: '**how**{‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**how**{‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}，默认为‘inner’'
- en: Type of merge to be performed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行的合并类型。
- en: 'left: use only keys from left frame, similar to a SQL left outer join; preserve
    key order.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: left：仅使用左侧数据框的键，类似于 SQL 的左外连接；保留键顺序。
- en: 'right: use only keys from right frame, similar to a SQL right outer join; preserve
    key order.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: right：仅使用右侧数据框的键，类似于 SQL 的右外连接；保留键顺序。
- en: 'outer: use union of keys from both frames, similar to a SQL full outer join;
    sort keys lexicographically.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: outer：使用两个数据框的键的并集，类似于 SQL 的完全外连接；按字典顺序排序键。
- en: 'inner: use intersection of keys from both frames, similar to a SQL inner join;
    preserve the order of the left keys.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: inner：使用两个数据框的键的交集，类似于 SQL 的内连接；保留左侧键的顺序。
- en: 'cross: creates the cartesian product from both frames, preserves the order
    of the left keys.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cross：从两个数据框创建笛卡尔积，保留左侧键的顺序。
- en: '**on**label or list'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**on**标签或列表'
- en: Column or index level names to join on. These must be found in both DataFrames.
    If on is None and not merging on indexes then this defaults to the intersection
    of the columns in both DataFrames.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接的列或索引级别名称。这些必须在两个数据框中找到。如果 on 为 None 并且不是在索引上合并，则默认为两个数据框中列的交集。
- en: '**left_on**label or list, or array-like'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**left_on**标签或列表，或类似数组'
- en: Column or index level names to join on in the left DataFrame. Can also be an
    array or list of arrays of the length of the left DataFrame. These arrays are
    treated as if they are columns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在左侧数据框中连接的列或索引级别名称。也可以是左侧数据框长度的数组或数组列表。这些数组将被视为列。
- en: '**right_on**label or list, or array-like'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**right_on**标签或列表，或类似数组'
- en: Column or index level names to join on in the right DataFrame. Can also be an
    array or list of arrays of the length of the right DataFrame. These arrays are
    treated as if they are columns.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要在右侧数据框中连接的列或索引级别名称。也可以是右侧数据框长度的数组或数组列表。这些数组将被视为列。
- en: '**left_index**bool, default False'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**left_index**布尔值，默认为 False'
- en: Use the index from the left DataFrame as the join key(s). If it is a MultiIndex,
    the number of keys in the other DataFrame (either the index or a number of columns)
    must match the number of levels.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用左侧数据框的索引作为连接键。如果是多重索引，则另一个数据框中的键的数量（可以是索引或多列）必须与级别的数量匹配。
- en: '**right_index**bool, default False'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**right_index**布尔值，默认为 False'
- en: Use the index from the right DataFrame as the join key. Same caveats as left_index.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用右侧数据框的索引作为连接键。与 left_index 一样的注意事项。
- en: '**sort**bool, default False'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**sort**布尔值，默认为 False'
- en: Sort the join keys lexicographically in the result DataFrame. If False, the
    order of the join keys depends on the join type (how keyword).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果数据框中按字典顺序对连接键进行排序。如果为 False，则连接键的顺序取决于连接类型（how 关键字）。
- en: '**suffixes**list-like, default is (“_x”, “_y”)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**suffixes**类似列表，默认为（“_x”，“_y”）'
- en: A length-2 sequence where each element is optionally a string indicating the
    suffix to add to overlapping column names in left and right respectively. Pass
    a value of None instead of a string to indicate that the column name from left
    or right should be left as-is, with no suffix. At least one of the values must
    not be None.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长度为 2 的序列，每个元素都可以是指示左侧和右侧重叠列名称后缀的字符串。将 None 值传递而不是字符串以指示应保留左侧或右侧的列名，不附加后缀。至少一个值必须不是
    None。
- en: '**copy**bool, default True'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**copy** bool，默认为 True'
- en: If False, avoid copy if possible.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 False，则尽可能避免复制。
- en: Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The copy keyword will change behavior in pandas 3.0. [Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    will be enabled by default, which means that all methods with a copy keyword will
    use a lazy copy mechanism to defer the copy and ignore the copy keyword. The copy
    keyword will be removed in a future version of pandas.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 3.0 中，copy 关键字的行为将发生变化。[写时复制](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    将成为默认启用的，这意味着所有带有 copy 关键字的方法将使用惰性复制机制来延迟复制并忽略 copy 关键字。copy 关键字将在 pandas 的将来版本中删除。
- en: You can already get the future behavior and improvements through enabling copy
    on write `pd.options.mode.copy_on_write = True`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过启用写时复制来获得未来的行为和改进 `pd.options.mode.copy_on_write = True`
- en: '**indicator**bool or str, default False'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**indicator** bool 或 str，默认为 False'
- en: If True, adds a column to the output DataFrame called “_merge” with information
    on the source of each row. The column can be given a different name by providing
    a string argument. The column will have a Categorical type with the value of “left_only”
    for observations whose merge key only appears in the left DataFrame, “right_only”
    for observations whose merge key only appears in the right DataFrame, and “both”
    if the observation’s merge key is found in both DataFrames.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则在输出 DataFrame 中添加一个名为 “_merge” 的列，其中包含每行来源的信息。可以通过提供字符串参数给列命名不同的名称。该列将具有分类类型，对于仅在左侧
    DataFrame 中出现合并键的观测，“left_only” 的值；对于仅在右侧 DataFrame 中出现合并键的观测，“right_only” 的值；对于观测的合并键同时在两个
    DataFrame 中出现的情况，“both” 的值。
- en: '**validate**str, optional'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**validate** str，可选'
- en: If specified, checks if merge is of specified type.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定，则检查合并是否为指定类型。
- en: '“one_to_one” or “1:1”: check if merge keys are unique in both left and right
    datasets.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “one_to_one” 或 “1:1”：检查左右数据集中的合并键是否唯一。
- en: '“one_to_many” or “1:m”: check if merge keys are unique in left dataset.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “one_to_many” 或 “1:m”：检查左侧数据集中的合并键是否唯一。
- en: '“many_to_one” or “m:1”: check if merge keys are unique in right dataset.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “many_to_one” 或 “m:1”：检查右侧数据集中的合并键是否唯一。
- en: '“many_to_many” or “m:m”: allowed, but does not result in checks.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “many_to_many” 或 “m:m”：允许，但不进行检查。
- en: 'Returns:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: DataFrame
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame
- en: A DataFrame of the two merged objects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 两个合并对象的 DataFrame。
- en: See also
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`merge_ordered`](pandas.merge_ordered.html#pandas.merge_ordered "pandas.merge_ordered")'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`merge_ordered`](pandas.merge_ordered.html#pandas.merge_ordered "pandas.merge_ordered")'
- en: Merge with optional filling/interpolation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 合并并进行可选填充/插值。
- en: '[`merge_asof`](pandas.merge_asof.html#pandas.merge_asof "pandas.merge_asof")'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`merge_asof`](pandas.merge_asof.html#pandas.merge_asof "pandas.merge_asof")'
- en: Merge on nearest keys.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的键上合并。
- en: '[`DataFrame.join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.join`](pandas.DataFrame.join.html#pandas.DataFrame.join "pandas.DataFrame.join")'
- en: Similar method using indices.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引的类似方法。
- en: Examples
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Merge df1 and df2 on the lkey and rkey columns. The value columns have the default
    suffixes, _x and _y, appended.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 lkey 和 rkey 列上合并 df1 和 df2。值列具有默认后缀 _x 和 _y。
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Merge DataFrames df1 and df2 with specified left and right suffixes appended
    to any overlapping columns.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将指定的左侧和右侧后缀附加到任何重叠列上合并 DataFrame df1 和 df2。
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Merge DataFrames df1 and df2, but raise an exception if the DataFrames have
    any overlapping columns.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 合并 DataFrame df1 和 df2，但如果 DataFrame 有任何重叠列，则引发异常。
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
