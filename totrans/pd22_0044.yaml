- en: Time deltas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/timedeltas.html](https://pandas.pydata.org/docs/user_guide/timedeltas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Timedeltas are differences in times, expressed in difference units, e.g. days,
    hours, minutes, seconds. They can be both positive and negative.
  prefs: []
  type: TYPE_NORMAL
- en: '`Timedelta` is a subclass of `datetime.timedelta`, and behaves in a similar
    manner, but allows compatibility with `np.timedelta64` types as well as a host
    of custom representation, parsing, and attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Parsing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can construct a `Timedelta` scalar through various arguments, including
    [ISO 8601 Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[DateOffsets](timeseries.html#timeseries-offsets) (`Day, Hour, Minute, Second,
    Milli, Micro, Nano`) can also be used in construction.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Further, operations among the scalars yield another scalar `Timedelta`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: to_timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the top-level `pd.to_timedelta`, you can convert a scalar, array, list,
    or Series from a recognized timedelta format / value into a `Timedelta` type.
    It will construct Series if the input is a Series, a scalar if the input is scalar-like,
    otherwise it will output a `TimedeltaIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can parse a single string to a Timedelta:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'or a list/array of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unit` keyword argument specifies the unit of the Timedelta if the input
    is numeric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a string or array of strings is passed as an input then the `unit` keyword
    argument will be ignored. If a string without units is passed then the default
    unit of nanoseconds is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: '### Timedelta limitations'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents `Timedeltas` in nanosecond resolution using 64 bit integers.
    As such, the 64 bit integer limits determine the `Timedelta` limits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]  ## Operations'
  prefs: []
  type: TYPE_NORMAL
- en: You can operate on Series/DataFrames and construct `timedelta64[ns]` Series
    through subtraction operations on `datetime64[ns]` Series, or `Timestamps`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Operations with scalars from a `timedelta64[ns]` series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Series of timedeltas with `NaT` values are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Elements can be set to `NaT` using `np.nan` analogously to datetimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Operands can also appear in a reversed order (a singular object operated with
    a Series):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`min, max` and the corresponding `idxmin, idxmax` operations are supported
    on frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`min, max, idxmin, idxmax` operations are supported on Series as well. A scalar
    result will be a `Timedelta`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can fillna on timedeltas, passing a timedelta to get a particular value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also negate, multiply and use `abs` on `Timedeltas`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]  ## Reductions'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric reduction operation for `timedelta64[ns]` will return `Timedelta` objects.
    As usual `NaT` are skipped during evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]  ## Frequency conversion'
  prefs: []
  type: TYPE_NORMAL
- en: Timedelta Series and `TimedeltaIndex`, and `Timedelta` can be converted to other
    frequencies by astyping to a specific timedelta dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For timedelta64 resolutions other than the supported “s”, “ms”, “us”, “ns”,
    an alternative is to divide by another timedelta object. Note that division by
    the NumPy scalar is true division, while astyping is equivalent of floor division.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Dividing or multiplying a `timedelta64[ns]` Series by an integer or integer
    Series yields another `timedelta64[ns]` dtypes Series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Rounded division (floor-division) of a `timedelta64[ns]` Series by a scalar
    `Timedelta` gives a series of integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The mod (%) and divmod operations are defined for `Timedelta` when operating
    with another timedelta-like or with a numeric argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can access various components of the `Timedelta` or `TimedeltaIndex` directly
    using the attributes `days,seconds,microseconds,nanoseconds`. These are identical
    to the values returned by `datetime.timedelta`, in that, for example, the `.seconds`
    attribute represents the number of seconds >= 0 and < 1 day. These are signed
    according to whether the `Timedelta` is signed.
  prefs: []
  type: TYPE_NORMAL
- en: These operations can also be directly accessed via the `.dt` property of the
    `Series` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the attributes are NOT the displayed values of the `Timedelta`. Use
    `.components` to retrieve the displayed values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a `Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can access the value of the fields for a scalar `Timedelta` directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `.components` property to access a reduced form of the timedelta.
    This returns a `DataFrame` indexed similarly to the `Series`. These are the *displayed*
    values of the `Timedelta`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can convert a `Timedelta` to an [ISO 8601 Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    string with the `.isoformat` method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '## TimedeltaIndex'
  prefs: []
  type: TYPE_NORMAL
- en: To generate an index with time delta, you can use either the [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") or the [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Using `TimedeltaIndex` you can pass string-like, `Timedelta`, `timedelta`, or
    `np.timedelta64` objects. Passing `np.nan/pd.NaT/nat` will represent missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The string ‘infer’ can be passed in order to set the frequency of the index
    as the inferred frequency upon creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Generating ranges of time deltas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), you can construct regular ranges of a `TimedeltaIndex` using
    [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"). The default frequency for `timedelta_range` is calendar
    day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Various combinations of `start`, `end`, and `periods` can be used with `timedelta_range`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `freq` parameter can passed a variety of [frequency aliases](timeseries.html#timeseries-offset-aliases):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying `start`, `end`, and `periods` will generate a range of evenly spaced
    timedeltas from `start` to `end` inclusively, with `periods` number of elements
    in the resulting `TimedeltaIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Using the TimedeltaIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to other of the datetime-like indices, `DatetimeIndex` and `PeriodIndex`,
    you can use `TimedeltaIndex` as the index of pandas objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Selections work similarly, with coercion on string-likes and slices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore you can use partial string selection and the range will be inferred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, the combination of `TimedeltaIndex` with `DatetimeIndex` allow certain
    combination operations that are NaT preserving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Conversions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to frequency conversion on a `Series` above, you can convert these
    indices to yield another Index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Scalars type ops work as well. These can potentially return a *different* type
    of index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]  ## Resampling'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to [timeseries resampling](timeseries.html#timeseries-resampling), we
    can resample with a `TimedeltaIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Parsing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can construct a `Timedelta` scalar through various arguments, including
    [ISO 8601 Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[DateOffsets](timeseries.html#timeseries-offsets) (`Day, Hour, Minute, Second,
    Milli, Micro, Nano`) can also be used in construction.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Further, operations among the scalars yield another scalar `Timedelta`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: to_timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the top-level `pd.to_timedelta`, you can convert a scalar, array, list,
    or Series from a recognized timedelta format / value into a `Timedelta` type.
    It will construct Series if the input is a Series, a scalar if the input is scalar-like,
    otherwise it will output a `TimedeltaIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can parse a single string to a Timedelta:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'or a list/array of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unit` keyword argument specifies the unit of the Timedelta if the input
    is numeric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a string or array of strings is passed as an input then the `unit` keyword
    argument will be ignored. If a string without units is passed then the default
    unit of nanoseconds is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: '### Timedelta limitations'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents `Timedeltas` in nanosecond resolution using 64 bit integers.
    As such, the 64 bit integer limits determine the `Timedelta` limits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: to_timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the top-level `pd.to_timedelta`, you can convert a scalar, array, list,
    or Series from a recognized timedelta format / value into a `Timedelta` type.
    It will construct Series if the input is a Series, a scalar if the input is scalar-like,
    otherwise it will output a `TimedeltaIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can parse a single string to a Timedelta:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'or a list/array of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `unit` keyword argument specifies the unit of the Timedelta if the input
    is numeric:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If a string or array of strings is passed as an input then the `unit` keyword
    argument will be ignored. If a string without units is passed then the default
    unit of nanoseconds is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: '### Timedelta limitations'
  prefs: []
  type: TYPE_NORMAL
- en: pandas represents `Timedeltas` in nanosecond resolution using 64 bit integers.
    As such, the 64 bit integer limits determine the `Timedelta` limits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '## Operations'
  prefs: []
  type: TYPE_NORMAL
- en: You can operate on Series/DataFrames and construct `timedelta64[ns]` Series
    through subtraction operations on `datetime64[ns]` Series, or `Timestamps`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Operations with scalars from a `timedelta64[ns]` series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Series of timedeltas with `NaT` values are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Elements can be set to `NaT` using `np.nan` analogously to datetimes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Operands can also appear in a reversed order (a singular object operated with
    a Series):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '`min, max` and the corresponding `idxmin, idxmax` operations are supported
    on frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '`min, max, idxmin, idxmax` operations are supported on Series as well. A scalar
    result will be a `Timedelta`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You can fillna on timedeltas, passing a timedelta to get a particular value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also negate, multiply and use `abs` on `Timedeltas`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '## Reductions'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric reduction operation for `timedelta64[ns]` will return `Timedelta` objects.
    As usual `NaT` are skipped during evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '## Frequency conversion'
  prefs: []
  type: TYPE_NORMAL
- en: Timedelta Series and `TimedeltaIndex`, and `Timedelta` can be converted to other
    frequencies by astyping to a specific timedelta dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: For timedelta64 resolutions other than the supported “s”, “ms”, “us”, “ns”,
    an alternative is to divide by another timedelta object. Note that division by
    the NumPy scalar is true division, while astyping is equivalent of floor division.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Dividing or multiplying a `timedelta64[ns]` Series by an integer or integer
    Series yields another `timedelta64[ns]` dtypes Series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Rounded division (floor-division) of a `timedelta64[ns]` Series by a scalar
    `Timedelta` gives a series of integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The mod (%) and divmod operations are defined for `Timedelta` when operating
    with another timedelta-like or with a numeric argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can access various components of the `Timedelta` or `TimedeltaIndex` directly
    using the attributes `days,seconds,microseconds,nanoseconds`. These are identical
    to the values returned by `datetime.timedelta`, in that, for example, the `.seconds`
    attribute represents the number of seconds >= 0 and < 1 day. These are signed
    according to whether the `Timedelta` is signed.
  prefs: []
  type: TYPE_NORMAL
- en: These operations can also be directly accessed via the `.dt` property of the
    `Series` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the attributes are NOT the displayed values of the `Timedelta`. Use
    `.components` to retrieve the displayed values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a `Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: You can access the value of the fields for a scalar `Timedelta` directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `.components` property to access a reduced form of the timedelta.
    This returns a `DataFrame` indexed similarly to the `Series`. These are the *displayed*
    values of the `Timedelta`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: You can convert a `Timedelta` to an [ISO 8601 Duration](https://en.wikipedia.org/wiki/ISO_8601#Durations)
    string with the `.isoformat` method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '## TimedeltaIndex'
  prefs: []
  type: TYPE_NORMAL
- en: To generate an index with time delta, you can use either the [`TimedeltaIndex`](../reference/api/pandas.TimedeltaIndex.html#pandas.TimedeltaIndex
    "pandas.TimedeltaIndex") or the [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: Using `TimedeltaIndex` you can pass string-like, `Timedelta`, `timedelta`, or
    `np.timedelta64` objects. Passing `np.nan/pd.NaT/nat` will represent missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The string ‘infer’ can be passed in order to set the frequency of the index
    as the inferred frequency upon creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Generating ranges of time deltas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), you can construct regular ranges of a `TimedeltaIndex` using
    [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"). The default frequency for `timedelta_range` is calendar
    day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Various combinations of `start`, `end`, and `periods` can be used with `timedelta_range`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `freq` parameter can passed a variety of [frequency aliases](timeseries.html#timeseries-offset-aliases):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying `start`, `end`, and `periods` will generate a range of evenly spaced
    timedeltas from `start` to `end` inclusively, with `periods` number of elements
    in the resulting `TimedeltaIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Using the TimedeltaIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to other of the datetime-like indices, `DatetimeIndex` and `PeriodIndex`,
    you can use `TimedeltaIndex` as the index of pandas objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Selections work similarly, with coercion on string-likes and slices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore you can use partial string selection and the range will be inferred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, the combination of `TimedeltaIndex` with `DatetimeIndex` allow certain
    combination operations that are NaT preserving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Conversions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to frequency conversion on a `Series` above, you can convert these
    indices to yield another Index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Scalars type ops work as well. These can potentially return a *different* type
    of index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Generating ranges of time deltas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range"), you can construct regular ranges of a `TimedeltaIndex` using
    [`timedelta_range()`](../reference/api/pandas.timedelta_range.html#pandas.timedelta_range
    "pandas.timedelta_range"). The default frequency for `timedelta_range` is calendar
    day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Various combinations of `start`, `end`, and `periods` can be used with `timedelta_range`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The `freq` parameter can passed a variety of [frequency aliases](timeseries.html#timeseries-offset-aliases):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying `start`, `end`, and `periods` will generate a range of evenly spaced
    timedeltas from `start` to `end` inclusively, with `periods` number of elements
    in the resulting `TimedeltaIndex`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Using the TimedeltaIndex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to other of the datetime-like indices, `DatetimeIndex` and `PeriodIndex`,
    you can use `TimedeltaIndex` as the index of pandas objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Selections work similarly, with coercion on string-likes and slices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore you can use partial string selection and the range will be inferred:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, the combination of `TimedeltaIndex` with `DatetimeIndex` allow certain
    combination operations that are NaT preserving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Conversions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly to frequency conversion on a `Series` above, you can convert these
    indices to yield another Index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Scalars type ops work as well. These can potentially return a *different* type
    of index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '## Resampling'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to [timeseries resampling](timeseries.html#timeseries-resampling), we
    can resample with a `TimedeltaIndex`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
