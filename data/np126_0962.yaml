- en: Multithreaded Generation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程生成
- en: 原文：[https://numpy.org/doc/1.26/reference/random/multithreading.html](https://numpy.org/doc/1.26/reference/random/multithreading.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/multithreading.html](https://numpy.org/doc/1.26/reference/random/multithreading.html)
- en: The four core distributions ([`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random"), [`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal"), [`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential"), and [`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")) all allow existing arrays to be filled
    using the `out` keyword argument. Existing arrays need to be contiguous and well-behaved
    (writable and aligned). Under normal circumstances, arrays created using the common
    constructors such as [`numpy.empty`](../generated/numpy.empty.html#numpy.empty
    "numpy.empty") will satisfy these requirements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 四个核心分布（[`random`](generated/numpy.random.Generator.random.html#numpy.random.Generator.random
    "numpy.random.Generator.random")，[`standard_normal`](generated/numpy.random.Generator.standard_normal.html#numpy.random.Generator.standard_normal
    "numpy.random.Generator.standard_normal")，[`standard_exponential`](generated/numpy.random.Generator.standard_exponential.html#numpy.random.Generator.standard_exponential
    "numpy.random.Generator.standard_exponential")和[`standard_gamma`](generated/numpy.random.Generator.standard_gamma.html#numpy.random.Generator.standard_gamma
    "numpy.random.Generator.standard_gamma")）都允许使用`out`这个关键字参数来填充现有的数组。现有的数组需要是连续的和良好的（可写入和对齐）。在正常情况下，使用常见构造函数创建的数组，比如[`numpy.empty`](../generated/numpy.empty.html#numpy.empty
    "numpy.empty")，都会满足这些要求。
- en: This example makes use of Python 3 [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
    "(in Python v3.11)") to fill an array using multiple threads. Threads are long-lived
    so that repeated calls do not require any additional overheads from thread creation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用了Python 3中的[`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
    "(在Python v3.11)")来使用多个线程填充一个数组。线程是长寿命的，所以重复调用不需要额外的线程创建开销。
- en: The random numbers generated are reproducible in the sense that the same seed
    will produce the same outputs, given that the number of threads does not change.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的随机数是可复现的，也就是说相同的种子会产生相同的输出，前提是线程的数量不变。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The multithreaded random number generator can be used to fill an array. The
    `values` attributes shows the zero-value before the fill and the random value
    after.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程随机数发生器可以用来填充一个数组。`values`属性显示了填充前的零值和填充后的随机值。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The time required to produce using multiple threads can be compared to the time
    required to generate using a single thread.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 用多个线程生成所需的时间可以与使用单个线程生成所需的时间进行比较。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The single threaded call directly uses the BitGenerator.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 单线程调用直接使用了BitGenerator。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The gains are substantial and the scaling is reasonable even for arrays that
    are only moderately large. The gains are even larger when compared to a call that
    does not use an existing array due to array creation overhead.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 收益可观，即使对于只是适度大的数组，也会有合理的增益。与不使用现有数组进行调用相比，当存在数组创建开销时，收益甚至更大。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that if *threads* is not set by the user, it will be determined by *multiprocessing.cpu_count()*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果*threads*未被用户设置，它将由*multiprocessing.cpu_count()*确定。
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
