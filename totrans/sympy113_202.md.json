["```py\nclass sympy.physics.biomechanics.curve.CharacteristicCurveCollection(tendon_force_length: CharacteristicCurveFunction, tendon_force_length_inverse: CharacteristicCurveFunction, fiber_force_length_passive: CharacteristicCurveFunction, fiber_force_length_passive_inverse: CharacteristicCurveFunction, fiber_force_length_active: CharacteristicCurveFunction, fiber_force_velocity: CharacteristicCurveFunction, fiber_force_velocity_inverse: CharacteristicCurveFunction)\n```", "```py\nclass sympy.physics.biomechanics.curve.CharacteristicCurveFunction\n```", "```py\nclass sympy.physics.biomechanics.curve.FiberForceLengthActiveDeGroote2016(l_M_tilde, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import FiberForceLengthActiveDeGroote2016\n>>> l_M_tilde = Symbol('l_M_tilde')\n>>> fl_M = FiberForceLengthActiveDeGroote2016.with_defaults(l_M_tilde)\n>>> fl_M\nFiberForceLengthActiveDeGroote2016(l_M_tilde, 0.814, 1.06, 0.162, 0.0633,\n0.433, 0.717, -0.0299, 0.2, 0.1, 1.0, 0.354, 0.0) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11 = symbols('c0:12')\n>>> fl_M = FiberForceLengthActiveDeGroote2016(l_M_tilde, c0, c1, c2, c3,\n...     c4, c5, c6, c7, c8, c9, c10, c11)\n>>> fl_M\nFiberForceLengthActiveDeGroote2016(l_M_tilde, c0, c1, c2, c3, c4, c5, c6,\nc7, c8, c9, c10, c11) \n```", "```py\n>>> l_M, l_M_opt = symbols('l_M l_M_opt')\n>>> l_M_tilde = l_M/l_M_opt\n>>> fl_M = FiberForceLengthActiveDeGroote2016.with_defaults(l_M_tilde)\n>>> fl_M\nFiberForceLengthActiveDeGroote2016(l_M/l_M_opt, 0.814, 1.06, 0.162, 0.0633,\n0.433, 0.717, -0.0299, 0.2, 0.1, 1.0, 0.354, 0.0) \n```", "```py\n>>> fl_M.doit(evaluate=False)\n0.814*exp(-19.0519737844841*(l_M/l_M_opt\n- 1.06)**2/(0.390740740740741*l_M/l_M_opt + 1)**2)\n+ 0.433*exp(-12.5*(l_M/l_M_opt - 0.717)**2/(l_M/l_M_opt - 0.1495)**2)\n+ 0.1*exp(-3.98991349867535*(l_M/l_M_opt - 1.0)**2) \n```", "```py\n>>> fl_M.diff(l_M)\n((-0.79798269973507*l_M/l_M_opt\n+ 0.79798269973507)*exp(-3.98991349867535*(l_M/l_M_opt - 1.0)**2)\n+ (10.825*(-l_M/l_M_opt + 0.717)/(l_M/l_M_opt - 0.1495)**2\n+ 10.825*(l_M/l_M_opt - 0.717)**2/(l_M/l_M_opt\n- 0.1495)**3)*exp(-12.5*(l_M/l_M_opt - 0.717)**2/(l_M/l_M_opt - 0.1495)**2)\n+ (31.0166133211401*(-l_M/l_M_opt + 1.06)/(0.390740740740741*l_M/l_M_opt\n+ 1)**2 + 13.6174190361677*(0.943396226415094*l_M/l_M_opt\n- 1)**2/(0.390740740740741*l_M/l_M_opt\n+ 1)**3)*exp(-21.4067977442463*(0.943396226415094*l_M/l_M_opt\n- 1)**2/(0.390740740740741*l_M/l_M_opt + 1)**2))/l_M_opt \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(l_M_tilde, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11)\n```", "```py\nfdiff(argindex=1)\n```", "```py\nclassmethod with_defaults(l_M_tilde)\n```", "```py\nclass sympy.physics.biomechanics.curve.FiberForceLengthPassiveDeGroote2016(l_M_tilde, c0, c1)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import FiberForceLengthPassiveDeGroote2016\n>>> l_M_tilde = Symbol('l_M_tilde')\n>>> fl_M = FiberForceLengthPassiveDeGroote2016.with_defaults(l_M_tilde)\n>>> fl_M\nFiberForceLengthPassiveDeGroote2016(l_M_tilde, 0.6, 4.0) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1 = symbols('c0 c1')\n>>> fl_M = FiberForceLengthPassiveDeGroote2016(l_M_tilde, c0, c1)\n>>> fl_M\nFiberForceLengthPassiveDeGroote2016(l_M_tilde, c0, c1) \n```", "```py\n>>> l_M, l_M_opt = symbols('l_M l_M_opt')\n>>> l_M_tilde = l_M/l_M_opt\n>>> fl_M = FiberForceLengthPassiveDeGroote2016.with_defaults(l_M_tilde)\n>>> fl_M\nFiberForceLengthPassiveDeGroote2016(l_M/l_M_opt, 0.6, 4.0) \n```", "```py\n>>> fl_M.doit(evaluate=False)\n0.0186573603637741*(-1 + exp(6.66666666666667*(l_M/l_M_opt - 1))) \n```", "```py\n>>> fl_M.diff(l_M)\n0.12438240242516*exp(6.66666666666667*(l_M/l_M_opt - 1))/l_M_opt \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(l_M_tilde, c0, c1)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(l_M_tilde)\n```", "```py\nclass sympy.physics.biomechanics.curve.FiberForceLengthPassiveInverseDeGroote2016(fl_M_pas, c0, c1)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import FiberForceLengthPassiveInverseDeGroote2016\n>>> fl_M_pas = Symbol('fl_M_pas')\n>>> l_M_tilde = FiberForceLengthPassiveInverseDeGroote2016.with_defaults(fl_M_pas)\n>>> l_M_tilde\nFiberForceLengthPassiveInverseDeGroote2016(fl_M_pas, 0.6, 4.0) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1 = symbols('c0 c1')\n>>> l_M_tilde = FiberForceLengthPassiveInverseDeGroote2016(fl_M_pas, c0, c1)\n>>> l_M_tilde\nFiberForceLengthPassiveInverseDeGroote2016(fl_M_pas, c0, c1) \n```", "```py\n>>> l_M_tilde.doit(evaluate=False)\nc0*log(1 + fl_M_pas*(exp(c1) - 1))/c1 + 1 \n```", "```py\n>>> l_M_tilde.diff(fl_M_pas)\nc0*(exp(c1) - 1)/(c1*(fl_M_pas*(exp(c1) - 1) + 1)) \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(fl_M_pas, c0, c1)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(fl_M_pas)\n```", "```py\nclass sympy.physics.biomechanics.curve.FiberForceVelocityDeGroote2016(v_M_tilde, c0, c1, c2, c3)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import FiberForceVelocityDeGroote2016\n>>> v_M_tilde = Symbol('v_M_tilde')\n>>> fv_M = FiberForceVelocityDeGroote2016.with_defaults(v_M_tilde)\n>>> fv_M\nFiberForceVelocityDeGroote2016(v_M_tilde, -0.318, -8.149, -0.374, 0.886) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1, c2, c3 = symbols('c0 c1 c2 c3')\n>>> fv_M = FiberForceVelocityDeGroote2016(v_M_tilde, c0, c1, c2, c3)\n>>> fv_M\nFiberForceVelocityDeGroote2016(v_M_tilde, c0, c1, c2, c3) \n```", "```py\n>>> v_M, v_M_max = symbols('v_M v_M_max')\n>>> v_M_tilde = v_M/v_M_max\n>>> fv_M = FiberForceVelocityDeGroote2016.with_defaults(v_M_tilde)\n>>> fv_M\nFiberForceVelocityDeGroote2016(v_M/v_M_max, -0.318, -8.149, -0.374, 0.886) \n```", "```py\n>>> fv_M.doit(evaluate=False)\n0.886 - 0.318*log(-8.149*v_M/v_M_max - 0.374 + sqrt(1 + (-8.149*v_M/v_M_max\n- 0.374)**2)) \n```", "```py\n>>> fv_M.diff(v_M)\n2.591382*(1 + (-8.149*v_M/v_M_max - 0.374)**2)**(-1/2)/v_M_max \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(v_M_tilde, c0, c1, c2, c3)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(v_M_tilde)\n```", "```py\nclass sympy.physics.biomechanics.curve.FiberForceVelocityInverseDeGroote2016(fv_M, c0, c1, c2, c3)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import FiberForceVelocityInverseDeGroote2016\n>>> fv_M = Symbol('fv_M')\n>>> v_M_tilde = FiberForceVelocityInverseDeGroote2016.with_defaults(fv_M)\n>>> v_M_tilde\nFiberForceVelocityInverseDeGroote2016(fv_M, -0.318, -8.149, -0.374, 0.886) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1, c2, c3 = symbols('c0 c1 c2 c3')\n>>> v_M_tilde = FiberForceVelocityInverseDeGroote2016(fv_M, c0, c1, c2, c3)\n>>> v_M_tilde\nFiberForceVelocityInverseDeGroote2016(fv_M, c0, c1, c2, c3) \n```", "```py\n>>> v_M_tilde.doit(evaluate=False)\n(-c2 + sinh((-c3 + fv_M)/c0))/c1 \n```", "```py\n>>> v_M_tilde.diff(fv_M)\ncosh((-c3 + fv_M)/c0)/(c0*c1) \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(fv_M, c0, c1, c2, c3)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(fv_M)\n```", "```py\nclass sympy.physics.biomechanics.curve.TendonForceLengthDeGroote2016(l_T_tilde, c0, c1, c2, c3)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import TendonForceLengthDeGroote2016\n>>> l_T_tilde = Symbol('l_T_tilde')\n>>> fl_T = TendonForceLengthDeGroote2016.with_defaults(l_T_tilde)\n>>> fl_T\nTendonForceLengthDeGroote2016(l_T_tilde, 0.2, 0.995, 0.25,\n33.93669377311689) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1, c2, c3 = symbols('c0 c1 c2 c3')\n>>> fl_T = TendonForceLengthDeGroote2016(l_T_tilde, c0, c1, c2, c3)\n>>> fl_T\nTendonForceLengthDeGroote2016(l_T_tilde, c0, c1, c2, c3) \n```", "```py\n>>> l_T, l_T_slack = symbols('l_T l_T_slack')\n>>> l_T_tilde = l_T/l_T_slack\n>>> fl_T = TendonForceLengthDeGroote2016.with_defaults(l_T_tilde)\n>>> fl_T\nTendonForceLengthDeGroote2016(l_T/l_T_slack, 0.2, 0.995, 0.25,\n33.93669377311689) \n```", "```py\n>>> fl_T.doit(evaluate=False)\n-0.25 + 0.2*exp(33.93669377311689*(l_T/l_T_slack - 0.995)) \n```", "```py\n>>> fl_T.diff(l_T)\n6.787338754623378*exp(33.93669377311689*(l_T/l_T_slack - 0.995))/l_T_slack \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(l_T_tilde, c0, c1, c2, c3)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(l_T_tilde)\n```", "```py\nclass sympy.physics.biomechanics.curve.TendonForceLengthInverseDeGroote2016(fl_T, c0, c1, c2, c3)\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy.physics.biomechanics import TendonForceLengthInverseDeGroote2016\n>>> fl_T = Symbol('fl_T')\n>>> l_T_tilde = TendonForceLengthInverseDeGroote2016.with_defaults(fl_T)\n>>> l_T_tilde\nTendonForceLengthInverseDeGroote2016(fl_T, 0.2, 0.995, 0.25,\n33.93669377311689) \n```", "```py\n>>> from sympy import symbols\n>>> c0, c1, c2, c3 = symbols('c0 c1 c2 c3')\n>>> l_T_tilde = TendonForceLengthInverseDeGroote2016(fl_T, c0, c1, c2, c3)\n>>> l_T_tilde\nTendonForceLengthInverseDeGroote2016(fl_T, c0, c1, c2, c3) \n```", "```py\n>>> l_T_tilde.doit(evaluate=False)\nc1 + log((c2 + fl_T)/c0)/c3 \n```", "```py\n>>> l_T_tilde.diff(fl_T)\n1/(c3*(c2 + fl_T)) \n```", "```py\ndoit(deep=True, evaluate=True, **hints)\n```", "```py\nclassmethod eval(fl_T, c0, c1, c2, c3)\n```", "```py\nfdiff(argindex=1)\n```", "```py\ninverse(argindex=1)\n```", "```py\nclassmethod with_defaults(fl_T)\n```"]