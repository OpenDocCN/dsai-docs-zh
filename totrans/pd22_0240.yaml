- en: pandas.DataFrame.query
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.DataFrame.query
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Query the columns of a DataFrame with a boolean expression.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布尔表达式查询DataFrame的列。
- en: 'Parameters:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**expr**str'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**expr**str'
- en: The query string to evaluate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估的查询字符串。
- en: You can refer to variables in the environment by prefixing them with an ‘@’
    character like `@a + b`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在变量前加上‘@’字符来引用环境中的变量，例如`@a + b`。
- en: You can refer to column names that are not valid Python variable names by surrounding
    them in backticks. Thus, column names containing spaces or punctuations (besides
    underscores) or starting with digits must be surrounded by backticks. (For example,
    a column named “Area (cm^2)” would be referenced as ``Area (cm^2)``). Column names
    which are Python keywords (like “list”, “for”, “import”, etc) cannot be used.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过用反引号括起来来引用不是有效Python变量名的列名。因此，包含空格或标点符号（除了下划线）或以数字开头的列名必须用反引号括起来。 （例如，名为“Area（cm^2）”的列将被引用为``Area（cm^2）``）。不能使用Python关键字（如“list”、“for”、“import”等）作为列名。
- en: For example, if one of your columns is called `a a` and you want to sum it with
    `b`, your query should be ``a a` + b`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的列之一称为`a a`，并且您想将其与`b`求和，您的查询应为``a a` + b`。
- en: '**inplace**bool'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**inplace**bool'
- en: Whether to modify the DataFrame rather than creating a new one.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 是否修改DataFrame而不是创建新的DataFrame。
- en: '****kwargs**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '****kwargs**'
- en: See the documentation for [`eval()`](pandas.eval.html#pandas.eval "pandas.eval")
    for complete details on the keyword arguments accepted by [`DataFrame.query()`](#pandas.DataFrame.query
    "pandas.DataFrame.query").
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`DataFrame.query()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")接受的关键字参数的完整详细信息，请参阅[`eval()`](https://pandas.pydata.org/docs/reference/api/pandas.eval.html#pandas.eval
    "pandas.eval")的文档。
- en: 'Returns:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: DataFrame or None
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame或None
- en: DataFrame resulting from the provided query expression or None if `inplace=True`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由提供的查询表达式生成的DataFrame或如果`inplace=True`则为None。
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`eval`](pandas.eval.html#pandas.eval "pandas.eval")'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`eval`](https://pandas.pydata.org/docs/reference/api/pandas.eval.html#pandas.eval
    "pandas.eval")'
- en: Evaluate a string describing operations on DataFrame columns.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 评估描述DataFrame列操作的字符串。
- en: '[`DataFrame.eval`](pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.eval`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval
    "pandas.DataFrame.eval")'
- en: Evaluate a string describing operations on DataFrame columns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 评估描述DataFrame列操作的字符串。
- en: Notes
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The result of the evaluation of this expression is first passed to [`DataFrame.loc`](pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") and if that fails because of a multidimensional key (e.g.,
    a DataFrame) then the result will be passed to `DataFrame.__getitem__()`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该表达式的评估结果首先传递给[`DataFrame.loc`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc")，如果由于多维键（例如DataFrame）而失败，则结果将传递给`DataFrame.__getitem__()`。
- en: This method uses the top-level [`eval()`](pandas.eval.html#pandas.eval "pandas.eval")
    function to evaluate the passed query.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法使用顶层[`eval()`](https://pandas.pydata.org/docs/reference/api/pandas.eval.html#pandas.eval
    "pandas.eval")函数来评估传递的查询。
- en: The [`query()`](#pandas.DataFrame.query "pandas.DataFrame.query") method uses
    a slightly modified Python syntax by default. For example, the `&` and `|` (bitwise)
    operators have the precedence of their boolean cousins, [`and`](https://docs.python.org/3/reference/expressions.html#and
    "(in Python v3.12)") and [`or`](https://docs.python.org/3/reference/expressions.html#or
    "(in Python v3.12)"). This *is* syntactically valid Python, however the semantics
    are different.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`query()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html#pandas.DataFrame.query
    "pandas.DataFrame.query")方法使用略微修改的Python语法。例如，`&`和`|`（按位）运算符具有其布尔表亲[`and`](https://docs.python.org/3/reference/expressions.html#and
    "(在Python v3.12中)")和[`or`](https://docs.python.org/3/reference/expressions.html#or
    "(在Python v3.12中)")的优先级。这*是*在语法上有效的Python，但语义不同。
- en: You can change the semantics of the expression by passing the keyword argument
    `parser='python'`. This enforces the same semantics as evaluation in Python space.
    Likewise, you can pass `engine='python'` to evaluate an expression using Python
    itself as a backend. This is not recommended as it is inefficient compared to
    using `numexpr` as the engine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递关键字参数`parser='python'`可以更改表达式的语义。这强制执行与Python空间中的评估相同的语义。同样，您可以传递`engine='python'`以使用Python本身作为后端来评估表达式。与使用`numexpr`作为引擎相比，这不是推荐的，因为效率低下。
- en: The [`DataFrame.index`](pandas.DataFrame.index.html#pandas.DataFrame.index "pandas.DataFrame.index")
    and [`DataFrame.columns`](pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") attributes of the [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instance are placed in the query namespace by default, which
    allows you to treat both the index and columns of the frame as a column in the
    frame. The identifier `index` is used for the frame index; you can also use the
    name of the index to identify it in a query. Please note that Python keywords
    may not be used as identifiers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.index`](pandas.DataFrame.index.html#pandas.DataFrame.index "pandas.DataFrame.index")
    和 [`DataFrame.columns`](pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") 属性默认放置在 [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") 实例的查询命名空间中，这使您可以将帧的索引和列都视为帧中的列。标识符 `index` 用于帧索引；您还可以使用索引的名称来在查询中标识它。请注意，Python
    关键字不能用作标识符。'
- en: For further details and examples see the `query` documentation in [indexing](../../user_guide/indexing.html#indexing-query).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和示例，请参阅 [索引](../../user_guide/indexing.html#indexing-query) 中的 `query`
    文档。
- en: '*Backtick quoted variables*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*反引号引用的变量*'
- en: Backtick quoted variables are parsed as literal Python code and are converted
    internally to a Python valid identifier. This can lead to the following problems.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 反引号引用的变量被解析为字面的 Python 代码，并在内部转换为 Python 有效的标识符。这可能会导致以下问题。
- en: During parsing a number of disallowed characters inside the backtick quoted
    string are replaced by strings that are allowed as a Python identifier. These
    characters include all operators in Python, the space character, the question
    mark, the exclamation mark, the dollar sign, and the euro sign. For other characters
    that fall outside the ASCII range (U+0001..U+007F) and those that are not further
    specified in PEP 3131, the query parser will raise an error. This excludes whitespace
    different than the space character, but also the hashtag (as it is used for comments)
    and the backtick itself (backtick can also not be escaped).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析过程中，反引号引用的字符串中的一些不允许的字符将被替换为允许作为 Python 标识符的字符串。这些字符包括 Python 中的所有运算符、空格字符、问号、感叹号、美元符号和欧元符号。对于其他超出
    ASCII 范围（U+0001..U+007F）的字符以及在 PEP 3131 中未进一步指定的字符，查询解析器将引发错误。这不包括空格字符不同于空格字符，但也包括井号（因为它用于注释）和反引号本身（反引号也不能被转义）。
- en: In a special case, quotes that make a pair around a backtick can confuse the
    parser. For example, ``it's` > `that's`` will raise an error, as it forms a quoted
    string (`'s > `that'`) with a backtick inside.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在特殊情况下，用引号围绕反引号的情况可能会让解析器混淆。例如，``it's` > `that's`` 会引发错误，因为它形成了一个带有反引号的引号字符串（`'s
    > `that'`）。
- en: See also the Python documentation about lexical analysis ([https://docs.python.org/3/reference/lexical_analysis.html](https://docs.python.org/3/reference/lexical_analysis.html))
    in combination with the source code in `pandas.core.computation.parsing`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以参考 Python 关于词法分析的文档（[https://docs.python.org/3/reference/lexical_analysis.html](https://docs.python.org/3/reference/lexical_analysis.html)），结合
    `pandas.core.computation.parsing` 中的源代码。
- en: Examples
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous expression is equivalent to
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表达式等同于
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For columns with spaces in their name, you can use backtick quoting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列名中带有空格的列，可以使用反引号引用。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous expression is equivalent to
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表达式等同于
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
