- en: scipy.signal.ShortTimeFFT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Provide a parametrized discrete Short-time Fourier transform (stft) and its
    inverse (istft).
  prefs: []
  type: TYPE_NORMAL
- en: The *stft* calculates sequential FFTs by sliding a window ([`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win")) over an input signal by [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") increments. It can be used to quantify the change
    of the spectrum over time.
  prefs: []
  type: TYPE_NORMAL
- en: The *stft* is represented by a complex-valued matrix S[q,p] where the p-th column
    represents an FFT with the window centered at the time t[p] = p * [`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") = p * [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") * [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") where [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T") is the sampling interval of the input signal. The
    q-th row represents the values at the frequency f[q] = q * [`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") with [`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f") = 1 / ([`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T
    "scipy.signal.ShortTimeFFT.T")) being the bin width of the FFT.
  prefs: []
  type: TYPE_NORMAL
- en: 'The inverse STFT *istft* is calculated by reversing the steps of the STFT:
    Take the IFFT of the p-th slice of S[q,p] and multiply the result with the so-called
    dual window (see [`dual_win`](scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")). Shift the result by p * [`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t") and add the result to previous shifted results
    to reconstruct the signal. If only the dual window is known and the STFT is invertible,
    [`from_dual`](scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual") can be used to instantiate this class.'
  prefs: []
  type: TYPE_NORMAL
- en: Due to the convention of time t = 0 being at the first sample of the input signal,
    the STFT values typically have negative time slots. Hence, negative indexes like
    [`p_min`](scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min
    "scipy.signal.ShortTimeFFT.p_min") or [`k_min`](scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min
    "scipy.signal.ShortTimeFFT.k_min") do not indicate counting backwards from an
    array’s end like in standard Python indexing but being left of t = 0.
  prefs: []
  type: TYPE_NORMAL
- en: More detailed information can be found in the [Short-Time Fourier Transform](../../tutorial/signal.html#tutorial-stft)
    section of the [SciPy User Guide](../../tutorial/index.html#user-guide).
  prefs: []
  type: TYPE_NORMAL
- en: Note that all parameters of the initializer, except [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to") (which uses [`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling")) have identical named attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**win**np.ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The window must be a real- or complex-valued 1d array.
  prefs: []
  type: TYPE_NORMAL
- en: '**hop**int'
  prefs: []
  type: TYPE_NORMAL
- en: The increment in samples, by which the window is shifted in each step.
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of input signal and window. Its relation to the sampling
    interval [`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T "scipy.signal.ShortTimeFFT.T")
    is `T = 1 / fs`.
  prefs: []
  type: TYPE_NORMAL
- en: '**fft_mode**‘twosided’, ‘centered’, ‘onesided’, ‘onesided2X’'
  prefs: []
  type: TYPE_NORMAL
- en: Mode of FFT to be used (default ‘onesided’). See property [`fft_mode`](scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode
    "scipy.signal.ShortTimeFFT.fft_mode") for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**mfft: int | None**'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used, if a zero padded FFT is desired. If `None` (default),
    the length of the window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win") is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_win**np.ndarray | None'
  prefs: []
  type: TYPE_NORMAL
- en: The dual window of [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win"). If set to `None`, it is calculated if needed.
  prefs: []
  type: TYPE_NORMAL
- en: '**scale_to**‘magnitude’, ‘psd’ | None'
  prefs: []
  type: TYPE_NORMAL
- en: If not `None` (default) the window function is scaled, so each STFT column represents
    either a ‘magnitude’ or a power spectral density (‘psd’) spectrum. This parameter
    sets the property [`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling") to the same value. See method [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to") for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**phase_shift**int | None'
  prefs: []
  type: TYPE_NORMAL
- en: If set, add a linear phase [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f") to each frequency [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f"). The default value 0 ensures that there is no phase
    shift on the zeroth slice (in which t=0 is centered). See property [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows the magnitude of the STFT of a sine with varying
    frequency \(f_i(t)\) (marked by a red dashed line in the plot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The utilized Gaussian window is 50 samples or 2.5 s long. The parameter `mfft=200`
    in *ShortTimeFFT* causes the spectrum to be oversampled by a factor of 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the plot, the time extent of the signal *x* is marked by vertical dashed
    lines. Note that the SFT produces values outside the time range of *x*. The shaded
    areas on the left and the right indicate border effects caused by the window slices
    in that area not fully being inside time range of *x*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-ShortTimeFFT-1_00_00.png](../Images/389968aa37ffa309b1b70dd8f4694b83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reconstructing the signal with the *istft* is straightforward, but note that
    the length of *x1* should be specified, since the SFT length increases in [`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop
    "scipy.signal.ShortTimeFFT.hop") steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible to calculate the SFT of signal parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When assembling sequential STFT parts together, the overlap needs to be considered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to calculate the *itsft* for signal parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](scipy.signal.ShortTimeFFT.T.html#scipy.signal.ShortTimeFFT.T "scipy.signal.ShortTimeFFT.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling interval of input signal and of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '[`delta_f`](scipy.signal.ShortTimeFFT.delta_f.html#scipy.signal.ShortTimeFFT.delta_f
    "scipy.signal.ShortTimeFFT.delta_f")'
  prefs: []
  type: TYPE_NORMAL
- en: Width of the frequency bins of the STFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`delta_t`](scipy.signal.ShortTimeFFT.delta_t.html#scipy.signal.ShortTimeFFT.delta_t
    "scipy.signal.ShortTimeFFT.delta_t")'
  prefs: []
  type: TYPE_NORMAL
- en: Time increment of STFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dual_win`](scipy.signal.ShortTimeFFT.dual_win.html#scipy.signal.ShortTimeFFT.dual_win
    "scipy.signal.ShortTimeFFT.dual_win")'
  prefs: []
  type: TYPE_NORMAL
- en: Canonical dual window.
  prefs: []
  type: TYPE_NORMAL
- en: '[`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f "scipy.signal.ShortTimeFFT.f")'
  prefs: []
  type: TYPE_NORMAL
- en: Frequencies values of the STFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`f_pts`](scipy.signal.ShortTimeFFT.f_pts.html#scipy.signal.ShortTimeFFT.f_pts
    "scipy.signal.ShortTimeFFT.f_pts")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points along the frequency axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fac_magnitude`](scipy.signal.ShortTimeFFT.fac_magnitude.html#scipy.signal.ShortTimeFFT.fac_magnitude
    "scipy.signal.ShortTimeFFT.fac_magnitude")'
  prefs: []
  type: TYPE_NORMAL
- en: Factor to multiply the STFT values by to scale each frequency slice to a magnitude
    spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: '[`fac_psd`](scipy.signal.ShortTimeFFT.fac_psd.html#scipy.signal.ShortTimeFFT.fac_psd
    "scipy.signal.ShortTimeFFT.fac_psd")'
  prefs: []
  type: TYPE_NORMAL
- en: Factor to multiply the STFT values by to scale each frequency slice to a power
    spectral density (PSD).
  prefs: []
  type: TYPE_NORMAL
- en: '[`fft_mode`](scipy.signal.ShortTimeFFT.fft_mode.html#scipy.signal.ShortTimeFFT.fft_mode
    "scipy.signal.ShortTimeFFT.fft_mode")'
  prefs: []
  type: TYPE_NORMAL
- en: Mode of utilized FFT (‘twosided’, ‘centered’, ‘onesided’ or ‘onesided2X’).
  prefs: []
  type: TYPE_NORMAL
- en: '[`fs`](scipy.signal.ShortTimeFFT.fs.html#scipy.signal.ShortTimeFFT.fs "scipy.signal.ShortTimeFFT.fs")'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of input signal and of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '[`hop`](scipy.signal.ShortTimeFFT.hop.html#scipy.signal.ShortTimeFFT.hop "scipy.signal.ShortTimeFFT.hop")'
  prefs: []
  type: TYPE_NORMAL
- en: Time increment in signal samples for sliding window.
  prefs: []
  type: TYPE_NORMAL
- en: '[`invertible`](scipy.signal.ShortTimeFFT.invertible.html#scipy.signal.ShortTimeFFT.invertible
    "scipy.signal.ShortTimeFFT.invertible")'
  prefs: []
  type: TYPE_NORMAL
- en: Check if STFT is invertible.
  prefs: []
  type: TYPE_NORMAL
- en: '[`k_min`](scipy.signal.ShortTimeFFT.k_min.html#scipy.signal.ShortTimeFFT.k_min
    "scipy.signal.ShortTimeFFT.k_min")'
  prefs: []
  type: TYPE_NORMAL
- en: The smallest possible signal index of the STFT.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lower_border_end`](scipy.signal.ShortTimeFFT.lower_border_end.html#scipy.signal.ShortTimeFFT.lower_border_end
    "scipy.signal.ShortTimeFFT.lower_border_end")'
  prefs: []
  type: TYPE_NORMAL
- en: First signal index and first slice index unaffected by pre-padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of samples in window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
  prefs: []
  type: TYPE_NORMAL
- en: '[`m_num_mid`](scipy.signal.ShortTimeFFT.m_num_mid.html#scipy.signal.ShortTimeFFT.m_num_mid
    "scipy.signal.ShortTimeFFT.m_num_mid")'
  prefs: []
  type: TYPE_NORMAL
- en: Center index of window [`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win
    "scipy.signal.ShortTimeFFT.win").
  prefs: []
  type: TYPE_NORMAL
- en: '[`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft")'
  prefs: []
  type: TYPE_NORMAL
- en: Length of input for the FFT used - may be larger than window length [`m_num`](scipy.signal.ShortTimeFFT.m_num.html#scipy.signal.ShortTimeFFT.m_num
    "scipy.signal.ShortTimeFFT.m_num").
  prefs: []
  type: TYPE_NORMAL
- en: '[`onesided_fft`](scipy.signal.ShortTimeFFT.onesided_fft.html#scipy.signal.ShortTimeFFT.onesided_fft
    "scipy.signal.ShortTimeFFT.onesided_fft")'
  prefs: []
  type: TYPE_NORMAL
- en: Return True if a one-sided FFT is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[`p_min`](scipy.signal.ShortTimeFFT.p_min.html#scipy.signal.ShortTimeFFT.p_min
    "scipy.signal.ShortTimeFFT.p_min")'
  prefs: []
  type: TYPE_NORMAL
- en: The smallest possible slice index.
  prefs: []
  type: TYPE_NORMAL
- en: '[`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift")'
  prefs: []
  type: TYPE_NORMAL
- en: If set, add linear phase [`phase_shift`](scipy.signal.ShortTimeFFT.phase_shift.html#scipy.signal.ShortTimeFFT.phase_shift
    "scipy.signal.ShortTimeFFT.phase_shift") / [`mfft`](scipy.signal.ShortTimeFFT.mfft.html#scipy.signal.ShortTimeFFT.mfft
    "scipy.signal.ShortTimeFFT.mfft") * [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f") to each FFT slice of frequency [`f`](scipy.signal.ShortTimeFFT.f.html#scipy.signal.ShortTimeFFT.f
    "scipy.signal.ShortTimeFFT.f").
  prefs: []
  type: TYPE_NORMAL
- en: '[`scaling`](scipy.signal.ShortTimeFFT.scaling.html#scipy.signal.ShortTimeFFT.scaling
    "scipy.signal.ShortTimeFFT.scaling")'
  prefs: []
  type: TYPE_NORMAL
- en: Normalization applied to the window function (‘magnitude’, ‘psd’ or `None`).
  prefs: []
  type: TYPE_NORMAL
- en: '[`win`](scipy.signal.ShortTimeFFT.win.html#scipy.signal.ShortTimeFFT.win "scipy.signal.ShortTimeFFT.win")'
  prefs: []
  type: TYPE_NORMAL
- en: Window function as real- or complex-valued 1d array.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`extent`](scipy.signal.ShortTimeFFT.extent.html#scipy.signal.ShortTimeFFT.extent
    "scipy.signal.ShortTimeFFT.extent")(n[, axes_seq, center_bins]) | Return minimum
    and maximum values time-frequency values. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_dual`](scipy.signal.ShortTimeFFT.from_dual.html#scipy.signal.ShortTimeFFT.from_dual
    "scipy.signal.ShortTimeFFT.from_dual")(dual_win, hop, fs, *[, fft_mode, ...])
    | Instantiate a *ShortTimeFFT* by only providing a dual window. |'
  prefs: []
  type: TYPE_TB
- en: '| [`from_window`](scipy.signal.ShortTimeFFT.from_window.html#scipy.signal.ShortTimeFFT.from_window
    "scipy.signal.ShortTimeFFT.from_window")(win_param, fs, nperseg, noverlap, *)
    | Instantiate *ShortTimeFFT* by using *get_window*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`istft`](scipy.signal.ShortTimeFFT.istft.html#scipy.signal.ShortTimeFFT.istft
    "scipy.signal.ShortTimeFFT.istft")(S[, k0, k1, f_axis, t_axis]) | Inverse short-time
    Fourier transform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`k_max`](scipy.signal.ShortTimeFFT.k_max.html#scipy.signal.ShortTimeFFT.k_max
    "scipy.signal.ShortTimeFFT.k_max")(n) | First sample index after signal end not
    touched by a time slice. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nearest_k_p`](scipy.signal.ShortTimeFFT.nearest_k_p.html#scipy.signal.ShortTimeFFT.nearest_k_p
    "scipy.signal.ShortTimeFFT.nearest_k_p")(k[, left]) | Return nearest sample index
    k_p for which t[k_p] == t[p] holds. |'
  prefs: []
  type: TYPE_TB
- en: '| [`p_max`](scipy.signal.ShortTimeFFT.p_max.html#scipy.signal.ShortTimeFFT.p_max
    "scipy.signal.ShortTimeFFT.p_max")(n) | Index of first non-overlapping upper time
    slice for *n* sample input. |'
  prefs: []
  type: TYPE_TB
- en: '| [`p_num`](scipy.signal.ShortTimeFFT.p_num.html#scipy.signal.ShortTimeFFT.p_num
    "scipy.signal.ShortTimeFFT.p_num")(n) | Number of time slices for an input signal
    with *n* samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`p_range`](scipy.signal.ShortTimeFFT.p_range.html#scipy.signal.ShortTimeFFT.p_range
    "scipy.signal.ShortTimeFFT.p_range")(n[, p0, p1]) | Determine and validate slice
    index range. |'
  prefs: []
  type: TYPE_TB
- en: '| [`scale_to`](scipy.signal.ShortTimeFFT.scale_to.html#scipy.signal.ShortTimeFFT.scale_to
    "scipy.signal.ShortTimeFFT.scale_to")(scaling) | Scale window to obtain ''magnitude''
    or ''psd'' scaling for the STFT. |'
  prefs: []
  type: TYPE_TB
- en: '| [`spectrogram`](scipy.signal.ShortTimeFFT.spectrogram.html#scipy.signal.ShortTimeFFT.spectrogram
    "scipy.signal.ShortTimeFFT.spectrogram")(x[, y, detr, p0, p1, k_offset, ...])
    | Calculate spectrogram or cross-spectrogram. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stft`](scipy.signal.ShortTimeFFT.stft.html#scipy.signal.ShortTimeFFT.stft
    "scipy.signal.ShortTimeFFT.stft")(x[, p0, p1, k_offset, padding, axis]) | Perform
    the short-time Fourier transform. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stft_detrend`](scipy.signal.ShortTimeFFT.stft_detrend.html#scipy.signal.ShortTimeFFT.stft_detrend
    "scipy.signal.ShortTimeFFT.stft_detrend")(x, detr[, p0, p1, k_offset, ...]) |
    Short-time Fourier transform with a trend being subtracted from each segment beforehand.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`t`](scipy.signal.ShortTimeFFT.t.html#scipy.signal.ShortTimeFFT.t "scipy.signal.ShortTimeFFT.t")(n[, p0, p1, k_offset])
    | Times of STFT for an input signal with *n* samples. |'
  prefs: []
  type: TYPE_TB
- en: '| [`upper_border_begin`](scipy.signal.ShortTimeFFT.upper_border_begin.html#scipy.signal.ShortTimeFFT.upper_border_begin
    "scipy.signal.ShortTimeFFT.upper_border_begin")(n) | First signal index and first
    slice index affected by post-padding. |'
  prefs: []
  type: TYPE_TB
