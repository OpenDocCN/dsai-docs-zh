- en: numpy.float_power
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.float_power.html](https://numpy.org/doc/1.26/reference/generated/numpy.float_power.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First array elements raised to powers from second array, element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Raise each base in *x1* to the positionally-corresponding power in *x2*. *x1*
    and *x2* must be broadcastable to the same shape. This differs from the power
    function in that integers, float16, and float32 are promoted to floats with a
    minimum precision of float64 so that the result is always inexact. The intent
    is that the function will return a usable result for negative powers and seldom
    overflow for positive powers.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values raised to a non-integral value will return `nan`. To get complex
    results, cast the input to complex, or specify the `dtype` to be `complex` (see
    the example below).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The bases.
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The exponents. If `x1.shape != x2.shape`, they must be broadcastable to a common
    shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The bases in *x1* raised to the exponents in *x2*. This is a scalar if both
    *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`power`](numpy.power.html#numpy.power "numpy.power")'
  prefs: []
  type: TYPE_NORMAL
- en: power function that preserves type
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Cube each element in a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Raise the bases to different exponents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The effect of broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Negative values raised to a non-integral value will result in `nan` (and a warning
    will be generated).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To get complex results, give the argument `dtype=complex`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
