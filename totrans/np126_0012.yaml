- en: Building from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/user/building.html](https://numpy.org/doc/1.26/user/building.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Building locally on your machine gives you complete control over build options.
    If you are a MacOS or Linux user familiar with using the command line, you can
    continue with building NumPy locally by following the instructions below.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to build NumPy for development purposes, please refer to [Setting
    up and using your development environment](../dev/development_environment.html#development-environment)
    for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building NumPy requires the following software installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.9.x or newer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that the Python development headers also need to be installed, e.g.,
    on Debian/Ubuntu one needs to install both *python3* and *python3-dev*. On Windows
    and macOS this is normally not an issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compilers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Much of NumPy is written in C and C++. You will need a C compiler that complies
    with the C99 standard, and a C++ compiler that complies with the C++17 standard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While a FORTRAN 77 compiler is not necessary for building NumPy, it is needed
    to run the `numpy.f2py` tests. These tests are skipped if the compiler is not
    auto-detected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that NumPy is developed mainly using GNU compilers and tested on MSVC and
    Clang compilers. Compilers from other vendors such as Intel, Absoft, Sun, NAG,
    Compaq, Vast, Portland, Lahey, HP, IBM are only supported in the form of community
    feedback, and may not work out of the box. GCC 6.5 (and later) compilers are recommended.
    On ARM64 (aarch64) GCC 8.x (and later) are recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Linear Algebra libraries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NumPy does not require any external linear algebra libraries to be installed.
    However, if these are available, NumPy’s setup script can detect them and use
    them for building. A number of different LAPACK library setups can be used, including
    optimized LAPACK libraries such as OpenBLAS or MKL. The choice and location of
    these libraries as well as include paths and other such build options can be specified
    in a `.pc` file, as documented in [BLAS and LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(in SciPy v1.11.2)").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cython
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For building NumPy, you’ll need a recent version of Cython.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The NumPy source code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the repository following the instructions in [Contributing to NumPy](../dev/index.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting on version 1.26, NumPy will adopt Meson as its build system (see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration)
    and [Understanding Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(in SciPy v1.11.2)") for more details.)
  prefs: []
  type: TYPE_NORMAL
- en: Basic installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build and install NumPy from a local copy of the source code, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install all build dependencies and use Meson to compile and install
    the NumPy C-extensions and Python modules. If you need more control of build options
    and commands, see the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform an in-place build that can be run from the source folder run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Note: for build instructions to do development work on NumPy itself, see*
    [Setting up and using your development environment](../dev/development_environment.html#development-environment).'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced building with Meson
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  prefs: []
  type: TYPE_NORMAL
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  prefs: []
  type: TYPE_NORMAL
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure to test your builds. To ensure everything stays in shape, see if all
    tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test suite requires additional dependencies, which can easily be installed
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the full test suite with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds).
  prefs: []
  type: TYPE_NORMAL
- en: '## Accelerated BLAS/LAPACK libraries'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy searches for optimized linear algebra libraries such as BLAS and LAPACK.
    There are specific orders for searching these libraries, as described below and
    in the [meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Cross compilation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For cross compilation instructions, see [Cross compilation](https://docs.scipy.org/doc/scipy/building/cross_compilation.html
    "(in SciPy v1.11.2)") and the [Meson documentation](meson).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building NumPy requires the following software installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.9.x or newer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please note that the Python development headers also need to be installed, e.g.,
    on Debian/Ubuntu one needs to install both *python3* and *python3-dev*. On Windows
    and macOS this is normally not an issue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compilers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Much of NumPy is written in C and C++. You will need a C compiler that complies
    with the C99 standard, and a C++ compiler that complies with the C++17 standard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While a FORTRAN 77 compiler is not necessary for building NumPy, it is needed
    to run the `numpy.f2py` tests. These tests are skipped if the compiler is not
    auto-detected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that NumPy is developed mainly using GNU compilers and tested on MSVC and
    Clang compilers. Compilers from other vendors such as Intel, Absoft, Sun, NAG,
    Compaq, Vast, Portland, Lahey, HP, IBM are only supported in the form of community
    feedback, and may not work out of the box. GCC 6.5 (and later) compilers are recommended.
    On ARM64 (aarch64) GCC 8.x (and later) are recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Linear Algebra libraries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NumPy does not require any external linear algebra libraries to be installed.
    However, if these are available, NumPy’s setup script can detect them and use
    them for building. A number of different LAPACK library setups can be used, including
    optimized LAPACK libraries such as OpenBLAS or MKL. The choice and location of
    these libraries as well as include paths and other such build options can be specified
    in a `.pc` file, as documented in [BLAS and LAPACK](https://docs.scipy.org/doc/scipy/building/blas_lapack.html#building-blas-and-lapack
    "(in SciPy v1.11.2)").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cython
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For building NumPy, you’ll need a recent version of Cython.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The NumPy source code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone the repository following the instructions in [Contributing to NumPy](../dev/index.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Starting on version 1.26, NumPy will adopt Meson as its build system (see [Status
    of numpy.distutils and migration advice](../reference/distutils_status_migration.html#distutils-status-migration)
    and [Understanding Meson](https://docs.scipy.org/doc/scipy/building/understanding_meson.html
    "(in SciPy v1.11.2)") for more details.)
  prefs: []
  type: TYPE_NORMAL
- en: Basic installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build and install NumPy from a local copy of the source code, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will install all build dependencies and use Meson to compile and install
    the NumPy C-extensions and Python modules. If you need more control of build options
    and commands, see the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform an in-place build that can be run from the source folder run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Note: for build instructions to do development work on NumPy itself, see*
    [Setting up and using your development environment](../dev/development_environment.html#development-environment).'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced building with Meson
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  prefs: []
  type: TYPE_NORMAL
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  prefs: []
  type: TYPE_NORMAL
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced building with Meson
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  prefs: []
  type: TYPE_NORMAL
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., meson setup). An incremental rebuild does
    not react to changes in environment variables - you have to run `git clean -xdf`
    and do a full rebuild, or run `meson setup --reconfigure`.
  prefs: []
  type: TYPE_NORMAL
- en: For more options including selecting compilers, setting custom compiler flags
    and controlling parallelism, see [Compiler selection and customizing a build](https://docs.scipy.org/doc/scipy/building/compilers_and_options.html
    "(in SciPy v1.11.2)") (from the SciPy documentation) and [the Meson FAQ](https://mesonbuild.com/howtox.html#set-extra-compiler-and-linker-flags-from-the-outside-when-eg-building-distro-packages).
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure to test your builds. To ensure everything stays in shape, see if all
    tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test suite requires additional dependencies, which can easily be installed
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the full test suite with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds).
  prefs: []
  type: TYPE_NORMAL
- en: '## Accelerated BLAS/LAPACK libraries'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy searches for optimized linear algebra libraries such as BLAS and LAPACK.
    There are specific orders for searching these libraries, as described below and
    in the [meson_options.txt](https://github.com/numpy/numpy/blob/main/meson_options.txt)
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Cross compilation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For cross compilation instructions, see [Cross compilation](https://docs.scipy.org/doc/scipy/building/cross_compilation.html
    "(in SciPy v1.11.2)") and the [Meson documentation](meson).
  prefs: []
  type: TYPE_NORMAL
