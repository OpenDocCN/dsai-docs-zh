- en: Development Workflow Process
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工作流程
- en: Original text：[https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html](https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html](https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This guide is intended for people are already familiar with contributing to
    open source projects on GitHub. If you are new to GitHub, read the [Setup Development
    Environment](dev-setup.html) guide first.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南适用于那些已经熟悉在GitHub上为开源项目做贡献的人士。如果你是GitHub的新手，请先阅读[设置开发环境](dev-setup.html)指南。
- en: '## Checklist for Contributions'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## 贡献清单'
- en: Here’s a checklist of things that need to be done when making a pull request
    to SymPy. These things all need to be done before a pull request is merged. It
    is not necessary to do all of them before the pull request is opened at all, but
    it is often a good idea to check the basic things first before opening a pull
    request, or even before committing a change.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是提交到SymPy的拉取请求需要完成的事项清单。这些事项在合并拉取请求之前都必须完成。在打开拉取请求之前，不必全部完成这些事项，但通常在打开拉取请求之前或提交更改之前先检查基本事项是个好主意。
- en: '**Make sure [code quality checks](#workflow-process-code-quality) pass.**'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保[代码质量检查](#workflow-process-code-quality)通过。**'
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**[Add tests](#workflow-process-add-tests).** All new functionality should
    be tested. Bug fixes should add regression tests. Tests are written in pytest
    `assert f(x) == y` style and are included in corresponding `tests` directories
    in the `sympy/` source. See the guide on [writing tests](writing-tests.html).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[添加测试](#workflow-process-add-tests)。** 所有新功能应进行测试。Bug修复应添加回归测试。测试采用pytest的`assert
    f(x) == y`风格，并包含在`sympy/`源代码中相应的`tests`目录中。有关[编写测试的指南](writing-tests.html)请参见该指南。'
- en: '**New public functions and methods should have a docstring.**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新的公共函数和方法应有文档字符串。**'
- en: '**Docstrings should include [doctests](writing-tests.html#writing-tests-doctests).**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档字符串应包含[doctests](writing-tests.html#writing-tests-doctests)。**'
- en: '**Make sure all tests pass.** [You may want to run a relevant subset of the
    test suite locally](#workflow-process-run-tests) before committing (e.g., `./bin/test
    solvers`). When you open a pull request, all tests will be run on CI. The CI must
    be all green before a PR can be merged.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保所有测试通过。** [在提交之前，您可能需要在本地运行相关的测试套件](#workflow-process-run-tests)（例如，`./bin/test
    solvers`）。当您打开一个拉取请求时，所有测试将在CI上运行。在合并PR之前，CI必须全部通过。'
- en: '**[Write good commit messages](#workflow-process-commit-messages).**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[编写良好的提交消息](#workflow-process-commit-messages)。**'
- en: (First time contributors only) **[Add your name to the `.mailmap` file](#mailmap-instructions)**.
    The “test / authors” CI build on GitHub will fail if this is not done correctly.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （首次贡献者专用）**[将您的名字添加到`.mailmap`文件中](#mailmap-instructions)**。如果未正确完成此操作，则GitHub上的“test/authors”CI构建将失败。
- en: '**Cross reference relevant issues in the pull request description.** If the
    pull request fixes an issue (i.e., the issue should be closed once the PR is merged),
    use the [“fixes #123” syntax](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)
    .'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在拉取请求描述中交叉引用相关问题。** 如果拉取请求修复了问题（即该问题应在PR合并后关闭），请使用[“fixes #123”语法](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)。'
- en: '**Add a comment to the original issue cross-referencing the pull request**
    for visibility. If there is not a corresponding issue, this is OK. It is not necessary
    to open an issue unless there are further improvements needed beyond your PR.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为了可见性，在原问题中添加评论，跨引用拉取请求**。如果没有相应的问题，这也可以。除非您的PR需要进一步改进，否则无需打开问题。'
- en: '**[Add a release notes entry](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).**
    This should be done when opening the pull request, in the pull request description
    field. It can be edited at any time before the pull request is merged.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[添加发布说明条目](https://github.com/sympy/sympy/wiki/Writing-Release-Notes)**。应在打开拉取请求时完成，在拉取请求描述字段中。在拉取请求合并之前可以随时编辑。'
- en: '**Respond to review comments.** All SymPy pull requests must be reviewed by
    someone else before they can be merged.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回应审查评论。** 所有SymPy拉取请求必须在合并之前由其他人审查。'
- en: Pick an issue to fix
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择要修复的问题
- en: The best way to start with the main code base is to fix some existing bugs.
    Peruse the [“Easy to fix” issues](https://github.com/sympy/sympy/issues?q=is%3Aopen+is%3Aissue+label%3A%22Easy+to+Fix%22)
    in the issue tracker and see if one interests you. If you’d like to try to fix
    it, then create a message in the issue saying that you’d like to work on it. If
    it isn’t clear how to fix it, ask for suggestions on how to do it in the issue
    itself or on the [mailing list](https://groups.google.com/g/sympy).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始主代码库的最佳方法是修复一些现有的bug。查看问题跟踪器中的[“易于修复”问题](https://github.com/sympy/sympy/issues?q=is%3Aopen+is%3Aissue+label%3A%22Easy+to+Fix%22)，看看是否有您感兴趣的问题。如果您想尝试修复它，请在问题中创建一条消息表明您想要处理它。如果不清楚如何修复，请在问题本身或[邮件列表](https://groups.google.com/g/sympy)上寻求建议。
- en: SymPy’s code is organized into Python packages and modules. The core code is
    in the `sympy/core` directory and other packages in the sympy directory have more
    specific code. For example, `sympy/printing` contains the code that handles how
    SymPy objects are printed to the terminal and Jupyter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy的代码组织成Python包和模块。核心代码位于`sympy/core`目录中，sympy目录中的其他包含更具体的代码。例如，`sympy/printing`包含处理如何将SymPy对象打印到终端和Jupyter的代码。
- en: If you are making a change that does not yet have an issue, it is not required
    to open an issue first. This is only necessary if you feel you want to discuss
    the change before you make a pull request, for example, if you’re not sure if
    something is actually a bug, or if you’re not sure if a new feature is in scope.
    It’s also fine to just open a pull request and discuss it there. Discussions are
    easier to have when there is actual code to talk about, so a pull request is preferable
    if you have changes, even if they aren’t fully ready to merge yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要进行的更改还没有问题，那么在开始之前没有必要先打开问题。只有在您觉得需要在提交拉取请求之前讨论更改时才需要这样做，例如，如果您不确定某事实际上是否是一个bug，或者如果您不确定新功能是否在范围内。如果有变更，只需直接打开拉取请求并在那里讨论即可。有了实际代码后，讨论会更容易进行，因此如果您有更改，即使这些更改尚未完全准备好合并，也最好打开拉取请求。
- en: Create a new branch
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的分支
- en: The first thing to do before making changes to the code is to make a branch
    in git.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改代码之前要做的第一件事是在git中创建一个分支。
- en: Remember, **never commit to `master`**. `master` should only be used to pull
    in upstream changes from the main sympy/sympy repo. If you commit to `master`,
    it will be difficult to pull these changes in, and it will also be difficult if
    you wish to make more than one pull request at a time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，**永远不要提交到`master`分支**。`master`只应用于从主要的sympy/sympy存储库拉取上游更改。如果您提交到`master`，将很难拉取这些更改，并且如果您希望一次提交多个拉取请求，也会很困难。
- en: First pick a name for your branch. See [Branch names](#workflow-process-branch-names)
    below. To create and checkout (that is, make it the working branch) a new branch
    run
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先选择一个分支名称。参见下面的[分支名称](#workflow-process-branch-names)。要创建和检出（即使其成为工作分支）新分支，请运行
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last two commands can also be combined into a single command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个命令也可以合并成一个单独的命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To view all branches, with your current branch highlighted, type:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有分支，并突出显示当前分支，请键入：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And remember, **never type the following commands in master**: `git merge`,
    `git add`, `git commit`, `git rebase`. If you made some commits to your local
    master by accident, you will have to hard reset to drop the commits.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 而且记住，**永远不要在主分支输入以下命令**：`git merge`，`git add`，`git commit`，`git rebase`。如果您不小心向本地主分支提交了一些提交，您将不得不硬重置以删除这些提交。
- en: '### Branch names'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '### 分支名称'
- en: Use a short, easy to type branch name that somehow relates to the changes. Remember
    that developers who wish to try out your code will need to type your branch name
    in the command line to do so.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个短小且易于输入的分支名称，与所做的更改有关联。记住，希望尝试您的代码的开发人员将需要在命令行中输入您的分支名称。
- en: Avoid using issue numbers in branch names as these are not easy to type (most
    SymPy issue numbers are 5 digits long) and they won’t really be indicative of
    what the change is about without looking up the issue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在分支名称中使用问题编号（大多数SymPy问题编号为5位数），因为这些不易于输入，并且不会在没有查看问题的情况下明确表明更改的内容。
- en: Some examples of good branch names are
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些好的分支名称示例包括
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ultimately the branch name is not that important, so don’t spend too much time
    thinking about it. It’s only function is to distinguish the code for this contribution
    from other contributions you may make.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，分支名称并不是非常重要，所以不要花太多时间考虑它。它的唯一功能是将此贡献的代码与您可能进行的其他贡献区分开来。
- en: Modify code
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改代码
- en: 'When making your fix, keep in mind there are several requirements that every
    contribution should follow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在修复问题时，请记住每个贡献都应该遵循几个要求：
- en: '### Code Quality'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '### 代码质量'
- en: SymPy contributions must have sufficient code quality to be accepted. There
    are some code quality checks that will run automatically on the CI once you create
    a pull request, but you can also run them locally with
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 的贡献必须具备足够的代码质量才能被接受。有一些代码质量检查将在您创建拉取请求后自动在 CI 上运行，但您也可以在本地运行它们
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Additionally, all tests are required to pass. The CI will automatically run
    the tests, but you can also [run them yourself](#workflow-process-run-tests).
    It is recommended to run at least the tests that relate to the code you modified
    before committing to ensure you did not make any mistakes or accidentally break
    something.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有的测试都是必须通过的。CI将自动运行测试，但您也可以自行运行它们（请参阅[#workflow-process-run-tests](#workflow-process-run-tests)）。建议在提交之前至少运行与您修改的代码相关的测试，以确保您没有犯任何错误或意外地破坏了某些东西。
- en: 'Once you submit your pull request, you should check the GitHub Actions checks
    once they complete to see if there are any test failures. If there are, you will
    need to fix them before the pull request will be accepted.  ### Add Tests'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦提交拉取请求后，请在GitHub Actions检查完成后查看是否有任何测试失败。如果有失败的测试，您需要在拉取请求被接受之前修复它们。  ###
    添加测试'
- en: All new functionality should be tested. If you are fixing a bug, it should be
    accompanied with a regression test. That is, a test that would fail before the
    bug fix but now passes. Often you can use a code example from an issue as a test
    case, although it is also OK to simplify such examples or to write your own, so
    long as it tests the issue in question.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新功能都应该经过测试。如果您正在修复错误，则应附带回归测试。即，在修复错误之前会失败的测试，但现在会通过。通常可以使用来自问题的代码示例作为测试用例，尽管简化此类示例或编写自己的示例同样可以，只要它测试了相关问题。
- en: Tests are located alongside the code in `tests/` directories, in files named
    `test_<thing>.py`. In most cases, if you modified `sympy/<submodule>/<file>.py`
    then the test for the functionality will go in `sympy/<submodule>/tests/test_<file>.py`.
    For example, the tests for the functions in `sympy/simplify/sqrtdenest.py` are
    in `sympy/simplify/tests/test_sqrtdenest.py`. There are some exceptions to this
    rule so in general try to find where the existing tests are for a function and
    add your tests alongside them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 测试位于与代码相邻的`tests/`目录中，文件名为`test_<thing>.py`。在大多数情况下，如果您修改了`sympy/<submodule>/<file>.py`，那么该功能的测试将放在`sympy/<submodule>/tests/test_<file>.py`中。例如，`sympy/simplify/sqrtdenest.py`中函数的测试位于`sympy/simplify/tests/test_sqrtdenest.py`中。对于此规则，有一些例外，因此通常尝试找到函数的现有测试位置，并将您的测试添加到它们旁边。
- en: Tests follow a simple pattern, which should be apparent from reading the existing
    test files. Tests are in functions that start with `test_` and contain lines like
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 测试遵循一个简单的模式，通过阅读现有的测试文件应该是显而易见的。测试以`test_`开头的函数形式存在，并包含类似以下内容的行
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For example
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: New test cases can be added to an existing test function if it is relevant,
    or you can create a new test function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相关，可以将新的测试用例添加到现有的测试函数中，或者可以创建一个新的测试函数。
- en: Documentation
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档
- en: All new methods, functions, and classes should have a docstring showing how
    to use them. A docstring is a triple quoted string that goes right after the `def`
    line that describes the function. Docstrings should follow the format as outlined
    in the [Docstrings Style Guide](../docstring.html#style-guide-docstring-guidelines).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新的方法、函数和类都应该有一个文档字符串来展示如何使用它们。文档字符串是一个三引号字符串，紧跟在描述函数的`def`行后面。文档字符串应该遵循[文档字符串风格指南](../docstring.html#style-guide-docstring-guidelines)中概述的格式。
- en: One important thing that should be included in every docstring is examples.
    Examples are also called *doctests*, because they are tested with the `bin/doctest`
    script to ensure they output is correct.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文档字符串中应该包含的一个重要内容是示例。示例也被称为 *doctests*，因为它们通过 `bin/doctest` 脚本来测试以确保输出是正确的。
- en: Doctests need to include imports for every function used define any symbols
    that are used. Users should be able to copy and paste the example inputs into
    their own Python session and get the exact same outputs. `from sympy import *`
    is not allowed in doctests, as this would make it unclear which functions come
    from SymPy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Doctests 需要包括每个使用的函数导入定义任何使用的符号。用户应该能够复制和粘贴示例输入到他们自己的 Python 会话中，并获得完全相同的输出。`from
    sympy import *` 不允许在 doctests 中使用，因为这会使得从 SymPy 中来的函数不清晰。
- en: The [docstring style guide](../docstring.html#style-guide-docstring-examples-section)
    has more details on how to format examples in docstrings.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[文档字符串样式指南](../docstring.html#style-guide-docstring-examples-section)详细介绍了如何在文档字符串中格式化示例。'
- en: 'Keep in mind, doctests are *not* tests. Think of them as examples that happen
    to be tested. Some key differences:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，doctest并不是测试。可以将它们视为被测试的示例。一些关键区别如下：
- en: write doctests to be informative; write regular tests to check for regressions
    and corner cases.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写doctest以提供信息；编写常规测试以检查回归和边界情况。
- en: doctests can be changed at any time; regular tests should not be changed.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: doctest可以随时更改；常规测试不应更改。
- en: In particular, we should be able to change or delete any doctest at any time
    if it makes the docstring better to understand.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，如果修改或删除doctest能使文档字符串更容易理解，我们应该能够随时这样做。
- en: Here is an example docstring with doctests (from `sympy/functions/special/delta_functions.py`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个带有doctest的示例文档字符串（来自`sympy/functions/special/delta_functions.py`）。
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Additionally, all public function docstrings should be included in the Sphinx
    API documentation. Depending on the module, this may mean you need to add an `..
    autofunction::` line to the corresponding `doc/src/modules/<module>.rst` file.
    You should [build the documentation](build-docs.html#build-the-documentation)
    and look at it to ensure there are no markup errors in the rendered HTML.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，所有公共函数的文档字符串应包含在Sphinx API文档中。根据模块的不同，这可能意味着您需要在相应的`doc/src/modules/<module>.rst`文件中添加一个`..
    autofunction::`行。您应该[生成文档](build-docs.html#build-the-documentation)，并查看渲染后的HTML以确保没有标记错误。
- en: If you want to write a more long-form guide or tutorial, you may include this
    in the Sphinx documentation as a Markdown or RST file instead of putting it in
    a docstring. While this is not a requirement for new contributions, we are always
    looking to add new well-written long-form guides to our documentation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想写一份更详尽的指南或教程，可以将其包含在Sphinx文档中，格式为Markdown或RST文件，而不是放在文档字符串中。虽然这对新贡献并不是必需的，但我们始终欢迎添加新的写作精良的长篇指南到我们的文档中。
- en: Once you have made a pull request on GitHub, the CI will automatically build
    a preview of the documentation that you can view. On the pull request page, scroll
    to the bottom where the checks are, and find the link that says “Click here to
    see a preview of the documentation.”
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在GitHub上发起了拉取请求，CI将自动构建预览文档，您可以查看。在拉取请求页面，滚动到底部，找到显示“点击这里查看文档预览”的链接。
- en: '## Run the Tests'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '## 运行测试'
- en: There are several ways of running SymPy tests but the easiest is to use the
    `bin/test` script.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种运行SymPy测试的方法，但最简单的方法是使用`bin/test`脚本。
- en: The script takes a number of options and arguments. Run `bin/test --help` for
    all supported arguments. Under the hood it uses `pytest`, and you can use that
    directly as well if you prefer.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本接受多个选项和参数。运行`bin/test --help`以获取所有支持的参数。在幕后，它使用`pytest`，如果您喜欢，也可以直接使用它。
- en: 'Run all tests by using the command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行所有测试：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To run tests for a specific file, use:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行特定文件的测试，请使用：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Where `test_basic` is from file `sympy/core/basic.py`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`test_basic`来自文件`sympy/core/basic.py`。
- en: 'To run tests for modules, use:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行模块的测试，请使用：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will run tests for the `core` and `utilities` modules.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行`core`和`utilities`模块的测试。
- en: 'Similary, run quality tests with:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，运行质量测试：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Commit the changes
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交更改
- en: 'Once the changes are ready, you should commit them. You can check what files
    are changed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更改准备就绪，您应该提交它们。您可以检查哪些文件已更改：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Check total changes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 检查总体变更：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you created any new files, add them with:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建了任何新文件，请使用以下方式添加它们：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You are ready to commit changes locally. A commit also contains a `commit message`
    which describes it. See the next section for guidelines on writing good commit
    messages. Type:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经准备好在本地提交更改。提交还包括描述其内容的`commit message`。有关撰写良好提交消息的指南，请参阅下一节。输入：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: An editor window will appear automatically in this case. In Linux, this is vim
    by default. You can change what editor pops up by changing the `$EDITOR` shell
    variable.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将自动弹出编辑器窗口。在Linux中，默认情况下是vim。你可以通过更改`$EDITOR` shell变量来改变弹出的编辑器。
- en: 'Also with the help of option `-a` you can tell the command `commit` to automatically
    stage files that have been modified and deleted, but new files you have not told
    git about will not be affected, e.g.,:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过选项`-a`的帮助，您可以告诉`commit`命令自动暂存已修改和删除的文件，但您未告知git的新文件将不受影响，例如：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you want to stage only part of your changes, you can use the interactive
    commit feature. Just type:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想只暂存部分更改，可以使用交互式提交功能。只需键入：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: and choose the changes you want in the resulting interface.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 并选择你希望在结果界面中看到的更改。
- en: Deleting junk files
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除垃圾文件
- en: A lot of editors can create some configuration files, binary files, or temporary
    files in your SymPy directory, which should be removed before merging your commits.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 很多编辑器可能会在你的 SymPy 目录下创建一些配置文件、二进制文件或临时文件，在合并提交前应该将它们删除。
- en: Tracking down individual files can be cumbersome.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪单个文件可能很麻烦。
- en: You may think of using `.gitignore`, however, editing the `.gitignore` itself
    would have the agreement from the community.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会考虑使用 `.gitignore`，不过编辑 `.gitignore` 本身应该得到社区的同意。
- en: Using `.git/info/exclude` would be the best, because it is only applied locally.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `.git/info/exclude` 是最好的选择，因为它只在本地应用。
- en: '[https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files](https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files](https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files)'
- en: '[https://docs.github.com/get-started/getting-started-with-git/ignoring-files](https://docs.github.com/get-started/getting-started-with-git/ignoring-files)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.github.com/get-started/getting-started-with-git/ignoring-files](https://docs.github.com/get-started/getting-started-with-git/ignoring-files)'
- en: '### Writing commit messages'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '### 编写提交消息'
- en: 'The commit message has two parts: a title (first line) and the body. The two
    are separated by a blank line.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息有两部分：标题（第一行）和正文。两者之间用空行分隔。
- en: Commit messages summarize what the commit does. Just as with the code, your
    commit messages will become a permanent part of the project git history. So you
    should put some effort into making them high quality. Commit messages are intended
    for human readers, both for people who will be reviewing your code right now,
    and for people who might come across your commit in the future while researching
    some change in the code. Thus, include information that helps others understand
    your commit here, if necessary.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 提交消息总结了提交的操作。与代码一样，你的提交消息将成为项目 git 历史的永久部分。因此，你应该在确保高质量的基础上付出一些努力。提交消息是为人类读者准备的，既包括当前正在审查你代码的人，也包括未来在研究代码变更时可能遇到你的提交的人。因此，在这里包含有助于其他人理解你的提交的信息，如果有必要的话。
- en: Tools like `git shortlog` and the GitHub UI only show the first line of the
    commit by default, so it is important to convey the most important aspects of
    the commit in the first line.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `git shortlog` 和 GitHub UI 默认只显示提交的第一行，因此在第一行传达提交的最重要方面是很重要的。
- en: Keep the first line 71 characters or less and subsequent lines to 78 characters
    or less. This allows the one-line form of the log to display the summary without
    wrapping.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行保持 71 个字符或更少，后续行保持 78 个字符或更少。这样可以使日志的单行形式显示摘要而不换行。
- en: '**Make sure to leave a blank line after the summary**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保在摘要后留一行空白**'
- en: Do not end the first line with a period (full stop). Subsequent lines should
    use periods.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在第一行结束时使用句点（句号）。后续行应该使用句号。
- en: Provide context for the commit if possible,
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能的话，为提交提供上下文信息，
- en: 'e.g. `integrals: Improved speed of heurisch()` instead of just `Improved speed
    of heurisch()`'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '例如 `integrals: Improved speed of heurisch()` 而不是只有 `Improved speed of heurisch()`'
- en: Reference any relevant issue numbers. You do not need to reference the pull
    request for the change itself, but issues that are fixed should be referenced
    either by `#12345` or `https://github.com/sympy/sympy/issues/12345`. You should
    also provide a brief summary of an issue rather than just referring to the issue
    number so that people don’t have to look around for context.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用任何相关的问题编号。你不需要为更改本身引用拉取请求，但应该引用修复的问题，可以用 `#12345` 或 `https://github.com/sympy/sympy/issues/12345`。你还应该提供一个问题的简要摘要，而不仅仅是引用问题编号，这样别人就不必四处寻找上下文。
- en: A commit won’t always be seen in the context of your branch, so it is often
    helpful to give each commit some context. This is not required, though, as it
    is not hard to look at the commit metadata to see what files were modified or
    at the commit history to see the nearby related commits.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交不一定总是在你的分支上下文中看到，因此为每个提交提供一些上下文通常是有帮助的。虽然不是必需的，因为查看提交元数据以查看修改文件或查看附近相关提交的提交历史并不难。
- en: Use plain English. Write in complete sentences.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简洁明了的英语。使用完整的句子。
- en: Describe what actually changed. Don’t just write something like `Modified solvers.py`.
    People can already see what files are modified from the commit diff. What the
    message is there for is to tell them what the diff actually does, so they don’t
    have to try to figure it out. Similarly, although relevant issues should be cross-referenced
    as noted above, the message should contain enough of a basic summary that people
    can understand what is going on without having to look up the issue. The issue
    can provide more detailed context for people who are interested.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述实际发生了什么变化。不要只写像 `Modified solvers.py` 这样的简短提交消息。人们已经可以从提交的差异中看到修改了哪些文件。消息的目的是告诉他们差异实际上做了什么，这样他们就不必试图弄清楚。同样地，虽然应如上所述交叉引用相关问题，但消息应包含足够基本的摘要，以便人们可以理解正在发生什么，而无需查阅问题。对于感兴趣的人，问题可以提供更详细的背景信息。
- en: Try to avoid short commit messages, like “Fix”, and commit messages that give
    no context, like “Found the bug”. When in doubt, a longer commit message is probably
    better than a short one. Avoid using the `-m` switch to `git commit` to write
    a commit message on the command line. Rather, let it open your editor so you can
    write a longer commit message.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免使用像“Fix”这样的简短提交消息，以及不提供上下文的提交消息，比如“找到了 bug”。如果不确定，较长的提交消息可能比较好。避免使用 `-m`
    开关来 `git commit` 在命令行上编写提交消息。相反，让它打开您的编辑器，以便您可以写一个更长的提交消息。
- en: Give an overview of what the commit does if it is difficult to figure out just
    from looking at the diff.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果仅仅通过查看差异无法弄清楚，那么请提供提交的概述。
- en: Include other relevant information, e.g.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括其他相关信息，例如
- en: Known issues
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已知问题
- en: A concrete example (for commits that add new features/improve performance etc.)
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具体的例子（用于添加新功能/改进性能等的提交）
- en: Use bullet lists when suitable
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当适合时，请使用项目符号列表。
- en: Feel free to use Unicode characters, such as output from the SymPy Unicode pretty
    printer.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随意使用 Unicode 字符，例如来自 SymPy Unicode 漂亮打印机的输出。
- en: Example of a good commit message
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 良好提交消息的示例
- en: 'Here is an example commit message from the commit [bf0e81e12a2f75711c30f0788daf4e58f72b2a41](https://github.com/sympy/sympy/commit/bf0e81e12a2f75711c30f0788daf4e58f72b2a41),
    which is part of the SymPy history:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自提交 [bf0e81e12a2f75711c30f0788daf4e58f72b2a41](https://github.com/sympy/sympy/commit/bf0e81e12a2f75711c30f0788daf4e58f72b2a41)
    的提交消息示例，这是 SymPy 历史的一部分：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Co-Author
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 共同作者
- en: Occasionally, there can be multiple people working as a team for one PR, or
    you have applied some suggestions from the community.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔会有多人作为团队为一个 PR 工作，或者您已经应用了社区的一些建议。
- en: For these cases, you may use co-author feature of GitHub by adding
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，您可以使用 GitHub 的共同作者功能，通过添加
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: to the bottom of the commit message. See [https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors](https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交消息的底部。请参阅 [https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors](https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors)。
- en: Make a Pull Request
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个拉取请求
- en: Once your changes are ready for review, push them up to GitHub, and make a pull
    request.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的更改准备好进行审查，请将它们推送到 GitHub 并提交拉取请求。
- en: It is also OK to make a pull request before the changes are completely ready,
    to get some early feedback. It is better to get feedback early before you spend
    too much time on it. If your pull request is not completely ready for merging,
    open it in the “DRAFT” state on GitHub. You can also add “[WIP]” (which stands
    for “work in progress”) to the beginning of the pull request title to indicate
    this. Just be sure to remove the DRAFT state or [WIP] when your PR is ready for
    final review.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全准备好更改之前提交拉取请求也是可以的，以获取一些早期反馈。在投入过多时间之前，尽早获取反馈是更好的。如果您的拉取请求尚未完全准备好合并，请在 GitHub
    上将其设置为“草稿”状态。您还可以在拉取请求标题的开头添加“[WIP]”（表示“工作正在进行中”）来指示这一点。只需确保在您的 PR 准备好进行最终审查时删除“草稿”状态或
    [WIP]。
- en: Writing pull request title and description
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撰写拉取请求的标题和描述
- en: When you make a pull request, be sure to fill out the pull request description
    template. This includes adding cross-references to any relevant issues (with “fixes”
    if appropriate), and adding a release notes entry.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当您提交拉取请求时，请确保填写拉取请求描述模板。这包括添加对任何相关问题的交叉引用（如适用的话加上“修复”），以及添加发布说明条目。
- en: '**Descriptive titles are very important.** The pull request title should indicate
    what is fixed. Pull requests with undescriptive titles will tend to be ignored
    by reviewers.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性标题非常重要。** 拉取请求标题应指示修复了什么问题。具有不描述性标题的拉取请求通常会被审阅者忽略。'
- en: Examples of bad pull request titles are
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不好的拉取请求标题示例有
- en: “Modified solvers.py”
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “修改了 solvers.py”
- en: '“Fix issue #12345”'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“修复问题 #12345”'
- en: These do indicate to reviewers what is actually changed in the pull request,
    and hence, they are likely to just pass it over instead of reviewing it. An example
    of a better pull request title is
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些确实向审阅者指示了实际更改的内容，因此他们可能会仅仅浏览而不进行审查。更好的拉取请求标题示例包括
- en: “Fix a bug with solve() on transcendental functions”
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “修复了在超越函数上的 solve() 函数中的一个 bug”
- en: Do not put issue numbers or file names in the pull request title. Issue numbers
    should go in the description.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在拉取请求标题中不要包含问题编号或文件名。问题编号应该放在描述中。
- en: Use the DRAFT status or include the prefix “[WIP]” in the title if you aren’t
    ready to have the pull request merged and remove the status/prefix when you are
    ready.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您没有准备好合并拉取请求，请使用 DRAFT 状态或在标题中包含 “[WIP]” 前缀，并在准备就绪后移除状态/前缀。
- en: 'The description is a good place to:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 描述部分是：
- en: Show what you have done, perhaps comparing output from master with the output
    after your changes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示您的工作成果，可能会比较主分支的输出与您的更改后的输出
- en: 'Refer to the issue that was addressed like “#1234”; that format will automatically
    create a link to the corresponding issue or pull request, e.g. “This is similar
    to the problem in issue #1234…”. This format also works in the discussion section
    of the pull request.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '参考已解决的问题，例如“#1234”；该格式将自动创建到相应问题或拉取请求的链接，例如“这类似于问题 #1234 中的问题…”。此格式在拉取请求的讨论部分也适用。'
- en: 'Use phrases like “closes #1234” or “fixed #1234” (or similar that [follow the
    auto-close syntax](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)
    and are also [discussed here](https://github.blog/2013-05-14-closing-issues-via-pull-requests/)).
    Then those other issues or pull requests will be closed automatically when your
    pull request is merged. Note: this syntax does not work in the discussion of the
    pull request. See this [quick guide](https://github.com/sympy/sympy/wiki/Issue-PR-Autoclosing-syntax)
    for the valid and invalid syntax for automatically closing issues from pull requests.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用类似“closes #1234”或“fixed #1234”（或类似的 [自动关闭语法](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)）的短语。然后，当您的拉取请求合并时，那些其他问题或拉取请求将自动关闭。注意：此语法在拉取请求的讨论中不起作用。请参阅此
    [快速指南](https://github.com/sympy/sympy/wiki/Issue-PR-Autoclosing-syntax) 了解从拉取请求中自动关闭问题的有效和无效语法。'
- en: the pull request needs a release notes entry. See [https://github.com/sympy/sympy/wiki/Writing-Release-Notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes)
    on how to write release notes in the pull request description. The SymPy Bot will
    check that your PR has release notes automatically.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取请求需要一个发布说明条目。请参阅[编写发布说明](https://github.com/sympy/sympy/wiki/Writing-Release-Notes)以了解如何在拉取请求描述中编写发布说明。SymPy
    Bot 将自动检查您的 PR 是否有发布说明。
- en: It is best to just fill out the pull request template (the text that is there
    when you open a pull request). If you fill out all the sections in the template,
    you will have a good pull request description.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最好只填写拉取请求模板（在打开拉取请求时显示的文本）。如果您填写了模板中的所有部分，那么您将拥有一个很好的拉取请求描述。
- en: '### Add your name and email address to the .mailmap file.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '### 将您的姓名和电子邮件地址添加到 .mailmap 文件中。'
- en: Every author’s name and email address is stored in the [AUTHORS](https://github.com/sympy/sympy/blob/master/AUTHORS)
    file, but this file should not be edited directly. The AUTHORS file is updated
    automatically when a new version of SymPy is released based on the name and email
    addresses that are recorded in the commits. Every commit made with git stores
    the name and email address that git is configured with (see [Configure git settings](dev-setup.html#configure-git-settings)).
    The [.mailmap](https://github.com/sympy/sympy/blob/master/.mailmap) file is used
    to associate the name/email recorded in the commits with an author name and email
    address that will be listed in the AUTHORS file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 每位作者的姓名和电子邮件地址都存储在[AUTHORS](https://github.com/sympy/sympy/blob/master/AUTHORS)文件中，但不应直接编辑此文件。当基于提交记录的姓名和电子邮件地址发布SymPy的新版本时，AUTHORS文件将自动更新。使用git进行的每个提交都存储有git配置的名称和电子邮件地址（请参阅[配置git设置](dev-setup.html#configure-git-settings)）。[.mailmap](https://github.com/sympy/sympy/blob/master/.mailmap)文件用于将提交记录中记录的名称/电子邮件与将列在AUTHORS文件中的作者姓名和电子邮件地址关联起来。
- en: The first time you make a pull request you will need to add your name and email
    address to the .mailmap file by adding a line like
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次提交拉取请求时，您需要通过添加一行如下的方式将您的姓名和电子邮件地址添加到.mailmap文件中：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This line in the .mailmap file associates the author name with the corresponding
    commits. The first name and email address is what will eventually go in the AUTHORS
    file. The second entry is what is recorded in the commit metadata. (see [Mapping
    user names to AUTHORS file entry](#mailmap-mapping-names))
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: .mailmap文件中的这一行将作者姓名与相应的提交关联起来。第一个名称和电子邮件地址最终将显示在AUTHORS文件中。第二个条目是在提交元数据中记录的内容（请参阅[将用户名映射到AUTHORS文件条目](#mailmap-mapping-names)）。
- en: 'The commit metadata name and email should exactly match the name and email
    that you have configured with git before making the commits (see [Configure git
    settings](dev-setup.html#configure-git-settings)). The `bin/mailmap_check.py`
    script can check that this has been done correctly. If you have made a commit
    but not yet added yourself to the .mailmap file then you will see this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 提交的元数据名称和电子邮件应与进行提交之前通过git配置的名称和电子邮件完全匹配（请参阅[配置git设置](dev-setup.html#configure-git-settings)）。`bin/mailmap_check.py`脚本可以检查是否已正确执行此操作。如果您已进行提交但尚未将自己添加到.mailmap文件中，则会看到以下内容：
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This means that you should add your name and email address to the .mailmap
    file. If you add this at the end of the file then `git diff` will show:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您应该将您的姓名和电子邮件地址添加到.mailmap文件中。如果将此添加到文件末尾，则`git diff`将显示：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now you can rerun the `bin/mailmap_check.py` script and you should see:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以重新运行`bin/mailmap_check.py`脚本，您应该会看到：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The first line their says that the .mailmap file was “reordered”. This is because
    the file should be in alphabetical order. The script will have moved your name
    into the correct position so now you can see the change as:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行表示.mailmap文件已“重新排序”。这是因为文件应按字母顺序排列。脚本将移动您的名称到正确的位置，因此现在您可以看到更改如下所示：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now if you rerun the script you will see:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您重新运行脚本，您将看到：
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The key information here is “No changes needed in .mailmap” which means that
    you have correctly updated the .mailmap file. You should now add and commit these
    changes as well:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键信息是“在.mailmap中不需要更改”，这意味着您已经正确更新了.mailmap文件。您现在应该添加并提交这些更改：
- en: '[PRE27]  ### Mapping user names to AUTHORS file entry'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE27]  ### 将用户名映射到AUTHORS文件条目'
- en: 'Sometimes a commit will be made with an incorrect name or email address or
    an author will make multiple commits with different names and email addresses
    or an author wishes to use a proper name that differs from their github name.
    In this case a line should be added to the .mailmap file where the first name
    and email address is what should be recorded in the AUTHORS file and the others
    are the name and email address that was incorrectly used in the other commits.
    For example if the commit was recorded with the name `joeb` and the email address
    `wrong@email.com` but the AUTHORS file should show `Joe Bloggs` as above then
    there should be a line in the .mailmap file like:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会使用错误的名称或电子邮件地址进行提交，或者作者会使用不同的名称和电子邮件地址进行多次提交，或者作者希望使用与其GitHub名称不同的适当名称。在这种情况下，应向.mailmap文件添加一行，其中第一个名称和电子邮件地址是应在AUTHORS文件中记录的内容，而其他名称和电子邮件地址则是在其他提交中错误使用的名称和电子邮件地址。例如，如果提交记录的名称为`joeb`和电子邮件地址为`wrong@email.com`，但AUTHORS文件应显示如上所示的`Joe
    Bloggs`，则.mailmap文件中应有如下一行：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'A common reason that this can happen is if making commits with the GitHub web
    UI which always recorded the name as github username and the email as something
    like `1785690389+joeb@users.noreply.github.com`. In this case a line will need
    to be added to .mailmap like:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况经常发生的一个原因是使用GitHub网页界面进行提交，它总是将名称记录为GitHub用户名，电子邮件地址类似于`1785690389+joeb@users.noreply.github.com`。在这种情况下，需要向.mailmap文件添加一行，例如：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Multiple lines like this can be added to the .mailmap file. They should record
    all of the different name and email address combinations that have been used by
    an author and map all of them to a single author name that will show in the AUTHORS
    file.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 多行文本可以添加到.mailmap文件中。它们应记录作者使用过的所有不同名称和电子邮件地址组合，并将它们映射到一个在AUTHORS文件中显示的单个作者名字。
- en: If your pull request is merged and you have not previously been added to the
    AUTHORS file then your name will be added at the time of the next release of SymPy.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的拉取请求已合并且之前尚未添加到AUTHORS文件，则在SymPy的下一个发布时将会添加您的名字。
