- en: scipy.stats.studentized_range
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.studentized_range.html#scipy.stats.studentized_range](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.studentized_range.html#scipy.stats.studentized_range)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A studentized range continuous random variable.
  prefs: []
  type: TYPE_NORMAL
- en: As an instance of the [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous") class, [`studentized_range`](#scipy.stats.studentized_range
    "scipy.stats.studentized_range") object inherits from it a collection of generic
    methods (see below for the full list), and completes them with details specific
    for this particular distribution.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`t`](scipy.stats.t.html#scipy.stats.t "scipy.stats.t")'
  prefs: []
  type: TYPE_NORMAL
- en: Student’s t distribution
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`studentized_range`](#scipy.stats.studentized_range
    "scipy.stats.studentized_range") is:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x; k, \nu) = \frac{k(k-1)\nu^{\nu/2}}{\Gamma(\nu/2) 2^{\nu/2-1}} \int_{0}^{\infty}
    \int_{-\infty}^{\infty} s^{\nu} e^{-\nu s^2/2} \phi(z) \phi(sx + z) [\Phi(sx +
    z) - \Phi(z)]^{k-2} \,dz \,ds\]
  prefs: []
  type: TYPE_NORMAL
- en: for \(x ≥ 0\), \(k > 1\), and \(\nu > 0\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`studentized_range`](#scipy.stats.studentized_range "scipy.stats.studentized_range")
    takes `k` for \(k\) and `df` for \(\nu\) as shape parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: When \(\nu\) exceeds 100,000, an asymptotic approximation (infinite degrees
    of freedom) is used to compute the cumulative distribution function [[4]](#r36a75a8efee8-4)
    and probability distribution function.
  prefs: []
  type: TYPE_NORMAL
- en: The probability density above is defined in the “standardized” form. To shift
    and/or scale the distribution use the `loc` and `scale` parameters. Specifically,
    `studentized_range.pdf(x, k, df, loc, scale)` is identically equivalent to `studentized_range.pdf(y,
    k, df) / scale` with `y = (x - loc) / scale`. Note that shifting the location
    of a distribution does not make it a “noncentral” distribution; noncentral generalizations
    of some distributions are available in separate classes.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: “Studentized range distribution”, [https://en.wikipedia.org/wiki/Studentized_range_distribution](https://en.wikipedia.org/wiki/Studentized_range_distribution)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Batista, Ben Dêivide, et al. “Externally Studentized Normal Midrange Distribution.”
    Ciência e Agrotecnologia, vol. 41, no. 4, 2017, pp. 378-389., doi:10.1590/1413-70542017414047716.
  prefs: []
  type: TYPE_NORMAL
- en: '[3]'
  prefs: []
  type: TYPE_NORMAL
- en: Harter, H. Leon. “Tables of Range and Studentized Range.” The Annals of Mathematical
    Statistics, vol. 31, no. 4, 1960, pp. 1122-1147. JSTOR, www.jstor.org/stable/2237810\.
    Accessed 18 Feb. 2021.
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lund, R. E., and J. R. Lund. “Algorithm AS 190: Probabilities and Upper Quantiles
    for the Studentized Range.” Journal of the Royal Statistical Society. Series C
    (Applied Statistics), vol. 32, no. 2, 1983, pp. 204-210\. JSTOR, www.jstor.org/stable/2347300\.
    Accessed 18 Feb. 2021.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the first four moments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the probability density function (`pdf`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the distribution object can be called (as a function) to fix
    the shape, location and scale parameters. This returns a “frozen” RV object holding
    the given parameters fixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Freeze the distribution and display the frozen `pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check accuracy of `cdf` and `ppf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Rather than using (`studentized_range.rvs`) to generate random variates, which
    is very slow for this distribution, we can approximate the inverse CDF using an
    interpolator, and then perform inverse transform sampling with this approximate
    inverse CDF.
  prefs: []
  type: TYPE_NORMAL
- en: This distribution has an infinite but thin right tail, so we focus our attention
    on the leftmost 99.9 percent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And compare the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-studentized_range-1.png](../Images/104413898a48ef2f266f02879bd1b4d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **rvs(k, df, loc=0, scale=1, size=1, random_state=None)** | Random variates.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **pdf(x, k, df, loc=0, scale=1)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, k, df, loc=0, scale=1)** | Log of the probability density function.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cdf(x, k, df, loc=0, scale=1)** | Cumulative distribution function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logcdf(x, k, df, loc=0, scale=1)** | Log of the cumulative distribution
    function. |'
  prefs: []
  type: TYPE_TB
- en: '| **sf(x, k, df, loc=0, scale=1)** | Survival function (also defined as `1
    - cdf`, but *sf* is sometimes more accurate). |'
  prefs: []
  type: TYPE_TB
- en: '| **logsf(x, k, df, loc=0, scale=1)** | Log of the survival function. |'
  prefs: []
  type: TYPE_TB
- en: '| **ppf(q, k, df, loc=0, scale=1)** | Percent point function (inverse of `cdf`
    — percentiles). |'
  prefs: []
  type: TYPE_TB
- en: '| **isf(q, k, df, loc=0, scale=1)** | Inverse survival function (inverse of
    `sf`). |'
  prefs: []
  type: TYPE_TB
- en: '| **moment(order, k, df, loc=0, scale=1)** | Non-central moment of the specified
    order. |'
  prefs: []
  type: TYPE_TB
- en: '| **stats(k, df, loc=0, scale=1, moments=’mv’)** | Mean(‘m’), variance(‘v’),
    skew(‘s’), and/or kurtosis(‘k’). |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(k, df, loc=0, scale=1)** | (Differential) entropy of the RV. |'
  prefs: []
  type: TYPE_TB
- en: '| **fit(data)** | Parameter estimates for generic data. See [scipy.stats.rv_continuous.fit](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_continuous.fit.html#scipy.stats.rv_continuous.fit)
    for detailed documentation of the keyword arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| **expect(func, args=(k, df), loc=0, scale=1, lb=None, ub=None, conditional=False,
    **kwds)** | Expected value of a function (of one argument) with respect to the
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **median(k, df, loc=0, scale=1)** | Median of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(k, df, loc=0, scale=1)** | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(k, df, loc=0, scale=1)** | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **std(k, df, loc=0, scale=1)** | Standard deviation of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **interval(confidence, k, df, loc=0, scale=1)** | Confidence interval with
    equal areas around the median. |'
  prefs: []
  type: TYPE_TB
