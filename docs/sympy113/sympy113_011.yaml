- en: Calculus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微积分
- en: Original text：[https://docs.sympy.org/latest/tutorials/intro-tutorial/calculus.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/calculus.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/tutorials/intro-tutorial/calculus.html](https://docs.sympy.org/latest/tutorials/intro-tutorial/calculus.html)
- en: This section covers how to do basic calculus tasks such as derivatives, integrals,
    limits, and series expansions in SymPy. If you are not familiar with the math
    of any part of this section, you may safely skip it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了如何在SymPy中执行基本的微积分任务，例如导数、积分、极限和级数展开。如果您对本节的任何数学内容不熟悉，可以放心跳过。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '## Derivatives'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '## 导数'
- en: To take derivatives, use the `diff` function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行导数计算，请使用`diff`函数。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`diff` can take multiple derivatives at once. To take multiple derivatives,
    pass the variable as many times as you wish to differentiate, or pass a number
    after the variable. For example, both of the following find the third derivative
    of \(x^4\).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`可以一次进行多个导数的计算。要进行多次导数计算，传递变量多少次即可，或在变量后传递一个数字。例如，以下两个示例都找到了\(x^4\)的三阶导数。'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can also take derivatives with respect to many variables at once. Just pass
    each derivative in order, using the same syntax as for single variable derivatives.
    For example, each of the following will compute \(\frac{\partial^7}{\partial x\partial
    y^2\partial z^4} e^{x y z}\).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以一次性相对多个变量进行导数计算。只需按顺序传递每个导数，使用与单变量导数相同的语法。例如，以下每个示例都将计算\(\frac{\partial^7}{\partial
    x\partial y^2\partial z^4} e^{x y z}\)。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`diff` can also be called as a method. The two ways of calling `diff` are exactly
    the same, and are provided only for convenience.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`diff`也可以作为方法调用。调用`diff`的两种方式完全相同，仅为方便起见。'
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To create an unevaluated derivative, use the `Derivative` class. It has the
    same syntax as `diff`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个未计算的导数，请使用`Derivative`类。它具有与`diff`相同的语法。
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To evaluate an unevaluated derivative, use the `doit` method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算未计算的导数，使用`doit`方法。
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These unevaluated objects are useful for delaying the evaluation of the derivative,
    or for printing purposes. They are also used when SymPy does not know how to compute
    the derivative of an expression (for example, if it contains an undefined function,
    which are described in the [Solving Differential Equations](solvers.html#tutorial-dsolve)
    section).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些未计算的对象对于延迟导数的计算或打印目的非常有用。当SymPy不知道如何计算表达式的导数时（例如，如果它包含未定义的函数，这些函数在[Solving
    Differential Equations](solvers.html#tutorial-dsolve)部分中描述），它们也会被使用。
- en: Derivatives of unspecified order can be created using tuple `(x, n)` where `n`
    is the order of the derivative with respect to `x`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用元组`(x, n)`创建未指定顺序的导数，其中`n`是相对于`x`的导数的阶数。
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Integrals
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 积分
- en: To compute an integral, use the `integrate` function. There are two kinds of
    integrals, definite and indefinite. To compute an indefinite integral, that is,
    an antiderivative, or primitive, just pass the variable after the expression.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算积分，请使用`integrate`函数。有两种积分类型，即定积分和不定积分。要计算不定积分，即反导数或原函数，只需在表达式后传递变量。
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that SymPy does not include the constant of integration. If you want it,
    you can add one yourself, or rephrase your problem as a differential equation
    and use `dsolve` to solve it, which does add the constant (see [Solving Differential
    Equations](solvers.html#tutorial-dsolve)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，SymPy不包括积分常数。如果需要，您可以自行添加，或将问题重新表述为微分方程并使用`dsolve`来解决，后者会添加常数（请参阅[Solving
    Differential Equations](solvers.html#tutorial-dsolve)）。
- en: To compute a definite integral, pass the argument `(integration_variable, lower_limit,
    upper_limit)`. For example, to compute
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算定积分，请传递参数`(integration_variable, lower_limit, upper_limit)`。例如，要计算
- en: \[\int_0^\infty e^{-x}\,dx,\]
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: \[\int_0^\infty e^{-x}\,dx,\]
- en: we would do
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As with indefinite integrals, you can pass multiple limit tuples to perform
    a multiple integral. For example, to compute
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与不定积分一样，您可以传递多个限制元组以执行多重积分。例如，要计算
- en: \[\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} e^{- x^{2} - y^{2}}\, dx\,
    dy,\]
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: \[\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} e^{- x^{2} - y^{2}}\, dx\,
    dy,\]
- en: do
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 原文：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If `integrate` is unable to compute an integral, it returns an unevaluated `Integral`
    object.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`integrate`无法计算积分，它会返回一个未计算的`Integral`对象。
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As with `Derivative`, you can create an unevaluated integral using `Integral`.
    To later evaluate this integral, call `doit`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Derivative`一样，您可以使用`Integral`创建一个未计算的积分。要稍后评估此积分，请调用`doit`。
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`integrate` uses powerful algorithms that are always improving to compute both
    definite and indefinite integrals, including heuristic pattern matching type algorithms,
    a partial implementation of the [Risch algorithm](https://en.wikipedia.org/wiki/Risch_algorithm),
    and an algorithm using [Meijer G-functions](https://en.wikipedia.org/wiki/Meijer_g-function)
    that is useful for computing integrals in terms of special functions, especially
    definite integrals. Here is a sampling of some of the power of `integrate`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`integrate`使用强大的算法来计算定积分和不定积分，包括启发式模式匹配类型算法、[Risch算法](https://en.wikipedia.org/wiki/Risch_algorithm)的部分实现以及使用[Meijer
    G函数](https://en.wikipedia.org/wiki/Meijer_g-function)的算法，后者特别适用于以特殊函数形式计算积分，尤其是定积分。以下是`integrate`的一些强大功能示例。'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This last example returned a `Piecewise` expression because the integral does
    not converge unless \(\Re(y) > -1.\)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的例子返回了一个`Piecewise`表达式，因为积分只有在\(\Re(y) > -1.\)时才收敛。
- en: Numeric Integration
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值积分
- en: Numeric integration is a method employed in mathematical analysis to estimate
    the definite integral of a function across a simplified range. SymPy not only
    facilitates symbolic integration but also provides support for numeric integration.
    It leverages the precision capabilities of the `mpmath` library to enhance the
    accuracy of numeric integration calculations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数值积分是数学分析中用来估计函数在简化范围内定积分的方法。SymPy不仅支持符号积分，还支持数值积分。它利用`mpmath`库的精度功能来增强数值积分计算的准确性。
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To compute the integral with a specified precision:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算具有指定精度的积分：
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Numeric integration becomes a viable approach in situations where symbolic
    integration is impractical or impossible. This method allows for the computation
    of integrals through numerical techniques, even when dealing with infinite intervals
    or integrands:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数值积分在符号积分不可行或不可能的情况下成为一种可行的方法。这种方法允许通过数值技术计算积分，即使处理无限区间或被积函数时也是如此：
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Limits
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极限
- en: SymPy can compute symbolic limits with the `limit` function. The syntax to compute
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy可以使用`limit`函数计算符号极限。计算
- en: \[\lim_{x\to x_0} f(x)\]
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: \[\lim_{x\to x_0} f(x)\]
- en: is `limit(f(x), x, x0)`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 是`limit(f(x), x, x0)`。
- en: '[PRE20]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`limit` should be used instead of `subs` whenever the point of evaluation is
    a singularity. Even though SymPy has objects to represent \(\infty\), using them
    for evaluation is not reliable because they do not keep track of things like rate
    of growth. Also, things like \(\infty - \infty\) and \(\frac{\infty}{\infty}\)
    return \(\mathrm{nan}\) (not-a-number). For example'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当评估点是奇点时，应该使用`limit`而不是`subs`。尽管SymPy有表示\(\infty\)的对象，但在评估时不可靠，因为它们不会跟踪增长速度等信息。此外，诸如\(\infty
    - \infty\)和\(\frac{\infty}{\infty}\)会返回\(\mathrm{nan}\)（非数字）。例如
- en: '[PRE21]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Like `Derivative` and `Integral`, `limit` has an unevaluated counterpart, `Limit`.
    To evaluate it, use `doit`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Derivative`和`Integral`类似，`limit`也有一个未求值的对应物`Limit`。要对其求值，请使用`doit`。
- en: '[PRE22]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To evaluate a limit at one side only, pass `'+'` or `'-'` as a fourth argument
    to `limit`. For example, to compute
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在单侧计算极限，将`'+'`或`'-'`作为第四个参数传递给`limit`函数。例如，要计算
- en: \[\lim_{x\to 0^+}\frac{1}{x},\]
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: \[\lim_{x\to 0^+}\frac{1}{x},\]
- en: do
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 做
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As opposed to
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Series Expansion
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 级数展开
- en: SymPy can compute asymptotic series expansions of functions around a point.
    To compute the expansion of \(f(x)\) around the point \(x = x_0\) terms of order
    \(x^n\), use `f(x).series(x, x0, n)`. `x0` and `n` can be omitted, in which case
    the defaults `x0=0` and `n=6` will be used.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy可以计算函数在某点周围的渐近级数展开。要计算\(f(x)\)在点\(x = x_0\)处的\(x^n\)阶展开，可以使用`f(x).series(x,
    x0, n)`。可以省略`x0`和`n`，此时将使用默认值`x0=0`和`n=6`。
- en: '[PRE25]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The \(O\left(x^4\right)\) term at the end represents the Landau order term at
    \(x=0\) (not to be confused with big O notation used in computer science, which
    generally represents the Landau order term at \(x\) where \(x \rightarrow \infty\)).
    It means that all x terms with power greater than or equal to \(x^4\) are omitted.
    Order terms can be created and manipulated outside of `series`. They automatically
    absorb higher order terms.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结尾处的\(O\left(x^4\right)\)项表示在\(x=0\)处的Landau阶次项（不要与计算机科学中使用的大O符号混淆，后者通常表示\(x
    \rightarrow \infty\)时的Landau阶次项）。它意味着所有幂次大于或等于\(x^4\)的x项都被省略了。阶次项可以在`series`之外创建和操作。它们会自动吸收更高阶次的项。
- en: '[PRE26]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If you do not want the order term, use the `removeO` method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不想要顺序项，请使用`removeO`方法。
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `O` notation supports arbitrary limit points (other than 0):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`O`符号支持任意的极限点（非0）：'
- en: '[PRE28]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '## Finite differences'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '## 有限差分'
- en: So far we have looked at expressions with analytic derivatives and primitive
    functions respectively. But what if we want to have an expression to estimate
    a derivative of a curve for which we lack a closed form representation, or for
    which we don’t know the functional values for yet. One approach would be to use
    a finite difference approach.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们分别查看了具有解析导数和原始函数的表达式。但是，如果我们想要估计缺乏闭合形式表示的曲线的导数，或者我们尚不知道其功能值，该怎么办呢？一种方法是使用有限差分方法。
- en: 'The simplest way the differentiate using finite differences is to use the `differentiate_finite`
    function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用有限差分最简单的方法是使用`differentiate_finite`函数：
- en: '[PRE29]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you already have a `Derivative` instance, you can use the `as_finite_difference`
    method to generate approximations of the derivative to arbitrary order:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个`Derivative`实例，可以使用`as_finite_difference`方法生成任意阶导数的近似值：
- en: '[PRE30]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'here the first order derivative was approximated around x using a minimum number
    of points (2 for 1st order derivative) evaluated equidistantly using a step-size
    of 1\. We can use arbitrary steps (possibly containing symbolic expressions):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里对x周围的一阶导数使用了最少数量的点（一阶导数为2个点），等间距地使用步长为1进行评估。我们可以使用任意步长（可能包含符号表达式）：
- en: '[PRE31]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you are just interested in evaluating the weights, you can do so manually:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只对评估权重感兴趣，可以手动执行：
- en: '[PRE32]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: note that we only need the last element in the last sublist returned from `finite_diff_weights`.
    The reason for this is that the function also generates weights for lower derivatives
    and using fewer points (see the documentation of `finite_diff_weights` for more
    details).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们只需要从`finite_diff_weights`返回的最后一个子列表的最后一个元素。原因是该函数还为更低阶导数生成权重，并且使用更少的点（详见`finite_diff_weights`的文档以获取更多详情）。
- en: 'If using `finite_diff_weights` directly looks complicated, and the `as_finite_difference`
    method of `Derivative` instances is not flexible enough, you can use `apply_finite_diff`
    which takes `order`, `x_list`, `y_list` and `x0` as parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果直接使用`finite_diff_weights`看起来复杂，并且`Derivative`实例的`as_finite_difference`方法不够灵活，你可以使用`apply_finite_diff`，它接受`order`、`x_list`、`y_list`和`x0`作为参数：
- en: '[PRE33]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
