- en: scipy.optimize.fminbound
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fminbound.html#scipy.optimize.fminbound](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.fminbound.html#scipy.optimize.fminbound)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Bounded minimization for scalar functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**func**callable f(x,*args)'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function to be minimized (must accept and return scalars).
  prefs: []
  type: TYPE_NORMAL
- en: '**x1, x2**float or array scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Finite optimization bounds.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to function.
  prefs: []
  type: TYPE_NORMAL
- en: '**xtol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The convergence tolerance.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxfun**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of function evaluations allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**full_output**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, return optional outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**disp**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If non-zero, print messages.
  prefs: []
  type: TYPE_NORMAL
- en: '0 : no message printing. 1 : non-convergence notification messages only. 2
    : print a message on convergence too. 3 : print iteration results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xopt**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters (over given interval) which minimize the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**fval**number'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) The function value evaluated at the minimizer.
  prefs: []
  type: TYPE_NORMAL
- en: '**ierr**int'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) An error flag (0 if converged, 1 if maximum number of function
    calls reached).
  prefs: []
  type: TYPE_NORMAL
- en: '**numfunc**int'
  prefs: []
  type: TYPE_NORMAL
- en: (Optional output) The number of function calls made.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize_scalar`](scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar
    "scipy.optimize.minimize_scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for scalar univariate functions. See the
    ‘Bounded’ *method* in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Finds a local minimizer of the scalar function *func* in the interval x1 < xopt
    < x2 using Brent’s method. (See [`brent`](scipy.optimize.brent.html#scipy.optimize.brent
    "scipy.optimize.brent") for auto-bracketing.)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Forsythe, G.E., M. A. Malcolm, and C. B. Moler. “Computer Methods for Mathematical
    Computations.” Prentice-Hall Series in Automatic Computation 259 (1977).
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Brent, Richard P. Algorithms for Minimization Without Derivatives. Courier Corporation,
    2013.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[`fminbound`](#scipy.optimize.fminbound "scipy.optimize.fminbound") finds the
    minimizer of the function in the given range. The following examples illustrate
    this.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
