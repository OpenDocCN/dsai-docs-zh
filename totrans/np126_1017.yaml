- en: numpy.histogram_bin_edges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.histogram_bin_edges.html](https://numpy.org/doc/1.26/reference/generated/numpy.histogram_bin_edges.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Function to calculate only the edges of the bins used by the [`histogram`](numpy.histogram.html#numpy.histogram
    "numpy.histogram") function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input data. The histogram is computed over the flattened array.
  prefs: []
  type: TYPE_NORMAL
- en: '**bins**int or sequence of scalars or str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *bins* is an int, it defines the number of equal-width bins in the given
    range (10, by default). If *bins* is a sequence, it defines the bin edges, including
    the rightmost edge, allowing for non-uniform bin widths.
  prefs: []
  type: TYPE_NORMAL
- en: If *bins* is a string from the list below, [`histogram_bin_edges`](#numpy.histogram_bin_edges
    "numpy.histogram_bin_edges") will use the method chosen to calculate the optimal
    bin width and consequently the number of bins (see *Notes* for more detail on
    the estimators) from the data that falls within the requested range. While the
    bin width will be optimal for the actual data in the range, the number of bins
    will be computed to fill the entire range, including the empty portions. For visualisation,
    using the ‘auto’ option is suggested. Weighted data is not supported for automated
    bin size selection.
  prefs: []
  type: TYPE_NORMAL
- en: ‘auto’
  prefs: []
  type: TYPE_NORMAL
- en: Maximum of the ‘sturges’ and ‘fd’ estimators. Provides good all around performance.
  prefs: []
  type: TYPE_NORMAL
- en: ‘fd’ (Freedman Diaconis Estimator)
  prefs: []
  type: TYPE_NORMAL
- en: Robust (resilient to outliers) estimator that takes into account data variability
    and data size.
  prefs: []
  type: TYPE_NORMAL
- en: ‘doane’
  prefs: []
  type: TYPE_NORMAL
- en: An improved version of Sturges’ estimator that works better with non-normal
    datasets.
  prefs: []
  type: TYPE_NORMAL
- en: ‘scott’
  prefs: []
  type: TYPE_NORMAL
- en: Less robust estimator that takes into account data variability and data size.
  prefs: []
  type: TYPE_NORMAL
- en: ‘stone’
  prefs: []
  type: TYPE_NORMAL
- en: Estimator based on leave-one-out cross-validation estimate of the integrated
    squared error. Can be regarded as a generalization of Scott’s rule.
  prefs: []
  type: TYPE_NORMAL
- en: ‘rice’
  prefs: []
  type: TYPE_NORMAL
- en: Estimator does not take variability into account, only data size. Commonly overestimates
    number of bins required.
  prefs: []
  type: TYPE_NORMAL
- en: ‘sturges’
  prefs: []
  type: TYPE_NORMAL
- en: R’s default method, only accounts for data size. Only optimal for gaussian data
    and underestimates number of bins for large non-gaussian datasets.
  prefs: []
  type: TYPE_NORMAL
- en: ‘sqrt’
  prefs: []
  type: TYPE_NORMAL
- en: Square root (of data size) estimator, used by Excel and other programs for its
    speed and simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: '**range**(float, float), optional'
  prefs: []
  type: TYPE_NORMAL
- en: The lower and upper range of the bins. If not provided, range is simply `(a.min(),
    a.max())`. Values outside the range are ignored. The first element of the range
    must be less than or equal to the second. *range* affects the automatic bin computation
    as well. While bin width is computed to be optimal based on the actual data within
    *range*, the bin count will fill the entire range including portions containing
    no data.
  prefs: []
  type: TYPE_NORMAL
- en: '**weights**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: An array of weights, of the same shape as *a*. Each value in *a* only contributes
    its associated weight towards the bin count (instead of 1). This is currently
    not used by any of the bin estimators, but may be in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**bin_edges**array of dtype float'
  prefs: []
  type: TYPE_NORMAL
- en: The edges to pass into [`histogram`](numpy.histogram.html#numpy.histogram "numpy.histogram")
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`histogram`](numpy.histogram.html#numpy.histogram "numpy.histogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The methods to estimate the optimal number of bins are well founded in literature,
    and are inspired by the choices R provides for histogram visualisation. Note that
    having the number of bins proportional to \(n^{1/3}\) is asymptotically optimal,
    which is why it appears in most estimators. These are simply plug-in methods that
    give good starting points for number of bins. In the equations below, \(h\) is
    the binwidth and \(n_h\) is the number of bins. All estimators that compute bin
    counts are recast to bin width using the [`ptp`](numpy.ptp.html#numpy.ptp "numpy.ptp")
    of the data. The final bin count is obtained from `np.round(np.ceil(range / h))`.
    The final bin width is often less than what is returned by the estimators below.
  prefs: []
  type: TYPE_NORMAL
- en: ‘auto’ (maximum of the ‘sturges’ and ‘fd’ estimators)
  prefs: []
  type: TYPE_NORMAL
- en: A compromise to get a good value. For small datasets the Sturges value will
    usually be chosen, while larger datasets will usually default to FD. Avoids the
    overly conservative behaviour of FD and Sturges for small and large datasets respectively.
    Switchover point is usually \(a.size \approx 1000\).
  prefs: []
  type: TYPE_NORMAL
- en: ‘fd’ (Freedman Diaconis Estimator)
  prefs: []
  type: TYPE_NORMAL
- en: \[h = 2 \frac{IQR}{n^{1/3}}\]
  prefs: []
  type: TYPE_NORMAL
- en: The binwidth is proportional to the interquartile range (IQR) and inversely
    proportional to cube root of a.size. Can be too conservative for small datasets,
    but is quite good for large datasets. The IQR is very robust to outliers.
  prefs: []
  type: TYPE_NORMAL
- en: ‘scott’
  prefs: []
  type: TYPE_NORMAL
- en: \[h = \sigma \sqrt[3]{\frac{24 \sqrt{\pi}}{n}}\]
  prefs: []
  type: TYPE_NORMAL
- en: The binwidth is proportional to the standard deviation of the data and inversely
    proportional to cube root of `x.size`. Can be too conservative for small datasets,
    but is quite good for large datasets. The standard deviation is not very robust
    to outliers. Values are very similar to the Freedman-Diaconis estimator in the
    absence of outliers.
  prefs: []
  type: TYPE_NORMAL
- en: ‘rice’
  prefs: []
  type: TYPE_NORMAL
- en: \[n_h = 2n^{1/3}\]
  prefs: []
  type: TYPE_NORMAL
- en: The number of bins is only proportional to cube root of `a.size`. It tends to
    overestimate the number of bins and it does not take into account data variability.
  prefs: []
  type: TYPE_NORMAL
- en: ‘sturges’
  prefs: []
  type: TYPE_NORMAL
- en: \[n_h = \log _{2}(n) + 1\]
  prefs: []
  type: TYPE_NORMAL
- en: The number of bins is the base 2 log of `a.size`. This estimator assumes normality
    of data and is too conservative for larger, non-normal datasets. This is the default
    method in R’s `hist` method.
  prefs: []
  type: TYPE_NORMAL
- en: ‘doane’
  prefs: []
  type: TYPE_NORMAL
- en: \[ \begin{align}\begin{aligned}n_h = 1 + \log_{2}(n) + \log_{2}\left(1 + \frac{|g_1|}{\sigma_{g_1}}\right)\\g_1
    = mean\left[\left(\frac{x - \mu}{\sigma}\right)^3\right]\\\sigma_{g_1} = \sqrt{\frac{6(n
    - 2)}{(n + 1)(n + 3)}}\end{aligned}\end{align} \]
  prefs: []
  type: TYPE_NORMAL
- en: An improved version of Sturges’ formula that produces better estimates for non-normal
    datasets. This estimator attempts to account for the skew of the data.
  prefs: []
  type: TYPE_NORMAL
- en: ‘sqrt’
  prefs: []
  type: TYPE_NORMAL
- en: \[n_h = \sqrt n\]
  prefs: []
  type: TYPE_NORMAL
- en: The simplest and fastest estimator. Only takes into account the data size.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For consistency with histogram, an array of pre-computed bins is passed through
    unmodified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This function allows one set of bins to be computed, and reused across multiple
    histograms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Which gives more easily comparable results than using separate bins for each
    histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
