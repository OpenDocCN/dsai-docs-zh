- en: C-Types foreign function interface (numpy.ctypeslib)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.ctypeslib.html](https://numpy.org/doc/1.26/reference/routines.ctypeslib.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a numpy array from a ctypes array or POINTER.
  prefs: []
  type: TYPE_NORMAL
- en: The numpy array shares the memory with the ctypes object.
  prefs: []
  type: TYPE_NORMAL
- en: The shape parameter must be given if converting from a ctypes POINTER. The shape
    parameter is ignored if converting from a ctypes array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create and return a ctypes object from a numpy array. Actually anything that
    exposes the __array_interface__ is accepted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Convert a dtype into a ctypes type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**dtype'
  prefs: []
  type: TYPE_NORMAL
- en: The dtype to convert
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ctype
  prefs: []
  type: TYPE_NORMAL
- en: A ctype scalar, union, array, or struct
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: NotImplementedError
  prefs: []
  type: TYPE_NORMAL
- en: If the conversion is not possible
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function does not losslessly round-trip in either direction.
  prefs: []
  type: TYPE_NORMAL
- en: '`np.dtype(as_ctypes_type(dt))` will:'
  prefs: []
  type: TYPE_NORMAL
- en: insert padding fields
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: reorder fields to be sorted by offset
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: discard field titles
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '`as_ctypes_type(np.dtype(ctype))` will:'
  prefs: []
  type: TYPE_NORMAL
- en: discard the class names of [`ctypes.Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure
    "(in Python v3.11)")s and [`ctypes.Union`](https://docs.python.org/3/library/ctypes.html#ctypes.Union
    "(in Python v3.11)")s
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: convert single-element [`ctypes.Union`](https://docs.python.org/3/library/ctypes.html#ctypes.Union
    "(in Python v3.11)")s into single-element [`ctypes.Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure
    "(in Python v3.11)")s
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: insert padding fields
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to load a library using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: But there are cross-platform considerations, such as library file extensions,
    plus the fact Windows will just load the first library it finds with that name.
    NumPy supplies the load_library function as a convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.20.0: Allow libname and loader_path to take any [path-like
    object](https://docs.python.org/3/glossary.html#term-path-like-object "(in Python
    v3.11)").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**libname**path-like'
  prefs: []
  type: TYPE_NORMAL
- en: Name of the library, which can have ‘lib’ as a prefix, but without an extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**loader_path**path-like'
  prefs: []
  type: TYPE_NORMAL
- en: Where the library can be found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ctypes.cdll[libpath]**library object'
  prefs: []
  type: TYPE_NORMAL
- en: A ctypes library object
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: OSError
  prefs: []
  type: TYPE_NORMAL
- en: If there is no library with the expected extension, or the library is defective
    and cannot be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Array-checking restype/argtypes.
  prefs: []
  type: TYPE_NORMAL
- en: An ndpointer instance is used to describe an ndarray in restypes and argtypes
    specifications. This approach is more flexible than using, for example, `POINTER(c_double)`,
    since several restrictions can be specified, which are verified upon calling the
    ctypes function. These include data type, number of dimensions, shape and flags.
    If a given array does not satisfy the specified restrictions, a `TypeError` is
    raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Array data-type.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndim**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Array shape.
  prefs: []
  type: TYPE_NORMAL
- en: '**flags**str or tuple of str'
  prefs: []
  type: TYPE_NORMAL
- en: 'Array flags; may be one or more of:'
  prefs: []
  type: TYPE_NORMAL
- en: C_CONTIGUOUS / C / CONTIGUOUS
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: F_CONTIGUOUS / F / FORTRAN
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: OWNDATA / O
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: WRITEABLE / W
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ALIGNED / A
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: WRITEBACKIFCOPY / X
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**klass**ndpointer type object'
  prefs: []
  type: TYPE_NORMAL
- en: A type object, which is an `_ndtpr` instance containing dtype, ndim, shape and
    flags information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If a given array does not satisfy the specified restrictions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") signed integer type of the same size as [`numpy.intp`](arrays.scalars.html#numpy.intp
    "numpy.intp").
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the platform, it can be an alias for either [`c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int
    "(in Python v3.11)"), [`c_long`](https://docs.python.org/3/library/ctypes.html#ctypes.c_long
    "(in Python v3.11)") or [`c_longlong`](https://docs.python.org/3/library/ctypes.html#ctypes.c_longlong
    "(in Python v3.11)").
  prefs: []
  type: TYPE_NORMAL
