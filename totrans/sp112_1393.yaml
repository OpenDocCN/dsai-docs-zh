- en: Introspecting build steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/building/introspecting_a_build.html](https://docs.scipy.org/doc/scipy-1.12.0/building/introspecting_a_build.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you have an issue with a particular Python extension module or other build
    target, there are a number of ways to figure out what the build system is doing
    exactly. Beyond looking at the `meson.build` content for the target of interest,
    these include:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading the generated `build.ninja` file in the build directory,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `meson introspect` to learn more about build options, dependencies and
    flags used for the target,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reading `<build-dir>/meson-info/*.json` for details on discovered dependencies,
    where Meson plans to install files to, etc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These things are all available after the configure stage of the build (i.e.,
    `meson setup`) has run. It is typically more effective to look at this information,
    rather than running the build and reading the full build log.
  prefs: []
  type: TYPE_NORMAL
- en: The `ninja.build` file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an example, let’s say we are interested in `scipy.linalg._decomp_update`.
    From `scipy/linalg/meson.build` we learn that this extension is written in templated
    Cython code, and there are no special compilation flags used nor include directories
    beyond the `numpy` one. So the next step is to look at `build.ninja`. Open that
    file in an editor and search for `_decomp_update`. You will find this set of generic
    and target-specific rules that apply (note, comments in this code block are not
    present in `build.ninja` but only added in this doc section to explain what is
    happening):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using `meson introspect`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to look at `_decomp_update` from another perspective, we can use
    (for example) `meson introspect --targets -i <build-dir> > targets.json` to generate
    readable JSON. Searching that generated file for our target of interest shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This tells us a lot of things, like which include directories will be used,
    where the Cython-generated C code can be found, and what compile flags are used.
    `meson introspect --help` has good documentation on the full range of capabilities
    and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: '`meson-info` JSON files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a number of different JSON files in `<build-dir>/meson-info/`. These
    have descriptive names, hinting at their content. For example, where the final
    `_decomp_update` extension gets installed to is described in `intro-install_plan.json`
    (note, these files aren’t prety-printed, running them through a JSON formatter
    helps):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We may also be interested in knowing what dependencies were detected by the
    configure stage of the build. So we look in `intro-dependencies.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells us that we have three dependencies that were found. Note: `numpy`
    and a few other build-time dependencies are missing here because we do not (yet)
    search for those with the builtin `dependency()` Meson command.'
  prefs: []
  type: TYPE_NORMAL
