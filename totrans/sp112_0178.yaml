- en: scipy.interpolate.interp2d
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.interp2d.html#scipy.interpolate.interp2d](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.interp2d.html#scipy.interpolate.interp2d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 1.10.0: [`interp2d`](#scipy.interpolate.interp2d "scipy.interpolate.interp2d")
    is deprecated in SciPy 1.10 and will be removed in SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: For legacy code, nearly bug-for-bug compatible replacements are [`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline") on regular grids, and [`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep
    "scipy.interpolate.bisplrep")/[`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev
    "scipy.interpolate.bisplev") for scattered 2D data.
  prefs: []
  type: TYPE_NORMAL
- en: In new code, for regular grids use [`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator") instead. For scattered data, prefer
    [`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator") or [`CloughTocher2DInterpolator`](scipy.interpolate.CloughTocher2DInterpolator.html#scipy.interpolate.CloughTocher2DInterpolator
    "scipy.interpolate.CloughTocher2DInterpolator").
  prefs: []
  type: TYPE_NORMAL
- en: For more details see [https://scipy.github.io/devdocs/notebooks/interp_transition_guide.html](https://scipy.github.io/devdocs/notebooks/interp_transition_guide.html)
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate over a 2-D grid.
  prefs: []
  type: TYPE_NORMAL
- en: '*x*, *y* and *z* are arrays of values used to approximate some function f:
    `z = f(x, y)` which returns a scalar value *z*. This class returns a function
    whose call method uses spline interpolation to find the value of new points.'
  prefs: []
  type: TYPE_NORMAL
- en: If *x* and *y* represent a regular grid, consider using [`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline").
  prefs: []
  type: TYPE_NORMAL
- en: If *z* is a vector value, consider using [`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn
    "scipy.interpolate.interpn").
  prefs: []
  type: TYPE_NORMAL
- en: Note that calling [`interp2d`](#scipy.interpolate.interp2d "scipy.interpolate.interp2d")
    with NaNs present in input values, or with decreasing values in *x* an *y* results
    in undefined behaviour.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x, y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays defining the data point coordinates. The data point coordinates need
    to be sorted by increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the points lie on a regular grid, *x* can specify the column coordinates
    and *y* the row coordinates, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, *x* and *y* must specify the full coordinates for each point, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If *x* and *y* are multidimensional, they are flattened before use.
  prefs: []
  type: TYPE_NORMAL
- en: '**z**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The values of the function to interpolate at the data points. If *z* is a multidimensional
    array, it is flattened before use assuming Fortran-ordering (order=’F’). The length
    of a flattened *z* array is either len(*x*)*len(*y*) if *x* and *y* specify the
    column and row coordinates or `len(z) == len(x) == len(y)` if *x* and *y* specify
    coordinates for each point.
  prefs: []
  type: TYPE_NORMAL
- en: '**kind**{‘linear’, ‘cubic’, ‘quintic’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The kind of spline interpolation to use. Default is ‘linear’.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the class makes internal copies of x, y and z. If False, references
    may be used. The default is to copy.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds_error**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, when interpolated values are requested outside of the domain of the
    input data (x,y), a ValueError is raised. If False, then *fill_value* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the value to use for points outside of the interpolation domain.
    If omitted (None), values outside the domain are extrapolated via nearest-neighbor
    extrapolation.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Much faster 2-D interpolation if your input data is on a grid
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep"),
    [`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: Spline interpolation based on FITPACK
  prefs: []
  type: TYPE_NORMAL
- en: '[`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a more recent wrapper of the FITPACK routines
  prefs: []
  type: TYPE_NORMAL
- en: '[`interp1d`](scipy.interpolate.interp1d.html#scipy.interpolate.interp1d "scipy.interpolate.interp1d")'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D version of this function
  prefs: []
  type: TYPE_NORMAL
- en: '[`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: interpolation on a regular or rectilinear grid in arbitrary dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`interpn`](scipy.interpolate.interpn.html#scipy.interpolate.interpn "scipy.interpolate.interpn")'
  prefs: []
  type: TYPE_NORMAL
- en: Multidimensional interpolation on regular grids (wraps [`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator") and [`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The minimum number of data points required along the interpolation axis is `(k+1)**2`,
    with k=1 for linear, k=3 for cubic and k=5 for quintic interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: The interpolator is constructed by [`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep
    "scipy.interpolate.bisplrep"), with a smoothing factor of 0\. If more control
    over smoothing is needed, [`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep
    "scipy.interpolate.bisplrep") should be used directly.
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates of the data points to interpolate *xnew* and *ynew* have to
    be sorted by ascending order. [`interp2d`](#scipy.interpolate.interp2d "scipy.interpolate.interp2d")
    is legacy and is not recommended for use in new code. New code should use [`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator") instead.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Construct a 2-D grid and interpolate on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use the obtained interpolation function and plot the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-interp2d-1.png](../Images/ef9e087498ddad08f2a70e0093421611.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.interp2d.__call__.html#scipy.interpolate.interp2d.__call__
    "scipy.interpolate.interp2d.__call__")(x, y[, dx, dy, assume_sorted]) | Interpolate
    the function. |'
  prefs: []
  type: TYPE_TB
