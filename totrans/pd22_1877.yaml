- en: Creating a development environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建开发环境
- en: 原文：[https://pandas.pydata.org/docs/development/contributing_environment.html](https://pandas.pydata.org/docs/development/contributing_environment.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/development/contributing_environment.html](https://pandas.pydata.org/docs/development/contributing_environment.html)
- en: To test out code changes, you’ll need to build pandas from source, which requires
    a C/C++ compiler and Python environment. If you’re making documentation changes,
    you can skip to [contributing to the documentation](contributing_documentation.html#contributing-documentation)
    but if you skip creating the development environment you won’t be able to build
    the documentation locally before pushing your changes. It’s recommended to also
    install the [pre-commit hooks](contributing_codebase.html#contributing-pre-commit).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试代码更改，您需要从源代码构建pandas，这需要C/C++编译器和Python环境。如果您进行文档更改，您可以跳到[贡献文档](contributing_documentation.html#contributing-documentation)，但如果您跳过创建开发环境，则无法在推送更改之前在本地构建文档。建议还安装[pre-commit
    钩子](contributing_codebase.html#contributing-pre-commit)。
- en: 'Step 1: install a C compiler'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1：安装C编译器
- en: How to do this will depend on your platform. If you choose to use `Docker` or
    `GitPod` in the next step, then you can skip this step.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如何执行此操作将取决于您的平台。如果您选择在下一步中使用`Docker`或`GitPod`，那么您可以跳过此步骤。
- en: '**Windows**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: You will need [Build Tools for Visual Studio 2022](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要[Visual Studio 2022 的构建工具](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022)。
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You DO NOT need to install Visual Studio 2022. You only need “Build Tools for
    Visual Studio 2022” found by scrolling down to “All downloads” -> “Tools for Visual
    Studio”. In the installer, select the “Desktop development with C++” Workloads.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要安装Visual Studio 2022。您只需要找到“所有下载” -> “Visual Studio 工具”中的“Visual Studio
    2022 构建工具”。在安装程序中，选择“使用 C++ 进行桌面开发”工作负载。
- en: Alternatively, you can install the necessary components on the commandline using
    [vs_BuildTools.exe](https://learn.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用命令行安装所需的组件[vs_BuildTools.exe](https://learn.microsoft.com/zh-cn/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
- en: Alternatively, you could use the [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)
    and consult the `Linux` instructions below.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用[WSL](https://learn.microsoft.com/zh-cn/windows/wsl/install)并查看下面的`Linux`说明。
- en: '**macOS**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**macOS**'
- en: To use the [mamba](#contributing-mamba)-based compilers, you will need to install
    the Developer Tools using `xcode-select --install`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基于[mamba](#contributing-mamba)的编译器，您需要使用`xcode-select --install`安装开发人员工具。
- en: 'If you prefer to use a different compiler, general information can be found
    here: [https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用其他编译器，可以在此处找到一般信息：[https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)
- en: '**Linux**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: For Linux-based [mamba](#contributing-mamba) installations, you won’t have to
    install any additional components outside of the mamba environment. The instructions
    below are only needed if your setup isn’t based on mamba environments.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于Linux的[mamba](#contributing-mamba)安装，您无需在mamba环境之外安装任何其他组件。下面的说明仅在您的设置不基于mamba环境时才需要。
- en: 'Some Linux distributions will come with a pre-installed C compiler. To find
    out which compilers (and versions) are installed on your system:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Linux发行版将预先安装了C编译器。要查找已安装在您的系统上的编译器（以及版本）：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[GCC (GNU Compiler Collection)](https://gcc.gnu.org/), is a widely used compiler,
    which supports C and a number of other languages. If GCC is listed as an installed
    compiler nothing more is required.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[GCC (GNU Compiler Collection)](https://gcc.gnu.org/) 是一个广泛使用的编译器，支持C语言和许多其他语言。如果GCC列为已安装的编译器，则无需进行其他操作。'
- en: If no C compiler is installed, or you wish to upgrade, or you’re using a different
    Linux distribution, consult your favorite search engine for compiler installation/update
    instructions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未安装C编译器，或者您希望升级，或者您使用的是其他Linux发行版，请参考您喜欢的搜索引擎以获取编译器安装/更新说明。
- en: Let us know if you have any difficulties by opening an issue or reaching out
    on our contributor community [Slack](community.html#community-slack).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何困难，请通过打开问题或在我们的贡献者社区[Slack](community.html#community-slack)上联系我们。
- en: 'Step 2: create an isolated environment'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2：创建隔离环境
- en: 'Before we begin, please:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请：
- en: Make sure that you have [cloned the repository](contributing.html#contributing-forking)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您已经[克隆了存储库](contributing.html#contributing-forking)
- en: '`cd` to the pandas source directory you just created with the clone command'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd`到刚刚用克隆命令创建的 pandas 源目录'
- en: '### Option 1: using mamba (recommended)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '### 选项 1：使用 mamba（推荐）'
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 miniforge 以获取[mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
- en: Make sure your mamba is up to date (`mamba update mamba`)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的 mamba 是最新的（`mamba update mamba`）
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令创建并激活`pandas-dev`的mamba环境：
- en: '[PRE1]  ### Option 2: using pip'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]  ### 选项 2：使用 pip'
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要至少具有 pandas 支持的[最低 Python 版本](../getting_started/install.html#install-version)。您还需要具有`setuptools`
    51.0.0或更高版本才能构建 pandas。
- en: '**Unix**/**macOS with virtualenv**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 virtualenv**'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Unix**/**macOS with pyenv**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 pyenv**'
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[此处](https://github.com/pyenv/pyenv)设置pyenv的文档。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Windows**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Windows 下使用 Powershell 设置虚拟环境的简要概述。有关详细信息，请参阅[官方 virtualenv 用户指南](https://virtualenv.pypa.io/en/latest/user_guide.html#activators)。
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您选择的 ENV_DIR。我们将使用`~\\virtualenvs\\pandas-dev`，其中`~`是由`$env:USERPROFILE`（Powershell）或`%USERPROFILE%`（cmd.exe）环境变量指向的文件夹。任何父目录应该已经存在。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Option 3: using Docker'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 3：使用 Docker
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在根目录提供了一个`DockerFile`，用于构建一个具有完整 pandas 开发环境的 Docker 镜像。
- en: '**Docker Commands**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 命令**'
- en: 'Build the Docker image:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Docker 镜像：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run Container:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行容器：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*更简单的是，您可以将 Docker 与以下 IDE 集成：*'
- en: '**Visual Studio Code**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**'
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 DockerFile 使用`.devcontainer.json`文件启动与 Visual Studio Code 的远程会话，这是一个流行的免费
    IDE。有关详细信息，请参阅[https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)。
- en: '**PyCharm (Professional)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm（专业版）**'
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Docker 支持并使用 Services 工具窗口构建和管理镜像，以及运行和与容器交互。有关详细信息，请参阅[https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)。
- en: 'Option 4: using Gitpod'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 4：使用 Gitpod
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Gitpod 是一个开源平台，可以在浏览器中自动创建正确的开发环境，从而减少了安装本地开发环境和处理不兼容依赖项的需求。
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Windows 用户，并且对使用命令行或首次构建 pandas 不熟悉，则通常更快地使用 Gitpod 进行构建。以下是[使用 GitPod
    构建 pandas](contributing_gitpod.html#contributing-gitpod)的详细说明。
- en: 'Step 3: build and install pandas'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3：构建并安装 pandas
- en: There are currently two supported ways of building pandas, pip/meson and setuptools(setup.py).
    Historically, pandas has only supported using setuptools to build pandas. However,
    this method requires a lot of convoluted code in setup.py and also has many issues
    in compiling pandas in parallel due to limitations in setuptools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两种支持的构建pandas的方式，pip/meson和setuptools(setup.py)。历史上，pandas只支持使用setuptools构建pandas。然而，这种方法在setup.py中需要大量复杂的代码，并且由于setuptools的限制，在并行编译pandas时存在许多问题。
- en: The newer build system, invokes the meson backend through pip (via a [PEP 517](https://peps.python.org/pep-0517/)
    build). It automatically uses all available cores on your CPU, and also avoids
    the need for manual rebuilds by rebuilding automatically whenever pandas is imported
    (with an editable install).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 较新的构建系统通过pip（通过[PEP 517](https://peps.python.org/pep-0517/)构建）调用meson后端。它会自动利用CPU上的所有可用核心，并且通过在导入pandas时自动重新构建（使用可编辑安装）来避免手动重新构建的需要。
- en: For these reasons, you should compile pandas with meson. Because the meson build
    system is newer, you may find bugs/minor issues as it matures. You can report
    these bugs [here](https://github.com/pandas-dev/pandas/issues/49683).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，你应该使用meson编译pandas。因为meson构建系统较新，随着其成熟，你可能会发现一些错误/小问题。你可以在[这里](https://github.com/pandas-dev/pandas/issues/49683)报告这些错误。
- en: 'To compile pandas with meson, run:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用meson编译pandas，请运行：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The version number is pulled from the latest repository tag. Be sure to fetch
    the latest tags from upstream before building:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 版本号是从最新的存储库标签中提取的。在构建之前，请确保从上游获取最新的标签：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Build options**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建选项**'
- en: It is possible to pass options from the pip frontend to the meson backend if
    you would like to configure your install. Occasionally, you’ll want to use this
    to adjust the build directory, and/or toggle debug/optimization levels.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要配置你的安装，可以从pip前端传递选项到meson后端。偶尔，你会想要使用这个来调整构建目录和/或切换调试/优化级别。
- en: You can pass a build directory to pandas by appending `--config-settings builddir="your
    builddir here"` to your pip command. This option allows you to configure where
    meson stores your built C extensions, and allows for fast rebuilds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在pip命令中附加`--config-settings builddir="your builddir here"`来传递构建目录给pandas。此选项允许你配置meson存储构建的C扩展的位置，并允许快速重建。
- en: Sometimes, it might be useful to compile pandas with debugging symbols, when
    debugging C extensions. Appending `--config-settings setup-args="-Ddebug=true"`
    will do the trick.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在调试C扩展时，使用调试符号编译pandas可能很有用。附加`--config-settings setup-args="-Ddebug=true"`将起作用。
- en: With pip, it is possible to chain together multiple config settings (for example
    specifying both a build directory and building with debug symbols would look like
    `--config-settings builddir="your builddir here" --config-settings=setup-args="-Dbuildtype=debug"`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pip，可以将多个配置设置链接在一起（例如，指定构建目录和使用调试符号构建将如`--config-settings builddir="your builddir
    here" --config-settings=setup-args="-Dbuildtype=debug"`）。
- en: '**Compiling pandas with setup.py**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用setup.py编译pandas**'
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method of compiling pandas will be deprecated and removed very soon, as
    the meson backend matures.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着meson后端的成熟，这种编译pandas的方法将很快被弃用和移除。
- en: 'To compile pandas with setuptools, run:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用setuptools编译pandas，请运行：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If pandas is already installed (via meson), you have to uninstall it first:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果pandas已经安装（通过meson），你必须先卸载它：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is because python setup.py develop will not uninstall the loader script
    that `meson-python` uses to import the extension from the build folder, which
    may cause errors such as an `FileNotFoundError` to be raised.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为python setup.py develop不会卸载`meson-python`用于从构建文件夹导入扩展的加载器脚本，这可能会导致出现`FileNotFoundError`等错误。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need to repeat this step each time the C extensions change, for example
    if you modified any file in `pandas/_libs` or if you did a fetch and merge from
    `upstream/main`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每当C扩展发生变化时，例如你修改了`pandas/_libs`中的任何文件，或者从`upstream/main`进行了获取和合并，你都需要重复这一步骤。
- en: '**Checking the build**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查构建**'
- en: 'At this point you should be able to import pandas from your locally built version:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该能够从本地构建的版本中导入pandas：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point you may want to try [running the test suite](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能想尝试[运行测试套件](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite)。
- en: '**Keeping up to date with the latest build**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持最新构建**'
- en: 'When building pandas with meson, importing pandas will automatically trigger
    a rebuild, even when C/Cython files are modified. By default, no output will be
    produced by this rebuild (the import will just take longer). If you would like
    to see meson’s output when importing pandas, you can set the environment variable
    `MESONPY_EDTIABLE_VERBOSE`. For example, this would be:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 meson 构建 pandas 时，导入 pandas 将自动触发重新构建，即使 C/Cython 文件已修改。默认情况下，此重新构建不会产生任何输出（导入只会花费更长时间）。如果您希望在导入
    pandas 时看到 meson 的输出，可以设置环境变量 `MESONPY_EDTIABLE_VERBOSE`。例如，这样设置：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you would like to see this verbose output every time, you can set the `editable-verbose`
    config setting to `true` like so:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望每次都看到此详细输出，可以将 `editable-verbose` 配置设置为 `true`，如下所示：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you ever find yourself wondering whether setuptools or meson was used to
    build your pandas, you can check the value of `pandas._built_with_meson`, which
    will be true if meson was used to compile pandas.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经想知道是使用 setuptools 还是 meson 构建了你的 pandas，你可以检查 `pandas._built_with_meson`
    的值，如果 meson 用于编译 pandas，则该值为 true。
- en: 'Step 1: install a C compiler'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1：安装 C 编译器
- en: How to do this will depend on your platform. If you choose to use `Docker` or
    `GitPod` in the next step, then you can skip this step.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如何执行此操作取决于您的平台。如果您选择在下一步中使用 `Docker` 或 `GitPod`，则可以跳过此步骤。
- en: '**Windows**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: You will need [Build Tools for Visual Studio 2022](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要 [Visual Studio 2022 的生成工具](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022)。
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You DO NOT need to install Visual Studio 2022. You only need “Build Tools for
    Visual Studio 2022” found by scrolling down to “All downloads” -> “Tools for Visual
    Studio”. In the installer, select the “Desktop development with C++” Workloads.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需安装 Visual Studio 2022。您只需要下载“Visual Studio 的生成工具 2022”，并在安装程序中选择“使用 C++ 进行桌面开发”工作负载。
- en: Alternatively, you can install the necessary components on the commandline using
    [vs_BuildTools.exe](https://learn.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 [vs_BuildTools.exe](https://learn.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
    在命令行上安装必要的组件。
- en: Alternatively, you could use the [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)
    and consult the `Linux` instructions below.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用 [WSL](https://learn.microsoft.com/en-us/windows/wsl/install) 并参考下面的
    `Linux` 说明。
- en: '**macOS**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**macOS**'
- en: To use the [mamba](#contributing-mamba)-based compilers, you will need to install
    the Developer Tools using `xcode-select --install`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用基于 [mamba](#contributing-mamba) 的编译器，您需要使用 `xcode-select --install` 安装开发人员工具。
- en: 'If you prefer to use a different compiler, general information can be found
    here: [https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望使用其他编译器，可以在此处找到一般信息：[https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)
- en: '**Linux**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: For Linux-based [mamba](#contributing-mamba) installations, you won’t have to
    install any additional components outside of the mamba environment. The instructions
    below are only needed if your setup isn’t based on mamba environments.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Linux 的 [mamba](#contributing-mamba) 安装，您无需在 mamba 环境之外安装任何其他组件。以下说明仅在您的设置不基于
    mamba 环境时需要。
- en: 'Some Linux distributions will come with a pre-installed C compiler. To find
    out which compilers (and versions) are installed on your system:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Linux 发行版将预安装 C 编译器。要查找已安装在您的系统上的编译器（和版本）：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[GCC (GNU Compiler Collection)](https://gcc.gnu.org/), is a widely used compiler,
    which supports C and a number of other languages. If GCC is listed as an installed
    compiler nothing more is required.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[GCC（GNU 编译器集合）](https://gcc.gnu.org/) 是一个广泛使用的编译器，支持 C 和许多其他语言。如果 GCC 被列为已安装的编译器，则不需要做任何其他操作。'
- en: If no C compiler is installed, or you wish to upgrade, or you’re using a different
    Linux distribution, consult your favorite search engine for compiler installation/update
    instructions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未安装 C 编译器，或者您希望升级，或者您使用不同的 Linux 发行版，请参考您喜爱的搜索引擎以获取编译器安装/更新说明。
- en: Let us know if you have any difficulties by opening an issue or reaching out
    on our contributor community [Slack](community.html#community-slack).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在使用过程中遇到任何困难，请通过在我们的贡献者社区 [Slack](community.html#community-slack) 上提出问题或联系我们。
- en: 'Step 2: create an isolated environment'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2：创建一个隔离的环境
- en: 'Before we begin, please:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请：
- en: Make sure that you have [cloned the repository](contributing.html#contributing-forking)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您已经[克隆了存储库](contributing.html#contributing-forking)
- en: '`cd` to the pandas source directory you just created with the clone command'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd` 到您刚刚用克隆命令创建的 pandas 源代码目录'
- en: '### Option 1: using mamba (recommended)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '### 选项 1：使用 mamba（推荐）'
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 miniforge 以获取[mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
- en: Make sure your mamba is up to date (`mamba update mamba`)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的 mamba 是最新的（`mamba update mamba`）
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令创建并激活 `pandas-dev` mamba 环境：
- en: '[PRE15]  ### Option 2: using pip'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE15]  ### 选项 2：使用 pip'
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您至少需要安装 pandas 支持的[最低 Python 版本](../getting_started/install.html#install-version)。您还需要安装
    `setuptools` 51.0.0 或更高版本来构建 pandas。
- en: '**Unix**/**macOS with virtualenv**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 virtualenv**'
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Unix**/**macOS with pyenv**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 pyenv**'
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅设置 pyenv 的文档[此处](https://github.com/pyenv/pyenv)。
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Windows**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Windows 下使用 Powershell 设置虚拟环境的简要概述。有关详细信息，请参阅[官方 virtualenv 用户指南](https://virtualenv.pypa.io/en/latest/user_guide.html#activators)。
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您选择的 ENV_DIR。我们将使用 `~\\virtualenvs\\pandas-dev`，其中 `~` 是由 `$env:USERPROFILE`（Powershell）或
    `%USERPROFILE%`（cmd.exe）环境变量指向的文件夹。任何父目录应该已经存在。
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Option 3: using Docker'
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 3：使用 Docker
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在根目录中提供了一个 `DockerFile`，用于构建带有完整 pandas 开发环境的 Docker 镜像。
- en: '**Docker Commands**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 命令**'
- en: 'Build the Docker image:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Docker 镜像：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run Container:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 运行容器：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*更简单的是，您可以集成 Docker 与以下 IDE：*'
- en: '**Visual Studio Code**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**'
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 DockerFile 使用 `.devcontainer.json` 文件在 Visual Studio Code 中启动远程会话，Visual
    Studio Code 是一款流行的免费 IDE。有关详细信息，请参阅[https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)。
- en: '**PyCharm (Professional)**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm（专业版）**'
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Docker 支持，并使用 Services 工具窗口构建和管理镜像，以及运行和与容器交互。有关详细信息，请参阅[https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)。
- en: 'Option 4: using Gitpod'
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 4：使用 Gitpod
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Gitpod 是一个开源平台，可在您的浏览器中自动创建正确的开发环境，减少安装本地开发环境和处理不兼容依赖项的需要。
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Windows 用户，不熟悉使用命令行或首次构建 pandas，则通常使用 Gitpod 更快。以下是[使用 GitPod 构建 pandas](contributing_gitpod.html#contributing-gitpod)的详细说明。
- en: '### Option 1: using mamba (recommended)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '### 选项 1：使用 mamba（推荐）'
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 miniforge 以获取[mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
- en: Make sure your mamba is up to date (`mamba update mamba`)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的 mamba 是最新的（`mamba update mamba`）
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令创建并激活 `pandas-dev` mamba 环境：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '### Option 2: using pip'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '### 选项 2：使用 pip'
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你至少需要安装 pandas 支持的[最低 Python 版本](../getting_started/install.html#install-version)。你还需要有
    `setuptools` 的 51.0.0 或更高版本来构建 pandas。
- en: '**Unix**/**macOS with virtualenv**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 virtualenv**'
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Unix**/**macOS with pyenv**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unix**/**macOS 使用 pyenv**'
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅设置 pyenv 的文档[此处](https://github.com/pyenv/pyenv)。
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Windows**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Windows 下使用 Powershell 设置虚拟环境的简要概述。详情请参阅[官方虚拟环境用户指南](https://virtualenv.pypa.io/en/latest/user_guide.html#activators)。
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你选择的 ENV_DIR。我们将使用`~\\virtualenvs\\pandas-dev`，其中`~`是由`$env:USERPROFILE`（Powershell）或`%USERPROFILE%`（cmd.exe）环境变量指向的文件夹。任何父目录都应该已经存在。
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Option 3: using Docker'
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 3：使用 Docker
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 在根目录提供了一个`DockerFile`，用于构建具有完整 pandas 开发环境的 Docker 镜像。
- en: '**Docker Commands**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker 命令**'
- en: 'Build the Docker image:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 Docker 镜像：
- en: '[PRE25]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run Container:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 运行容器：
- en: '[PRE26]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*更简单的是，你可以将 Docker 集成到以下 IDE 中：*'
- en: '**Visual Studio Code**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**'
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 DockerFile 使用 `.devcontainer.json` 文件启动与 Visual Studio Code 的远程会话，这是一个流行的免费
    IDE。详情请参阅 [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)。
- en: '**PyCharm (Professional)**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm（专业版）**'
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Docker 支持，并使用服务工具窗口构建和管理镜像，以及运行和与容器交互。详情请参阅 [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)。
- en: 'Option 4: using Gitpod'
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 4：使用 Gitpod
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Gitpod 是一个开源平台，它会在你的浏览器中自动创建正确的开发环境，减少了安装本地开发环境和处理不兼容依赖项的需要。
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Windows 用户，不熟悉使用命令行或者是第一次构建 pandas，使用 Gitpod 构建通常会更快。以下是[使用 GitPod 构建 pandas](contributing_gitpod.html#contributing-gitpod)的详细说明。
- en: 'Step 3: build and install pandas'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3：构建并安装 pandas
- en: There are currently two supported ways of building pandas, pip/meson and setuptools(setup.py).
    Historically, pandas has only supported using setuptools to build pandas. However,
    this method requires a lot of convoluted code in setup.py and also has many issues
    in compiling pandas in parallel due to limitations in setuptools.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两种支持的构建 pandas 的方式，即 pip/meson 和 setuptools(setup.py)。从历史上看，pandas 仅支持使用
    setuptools 构建 pandas。然而，这种方法在 setup.py 中需要大量复杂的代码，并且由于 setuptools 的限制，在并行编译 pandas
    时也存在许多问题。
- en: The newer build system, invokes the meson backend through pip (via a [PEP 517](https://peps.python.org/pep-0517/)
    build). It automatically uses all available cores on your CPU, and also avoids
    the need for manual rebuilds by rebuilding automatically whenever pandas is imported
    (with an editable install).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 新的构建系统通过 pip（通过 [PEP 517](https://peps.python.org/pep-0517/) 构建）调用了 meson 后端。它自动使用
    CPU 上的所有可用核心，并且通过在 pandas 被导入时（使用可编辑的安装）自动重新构建，避免了手动重新构建的需要。
- en: For these reasons, you should compile pandas with meson. Because the meson build
    system is newer, you may find bugs/minor issues as it matures. You can report
    these bugs [here](https://github.com/pandas-dev/pandas/issues/49683).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，您应该使用 meson 编译 pandas。因为 meson 构建系统是较新的，随着它的成熟，您可能会发现错误/次要问题。您可以在[这里](https://github.com/pandas-dev/pandas/issues/49683)报告这些错误。
- en: 'To compile pandas with meson, run:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 meson 编译 pandas，请运行：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The version number is pulled from the latest repository tag. Be sure to fetch
    the latest tags from upstream before building:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 版本号从最新的存储库标签中提取。在构建之前，请确保从上游获取最新标签：
- en: '[PRE28]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Build options**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建选项**'
- en: It is possible to pass options from the pip frontend to the meson backend if
    you would like to configure your install. Occasionally, you’ll want to use this
    to adjust the build directory, and/or toggle debug/optimization levels.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要配置安装，可以将选项从 pip 前端传递到 meson 后端。偶尔，您会想要使用这个来调整构建目录，并/或者切换调试/优化级别。
- en: You can pass a build directory to pandas by appending `--config-settings builddir="your
    builddir here"` to your pip command. This option allows you to configure where
    meson stores your built C extensions, and allows for fast rebuilds.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 pip 命令中追加 `--config-settings builddir="your builddir here"` 来向 pandas
    传递构建目录。此选项允许您配置 meson 存储构建的 C 扩展的位置，并允许快速重新构建。
- en: Sometimes, it might be useful to compile pandas with debugging symbols, when
    debugging C extensions. Appending `--config-settings setup-args="-Ddebug=true"`
    will do the trick.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在调试 C 扩展时，将 pandas 编译为带有调试符号可能很有用。追加 `--config-settings setup-args="-Ddebug=true"`
    将解决问题。
- en: With pip, it is possible to chain together multiple config settings (for example
    specifying both a build directory and building with debug symbols would look like
    `--config-settings builddir="your builddir here" --config-settings=setup-args="-Dbuildtype=debug"`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip，可以将多个配置设置链接在一起（例如指定构建目录并使用调试符号的构建将如下所示：`--config-settings builddir="your
    builddir here" --config-settings=setup-args="-Dbuildtype=debug"`）。
- en: '**Compiling pandas with setup.py**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 setup.py 编译 pandas**'
- en: Note
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method of compiling pandas will be deprecated and removed very soon, as
    the meson backend matures.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 meson 后端的成熟，这种编译 pandas 的方法很快将被弃用和移除。
- en: 'To compile pandas with setuptools, run:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 setuptools 编译 pandas，请运行：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If pandas is already installed (via meson), you have to uninstall it first:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 pandas 已经安装（通过 meson），您必须首先卸载它：
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is because python setup.py develop will not uninstall the loader script
    that `meson-python` uses to import the extension from the build folder, which
    may cause errors such as an `FileNotFoundError` to be raised.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 python setup.py develop 不会卸载 `meson-python` 用于从构建文件夹导入扩展的加载程序脚本，这可能会导致出现诸如
    `FileNotFoundError` 的错误。
- en: Note
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will need to repeat this step each time the C extensions change, for example
    if you modified any file in `pandas/_libs` or if you did a fetch and merge from
    `upstream/main`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 C 扩展更改时，例如修改了 `pandas/_libs` 中的任何文件，或者从 `upstream/main` 进行了抓取和合并，都需要重复此步骤。
- en: '**Checking the build**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查构建**'
- en: 'At this point you should be able to import pandas from your locally built version:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该能够从您本地构建的版本中导入 pandas：
- en: '[PRE31]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: At this point you may want to try [running the test suite](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能想要尝试[运行测试套件](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite)。
- en: '**Keeping up to date with the latest build**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**跟上最新构建**'
- en: 'When building pandas with meson, importing pandas will automatically trigger
    a rebuild, even when C/Cython files are modified. By default, no output will be
    produced by this rebuild (the import will just take longer). If you would like
    to see meson’s output when importing pandas, you can set the environment variable
    `MESONPY_EDTIABLE_VERBOSE`. For example, this would be:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 meson 构建 pandas 时，导入 pandas 将自动触发重新构建，即使修改了 C/Cython 文件。默认情况下，此重新构建不会产生任何输出（导入只会花费更长时间）。如果您想要在导入
    pandas 时看到 meson 的输出，可以设置环境变量 `MESONPY_EDTIABLE_VERBOSE`。例如，这样做：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you would like to see this verbose output every time, you can set the `editable-verbose`
    config setting to `true` like so:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望每次都看到此详细输出，可以将 `editable-verbose` 配置设置为 `true`，如下所示：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Tip
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you ever find yourself wondering whether setuptools or meson was used to
    build your pandas, you can check the value of `pandas._built_with_meson`, which
    will be true if meson was used to compile pandas.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道是使用 setuptools 还是 meson 构建了您的 pandas，您可以检查 `pandas._built_with_meson`
    的值，如果 meson 用于编译 pandas，则该值为 true。
