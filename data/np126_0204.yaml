- en: numpy.r_
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.r_
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.r_.html](https://numpy.org/doc/1.26/reference/generated/numpy.r_.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.r_.html](https://numpy.org/doc/1.26/reference/generated/numpy.r_.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Translates slice objects to concatenation along the first axis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将切片对象转换为沿着第一个轴的连接。
- en: This is a simple way to build up arrays quickly. There are two use cases.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是快速构建数组的简单方法。有两种用法。
- en: If the index expression contains comma separated arrays, then stack them along
    their first axis.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果索引表达式包含逗号分隔的数组，则将它们沿着它们的第一个轴堆叠。
- en: If the index expression contains slice notation or scalars then create a 1-D
    array with a range indicated by the slice notation.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果索引表达式包含切片表示法或标量，则使用切片表示法创建一个 1-D 数组。
- en: If slice notation is used, the syntax `start:stop:step` is equivalent to `np.arange(start,
    stop, step)` inside of the brackets. However, if `step` is an imaginary number
    (i.e. 100j) then its integer portion is interpreted as a number-of-points desired
    and the start and stop are inclusive. In other words `start:stop:stepj` is interpreted
    as `np.linspace(start, stop, step, endpoint=1)` inside of the brackets. After
    expansion of slice notation, all comma separated sequences are concatenated together.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用切片表示法，则语法`start:stop:step`等同于括号内的`np.arange(start, stop, step)`。但是，如果`step`是一个虚数（即100j），那么它的整数部分将被解释为所需的点数，而开始和停止是包含的。换句话说，`start:stop:stepj`被解释为括号内的`np.linspace(start,
    stop, step, endpoint=1)`。在展开切片表示法后，所有逗号分隔的序列都会连接在一起。
- en: Optional character strings placed as the first element of the index expression
    can be used to change the output. The strings ‘r’ or ‘c’ result in matrix output.
    If the result is 1-D and ‘r’ is specified a 1 x N (row) matrix is produced. If
    the result is 1-D and ‘c’ is specified, then a N x 1 (column) matrix is produced.
    If the result is 2-D then both provide the same matrix result.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 放置在索引表达式的第一个元素位置的可选字符字符串可用于更改输出。字符串‘r’或‘c’会产生矩阵输出。如果结果是 1-D 并且指定了‘r’，则会产生 1
    x N（行）矩阵。如果结果是 1-D 并且指定了‘c’，则会产生 N x 1（列）矩阵。如果结果是 2-D，则两者都提供相同的矩阵结果。
- en: A string integer specifies which axis to stack multiple comma separated arrays
    along. A string of two comma-separated integers allows indication of the minimum
    number of dimensions to force each entry into as the second integer (the axis
    to concatenate along is still the first integer).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串整数指定要堆叠多个逗号分隔数组的轴。两个逗号分隔的整数字符串允许指示将每个条目强制放入的最小维度数作为第二个整数（仍然是沿着第一个整数指定的轴进行连接）。
- en: A string with three comma-separated integers allows specification of the axis
    to concatenate along, the minimum number of dimensions to force the entries to,
    and which axis should contain the start of the arrays which are less than the
    specified number of dimensions. In other words the third integer allows you to
    specify where the 1’s should be placed in the shape of the arrays that have their
    shapes upgraded. By default, they are placed in the front of the shape tuple.
    The third argument allows you to specify where the start of the array should be
    instead. Thus, a third argument of ‘0’ would place the 1’s at the end of the array
    shape. Negative integers specify where in the new shape tuple the last dimension
    of upgraded arrays should be placed, so the default is ‘-1’.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含三个逗号分隔整数的字符串允许指定要沿着连接的轴，要强制条目的最小维度以及哪个轴应该包含少于指定维度数的数组的起始位置。换句话说，第三个整数允许您指定
    1 应该放置在升级形状的数组的形状元组的前面。第三个参数允许您指定数组的起始位置。因此，第三个参数为‘0’将 1 放置在数组形状的末尾。负整数指定升级数组的最后一个维度应放置在新形状元组中的位置，因此默认值为‘-1’。
- en: 'Parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**Not a function, so takes no parameters**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**不是一个函数，所以不接受参数**'
- en: 'Returns:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: A concatenated ndarray or matrix.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个连接的 ndarray 或矩阵。
- en: See also
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
- en: Join a sequence of arrays along an existing axis.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 沿着现有轴连接一个数组序列。
- en: '[`c_`](numpy.c_.html#numpy.c_ "numpy.c_")'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`c_`](numpy.c_.html#numpy.c_ "numpy.c_")'
- en: Translates slice objects to concatenation along the second axis.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将切片对象转换为沿着第二个轴的连接。
- en: Examples
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: String integers specify the axis to concatenate along or the minimum number
    of dimensions to force entries into.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串整数指定要沿着连接的轴或要强制条目进入的最小维度数。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using ‘r’ or ‘c’ as a first string argument creates a matrix.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将‘r’或‘c’用作第一个字符串参数会创建一个矩阵。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
