- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/getting_started/install.html](https://pandas.pydata.org/docs/getting_started/install.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The easiest way to install pandas is to install it as part of the [Anaconda](https://docs.continuum.io/free/anaconda/)
    distribution, a cross platform distribution for data analysis and scientific computing.
    The [Conda](https://conda.io/en/latest/) package manager is the recommended installation
    method for most users.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions for installing [from source](#install-source), [PyPI](#install-pypi),
    or a [development version](#install-dev) are also provided.
  prefs: []
  type: TYPE_NORMAL
- en: '## Python version support'
  prefs: []
  type: TYPE_NORMAL
- en: Officially Python 3.9, 3.10, 3.11 and 3.12.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Installing with Anaconda'
  prefs: []
  type: TYPE_NORMAL
- en: 'For users that are new to Python, the easiest way to install Python, pandas,
    and the packages that make up the [PyData](https://pydata.org/) stack ([SciPy](https://scipy.org/),
    [NumPy](https://numpy.org/), [Matplotlib](https://matplotlib.org/), [and more](https://docs.continuum.io/free/anaconda/reference/packages/pkg-docs/))
    is with [Anaconda](https://docs.continuum.io/free/anaconda/), a cross-platform
    (Linux, macOS, Windows) Python distribution for data analytics and scientific
    computing. Installation instructions for Anaconda [can be found here](https://docs.continuum.io/free/anaconda/install/).  ###
    Installing with Miniconda'
  prefs: []
  type: TYPE_NORMAL
- en: For users experienced with Python, the recommended way to install pandas with
    [Miniconda](https://docs.conda.io/en/latest/miniconda.html). Miniconda allows
    you to create a minimal, self-contained Python installation compared to Anaconda
    and use the [Conda](https://conda.io/en/latest/) package manager to install additional
    packages and create a virtual environment for your installation. Installation
    instructions for Miniconda [can be found here](https://docs.conda.io/en/latest/miniconda.html).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create a new conda environment. A conda environment is like
    a virtualenv that allows you to specify a specific version of Python and set of
    libraries. Run the following commands from a terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will create a minimal environment with only Python and pandas installed.
    To put your self inside this environment run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]  ### Installing from PyPI'
  prefs: []
  type: TYPE_NORMAL
- en: pandas can be installed via pip from [PyPI](https://pypi.org/project/pandas).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You must have `pip>=19.3` to install from PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to install and run pandas from a virtual environment, for
    example, using the Python standard library’s [venv](https://docs.python.org/3/library/venv.html)
  prefs: []
  type: TYPE_NORMAL
- en: pandas can also be installed with sets of optional dependencies to enable certain
    functionality. For example, to install pandas with the optional dependencies to
    read Excel files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The full list of extras that can be installed can be found in the [dependency
    section.](#install-optional-dependencies)
  prefs: []
  type: TYPE_NORMAL
- en: Handling ImportErrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you encounter an `ImportError`, it usually means that Python couldn’t find
    pandas in the list of available libraries. Python internally has a list of directories
    it searches through, to find packages. You can obtain these directories with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: One way you could be encountering this error is if you have multiple Python
    installations on your system and you don’t have pandas installed in the Python
    installation you’re currently using. In Linux/Mac you can run `which python` on
    your terminal and it will tell you which Python installation you’re using. If
    it’s something like “/usr/bin/python”, you’re using the Python from the system,
    which is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use `conda`, for quick installation and for package
    and dependency updates. You can find simple installation instructions for pandas
    [in this document](#install-miniconda).
  prefs: []
  type: TYPE_NORMAL
- en: '### Installing from source'
  prefs: []
  type: TYPE_NORMAL
- en: 'See the [contributing guide](../development/contributing.html#contributing)
    for complete instructions on building from the git source tree. Further, see [creating
    a development environment](../development/contributing_environment.html#contributing-environment)
    if you wish to create a pandas development environment.  ### Installing the development
    version of pandas'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the development version is the quickest way to:'
  prefs: []
  type: TYPE_NORMAL
- en: Try a new feature that will be shipped in the next release (that is, a feature
    from a pull-request that was recently merged to the main branch).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether a bug you encountered has been fixed since the last release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development version is usually uploaded daily to the scientific-python-nightly-wheels
    index from the PyPI registry of anaconda.org. You can install it by running.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that you might be required to uninstall an existing version of pandas to
    install the development version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Running the test suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas is equipped with an exhaustive set of unit tests. The packages required
    to run the tests can be installed with `pip install "pandas[test]"`. To run the
    tests from a Python terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is just an example of what information is shown. Test failures are not
    necessarily indicative of a broken pandas installation.
  prefs: []
  type: TYPE_NORMAL
- en: '## Dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '### Required dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas requires the following dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum supported version |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [NumPy](https://numpy.org) | 1.22.4 |'
  prefs: []
  type: TYPE_TB
- en: '| [python-dateutil](https://dateutil.readthedocs.io/en/stable/) | 2.8.2 |'
  prefs: []
  type: TYPE_TB
- en: '| [pytz](https://pypi.org/project/pytz/) | 2020.1 |'
  prefs: []
  type: TYPE_TB
- en: '| [tzdata](https://pypi.org/project/tzdata/) | 2022.7 |  ### Optional dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has many optional dependencies that are only used for specific methods.
    For example, [`pandas.read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") requires the `pytables` package, while [`DataFrame.to_markdown()`](../reference/api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown") requires the `tabulate` package. If the optional
    dependency is not installed, pandas will raise an `ImportError` when the method
    requiring that dependency is called.
  prefs: []
  type: TYPE_NORMAL
- en: If using pip, optional pandas dependencies can be installed or managed in a
    file (e.g. requirements.txt or pyproject.toml) as optional extras (e.g. `pandas[performance,
    aws]`). All optional dependencies can be installed with `pandas[all]`, and specific
    sets of dependencies are listed in the sections below.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Performance dependencies (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You are highly encouraged to install these libraries, as they provide speed
    improvements, especially when working with large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[performance]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [numexpr](https://github.com/pydata/numexpr) | 2.8.4 | performance | Accelerates
    certain numerical operations by using multiple cores as well as smart chunking
    and caching to achieve large speedups |'
  prefs: []
  type: TYPE_TB
- en: '| [bottleneck](https://github.com/pydata/bottleneck) | 1.3.6 | performance
    | Accelerates certain types of `nan` by using specialized cython routines to achieve
    large speedup. |'
  prefs: []
  type: TYPE_TB
- en: '| [numba](https://github.com/numba/numba) | 0.56.4 | performance | Alternative
    execution engine for operations that accept `engine="numba"` using a JIT compiler
    that translates Python functions to optimized machine code using the LLVM compiler.
    |'
  prefs: []
  type: TYPE_TB
- en: Visualization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[plot, output-formatting]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 3.6.3 | plot | Plotting library |'
  prefs: []
  type: TYPE_TB
- en: '| Jinja2 | 3.1.2 | output-formatting | Conditional formatting with DataFrame.style
    |'
  prefs: []
  type: TYPE_TB
- en: '| tabulate | 0.9.0 | output-formatting | Printing in Markdown-friendly format
    (see [tabulate](https://github.com/astanin/python-tabulate)) |'
  prefs: []
  type: TYPE_TB
- en: Computation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[computation]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SciPy | 1.10.0 | computation | Miscellaneous statistical functions |'
  prefs: []
  type: TYPE_TB
- en: '| xarray | 2022.12.0 | computation | pandas-like API for N-dimensional data
    |'
  prefs: []
  type: TYPE_TB
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[excel]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 2.0.1 | excel | Reading Excel |'
  prefs: []
  type: TYPE_TB
- en: '| xlsxwriter | 3.0.5 | excel | Writing Excel |'
  prefs: []
  type: TYPE_TB
- en: '| openpyxl | 3.1.0 | excel | Reading / writing for xlsx files |'
  prefs: []
  type: TYPE_TB
- en: '| pyxlsb | 1.0.10 | excel | Reading for xlsb files |'
  prefs: []
  type: TYPE_TB
- en: '| python-calamine | 0.1.7 | excel | Reading for xls/xlsx/xlsb/ods files |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[html]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| BeautifulSoup4 | 4.11.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| html5lib | 1.1 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: 'One of the following combinations of libraries is needed to use the top-level
    [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)
    and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only [lxml](https://lxml.de), although see [HTML Table Parsing](../user_guide/io.html#io-html-gotchas)
    for reasons as to why you should probably **not** take this approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: if you install [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    you must install either [lxml](https://lxml.de) or [html5lib](https://github.com/html5lib/html5lib-python)
    or both. [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") will **not** work with *only* [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are highly encouraged to read [HTML Table Parsing gotchas](../user_guide/io.html#io-html-gotchas).
    It explains issues surrounding the installation and usage of the above three libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[xml]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | xml | XML parser for read_xml and tree builder for to_xml
    |'
  prefs: []
  type: TYPE_TB
- en: SQL databases
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Traditional drivers are installable with `pip install "pandas[postgresql, mysql,
    sql-other]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SQLAlchemy | 2.0.0 | postgresql, mysql, sql-other | SQL support for databases
    other than sqlite |'
  prefs: []
  type: TYPE_TB
- en: '| psycopg2 | 2.9.6 | postgresql | PostgreSQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| pymysql | 1.0.2 | mysql | MySQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-postgresql | 0.8.0 | postgresql | ADBC Driver for PostgreSQL
    |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-sqlite | 0.8.0 | sql-other | ADBC Driver for SQLite |'
  prefs: []
  type: TYPE_TB
- en: Other data sources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[hdf5, parquet, feather, spss, excel]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTables | 3.8.0 | hdf5 | HDF5-based reading / writing |'
  prefs: []
  type: TYPE_TB
- en: '| blosc | 1.21.3 | hdf5 | Compression for HDF5; only available on `conda` |'
  prefs: []
  type: TYPE_TB
- en: '| zlib |  | hdf5 | Compression for HDF5 |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 2022.12.0 |  | Parquet reading / writing (pyarrow is default)
    |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 10.0.1 | parquet, feather | Parquet, ORC, and feather reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: '| pyreadstat | 1.2.0 | spss | SPSS files (.sav) reading |'
  prefs: []
  type: TYPE_TB
- en: '| odfpy | 1.4.1 | excel | Open document format (.odf, .ods, .odt) reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc"), it is highly recommended to install pyarrow using conda. [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") may fail if pyarrow was installed from pypi, and [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") is not compatible with Windows OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access data in the cloud
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[fss, aws, gcp]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fsspec | 2022.11.0 | fss, gcp, aws | Handling files aside from simple local
    and HTTP (required dependency of s3fs, gcsfs). |'
  prefs: []
  type: TYPE_TB
- en: '| gcsfs | 2022.11.0 | gcp | Google Cloud Storage access |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.19.0 | gcp | Google Big Query access |'
  prefs: []
  type: TYPE_TB
- en: '| s3fs | 2022.11.0 | aws | Amazon S3 access |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[clipboard]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyQt4/PyQt5 | 5.15.9 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: '| qtpy | 2.3.0 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on operating system, system-level packages may need to installed.
    For clipboard to operate on Linux one of the CLI tools `xclip` or `xsel` must
    be installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[compression]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Zstandard | 0.19.0 | compression | Zstandard compression |'
  prefs: []
  type: TYPE_TB
- en: Consortium Standard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[consortium-standard]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| dataframe-api-compat | 0.1.7 | consortium-standard | Consortium Standard-compatible
    implementation based on pandas |  ## Python version support'
  prefs: []
  type: TYPE_NORMAL
- en: Officially Python 3.9, 3.10, 3.11 and 3.12.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Installing with Anaconda'
  prefs: []
  type: TYPE_NORMAL
- en: 'For users that are new to Python, the easiest way to install Python, pandas,
    and the packages that make up the [PyData](https://pydata.org/) stack ([SciPy](https://scipy.org/),
    [NumPy](https://numpy.org/), [Matplotlib](https://matplotlib.org/), [and more](https://docs.continuum.io/free/anaconda/reference/packages/pkg-docs/))
    is with [Anaconda](https://docs.continuum.io/free/anaconda/), a cross-platform
    (Linux, macOS, Windows) Python distribution for data analytics and scientific
    computing. Installation instructions for Anaconda [can be found here](https://docs.continuum.io/free/anaconda/install/).  ###
    Installing with Miniconda'
  prefs: []
  type: TYPE_NORMAL
- en: For users experienced with Python, the recommended way to install pandas with
    [Miniconda](https://docs.conda.io/en/latest/miniconda.html). Miniconda allows
    you to create a minimal, self-contained Python installation compared to Anaconda
    and use the [Conda](https://conda.io/en/latest/) package manager to install additional
    packages and create a virtual environment for your installation. Installation
    instructions for Miniconda [can be found here](https://docs.conda.io/en/latest/miniconda.html).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create a new conda environment. A conda environment is like
    a virtualenv that allows you to specify a specific version of Python and set of
    libraries. Run the following commands from a terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will create a minimal environment with only Python and pandas installed.
    To put your self inside this environment run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]  ### Installing from PyPI'
  prefs: []
  type: TYPE_NORMAL
- en: pandas can be installed via pip from [PyPI](https://pypi.org/project/pandas).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You must have `pip>=19.3` to install from PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to install and run pandas from a virtual environment, for
    example, using the Python standard library’s [venv](https://docs.python.org/3/library/venv.html)
  prefs: []
  type: TYPE_NORMAL
- en: pandas can also be installed with sets of optional dependencies to enable certain
    functionality. For example, to install pandas with the optional dependencies to
    read Excel files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The full list of extras that can be installed can be found in the [dependency
    section.](#install-optional-dependencies)
  prefs: []
  type: TYPE_NORMAL
- en: Handling ImportErrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you encounter an `ImportError`, it usually means that Python couldn’t find
    pandas in the list of available libraries. Python internally has a list of directories
    it searches through, to find packages. You can obtain these directories with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: One way you could be encountering this error is if you have multiple Python
    installations on your system and you don’t have pandas installed in the Python
    installation you’re currently using. In Linux/Mac you can run `which python` on
    your terminal and it will tell you which Python installation you’re using. If
    it’s something like “/usr/bin/python”, you’re using the Python from the system,
    which is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use `conda`, for quick installation and for package
    and dependency updates. You can find simple installation instructions for pandas
    [in this document](#install-miniconda).
  prefs: []
  type: TYPE_NORMAL
- en: '### Installing from source'
  prefs: []
  type: TYPE_NORMAL
- en: 'See the [contributing guide](../development/contributing.html#contributing)
    for complete instructions on building from the git source tree. Further, see [creating
    a development environment](../development/contributing_environment.html#contributing-environment)
    if you wish to create a pandas development environment.  ### Installing the development
    version of pandas'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the development version is the quickest way to:'
  prefs: []
  type: TYPE_NORMAL
- en: Try a new feature that will be shipped in the next release (that is, a feature
    from a pull-request that was recently merged to the main branch).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether a bug you encountered has been fixed since the last release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development version is usually uploaded daily to the scientific-python-nightly-wheels
    index from the PyPI registry of anaconda.org. You can install it by running.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that you might be required to uninstall an existing version of pandas to
    install the development version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]  ### Installing with Anaconda'
  prefs: []
  type: TYPE_NORMAL
- en: For users that are new to Python, the easiest way to install Python, pandas,
    and the packages that make up the [PyData](https://pydata.org/) stack ([SciPy](https://scipy.org/),
    [NumPy](https://numpy.org/), [Matplotlib](https://matplotlib.org/), [and more](https://docs.continuum.io/free/anaconda/reference/packages/pkg-docs/))
    is with [Anaconda](https://docs.continuum.io/free/anaconda/), a cross-platform
    (Linux, macOS, Windows) Python distribution for data analytics and scientific
    computing. Installation instructions for Anaconda [can be found here](https://docs.continuum.io/free/anaconda/install/).
  prefs: []
  type: TYPE_NORMAL
- en: '### Installing with Miniconda'
  prefs: []
  type: TYPE_NORMAL
- en: For users experienced with Python, the recommended way to install pandas with
    [Miniconda](https://docs.conda.io/en/latest/miniconda.html). Miniconda allows
    you to create a minimal, self-contained Python installation compared to Anaconda
    and use the [Conda](https://conda.io/en/latest/) package manager to install additional
    packages and create a virtual environment for your installation. Installation
    instructions for Miniconda [can be found here](https://docs.conda.io/en/latest/miniconda.html).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create a new conda environment. A conda environment is like
    a virtualenv that allows you to specify a specific version of Python and set of
    libraries. Run the following commands from a terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will create a minimal environment with only Python and pandas installed.
    To put your self inside this environment run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '### Installing from PyPI'
  prefs: []
  type: TYPE_NORMAL
- en: pandas can be installed via pip from [PyPI](https://pypi.org/project/pandas).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You must have `pip>=19.3` to install from PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to install and run pandas from a virtual environment, for
    example, using the Python standard library’s [venv](https://docs.python.org/3/library/venv.html)
  prefs: []
  type: TYPE_NORMAL
- en: pandas can also be installed with sets of optional dependencies to enable certain
    functionality. For example, to install pandas with the optional dependencies to
    read Excel files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The full list of extras that can be installed can be found in the [dependency
    section.](#install-optional-dependencies)
  prefs: []
  type: TYPE_NORMAL
- en: Handling ImportErrors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you encounter an `ImportError`, it usually means that Python couldn’t find
    pandas in the list of available libraries. Python internally has a list of directories
    it searches through, to find packages. You can obtain these directories with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: One way you could be encountering this error is if you have multiple Python
    installations on your system and you don’t have pandas installed in the Python
    installation you’re currently using. In Linux/Mac you can run `which python` on
    your terminal and it will tell you which Python installation you’re using. If
    it’s something like “/usr/bin/python”, you’re using the Python from the system,
    which is not recommended.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use `conda`, for quick installation and for package
    and dependency updates. You can find simple installation instructions for pandas
    [in this document](#install-miniconda).
  prefs: []
  type: TYPE_NORMAL
- en: '### Installing from source'
  prefs: []
  type: TYPE_NORMAL
- en: See the [contributing guide](../development/contributing.html#contributing)
    for complete instructions on building from the git source tree. Further, see [creating
    a development environment](../development/contributing_environment.html#contributing-environment)
    if you wish to create a pandas development environment.
  prefs: []
  type: TYPE_NORMAL
- en: '### Installing the development version of pandas'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the development version is the quickest way to:'
  prefs: []
  type: TYPE_NORMAL
- en: Try a new feature that will be shipped in the next release (that is, a feature
    from a pull-request that was recently merged to the main branch).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether a bug you encountered has been fixed since the last release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development version is usually uploaded daily to the scientific-python-nightly-wheels
    index from the PyPI registry of anaconda.org. You can install it by running.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note that you might be required to uninstall an existing version of pandas to
    install the development version.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Running the test suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas is equipped with an exhaustive set of unit tests. The packages required
    to run the tests can be installed with `pip install "pandas[test]"`. To run the
    tests from a Python terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This is just an example of what information is shown. Test failures are not
    necessarily indicative of a broken pandas installation.
  prefs: []
  type: TYPE_NORMAL
- en: '## Dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '### Required dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas requires the following dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum supported version |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [NumPy](https://numpy.org) | 1.22.4 |'
  prefs: []
  type: TYPE_TB
- en: '| [python-dateutil](https://dateutil.readthedocs.io/en/stable/) | 2.8.2 |'
  prefs: []
  type: TYPE_TB
- en: '| [pytz](https://pypi.org/project/pytz/) | 2020.1 |'
  prefs: []
  type: TYPE_TB
- en: '| [tzdata](https://pypi.org/project/tzdata/) | 2022.7 |  ### Optional dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has many optional dependencies that are only used for specific methods.
    For example, [`pandas.read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") requires the `pytables` package, while [`DataFrame.to_markdown()`](../reference/api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown") requires the `tabulate` package. If the optional
    dependency is not installed, pandas will raise an `ImportError` when the method
    requiring that dependency is called.
  prefs: []
  type: TYPE_NORMAL
- en: If using pip, optional pandas dependencies can be installed or managed in a
    file (e.g. requirements.txt or pyproject.toml) as optional extras (e.g. `pandas[performance,
    aws]`). All optional dependencies can be installed with `pandas[all]`, and specific
    sets of dependencies are listed in the sections below.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Performance dependencies (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You are highly encouraged to install these libraries, as they provide speed
    improvements, especially when working with large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[performance]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [numexpr](https://github.com/pydata/numexpr) | 2.8.4 | performance | Accelerates
    certain numerical operations by using multiple cores as well as smart chunking
    and caching to achieve large speedups |'
  prefs: []
  type: TYPE_TB
- en: '| [bottleneck](https://github.com/pydata/bottleneck) | 1.3.6 | performance
    | Accelerates certain types of `nan` by using specialized cython routines to achieve
    large speedup. |'
  prefs: []
  type: TYPE_TB
- en: '| [numba](https://github.com/numba/numba) | 0.56.4 | performance | Alternative
    execution engine for operations that accept `engine="numba"` using a JIT compiler
    that translates Python functions to optimized machine code using the LLVM compiler.
    |'
  prefs: []
  type: TYPE_TB
- en: Visualization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[plot, output-formatting]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 3.6.3 | plot | Plotting library |'
  prefs: []
  type: TYPE_TB
- en: '| Jinja2 | 3.1.2 | output-formatting | Conditional formatting with DataFrame.style
    |'
  prefs: []
  type: TYPE_TB
- en: '| tabulate | 0.9.0 | output-formatting | Printing in Markdown-friendly format
    (see [tabulate](https://github.com/astanin/python-tabulate)) |'
  prefs: []
  type: TYPE_TB
- en: Computation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[computation]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SciPy | 1.10.0 | computation | Miscellaneous statistical functions |'
  prefs: []
  type: TYPE_TB
- en: '| xarray | 2022.12.0 | computation | pandas-like API for N-dimensional data
    |'
  prefs: []
  type: TYPE_TB
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[excel]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 2.0.1 | excel | Reading Excel |'
  prefs: []
  type: TYPE_TB
- en: '| xlsxwriter | 3.0.5 | excel | Writing Excel |'
  prefs: []
  type: TYPE_TB
- en: '| openpyxl | 3.1.0 | excel | Reading / writing for xlsx files |'
  prefs: []
  type: TYPE_TB
- en: '| pyxlsb | 1.0.10 | excel | Reading for xlsb files |'
  prefs: []
  type: TYPE_TB
- en: '| python-calamine | 0.1.7 | excel | Reading for xls/xlsx/xlsb/ods files |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[html]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| BeautifulSoup4 | 4.11.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| html5lib | 1.1 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: 'One of the following combinations of libraries is needed to use the top-level
    [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)
    and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only [lxml](https://lxml.de), although see [HTML Table Parsing](../user_guide/io.html#io-html-gotchas)
    for reasons as to why you should probably **not** take this approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: if you install [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    you must install either [lxml](https://lxml.de) or [html5lib](https://github.com/html5lib/html5lib-python)
    or both. [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") will **not** work with *only* [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are highly encouraged to read [HTML Table Parsing gotchas](../user_guide/io.html#io-html-gotchas).
    It explains issues surrounding the installation and usage of the above three libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[xml]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | xml | XML parser for read_xml and tree builder for to_xml
    |'
  prefs: []
  type: TYPE_TB
- en: SQL databases
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Traditional drivers are installable with `pip install "pandas[postgresql, mysql,
    sql-other]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SQLAlchemy | 2.0.0 | postgresql, mysql, sql-other | SQL support for databases
    other than sqlite |'
  prefs: []
  type: TYPE_TB
- en: '| psycopg2 | 2.9.6 | postgresql | PostgreSQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| pymysql | 1.0.2 | mysql | MySQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-postgresql | 0.8.0 | postgresql | ADBC Driver for PostgreSQL
    |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-sqlite | 0.8.0 | sql-other | ADBC Driver for SQLite |'
  prefs: []
  type: TYPE_TB
- en: Other data sources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[hdf5, parquet, feather, spss, excel]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTables | 3.8.0 | hdf5 | HDF5-based reading / writing |'
  prefs: []
  type: TYPE_TB
- en: '| blosc | 1.21.3 | hdf5 | Compression for HDF5; only available on `conda` |'
  prefs: []
  type: TYPE_TB
- en: '| zlib |  | hdf5 | Compression for HDF5 |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 2022.12.0 |  | Parquet reading / writing (pyarrow is default)
    |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 10.0.1 | parquet, feather | Parquet, ORC, and feather reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: '| pyreadstat | 1.2.0 | spss | SPSS files (.sav) reading |'
  prefs: []
  type: TYPE_TB
- en: '| odfpy | 1.4.1 | excel | Open document format (.odf, .ods, .odt) reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc"), it is highly recommended to install pyarrow using conda. [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") may fail if pyarrow was installed from pypi, and [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") is not compatible with Windows OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access data in the cloud
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[fss, aws, gcp]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fsspec | 2022.11.0 | fss, gcp, aws | Handling files aside from simple local
    and HTTP (required dependency of s3fs, gcsfs). |'
  prefs: []
  type: TYPE_TB
- en: '| gcsfs | 2022.11.0 | gcp | Google Cloud Storage access |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.19.0 | gcp | Google Big Query access |'
  prefs: []
  type: TYPE_TB
- en: '| s3fs | 2022.11.0 | aws | Amazon S3 access |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[clipboard]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyQt4/PyQt5 | 5.15.9 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: '| qtpy | 2.3.0 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on operating system, system-level packages may need to installed.
    For clipboard to operate on Linux one of the CLI tools `xclip` or `xsel` must
    be installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[compression]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Zstandard | 0.19.0 | compression | Zstandard compression |'
  prefs: []
  type: TYPE_TB
- en: Consortium Standard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[consortium-standard]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| dataframe-api-compat | 0.1.7 | consortium-standard | Consortium Standard-compatible
    implementation based on pandas |  ### Required dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas requires the following dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Minimum supported version |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [NumPy](https://numpy.org) | 1.22.4 |'
  prefs: []
  type: TYPE_TB
- en: '| [python-dateutil](https://dateutil.readthedocs.io/en/stable/) | 2.8.2 |'
  prefs: []
  type: TYPE_TB
- en: '| [pytz](https://pypi.org/project/pytz/) | 2020.1 |'
  prefs: []
  type: TYPE_TB
- en: '| [tzdata](https://pypi.org/project/tzdata/) | 2022.7 |'
  prefs: []
  type: TYPE_TB
- en: '### Optional dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has many optional dependencies that are only used for specific methods.
    For example, [`pandas.read_hdf()`](../reference/api/pandas.read_hdf.html#pandas.read_hdf
    "pandas.read_hdf") requires the `pytables` package, while [`DataFrame.to_markdown()`](../reference/api/pandas.DataFrame.to_markdown.html#pandas.DataFrame.to_markdown
    "pandas.DataFrame.to_markdown") requires the `tabulate` package. If the optional
    dependency is not installed, pandas will raise an `ImportError` when the method
    requiring that dependency is called.
  prefs: []
  type: TYPE_NORMAL
- en: If using pip, optional pandas dependencies can be installed or managed in a
    file (e.g. requirements.txt or pyproject.toml) as optional extras (e.g. `pandas[performance,
    aws]`). All optional dependencies can be installed with `pandas[all]`, and specific
    sets of dependencies are listed in the sections below.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Performance dependencies (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You are highly encouraged to install these libraries, as they provide speed
    improvements, especially when working with large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[performance]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [numexpr](https://github.com/pydata/numexpr) | 2.8.4 | performance | Accelerates
    certain numerical operations by using multiple cores as well as smart chunking
    and caching to achieve large speedups |'
  prefs: []
  type: TYPE_TB
- en: '| [bottleneck](https://github.com/pydata/bottleneck) | 1.3.6 | performance
    | Accelerates certain types of `nan` by using specialized cython routines to achieve
    large speedup. |'
  prefs: []
  type: TYPE_TB
- en: '| [numba](https://github.com/numba/numba) | 0.56.4 | performance | Alternative
    execution engine for operations that accept `engine="numba"` using a JIT compiler
    that translates Python functions to optimized machine code using the LLVM compiler.
    |'
  prefs: []
  type: TYPE_TB
- en: Visualization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[plot, output-formatting]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 3.6.3 | plot | Plotting library |'
  prefs: []
  type: TYPE_TB
- en: '| Jinja2 | 3.1.2 | output-formatting | Conditional formatting with DataFrame.style
    |'
  prefs: []
  type: TYPE_TB
- en: '| tabulate | 0.9.0 | output-formatting | Printing in Markdown-friendly format
    (see [tabulate](https://github.com/astanin/python-tabulate)) |'
  prefs: []
  type: TYPE_TB
- en: Computation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[computation]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SciPy | 1.10.0 | computation | Miscellaneous statistical functions |'
  prefs: []
  type: TYPE_TB
- en: '| xarray | 2022.12.0 | computation | pandas-like API for N-dimensional data
    |'
  prefs: []
  type: TYPE_TB
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[excel]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 2.0.1 | excel | Reading Excel |'
  prefs: []
  type: TYPE_TB
- en: '| xlsxwriter | 3.0.5 | excel | Writing Excel |'
  prefs: []
  type: TYPE_TB
- en: '| openpyxl | 3.1.0 | excel | Reading / writing for xlsx files |'
  prefs: []
  type: TYPE_TB
- en: '| pyxlsb | 1.0.10 | excel | Reading for xlsb files |'
  prefs: []
  type: TYPE_TB
- en: '| python-calamine | 0.1.7 | excel | Reading for xls/xlsx/xlsb/ods files |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[html]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| BeautifulSoup4 | 4.11.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| html5lib | 1.1 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: 'One of the following combinations of libraries is needed to use the top-level
    [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)
    and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only [lxml](https://lxml.de), although see [HTML Table Parsing](../user_guide/io.html#io-html-gotchas)
    for reasons as to why you should probably **not** take this approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: if you install [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    you must install either [lxml](https://lxml.de) or [html5lib](https://github.com/html5lib/html5lib-python)
    or both. [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") will **not** work with *only* [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are highly encouraged to read [HTML Table Parsing gotchas](../user_guide/io.html#io-html-gotchas).
    It explains issues surrounding the installation and usage of the above three libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[xml]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | xml | XML parser for read_xml and tree builder for to_xml
    |'
  prefs: []
  type: TYPE_TB
- en: SQL databases
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Traditional drivers are installable with `pip install "pandas[postgresql, mysql,
    sql-other]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SQLAlchemy | 2.0.0 | postgresql, mysql, sql-other | SQL support for databases
    other than sqlite |'
  prefs: []
  type: TYPE_TB
- en: '| psycopg2 | 2.9.6 | postgresql | PostgreSQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| pymysql | 1.0.2 | mysql | MySQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-postgresql | 0.8.0 | postgresql | ADBC Driver for PostgreSQL
    |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-sqlite | 0.8.0 | sql-other | ADBC Driver for SQLite |'
  prefs: []
  type: TYPE_TB
- en: Other data sources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[hdf5, parquet, feather, spss, excel]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTables | 3.8.0 | hdf5 | HDF5-based reading / writing |'
  prefs: []
  type: TYPE_TB
- en: '| blosc | 1.21.3 | hdf5 | Compression for HDF5; only available on `conda` |'
  prefs: []
  type: TYPE_TB
- en: '| zlib |  | hdf5 | Compression for HDF5 |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 2022.12.0 |  | Parquet reading / writing (pyarrow is default)
    |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 10.0.1 | parquet, feather | Parquet, ORC, and feather reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: '| pyreadstat | 1.2.0 | spss | SPSS files (.sav) reading |'
  prefs: []
  type: TYPE_TB
- en: '| odfpy | 1.4.1 | excel | Open document format (.odf, .ods, .odt) reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc"), it is highly recommended to install pyarrow using conda. [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") may fail if pyarrow was installed from pypi, and [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") is not compatible with Windows OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access data in the cloud
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[fss, aws, gcp]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fsspec | 2022.11.0 | fss, gcp, aws | Handling files aside from simple local
    and HTTP (required dependency of s3fs, gcsfs). |'
  prefs: []
  type: TYPE_TB
- en: '| gcsfs | 2022.11.0 | gcp | Google Cloud Storage access |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.19.0 | gcp | Google Big Query access |'
  prefs: []
  type: TYPE_TB
- en: '| s3fs | 2022.11.0 | aws | Amazon S3 access |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[clipboard]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyQt4/PyQt5 | 5.15.9 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: '| qtpy | 2.3.0 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on operating system, system-level packages may need to installed.
    For clipboard to operate on Linux one of the CLI tools `xclip` or `xsel` must
    be installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[compression]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Zstandard | 0.19.0 | compression | Zstandard compression |'
  prefs: []
  type: TYPE_TB
- en: Consortium Standard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[consortium-standard]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| dataframe-api-compat | 0.1.7 | consortium-standard | Consortium Standard-compatible
    implementation based on pandas |'
  prefs: []
  type: TYPE_TB
- en: '#### Performance dependencies (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You are highly encouraged to install these libraries, as they provide speed
    improvements, especially when working with large data sets.
  prefs: []
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[performance]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [numexpr](https://github.com/pydata/numexpr) | 2.8.4 | performance | Accelerates
    certain numerical operations by using multiple cores as well as smart chunking
    and caching to achieve large speedups |'
  prefs: []
  type: TYPE_TB
- en: '| [bottleneck](https://github.com/pydata/bottleneck) | 1.3.6 | performance
    | Accelerates certain types of `nan` by using specialized cython routines to achieve
    large speedup. |'
  prefs: []
  type: TYPE_TB
- en: '| [numba](https://github.com/numba/numba) | 0.56.4 | performance | Alternative
    execution engine for operations that accept `engine="numba"` using a JIT compiler
    that translates Python functions to optimized machine code using the LLVM compiler.
    |'
  prefs: []
  type: TYPE_TB
- en: Visualization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[plot, output-formatting]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| matplotlib | 3.6.3 | plot | Plotting library |'
  prefs: []
  type: TYPE_TB
- en: '| Jinja2 | 3.1.2 | output-formatting | Conditional formatting with DataFrame.style
    |'
  prefs: []
  type: TYPE_TB
- en: '| tabulate | 0.9.0 | output-formatting | Printing in Markdown-friendly format
    (see [tabulate](https://github.com/astanin/python-tabulate)) |'
  prefs: []
  type: TYPE_TB
- en: Computation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[computation]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SciPy | 1.10.0 | computation | Miscellaneous statistical functions |'
  prefs: []
  type: TYPE_TB
- en: '| xarray | 2022.12.0 | computation | pandas-like API for N-dimensional data
    |'
  prefs: []
  type: TYPE_TB
- en: Excel files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[excel]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| xlrd | 2.0.1 | excel | Reading Excel |'
  prefs: []
  type: TYPE_TB
- en: '| xlsxwriter | 3.0.5 | excel | Writing Excel |'
  prefs: []
  type: TYPE_TB
- en: '| openpyxl | 3.1.0 | excel | Reading / writing for xlsx files |'
  prefs: []
  type: TYPE_TB
- en: '| pyxlsb | 1.0.10 | excel | Reading for xlsb files |'
  prefs: []
  type: TYPE_TB
- en: '| python-calamine | 0.1.7 | excel | Reading for xls/xlsx/xlsb/ods files |'
  prefs: []
  type: TYPE_TB
- en: HTML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[html]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| BeautifulSoup4 | 4.11.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| html5lib | 1.1 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | html | HTML parser for read_html |'
  prefs: []
  type: TYPE_TB
- en: 'One of the following combinations of libraries is needed to use the top-level
    [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html "pandas.read_html")
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup) and [html5lib](https://github.com/html5lib/html5lib-python)
    and [lxml](https://lxml.de)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only [lxml](https://lxml.de), although see [HTML Table Parsing](../user_guide/io.html#io-html-gotchas)
    for reasons as to why you should probably **not** take this approach.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: if you install [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    you must install either [lxml](https://lxml.de) or [html5lib](https://github.com/html5lib/html5lib-python)
    or both. [`read_html()`](../reference/api/pandas.read_html.html#pandas.read_html
    "pandas.read_html") will **not** work with *only* [BeautifulSoup4](https://www.crummy.com/software/BeautifulSoup)
    installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are highly encouraged to read [HTML Table Parsing gotchas](../user_guide/io.html#io-html-gotchas).
    It explains issues surrounding the installation and usage of the above three libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[xml]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| lxml | 4.9.2 | xml | XML parser for read_xml and tree builder for to_xml
    |'
  prefs: []
  type: TYPE_TB
- en: SQL databases
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Traditional drivers are installable with `pip install "pandas[postgresql, mysql,
    sql-other]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| SQLAlchemy | 2.0.0 | postgresql, mysql, sql-other | SQL support for databases
    other than sqlite |'
  prefs: []
  type: TYPE_TB
- en: '| psycopg2 | 2.9.6 | postgresql | PostgreSQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| pymysql | 1.0.2 | mysql | MySQL engine for sqlalchemy |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-postgresql | 0.8.0 | postgresql | ADBC Driver for PostgreSQL
    |'
  prefs: []
  type: TYPE_TB
- en: '| adbc-driver-sqlite | 0.8.0 | sql-other | ADBC Driver for SQLite |'
  prefs: []
  type: TYPE_TB
- en: Other data sources
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[hdf5, parquet, feather, spss, excel]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTables | 3.8.0 | hdf5 | HDF5-based reading / writing |'
  prefs: []
  type: TYPE_TB
- en: '| blosc | 1.21.3 | hdf5 | Compression for HDF5; only available on `conda` |'
  prefs: []
  type: TYPE_TB
- en: '| zlib |  | hdf5 | Compression for HDF5 |'
  prefs: []
  type: TYPE_TB
- en: '| fastparquet | 2022.12.0 |  | Parquet reading / writing (pyarrow is default)
    |'
  prefs: []
  type: TYPE_TB
- en: '| pyarrow | 10.0.1 | parquet, feather | Parquet, ORC, and feather reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: '| pyreadstat | 1.2.0 | spss | SPSS files (.sav) reading |'
  prefs: []
  type: TYPE_TB
- en: '| odfpy | 1.4.1 | excel | Open document format (.odf, .ods, .odt) reading /
    writing |'
  prefs: []
  type: TYPE_TB
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc"), it is highly recommended to install pyarrow using conda. [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") may fail if pyarrow was installed from pypi, and [`read_orc()`](../reference/api/pandas.read_orc.html#pandas.read_orc
    "pandas.read_orc") is not compatible with Windows OS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access data in the cloud
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[fss, aws, gcp]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| fsspec | 2022.11.0 | fss, gcp, aws | Handling files aside from simple local
    and HTTP (required dependency of s3fs, gcsfs). |'
  prefs: []
  type: TYPE_TB
- en: '| gcsfs | 2022.11.0 | gcp | Google Cloud Storage access |'
  prefs: []
  type: TYPE_TB
- en: '| pandas-gbq | 0.19.0 | gcp | Google Big Query access |'
  prefs: []
  type: TYPE_TB
- en: '| s3fs | 2022.11.0 | aws | Amazon S3 access |'
  prefs: []
  type: TYPE_TB
- en: Clipboard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[clipboard]"`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyQt4/PyQt5 | 5.15.9 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: '| qtpy | 2.3.0 | clipboard | Clipboard I/O |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on operating system, system-level packages may need to installed.
    For clipboard to operate on Linux one of the CLI tools `xclip` or `xsel` must
    be installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Compression
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[compression]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Zstandard | 0.19.0 | compression | Zstandard compression |'
  prefs: []
  type: TYPE_TB
- en: Consortium Standard
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Installable with `pip install "pandas[consortium-standard]"`
  prefs: []
  type: TYPE_NORMAL
- en: '| Dependency | Minimum Version | pip extra | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| dataframe-api-compat | 0.1.7 | consortium-standard | Consortium Standard-compatible
    implementation based on pandas |'
  prefs: []
  type: TYPE_TB
