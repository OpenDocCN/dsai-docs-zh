["```py\n>     In [1]: p = pd.DataFrame({\"first\": [4, 5, 8], \"second\": [0, 0, 3]})\n>     \n>     In [2]: p % 0\n>     Out[2]: \n>      first  second\n>     0    NaN     NaN\n>     1    NaN     NaN\n>     2    NaN     NaN\n>     \n>     In [3]: p % p\n>     Out[3]: \n>      first  second\n>     0    0.0     NaN\n>     1    0.0     NaN\n>     2    0.0     0.0\n>     \n>     In [4]: p / p\n>     Out[4]: \n>      first  second\n>     0    1.0     NaN\n>     1    1.0     NaN\n>     2    1.0     1.0\n>     \n>     In [5]: p / 0\n>     Out[5]: \n>      first  second\n>     0    inf     NaN\n>     1    inf     NaN\n>     2    inf     inf \n>     ```", "```py\n>     In [2]: df2 = pd.DataFrame([{\"val1\": 1, \"val2\": 20},\n>      ...:                    {\"val1\": 1, \"val2\": 19},\n>      ...:                    {\"val1\": 1, \"val2\": 27},\n>      ...:                    {\"val1\": 1, \"val2\": 12}])\n>     \n>     In [3]: def func(dataf):\n>      ...:    return dataf[\"val2\"] - dataf[\"val2\"].mean()\n>      ...:\n>     \n>     In [4]: # squeezing the result frame to a series (because we have unique groups)\n>      ...: df2.groupby(\"val1\", squeeze=True).apply(func)\n>     Out[4]:\n>     0    0.5\n>     1   -0.5\n>     2    7.5\n>     3   -7.5\n>     Name: 1, dtype: float64\n>     \n>     In [5]: # no squeezing (the default, and behavior in 0.10.1)\n>      ...: df2.groupby(\"val1\").apply(func)\n>     Out[5]:\n>     val2    0    1    2    3\n>     val1\n>     1     0.5 -0.5  7.5 -7.5 \n>     ```", "```py\n>     In [6]: df = pd.DataFrame(range(5), index=list(\"ABCDE\"), columns=[\"a\"])\n>     \n>     In [7]: mask = df.a % 2 == 0\n>     \n>     In [8]: mask\n>     Out[8]: \n>     A     True\n>     B    False\n>     C     True\n>     D    False\n>     E     True\n>     Name: a, dtype: bool\n>     \n>     # this is what you should use\n>     In [9]: df.loc[mask]\n>     Out[9]: \n>      a\n>     A  0\n>     C  2\n>     E  4\n>     \n>     # this will work as well\n>     In [10]: df.iloc[mask.values]\n>     Out[10]: \n>      a\n>     A  0\n>     C  2\n>     E  4 \n>     ```", "```py\n>         from pandas.io.parsers import ExcelFile\n>         \n>         xls = ExcelFile(\"path_to_file.xls\")\n>         xls.parse(\"Sheet1\", index_col=None, na_values=[\"NA\"]) \n>         ```", "```py\n>         import pandas as pd\n>         \n>         pd.read_excel(\"path_to_file.xls\", \"Sheet1\", index_col=None, na_values=[\"NA\"]) \n>         ```", "```py\n>         from pandas.io.sql import read_frame\n>         \n>         read_frame(...) \n>         ```", "```py\n>     In [11]: df = pd.DataFrame({\"a\": range(3), \"b\": list(\"abc\")})\n>     \n>     In [12]: print(df)\n>      a  b\n>     0  0  a\n>     1  1  b\n>     2  2  c\n>     \n>     In [13]: html = df.to_html()\n>     \n>     In [14]: alist = pd.read_html(html, index_col=0)\n>     \n>     In [15]: print(df == alist[0])\n>      a     b\n>     0  True  True\n>     1  True  True\n>     2  True  True \n>     ```", "```py\n>         In [16]: mi_idx = pd.MultiIndex.from_arrays([[1, 2, 3, 4], list(\"abcd\")], names=list(\"ab\"))\n>         \n>         In [17]: mi_col = pd.MultiIndex.from_arrays([[1, 2], list(\"ab\")], names=list(\"cd\"))\n>         \n>         In [18]: df = pd.DataFrame(np.ones((4, 2)), index=mi_idx, columns=mi_col)\n>         \n>         In [19]: df.to_csv(\"mi.csv\")\n>         \n>         In [20]: print(open(\"mi.csv\").read())\n>         c,,1,2\n>         d,,a,b\n>         a,b,,\n>         1,a,1.0,1.0\n>         2,b,1.0,1.0\n>         3,c,1.0,1.0\n>         4,d,1.0,1.0\n>         \n>         \n>         In [21]: pd.read_csv(\"mi.csv\", header=[0, 1, 2, 3], index_col=[0, 1])\n>         Out[21]: \n>         c                    1                  2\n>         d                    a                  b\n>         a   Unnamed: 2_level_2 Unnamed: 3_level_2\n>         1                  1.0                1.0\n>         2 b                1.0                1.0\n>         3 c                1.0                1.0\n>         4 d                1.0                1.0 \n>         ```", "```py\n>     In [25]: path = 'store_iterator.h5'\n>     \n>     In [26]: pd.DataFrame(np.random.randn(10, 2)).to_hdf(path, 'df', table=True)\n>     \n>     In [27]: for df in pd.read_hdf(path, 'df', chunksize=3):\n>      ....:    print(df)\n>      ....:\n>      0         1\n>     0  0.713216 -0.778461\n>     1 -0.661062  0.862877\n>     2  0.344342  0.149565\n>      0         1\n>     3 -0.626968 -0.875772\n>     4 -0.930687 -0.218983\n>     5  0.949965 -0.442354\n>      0         1\n>     6 -0.402985  1.111358\n>     7 -0.241527 -0.670477\n>     8  0.049355  0.632633\n>      0         1\n>     9 -1.502767 -1.225492 \n>     ```", "```py\n>     In [22]: df = pd.DataFrame({\"a\": list(\"ab..\"), \"b\": [1, 2, 3, 4]})\n>     \n>     In [23]: df.replace(regex=r\"\\s*\\.\\s*\", value=np.nan)\n>     Out[23]: \n>      a  b\n>     0    a  1\n>     1    b  2\n>     2  NaN  3\n>     3  NaN  4 \n>     ```", "```py\n>     In [24]: df.replace(\".\", np.nan)\n>     Out[24]: \n>      a  b\n>     0    a  1\n>     1    b  2\n>     2  NaN  3\n>     3  NaN  4 \n>     ```", "```py\n>     In [31]: pd.get_option('a.b')\n>     Out[31]: 2\n>     \n>     In [32]: pd.get_option('b.c')\n>     Out[32]: 3\n>     \n>     In [33]: pd.set_option('a.b', 1, 'b.c', 4)\n>     \n>     In [34]: pd.get_option('a.b')\n>     Out[34]: 1\n>     \n>     In [35]: pd.get_option('b.c')\n>     Out[35]: 4 \n>     ```", "```py\n>     In [25]: sf = pd.Series([1, 1, 2, 3, 3, 3])\n>     \n>     In [26]: sf.groupby(sf).filter(lambda x: x.sum() > 2)\n>     Out[26]: \n>     3    3\n>     4    3\n>     5    3\n>     dtype: int64 \n>     ```", "```py\n>     In [27]: dff = pd.DataFrame({\"A\": np.arange(8), \"B\": list(\"aabbbbcc\")})\n>     \n>     In [28]: dff.groupby(\"B\").filter(lambda x: len(x) > 2)\n>     Out[28]: \n>      A  B\n>     2  2  b\n>     3  3  b\n>     4  4  b\n>     5  5  b \n>     ```", "```py\n>     In [29]: dff.groupby(\"B\").filter(lambda x: len(x) > 2, dropna=False)\n>     Out[29]: \n>      A    B\n>     0  NaN  NaN\n>     1  NaN  NaN\n>     2  2.0    b\n>     3  3.0    b\n>     4  4.0    b\n>     5  5.0    b\n>     6  NaN  NaN\n>     7  NaN  NaN \n>     ```", "```py\n>     In [30]: from pandas.tseries.offsets import CustomBusinessDay\n>     \n>     In [31]: from datetime import datetime\n>     \n>     # As an interesting example, let's look at Egypt where\n>     # a Friday-Saturday weekend is observed.\n>     In [32]: weekmask_egypt = \"Sun Mon Tue Wed Thu\"\n>     \n>     # They also observe International Workers' Day so let's\n>     # add that for a couple of years\n>     In [33]: holidays = [\"2012-05-01\", datetime(2013, 5, 1), np.datetime64(\"2014-05-01\")]\n>     \n>     In [34]: bday_egypt = CustomBusinessDay(holidays=holidays, weekmask=weekmask_egypt)\n>     \n>     In [35]: dt = datetime(2013, 4, 30)\n>     \n>     In [36]: print(dt + 2 * bday_egypt)\n>     2013-05-05 00:00:00\n>     \n>     In [37]: dts = pd.date_range(dt, periods=5, freq=bday_egypt)\n>     \n>     In [38]: print(pd.Series(dts.weekday, dts).map(pd.Series(\"Mon Tue Wed Thu Fri Sat Sun\".split())))\n>     2013-04-30    Tue\n>     2013-05-02    Thu\n>     2013-05-05    Sun\n>     2013-05-06    Mon\n>     2013-05-07    Tue\n>     Freq: C, dtype: object \n>     ```", "```py\n>     In [38]: strs = \"go\", \"bow\", \"joe\", \"slow\"\n>     \n>     In [32]: ds = pd.Series(strs)\n>     \n>     In [33]: for s in ds.str:\n>      ...:     print(s)\n>     \n>     0    g\n>     1    b\n>     2    j\n>     3    s\n>     dtype: object\n>     0    o\n>     1    o\n>     2    o\n>     3    l\n>     dtype: object\n>     0    NaN\n>     1      w\n>     2      e\n>     3      o\n>     dtype: object\n>     0    NaN\n>     1    NaN\n>     2    NaN\n>     3      w\n>     dtype: object\n>     \n>     In [41]: s\n>     Out[41]:\n>     0    NaN\n>     1    NaN\n>     2    NaN\n>     3      w\n>     dtype: object\n>     \n>     In [42]: s.dropna().values.item() == \"w\"\n>     Out[42]: True \n>     ```", "```py\n>     In [1]: p = pd.DataFrame({\"first\": [4, 5, 8], \"second\": [0, 0, 3]})\n>     \n>     In [2]: p % 0\n>     Out[2]: \n>      first  second\n>     0    NaN     NaN\n>     1    NaN     NaN\n>     2    NaN     NaN\n>     \n>     In [3]: p % p\n>     Out[3]: \n>      first  second\n>     0    0.0     NaN\n>     1    0.0     NaN\n>     2    0.0     0.0\n>     \n>     In [4]: p / p\n>     Out[4]: \n>      first  second\n>     0    1.0     NaN\n>     1    1.0     NaN\n>     2    1.0     1.0\n>     \n>     In [5]: p / 0\n>     Out[5]: \n>      first  second\n>     0    inf     NaN\n>     1    inf     NaN\n>     2    inf     inf \n>     ```", "```py\n>     In [2]: df2 = pd.DataFrame([{\"val1\": 1, \"val2\": 20},\n>      ...:                    {\"val1\": 1, \"val2\": 19},\n>      ...:                    {\"val1\": 1, \"val2\": 27},\n>      ...:                    {\"val1\": 1, \"val2\": 12}])\n>     \n>     In [3]: def func(dataf):\n>      ...:    return dataf[\"val2\"] - dataf[\"val2\"].mean()\n>      ...:\n>     \n>     In [4]: # squeezing the result frame to a series (because we have unique groups)\n>      ...: df2.groupby(\"val1\", squeeze=True).apply(func)\n>     Out[4]:\n>     0    0.5\n>     1   -0.5\n>     2    7.5\n>     3   -7.5\n>     Name: 1, dtype: float64\n>     \n>     In [5]: # no squeezing (the default, and behavior in 0.10.1)\n>      ...: df2.groupby(\"val1\").apply(func)\n>     Out[5]:\n>     val2    0    1    2    3\n>     val1\n>     1     0.5 -0.5  7.5 -7.5 \n>     ```", "```py\n>     In [6]: df = pd.DataFrame(range(5), index=list(\"ABCDE\"), columns=[\"a\"])\n>     \n>     In [7]: mask = df.a % 2 == 0\n>     \n>     In [8]: mask\n>     Out[8]: \n>     A     True\n>     B    False\n>     C     True\n>     D    False\n>     E     True\n>     Name: a, dtype: bool\n>     \n>     # this is what you should use\n>     In [9]: df.loc[mask]\n>     Out[9]: \n>      a\n>     A  0\n>     C  2\n>     E  4\n>     \n>     # this will work as well\n>     In [10]: df.iloc[mask.values]\n>     Out[10]: \n>      a\n>     A  0\n>     C  2\n>     E  4 \n>     ```", "```py\n>         from pandas.io.parsers import ExcelFile\n>         \n>         xls = ExcelFile(\"path_to_file.xls\")\n>         xls.parse(\"Sheet1\", index_col=None, na_values=[\"NA\"]) \n>         ```", "```py\n>         import pandas as pd\n>         \n>         pd.read_excel(\"path_to_file.xls\", \"Sheet1\", index_col=None, na_values=[\"NA\"]) \n>         ```", "```py\n>         from pandas.io.sql import read_frame\n>         \n>         read_frame(...) \n>         ```", "```py\n>     In [11]: df = pd.DataFrame({\"a\": range(3), \"b\": list(\"abc\")})\n>     \n>     In [12]: print(df)\n>      a  b\n>     0  0  a\n>     1  1  b\n>     2  2  c\n>     \n>     In [13]: html = df.to_html()\n>     \n>     In [14]: alist = pd.read_html(html, index_col=0)\n>     \n>     In [15]: print(df == alist[0])\n>      a     b\n>     0  True  True\n>     1  True  True\n>     2  True  True \n>     ```", "```py\n>         In [16]: mi_idx = pd.MultiIndex.from_arrays([[1, 2, 3, 4], list(\"abcd\")], names=list(\"ab\"))\n>         \n>         In [17]: mi_col = pd.MultiIndex.from_arrays([[1, 2], list(\"ab\")], names=list(\"cd\"))\n>         \n>         In [18]: df = pd.DataFrame(np.ones((4, 2)), index=mi_idx, columns=mi_col)\n>         \n>         In [19]: df.to_csv(\"mi.csv\")\n>         \n>         In [20]: print(open(\"mi.csv\").read())\n>         c,,1,2\n>         d,,a,b\n>         a,b,,\n>         1,a,1.0,1.0\n>         2,b,1.0,1.0\n>         3,c,1.0,1.0\n>         4,d,1.0,1.0\n>         \n>         \n>         In [21]: pd.read_csv(\"mi.csv\", header=[0, 1, 2, 3], index_col=[0, 1])\n>         Out[21]: \n>         c                    1                  2\n>         d                    a                  b\n>         a   Unnamed: 2_level_2 Unnamed: 3_level_2\n>         1                  1.0                1.0\n>         2 b                1.0                1.0\n>         3 c                1.0                1.0\n>         4 d                1.0                1.0 \n>         ```", "```py\n>     In [25]: path = 'store_iterator.h5'\n>     \n>     In [26]: pd.DataFrame(np.random.randn(10, 2)).to_hdf(path, 'df', table=True)\n>     \n>     In [27]: for df in pd.read_hdf(path, 'df', chunksize=3):\n>      ....:    print(df)\n>      ....:\n>      0         1\n>     0  0.713216 -0.778461\n>     1 -0.661062  0.862877\n>     2  0.344342  0.149565\n>      0         1\n>     3 -0.626968 -0.875772\n>     4 -0.930687 -0.218983\n>     5  0.949965 -0.442354\n>      0         1\n>     6 -0.402985  1.111358\n>     7 -0.241527 -0.670477\n>     8  0.049355  0.632633\n>      0         1\n>     9 -1.502767 -1.225492 \n>     ```", "```py\n>     In [22]: df = pd.DataFrame({\"a\": list(\"ab..\"), \"b\": [1, 2, 3, 4]})\n>     \n>     In [23]: df.replace(regex=r\"\\s*\\.\\s*\", value=np.nan)\n>     Out[23]: \n>      a  b\n>     0    a  1\n>     1    b  2\n>     2  NaN  3\n>     3  NaN  4 \n>     ```", "```py\n>     In [24]: df.replace(\".\", np.nan)\n>     Out[24]: \n>      a  b\n>     0    a  1\n>     1    b  2\n>     2  NaN  3\n>     3  NaN  4 \n>     ```", "```py\n>     In [31]: pd.get_option('a.b')\n>     Out[31]: 2\n>     \n>     In [32]: pd.get_option('b.c')\n>     Out[32]: 3\n>     \n>     In [33]: pd.set_option('a.b', 1, 'b.c', 4)\n>     \n>     In [34]: pd.get_option('a.b')\n>     Out[34]: 1\n>     \n>     In [35]: pd.get_option('b.c')\n>     Out[35]: 4 \n>     ```", "```py\n>     In [25]: sf = pd.Series([1, 1, 2, 3, 3, 3])\n>     \n>     In [26]: sf.groupby(sf).filter(lambda x: x.sum() > 2)\n>     Out[26]: \n>     3    3\n>     4    3\n>     5    3\n>     dtype: int64 \n>     ```", "```py\n>     In [27]: dff = pd.DataFrame({\"A\": np.arange(8), \"B\": list(\"aabbbbcc\")})\n>     \n>     In [28]: dff.groupby(\"B\").filter(lambda x: len(x) > 2)\n>     Out[28]: \n>      A  B\n>     2  2  b\n>     3  3  b\n>     4  4  b\n>     5  5  b \n>     ```", "```py\n>     In [29]: dff.groupby(\"B\").filter(lambda x: len(x) > 2, dropna=False)\n>     Out[29]: \n>      A    B\n>     0  NaN  NaN\n>     1  NaN  NaN\n>     2  2.0    b\n>     3  3.0    b\n>     4  4.0    b\n>     5  5.0    b\n>     6  NaN  NaN\n>     7  NaN  NaN \n>     ```", "```py\n>     In [30]: from pandas.tseries.offsets import CustomBusinessDay\n>     \n>     In [31]: from datetime import datetime\n>     \n>     # As an interesting example, let's look at Egypt where\n>     # a Friday-Saturday weekend is observed.\n>     In [32]: weekmask_egypt = \"Sun Mon Tue Wed Thu\"\n>     \n>     # They also observe International Workers' Day so let's\n>     # add that for a couple of years\n>     In [33]: holidays = [\"2012-05-01\", datetime(2013, 5, 1), np.datetime64(\"2014-05-01\")]\n>     \n>     In [34]: bday_egypt = CustomBusinessDay(holidays=holidays, weekmask=weekmask_egypt)\n>     \n>     In [35]: dt = datetime(2013, 4, 30)\n>     \n>     In [36]: print(dt + 2 * bday_egypt)\n>     2013-05-05 00:00:00\n>     \n>     In [37]: dts = pd.date_range(dt, periods=5, freq=bday_egypt)\n>     \n>     In [38]: print(pd.Series(dts.weekday, dts).map(pd.Series(\"Mon Tue Wed Thu Fri Sat Sun\".split())))\n>     2013-04-30    Tue\n>     2013-05-02    Thu\n>     2013-05-05    Sun\n>     2013-05-06    Mon\n>     2013-05-07    Tue\n>     Freq: C, dtype: object \n>     ```", "```py\n>     In [38]: strs = \"go\", \"bow\", \"joe\", \"slow\"\n>     \n>     In [32]: ds = pd.Series(strs)\n>     \n>     In [33]: for s in ds.str:\n>      ...:     print(s)\n>     \n>     0    g\n>     1    b\n>     2    j\n>     3    s\n>     dtype: object\n>     0    o\n>     1    o\n>     2    o\n>     3    l\n>     dtype: object\n>     0    NaN\n>     1      w\n>     2      e\n>     3      o\n>     dtype: object\n>     0    NaN\n>     1    NaN\n>     2    NaN\n>     3      w\n>     dtype: object\n>     \n>     In [41]: s\n>     Out[41]:\n>     0    NaN\n>     1    NaN\n>     2    NaN\n>     3      w\n>     dtype: object\n>     \n>     In [42]: s.dropna().values.item() == \"w\"\n>     Out[42]: True \n>     ```"]