["```py\ndf = pd.DataFrame({\"A\": np.array([\"foo\", \"bar\", \"bah\", \"foo\", \"bar\"])})\ndf[\"A\"].iloc[0] = np.nan \n```", "```py\nIn [1]: df = pd.DataFrame({\"A\": np.array([\"foo\", \"bar\", \"bah\", \"foo\", \"bar\"])})\n\nIn [2]: df.loc[0, \"A\"] = np.nan\n\nIn [3]: df\nOut[3]: \n A\n0  NaN\n1  bar\n2  bah\n3  foo\n4  bar \n```", "```py\n    In [4]: max_info_rows = pd.get_option(\"max_info_rows\")\n\n    In [5]: df = pd.DataFrame(\n     ...:    {\n     ...:        \"A\": np.random.randn(10),\n     ...:        \"B\": np.random.randn(10),\n     ...:        \"C\": pd.date_range(\"20130101\", periods=10),\n     ...:    }\n     ...: )\n     ...: \n\n    In [6]: df.iloc[3:6, [0, 2]] = np.nan \n    ```", "```py\n    # set to not display the null counts\n    In [7]: pd.set_option(\"max_info_rows\", 0)\n\n    In [8]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 10 entries, 0 to 9\n    Data columns (total 3 columns):\n     #   Column  Dtype \n    ---  ------  ----- \n     0   A       float64 \n     1   B       float64 \n     2   C       datetime64[ns]\n    dtypes: datetime64[ns](1), float64(2)\n    memory usage: 368.0 bytes \n    ```", "```py\n    # this is the default (same as in 0.13.0)\n    In [9]: pd.set_option(\"max_info_rows\", max_info_rows)\n\n    In [10]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 10 entries, 0 to 9\n    Data columns (total 3 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       7 non-null      float64 \n     1   B       10 non-null     float64 \n     2   C       7 non-null      datetime64[ns]\n    dtypes: datetime64[ns](1), float64(2)\n    memory usage: 368.0 bytes \n    ```", "```py\n    In [11]: df = pd.DataFrame([[1, 2], [3, 4]])\n\n    In [12]: pd.set_option(\"show_dimensions\", False)\n\n    In [13]: df\n    Out[13]: \n     0  1\n    0  1  2\n    1  3  4\n\n    In [14]: pd.set_option(\"show_dimensions\", True)\n\n    In [15]: df\n    Out[15]: \n     0  1\n    0  1  2\n    1  3  4\n\n    [2 rows x 2 columns] \n    ```", "```py\n     age                 today               diff\n    0 2001-01-01 00:00:00 2013-04-19 00:00:00 4491 days, 00:00:00\n    1 2004-06-01 00:00:00 2013-04-19 00:00:00 3244 days, 00:00:00 \n    ```", "```py\n    In [16]: df = pd.DataFrame(\n     ....:    [pd.Timestamp(\"20010101\"), pd.Timestamp(\"20040601\")], columns=[\"age\"]\n     ....: )\n     ....: \n\n    In [17]: df[\"today\"] = pd.Timestamp(\"20130419\")\n\n    In [18]: df[\"diff\"] = df[\"today\"] - df[\"age\"]\n\n    In [19]: df\n    Out[19]: \n     age      today      diff\n    0 2001-01-01 2013-04-19 4491 days\n    1 2004-06-01 2013-04-19 3244 days\n\n    [2 rows x 3 columns] \n    ```", "```py\n    In [20]: s = pd.Series([\"a\", \"a|b\", np.nan, \"a|c\"])\n\n    In [21]: s.str.get_dummies(sep=\"|\")\n    Out[21]: \n     a  b  c\n    0  1  0  0\n    1  1  1  0\n    2  0  0  0\n    3  1  0  1\n\n    [4 rows x 3 columns] \n    ```", "```py\n    df = pd.DataFrame({\"col\": [\"foo\", 0, np.nan]})\n    df2 = pd.DataFrame({\"col\": [np.nan, 0, \"foo\"]}, index=[2, 1, 0])\n    df.equals(df2)\n    df.equals(df2.sort_index()) \n    ```", "```py\n    In [32]: def applied_func(col):\n     ....:    print(\"Apply function being called with: \", col)\n     ....:    return col.sum()\n     ....:\n\n    In [33]: empty = DataFrame(columns=['a', 'b'])\n\n    In [34]: empty.apply(applied_func)\n    Apply function being called with:  Series([], Length: 0, dtype: float64)\n    Out[34]:\n    a   NaN\n    b   NaN\n    Length: 2, dtype: float64 \n    ```", "```py\n    In [35]: empty.apply(applied_func, reduce=True)\n    Out[35]:\n    a   NaN\n    b   NaN\n    Length: 2, dtype: float64\n\n    In [36]: empty.apply(applied_func, reduce=False)\n    Out[36]:\n    Empty DataFrame\n    Columns: [a, b]\n    Index: []\n\n    [0 rows x 2 columns] \n    ```", "```py\n    # Try to infer the format for the index column\n    df = pd.read_csv(\n        \"foo.csv\", index_col=0, parse_dates=True, infer_datetime_format=True\n    ) \n    ```", "```py\n    In [22]: shades = [\"light\", \"dark\"]\n\n    In [23]: colors = [\"red\", \"green\", \"blue\"]\n\n    In [24]: pd.MultiIndex.from_product([shades, colors], names=[\"shade\", \"color\"])\n    Out[24]: \n    MultiIndex([('light',   'red'),\n     ('light', 'green'),\n     ('light',  'blue'),\n     ( 'dark',   'red'),\n     ( 'dark', 'green'),\n     ( 'dark',  'blue')],\n     names=['shade', 'color']) \n    ```", "```py\n    In [28]: import pandas._testing as tm\n\n    In [29]: panel = tm.makePanel(5)\n\n    In [30]: panel\n    Out[30]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 3 (items) x 5 (major_axis) x 4 (minor_axis)\n    Items axis: ItemA to ItemC\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: A to D\n\n    In [31]: panel['ItemA']\n    Out[31]:\n     A         B         C         D\n    2000-01-03 -0.673690  0.577046 -1.344312 -1.469388\n    2000-01-04  0.113648 -1.715002  0.844885  0.357021\n    2000-01-05 -1.478427 -1.039268  1.075770 -0.674600\n    2000-01-06  0.524988 -0.370647 -0.109050 -1.776904\n    2000-01-07  0.404705 -1.157892  1.643563 -0.968914\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [32]: panel.apply(lambda x: x.dtype, axis='items')\n    Out[32]:\n     A        B        C        D\n    2000-01-03  float64  float64  float64  float64\n    2000-01-04  float64  float64  float64  float64\n    2000-01-05  float64  float64  float64  float64\n    2000-01-06  float64  float64  float64  float64\n    2000-01-07  float64  float64  float64  float64\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [33]: panel.apply(lambda x: x.sum(), axis='major_axis')\n    Out[33]:\n     ItemA     ItemB     ItemC\n    A -1.108775 -1.090118 -2.984435\n    B -3.705764  0.409204  1.866240\n    C  2.110856  2.960500 -0.974967\n    D -4.532785  0.303202 -3.685193\n\n    [4 rows x 3 columns] \n    ```", "```py\n    In [34]: panel.sum('major_axis')\n    Out[34]:\n     ItemA     ItemB     ItemC\n    A -1.108775 -1.090118 -2.984435\n    B -3.705764  0.409204  1.866240\n    C  2.110856  2.960500 -0.974967\n    D -4.532785  0.303202 -3.685193\n\n    [4 rows x 3 columns] \n    ```", "```py\n    In [35]: result = panel.apply(lambda x: (x - x.mean()) / x.std(),\n     ....:                      axis='major_axis')\n     ....:\n\n    In [36]: result\n    Out[36]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 3 (items) x 5 (major_axis) x 4 (minor_axis)\n    Items axis: ItemA to ItemC\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: A to D\n\n    In [37]: result['ItemA']                           # noqa E999\n    Out[37]:\n     A         B         C         D\n    2000-01-03 -0.535778  1.500802 -1.506416 -0.681456\n    2000-01-04  0.397628 -1.108752  0.360481  1.529895\n    2000-01-05 -1.489811 -0.339412  0.557374  0.280845\n    2000-01-06  0.885279  0.421830 -0.453013 -1.053785\n    2000-01-07  0.742682 -0.474468  1.041575 -0.075499\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [38]: def f(x):\n     ....:    return ((x.T - x.mean(1)) / x.std(1)).T\n     ....:\n\n    In [39]: result = panel.apply(f, axis=['items', 'major_axis'])\n\n    In [40]: result\n    Out[40]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 4 (items) x 5 (major_axis) x 3 (minor_axis)\n    Items axis: A to D\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: ItemA to ItemC\n\n    In [41]: result.loc[:, :, 'ItemA']\n    Out[41]:\n     A         B         C         D\n    2000-01-03  0.012922 -0.030874 -0.629546 -0.757034\n    2000-01-04  0.392053 -1.071665  0.163228  0.548188\n    2000-01-05 -1.093650 -0.640898  0.385734 -1.154310\n    2000-01-06  1.005446 -1.154593 -0.595615 -0.809185\n    2000-01-07  0.783051 -0.198053  0.919339 -1.052721\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [42]: result = pd.Panel({ax: f(panel.loc[:, :, ax]) for ax in panel.minor_axis})\n\n    In [43]: result\n    Out[43]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 4 (items) x 5 (major_axis) x 3 (minor_axis)\n    Items axis: A to D\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: ItemA to ItemC\n\n    In [44]: result.loc[:, :, 'ItemA']\n    Out[44]:\n     A         B         C         D\n    2000-01-03  0.012922 -0.030874 -0.629546 -0.757034\n    2000-01-04  0.392053 -1.071665  0.163228  0.548188\n    2000-01-05 -1.093650 -0.640898  0.385734 -1.154310\n    2000-01-06  1.005446 -1.154593 -0.595615 -0.809185\n    2000-01-07  0.783051 -0.198053  0.919339 -1.052721\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [4]: max_info_rows = pd.get_option(\"max_info_rows\")\n\n    In [5]: df = pd.DataFrame(\n     ...:    {\n     ...:        \"A\": np.random.randn(10),\n     ...:        \"B\": np.random.randn(10),\n     ...:        \"C\": pd.date_range(\"20130101\", periods=10),\n     ...:    }\n     ...: )\n     ...: \n\n    In [6]: df.iloc[3:6, [0, 2]] = np.nan \n    ```", "```py\n    # set to not display the null counts\n    In [7]: pd.set_option(\"max_info_rows\", 0)\n\n    In [8]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 10 entries, 0 to 9\n    Data columns (total 3 columns):\n     #   Column  Dtype \n    ---  ------  ----- \n     0   A       float64 \n     1   B       float64 \n     2   C       datetime64[ns]\n    dtypes: datetime64[ns](1), float64(2)\n    memory usage: 368.0 bytes \n    ```", "```py\n    # this is the default (same as in 0.13.0)\n    In [9]: pd.set_option(\"max_info_rows\", max_info_rows)\n\n    In [10]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 10 entries, 0 to 9\n    Data columns (total 3 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       7 non-null      float64 \n     1   B       10 non-null     float64 \n     2   C       7 non-null      datetime64[ns]\n    dtypes: datetime64[ns](1), float64(2)\n    memory usage: 368.0 bytes \n    ```", "```py\n    In [11]: df = pd.DataFrame([[1, 2], [3, 4]])\n\n    In [12]: pd.set_option(\"show_dimensions\", False)\n\n    In [13]: df\n    Out[13]: \n     0  1\n    0  1  2\n    1  3  4\n\n    In [14]: pd.set_option(\"show_dimensions\", True)\n\n    In [15]: df\n    Out[15]: \n     0  1\n    0  1  2\n    1  3  4\n\n    [2 rows x 2 columns] \n    ```", "```py\n     age                 today               diff\n    0 2001-01-01 00:00:00 2013-04-19 00:00:00 4491 days, 00:00:00\n    1 2004-06-01 00:00:00 2013-04-19 00:00:00 3244 days, 00:00:00 \n    ```", "```py\n    In [16]: df = pd.DataFrame(\n     ....:    [pd.Timestamp(\"20010101\"), pd.Timestamp(\"20040601\")], columns=[\"age\"]\n     ....: )\n     ....: \n\n    In [17]: df[\"today\"] = pd.Timestamp(\"20130419\")\n\n    In [18]: df[\"diff\"] = df[\"today\"] - df[\"age\"]\n\n    In [19]: df\n    Out[19]: \n     age      today      diff\n    0 2001-01-01 2013-04-19 4491 days\n    1 2004-06-01 2013-04-19 3244 days\n\n    [2 rows x 3 columns] \n    ```", "```py\n    In [20]: s = pd.Series([\"a\", \"a|b\", np.nan, \"a|c\"])\n\n    In [21]: s.str.get_dummies(sep=\"|\")\n    Out[21]: \n     a  b  c\n    0  1  0  0\n    1  1  1  0\n    2  0  0  0\n    3  1  0  1\n\n    [4 rows x 3 columns] \n    ```", "```py\n    df = pd.DataFrame({\"col\": [\"foo\", 0, np.nan]})\n    df2 = pd.DataFrame({\"col\": [np.nan, 0, \"foo\"]}, index=[2, 1, 0])\n    df.equals(df2)\n    df.equals(df2.sort_index()) \n    ```", "```py\n    In [32]: def applied_func(col):\n     ....:    print(\"Apply function being called with: \", col)\n     ....:    return col.sum()\n     ....:\n\n    In [33]: empty = DataFrame(columns=['a', 'b'])\n\n    In [34]: empty.apply(applied_func)\n    Apply function being called with:  Series([], Length: 0, dtype: float64)\n    Out[34]:\n    a   NaN\n    b   NaN\n    Length: 2, dtype: float64 \n    ```", "```py\n    In [35]: empty.apply(applied_func, reduce=True)\n    Out[35]:\n    a   NaN\n    b   NaN\n    Length: 2, dtype: float64\n\n    In [36]: empty.apply(applied_func, reduce=False)\n    Out[36]:\n    Empty DataFrame\n    Columns: [a, b]\n    Index: []\n\n    [0 rows x 2 columns] \n    ```", "```py\n    # Try to infer the format for the index column\n    df = pd.read_csv(\n        \"foo.csv\", index_col=0, parse_dates=True, infer_datetime_format=True\n    ) \n    ```", "```py\n    In [22]: shades = [\"light\", \"dark\"]\n\n    In [23]: colors = [\"red\", \"green\", \"blue\"]\n\n    In [24]: pd.MultiIndex.from_product([shades, colors], names=[\"shade\", \"color\"])\n    Out[24]: \n    MultiIndex([('light',   'red'),\n     ('light', 'green'),\n     ('light',  'blue'),\n     ( 'dark',   'red'),\n     ( 'dark', 'green'),\n     ( 'dark',  'blue')],\n     names=['shade', 'color']) \n    ```", "```py\n    In [28]: import pandas._testing as tm\n\n    In [29]: panel = tm.makePanel(5)\n\n    In [30]: panel\n    Out[30]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 3 (items) x 5 (major_axis) x 4 (minor_axis)\n    Items axis: ItemA to ItemC\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: A to D\n\n    In [31]: panel['ItemA']\n    Out[31]:\n     A         B         C         D\n    2000-01-03 -0.673690  0.577046 -1.344312 -1.469388\n    2000-01-04  0.113648 -1.715002  0.844885  0.357021\n    2000-01-05 -1.478427 -1.039268  1.075770 -0.674600\n    2000-01-06  0.524988 -0.370647 -0.109050 -1.776904\n    2000-01-07  0.404705 -1.157892  1.643563 -0.968914\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [32]: panel.apply(lambda x: x.dtype, axis='items')\n    Out[32]:\n     A        B        C        D\n    2000-01-03  float64  float64  float64  float64\n    2000-01-04  float64  float64  float64  float64\n    2000-01-05  float64  float64  float64  float64\n    2000-01-06  float64  float64  float64  float64\n    2000-01-07  float64  float64  float64  float64\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [33]: panel.apply(lambda x: x.sum(), axis='major_axis')\n    Out[33]:\n     ItemA     ItemB     ItemC\n    A -1.108775 -1.090118 -2.984435\n    B -3.705764  0.409204  1.866240\n    C  2.110856  2.960500 -0.974967\n    D -4.532785  0.303202 -3.685193\n\n    [4 rows x 3 columns] \n    ```", "```py\n    In [34]: panel.sum('major_axis')\n    Out[34]:\n     ItemA     ItemB     ItemC\n    A -1.108775 -1.090118 -2.984435\n    B -3.705764  0.409204  1.866240\n    C  2.110856  2.960500 -0.974967\n    D -4.532785  0.303202 -3.685193\n\n    [4 rows x 3 columns] \n    ```", "```py\n    In [35]: result = panel.apply(lambda x: (x - x.mean()) / x.std(),\n     ....:                      axis='major_axis')\n     ....:\n\n    In [36]: result\n    Out[36]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 3 (items) x 5 (major_axis) x 4 (minor_axis)\n    Items axis: ItemA to ItemC\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: A to D\n\n    In [37]: result['ItemA']                           # noqa E999\n    Out[37]:\n     A         B         C         D\n    2000-01-03 -0.535778  1.500802 -1.506416 -0.681456\n    2000-01-04  0.397628 -1.108752  0.360481  1.529895\n    2000-01-05 -1.489811 -0.339412  0.557374  0.280845\n    2000-01-06  0.885279  0.421830 -0.453013 -1.053785\n    2000-01-07  0.742682 -0.474468  1.041575 -0.075499\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [38]: def f(x):\n     ....:    return ((x.T - x.mean(1)) / x.std(1)).T\n     ....:\n\n    In [39]: result = panel.apply(f, axis=['items', 'major_axis'])\n\n    In [40]: result\n    Out[40]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 4 (items) x 5 (major_axis) x 3 (minor_axis)\n    Items axis: A to D\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: ItemA to ItemC\n\n    In [41]: result.loc[:, :, 'ItemA']\n    Out[41]:\n     A         B         C         D\n    2000-01-03  0.012922 -0.030874 -0.629546 -0.757034\n    2000-01-04  0.392053 -1.071665  0.163228  0.548188\n    2000-01-05 -1.093650 -0.640898  0.385734 -1.154310\n    2000-01-06  1.005446 -1.154593 -0.595615 -0.809185\n    2000-01-07  0.783051 -0.198053  0.919339 -1.052721\n\n    [5 rows x 4 columns] \n    ```", "```py\n    In [42]: result = pd.Panel({ax: f(panel.loc[:, :, ax]) for ax in panel.minor_axis})\n\n    In [43]: result\n    Out[43]:\n    <class 'pandas.core.panel.Panel'>\n    Dimensions: 4 (items) x 5 (major_axis) x 3 (minor_axis)\n    Items axis: A to D\n    Major_axis axis: 2000-01-03 00:00:00 to 2000-01-07 00:00:00\n    Minor_axis axis: ItemA to ItemC\n\n    In [44]: result.loc[:, :, 'ItemA']\n    Out[44]:\n     A         B         C         D\n    2000-01-03  0.012922 -0.030874 -0.629546 -0.757034\n    2000-01-04  0.392053 -1.071665  0.163228  0.548188\n    2000-01-05 -1.093650 -0.640898  0.385734 -1.154310\n    2000-01-06  1.005446 -1.154593 -0.595615 -0.809185\n    2000-01-07  0.783051 -0.198053  0.919339 -1.052721\n\n    [5 rows x 4 columns] \n    ```"]