- en: Global state
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局状态
- en: 原文：[https://numpy.org/doc/1.26/reference/global_state.html](https://numpy.org/doc/1.26/reference/global_state.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/global_state.html](https://numpy.org/doc/1.26/reference/global_state.html)
- en: NumPy has a few import-time, compile-time, or runtime options which change the
    global behaviour. Most of these are related to performance or for debugging purposes
    and will not be interesting to the vast majority of users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 具有一些导入时、编译时或运行时选项，可以更改全局行为。其中大多数与性能或调试目的有关，对绝大多数用户来说不会有太大兴趣。
- en: Performance-related options
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与性能相关的选项
- en: Number of threads used for Linear Algebra
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于线性代数的线程数
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 本身通常在函数调用期间有意限制为单个线程，但它确实支持同时运行多个 Python 线程。请注意，对于性能良好的线性代数，NumPy 使用 OpenBLAS
    或 MKL 等 BLAS 后端，这可能使用多个线程，这些线程可以通过环境变量（如`OMP_NUM_THREADS`）进行控制，具体取决于使用了什么。控制线程数的一种方法是使用
    [threadpoolctl](https://pypi.org/project/threadpoolctl/) 包。
- en: Madvise Hugepage on Linux
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux 上的 Madvise Hugepage
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 Linux 内核上操作非常大的数组时，当使用[透明大页](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)时，您会体验到显着的加速。可以通过以下方式查看透明大页的当前系统策略：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将其设置为`madvise`时，NumPy 通常会使用 hugepages 来提高性能。通过设置环境变量可以修改此行为：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或将其设置为`1` 以始终启用它。未设置时，默认值是在内核 4.6 及更高版本上使用 madvise。这些内核应该通过 hugepage 支持实现大幅加速。此标志在导入时进行检查。
- en: SIMD feature selection
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SIMD 特性选择
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`NPY_DISABLE_CPU_FEATURES`将在运行时排除 simd 特性。详见[运行时分发](simd/build-options.html#runtime-simd-dispatch)。
- en: Debugging-related options
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与调试相关的选项
- en: Relaxed strides checking
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 松散的步幅检查
- en: 'The *compile-time* environment variable:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译时*环境变量：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置以帮助调试通过 C 编写的代码，手动遍历数组。当数组是连续的并以连续的方式遍历时，不应查询其`strides`。此选项可帮助找到错误，其中`strides`被错误使用。有关详细信息，请参见[内存布局](arrays.ndarray.html#memory-layout)文档。
- en: Warn if no memory allocation policy when deallocating data
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在释放数据时，如果没有内存分配策略则发出警告
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 某些用户可能通过设置`OWNDATA`标志将数据指针的所有权传递给`ndarray`。如果他们这样做而没有（手动）设置内存分配策略，则默认值将调用`free`。如果`NUMPY_WARN_IF_NO_MEM_POLICY`设置为`"1"`，则会发出`RuntimeWarning`。更好的替代方法是使用带有解除分配器的`PyCapsule`并设置`ndarray.base`。
- en: Testing planned future behavior
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试计划未来的行为
- en: 'NumPy has some code paths which are planned to be activated in the future but
    are not yet the default behavior. You can try testing some of these which may
    be shipped with a new “major” release (NumPy 2.0) by setting an environment before
    importing NumPy:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 有一些代码路径，计划在将来激活，但目前不是默认行为。您可以尝试测试其中一些可能会与新的“主要”发布（NumPy 2.0）一起提供的功能，方法是在导入NumPy之前设置环境：
- en: NPY_NUMPY_2_BEHAVIOR=1
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: NPY_NUMPY_2_BEHAVIOR=1
- en: By default this will also activate the [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)") related setting `NPY_PROMOTION_STATE` (please
    see the NEP for details on this).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这也会激活[NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "（在NumPy增强提案中）")相关的设置`NPY_PROMOTION_STATE`（请参阅NEP以获取详细信息）。
- en: 'Changed in version 1.25.2: This variable is only checked on the first import.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.25.2版本中更改：此变量仅在首次导入时被检查。
- en: Performance-related options
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与性能相关的选项
- en: Number of threads used for Linear Algebra
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于线性代数的线程数
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy本身通常在函数调用期间有意限制为单个线程，但支持同时运行多个Python线程。请注意，为了进行高性能的线性代数运算，NumPy使用类似OpenBLAS或MKL的BLAS后端，该后端可能使用多个线程，这些线程可能受环境变量（如`OMP_NUM_THREADS`）的控制。控制线程数的一种方法是使用包[threadpoolctl](https://pypi.org/project/threadpoolctl/)
- en: Madvise Hugepage on Linux
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux上的Madvise Hugepage
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Linux内核上操作非常大的数组时，启用[透明大页](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    可以获得显着的加速。当前透明大页的系统策略可以通过以下方式查看：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为`madvise`时，NumPy通常会使用大页来提升性能。可以通过设置环境变量来修改此行为：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或将其设置为`1`以始终启用。如果未设置，默认情况下在内核4.6及更新版本上使用madvise。据称这些内核在支持大页的情况下会获得大幅加速。此标志在导入时会被检查。
- en: SIMD feature selection
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SIMD特性选择
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`NPY_DISABLE_CPU_FEATURES`将在运行时排除simd特性。请参阅[运行时调度](simd/build-options.html#runtime-simd-dispatch)。
- en: Number of threads used for Linear Algebra
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于线性代数的线程数
- en: NumPy itself is normally intentionally limited to a single thread during function
    calls, however it does support multiple Python threads running at the same time.
    Note that for performant linear algebra NumPy uses a BLAS backend such as OpenBLAS
    or MKL, which may use multiple threads that may be controlled by environment variables
    such as `OMP_NUM_THREADS` depending on what is used. One way to control the number
    of threads is the package [threadpoolctl](https://pypi.org/project/threadpoolctl/)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy本身通常在函数调用期间有意限制为单个线程，但支持同时运行多个Python线程。请注意，为了进行高性能的线性代数运算，NumPy使用类似OpenBLAS或MKL的BLAS后端，该后端可能使用多个线程，这些线程可能受环境变量（如`OMP_NUM_THREADS`）的控制。控制线程数的一种方法是使用包[threadpoolctl](https://pypi.org/project/threadpoolctl/)
- en: Madvise Hugepage on Linux
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux上的Madvise Hugepage
- en: 'When working with very large arrays on modern Linux kernels, you can experience
    a significant speedup when [transparent hugepage](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    is used. The current system policy for transparent hugepages can be seen by:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Linux内核上操作非常大的数组时，启用[透明大页](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)
    可以获得显着的加速。当前透明大页的系统策略可以通过以下方式查看：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When set to `madvise` NumPy will typically use hugepages for a performance
    boost. This behaviour can be modified by setting the environment variable:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为`madvise`时，NumPy通常会使用大页来提升性能。可以通过设置环境变量来修改此行为：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or setting it to `1` to always enable it. When not set, the default is to use
    madvise on Kernels 4.6 and newer. These kernels presumably experience a large
    speedup with hugepage support. This flag is checked at import time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 或将其设置为`1`以始终启用。如果未设置，默认情况下在内核4.6及更新版本上使用madvise。据称这些内核在支持大页的情况下会获得大幅加速。此标志在导入时会被检查。
- en: SIMD feature selection
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SIMD特性选择
- en: Setting `NPY_DISABLE_CPU_FEATURES` will exclude simd features at runtime. See
    [Runtime dispatch](simd/build-options.html#runtime-simd-dispatch).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `NPY_DISABLE_CPU_FEATURES` 将在运行时排除 simd 功能。请参阅 [运行时调度](simd/build-options.html#runtime-simd-dispatch)。
- en: Debugging-related options
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与调试相关的选项
- en: Relaxed strides checking
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放松的`strides`检查
- en: 'The *compile-time* environment variable:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译时*环境变量：'
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置以帮助调试用 C 编写的代码，该代码手动遍历数组。当数组连续并以连续方式迭代时，不应查询其`strides`。此选项可帮助找出错误，其中`strides`被错误使用。有关详细信息，请参阅
    [内存布局](arrays.ndarray.html#memory-layout) 文档。
- en: Warn if no memory allocation policy when deallocating data
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在释放数据时，如果没有内存分配策略，则发出警告
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户可能会通过设置`ndarray`的`OWNDATA`标志来将数据指针的所有权传递给`ndarray`。如果他们这样做而没有设置（手动设置）内存分配策略，则默认将调用`free`。如果将`NUMPY_WARN_IF_NO_MEM_POLICY`设置为`"1"`，则会发出`RuntimeWarning`。更好的替代方法是使用具有解除分配器的`PyCapsule`并设置`ndarray.base`。
- en: Relaxed strides checking
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放松的`strides`检查
- en: 'The *compile-time* environment variable:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译时*环境变量：'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: can be set to help debug code written in C which iteraters through arrays manually.
    When an array is contiguous and iterated in a contiguous manner, its `strides`
    should not be queried. This option can help find errors where the `strides` are
    incorrectly used. For details see the [memory layout](arrays.ndarray.html#memory-layout)
    documentation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置以帮助调试用 C 编写的代码，该代码手动遍历数组。当数组连续并以连续方式迭代时，不应查询其`strides`。此选项可帮助找出错误，其中`strides`被错误使用。有关详细信息，请参阅
    [内存布局](arrays.ndarray.html#memory-layout) 文档。
- en: Warn if no memory allocation policy when deallocating data
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在释放数据时，如果没有内存分配策略，则发出警告
- en: Some users might pass ownership of the data pointer to the `ndarray` by setting
    the `OWNDATA` flag. If they do this without setting (manually) a memory allocation
    policy, the default will be to call `free`. If `NUMPY_WARN_IF_NO_MEM_POLICY` is
    set to `"1"`, a `RuntimeWarning` will be emitted. A better alternative is to use
    a `PyCapsule` with a deallocator and set the `ndarray.base`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户可能会通过设置`ndarray`的`OWNDATA`标志来将数据指针的所有权传递给`ndarray`。如果他们这样做而没有设置（手动设置）内存分配策略，则默认将调用`free`。如果将`NUMPY_WARN_IF_NO_MEM_POLICY`设置为`"1"`，则会发出`RuntimeWarning`。更好的替代方法是使用具有解除分配器的`PyCapsule`并设置`ndarray.base`。
- en: Testing planned future behavior
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计划的未来行为测试
- en: 'NumPy has some code paths which are planned to be activated in the future but
    are not yet the default behavior. You can try testing some of these which may
    be shipped with a new “major” release (NumPy 2.0) by setting an environment before
    importing NumPy:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 有一些代码路径，计划在将来激活，但目前不是默认行为。您可以通过在导入 NumPy 之前设置环境来尝试测试其中一些可能随新的“主要”版本（NumPy
    2.0）一起发布的功能：
- en: NPY_NUMPY_2_BEHAVIOR=1
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: NPY_NUMPY_2_BEHAVIOR=1
- en: By default this will also activate the [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)") related setting `NPY_PROMOTION_STATE` (please
    see the NEP for details on this).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这也会激活与 [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(在 NumPy Enhancement Proposals)") 相关的设置 `NPY_PROMOTION_STATE`（请参阅 NEP 了解详情）。
- en: 'Changed in version 1.25.2: This variable is only checked on the first import.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.25.2 开始更改：此变量仅在首次导入时进行检查。
