["```py\nclass sympy.algebras.Quaternion(a=0, b=0, c=0, d=0, real_field=True, norm=None)\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q\n1 + 2*i + 3*j + 4*k \n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import symbols, I\n>>> x = symbols('x')\n>>> q1 = Quaternion(x, x**3, x, x**2, real_field = False)\n>>> q2 = Quaternion(3 + 4*I, 2 + 5*I, 0, 7 + 8*I, real_field = False)\n>>> q1\nx + x**3*i + x*j + x**2*k\n>>> q2\n(3 + 4*I) + (2 + 5*I)*i + 0*j + (7 + 8*I)*k \n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import w, x, y, z\n>>> q = Quaternion(w, x, y, z, norm=1)\n>>> q\nw + x*i + y*j + z*k\n>>> q.norm()\n1 \n```", "```py\nadd(other)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import symbols\n>>> q1 = Quaternion(1, 2, 3, 4)\n>>> q2 = Quaternion(5, 6, 7, 8)\n>>> q1.add(q2)\n6 + 8*i + 10*j + 12*k\n>>> q1 + 5\n6 + 2*i + 3*j + 4*k\n>>> x = symbols('x', real = True)\n>>> q1.add(x)\n(x + 1) + 2*i + 3*j + 4*k \n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import I\n>>> q3 = Quaternion(3 + 4*I, 2 + 5*I, 0, 7 + 8*I, real_field = False)\n>>> q3.add(2 + 3*I)\n(5 + 7*I) + (2 + 5*I)*i + 0*j + (7 + 8*I)*k \n```", "```py\nangle()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(1, 4, 4, 4)\n>>> q.angle()\n2*atan(4*sqrt(3)) \n```", "```py\narc_coplanar(other)\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q1 = Quaternion(1, 4, 4, 4)\n>>> q2 = Quaternion(3, 8, 8, 8)\n>>> Quaternion.arc_coplanar(q1, q2)\nTrue \n```", "```py\n>>> q1 = Quaternion(2, 8, 13, 12)\n>>> Quaternion.arc_coplanar(q1, q2)\nFalse \n```", "```py\naxis()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(1, 1, 1, 1)\n>>> q.axis()\n0 + sqrt(3)/3*i + sqrt(3)/3*j + sqrt(3)/3*k \n```", "```py\nexp()\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.exp()\nE*cos(sqrt(29))\n+ 2*sqrt(29)*E*sin(sqrt(29))/29*i\n+ 3*sqrt(29)*E*sin(sqrt(29))/29*j\n+ 4*sqrt(29)*E*sin(sqrt(29))/29*k \n```", "```py\nclassmethod from_Matrix(elements)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> q = Quaternion.from_Matrix([a, b, c, d])\n>>> q\na + b*i + c*j + d*k \n```", "```py\n>>> q = Quaternion.from_Matrix([b, c, d])\n>>> q\n0 + b*i + c*j + d*k \n```", "```py\nclassmethod from_axis_angle(vector, angle)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import pi, sqrt\n>>> q = Quaternion.from_axis_angle((sqrt(3)/3, sqrt(3)/3, sqrt(3)/3), 2*pi/3)\n>>> q\n1/2 + 1/2*i + 1/2*j + 1/2*k \n```", "```py\nclassmethod from_euler(angles, seq)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import pi\n>>> q = Quaternion.from_euler([pi/2, 0, 0], 'xyz')\n>>> q\nsqrt(2)/2 + sqrt(2)/2*i + 0*j + 0*k \n```", "```py\n>>> q = Quaternion.from_euler([0, pi/2, pi] , 'zyz')\n>>> q\n0 + (-sqrt(2)/2)*i + 0*j + sqrt(2)/2*k \n```", "```py\n>>> q = Quaternion.from_euler([0, pi/2, pi] , 'ZYZ')\n>>> q\n0 + sqrt(2)/2*i + 0*j + sqrt(2)/2*k \n```", "```py\nclassmethod from_rotation_matrix(M)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import Matrix, symbols, cos, sin, trigsimp\n>>> x = symbols('x')\n>>> M = Matrix([[cos(x), -sin(x), 0], [sin(x), cos(x), 0], [0, 0, 1]])\n>>> q = trigsimp(Quaternion.from_rotation_matrix(M))\n>>> q\nsqrt(2)*sqrt(cos(x) + 1)/2 + 0*i + 0*j + sqrt(2 - 2*cos(x))*sign(sin(x))/2*k \n```", "```py\nindex_vector()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(2, 4, 2, 4)\n>>> q.index_vector()\n0 + 4*sqrt(10)/3*i + 2*sqrt(10)/3*j + 4*sqrt(10)/3*k \n```", "```py\nintegrate(*args)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import x\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.integrate(x)\nx + 2*x*i + 3*x*j + 4*x*k \n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import x\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.integrate((x, 1, 5))\n4 + 8*i + 12*j + 16*k \n```", "```py\ninverse()\n```", "```py\nis_pure()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(0, 8, 13, 12)\n>>> q.is_pure()\nTrue \n```", "```py\nis_zero_quaternion()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(1, 0, 0, 0)\n>>> q.is_zero_quaternion()\nFalse \n```", "```py\n>>> q = Quaternion(0, 0, 0, 0)\n>>> q.is_zero_quaternion()\nTrue \n```", "```py\nlog()\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.log()\nlog(sqrt(30))\n+ 2*sqrt(29)*acos(sqrt(30)/30)/29*i\n+ 3*sqrt(29)*acos(sqrt(30)/30)/29*j\n+ 4*sqrt(29)*acos(sqrt(30)/30)/29*k \n```", "```py\nmensor()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(2, 4, 2, 4)\n>>> q.mensor()\nlog(2*sqrt(10))\n>>> q.norm()\n2*sqrt(10) \n```", "```py\nmul(other)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import symbols\n>>> q1 = Quaternion(1, 2, 3, 4)\n>>> q2 = Quaternion(5, 6, 7, 8)\n>>> q1.mul(q2)\n(-60) + 12*i + 30*j + 24*k\n>>> q1.mul(2)\n2 + 4*i + 6*j + 8*k\n>>> x = symbols('x', real = True)\n>>> q1.mul(x)\nx + 2*x*i + 3*x*j + 4*x*k \n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import I\n>>> q3 = Quaternion(3 + 4*I, 2 + 5*I, 0, 7 + 8*I, real_field = False)\n>>> q3.mul(2 + 3*I)\n(2 + 3*I)*(3 + 4*I) + (2 + 3*I)*(2 + 5*I)*i + 0*j + (2 + 3*I)*(7 + 8*I)*k \n```", "```py\nnorm()\n```", "```py\nnormalize()\n```", "```py\northogonal(other)\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(0, 4, 4, 4)\n>>> q1 = Quaternion(0, 8, 8, 8)\n>>> q.orthogonal(q1)\nFalse \n```", "```py\n>>> q1 = Quaternion(0, 2, 2, 0)\n>>> q = Quaternion(0, 2, -2, 0)\n>>> q.orthogonal(q1)\nTrue \n```", "```py\nparallel(other)\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(0, 4, 4, 4)\n>>> q1 = Quaternion(0, 8, 8, 8)\n>>> q.parallel(q1)\nTrue \n```", "```py\n>>> q1 = Quaternion(0, 8, 13, 12)\n>>> q.parallel(q1)\nFalse \n```", "```py\npow(p)\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.pow(4)\n668 + (-224)*i + (-336)*j + (-448)*k \n```", "```py\npow_cos_sin(p)\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 2, 3, 4)\n>>> q.pow_cos_sin(4)\n900*cos(4*acos(sqrt(30)/30))\n+ 1800*sqrt(29)*sin(4*acos(sqrt(30)/30))/29*i\n+ 2700*sqrt(29)*sin(4*acos(sqrt(30)/30))/29*j\n+ 3600*sqrt(29)*sin(4*acos(sqrt(30)/30))/29*k \n```", "```py\nproperty product_matrix_left\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> q1 = Quaternion(1, 0, 0, 1)\n>>> q2 = Quaternion(a, b, c, d)\n>>> q1.product_matrix_left\nMatrix([\n[1, 0,  0, -1],\n[0, 1, -1,  0],\n[0, 1,  1,  0],\n[1, 0,  0,  1]]) \n```", "```py\n>>> q1.product_matrix_left * q2.to_Matrix()\nMatrix([\n[a - d],\n[b - c],\n[b + c],\n[a + d]]) \n```", "```py\n>>> (q1 * q2).to_Matrix()\nMatrix([\n[a - d],\n[b - c],\n[b + c],\n[a + d]]) \n```", "```py\nproperty product_matrix_right\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> q1 = Quaternion(a, b, c, d)\n>>> q2 = Quaternion(1, 0, 0, 1)\n>>> q2.product_matrix_right\nMatrix([\n[1, 0, 0, -1],\n[0, 1, 1, 0],\n[0, -1, 1, 0],\n[1, 0, 0, 1]]) \n```", "```py\n>>> q2.product_matrix_right * q1.to_Matrix()\nMatrix([\n[ a - d],\n[ b + c],\n[-b + c],\n[ a + d]]) \n```", "```py\n>>> (q1 * q2).to_Matrix()\nMatrix([\n[ a - d],\n[ b + c],\n[-b + c],\n[ a + d]]) \n```", "```py\nstatic rotate_point(pin, r)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import symbols, trigsimp, cos, sin\n>>> x = symbols('x')\n>>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n>>> trigsimp(Quaternion.rotate_point((1, 1, 1), q))\n(sqrt(2)*cos(x + pi/4), sqrt(2)*sin(x + pi/4), 1)\n>>> (axis, angle) = q.to_axis_angle()\n>>> trigsimp(Quaternion.rotate_point((1, 1, 1), (axis, angle)))\n(sqrt(2)*cos(x + pi/4), sqrt(2)*sin(x + pi/4), 1) \n```", "```py\nscalar_part()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(4, 8, 13, 12)\n>>> q.scalar_part()\n4 \n```", "```py\nset_norm(norm)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> q = Quaternion(a, b, c, d)\n>>> q.norm()\nsqrt(a**2 + b**2 + c**2 + d**2) \n```", "```py\n>>> q.set_norm(1)\n>>> q.norm()\n1 \n```", "```py\n>>> q.set_norm(None)\n>>> q.norm()\nsqrt(a**2 + b**2 + c**2 + d**2) \n```", "```py\nto_Matrix(vector_only=False)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> q = Quaternion(a, b, c, d)\n>>> q\na + b*i + c*j + d*k \n```", "```py\n>>> q.to_Matrix()\nMatrix([\n[a],\n[b],\n[c],\n[d]]) \n```", "```py\n>>> q.to_Matrix(vector_only=True)\nMatrix([\n[b],\n[c],\n[d]]) \n```", "```py\nto_axis_angle()\n```", "```py\n>>> from sympy import Quaternion\n>>> q = Quaternion(1, 1, 1, 1)\n>>> (axis, angle) = q.to_axis_angle()\n>>> axis\n(sqrt(3)/3, sqrt(3)/3, sqrt(3)/3)\n>>> angle\n2*pi/3 \n```", "```py\nto_euler(seq, angle_addition=True, avoid_square_root=False)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy.abc import a, b, c, d\n>>> euler = Quaternion(a, b, c, d).to_euler('zyz')\n>>> euler\n(-atan2(-b, c) + atan2(d, a),\n 2*atan2(sqrt(b**2 + c**2), sqrt(a**2 + d**2)),\n atan2(-b, c) + atan2(d, a)) \n```", "```py\nto_rotation_matrix(v=None, homogeneous=True)\n```", "```py\n>>> from sympy import Quaternion\n>>> from sympy import symbols, trigsimp, cos, sin\n>>> x = symbols('x')\n>>> q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n>>> trigsimp(q.to_rotation_matrix())\nMatrix([\n[cos(x), -sin(x), 0],\n[sin(x),  cos(x), 0],\n[     0,       0, 1]]) \n```", "```py\nclassmethod vector_coplanar(q1, q2, q3)\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q1 = Quaternion(0, 4, 4, 4)\n>>> q2 = Quaternion(0, 8, 8, 8)\n>>> q3 = Quaternion(0, 24, 24, 24)\n>>> Quaternion.vector_coplanar(q1, q2, q3)\nTrue \n```", "```py\n>>> q1 = Quaternion(0, 8, 16, 8)\n>>> q2 = Quaternion(0, 8, 3, 12)\n>>> Quaternion.vector_coplanar(q1, q2, q3)\nFalse \n```", "```py\nvector_part()\n```", "```py\n>>> from sympy.algebras.quaternion import Quaternion\n>>> q = Quaternion(1, 1, 1, 1)\n>>> q.vector_part()\n0 + 1*i + 1*j + 1*k \n```", "```py\n>>> q = Quaternion(4, 8, 13, 12)\n>>> q.vector_part()\n0 + 8*i + 13*j + 12*k \n```"]