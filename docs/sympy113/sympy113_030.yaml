- en: Solve One or a System of Equations Numerically
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数值求解一个或一组方程
- en: Original text：[https://docs.sympy.org/latest/guides/solving/solve-numerically.html](https://docs.sympy.org/latest/guides/solving/solve-numerically.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/guides/solving/solve-numerically.html](https://docs.sympy.org/latest/guides/solving/solve-numerically.html)
- en: Use SymPy to numerically solve a system of one or more equations. For example,
    numerically solving \(\cos(x) = x \) returns \( x \approx 0.739085133215161\).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SymPy 来数值求解一个或多个方程组。例如，数值解 \(\cos(x) = x \) 返回 \( x \approx 0.739085133215161\)。
- en: 'Solving numerically is useful if:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要：
- en: You only need a numeric solution, not a symbolic one
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您只需要一个数值解，而不是符号解
- en: A closed-form solution is not available or is overly complicated; refer to [When
    You Might Prefer a Numeric Solution](solving-guidance.html#when-you-might-prefer-a-numeric-solution)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有可用的闭式解或者解法过于复杂；参考[何时可能更喜欢数值解](solving-guidance.html#when-you-might-prefer-a-numeric-solution)
- en: '[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") and [`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset") will not try to find a numeric solution, only
    a mathematically-exact symbolic solution. So if you want a numeric solution, use
    [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve "sympy.solvers.solvers.nsolve").'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`solve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.solve
    "sympy.solvers.solvers.solve") 和 [`solveset()`](../../modules/solvers/solveset.html#sympy.solvers.solveset.solveset
    "sympy.solvers.solveset.solveset") 不会尝试找到数值解，只会找到数学上精确的符号解。因此，如果您需要数值解，请使用 [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")。'
- en: 'SymPy is designed for symbolic mathematics. If you do not need to do symbolic
    operations, then for numerical operations you can use another free and open-source
    package such as NumPy or SciPy which will be faster, work with arrays, and have
    more algorithms implemented. The main reasons to use SymPy (or its dependency
    [mpmath](https://mpmath.org/)) for numerical calculations are:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 是为符号数学设计的。如果您不需要进行符号操作，则对于数值运算，可以使用另一个免费开源的软件包，如 NumPy 或 SciPy，它们速度更快，适用于数组，并且实现了更多的算法。使用
    SymPy（或其依赖项 [mpmath](https://mpmath.org/)）进行数值计算的主要原因是：
- en: to do a simple numerical calculation within the context of a symbolic calculation
    using SymPy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SymPy 中进行符号计算的上下文中进行简单的数值计算
- en: if you need the arbitrary precision capabilities to get more digits of precision
    than you would get from float64.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要任意精度功能以获得比 float64 更多位数的精度。
- en: Alternatives to Consider
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑的替代方案
- en: SciPy’s [`scipy.optimize.fsolve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve
    "(in SciPy v1.13.1)") can solve a system of (non-linear) equations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy 的 [`scipy.optimize.fsolve()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve
    "(在 SciPy v1.13.1 中)") 可以解决一组（非线性）方程
- en: NumPy’s [`numpy.linalg.solve()`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve
    "(in NumPy v1.26)") can solve a system of linear scalar equations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 的 [`numpy.linalg.solve()`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.solve.html#numpy.linalg.solve
    "(在 NumPy v1.26 中)") 可以解决一组线性标量方程
- en: mpmath’s [`findroot()`](https://mpmath.org/doc/current/calculus/optimization.html#mpmath.findroot
    "(in mpmath v1.3.0)"), which [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") calls and can pass parameters to
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mpmath 的 [`findroot()`](https://mpmath.org/doc/current/calculus/optimization.html#mpmath.findroot
    "(在 mpmath v1.3.0 中)")，它被 [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") 调用并可以传递参数给它
- en: Example of Numerically Solving an Equation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值求解方程的示例
- en: 'Here is an example of numerically solving one equation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个数值解决一个方程的示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Guidance
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指导
- en: Overdetermined systems of equations are supported.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 支持过度确定的方程组。
- en: Find Complex Roots of a Real Function
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 找到一个实函数的复根
- en: 'To solve for complex roots of real functions, specify a nonreal (either purely
    imaginary, or complex) initial point:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决实函数的复根，请指定一个非实数（纯虚数或复数）的初始点：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Ensure the Root Found is in a Given Interval
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保找到的根在给定区间内
- en: 'It is not guaranteed that [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") will find the root closest to the initial point.
    Here, even though the root `-1` is closer to the initial point of `-0.1`, [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") finds the root `1`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不保证[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")会找到距离初始点最近的根。在这里，即使根`-1`更接近初始点`-0.1`，[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")也找到了根`1`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can ensure the root found is in a given interval, if such a root exists,
    using `solver=''bisect''` by specifying the interval in a tuple. Here, specifying
    the interval `(-10, 0)` ensures that the root `-1` is found:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过指定一个元组中的区间，并使用 `solver='bisect'` 来确保找到的根位于给定区间内（如果存在这样的根）。在这里，指定区间 `(-10,
    0)` 确保找到根`-1`：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Solve a System of Equations Numerically
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值解决方程组
- en: To solve a system of multidimensional functions, supply a tuple of
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决多维函数系统，请提供一个元组
- en: functions `(f1, f2)`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`(f1, f2)`
- en: variables to solve for `(x1, x2)`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量解为`(x1, x2)`
- en: starting values `(-1, 1)`
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始值`(-1, 1)`
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Increase Precision of the Solution
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高解的精度
- en: 'You can increase the precision of the solution using `prec`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `prec` 来增加解的精度：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a Function That Can Be Solved With SciPy
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建可以使用 SciPy 求解的函数
- en: 'As noted above, SymPy focuses on symbolic computation and is not optimized
    for numerical calculations. If you need to make many calls to a numerical solver,
    it can be much faster to use a solver optimized for numerical calculations such
    as SciPy’s [`root_scalar()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "(in SciPy v1.13.1)"). A recommended workflow is:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，SymPy 专注于符号计算，不适用于数值计算。如果需要频繁调用数值求解器，则最好使用专为数值计算优化的求解器，如 SciPy 的 [`root_scalar()`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html#scipy.optimize.root_scalar
    "(in SciPy v1.13.1)")。推荐的工作流程是：
- en: use SymPy to generate (by symbolically simplifying or solving an equation) the
    mathematical expression
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 SymPy 生成（通过符号化简或解决方程）数学表达式
- en: convert it to a lambda function using [`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify")
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`lambdify()`](../../modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify
    "sympy.utilities.lambdify.lambdify") 将其转换为 lambda 函数
- en: use a numerical library such as SciPy to generate numerical solutions
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似 SciPy 的数值库生成数值解
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Use the Solution Result
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用解的结果
- en: Substitute the Result Into an Expression
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将结果代入表达式中
- en: 'The best practice is to use [`evalf()`](../../modules/core.html#module-sympy.core.evalf
    "sympy.core.evalf") to substitute numerical values into expressions. The following
    code demonstrates that the numerical value is not an exact root because substituting
    it back into the expression produces a result slightly different from zero:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳做法是使用 [`evalf()`](../../modules/core.html#module-sympy.core.evalf "sympy.core.evalf")
    将数值值替换为表达式。以下代码示例表明，数值值并非精确的根，因为将其代回表达式会产生一个与零略有不同的结果：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using [`subs`](../../modules/core.html#sympy.core.basic.Basic.subs "sympy.core.basic.Basic.subs")
    can give an incorrect result due to precision errors, here effectively rounding
    `-5.12757857962640e-17` to zero:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`subs`](../../modules/core.html#sympy.core.basic.Basic.subs "sympy.core.basic.Basic.subs")
    可能会由于精度误差而得到错误的结果，在这里将 `-5.12757857962640e-17` 有效地舍入为零：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When substituting in values, you can also leave some symbols as variables:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在替换值时，可以将一些符号留作变量：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Not all Equations Can be Solved
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并非所有方程都可以解决
- en: '[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") is a numerical solving function, so it can often
    provide a solution for equations which cannot be solved algebraically.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve") 是一个数值求解函数，因此它经常可以为无法代数求解的方程提供解决方案。'
- en: Equations With no Solution
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有解的方程
- en: 'Some equations have no solution, in which case SymPy may return an error. For
    example, the equation \(e^x = 0\) (`exp(x)` in SymPy) has no solution:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方程无解，这种情况下 SymPy 可能会返回错误。例如，方程 \(e^x = 0\)（在 SymPy 中为 `exp(x)`）无解：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Report a Bug
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告错误
- en: If you find a bug with [`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve"), please post the problem on the [SymPy mailing
    list](https://groups.google.com/g/sympy). Until the issue is resolved, you can
    use a different method listed in [Alternatives to Consider](#alternatives-to-consider).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用[`nsolve()`](../../modules/solvers/solvers.html#sympy.solvers.solvers.nsolve
    "sympy.solvers.solvers.nsolve")时发现了 bug，请在[SymPy 邮件列表](https://groups.google.com/g/sympy)上发布问题。在问题解决之前，你可以考虑使用[备选方法](#alternatives-to-consider)中列出的其他方法。
