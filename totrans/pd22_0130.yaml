- en: pandas.to_datetime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert argument to datetime.
  prefs: []
  type: TYPE_NORMAL
- en: This function converts a scalar, array-like, [`Series`](pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")/dict-like
    to a pandas datetime object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg**int, float, str, datetime, list, tuple, 1-d array, Series, DataFrame/dict-like'
  prefs: []
  type: TYPE_NORMAL
- en: 'The object to convert to a datetime. If a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is provided, the method expects minimally the following columns:
    `"year"`, `"month"`, `"day"`. The column “year” must be specified in 4-digit format.'
  prefs: []
  type: TYPE_NORMAL
- en: '**errors**{‘ignore’, ‘raise’, ‘coerce’}, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: If `'raise'`, then invalid parsing will raise an exception.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `'coerce'`, then invalid parsing will be set as [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `'ignore'`, then invalid parsing will return the input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dayfirst**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a date parse order if arg is str or is list-like. If `True`, parses
    dates with the day first, e.g. `"10/11/12"` is parsed as `2012-11-10`.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`dayfirst=True` is not strict, but will prefer to parse with day first.'
  prefs: []
  type: TYPE_NORMAL
- en: '**yearfirst**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a date parse order if arg is str or is list-like.
  prefs: []
  type: TYPE_NORMAL
- en: If `True` parses dates with the year first, e.g. `"10/11/12"` is parsed as `2010-11-12`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both dayfirst and yearfirst are `True`, yearfirst is preceded (same as `dateutil`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '`yearfirst=True` is not strict, but will prefer to parse with year first.'
  prefs: []
  type: TYPE_NORMAL
- en: '**utc**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Control timezone-related parsing, localization and conversion.
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, the function *always* returns a timezone-aware UTC-localized [`Timestamp`](pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    or [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex").
    To do this, timezone-naive inputs are *localized* as UTC, while timezone-aware
    inputs are *converted* to UTC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `False` (default), inputs will not be coerced to UTC. Timezone-naive inputs
    will remain naive, while timezone-aware ones will keep their time offsets. Limitations
    exist for mixed offsets (typically, daylight savings), see [Examples](#to-datetime-tz-examples)
    section for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: In a future version of pandas, parsing datetimes with mixed time zones will
    raise an error unless utc=True. Please specify utc=True to opt in to the new behaviour
    and silence this warning. To create a Series with mixed offsets and object dtype,
    please use apply and datetime.datetime.strptime.
  prefs: []
  type: TYPE_NORMAL
- en: 'See also: pandas general documentation about [timezone conversion and localization](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-zone-handling).'
  prefs: []
  type: TYPE_NORMAL
- en: '**format**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: 'The strftime to parse time, e.g. `"%d/%m/%Y"`. See [strftime documentation](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)
    for more information on choices, though note that `"%f"` will parse all the way
    up to nanoseconds. You can also pass:'
  prefs: []
  type: TYPE_NORMAL
- en: “ISO8601”, to parse any [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) time
    string (not necessarily in exactly the same format);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “mixed”, to infer the format for each element individually. This is risky, and
    you should probably use it along with dayfirst.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    is passed, then format has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: '**exact**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: 'Control how format is used:'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, require an exact format match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `False`, allow the format to match anywhere in the target string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cannot be used alongside `format='ISO8601'` or `format='mixed'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**unit**str, default ‘ns’'
  prefs: []
  type: TYPE_NORMAL
- en: The unit of the arg (D,s,ms,us,ns) denote the unit, which is an integer or float
    number. This will be based off the origin. Example, with `unit='ms'` and `origin='unix'`,
    this would calculate the number of milliseconds to the unix epoch start.
  prefs: []
  type: TYPE_NORMAL
- en: '**infer_datetime_format**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If `True` and no format is given, attempt to infer the format of the datetime
    strings based on the first non-NaN element, and if it can be inferred, switch
    to a faster method of parsing them. In some cases this can increase the parsing
    speed by ~5-10x.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0.0: A strict version of this argument is now the
    default, passing it has no effect.'
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**scalar, default ‘unix’'
  prefs: []
  type: TYPE_NORMAL
- en: Define the reference date. The numeric values would be parsed as number of units
    (defined by unit) since this reference date.
  prefs: []
  type: TYPE_NORMAL
- en: If `'unix'` (or POSIX) time; origin is set to 1970-01-01.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `'julian'`, unit must be `'D'`, and origin is set to beginning of Julian
    Calendar. Julian day number `0` is assigned to the day starting at noon on January
    1, 4713 BC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Timestamp convertible (Timestamp, dt.datetime, np.datetimt64 or date string),
    origin is set to Timestamp identified by origin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a float or integer, origin is the difference (in units determined by the
    `unit` argument) relative to 1970-01-01.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cache**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, use a cache of unique, converted dates to apply the datetime conversion.
    May produce significant speed-up when parsing duplicate date strings, especially
    ones with timezone offsets. The cache is only used when there are at least 50
    values. The presence of out-of-bounds values will render the cache unusable and
    may slow down parsing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: datetime
  prefs: []
  type: TYPE_NORMAL
- en: 'If parsing succeeded. Return type depends on input (types in parenthesis correspond
    to fallback in case of unsuccessful timezone or out-of-range timestamp parsing):'
  prefs: []
  type: TYPE_NORMAL
- en: 'scalar: [`Timestamp`](pandas.Timestamp.html#pandas.Timestamp "pandas.Timestamp")
    (or [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'array-like: [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") (or [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    with [`object`](https://docs.python.org/3/library/functions.html#object "(in Python
    v3.12)") dtype containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Series: [`Series`](pandas.Series.html#pandas.Series "pandas.Series") of `datetime64`
    dtype (or [`Series`](pandas.Series.html#pandas.Series "pandas.Series") of [`object`](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.12)") dtype containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DataFrame: [`Series`](pandas.Series.html#pandas.Series "pandas.Series") of
    `datetime64` dtype (or [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    of [`object`](https://docs.python.org/3/library/functions.html#object "(in Python
    v3.12)") dtype containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ParserError
  prefs: []
  type: TYPE_NORMAL
- en: When parsing a date from string fails.
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: When another datetime conversion error happens. For example when one of ‘year’,
    ‘month’, day’ columns is missing in a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), or when a Timezone-aware [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") is found in an array-like of mixed time offsets, and `utc=False`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.astype`](pandas.DataFrame.astype.html#pandas.DataFrame.astype "pandas.DataFrame.astype")'
  prefs: []
  type: TYPE_NORMAL
- en: Cast argument to a specified dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_timedelta`](pandas.to_timedelta.html#pandas.to_timedelta "pandas.to_timedelta")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to timedelta.
  prefs: []
  type: TYPE_NORMAL
- en: '`convert_dtypes`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Many input types are supported, and lead to different output types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scalars` can be int, float, str, datetime object (from stdlib [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime
    "(in Python v3.12)") module or [`numpy`](https://numpy.org/doc/stable/reference/index.html#module-numpy
    "(in NumPy v1.26)")). They are converted to [`Timestamp`](pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp") when possible, otherwise they are converted to [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"). None/NaN/null scalars are converted to [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`array-like` can contain int, float, str, datetime objects. They are converted
    to [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex")
    when possible, otherwise they are converted to [`Index`](pandas.Index.html#pandas.Index
    "pandas.Index") with [`object`](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.12)") dtype, containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"). None/NaN/null entries are converted to [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT") in both cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Series` are converted to [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    with `datetime64` dtype when possible, otherwise they are converted to [`Series`](pandas.Series.html#pandas.Series
    "pandas.Series") with [`object`](https://docs.python.org/3/library/functions.html#object
    "(in Python v3.12)") dtype, containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)"). None/NaN/null entries are converted to [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT") in both cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame/dict-like` are converted to [`Series`](pandas.Series.html#pandas.Series
    "pandas.Series") with `datetime64` dtype. For each row a datetime is created from
    assembling the various dataframe columns. Column keys can be common abbreviations
    like [‘year’, ‘month’, ‘day’, ‘minute’, ‘second’, ‘ms’, ‘us’, ‘ns’]) or plurals
    of the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following causes are responsible for [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects being returned (possibly inside an [`Index`](pandas.Index.html#pandas.Index
    "pandas.Index") or a [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    with [`object`](https://docs.python.org/3/library/functions.html#object "(in Python
    v3.12)") dtype) instead of a proper pandas designated type ([`Timestamp`](pandas.Timestamp.html#pandas.Timestamp
    "pandas.Timestamp"), [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex") or [`Series`](pandas.Series.html#pandas.Series "pandas.Series")
    with `datetime64` dtype):'
  prefs: []
  type: TYPE_NORMAL
- en: when any input element is before [`Timestamp.min`](pandas.Timestamp.min.html#pandas.Timestamp.min
    "pandas.Timestamp.min") or after [`Timestamp.max`](pandas.Timestamp.max.html#pandas.Timestamp.max
    "pandas.Timestamp.max"), see [timestamp limitations](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-timestamp-limits).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when `utc=False` (default) and the input is an array-like or [`Series`](pandas.Series.html#pandas.Series
    "pandas.Series") containing mixed naive/aware datetime, or aware with mixed time
    offsets. Note that this happens in the (quite frequent) situation when the timezone
    has a daylight savings policy. In that case you may wish to use `utc=True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Handling various input formats**'
  prefs: []
  type: TYPE_NORMAL
- en: Assembling a datetime from multiple columns of a [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). The keys can be common abbreviations like [‘year’, ‘month’,
    ‘day’, ‘minute’, ‘second’, ‘ms’, ‘us’, ‘ns’]) or plurals of the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a unix epoch time
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: For float arg, precision rounding might happen. To prevent unexpected behavior
    use a fixed-width exact type.
  prefs: []
  type: TYPE_NORMAL
- en: Using a non-unix epoch origin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Differences with strptime behavior**'
  prefs: []
  type: TYPE_NORMAL
- en: '`"%f"` will parse all the way up to nanoseconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Non-convertible date/times**'
  prefs: []
  type: TYPE_NORMAL
- en: Passing `errors='coerce'` will force an out-of-bounds date to [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT"), in addition to forcing non-dates (or non-parseable dates) to [`NaT`](pandas.NaT.html#pandas.NaT
    "pandas.NaT").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Timezones and time offsets**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default behaviour (`utc=False`) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Timezone-naive inputs are converted to timezone-naive [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Timezone-aware inputs *with constant time offset* are converted to timezone-aware
    [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex "pandas.DatetimeIndex"):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'However, timezone-aware inputs *with mixed time offsets* (for example issued
    from a timezone with daylight savings, such as Europe/Paris) are `not successfully
    converted` to a [`DatetimeIndex`](pandas.DatetimeIndex.html#pandas.DatetimeIndex
    "pandas.DatetimeIndex"). Parsing datetimes with mixed time zones will show a warning
    unless utc=True. If you specify utc=False the warning below will be shown and
    a simple [`Index`](pandas.Index.html#pandas.Index "pandas.Index") containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects will be returned:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A mix of timezone-aware and timezone-naive inputs is also converted to a simple
    [`Index`](pandas.Index.html#pandas.Index "pandas.Index") containing [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime
    "(in Python v3.12)") objects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting `utc=True` solves most of the above issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Timezone-naive inputs are *localized* as UTC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Timezone-aware inputs are *converted* to UTC (the output represents the exact
    same datetime, but viewed from the UTC time offset +00:00).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Inputs can contain both string or datetime, the above rules still apply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
