- en: numpy.ndarray.flags
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.flags.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.flags.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: attribute
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Information about the memory layout of the array.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The [`flags`](#numpy.ndarray.flags "numpy.ndarray.flags") object can be accessed
    dictionary-like (as in `a.flags['WRITEABLE']`), or by using lowercased attribute
    names (as in `a.flags.writeable`). Short flag names are only supported in dictionary
    access.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be changed by the
    user, via direct assignment to the attribute or dictionary entry, or by calling
    [`ndarray.setflags`](numpy.ndarray.setflags.html#numpy.ndarray.setflags "numpy.ndarray.setflags").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'The array flags cannot be set arbitrarily:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: WRITEBACKIFCOPY can only be set `False`.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ALIGNED can only be set `True` if the data is truly aligned.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WRITEABLE can only be set `True` if the array owns its own memory or the ultimate
    owner of the memory exposes a writeable buffer interface or is a string.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays can be both C-style and Fortran-style contiguous simultaneously. This
    is clear for 1-dimensional arrays, but can also be true for higher dimensional
    arrays.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Even for contiguous arrays a stride for a given dimension `arr.strides[dim]`
    may be *arbitrary* if `arr.shape[dim] == 1` or the array has no elements. It does
    *not* generally hold that `self.strides[-1] == self.itemsize` for C-style contiguous
    arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous arrays
    is true.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**C_CONTIGUOUS (C)**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The data is in a single, C-style contiguous segment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**F_CONTIGUOUS (F)**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The data is in a single, Fortran-style contiguous segment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**OWNDATA (O)**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The array owns the memory it uses or borrows it from another object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITEABLE (W)**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The data area can be written to. Setting this to False locks the data, making
    it read-only. A view (slice, etc.) inherits WRITEABLE from its base array at creation
    time, but a view of a writeable array may be subsequently locked while the base
    array remains writeable. (The opposite is not true, in that a view of a locked
    array may not be made writeable. However, currently, locking a base object does
    not lock any views that already reference it, so under that circumstance it is
    possible to alter the contents of a locked array via a previously created writeable
    view onto it.) Attempting to change a non-writeable array raises a RuntimeError
    exception.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**ALIGNED (A)**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The data and all elements are aligned appropriately for the hardware.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITEBACKIFCOPY (X)**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: This array is a copy of some other array. The C-API function PyArray_ResolveWritebackIfCopy
    must be called before deallocating to the base array will be updated with the
    contents of this array.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '**FNC**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: F_CONTIGUOUS and not C_CONTIGUOUS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**FORC**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**BEHAVED (B)**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: ALIGNED and WRITEABLE.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**CARRAY (CA)**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: BEHAVED and C_CONTIGUOUS.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**FARRAY (FA)**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: BEHAVED 和 F_CONTIGUOUS，但不是 C_CONTIGUOUS。
