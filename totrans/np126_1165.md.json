["```py\n# emulating a function that sometimes returns np.ma.masked\nval = random.choice([np.ma.masked, 10])\nvar_arr = np.asarray(val)\nval_arr += 1  # now errors, previously changed np.ma.masked.data \n```", "```py\n>>> f32 = np.float32([[1, 2]])\n>>> np.linalg.norm(f32, 2.0, axis=-1).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 2.0001, axis=-1).dtype\ndtype('float64')  # numpy 1.13\ndtype('float32')  # numpy 1.14 \n```", "```py\n# FIXME: We need the str/repr formatting used in Numpy < 1.14.\ntry:\n    np.set_printoptions(legacy='1.13')\nexcept TypeError:\n    pass \n```", "```py\npython setup.py config --compiler=clang --fcompiler=flang install \n```", "```py\nstr0 = np.empty(10, np.dtype([('v', str, N)]))['v']\nvoid0 = np.empty(10, np.void) \n```", "```py\nx = dtype({'names': ['A', 'B'], 'formats': ['i4', 'f4'], 'offsets': [0, 4]})\ny = dtype({'names': ['B', 'A'], 'formats': ['f4', 'i4'], 'offsets': [4, 0]}) \n```", "```py\n>>> np.polynomial.Polynomial(range(4))\nPolynomial([0.,  1.,  2.,  3.], domain=[-1,  1], window=[-1,  1]) \n```", "```py\n# emulating a function that sometimes returns np.ma.masked\nval = random.choice([np.ma.masked, 10])\nvar_arr = np.asarray(val)\nval_arr += 1  # now errors, previously changed np.ma.masked.data \n```", "```py\n>>> f32 = np.float32([[1, 2]])\n>>> np.linalg.norm(f32, 2.0, axis=-1).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 2.0001, axis=-1).dtype\ndtype('float64')  # numpy 1.13\ndtype('float32')  # numpy 1.14 \n```", "```py\n# FIXME: We need the str/repr formatting used in Numpy < 1.14.\ntry:\n    np.set_printoptions(legacy='1.13')\nexcept TypeError:\n    pass \n```", "```py\n# emulating a function that sometimes returns np.ma.masked\nval = random.choice([np.ma.masked, 10])\nvar_arr = np.asarray(val)\nval_arr += 1  # now errors, previously changed np.ma.masked.data \n```", "```py\n>>> f32 = np.float32([[1, 2]])\n>>> np.linalg.norm(f32, 2.0, axis=-1).dtype\ndtype('float32')\n>>> np.linalg.norm(f32, 2.0001, axis=-1).dtype\ndtype('float64')  # numpy 1.13\ndtype('float32')  # numpy 1.14 \n```", "```py\n# FIXME: We need the str/repr formatting used in Numpy < 1.14.\ntry:\n    np.set_printoptions(legacy='1.13')\nexcept TypeError:\n    pass \n```", "```py\npython setup.py config --compiler=clang --fcompiler=flang install \n```", "```py\npython setup.py config --compiler=clang --fcompiler=flang install \n```", "```py\nstr0 = np.empty(10, np.dtype([('v', str, N)]))['v']\nvoid0 = np.empty(10, np.void) \n```", "```py\nstr0 = np.empty(10, np.dtype([('v', str, N)]))['v']\nvoid0 = np.empty(10, np.void) \n```", "```py\nx = dtype({'names': ['A', 'B'], 'formats': ['i4', 'f4'], 'offsets': [0, 4]})\ny = dtype({'names': ['B', 'A'], 'formats': ['f4', 'i4'], 'offsets': [4, 0]}) \n```", "```py\n>>> np.polynomial.Polynomial(range(4))\nPolynomial([0.,  1.,  2.,  3.], domain=[-1,  1], window=[-1,  1]) \n```", "```py\nx = dtype({'names': ['A', 'B'], 'formats': ['i4', 'f4'], 'offsets': [0, 4]})\ny = dtype({'names': ['B', 'A'], 'formats': ['f4', 'i4'], 'offsets': [4, 0]}) \n```", "```py\n>>> np.polynomial.Polynomial(range(4))\nPolynomial([0.,  1.,  2.,  3.], domain=[-1,  1], window=[-1,  1]) \n```"]