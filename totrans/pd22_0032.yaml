- en: Reshaping and pivot tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/reshaping.html](https://pandas.pydata.org/docs/user_guide/reshaping.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pandas provides methods for manipulating a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to alter the representation of the data for further data processing
    or data summarization.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    and [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table"): Group unique values within one or more discrete categories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"): Pivot a column or row level to the opposite axis
    respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt") and
    [`wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long"): Unpivot a wide [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to a long format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") and [`from_dummies()`](../reference/api/pandas.from_dummies.html#pandas.from_dummies
    "pandas.from_dummies"): Conversions with indicator variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode"): Convert a column of list-like values to individual rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab"):
    Calculate a cross-tabulation of multiple 1 dimensional factor arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut"): Transform
    continuous variables to discrete, categorical values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize "pandas.factorize"):
    Encode 1 dimensional variables into integer labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    and [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../_images/reshaping_pivot.png](../Images/f46f351ea478cf18dfa2dcdaeb8d6845.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data is often stored in so-called “stacked” or “record” format. In a “record”
    or “wide” format, typically there is one row for each subject. In the “stacked”
    or “long” format there are multiple rows for each subject where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform time series operations with each unique variable, a better representation
    would be where the `columns` are the unique variables and an `index` of dates
    identifies individual observations. To reshape the data into this form, we use
    the [`DataFrame.pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") method (also implemented as a top level function [`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot
    "pandas.pivot")):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `values` argument is omitted, and the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") has more than one column of values which are not used as column
    or index inputs to [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot"), then the resulting “pivoted” [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have [hierarchical columns](advanced.html#advanced-hierarchical)
    whose topmost level indicates the respective value column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then select subsets from the pivoted [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that this returns a view on the underlying data in the case where the data
    are homogeneously-typed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    can only handle unique rows specified by `index` and `columns`. If you data contains
    duplicates, use [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table").'
  prefs: []
  type: TYPE_NORMAL
- en: '### [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")'
  prefs: []
  type: TYPE_NORMAL
- en: While [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") provides general purpose pivoting with various data
    types, pandas also provides [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") or [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") for pivoting with aggregation of numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: The function [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") can be used to create spreadsheet-style pivot tables. See
    the [cookbook](cookbook.html#cookbook-pivot) for some advanced strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") potentially having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the index or column. If the `values` column name is not
    given, the pivot table will include all of the data in an additional level of
    hierarchy in the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can use [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper") for `index` and `columns` keywords. For detail of [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper"), see [Grouping with a Grouper specification](groupby.html#groupby-specify).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '#### Adding margins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing `margins=True` to [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") will add a row and column with an `All` label
    with partial group aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can call [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") to display a pivoted DataFrame as having a multi-level
    index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]  ## [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/reshaping_stack.png](../Images/ea980142626bfa8107bf2b032d05059a.png)'
  prefs: []
  type: TYPE_IMG
- en: Closely related to the [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") method are the related [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") methods available on [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). These methods are designed to work together with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") objects (see the section on [hierarchical indexing](advanced.html#advanced-hierarchical)).
  prefs: []
  type: TYPE_NORMAL
- en: '[`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack"): “pivot” a level of the (possibly hierarchical) column
    labels, returning a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with an index with a new inner-most level of row labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"): (inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")) “pivot” a level of the (possibly hierarchical) row
    index to the column axis, producing a reshaped [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a new inner-most level of column labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../_images/reshaping_unstack.png](../Images/f048ad4727a0d692aa9d7098c96598df.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") function “compresses” a level in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") columns to produce either:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"),
    in the case of a [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    in the columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    in the case of a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") in the columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the columns have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), you can choose which level to stack. The stacked level becomes
    the new lowest level in a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With a “stacked” [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") (having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") as the `index`), the inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") is [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), which by default unstacks the **last level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/reshaping_unstack_1.png](../Images/43ae13ceeddfa7f1a32215db035a2fe5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the indexes have names, you can use the level names instead of specifying
    the level numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/reshaping_unstack_0.png](../Images/775e920743dcc74fa70c9f6d57b04f82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") methods implicitly sort the index levels involved.
    Hence a call to [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and then [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), or vice versa, will result in a **sorted** copy of
    the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '### Multiple levels'
  prefs: []
  type: TYPE_NORMAL
- en: You may also stack or unstack more than one level at a time by passing a list
    of levels, in which case the end result is as if each level in the list were processed
    individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The list of levels can contain either level names or level numbers but not a
    mixture of the two.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unstacking can result in missing values if subgroups do not have the same set
    of labels. By default, missing values will be replaced with the default fill value
    for that data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The missing value can be filled with a specific value with the `fill_value`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]  ## [`melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    and [`wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long")'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/reshaping_melt.png](../Images/a140c066f549eb4ce484503ce7fd7f13.png)'
  prefs: []
  type: TYPE_IMG
- en: The top-level [`melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    function and the corresponding [`DataFrame.melt()`](../reference/api/pandas.DataFrame.melt.html#pandas.DataFrame.melt
    "pandas.DataFrame.melt") are useful to massage a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") into a format where one or more columns are *identifier variables*,
    while all other columns, considered *measured variables*, are “unpivoted” to the
    row axis, leaving just two non-identifier columns, “variable” and “value”. The
    names of those columns can be customized by supplying the `var_name` and `value_name`
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When transforming a DataFrame using [`melt()`](../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt"), the index will be ignored. The original index values can be kept
    by setting the `ignore_index=False` parameter to `False` (default is `True`).
    `ignore_index=False` will however duplicate index values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[`wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long") is similar to [`melt()`](../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt") with more customization for column matching.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]  ## [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") and [`from_dummies()`](../reference/api/pandas.from_dummies.html#pandas.from_dummies
    "pandas.from_dummies")'
  prefs: []
  type: TYPE_NORMAL
- en: To convert categorical variables of a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") into a “dummy” or “indicator”, [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") creates a new [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with columns of the unique variables and the values representing
    the presence of those variables per row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`prefix` adds a prefix to the the column names which is useful for merging
    the result with the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This function is often used along with discretization functions like [`cut()`](../reference/api/pandas.cut.html#pandas.cut
    "pandas.cut"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") also accepts a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). By default, `object`, `string`, or `categorical` type columns
    are encoded as dummy variables with other columns unaltered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the `columns` keyword will encode a column of any type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    version, you can pass values for the `prefix` and `prefix_sep`. By default the
    column name is used as the prefix and `_` as the prefix separator. You can specify
    `prefix` and `prefix_sep` in 3 ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'string: Use the same value for `prefix` or `prefix_sep` for each column to
    be encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'list: Must be the same length as the number of columns being encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dict: Mapping column name to prefix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: To avoid collinearity when feeding the result to statistical models, specify
    `drop_first=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When a column contains only one level, it will be omitted in the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The values can be cast to a different type using the `dtype` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dummies()`](../reference/api/pandas.from_dummies.html#pandas.from_dummies
    "pandas.from_dummies") converts the output of [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") back into a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") of categorical values from indicator values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Dummy coded data only requires `k - 1` categories to be included, in this case
    the last category is the default category. The default category can be modified
    with `default_category`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]  ## [`explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode")'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column with nested, list-like values, [`explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode") will transform each list-like value to a separate row.
    The resulting [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    will be duplicated corresponding to the index label from the original row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.explode`](../reference/api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode") can also explode the column in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode") will replace empty lists with a missing value indicator
    and preserve scalar entries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: A comma-separated string value can be split into individual values in a list
    and then exploded to a new row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]  ## [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab")'
  prefs: []
  type: TYPE_NORMAL
- en: Use [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    to compute a cross-tabulation of two (or more) factors. By default [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") computes a frequency table of the factors unless an array of
    values and an aggregation function are passed.
  prefs: []
  type: TYPE_NORMAL
- en: Any [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    passed will have their name attributes used unless row or column names for the
    cross-tabulation are specified
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    receives only two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), it will provide a frequency table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    can also summarize to [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: For [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") data, to include **all** of data categories even if the
    actual data does not contain any instances of a particular category, use `dropna=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Normalization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Frequency tables can also be normalized to show percentages rather than counts
    using the `normalize` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`normalize` can also normalize values within each row or within each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    can also accept a third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and an aggregation function (`aggfunc`) that will be applied
    to the values of the third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") within each group defined by the first two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Adding margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`margins=True` will add a row and column with an `All` label with partial group
    aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]  ## [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut")'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") function
    computes groupings for the values of the input array and is often used to transform
    continuous variables to discrete or categorical variables:'
  prefs: []
  type: TYPE_NORMAL
- en: An integer `bins` will form equal-width bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: A list of ordered bin edges will assign an interval for each variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: If the `bins` keyword is an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex"), then these will be used to bin the passed data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]  ## [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize "pandas.factorize")
    encodes 1 dimensional values into integer labels. Missing values are encoded as
    `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") will similarly encode 1 dimensional values for further categorical
    operations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    and [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![../_images/reshaping_pivot.png](../Images/f46f351ea478cf18dfa2dcdaeb8d6845.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data is often stored in so-called “stacked” or “record” format. In a “record”
    or “wide” format, typically there is one row for each subject. In the “stacked”
    or “long” format there are multiple rows for each subject where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform time series operations with each unique variable, a better representation
    would be where the `columns` are the unique variables and an `index` of dates
    identifies individual observations. To reshape the data into this form, we use
    the [`DataFrame.pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") method (also implemented as a top level function [`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot
    "pandas.pivot")):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `values` argument is omitted, and the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") has more than one column of values which are not used as column
    or index inputs to [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot"), then the resulting “pivoted” [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have [hierarchical columns](advanced.html#advanced-hierarchical)
    whose topmost level indicates the respective value column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then select subsets from the pivoted [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note that this returns a view on the underlying data in the case where the data
    are homogeneously-typed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    can only handle unique rows specified by `index` and `columns`. If you data contains
    duplicates, use [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table").'
  prefs: []
  type: TYPE_NORMAL
- en: '### [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")'
  prefs: []
  type: TYPE_NORMAL
- en: While [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") provides general purpose pivoting with various data
    types, pandas also provides [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") or [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") for pivoting with aggregation of numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: The function [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") can be used to create spreadsheet-style pivot tables. See
    the [cookbook](cookbook.html#cookbook-pivot) for some advanced strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") potentially having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the index or column. If the `values` column name is not
    given, the pivot table will include all of the data in an additional level of
    hierarchy in the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can use [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper") for `index` and `columns` keywords. For detail of [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper"), see [Grouping with a Grouper specification](groupby.html#groupby-specify).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '#### Adding margins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing `margins=True` to [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") will add a row and column with an `All` label
    with partial group aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can call [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") to display a pivoted DataFrame as having a multi-level
    index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data is often stored in so-called “stacked” or “record” format. In a “record”
    or “wide” format, typically there is one row for each subject. In the “stacked”
    or “long” format there are multiple rows for each subject where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform time series operations with each unique variable, a better representation
    would be where the `columns` are the unique variables and an `index` of dates
    identifies individual observations. To reshape the data into this form, we use
    the [`DataFrame.pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") method (also implemented as a top level function [`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot
    "pandas.pivot")):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `values` argument is omitted, and the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") has more than one column of values which are not used as column
    or index inputs to [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot"), then the resulting “pivoted” [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have [hierarchical columns](advanced.html#advanced-hierarchical)
    whose topmost level indicates the respective value column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then select subsets from the pivoted [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Note that this returns a view on the underlying data in the case where the data
    are homogeneously-typed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`pivot()`](../reference/api/pandas.pivot.html#pandas.pivot "pandas.pivot")
    can only handle unique rows specified by `index` and `columns`. If you data contains
    duplicates, use [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table").'
  prefs: []
  type: TYPE_NORMAL
- en: '### [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table")'
  prefs: []
  type: TYPE_NORMAL
- en: While [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") provides general purpose pivoting with various data
    types, pandas also provides [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") or [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") for pivoting with aggregation of numeric data.
  prefs: []
  type: TYPE_NORMAL
- en: The function [`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") can be used to create spreadsheet-style pivot tables. See
    the [cookbook](cookbook.html#cookbook-pivot) for some advanced strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") potentially having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the index or column. If the `values` column name is not
    given, the pivot table will include all of the data in an additional level of
    hierarchy in the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can use [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper") for `index` and `columns` keywords. For detail of [`Grouper`](../reference/api/pandas.Grouper.html#pandas.Grouper
    "pandas.Grouper"), see [Grouping with a Grouper specification](groupby.html#groupby-specify).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '#### Adding margins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing `margins=True` to [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") will add a row and column with an `All` label
    with partial group aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can call [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") to display a pivoted DataFrame as having a multi-level
    index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]  #### Adding margins'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing `margins=True` to [`pivot_table()`](../reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table
    "pandas.DataFrame.pivot_table") will add a row and column with an `All` label
    with partial group aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can call [`DataFrame.stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") to display a pivoted DataFrame as having a multi-level
    index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '## [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack")'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/reshaping_stack.png](../Images/ea980142626bfa8107bf2b032d05059a.png)'
  prefs: []
  type: TYPE_IMG
- en: Closely related to the [`pivot()`](../reference/api/pandas.DataFrame.pivot.html#pandas.DataFrame.pivot
    "pandas.DataFrame.pivot") method are the related [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") methods available on [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). These methods are designed to work together with [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") objects (see the section on [hierarchical indexing](advanced.html#advanced-hierarchical)).
  prefs: []
  type: TYPE_NORMAL
- en: '[`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack"): “pivot” a level of the (possibly hierarchical) column
    labels, returning a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with an index with a new inner-most level of row labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"): (inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack")) “pivot” a level of the (possibly hierarchical) row
    index to the column axis, producing a reshaped [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a new inner-most level of column labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![../_images/reshaping_unstack.png](../Images/f048ad4727a0d692aa9d7098c96598df.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") function “compresses” a level in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") columns to produce either:'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"),
    in the case of a [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    in the columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    in the case of a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") in the columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the columns have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), you can choose which level to stack. The stacked level becomes
    the new lowest level in a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'With a “stacked” [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") (having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") as the `index`), the inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") is [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), which by default unstacks the **last level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/reshaping_unstack_1.png](../Images/43ae13ceeddfa7f1a32215db035a2fe5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the indexes have names, you can use the level names instead of specifying
    the level numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/reshaping_unstack_0.png](../Images/775e920743dcc74fa70c9f6d57b04f82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack") methods implicitly sort the index levels involved.
    Hence a call to [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") and then [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), or vice versa, will result in a **sorted** copy of
    the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '### Multiple levels'
  prefs: []
  type: TYPE_NORMAL
- en: You may also stack or unstack more than one level at a time by passing a list
    of levels, in which case the end result is as if each level in the list were processed
    individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The list of levels can contain either level names or level numbers but not a
    mixture of the two.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unstacking can result in missing values if subgroups do not have the same set
    of labels. By default, missing values will be replaced with the default fill value
    for that data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The missing value can be filled with a specific value with the `fill_value`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '### Multiple levels'
  prefs: []
  type: TYPE_NORMAL
- en: You may also stack or unstack more than one level at a time by passing a list
    of levels, in which case the end result is as if each level in the list were processed
    individually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The list of levels can contain either level names or level numbers but not a
    mixture of the two.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unstacking can result in missing values if subgroups do not have the same set
    of labels. By default, missing values will be replaced with the default fill value
    for that data type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The missing value can be filled with a specific value with the `fill_value`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '## [`melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    and [`wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long")'
  prefs: []
  type: TYPE_NORMAL
- en: '![../_images/reshaping_melt.png](../Images/a140c066f549eb4ce484503ce7fd7f13.png)'
  prefs: []
  type: TYPE_IMG
- en: The top-level [`melt()`](../reference/api/pandas.melt.html#pandas.melt "pandas.melt")
    function and the corresponding [`DataFrame.melt()`](../reference/api/pandas.DataFrame.melt.html#pandas.DataFrame.melt
    "pandas.DataFrame.melt") are useful to massage a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") into a format where one or more columns are *identifier variables*,
    while all other columns, considered *measured variables*, are “unpivoted” to the
    row axis, leaving just two non-identifier columns, “variable” and “value”. The
    names of those columns can be customized by supplying the `var_name` and `value_name`
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: When transforming a DataFrame using [`melt()`](../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt"), the index will be ignored. The original index values can be kept
    by setting the `ignore_index=False` parameter to `False` (default is `True`).
    `ignore_index=False` will however duplicate index values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[`wide_to_long()`](../reference/api/pandas.wide_to_long.html#pandas.wide_to_long
    "pandas.wide_to_long") is similar to [`melt()`](../reference/api/pandas.melt.html#pandas.melt
    "pandas.melt") with more customization for column matching.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '## [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") and [`from_dummies()`](../reference/api/pandas.from_dummies.html#pandas.from_dummies
    "pandas.from_dummies")'
  prefs: []
  type: TYPE_NORMAL
- en: To convert categorical variables of a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") into a “dummy” or “indicator”, [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") creates a new [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with columns of the unique variables and the values representing
    the presence of those variables per row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '`prefix` adds a prefix to the the column names which is useful for merging
    the result with the original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'This function is often used along with discretization functions like [`cut()`](../reference/api/pandas.cut.html#pandas.cut
    "pandas.cut"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") also accepts a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). By default, `object`, `string`, or `categorical` type columns
    are encoded as dummy variables with other columns unaltered.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Specifying the `columns` keyword will encode a column of any type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    version, you can pass values for the `prefix` and `prefix_sep`. By default the
    column name is used as the prefix and `_` as the prefix separator. You can specify
    `prefix` and `prefix_sep` in 3 ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'string: Use the same value for `prefix` or `prefix_sep` for each column to
    be encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'list: Must be the same length as the number of columns being encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dict: Mapping column name to prefix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: To avoid collinearity when feeding the result to statistical models, specify
    `drop_first=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: When a column contains only one level, it will be omitted in the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The values can be cast to a different type using the `dtype` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_dummies()`](../reference/api/pandas.from_dummies.html#pandas.from_dummies
    "pandas.from_dummies") converts the output of [`get_dummies()`](../reference/api/pandas.get_dummies.html#pandas.get_dummies
    "pandas.get_dummies") back into a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") of categorical values from indicator values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Dummy coded data only requires `k - 1` categories to be included, in this case
    the last category is the default category. The default category can be modified
    with `default_category`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '## [`explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode")'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") column with nested, list-like values, [`explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode") will transform each list-like value to a separate row.
    The resulting [`Index`](../reference/api/pandas.Index.html#pandas.Index "pandas.Index")
    will be duplicated corresponding to the index label from the original row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.explode`](../reference/api/pandas.DataFrame.explode.html#pandas.DataFrame.explode
    "pandas.DataFrame.explode") can also explode the column in the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.explode()`](../reference/api/pandas.Series.explode.html#pandas.Series.explode
    "pandas.Series.explode") will replace empty lists with a missing value indicator
    and preserve scalar entries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: A comma-separated string value can be split into individual values in a list
    and then exploded to a new row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '## [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")'
  prefs: []
  type: TYPE_NORMAL
- en: Use [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    to compute a cross-tabulation of two (or more) factors. By default [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab
    "pandas.crosstab") computes a frequency table of the factors unless an array of
    values and an aggregation function are passed.
  prefs: []
  type: TYPE_NORMAL
- en: Any [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    passed will have their name attributes used unless row or column names for the
    cross-tabulation are specified
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: If [`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    receives only two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), it will provide a frequency table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    can also summarize to [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: For [`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") data, to include **all** of data categories even if the
    actual data does not contain any instances of a particular category, use `dropna=False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Normalization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Frequency tables can also be normalized to show percentages rather than counts
    using the `normalize` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '`normalize` can also normalize values within each row or within each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    can also accept a third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and an aggregation function (`aggfunc`) that will be applied
    to the values of the third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") within each group defined by the first two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Adding margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`margins=True` will add a row and column with an `All` label with partial group
    aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Normalization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Frequency tables can also be normalized to show percentages rather than counts
    using the `normalize` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '`normalize` can also normalize values within each row or within each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[`crosstab()`](../reference/api/pandas.crosstab.html#pandas.crosstab "pandas.crosstab")
    can also accept a third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and an aggregation function (`aggfunc`) that will be applied
    to the values of the third [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") within each group defined by the first two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Adding margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`margins=True` will add a row and column with an `All` label with partial group
    aggregates across the categories on the rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '## [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut")'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`cut()`](../reference/api/pandas.cut.html#pandas.cut "pandas.cut") function
    computes groupings for the values of the input array and is often used to transform
    continuous variables to discrete or categorical variables:'
  prefs: []
  type: TYPE_NORMAL
- en: An integer `bins` will form equal-width bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: A list of ordered bin edges will assign an interval for each variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: If the `bins` keyword is an [`IntervalIndex`](../reference/api/pandas.IntervalIndex.html#pandas.IntervalIndex
    "pandas.IntervalIndex"), then these will be used to bin the passed data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '## [`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize
    "pandas.factorize")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`factorize()`](../reference/api/pandas.factorize.html#pandas.factorize "pandas.factorize")
    encodes 1 dimensional values into integer labels. Missing values are encoded as
    `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[`Categorical`](../reference/api/pandas.Categorical.html#pandas.Categorical
    "pandas.Categorical") will similarly encode 1 dimensional values for further categorical
    operations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
