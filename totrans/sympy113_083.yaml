- en: Formal Power Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/series/formal.html](https://docs.sympy.org/latest/modules/series/formal.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Methods for computing and manipulating Formal Power Series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represents Formal Power Series of a function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: No computation is performed. This class should only to be used to represent
    a series. No checks are performed.
  prefs: []
  type: TYPE_NORMAL
- en: For computing a series use [`fps()`](#sympy.series.formal.fps "sympy.series.formal.fps").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.fps`](#sympy.series.formal.fps "sympy.series.formal.fps")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: self.coeff_bell(n) returns a sequence of Bell polynomials of the second kind.
    Note that `n` should be a integer.
  prefs: []
  type: TYPE_NORMAL
- en: The second kind of Bell polynomials (are sometimes called “partial” Bell polynomials
    or incomplete Bell polynomials) are defined as
  prefs: []
  type: TYPE_NORMAL
- en: \[B_{n,k}(x_1, x_2,\dotsc x_{n-k+1}) = \sum_{j_1+j_2+j_2+\dotsb=k \atop j_1+2j_2+3j_2+\dotsb=n}
    \frac{n!}{j_1!j_2!\dotsb j_{n-k+1}!} \left(\frac{x_1}{1!} \right)^{j_1} \left(\frac{x_2}{2!}
    \right)^{j_2} \dotsb \left(\frac{x_{n-k+1}}{(n-k+1)!} \right) ^{j_{n-k+1}}.\]
  prefs: []
  type: TYPE_NORMAL
- en: '`bell(n, k, (x1, x2, ...))` gives Bell polynomials of the second kind, \(B_{n,k}(x_1,
    x_2, \dotsc, x_{n-k+1})\).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the truncated terms of the formal power series of the composed function,
    up to specified `n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the order of the term up to which the polynomial should be truncated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If `f` and `g` are two formal power series of two different functions, then
    the coefficient sequence `ak` of the composed formal power series \(fp\) will
    be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum\limits_{k=0}^{n} b_k B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R824](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comtet, Louis: Advanced combinatorics; the art of finite and infinite expansions.
    Reidel, 1974.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Returns an infinite representation of the series
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Integrate Formal Power Series.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Returns the truncated terms of the inverse of the formal power series, up to
    specified `n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the order of the term up to which the polynomial should be truncated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If `f` and `g` are two formal power series of two different functions, then
    the coefficient sequence `ak` of the composed formal power series `fp` will be
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum\limits_{k=0}^{n} (-1)^{k} x_0^{-k-1} B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R825](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comtet, Louis: Advanced combinatorics; the art of finite and infinite expansions.
    Reidel, 1974.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Truncated series as polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns series expansion of `f` upto order `O(x**n)` as a polynomial(without
    `O` term).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Multiplies two Formal Power Series, using discrete convolution and return the
    truncated terms upto specified order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : Number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies the order of the term up to which the polynomial should be truncated.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.discrete.convolutions`](../discrete.html#module-sympy.discrete.convolutions
    "sympy.discrete.convolutions"), [`sympy.series.formal.FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Truncated series.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns truncated series expansion of f upto order `O(x**n)`.
  prefs: []
  type: TYPE_NORMAL
- en: If n is `None`, returns an infinite iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Generates Formal Power Series of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : Symbol, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If x is None and `f` is univariate, the univariate symbols will be supplied,
    otherwise an error will be raised.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x0** : number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Point to perform series expansion about. Default is 0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dir** : {1, -1, ‘+’, ‘-‘}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If dir is 1 or ‘+’ the series is calculated from the right and for -1 or ‘-’
    the series is calculated from the left. For smooth functions this flag will not
    alter the results. Default is 1.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**hyper** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set hyper to False to skip the hypergeometric algorithm. By default it is set
    to False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of the derivative of `f`, Default is 4.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rational** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set rational to False to skip rational algorithm. By default it is set to True.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**full** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set full to True to increase the range of rational algorithm. See [`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm") for details. By default it is set to
    False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns the formal series expansion of `f` around `x = x0` with respect to `x`
    in the form of a `FormalPowerSeries` object.
  prefs: []
  type: TYPE_NORMAL
- en: Formal Power Series is represented using an explicit formula computed using
    different algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: See [`compute_fps()`](#sympy.series.formal.compute_fps "sympy.series.formal.compute_fps")
    for the more details regarding the computation of formula.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Rational Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Symbolic Functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.compute_fps`](#sympy.series.formal.compute_fps
    "sympy.series.formal.compute_fps")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Computes the formula for Formal Power Series of a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: '**x0** : number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Point to perform series expansion about. Default is 0.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dir** : {1, -1, ‘+’, ‘-‘}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If dir is 1 or ‘+’ the series is calculated from the right and for -1 or ‘-’
    the series is calculated from the left. For smooth functions this flag will not
    alter the results. Default is 1.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**hyper** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set hyper to False to skip the hypergeometric algorithm. By default it is set
    to False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of the derivative of `f`, Default is 4.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rational** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set rational to False to skip rational algorithm. By default it is set to True.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**full** : {True, False}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Set full to True to increase the range of rational algorithm. See [`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm") for details. By default it is set to
    False.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ak** : sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of coefficients.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xk** : sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of powers of x.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ind** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Independent terms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**mul** : Pow'
  prefs: []
  type: TYPE_NORMAL
- en: Common terms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Tries to compute the formula by applying the following techniques (in order):'
  prefs: []
  type: TYPE_NORMAL
- en: rational_algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hypergeometric algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.rational_algorithm`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm"), [`sympy.series.formal.hyper_algorithm`](#sympy.series.formal.hyper_algorithm
    "sympy.series.formal.hyper_algorithm")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Represents the composed formal power series of two functions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  prefs: []
  type: TYPE_NORMAL
- en: There are two differences between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose") object. The first argument contains
    the outer function and the inner function involved in the omposition. Also, the
    coefficient sequence contains the generic sequence which is to be multiplied by
    a custom `bell_seq` finite sequence. The finite terms will then be added up to
    get the final terms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Function for the composed formal power series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Represents the Inverse of a formal power series.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  prefs: []
  type: TYPE_NORMAL
- en: There is a single difference between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse") object. The coefficient sequence
    contains the generic sequence which is to be multiplied by a custom `bell_seq`
    finite sequence. The finite terms will then be added up to get the final terms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Function for the inverse of a formal power series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Represents the product of two formal power series of two functions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  prefs: []
  type: TYPE_NORMAL
- en: There are two differences between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct") object. The first argument contains
    the two functions involved in the product. Also, the coefficient sequence contains
    both the coefficient sequence of the formal power series of the involved functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Function of the product of two formal power series.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Base Class for Product, Compose and Inverse classes
  prefs: []
  type: TYPE_NORMAL
- en: Rational Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of all the rationally independent terms.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Rational algorithm for computing formula of coefficients of Formal Power Series
    of a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : Symbol'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Order of the derivative of `f`, Default is 4.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**full** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**formula** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: '**ind** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Independent terms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : int'
  prefs: []
  type: TYPE_NORMAL
- en: '**full** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Applicable when f(x) or some derivative of f(x) is a rational function in x.
  prefs: []
  type: TYPE_NORMAL
- en: '[`rational_algorithm()`](#sympy.series.formal.rational_algorithm "sympy.series.formal.rational_algorithm")
    uses [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart")
    function for partial fraction decomposition. [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") by default uses ‘undetermined coefficients method’.
    By setting `full=True`, ‘Bronstein’s algorithm’ can be used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Looks for derivative of a function up to 4’th order (by default). This can be
    overridden using order option.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: By setting `full=True`, range of admissible functions to be solved using `rational_algorithm`
    can be increased. This option should be used carefully as it can significantly
    slow down the computation as `doit` is performed on the [`RootSum`](../polys/reference.html#sympy.polys.rootoftools.RootSum
    "sympy.polys.rootoftools.RootSum") object returned by the [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") function. Use `full=False` whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.partfrac.apart`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R826](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Formal Power Series - Dominik Gruntz, Wolfram Koepf
  prefs: []
  type: TYPE_NORMAL
- en: '[[R827](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Power Series in Computer Algebra - Wolfram Koepf
  prefs: []
  type: TYPE_NORMAL
- en: Hypergeometric Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Generates simple DE.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: DE is of the form
  prefs: []
  type: TYPE_NORMAL
- en: \[f^k(x) + \sum\limits_{j=0}^{k-1} A_j f^j(x) = 0\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(A_j\) should be rational function in x.
  prefs: []
  type: TYPE_NORMAL
- en: Generates DE’s upto order 4 (default). DE’s can also have free parameters.
  prefs: []
  type: TYPE_NORMAL
- en: By increasing order, higher order DE’s can be found.
  prefs: []
  type: TYPE_NORMAL
- en: Yields a tuple of (DE, order).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Converts a DE with constant coefficients (explike) into a RE.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Performs the substitution:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f^j(x) \to r(k + j)\]
  prefs: []
  type: TYPE_NORMAL
- en: Normalises the terms so that lowest order of a term is always r(k).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.hyper_re`](#sympy.series.formal.hyper_re "sympy.series.formal.hyper_re")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Converts a DE into a RE.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Performs the substitution:'
  prefs: []
  type: TYPE_NORMAL
- en: \[x^l f^j(x) \to (k + 1 - l)_j . a_{k + j - l}\]
  prefs: []
  type: TYPE_NORMAL
- en: Normalises the terms so that lowest order of a term is always r(k).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.exp_re`](#sympy.series.formal.exp_re "sympy.series.formal.exp_re")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Solves RE of hypergeometric type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**formula** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: '**ind** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Independent terms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Attempts to solve RE of the form
  prefs: []
  type: TYPE_NORMAL
- en: Q(k)*a(k + m) - P(k)*a(k)
  prefs: []
  type: TYPE_NORMAL
- en: 'Transformations that preserve Hypergeometric type:'
  prefs: []
  type: TYPE_NORMAL
- en: 'x**n*f(x): b(k + m) = R(k - n)*b(k)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(A*x): b(k + m) = A**m*R(k)*b(k)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(x**n): b(k + n*m) = R(k/n)*b(k)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(x**(1/m)): b(k + 1) = R(k*m)*b(k)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f’(x): b(k + m) = ((k + m + 1)/(k + 1))*R(k + 1)*b(k)'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Some of these transformations have been used to solve the RE.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R828](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: Formal Power Series - Dominik Gruntz, Wolfram Koepf
  prefs: []
  type: TYPE_NORMAL
- en: '[[R829](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: Power Series in Computer Algebra - Wolfram Koepf
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Solves the DE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**formula** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: '**ind** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Independent terms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Tries to solve DE by either converting into a RE containing two terms or converting
    into a DE having constant coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Hypergeometric algorithm for computing Formal Power Series.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generates DE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the DE into RE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solves the RE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.series.formal.simpleDE`](#sympy.series.formal.simpleDE "sympy.series.formal.simpleDE"),
    [`sympy.series.formal.solve_de`](#sympy.series.formal.solve_de "sympy.series.formal.solve_de")'
  prefs: []
  type: TYPE_NORMAL
