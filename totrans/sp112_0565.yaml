- en: scipy.signal.remez
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.remez.html#scipy.signal.remez](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.remez.html#scipy.signal.remez)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the minimax optimal filter using the Remez exchange algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the filter-coefficients for the finite impulse response (FIR) filter
    whose transfer function minimizes the maximum error between the desired gain and
    the realized gain in the specified frequency bands using the Remez exchange algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numtaps**int'
  prefs: []
  type: TYPE_NORMAL
- en: The desired number of taps in the filter. The number of taps is the number of
    terms in the filter, or the filter order plus one.
  prefs: []
  type: TYPE_NORMAL
- en: '**bands**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A monotonic sequence containing the band edges. All elements must be non-negative
    and less than half the sampling frequency as given by *fs*.
  prefs: []
  type: TYPE_NORMAL
- en: '**desired**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: A sequence half the size of bands containing the desired gain in each of the
    specified bands.
  prefs: []
  type: TYPE_NORMAL
- en: '**weight**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A relative weighting to give to each band region. The length of *weight* has
    to be half the length of *bands*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hz**scalar, optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency in Hz. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.0.0: [`remez`](#scipy.signal.remez "scipy.signal.remez")
    keyword argument *Hz* is deprecated in favour of *fs* and will be removed in SciPy
    1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**type**{‘bandpass’, ‘differentiator’, ‘hilbert’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type of filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘bandpass’ : flat response in bands. This is the default.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘differentiator’ : frequency proportional response in bands.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ‘hilbert’filter with odd symmetry, that is, type III
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (for even order) or type IV (for odd order) linear phase filters.
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**maxiter**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of iterations of the algorithm. Default is 25.
  prefs: []
  type: TYPE_NORMAL
- en: '**grid_density**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Grid density. The dense grid used in [`remez`](#scipy.signal.remez "scipy.signal.remez")
    is of size `(numtaps + 1) * grid_density`. Default is 16.
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the signal. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: A rank-1 array containing the coefficients of the optimal (in a minimax sense)
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`firls`](scipy.signal.firls.html#scipy.signal.firls "scipy.signal.firls")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin`](scipy.signal.firwin.html#scipy.signal.firwin "scipy.signal.firwin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin2`](scipy.signal.firwin2.html#scipy.signal.firwin2 "scipy.signal.firwin2")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum_phase`](scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: J. H. McClellan and T. W. Parks, “A unified approach to the design of optimum
    FIR linear phase digital filters”, IEEE Trans. Circuit Theory, vol. CT-20, pp.
    697-701, 1973.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: J. H. McClellan, T. W. Parks and L. R. Rabiner, “A Computer Program for Designing
    Optimum FIR Linear Phase Digital Filters”, IEEE Trans. Audio Electroacoust., vol.
    AU-21, pp. 506-525, 1973.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: In these examples, [`remez`](#scipy.signal.remez "scipy.signal.remez") is used
    to design low-pass, high-pass, band-pass and band-stop filters. The parameters
    that define each filter are the filter order, the band boundaries, the transition
    widths of the boundaries, the desired gains in each band, and the sampling frequency.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use a sample frequency of 22050 Hz in all the examples. In each example,
    the desired gain in each band is either 0 (for a stop band) or 1 (for a pass band).
  prefs: []
  type: TYPE_NORMAL
- en: '[`freqz`](scipy.signal.freqz.html#scipy.signal.freqz "scipy.signal.freqz")
    is used to compute the frequency response of each filter, and the utility function
    `plot_response` defined below is used to plot the response.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first example is a low-pass filter, with cutoff frequency 8 kHz. The filter
    length is 325, and the transition width from pass to stop is 100 Hz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-remez-1_00_00.png](../Images/3370d4778c9b86f917753e440f58bdf0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This example shows a high-pass filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-remez-1_01_00.png](../Images/f9a8100275b93d0318cc53541d1f702b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This example shows a band-pass filter with a pass-band from 2 kHz to 5 kHz.
    The transition width is 260 Hz and the length of the filter is 63, which is smaller
    than in the other examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-remez-1_02_00.png](../Images/fe227d96640ac3d4d64728155e73cae4.png)'
  prefs: []
  type: TYPE_IMG
- en: The low order leads to higher ripple and less steep transitions.
  prefs: []
  type: TYPE_NORMAL
- en: The next example shows a band-stop filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-remez-1_03_00.png](../Images/d039d75847c44d05a92d90d36e5a21e6.png)'
  prefs: []
  type: TYPE_IMG
