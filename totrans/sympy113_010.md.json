["```py\n>>> from sympy import *\n>>> x, y, z = symbols('x y z')\n>>> init_printing(use_unicode=True) \n```", "```py\n>>> simplify(sin(x)**2 + cos(x)**2)\n1\n>>> simplify((x**3 + x**2 - x - 1)/(x**2 + 2*x + 1))\nx - 1\n>>> simplify(gamma(x)/gamma(x - 2))\n(x - 2)⋅(x - 1) \n```", "```py\n>>> simplify(x**2 + 2*x + 1)\n 2\nx  + 2⋅x + 1 \n```", "```py\n>>> expand((x + 1)**2)\n 2\nx  + 2⋅x + 1\n>>> expand((x + 2)*(x - 3))\n 2\nx  - x - 6 \n```", "```py\n>>> expand((x + 1)*(x - 2) - (x - 1)*x)\n-2 \n```", "```py\n>>> factor(x**3 - x**2 + x - 1)\n ⎛ 2    ⎞\n(x - 1)⋅⎝x  + 1⎠\n>>> factor(x**2*z + 4*x*y*z + 4*y**2*z)\n 2\nz⋅(x + 2⋅y) \n```", "```py\n>>> factor_list(x**2*z + 4*x*y*z + 4*y**2*z)\n(1, [(z, 1), (x + 2⋅y, 2)]) \n```", "```py\n>>> expand((cos(x) + sin(x))**2)\n 2                           2\nsin (x) + 2⋅sin(x)⋅cos(x) + cos (x)\n>>> factor(cos(x)**2 + 2*cos(x)*sin(x) + sin(x)**2)\n 2\n(sin(x) + cos(x)) \n```", "```py\n>>> expr = x*y + x - 3 + 2*x**2 - z*x**2 + x**3\n>>> expr\n 3    2        2\nx  - x ⋅z + 2⋅x  + x⋅y + x - 3\n>>> collected_expr = collect(expr, x)\n>>> collected_expr\n 3    2\nx  + x ⋅(2 - z) + x⋅(y + 1) - 3 \n```", "```py\n>>> collected_expr.coeff(x, 2)\n2 - z \n```", "```py\n>>> cancel((x**2 + 2*x + 1)/(x**2 + x))\nx + 1\n─────\n x \n```", "```py\n>>> expr = 1/x + (3*x/2 - 2)/(x - 4)\n>>> expr\n3⋅x\n─── - 2\n 2        1\n─────── + ─\n x - 4    x\n>>> cancel(expr)\n 2\n3⋅x  - 2⋅x - 8\n──────────────\n 2\n 2⋅x  - 8⋅x \n```", "```py\n>>> expr = (x*y**2 - 2*x*y*z + x*z**2 + y**2 - 2*y*z + z**2)/(x**2 - 1)\n>>> expr\n 2                2    2            2\nx⋅y  - 2⋅x⋅y⋅z + x⋅z  + y  - 2⋅y⋅z + z\n───────────────────────────────────────\n 2\n x  - 1\n>>> cancel(expr)\n 2            2\ny  - 2⋅y⋅z + z\n───────────────\n x - 1 \n```", "```py\n>>> factor(expr)\n 2\n(y - z)\n────────\n x - 1 \n```", "```py\n>>> expr = (4*x**3 + 21*x**2 + 10*x + 12)/(x**4 + 5*x**3 + 5*x**2 + 4*x)\n>>> expr\n 3       2\n4⋅x  + 21⋅x  + 10⋅x + 12\n────────────────────────\n 4      3      2\n x  + 5⋅x  + 5⋅x  + 4⋅x\n>>> apart(expr)\n 2⋅x - 1       1     3\n────────── - ───── + ─\n 2           x + 4   x\nx  + x + 1 \n```", "```py\n>>> acos(x)\nacos(x)\n>>> cos(acos(x))\nx\n>>> asin(1)\nπ\n─\n2 \n```", "```py\n>>> trigsimp(sin(x)**2 + cos(x)**2)\n1\n>>> trigsimp(sin(x)**4 - 2*cos(x)**2*sin(x)**2 + cos(x)**4)\ncos(4⋅x)   1\n──────── + ─\n 2       2\n>>> trigsimp(sin(x)*tan(x)/sec(x))\n 2\nsin (x) \n```", "```py\n>>> trigsimp(cosh(x)**2 + sinh(x)**2)\ncosh(2⋅x)\n>>> trigsimp(sinh(x)/tanh(x))\ncosh(x) \n```", "```py\n>>> expand_trig(sin(x + y))\nsin(x)⋅cos(y) + sin(y)⋅cos(x)\n>>> expand_trig(tan(2*x))\n 2⋅tan(x)\n───────────\n 2\n1 - tan (x) \n```", "```py\n>>> trigsimp(sin(x)*cos(y) + sin(y)*cos(x))\nsin(x + y) \n```", "```py\n    >>> x, y = symbols('x y', positive=True)\n    >>> a, b = symbols('a b', real=True)\n    >>> z, t, c = symbols('z t c') \n    ```", "```py\n>>> sqrt(x) == x**Rational(1, 2)\nTrue \n```", "```py\n>>> powsimp(x**a*x**b)\n a + b\n x\n>>> powsimp(x**a*y**a)\n a\n(x⋅y) \n```", "```py\n>>> powsimp(t**c*z**c)\n c  c\nt ⋅z \n```", "```py\n>>> powsimp(t**c*z**c, force=True)\n c\n(t⋅z) \n```", "```py\n>>> (z*t)**2\n 2  2\n t ⋅z\n>>> sqrt(x*y)\n √x⋅√y \n```", "```py\n>>> powsimp(z**2*t**2)\n 2  2\n t ⋅z\n>>> powsimp(sqrt(x)*sqrt(y))\n √x⋅√y \n```", "```py\n>>> expand_power_exp(x**(a + b))\n a  b\nx ⋅x \n```", "```py\n>>> expand_power_base((x*y)**a)\n a  a\nx ⋅y \n```", "```py\n>>> expand_power_base((z*t)**c)\n c\n(t⋅z) \n```", "```py\n>>> expand_power_base((z*t)**c, force=True)\n c  c\n t ⋅z \n```", "```py\n>>> x**2*x**3\n 5\n x\n>>> expand_power_exp(x**5)\n 5\n x \n```", "```py\n>>> powdenest((x**a)**b)\n a⋅b\nx \n```", "```py\n>>> powdenest((z**a)**b)\n b\n⎛ a⎞\n⎝z ⎠ \n```", "```py\n>>> powdenest((z**a)**b, force=True)\n a⋅b\nz \n```", "```py\n>>> ln(x)\nlog(x) \n```", "```py\n>>> x, y = symbols('x y', positive=True)\n>>> n = symbols('n', real=True) \n```", "```py\n>>> expand_log(log(x*y))\nlog(x) + log(y)\n>>> expand_log(log(x/y))\nlog(x) - log(y)\n>>> expand_log(log(x**2))\n2⋅log(x)\n>>> expand_log(log(x**n))\nn⋅log(x)\n>>> expand_log(log(z*t))\nlog(t⋅z) \n```", "```py\n>>> expand_log(log(z**2))\n ⎛ 2⎞\nlog⎝z ⎠\n>>> expand_log(log(z**2), force=True)\n2⋅log(z) \n```", "```py\n>>> logcombine(log(x) + log(y))\nlog(x⋅y)\n>>> logcombine(n*log(x))\n ⎛ n⎞\nlog⎝x ⎠\n>>> logcombine(n*log(z))\nn⋅log(z) \n```", "```py\n>>> logcombine(n*log(z), force=True)\n ⎛ n⎞\nlog⎝z ⎠ \n```", "```py\n>>> x, y, z = symbols('x y z')\n>>> k, m, n = symbols('k m n') \n```", "```py\n>>> factorial(n)\nn! \n```", "```py\n>>> binomial(n, k)\n⎛n⎞\n⎜ ⎟\n⎝k⎠ \n```", "```py\n>>> gamma(z)\nΓ(z) \n```", "```py\n>>> hyper([1, 2], [3], z)\n ┌─  ⎛1, 2 │  ⎞\n ├─  ⎜     │ z⎟\n2╵ 1 ⎝ 3   │  ⎠ \n```", "```py\n>>> tan(x).rewrite(cos)\n ⎛    π⎞\ncos⎜x - ─⎟\n ⎝    2⎠\n──────────\n cos(x)\n>>> factorial(x).rewrite(gamma)\nΓ(x + 1) \n```", "```py\n>>> expand_func(gamma(x + 3))\nx⋅(x + 1)⋅(x + 2)⋅Γ(x) \n```", "```py\n>>> hyperexpand(hyper([1, 1], [2], z))\n-log(1 - z)\n────────────\n z \n```", "```py\n>>> expr = meijerg([[1],[1]], [[1],[]], -z)\n>>> expr\n╭─╮1, 1 ⎛1  1 │   ⎞\n│╶┐     ⎜     │ -z⎟\n╰─╯2, 1 ⎝1    │   ⎠\n>>> hyperexpand(expr)\n 1\n ─\n z\nℯ \n```", "```py\n>>> n, k = symbols('n k', integer = True)\n>>> combsimp(factorial(n)/factorial(n - 3))\nn⋅(n - 2)⋅(n - 1)\n>>> combsimp(binomial(n+1, k+1)/binomial(n, k))\nn + 1\n─────\nk + 1 \n```", "```py\n>>> gammasimp(gamma(x)*gamma(1 - x))\n π\n────────\nsin(π⋅x) \n```", "```py\n>>> def list_to_frac(l):\n...     expr = Integer(0)\n...     for i in reversed(l[1:]):\n...         expr += i\n...         expr = 1/expr\n...     return l[0] + expr\n>>> list_to_frac([x, y, z])\n 1\nx + ─────\n 1\n y + ─\n z \n```", "```py\n>>> list_to_frac([1, 2, 3, 4])\n43\n──\n30 \n```", "```py\n>>> syms = symbols('a0:5')\n>>> syms\n(a₀, a₁, a₂, a₃, a₄)\n>>> a0, a1, a2, a3, a4 = syms\n>>> frac = list_to_frac(syms)\n>>> frac\n 1\na₀ + ─────────────────\n 1\n a₁ + ────────────\n 1\n a₂ + ───────\n 1\n a₃ + ──\n a₄ \n```", "```py\n>>> frac = cancel(frac)\n>>> frac\na₀⋅a₁⋅a₂⋅a₃⋅a₄ + a₀⋅a₁⋅a₂ + a₀⋅a₁⋅a₄ + a₀⋅a₃⋅a₄ + a₀ + a₂⋅a₃⋅a₄ + a₂ + a₄\n─────────────────────────────────────────────────────────────────────────\n a₁⋅a₂⋅a₃⋅a₄ + a₁⋅a₂ + a₁⋅a₄ + a₃⋅a₄ + 1 \n```", "```py\n>>> l = []\n>>> frac = apart(frac, a0)\n>>> frac\n a₂⋅a₃⋅a₄ + a₂ + a₄\na₀ + ───────────────────────────────────────\n a₁⋅a₂⋅a₃⋅a₄ + a₁⋅a₂ + a₁⋅a₄ + a₃⋅a₄ + 1\n>>> l.append(a0)\n>>> frac = 1/(frac - a0)\n>>> frac\na₁⋅a₂⋅a₃⋅a₄ + a₁⋅a₂ + a₁⋅a₄ + a₃⋅a₄ + 1\n───────────────────────────────────────\n a₂⋅a₃⋅a₄ + a₂ + a₄ \n```", "```py\n>>> frac = apart(frac, a1)\n>>> frac\n a₃⋅a₄ + 1\na₁ + ──────────────────\n a₂⋅a₃⋅a₄ + a₂ + a₄\n>>> l.append(a1)\n>>> frac = 1/(frac - a1)\n>>> frac = apart(frac, a2)\n>>> frac\n a₄\na₂ + ─────────\n a₃⋅a₄ + 1\n>>> l.append(a2)\n>>> frac = 1/(frac - a2)\n>>> frac = apart(frac, a3)\n>>> frac\n 1\na₃ + ──\n a₄\n>>> l.append(a3)\n>>> frac = 1/(frac - a3)\n>>> frac = apart(frac, a4)\n>>> frac\na₄\n>>> l.append(a4)\n>>> list_to_frac(l)\n 1\na₀ + ─────────────────\n 1\n a₁ + ────────────\n 1\n a₂ + ───────\n 1\n a₃ + ──\n a₄ \n```", "```py\n>>> import random\n>>> l = list(symbols('a0:5'))\n>>> random.shuffle(l)\n>>> orig_frac = frac = cancel(list_to_frac(l))\n>>> del l \n```"]