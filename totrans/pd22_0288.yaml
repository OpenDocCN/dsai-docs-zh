- en: pandas.DataFrame.cumprod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.cumprod.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.cumprod.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return cumulative product over a DataFrame or Series axis.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a DataFrame or Series of the same size containing the cumulative product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**{0 or ‘index’, 1 or ‘columns’}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: The index or the name of the axis. 0 is equivalent to None or ‘index’. For Series
    this parameter is unused and defaults to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**skipna**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude NA/null values. If an entire row/column is NA, the result will be NA.
  prefs: []
  type: TYPE_NORMAL
- en: '***args, **kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: Additional keywords have no effect but might be accepted for compatibility with
    NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series or DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Return cumulative product of Series or DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`core.window.expanding.Expanding.prod`'
  prefs: []
  type: TYPE_NORMAL
- en: Similar functionality but ignores `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.prod`](pandas.DataFrame.prod.html#pandas.DataFrame.prod "pandas.DataFrame.prod")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the product over DataFrame axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.cummax`](pandas.DataFrame.cummax.html#pandas.DataFrame.cummax "pandas.DataFrame.cummax")'
  prefs: []
  type: TYPE_NORMAL
- en: Return cumulative maximum over DataFrame axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.cummin`](pandas.DataFrame.cummin.html#pandas.DataFrame.cummin "pandas.DataFrame.cummin")'
  prefs: []
  type: TYPE_NORMAL
- en: Return cumulative minimum over DataFrame axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.cumsum`](pandas.DataFrame.cumsum.html#pandas.DataFrame.cumsum "pandas.DataFrame.cumsum")'
  prefs: []
  type: TYPE_NORMAL
- en: Return cumulative sum over DataFrame axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.cumprod`](#pandas.DataFrame.cumprod "pandas.DataFrame.cumprod")'
  prefs: []
  type: TYPE_NORMAL
- en: Return cumulative product over DataFrame axis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Series**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, NA values are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To include NA values in the operation, use `skipna=False`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**DataFrame**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By default, iterates over rows and finds the product in each column. This is
    equivalent to `axis=None` or `axis='index'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To iterate over columns and find the product in each row, use `axis=1`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
