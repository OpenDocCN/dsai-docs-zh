["```py\n>>> from sympy import *\n>>> x, y, z = symbols('x,y,z')\n>>> init_printing(use_unicode=False) \n```", "```py\n>>> e = (x + y)*(y - 2*z)\n>>> e.as_poly()\nPoly(x*y - 2*x*z + y**2 - 2*y*z, x, y, z, domain='ZZ') \n```", "```py\n>>> e = (3*x/2 + y)*(z - 1)\n>>> e.as_poly()\nPoly(3/2*x*z - 3/2*x + y*z - y, x, y, z, domain='QQ') \n```", "```py\n>>> e = (x + 2*pi)*y\n>>> e.as_poly()\nPoly(x*y + 2*y*pi, x, y, pi, domain='ZZ')\n>>> e.as_poly(x, y)\nPoly(x*y + 2*pi*y, x, y, domain='ZZ[pi]') \n```", "```py\n>>> e = (x + 2*pi)*y\n>>> e.as_poly(domain=ZZ[pi])\nPoly(x*y + 2*pi*y, x, y, domain='ZZ[pi]') \n```", "```py\n>>> e = x*sin(y) - y\n>>> e.as_poly()\nPoly(x*(sin(y)) - y, x, y, sin(y), domain='ZZ') \n```", "```py\n>>> e = x - 1/x\n>>> e.as_poly()\nPoly(x - (1/x), x, 1/x, domain='ZZ') \n```", "```py\n>>> e = x + sqrt(2)\n>>> e.as_poly()\nPoly(x + (sqrt(2)), x, sqrt(2), domain='ZZ')\n>>> e.as_poly(extension=True)\nPoly(x + sqrt(2), x, domain='QQ<sqrt(2)>') \n```", "```py\n>>> divmod(Integer(53), Integer(7))\n(7, 4) \n```", "```py\n>>> f = 5*x**2 + 10*x + 3\n>>> g = 2*x + 2\n\n>>> q, r = div(f, g, domain='QQ')\n>>> q\n5*x   5\n--- + -\n 2    2\n>>> r\n-2\n>>> (q*g + r).expand()\n 2\n5*x  + 10*x + 3 \n```", "```py\n>>> igcd(2, 4)\n2\n>>> igcd(5, 10, 15)\n5 \n```", "```py\n>>> f = 4*x**2 - 1\n>>> g = 8*x**3 + 1\n>>> gcd(f, g, domain=QQ)\nx + 1/2 \n```", "```py\n>>> f = 6*x**2 - 3*x + 9\n>>> c, p = f.as_content_primitive()\n>>> c, p\n 2\n(3, 2*x  - x + 3)\n>>> f = x**2/3 - x/2 + 1\n>>> c, p = f.as_content_primitive()\n>>> c, p\n 2\n(1/6, 2*x  - 3*x + 6) \n```", "```py\n>>> f = 4*x**2 - 1\n>>> g = 8*x**3 + 1\n>>> gcd(f, g)\n2*x + 1\n>>> gcd(6*f, 3*g)\n6*x + 3 \n```", "```py\n>>> f = 5*x**2 + 10*x + 3\n>>> g = 2*x + 2\n\n>>> q, r = div(f, g, domain='QQ')\n>>> q\n5*x   5\n--- + -\n 2    2\n>>> r\n-2\n>>> (q*g + r).expand()\n 2\n5*x  + 10*x + 3 \n```", "```py\n>>> q, r = div(f, g, domain='ZZ')\n>>> q\n0\n>>> r\n 2\n5*x  + 10*x + 3 \n```", "```py\n>>> g = 5*x + 1\n\n>>> q, r = div(f, g, domain='ZZ')\n>>> q\nx\n>>> r\n9*x + 3\n>>> (q*g + r).expand()\n 2\n5*x  + 10*x + 3 \n```", "```py\n>>> f = x*y + y*z\n>>> g = 3*x + 3*z\n\n>>> q, r = div(f, g, domain='QQ')\n>>> q\ny\n-\n3\n>>> r\n0 \n```", "```py\n>>> a, b, c = symbols('a,b,c')\n>>> f = a*x**2 + b*x + c\n>>> g = 3*x + 2\n>>> q, r = div(f, g, domain='QQ')\n>>> q\na*x   2*a   b\n--- - --- + -\n 3     9    3\n\n>>> r\n4*a   2*b\n--- - --- + c\n 9     3 \n```", "```py\n>>> f = (12*x + 12)*x\n>>> g = 16*x**2\n>>> gcd(f, g)\n4*x \n```", "```py\n>>> f = 3*x**2/2\n>>> g = 9*x/4\n>>> gcd(f, g)\nx \n```", "```py\n>>> f = x*y/2 + y**2\n>>> g = 3*x + 6*y\n\n>>> gcd(f, g)\nx + 2*y \n```", "```py\n>>> f = x*y**2 + x**2*y\n>>> g = x**2*y**2\n>>> gcd(f, g)\nx*y\n>>> lcm(f, g)\n 3  2    2  3\nx *y  + x *y\n>>> (f*g).expand()\n 4  3    3  4\nx *y  + x *y\n>>> (gcd(f, g, x, y)*lcm(f, g, x, y)).expand()\n 4  3    3  4\nx *y  + x *y \n```", "```py\n>>> f = 2*x**2 + 5*x**3 + 4*x**4 + x**5\n\n>>> sqf_list(f)\n 2\n(1, [(x + 2, 1), (x  + x, 2)])\n\n>>> sqf(f)\n 2\n / 2    \\\n(x + 2)*\\x  + x/ \n```", "```py\n>>> factor(x**4/2 + 5*x**3/12 - x**2/3)\n 2\nx *(2*x - 1)*(3*x + 4)\n----------------------\n 12\n\n>>> factor(x**2 + 4*x*y + 4*y**2)\n 2\n(x + 2*y) \n```", "```py\n>>> groebner([x**2 + 1, y**4*x + x**3], x, y, order='lex')\n /[ 2       4    ]                            \\\nGroebnerBasis\\[x  + 1, y  - 1], x, y, domain=ZZ, order=lex/\n\n>>> groebner([x**2 + 1, y**4*x + x**3, x*y*z**3], x, y, z, order='grevlex')\n /[ 4       3   2    ]                                   \\\nGroebnerBasis\\[y  - 1, z , x  + 1], x, y, z, domain=ZZ, order=grevlex/ \n```", "```py\n>>> from sympy import roots, solve_poly_system\n\n>>> solve(x**3 + 2*x + 3, x)\n ____          ____\n 1   \\/ 11 *I  1   \\/ 11 *I\n[-1, - - --------, - + --------]\n 2      2      2      2\n\n>>> p = Symbol('p')\n>>> q = Symbol('q')\n\n>>> solve(x**2 + p*x + q, x)\n __________           __________\n /  2                 /  2\n p   \\/  p  - 4*q     p   \\/  p  - 4*q\n[- - - -------------, - - + -------------]\n 2         2          2         2\n\n>>> solve_poly_system([y - x, x - 5], x, y)\n[(5, 5)]\n\n>>> solve_poly_system([y**2 - x**3 + 1, y*x], x, y)\n ___                 ___\n 1   \\/ 3 *I         1   \\/ 3 *I\n[(0, -I), (0, I), (1, 0), (- - - -------, 0), (- - + -------, 0)]\n 2      2            2      2 \n```"]