- en: Options and settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/options.html](https://pandas.pydata.org/docs/user_guide/options.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Overview'
  prefs: []
  type: TYPE_NORMAL
- en: pandas has an options API configure and customize global behavior related to
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    display, data behavior and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options have a full “dotted-style”, case-insensitive name (e.g. `display.max_rows`).
    You can get/set options directly as attributes of the top-level `options` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The API is composed of 5 relevant functions, available directly from the `pandas`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_option()`](../reference/api/pandas.get_option.html#pandas.get_option
    "pandas.get_option") / [`set_option()`](../reference/api/pandas.set_option.html#pandas.set_option
    "pandas.set_option") - get/set the value of a single option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`reset_option()`](../reference/api/pandas.reset_option.html#pandas.reset_option
    "pandas.reset_option") - reset one or more options to their default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option") - print the descriptions of one or more options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`option_context()`](../reference/api/pandas.option_context.html#pandas.option_context
    "pandas.option_context") - execute a codeblock with a set of options that revert
    to prior settings after execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Developers can check out [pandas/core/config_init.py](https://github.com/pandas-dev/pandas/blob/main/pandas/core/config_init.py)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the functions above accept a regexp pattern (`re.search` style) as an
    argument, to match an unambiguous substring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will **not work** because it matches multiple option names, e.g.
    `display.max_colwidth`, `display.max_rows`, `display.max_columns`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using this form of shorthand may cause your code to break if new options with
    similar names are added in future versions.
  prefs: []
  type: TYPE_NORMAL
- en: '## Available options'
  prefs: []
  type: TYPE_NORMAL
- en: You can get a list of available options and their descriptions with [`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option"). When called with no argument [`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option") will print out the descriptions for all available options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Getting and setting options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described above, [`get_option()`](../reference/api/pandas.get_option.html#pandas.get_option
    "pandas.get_option") and [`set_option()`](../reference/api/pandas.set_option.html#pandas.set_option
    "pandas.set_option") are available from the pandas namespace. To change an option,
    call `set_option('option regex', new_value)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The option `'mode.sim_interactive'` is mostly used for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: You can use [`reset_option()`](../reference/api/pandas.reset_option.html#pandas.reset_option
    "pandas.reset_option") to revert to a setting’s default value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s also possible to reset multiple options at once (using a regex):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[`option_context()`](../reference/api/pandas.option_context.html#pandas.option_context
    "pandas.option_context") context manager has been exposed through the top-level
    API, allowing you to execute code with given option values. Option values are
    restored automatically when you exit the `with` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting startup options in Python/IPython environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using startup scripts for the Python/IPython environment to import pandas and
    set options makes working with pandas more efficient. To do this, create a `.py`
    or `.ipy` script in the startup directory of the desired profile. An example where
    the startup folder is in a default IPython profile can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'More information can be found in the [IPython documentation](https://ipython.org/ipython-doc/stable/interactive/tutorial.html#startup-files).
    An example startup script for pandas is displayed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '## Frequently used options'
  prefs: []
  type: TYPE_NORMAL
- en: The following is a demonstrates the more frequently used display options.
  prefs: []
  type: TYPE_NORMAL
- en: '`display.max_rows` and `display.max_columns` sets the maximum number of rows
    and columns displayed when a frame is pretty-printed. Truncated lines are replaced
    by an ellipsis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once the `display.max_rows` is exceeded, the `display.min_rows` options determines
    how many rows are shown in the truncated repr.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`display.expand_frame_repr` allows for the representation of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to stretch across pages, wrapped over the all the columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`display.large_repr` displays a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that exceed `max_columns` or `max_rows` as a truncated frame
    or summary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_colwidth` sets the maximum width of columns. Cells of this length
    or longer will be truncated with an ellipsis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_info_columns` sets a threshold for the number of columns displayed
    when calling [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_info_rows`: [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") will usually show null-counts for each column. For a
    large [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    this can be quite slow. `max_info_rows` and `max_info_cols` limit this null check
    to the specified rows and columns respectively. The [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") keyword argument `show_counts=True` will override this.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`display.precision` sets the output display precision in terms of decimal places.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`display.chop_threshold` sets the rounding threshold to zero when displaying
    a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    This setting does not change the precision at which the number is stored.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`display.colheader_justify` controls the justification of the headers. The
    options are `''right''`, and `''left''`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]  ## Number formatting'
  prefs: []
  type: TYPE_NORMAL
- en: pandas also allows you to set how numbers are displayed in the console. This
    option is not set through the `set_options` API.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `set_eng_float_format` function to alter the floating-point formatting
    of pandas objects to produce a particular format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Use [`round()`](../reference/api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round") to specifically control rounding of an individual [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")  ## Unicode formatting'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Enabling this option will affect the performance for printing of DataFrame and
    Series (about 2 times slower). Use only when it is actually required.
  prefs: []
  type: TYPE_NORMAL
- en: Some East Asian countries use Unicode characters whose width corresponds to
    two Latin characters. If a DataFrame or Series contains these characters, the
    default output mode may not align them properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Enabling `display.unicode.east_asian_width` allows pandas to check each character’s
    “East Asian Width” property. These characters can be aligned properly by setting
    this option to `True`. However, this will result in longer render times than the
    standard `len` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In addition, Unicode characters whose width is “ambiguous” can either be 1 or
    2 characters wide depending on the terminal setting or encoding. The option `display.unicode.ambiguous_as_wide`
    can be used to handle the ambiguity.
  prefs: []
  type: TYPE_NORMAL
- en: By default, an “ambiguous” character’s width, such as “¡” (inverted exclamation)
    in the example below, is taken to be 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Enabling `display.unicode.ambiguous_as_wide` makes pandas interpret these characters’
    widths to be 2. (Note that this option will only be effective when `display.unicode.east_asian_width`
    is enabled.)
  prefs: []
  type: TYPE_NORMAL
- en: 'However, setting this option incorrectly for your terminal will cause these
    characters to be aligned incorrectly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]  ## Table schema display'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    and [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    will publish a Table Schema representation by default. This can be enabled globally
    with the `display.html.table_schema` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Only `'display.max_rows'` are serialized and published.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas has an options API configure and customize global behavior related to
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    display, data behavior and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options have a full “dotted-style”, case-insensitive name (e.g. `display.max_rows`).
    You can get/set options directly as attributes of the top-level `options` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The API is composed of 5 relevant functions, available directly from the `pandas`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`get_option()`](../reference/api/pandas.get_option.html#pandas.get_option
    "pandas.get_option") / [`set_option()`](../reference/api/pandas.set_option.html#pandas.set_option
    "pandas.set_option") - get/set the value of a single option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`reset_option()`](../reference/api/pandas.reset_option.html#pandas.reset_option
    "pandas.reset_option") - reset one or more options to their default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option") - print the descriptions of one or more options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`option_context()`](../reference/api/pandas.option_context.html#pandas.option_context
    "pandas.option_context") - execute a codeblock with a set of options that revert
    to prior settings after execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Developers can check out [pandas/core/config_init.py](https://github.com/pandas-dev/pandas/blob/main/pandas/core/config_init.py)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the functions above accept a regexp pattern (`re.search` style) as an
    argument, to match an unambiguous substring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will **not work** because it matches multiple option names, e.g.
    `display.max_colwidth`, `display.max_rows`, `display.max_columns`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using this form of shorthand may cause your code to break if new options with
    similar names are added in future versions.
  prefs: []
  type: TYPE_NORMAL
- en: '## Available options'
  prefs: []
  type: TYPE_NORMAL
- en: You can get a list of available options and their descriptions with [`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option"). When called with no argument [`describe_option()`](../reference/api/pandas.describe_option.html#pandas.describe_option
    "pandas.describe_option") will print out the descriptions for all available options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Getting and setting options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described above, [`get_option()`](../reference/api/pandas.get_option.html#pandas.get_option
    "pandas.get_option") and [`set_option()`](../reference/api/pandas.set_option.html#pandas.set_option
    "pandas.set_option") are available from the pandas namespace. To change an option,
    call `set_option('option regex', new_value)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The option `'mode.sim_interactive'` is mostly used for debugging purposes.
  prefs: []
  type: TYPE_NORMAL
- en: You can use [`reset_option()`](../reference/api/pandas.reset_option.html#pandas.reset_option
    "pandas.reset_option") to revert to a setting’s default value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s also possible to reset multiple options at once (using a regex):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[`option_context()`](../reference/api/pandas.option_context.html#pandas.option_context
    "pandas.option_context") context manager has been exposed through the top-level
    API, allowing you to execute code with given option values. Option values are
    restored automatically when you exit the `with` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Setting startup options in Python/IPython environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using startup scripts for the Python/IPython environment to import pandas and
    set options makes working with pandas more efficient. To do this, create a `.py`
    or `.ipy` script in the startup directory of the desired profile. An example where
    the startup folder is in a default IPython profile can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'More information can be found in the [IPython documentation](https://ipython.org/ipython-doc/stable/interactive/tutorial.html#startup-files).
    An example startup script for pandas is displayed below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '## Frequently used options'
  prefs: []
  type: TYPE_NORMAL
- en: The following is a demonstrates the more frequently used display options.
  prefs: []
  type: TYPE_NORMAL
- en: '`display.max_rows` and `display.max_columns` sets the maximum number of rows
    and columns displayed when a frame is pretty-printed. Truncated lines are replaced
    by an ellipsis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Once the `display.max_rows` is exceeded, the `display.min_rows` options determines
    how many rows are shown in the truncated repr.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`display.expand_frame_repr` allows for the representation of a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to stretch across pages, wrapped over the all the columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`display.large_repr` displays a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") that exceed `max_columns` or `max_rows` as a truncated frame
    or summary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_colwidth` sets the maximum width of columns. Cells of this length
    or longer will be truncated with an ellipsis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_info_columns` sets a threshold for the number of columns displayed
    when calling [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`display.max_info_rows`: [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") will usually show null-counts for each column. For a
    large [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    this can be quite slow. `max_info_rows` and `max_info_cols` limit this null check
    to the specified rows and columns respectively. The [`info()`](../reference/api/pandas.DataFrame.info.html#pandas.DataFrame.info
    "pandas.DataFrame.info") keyword argument `show_counts=True` will override this.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '`display.precision` sets the output display precision in terms of decimal places.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`display.chop_threshold` sets the rounding threshold to zero when displaying
    a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
    This setting does not change the precision at which the number is stored.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '`display.colheader_justify` controls the justification of the headers. The
    options are `''right''`, and `''left''`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '## Number formatting'
  prefs: []
  type: TYPE_NORMAL
- en: pandas also allows you to set how numbers are displayed in the console. This
    option is not set through the `set_options` API.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `set_eng_float_format` function to alter the floating-point formatting
    of pandas objects to produce a particular format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Use [`round()`](../reference/api/pandas.DataFrame.round.html#pandas.DataFrame.round
    "pandas.DataFrame.round") to specifically control rounding of an individual [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  prefs: []
  type: TYPE_NORMAL
- en: '## Unicode formatting'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Enabling this option will affect the performance for printing of DataFrame and
    Series (about 2 times slower). Use only when it is actually required.
  prefs: []
  type: TYPE_NORMAL
- en: Some East Asian countries use Unicode characters whose width corresponds to
    two Latin characters. If a DataFrame or Series contains these characters, the
    default output mode may not align them properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Enabling `display.unicode.east_asian_width` allows pandas to check each character’s
    “East Asian Width” property. These characters can be aligned properly by setting
    this option to `True`. However, this will result in longer render times than the
    standard `len` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In addition, Unicode characters whose width is “ambiguous” can either be 1 or
    2 characters wide depending on the terminal setting or encoding. The option `display.unicode.ambiguous_as_wide`
    can be used to handle the ambiguity.
  prefs: []
  type: TYPE_NORMAL
- en: By default, an “ambiguous” character’s width, such as “¡” (inverted exclamation)
    in the example below, is taken to be 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Enabling `display.unicode.ambiguous_as_wide` makes pandas interpret these characters’
    widths to be 2. (Note that this option will only be effective when `display.unicode.east_asian_width`
    is enabled.)
  prefs: []
  type: TYPE_NORMAL
- en: 'However, setting this option incorrectly for your terminal will cause these
    characters to be aligned incorrectly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '## Table schema display'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    and [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    will publish a Table Schema representation by default. This can be enabled globally
    with the `display.html.table_schema` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Only `'display.max_rows'` are serialized and published.
  prefs: []
  type: TYPE_NORMAL
