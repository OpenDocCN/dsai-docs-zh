- en: Set routines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.set.html](https://numpy.org/doc/1.26/reference/routines.set.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '| [`lib.arraysetops`](generated/numpy.lib.arraysetops.html#module-numpy.lib.arraysetops
    "numpy.lib.arraysetops") | Set operations for arrays based on sorting. |'
  prefs: []
  type: TYPE_TB
- en: Making proper sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: Boolean operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | Test whether each element of a 1-D array is also present in a second array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | Find the intersection of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | Calculates `element in test_elements`, broadcasting over *element* only. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | Find the set difference of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | Find the set exclusive-or of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | Find the union of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: Making proper sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`unique`](generated/numpy.unique.html#numpy.unique "numpy.unique")(ar[, return_index, return_inverse, ...])
    | Find the unique elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: Boolean operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`in1d`](generated/numpy.in1d.html#numpy.in1d "numpy.in1d")(ar1, ar2[, assume_unique, invert, kind])
    | Test whether each element of a 1-D array is also present in a second array.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`intersect1d`](generated/numpy.intersect1d.html#numpy.intersect1d "numpy.intersect1d")(ar1, ar2[, assume_unique, ...])
    | Find the intersection of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isin`](generated/numpy.isin.html#numpy.isin "numpy.isin")(element, test_elements[, ...])
    | Calculates `element in test_elements`, broadcasting over *element* only. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdiff1d`](generated/numpy.setdiff1d.html#numpy.setdiff1d "numpy.setdiff1d")(ar1, ar2[, assume_unique])
    | Find the set difference of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setxor1d`](generated/numpy.setxor1d.html#numpy.setxor1d "numpy.setxor1d")(ar1, ar2[, assume_unique])
    | Find the set exclusive-or of two arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| [`union1d`](generated/numpy.union1d.html#numpy.union1d "numpy.union1d")(ar1, ar2)
    | Find the union of two arrays. |'
  prefs: []
  type: TYPE_TB
