- en: Deprecation Policy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弃用政策
- en: Original text：[https://docs.sympy.org/latest/contributing/deprecations.html](https://docs.sympy.org/latest/contributing/deprecations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/contributing/deprecations.html](https://docs.sympy.org/latest/contributing/deprecations.html)
- en: This page outlines SymPy’s policy on doing deprecations, and describes the steps
    developers should take to properly deprecate code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面概述了SymPy在执行弃用时的政策，并描述了开发人员应采取的适当步骤。
- en: A list of all currently active deprecations in SymPy can be found at [List of
    active deprecations](../explanation/active-deprecations.html#active-deprecations).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy中所有当前活动弃用的列表可以在[当前活动弃用列表](../explanation/active-deprecations.html#active-deprecations)中找到。
- en: What is a deprecation?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是弃用？
- en: A deprecation is a way to make backwards incompatible changes in a way that
    allows users to update their code. Deprecated code continues to work as it used
    to, but whenever someone uses it, it prints a warning to the screen indicating
    that it will be removed in a future version of SymPy, and indicating what the
    user should be using instead.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用是以允许用户更新其代码的方式进行不向后兼容的更改。已弃用的代码仍然像以前一样工作，但每当有人使用它时，屏幕上会打印一条警告，指示将来版本中将删除SymPy的内容，并指示用户应使用的替代方案。
- en: This allows users a chance to update their code without it completely breaking.
    It also gives SymPy an opportunity to give users an informative message on how
    to update their code, rather than making their code simply error or start giving
    wrong answers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得用户有机会更新他们的代码而不会完全中断。这还使得SymPy有机会向用户提供关于如何更新其代码的信息性消息，而不是使他们的代码简单地报错或开始提供错误答案。
- en: Try to avoid backwards incompatible changes in the first place
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先尽量避免不向后兼容的更改
- en: Backwards incompatible API changes should not be made lightly. Any backwards
    compatibility break means that users will need to fix their code. Whenever you
    want to make a breaking change, you should consider whether this is worth the
    pain for users. Users who have to update their code to match new APIs with every
    SymPy release will become frustrated with the library, and may go seek a more
    stable alternative. Consider whether the behavior you want can be done in a way
    that is compatible with existing APIs. New APIs do not necessarily need to completely
    supplant old ones. It is sometimes possible for old APIs to exist alongside newer,
    better designed ones without removing them. For example, the newer [solveset](../modules/solvers/solveset.html#solveset)
    API was designed to be a superior replacement for the older [solve](../modules/solvers/solvers.html#solvers-docs)
    API. But the older `solve()` function remains intact and is still supported.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不轻易进行不向后兼容的API更改。任何向后兼容性断裂都意味着用户需要修复他们的代码。每当你想进行破坏性更改时，都应考虑这是否值得用户付出这样的痛苦。每次SymPy发布新版本时，用户都必须更新他们的代码以匹配新的API，这会让他们对该库感到沮丧，并可能寻找更稳定的替代方案。请考虑您想要的行为是否可以以与现有API兼容的方式完成。新的API并不一定需要完全取代旧的API。有时旧的API可以与更新、设计更好的API并存而不被移除。例如，更新后的[solveset](../modules/solvers/solveset.html#solveset)
    API旨在作为旧的[solve](../modules/solvers/solvers.html#solvers-docs) API的优秀替代品，但旧的`solve()`函数仍然完整且仍然受支持。
- en: It is important to try to be cognizant of API design whenever adding new functionality.
    Try to consider what a function may do in the future, and design the API in a
    way that it can do so without having to make a breaking change. For example, if
    you add a property to an object `A.attr`, it is impossible to later convert that
    property into a method `A.attr()` so that it can take arguments, except by doing
    so in a backwards incompatible way. If you are unsure about your API design for
    a new functionality, one option is to mark the new functionality as explicitly
    private or as experimental.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加新功能时，尝试在意API设计是很重要的。试着考虑一个函数未来可能做什么，并设计API以便它可以在不进行破坏性更改的情况下实现。例如，如果您向对象`A.attr`添加属性，那么以后将无法将该属性转换为方法`A.attr()`以便它可以接受参数，除非以不向后兼容的方式进行。如果您对新功能的API设计不确定，一种选择是将新功能标记为显式私有或实验性。
- en: 'With that being said, it may be decided that the API of SymPy must change in
    some incompatible way. Some reasons APIs are changed can include:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，可能决定必须以某种不兼容的方式更改SymPy的API。更改API的原因可能包括：
- en: The existing API is confusing.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的API令人困惑。
- en: There is unnecessary redundancy in the API.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API中存在不必要的冗余。
- en: The existing API limits what is possible.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的API限制了可能性。
- en: 'Because one of the core use-cases of SymPy is to be usable as a library, we
    take API breakage very seriously. Whenever an API breakage is necessary, the following
    steps should be taken:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SymPy的核心用例之一是作为库可用，我们非常严肃地对待API的破坏性变更。每当需要API破坏性变更时，应采取以下步骤：
- en: Discuss the API change with the community. Be sure that the improved API is
    indeed better, and worth a breakage. It is important to get API right so that
    we will not need to break the API again to “fix” it a second time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与社区讨论API更改。确保改进的API确实更好，并且值得破坏。正确地设置API非常重要，这样我们就不需要再次破坏API来“修复”它。
- en: If it is possible, deprecate the old API. The technical steps for doing this
    are described [below](#deprecation-how-to).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能的话，废弃旧的API。如何进行技术步骤的描述见[下文](#deprecation-how-to)。
- en: Document the change so that users know how to update their code. The documentation
    that should added is described [below](#deprecation-documentation).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录更改，以便用户知道如何更新他们的代码。所需添加的文档描述见[下文](#deprecation-documentation)。
- en: When does a change require deprecation?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时需要废弃一个改变？
- en: 'When considering whether a change requires a deprecation, two things must be
    considered:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑一个改变是否需要废弃时，必须考虑两件事：
- en: Is the change backwards incompatible?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改是否向后不兼容？
- en: Is the behavior changing public API?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为是否在改变公共API？
- en: A change is backwards incompatible if user code making use of it would stop
    working after the change.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户代码在更改后无法正常工作，则该更改是向后不兼容的。
- en: What counts as “public API” needs to be considered on a case-by-case basis.
    The exact rules for what does and doesn’t constitute public API for SymPy are
    still not yet fully codified. Cleaning up the distinction between public and private
    APIs, as well as the categorization in the reference documentation is currently
    an [open issue for SymPy](https://github.com/sympy/sympy/issues/23037).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 什么算是“公共API”需要具体情况具体分析。关于SymPy中什么构成和不构成公共API的确切规则尚未完全编码。清理公共和私有API之间的区别，以及参考文档中的分类，目前仍然是SymPy的一个[开放问题](https://github.com/sympy/sympy/issues/23037)。
- en: 'Here are some thing that constitute public API. *Note: these are just general
    guidelines. This list is not exhaustive, and there are always exceptions to the
    rules.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有些东西构成了公共API。*注意：这些只是一般指导方针。这个列表并非详尽无遗，总有例外情况。*
- en: Public API
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 公共API
- en: Function names.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数名。
- en: Keyword argument names.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数名称。
- en: Keyword argument default values.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数默认值。
- en: Positional argument order.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置参数顺序。
- en: Submodule names.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子模块名称。
- en: The mathematical conventions used to define a function.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义函数所使用的数学约定。
- en: And here are some things that generally aren’t public API, and therefore don’t
    require deprecations to change (again, this list is only a general set of guidelines).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些通常不是公共API的东西，因此不需要废弃以进行更改（再次强调，这个列表仅是一般指导方针）。
- en: Not Public API
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 非公共API
- en: The precise form of an expression. In general, functions may be changed to return
    a different but mathematically equivalent form of the same expression. This includes
    a function returning a value which it was not able to compute previously.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式的精确形式。一般来说，函数可能被更改为返回同一表达式的不同但数学上等价的形式。这包括函数返回以前无法计算的值。
- en: Functions and methods that are private, i.e., for internal use only. Such things
    should generally be prefixed with an underscore `_`, although this convention
    is not currently universally adhered to in the SymPy codebase.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有的函数和方法，即仅用于内部。这些东西通常应该以下划线 `_` 前缀，尽管这种约定目前在SymPy代码库中并不普遍遵循。
- en: Anything explicitly marked as “experimental”.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何明确标记为“实验性”的东西。
- en: Changes to behavior that were mathematically incorrect previously (in general,
    bug fixes are not considered breaking changes, because despite the saying, bugs
    in SymPy are not features).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前数学上不正确的行为更改（一般而言，修复错误不被视为破坏性更改，因为尽管有这种说法，但SymPy中的错误不是特性）。
- en: Anything that was added before the most recent release. Code that has not yet
    made it into a release does not need to be deprecated. If you are going to change
    the API of new code, it is best to do it before a release is made so that no deprecations
    are necessary for future releases.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在最近的发布之前添加的任何内容。尚未发布的代码不需要被废弃。如果要更改新代码的API，最好在发布之前进行，以便未来的发布不需要废弃。
- en: 'Note: both public and private API functions are included in the [reference
    documentation](../reference/index.html#reference), and many functions are not
    included there which should be, or are not documented at all which should be,
    so this should not be used to determine whether something public or not.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：参考文档包括[参考文档](../reference/index.html#reference)中的公共和私有API函数，许多应包括在内的函数未包括在其中，或者根本没有文档化，因此这不应用于确定某些内容是公共的还是私有的。
- en: If you’re unsure, there is no harm in deprecating something even if it might
    not actually be “public API”.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不确定，即使可能实际上并非“公共API”，也没有害处废弃某些内容。
- en: The purpose of deprecation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 废弃的目的
- en: 'Deprecation has several purposes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 废弃有几个目的：
- en: To allow existing code to continue to work for a while, giving people a chance
    to upgrade SymPy without fixing all deprecation issues immediately.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许现有代码继续工作一段时间，让人们有机会升级SymPy，而不立即修复所有废弃问题。
- en: To warn users that their code will break in a future version.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告用户其代码将来会在某个版本中断。
- en: To inform users how to fix their code so that it will continue work in future
    versions.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告知用户如何修复其代码，以使其在未来版本中继续工作。
- en: All deprecation warnings should be something that users can remove by updating
    their code. Deprecation warnings that fire unconditionally, even when using the
    “correct” newer APIs, should be avoided.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有废弃警告应该是用户可以通过更新其代码来移除的。应避免无条件触发废弃警告，即使使用了“正确”的新API。
- en: This also means all deprecated code must have a completely functioning replacement.
    If there is no way for users to update their code, then this means API in question
    is not yet read to be deprecated. The deprecation warning should inform users
    of a way to change their code so that it works in the same version of SymPy, as
    well as all future versions, and, if possible, previous versions of SymPy as well.
    See [below](#deprecation-documentation).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着所有废弃的代码必须有一个完全可用的替代方案。如果没有办法让用户更新其代码，那么这意味着相关API尚未准备好废弃。废弃警告应通知用户如何更改其代码，以使其在同一版本的SymPy中继续工作，以及所有未来版本，如果可能的话，还包括之前的版本。参见[下文](#deprecation-documentation)。
- en: Deprecations should always
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 废弃始终应该
- en: Allow users to continue to use the existing APIs unchanged during the deprecation
    period (with a warning, which can be [silenced](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)
    with `warnings.filterwarnings`).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许用户在废弃期间继续使用现有的API（附有警告，可以通过`warnings.filterwarnings`进行[消除](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)）。
- en: Allow users to always fix their code so that it stops giving the warning.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许用户始终修复其代码，以防止出现警告。
- en: After users fix their code, it should continue to work after the deprecated
    code is removed.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户修复其代码后，废弃的代码移除后应继续工作。
- en: The third point is important. We do not want the “new” method to itself cause
    another API break when the deprecation period is over. Doing this would completely
    defeat the purpose of doing a deprecation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第三点很重要。我们不希望“新”方法在废弃期结束时本身导致另一个API断裂。这样做将完全抵消废弃的目的。
- en: When it is not technically possible to deprecate
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当技术上不可能废弃时
- en: In some cases, this is not technically possible to make a deprecation that follows
    the above three rules. API changes of this nature should be considered the most
    heavily, as they will break people’s code immediately without warning. Consideration
    into how easy it will be for users to support multiple versions of SymPy, one
    with the change and one without, should also be taken into account.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，技术上不可能进行符合上述三条规则的废弃。此类性质的API更改应该被认为是最重要的，因为它们将立即破坏用户的代码而不发出警告。还应考虑到用户支持多个SymPy版本的容易程度，一个带有更改，一个不带有更改。
- en: 'If you decide that the change is nonetheless worth making, there are two options:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果决定更改仍然值得，有两种选择：
- en: Make the non-deprecatable change immediately, with no warnings. This will break
    user code.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即进行不可废弃的更改，不发出警告。这将打破用户代码。
- en: Warn that the code will change in the future. There won’t be a way for users
    to fix their code until a version is released with the breaking change, but they
    will at least be aware that changes are coming.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告代码将来会更改。在有版本引入破坏性更改之前，用户将无法修复其代码，但他们至少会意识到即将进行的更改。
- en: Which of the two to make should decided on a case-by-case basis.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应该根据具体情况决定采取哪种方式。
- en: How long should deprecations last?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 废弃应该持续多久？
- en: 'Deprecations should remain intact for **at least 1 year** after the first major
    release is made with the deprecation. This is only a minimum period: deprecations
    are allowed to remain intact for longer than this. If a change is especially hard
    for users to migrate, the deprecation period should be lengthened. The period
    may also be lengthened for deprecated features that do not impose a significant
    maintenance burden to keep around.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次主要发布时，弃用应**至少持续1年**。这只是最短期限：弃用可以保持更长时间。如果某项变更对用户的迁移特别困难，则应延长弃用期限。对于不会对维护造成重大负担的已弃用功能，期限也可以延长。
- en: The deprecation period policy is time-based rather than release-based for a
    few reasons. Firstly, SymPy does not have a regular release schedule. Sometimes
    multiple releases will be made in a year, and some years only a single release
    will be made. Being time-based assures that users have sufficient opportunity
    to update their code regardless of how often releases happen to be made.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 弃用期限策略基于时间而非发布。原因有几点：首先，SymPy没有定期的发布计划。有时一年内可能发布多个版本，有时可能只有一个版本。基于时间的策略确保用户有充足的机会更新其代码，无论发布频率如何。
- en: Secondly, SymPy does not make use of a rigorous versioning scheme like semantic
    versioning. The API surface of SymPy and number of contributions are both large
    enough that virtually every major release has some deprecations and backwards
    incompatible changes made in some submodule. Encoding this into the version number
    would be virtually impossible. The development team also does not backport changes
    to prior major releases, except in extreme cases. Thus a time-based deprecation
    scheme is more accurate to SymPy’s releasing model than a version-based one would
    be.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，SymPy不采用严格的语义化版本方案。SymPy的API表面和贡献数量都足够大，几乎每个主要版本都会在某些子模块中进行一些弃用和不向后兼容的更改。将这些编码到版本号中几乎是不可能的。开发团队也不会在极端情况下向之前的主要版本回溯更改。因此，基于时间的弃用方案比基于版本的方案更符合SymPy的发布模型。
- en: Finally, a time-based scheme removes any temptation to “fudge” a deprecation
    period down by releasing early. The best way for the developers to accelerate
    the removal of deprecated functionality is to make a release containing the deprecation
    as early as possible.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，基于时间的方案消除了通过提前发布来“篡改”弃用期限的任何诱惑。开发人员加速移除弃用功能的最佳方法是尽早发布包含弃用的版本。
- en: '## How to deprecate code'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '## 如何弃用代码'
- en: Checklist
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查清单
- en: Here is a checklist for doing a deprecation. See below for details on each step.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是进行弃用的检查清单。详细信息请参见下文。
- en: Discuss the backwards incompatible change with the community. Ensure the change
    is really worth making as per the discussion above.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与社区讨论不向后兼容的更改。根据上述讨论确保更改真的值得。
- en: Remove all instance of the deprecated code from everywhere in the codebase (including
    doctest examples).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从代码库中的所有地方（包括doctest示例）删除所有弃用代码的实例。
- en: Add [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") to the code.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中添加[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")。
- en: Write a descriptive message for the [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). Make sure the message
    explains both what is deprecated and what to replace it with. The message may
    be a multiline string and contain examples.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")编写描述性消息。确保消息解释了何为弃用以及替换方式。消息可以是多行字符串并包含示例。
- en: Set `deprecated_since_version` to the version in [`sympy/release.py`](https://github.com/sympy/sympy/blob/master/sympy/release.py)
    (without the `.dev`).
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`deprecated_since_version`设置为[`sympy/release.py`](https://github.com/sympy/sympy/blob/master/sympy/release.py)中的版本（不含`.dev`）。
- en: Set `active_deprecations_target` to the target used in the `active-deprecations.md`
    file.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`active_deprecations_target`设置为`active-deprecations.md`文件中使用的目标。
- en: Make sure `stacklevel` is set to the right value so that the deprecation warning
    shows the user line of code.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保`stacklevel`设置为正确的值，以便弃用警告显示用户的代码行。
- en: Visually confirm the deprecation warning looks good in the console.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认控制台中的弃用警告显示效果良好。
- en: 'Add a `.. deprecated:: <version>` note to the top of the relevant docstring(s).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在相关文档字符串的顶部添加一个`.. deprecated:: <version>`的注释。'
- en: Add a section to the `doc/src/explanation/active-deprecations.md` file.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`doc/src/explanation/active-deprecations.md`文件中添加一个部分。
- en: Add a cross-reference target `(deprecation-xyz)=` before the section header
    (this is the same reference used by `active_deprecations_target` above).
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在节标题之前添加交叉引用目标`(deprecation-xyz)=`（与上述的`active_deprecations_target`使用的引用相同）。
- en: Explain what is deprecated and what to replace it with.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释什么是已弃用以及应该替换的内容。
- en: Explain *why* the given thing is deprecated.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释为什么给定的事物已弃用。
- en: Add a test using [`warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy") that tests that the deprecation
    warning is issued properly. This test should be the only place in the code that
    actually uses the deprecated functionality.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个使用[`warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")的测试，测试已弃用警告是否正确发出。此测试应该是代码中唯一使用已弃用功能的地方。
- en: Run the test suite to ensure the above test works and that no other code uses
    the deprecated code, which will cause the tests to fail.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试套件以确保上述测试正常工作，并且没有其他代码使用了已弃用的代码，否则测试将失败。
- en: In your PR, add a `BREAKING CHANGE` entry to the release notes for the deprecation.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的 PR 中，为弃用添加一个`BREAKING CHANGE`条目到发布说明中。
- en: Once the PR is merged, manually add the change to the “Backwards compatibility
    breaks and deprecations” section of the release notes on the wiki.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦合并了PR，请手动将更改添加到维基上的“向后兼容性断裂和弃用”部分的发布说明中。
- en: Adding the deprecation to the code
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将弃用添加到代码中
- en: All deprecations should use [`sympy.utilities.exceptions.sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). If an entire function
    or method is deprecated, you can use the [`sympy.utilities.decorator.deprecated()`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated") decorator. The `deprecated_since_version`
    and `active_deprecations_target` flags are required. Do not use the `SymPyDeprecationWarning`
    class directly to issue a deprecation warning. Please see the docstring of [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") for more information.
    See [below](#deprecation-documentation) for an example.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所有弃用应该使用[`sympy.utilities.exceptions.sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")。如果整个函数或方法已弃用，可以使用[`sympy.utilities.decorator.deprecated()`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated")装饰器。`deprecated_since_version`和`active_deprecations_target`标志是必需的。请勿直接使用`SymPyDeprecationWarning`类来发出弃用警告。有关详细信息，请参阅[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")的文档字符串。请参见下面的[弃用文档](#deprecation-documentation)以获取示例。
- en: Add a test for the deprecated behavior. Use the [`sympy.testing.pytest.warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy") context manager.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为已弃用的行为添加一个测试。使用[`sympy.testing.pytest.warns_deprecated_sympy()`](../modules/testing/pytest.html#sympy.testing.pytest.warns_deprecated_sympy
    "sympy.testing.pytest.warns_deprecated_sympy")上下文管理器。
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`warns_deprecated_sympy` is only intended to be used internally by the SymPy
    test suite. Users of SymPy should use the [warnings](https://docs.python.org/3/library/warnings.html)
    module directly to filter SymPy deprecation warnings. See [Silencing SymPy Deprecation
    Warnings](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`warns_deprecated_sympy`仅供SymPy测试套件内部使用。SymPy的用户应直接使用[warnings](https://docs.python.org/3/library/warnings.html)模块来过滤SymPy的弃用警告。请参阅[静音SymPy弃用警告](../explanation/active-deprecations.html#silencing-sympy-deprecation-warnings)。'
- en: 'This has two purposes: to test that the warning is emitted correctly, and to
    test that the deprecated behavior still actually functions.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这有两个目的：测试警告是否正确发出，并测试已弃用的行为是否仍然有效。
- en: 'If you want to test multiple things and assert that each emits a warning then
    use separate with blocks for each:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要测试多个事物并断言每个事物都发出警告，则对每个事物使用单独的with块：
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This should be the only part of the codebase and test suite that uses the deprecated
    behavior. Everything else should be changed to use the new, non-deprecated behavior.
    The SymPy test suite is configured to fail if a `SymPyDeprecationWarning` is issued
    anywhere except in a `warns_deprecated_sympy()` block. You should not use this
    function or a `warnings.filterwarnings(SymPyDeprecationWarning)` anywhere except
    in the test for the deprecation. This includes the documentation examples. The
    documentation for a deprecated function should just have a note pointing to the
    non-deprecated alternative. If you want to show a deprecated function in a doctest
    use `# doctest: +SKIP`. The only exception to this rule is that you may use `ignore_warnings(SymPyDeprecationWarning)`
    to prevent the exact same warning from triggering twice, i.e., if a deprecated
    function calls another function that issues the same or a similar warning.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '这应该是唯一使用废弃行为的代码库和测试套件部分。其他所有内容都应更改为使用新的、非废弃的行为。SymPy测试套件配置为，如果在任何地方发出`SymPyDeprecationWarning`，除了在`warns_deprecated_sympy()`块中，都将失败。您不应在废弃测试之外的任何地方使用此函数或`warnings.filterwarnings(SymPyDeprecationWarning)`。这包括废弃函数的文档示例。废弃函数的文档应该只有一个指向非废弃替代方法的注释。如果要在doctest中显示废弃函数，请使用`#
    doctest: +SKIP`。唯一的例外是您可以使用`ignore_warnings(SymPyDeprecationWarning)`来防止同一警告触发两次，即如果一个废弃函数调用另一个发出相同或类似警告的函数。'
- en: If it is not possible to remove the deprecated behavior somewhere, that is a
    sign that it is not ready to be deprecated yet. Consider that users may not be
    able to replace the deprecated behavior for exact same reason.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不可能在某处移除废弃的行为，则说明该行为尚未准备好被废弃。考虑到用户可能因为相同的原因无法替换废弃的行为。
- en: '### Documenting a deprecation'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '### 记录废弃信息'
- en: 'All deprecations should be documented. Every deprecation needs to be documented
    in three primary places:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有废弃信息都应进行记录。每个废弃信息都需要在三个主要位置进行记录：
- en: The [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") warning text. This text
    is allowed to be long enough to describe the deprecation, but it should not be
    more than one paragraph. The primary purpose of the warning text should be *to
    inform users how to update their code*. The warning text should *not* discuss
    why a feature was deprecated or unnecessary internal technical details. This discussion
    can go in the other sections mentioned below. Do not include information in the
    message that is already part of the metadata provided to the keyword arguments
    to `sympy_deprecation_warning()`, like the version number or a link to the active
    deprecations document. Remember that the warning text will be shown in plain-text,
    so do not use RST or Markdown markup in the text. Code blocks should be clearly
    delineated with newlines so that they are easy to read. All text in the warning
    message should be wrapped to 80 characters, except for code examples that cannot
    be wrapped.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") 警告文本。本文允许较长，以描述废弃情况，但不应超过一段。警告文本的主要目的是*通知用户如何更新其代码*。警告文本不应讨论为何功能被废弃或不必要的内部技术细节。此类讨论可放入下面提到的其他部分。不要在消息中包含已提供给`sympy_deprecation_warning()`关键字参数的元数据信息，如版本号或活动废弃文档的链接。请记住，警告文本将以纯文本形式显示，因此不要在文本中使用RST或Markdown标记。代码块应有明确的换行来使其易于阅读。警告消息中的所有文本应包装到80个字符，除了不能包装的代码示例。'
- en: Always include full context of what is deprecated in the message. For example,
    write “the abc keyword to func() is deprecated” instead of just “the abc keyword
    is deprecated”. That way if a user has a larger line of code that is using the
    deprecated functionality, it will be easier for them to see exactly which part
    is causing the warning.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 始终包含消息中废弃内容的完整上下文。例如，写“废弃了abc关键字到func()”而不仅仅是“废弃了abc关键字”。这样，如果用户有一行较长的代码正在使用废弃功能，他们可以更容易地看到确切引发警告的部分。
- en: 'A deprecation note in the relevant docstring(s). This should use the [`deprecated`](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated)
    Sphinx directive. This uses the syntax `.. deprecated:: <version>`. If the entire
    function is deprecated, this should be placed at the top of the docstring, right
    below the first line. Otherwise, if only part of a function is deprecated (e.g.,
    a single keyword argument), it should be placed near the part of the docstring
    that discusses that feature, e.g., in the parameters list.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在相关文档字符串中添加一个弃用说明。这应该使用[`deprecated`](https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-deprecated)
    Sphinx 指令。使用语法`.. deprecated:: <version>`。如果整个函数都已弃用，则应将其放置在文档字符串顶部，正好在第一行下面。否则，如果只有部分函数已弃用（例如，单个关键字参数），则应将其放置在讨论该功能部分的文档字符串附近，例如在参数列表中。'
- en: The text in the deprecation should be short (no more than a paragraph), explaining
    what is deprecated and what users should use instead. If you want, you may use
    the same text here as in the [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning"). Be sure to use RST formatting,
    including cross-references to the new function if relevant, and a cross-reference
    to the longer description in the `active-deprecations.md` document (see [below](#deprecations-longer-description)).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 弃用文本应简短（不超过一个段落），解释何处已弃用以及用户应该使用什么代替。如果愿意，可以在此处使用与[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")相同的文本。确保使用RST格式，包括与新函数相关的交叉引用，以及到`active-deprecations.md`文档中的更长描述的交叉引用（参见[下文](#deprecations-longer-description)）。
- en: If the documentation for the feature is otherwise the same as the replaced feature
    (i.e., the deprecation is just a renaming of a function or argument), you may
    replace the rest of the documentation with a note like “see the documentation
    for <new feature>”. Otherwise, the documentation for the deprecated functionality
    should be left intact.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果功能的文档与替换功能的文档相同（即，弃用只是对函数或参数的重命名），则可以用“请参阅<新功能>的文档”等备注替换其余文档。否则，应保留弃用功能的文档不变。
- en: 'Here are some (imaginary) examples:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一些（虚构的）例子：
- en: '[PRE2]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A longer description of the deprecation should be added to [the page listing
    all currently active deprecations](../explanation/active-deprecations.html#active-deprecations)
    in the documentation (in `doc/src/explanation/active-deprecations.md`).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该将弃用功能的更长描述添加到文档中列出所有当前活动弃用的页面（位于`doc/src/explanation/active-deprecations.md`中）中。
- en: This page is where you can go into more detail about the technical details of
    a deprecation. Here you should also list *why* a feature was deprecated. You may
    link to relevant issues, pull requests, and mailing list discussions about the
    deprecation, but these discussion should be summarized so that users can get the
    basic idea of why the deprecation without having to read through pages of old
    discussions. You may also give longer examples here that would not fit in the
    [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") message or `.. deprecated::`
    text.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个页面是您可以深入了解弃用技术细节的地方。在这里，您还应列出为何某个功能被弃用的原因。您可以链接到相关问题、拉取请求和邮件列表讨论有关弃用的内容，但这些讨论应该总结，以便用户可以简要了解弃用的基本思想，而不必阅读旧讨论的页面。您还可以在这里提供在[`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning")消息或`.. deprecated::`文本中无法容纳的更长示例。
- en: Every deprecation should have a cross-reference target (using `(target-name)=`
    above the section header) so that the `.. deprecated::` note in the relevant docstring
    can refer to it. This target should also be passed to the `active_deprecations_target`
    option of [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") or [`@deprecated`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated"). This will automatically put a link to
    the page in the documentation in the warning message. The target name should include
    the word “deprecation” or “deprecated” (target names are global in Sphinx, so
    the target name needs to be unique across the entire documentation).
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个弃用都应该有一个交叉引用目标（使用 `(target-name)=` 放在章节标题上方），以便相关文档字符串中的 `.. deprecated::`
    笔记可以引用它。这个目标还应该传递给 [`sympy_deprecation_warning()`](../modules/utilities/exceptions.html#sympy.utilities.exceptions.sympy_deprecation_warning
    "sympy.utilities.exceptions.sympy_deprecation_warning") 或 [`@deprecated`](../modules/utilities/decorator.html#sympy.utilities.decorator.deprecated
    "sympy.utilities.decorator.deprecated") 的 `active_deprecations_target` 选项。这将自动在警告消息的文档中链接到页面。目标名称应包含“deprecation”或“deprecated”这些词（Sphinx
    中目标名称是全局的，因此目标名称在整个文档中必须是唯一的）。
- en: The section header name should be the thing that is deprecated, and should be
    a level 3 header under the corresponding version (typically it should be added
    to the top of the file).
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 章节标题名称应该是被弃用的内容，应该是相应版本的三级标题（通常应添加到文件顶部）。
- en: If multiple deprecations are related to one another, they can all share a single
    section on this page.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果多个弃用彼此相关，则可以共享本页的单个部分。
- en: If the deprecated function is not included in the top-level `sympy/__init__.py`
    be sure to clearly indicate which submodule the object is referring to. If you
    refer to anything that is documented in the Sphinx module reference, cross-reference
    it, like `` {func}`~.func_name` ``.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果弃用的函数未包含在顶级 `sympy/__init__.py` 中，请确保清楚指出对象所属的子模块。如果引用了 Sphinx 模块参考文档中的任何内容，请进行交叉引用，例如
    `` {func}`~.func_name` ``。
- en: 'Note that examples here are helpful, but you generally should not use doctests
    to show the deprecated functionality, as this will itself raise the deprecation
    warning and fail the doctest. Instead you may use `# doctest: +SKIP`, or just
    show the example as a code block instead of a doctest.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '注意这里的示例很有帮助，但通常不应使用文档测试来显示已弃用的功能，因为这将引发弃用警告并使文档测试失败。相反，您可以使用 `# doctest: +SKIP`，或者将示例显示为代码块而不是文档测试。'
- en: 'Here are examples corresponding to the (imaginary) examples above:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是对应于（虚构的）上述示例的示例：
- en: '[PRE4]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]py'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE5]py'
- en: is_this_zero(expr1, expr2)
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: is_this_zero(expr1, expr2)
- en: '[PRE6]py'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE6]py'
- en: is_this_zero(expr1 - expr2)
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: is_this_zero(expr1 - expr2)
- en: '[PRE7]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In addition to the above examples, there are dozens of examples of existing
    deprecations which can be found by searching for `sympy_deprecation_warning` in
    the SymPy codebase
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述示例，SymPy 代码库中还有数十个现有弃用的示例，可以通过在 SymPy 代码库中搜索 `sympy_deprecation_warning`
    找到。
- en: Release notes entry
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布说明条目
- en: In the pull request, document the breaking change in the release notes section
    with `BREAKING CHANGE`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在拉取请求中，在发布说明部分记录破坏性更改使用 `BREAKING CHANGE`。
- en: Once the PR is merged, you should also add it to the “Backwards compatibility
    breaks and deprecations” section of the release notes for the upcoming release.
    This needs to be done manually, in addition to the change from the bot. See [https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations](https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 PR 合并，您还应将其添加到即将发布的版本的“向后兼容性中断和弃用”部分的发布说明中。这需要手动完成，除了机器人的更改之外。参见 [https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations](https://github.com/sympy/sympy/wiki/Writing-Release-Notes#user-content-backwards-compatibility-breaks-and-deprecations)
- en: Whenever a deprecated functionality is removed entirely after its deprecation
    period, this also needs to be marked as a `BREAKING CHANGE` and added to the “Backwards
    compatibility breaks and deprecations” section of the release notes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 每当在其弃用期后完全移除已弃用的功能时，这也需要标记为 `BREAKING CHANGE` 并添加到“向后兼容性中断和弃用”部分的发布说明中。
