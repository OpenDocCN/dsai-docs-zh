- en: scipy.signal.firwin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firwin.html#scipy.signal.firwin](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.firwin.html#scipy.signal.firwin)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: FIR filter design using the window method.
  prefs: []
  type: TYPE_NORMAL
- en: This function computes the coefficients of a finite impulse response filter.
    The filter will have linear phase; it will be Type I if *numtaps* is odd and Type
    II if *numtaps* is even.
  prefs: []
  type: TYPE_NORMAL
- en: Type II filters always have zero response at the Nyquist frequency, so a ValueError
    exception is raised if firwin is called with *numtaps* even and having a passband
    whose right end is at the Nyquist frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**numtaps**int'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the filter (number of coefficients, i.e. the filter order + 1). *numtaps*
    must be odd if a passband includes the Nyquist frequency.
  prefs: []
  type: TYPE_NORMAL
- en: '**cutoff**float or 1-D array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Cutoff frequency of filter (expressed in the same units as *fs*) OR an array
    of cutoff frequencies (that is, band edges). In the latter case, the frequencies
    in *cutoff* should be positive and monotonically increasing between 0 and *fs/2*.
    The values 0 and *fs/2* must not be included in *cutoff*.
  prefs: []
  type: TYPE_NORMAL
- en: '**width**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *width* is not None, then assume it is the approximate width of the transition
    region (expressed in the same units as *fs*) for use in Kaiser FIR filter design.
    In this case, the *window* argument is ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**string or tuple of string and parameter values, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. See [`scipy.signal.get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**pass_zero**{True, False, ‘bandpass’, ‘lowpass’, ‘highpass’, ‘bandstop’},
    optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the gain at the frequency 0 (i.e., the “DC gain”) is 1. If False, the
    DC gain is 0\. Can also be a string argument for the desired filter type (equivalent
    to `btype` in IIR design functions).
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.3.0: Support for string arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**scale**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set to True to scale the coefficients so that the frequency response is exactly
    unity at a certain frequency. That frequency is either:'
  prefs: []
  type: TYPE_NORMAL
- en: 0 (DC) if the first passband starts at 0 (i.e. pass_zero is True)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fs/2* (the Nyquist frequency) if the first passband ends at *fs/2* (i.e the
    filter is a single band highpass filter); center of first passband otherwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nyq**float, optional, deprecated'
  prefs: []
  type: TYPE_NORMAL
- en: This is the Nyquist frequency. Each frequency in *cutoff* must be between 0
    and *nyq*. Default is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.0.0: [`firwin`](#scipy.signal.firwin "scipy.signal.firwin")
    keyword argument *nyq* is deprecated in favour of *fs* and will be removed in
    SciPy 1.14.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the signal. Each frequency in *cutoff* must be between
    0 and `fs/2`. Default is 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**h**(numtaps,) ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of length *numtaps* FIR filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If any value in *cutoff* is less than or equal to 0 or greater than or equal
    to `fs/2`, if the values in *cutoff* are not strictly monotonically increasing,
    or if *numtaps* is even but a passband includes the Nyquist frequency.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`firwin2`](scipy.signal.firwin2.html#scipy.signal.firwin2 "scipy.signal.firwin2")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`firls`](scipy.signal.firls.html#scipy.signal.firls "scipy.signal.firls")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimum_phase`](scipy.signal.minimum_phase.html#scipy.signal.minimum_phase
    "scipy.signal.minimum_phase")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`remez`](scipy.signal.remez.html#scipy.signal.remez "scipy.signal.remez")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Low-pass from 0 to f:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Use a specific window function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'High-pass (‘stop’ from 0 to f):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Band-pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Band-stop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Multi-band (passbands are [0, f1], [f2, f3] and [f4, 1]):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Multi-band (passbands are [f1, f2] and [f3,f4]):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
