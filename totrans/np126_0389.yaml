- en: numpy.invert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.invert.html](https://numpy.org/doc/1.26/reference/generated/numpy.invert.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute bit-wise inversion, or bit-wise NOT, element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: Computes the bit-wise NOT of the underlying binary representation of the integers
    in the input arrays. This ufunc implements the C/Python operator `~`.
  prefs: []
  type: TYPE_NORMAL
- en: For signed integer inputs, the two’s complement is returned. In a two’s-complement
    system negative numbers are represented by the two’s complement of the absolute
    value. This is the most common method of representing signed integers on computers
    [[1]](#rde927b304c4f-1). A N-bit two’s-complement system can represent every integer
    in the range \(-2^{N-1}\) to \(+2^{N-1}-1\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Only integer and boolean types are handled.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray or scalar'
  prefs: []
  type: TYPE_NORMAL
- en: Result. This is a scalar if *x* is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`bitwise_and`](numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and"),
    [`bitwise_or`](numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or"), [`bitwise_xor`](numpy.bitwise_xor.html#numpy.bitwise_xor
    "numpy.bitwise_xor")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`logical_not`](numpy.logical_not.html#numpy.logical_not "numpy.logical_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`binary_repr`](numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the binary representation of the input number as a string.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`bitwise_not` is an alias for [`invert`](#numpy.invert "numpy.invert"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Wikipedia, “Two’s complement”, [https://en.wikipedia.org/wiki/Two’s_complement](https://en.wikipedia.org/wiki/Two's_complement)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve seen that 13 is represented by `00001101`. The invert or bit-wise NOT
    of 13 is then:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result depends on the bit-width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When using signed integer types the result is the two’s complement of the result
    for the unsigned type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Booleans are accepted as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `~` operator can be used as a shorthand for `np.invert` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
