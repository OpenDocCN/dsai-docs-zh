["```py\n>>> from sympy import *\n>>> N(sqrt(2)*pi)\n4.44288293815837\n>>> (sqrt(2)*pi).evalf()\n4.44288293815837 \n```", "```py\n>>> N(sqrt(2)*pi, 5)\n4.4429\n>>> N(sqrt(2)*pi, 50)\n4.4428829381583662470158809900606936986146216893757 \n```", "```py\n>>> N(1/(pi + I), 20)\n0.28902548222223624241 - 0.091999668350375232456*I \n```", "```py\n>>> x = Symbol('x')\n>>> (pi*x**2 + x/3).evalf()\n3.14159265358979*x**2 + 0.333333333333333*x \n```", "```py\n>>> float(pi)  \n3.141592653589793\n>>> complex(pi+E*I)  \n(3.141592653589793+2.718281828459045j) \n```", "```py\n>>> N(pi/E, 100000) \n... \n```", "```py\n>>> str(N(pi, 10**6))[-50:] \n'95678796130331164628399634646042209010610577945815' \n```", "```py\n>>> Float(0.1)\n0.100000000000000\n>>> Float(0.1, 10)\n0.1000000000\n>>> Float(0.125, 30)\n0.125000000000000000000000000000\n>>> Float(0.1, 30)\n0.100000000000000005551115123126 \n```", "```py\n>>> Float('0.1', 30)\n0.100000000000000000000000000000\n>>> Float(Rational(1, 10), 30)\n0.100000000000000000000000000000\n>>> Rational(1, 10).evalf(30)\n0.100000000000000000000000000000 \n```", "```py\n>>> Float(0.1, 3)*Float(3.1415, 5)\n0.31417 \n```", "```py\n>>> N(3.5)\n3.50000000000000\n>>> N(3.5, 5)\n3.5000\n>>> N(3.5, 30)\n3.50000000000000000000000000000 \n```", "```py\n>>> a, b = GoldenRatio**1000/sqrt(5), fibonacci(1000)\n>>> float(a)\n4.34665576869e+208\n>>> float(b)\n4.34665576869e+208\n>>> float(a) - float(b)\n0.0 \n```", "```py\n>>> N(fibonacci(100) - GoldenRatio**100/sqrt(5))\n-5.64613129282185e-22 \n```", "```py\n>>> N(fibonacci(1000) - (GoldenRatio)**1000/sqrt(5))\n0.e+85 \n```", "```py\n>>> N(fibonacci(1000) - (GoldenRatio)**1000/sqrt(5), maxn=500)\n-4.60123853010113e-210 \n```", "```py\n>>> N(fibonacci(1000) - (GoldenRatio)**1000/sqrt(5), strict=True)\nTraceback (most recent call last):\n...\nPrecisionExhausted: Failed to distinguish the expression:\n\n-sqrt(5)*GoldenRatio**1000/5 + 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875\n\nfrom zero. Try simplifying the input, using chop=True, or providing a higher maxn for evalf \n```", "```py\n>>> f = fibonacci(100) - (GoldenRatio**100 - (GoldenRatio-1)**100)/sqrt(5)\n>>> N(f)\n0.e-104\n>>> N(f, maxn=1000)\n0.e-1336 \n```", "```py\n>>> N(f, chop=True)\n0\n>>> N(3 + I*f, chop=True)\n3.00000000000000 \n```", "```py\n>>> Float('.1', '')*Float('.12345', '')\n0.012297\n>>> ans = _\n>>> N(ans, 1)\n0.01\n>>> ans.round(2)\n0.01 \n```", "```py\n>>> v = 10*pi + cos(1)\n>>> N(v)\n31.9562288417661\n>>> v.round(3)\n31.956 \n```", "```py\n>>> var('n x')\n(n, x)\n>>> Sum(1/n**n, (n, 1, oo)).evalf()\n1.29128599706266\n>>> Integral(x**(-x), (x, 0, 1)).evalf()\n1.29128599706266\n>>> Sum(1/n**n, (n, 1, oo)).evalf(50)\n1.2912859970626635404072825905956005414986193682745\n>>> Integral(x**(-x), (x, 0, 1)).evalf(50)\n1.2912859970626635404072825905956005414986193682745\n>>> (Integral(exp(-x**2), (x, -oo, oo)) ** 2).evalf(30)\n3.14159265358979323846264338328 \n```", "```py\n>>> f = abs(sin(x))\n>>> Integral(abs(sin(x)), (x, 0, 4)).evalf()\n2.346 \n```", "```py\n>>> (Integral(f, (x, 0, pi)) + Integral(f, (x, pi, 4))).evalf()\n2.34635637913639 \n```", "```py\n>>> Integral(sin(x)/x**2, (x, 1, oo)).evalf(maxn=20)\n0.5 \n```", "```py\n>>> Integral(sin(x)/x**2, (x, 1, oo)).evalf(quad='osc')\n0.504067061906928\n>>> Integral(sin(x)/x**2, (x, 1, oo)).evalf(20, quad='osc')\n0.50406706190692837199 \n```", "```py\n>>> init_printing(use_unicode=False)\n>>> intgrl = Integral(sin(1/x), (x, 0, 1)).transform(x, 1/x)\n>>> intgrl\n oo\n /\n |\n |  sin(x)\n |  ------ dx\n |     2\n |    x\n |\n/\n1\n>>> N(intgrl, quad='osc')\n0.504067061906928 \n```", "```py\n>>> var('k')\nk\n>>> Sum(1/k**2, (k, 1, oo)).evalf()\n1.64493406684823\n>>> zeta(2).evalf()\n1.64493406684823\n>>> Sum(1/k-log(1+1/k), (k, 1, oo)).evalf()\n0.577215664901533\n>>> Sum(1/k-log(1+1/k), (k, 1, oo)).evalf(50)\n0.57721566490153286060651209008240243104215933593992\n>>> EulerGamma.evalf(50)\n0.57721566490153286060651209008240243104215933593992 \n```", "```py\n>>> Sum(1/k, (k, 10000000, 20000000)).evalf()\n0.693147255559946 \n```", "```py\n>>> f = factorial\n>>> n = Symbol('n', integer=True)\n>>> R = 9801/sqrt(8)/Sum(f(4*n)*(1103+26390*n)/f(n)**4/396**(4*n),\n...                         (n, 0, oo))\n>>> N(R, 10000) \n3.141592653589793238462643383279502884197169399375105820974944592307816406286208\n99862803482534211706798214808651328230664709384460955058223172535940812848111745\n02841027019385211055596446229489549303819644288109756659334461284756482337867831\n... \n```", "```py\n>>> nsimplify(0.1)\n1/10\n>>> nsimplify(6.28, [pi], tolerance=0.01)\n2*pi\n>>> nsimplify(pi, tolerance=0.01)\n22/7\n>>> nsimplify(pi, tolerance=0.001)\n355\n---\n113\n>>> nsimplify(0.33333, tolerance=1e-4)\n1/3\n>>> nsimplify(2.0**(1/3.), tolerance=0.001)\n635\n---\n504\n>>> nsimplify(2.0**(1/3.), tolerance=0.001, full=True)\n3 ___\n\\/ 2 \n```", "```py\n>>> nsimplify(Float('0.130198866629986772369127970337',30), [pi, E])\n 1\n----------\n5*pi\n---- + 2*e\n 7\n>>> nsimplify(cos(atan('1/3')))\n ____\n3*\\/ 10\n--------\n 10\n>>> nsimplify(4/(1+sqrt(5)), [GoldenRatio])\n-2 + 2*GoldenRatio\n>>> nsimplify(2 + exp(2*atan('1/4')*I))\n49   8*I\n-- + ---\n17    17\n>>> nsimplify((1/(exp(3*pi*I/5)+1)))\n ___________\n /   ___\n1        /  \\/ 5    1\n- - I*  /   ----- + -\n2     \\/      10    4\n>>> nsimplify(I**I, [pi])\n -pi\n ----\n 2\ne\n>>> n = Symbol('n')\n>>> nsimplify(Sum(1/n**2, (n, 1, oo)), [pi])\n 2\npi\n---\n 6\n>>> nsimplify(gamma('1/4')*gamma('3/4'), [pi])\n ___\n\\/ 2 *pi \n```"]