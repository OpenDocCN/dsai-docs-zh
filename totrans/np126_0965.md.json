["```py\ntype bitgen_t\n```", "```py\nstruct  bitgen:\n  void  *state\n  npy_uint64  (*next_uint64)(void  *st)  nogil\n  uint32_t  (*next_uint32)(void  *st)  nogil\n  double  (*next_double)(void  *st)  nogil\n  npy_uint64  (*next_raw)(void  *st)  nogil\n\nctypedef  bitgen  bitgen_t \n```", "```py\ndouble random_standard_uniform( *bitgen_state)\n```", "```py\nvoid random_standard_uniform_fill( *bitgen_state, cnt, double *out)\n```", "```py\ndouble random_standard_exponential( *bitgen_state)\n```", "```py\nvoid random_standard_exponential_fill( *bitgen_state, cnt, double *out)\n```", "```py\nvoid random_standard_exponential_inv_fill( *bitgen_state, cnt, double *out)\n```", "```py\ndouble random_standard_normal( *bitgen_state)\n```", "```py\nvoid random_standard_normal_fill( *bitgen_state, count, double *out)\n```", "```py\nvoid random_standard_normal_fill_f( *bitgen_state, count, float *out)\n```", "```py\ndouble random_standard_gamma( *bitgen_state, double shape)\n```", "```py\nfloat random_standard_uniform_f( *bitgen_state)\n```", "```py\nvoid random_standard_uniform_fill_f( *bitgen_state, cnt, float *out)\n```", "```py\nfloat random_standard_exponential_f( *bitgen_state)\n```", "```py\nvoid random_standard_exponential_fill_f( *bitgen_state, cnt, float *out)\n```", "```py\nvoid random_standard_exponential_inv_fill_f( *bitgen_state, cnt, float *out)\n```", "```py\nfloat random_standard_normal_f( *bitgen_state)\n```", "```py\nfloat random_standard_gamma_f( *bitgen_state, float shape)\n```", "```py\ndouble random_normal( *bitgen_state, double loc, double scale)\n```", "```py\ndouble random_gamma( *bitgen_state, double shape, double scale)\n```", "```py\nfloat random_gamma_f( *bitgen_state, float shape, float scale)\n```", "```py\ndouble random_exponential( *bitgen_state, double scale)\n```", "```py\ndouble random_uniform( *bitgen_state, double lower, double range)\n```", "```py\ndouble random_beta( *bitgen_state, double a, double b)\n```", "```py\ndouble random_chisquare( *bitgen_state, double df)\n```", "```py\ndouble random_f( *bitgen_state, double dfnum, double dfden)\n```", "```py\ndouble random_standard_cauchy( *bitgen_state)\n```", "```py\ndouble random_pareto( *bitgen_state, double a)\n```", "```py\ndouble random_weibull( *bitgen_state, double a)\n```", "```py\ndouble random_power( *bitgen_state, double a)\n```", "```py\ndouble random_laplace( *bitgen_state, double loc, double scale)\n```", "```py\ndouble random_gumbel( *bitgen_state, double loc, double scale)\n```", "```py\ndouble random_logistic( *bitgen_state, double loc, double scale)\n```", "```py\ndouble random_lognormal( *bitgen_state, double mean, double sigma)\n```", "```py\ndouble random_rayleigh( *bitgen_state, double mode)\n```", "```py\ndouble random_standard_t( *bitgen_state, double df)\n```", "```py\ndouble random_noncentral_chisquare( *bitgen_state, double df, double nonc)\n```", "```py\ndouble random_noncentral_f( *bitgen_state, double dfnum, double dfden, double nonc)\n```", "```py\ndouble random_wald( *bitgen_state, double mean, double scale)\n```", "```py\ndouble random_vonmises( *bitgen_state, double mu, double kappa)\n```", "```py\ndouble random_triangular( *bitgen_state, double left, double mode, double right)\n```", "```py\nrandom_poisson( *bitgen_state, double lam)\n```", "```py\nrandom_negative_binomial( *bitgen_state, double n, double p)\n```", "```py\ntype binomial_t\n```", "```py\ntypedef  struct  s_binomial_t  {\n  int  has_binomial;  /* !=0: following parameters initialized for binomial */\n  double  psave;\n  RAND_INT_TYPE  nsave;\n  double  r;\n  double  q;\n  double  fm;\n  RAND_INT_TYPE  m;\n  double  p1;\n  double  xm;\n  double  xl;\n  double  xr;\n  double  c;\n  double  laml;\n  double  lamr;\n  double  p2;\n  double  p3;\n  double  p4;\n}  binomial_t; \n```", "```py\nrandom_binomial( *bitgen_state, double p, n, *binomial)\n```", "```py\nrandom_logseries( *bitgen_state, double p)\n```", "```py\nrandom_geometric_search( *bitgen_state, double p)\n```", "```py\nrandom_geometric_inversion( *bitgen_state, double p)\n```", "```py\nrandom_geometric( *bitgen_state, double p)\n```", "```py\nrandom_zipf( *bitgen_state, double a)\n```", "```py\nrandom_hypergeometric( *bitgen_state, good, bad, sample)\n```", "```py\nrandom_interval( *bitgen_state, max)\n```", "```py\nvoid random_multinomial( *bitgen_state, n, *mnix, double *pix, d, *binomial)\n```", "```py\nint random_multivariate_hypergeometric_count( *bitgen_state, total, size_t num_colors, *colors, nsample, size_t num_variates, *variates)\n```", "```py\nvoid random_multivariate_hypergeometric_marginals( *bitgen_state, total, size_t num_colors, *colors, nsample, size_t num_variates, *variates)\n```", "```py\nrandom_positive_int64( *bitgen_state)\n```", "```py\nrandom_positive_int32( *bitgen_state)\n```", "```py\nrandom_positive_int( *bitgen_state)\n```", "```py\nrandom_uint( *bitgen_state)\n```", "```py\nrandom_bounded_uint64( *bitgen_state, off, rng, mask, bool use_masked)\n```"]