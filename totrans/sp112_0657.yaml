- en: scipy.signal.peak_widths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.peak_widths.html#scipy.signal.peak_widths](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.peak_widths.html#scipy.signal.peak_widths)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calculate the width of each peak in a signal.
  prefs: []
  type: TYPE_NORMAL
- en: This function calculates the width of a peak in samples at a relative distance
    to the peak’s height and prominence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: A signal with peaks.
  prefs: []
  type: TYPE_NORMAL
- en: '**peaks**sequence'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of peaks in *x*.
  prefs: []
  type: TYPE_NORMAL
- en: '**rel_height**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Chooses the relative height at which the peak width is measured as a percentage
    of its prominence. 1.0 calculates the width of the peak at its lowest contour
    line while 0.5 evaluates at half the prominence height. Must be at least 0\. See
    notes for further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: '**prominence_data**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A tuple of three arrays matching the output of [`peak_prominences`](scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences") when called with the same arguments *x* and *peaks*.
    This data are calculated internally if not provided.
  prefs: []
  type: TYPE_NORMAL
- en: '**wlen**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A window length in samples passed to [`peak_prominences`](scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences") as an optional argument for internal calculation
    of *prominence_data*. This argument is ignored if *prominence_data* is given.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**widths**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The widths for each peak in samples.
  prefs: []
  type: TYPE_NORMAL
- en: '**width_heights**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The height of the contour lines at which the *widths* where evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: '**left_ips, right_ips**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolated positions of left and right intersection points of a horizontal
    line at the respective evaluation height.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If *prominence_data* is supplied but doesn’t satisfy the condition `0 <= left_base
    <= peak <= right_base < x.shape[0]` for each peak, has the wrong dtype, is not
    C-contiguous or does not have the same shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warns:'
  prefs: []
  type: TYPE_NORMAL
- en: PeakPropertyWarning
  prefs: []
  type: TYPE_NORMAL
- en: Raised if any calculated width is 0\. This may stem from the supplied *prominence_data*
    or if *rel_height* is set to 0.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This function may return unexpected results for data containing NaNs. To avoid
    this, NaNs should either be removed or replaced.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`find_peaks`](scipy.signal.find_peaks.html#scipy.signal.find_peaks "scipy.signal.find_peaks")'
  prefs: []
  type: TYPE_NORMAL
- en: Find peaks inside a signal based on peak properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[`peak_prominences`](scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences")'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the prominence of peaks.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic algorithm to calculate a peak’s width is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the evaluation height \(h_{eval}\) with the formula \(h_{eval} = h_{Peak}
    - P \cdot R\), where \(h_{Peak}\) is the height of the peak itself, \(P\) is the
    peak’s prominence and \(R\) a positive ratio specified with the argument *rel_height*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw a horizontal line at the evaluation height to both sides, starting at the
    peak’s current vertical position until the lines either intersect a slope, the
    signal border or cross the vertical position of the peak’s base (see [`peak_prominences`](scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences") for an definition). For the first case, intersection
    with the signal, the true intersection point is estimated with linear interpolation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculate the width as the horizontal distance between the chosen endpoints
    on both sides. As a consequence of this the maximal possible width for each peak
    is the horizontal distance between its bases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As shown above to calculate a peak’s width its prominence and bases must be
    known. You can supply these yourself with the argument *prominence_data*. Otherwise,
    they are internally calculated (see [`peak_prominences`](scipy.signal.peak_prominences.html#scipy.signal.peak_prominences
    "scipy.signal.peak_prominences")).
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a test signal with two overlaid harmonics
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Find all peaks and calculate their widths at the relative height of 0.5 (contour
    line at half the prominence height) and 1 (at the lowest contour line at full
    prominence height).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Plot signal, peaks and contour lines at which the widths where calculated
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-peak_widths-1.png](../Images/1da0e1ff48c263fe5033be2e55373a89.png)'
  prefs: []
  type: TYPE_IMG
