["```py\nsympy.utilities.lambdify.implemented_function(symfunc, implementation)\n```", "```py\n>>> from sympy.abc import x\n>>> from sympy.utilities.lambdify import implemented_function\n>>> from sympy import lambdify\n>>> f = implemented_function('f', lambda x: x+1)\n>>> lam_f = lambdify(x, f(x))\n>>> lam_f(4)\n5 \n```", "```py\nsympy.utilities.lambdify.lambdastr(args, expr, printer=None, dummify=None)\n```", "```py\n>>> from sympy.abc import x, y, z\n>>> from sympy.utilities.lambdify import lambdastr\n>>> lambdastr(x, x**2)\n'lambda x: (x**2)'\n>>> lambdastr((x,y,z), [z,y,x])\n'lambda x,y,z: ([z, y, x])' \n```", "```py\n>>> lambdastr((x, (y, z)), x + y)\n'lambda _0,_1: (lambda x,y,z: (x + y))(_0,_1[0],_1[1])' \n```", "```py\nsympy.utilities.lambdify.lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=False, cse=False, docstring_limit=1000)\n```", "```py\n> >>> from sympy import Eq\n> \n> >>> from sympy.abc import x, y, z \n> ```", "```py\n> >>> f = lambdify(x, x + 1)\n> \n> >>> f(1)\n> \n> 2\n> \n> >>> f = lambdify([x], x + 1)\n> \n> >>> f(1)\n> \n> 2 \n> ```", "```py\n> >>> f = lambdify([x, y], x + y)\n> \n> >>> f(1, 1)\n> \n> 2 \n> ```", "```py\n> >>> f = lambdify([(x, y, z)], Eq(z**2, x**2 + y**2))\n> \n> >>> f((3, 4, 5))\n> \n> True \n> ```", "```py\n> >>> f = lambdify([x, (y, z)], x + y + z)\n> \n> >>> f(1, (2, 3))\n> \n> 6 \n> ```", "```py\n> >>> f = lambdify(x, [x, [x + 1, x + 2]])\n> \n> >>> f(1)\n> \n> [1, [2, 3]] \n> ```", "```py\n> >>> from sympy import Matrix\n> \n> >>> f = lambdify(x, Matrix([x, x + 1]))\n> \n> >>> f(1)\n> \n> [[1]\n> \n> [2]] \n> ```", "```py\n>>> from sympy import sin, cos, symbols, lambdify\n>>> import numpy as np\n>>> x = symbols('x')\n>>> expr = sin(x) + cos(x)\n>>> expr\nsin(x) + cos(x)\n>>> f = lambdify(x, expr, 'numpy')\n>>> a = np.array([1, 2])\n>>> f(a)\n[1.38177329 0.49315059] \n```", "```py\n>>> from sympy.utilities.lambdify import implemented_function\n>>> from sympy import sqrt, sin, Matrix\n>>> from sympy import Function\n>>> from sympy.abc import w, x, y, z \n```", "```py\n>>> f = lambdify(x, x**2)\n>>> f(2)\n4\n>>> f = lambdify((x, y, z), [z, y, x])\n>>> f(1,2,3)\n[3, 2, 1]\n>>> f = lambdify(x, sqrt(x))\n>>> f(4)\n2.0\n>>> f = lambdify((x, y), sin(x*y)**2)\n>>> f(0, 5)\n0.0\n>>> row = lambdify((x, y), Matrix((x, x + y)).T, modules='sympy')\n>>> row(1, 2)\nMatrix([[1, 3]]) \n```", "```py\n>>> f = lambdify(x, sin(x), 'mpmath')\n>>> f(1)\n0.8414709848078965 \n```", "```py\n>>> f = lambdify((x, (y, z)), x + y)\n>>> f(1, (2, 4))\n3 \n```", "```py\n>>> from sympy.utilities.iterables import flatten\n>>> args = w, (x, (y, z))\n>>> vals = 1, (2, (3, 4))\n>>> f = lambdify(flatten(args), w + x + y + z)\n>>> f(*flatten(vals))\n10 \n```", "```py\n>>> f = implemented_function(Function('f'), lambda x: x+1)\n>>> func = lambdify(x, f(x))\n>>> func(4)\n5 \n```", "```py\n>>> import tensorflow as tf\n>>> from sympy import Max, sin, lambdify\n>>> from sympy.abc import x \n```", "```py\n>>> f = Max(x, sin(x))\n>>> func = lambdify(x, f, 'tensorflow') \n```", "```py\n>>> tf.compat.v1.enable_eager_execution() \n```", "```py\n>>> result = func(tf.constant(1.0))\n>>> print(result)\ntf.Tensor(1.0, shape=(), dtype=float32)\n>>> print(result.__class__)\n<class 'tensorflow.python.framework.ops.EagerTensor'> \n```", "```py\n>>> result.numpy()\n1.0 \n```", "```py\n>>> var = tf.Variable(2.0)\n>>> result = func(var) # also works for tf.Variable and tf.Placeholder\n>>> result.numpy()\n2.0 \n```", "```py\n>>> tensor = tf.constant([[1.0, 2.0], [3.0, 4.0]])\n>>> result = func(tensor)\n>>> result.numpy()\n[[1\\. 2.]\n [3\\. 4.]] \n```", "```py\n    >>> import numpy\n    >>> from sympy import Piecewise\n    >>> from sympy.testing.pytest import ignore_warnings\n    >>> f = lambdify(x, Piecewise((x, x <= 1), (1/x, x > 1)), \"numpy\") \n    ```", "```py\n    >>> with ignore_warnings(RuntimeWarning):\n    ...     f(numpy.array([-1, 0, 1, 2]))\n    [-1\\.   0\\.   1\\.   0.5] \n    ```", "```py\n    >>> f(0)\n    Traceback (most recent call last):\n      ...\n    ZeroDivisionError: division by zero \n    ```", "```py\n    >>> with ignore_warnings(RuntimeWarning):\n    ...     float(f(numpy.array([0])))\n    0.0 \n    ```", "```py\n    >>> f = lambdify(x, Piecewise((x, x <= 1), (1/x, x > 1)), \"math\")\n    >>> f(0)\n    0 \n    ```", "```py\n# sin_cos_sympy.py\n\nfrom sympy.functions.elementary.trigonometric import (cos, sin)\n\ndef sin_cos(x):\n    return sin(x) + cos(x) \n```", "```py\n# sin_cos_numpy.py\n\nfrom numpy import sin, cos\n\ndef sin_cos(x):\n    return sin(x) + cos(x) \n```", "```py\n>>> from sin_cos_sympy import sin_cos \n>>> sin_cos(1) \ncos(1) + sin(1) \n```", "```py\n>>> from sin_cos_numpy import sin_cos \n>>> sin_cos(1) \n1.38177329068 \n```", "```py\n>>> import sympy\n>>> module_dictionary = {'sin': sympy.sin, 'cos': sympy.cos}\n>>> exec('''\n... def sin_cos(x):\n...     return sin(x) + cos(x)\n... ''', module_dictionary)\n>>> sin_cos = module_dictionary['sin_cos']\n>>> sin_cos(1)\ncos(1) + sin(1) \n```", "```py\n>>> import numpy\n>>> module_dictionary = {'sin': numpy.sin, 'cos': numpy.cos}\n>>> exec('''\n... def sin_cos(x):\n...     return sin(x) + cos(x)\n... ''', module_dictionary)\n>>> sin_cos = module_dictionary['sin_cos']\n>>> sin_cos(1)\n1.38177329068 \n```", "```pyexec``s that string with the module globals namespace and returns ``func```", "```py\n>>> f = lambdify(x, sin(x) + cos(x))\n>>> import inspect\n>>> print(inspect.getsource(f))\ndef _lambdifygenerated(x):\n return sin(x) + cos(x) \n```", "```py\n>>> f.__globals__['sin']\n<ufunc 'sin'>\n>>> f.__globals__['cos']\n<ufunc 'cos'>\n>>> f.__globals__['sin'] is numpy.sin\nTrue \n```", "```py\n>>> def mysin(x):\n...     print('taking the sin of', x)\n...     return numpy.sin(x)\n...\n>>> f = lambdify(x, sin(x), [{'sin': mysin}, 'numpy'])\n>>> f(1)\ntaking the sin of 1\n0.8414709848078965 \n```", "```py\n>>> from sympy.abc import x\n>>> f = lambdify(x, x + 1, 'numpy') \n```", "```py\n>>> import numpy\n>>> a = numpy.array([1, 2])\n>>> f(a)\n[2 3] \n```", "```py\n>>> f(x + 1)\nx + 2 \n```", "```py\n>>> from sympy import sin\n>>> g = lambdify(x, x + sin(x), 'numpy') \n```", "```py\n>>> g(a)\n[1.84147098 2.90929743] \n```", "```py\n>>> g(x + 1)\nTraceback (most recent call last):\n...\nTypeError: loop of ufunc does not support argument 0 of type Add which has\n no callable sin method \n```"]