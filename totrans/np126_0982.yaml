- en: numpy.partition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.partition.html](https://numpy.org/doc/1.26/reference/generated/numpy.partition.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return a partitioned copy of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Creates a copy of the array with its elements rearranged in such a way that
    the value of the element in k-th position is in the position the value would be
    in a sorted array. In the partitioned array, all elements before the k-th element
    are less than or equal to that element, and all the elements after the k-th element
    are greater than or equal to that element. The ordering of the elements in the
    two partitions is undefined.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Array to be sorted.
  prefs: []
  type: TYPE_NORMAL
- en: '**kth**int or sequence of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Element index to partition by. The k-th value of the element will be in its
    final sorted position and all smaller elements will be moved before it and all
    equal or greater elements behind it. The order of all elements in the partitions
    is undefined. If provided with a sequence of k-th it will partition all elements
    indexed by k-th of them into their sorted position at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.22.0: Passing booleans as index is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which to sort. If None, the array is flattened before sorting. The
    default is -1, which sorts along the last axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**kind**{‘introselect’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Selection algorithm. Default is ‘introselect’.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**str or list of str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: When *a* is an array with fields defined, this argument specifies which fields
    to compare first, second, etc. A single field can be specified as a string. Not
    all fields need be specified, but unspecified fields will still be used, in the
    order in which they come up in the dtype, to break ties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**partitioned_array**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of the same type and shape as *a*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.partition`](numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")'
  prefs: []
  type: TYPE_NORMAL
- en: Method to sort an array in-place.
  prefs: []
  type: TYPE_NORMAL
- en: '[`argpartition`](numpy.argpartition.html#numpy.argpartition "numpy.argpartition")'
  prefs: []
  type: TYPE_NORMAL
- en: Indirect partition.
  prefs: []
  type: TYPE_NORMAL
- en: '[`sort`](numpy.sort.html#numpy.sort "numpy.sort")'
  prefs: []
  type: TYPE_NORMAL
- en: Full sorting
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The various selection algorithms are characterized by their average speed,
    worst case performance, work space size, and whether they are stable. A stable
    sort keeps items with the same key in the same relative order. The available algorithms
    have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| kind | speed | worst case | work space | stable |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ‘introselect’ | 1 | O(n) | 0 | no |'
  prefs: []
  type: TYPE_TB
- en: All the partition algorithms make temporary copies of the data when partitioning
    along any but the last axis. Consequently, partitioning along the last axis is
    faster and uses less space than partitioning along any other axis.
  prefs: []
  type: TYPE_NORMAL
- en: The sort order for complex numbers is lexicographic. If both the real and imaginary
    parts are non-nan then the order is determined by the real parts except when they
    are equal, in which case the order is determined by the imaginary parts.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`p[4]` is 2; all elements in `p[:4]` are less than or equal to `p[4]`, and
    all elements in `p[5:]` are greater than or equal to `p[4]`. The partition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The next example shows the use of multiple values passed to *kth*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`p2[4]` is 2 and `p2[8]` is 5\. All elements in `p2[:4]` are less than or equal
    to `p2[4]`, all elements in `p2[5:8]` are greater than or equal to `p2[4]` and
    less than or equal to `p2[8]`, and all elements in `p2[9:]` are greater than or
    equal to `p2[8]`. The partition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
