- en: What is NumPy?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是NumPy？
- en: 原文：[https://numpy.org/doc/1.26/user/whatisnumpy.html](https://numpy.org/doc/1.26/user/whatisnumpy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/user/whatisnumpy.html](https://numpy.org/doc/1.26/user/whatisnumpy.html)
- en: NumPy is the fundamental package for scientific computing in Python. It is a
    Python library that provides a multidimensional array object, various derived
    objects (such as masked arrays and matrices), and an assortment of routines for
    fast operations on arrays, including mathematical, logical, shape manipulation,
    sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic
    statistical operations, random simulation and much more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是Python中科学计算的基础包。 这是一个提供多维数组对象、各种派生对象（如掩码数组和矩阵）以及一系列用于数组快速操作的例程的Python库，包括数学、逻辑、形状操作、排序、选择、I/O、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等。
- en: 'At the core of the NumPy package, is the *ndarray* object. This encapsulates
    *n*-dimensional arrays of homogeneous data types, with many operations being performed
    in compiled code for performance. There are several important differences between
    NumPy arrays and the standard Python sequences:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy包的核心是*ndarray*对象。这个对象封装了* n *维同种数据类型的数组，许多操作是通过编译的代码执行以提高性能。 NumPy数组和标准Python序列之间有几个重要区别：
- en: NumPy arrays have a fixed size at creation, unlike Python lists (which can grow
    dynamically). Changing the size of an *ndarray* will create a new array and delete
    the original.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy数组在创建时具有固定大小，不像Python列表（可以动态增长）。 更改*ndarray*的大小将创建一个新数组并删除原始数组。
- en: 'The elements in a NumPy array are all required to be of the same data type,
    and thus will be the same size in memory. The exception: one can have arrays of
    (Python, including NumPy) objects, thereby allowing for arrays of different sized
    elements.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy数组中的元素都必须是相同的数据类型，因此在内存中大小相同。 例外：可以有（Python，包括NumPy）对象数组，从而允许具有不同大小元素的数组。
- en: NumPy arrays facilitate advanced mathematical and other types of operations
    on large numbers of data. Typically, such operations are executed more efficiently
    and with less code than is possible using Python’s built-in sequences.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy数组可以在大量数据上执行高级数学和其他类型的操作。 通常，这些操作比使用Python的内置序列可能更高效，而且代码较少。
- en: A growing plethora of scientific and mathematical Python-based packages are
    using NumPy arrays; though these typically support Python-sequence input, they
    convert such input to NumPy arrays prior to processing, and they often output
    NumPy arrays. In other words, in order to efficiently use much (perhaps even most)
    of today’s scientific/mathematical Python-based software, just knowing how to
    use Python’s built-in sequence types is insufficient - one also needs to know
    how to use NumPy arrays.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 越来越多的基于科学和数学的Python包正在使用NumPy数组； 尽管这些包通常支持Python序列输入，但在处理之前会将这些输入转换为NumPy数组，并且它们通常输出NumPy数组。
    换句话说，为了有效地使用当今大部分科学/数学基于Python的软件，仅仅了解如何使用Python的内置序列类型是不够的 - 还需要知道如何使用NumPy数组。
- en: 'The points about sequence size and speed are particularly important in scientific
    computing. As a simple example, consider the case of multiplying each element
    in a 1-D sequence with the corresponding element in another sequence of the same
    length. If the data are stored in two Python lists, `a` and `b`, we could iterate
    over each element:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于序列大小和速度的观点在科学计算中尤为重要。举一个简单的例子，考虑将1-D序列中的每个元素与另一个相同长度的序列中的相应元素相乘的情况。如果数据存储在两个Python列表`a`和`b`中，我们可以遍历每个元素：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This produces the correct answer, but if `a` and `b` each contain millions of
    numbers, we will pay the price for the inefficiencies of looping in Python. We
    could accomplish the same task much more quickly in C by writing (for clarity
    we neglect variable declarations and initializations, memory allocation, etc.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以得出正确的答案，但如果`a`和`b`中各包含数百万个数字，那么我们将为在Python中循环的低效率付出代价。 我们可以在C中写得更快完成相同的任务（出于清晰起见，我们忽略变量声明、初始化、内存分配等）
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This saves all the overhead involved in interpreting the Python code and manipulating
    Python objects, but at the expense of the benefits gained from coding in Python.
    Furthermore, the coding work required increases with the dimensionality of our
    data. In the case of a 2-D array, for example, the C code (abridged as before)
    expands to
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这节省了解释 Python 代码并操纵 Python 对象所涉及的所有开销，但代价是放弃了使用 Python 编程获得的好处。此外，随着数据维度的增加，所需的编码工作也会增加。例如，在
    2-D 数组的情况下，之前缩写为 C 代码的代码会扩展到
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'NumPy gives us the best of both worlds: element-by-element operations are the
    “default mode” when an *ndarray* is involved, but the element-by-element operation
    is speedily executed by pre-compiled C code. In NumPy'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy让我们兼具两种优势：当涉及*ndarray*时，逐点操作是“默认模式”，但逐点操作由预编译的 C 代码迅速执行。在 NumPy 中
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'does what the earlier examples do, at near-C speeds, but with the code simplicity
    we expect from something based on Python. Indeed, the NumPy idiom is even simpler!
    This last example illustrates two of NumPy’s features which are the basis of much
    of its power: vectorization and broadcasting.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 做了之前的示例所做的事情，以接近 C 速度进行，但具有基于 Python 的代码简洁性。事实上，NumPy 的习语甚至更简单！这个最后的示例展示了 NumPy
    许多强大功能的基础：矢量化和广播。
- en: '## Why is NumPy Fast?'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '## 为什么 NumPy 如此快速？'
- en: 'Vectorization describes the absence of any explicit looping, indexing, etc.,
    in the code - these things are taking place, of course, just “behind the scenes”
    in optimized, pre-compiled C code. Vectorized code has many advantages, among
    which are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量化描述代码中的任何显式循环、索引等都不存在——当然，这些事情当然存在，只是以优化的、预编译的 C 代码“在幕后”方式进行。矢量化代码有许多优势，其中包括：
- en: vectorized code is more concise and easier to read
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量化代码更简洁，更易读
- en: fewer lines of code generally means fewer bugs
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更少的代码行通常意味着更少的错误
- en: the code more closely resembles standard mathematical notation (making it easier,
    typically, to correctly code mathematical constructs)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更接近标准数学符号表示法（通常使数学构造的正确编码更容易）
- en: vectorization results in more “Pythonic” code. Without vectorization, our code
    would be littered with inefficient and difficult to read `for` loops.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量化导致了更“Pythonic”的代码。没有矢量化，我们的代码将充斥着效率低下且难以阅读的`for`循环。
- en: Broadcasting is the term used to describe the implicit element-by-element behavior
    of operations; generally speaking, in NumPy all operations, not just arithmetic
    operations, but logical, bit-wise, functional, etc., behave in this implicit element-by-element
    fashion, i.e., they broadcast. Moreover, in the example above, `a` and `b` could
    be multidimensional arrays of the same shape, or a scalar and an array, or even
    two arrays of with different shapes, provided that the smaller array is “expandable”
    to the shape of the larger in such a way that the resulting broadcast is unambiguous.
    For detailed “rules” of broadcasting see [Broadcasting](basics.broadcasting.html#basics-broadcasting).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 广播是用来描述操作的隐式逐点行为的术语；一般来说，在 NumPy 中，所有操作（不仅仅是算术操作，还有逻辑、位运算、函数等）都以这种隐式逐点方式行为，即它们进行广播。此外，在上面的示例中，`a`
    和 `b` 可能是相同形状的多维数组，或者是标量和数组，甚至是两个形状不同的数组，只要较小的数组可以“扩展”到大数组的形状，使得结果的广播是明确的。有关广播的详细“规则”请参见[Broadcasting](basics.broadcasting.html#basics-broadcasting)。
- en: Who Else Uses NumPy?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁还在使用 NumPy？
- en: NumPy fully supports an object-oriented approach, starting, once again, with
    *ndarray*. For example, *ndarray* is a class, possessing numerous methods and
    attributes. Many of its methods are mirrored by functions in the outer-most NumPy
    namespace, allowing the programmer to code in whichever paradigm they prefer.
    This flexibility has allowed the NumPy array dialect and NumPy *ndarray* class
    to become the *de-facto* language of multi-dimensional data interchange used in
    Python.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 充分支持面向对象的方法，再次从 *ndarray* 开始。例如，*ndarray* 是一个类，拥有 numerous 方法和属性。它的许多方法与
    NumPy 最外层命名空间中的函数相对应，允许程序员使用他们偏好的任何范例编码。这种灵活性使得 NumPy 数组方言和 NumPy *ndarray* 类成为
    Python 中用于多维数据交换的*事实上*语言。
- en: '## Why is NumPy Fast?'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '## 为什么 NumPy 如此快速？'
- en: 'Vectorization describes the absence of any explicit looping, indexing, etc.,
    in the code - these things are taking place, of course, just “behind the scenes”
    in optimized, pre-compiled C code. Vectorized code has many advantages, among
    which are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量化描述代码中的任何显式循环、索引等都不存在——当然，这些事情当然存在，只是以优化的、预编译的 C 代码“在幕后”方式进行。矢量化代码有许多优势，其中包括：
- en: vectorized code is more concise and easier to read
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量化的代码更简洁，更易读。
- en: fewer lines of code generally means fewer bugs
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更少的代码行通常意味着更少的错误。
- en: the code more closely resembles standard mathematical notation (making it easier,
    typically, to correctly code mathematical constructs)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码更接近标准数学表示法（通常更容易正确编写数学结构）。
- en: vectorization results in more “Pythonic” code. Without vectorization, our code
    would be littered with inefficient and difficult to read `for` loops.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量化导致更“Pythonic”的代码。没有向量化，我们的代码将充满效率低下且难以阅读的`for`循环。
- en: Broadcasting is the term used to describe the implicit element-by-element behavior
    of operations; generally speaking, in NumPy all operations, not just arithmetic
    operations, but logical, bit-wise, functional, etc., behave in this implicit element-by-element
    fashion, i.e., they broadcast. Moreover, in the example above, `a` and `b` could
    be multidimensional arrays of the same shape, or a scalar and an array, or even
    two arrays of with different shapes, provided that the smaller array is “expandable”
    to the shape of the larger in such a way that the resulting broadcast is unambiguous.
    For detailed “rules” of broadcasting see [Broadcasting](basics.broadcasting.html#basics-broadcasting).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 广播是用来描述操作的隐式逐元素行为的术语；一般来说，在 NumPy 中所有操作，不仅仅是算术操作，还包括逻辑、位操作、函数等等，都以这种隐式逐元素的方式进行，即它们进行广播。此外，在上面的示例中，`a`
    和 `b` 可以是相同形状的多维数组，或者是标量和数组，甚至是两个形状不同的数组，只要较小的数组可以“扩展”到较大数组的形状，使得结果的广播不会产生歧义即可。有关广播的详细“规则”，请参阅[广播](basics.broadcasting.html#basics-broadcasting)。
- en: Who Else Uses NumPy?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁还在使用 NumPy？
- en: NumPy fully supports an object-oriented approach, starting, once again, with
    *ndarray*. For example, *ndarray* is a class, possessing numerous methods and
    attributes. Many of its methods are mirrored by functions in the outer-most NumPy
    namespace, allowing the programmer to code in whichever paradigm they prefer.
    This flexibility has allowed the NumPy array dialect and NumPy *ndarray* class
    to become the *de-facto* language of multi-dimensional data interchange used in
    Python.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 完全支持面向对象的方法，再次以 *ndarray* 为例。例如，*ndarray* 是一个类，拥有许多方法和属性。其中许多方法在 NumPy
    最外层的命名空间中都有相应的函数，使程序员可以按照他们喜欢的范式编码。这种灵活性使得 NumPy 数组方言和 NumPy *ndarray* 类成为 Python
    中多维数据交换的*事实标准*语言。
