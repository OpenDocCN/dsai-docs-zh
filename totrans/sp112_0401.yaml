- en: scipy.ndimage.binary_opening
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.binary_opening.html#scipy.ndimage.binary_opening](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.binary_opening.html#scipy.ndimage.binary_opening)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional binary opening with the given structuring element.
  prefs: []
  type: TYPE_NORMAL
- en: The *opening* of an input image by a structuring element is the *dilation* of
    the *erosion* of the image by the structuring element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Binary array_like to be opened. Non-zero (True) elements form the subset to
    be opened.
  prefs: []
  type: TYPE_NORMAL
- en: '**structure**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Structuring element used for the opening. Non-zero elements are considered True.
    If no structuring element is provided an element is generated with a square connectivity
    equal to one (i.e., only nearest neighbors are connected to the center, diagonally-connected
    elements are not considered neighbors).
  prefs: []
  type: TYPE_NORMAL
- en: '**iterations**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The erosion step of the opening, then the dilation step are each repeated *iterations*
    times (one, by default). If *iterations* is less than 1, each operation is repeated
    until the result does not change anymore. Only an integer of iterations is accepted.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Array of the same shape as input, into which the output is placed. By default,
    a new array is created.
  prefs: []
  type: TYPE_NORMAL
- en: '**origin**int or tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Placement of the filter, by default 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**mask**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If a mask is given, only those elements with a True value at the corresponding
    mask element are modified at each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**border_value**int (cast to 0 or 1), optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value at the border in the output array.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**brute_force**boolean, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Memory condition: if False, only the pixels whose value was changed in the
    last iteration are tracked as candidates to be updated in the current iteration;
    if true all pixels are considered as candidates for update, regardless of what
    happened in the previous iteration. False by default.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**binary_opening**ndarray of bools'
  prefs: []
  type: TYPE_NORMAL
- en: Opening of the input by the structuring element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`grey_opening`](scipy.ndimage.grey_opening.html#scipy.ndimage.grey_opening
    "scipy.ndimage.grey_opening"), [`binary_closing`](scipy.ndimage.binary_closing.html#scipy.ndimage.binary_closing
    "scipy.ndimage.binary_closing"), [`binary_erosion`](scipy.ndimage.binary_erosion.html#scipy.ndimage.binary_erosion
    "scipy.ndimage.binary_erosion"), [`binary_dilation`](scipy.ndimage.binary_dilation.html#scipy.ndimage.binary_dilation
    "scipy.ndimage.binary_dilation")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`generate_binary_structure`](scipy.ndimage.generate_binary_structure.html#scipy.ndimage.generate_binary_structure
    "scipy.ndimage.generate_binary_structure")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '*Opening* [[1]](#ra062f0d4def5-1) is a mathematical morphology operation [[2]](#ra062f0d4def5-2)
    that consists in the succession of an erosion and a dilation of the input with
    the same structuring element. Opening, therefore, removes objects smaller than
    the structuring element.'
  prefs: []
  type: TYPE_NORMAL
- en: Together with *closing* ([`binary_closing`](scipy.ndimage.binary_closing.html#scipy.ndimage.binary_closing
    "scipy.ndimage.binary_closing")), opening can be used for noise removal.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Opening_%28morphology%29](https://en.wikipedia.org/wiki/Opening_%28morphology%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Mathematical_morphology](https://en.wikipedia.org/wiki/Mathematical_morphology)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
