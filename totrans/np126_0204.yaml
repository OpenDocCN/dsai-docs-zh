- en: numpy.r_
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.r_.html](https://numpy.org/doc/1.26/reference/generated/numpy.r_.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Translates slice objects to concatenation along the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple way to build up arrays quickly. There are two use cases.
  prefs: []
  type: TYPE_NORMAL
- en: If the index expression contains comma separated arrays, then stack them along
    their first axis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the index expression contains slice notation or scalars then create a 1-D
    array with a range indicated by the slice notation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If slice notation is used, the syntax `start:stop:step` is equivalent to `np.arange(start,
    stop, step)` inside of the brackets. However, if `step` is an imaginary number
    (i.e. 100j) then its integer portion is interpreted as a number-of-points desired
    and the start and stop are inclusive. In other words `start:stop:stepj` is interpreted
    as `np.linspace(start, stop, step, endpoint=1)` inside of the brackets. After
    expansion of slice notation, all comma separated sequences are concatenated together.
  prefs: []
  type: TYPE_NORMAL
- en: Optional character strings placed as the first element of the index expression
    can be used to change the output. The strings ‘r’ or ‘c’ result in matrix output.
    If the result is 1-D and ‘r’ is specified a 1 x N (row) matrix is produced. If
    the result is 1-D and ‘c’ is specified, then a N x 1 (column) matrix is produced.
    If the result is 2-D then both provide the same matrix result.
  prefs: []
  type: TYPE_NORMAL
- en: A string integer specifies which axis to stack multiple comma separated arrays
    along. A string of two comma-separated integers allows indication of the minimum
    number of dimensions to force each entry into as the second integer (the axis
    to concatenate along is still the first integer).
  prefs: []
  type: TYPE_NORMAL
- en: A string with three comma-separated integers allows specification of the axis
    to concatenate along, the minimum number of dimensions to force the entries to,
    and which axis should contain the start of the arrays which are less than the
    specified number of dimensions. In other words the third integer allows you to
    specify where the 1’s should be placed in the shape of the arrays that have their
    shapes upgraded. By default, they are placed in the front of the shape tuple.
    The third argument allows you to specify where the start of the array should be
    instead. Thus, a third argument of ‘0’ would place the 1’s at the end of the array
    shape. Negative integers specify where in the new shape tuple the last dimension
    of upgraded arrays should be placed, so the default is ‘-1’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Not a function, so takes no parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A concatenated ndarray or matrix.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
  prefs: []
  type: TYPE_NORMAL
- en: Join a sequence of arrays along an existing axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`c_`](numpy.c_.html#numpy.c_ "numpy.c_")'
  prefs: []
  type: TYPE_NORMAL
- en: Translates slice objects to concatenation along the second axis.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: String integers specify the axis to concatenate along or the minimum number
    of dimensions to force entries into.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using ‘r’ or ‘c’ as a first string argument creates a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
