- en: scipy.optimize.minimize_scalar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.minimize_scalar.html#scipy.optimize.minimize_scalar)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Local minimization of scalar function of one variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fun**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Objective function. Scalar function, must return a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '**bracket**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: For methods ‘brent’ and ‘golden’, [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket") defines the bracketing interval and is required. Either
    a triple `(xa, xb, xc)` satisfying `xa < xb < xc` and `func(xb) < func(xa) and 
    func(xb) < func(xc)`, or a pair `(xa, xb)` to be used as initial points for a
    downhill bracket search (see [`scipy.optimize.bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket")). The minimizer `res.x` will not necessarily satisfy
    `xa <= res.x <= xb`.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds**sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: For method ‘bounded’, *bounds* is mandatory and must have two finite items corresponding
    to the optimization bounds.
  prefs: []
  type: TYPE_NORMAL
- en: '**args**tuple, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra arguments passed to the objective function.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type of solver. Should be one of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Brent](../optimize.minimize_scalar-brent.html#optimize-minimize-scalar-brent)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Bounded](../optimize.minimize_scalar-bounded.html#optimize-minimize-scalar-bounded)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Golden](../optimize.minimize_scalar-golden.html#optimize-minimize-scalar-golden)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: custom - a callable object (added in version 0.14.0), see below
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is “Bounded” if bounds are provided and “Brent” otherwise. See the ‘Notes’
    section for details of each solver.
  prefs: []
  type: TYPE_NORMAL
- en: '**tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance for termination. For detailed control, use solver-specific options.
  prefs: []
  type: TYPE_NORMAL
- en: '**options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of solver options.
  prefs: []
  type: TYPE_NORMAL
- en: maxiterint
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Maximum number of iterations to perform.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: dispbool
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Set to True to print convergence messages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See [`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options") for solver-specific options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**OptimizeResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'The optimization result represented as a `OptimizeResult` object. Important
    attributes are: `x` the solution array, `success` a Boolean flag indicating if
    the optimizer exited successfully and `message` which describes the cause of the
    termination. See [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") for a description of other attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize "scipy.optimize.minimize")'
  prefs: []
  type: TYPE_NORMAL
- en: Interface to minimization algorithms for scalar multivariate functions
  prefs: []
  type: TYPE_NORMAL
- en: '[`show_options`](scipy.optimize.show_options.html#scipy.optimize.show_options
    "scipy.optimize.show_options")'
  prefs: []
  type: TYPE_NORMAL
- en: Additional options accepted by the solvers
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This section describes the available solvers that can be selected by the ‘method’
    parameter. The default method is the `"Bounded"` Brent method if *bounds* are
    passed and unbounded `"Brent"` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Method [Brent](../optimize.minimize_scalar-brent.html#optimize-minimize-scalar-brent)
    uses Brent’s algorithm [[1]](#rdd22a8c46f25-1) to find a local minimum. The algorithm
    uses inverse parabolic interpolation when possible to speed up convergence of
    the golden section method.
  prefs: []
  type: TYPE_NORMAL
- en: Method [Golden](../optimize.minimize_scalar-golden.html#optimize-minimize-scalar-golden)
    uses the golden section search technique [[1]](#rdd22a8c46f25-1). It uses analog
    of the bisection method to decrease the bracketed interval. It is usually preferable
    to use the *Brent* method.
  prefs: []
  type: TYPE_NORMAL
- en: Method [Bounded](../optimize.minimize_scalar-bounded.html#optimize-minimize-scalar-bounded)
    can perform bounded minimization [[2]](#rdd22a8c46f25-2) [[3]](#rdd22a8c46f25-3).
    It uses the Brent method to find a local minimum in the interval x1 < xopt < x2.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Brent and Golden methods do not guarantee success unless a valid
    `bracket` triple is provided. If a three-point bracket cannot be found, consider
    [`scipy.optimize.minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize"). Also, all methods are intended only for local minimization.
    When the function of interest has more than one local minimum, consider [Global
    optimization](../optimize.html#global-optimization).
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom minimizers**'
  prefs: []
  type: TYPE_NORMAL
- en: It may be useful to pass a custom minimization method, for example when using
    some library frontend to minimize_scalar. You can simply pass a callable as the
    `method` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The callable is called as `method(fun, args, **kwargs, **options)` where `kwargs`
    corresponds to any other parameters passed to [`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") (such as [`bracket`](scipy.optimize.bracket.html#scipy.optimize.bracket
    "scipy.optimize.bracket"), *tol*, etc.), except the *options* dict, which has
    its contents also passed as *method* parameters pair by pair. The method shall
    return an [`OptimizeResult`](scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") object.
  prefs: []
  type: TYPE_NORMAL
- en: The provided *method* callable must be able to accept (and possibly ignore)
    arbitrary parameters; the set of parameters accepted by [`minimize`](scipy.optimize.minimize.html#scipy.optimize.minimize
    "scipy.optimize.minimize") may expand in future versions and then these parameters
    will be passed to the method. You can find an example in the scipy.optimize tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: Press, W., S.A. Teukolsky, W.T. Vetterling, and B.P. Flannery. Numerical Recipes
    in C. Cambridge University Press.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: Forsythe, G.E., M. A. Malcolm, and C. B. Moler. “Computer Methods for Mathematical
    Computations.” Prentice-Hall Series in Automatic Computation 259 (1977).
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: Brent, Richard P. Algorithms for Minimization Without Derivatives. Courier Corporation,
    2013.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Consider the problem of minimizing the following function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the *Brent* method, we find the local minimum as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The minimizer is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the *Bounded* method, we find a local minimum with specified bounds as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
