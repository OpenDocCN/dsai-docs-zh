- en: scipy.optimize.OptimizeResult
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.optimize.OptimizeResult.html#scipy.optimize.OptimizeResult)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Represents the optimization result.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the specific solver being used, [`OptimizeResult`](#scipy.optimize.OptimizeResult
    "scipy.optimize.OptimizeResult") may not have all attributes listed here, and
    they may have additional attributes not listed here. Since this class is essentially
    a subclass of dict with attribute accessors, one can see which attributes are
    available using the [`OptimizeResult.keys`](scipy.optimize.OptimizeResult.keys.html#scipy.optimize.OptimizeResult.keys
    "scipy.optimize.OptimizeResult.keys") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The solution of the optimization.
  prefs: []
  type: TYPE_NORMAL
- en: '**success**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not the optimizer exited successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '**status**int'
  prefs: []
  type: TYPE_NORMAL
- en: Termination status of the optimizer. Its value depends on the underlying solver.
    Refer to *message* for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**message**str'
  prefs: []
  type: TYPE_NORMAL
- en: Description of the cause of the termination.
  prefs: []
  type: TYPE_NORMAL
- en: '**fun, jac, hess: ndarray**'
  prefs: []
  type: TYPE_NORMAL
- en: Values of objective function, its Jacobian and its Hessian (if available). The
    Hessians may be approximations, see the documentation of the function in question.
  prefs: []
  type: TYPE_NORMAL
- en: '**hess_inv**object'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse of the objective function’s Hessian; may be an approximation. Not available
    for all solvers. The type of this attribute may be either np.ndarray or scipy.sparse.linalg.LinearOperator.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfev, njev, nhev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the objective functions and of its Jacobian and Hessian.
  prefs: []
  type: TYPE_NORMAL
- en: '**nit**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of iterations performed by the optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: '**maxcv**float'
  prefs: []
  type: TYPE_NORMAL
- en: The maximum constraint violation.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__getitem__`](scipy.optimize.OptimizeResult.__getitem__.html#scipy.optimize.OptimizeResult.__getitem__
    "scipy.optimize.OptimizeResult.__getitem__") | x.__getitem__(y) <==> x[y] |'
  prefs: []
  type: TYPE_TB
- en: '| [`__len__`](scipy.optimize.OptimizeResult.__len__.html#scipy.optimize.OptimizeResult.__len__
    "scipy.optimize.OptimizeResult.__len__")(/) | Return len(self). |'
  prefs: []
  type: TYPE_TB
- en: '| [`clear`](scipy.optimize.OptimizeResult.clear.html#scipy.optimize.OptimizeResult.clear
    "scipy.optimize.OptimizeResult.clear")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](scipy.optimize.OptimizeResult.copy.html#scipy.optimize.OptimizeResult.copy
    "scipy.optimize.OptimizeResult.copy")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`fromkeys`](scipy.optimize.OptimizeResult.fromkeys.html#scipy.optimize.OptimizeResult.fromkeys
    "scipy.optimize.OptimizeResult.fromkeys")(iterable[, value]) | Create a new dictionary
    with keys from iterable and values set to value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get`](scipy.optimize.OptimizeResult.get.html#scipy.optimize.OptimizeResult.get
    "scipy.optimize.OptimizeResult.get")(key[, default]) | Return the value for key
    if key is in the dictionary, else default. |'
  prefs: []
  type: TYPE_TB
- en: '| [`items`](scipy.optimize.OptimizeResult.items.html#scipy.optimize.OptimizeResult.items
    "scipy.optimize.OptimizeResult.items")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`keys`](scipy.optimize.OptimizeResult.keys.html#scipy.optimize.OptimizeResult.keys
    "scipy.optimize.OptimizeResult.keys")() |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`pop`](scipy.optimize.OptimizeResult.pop.html#scipy.optimize.OptimizeResult.pop
    "scipy.optimize.OptimizeResult.pop")(key[, default]) | If key is not found, default
    is returned if given, otherwise KeyError is raised |'
  prefs: []
  type: TYPE_TB
- en: '| [`popitem`](scipy.optimize.OptimizeResult.popitem.html#scipy.optimize.OptimizeResult.popitem
    "scipy.optimize.OptimizeResult.popitem")(/) | Remove and return a (key, value)
    pair as a 2-tuple. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setdefault`](scipy.optimize.OptimizeResult.setdefault.html#scipy.optimize.OptimizeResult.setdefault
    "scipy.optimize.OptimizeResult.setdefault")(key[, default]) | Insert key with
    a value of default if key is not in the dictionary. |'
  prefs: []
  type: TYPE_TB
- en: '| [`update`](scipy.optimize.OptimizeResult.update.html#scipy.optimize.OptimizeResult.update
    "scipy.optimize.OptimizeResult.update")([E, ]**F) | If E is present and has a
    .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a
    .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed
    by: for k in F: D[k] = F[k] |'
  prefs: []
  type: TYPE_TB
- en: '| [`values`](scipy.optimize.OptimizeResult.values.html#scipy.optimize.OptimizeResult.values
    "scipy.optimize.OptimizeResult.values")() |  |'
  prefs: []
  type: TYPE_TB
