- en: scipy.spatial.HalfspaceIntersection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.HalfspaceIntersection.html#scipy.spatial.HalfspaceIntersection](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.spatial.HalfspaceIntersection.html#scipy.spatial.HalfspaceIntersection)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Halfspace intersections in N dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**halfspaces**ndarray of floats, shape (nineq, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: Stacked Inequalities of the form Ax + b <= 0 in format [A; b]
  prefs: []
  type: TYPE_NORMAL
- en: '**interior_point**ndarray of floats, shape (ndim,)'
  prefs: []
  type: TYPE_NORMAL
- en: Point clearly inside the region defined by halfspaces. Also called a feasible
    point, it can be obtained by linear programming.
  prefs: []
  type: TYPE_NORMAL
- en: '**incremental**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Allow adding new halfspaces incrementally. This takes up some additional resources.
  prefs: []
  type: TYPE_NORMAL
- en: '**qhull_options**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional options to pass to Qhull. See Qhull manual for details. (Default:
    “Qx” for ndim > 4 and “” otherwise) Option “H” is always enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: QhullError
  prefs: []
  type: TYPE_NORMAL
- en: Raised when Qhull encounters an error condition, such as geometrical degeneracy
    when options to resolve are not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: Raised if an incompatible array is given as input.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The intersections are computed using the [Qhull library](http://www.qhull.org/).
    This reproduces the “qhalf” functionality of Qhull.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[Qhull]'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.qhull.org/](http://www.qhull.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: S. Boyd, L. Vandenberghe, Convex Optimization, available at [http://stanford.edu/~boyd/cvxbook/](http://stanford.edu/~boyd/cvxbook/)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Halfspace intersection of planes forming some polygon
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot halfspaces as filled regions and intersection points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, qhull does not provide with a way to compute an interior point.
    This can easily be computed using linear programming. Considering halfspaces of
    the form \(Ax + b \leq 0\), solving the linear program:'
  prefs: []
  type: TYPE_NORMAL
- en: '\[ \begin{align}\begin{aligned}max \: y\\s.t. Ax + y ||A_i|| \leq -b\end{aligned}\end{align}
    \]'
  prefs: []
  type: TYPE_NORMAL
- en: With \(A_i\) being the rows of A, i.e. the normals to each plane.
  prefs: []
  type: TYPE_NORMAL
- en: Will yield a point x that is furthest inside the convex polyhedron. To be precise,
    it is the center of the largest hypersphere of radius y inscribed in the polyhedron.
    This point is called the Chebyshev center of the polyhedron (see [[1]](#r9b902253b317-1)
    4.3.1, pp148-149). The equations outputted by Qhull are always normalized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-spatial-HalfspaceIntersection-1.png](../Images/bd071416585342518ef46bce946213b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**halfspaces**ndarray of double, shape (nineq, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: Input halfspaces.
  prefs: []
  type: TYPE_NORMAL
- en: '**interior_point :ndarray of floats, shape (ndim,)**'
  prefs: []
  type: TYPE_NORMAL
- en: Input interior point.
  prefs: []
  type: TYPE_NORMAL
- en: '**intersections**ndarray of double, shape (ninter, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Intersections of all halfspaces.
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_points**ndarray of double, shape (nineq, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: Dual points of the input halfspaces.
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_facets**list of lists of ints'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of points forming the (non necessarily simplicial) facets of the dual
    convex hull.
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_vertices**ndarray of ints, shape (nvertices,)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices of halfspaces forming the vertices of the dual convex hull. For 2-D
    convex hulls, the vertices are in counterclockwise order. For other dimensions,
    they are in input order.
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_equations**ndarray of double, shape (nfacet, ndim+1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[normal, offset] forming the hyperplane equation of the dual facet (see [Qhull
    documentation](http://www.qhull.org/) for more).'
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_area**float'
  prefs: []
  type: TYPE_NORMAL
- en: Area of the dual convex hull
  prefs: []
  type: TYPE_NORMAL
- en: '**dual_volume**float'
  prefs: []
  type: TYPE_NORMAL
- en: Volume of the dual convex hull
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`add_halfspaces`](scipy.spatial.HalfspaceIntersection.add_halfspaces.html#scipy.spatial.HalfspaceIntersection.add_halfspaces
    "scipy.spatial.HalfspaceIntersection.add_halfspaces")(halfspaces[, restart]) |
    Process a set of additional new halfspaces. |'
  prefs: []
  type: TYPE_TB
- en: '| [`close`](scipy.spatial.HalfspaceIntersection.close.html#scipy.spatial.HalfspaceIntersection.close
    "scipy.spatial.HalfspaceIntersection.close")() | Finish incremental processing.
    |'
  prefs: []
  type: TYPE_TB
