["```py\nscipy.signal.resample_poly(x, up, down, axis=0, window=('kaiser', 5.0), padtype='constant', cval=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy import signal\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> x = np.linspace(0, 10, 20, endpoint=False)\n>>> y = np.cos(-x**2/6.0)\n>>> f_fft = signal.resample(y, 100)\n>>> f_poly = signal.resample_poly(y, 100, 20)\n>>> xnew = np.linspace(0, 10, 100, endpoint=False) \n```", "```py\n>>> plt.plot(xnew, f_fft, 'b.-', xnew, f_poly, 'r.-')\n>>> plt.plot(x, y, 'ko-')\n>>> plt.plot(10, y[0], 'bo', 10, 0., 'ro')  # boundaries\n>>> plt.legend(['resample', 'resamp_poly', 'data'], loc='best')\n>>> plt.show() \n```", "```py\n>>> N = 5\n>>> x = np.linspace(0, 1, N, endpoint=False)\n>>> y = 2 + x**2 - 1.7*np.sin(x) + .2*np.cos(11*x)\n>>> y2 = 1 + x**3 + 0.1*np.sin(x) + .1*np.cos(11*x)\n>>> Y = np.stack([y, y2], axis=-1)\n>>> up = 4\n>>> xr = np.linspace(0, 1, N*up, endpoint=False) \n```", "```py\n>>> y2 = signal.resample_poly(Y, up, 1, padtype='constant')\n>>> y3 = signal.resample_poly(Y, up, 1, padtype='mean')\n>>> y4 = signal.resample_poly(Y, up, 1, padtype='line') \n```", "```py\n>>> for i in [0,1]:\n...     plt.figure()\n...     plt.plot(xr, y4[:,i], 'g.', label='line')\n...     plt.plot(xr, y3[:,i], 'y.', label='mean')\n...     plt.plot(xr, y2[:,i], 'r.', label='constant')\n...     plt.plot(x, Y[:,i], 'k-')\n...     plt.legend()\n>>> plt.show() \n```"]