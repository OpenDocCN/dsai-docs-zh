- en: Numerical Evaluation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数值评估
- en: Original text：[https://docs.sympy.org/latest/modules/evalf.html](https://docs.sympy.org/latest/modules/evalf.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/evalf.html](https://docs.sympy.org/latest/modules/evalf.html)
- en: '## Basics'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 基础'
- en: Exact SymPy expressions can be converted to floating-point approximations (decimal
    numbers) using either the `.evalf()` method or the `N()` function. `N(expr, <args>)`
    is equivalent to `sympify(expr).evalf(<args>)`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 精确的 SymPy 表达式可以使用 `.evalf()` 方法或 `N()` 函数转换为浮点数近似值（小数）。`N(expr, <args>)` 等效于
    `sympify(expr).evalf(<args>)`。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By default, numerical evaluation is performed to an accuracy of 15 decimal
    digits. You can optionally pass a desired accuracy (which should be a positive
    integer) as an argument to `evalf` or `N`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数值评估的精度为 15 位小数。您可以选择将所需的精度（应为正整数）作为参数传递给 `evalf` 或 `N`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Complex numbers are supported:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 支持复数：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If the expression contains symbols or for some other reason cannot be evaluated
    numerically, calling `.evalf()` or `N()` returns the original expression, or in
    some cases a partially evaluated expression. For example, when the expression
    is a polynomial in expanded form, the coefficients are evaluated:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表达式包含符号或由于其他原因无法进行数值评估，则调用 `.evalf()` 或 `N()` 将返回原始表达式，或者在某些情况下返回部分评估的表达式。例如，当表达式是展开形式的多项式时，将评估系数：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also use the standard Python functions `float()`, `complex()` to convert
    SymPy expressions to regular Python numbers:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用标准 Python 函数 `float()`、`complex()` 将 SymPy 表达式转换为常规 Python 数字：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If these functions are used, failure to evaluate the expression to an explicit
    number (for example if the expression contains symbols) will raise an exception.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用这些函数，未能将表达式评估为显式数字（例如，如果表达式包含符号），则会引发异常。
- en: 'There is essentially no upper precision limit. The following command, for example,
    computes the first 100,000 digits of π/e:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上不存在上限精度限制。例如，以下命令计算了π/e的前 100,000 位小数：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This shows digits 999,951 through 1,000,000 of pi:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了π的第 999,951 至 1,000,000 位小数：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: High-precision calculations can be slow. It is recommended (but entirely optional)
    to install gmpy ([https://github.com/aleaxit/gmpy](https://github.com/aleaxit/gmpy)),
    which will significantly speed up computations such as the one above.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 高精度计算可能会很慢。建议（但完全可选）安装 gmpy（[https://github.com/aleaxit/gmpy](https://github.com/aleaxit/gmpy)），这将显著加快上述计算等的速度。
- en: Floating-point numbers
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点数
- en: 'Floating-point numbers in SymPy are instances of the class `Float`. A `Float`
    can be created with a custom precision as second argument:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy 中的浮点数是 `Float` 类的实例。可以将 `Float` 作为第二个参数创建自定义精度：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As the last example shows, some Python floats are only accurate to about 15
    digits as inputs, while others (those that have a denominator that is a power
    of 2, like 0.125 = 1/8) are exact. To create a `Float` from a high-precision decimal
    number, it is better to pass a string, `Rational`, or `evalf` a `Rational`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如最后一个示例所示，某些 Python 浮点数仅精确到约 15 位小数输入，而其他（例如分母为 2 的幂的浮点数，如 0.125 = 1/8）则是精确的。要从高精度小数创建
    `Float`，最好传递字符串、`Rational` 或 `evalf` `Rational`：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The precision of a number determines 1) the precision to use when performing
    arithmetic with the number, and 2) the number of digits to display when printing
    the number. When two numbers with different precision are used together in an
    arithmetic operation, the higher of the precisions is used for the result. The
    product of 0.1 +/- 0.001 and 3.1415 +/- 0.0001 has an uncertainty of about 0.003
    and yet 5 digits of precision are shown.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数的精度决定了1）在与该数进行算术运算时使用的精度，以及2）打印该数时显示的位数。当两个不同精度的数一起进行算术运算时，结果将使用较高的精度。0.1 +/-
    0.001 和 3.1415 +/- 0.0001 的乘积的不确定性约为 0.003，但显示了 5 位有效数字。
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So the displayed precision should not be used as a model of error propagation
    or significance arithmetic; rather, this scheme is employed to ensure stability
    of numerical algorithms.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，显示的精度不应用作错误传播或重要性算术的模型；相反，该方案用于确保数值算法的稳定性。
- en: '`N` and `evalf` can be used to change the precision of existing floating-point
    numbers:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`N` 和 `evalf` 可用于更改现有浮点数的精度：'
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Accuracy and error handling
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精度和错误处理
- en: 'When the input to `N` or `evalf` is a complicated expression, numerical error
    propagation becomes a concern. As an example, consider the 100’th Fibonacci number
    and the excellent (but not exact) approximation \(\varphi^{100} / \sqrt{5}\) where
    \(\varphi\) is the golden ratio. With ordinary floating-point arithmetic, subtracting
    these numbers from each other erroneously results in a complete cancellation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入到 `N` 或 `evalf` 的是复杂表达式时，数值误差传播成为一个问题。例如，考虑第100个斐波那契数和卓越但不精确的近似 \(\varphi^{100}
    / \sqrt{5}\)，其中 \(\varphi\) 是黄金比例。使用普通浮点算术，将这些数字相减会错误地导致完全的取消：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`N` and `evalf` keep track of errors and automatically increase the precision
    used internally in order to obtain a correct result:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`N` 和 `evalf` 会跟踪错误并自动增加内部使用的精度，以获得正确的结果：'
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Unfortunately, numerical evaluation cannot tell an expression that is exactly
    zero apart from one that is merely very small. The working precision is therefore
    capped, by default to around 100 digits. If we try with the 1000’th Fibonacci
    number, the following happens:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，数值评估无法区分一个恰好为零的表达式和一个仅仅非常小的表达式。因此，默认情况下工作精度被限制在大约100位数字。如果我们尝试使用第1000个斐波那契数，会发生以下情况：
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The lack of digits in the returned number indicates that `N` failed to achieve
    full accuracy. The result indicates that the magnitude of the expression is something
    less than 10^84, but that is not a particularly good answer. To force a higher
    working precision, the `maxn` keyword argument can be used:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数字的位数不足表明 `N` 未能达到完全的精确度。结果表明表达式的大小为10^84以下，但这并不是一个特别好的答案。要强制使用更高的工作精度，可以使用
    `maxn` 关键字参数：
- en: '[PRE14]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Normally, `maxn` can be set very high (thousands of digits), but be aware that
    this may cause significant slowdown in extreme cases. Alternatively, the `strict=True`
    option can be set to force an exception instead of silently returning a value
    with less than the requested accuracy:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，`maxn` 可以设置得非常高（数千位数字），但请注意，这可能在极端情况下导致显著的减速。或者，可以将 `strict=True` 选项设置为强制引发异常，而不是在请求的精度不足时静默返回值：
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we add a term so that the Fibonacci approximation becomes exact (the full
    form of Binet’s formula), we get an expression that is exactly zero, but `N` does
    not know this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加一个项，使得斐波那契逼近变得精确（Binet 公式的完整形式），我们得到一个恰好为零的表达式，但 `N` 不知道这一点：
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In situations where such cancellations are known to occur, the `chop` options
    is useful. This basically replaces very small numbers in the real or imaginary
    portions of a number with exact zeros:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在已知会发生这种取消的情况下，`chop` 选项非常有用。这基本上会将数字的实部或虚部中非常小的数替换为精确的零：
- en: '[PRE17]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In situations where you wish to remove meaningless digits, re-evaluation or
    the use of the `round` method are useful:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在希望去除无意义数字的情况下，重新评估或使用 round 方法非常有用：
- en: '[PRE18]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you are dealing with a numeric expression that contains no floats, it can
    be evaluated to arbitrary precision. To round the result relative to a given decimal,
    the round method is useful:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果处理的数值表达式不包含浮点数，可以以任意精度进行评估。要将结果舍入到给定小数的相对值，round 方法非常有用：
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Sums and integrals
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总和与积分
- en: 'Sums (in particular, infinite series) and integrals can be used like regular
    closed-form expressions, and support arbitrary-precision evaluation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总和（特别是无穷级数）和积分可以像常规闭合形式表达式一样使用，并支持任意精度评估：
- en: '[PRE20]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'By default, the tanh-sinh quadrature algorithm is used to evaluate integrals.
    This algorithm is very efficient and robust for smooth integrands (and even integrals
    with endpoint singularities), but may struggle with integrals that are highly
    oscillatory or have mid-interval discontinuities. In many cases, `evalf`/`N` will
    correctly estimate the error. With the following integral, the result is accurate
    but only good to four digits:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用双曲正弦积分算法来评估积分。对于平滑的被积函数（甚至是具有端点奇异性的积分），此算法非常高效和稳健，但可能在高度振荡或中间间断的积分中遇到困难。在许多情况下，`evalf`
    / `N` 将正确估计误差。对于以下积分，结果是准确的，但只精确到四位数：
- en: '[PRE21]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is better to split this integral into two pieces:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将这个积分拆分成两个部分：
- en: '[PRE22]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A similar example is the following oscillatory integral:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的例子是以下振荡积分：
- en: '[PRE23]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It can be dealt with much more efficiently by telling `evalf` or `N` to use
    an oscillatory quadrature algorithm:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过告知 `evalf` 或 `N` 使用振荡积分算法来更有效地处理它：
- en: '[PRE24]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Oscillatory quadrature requires an integrand containing a factor cos(ax+b)
    or sin(ax+b). Note that many other oscillatory integrals can be transformed to
    this form with a change of variables:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 振荡积分需要包含形如 cos(ax+b) 或 sin(ax+b) 因子的被积函数。请注意，许多其他振荡积分可以通过变量变换转换为此形式：
- en: '[PRE25]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Infinite series use direct summation if the series converges quickly enough.
    Otherwise, extrapolation methods (generally the Euler-Maclaurin formula but also
    Richardson extrapolation) are used to speed up convergence. This allows high-precision
    evaluation of slowly convergent series:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无穷级数收敛速度足够快，直接求和。否则，使用外推方法（通常是欧拉-麦克劳林公式但也包括理查森外推）加速收敛。这允许对缓慢收敛级数进行高精度评估：
- en: '[PRE26]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The Euler-Maclaurin formula is also used for finite series, allowing them to
    be approximated quickly without evaluating all terms:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 欧拉-麦克劳林公式还用于有限级数，允许快速近似而不需评估所有项：
- en: '[PRE27]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that `evalf` makes some assumptions that are not always optimal. For fine-tuned
    control over numerical summation, it might be worthwhile to manually use the method
    `Sum.euler_maclaurin`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`evalf` 做出了不总是最优的一些假设。为了对数值求和进行精细调整，手动使用 `Sum.euler_maclaurin` 方法可能是值得的。
- en: 'Special optimizations are used for rational hypergeometric series (where the
    term is a product of polynomials, powers, factorials, binomial coefficients and
    the like). `N`/`evalf` sum series of this type very rapidly to high precision.
    For example, this Ramanujan formula for pi can be summed to 10,000 digits in a
    fraction of a second with a simple command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有理超几何级数（其中项是多项式、幂、阶乘、二项式系数等的乘积）采用了特殊优化。`N`/`evalf` 类型的级数可以非常快速地高精度求和。例如，这个拉马努金公式可以用简单的命令在几分之一秒内求和到
    10,000 位数：
- en: '[PRE28]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Numerical simplification
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值简化
- en: The function `nsimplify` attempts to find a formula that is numerically equal
    to the given input. This feature can be used to guess an exact formula for an
    approximate floating-point input, or to guess a simpler formula for a complicated
    symbolic input. The algorithm used by `nsimplify` is capable of identifying simple
    fractions, simple algebraic expressions, linear combinations of given constants,
    and certain elementary functional transformations of any of the preceding.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `nsimplify` 尝试找到一个数值上等于给定输入的公式。此功能可用于猜测精确浮点输入的确切公式，或者猜测复杂符号输入的简化公式。`nsimplify`
    使用的算法能够识别简单分数、简单代数表达式、给定常数的线性组合以及任何前述内容的某些基本函数变换。
- en: 'Optionally, `nsimplify` can be passed a list of constants to include (e.g.
    pi) and a minimum numerical tolerance. Here are some elementary examples:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，`nsimplify` 可以传入常数列表（例如 pi）和最小数值容差。以下是一些基本示例：
- en: '[PRE29]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here are several more advanced examples:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是几个更高级的示例：
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
