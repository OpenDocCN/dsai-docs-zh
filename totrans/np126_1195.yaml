- en: NumPy 1.3.0 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.3.0-notes.html](https://numpy.org/doc/1.26/release/1.3.0-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This minor includes numerous bug fixes, official python 2.6 support, and several
    new features such as generalized ufuncs.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python 2.6 support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python 2.6 is now supported on all previously supported platforms, including
    windows.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/dev/peps/pep-0361/](https://www.python.org/dev/peps/pep-0361/)'
  prefs: []
  type: TYPE_NORMAL
- en: Generalized ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a general need for looping over not only functions on scalars but also
    over functions on vectors (or arrays), as explained on [http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions](http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions).
    We propose to realize this concept by generalizing the universal functions (ufuncs),
    and provide a C implementation that adds ~500 lines to the numpy code base. In
    current (specialized) ufuncs, the elementary function is limited to element-by-element
    operations, whereas the generalized version supports “sub-array” by “sub-array”
    operations. The Perl vector library PDL provides a similar functionality and its
    terms are re-used in the following.
  prefs: []
  type: TYPE_NORMAL
- en: Each generalized ufunc has information associated with it that states what the
    “core” dimensionality of the inputs is, as well as the corresponding dimensionality
    of the outputs (the element-wise ufuncs have zero core dimensions). The list of
    the core dimensions for all arguments is called the “signature” of a ufunc. For
    example, the ufunc numpy.add has signature “(),()->()” defining two scalar inputs
    and one scalar output.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is (see the GeneralLoopingFunctions page) the function inner1d(a,b)
    with a signature of “(i),(i)->()”. This applies the inner product along the last
    axis of each input, but keeps the remaining indices intact. For example, where
    a is of shape (3,5,N) and b is of shape (5,N), this will return an output of shape
    (3,5). The underlying elementary function is called 3*5 times. In the signature,
    we specify one core dimension “(i)” for each input and zero core dimensions “()”
    for the output, since it takes two 1-d arrays and returns a scalar. By using the
    same name “i”, we specify that the two corresponding dimensions should be of the
    same size (or one of them is of size 1 and will be broadcasted).
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions beyond the core dimensions are called “loop” dimensions. In the
    above example, this corresponds to (3,5).
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual numpy “broadcasting” rules apply, where the signature determines
    how the dimensions of each input/output object are split into core and loop dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: While an input array has a smaller dimensionality than the corresponding number
    of core dimensions, 1’s are pre-pended to its shape. The core dimensions are removed
    from all inputs and the remaining dimensions are broadcasted; defining the loop
    dimensions. The output is given by the loop dimensions plus the output core dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Experimental Windows 64 bits support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Numpy can now be built on windows 64 bits (amd64 only, not IA64), with both
    MS compilers and mingw-w64 compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is *highly experimental*: DO NOT USE FOR PRODUCTION USE. See INSTALL.txt,
    Windows 64 bits section for more information on limitations and how to build it
    by yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formatting issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Float formatting is now handled by numpy instead of the C runtime: this enables
    locale independent formatting, more robust fromstring and related methods. Special
    values (inf and nan) are also more consistent across platforms (nan vs IND/NaN,
    etc…), and more consistent with recent python formatting work (in 2.6 and later).'
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in max/min
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The maximum/minimum ufuncs now reliably propagate nans. If one of the arguments
    is a nan, then nan is returned. This affects np.min/np.max, amin/amax and the
    array methods max/min. New ufuncs fmax and fmin have been added to deal with non-propagating
    nans.
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in sign
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc sign now returns nan for the sign of anan.
  prefs: []
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: fmax - same as maximum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fmin - same as minimum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: deg2rad - converts degrees to radians, same as the radians ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: rad2deg - converts radians to degrees, same as the degrees ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: log2 - base 2 logarithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exp2 - base 2 exponential.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: trunc - truncate floats to nearest integer towards zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp - add numbers stored as logarithms and return the logarithm of the
    result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp2 - add numbers stored as base 2 logarithms and return the base 2 logarithm
    of the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Masked arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several new features and bug fixes, including:'
  prefs: []
  type: TYPE_NORMAL
- en: structured arrays should now be fully supported by MaskedArray (r6463, r6324,
    r6305, r6300, r6294…)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Minor bug fixes (r6356, r6352, r6335, r6299, r6298)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Improved support for __iter__ (r6326)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: made baseclass, sharedmask and hardmask accessible to the user (but read-only)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: doc update
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: gfortran support on windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gfortran can now be used as a fortran compiler for numpy on windows, even when
    the C compiler is Visual Studio (VS 2005 and above; VS 2003 will NOT work). Gfortran
    + Visual studio does not work on windows 64 bits (but gcc + gfortran does). It
    is unclear whether it will be possible to use gfortran and visual studio at all
    on x64.
  prefs: []
  type: TYPE_NORMAL
- en: Arch option for windows binary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Automatic arch detection can now be bypassed from the command line for the
    superpack installed:'
  prefs: []
  type: TYPE_NORMAL
- en: numpy-1.3.0-superpack-win32.exe /arch=nosse
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: will install a numpy which works on any x86, even if the running computer supports
    SSE set.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The semantics of histogram has been modified to fix long-standing issues with
    outliers handling. The main changes concern
  prefs: []
  type: TYPE_NORMAL
- en: the definition of the bin edges, now including the rightmost edge, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the handling of upper outliers, now ignored rather than tallied in the rightmost
    bin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous behavior is still accessible using *new=False*, but this is deprecated,
    and will be removed entirely in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of documentation has been added. Both user guide and references can be
    built from sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: New C API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiarray API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the multiarray C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetEndianness: to get runtime endianness'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Ufunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the ufunc API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyUFunc_FromFuncAndDataAndSignature: to declare a more general ufunc (generalized
    ufunc).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New public C defines are available for ARCH specific code through numpy/npy_cpu.h:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_X86: x86 arch (32 bits)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_AMD64: amd64 arch (x86_64, NOT Itanium)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC: 32 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC64: 64 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC: 32 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC64: 64 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_S390: S390'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_IA64: ia64'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PARISC: PARISC'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New macros for CPU endianness has been added as well (see internal changes
    below for details):'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_BYTE_ORDER: integer'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: NPY_LITTLE_ENDIAN/NPY_BIG_ENDIAN defines
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Those provide portable alternatives to glibc endian.h macros for platforms without
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Portable NAN, INFINITY, etc…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'npy_math.h now makes available several portable macro to get NAN, INFINITY:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_NAN: equivalent to NAN, which is a GNU extension'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_INFINITY: equivalent to C99 INFINITY'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_PZERO, NPY_NZERO: positive and negative zero respectively'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Corresponding single and extended precision macros are available as well. All
    references to NAN, or home-grown computation of NAN on the fly have been removed
    for consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Internal changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy.core math configuration revamp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should make the porting to new platforms easier, and more robust. In particular,
    the configuration stage does not need to execute any code on the target platform,
    which is a first step toward cross-compilation.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0003-math_config_clean.html](https://www.numpy.org/neps/nep-0003-math_config_clean.html)'
  prefs: []
  type: TYPE_NORMAL
- en: umath refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of code cleanup for umath/ufunc code (charris).
  prefs: []
  type: TYPE_NORMAL
- en: Improvements to build warnings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numpy can now build with -W -Wall without warnings
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0002-warnfix.html](https://www.numpy.org/neps/nep-0002-warnfix.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core math functions (sin, cos, etc… for basic C types) have been put into
    a separate library; it acts as a compatibility layer, to support most C99 maths
    functions (real only for now). The library includes platform-specific fixes for
    various maths functions, such as using those versions should be more robust than
    using your platform functions directly. The API for existing functions is exactly
    the same as the C99 math functions API; the only difference is the npy prefix
    (npy_cos vs cos).
  prefs: []
  type: TYPE_NORMAL
- en: The core library will be made available to any extension in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: CPU arch detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: npy_cpu.h defines numpy specific CPU defines, such as NPY_CPU_X86, etc… Those
    are portable across OS and toolchains, and set up when the header is parsed, so
    that they can be safely used even in the case of cross-compilation (the values
    is not set when numpy is built), or for multi-arch binaries (e.g. fat binaries
    on Max OS X).
  prefs: []
  type: TYPE_NORMAL
- en: npy_endian.h defines numpy specific endianness defines, modeled on the glibc
    endian.h. NPY_BYTE_ORDER is equivalent to BYTE_ORDER, and one of NPY_LITTLE_ENDIAN
    or NPY_BIG_ENDIAN is defined. As for CPU archs, those are set when the header
    is parsed by the compiler, and as such can be used for cross-compilation and multi-arch
    binaries.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python 2.6 support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python 2.6 is now supported on all previously supported platforms, including
    windows.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/dev/peps/pep-0361/](https://www.python.org/dev/peps/pep-0361/)'
  prefs: []
  type: TYPE_NORMAL
- en: Generalized ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a general need for looping over not only functions on scalars but also
    over functions on vectors (or arrays), as explained on [http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions](http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions).
    We propose to realize this concept by generalizing the universal functions (ufuncs),
    and provide a C implementation that adds ~500 lines to the numpy code base. In
    current (specialized) ufuncs, the elementary function is limited to element-by-element
    operations, whereas the generalized version supports “sub-array” by “sub-array”
    operations. The Perl vector library PDL provides a similar functionality and its
    terms are re-used in the following.
  prefs: []
  type: TYPE_NORMAL
- en: Each generalized ufunc has information associated with it that states what the
    “core” dimensionality of the inputs is, as well as the corresponding dimensionality
    of the outputs (the element-wise ufuncs have zero core dimensions). The list of
    the core dimensions for all arguments is called the “signature” of a ufunc. For
    example, the ufunc numpy.add has signature “(),()->()” defining two scalar inputs
    and one scalar output.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is (see the GeneralLoopingFunctions page) the function inner1d(a,b)
    with a signature of “(i),(i)->()”. This applies the inner product along the last
    axis of each input, but keeps the remaining indices intact. For example, where
    a is of shape (3,5,N) and b is of shape (5,N), this will return an output of shape
    (3,5). The underlying elementary function is called 3*5 times. In the signature,
    we specify one core dimension “(i)” for each input and zero core dimensions “()”
    for the output, since it takes two 1-d arrays and returns a scalar. By using the
    same name “i”, we specify that the two corresponding dimensions should be of the
    same size (or one of them is of size 1 and will be broadcasted).
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions beyond the core dimensions are called “loop” dimensions. In the
    above example, this corresponds to (3,5).
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual numpy “broadcasting” rules apply, where the signature determines
    how the dimensions of each input/output object are split into core and loop dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: While an input array has a smaller dimensionality than the corresponding number
    of core dimensions, 1’s are pre-pended to its shape. The core dimensions are removed
    from all inputs and the remaining dimensions are broadcasted; defining the loop
    dimensions. The output is given by the loop dimensions plus the output core dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Experimental Windows 64 bits support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Numpy can now be built on windows 64 bits (amd64 only, not IA64), with both
    MS compilers and mingw-w64 compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is *highly experimental*: DO NOT USE FOR PRODUCTION USE. See INSTALL.txt,
    Windows 64 bits section for more information on limitations and how to build it
    by yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: Python 2.6 support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python 2.6 is now supported on all previously supported platforms, including
    windows.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/dev/peps/pep-0361/](https://www.python.org/dev/peps/pep-0361/)'
  prefs: []
  type: TYPE_NORMAL
- en: Generalized ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a general need for looping over not only functions on scalars but also
    over functions on vectors (or arrays), as explained on [http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions](http://scipy.org/scipy/numpy/wiki/GeneralLoopingFunctions).
    We propose to realize this concept by generalizing the universal functions (ufuncs),
    and provide a C implementation that adds ~500 lines to the numpy code base. In
    current (specialized) ufuncs, the elementary function is limited to element-by-element
    operations, whereas the generalized version supports “sub-array” by “sub-array”
    operations. The Perl vector library PDL provides a similar functionality and its
    terms are re-used in the following.
  prefs: []
  type: TYPE_NORMAL
- en: Each generalized ufunc has information associated with it that states what the
    “core” dimensionality of the inputs is, as well as the corresponding dimensionality
    of the outputs (the element-wise ufuncs have zero core dimensions). The list of
    the core dimensions for all arguments is called the “signature” of a ufunc. For
    example, the ufunc numpy.add has signature “(),()->()” defining two scalar inputs
    and one scalar output.
  prefs: []
  type: TYPE_NORMAL
- en: Another example is (see the GeneralLoopingFunctions page) the function inner1d(a,b)
    with a signature of “(i),(i)->()”. This applies the inner product along the last
    axis of each input, but keeps the remaining indices intact. For example, where
    a is of shape (3,5,N) and b is of shape (5,N), this will return an output of shape
    (3,5). The underlying elementary function is called 3*5 times. In the signature,
    we specify one core dimension “(i)” for each input and zero core dimensions “()”
    for the output, since it takes two 1-d arrays and returns a scalar. By using the
    same name “i”, we specify that the two corresponding dimensions should be of the
    same size (or one of them is of size 1 and will be broadcasted).
  prefs: []
  type: TYPE_NORMAL
- en: The dimensions beyond the core dimensions are called “loop” dimensions. In the
    above example, this corresponds to (3,5).
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual numpy “broadcasting” rules apply, where the signature determines
    how the dimensions of each input/output object are split into core and loop dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: While an input array has a smaller dimensionality than the corresponding number
    of core dimensions, 1’s are pre-pended to its shape. The core dimensions are removed
    from all inputs and the remaining dimensions are broadcasted; defining the loop
    dimensions. The output is given by the loop dimensions plus the output core dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Experimental Windows 64 bits support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Numpy can now be built on windows 64 bits (amd64 only, not IA64), with both
    MS compilers and mingw-w64 compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is *highly experimental*: DO NOT USE FOR PRODUCTION USE. See INSTALL.txt,
    Windows 64 bits section for more information on limitations and how to build it
    by yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: New features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Formatting issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Float formatting is now handled by numpy instead of the C runtime: this enables
    locale independent formatting, more robust fromstring and related methods. Special
    values (inf and nan) are also more consistent across platforms (nan vs IND/NaN,
    etc…), and more consistent with recent python formatting work (in 2.6 and later).'
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in max/min
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The maximum/minimum ufuncs now reliably propagate nans. If one of the arguments
    is a nan, then nan is returned. This affects np.min/np.max, amin/amax and the
    array methods max/min. New ufuncs fmax and fmin have been added to deal with non-propagating
    nans.
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in sign
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc sign now returns nan for the sign of anan.
  prefs: []
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: fmax - same as maximum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fmin - same as minimum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: deg2rad - converts degrees to radians, same as the radians ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: rad2deg - converts radians to degrees, same as the degrees ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: log2 - base 2 logarithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exp2 - base 2 exponential.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: trunc - truncate floats to nearest integer towards zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp - add numbers stored as logarithms and return the logarithm of the
    result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp2 - add numbers stored as base 2 logarithms and return the base 2 logarithm
    of the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Masked arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several new features and bug fixes, including:'
  prefs: []
  type: TYPE_NORMAL
- en: structured arrays should now be fully supported by MaskedArray (r6463, r6324,
    r6305, r6300, r6294…)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Minor bug fixes (r6356, r6352, r6335, r6299, r6298)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Improved support for __iter__ (r6326)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: made baseclass, sharedmask and hardmask accessible to the user (but read-only)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: doc update
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: gfortran support on windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gfortran can now be used as a fortran compiler for numpy on windows, even when
    the C compiler is Visual Studio (VS 2005 and above; VS 2003 will NOT work). Gfortran
    + Visual studio does not work on windows 64 bits (but gcc + gfortran does). It
    is unclear whether it will be possible to use gfortran and visual studio at all
    on x64.
  prefs: []
  type: TYPE_NORMAL
- en: Arch option for windows binary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Automatic arch detection can now be bypassed from the command line for the
    superpack installed:'
  prefs: []
  type: TYPE_NORMAL
- en: numpy-1.3.0-superpack-win32.exe /arch=nosse
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: will install a numpy which works on any x86, even if the running computer supports
    SSE set.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Float formatting is now handled by numpy instead of the C runtime: this enables
    locale independent formatting, more robust fromstring and related methods. Special
    values (inf and nan) are also more consistent across platforms (nan vs IND/NaN,
    etc…), and more consistent with recent python formatting work (in 2.6 and later).'
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in max/min
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The maximum/minimum ufuncs now reliably propagate nans. If one of the arguments
    is a nan, then nan is returned. This affects np.min/np.max, amin/amax and the
    array methods max/min. New ufuncs fmax and fmin have been added to deal with non-propagating
    nans.
  prefs: []
  type: TYPE_NORMAL
- en: Nan handling in sign
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ufunc sign now returns nan for the sign of anan.
  prefs: []
  type: TYPE_NORMAL
- en: New ufuncs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: fmax - same as maximum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: fmin - same as minimum for integer types and non-nan floats. Returns the non-nan
    argument if one argument is nan and returns nan if both arguments are nan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: deg2rad - converts degrees to radians, same as the radians ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: rad2deg - converts radians to degrees, same as the degrees ufunc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: log2 - base 2 logarithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: exp2 - base 2 exponential.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: trunc - truncate floats to nearest integer towards zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp - add numbers stored as logarithms and return the logarithm of the
    result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: logaddexp2 - add numbers stored as base 2 logarithms and return the base 2 logarithm
    of the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Masked arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Several new features and bug fixes, including:'
  prefs: []
  type: TYPE_NORMAL
- en: structured arrays should now be fully supported by MaskedArray (r6463, r6324,
    r6305, r6300, r6294…)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Minor bug fixes (r6356, r6352, r6335, r6299, r6298)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Improved support for __iter__ (r6326)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: made baseclass, sharedmask and hardmask accessible to the user (but read-only)
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: doc update
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: gfortran support on windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gfortran can now be used as a fortran compiler for numpy on windows, even when
    the C compiler is Visual Studio (VS 2005 and above; VS 2003 will NOT work). Gfortran
    + Visual studio does not work on windows 64 bits (but gcc + gfortran does). It
    is unclear whether it will be possible to use gfortran and visual studio at all
    on x64.
  prefs: []
  type: TYPE_NORMAL
- en: Arch option for windows binary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Automatic arch detection can now be bypassed from the command line for the
    superpack installed:'
  prefs: []
  type: TYPE_NORMAL
- en: numpy-1.3.0-superpack-win32.exe /arch=nosse
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: will install a numpy which works on any x86, even if the running computer supports
    SSE set.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The semantics of histogram has been modified to fix long-standing issues with
    outliers handling. The main changes concern
  prefs: []
  type: TYPE_NORMAL
- en: the definition of the bin edges, now including the rightmost edge, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the handling of upper outliers, now ignored rather than tallied in the rightmost
    bin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous behavior is still accessible using *new=False*, but this is deprecated,
    and will be removed entirely in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The semantics of histogram has been modified to fix long-standing issues with
    outliers handling. The main changes concern
  prefs: []
  type: TYPE_NORMAL
- en: the definition of the bin edges, now including the rightmost edge, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the handling of upper outliers, now ignored rather than tallied in the rightmost
    bin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The previous behavior is still accessible using *new=False*, but this is deprecated,
    and will be removed entirely in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of documentation has been added. Both user guide and references can be
    built from sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: New C API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiarray API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the multiarray C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetEndianness: to get runtime endianness'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Ufunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the ufunc API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyUFunc_FromFuncAndDataAndSignature: to declare a more general ufunc (generalized
    ufunc).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New public C defines are available for ARCH specific code through numpy/npy_cpu.h:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_X86: x86 arch (32 bits)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_AMD64: amd64 arch (x86_64, NOT Itanium)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC: 32 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC64: 64 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC: 32 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC64: 64 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_S390: S390'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_IA64: ia64'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PARISC: PARISC'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New macros for CPU endianness has been added as well (see internal changes
    below for details):'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_BYTE_ORDER: integer'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: NPY_LITTLE_ENDIAN/NPY_BIG_ENDIAN defines
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Those provide portable alternatives to glibc endian.h macros for platforms without
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Portable NAN, INFINITY, etc…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'npy_math.h now makes available several portable macro to get NAN, INFINITY:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_NAN: equivalent to NAN, which is a GNU extension'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_INFINITY: equivalent to C99 INFINITY'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_PZERO, NPY_NZERO: positive and negative zero respectively'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Corresponding single and extended precision macros are available as well. All
    references to NAN, or home-grown computation of NAN on the fly have been removed
    for consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Multiarray API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the multiarray C API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyArray_GetEndianness: to get runtime endianness'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Ufunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following functions have been added to the ufunc API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyUFunc_FromFuncAndDataAndSignature: to declare a more general ufunc (generalized
    ufunc).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: New defines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'New public C defines are available for ARCH specific code through numpy/npy_cpu.h:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_CPU_X86: x86 arch (32 bits)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_AMD64: amd64 arch (x86_64, NOT Itanium)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC: 32 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PPC64: 64 bits ppc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC: 32 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_SPARC64: 64 bits sparc'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_S390: S390'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_IA64: ia64'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_CPU_PARISC: PARISC'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New macros for CPU endianness has been added as well (see internal changes
    below for details):'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_BYTE_ORDER: integer'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: NPY_LITTLE_ENDIAN/NPY_BIG_ENDIAN defines
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Those provide portable alternatives to glibc endian.h macros for platforms without
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Portable NAN, INFINITY, etc…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'npy_math.h now makes available several portable macro to get NAN, INFINITY:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NPY_NAN: equivalent to NAN, which is a GNU extension'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_INFINITY: equivalent to C99 INFINITY'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'NPY_PZERO, NPY_NZERO: positive and negative zero respectively'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Corresponding single and extended precision macros are available as well. All
    references to NAN, or home-grown computation of NAN on the fly have been removed
    for consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Internal changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: numpy.core math configuration revamp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should make the porting to new platforms easier, and more robust. In particular,
    the configuration stage does not need to execute any code on the target platform,
    which is a first step toward cross-compilation.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0003-math_config_clean.html](https://www.numpy.org/neps/nep-0003-math_config_clean.html)'
  prefs: []
  type: TYPE_NORMAL
- en: umath refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of code cleanup for umath/ufunc code (charris).
  prefs: []
  type: TYPE_NORMAL
- en: Improvements to build warnings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numpy can now build with -W -Wall without warnings
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0002-warnfix.html](https://www.numpy.org/neps/nep-0002-warnfix.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core math functions (sin, cos, etc… for basic C types) have been put into
    a separate library; it acts as a compatibility layer, to support most C99 maths
    functions (real only for now). The library includes platform-specific fixes for
    various maths functions, such as using those versions should be more robust than
    using your platform functions directly. The API for existing functions is exactly
    the same as the C99 math functions API; the only difference is the npy prefix
    (npy_cos vs cos).
  prefs: []
  type: TYPE_NORMAL
- en: The core library will be made available to any extension in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: CPU arch detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: npy_cpu.h defines numpy specific CPU defines, such as NPY_CPU_X86, etc… Those
    are portable across OS and toolchains, and set up when the header is parsed, so
    that they can be safely used even in the case of cross-compilation (the values
    is not set when numpy is built), or for multi-arch binaries (e.g. fat binaries
    on Max OS X).
  prefs: []
  type: TYPE_NORMAL
- en: npy_endian.h defines numpy specific endianness defines, modeled on the glibc
    endian.h. NPY_BYTE_ORDER is equivalent to BYTE_ORDER, and one of NPY_LITTLE_ENDIAN
    or NPY_BIG_ENDIAN is defined. As for CPU archs, those are set when the header
    is parsed by the compiler, and as such can be used for cross-compilation and multi-arch
    binaries.
  prefs: []
  type: TYPE_NORMAL
- en: numpy.core math configuration revamp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should make the porting to new platforms easier, and more robust. In particular,
    the configuration stage does not need to execute any code on the target platform,
    which is a first step toward cross-compilation.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0003-math_config_clean.html](https://www.numpy.org/neps/nep-0003-math_config_clean.html)'
  prefs: []
  type: TYPE_NORMAL
- en: umath refactor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of code cleanup for umath/ufunc code (charris).
  prefs: []
  type: TYPE_NORMAL
- en: Improvements to build warnings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Numpy can now build with -W -Wall without warnings
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.numpy.org/neps/nep-0002-warnfix.html](https://www.numpy.org/neps/nep-0002-warnfix.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Separate core math library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core math functions (sin, cos, etc… for basic C types) have been put into
    a separate library; it acts as a compatibility layer, to support most C99 maths
    functions (real only for now). The library includes platform-specific fixes for
    various maths functions, such as using those versions should be more robust than
    using your platform functions directly. The API for existing functions is exactly
    the same as the C99 math functions API; the only difference is the npy prefix
    (npy_cos vs cos).
  prefs: []
  type: TYPE_NORMAL
- en: The core library will be made available to any extension in 1.4.0.
  prefs: []
  type: TYPE_NORMAL
- en: CPU arch detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: npy_cpu.h defines numpy specific CPU defines, such as NPY_CPU_X86, etc… Those
    are portable across OS and toolchains, and set up when the header is parsed, so
    that they can be safely used even in the case of cross-compilation (the values
    is not set when numpy is built), or for multi-arch binaries (e.g. fat binaries
    on Max OS X).
  prefs: []
  type: TYPE_NORMAL
- en: npy_endian.h defines numpy specific endianness defines, modeled on the glibc
    endian.h. NPY_BYTE_ORDER is equivalent to BYTE_ORDER, and one of NPY_LITTLE_ENDIAN
    or NPY_BIG_ENDIAN is defined. As for CPU archs, those are set when the header
    is parsed by the compiler, and as such can be used for cross-compilation and multi-arch
    binaries.
  prefs: []
  type: TYPE_NORMAL
