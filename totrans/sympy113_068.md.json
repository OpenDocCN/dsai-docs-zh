["```py\nsympy.combinatorics.testutil._cmp_perm_lists(first, second)\n```", "```py\n>>> from sympy.combinatorics.permutations import Permutation\n>>> from sympy.combinatorics.testutil import _cmp_perm_lists\n>>> a = Permutation([0, 2, 3, 4, 1])\n>>> b = Permutation([1, 2, 0, 4, 3])\n>>> c = Permutation([3, 4, 0, 1, 2])\n>>> ls1 = [a, b, c]\n>>> ls2 = [b, c, a]\n>>> _cmp_perm_lists(ls1, ls2)\nTrue \n```", "```py\nsympy.combinatorics.testutil._naive_list_centralizer(self, other, af=False)\n```", "```py\nsympy.combinatorics.testutil._verify_bsgs(group, base, gens)\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> from sympy.combinatorics.testutil import _verify_bsgs\n>>> A = AlternatingGroup(4)\n>>> A.schreier_sims()\n>>> _verify_bsgs(A, A.base, A.strong_gens)\nTrue \n```", "```py\nsympy.combinatorics.testutil._verify_centralizer(group, arg, centr=None)\n```", "```py\n>>> from sympy.combinatorics.named_groups import (SymmetricGroup,\n... AlternatingGroup)\n>>> from sympy.combinatorics.perm_groups import PermutationGroup\n>>> from sympy.combinatorics.permutations import Permutation\n>>> from sympy.combinatorics.testutil import _verify_centralizer\n>>> S = SymmetricGroup(5)\n>>> A = AlternatingGroup(5)\n>>> centr = PermutationGroup([Permutation([0, 1, 2, 3, 4])])\n>>> _verify_centralizer(S, A, centr)\nTrue \n```", "```py\nsympy.combinatorics.testutil._verify_normal_closure(group, arg, closure=None)\n```"]