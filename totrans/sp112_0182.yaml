- en: scipy.interpolate.NdPPoly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.NdPPoly.html#scipy.interpolate.NdPPoly](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.NdPPoly.html#scipy.interpolate.NdPPoly)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Piecewise tensor product polynomial
  prefs: []
  type: TYPE_NORMAL
- en: 'The value at point `xp = (x'', y'', z'', ...)` is evaluated by first computing
    the interval indices *i* such that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'and then computing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: where `k[j]` is the degree of the polynomial in dimension j. This representation
    is the piecewise multivariate power basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray, shape (k0, …, kn, m0, …, mn, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial coefficients, with polynomial order *kj* and *mj+1* intervals for
    each dimension *j*.
  prefs: []
  type: TYPE_NORMAL
- en: '**x**ndim-tuple of ndarrays, shapes (mj+1,)'
  prefs: []
  type: TYPE_NORMAL
- en: Polynomial breakpoints for each dimension. These must be sorted in increasing
    order.
  prefs: []
  type: TYPE_NORMAL
- en: '**extrapolate**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether to extrapolate to out-of-bounds points based on first and last intervals,
    or to return NaNs. Default: True.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PPoly`](scipy.interpolate.PPoly.html#scipy.interpolate.PPoly "scipy.interpolate.PPoly")'
  prefs: []
  type: TYPE_NORMAL
- en: piecewise polynomials in 1D
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: High-order polynomials in the power basis can be numerically unstable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**tuple of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '**c**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Coefficients of the polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.NdPPoly.__call__.html#scipy.interpolate.NdPPoly.__call__
    "scipy.interpolate.NdPPoly.__call__")(x[, nu, extrapolate]) | Evaluate the piecewise
    polynomial or its derivative |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.NdPPoly.derivative.html#scipy.interpolate.NdPPoly.derivative
    "scipy.interpolate.NdPPoly.derivative")(nu) | Construct a new piecewise polynomial
    representing the derivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.NdPPoly.antiderivative.html#scipy.interpolate.NdPPoly.antiderivative
    "scipy.interpolate.NdPPoly.antiderivative")(nu) | Construct a new piecewise polynomial
    representing the antiderivative. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate`](scipy.interpolate.NdPPoly.integrate.html#scipy.interpolate.NdPPoly.integrate
    "scipy.interpolate.NdPPoly.integrate")(ranges[, extrapolate]) | Compute a definite
    integral over a piecewise polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integrate_1d`](scipy.interpolate.NdPPoly.integrate_1d.html#scipy.interpolate.NdPPoly.integrate_1d
    "scipy.interpolate.NdPPoly.integrate_1d")(a, b, axis[, extrapolate]) | Compute
    NdPPoly representation for one dimensional definite integral |'
  prefs: []
  type: TYPE_TB
- en: '| [`construct_fast`](scipy.interpolate.NdPPoly.construct_fast.html#scipy.interpolate.NdPPoly.construct_fast
    "scipy.interpolate.NdPPoly.construct_fast")(c, x[, extrapolate]) | Construct the
    piecewise polynomial without making checks. |'
  prefs: []
  type: TYPE_TB
