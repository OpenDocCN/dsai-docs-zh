- en: NumPy distutils - users guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy distutils - 用户指南
- en: 原文：[https://numpy.org/doc/1.26/reference/distutils_guide.html](https://numpy.org/doc/1.26/reference/distutils_guide.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/distutils_guide.html](https://numpy.org/doc/1.26/reference/distutils_guide.html)
- en: Warning
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`numpy.distutils` is deprecated, and will be removed for Python >= 3.12\. For
    more details, see [Status of numpy.distutils and migration advice](distutils_status_migration.html#distutils-status-migration)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 已弃用，并将在 Python >= 3.12 中移除。有关更多详情，请参见 [numpy.distutils 的状态和迁移建议](distutils_status_migration.html#distutils-status-migration)'
- en: SciPy structure
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciPy 结构
- en: 'Currently SciPy project consists of two packages:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 SciPy 项目包含两个包：
- en: 'NumPy — it provides packages like:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy — 它提供如下包：
- en: numpy.distutils - extension to Python distutils
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils - Python distutils 的扩展
- en: numpy.f2py - a tool to bind Fortran/C codes to Python
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.f2py - 将 Fortran/C 代码绑定到 Python 的工具
- en: numpy.core - future replacement of Numeric and numarray packages
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.core - 用于替代 Numeric 和 numarray 包的未来版本
- en: numpy.lib - extra utility functions
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.lib - 额外实用函数
- en: numpy.testing - numpy-style tools for unit testing
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.testing - 用于单元测试的 numpy 风格工具
- en: etc
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等
- en: SciPy — a collection of scientific tools for Python.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy — 一套用于 Python 的科学工具集。
- en: The aim of this document is to describe how to add new tools to SciPy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档的目的是描述如何向 SciPy 中添加新工具。
- en: Requirements for SciPy packages
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciPy 包的要求
- en: SciPy consists of Python packages, called SciPy packages, that are available
    to Python users via the `scipy` namespace. Each SciPy package may contain other
    SciPy packages. And so on. Therefore, the SciPy directory tree is a tree of packages
    with arbitrary depth and width. Any SciPy package may depend on NumPy packages
    but the dependence on other SciPy packages should be kept minimal or zero.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 由名为 SciPy 包的 Python 包组成，通过 `scipy` 命名空间可以提供给 Python 用户使用。每个 SciPy 包可能包含其他
    SciPy 包。因此，SciPy 目录树是具有任意深度和宽度的包树。任何 SciPy 包可能依赖于 NumPy 包，但对其他 SciPy 包的依赖应尽可能减少或为零。
- en: 'A SciPy package contains, in addition to its sources, the following files and
    directories:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 SciPy 包除了其源代码外，还包括以下文件和目录：
- en: '`setup.py` — building script'
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup.py` — 构建脚本'
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`__init__.py` — package initializer'
  id: totrans-21
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` — 包初始化器'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`tests/` — directory of unittests'
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests/` — 单元测试目录'
- en: Their contents are described below.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的内容如下所述。
- en: The `setup.py` file
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`setup.py` 文件'
- en: In order to add a Python package to SciPy, its build script (`setup.py`) must
    meet certain requirements. The most important requirement is that the package
    define a `configuration(parent_package='',top_path=None)` function which returns
    a dictionary suitable for passing to `numpy.distutils.core.setup(..)`. To simplify
    the construction of this dictionary, `numpy.distutils.misc_util` provides the
    `Configuration` class, described below.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将一个 Python 包添加到 SciPy，其构建脚本 (`setup.py`) 必须符合某些要求。最重要的要求是包定义一个 `configuration(parent_package='',top_path=None)`
    函数，该函数返回一个适合传递给 `numpy.distutils.core.setup(..)` 的字典。为了简化构造此字典，`numpy.distutils.misc_util`
    提供了下面描述的 `Configuration` 类。
- en: SciPy pure Python package example
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciPy 纯 Python 包示例
- en: 'Below is an example of a minimal `setup.py` file for a pure SciPy package:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个纯 SciPy 包的最小 `setup.py` 文件示例：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The arguments of the `configuration` function specify the name of parent SciPy
    package (`parent_package`) and the directory location of the main `setup.py` script
    (`top_path`). These arguments, along with the name of the current package, should
    be passed to the `Configuration` constructor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration` 函数的参数指定了父 SciPy 包的名称（`parent_package`）和主 `setup.py` 脚本的目录位置（`top_path`）。这些参数和当前包的名称应该传递给
    `Configuration` 构造函数。'
- en: The `Configuration` constructor has a fourth optional argument, `package_path`,
    that can be used when package files are located in a different location than the
    directory of the `setup.py` file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Configuration` 构造函数有第四个可选参数，`package_path`，当包文件位于与 `setup.py` 文件所在目录不同的位置时可以使用。'
- en: Remaining `Configuration` arguments are all keyword arguments that will be used
    to initialize attributes of `Configuration` instance. Usually, these keywords
    are the same as the ones that `setup(..)` function would expect, for example,
    `packages`, `ext_modules`, `data_files`, `include_dirs`, `libraries`, `headers`,
    `scripts`, `package_dir`, etc. However, the direct specification of these keywords
    is not recommended as the content of these keyword arguments will not be processed
    or checked for the consistency of SciPy building system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的`Configuration`参数都是初始化`Configuration`实例属性时将使用的关键字参数。通常，这些关键字与`setup(..)`函数所期望的关键字相同，例如，`packages`,
    `ext_modules`, `data_files`, `include_dirs`, `libraries`, `headers`, `scripts`,
    `package_dir`等。但是，不建议直接指定这些关键字参数，因为这些关键字参数的内容不会被处理或检查SciPy构建系统的一致性。
- en: Finally, `Configuration` has `.todict()` method that returns all the configuration
    data as a dictionary suitable for passing on to the `setup(..)` function.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Configuration`具有`.todict()`方法，它将所有配置数据作为适合传递给`setup(..)`函数的字典返回。
- en: '`Configuration` instance attributes'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例属性'
- en: 'In addition to attributes that can be specified via keyword arguments to `Configuration`
    constructor, `Configuration` instance (let us denote as `config`) has the following
    attributes that can be useful in writing setup scripts:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以通过关键字参数指定给`Configuration`构造函数的属性之外，`Configuration`实例（我们以`config`表示）还具有以下属性，这些属性在编写设置脚本时可能会有用：
- en: '`config.name` - full name of the current package. The names of parent packages
    can be extracted as `config.name.split(''.'')`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.name` - 当前软件包的完整名称。可以提取父软件包的名称作为`config.name.split(''.'')`。'
- en: '`config.local_path` - path to the location of current `setup.py` file.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.local_path` - 指向当前`setup.py`文件的路径。'
- en: '`config.top_path` - path to the location of main `setup.py` file.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.top_path` - 指向主`setup.py`文件的路径。'
- en: '`Configuration` instance methods'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例方法'
- en: '`config.todict()` — returns configuration dictionary suitable for passing to
    `numpy.distutils.core.setup(..)` function.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.todict()` — 返回适合传递给`numpy.distutils.core.setup(..)`函数的配置字典。'
- en: '`config.paths(*paths) --- applies ``glob.glob(..)` to items of `paths` if necessary.
    Fixes `paths` item that is relative to `config.local_path`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.paths(*paths) --- 如有必要，将`paths`的项应用于``glob.glob(..)`。修复相对于`config.local_path`的`paths`项。'
- en: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — returns a list
    of subpackage configurations. Subpackage is looked in the current directory under
    the name `subpackage_name` but the path can be specified also via optional `subpackage_path`
    argument. If `subpackage_name` is specified as `None` then the subpackage name
    will be taken the basename of `subpackage_path`. Any `*` used for subpackage names
    are expanded as wildcards.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — 返回子软件包配置的列表。在当前目录中查找名称为`subpackage_name`的子软件包，但也可以通过可选的`subpackage_path`参数指定路径。如果将`subpackage_name`指定为`None`，则子软件包的名称将采用`subpackage_path`的基本名称。任何用于子软件包名称的`*`都会按通配符进行展开。'
- en: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — add SciPy subpackage
    configuration to the current one. The meaning and usage of arguments is explained
    above, see `config.get_subpackage()` method.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — 将SciPy子软件包配置添加到当前配置中。上面解释了参数的含义和用法，请参见`config.get_subpackage()`方法。'
- en: '`config.add_data_files(*files)` — prepend `files` to `data_files` list. If
    `files` item is a tuple then its first element defines the suffix of where data
    files are copied relative to package installation directory and the second element
    specifies the path to data files. By default data files are copied under package
    installation directory. For example,'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_files(*files)` — 将`files`添加到`data_files`列表的开头。如果`files`项是元组，则其第一个元素定义了数据文件相对于软件包安装目录的后缀，第二个元素指定了数据文件的路径。默认情况下，数据文件被复制到软件包安装目录下。例如，'
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: will install data files to the following locations
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Path to data files can be a function taking no arguments and returning path(s)
    to data files – this is a useful when data files are generated while building
    the package. (XXX: explain the step when this function are called exactly)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据文件的路径可以是一个不带参数并返回数据文件路径的函数 —— 当在构建软件包时生成数据文件时，这是非常有用的。（XXX：解释确切调用这些函数的步骤）
- en: '`config.add_data_dir(data_path)` — add directory `data_path` recursively to
    `data_files`. The whole directory tree starting at `data_path` will be copied
    under package installation directory. If `data_path` is a tuple then its first
    element defines the suffix of where data files are copied relative to package
    installation directory and the second element specifies the path to data directory.
    By default, data directory are copied under package installation directory under
    the basename of `data_path`. For example,'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_dir(data_path)` — 递归地将`data_path`目录添加到`data_files`中。从`data_path`开始的整个目录树将被复制到包安装目录下。如果`data_path`是一个元组，则它的第一个元素定义了数据文件被复制的后缀，相对于包安装目录，第二个元素指定了数据目录的路径。默认情况下，数据目录将被复制到包安装目录下的`data_path`的基本名称下。例如，'
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: will install data files to the following locations
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`config.add_include_dirs(*paths)` — prepend `paths` to `include_dirs` list.
    This list will be visible to all extension modules of the current package.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_include_dirs(*paths)` — 将`paths`添加到`include_dirs`列表的开头。这个列表对当前包的所有扩展模块可见。'
- en: '`config.add_headers(*files)` — prepend `files` to `headers` list. By default,
    headers will be installed under `<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`
    directory. If `files` item is a tuple then it’s first argument specifies the installation
    suffix relative to `<prefix>/include/pythonX.X/` path. This is a Python distutils
    method; its use is discouraged for NumPy and SciPy in favour of `config.add_data_files(*files)`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_headers(*files)` — 将`files`添加到`headers`列表的开头。默认情况下，头文件将安装在`<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`目录下。如果`files`项是一个元组，则它的第一个参数指定了相对于`<prefix>/include/pythonX.X/`路径的安装后缀。这是一个Python
    distutils方法；在NumPy和SciPy中应该使用`config.add_data_files(*files)`。'
- en: '`config.add_scripts(*files)` — prepend `files` to `scripts` list. Scripts will
    be installed under `<prefix>/bin/` directory.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_scripts(*files)` — 将`files`添加到`scripts`列表的开头。脚本将安装在`<prefix>/bin/`目录下。'
- en: '`config.add_extension(name,sources,**kw)` — create and add an `Extension` instance
    to `ext_modules` list. The first argument `name` defines the name of the extension
    module that will be installed under `config.name` package. The second argument
    is a list of sources. `add_extension` method takes also keyword arguments that
    are passed on to the `Extension` constructor. The list of allowed keywords is
    the following: `include_dirs`, `define_macros`, `undef_macros`, `library_dirs`,
    `libraries`, `runtime_library_dirs`, `extra_objects`, `extra_compile_args`, `extra_link_args`,
    `export_symbols`, `swig_opts`, `depends`, `language`, `f2py_options`, `module_dirs`,
    `extra_info`, `extra_f77_compile_args`, `extra_f90_compile_args`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_extension(name,sources,**kw)` — 创建并将一个`Extension`实例添加到`ext_modules`列表中。第一个参数`name`定义了扩展模块的名称，该扩展模块将安装在`config.name`包下。第二个参数是一个源列表。`add_extension`方法还接受将传递给`Extension`构造函数的关键字参数。允许的关键字列表如下：`include_dirs`，`define_macros`，`undef_macros`，`library_dirs`，`libraries`，`runtime_library_dirs`，`extra_objects`，`extra_compile_args`，`extra_link_args`，`export_symbols`，`swig_opts`，`depends`，`language`，`f2py_options`，`module_dirs`，`extra_info`，`extra_f77_compile_args`，`extra_f90_compile_args`。'
- en: Note that `config.paths` method is applied to all lists that may contain paths.
    `extra_info` is a dictionary or a list of dictionaries that content will be appended
    to keyword arguments. The list `depends` contains paths to files or directories
    that the sources of the extension module depend on. If any path in the `depends`
    list is newer than the extension module, then the module will be rebuilt.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`config.paths`方法适用于可能包含路径的所有列表。`extra_info`是一个字典或字典列表，其内容将追加到关键字参数。`depends`列表包含扩展模块源代码依赖的文件或目录路径。如果`depends`列表中的任何路径都比扩展模块新，那么模块将被重新构建。
- en: 'The list of sources may contain functions (‘source generators’) with a pattern
    `def <funcname>(ext, build_dir): return <source(s) or None>`. If `funcname` returns
    `None`, no sources are generated. And if the `Extension` instance has no sources
    after processing all source generators, no extension module will be built. This
    is the recommended way to conditionally define extension modules. Source generator
    functions are called by the `build_src` sub-command of `numpy.distutils`.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '源列表可能包含函数（‘源生成器’），其模式为`def <funcname>(ext, build_dir): return <source(s) or
    None>`。如果`funcname`返回`None`，则不会生成任何源代码。如果所有源生成器处理后`Extension`实例没有源代码，那么不会构建扩展模块。这是有条件地定义扩展模块的推荐方法。源生成器函数由`numpy.distutils`的`build_src`子命令调用。'
- en: 'For example, here is a typical source generator function:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，这是一个典型的源生成器函数：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first argument contains the Extension instance that can be useful to access
    its attributes like `depends`, `sources`, etc. lists and modify them during the
    building process. The second argument gives a path to a build directory that must
    be used when creating files to a disk.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个参数包含Extension实例，可以用于访问其属性，如`depends`、`sources`等列表，并在构建过程中对其进行修改。第二个参数给出了一个构建目录的路径，在将文件写入磁盘时必须使用该目录。
- en: '`config.add_library(name, sources, **build_info)` — add a library to `libraries`
    list. Allowed keywords arguments are `depends`, `macros`, `include_dirs`, `extra_compiler_args`,
    `f2py_options`, `extra_f77_compile_args`, `extra_f90_compile_args`. See `.add_extension()`
    method for more information on arguments.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_library(name, sources, **build_info)` — 向`libraries`列表添加一个库。允许的关键字参数有`depends`、`macros`、`include_dirs`、`extra_compiler_args`、`f2py_options`、`extra_f77_compile_args`、`extra_f90_compile_args`。有关参数的更多信息，请参见`.add_extension()`方法。'
- en: '`config.have_f77c()` — return True if Fortran 77 compiler is available (read:
    a simple Fortran 77 code compiled successfully).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f77c()` — 如果Fortran 77编译器可用，则返回True（即：简单的Fortran 77代码编译成功）。'
- en: '`config.have_f90c()` — return True if Fortran 90 compiler is available (read:
    a simple Fortran 90 code compiled successfully).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f90c()` — 如果Fortran 90编译器可用，则返回True（即：简单的Fortran 90代码编译成功）。'
- en: '`config.get_version()` — return version string of the current package, `None`
    if version information could not be detected. This methods scans files `__version__.py`,
    `<packagename>_version.py`, `version.py`, `__svn_version__.py` for string variables
    `version`, `__version__`, `<packagename>_version`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_version()` — 返回当前包的版本字符串，如果无法检测到版本信息，则返回`None`。该方法扫描文件`__version__.py`、`<packagename>_version.py`、`version.py`、`__svn_version__.py`以查找字符串变量`version`、`__version__`、`<packagename>_version`。'
- en: '`config.make_svn_version_py()` — appends a data function to `data_files` list
    that will generate `__svn_version__.py` file to the current package directory.
    The file will be removed from the source directory when Python exits.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.make_svn_version_py()` — 向`data_files`列表附加一个数据函数，该函数将生成`__svn_version__.py`文件到当前包目录。当Python退出时，将从源目录中删除该文件。'
- en: '`config.get_build_temp_dir()` — return a path to a temporary directory. This
    is the place where one should build temporary files.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_build_temp_dir()` — 返回一个临时目录的路径。这是构建临时文件的地方。'
- en: '`config.get_distribution()` — return distutils `Distribution` instance.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_distribution()` — 返回distutils的`Distribution`实例。'
- en: '`config.get_config_cmd()` — returns `numpy.distutils` config command instance.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_config_cmd()` — 返回`numpy.distutils`配置命令实例。'
- en: '`config.get_info(*names)` —'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_info(*names)` — '
- en: '### Conversion of `.src` files using Templates'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用模板转换`.src`文件'
- en: 'NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases.  ### Fortran files'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'NumPy distutils支持自动转换命名为<somefile>.src的源文件。该功能可用于维护非常相似的代码块，只需要在块之间进行简单的更改。在设置的构建阶段，如果遇到名为<somefile>.src的模板文件，则会从模板构造一个名为<somefile>的新文件，并将其放置在构建目录中以供使用。支持两种模板转换形式。第一种形式用于名为<file>.ext.src的文件，其中ext是一个已识别的Fortran扩展名（f、f90、f95、f77、for、ftn、pyf）。第二种形式用于所有其他情况。
    ### Fortran文件'
- en: 'This template converter will replicate all **function** and **subroutine**
    blocks in the file with names that contain ‘<…>’ according to the rules in ‘<…>’.
    The number of comma-separated words in ‘<…>’ determines the number of times the
    block is repeated. What these words are indicates what that repeat rule, ‘<…>’,
    should be replaced with in each block. All of the repeat rules in a block must
    contain the same number of comma-separated words indicating the number of times
    that block should be repeated. If the word in the repeat rule needs a comma, leftarrow,
    or rightarrow, then prepend it with a backslash ‘ ''. If a word in the repeat
    rule matches ‘ \<index>’ then it will be replaced with the <index>-th word in
    the same repeat specification. There are two forms for the repeat rule: named
    and short.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板转换器将根据‘<…>’中的规则复制文件中所有的**函数**和**子程序**块，名字中含有‘<…>’的。‘<…>’中以逗号分隔的单词的数量决定了块的重复次数。这些单词指示了在每个块中将重复规则‘<…>’替换为什么内容。块中的所有重复规则必须包含相同数量的逗号分隔的单词，以指示该块应该重复多少次。如果重复规则中的单词需要逗号、箭头或右箭头，则在其前面添加反斜杠‘
    '。如果重复规则中的单词与‘ \<index>’匹配，则会被替换为相同重复规范中的第<index>个单词。重复规则有两种形式：命名和短形式。
- en: Named repeat rule
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命名的重复规则
- en: A named repeat rule is useful when the same set of repeats must be used several
    times in a block. It is specified using <rule1=item1, item2, item3,…, itemN>,
    where N is the number of times the block should be repeated. On each repeat of
    the block, the entire expression, ‘<…>’ will be replaced first with item1, and
    then with item2, and so forth until N repeats are accomplished. Once a named repeat
    specification has been introduced, the same repeat rule may be used **in the current
    block** by referring only to the name (i.e. <rule1>).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 命名的重复规则在一个块中多次使用相同重复集时很有用。它使用<rule1=item1, item2, item3,…, itemN>的格式指定，其中N是应该重复该块的次数。在每个块的重复中，整个表达式‘<…>’将首先替换为item1，然后替换为item2，以此类推，直到完成N次重复。一旦引入了命名的重复规范，相同的重复规则可以通过只引用名称（即<rule1>）在当前块中使用。
- en: Short repeat rule
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 短形式的重复规则
- en: A short repeat rule looks like <item1, item2, item3, …, itemN>. The rule specifies
    that the entire expression, ‘<…>’ should be replaced first with item1, and then
    with item2, and so forth until N repeats are accomplished.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 短形式的重复规则的格式为<item1, item2, item3, …, itemN>。该规则指定整个表达式‘<…>’应首先替换为item1，然后替换为item2，以此类推，直到完成N次重复。
- en: Pre-defined names
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预定义名称
- en: 'The following predefined named repeat rules are available:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的预定义命名重复规则如下：
- en: <prefix=s,d,c,z>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <prefix=s,d,c,z>
- en: <_c=s,d,c,z>
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_c=s,d,c,z>
- en: <_t=real, double precision, complex, double complex>
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_t=real, double precision, complex, double complex>
- en: <ftype=real, double precision, complex, double complex>
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftype=real, double precision, complex, double complex>
- en: <ctype=float, double, complex_float, complex_double>
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctype=float, double, complex_float, complex_double>
- en: <ftypereal=float, double precision, \0, \1>
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftypereal=float, double precision, \0, \1>
- en: <ctypereal=float, double, \0, \1>
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctypereal=float, double, \0, \1>
- en: Other files
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他文件
- en: Non-Fortran files use a separate syntax for defining template blocks that should
    be repeated using a variable expansion similar to the named repeat rules of the
    Fortran-specific repeats.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 非Fortran文件使用单独的语法来定义应使用类似于Fortran特定重复的命名重复规则的模板块的变量扩展。
- en: 'NumPy Distutils preprocesses C source files (extension: `.c.src`) written in
    a custom templating language to generate C code. The `@` symbol is used to wrap
    macro-style variables to empower a string substitution mechanism that might describe
    (for instance) a set of data types.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy Distutils预处理以自定义模板语言编写的C源文件（扩展名：`.c.src`）以生成C代码。`@`符号用于包装宏样式的变量，以实现可能描述（例如）一组数据类型的字符串替换机制。
- en: 'The template language blocks are delimited by `/**begin repeat` and `/**end
    repeat**/` lines, which may also be nested using consecutively numbered delimiting
    lines such as `/**begin repeat1` and `/**end repeat1**/`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 模板语言块由`/**begin repeat`和`/**end repeat**/`行进行界定，这些界定行也可以使用连续编号的界定行（如`/**begin
    repeat1`和`/**end repeat1**/`）进行嵌套：
- en: '`/**begin repeat` on a line by itself marks the beginning of a segment that
    should be repeated.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/**begin repeat`单独一行标志着应该重复的段的开始。'
- en: Named variable expansions are defined using `#name=item1, item2, item3, ...,
    itemN#` and placed on successive lines. These variables are replaced in each repeat
    block with corresponding word. All named variables in the same repeat block must
    define the same number of words.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`#name=item1, item2, item3, ..., itemN#`定义命名变量扩展，并放置在连续的行上。这些变量会在每个重复块中被相应的词替换。同一重复块中的所有命名变量必须定义相同数量的词。
- en: In specifying the repeat rule for a named variable, `item*N` is short- hand
    for `item, item, ..., item` repeated N times. In addition, parenthesis in combination
    with `*N` can be used for grouping several items that should be repeated. Thus,
    `#name=(item1, item2)*4#` is equivalent to `#name=item1, item2, item1, item2,
    item1, item2, item1, item2#`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为命名变量指定重复规则时，`item*N`是`item, item, ..., item`重复N次的简写。此外，结合`*N`的括号可用于对应多个应该重复的项进行分组。因此，`#name=(item1,
    item2)*4#`等同于`#name=item1, item2, item1, item2, item1, item2, item1, item2#`。
- en: '`*/` on a line by itself marks the end of the variable expansion naming. The
    next line is the first line that will be repeated using the named rules.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`*/`标记结束变量扩展命名。下一行是将使用命名规则重复的第一行。
- en: Inside the block to be repeated, the variables that should be expanded are specified
    as `@name@`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在要重复的块内，应扩展的变量被指定为`@name@`。
- en: '`/**end repeat**/` on a line by itself marks the previous line as the last
    line of the block to be repeated.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`/**end repeat**/`标记前一行为要重复的块的最后一行。
- en: A loop in the NumPy C source code may have a `@TYPE@` variable, targeted for
    string substitution, which is preprocessed to a number of otherwise identical
    loops with several strings such as `INT`, `LONG`, `UINT`, `ULONG`. The `@TYPE@`
    style syntax thus reduces code duplication and maintenance burden by mimicking
    languages that have generic type support.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy C源代码中的循环可能具有`@TYPE@`变量，用于字符串替换，预处理为具有多个字符串（如`INT`、`LONG`、`UINT`、`ULONG`等）的通常相同的循环。因此，`@TYPE@`样式语法通过模仿具有通用类型支持的语言来减少代码重复和维护负担。
- en: 'The above rules may be clearer in the following template source example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以上规则在以下模板源示例中可能更清晰：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preprocessing of generically-typed C source files (whether in NumPy proper
    or in any third party package using NumPy Distutils) is performed by [conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py).
    The type-specific C files generated (extension: `.c`) by these modules during
    the build process are ready to be compiled. This form of generic typing is also
    supported for C header files (preprocessed to produce `.h` files).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型C源文件的预处理（无论是NumPy本身还是使用NumPy Distutils的任何第三方包中的文件）由[conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py)执行。在构建过程中由这些模块生成的特定类型C文件（扩展名：`.c`）已准备好进行编译。这种通用类型的形式也支持C头文件（预处理以生成`.h`文件）。
- en: Useful functions in `numpy.distutils.misc_util`
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.misc_util`中的有用函数'
- en: '`get_numpy_include_dirs()` — return a list of NumPy base include directories.
    NumPy base include directories contain header files such as `numpy/arrayobject.h`,
    `numpy/funcobject.h` etc. For installed NumPy the returned list has length 1 but
    when building NumPy the list may contain more directories, for example, a path
    to `config.h` file that `numpy/base/setup.py` file generates and is used by `numpy`
    header files.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_numpy_include_dirs()` — 返回NumPy基础包含目录的列表。NumPy基础包含目录包含诸如`numpy/arrayobject.h`、`numpy/funcobject.h`等头文件。对于已安装的NumPy，返回的列表长度为1，但在构建NumPy时，列表可能包含更多目录，例如，`numpy/base/setup.py`文件生成并被`numpy`头文件使用的`config.h`文件路径。'
- en: '`append_path(prefix,path)` — smart append `path` to `prefix`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append_path(prefix,path)` — 智能地将`path`附加到`prefix`。'
- en: '`gpaths(paths, local_path='''')` — apply glob to paths and prepend `local_path`
    if needed.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gpaths(paths, local_path='''')` — 对路径应用glob并在需要时添加`local_path`前缀。'
- en: '`njoin(*path)` — join pathname components + convert `/`-separated path to `os.sep`-separated
    path and resolve `..`, `.` from paths. Ex. `njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`njoin(*path)` — 连接路径名组件+将`/`分隔路径转换为`os.sep`分隔路径并解析路径中的`..`、`.`。例如，`njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`。'
- en: '`minrelpath(path)` — resolves dots in `path`.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minrelpath(path)` — 解析`path`中的点号。'
- en: '`rel_path(path, parent_path)` — return `path` relative to `parent_path`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rel_path(path, parent_path)` — 返回相对于`parent_path`的`path`。'
- en: '`def get_cmd(cmdname,_cache={})` — returns `numpy.distutils` command instance.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def get_cmd(cmdname,_cache={})` — 返回`numpy.distutils`命令实例。'
- en: '`all_strings(lst)`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all_strings(lst)`'
- en: '`has_f_sources(sources)`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_f_sources(sources)`'
- en: '`has_cxx_sources(sources)`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_cxx_sources(sources)`'
- en: '`filter_sources(sources)` — return `c_sources, cxx_sources, f_sources, fmodule_sources`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_sources(sources)` — 返回`c_sources, cxx_sources, f_sources, fmodule_sources`'
- en: '`get_dependencies(sources)`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_dependencies(sources)`'
- en: '`is_local_src_dir(directory)`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_local_src_dir(directory)`'
- en: '`get_ext_source_files(ext)`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_ext_source_files(ext)`'
- en: '`get_script_files(scripts)`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_script_files(scripts)`'
- en: '`get_lib_source_files(lib)`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_lib_source_files(lib)`'
- en: '`get_data_files(data)`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_data_files(data)`'
- en: '`dot_join(*args)` — join non-zero arguments with a dot.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dot_join(*args)` — 用点连接非零参数。'
- en: '`get_frame(level=0)` — return frame object from call stack with given level.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_frame(level=0)` — 返回给定级别调用堆栈中的帧对象。'
- en: '`cyg2win32(path)`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cyg2win32(path)`'
- en: '`mingw32()` — return `True` when using mingw32 environment.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mingw32()` — 在使用 mingw32 环境时返回`True`。'
- en: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
- en: '`get_path(mod_name,parent_path=None)` — return path of a module relative to
    parent_path when given. Handles also `__main__` and `__builtin__` modules.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_path(mod_name,parent_path=None)` — 在给定时，返回相对于 parent_path 的模块路径。也处理`__main__`和`__builtin__`模块。'
- en: '`allpath(name)` — replaces `/` with `os.sep` in `name`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allpath(name)` — 在`name`中将`/`替换为`os.sep`。'
- en: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
- en: '`numpy.distutils.system_info` module'
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.system_info` 模块'
- en: '`get_info(name,notfound_action=0)`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_info(name,notfound_action=0)`'
- en: '`combine_paths(*args,**kws)`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_paths(*args,**kws)`'
- en: '`show_all()`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show_all()`'
- en: '`numpy.distutils.cpuinfo` module'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.cpuinfo` 模块'
- en: '`cpuinfo`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpuinfo`'
- en: '`numpy.distutils.log` module'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.log` 模块'
- en: '`set_verbosity(v)`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_verbosity(v)`'
- en: '`numpy.distutils.exec_command` module'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.exec_command` 模块'
- en: '`get_pythonexe()`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_pythonexe()`'
- en: '`find_executable(exe, path=None)`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_executable(exe, path=None)`'
- en: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
- en: The `__init__.py` file
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`__init__.py` 文件'
- en: 'The header of a typical SciPy `__init__.py` is:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 典型 SciPy `__init__.py` 的头部是：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Extra features in NumPy Distutils
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy Distutils 中的额外功能
- en: Specifying config_fc options for libraries in setup.py script
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 setup.py 脚本中为库指定 config_fc 选项
- en: It is possible to specify config_fc options in setup.py scripts. For example,
    using
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 setup.py 脚本中指定 config_fc 选项。例如，使用
- en: config.add_library(‘library’,
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: config.add_library(‘library’,
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sources=[…], config_fc={‘noopt’:(__file__,1)})
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sources=[…], config_fc={‘noopt’:(__file__,1)})
- en: will compile the `library` sources without optimization flags.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译 `library` 源文件时不使用优化标志。
- en: It’s recommended to specify only those config_fc options in such a way that
    are compiler independent.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 建议只指定那些与编译器无关的 config_fc 选项。
- en: Getting extra Fortran 77 compiler options from source
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码中获取额外的 Fortran 77 编译器选项
- en: 'Some old Fortran codes need special compiler options in order to work correctly.
    In order to specify compiler options per source file, `numpy.distutils` Fortran
    compiler looks for the following pattern:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一些旧的 Fortran 代码需要特殊的编译器选项才能正确工作。为了指定每个源文件的编译器选项，`numpy.distutils` Fortran 编译器寻找以下模式：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: in the first 20 lines of the source and use the `f77flags` for specified type
    of the fcompiler (the first character `C` is optional).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码的前 20 行中，并针对指定类型的 fcompiler 使用 `f77flags`（第一个字符 `C` 可选）。
- en: 'TODO: This feature can be easily extended for Fortran 90 codes as well. Let
    us know if you would need such a feature.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'TODO: 这个功能也可以很容易地扩展到 Fortran 90 代码上。如果您需要这样的功能，请告诉我们。'
- en: SciPy structure
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciPy 结构
- en: 'Currently SciPy project consists of two packages:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 SciPy 项目包括两个包：
- en: 'NumPy — it provides packages like:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy — 提供类似以下包：
- en: numpy.distutils - extension to Python distutils
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.distutils - Python distutils 的扩展
- en: numpy.f2py - a tool to bind Fortran/C codes to Python
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.f2py - 一个将 Fortran/C 代码绑定到 Python 的工具
- en: numpy.core - future replacement of Numeric and numarray packages
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.core - 取代 Numeric 和 numarray 包的未来包裹
- en: numpy.lib - extra utility functions
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.lib - 额外的实用函数
- en: numpy.testing - numpy-style tools for unit testing
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy.testing - 类似于 numpy 的单元测试工具
- en: etc
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等
- en: SciPy — a collection of scientific tools for Python.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy — 为 Python 提供的一批科学工具。
- en: The aim of this document is to describe how to add new tools to SciPy.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在描述如何向 SciPy 添加新工具。
- en: Requirements for SciPy packages
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciPy 包的要求
- en: SciPy consists of Python packages, called SciPy packages, that are available
    to Python users via the `scipy` namespace. Each SciPy package may contain other
    SciPy packages. And so on. Therefore, the SciPy directory tree is a tree of packages
    with arbitrary depth and width. Any SciPy package may depend on NumPy packages
    but the dependence on other SciPy packages should be kept minimal or zero.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy由Python包组成，称为SciPy包，通过`scipy`名称空间提供给Python用户。每个SciPy包可能包含其他SciPy包。以此类推。因此，SciPy目录树是具有任意深度和宽度的包树。任何SciPy包可能依赖于NumPy包，但对其他SciPy包的依赖应保持最小或零。
- en: 'A SciPy package contains, in addition to its sources, the following files and
    directories:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 除了源文件之外，SciPy包还包含以下文件和目录：
- en: '`setup.py` — building script'
  id: totrans-170
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup.py` — 构建脚本'
- en: ''
  id: totrans-171
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-172
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`__init__.py` — package initializer'
  id: totrans-173
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` — 包初始化文件'
- en: ''
  id: totrans-174
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-175
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`tests/` — directory of unittests'
  id: totrans-176
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests/` — 单元测试目录'
- en: Their contents are described below.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的内容如下。
- en: The `setup.py` file
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`setup.py`文件'
- en: In order to add a Python package to SciPy, its build script (`setup.py`) must
    meet certain requirements. The most important requirement is that the package
    define a `configuration(parent_package='',top_path=None)` function which returns
    a dictionary suitable for passing to `numpy.distutils.core.setup(..)`. To simplify
    the construction of this dictionary, `numpy.distutils.misc_util` provides the
    `Configuration` class, described below.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Python包添加到SciPy，其构建脚本（`setup.py`）必须满足一定的要求。最重要的要求是该包定义一个返回适合传递给`numpy.distutils.core.setup(..)`的字典的`configuration(parent_package='',top_path=None)`函数。为了简化构建此字典的过程，`numpy.distutils.misc_util`提供了下面描述的`Configuration`类。
- en: SciPy pure Python package example
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciPy纯Python包示例
- en: 'Below is an example of a minimal `setup.py` file for a pure SciPy package:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个纯SciPy包的最小`setup.py`文件示例：
- en: '[PRE9]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The arguments of the `configuration` function specify the name of parent SciPy
    package (`parent_package`) and the directory location of the main `setup.py` script
    (`top_path`). These arguments, along with the name of the current package, should
    be passed to the `Configuration` constructor.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration`函数的参数指定父SciPy包的名称（`parent_package`）和主`setup.py`脚本的目录位置（`top_path`）。这些参数，连同当前包的名称，应传递给`Configuration`构造函数。'
- en: The `Configuration` constructor has a fourth optional argument, `package_path`,
    that can be used when package files are located in a different location than the
    directory of the `setup.py` file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`Configuration`构造函数有一个第四个可选参数`package_path`，用于当包文件位于不同于`setup.py`文件目录的位置时使用。'
- en: Remaining `Configuration` arguments are all keyword arguments that will be used
    to initialize attributes of `Configuration` instance. Usually, these keywords
    are the same as the ones that `setup(..)` function would expect, for example,
    `packages`, `ext_modules`, `data_files`, `include_dirs`, `libraries`, `headers`,
    `scripts`, `package_dir`, etc. However, the direct specification of these keywords
    is not recommended as the content of these keyword arguments will not be processed
    or checked for the consistency of SciPy building system.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的`Configuration`参数都是将用于初始化`Configuration`实例属性的关键字参数。通常，这些关键字与`setup(..)`函数所期望的关键字相同，例如`packages`，`ext_modules`，`data_files`，`include_dirs`，`libraries`，`headers`，`scripts`，`package_dir`等。但是，不建议直接指定这些关键字，因为这些关键字参数的内容不会被处理或检查SciPy构建系统的一致性。
- en: Finally, `Configuration` has `.todict()` method that returns all the configuration
    data as a dictionary suitable for passing on to the `setup(..)` function.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Configuration`有一个`.todict()`方法，将所有配置数据作为适合传递给`setup(..)`函数的字典返回。
- en: '`Configuration` instance attributes'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例属性'
- en: 'In addition to attributes that can be specified via keyword arguments to `Configuration`
    constructor, `Configuration` instance (let us denote as `config`) has the following
    attributes that can be useful in writing setup scripts:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以通过关键字参数指定的属性外，`Configuration`实例（我们将其标记为`config`）具有以下对于编写安装脚本很有用的属性：
- en: '`config.name` - full name of the current package. The names of parent packages
    can be extracted as `config.name.split(''.'')`.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.name` - 当前包的完整名称。可以提取父包的名称为`config.name.split(''.'')`。'
- en: '`config.local_path` - path to the location of current `setup.py` file.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.local_path` - 当前`setup.py`文件的路径位置。'
- en: '`config.top_path` - path to the location of main `setup.py` file.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.top_path` - 主`setup.py`文件的路径位置。'
- en: '`Configuration` instance methods'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例方法'
- en: '`config.todict()` — returns configuration dictionary suitable for passing to
    `numpy.distutils.core.setup(..)` function.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.todict()` — 返回适合传递给`numpy.distutils.core.setup(..)`函数的配置字典。'
- en: '`config.paths(*paths) --- applies ``glob.glob(..)` to items of `paths` if necessary.
    Fixes `paths` item that is relative to `config.local_path`.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.paths(*paths) --- 如果必要，对`paths`的项目应用`glob.glob(..)`。修复相对于`config.local_path`的`paths`项目。'
- en: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — returns a list
    of subpackage configurations. Subpackage is looked in the current directory under
    the name `subpackage_name` but the path can be specified also via optional `subpackage_path`
    argument. If `subpackage_name` is specified as `None` then the subpackage name
    will be taken the basename of `subpackage_path`. Any `*` used for subpackage names
    are expanded as wildcards.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — 返回子包配置的列表。在当前目录下查找名为`subpackage_name`的子包，但也可以通过可选的`subpackage_path`参数指定路径。如果`subpackage_name`指定为`None`，则子包名称将使用`subpackage_path`的基本名称。任何用于子包名称的`*`都会被扩展为通配符。'
- en: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — add SciPy subpackage
    configuration to the current one. The meaning and usage of arguments is explained
    above, see `config.get_subpackage()` method.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — 向当前配置添加SciPy子包配置。解释参数的含义和用法如上所述，请参阅`config.get_subpackage()`方法。'
- en: '`config.add_data_files(*files)` — prepend `files` to `data_files` list. If
    `files` item is a tuple then its first element defines the suffix of where data
    files are copied relative to package installation directory and the second element
    specifies the path to data files. By default data files are copied under package
    installation directory. For example,'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_files(*files)` — 将`files`添加到`data_files`列表的开头。如果`files`项目是一个元组，则其第一个元素定义了将数据文件复制到包安装目录的后缀，第二个元素指定了数据文件的路径。默认情况下，数据文件将复制到包安装目录下。例如，'
- en: '[PRE10]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: will install data files to the following locations
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE11]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Path to data files can be a function taking no arguments and returning path(s)
    to data files – this is a useful when data files are generated while building
    the package. (XXX: explain the step when this function are called exactly)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据文件的路径可以是一个不带参数并返回路径(s)到数据文件的函数——当构建包时生成数据文件时，这是一个有用的功能（XXX:具体解释这个函数什么时候被调用）
- en: '`config.add_data_dir(data_path)` — add directory `data_path` recursively to
    `data_files`. The whole directory tree starting at `data_path` will be copied
    under package installation directory. If `data_path` is a tuple then its first
    element defines the suffix of where data files are copied relative to package
    installation directory and the second element specifies the path to data directory.
    By default, data directory are copied under package installation directory under
    the basename of `data_path`. For example,'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_dir(data_path)` — 递归地将目录`data_path`添加到`data_files`中。从`data_path`开始的整个目录树将在包安装目录下复制。如果`data_path`是一个元组，则其第一个元素定义了复制数据文件的后缀，相对于包安装目录，第二个元素指定了数据目录的路径。默认情况下，数据目录被复制到包安装目录下，以`data_path`的基本名称命名。例如，'
- en: '[PRE12]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: will install data files to the following locations
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE13]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`config.add_include_dirs(*paths)` — prepend `paths` to `include_dirs` list.
    This list will be visible to all extension modules of the current package.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_include_dirs(*paths)` — 将`paths`添加到`include_dirs`列表的开头。这个列表将对当前包的所有扩展模块可见。'
- en: '`config.add_headers(*files)` — prepend `files` to `headers` list. By default,
    headers will be installed under `<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`
    directory. If `files` item is a tuple then it’s first argument specifies the installation
    suffix relative to `<prefix>/include/pythonX.X/` path. This is a Python distutils
    method; its use is discouraged for NumPy and SciPy in favour of `config.add_data_files(*files)`.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_headers(*files)` — 将`files`添加到`headers`列表的开头。默认情况下，头文件将安装在`<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`目录下。如果`files`项目是一个元组，那么它的第一个参数指定相对于`<prefix>/include/pythonX.X/`路径的安装后缀。这是一个Python
    distutils方法；在NumPy和SciPy中，建议使用`config.add_data_files(*files)`。'
- en: '`config.add_scripts(*files)` — prepend `files` to `scripts` list. Scripts will
    be installed under `<prefix>/bin/` directory.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_scripts(*files)` — 将`files`添加到`scripts`列表的开头。脚本将安装在`<prefix>/bin/`目录下。'
- en: '`config.add_extension(name,sources,**kw)` — create and add an `Extension` instance
    to `ext_modules` list. The first argument `name` defines the name of the extension
    module that will be installed under `config.name` package. The second argument
    is a list of sources. `add_extension` method takes also keyword arguments that
    are passed on to the `Extension` constructor. The list of allowed keywords is
    the following: `include_dirs`, `define_macros`, `undef_macros`, `library_dirs`,
    `libraries`, `runtime_library_dirs`, `extra_objects`, `extra_compile_args`, `extra_link_args`,
    `export_symbols`, `swig_opts`, `depends`, `language`, `f2py_options`, `module_dirs`,
    `extra_info`, `extra_f77_compile_args`, `extra_f90_compile_args`.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_extension(name,sources,**kw)` — 创建并将一个 `Extension` 实例添加到 `ext_modules`
    列表中。第一个参数 `name` 定义了扩展模块的名称，该模块将安装在 `config.name` 包下。第二个参数是一个源列表。`add_extension`
    方法还接受传递给 `Extension` 构造函数的关键字参数。允许的关键字列表如下：`include_dirs`、`define_macros`、`undef_macros`、`library_dirs`、`libraries`、`runtime_library_dirs`、`extra_objects`、`extra_compile_args`、`extra_link_args`、`export_symbols`、`swig_opts`、`depends`、`language`、`f2py_options`、`module_dirs`、`extra_info`、`extra_f77_compile_args`、`extra_f90_compile_args`。'
- en: Note that `config.paths` method is applied to all lists that may contain paths.
    `extra_info` is a dictionary or a list of dictionaries that content will be appended
    to keyword arguments. The list `depends` contains paths to files or directories
    that the sources of the extension module depend on. If any path in the `depends`
    list is newer than the extension module, then the module will be rebuilt.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`config.paths` 方法适用于可能包含路径的所有列表。`extra_info` 是一个字典或字典列表，其内容将附加到关键字参数中。`depends`
    列表包含了扩展模块的源文件依赖的文件或目录路径。如果 `depends` 列表中的任何路径新于扩展模块，则将重新构建该模块。
- en: 'The list of sources may contain functions (‘source generators’) with a pattern
    `def <funcname>(ext, build_dir): return <source(s) or None>`. If `funcname` returns
    `None`, no sources are generated. And if the `Extension` instance has no sources
    after processing all source generators, no extension module will be built. This
    is the recommended way to conditionally define extension modules. Source generator
    functions are called by the `build_src` sub-command of `numpy.distutils`.'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '源列表可能包含具有模式 `def <funcname>(ext, build_dir): return <source(s) or None>` 的函数（‘源生成器’）。
    如果 `funcname` 返回 `None`，则不会生成任何源。如果 `Extension` 实例在处理所有源生成器后没有任何源，那么不会构建扩展模块。这是有条件地定义扩展模块的推荐方法。源生成器函数由
    `numpy.distutils` 的 `build_src` 子命令调用。'
- en: 'For example, here is a typical source generator function:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，这是一个典型的源生成器函数示例：
- en: '[PRE14]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first argument contains the Extension instance that can be useful to access
    its attributes like `depends`, `sources`, etc. lists and modify them during the
    building process. The second argument gives a path to a build directory that must
    be used when creating files to a disk.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个参数包含了 `Extension` 实例，可以用于访问其属性，如 `depends`、`sources` 等列表，并在构建过程中修改它们。第二个参数提供了一个构建目录的路径，在创建文件到磁盘时必须使用该路径。
- en: '`config.add_library(name, sources, **build_info)` — add a library to `libraries`
    list. Allowed keywords arguments are `depends`, `macros`, `include_dirs`, `extra_compiler_args`,
    `f2py_options`, `extra_f77_compile_args`, `extra_f90_compile_args`. See `.add_extension()`
    method for more information on arguments.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_library(name, sources, **build_info)` — 将库添加到 `libraries` 列表中。允许的关键字参数包括
    `depends`、`macros`、`include_dirs`、`extra_compiler_args`、`f2py_options`、`extra_f77_compile_args`、`extra_f90_compile_args`。有关参数的更多信息，请参阅`.add_extension()`
    方法。'
- en: '`config.have_f77c()` — return True if Fortran 77 compiler is available (read:
    a simple Fortran 77 code compiled successfully).'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f77c()` — 如果 Fortran 77 编译器可用（即：简单的Fortran 77代码编译成功），则返回True。'
- en: '`config.have_f90c()` — return True if Fortran 90 compiler is available (read:
    a simple Fortran 90 code compiled successfully).'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f90c()` — 如果 Fortran 90 编译器可用（即：简单的Fortran 90代码编译成功），则返回True。'
- en: '`config.get_version()` — return version string of the current package, `None`
    if version information could not be detected. This methods scans files `__version__.py`,
    `<packagename>_version.py`, `version.py`, `__svn_version__.py` for string variables
    `version`, `__version__`, `<packagename>_version`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_version()` — 返回当前包的版本字符串，如果无法检测到版本信息，则返回 `None`。该方法扫描文件 `__version__.py`、`<packagename>_version.py`、`version.py`、`__svn_version__.py`，以查找字符串变量
    `version`、`__version__`、`<packagename>_version`。'
- en: '`config.make_svn_version_py()` — appends a data function to `data_files` list
    that will generate `__svn_version__.py` file to the current package directory.
    The file will be removed from the source directory when Python exits.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.make_svn_version_py()` — 向`data_files`列表添加一个数据函数，该函数将生成`__svn_version__.py`文件到当前包目录。Python退出时，该文件将从源目录中删除。'
- en: '`config.get_build_temp_dir()` — return a path to a temporary directory. This
    is the place where one should build temporary files.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_build_temp_dir()` — 返回临时目录路径。这是应该构建临时文件的地方。'
- en: '`config.get_distribution()` — return distutils `Distribution` instance.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_distribution()` — 返回 distutils `Distribution` 实例。'
- en: '`config.get_config_cmd()` — returns `numpy.distutils` config command instance.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_config_cmd()` — 返回 `numpy.distutils` 配置命令实例。'
- en: '`config.get_info(*names)` —'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_info(*names)` —'
- en: '### Conversion of `.src` files using Templates'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用模板转换`.src`文件'
- en: 'NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases.  ### Fortran files'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy distutils支持自动转换命名为<somefile>.src的源文件。这个功能可用于在块之间保持非常相似的代码，只需要进行简单的更改。在设置的构建阶段期间，如果遇到名为<somefile>.src的模板文件，将从模板构造一个名为<somefile>的新文件，并将其放置在构建目录中以供使用。支持两种模板转换形式。第一种形式适用于文件名为<file>.ext.src，其中ext是一个已识别的Fortran扩展名（f，f90，f95，f77，for，ftn，pyf）。第二种形式用于所有其他情况。###
    Fortran文件
- en: 'This template converter will replicate all **function** and **subroutine**
    blocks in the file with names that contain ‘<…>’ according to the rules in ‘<…>’.
    The number of comma-separated words in ‘<…>’ determines the number of times the
    block is repeated. What these words are indicates what that repeat rule, ‘<…>’,
    should be replaced with in each block. All of the repeat rules in a block must
    contain the same number of comma-separated words indicating the number of times
    that block should be repeated. If the word in the repeat rule needs a comma, leftarrow,
    or rightarrow, then prepend it with a backslash ‘ ''. If a word in the repeat
    rule matches ‘ \<index>’ then it will be replaced with the <index>-th word in
    the same repeat specification. There are two forms for the repeat rule: named
    and short.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板转换器将根据‘<…>’中的规则，复制文件中所有的**函数**和**子例程**块，并以包含‘<…>’的名称来重复。‘<…>’中用逗号分隔的单词的数量决定了块被重复的次数。这些单词指示了在每个块中‘<…>’应该用什么替换。一个块中的所有重复规则必须包含相同数量的逗号分隔的单词，表明这个块应该被重复的次数。如果重复规则中的单词需要有逗号，左箭头或右箭头，那么在其前面加上反斜杠'
    '。如果重复规则中的单词匹配‘\<index>’，那么它将被替换为相同重复规范中的第<index>个单词。重复规则有两种形式：命名和简短。
- en: Named repeat rule
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命名重复规则
- en: A named repeat rule is useful when the same set of repeats must be used several
    times in a block. It is specified using <rule1=item1, item2, item3,…, itemN>,
    where N is the number of times the block should be repeated. On each repeat of
    the block, the entire expression, ‘<…>’ will be replaced first with item1, and
    then with item2, and so forth until N repeats are accomplished. Once a named repeat
    specification has been introduced, the same repeat rule may be used **in the current
    block** by referring only to the name (i.e. <rule1>).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当同一组重复必须多次在一个块中使用时，命名重复规则非常有用。它使用`<rule1=item1, item2, item3,…, itemN>`来指定，其中N是块应该重复的次数。在块的每次重复中，整个表达式‘<…>’首先会被item1替换，然后被item2替换，依此类推，直到完成N次重复。一旦引入了命名重复规范，就可以通过只引用名称（即<规则1>）**在当前块中**使用相同的重复规则。
- en: Short repeat rule
  id: totrans-229
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简短重复规则
- en: A short repeat rule looks like <item1, item2, item3, …, itemN>. The rule specifies
    that the entire expression, ‘<…>’ should be replaced first with item1, and then
    with item2, and so forth until N repeats are accomplished.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 简短重复规则看起来像<item1, item2, item3, …, itemN>。规则指定整个表达式‘<…>’应首先用item1替换，然后用item2替换，依此类推，直到N次重复完成。
- en: Pre-defined names
  id: totrans-231
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预定义名称
- en: 'The following predefined named repeat rules are available:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的预定义命名重复规则：
- en: <prefix=s,d,c,z>
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <prefix=s,d,c,z>
- en: <_c=s,d,c,z>
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_c=s,d,c,z>
- en: <_t=real, double precision, complex, double complex>
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_t=real, double precision, complex, double complex>
- en: <ftype=real, double precision, complex, double complex>
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftype=real, double precision, complex, double complex>
- en: <ctype=float, double, complex_float, complex_double>
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctype=float, double, complex_float, complex_double>
- en: <ftypereal=float, double precision, \0, \1>
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftypereal=float, double precision, \0, \1>
- en: <ctypereal=float, double, \0, \1>
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctypereal=float, double, \0, \1>
- en: Other files
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他文件
- en: Non-Fortran files use a separate syntax for defining template blocks that should
    be repeated using a variable expansion similar to the named repeat rules of the
    Fortran-specific repeats.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 非Fortran文件使用单独的语法来定义应使用类似于Fortran特定重复规则的变量扩展的模板块。
- en: 'NumPy Distutils preprocesses C source files (extension: `.c.src`) written in
    a custom templating language to generate C code. The `@` symbol is used to wrap
    macro-style variables to empower a string substitution mechanism that might describe
    (for instance) a set of data types.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy Distutils对使用自定义模板语言编写的C源文件（扩展名：`.c.src`）进行预处理以生成C代码。`@`符号用于包装宏样式的变量，以提供描述（例如）一组数据类型的字符串替换机制。
- en: 'The template language blocks are delimited by `/**begin repeat` and `/**end
    repeat**/` lines, which may also be nested using consecutively numbered delimiting
    lines such as `/**begin repeat1` and `/**end repeat1**/`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 模板语言块由`/**begin repeat`和`/**end repeat**/`行界定，这些行也可以使用连续编号的界定行进行嵌套，例如`/**begin
    repeat1`和`/**end repeat1**/`：
- en: '`/**begin repeat` on a line by itself marks the beginning of a segment that
    should be repeated.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`/**begin repeat`标记了应重复的段的开始。
- en: Named variable expansions are defined using `#name=item1, item2, item3, ...,
    itemN#` and placed on successive lines. These variables are replaced in each repeat
    block with corresponding word. All named variables in the same repeat block must
    define the same number of words.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`#name=item1, item2, item3, ..., itemN#`定义命名变量扩展，并将其放置在连续的行上。这些变量在每个重复块中与相应的单词替换。同一重复块中的所有命名变量必须定义相同数量的单词。
- en: In specifying the repeat rule for a named variable, `item*N` is short- hand
    for `item, item, ..., item` repeated N times. In addition, parenthesis in combination
    with `*N` can be used for grouping several items that should be repeated. Thus,
    `#name=(item1, item2)*4#` is equivalent to `#name=item1, item2, item1, item2,
    item1, item2, item1, item2#`.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为命名变量指定重复规则时，`item*N`表示`item, item, ..., item`重复N次的简写。此外，结合`*N`的括号可以用于分组多个应该重复的项。因此，`#name=(item1,
    item2)*4#`相当于`#name=item1, item2, item1, item2, item1, item2, item1, item2#`。
- en: '`*/` on a line by itself marks the end of the variable expansion naming. The
    next line is the first line that will be repeated using the named rules.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行的`*/`标记了变量扩展命名的结束。下一行是将使用命名规则重复的第一行。
- en: Inside the block to be repeated, the variables that should be expanded are specified
    as `@name@`.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在要重复的块内，指定要展开的变量为`@name@`。
- en: '`/**end repeat**/` on a line by itself marks the previous line as the last
    line of the block to be repeated.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行的`/**end repeat**/`标记了前一行作为要重复块的最后一行。
- en: A loop in the NumPy C source code may have a `@TYPE@` variable, targeted for
    string substitution, which is preprocessed to a number of otherwise identical
    loops with several strings such as `INT`, `LONG`, `UINT`, `ULONG`. The `@TYPE@`
    style syntax thus reduces code duplication and maintenance burden by mimicking
    languages that have generic type support.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy C源代码中的循环可能具有`@TYPE@`变量，用于字符串替换，该变量经预处理后成为多个完全相同的循环，其中包含`INT`、`LONG`、`UINT`、`ULONG`等多个字符串。因此，`@TYPE@`样式的语法通过模仿具有通用类型支持的语言来减少代码重复和维护负担。
- en: 'The above rules may be clearer in the following template source example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述规则在以下模板源示例中更为明确的示例：
- en: '[PRE15]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preprocessing of generically-typed C source files (whether in NumPy proper
    or in any third party package using NumPy Distutils) is performed by [conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py).
    The type-specific C files generated (extension: `.c`) by these modules during
    the build process are ready to be compiled. This form of generic typing is also
    supported for C header files (preprocessed to produce `.h` files).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通用类型的C源文件（无论是在NumPy本身还是在使用NumPy Distutils的任何第三方包中），都使用[conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py)进行预处理。在构建过程中，这些模块生成的特定类型的C文件（扩展名：`.c`）已经准备好编译了。此类通用类型也支持C头文件（预处理为`.h`文件）。
- en: Useful functions in `numpy.distutils.misc_util`
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.misc_util`中的实用函数'
- en: '`get_numpy_include_dirs()` — return a list of NumPy base include directories.
    NumPy base include directories contain header files such as `numpy/arrayobject.h`,
    `numpy/funcobject.h` etc. For installed NumPy the returned list has length 1 but
    when building NumPy the list may contain more directories, for example, a path
    to `config.h` file that `numpy/base/setup.py` file generates and is used by `numpy`
    header files.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_numpy_include_dirs()` — 返回NumPy基本包含目录列表。NumPy基本包含目录包含诸如`numpy/arrayobject.h`，`numpy/funcobject.h`等头文件。对于已安装的NumPy，返回的列表长度为1，但构建NumPy时，该列表可能包含更多目录，例如，`numpy/base/setup.py`文件生成并被`numpy`头文件使用的`config.h`文件路径��'
- en: '`append_path(prefix,path)` — smart append `path` to `prefix`.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append_path(prefix,path)` — 将`path`智能地附加到`prefix`。'
- en: '`gpaths(paths, local_path='''')` — apply glob to paths and prepend `local_path`
    if needed.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gpaths(paths, local_path='''')` — 对路径应用glob，并在必要时添加`local_path`前缀。'
- en: '`njoin(*path)` — join pathname components + convert `/`-separated path to `os.sep`-separated
    path and resolve `..`, `.` from paths. Ex. `njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`njoin(*path)` — 连接路径名组件+将`/`分隔的路径转换为`os.sep`分隔的路径并从路径中解析`..`，`.`。例如，`njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`。'
- en: '`minrelpath(path)` — resolves dots in `path`.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minrelpath(path)` — 解析`path`中的点。'
- en: '`rel_path(path, parent_path)` — return `path` relative to `parent_path`.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rel_path(path, parent_path)` — 返回相对于`parent_path`的`path`。'
- en: '`def get_cmd(cmdname,_cache={})` — returns `numpy.distutils` command instance.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def get_cmd(cmdname,_cache={})` — 返回`numpy.distutils`命令实例。'
- en: '`all_strings(lst)`'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all_strings(lst)`'
- en: '`has_f_sources(sources)`'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_f_sources(sources)`'
- en: '`has_cxx_sources(sources)`'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_cxx_sources(sources)`'
- en: '`filter_sources(sources)` — return `c_sources, cxx_sources, f_sources, fmodule_sources`'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_sources(sources)` — 返回`c_sources, cxx_sources, f_sources, fmodule_sources`'
- en: '`get_dependencies(sources)`'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_dependencies(sources)`'
- en: '`is_local_src_dir(directory)`'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_local_src_dir(directory)`'
- en: '`get_ext_source_files(ext)`'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_ext_source_files(ext)`'
- en: '`get_script_files(scripts)`'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_script_files(scripts)`'
- en: '`get_lib_source_files(lib)`'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_lib_source_files(lib)`'
- en: '`get_data_files(data)`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_data_files(data)`'
- en: '`dot_join(*args)` — join non-zero arguments with a dot.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dot_join(*args)` — 用点连接非零参数。'
- en: '`get_frame(level=0)` — return frame object from call stack with given level.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_frame(level=0)` — 返回调用栈中给定级别的frame对象。'
- en: '`cyg2win32(path)`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cyg2win32(path)`'
- en: '`mingw32()` — return `True` when using mingw32 environment.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mingw32()` — 在使用mingw32环境时返回`True`。'
- en: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
- en: '`get_path(mod_name,parent_path=None)` — return path of a module relative to
    parent_path when given. Handles also `__main__` and `__builtin__` modules.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_path(mod_name,parent_path=None)` — 在给定时返回模块相对于parent_path的路径。还处理`__main__`和`__builtin__`模块。'
- en: '`allpath(name)` — replaces `/` with `os.sep` in `name`.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allpath(name)` — 在`name`中将`/`替换为`os.sep`。'
- en: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
- en: '`numpy.distutils.system_info` module'
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.system_info`模块'
- en: '`get_info(name,notfound_action=0)`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_info(name,notfound_action=0)`'
- en: '`combine_paths(*args,**kws)`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_paths(*args,**kws)`'
- en: '`show_all()`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show_all()`'
- en: '`numpy.distutils.cpuinfo` module'
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.cpuinfo`模块'
- en: '`cpuinfo`'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpuinfo`'
- en: '`numpy.distutils.log` module'
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.log`模块'
- en: '`set_verbosity(v)`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_verbosity(v)`'
- en: '`numpy.distutils.exec_command` module'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.exec_command`模块'
- en: '`get_pythonexe()`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_pythonexe()`'
- en: '`find_executable(exe, path=None)`'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_executable(exe, path=None)`'
- en: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
- en: SciPy pure Python package example
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciPy纯Python软件包示例
- en: 'Below is an example of a minimal `setup.py` file for a pure SciPy package:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是用于纯SciPy软件包的最小`setup.py`文件示例：
- en: '[PRE16]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The arguments of the `configuration` function specify the name of parent SciPy
    package (`parent_package`) and the directory location of the main `setup.py` script
    (`top_path`). These arguments, along with the name of the current package, should
    be passed to the `Configuration` constructor.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration`函数的参数指定父SciPy软件包的名称（`parent_package`）和主`setup.py`脚本的目录位置（`top_path`）。这些参数以及当前软件包的名称应传递给`Configuration`构造函数。'
- en: The `Configuration` constructor has a fourth optional argument, `package_path`,
    that can be used when package files are located in a different location than the
    directory of the `setup.py` file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`Configuration`构造函数有第四个可选参数`package_path`，可在软件包文件位于与`setup.py`文件目录不同的位置时使用。'
- en: Remaining `Configuration` arguments are all keyword arguments that will be used
    to initialize attributes of `Configuration` instance. Usually, these keywords
    are the same as the ones that `setup(..)` function would expect, for example,
    `packages`, `ext_modules`, `data_files`, `include_dirs`, `libraries`, `headers`,
    `scripts`, `package_dir`, etc. However, the direct specification of these keywords
    is not recommended as the content of these keyword arguments will not be processed
    or checked for the consistency of SciPy building system.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的`Configuration`参数都是`Configuration`实例属性的关键字参数的初始化值。通常，这些关键字与`setup(..)`函数期望的关键字是相同的，例如，`packages`，`ext_modules`，`data_files`，`include_dirs`，`libraries`，`headers`，`scripts`，`package_dir`等。然而，不建议直接指定这些关键字，因为这些关键字参数的内容不会被处理或检查SciPy构建系统的一致性。
- en: Finally, `Configuration` has `.todict()` method that returns all the configuration
    data as a dictionary suitable for passing on to the `setup(..)` function.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Configuration`有一个`.todict()`方法，它返回所有配置数据，以字典的形式适合传递给`setup(..)`函数。
- en: '`Configuration` instance attributes'
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例的属性'
- en: 'In addition to attributes that can be specified via keyword arguments to `Configuration`
    constructor, `Configuration` instance (let us denote as `config`) has the following
    attributes that can be useful in writing setup scripts:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以通过`Configuration`构造函数的关键参数指定的属性之外，`Configuration`实例（假设为`config`）还有以下属性，可以在编写设置脚本时很有用：
- en: '`config.name` - full name of the current package. The names of parent packages
    can be extracted as `config.name.split(''.'')`.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.name` - 当前软件包的完整名称。父软件包的名称可以通过`config.name.split(''.'')`来提取。'
- en: '`config.local_path` - path to the location of current `setup.py` file.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.local_path` - 当前`setup.py`文件的路径。'
- en: '`config.top_path` - path to the location of main `setup.py` file.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.top_path` - 主`setup.py`文件的路径。'
- en: '`Configuration` instance methods'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Configuration`实例的方法'
- en: '`config.todict()` — returns configuration dictionary suitable for passing to
    `numpy.distutils.core.setup(..)` function.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.todict()` — 返回适合传递给`numpy.distutils.core.setup(..)`函数的配置字典。'
- en: '`config.paths(*paths) --- applies ``glob.glob(..)` to items of `paths` if necessary.
    Fixes `paths` item that is relative to `config.local_path`.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.paths(*paths) --- 如果有必要，对`paths`的项应用``glob.glob(..)`。修复相对于`config.local_path`的`paths`项。'
- en: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — returns a list
    of subpackage configurations. Subpackage is looked in the current directory under
    the name `subpackage_name` but the path can be specified also via optional `subpackage_path`
    argument. If `subpackage_name` is specified as `None` then the subpackage name
    will be taken the basename of `subpackage_path`. Any `*` used for subpackage names
    are expanded as wildcards.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_subpackage(subpackage_name,subpackage_path=None)` — 返回子软件包配置的列表。子软件包在当前目录下寻找，名称为`subpackage_name`，但路径也可以通过可选的`subpackage_path`参数指定。如果`subpackage_name`指定为`None`，则子软件包名称将取`subpackage_path`的基本名称。任何用于子软件包名称的`*`都会被扩展为通配符。'
- en: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — add SciPy subpackage
    configuration to the current one. The meaning and usage of arguments is explained
    above, see `config.get_subpackage()` method.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_subpackage(subpackage_name,subpackage_path=None)` — 将SciPy子软件包配置添加到当前配置。关于参数的意义和用法已在上文中解释过，参见`config.get_subpackage()`方法。'
- en: '`config.add_data_files(*files)` — prepend `files` to `data_files` list. If
    `files` item is a tuple then its first element defines the suffix of where data
    files are copied relative to package installation directory and the second element
    specifies the path to data files. By default data files are copied under package
    installation directory. For example,'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_files(*files)` — 将`files`加入`data_files`列表的最前面。如果`files`是一个元组，则其第一个元素定义了数据文件的后缀，相对于软件包安装目录的位置，第二个元素指定了数据文件的路径。默认情况下，数据文件将被复制到软件包安装目录下。例如，'
- en: '[PRE17]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: will install data files to the following locations
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE18]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Path to data files can be a function taking no arguments and returning path(s)
    to data files – this is a useful when data files are generated while building
    the package. (XXX: explain the step when this function are called exactly)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据文件的路径可以是一个不带参数并返回路径的函数 —— 这在生成软件包时生成数据文件时非常有用。（XXX：解释一下什么时候确切地调用这个函数）
- en: '`config.add_data_dir(data_path)` — add directory `data_path` recursively to
    `data_files`. The whole directory tree starting at `data_path` will be copied
    under package installation directory. If `data_path` is a tuple then its first
    element defines the suffix of where data files are copied relative to package
    installation directory and the second element specifies the path to data directory.
    By default, data directory are copied under package installation directory under
    the basename of `data_path`. For example,'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_data_dir(data_path)` — 递归地将目录`data_path`添加到`data_files`中。从`data_path`开始的整个目录树将被复制到包安装目录下。
    如果`data_path`是一个元组，那么它的第一个元素定义了将数据文件复制到的后缀的相对于包安装目录的位置，第二个元素指定了数据目录的路径。默认情况下，数据目录被复制到基础`data_path`的包安装目录下。例如，'
- en: '[PRE19]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: will install data files to the following locations
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置
- en: '[PRE20]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`config.add_include_dirs(*paths)` — prepend `paths` to `include_dirs` list.
    This list will be visible to all extension modules of the current package.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_include_dirs(*paths)` — 将`paths`添加到`include_dirs`列表的开头。这个列表将对当前包的所有扩展模块可见。'
- en: '`config.add_headers(*files)` — prepend `files` to `headers` list. By default,
    headers will be installed under `<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`
    directory. If `files` item is a tuple then it’s first argument specifies the installation
    suffix relative to `<prefix>/include/pythonX.X/` path. This is a Python distutils
    method; its use is discouraged for NumPy and SciPy in favour of `config.add_data_files(*files)`.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_headers(*files)` — 将`files`添加到`headers`列表的开头。默认情况下，头文件将安装在`<prefix>/include/pythonX.X/<config.name.replace(''.'',''/'')>/`目录下。
    如果`files`项是一个元组，那么它的第一个参数指定了相对于`<prefix>/include/pythonX.X/`路径的安装后缀。 这是一个Python
    distutils方法；NumPy和SciPy不鼓励使用它，而是使用`config.add_data_files(*files)`。'
- en: '`config.add_scripts(*files)` — prepend `files` to `scripts` list. Scripts will
    be installed under `<prefix>/bin/` directory.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_scripts(*files)` — 将`files`添加到`scripts`列表的开头。脚本将安装在`<prefix>/bin/`目录下。'
- en: '`config.add_extension(name,sources,**kw)` — create and add an `Extension` instance
    to `ext_modules` list. The first argument `name` defines the name of the extension
    module that will be installed under `config.name` package. The second argument
    is a list of sources. `add_extension` method takes also keyword arguments that
    are passed on to the `Extension` constructor. The list of allowed keywords is
    the following: `include_dirs`, `define_macros`, `undef_macros`, `library_dirs`,
    `libraries`, `runtime_library_dirs`, `extra_objects`, `extra_compile_args`, `extra_link_args`,
    `export_symbols`, `swig_opts`, `depends`, `language`, `f2py_options`, `module_dirs`,
    `extra_info`, `extra_f77_compile_args`, `extra_f90_compile_args`.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_extension(name,sources,**kw)` — 创建并将一个`Extension`实例添加到`ext_modules`列表中。第一个参数`name`定义了扩展模块的名称，该模块将安装在`config.name`包下。第二个参数是一个来源列表。
    `add_extension`方法还接受传递给`Extension`构造函数的关键字参数。允许的关键字参数列表如下：`include_dirs`、`define_macros`、`undef_macros`、`library_dirs`、`libraries`、`runtime_library_dirs`、`extra_objects`、`extra_compile_args`、`extra_link_args`、`export_symbols`、`swig_opts`、`depends`、`language`、`f2py_options`、`module_dirs`、`extra_info`、`extra_f77_compile_args`、`extra_f90_compile_args`。'
- en: Note that `config.paths` method is applied to all lists that may contain paths.
    `extra_info` is a dictionary or a list of dictionaries that content will be appended
    to keyword arguments. The list `depends` contains paths to files or directories
    that the sources of the extension module depend on. If any path in the `depends`
    list is newer than the extension module, then the module will be rebuilt.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`config.paths` 方法应用于所有可能包含路径的列表。`extra_info` 是一个字典或字典列表，其内容将附加到关键字参数中。列表`depends`包含到扩展模块源的文件或目录的路径。如果`depends`列表中的任何路径都比扩展模块新，那么模块将被重新构建。
- en: 'The list of sources may contain functions (‘source generators’) with a pattern
    `def <funcname>(ext, build_dir): return <source(s) or None>`. If `funcname` returns
    `None`, no sources are generated. And if the `Extension` instance has no sources
    after processing all source generators, no extension module will be built. This
    is the recommended way to conditionally define extension modules. Source generator
    functions are called by the `build_src` sub-command of `numpy.distutils`.'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '来源列表可能包含函数（‘源生成器’），其模式为`def <funcname>(ext, build_dir): return <source(s) or
    None>`。如果`funcname`返回`None`，则不会生成任何源。如果`Extension`实例在处理所有源生成器后没有源，那么将不会构建任何扩展模块。这是有条件地定义扩展模块的推荐方式。源生成器函数由`numpy.distutils`的`build_src`子命令调用。'
- en: 'For example, here is a typical source generator function:'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，这是一个典型的源生成器函数：
- en: '[PRE21]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first argument contains the Extension instance that can be useful to access
    its attributes like `depends`, `sources`, etc. lists and modify them during the
    building process. The second argument gives a path to a build directory that must
    be used when creating files to a disk.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个参数包含Extension实例，可以用于访问其属性，如`depends`、`sources`等列表，并在构建过程中修改它们。第二个参数提供了一个构建目录的路径，必须在将文件写入磁盘时使用。
- en: '`config.add_library(name, sources, **build_info)` — add a library to `libraries`
    list. Allowed keywords arguments are `depends`, `macros`, `include_dirs`, `extra_compiler_args`,
    `f2py_options`, `extra_f77_compile_args`, `extra_f90_compile_args`. See `.add_extension()`
    method for more information on arguments.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.add_library(name, sources, **build_info)` — 将库添加到`libraries`列表中。允许的关键字参数有`depends`、`macros`、`include_dirs`、`extra_compiler_args`、`f2py_options`、`extra_f77_compile_args`、`extra_f90_compile_args`。有关参数的更多信息，请参见`.add_extension()`方法。'
- en: '`config.have_f77c()` — return True if Fortran 77 compiler is available (read:
    a simple Fortran 77 code compiled successfully).'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f77c()` — 如果Fortran 77编译器可用，则返回True（即：简单的Fortran 77代码编译成功）。'
- en: '`config.have_f90c()` — return True if Fortran 90 compiler is available (read:
    a simple Fortran 90 code compiled successfully).'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.have_f90c()` — 如果Fortran 90编译器可用，则返回True（即：简单的Fortran 90代码编译成功）。'
- en: '`config.get_version()` — return version string of the current package, `None`
    if version information could not be detected. This methods scans files `__version__.py`,
    `<packagename>_version.py`, `version.py`, `__svn_version__.py` for string variables
    `version`, `__version__`, `<packagename>_version`.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_version()` — 返回当前包的版本字符串，如果无法检测到版本信息，则返回`None`。该方法扫描文件`__version__.py`、`<packagename>_version.py`、`version.py`、`__svn_version__.py`查找字符串变量`version`、`__version__`、`<packagename>_version`。'
- en: '`config.make_svn_version_py()` — appends a data function to `data_files` list
    that will generate `__svn_version__.py` file to the current package directory.
    The file will be removed from the source directory when Python exits.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.make_svn_version_py()` — 在`data_files`列表中追加一个数据函数，该函数将生成`__svn_version__.py`文件到当前包目录。该文件将在Python退出时从源目录中删除。'
- en: '`config.get_build_temp_dir()` — return a path to a temporary directory. This
    is the place where one should build temporary files.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_build_temp_dir()` — 返回临时目录的路径。这是构建临时文件的位置。'
- en: '`config.get_distribution()` — return distutils `Distribution` instance.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_distribution()` — 返回distutils `Distribution`实例。'
- en: '`config.get_config_cmd()` — returns `numpy.distutils` config command instance.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_config_cmd()` — 返回`numpy.distutils`配置命令实例。'
- en: '`config.get_info(*names)` —'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.get_info(*names)` —'
- en: '### Conversion of `.src` files using Templates'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用模板转换`.src`文件'
- en: NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy distutils支持自动转换以`.src`结尾的源文件。该功能可用于保留在块之间仅需进行简单更改的非常相似代码块。在设置的构建阶段，如果遇到名为`<somefile>.src`的模板文件，则将从模板构造一个新文件`<somefile>`并将其放置在构建目录中以供使用。支持两种模板转换形式。第一种形式用于以扩展名（f、f90、f95、f77、for、ftn、pyf）结尾的文件。第二种形式用于所有其他情况。
- en: '### Fortran files'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '### Fortran文件'
- en: 'This template converter will replicate all **function** and **subroutine**
    blocks in the file with names that contain ‘<…>’ according to the rules in ‘<…>’.
    The number of comma-separated words in ‘<…>’ determines the number of times the
    block is repeated. What these words are indicates what that repeat rule, ‘<…>’,
    should be replaced with in each block. All of the repeat rules in a block must
    contain the same number of comma-separated words indicating the number of times
    that block should be repeated. If the word in the repeat rule needs a comma, leftarrow,
    or rightarrow, then prepend it with a backslash ‘ ''. If a word in the repeat
    rule matches ‘ \<index>’ then it will be replaced with the <index>-th word in
    the same repeat specification. There are two forms for the repeat rule: named
    and short.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板转换器将根据‘<…>’中的规则，复制文件中所有**函数**和**子例程**块的名称中包含‘<…>’的块。‘<...>’中以逗号分隔的单词数确定块重复的次数。这些单词表示每个块中应该用重复规则‘<...>’替换的内容。块中的所有重复规则必须包含相同数量的逗号分隔的单词，表示该块应重复的次数。如果重复规则中的单词需要逗号、左箭头或右箭头，则用反斜杠‘
    '’在前面加上它。如果重复规则中的单词与‘ \<index>’匹配，则它将被替换为相同重复规范中索引号-th单词。重复规则有两种形式：命名和缩写。
- en: Named repeat rule
  id: totrans-340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命名重复规则
- en: A named repeat rule is useful when the same set of repeats must be used several
    times in a block. It is specified using <rule1=item1, item2, item3,…, itemN>,
    where N is the number of times the block should be repeated. On each repeat of
    the block, the entire expression, ‘<…>’ will be replaced first with item1, and
    then with item2, and so forth until N repeats are accomplished. Once a named repeat
    specification has been introduced, the same repeat rule may be used **in the current
    block** by referring only to the name (i.e. <rule1>).
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 当同一组重复必须在块中多次使用时，命名重复规则非常有用。它使用<rule1=item1, item2, item3,…, itemN>来指定，其中N是应重复块的次数。在每次重复块时，整个表达式‘<...>’将首先替换为item1，然后替换为item2，依此类推，直到完成N次重复。一旦引入了一个命名重复规则，同一重复规则可以通过仅指定名称（即<rule1>）**在当前块中**使用。
- en: Short repeat rule
  id: totrans-342
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缩写重复规则
- en: A short repeat rule looks like <item1, item2, item3, …, itemN>. The rule specifies
    that the entire expression, ‘<…>’ should be replaced first with item1, and then
    with item2, and so forth until N repeats are accomplished.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写重复规则看起来像<item1, item2, item3, …, itemN>。该规则指定整个表达式‘<...>’应首先替换为item1，然后替换为item2，依此类推，直到完成N次重复。
- en: Pre-defined names
  id: totrans-344
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预定义名称
- en: 'The following predefined named repeat rules are available:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出了可用的预定义命名重复规则：
- en: <prefix=s,d,c,z>
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <prefix=s,d,c,z>
- en: <_c=s,d,c,z>
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_c=s,d,c,z>
- en: <_t=real, double precision, complex, double complex>
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_t=实数, 双精度, 复数, 双精度复数>
- en: <ftype=real, double precision, complex, double complex>
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftype=实数, 双精度, 复数, 双精度复数>
- en: <ctype=float, double, complex_float, complex_double>
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctype=浮点数, 双精度, 复数, 双精度复数>
- en: <ftypereal=float, double precision, \0, \1>
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftypereal=浮点数, 双精度, \0, \1>
- en: <ctypereal=float, double, \0, \1>
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctypereal=浮点数, 双精度, \0, \1>
- en: Named repeat rule
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 命名重复规则
- en: A named repeat rule is useful when the same set of repeats must be used several
    times in a block. It is specified using <rule1=item1, item2, item3,…, itemN>,
    where N is the number of times the block should be repeated. On each repeat of
    the block, the entire expression, ‘<…>’ will be replaced first with item1, and
    then with item2, and so forth until N repeats are accomplished. Once a named repeat
    specification has been introduced, the same repeat rule may be used **in the current
    block** by referring only to the name (i.e. <rule1>).
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 当同一组重复必须在块中多次使用时，命名重复规则非常有用。它使用<rule1=item1, item2, item3,…, itemN>来指定，其中N是应重复块的次数。在每次重复块时，整个表达式‘<...>’将首先替换为item1，然后替换为item2，依此类推，直到完成N次重复。一旦引入了一个命名重复规则，同一重复规则可以通过仅指定名称（即<rule1>）**在当前块中**使用。
- en: Short repeat rule
  id: totrans-355
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缩写重复规则
- en: A short repeat rule looks like <item1, item2, item3, …, itemN>. The rule specifies
    that the entire expression, ‘<…>’ should be replaced first with item1, and then
    with item2, and so forth until N repeats are accomplished.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写重复规则看起来像<item1, item2, item3, …, itemN>。该规则指定整个表达式‘<...>’应首先替换为item1，然后替换为item2，依此类推，直到完成N次重复。
- en: Pre-defined names
  id: totrans-357
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预定义名称
- en: 'The following predefined named repeat rules are available:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 下面列出了��用的预定义命名重复规则：
- en: <prefix=s,d,c,z>
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <prefix=s,d,c,z>
- en: <_c=s,d,c,z>
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_c=s,d,c,z>
- en: <_t=real, double precision, complex, double complex>
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <_t=实数, 双精度, 复数, 双精度复数>
- en: <ftype=real, double precision, complex, double complex>
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftype=实数, 双精度, 复数, 双精度复数>
- en: <ctype=float, double, complex_float, complex_double>
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctype=float, double, complex_float, complex_double>
- en: <ftypereal=float, double precision, \0, \1>
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ftypereal=float, double precision, \0, \1>
- en: <ctypereal=float, double, \0, \1>
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <ctypereal=float, double, \0, \1>
- en: Other files
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他文件
- en: Non-Fortran files use a separate syntax for defining template blocks that should
    be repeated using a variable expansion similar to the named repeat rules of the
    Fortran-specific repeats.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 非Fortran文件使用单独的语法来定义应使用类似于Fortran特定重复的命名重复规则的模板块。
- en: 'NumPy Distutils preprocesses C source files (extension: `.c.src`) written in
    a custom templating language to generate C code. The `@` symbol is used to wrap
    macro-style variables to empower a string substitution mechanism that might describe
    (for instance) a set of data types.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy Distutils预处理用自定义模板语言编写的C源文件（扩展名：`.c.src`）以生成C代码。`@`符号用于包装宏风格变量，以实现描述（例如）一组数据类型的字符串替换机制。
- en: 'The template language blocks are delimited by `/**begin repeat` and `/**end
    repeat**/` lines, which may also be nested using consecutively numbered delimiting
    lines such as `/**begin repeat1` and `/**end repeat1**/`:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 模板语言块由`/**begin repeat`和`/**end repeat**/`行界定，也可以使用连续编号的界定行进行嵌套，如`/**begin repeat1`和`/**end
    repeat1**/`：
- en: '`/**begin repeat` on a line by itself marks the beginning of a segment that
    should be repeated.'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`/**begin repeat`标志着应重复的段的开始。
- en: Named variable expansions are defined using `#name=item1, item2, item3, ...,
    itemN#` and placed on successive lines. These variables are replaced in each repeat
    block with corresponding word. All named variables in the same repeat block must
    define the same number of words.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`#name=item1, item2, item3, ..., itemN#`定义命名变量扩展，并放置在连续行上。这些变量将在每个重复块中与相应的单词替换。同一重复块中的所有命名变量必须定义相同数量的单词。
- en: In specifying the repeat rule for a named variable, `item*N` is short- hand
    for `item, item, ..., item` repeated N times. In addition, parenthesis in combination
    with `*N` can be used for grouping several items that should be repeated. Thus,
    `#name=(item1, item2)*4#` is equivalent to `#name=item1, item2, item1, item2,
    item1, item2, item1, item2#`.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在指定命名变量的重复规则时，`item*N`表示`item, item, ..., item`重复N次。此外，结合`*N`的括号可以用于分组多个应重复的项目。因此，`#name=(item1,
    item2)*4#`等同于`#name=item1, item2, item1, item2, item1, item2, item1, item2#`。
- en: '`*/` on a line by itself marks the end of the variable expansion naming. The
    next line is the first line that will be repeated using the named rules.'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`*/`标志着变量扩展命名的结束。接下来的一行将是使用命名规则重复的第一行。
- en: Inside the block to be repeated, the variables that should be expanded are specified
    as `@name@`.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应重复的块内，要扩展的变量被指定为`@name@`。
- en: '`/**end repeat**/` on a line by itself marks the previous line as the last
    line of the block to be repeated.'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单独一行上的`/**end repeat**/`标记着前一行作为应重复的块的最后一行。
- en: A loop in the NumPy C source code may have a `@TYPE@` variable, targeted for
    string substitution, which is preprocessed to a number of otherwise identical
    loops with several strings such as `INT`, `LONG`, `UINT`, `ULONG`. The `@TYPE@`
    style syntax thus reduces code duplication and maintenance burden by mimicking
    languages that have generic type support.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NumPy C源代码中的循环可能有一个`@TYPE@`变量，用于字符串替换，它经过预处理后将成为几个其他相同的循环，带有诸如`INT`、`LONG`、`UINT`、`ULONG`等多个字符串。因此，`@TYPE@`样式的语法通过模仿具有通用类型支持的语言来减少代码重复和维护负担。
- en: 'The above rules may be clearer in the following template source example:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以上规则在以下模板源示例中可能更清晰：
- en: '[PRE22]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preprocessing of generically-typed C source files (whether in NumPy proper
    or in any third party package using NumPy Distutils) is performed by [conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py).
    The type-specific C files generated (extension: `.c`) by these modules during
    the build process are ready to be compiled. This form of generic typing is also
    supported for C header files (preprocessed to produce `.h` files).'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 通用类型化C源文件的预处理（无论是在NumPy本身中还是在使用NumPy Distutils的任何第三方包中）由[conv_template.py](https://github.com/numpy/numpy/blob/main/numpy/distutils/conv_template.py)执行。在构建过程中由这些模块生成的特定类型的C文件（扩展名：`.c`）可供编译。这种通用类型化也适用于C头文件（预处理以生成`.h`文件）。
- en: Useful functions in `numpy.distutils.misc_util`
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.misc_util`中的有用函数'
- en: '`get_numpy_include_dirs()` — return a list of NumPy base include directories.
    NumPy base include directories contain header files such as `numpy/arrayobject.h`,
    `numpy/funcobject.h` etc. For installed NumPy the returned list has length 1 but
    when building NumPy the list may contain more directories, for example, a path
    to `config.h` file that `numpy/base/setup.py` file generates and is used by `numpy`
    header files.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_numpy_include_dirs()` — 返回NumPy基本包含目录的列表。NumPy基本包含目录包含诸如`numpy/arrayobject.h`、`numpy/funcobject.h`等头文件。对于已安装的NumPy，返回的列表长度为1，但构建NumPy时，列表可能包含更多目录，例如，由`numpy/base/setup.py`生成并由`numpy`头文件使用的`config.h`文件的路径。'
- en: '`append_path(prefix,path)` — smart append `path` to `prefix`.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append_path(prefix,path)` — 将`path`智能添加到`prefix`上。'
- en: '`gpaths(paths, local_path='''')` — apply glob to paths and prepend `local_path`
    if needed.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gpaths(paths, local_path='''')` — 对路径应用glob，并在需要时在前面添加`local_path`。'
- en: '`njoin(*path)` — join pathname components + convert `/`-separated path to `os.sep`-separated
    path and resolve `..`, `.` from paths. Ex. `njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`njoin(*path)` — 将路径名组件联接在一起，将以`/`分隔的路径转换为`os.sep`分隔的路径，并解析路径中的`..`、`.`。例如`njoin(''a'',[''b'',''./c''],''..'',''g'')
    -> os.path.join(''a'',''b'',''g'')`。'
- en: '`minrelpath(path)` — resolves dots in `path`.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minrelpath(path)` — 解析`path`中的点。'
- en: '`rel_path(path, parent_path)` — return `path` relative to `parent_path`.'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rel_path(path, parent_path)` — 返回相对于`parent_path`的`path`。'
- en: '`def get_cmd(cmdname,_cache={})` — returns `numpy.distutils` command instance.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`def get_cmd(cmdname,_cache={})` — 返回`numpy.distutils`命令实例。'
- en: '`all_strings(lst)`'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all_strings(lst)`'
- en: '`has_f_sources(sources)`'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_f_sources(sources)`'
- en: '`has_cxx_sources(sources)`'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_cxx_sources(sources)`'
- en: '`filter_sources(sources)` — return `c_sources, cxx_sources, f_sources, fmodule_sources`'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter_sources(sources)` — 返回`c_sources, cxx_sources, f_sources, fmodule_sources`'
- en: '`get_dependencies(sources)`'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_dependencies(sources)`'
- en: '`is_local_src_dir(directory)`'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_local_src_dir(directory)`'
- en: '`get_ext_source_files(ext)`'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_ext_source_files(ext)`'
- en: '`get_script_files(scripts)`'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_script_files(scripts)`'
- en: '`get_lib_source_files(lib)`'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_lib_source_files(lib)`'
- en: '`get_data_files(data)`'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_data_files(data)`'
- en: '`dot_join(*args)` — join non-zero arguments with a dot.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dot_join(*args)` — 用点联接非零参数。'
- en: '`get_frame(level=0)` — return frame object from call stack with given level.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_frame(level=0)` — 根据指定的level从调用栈返回frame对象。'
- en: '`cyg2win32(path)`'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cyg2win32(path)`'
- en: '`mingw32()` — return `True` when using mingw32 environment.'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mingw32()` — 在使用mingw32环境时返回`True`。'
- en: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terminal_has_colors()`, `red_text(s)`, `green_text(s)`, `yellow_text(s)`,
    `blue_text(s)`, `cyan_text(s)`'
- en: '`get_path(mod_name,parent_path=None)` — return path of a module relative to
    parent_path when given. Handles also `__main__` and `__builtin__` modules.'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_path(mod_name,parent_path=None)` — 在给定的parent_path下返回模块的路径。还处理`__main__`和`__builtin__`模块。'
- en: '`allpath(name)` — replaces `/` with `os.sep` in `name`.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allpath(name)` — 将`name`中的`/`替换为`os.sep`。'
- en: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cxx_ext_match`, `fortran_ext_match`, `f90_ext_match`, `f90_module_name_match`'
- en: '`numpy.distutils.system_info` module'
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.system_info`模块'
- en: '`get_info(name,notfound_action=0)`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_info(name,notfound_action=0)`'
- en: '`combine_paths(*args,**kws)`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_paths(*args,**kws)`'
- en: '`show_all()`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show_all()`'
- en: '`numpy.distutils.cpuinfo` module'
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.cpuinfo`模块'
- en: '`cpuinfo`'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cpuinfo`'
- en: '`numpy.distutils.log` module'
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.log`模块'
- en: '`set_verbosity(v)`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_verbosity(v)`'
- en: '`numpy.distutils.exec_command` module'
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.distutils.exec_command`模块'
- en: '`get_pythonexe()`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_pythonexe()`'
- en: '`find_executable(exe, path=None)`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_executable(exe, path=None)`'
- en: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec_command( command, execute_in='''', use_shell=None, use_tee=None, **env
    )`'
- en: The `__init__.py` file
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`__init__.py`文件'
- en: 'The header of a typical SciPy `__init__.py` is:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的SciPy `__init__.py`的头部是：
- en: '[PRE23]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Extra features in NumPy Distutils
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy Distutils的额外功能
- en: Specifying config_fc options for libraries in setup.py script
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在setup.py脚本中为库指定config_fc选项
- en: It is possible to specify config_fc options in setup.py scripts. For example,
    using
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在setup.py脚本中指定config_fc选项。例如，使用
- en: config.add_library(‘library’,
  id: totrans-424
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: config.add_library('library',
- en: ''
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sources=[…], config_fc={‘noopt’:(__file__,1)})
  id: totrans-426
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sources=[…], config_fc={'noopt':(__file__,1)})
- en: will compile the `library` sources without optimization flags.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 将编译`library`源码时不使用优化标志。
- en: It’s recommended to specify only those config_fc options in such a way that
    are compiler independent.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 建议仅以与编译器无关的方式指定那些config_fc选项
- en: Getting extra Fortran 77 compiler options from source
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码获取额外的Fortran 77编译器选项
- en: 'Some old Fortran codes need special compiler options in order to work correctly.
    In order to specify compiler options per source file, `numpy.distutils` Fortran
    compiler looks for the following pattern:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 一些旧的Fortran代码需要特殊的编译器选项才能正常工作。为了指定每个源文件的编译器选项，`numpy.distutils` Fortran编译器寻找以下模式：
- en: '[PRE24]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: in the first 20 lines of the source and use the `f77flags` for specified type
    of the fcompiler (the first character `C` is optional).
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文件的前20行中，并使用指定类型的fcompiler的`f77flags`（第一个字符`C`是可选的）。
- en: 'TODO: This feature can be easily extended for Fortran 90 codes as well. Let
    us know if you would need such a feature.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: TODO：这个功能也可以轻松扩展到Fortran 90代码上。如果您需要这样的功能，请告诉我们。
- en: Specifying config_fc options for libraries in setup.py script
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在setup.py脚本中为库指定config_fc选项。
- en: It is possible to specify config_fc options in setup.py scripts. For example,
    using
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在setup.py脚本中指定config_fc选项。例如，使用
- en: config.add_library(‘library’,
  id: totrans-436
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: config.add_library(‘library’,
- en: ''
  id: totrans-437
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: sources=[…], config_fc={‘noopt’:(__file__,1)})
  id: totrans-438
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sources=[…], config_fc={‘noopt’:(__file__,1)})
- en: will compile the `library` sources without optimization flags.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 编译`library`源码时不使用优化标志。
- en: It’s recommended to specify only those config_fc options in such a way that
    are compiler independent.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 建议仅指定那些与编译器无关的config_fc选项。
- en: Getting extra Fortran 77 compiler options from source
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源码中获取额外的Fortran 77编译器选项。
- en: 'Some old Fortran codes need special compiler options in order to work correctly.
    In order to specify compiler options per source file, `numpy.distutils` Fortran
    compiler looks for the following pattern:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 一些旧的Fortran代码需要特殊的编译器选项才能正常工作。为了指定每个源文件的编译器选项，`numpy.distutils` Fortran编译器寻找以下模式：
- en: '[PRE25]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: in the first 20 lines of the source and use the `f77flags` for specified type
    of the fcompiler (the first character `C` is optional).
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文件的前20行中，并使用指定类型的fcompiler的`f77flags`（第一个字符`C`是可选的）。
- en: 'TODO: This feature can be easily extended for Fortran 90 codes as well. Let
    us know if you would need such a feature.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: TODO：这个功能也可以轻松扩展到Fortran 90代码上。如果您需要这样的功能，请告诉我们。
