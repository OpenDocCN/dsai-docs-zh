- en: numpy.require
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.require.html](https://numpy.org/doc/1.26/reference/generated/numpy.require.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return an ndarray of the provided type that satisfies requirements.
  prefs: []
  type: TYPE_NORMAL
- en: This function is useful to be sure that an array with the correct flags is returned
    for passing to compiled code (perhaps through ctypes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The object to be converted to a type-and-requirement-satisfying array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type'
  prefs: []
  type: TYPE_NORMAL
- en: The required data-type. If None preserve the current dtype. If your application
    requires the data to be in native byteorder, include a byteorder specification
    as a part of the dtype specification.
  prefs: []
  type: TYPE_NORMAL
- en: '**requirements**str or sequence of str'
  prefs: []
  type: TYPE_NORMAL
- en: The requirements list can be any of the following
  prefs: []
  type: TYPE_NORMAL
- en: ‘F_CONTIGUOUS’ (‘F’) - ensure a Fortran-contiguous array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘C_CONTIGUOUS’ (‘C’) - ensure a C-contiguous array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘ALIGNED’ (‘A’) - ensure a data-type aligned array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘WRITEABLE’ (‘W’) - ensure a writable array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘OWNDATA’ (‘O’) - ensure an array that owns its own data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘ENSUREARRAY’, (‘E’) - ensure a base array, instead of a subclass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array with specified requirements and type if given.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asarray`](numpy.asarray.html#numpy.asarray "numpy.asarray")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert input to an ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: '[`asanyarray`](numpy.asanyarray.html#numpy.asanyarray "numpy.asanyarray")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert to an ndarray, but pass through ndarray subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ascontiguousarray`](numpy.ascontiguousarray.html#numpy.ascontiguousarray
    "numpy.ascontiguousarray")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert input to a contiguous array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`asfortranarray`](numpy.asfortranarray.html#numpy.asfortranarray "numpy.asfortranarray")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert input to an ndarray with column-major memory order.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndarray.flags`](numpy.ndarray.flags.html#numpy.ndarray.flags "numpy.ndarray.flags")'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the memory layout of the array.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The returned array will be guaranteed to have the listed requirements by making
    a copy if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
