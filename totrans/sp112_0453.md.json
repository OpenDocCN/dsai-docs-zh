["```py\nscipy.optimize.root_scalar(f, args=(), method=None, bracket=None, fprime=None, fprime2=None, x0=None, x1=None, xtol=None, rtol=None, maxiter=None, options=None)\n```", "```py\n>>> from scipy import optimize\n>>> def f(x):\n...     return (x**3 - 1)  # only one real root at x = 1 \n```", "```py\n>>> def fprime(x):\n...     return 3*x**2 \n```", "```py\n>>> sol = optimize.root_scalar(f, bracket=[0, 3], method='brentq')\n>>> sol.root, sol.iterations, sol.function_calls\n(1.0, 10, 11) \n```", "```py\n>>> sol = optimize.root_scalar(f, x0=0.2, fprime=fprime, method='newton')\n>>> sol.root, sol.iterations, sol.function_calls\n(1.0, 11, 22) \n```", "```py\n>>> def f_p_pp(x):\n...     return (x**3 - 1), 3*x**2, 6*x \n```", "```py\n>>> sol = optimize.root_scalar(\n...     f_p_pp, x0=0.2, fprime=True, method='newton'\n... )\n>>> sol.root, sol.iterations, sol.function_calls\n(1.0, 11, 11) \n```", "```py\n>>> sol = optimize.root_scalar(\n...     f_p_pp, x0=0.2, fprime=True, fprime2=True, method='halley'\n... )\n>>> sol.root, sol.iterations, sol.function_calls\n(1.0, 7, 8) \n```"]