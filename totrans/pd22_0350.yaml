- en: pandas.DataFrame.replace
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.DataFrame.replace
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Replace values given in to_replace with value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用给定的值替换 to_replace 中的值。
- en: Values of the Series/DataFrame are replaced with other values dynamically. This
    differs from updating with `.loc` or `.iloc`, which require you to specify a location
    to update with some value.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Series/DataFrame 的值会动态替换为其他值。这与使用 `.loc` 或 `.iloc` 进行更新不同，后者需要您指定要用某个值更新的位置。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**to_replace**str, regex, list, dict, Series, int, float, or None'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**to_replace**str、regex、列表、字典、Series、int、float 或 None'
- en: How to find the values that will be replaced.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如何找到将被替换的值。
- en: 'numeric, str or regex:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字、str 或 regex：
- en: 'numeric: numeric values equal to to_replace will be replaced with value'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字：等于 to_replace 的数值将被替换为 value
- en: ''
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'str: string exactly matching to_replace will be replaced with value'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: str：与 to_replace 完全匹配的字符串将被替换为 value
- en: ''
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'regex: regexs matching to_replace will be replaced with value'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: regex：匹配 to_replace 的正则表达式将被替换为 value
- en: 'list of str, regex, or numeric:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串、正则表达式或数字的列表：
- en: First, if to_replace and value are both lists, they `must` be the same length.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，如果 to_replace 和 value 都是列表，则它们 `必须` 是相同的长度。
- en: ''
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Second, if `regex=True` then all of the strings in `both` lists will be interpreted
    as regexs otherwise they will match directly. This doesn’t matter much for value
    since there are only a few possible substitution regexes you can use.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，如果 `regex=True`，那么两个列表中的所有字符串都将被解释为正则表达式，否则它们将直接匹配。对于 value 来说，这并不重要，因为您可以使用的替换正则表达式很少。
- en: ''
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: str, regex and numeric rules apply as above.
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: str、regex 和数字规则同上。
- en: 'dict:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典：
- en: 'Dicts can be used to specify different replacement values for different existing
    values. For example, `{''a'': ''b'', ''y'': ''z''}` replaces the value ‘a’ with
    ‘b’ and ‘y’ with ‘z’. To use a dict in this way, the optional value parameter
    should not be given.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '字典可用于指定不同的替换值以替换不同的现有值。例如，`{''a'': ''b'', ''y'': ''z''}` 将值 ‘a’ 替换为 ‘b’，‘y’
    替换为 ‘z’。要以这种方式使用字典，应不提供可选的 value 参数。'
- en: ''
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a DataFrame a dict can specify that different values should be replaced
    in different columns. For example, `{''a'': 1, ''b'': ''z''}` looks for the value
    1 in column ‘a’ and the value ‘z’ in column ‘b’ and replaces these values with
    whatever is specified in value. The value parameter should not be `None` in this
    case. You can treat this as a special case of passing two lists except that you
    are specifying the column to search in.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于 DataFrame，字典可以指定应在不同列中替换不同的值。例如，`{''a'': 1, ''b'': ''z''}` 在列 ‘a’ 中查找值 1，在列
    ‘b’ 中查找值 ‘z’，并将这些值替换为 value 中指定的内容。在这种情况下，value 参数不应为 `None`。您可以将此视为传递两个列表的特殊情况，只是您正在指定要搜索的列。'
- en: ''
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a DataFrame nested dictionaries, e.g., `{''a'': {''b'': np.nan}}`, are
    read as follows: look in column ‘a’ for the value ‘b’ and replace it with NaN.
    The optional value parameter should not be specified to use a nested dict in this
    way. You can nest regular expressions as well. Note that column names (the top-level
    dictionary keys in a nested dictionary) `cannot` be regular expressions.'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '对于 DataFrame 嵌套字典，例如 `{''a'': {''b'': np.nan}}`，读取方式如下：在列 ‘a’ 中查找值 ‘b’，并将其���换为
    NaN。在这种情况下，不应指定可选的 value 参数以使用嵌套字典。您也可以嵌套正则表达式。请注意，列名（嵌套字典中顶层字典键）`不能`是正则表达式。'
- en: 'None:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: None：
- en: This means that the regex argument must be a string, compiled regular expression,
    or list, dict, ndarray or Series of such elements. If value is also `None` then
    this `must` be a nested dictionary or Series.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这意味着 regex 参数必须是字符串、编译的正则表达式、列表、字典、ndarray 或 Series 中的元素。如果 value 也是 `None`，那么这个
    `必须` 是一个嵌套的字典或 Series。
- en: See the examples section for examples of each of these.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考示例部分，查看每个示例。
- en: '**value**scalar, dict, list, str, regex, default None'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**value**标量、字典、列表、字符串、正则表达式，默认为 None'
- en: Value to replace any values matching to_replace with. For a DataFrame a dict
    of values can be used to specify which value to use for each column (columns not
    in the dict will not be filled). Regular expressions, strings and lists or dicts
    of such objects are also allowed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要用来替换与 to_replace 匹配的任何值的值。对于 DataFrame，可以使用值字典来指定每列使用哪个值（字典中没有的列将不会填充）。还允许正则表达式、字符串、列表或这些对象的字典。
- en: '**inplace**bool, default False'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**inplace**bool，默认为 False'
- en: If True, performs operation inplace and returns None.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则在原地执行操作并返回 None。
- en: '**limit**int, default None'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**limit**int，默认为 None'
- en: Maximum size gap to forward or backward fill.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 向前或向后填充的最大大小间隙。
- en: Deprecated since version 2.1.0.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.1.0 起已弃用。
- en: '**regex**bool or same types as to_replace, default False'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**regex**bool 或与 to_replace 相同类型，默认为 False'
- en: Whether to interpret to_replace and/or value as regular expressions. Alternatively,
    this could be a regular expression or a list, dict, or array of regular expressions
    in which case to_replace must be `None`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 是否将 to_replace 和/或 value 解释为正则表达式。或者，这可以是一个正则表达式，或者是一个正则表达式的列表、字典或数组，其中 to_replace
    必须为 `None`。
- en: '**method**{‘pad’, ‘ffill’, ‘bfill’}'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**method**{‘pad’, ‘ffill’, ‘bfill’}'
- en: The method to use when for replacement, when to_replace is a scalar, list or
    tuple and value is `None`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当 to_replace 是标量、列表或元组，而 value 是 `None` 时使用的方法。
- en: Deprecated since version 2.1.0.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.1.0 起已弃用。
- en: 'Returns:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: Series/DataFrame
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Series/DataFrame
- en: Object after replacement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 替换后的对象。
- en: 'Raises:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: AssertionError
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: AssertionError
- en: If regex is not a `bool` and to_replace is not `None`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 regex 不是 `bool`，且 to_replace 不是 `None`。
- en: TypeError
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: TypeError
- en: If to_replace is not a scalar, array-like, `dict`, or `None`
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 to_replace 不是标量、类似数组、`dict` 或 `None`
- en: If to_replace is a `dict` and value is not a `list`, `dict`, `ndarray`, or `Series`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 to_replace 是一个 `dict`，而 value 不是一个 `list`、`dict`、`ndarray` 或 `Series`
- en: If to_replace is `None` and regex is not compilable into a regular expression
    or is a list, dict, ndarray, or Series.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 to_replace 是 `None`，且 regex 无法编译成正则表达式，或者是一个列表、字典、ndarray 或 Series。
- en: When replacing multiple `bool` or `datetime64` objects and the arguments to
    to_replace does not match the type of the value being replaced
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当替换多个 `bool` 或 `datetime64` 对象时，to_replace 的参数与要替换的值的类型不匹配
- en: ValueError
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ValueError
- en: If a `list` or an `ndarray` is passed to to_replace and value but they are not
    the same length.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果传递给 to_replace 和 value 的是一个 `list` 或一个 `ndarray`，但它们的长度不相同。
- en: See also
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Series.fillna`](pandas.Series.fillna.html#pandas.Series.fillna "pandas.Series.fillna")'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.fillna`](pandas.Series.fillna.html#pandas.Series.fillna "pandas.Series.fillna")'
- en: Fill NA values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 填充 NA 值。
- en: '[`DataFrame.fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")'
- en: Fill NA values.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 填充 NA 值。
- en: '[`Series.where`](pandas.Series.where.html#pandas.Series.where "pandas.Series.where")'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.where`](pandas.Series.where.html#pandas.Series.where "pandas.Series.where")'
- en: Replace values based on boolean condition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据布尔条件替换值。
- en: '[`DataFrame.where`](pandas.DataFrame.where.html#pandas.DataFrame.where "pandas.DataFrame.where")'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.where`](pandas.DataFrame.where.html#pandas.DataFrame.where "pandas.DataFrame.where")'
- en: Replace values based on boolean condition.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据布尔条件替换值。
- en: '[`DataFrame.map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DataFrame.map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")'
- en: Apply a function to a Dataframe elementwise.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Dataframe 逐元素应用函数。
- en: '[`Series.map`](pandas.Series.map.html#pandas.Series.map "pandas.Series.map")'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.map`](pandas.Series.map.html#pandas.Series.map "pandas.Series.map")'
- en: Map values of Series according to an input mapping or function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输入映射或函数映射 Series 的值。
- en: '[`Series.str.replace`](pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Series.str.replace`](pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")'
- en: Simple string replacement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字符串替换。
- en: Notes
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Regex substitution is performed under the hood with `re.sub`. The rules for
    substitution for `re.sub` are the same.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在底层使用 `re.sub` 执行正则表达式替换。`re.sub` 的替换规则相同。
- en: Regular expressions will only substitute on strings, meaning you cannot provide,
    for example, a regular expression matching floating point numbers and expect the
    columns in your frame that have a numeric dtype to be matched. However, if those
    floating point numbers *are* strings, then you can do this.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式只会在字符串上进行替换，这意味着您不能提供例如匹配浮点数的正则表达式，并期望您的框架中具有数值 dtype 的列被匹配。但是，如果这些浮点数是字符串，那么您可以这样做。
- en: This method has *a lot* of options. You are encouraged to experiment and play
    with this method to gain intuition about how it works.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法有 *很多* 选项。鼓励您尝试并使用该方法来获得��于其工作方式的直觉。
- en: When dict is used as the to_replace value, it is like key(s) in the dict are
    the to_replace part and value(s) in the dict are the value parameter.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字典用作 to_replace 值时，字典中的键是要替换的部分，字典中的值是值参数。
- en: Examples
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '**Scalar `to_replace` and `value`**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**标量 `to_replace` 和 `value`**'
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**List-like `to_replace`**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**类似列表的 `to_replace`**'
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**dict-like `to_replace`**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**类似字典的 `to_replace`**'
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Regular expression `to_replace`**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**正则表达式 `to_replace`**'
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Compare the behavior of `s.replace({''a'': None})` and `s.replace(''a'', None)`
    to understand the peculiarities of the to_replace parameter:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '比较`s.replace({''a'': None})`和`s.replace(''a'', None)`的行为，以了解`to_replace`参数的特殊之处：'
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When one uses a dict as the to_replace value, it is like the value(s) in the
    dict are equal to the value parameter. `s.replace({''a'': None})` is equivalent
    to `s.replace(to_replace={''a'': None}, value=None, method=None)`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '当将字典用作`to_replace`值时，就好像字典中的值等于`value`参数。`s.replace({''a'': None})`等同于`s.replace(to_replace={''a'':
    None}, value=None, method=None)`：'
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When `value` is not explicitly passed and to_replace is a scalar, list or tuple,
    replace uses the method parameter (default ‘pad’) to do the replacement. So this
    is why the ‘a’ values are being replaced by 10 in rows 1 and 2 and ‘b’ in row
    4 in this case.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当未明确传递`value`且`to_replace`是标量、列表或元组时，`replace`使用`method`参数（默认为‘pad’）进行替换。这就是为什么在这种情况下，行1和2中的‘a’值被替换为10，行4中的‘b’。
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Deprecated since version 2.1.0: The ‘method’ parameter and padding behavior
    are deprecated.'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自版本2.1.0起弃用：‘method’参数和填充行为已弃用。
- en: 'On the other hand, if `None` is explicitly passed for `value`, it will be respected:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果对于`value`明确传递了`None`，它将被尊重：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Changed in version 1.4.0: Previously the explicit `None` was silently ignored.'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自版本1.4.0起更改：以前明确的`None`会被静默忽略。
- en: When `regex=True`, `value` is not `None` and to_replace is a string, the replacement
    will be applied in all columns of the DataFrame.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当`regex=True`，`value`不是`None`且`to_replace`是一个字符串时，替换将应用于DataFrame的所有列。
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If `value` is not `None` and to_replace is a dictionary, the dictionary keys
    will be the DataFrame columns that the replacement will be applied.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`value`不是`None`且`to_replace`是一个字典，则字典键将是将应用替换的DataFrame列。
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
