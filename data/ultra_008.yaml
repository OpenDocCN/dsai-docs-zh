- en: Multi-Object Tracking with Ultralytics YOLO
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多目标跟踪与Ultralytics YOLO
- en: 原文：[`docs.ultralytics.com/modes/track/`](https://docs.ultralytics.com/modes/track/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/modes/track/`](https://docs.ultralytics.com/modes/track/)
- en: '![Multi-object tracking examples](img/7f13027e396579d2ce9d40937dcd07c8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![多目标跟踪示例](img/7f13027e396579d2ce9d40937dcd07c8.png)'
- en: Object tracking in the realm of video analytics is a critical task that not
    only identifies the location and class of objects within the frame but also maintains
    a unique ID for each detected object as the video progresses. The applications
    are limitless—ranging from surveillance and security to real-time sports analytics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频分析领域中进行对象跟踪是一个关键任务，不仅可以确定帧内对象的位置和类别，还可以在视频进展中为每个检测到的对象维护唯一的ID。应用广泛，从监控和安全到实时体育分析。
- en: Why Choose Ultralytics YOLO for Object Tracking?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择Ultralytics YOLO进行对象跟踪？
- en: 'The output from Ultralytics trackers is consistent with standard object detection
    but has the added value of object IDs. This makes it easy to track objects in
    video streams and perform subsequent analytics. Here''s why you should consider
    using Ultralytics YOLO for your object tracking needs:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics跟踪器的输出与标准对象检测一致，但增加了对象ID的价值。这使得在视频流中跟踪对象并进行后续分析变得更加容易。以下是您考虑使用Ultralytics
    YOLO进行对象跟踪的原因：
- en: '**Efficiency:** Process video streams in real-time without compromising accuracy.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率：** 实时处理视频流，而不影响准确性。'
- en: '**Flexibility:** Supports multiple tracking algorithms and configurations.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性：** 支持多个跟踪算法和配置。'
- en: '**Ease of Use:** Simple Python API and CLI options for quick integration and
    deployment.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于使用：** 简单的Python API和CLI选项，快速集成和部署。'
- en: '**Customizability:** Easy to use with custom trained YOLO models, allowing
    integration into domain-specific applications.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制性：** 使用自定义训练的YOLO模型易于使用，可集成到特定领域的应用程序中。'
- en: '[`www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-`](https://www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-`](https://www.youtube.com/embed/hHyHmOtmEgs?si=VNZtXmm45Nb9s-N-)'
- en: '**Watch:** Object Detection and Tracking with Ultralytics YOLOv8.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** 使用Ultralytics YOLOv8进行对象检测和跟踪。'
- en: Real-world Applications
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现实世界的应用
- en: '| Transportation | Retail | Aquaculture |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 交通运输 | 零售 | 水产养殖 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![Vehicle Tracking](img/9458d1602a5852fe954bb05ceb53b4ef.png) | ![People
    Tracking](img/dcac3bbb6a8fffcede9c77d72a872963.png) | ![Fish Tracking](img/e477a393cc4f237c12e2c95f3b66725d.png)
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| ![Vehicle Tracking](img/9458d1602a5852fe954bb05ceb53b4ef.png) | ![People
    Tracking](img/dcac3bbb6a8fffcede9c77d72a872963.png) | ![Fish Tracking](img/e477a393cc4f237c12e2c95f3b66725d.png)
    |'
- en: '| Vehicle Tracking | People Tracking | Fish Tracking |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 车辆跟踪 | 人员跟踪 | 鱼类跟踪 |'
- en: Features at a Glance
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特点一览
- en: 'Ultralytics YOLO extends its object detection features to provide robust and
    versatile object tracking:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLO通过扩展其对象检测功能来提供强大而多功能的对象跟踪：
- en: '**Real-Time Tracking:** Seamlessly track objects in high-frame-rate videos.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时跟踪：** 在高帧率视频中无缝跟踪对象。'
- en: '**Multiple Tracker Support:** Choose from a variety of established tracking
    algorithms.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多跟踪器支持：** 可选择多种成熟的跟踪算法。'
- en: '**Customizable Tracker Configurations:** Tailor the tracking algorithm to meet
    specific requirements by adjusting various parameters.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制的跟踪器配置：** 通过调整各种参数来定制跟踪算法，以满足特定需求。'
- en: Available Trackers
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的跟踪器
- en: 'Ultralytics YOLO supports the following tracking algorithms. They can be enabled
    by passing the relevant YAML configuration file such as `tracker=tracker_type.yaml`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics YOLO支持以下跟踪算法。可以通过传递相关的YAML配置文件如`tracker=tracker_type.yaml`来启用它们：
- en: '[BoT-SORT](https://github.com/NirAharon/BoT-SORT) - Use `botsort.yaml` to enable
    this tracker.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[BoT-SORT](https://github.com/NirAharon/BoT-SORT) - 使用`botsort.yaml`来启用该跟踪器。'
- en: '[ByteTrack](https://github.com/ifzhang/ByteTrack) - Use `bytetrack.yaml` to
    enable this tracker.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ByteTrack](https://github.com/ifzhang/ByteTrack) - 使用`bytetrack.yaml`来启用该跟踪器。'
- en: The default tracker is BoT-SORT.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 默认跟踪器是BoT-SORT。
- en: Tracking
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪
- en: Tracker Threshold Information
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪器阈值信息
- en: If object confidence score will be low, i.e lower than [`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5),
    then there will be no tracks successfully returned and updated.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象置信度得分低于[`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5)，则将不会成功返回和更新跟踪。
- en: To run the tracker on video streams, use a trained Detect, Segment or Pose model
    such as YOLOv8n, YOLOv8n-seg and YOLOv8n-pose.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视频流上运行跟踪器，请使用训练有素的Detect、Segment或Pose模型，例如YOLOv8n、YOLOv8n-seg和YOLOv8n-pose。
- en: Example
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As can be seen in the above usage, tracking is available for all Detect, Segment
    and Pose models run on videos or streaming sources.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如上使用中所示，跟踪适用于在视频或流媒体源上运行的所有检测、分割和姿态模型。
- en: Configuration
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: Tracker Threshold Information
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪器阈值信息
- en: If object confidence score will be low, i.e lower than [`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5),
    then there will be no tracks successfully returned and updated.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象的置信度得分低，即低于 [`track_high_thresh`](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/trackers/bytetrack.yaml#L5)，则不会成功返回和更新任何轨迹。
- en: Tracking Arguments
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪参数
- en: Tracking configuration shares properties with Predict mode, such as `conf`,
    `iou`, and `show`. For further configurations, refer to the Predict model page.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪配置与预测模式相似，例如 `conf`、`iou` 和 `show`。有关进一步的配置，请参阅预测模型页面。
- en: Example
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tracker Selection
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪器选择
- en: Ultralytics also allows you to use a modified tracker configuration file. To
    do this, simply make a copy of a tracker config file (for example, `custom_tracker.yaml`)
    from [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    and modify any configurations (except the `tracker_type`) as per your needs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Ultralytics 还允许您使用修改后的跟踪器配置文件。要做到这一点，只需从 [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    复制跟踪器配置文件（例如 `custom_tracker.yaml`），并根据需要修改任何配置（除了 `tracker_type`）。
- en: Example
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For a comprehensive list of tracking arguments, refer to the [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有关跟踪参数的全面列表，请参阅 [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    页面。
- en: Python Examples
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 示例
- en: Persisting Tracks Loop
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续跟踪循环
- en: Here is a Python script using OpenCV (`cv2`) and YOLOv8 to run object tracking
    on video frames. This script still assumes you have already installed the necessary
    packages (`opencv-python` and `ultralytics`). The `persist=True` argument tells
    the tracker that the current image or frame is the next in a sequence and to expect
    tracks from the previous image in the current image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 OpenCV (`cv2`) 和 YOLOv8 在视频帧上运行对象跟踪的 Python 脚本。此脚本假定您已经安装了必要的软件包 (`opencv-python`
    和 `ultralytics`)。`persist=True` 参数告诉跟踪器当前图像或帧是序列中的下一帧，并且在当前图像中期望来自上一帧的轨迹。
- en: Streaming for-loop with tracking
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用跟踪的流式循环
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Please note the change from `model(frame)` to `model.track(frame)`, which enables
    object tracking instead of simple detection. This modified script will run the
    tracker on each frame of the video, visualize the results, and display them in
    a window. The loop can be exited by pressing 'q'.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意从 `model(frame)` 更改为 `model.track(frame)`，这将启用对象跟踪而不是简单的检测。这个修改后的脚本将在视频的每一帧上运行跟踪器，可视化结果，并在窗口中显示它们。可以通过按下
    'q' 键来退出循环。
- en: Plotting Tracks Over Time
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随时间绘制轨迹
- en: Visualizing object tracks over consecutive frames can provide valuable insights
    into the movement patterns and behavior of detected objects within a video. With
    Ultralytics YOLOv8, plotting these tracks is a seamless and efficient process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在连续帧上可视化对象轨迹可以为视频中检测到的对象的移动模式和行为提供宝贵的见解。通过 Ultralytics YOLOv8，绘制这些轨迹是一个无缝且高效的过程。
- en: In the following example, we demonstrate how to utilize YOLOv8's tracking capabilities
    to plot the movement of detected objects across multiple video frames. This script
    involves opening a video file, reading it frame by frame, and utilizing the YOLO
    model to identify and track various objects. By retaining the center points of
    the detected bounding boxes and connecting them, we can draw lines that represent
    the paths followed by the tracked objects.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们演示如何利用 YOLOv8 的跟踪能力在多个视频帧上绘制检测到的对象的移动。该脚本涉及打开视频文件，逐帧读取并利用 YOLO 模型识别和跟踪各种对象。通过保留检测到的边界框的中心点并连接它们，我们可以绘制代表被跟踪对象路径的线条。
- en: Plotting tracks over multiple video frames
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个视频帧上绘制轨迹
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Multithreaded Tracking
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多线程跟踪
- en: Multithreaded tracking provides the capability to run object tracking on multiple
    video streams simultaneously. This is particularly useful when handling multiple
    video inputs, such as from multiple surveillance cameras, where concurrent processing
    can greatly enhance efficiency and performance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程跟踪提供了同时在多个视频流上运行对象跟踪的能力。这在处理多个视频输入时特别有用，例如来自多个监控摄像头的视频，其中并行处理可以极大地提高效率和性能。
- en: In the provided Python script, we make use of Python's `threading` module to
    run multiple instances of the tracker concurrently. Each thread is responsible
    for running the tracker on one video file, and all the threads run simultaneously
    in the background.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的 Python 脚本中，我们利用 Python 的 `threading` 模块同时运行多个跟踪器实例。每个线程负责在一个视频文件上运行跟踪器，所有线程在后台同时运行。
- en: To ensure that each thread receives the correct parameters (the video file,
    the model to use and the file index), we define a function `run_tracker_in_thread`
    that accepts these parameters and contains the main tracking loop. This function
    reads the video frame by frame, runs the tracker, and displays the results.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保每个线程接收到正确的参数（视频文件、要使用的模型和文件索引），我们定义了一个函数 `run_tracker_in_thread`，接受这些参数并包含主要的跟踪循环。此函数逐帧读取视频，运行跟踪器并显示结果。
- en: 'Two different models are used in this example: `yolov8n.pt` and `yolov8n-seg.pt`,
    each tracking objects in a different video file. The video files are specified
    in `video_file1` and `video_file2`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中使用了两种不同的模型：`yolov8n.pt` 和 `yolov8n-seg.pt`，分别在不同的视频文件中跟踪对象。视频文件由 `video_file1`
    和 `video_file2` 指定。
- en: The `daemon=True` parameter in `threading.Thread` means that these threads will
    be closed as soon as the main program finishes. We then start the threads with
    `start()` and use `join()` to make the main thread wait until both tracker threads
    have finished.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`threading.Thread` 中的 `daemon=True` 参数意味着这些线程会在主程序完成后立即关闭。然后我们使用 `start()`
    启动线程，并使用 `join()` 让主线程等待两个追踪线程都完成。'
- en: Finally, after all threads have completed their task, the windows displaying
    the results are closed using `cv2.destroyAllWindows()`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在所有线程完成任务后，使用 `cv2.destroyAllWindows()` 关闭显示结果的窗口。
- en: Streaming for-loop with tracking
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 带跟踪的流式循环
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This example can easily be extended to handle more video files and models by
    creating more threads and applying the same methodology.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建更多线程并应用相同的方法轻松扩展此示例以处理更多视频文件和模型。
- en: Contribute New Trackers
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贡献新的跟踪器
- en: Are you proficient in multi-object tracking and have successfully implemented
    or adapted a tracking algorithm with Ultralytics YOLO? We invite you to contribute
    to our Trackers section in [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)!
    Your real-world applications and solutions could be invaluable for users working
    on tracking tasks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您精通多对象跟踪，并成功地使用 Ultralytics YOLO 实现或调整了跟踪算法吗？我们邀请您贡献到我们的 Trackers 部分，位于 [ultralytics/cfg/trackers](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)！您的真实应用和解决方案可能对正在处理跟踪任务的用户非常宝贵。
- en: By contributing to this section, you help expand the scope of tracking solutions
    available within the Ultralytics YOLO framework, adding another layer of functionality
    and utility for the community.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过贡献到这一部分，您将帮助扩展 Ultralytics YOLO 框架中可用的跟踪解决方案范围，为社区增加功能和效用的另一层。
- en: To initiate your contribution, please refer to our Contributing Guide for comprehensive
    instructions on submitting a Pull Request (PR) 🛠️. We are excited to see what
    you bring to the table!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始您的贡献，请参考我们的贡献指南，详细了解提交 Pull Request（PR）的说明 🛠️。我们期待看到您能为这个项目带来什么！
- en: Together, let's enhance the tracking capabilities of the Ultralytics YOLO ecosystem
    🙏!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们共同增强 Ultralytics YOLO 生态系统的跟踪能力 🙏！
- en: FAQ
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: What is Multi-Object Tracking and how does Ultralytics YOLO support it?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是多对象跟踪，以及 Ultralytics YOLO 如何支持它？
- en: Multi-object tracking in video analytics involves both identifying objects and
    maintaining a unique ID for each detected object across video frames. Ultralytics
    YOLO supports this by providing real-time tracking along with object IDs, facilitating
    tasks such as security surveillance and sports analytics. The system uses trackers
    like BoT-SORT and ByteTrack, which can be configured via YAML files.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 视频分析中的多对象跟踪涉及识别对象并在视频帧之间维护每个检测到的对象的唯一 ID。Ultralytics YOLO 通过提供实时跟踪和对象 ID 支持此功能，方便进行安全监控和体育分析等任务。系统使用诸如
    BoT-SORT 和 ByteTrack 的跟踪器，可以通过 YAML 文件进行配置。
- en: How do I configure a custom tracker for Ultralytics YOLO?
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何为 Ultralytics YOLO 配置自定义跟踪器？
- en: 'You can configure a custom tracker by copying an existing tracker configuration
    file (e.g., `custom_tracker.yaml`) from the [Ultralytics tracker configuration
    directory](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)
    and modifying parameters as needed, except for the `tracker_type`. Use this file
    in your tracking model like so:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从[Ultralytics跟踪器配置目录](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/trackers)复制一个现有的跟踪器配置文件（例如`custom_tracker.yaml`）并根据需要修改参数来配置自定义跟踪器，但是`tracker_type`除外。像这样在您的跟踪模型中使用此文件：
- en: Example
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How can I run object tracking on multiple video streams simultaneously?
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何同时在多个视频流上运行对象跟踪？
- en: 'To run object tracking on multiple video streams simultaneously, you can use
    Python''s `threading` module. Each thread will handle a separate video stream.
    Here''s an example of how you can set this up:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时在多个视频流上运行对象跟踪，您可以使用Python的`threading`模块。每个线程将处理一个单独的视频流。以下是如何设置的示例：
- en: Multithreaded Tracking
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程跟踪
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What are the real-world applications of multi-object tracking with Ultralytics
    YOLO?
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用Ultralytics YOLO进行多目标跟踪的实际应用是什么？
- en: 'Multi-object tracking with Ultralytics YOLO has numerous applications, including:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ultralytics YOLO进行多目标跟踪有许多应用，包括：
- en: '**Transportation:** Vehicle tracking for traffic management and autonomous
    driving.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交通：** 用于交通管理和自动驾驶的车辆跟踪。'
- en: '**Retail:** People tracking for in-store analytics and security.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零售：** 用于店内分析和安全的人员跟踪。'
- en: '**Aquaculture:** Fish tracking for monitoring aquatic environments.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水产养殖：** 用于监测水生环境的鱼类跟踪。'
- en: These applications benefit from Ultralytics YOLO's ability to process high-frame-rate
    videos in real time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序受益于Ultralytics YOLO在实时处理高帧率视频的能力。
- en: How can I visualize object tracks over multiple video frames with Ultralytics
    YOLO?
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用Ultralytics YOLO在多个视频帧上可视化对象轨迹？
- en: 'To visualize object tracks over multiple video frames, you can use the YOLO
    model''s tracking features along with OpenCV to draw the paths of detected objects.
    Here''s an example script that demonstrates this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要在多个视频帧上可视化对象轨迹，您可以使用YOLO模型的跟踪功能以及OpenCV来绘制检测到的对象的路径。以下是演示此操作的示例脚本：
- en: Plotting tracks over multiple video frames
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制多个视频帧上的轨迹
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This script will plot the tracking lines showing the movement paths of the tracked
    objects over time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将绘制跟踪线，显示跟踪对象随时间的移动路径。
