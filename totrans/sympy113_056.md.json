["```py\nclass sympy.combinatorics.partitions.Partition(*partition)\n```", "```py\nproperty RGS\n```", "```py\n>>> from sympy.combinatorics import Partition\n>>> a = Partition([1, 2], [3], [4, 5])\n>>> a.members\n(1, 2, 3, 4, 5)\n>>> a.RGS\n(0, 0, 1, 2, 2)\n>>> a + 1\nPartition({3}, {4}, {5}, {1, 2})\n>>> _.RGS\n(0, 0, 1, 2, 3) \n```", "```py\nclassmethod from_rgs(rgs, elements)\n```", "```py\n>>> from sympy.combinatorics import Partition\n>>> Partition.from_rgs([0, 1, 2, 0, 1], list('abcde'))\nPartition({c}, {a, d}, {b, e})\n>>> Partition.from_rgs([0, 1, 2, 0, 1], list('cbead'))\nPartition({e}, {a, c}, {b, d})\n>>> a = Partition([1, 4], [2], [3, 5])\n>>> Partition.from_rgs(a.RGS, a.members)\nPartition({2}, {1, 4}, {3, 5}) \n```", "```py\nproperty partition\n```", "```py\n>>> from sympy.combinatorics import Partition\n>>> Partition([1], [2, 3]).partition\n[[1], [2, 3]] \n```", "```py\nproperty rank\n```", "```py\n>>> from sympy.combinatorics import Partition\n>>> a = Partition([1, 2], [3], [4, 5])\n>>> a.rank\n13 \n```", "```py\nsort_key(order=None)\n```", "```py\n>>> from sympy import default_sort_key\n>>> from sympy.combinatorics import Partition\n>>> from sympy.abc import x\n>>> a = Partition([1, 2])\n>>> b = Partition([3, 4])\n>>> c = Partition([1, x])\n>>> d = Partition(list(range(4)))\n>>> l = [d, b, a + 1, a, c]\n>>> l.sort(key=default_sort_key); l\n[Partition({1, 2}), Partition({1}, {2}), Partition({1, x}), Partition({3, 4}), Partition({0, 1, 2, 3})] \n```", "```py\nclass sympy.combinatorics.partitions.IntegerPartition(partition, integer=None)\n```", "```py\nas_dict()\n```", "```py\n>>> from sympy.combinatorics.partitions import IntegerPartition\n>>> IntegerPartition([1]*3 + [2] + [3]*4).as_dict()\n{1: 3, 2: 1, 3: 4} \n```", "```py\nas_ferrers(char='#')\n```", "```py\n>>> from sympy.combinatorics.partitions import IntegerPartition\n>>> print(IntegerPartition([1, 1, 5]).as_ferrers())\n#####\n#\n# \n```", "```py\nproperty conjugate\n```", "```py\n>>> from sympy.combinatorics.partitions import IntegerPartition\n>>> a = IntegerPartition([6, 3, 3, 2, 1])\n>>> a.conjugate\n[5, 4, 3, 1, 1, 1] \n```", "```py\nnext_lex()\n```", "```py\n>>> from sympy.combinatorics.partitions import IntegerPartition\n>>> p = IntegerPartition([3, 1])\n>>> print(p.next_lex())\n[4]\n>>> p.partition < p.next_lex().partition\nTrue \n```", "```py\nprev_lex()\n```", "```py\n>>> from sympy.combinatorics.partitions import IntegerPartition\n>>> p = IntegerPartition([4])\n>>> print(p.prev_lex())\n[3, 1]\n>>> p.partition > p.prev_lex().partition\nTrue \n```", "```py\nsympy.combinatorics.partitions.random_integer_partition(n, seed=None)\n```", "```py\n>>> from sympy.combinatorics.partitions import random_integer_partition \n```", "```py\n>>> random_integer_partition(100, seed=[1, 1, 12, 1, 2, 1, 85, 1])\n[85, 12, 2, 1]\n>>> random_integer_partition(10, seed=[1, 2, 3, 1, 5, 1])\n[5, 3, 1, 1]\n>>> random_integer_partition(1)\n[1] \n```", "```py\nsympy.combinatorics.partitions.RGS_generalized(m)\n```", "```py\n>>> from sympy.combinatorics.partitions import RGS_generalized\n>>> RGS_generalized(6)\nMatrix([\n[  1,   1,   1,  1,  1, 1, 1],\n[  1,   2,   3,  4,  5, 6, 0],\n[  2,   5,  10, 17, 26, 0, 0],\n[  5,  15,  37, 77,  0, 0, 0],\n[ 15,  52, 151,  0,  0, 0, 0],\n[ 52, 203,   0,  0,  0, 0, 0],\n[203,   0,   0,  0,  0, 0, 0]]) \n```", "```py\nsympy.combinatorics.partitions.RGS_enum(m)\n```", "```py\n>>> from sympy.combinatorics.partitions import RGS_enum\n>>> from sympy.combinatorics import Partition\n>>> RGS_enum(4)\n15\n>>> RGS_enum(5)\n52\n>>> RGS_enum(6)\n203 \n```", "```py\n>>> a = Partition(list(range(4)))\n>>> s = set()\n>>> for i in range(20):\n...     s.add(a)\n...     a += 1\n...\n>>> assert len(s) == 15 \n```", "```py\nsympy.combinatorics.partitions.RGS_unrank(rank, m)\n```", "```py\n>>> from sympy.combinatorics.partitions import RGS_unrank\n>>> RGS_unrank(14, 4)\n[0, 1, 2, 3]\n>>> RGS_unrank(0, 4)\n[0, 0, 0, 0] \n```", "```py\nsympy.combinatorics.partitions.RGS_rank(rgs)\n```", "```py\n>>> from sympy.combinatorics.partitions import RGS_rank, RGS_unrank\n>>> RGS_rank([0, 1, 2, 1, 3])\n42\n>>> RGS_rank(RGS_unrank(4, 7))\n4 \n```"]