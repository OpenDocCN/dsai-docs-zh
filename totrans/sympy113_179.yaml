- en: A bicycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/examples/bicycle_example.html](https://docs.sympy.org/latest/modules/physics/mechanics/examples/bicycle_example.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The bicycle is an interesting system in that it has multiple rigid bodies, non-holonomic
    constraints, and a holonomic constraint. The linearized equations of motion are
    presented in [[Meijaard2007]](../reference.html#meijaard2007). This example will
    go through construction of the equations of motion in [`sympy.physics.mechanics`](../index.html#module-sympy.physics.mechanics
    "sympy.physics.mechanics").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this code has been crudely ported from Autolev, which is the reason
    for some of the unusual naming conventions. It was purposefully as similar as
    possible in order to aid initial porting & debugging.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Declaration of Coordinates & Speeds: A simple definition for qdots, qd = u,is
    used in this code. Speeds are: yaw frame ang. rate, roll frame ang. rate, rear
    wheel frame ang. rate (spinning motion), frame ang. rate (pitching motion), steering
    frame ang. rate, and front wheel ang. rate (spinning motion). Wheel positions
    are ignorable coordinates, so they are not introduced.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Declaration of System’s Parameters: The below symbols should be fairly self-explanatory.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up reference frames for the system: N - inertial Y - yaw R - roll WR -
    rear wheel, rotation angle is ignorable coordinate so not oriented Frame - bicycle
    frame TempFrame - statically rotated frame for easier reference inertia definition
    Fork - bicycle fork TempFork - statically rotated frame for easier reference inertia
    definition WF - front wheel, again posses an ignorable coordinate'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Kinematics of the Bicycle: First block of code is forming the positions of
    the relevant points rear wheel contact -> rear wheel’s center of mass -> frame’s
    center of mass + frame/fork connection -> fork’s center of mass + front wheel’s
    center of mass -> front wheel contact point.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the angular velocity of each frame: Angular accelerations end up being
    calculated automatically by differentiating the angular velocities when first
    needed. :: u1 is yaw rate u2 is roll rate u3 is rear wheel rate u4 is frame pitch
    rate u5 is fork steer rate u6 is front wheel rate'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Form the velocities of the points, using the 2-point theorem. Accelerations
    again are calculated automatically when first needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Sets the inertias of each body. Uses the inertia frame to construct the inertia
    dyadics. Wheel inertias are only defined by principal moments of inertia, and
    are in fact constant in the frame and fork reference frames; it is for this reason
    that the orientations of the wheels does not need to be defined. The frame and
    fork inertias are defined in the ‘Temp’ frames which are fixed to the appropriate
    body frames; this is to allow easier input of the reference values of the benchmark
    paper. Note that due to slightly different orientations, the products of inertia
    need to have their signs flipped; this is done later when entering the numerical
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Declaration of the RigidBody containers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The kinematic differential equations; they are defined quite simply. Each entry
    in this list is equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The nonholonomic constraints are the velocity of the front wheel contact point
    dotted into the X, Y, and Z directions; the yaw frame is used as it is “closer”
    to the front wheel (1 less DCM connecting them). These constraints force the velocity
    of the front wheel contact point to be 0 in the inertial frame; the X and Y direction
    constraints enforce a “no-slip” condition, and the Z direction constraint forces
    the front wheel contact point to not move away from the ground frame, essentially
    replicating the holonomic constraint which does not allow the frame pitch to change
    in an invalid fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The holonomic constraint is that the position from the rear wheel contact point
    to the front wheel contact point when dotted into the normal-to-ground plane direction
    must be zero; effectively that the front and rear wheel contact points are always
    touching the ground plane. This is actually not part of the dynamic equations,
    but instead is necessary for the linearization process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The force list; each body has the appropriate gravitational force applied at
    its center of mass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The N frame is the inertial frame, coordinates are supplied in the order of
    independent, dependent coordinates. The kinematic differential equations are also
    entered here. Here the independent speeds are specified, followed by the dependent
    speeds, along with the non-holonomic constraints. The dependent coordinate is
    also provided, with the holonomic constraint. Again, this is only comes into play
    in the linearization process, but is necessary for the linearization to correctly
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is the start of entering in the numerical values from the benchmark paper
    to validate the eigenvalues of the linearized equations from this model to the
    reference eigenvalues. Look at the aforementioned paper for more information.
    Some of these are intermediate values, used to transform values from the paper
    into the coordinate systems used in this model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here is the final assembly of the numerical values. The symbol ‘v’ is the forward
    speed of the bicycle (a concept which only makes sense in the upright, static
    equilibrium case?). These are in a dictionary which will later be substituted
    in. Again the sign on the *product* of inertia values is flipped here, due to
    different orientations of coordinate systems.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Linearizes the forcing vector; the equations are set up as MM udot = forcing,
    where MM is the mass matrix, udot is the vector representing the time derivatives
    of the generalized speeds, and forcing is a vector which contains both external
    forcing terms and internal forcing terms, such as centripetal or Coriolis forces.
    This actually returns a matrix with as many rows as *total* coordinates and speeds,
    but only as many columns as independent coordinates and speeds. (Note that below
    this is commented out, as it takes a few minutes to run, which is not good when
    performing the doctests)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned above, the size of the linearized forcing terms is expanded to
    include both q’s and u’s, so the mass matrix must have this done as well. This
    will likely be changed to be part of the linearized process, for future reference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: I think this is pretty self explanatory. It takes a really long time though.
    I’ve experimented with using evalf with substitution, this failed due to maximum
    recursion depth being exceeded; I also tried lambdifying this, and it is also
    not successful. (again commented out due to speed)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we construct an “A” matrix for the form xdot = A x (x being the state
    vector, although in this case, the sizes are a little off). The following line
    extracts only the minimum entries required for eigenvalue analysis, which correspond
    to rows and columns for lean, steer, lean rate, and steer rate. (this is all commented
    out due to being dependent on the above code, which is also commented out):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Upon running the above code yourself, enabling the commented out lines, compare
    the computed eigenvalues to those is the referenced paper. This concludes the
    bicycle example.
  prefs: []
  type: TYPE_NORMAL
