- en: scipy.interpolate.SmoothSphereBivariateSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.html#scipy.interpolate.SmoothSphereBivariateSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.SmoothSphereBivariateSpline.html#scipy.interpolate.SmoothSphereBivariateSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Smooth bivariate spline approximation in spherical coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**theta, phi, r**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D sequences of data points (order is not important). Coordinates must be given
    in radians. Theta must lie within the interval `[0, pi]`, and phi must lie within
    the interval `[0, 2pi]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Positive 1-D sequence of weights.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Positive smoothing factor defined for estimation condition: `sum((w(i)*(r(i)
    - s(theta(i), phi(i))))**2, axis=0) <= s` Default `s=len(w)` which should be a
    good value if `1/w[i]` is an estimate of the standard deviation of `r[i]`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**eps**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A threshold for determining the effective rank of an over-determined linear
    system of equations. *eps* should have a value within the open interval `(0, 1)`,
    the default is 1e-16.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a base class for bivariate splines.
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smooth univariate spline to fit a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothBivariateSpline`](scipy.interpolate.SmoothBivariateSpline.html#scipy.interpolate.SmoothBivariateSpline
    "scipy.interpolate.SmoothBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline through the given points
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQBivariateSpline`](scipy.interpolate.LSQBivariateSpline.html#scipy.interpolate.LSQBivariateSpline
    "scipy.interpolate.LSQBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectSphereBivariateSpline`](scipy.interpolate.RectSphereBivariateSpline.html#scipy.interpolate.RectSphereBivariateSpline
    "scipy.interpolate.RectSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh on a sphere
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQSphereBivariateSpline`](scipy.interpolate.LSQSphereBivariateSpline.html#scipy.interpolate.LSQSphereBivariateSpline
    "scipy.interpolate.LSQSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline in spherical coordinates using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh.
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find a bivariate B-spline representation of a surface
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a bivariate B-spline and its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see the [FITPACK](http://www.netlib.org/dierckx/sphere.f)
    site about this function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have global data on a coarse grid (the input data does not have
    to be on a grid):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We need to set up the interpolator object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As a first test, we’ll see what the algorithm returns when run on the input
    coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Finally we interpolate the data to a finer grid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-SmoothSphereBivariateSpline-1.png](../Images/088d9f996502d90f0139046e4ba00e49.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.SmoothSphereBivariateSpline.__call__.html#scipy.interpolate.SmoothSphereBivariateSpline.__call__
    "scipy.interpolate.SmoothSphereBivariateSpline.__call__")(theta, phi[, dtheta, dphi, grid])
    | Evaluate the spline or its derivatives at given positions. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ev`](scipy.interpolate.SmoothSphereBivariateSpline.ev.html#scipy.interpolate.SmoothSphereBivariateSpline.ev
    "scipy.interpolate.SmoothSphereBivariateSpline.ev")(theta, phi[, dtheta, dphi])
    | Evaluate the spline at points |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_coeffs`](scipy.interpolate.SmoothSphereBivariateSpline.get_coeffs.html#scipy.interpolate.SmoothSphereBivariateSpline.get_coeffs
    "scipy.interpolate.SmoothSphereBivariateSpline.get_coeffs")() | Return spline
    coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_knots`](scipy.interpolate.SmoothSphereBivariateSpline.get_knots.html#scipy.interpolate.SmoothSphereBivariateSpline.get_knots
    "scipy.interpolate.SmoothSphereBivariateSpline.get_knots")() | Return a tuple
    (tx,ty) where tx,ty contain knots positions of the spline with respect to x-,
    y-variable, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_residual`](scipy.interpolate.SmoothSphereBivariateSpline.get_residual.html#scipy.interpolate.SmoothSphereBivariateSpline.get_residual
    "scipy.interpolate.SmoothSphereBivariateSpline.get_residual")() | Return weighted
    sum of squared residuals of the spline approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`partial_derivative`](scipy.interpolate.SmoothSphereBivariateSpline.partial_derivative.html#scipy.interpolate.SmoothSphereBivariateSpline.partial_derivative
    "scipy.interpolate.SmoothSphereBivariateSpline.partial_derivative")(dx, dy) |
    Construct a new spline representing a partial derivative of this spline. |'
  prefs: []
  type: TYPE_TB
