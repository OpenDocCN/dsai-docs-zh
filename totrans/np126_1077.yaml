- en: C API Deprecations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C API 弃用
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/deprecations.html](https://numpy.org/doc/1.26/reference/c-api/deprecations.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/c-api/deprecations.html](https://numpy.org/doc/1.26/reference/c-api/deprecations.html)
- en: '## Background'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 背景'
- en: The API exposed by NumPy for third-party extensions has grown over years of
    releases, and has allowed programmers to directly access NumPy functionality from
    C. This API can be best described as “organic”. It has emerged from multiple competing
    desires and from multiple points of view over the years, strongly influenced by
    the desire to make it easy for users to move to NumPy from Numeric and Numarray.
    The core API originated with Numeric in 1995 and there are patterns such as the
    heavy use of macros written to mimic Python’s C-API as well as account for compiler
    technology of the late 90’s. There is also only a small group of volunteers who
    have had very little time to spend on improving this API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，NumPy为第三方扩展暴露的API已发展壮大，并使程序员能够直接从C中访问NumPy功能。这个API最好被描述为“有机的”。它是由多种竞争性的愿望和多种观点多年形成的，受到希望使用户能够从Numeric和Numarray迁移到NumPy方面的强烈影响。核心API始于1995年的Numeric，并有一些模式，比如大量使用宏来模仿Python的C-API以及适应90年代晚期的编译器技术。只有一小群志愿者很少有时间投入到改进这个API上。
- en: There is an ongoing effort to improve the API. It is important in this effort
    to ensure that code that compiles for NumPy 1.X continues to compile for NumPy
    1.X. At the same time, certain API’s will be marked as deprecated so that future-looking
    code can avoid these API’s and follow better practices.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正在努力改进API。在这个努力中，重要的是要确保适用于NumPy 1.X的代码继续适用于NumPy 1.X。同时，某些API将被标记为弃用，以便能朝着未来的代码避开这些API，并采用更好的做法。
- en: Another important role played by deprecation markings in the C API is to move
    towards hiding internal details of the NumPy implementation. For those needing
    direct, easy, access to the data of ndarrays, this will not remove this ability.
    Rather, there are many potential performance optimizations which require changing
    the implementation details, and NumPy developers have been unable to try them
    because of the high value of preserving ABI compatibility. By deprecating this
    direct access, we will in the future be able to improve NumPy’s performance in
    ways we cannot presently.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: C API中弃用标记的另一个重要作用是朝着隐藏NumPy实现的内部细节前进。对于那些需要直接、轻松地访问ndarrays数据的人来说，这不会移除这种功能。相反，有许多潜在的性能优化需要改变实现细节，并且由于保留ABI兼容性的价值很高，NumPy开发人员现在无法尝试这些优化。通过弃用这种直接访问方法，将来我们将能够以我们目前无法做到的方式提高NumPy的性能。
- en: Deprecation Mechanism NPY_NO_DEPRECATED_API
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用机制 NPY_NO_DEPRECATED_API
- en: In C, there is no equivalent to the deprecation warnings that Python supports.
    One way to do deprecations is to flag them in the documentation and release notes,
    then remove or change the deprecated features in a future major version (NumPy
    2.0 and beyond). Minor versions of NumPy should not have major C-API changes,
    however, that prevent code that worked on a previous minor release. For example,
    we will do our best to ensure that code that compiled and worked on NumPy 1.4
    should continue to work on NumPy 1.7 (but perhaps with compiler warnings).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在C语言中，没有像Python那样支持弃用警告需要进行改进的功能。处理弃用的一种方法是在文档和发布说明中标记它们，然后在将来的主要版本（如NumPy 2.0及以后）中删除或更改弃用的功能。但NumPy的次要版本不应有导致在之前的次要版本上正常运行的代码无法运行的主要C-API更改。例如，我们将尽力确保在NumPy
    1.4上编译和运行的代码应该继续在NumPy 1.7上运行（但可能会有编译器警告）。
- en: 'To use the NPY_NO_DEPRECATED_API mechanism, you need to #define it to the target
    API version of NumPy before #including any NumPy headers. If you want to confirm
    that your code is clean against 1.7, use:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用NPY_NO_DEPRECATED_API机制，您需要在#include任何NumPy头文件之前将其#define为NumPy的目标API版本。如果您希望确认您的代码对1.7干净，在C中使用：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On compilers which support a #warning mechanism, NumPy issues a compiler warning
    if you do not define the symbol NPY_NO_DEPRECATED_API. This way, the fact that
    there are deprecations will be flagged for third-party developers who may not
    have read the release notes closely.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持#warning机制的编译器上，如果您没有定义符号NPY_NO_DEPRECATED_API，NumPy将发出一个编译器警告。这样一来，第三方开发人员可能没有仔细阅读发布说明的事实会被标记为有弃用功能。
- en: Note that defining NPY_NO_DEPRECATED_API is not sufficient to make your extension
    ABI compatible with a given NumPy version. See [For downstream package authors](../../dev/depending_on_numpy.html#for-downstream-package-authors).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，定义NPY_NO_DEPRECATED_API并不足以使您的扩展ABI与给定的NumPy版本兼容。请参阅[对下游包作者](../../dev/depending_on_numpy.html#for-downstream-package-authors)。
- en: Background
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景
- en: The API exposed by NumPy for third-party extensions has grown over years of
    releases, and has allowed programmers to directly access NumPy functionality from
    C. This API can be best described as “organic”. It has emerged from multiple competing
    desires and from multiple points of view over the years, strongly influenced by
    the desire to make it easy for users to move to NumPy from Numeric and Numarray.
    The core API originated with Numeric in 1995 and there are patterns such as the
    heavy use of macros written to mimic Python’s C-API as well as account for compiler
    technology of the late 90’s. There is also only a small group of volunteers who
    have had very little time to spend on improving this API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy为第三方扩展所公开的API已经经过多年的版本发布，并允许程序员直接从C访问NumPy功能。这个API最好可以描述为“有机的”。多年来，它已经从多个竞争的愿望和多个观点中出现，并且受到了从Numeric和Numarray转移到NumPy的用户方便的强烈影响。核心API最初是由1995年的Numeric创建的，存在一些模式，例如大量使用的宏，用于模仿Python的C-API，并考虑了90年代后期的编译器技术。并且，有一个只有很少时间来改进这个API的小团队志愿者。
- en: There is an ongoing effort to improve the API. It is important in this effort
    to ensure that code that compiles for NumPy 1.X continues to compile for NumPy
    1.X. At the same time, certain API’s will be marked as deprecated so that future-looking
    code can avoid these API’s and follow better practices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正在努力改进API。在这个努力中，确保为NumPy 1.X编写的代码仍然可以为NumPy 1.X编译非常重要。同时，某些API将被标记为弃用，以便未来的代码可以避免使用这些API，并遵循更好的实践。
- en: Another important role played by deprecation markings in the C API is to move
    towards hiding internal details of the NumPy implementation. For those needing
    direct, easy, access to the data of ndarrays, this will not remove this ability.
    Rather, there are many potential performance optimizations which require changing
    the implementation details, and NumPy developers have been unable to try them
    because of the high value of preserving ABI compatibility. By deprecating this
    direct access, we will in the future be able to improve NumPy’s performance in
    ways we cannot presently.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: C API中弃用标记扮演的另一个重要角色是朝着隐藏NumPy实现的内部细节。对于那些需要直接、简单地访问ndarrays数据的人来说，这并不会删除这种能力。相反，有许多潜在的性能优化需要更改实现细节，而目前由于保存ABI兼容性的重要性，NumPy开发人员无法尝试这些优化措施。通过弃用这种直接访问方式，我们将来能够以目前无法实现的方式改进NumPy的性能。
- en: Deprecation Mechanism NPY_NO_DEPRECATED_API
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用机制NPY_NO_DEPRECATED_API
- en: In C, there is no equivalent to the deprecation warnings that Python supports.
    One way to do deprecations is to flag them in the documentation and release notes,
    then remove or change the deprecated features in a future major version (NumPy
    2.0 and beyond). Minor versions of NumPy should not have major C-API changes,
    however, that prevent code that worked on a previous minor release. For example,
    we will do our best to ensure that code that compiled and worked on NumPy 1.4
    should continue to work on NumPy 1.7 (but perhaps with compiler warnings).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，没有相当于Python支持的弃用警告的机制。进行弃用的一种方法是在文档和发布说明中标记它们，然后在将来的主要版本（NumPy 2.0及以后）中删除或更改已弃用的功能。NumPy的次要版本不应该有主要的C-API更改，这会阻止之前的次要版本上运行的代码。例如，我们将尽力确保在NumPy
    1.4上编译并运行的代码应该在NumPy 1.7上（可能会出现编译器警告）继续运行。
- en: 'To use the NPY_NO_DEPRECATED_API mechanism, you need to #define it to the target
    API version of NumPy before #including any NumPy headers. If you want to confirm
    that your code is clean against 1.7, use:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用NPY_NO_DEPRECATED_API机制，在#include任何NumPy头文件之前，您需要将其定义为NumPy的目标API版本。如果您想确认您的代码是否适用于1.7，请使用：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On compilers which support a #warning mechanism, NumPy issues a compiler warning
    if you do not define the symbol NPY_NO_DEPRECATED_API. This way, the fact that
    there are deprecations will be flagged for third-party developers who may not
    have read the release notes closely.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持#warning机制的编译器上，如果您没有定义符号NPY_NO_DEPRECATED_API，NumPy会发出编译器警告。这样，那些可能没有仔细阅读发布说明的第三方开发人员将会注意到已经弃用的事实。
- en: Note that defining NPY_NO_DEPRECATED_API is not sufficient to make your extension
    ABI compatible with a given NumPy version. See [For downstream package authors](../../dev/depending_on_numpy.html#for-downstream-package-authors).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，仅定义NPY_NO_DEPRECATED_API并不足以使您的扩展与特定的NumPy版本ABI兼容。参见[面向下游软件包作者](../../dev/depending_on_numpy.html#for-downstream-package-authors)。
