- en: scipy.stats.rankdata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rankdata.html#scipy.stats.rankdata)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Assign ranks to data, dealing with ties appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: By default (`axis=None`), the data array is first flattened, and a flat array
    of ranks is returned. Separately reshape the rank array to the shape of the data
    array if desired (see Examples).
  prefs: []
  type: TYPE_NORMAL
- en: Ranks begin at 1\. The *method* argument controls how ranks are assigned to
    equal values. See [[1]](#r79b6e8d42322-1) for further discussion of ranking methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The array of values to be ranked.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{‘average’, ‘min’, ‘max’, ‘dense’, ‘ordinal’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The method used to assign ranks to tied elements. The following methods are
    available (default is ‘average’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘average’: The average of the ranks that would have been assigned to all the
    tied values is assigned to each value.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘min’: The minimum of the ranks that would have been assigned to all the tied
    values is assigned to each value. (This is also referred to as “competition” ranking.)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘max’: The maximum of the ranks that would have been assigned to all the tied
    values is assigned to each value.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘dense’: Like ‘min’, but the rank of the next highest element is assigned the
    rank immediately after those assigned to the tied elements.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘ordinal’: All values are given a distinct rank, corresponding to the order
    that the values occur in *a*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**{None, int}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which to perform the ranking. If `None`, the data array is first
    flattened.
  prefs: []
  type: TYPE_NORMAL
- en: '**nan_policy**{‘propagate’, ‘omit’, ‘raise’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Defines how to handle when input contains nan. The following options are available
    (default is ‘propagate’):'
  prefs: []
  type: TYPE_NORMAL
- en: '‘propagate’: propagates nans through the rank calculation'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘omit’: performs the calculations ignoring nan values'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '‘raise’: raises an error'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When *nan_policy* is ‘propagate’, the output is an array of *all* nans because
    ranks relative to nans in the input are undefined. When *nan_policy* is ‘omit’,
    nans in *a* are ignored when ranking the other values, and the corresponding locations
    of the output are nan.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ranks**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: An array of size equal to the size of *a*, containing rank scores.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Ranking”, [https://en.wikipedia.org/wiki/Ranking](https://en.wikipedia.org/wiki/Ranking)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
