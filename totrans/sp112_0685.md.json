["```py\nclass scipy.sparse.coo_matrix(arg1, shape=None, dtype=None, copy=False)\n```", "```py\n>>> # Constructing an empty matrix\n>>> import numpy as np\n>>> from scipy.sparse import coo_matrix\n>>> coo_matrix((3, 4), dtype=np.int8).toarray()\narray([[0, 0, 0, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 0]], dtype=int8) \n```", "```py\n>>> # Constructing a matrix using ijv format\n>>> row  = np.array([0, 3, 1, 0])\n>>> col  = np.array([0, 3, 1, 2])\n>>> data = np.array([4, 5, 7, 9])\n>>> coo_matrix((data, (row, col)), shape=(4, 4)).toarray()\narray([[4, 0, 9, 0],\n [0, 7, 0, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 5]]) \n```", "```py\n>>> # Constructing a matrix with duplicate indices\n>>> row  = np.array([0, 0, 1, 3, 1, 0, 0])\n>>> col  = np.array([0, 2, 1, 3, 1, 0, 0])\n>>> data = np.array([1, 1, 1, 1, 1, 1, 1])\n>>> coo = coo_matrix((data, (row, col)), shape=(4, 4))\n>>> # Duplicate indices are maintained until implicitly or explicitly summed\n>>> np.max(coo.data)\n1\n>>> coo.toarray()\narray([[3, 0, 1, 0],\n [0, 2, 0, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 1]]) \n```"]