- en: 10 minutes to pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/10min.html](https://pandas.pydata.org/docs/user_guide/10min.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a short introduction to pandas, geared mainly for new users. You can
    see more complex recipes in the [Cookbook](cookbook.html#cookbook).
  prefs: []
  type: TYPE_NORMAL
- en: 'Customarily, we import as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Basic data structures in pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pandas provides two types of classes for handling data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"):
    a one-dimensional labeled array holding data of any type'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: such as integers, strings, Python objects etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"):
    a two-dimensional data structure that holds data like a two-dimension array or
    a table with rows and columns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Object creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Intro to data structures section](dsintro.html#dsintro).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    by passing a list of values, letting pandas create a default [`RangeIndex`](../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by passing a NumPy array with a datetime index using [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and labeled columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by passing a dictionary of objects where the keys are the
    column labels and the values are the column values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The columns of the resulting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") have different [dtypes](basics.html#basics-dtypes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using IPython, tab completion for column names (as well as public
    attributes) is automatically enabled. Here’s a subset of the attributes that will
    be completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the columns `A`, `B`, `C`, and `D` are automatically tab completed.
    `E` and `F` are there as well; the rest of the attributes have been truncated
    for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Essentially basics functionality section](basics.html#basics).
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [`DataFrame.head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") and [`DataFrame.tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail") to view the top and bottom rows of the frame respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the [`DataFrame.index`](../reference/api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") or [`DataFrame.columns`](../reference/api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a NumPy representation of the underlying data with [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") without the index or column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy arrays have one dtype for the entire array while pandas DataFrames
    have one dtype per column**. When you call [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy"), pandas will find the NumPy dtype that can hold *all*
    of the dtypes in the DataFrame. If the common data type is `object`, [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will require copying data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") shows a quick statistic summary of your data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Transposing your data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") sorts by an axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") sorts by values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While standard Python / NumPy expressions for selecting and setting are intuitive
    and come in handy for interactive work, for production code, we recommend the
    optimized pandas data access methods, [`DataFrame.at()`](../reference/api/pandas.DataFrame.at.html#pandas.DataFrame.at
    "pandas.DataFrame.at"), [`DataFrame.iat()`](../reference/api/pandas.DataFrame.iat.html#pandas.DataFrame.iat
    "pandas.DataFrame.iat"), [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") and [`DataFrame.iloc()`](../reference/api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc
    "pandas.DataFrame.iloc").
  prefs: []
  type: TYPE_NORMAL
- en: See the indexing documentation [Indexing and Selecting Data](indexing.html#indexing)
    and [MultiIndex / Advanced Indexing](advanced.html#advanced).
  prefs: []
  type: TYPE_NORMAL
- en: Getitem (`[]`)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a single label selects a columns and yields a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") equivalent to `df.A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a slice `:` selects matching rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Selection by label
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Label](indexing.html#indexing-label) using [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") or [`DataFrame.at()`](../reference/api/pandas.DataFrame.at.html#pandas.DataFrame.at
    "pandas.DataFrame.at").
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting a row matching a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting all rows (`:`) with a select column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For label slicing, both endpoints are *included*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting a single row and column label returns a scalar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Selection by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Position](indexing.html#indexing-integer) using [`DataFrame.iloc()`](../reference/api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc
    "pandas.DataFrame.iloc") or [`DataFrame.iat()`](../reference/api/pandas.DataFrame.iat.html#pandas.DataFrame.iat
    "pandas.DataFrame.iat").
  prefs: []
  type: TYPE_NORMAL
- en: 'Select via the position of the passed integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Integer slices acts similar to NumPy/Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Lists of integer position locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing rows explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing columns explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting a value explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Boolean indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select rows where `df.A` is greater than `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting values from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where a boolean condition is met:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") method for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Setting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting a new column automatically aligns the data by the indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting by assigning with a NumPy array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the prior setting operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'A `where` operation with setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For NumPy data types, `np.nan` represents missing data. It is by default not
    included in computations. See the [Missing Data section](missing_data.html#missing-data).
  prefs: []
  type: TYPE_NORMAL
- en: 'Reindexing allows you to change/add/delete the index on a specified axis. This
    returns a copy of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") drops any rows that have missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") fills missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") gets
    the boolean mask where values are `nan`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Basic section on Binary Ops](basics.html#basics-binop).
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations in general *exclude* missing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the mean value for each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the mean value for each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Operating with another [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a different index or column will align the result with
    the union of the index or column labels. In addition, pandas automatically broadcasts
    along the specified dimension and will fill unaligned labels with `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: User defined functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") and [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") applies a user defined function that reduces or
    broadcasts its result respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Value Counts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more at [Histogramming and Discretization](basics.html#basics-discretization).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: String Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is equipped with a set of string processing methods in the `str` attribute that
    make it easy to operate on each element of the array, as in the code snippet below.
    See more at [Vectorized String Methods](text.html#text-string-methods).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Concat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides various facilities for easily combining together [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects with various kinds of set logic for the indexes and
    relational algebra functionality in the case of join / merge-type operations.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merging section](merging.html#merging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenating pandas objects together row-wise with [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Adding a column to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is relatively fast. However, adding a row requires a copy,
    and may be expensive. We recommend passing a pre-built list of records to the
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    constructor instead of building a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by iteratively appending records to it.
  prefs: []
  type: TYPE_NORMAL
- en: Join
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    enables SQL style join types along specific columns. See the [Database style joining](merging.html#merging-join)
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    on unique keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Grouping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By “group by” we are referring to a process involving one or more of the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Splitting** the data into groups based on some criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applying** a function to each group independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combining** the results into a data structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the [Grouping section](groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Grouping by a column label, selecting column labels, and then applying the
    [`DataFrameGroupBy.sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") function to the resulting groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Grouping by multiple columns label forms [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Reshaping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the sections on [Hierarchical Indexing](advanced.html#advanced-hierarchical)
    and [Reshaping](reshaping.html#reshaping-stacking).
  prefs: []
  type: TYPE_NORMAL
- en: Stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") method “compresses” a level in the DataFrame’s columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'With a “stacked” DataFrame or Series (having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") as the `index`), the inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") is [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), which by default unstacks the **last level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Pivot tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the section on [Pivot Tables](reshaping.html#reshaping-pivot).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") pivots a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") specifying the `values`, `index` and `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Time series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas has simple, powerful, and efficient functionality for performing resampling
    operations during frequency conversion (e.g., converting secondly data into 5-minutely
    data). This is extremely common in, but not limited to, financial applications.
    See the [Time Series section](timeseries.html#timeseries).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") localizes a time series to a time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.tz_convert()`](../reference/api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert") converts a timezones aware time series to another
    time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a non-fixed duration ([`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay")) to a time series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Categoricals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can include categorical data in a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). For full docs, see the [categorical introduction](categorical.html#categorical)
    and the [API documentation](../reference/arrays.html#api-arrays-categorical).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting the raw grades to a categorical data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Rename the categories to more meaningful names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Reorder the categories and simultaneously add the missing categories (methods
    under [`Series.cat()`](../reference/api/pandas.Series.cat.html#pandas.Series.cat
    "pandas.Series.cat") return a new [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Sorting is per order in the categories, not lexical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Grouping by a categorical column with `observed=False` also shows empty categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Plotting](visualization.html#visualization) docs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the standard convention for referencing the matplotlib API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The `plt.close` method is used to [close](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.close.html)
    a figure window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When using Jupyter, the plot will appear using [`plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). Otherwise use [matplotlib.pyplot.show](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.show.html)
    to show it or [matplotlib.pyplot.savefig](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html)
    to write it to a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") plots all columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing and exporting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [IO Tools](io.html#io) section.
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Writing to a csv file:](io.html#io-store-in-csv) using [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[Reading from a csv file:](io.html#io-read-csv-table) using [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Parquet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Writing to a Parquet file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from a Parquet file Store using [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Excel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading and writing to [Excel](io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing to an excel file using [`DataFrame.to_excel()`](../reference/api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from an excel file using [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Gotchas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are attempting to perform a boolean operation on a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") you might see an exception like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: See [Comparisons](basics.html#basics-compare) and [Gotchas](gotchas.html#gotchas)
    for an explanation and what to do.
  prefs: []
  type: TYPE_NORMAL
- en: Basic data structures in pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pandas provides two types of classes for handling data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series"):
    a one-dimensional labeled array holding data of any type'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: such as integers, strings, Python objects etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"):
    a two-dimensional data structure that holds data like a two-dimension array or
    a table with rows and columns.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Object creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Intro to data structures section](dsintro.html#dsintro).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    by passing a list of values, letting pandas create a default [`RangeIndex`](../reference/api/pandas.RangeIndex.html#pandas.RangeIndex
    "pandas.RangeIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by passing a NumPy array with a datetime index using [`date_range()`](../reference/api/pandas.date_range.html#pandas.date_range
    "pandas.date_range") and labeled columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Creating a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by passing a dictionary of objects where the keys are the
    column labels and the values are the column values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The columns of the resulting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") have different [dtypes](basics.html#basics-dtypes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’re using IPython, tab completion for column names (as well as public
    attributes) is automatically enabled. Here’s a subset of the attributes that will
    be completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the columns `A`, `B`, `C`, and `D` are automatically tab completed.
    `E` and `F` are there as well; the rest of the attributes have been truncated
    for brevity.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Essentially basics functionality section](basics.html#basics).
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [`DataFrame.head()`](../reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head
    "pandas.DataFrame.head") and [`DataFrame.tail()`](../reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail
    "pandas.DataFrame.tail") to view the top and bottom rows of the frame respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the [`DataFrame.index`](../reference/api/pandas.DataFrame.index.html#pandas.DataFrame.index
    "pandas.DataFrame.index") or [`DataFrame.columns`](../reference/api/pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a NumPy representation of the underlying data with [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") without the index or column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy arrays have one dtype for the entire array while pandas DataFrames
    have one dtype per column**. When you call [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy"), pandas will find the NumPy dtype that can hold *all*
    of the dtypes in the DataFrame. If the common data type is `object`, [`DataFrame.to_numpy()`](../reference/api/pandas.DataFrame.to_numpy.html#pandas.DataFrame.to_numpy
    "pandas.DataFrame.to_numpy") will require copying data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[`describe()`](../reference/api/pandas.DataFrame.describe.html#pandas.DataFrame.describe
    "pandas.DataFrame.describe") shows a quick statistic summary of your data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Transposing your data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.sort_index()`](../reference/api/pandas.DataFrame.sort_index.html#pandas.DataFrame.sort_index
    "pandas.DataFrame.sort_index") sorts by an axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.sort_values()`](../reference/api/pandas.DataFrame.sort_values.html#pandas.DataFrame.sort_values
    "pandas.DataFrame.sort_values") sorts by values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While standard Python / NumPy expressions for selecting and setting are intuitive
    and come in handy for interactive work, for production code, we recommend the
    optimized pandas data access methods, [`DataFrame.at()`](../reference/api/pandas.DataFrame.at.html#pandas.DataFrame.at
    "pandas.DataFrame.at"), [`DataFrame.iat()`](../reference/api/pandas.DataFrame.iat.html#pandas.DataFrame.iat
    "pandas.DataFrame.iat"), [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") and [`DataFrame.iloc()`](../reference/api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc
    "pandas.DataFrame.iloc").
  prefs: []
  type: TYPE_NORMAL
- en: See the indexing documentation [Indexing and Selecting Data](indexing.html#indexing)
    and [MultiIndex / Advanced Indexing](advanced.html#advanced).
  prefs: []
  type: TYPE_NORMAL
- en: Getitem (`[]`)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a single label selects a columns and yields a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") equivalent to `df.A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a slice `:` selects matching rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Selection by label
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Label](indexing.html#indexing-label) using [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") or [`DataFrame.at()`](../reference/api/pandas.DataFrame.at.html#pandas.DataFrame.at
    "pandas.DataFrame.at").
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting a row matching a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting all rows (`:`) with a select column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'For label slicing, both endpoints are *included*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting a single row and column label returns a scalar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Selection by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Position](indexing.html#indexing-integer) using [`DataFrame.iloc()`](../reference/api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc
    "pandas.DataFrame.iloc") or [`DataFrame.iat()`](../reference/api/pandas.DataFrame.iat.html#pandas.DataFrame.iat
    "pandas.DataFrame.iat").
  prefs: []
  type: TYPE_NORMAL
- en: 'Select via the position of the passed integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Integer slices acts similar to NumPy/Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Lists of integer position locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing rows explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing columns explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting a value explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Boolean indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select rows where `df.A` is greater than `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting values from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where a boolean condition is met:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") method for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Setting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting a new column automatically aligns the data by the indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting by assigning with a NumPy array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the prior setting operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'A `where` operation with setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Getitem (`[]`)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a single label selects a columns and yields a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") equivalent to `df.A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'For a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), passing a slice `:` selects matching rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Selection by label
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Label](indexing.html#indexing-label) using [`DataFrame.loc()`](../reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") or [`DataFrame.at()`](../reference/api/pandas.DataFrame.at.html#pandas.DataFrame.at
    "pandas.DataFrame.at").
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting a row matching a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting all rows (`:`) with a select column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'For label slicing, both endpoints are *included*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting a single row and column label returns a scalar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Selection by position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more in [Selection by Position](indexing.html#indexing-integer) using [`DataFrame.iloc()`](../reference/api/pandas.DataFrame.iloc.html#pandas.DataFrame.iloc
    "pandas.DataFrame.iloc") or [`DataFrame.iat()`](../reference/api/pandas.DataFrame.iat.html#pandas.DataFrame.iat
    "pandas.DataFrame.iat").
  prefs: []
  type: TYPE_NORMAL
- en: 'Select via the position of the passed integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Integer slices acts similar to NumPy/Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Lists of integer position locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing rows explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'For slicing columns explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting a value explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'For getting fast access to a scalar (equivalent to the prior method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Boolean indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select rows where `df.A` is greater than `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Selecting values from a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") where a boolean condition is met:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Using [`isin()`](../reference/api/pandas.Series.isin.html#pandas.Series.isin
    "pandas.Series.isin") method for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Setting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting a new column automatically aligns the data by the indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting values by position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting by assigning with a NumPy array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the prior setting operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'A `where` operation with setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For NumPy data types, `np.nan` represents missing data. It is by default not
    included in computations. See the [Missing Data section](missing_data.html#missing-data).
  prefs: []
  type: TYPE_NORMAL
- en: 'Reindexing allows you to change/add/delete the index on a specified axis. This
    returns a copy of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.dropna()`](../reference/api/pandas.DataFrame.dropna.html#pandas.DataFrame.dropna
    "pandas.DataFrame.dropna") drops any rows that have missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[`DataFrame.fillna()`](../reference/api/pandas.DataFrame.fillna.html#pandas.DataFrame.fillna
    "pandas.DataFrame.fillna") fills missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[`isna()`](../reference/api/pandas.isna.html#pandas.isna "pandas.isna") gets
    the boolean mask where values are `nan`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Basic section on Binary Ops](basics.html#basics-binop).
  prefs: []
  type: TYPE_NORMAL
- en: Stats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations in general *exclude* missing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the mean value for each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the mean value for each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Operating with another [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a different index or column will align the result with
    the union of the index or column labels. In addition, pandas automatically broadcasts
    along the specified dimension and will fill unaligned labels with `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: User defined functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") and [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") applies a user defined function that reduces or
    broadcasts its result respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Value Counts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more at [Histogramming and Discretization](basics.html#basics-discretization).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: String Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is equipped with a set of string processing methods in the `str` attribute that
    make it easy to operate on each element of the array, as in the code snippet below.
    See more at [Vectorized String Methods](text.html#text-string-methods).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Stats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operations in general *exclude* missing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the mean value for each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the mean value for each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Operating with another [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a different index or column will align the result with
    the union of the index or column labels. In addition, pandas automatically broadcasts
    along the specified dimension and will fill unaligned labels with `np.nan`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: User defined functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`DataFrame.agg()`](../reference/api/pandas.DataFrame.agg.html#pandas.DataFrame.agg
    "pandas.DataFrame.agg") and [`DataFrame.transform()`](../reference/api/pandas.DataFrame.transform.html#pandas.DataFrame.transform
    "pandas.DataFrame.transform") applies a user defined function that reduces or
    broadcasts its result respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Value Counts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See more at [Histogramming and Discretization](basics.html#basics-discretization).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: String Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    is equipped with a set of string processing methods in the `str` attribute that
    make it easy to operate on each element of the array, as in the code snippet below.
    See more at [Vectorized String Methods](text.html#text-string-methods).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Merge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Concat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides various facilities for easily combining together [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects with various kinds of set logic for the indexes and
    relational algebra functionality in the case of join / merge-type operations.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merging section](merging.html#merging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenating pandas objects together row-wise with [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Adding a column to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is relatively fast. However, adding a row requires a copy,
    and may be expensive. We recommend passing a pre-built list of records to the
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    constructor instead of building a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by iteratively appending records to it.
  prefs: []
  type: TYPE_NORMAL
- en: Join
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    enables SQL style join types along specific columns. See the [Database style joining](merging.html#merging-join)
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    on unique keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Concat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides various facilities for easily combining together [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects with various kinds of set logic for the indexes and
    relational algebra functionality in the case of join / merge-type operations.
  prefs: []
  type: TYPE_NORMAL
- en: See the [Merging section](merging.html#merging).
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenating pandas objects together row-wise with [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Adding a column to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is relatively fast. However, adding a row requires a copy,
    and may be expensive. We recommend passing a pre-built list of records to the
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    constructor instead of building a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") by iteratively appending records to it.
  prefs: []
  type: TYPE_NORMAL
- en: Join
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    enables SQL style join types along specific columns. See the [Database style joining](merging.html#merging-join)
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    on unique keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Grouping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By “group by” we are referring to a process involving one or more of the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Splitting** the data into groups based on some criteria'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applying** a function to each group independently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Combining** the results into a data structure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the [Grouping section](groupby.html#groupby).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Grouping by a column label, selecting column labels, and then applying the
    [`DataFrameGroupBy.sum()`](../reference/api/pandas.core.groupby.DataFrameGroupBy.sum.html#pandas.core.groupby.DataFrameGroupBy.sum
    "pandas.core.groupby.DataFrameGroupBy.sum") function to the resulting groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Grouping by multiple columns label forms [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Reshaping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the sections on [Hierarchical Indexing](advanced.html#advanced-hierarchical)
    and [Reshaping](reshaping.html#reshaping-stacking).
  prefs: []
  type: TYPE_NORMAL
- en: Stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") method “compresses” a level in the DataFrame’s columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'With a “stacked” DataFrame or Series (having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") as the `index`), the inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") is [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), which by default unstacks the **last level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Pivot tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the section on [Pivot Tables](reshaping.html#reshaping-pivot).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") pivots a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") specifying the `values`, `index` and `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") method “compresses” a level in the DataFrame’s columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'With a “stacked” DataFrame or Series (having a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") as the `index`), the inverse operation of [`stack()`](../reference/api/pandas.DataFrame.stack.html#pandas.DataFrame.stack
    "pandas.DataFrame.stack") is [`unstack()`](../reference/api/pandas.DataFrame.unstack.html#pandas.DataFrame.unstack
    "pandas.DataFrame.unstack"), which by default unstacks the **last level**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Pivot tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See the section on [Pivot Tables](reshaping.html#reshaping-pivot).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[`pivot_table()`](../reference/api/pandas.pivot_table.html#pandas.pivot_table
    "pandas.pivot_table") pivots a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") specifying the `values`, `index` and `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Time series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas has simple, powerful, and efficient functionality for performing resampling
    operations during frequency conversion (e.g., converting secondly data into 5-minutely
    data). This is extremely common in, but not limited to, financial applications.
    See the [Time Series section](timeseries.html#timeseries).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.tz_localize()`](../reference/api/pandas.Series.tz_localize.html#pandas.Series.tz_localize
    "pandas.Series.tz_localize") localizes a time series to a time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[`Series.tz_convert()`](../reference/api/pandas.Series.tz_convert.html#pandas.Series.tz_convert
    "pandas.Series.tz_convert") converts a timezones aware time series to another
    time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a non-fixed duration ([`BusinessDay`](../reference/api/pandas.tseries.offsets.BusinessDay.html#pandas.tseries.offsets.BusinessDay
    "pandas.tseries.offsets.BusinessDay")) to a time series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Categoricals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: pandas can include categorical data in a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). For full docs, see the [categorical introduction](categorical.html#categorical)
    and the [API documentation](../reference/arrays.html#api-arrays-categorical).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting the raw grades to a categorical data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Rename the categories to more meaningful names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Reorder the categories and simultaneously add the missing categories (methods
    under [`Series.cat()`](../reference/api/pandas.Series.cat.html#pandas.Series.cat
    "pandas.Series.cat") return a new [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Sorting is per order in the categories, not lexical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Grouping by a categorical column with `observed=False` also shows empty categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Plotting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [Plotting](visualization.html#visualization) docs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the standard convention for referencing the matplotlib API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'The `plt.close` method is used to [close](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.close.html)
    a figure window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/series_plot_basic.png](../Images/11fb2535f89502ff28b5222acb79d745.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When using Jupyter, the plot will appear using [`plot()`](../reference/api/pandas.Series.plot.html#pandas.Series.plot
    "pandas.Series.plot"). Otherwise use [matplotlib.pyplot.show](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.show.html)
    to show it or [matplotlib.pyplot.savefig](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html)
    to write it to a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[`plot()`](../reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot
    "pandas.DataFrame.plot") plots all columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/frame_plot_basic.png](../Images/324a1e9ebd887ec1d338c64cd26f1c84.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing and exporting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the [IO Tools](io.html#io) section.
  prefs: []
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Writing to a csv file:](io.html#io-store-in-csv) using [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[Reading from a csv file:](io.html#io-read-csv-table) using [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Parquet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Writing to a Parquet file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from a Parquet file Store using [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Excel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading and writing to [Excel](io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing to an excel file using [`DataFrame.to_excel()`](../reference/api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from an excel file using [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: CSV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Writing to a csv file:](io.html#io-store-in-csv) using [`DataFrame.to_csv()`](../reference/api/pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv
    "pandas.DataFrame.to_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[Reading from a csv file:](io.html#io-read-csv-table) using [`read_csv()`](../reference/api/pandas.read_csv.html#pandas.read_csv
    "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Parquet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Writing to a Parquet file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from a Parquet file Store using [`read_parquet()`](../reference/api/pandas.read_parquet.html#pandas.read_parquet
    "pandas.read_parquet"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Excel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading and writing to [Excel](io.html#io-excel).
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing to an excel file using [`DataFrame.to_excel()`](../reference/api/pandas.DataFrame.to_excel.html#pandas.DataFrame.to_excel
    "pandas.DataFrame.to_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading from an excel file using [`read_excel()`](../reference/api/pandas.read_excel.html#pandas.read_excel
    "pandas.read_excel"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Gotchas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are attempting to perform a boolean operation on a [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") you might see an exception like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: See [Comparisons](basics.html#basics-compare) and [Gotchas](gotchas.html#gotchas)
    for an explanation and what to do.
  prefs: []
  type: TYPE_NORMAL
