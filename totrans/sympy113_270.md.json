["```py\nclass sympy.geometry.plane.Plane(p1, a=None, b=None, **kwargs)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2))\nPlane(Point3D(1, 1, 1), (-1, 2, -1))\n>>> Plane((1, 1, 1), (2, 3, 4), (2, 2, 2))\nPlane(Point3D(1, 1, 1), (-1, 2, -1))\n>>> Plane(Point3D(1, 1, 1), normal_vector=(1,4,7))\nPlane(Point3D(1, 1, 1), (1, 4, 7)) \n```", "```py\nangle_between(o)\n```", "```py\n>>> from sympy import Point3D, Line3D, Plane\n>>> a = Plane(Point3D(1, 2, 2), normal_vector=(1, 2, 3))\n>>> b = Line3D(Point3D(1, 3, 4), Point3D(2, 2, 2))\n>>> a.angle_between(b)\n-asin(sqrt(21)/6) \n```", "```py\narbitrary_point(u=None, v=None)\n```", "```py\n>>> from sympy import Plane, Ray\n>>> from sympy.abc import u, v, t, r\n>>> p = Plane((1, 1, 1), normal_vector=(1, 0, 0))\n>>> p.arbitrary_point(u, v)\nPoint3D(1, u + 1, v + 1)\n>>> p.arbitrary_point(t)\nPoint3D(1, cos(t) + 1, sin(t) + 1) \n```", "```py\n>>> Ray(p.p1, _).arbitrary_point(r)\nPoint3D(1, r*cos(t) + 1, r*sin(t) + 1) \n```", "```py\nstatic are_concurrent(*planes)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(5, 0, 0), normal_vector=(1, -1, 1))\n>>> b = Plane(Point3D(0, -2, 0), normal_vector=(3, 1, 1))\n>>> c = Plane(Point3D(0, -1, 0), normal_vector=(5, -1, 9))\n>>> Plane.are_concurrent(a, b)\nTrue\n>>> Plane.are_concurrent(a, b, c)\nFalse \n```", "```py\ndistance(o)\n```", "```py\n>>> from sympy import Point3D, Line3D, Plane\n>>> a = Plane(Point3D(1, 1, 1), normal_vector=(1, 1, 1))\n>>> b = Point3D(1, 2, 3)\n>>> a.distance(b)\nsqrt(3)\n>>> c = Line3D(Point3D(2, 3, 1), Point3D(1, 2, 2))\n>>> a.distance(c)\n0 \n```", "```py\nequals(o)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(1, 2, 3), normal_vector=(1, 1, 1))\n>>> b = Plane(Point3D(1, 2, 3), normal_vector=(2, 2, 2))\n>>> c = Plane(Point3D(1, 2, 3), normal_vector=(-1, 4, 6))\n>>> a.equals(a)\nTrue\n>>> a.equals(b)\nTrue\n>>> a.equals(c)\nFalse \n```", "```py\nequation(x=None, y=None, z=None)\n```", "```py\n>>> from sympy import Point3D, Plane\n>>> a = Plane(Point3D(1, 1, 2), Point3D(2, 4, 7), Point3D(3, 5, 1))\n>>> a.equation()\n-23*x + 11*y - 2*z + 16\n>>> a = Plane(Point3D(1, 4, 2), normal_vector=(6, 6, 6))\n>>> a.equation()\n6*x + 6*y + 6*z - 42 \n```", "```py\nintersection(o)\n```", "```py\n>>> from sympy import Point3D, Line3D, Plane\n>>> a = Plane(Point3D(1, 2, 3), normal_vector=(1, 1, 1))\n>>> b = Point3D(1, 2, 3)\n>>> a.intersection(b)\n[Point3D(1, 2, 3)]\n>>> c = Line3D(Point3D(1, 4, 7), Point3D(2, 2, 2))\n>>> a.intersection(c)\n[Point3D(2, 2, 2)]\n>>> d = Plane(Point3D(6, 0, 0), normal_vector=(2, -5, 3))\n>>> e = Plane(Point3D(2, 0, 0), normal_vector=(3, 4, -3))\n>>> d.intersection(e)\n[Line3D(Point3D(78/23, -24/23, 0), Point3D(147/23, 321/23, 23))] \n```", "```py\nis_coplanar(o)\n```", "```py\n>>> from sympy import Plane\n>>> o = (0, 0, 0)\n>>> p = Plane(o, (1, 1, 1))\n>>> p2 = Plane(o, (2, 2, 2))\n>>> p == p2\nFalse\n>>> p.is_coplanar(p2)\nTrue \n```", "```py\nis_parallel(l)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(1,4,6), normal_vector=(2, 4, 6))\n>>> b = Plane(Point3D(3,1,3), normal_vector=(4, 8, 12))\n>>> a.is_parallel(b)\nTrue \n```", "```py\nis_perpendicular(l)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(1,4,6), normal_vector=(2, 4, 6))\n>>> b = Plane(Point3D(2, 2, 2), normal_vector=(-1, 2, -1))\n>>> a.is_perpendicular(b)\nTrue \n```", "```py\nproperty normal_vector\n```", "```py\n>>> from sympy import Point3D, Plane\n>>> a = Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2))\n>>> a.normal_vector\n(-1, 2, -1)\n>>> a = Plane(Point3D(1, 1, 1), normal_vector=(1, 4, 7))\n>>> a.normal_vector\n(1, 4, 7) \n```", "```py\nproperty p1\n```", "```py\n>>> from sympy import Point3D, Plane\n>>> a = Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2))\n>>> a.p1\nPoint3D(1, 1, 1) \n```", "```py\nparallel_plane(pt)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(1, 4, 6), normal_vector=(2, 4, 6))\n>>> a.parallel_plane(Point3D(2, 3, 5))\nPlane(Point3D(2, 3, 5), (2, 4, 6)) \n```", "```py\nparameter_value(other, u, v=None)\n```", "```py\n>>> from sympy import pi, Plane\n>>> from sympy.abc import t, u, v\n>>> p = Plane((2, 0, 0), (0, 0, 1), (0, 1, 0)) \n```", "```py\n>>> on_circle = p.arbitrary_point(t).subs(t, pi/4)\n>>> on_circle.distance(p.p1)\n1\n>>> p.parameter_value(on_circle, t)\n{t: pi/4} \n```", "```py\n>>> off_circle = p.p1 + (on_circle - p.p1)*2\n>>> off_circle.distance(p.p1)\n2\n>>> p.parameter_value(off_circle, t)\n{t: pi/4} \n```", "```py\n>>> p.parameter_value(on_circle, u, v)\n{u: sqrt(10)/10, v: sqrt(10)/30}\n>>> p.parameter_value(off_circle, u, v)\n{u: sqrt(10)/5, v: sqrt(10)/15} \n```", "```py\nperpendicular_line(pt)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a = Plane(Point3D(1,4,6), normal_vector=(2, 4, 6))\n>>> a.perpendicular_line(Point3D(9, 8, 7))\nLine3D(Point3D(9, 8, 7), Point3D(11, 12, 13)) \n```", "```py\nperpendicular_plane(*pts)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> a, b = Point3D(0, 0, 0), Point3D(0, 1, 0)\n>>> Z = (0, 0, 1)\n>>> p = Plane(a, normal_vector=Z)\n>>> p.perpendicular_plane(a, b)\nPlane(Point3D(0, 0, 0), (1, 0, 0)) \n```", "```py\nprojection(pt)\n```", "```py\n>>> from sympy import Plane, Point3D\n>>> A = Plane(Point3D(1, 1, 2), normal_vector=(1, 1, 1)) \n```", "```py\n>>> b = Point3D(1, 1)\n>>> A.projection(b)\nPoint3D(5/3, 5/3, 2/3)\n>>> _ in A\nTrue \n```", "```py\n>>> XY = Plane((0, 0, 0), (0, 0, 1))\n>>> XY.projection((1, 1, 2))\nPoint3D(1, 1, 0) \n```", "```py\nprojection_line(line)\n```", "```py\n>>> from sympy import Plane, Line, Line3D, Point3D\n>>> a = Plane(Point3D(1, 1, 1), normal_vector=(1, 1, 1))\n>>> b = Line(Point3D(1, 1), Point3D(2, 2))\n>>> a.projection_line(b)\nLine3D(Point3D(4/3, 4/3, 1/3), Point3D(5/3, 5/3, -1/3))\n>>> c = Line3D(Point3D(1, 1, 1), Point3D(2, 2, 2))\n>>> a.projection_line(c)\nPoint3D(1, 1, 1) \n```", "```py\nrandom_point(seed=None)\n```", "```py\n>>> from sympy import Plane\n>>> p = Plane((1, 0, 0), normal_vector=(0, 1, 0))\n>>> r = p.random_point(seed=42)  # seed value is optional\n>>> r.n(3)\nPoint3D(2.29, 0, -1.35) \n```", "```py\n>>> c = p.p1 + (r - p.p1).unit\n>>> c.distance(p.p1).equals(1)\nTrue \n```"]