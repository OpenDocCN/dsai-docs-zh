- en: scipy.integrate.BDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.BDF.html#scipy.integrate.BDF](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.BDF.html#scipy.integrate.BDF)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Implicit method based on backward-differentiation formulas.
  prefs: []
  type: TYPE_NORMAL
- en: This is a variable order method with the order varying automatically from 1
    to 5\. The general framework of the BDF algorithm is described in [[1]](#ra064ca079e93-1).
    This class implements a quasi-constant step size as explained in [[2]](#ra064ca079e93-2).
    The error estimation strategy for the constant-step BDF is derived in [[3]](#ra064ca079e93-3).
    An accuracy enhancement using modified formulas (NDF) [[2]](#ra064ca079e93-2)
    is also implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Can be applied in the complex domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fun**callable'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. `fun` must return an array of the same shape
    as `y`. See *vectorized* for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t0**float'
  prefs: []
  type: TYPE_NORMAL
- en: Initial time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y0**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Initial state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  prefs: []
  type: TYPE_NORMAL
- en: '**first_step**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_step**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtol, atol**float and array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  prefs: []
  type: TYPE_NORMAL
- en: '**jac**{None, array_like, sparse_matrix, callable}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jacobian matrix of the right-hand side of the system with respect to y, required
    by this method. The Jacobian matrix has shape (n, n) and its element (i, j) is
    equal to `d f_i / d y_j`. There are three ways to define the Jacobian:'
  prefs: []
  type: TYPE_NORMAL
- en: If array_like or sparse_matrix, the Jacobian is assumed to be constant.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If callable, the Jacobian is assumed to depend on both t and y; it will be called
    as `jac(t, y)` as necessary. For the ‘Radau’ and ‘BDF’ methods, the return value
    might be a sparse matrix.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If None (default), the Jacobian will be approximated by finite differences.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: It is generally recommended to provide the Jacobian rather than relying on a
    finite-difference approximation.
  prefs: []
  type: TYPE_NORMAL
- en: '**jac_sparsity**{None, array_like, sparse matrix}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a sparsity structure of the Jacobian matrix for a finite-difference
    approximation. Its shape must be (n, n). This argument is ignored if *jac* is
    not *None*. If the Jacobian has only few non-zero elements in *each* row, providing
    the sparsity structure will greatly speed up the computations [[4]](#ra064ca079e93-4).
    A zero entry means that a corresponding element in the Jacobian is always zero.
    If None (default), the Jacobian is assumed to be dense.
  prefs: []
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether *fun* can be called in a vectorized fashion. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  prefs: []
  type: TYPE_NORMAL
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  prefs: []
  type: TYPE_NORMAL
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by this method, but may result in slower execution overall in
    some circumstances (e.g. small `len(y0)`).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: G. D. Byrne, A. C. Hindmarsh, “A Polyalgorithm for the Numerical Solution of
    Ordinary Differential Equations”, ACM Transactions on Mathematical Software, Vol.
    1, No. 1, pp. 71-96, March 1975.
  prefs: []
  type: TYPE_NORMAL
- en: '[2] ([1](#id2),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: L. F. Shampine, M. W. Reichelt, “THE MATLAB ODE SUITE”, SIAM J. SCI. COMPUTE.,
    Vol. 18, No. 1, pp. 1-22, January 1997.
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'E. Hairer, G. Wanner, “Solving Ordinary Differential Equations I: Nonstiff
    Problems”, Sec. III.2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: A. Curtis, M. J. D. Powell, and J. Reid, “On the estimation of sparse Jacobian
    matrices”, Journal of the Institute of Mathematics and its Applications, 13, pp.
    117-120, 1974.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of equations.
  prefs: []
  type: TYPE_NORMAL
- en: '**status**string'
  prefs: []
  type: TYPE_NORMAL
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time.
  prefs: []
  type: TYPE_NORMAL
- en: '**direction**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'Integration direction: +1 or -1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**float'
  prefs: []
  type: TYPE_NORMAL
- en: Current time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_old**float'
  prefs: []
  type: TYPE_NORMAL
- en: Previous time. None if no steps were made yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size**float'
  prefs: []
  type: TYPE_NORMAL
- en: Size of the last successful step. None if no steps were made yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**njev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the Jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: '**nlu**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of LU decompositions.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dense_output`](scipy.integrate.BDF.dense_output.html#scipy.integrate.BDF.dense_output
    "scipy.integrate.BDF.dense_output")() | Compute a local interpolant over the last
    successful step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`step`](scipy.integrate.BDF.step.html#scipy.integrate.BDF.step "scipy.integrate.BDF.step")()
    | Perform one integration step. |'
  prefs: []
  type: TYPE_TB
