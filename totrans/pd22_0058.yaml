- en: pandas.read_fwf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_fwf.html](https://pandas.pydata.org/docs/reference/api/pandas.read_fwf.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read a table of fixed-width formatted lines into DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Also supports optionally iterating or breaking of the file into chunks.
  prefs: []
  type: TYPE_NORMAL
- en: Additional help can be found in the [online docs for IO Tools](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filepath_or_buffer**str, path object, or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: 'String, path object (implementing `os.PathLike[str]`), or file-like object
    implementing a text `read()` function.The string could be a URL. Valid URL schemes
    include http, ftp, s3, and file. For file URLs, a host is expected. A local file
    could be: `file://localhost/path/to/table.csv`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**colspecs**list of tuple (int, int) or ‘infer’. optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of tuples giving the extents of the fixed-width fields of each line as
    half-open intervals (i.e., [from, to[ ). String value ‘infer’ can be used to instruct
    the parser to try detecting the column specifications from the first 100 rows
    of the data which are not being skipped via skiprows (default=’infer’).
  prefs: []
  type: TYPE_NORMAL
- en: '**widths**list of int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list of field widths which can be used instead of ‘colspecs’ if the intervals
    are contiguous.
  prefs: []
  type: TYPE_NORMAL
- en: '**infer_nrows**int, default 100'
  prefs: []
  type: TYPE_NORMAL
- en: The number of rows to consider when letting the parser determine the colspecs.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwds**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Optional keyword arguments can be passed to `TextFileReader`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame or TextFileReader
  prefs: []
  type: TYPE_NORMAL
- en: A comma-separated values (csv) file is returned as two-dimensional data structure
    with labeled axes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_csv`](pandas.DataFrame.to_csv.html#pandas.DataFrame.to_csv "pandas.DataFrame.to_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: Write DataFrame to a comma-separated values (csv) file.
  prefs: []
  type: TYPE_NORMAL
- en: '[`read_csv`](pandas.read_csv.html#pandas.read_csv "pandas.read_csv")'
  prefs: []
  type: TYPE_NORMAL
- en: Read a comma-separated values (csv) file into DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
