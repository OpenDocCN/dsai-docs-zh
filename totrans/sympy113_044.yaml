- en: Classification of SymPy objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SymPy对象的分类
- en: 原文：[https://docs.sympy.org/latest/explanation/special_topics/classification.html](https://docs.sympy.org/latest/explanation/special_topics/classification.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/explanation/special_topics/classification.html](https://docs.sympy.org/latest/explanation/special_topics/classification.html)
- en: There are several ways of how SymPy object is classified.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy对象分类的几种方法。
- en: class
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: Like any other object in Python, SymPy expression is an instance of class. You
    can get the class of the object with built-in \(type()\) function, and check it
    with \(isinstance()\) function.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Python中的任何其他对象一样，SymPy表达式是一个类的实例。您可以使用内置的`type()`函数获取对象的类，并使用`isinstance()`函数进行检查。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Classes represent only the programmatic structures of the objects, and does
    not distinguish the mathematical difference between them. For example, the integral
    of number and the integral of matrix both have the class \(Integral\), although
    the former is number and the latter is matrix.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 类仅代表对象的程序结构，并且不能区分它们之间的数学差异。例如，数字的积分和矩阵的积分都具有`Integral`类，尽管前者是数字，后者是矩阵。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '## kind'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## 种类'
- en: Kind indicates what mathematical object does the expression represent. You can
    retrieve the kind of expression with \(.kind\) property.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 种类指示表达式表示什么数学对象。您可以使用`.kind`属性检索表达式的种类。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This result shows that \(Integral(1, x)\) is number, and \(Integral(A, x)\)
    is matrix with number element.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果表明`Integral(1, x)`是一个数字，而`Integral(A, x)`是一个带有数字元素的矩阵。
- en: Since the class cannot guarantee to catch this difference, kind of the object
    is very important. For example, if you are building a function or class that is
    designed to work only for numbers, you should consider filtering the arguments
    with \(NumberKind\) so that the user does not naively pass unsupported objects
    such as \(Integral(A, x)\).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于类不能保证捕获这种差异，对象的种类非常重要。例如，如果您正在构建一个仅设计用于数字工作的函数或类，则应考虑使用`NumberKind`过滤参数，以便用户不会轻易传递不受支持的对象，例如`Integral(A,
    x)`。
- en: For the performance, set theory is not implemented in kind system. For example,
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能考虑，种类系统中未实现集合论。例如，
- en: \(NumberKind\) does not distinguish the real number and complex number.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`NumberKind`不能区分实数和复数。'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: SymPy’s \(Set\) and kind are not compatible.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SymPy的`Set`和种类是不兼容的。
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: sets and assumptions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合和假设
- en: If you want to classify the object in strictly mathematical way, you may need
    SymPy’s sets and assumptions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想以严格的数学方式对对象进行分类，您可能需要使用SymPy的集合和假设。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See \(assumptions\) module and \(sets\) module for more information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参见`assumptions`模块和`sets`模块。
- en: func
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: \(func\) is the head of the object, and it is used to recurse over the expression
    tree.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`func`是对象的头，并且用于递归遍历表达式树。'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, resulting head may be a class or another SymPy object. Keep
    this in mind when you classify the object with this attribute. See [Advanced Expression
    Manipulation](../../tutorials/intro-tutorial/manipulation.html#tutorial-manipulation)
    for detailed information.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，生成的头可能是一个类，也可能是另一个SymPy对象。在使用此属性对对象进行分类时，请牢记这一点。详细信息请参见[高级表达式操作](../../tutorials/intro-tutorial/manipulation.html#tutorial-manipulation)。
