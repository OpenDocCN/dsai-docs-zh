["```py\nscipy.signal.peak_prominences(x, peaks, wlen=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy.signal import find_peaks, peak_prominences\n>>> import matplotlib.pyplot as plt \n```", "```py\n>>> x = np.linspace(0, 6 * np.pi, 1000)\n>>> x = np.sin(x) + 0.6 * np.sin(2.6 * x) \n```", "```py\n>>> peaks, _ = find_peaks(x)\n>>> prominences = peak_prominences(x, peaks)[0]\n>>> prominences\narray([1.24159486, 0.47840168, 0.28470524, 3.10716793, 0.284603  ,\n 0.47822491, 2.48340261, 0.47822491]) \n```", "```py\n>>> contour_heights = x[peaks] - prominences\n>>> plt.plot(x)\n>>> plt.plot(peaks, x[peaks], \"x\")\n>>> plt.vlines(x=peaks, ymin=contour_heights, ymax=x[peaks])\n>>> plt.show() \n```", "```py\n>>> x = np.array([0, 1, 0, 3, 1, 3, 0, 4, 0])\n>>> peaks = np.array([5])\n>>> plt.plot(x)\n>>> plt.plot(peaks, x[peaks], \"x\")\n>>> plt.show() \n```", "```py\n>>> peak_prominences(x, peaks)  # -> (prominences, left_bases, right_bases)\n(array([3.]), array([2]), array([6])) \n```", "```py\n>>> peak_prominences(x, peaks, wlen=3.1)\n(array([2.]), array([4]), array([6])) \n```"]