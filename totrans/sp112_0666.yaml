- en: scipy.signal.stft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.stft.html#scipy.signal.stft](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.stft.html#scipy.signal.stft)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the Short Time Fourier Transform (STFT).
  prefs: []
  type: TYPE_NORMAL
- en: STFTs can be used as a way of quantifying the change of a nonstationary signal’s
    frequency and phase content over time.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy
  prefs: []
  type: TYPE_NORMAL
- en: This function is considered legacy and will no longer receive updates. This
    could also mean it will be removed in future SciPy versions. [`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT
    "scipy.signal.ShortTimeFFT") is a newer STFT / ISTFT implementation with more
    features. A [comparison](../../tutorial/signal.html#tutorial-stft-legacy-stft)
    between the implementations can be found in the [Short-Time Fourier Transform](../../tutorial/signal.html#tutorial-stft)
    section of the [SciPy User Guide](../../tutorial/index.html#user-guide).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of the *x* time series. Defaults to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
    Defaults to a Hann window.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment. Defaults to 256.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments. If *None*, `noverlap = nperseg
    // 2`. Defaults to *None*. When specified, the COLA constraint must be met (see
    Notes below).
  prefs: []
  type: TYPE_NORMAL
- en: '**nfft**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used, if a zero padded FFT is desired. If *None*, the FFT
    length is *nperseg*. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**detrend**str or function or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies how to detrend each segment. If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend
    "scipy.signal.detrend") is a string, it is passed as the *type* argument to the
    [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    function. If it is a function, it takes a segment and returns a detrended segment.
    If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    is *False*, no detrending is done. Defaults to *False*.
  prefs: []
  type: TYPE_NORMAL
- en: '**return_onesided**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *True*, return a one-sided spectrum for real data. If *False* return a two-sided
    spectrum. Defaults to *True*, but for complex data, a two-sided spectrum is always
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**boundary**str or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies whether the input signal is extended at both ends, and how to generate
    the new values, in order to center the first windowed segment on the first input
    point. This has the benefit of enabling reconstruction of the first input point
    when the employed window function starts at zero. Valid options are `['even',
    'odd', 'constant', 'zeros', None]`. Defaults to ‘zeros’, for zero padding extension.
    I.e. `[1, 2, 3, 4]` is extended to `[0, 1, 2, 3, 4, 0]` for `nperseg=3`.
  prefs: []
  type: TYPE_NORMAL
- en: '**padded**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies whether the input signal is zero-padded at the end to make the signal
    fit exactly into an integer number of window segments, so that all of the signal
    is included in the output. Defaults to *True*. Padding occurs after boundary extension,
    if *boundary* is not *None*, and *padded* is *True*, as is the default.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the STFT is computed; the default is over the last axis (i.e.
    `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: '**scaling: {‘spectrum’, ‘psd’}**'
  prefs: []
  type: TYPE_NORMAL
- en: The default ‘spectrum’ scaling allows each frequency line of *Zxx* to be interpreted
    as a magnitude spectrum. The ‘psd’ option scales each line to a power spectral
    density - it allows to calculate the signal’s energy by numerically integrating
    over `abs(Zxx)**2`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.9.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of sample frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**t**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of segment times.
  prefs: []
  type: TYPE_NORMAL
- en: '**Zxx**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: STFT of *x*. By default, the last axis of *Zxx* corresponds to the segment times.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`istft`](scipy.signal.istft.html#scipy.signal.istft "scipy.signal.istft")'
  prefs: []
  type: TYPE_NORMAL
- en: Inverse Short Time Fourier Transform
  prefs: []
  type: TYPE_NORMAL
- en: '[`ShortTimeFFT`](scipy.signal.ShortTimeFFT.html#scipy.signal.ShortTimeFFT "scipy.signal.ShortTimeFFT")'
  prefs: []
  type: TYPE_NORMAL
- en: Newer STFT/ISTFT implementation providing more features.
  prefs: []
  type: TYPE_NORMAL
- en: '[`check_COLA`](scipy.signal.check_COLA.html#scipy.signal.check_COLA "scipy.signal.check_COLA")'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether the Constant OverLap Add (COLA) constraint is met
  prefs: []
  type: TYPE_NORMAL
- en: '[`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA")'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether the Nonzero Overlap Add (NOLA) constraint is met
  prefs: []
  type: TYPE_NORMAL
- en: '[`welch`](scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")'
  prefs: []
  type: TYPE_NORMAL
- en: Power spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`spectrogram`](scipy.signal.spectrogram.html#scipy.signal.spectrogram "scipy.signal.spectrogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Spectrogram by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`csd`](scipy.signal.csd.html#scipy.signal.csd "scipy.signal.csd")'
  prefs: []
  type: TYPE_NORMAL
- en: Cross spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`lombscargle`](scipy.signal.lombscargle.html#scipy.signal.lombscargle "scipy.signal.lombscargle")'
  prefs: []
  type: TYPE_NORMAL
- en: Lomb-Scargle periodogram for unevenly sampled data
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: In order to enable inversion of an STFT via the inverse STFT in [`istft`](scipy.signal.istft.html#scipy.signal.istft
    "scipy.signal.istft"), the signal windowing must obey the constraint of “Nonzero
    OverLap Add” (NOLA), and the input signal must have complete windowing coverage
    (i.e. `(x.shape[axis] - nperseg) % (nperseg-noverlap) == 0`). The *padded* argument
    may be used to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Given a time-domain signal \(x[n]\), a window \(w[n]\), and a hop size \(H\)
    = *nperseg - noverlap*, the windowed frame at time index \(t\) is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[x_{t}[n]=x[n]w[n-tH]\]
  prefs: []
  type: TYPE_NORMAL
- en: The overlap-add (OLA) reconstruction equation is given by
  prefs: []
  type: TYPE_NORMAL
- en: \[x[n]=\frac{\sum_{t}x_{t}[n]w[n-tH]}{\sum_{t}w^{2}[n-tH]}\]
  prefs: []
  type: TYPE_NORMAL
- en: The NOLA constraint ensures that every normalization term that appears in the
    denomimator of the OLA reconstruction equation is nonzero. Whether a choice of
    *window*, *nperseg*, and *noverlap* satisfy this constraint can be tested with
    [`check_NOLA`](scipy.signal.check_NOLA.html#scipy.signal.check_NOLA "scipy.signal.check_NOLA").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: Oppenheim, Alan V., Ronald W. Schafer, John R. Buck “Discrete-Time Signal Processing”,
    Prentice Hall, 1999.
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Daniel W. Griffin, Jae S. Lim “Signal Estimation from Modified Short-Time Fourier
    Transform”, IEEE 1984, 10.1109/TASSP.1984.1164317
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate a test signal, a 2 Vrms sine wave whose frequency is slowly modulated
    around 3kHz, corrupted by white noise of exponentially decreasing magnitude sampled
    at 10 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute and plot the STFT’s magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-stft-1_00_00.png](../Images/acfbfed5b0da1025e713f6fec512ba1e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Compare the energy of the signal *x* with the energy of its STFT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
