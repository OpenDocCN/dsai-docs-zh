- en: Test Support (numpy.testing)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.testing.html](https://numpy.org/doc/1.26/reference/routines.testing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Common test support for all numpy test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: This single module should provide all the common functionality for numpy tests
    in a single location, so that [test scripts](../dev/development_environment.html#development-environment)
    can just import it and work right away. For background, see the [Testing Guidelines](testing.html#testing-guidelines)
  prefs: []
  type: TYPE_NORMAL
- en: Asserts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | Raises an AssertionError
    if two objects are not equal up to desired tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | Compare two arrays
    relatively to their spacing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | Check that all
    items of arrays differ in at most N Units in the Last Place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | Raises an
    AssertionError if two array_like objects are not equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | Raises an AssertionError
    if two array_like objects are not ordered by less than. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | Raises an
    AssertionError if two objects are not equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | Fail unless an exception of class
    exception_class is thrown by callable when invoked with arguments args and keyword
    arguments kwargs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | Fail unless an exception
    of class exception_class and with message that matches expected_regexp is thrown
    by callable when invoked with arguments args and keyword arguments kwargs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | Fail unless the
    given callable throws the specified warning. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | Fail if the given callable
    produces any warnings. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | Fail if the given callable
    produces any reference cycles. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | Test if two strings are
    equal. |'
  prefs: []
  type: TYPE_TB
- en: Asserts (not recommended)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended to use one of [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of these functions for more consistent
    floating point comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | Assert that works in release mode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to desired precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to significant digits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | Raises an AssertionError
    if two objects are not equal up to desired precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | Test if two
    objects are equal, and print an error message if test fails. |'
  prefs: []
  type: TYPE_TB
- en: Decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | Apply a decorator
    to all methods in a class matching a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: Test Running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | Context manager
    that resets warning registry for catching warnings |'
  prefs: []
  type: TYPE_TB
- en: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | Return elapsed time for executing code in the namespace of the caller. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | Run doctests found in the given file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | Context manager and decorator
    doing much the same as `warnings.catch_warnings`. |'
  prefs: []
  type: TYPE_TB
- en: Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Testing Guidelines](testing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](testing.html#introduction)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing NumPy](testing.html#testing-numpy)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests from inside Python](testing.html#running-tests-from-inside-python)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests from the command line](testing.html#running-tests-from-the-command-line)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other methods of running tests](testing.html#other-methods-of-running-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing your own tests](testing.html#writing-your-own-tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using C code in tests](testing.html#using-c-code-in-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Labeling tests](testing.html#labeling-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easier setup and teardown functions / methods](testing.html#easier-setup-and-teardown-functions-methods)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parametric tests](testing.html#parametric-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Doctests](testing.html#doctests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tests/`](testing.html#tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`__init__.py` and `setup.py`](testing.html#init-py-and-setup-py)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips & Tricks](testing.html#tips-tricks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating many similar tests](testing.html#creating-many-similar-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Known failures & skipping tests](testing.html#known-failures-skipping-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tests on random data](testing.html#tests-on-random-data)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation for `numpy.test`](testing.html#documentation-for-numpy-test)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`test`](testing.html#numpy.test)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Asserts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")(actual, desired[, rtol, ...]) | Raises an AssertionError
    if two objects are not equal up to desired tolerance. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp")(x, y[, nulp]) | Compare two arrays
    relatively to their spacing. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp")(a, b[, maxulp, dtype]) | Check that all
    items of arrays differ in at most N Units in the Last Place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_equal`](generated/numpy.testing.assert_array_equal.html#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal")(x, y[, err_msg, verbose, ...]) | Raises an
    AssertionError if two array_like objects are not equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_less`](generated/numpy.testing.assert_array_less.html#numpy.testing.assert_array_less
    "numpy.testing.assert_array_less")(x, y[, err_msg, verbose]) | Raises an AssertionError
    if two array_like objects are not ordered by less than. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_equal`](generated/numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")(actual, desired[, err_msg, verbose]) | Raises an
    AssertionError if two objects are not equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")(assert_raises) | Fail unless an exception of class
    exception_class is thrown by callable when invoked with arguments args and keyword
    arguments kwargs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_raises_regex`](generated/numpy.testing.assert_raises_regex.html#numpy.testing.assert_raises_regex
    "numpy.testing.assert_raises_regex")(exception_class, ...) | Fail unless an exception
    of class exception_class and with message that matches expected_regexp is thrown
    by callable when invoked with arguments args and keyword arguments kwargs. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")(warning_class, *args, **kwargs) | Fail unless the
    given callable throws the specified warning. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_no_warnings`](generated/numpy.testing.assert_no_warnings.html#numpy.testing.assert_no_warnings
    "numpy.testing.assert_no_warnings")(*args, **kwargs) | Fail if the given callable
    produces any warnings. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_no_gc_cycles`](generated/numpy.testing.assert_no_gc_cycles.html#numpy.testing.assert_no_gc_cycles
    "numpy.testing.assert_no_gc_cycles")(*args, **kwargs) | Fail if the given callable
    produces any reference cycles. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_string_equal`](generated/numpy.testing.assert_string_equal.html#numpy.testing.assert_string_equal
    "numpy.testing.assert_string_equal")(actual, desired) | Test if two strings are
    equal. |'
  prefs: []
  type: TYPE_TB
- en: Asserts (not recommended)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended to use one of [`assert_allclose`](generated/numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose"), [`assert_array_almost_equal_nulp`](generated/numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp") or [`assert_array_max_ulp`](generated/numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp") instead of these functions for more consistent
    floating point comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: '| [`assert_`](generated/numpy.testing.assert_.html#numpy.testing.assert_ "numpy.testing.assert_")(val[, msg])
    | Assert that works in release mode. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_almost_equal`](generated/numpy.testing.assert_almost_equal.html#numpy.testing.assert_almost_equal
    "numpy.testing.assert_almost_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to desired precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_approx_equal`](generated/numpy.testing.assert_approx_equal.html#numpy.testing.assert_approx_equal
    "numpy.testing.assert_approx_equal")(actual, desired[, ...]) | Raises an AssertionError
    if two items are not equal up to significant digits. |'
  prefs: []
  type: TYPE_TB
- en: '| [`assert_array_almost_equal`](generated/numpy.testing.assert_array_almost_equal.html#numpy.testing.assert_array_almost_equal
    "numpy.testing.assert_array_almost_equal")(x, y[, decimal, ...]) | Raises an AssertionError
    if two objects are not equal up to desired precision. |'
  prefs: []
  type: TYPE_TB
- en: '| [`print_assert_equal`](generated/numpy.testing.print_assert_equal.html#numpy.testing.print_assert_equal
    "numpy.testing.print_assert_equal")(test_string, actual, desired) | Test if two
    objects are equal, and print an error message if test fails. |'
  prefs: []
  type: TYPE_TB
- en: Decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`decorate_methods`](generated/numpy.testing.decorate_methods.html#numpy.testing.decorate_methods
    "numpy.testing.decorate_methods")(cls, decorator[, testmatch]) | Apply a decorator
    to all methods in a class matching a regular expression. |'
  prefs: []
  type: TYPE_TB
- en: Test Running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`clear_and_catch_warnings`](generated/numpy.testing.clear_and_catch_warnings.html#numpy.testing.clear_and_catch_warnings
    "numpy.testing.clear_and_catch_warnings")([record, modules]) | Context manager
    that resets warning registry for catching warnings |'
  prefs: []
  type: TYPE_TB
- en: '| [`measure`](generated/numpy.testing.measure.html#numpy.testing.measure "numpy.testing.measure")(code_str[, times, label])
    | Return elapsed time for executing code in the namespace of the caller. |'
  prefs: []
  type: TYPE_TB
- en: '| [`rundocs`](generated/numpy.testing.rundocs.html#numpy.testing.rundocs "numpy.testing.rundocs")([filename, raise_on_error])
    | Run doctests found in the given file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`suppress_warnings`](generated/numpy.testing.suppress_warnings.html#numpy.testing.suppress_warnings
    "numpy.testing.suppress_warnings")([forwarding_rule]) | Context manager and decorator
    doing much the same as `warnings.catch_warnings`. |'
  prefs: []
  type: TYPE_TB
- en: Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Testing Guidelines](testing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction](testing.html#introduction)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing NumPy](testing.html#testing-numpy)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests from inside Python](testing.html#running-tests-from-inside-python)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running tests from the command line](testing.html#running-tests-from-the-command-line)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Other methods of running tests](testing.html#other-methods-of-running-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Writing your own tests](testing.html#writing-your-own-tests)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using C code in tests](testing.html#using-c-code-in-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`build_and_import_extension`](testing.html#numpy.testing.extbuild.build_and_import_extension)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Labeling tests](testing.html#labeling-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easier setup and teardown functions / methods](testing.html#easier-setup-and-teardown-functions-methods)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parametric tests](testing.html#parametric-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Doctests](testing.html#doctests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`tests/`](testing.html#tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`__init__.py` and `setup.py`](testing.html#init-py-and-setup-py)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips & Tricks](testing.html#tips-tricks)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating many similar tests](testing.html#creating-many-similar-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Known failures & skipping tests](testing.html#known-failures-skipping-tests)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tests on random data](testing.html#tests-on-random-data)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation for `numpy.test`](testing.html#documentation-for-numpy-test)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`test`](testing.html#numpy.test)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
