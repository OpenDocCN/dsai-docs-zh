- en: numpy.left_shift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.left_shift.html](https://numpy.org/doc/1.26/reference/generated/numpy.left_shift.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Shift the bits of an integer to the left.
  prefs: []
  type: TYPE_NORMAL
- en: Bits are shifted to the left by appending *x2* 0s at the right of *x1*. Since
    the internal representation of numbers is in binary format, this operation is
    equivalent to multiplying *x1* by `2**x2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like of integer type'
  prefs: []
  type: TYPE_NORMAL
- en: Input values.
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like of integer type'
  prefs: []
  type: TYPE_NORMAL
- en: Number of zeros to append to *x1*. Has to be non-negative. If `x1.shape != x2.shape`,
    they must be broadcastable to a common shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**array of integer type'
  prefs: []
  type: TYPE_NORMAL
- en: Return *x1* with bits shifted *x2* times to the left. This is a scalar if both
    *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`right_shift`](numpy.right_shift.html#numpy.right_shift "numpy.right_shift")'
  prefs: []
  type: TYPE_NORMAL
- en: Shift the bits of an integer to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '[`binary_repr`](numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the binary representation of the input number as a string.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the dtype of the second argument may change the dtype of the result
    and can lead to unexpected results in some cases (see [Casting Rules](../../user/basics.ufuncs.html#ufuncs-casting)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `<<` operator can be used as a shorthand for `np.left_shift` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
