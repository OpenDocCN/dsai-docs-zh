["```py\n>>> from sympy import atan, symbols, Matrix\n>>> from sympy.physics.mechanics import (dynamicsymbols, ReferenceFrame,\n...                                      Particle, Point)\n>>> import sympy.physics.mechanics.system as system\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False) \n```", "```py\n>>> x, y, u, v, lam = dynamicsymbols('x y u v lambda')\n>>> m, l, g = symbols('m l g') \n```", "```py\n>>> dyn_implicit_mat = Matrix([[1, 0, -x/m],\n...                            [0, 1, -y/m],\n...                            [0, 0, l**2/m]])\n>>> dyn_implicit_rhs = Matrix([0, 0, u**2 + v**2 - g*y])\n>>> comb_implicit_mat = Matrix([[1, 0, 0, 0, 0],\n...                             [0, 1, 0, 0, 0],\n...                             [0, 0, 1, 0, -x/m],\n...                             [0, 0, 0, 1, -y/m],\n...                             [0, 0, 0, 0, l**2/m]])\n>>> comb_implicit_rhs = Matrix([u, v, 0, 0, u**2 + v**2 - g*y])\n>>> kin_explicit_rhs = Matrix([u, v])\n>>> comb_explicit_rhs = comb_implicit_mat.LUsolve(comb_implicit_rhs) \n```", "```py\n>>> theta = atan(x/y)\n>>> omega = dynamicsymbols('omega')\n>>> N = ReferenceFrame('N')\n>>> A = N.orientnew('A', 'Axis', [theta, N.z])\n>>> A.set_ang_vel(N, omega * N.z)\n>>> O = Point('O')\n>>> O.set_vel(N, 0)\n>>> P = O.locatenew('P', l * A.x)\n>>> P.v2pt_theory(O, N, A)\nl*omega*A.y\n>>> Pa = Particle('Pa', P, m) \n```", "```py\n>>> bodies = [Pa]\n>>> loads = [(P, g * m * N.x)] \n```", "```py\n>>> alg_con = [2]\n>>> alg_con_full = [4] \n```", "```py\n>>> states = (x, y, u, v, lam)\n>>> coord_idxs = (0, 1)\n>>> speed_idxs = (2, 3) \n```", "```py\n>>> symsystem1 = system.SymbolicSystem(states, comb_explicit_rhs,\n...                                    alg_con=alg_con_full, bodies=bodies,\n...                                    loads=loads)\n>>> symsystem2 = system.SymbolicSystem(states, comb_implicit_rhs,\n...                                    mass_matrix=comb_implicit_mat,\n...                                    alg_con=alg_con_full,\n...                                    coord_idxs=coord_idxs)\n>>> symsystem3 = system.SymbolicSystem(states, dyn_implicit_rhs,\n...                                    mass_matrix=dyn_implicit_mat,\n...                                    coordinate_derivatives=kin_explicit_rhs,\n...                                    alg_con=alg_con,\n...                                    coord_idxs=coord_idxs,\n...                                    speed_idxs=speed_idxs) \n```", "```py\n>>> symsystem1.states\nMatrix([\n[     x],\n[     y],\n[     u],\n[     v],\n[lambda]])\n>>> symsystem2.coordinates\nMatrix([\n[x],\n[y]])\n>>> symsystem3.speeds\nMatrix([\n[u],\n[v]])\n>>> symsystem1.comb_explicit_rhs\nMatrix([\n[                          u],\n[                          v],\n[(-g*y + u**2 + v**2)*x/l**2],\n[(-g*y + u**2 + v**2)*y/l**2],\n[m*(-g*y + u**2 + v**2)/l**2]])\n>>> symsystem2.comb_implicit_rhs\nMatrix([\n[                 u],\n[                 v],\n[                 0],\n[                 0],\n[-g*y + u**2 + v**2]])\n>>> symsystem2.comb_implicit_mat\nMatrix([\n[1, 0, 0, 0,      0],\n[0, 1, 0, 0,      0],\n[0, 0, 1, 0,   -x/m],\n[0, 0, 0, 1,   -y/m],\n[0, 0, 0, 0, l**2/m]])\n>>> symsystem3.dyn_implicit_rhs\nMatrix([\n[                 0],\n[                 0],\n[-g*y + u**2 + v**2]])\n>>> symsystem3.dyn_implicit_mat\nMatrix([\n[1, 0,   -x/m],\n[0, 1,   -y/m],\n[0, 0, l**2/m]])\n>>> symsystem3.kin_explicit_rhs\nMatrix([\n[u],\n[v]])\n>>> symsystem1.alg_con\n[4]\n>>> symsystem1.bodies\n(Pa,)\n>>> symsystem1.loads\n((P, g*m*N.x),) \n```"]