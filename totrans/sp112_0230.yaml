- en: scipy.io.arff.loadarff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.io.arff.loadarff.html#scipy.io.arff.loadarff](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.io.arff.loadarff.html#scipy.io.arff.loadarff)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read an arff file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data is returned as a record array, which can be accessed much like a dictionary
    of NumPy arrays. For example, if one of the attributes is called ‘pressure’, then
    its first 10 data points can be accessed from the `data` record array like so:
    `data[''pressure''][0:10]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**file-like or str'
  prefs: []
  type: TYPE_NORMAL
- en: File-like object to read from, or filename to open.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**record array'
  prefs: []
  type: TYPE_NORMAL
- en: The data of the arff file, accessible by attribute names.
  prefs: []
  type: TYPE_NORMAL
- en: '**meta**[`MetaData`](scipy.io.arff.MetaData.html#scipy.io.arff.MetaData "scipy.io.arff.MetaData")'
  prefs: []
  type: TYPE_NORMAL
- en: Contains information about the arff file such as name and type of attributes,
    the relation (name of the dataset), etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: ParseArffError
  prefs: []
  type: TYPE_NORMAL
- en: This is raised if the given file is not ARFF-formatted.
  prefs: []
  type: TYPE_NORMAL
- en: NotImplementedError
  prefs: []
  type: TYPE_NORMAL
- en: The ARFF file has an attribute which is not supported yet.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This function should be able to read most arff files. Not implemented functionality
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: date type attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string type attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can read files with numeric and nominal attributes. It cannot read files
    with sparse data ({} in the file). However, this function can read files with
    missing data (? in the file), representing the data points as NaNs.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
