["```py\n>>> from sympy.physics.vector import ReferenceFrame, vprint, vpprint, vlatex\n>>> N = ReferenceFrame('N', indices=['i', 'j', 'k'])\n>>> N['i']\nN['i']\n>>> N.x\nN['i']\n>>> vlatex(N.x)\n'\\\\mathbf{\\\\hat{n}_{i}}' \n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, vlatex\n>>> N = ReferenceFrame('N', latexs=['n1','\\\\mathbf{n}_2','cat'])\n>>> vlatex(N.x)\n'n1'\n>>> vlatex(N.y)\n'\\\\mathbf{n}_2'\n>>> vlatex(N.z)\n'cat' \n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.vector import dynamicsymbols, vprint\n>>> q1 = dynamicsymbols('q1')\n>>> q1\nq1(t)\n>>> dynamicsymbols._t = symbols('T')\n>>> q2 = dynamicsymbols('q2')\n>>> q2\nq2(T)\n>>> q1\nq1(t)\n>>> q1d = dynamicsymbols('q1', 1)\n>>> vprint(q1d)\nq1'\n>>> dynamicsymbols._str = 'd'\n>>> vprint(q1d)\nq1d\n>>> dynamicsymbols._str = '\\''\n>>> dynamicsymbols._t = symbols('t') \n```", "```py\n>>> from sympy import pi, symbols, solve\n>>> from sympy.physics.vector import ReferenceFrame\n>>> N = ReferenceFrame(\"N\")\n>>> A = ReferenceFrame(\"A\")\n>>> A.orient_axis(N, pi / 6, N.z) \n```", "```py\n>>> v1x, v1y, v1z = symbols(\"v1x v1y v1z\")\n>>> v2x, v2y, v2z = symbols(\"v2x v2y v2z\")\n>>> v1 = v1x * N.x + v1y * N.y + v1z * N.z\n>>> v2 = v2x * A.x + v2y * A.y + v2z * A.z \n```", "```py\n>>> solve((v1 - v2).to_matrix(N), [v2x, v2y, v2z])\n{v2x: sqrt(3)*v1x/2 + v1y/2, v2y: -v1x/2 + sqrt(3)*v1y/2, v2z: v1z} \n```"]