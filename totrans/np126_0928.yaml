- en: numpy.lib.mixins.NDArrayOperatorsMixin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.mixins.NDArrayOperatorsMixin.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Mixin defining all operator special methods using __array_ufunc__.
  prefs: []
  type: TYPE_NORMAL
- en: This class implements the special methods for almost all of Python’s builtin
    operators defined in the [`operator`](https://docs.python.org/3/library/operator.html#module-operator
    "(in Python v3.11)") module, including comparisons (`==`, `>`, etc.) and arithmetic
    (`+`, `*`, `-`, etc.), by deferring to the `__array_ufunc__` method, which subclasses
    must implement.
  prefs: []
  type: TYPE_NORMAL
- en: It is useful for writing classes that do not inherit from [`numpy.ndarray`](numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray"), but that should support arithmetic and numpy universal functions
    like arrays as described in [A Mechanism for Overriding Ufuncs](https://numpy.org/neps/nep-0013-ufunc-overrides.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an trivial example, consider this implementation of an `ArrayLike` class
    that simply wraps a NumPy array and ensures that the result of any arithmetic
    operation is also an `ArrayLike` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In interactions between `ArrayLike` objects and numbers or numpy arrays, the
    result is always another `ArrayLike`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that unlike `numpy.ndarray`, `ArrayLike` does not allow operations with
    arbitrary, unrecognized types. This ensures that interactions with ArrayLike preserve
    a well-defined casting hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.13.
  prefs: []
  type: TYPE_NORMAL
