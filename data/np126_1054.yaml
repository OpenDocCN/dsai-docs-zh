- en: Typing (numpy.typing)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型（numpy.typing）
- en: 原文：[https://numpy.org/doc/1.26/reference/typing.html](https://numpy.org/doc/1.26/reference/typing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/typing.html](https://numpy.org/doc/1.26/reference/typing.html)
- en: New in version 1.20.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 1.20 版本中的新功能。
- en: 'Large parts of the NumPy API have [**PEP 484**](https://peps.python.org/pep-0484/)-style
    type annotations. In addition a number of type aliases are available to users,
    most prominently the two below:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy API 的大部分内容采用了[**PEP 484**](https://peps.python.org/pep-0484/)风格的类型注解。此外，用户还可以使用一些类型别名，其中两个最重要的如下：
- en: '[`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike"): objects that
    can be converted to arrays'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike")：可以转换为数组的对象'
- en: '[`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike"): objects that
    can be converted to dtypes'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike")：可以转换为数据类型的对象'
- en: Mypy plugin
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mypy 插件
- en: New in version 1.21.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1.21 版本中的新功能。
- en: 'A [mypy](http://mypy-lang.org/) plugin for managing a number of platform-specific
    annotations. Its functionality can be split into three distinct parts:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[mypy](http://mypy-lang.org/)插件，用于管理一系列特定于平台的注解。它的功能可以分为三个不同的部分：
- en: Assigning the (platform-dependent) precisions of certain [`number`](arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](arrays.scalars.html#numpy.intp "numpy.intp") and [`longlong`](arrays.scalars.html#numpy.longlong
    "numpy.longlong"). See the documentation on [scalar types](arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes. Without the plugin the precision
    of all relevant classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配某些[`number`](arrays.scalars.html#numpy.number "numpy.number")子类的（依赖于平台）精度，包括[`int_`](arrays.scalars.html#numpy.int_
    "numpy.int_")、[`intp`](arrays.scalars.html#numpy.intp "numpy.intp")和[`longlong`](arrays.scalars.html#numpy.longlong
    "numpy.longlong")等。查看[标量类型](arrays.scalars.html#arrays-scalars-built-in)的文档，了解受影响类的全面概述。如果没有插件，所有相关类的精度将被推断为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.11 中)")。
- en: Removing all extended-precision [`number`](arrays.scalars.html#numpy.number
    "numpy.number") subclasses that are unavailable for the platform in question.
    Most notably this includes the likes of [`float128`](arrays.scalars.html#numpy.float128
    "numpy.float128") and [`complex256`](arrays.scalars.html#numpy.complex256 "numpy.complex256").
    Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available to all platforms.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除在特定平台上不可用的所有扩展精度[`number`](arrays.scalars.html#numpy.number "numpy.number")子类。其中最显著的包括[`float128`](arrays.scalars.html#numpy.float128
    "numpy.float128")和[`complex256`](arrays.scalars.html#numpy.complex256 "numpy.complex256")等。如果没有插件，则在
    mypy 的视角下，*所有*扩展精度类型都将对所有平台可用。
- en: Assigning the (platform-dependent) precision of [`c_intp`](routines.ctypeslib.html#numpy.ctypeslib.c_intp
    "numpy.ctypeslib.c_intp"). Without the plugin the type will default to [`ctypes.c_int64`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int64
    "(in Python v3.11)").
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配[`c_intp`](routines.ctypeslib.html#numpy.ctypeslib.c_intp "numpy.ctypeslib.c_intp")的（依赖于平台）精度。如果没有插件，类型将默认为[`ctypes.c_int64`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int64
    "(在 Python v3.11 中)")。
- en: New in version 1.22.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.22 版本中的新功能。
- en: Examples
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用插件，必须将其添加到自己的 mypy [配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Differences from the runtime NumPy API
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与运行时 NumPy API 的差异
- en: NumPy is very flexible. Trying to describe the full range of possibilities statically
    would result in types that are not very helpful. For that reason, the typed NumPy
    API is often stricter than the runtime NumPy API. This section describes some
    notable differences.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 非常灵活。试图静态描述所有可能性将导致类型不太有用。因此，有时候，有类型的 NumPy API通常比运行时 NumPy API 更严格。本节描述了一些显著差异。
- en: ArrayLike
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArrayLike
- en: The [`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike") type tries
    to avoid creating object arrays. For example,
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike")类型试图避免创建对象数组。例如，'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'is valid NumPy code which will create a 0-dimensional object array. Type checkers
    will complain about the above example when using the NumPy types however. If you
    really intended to do the above, then you can either use a `# type: ignore` comment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '是有效的 NumPy 代码，将创建一个零维对象数组。然而，如果使用 NumPy 类型，类型检查器将会对上述示例提出异议。如果您确实打算执行上述操作，那么可以使用`#
    type: ignore`注释：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'or explicitly type the array like object as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)"):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '或者明确将类似数组对象类型定义为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.11)"):'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ndarray
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray
- en: 'It’s possible to mutate the dtype of an array at runtime. For example, the
    following code is valid:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在运行时改变数组的数据类型。例如，以下代码是有效的：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This sort of mutation is not allowed by the types. Users who want to write statically
    typed code should instead use the [`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view") method to create a view of the array with a different dtype.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类型检查器不允许此类变异。想要编写静态类型代码的用户应该使用[`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view")方法，用不同的dtype创建数组的视图。
- en: DTypeLike
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DTypeLike
- en: 'The [`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike") type tries
    to avoid creation of dtype objects using dictionary of fields like below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike") 类型试图避免使用字段字典创建dtype对象，如下所示：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Although this is valid NumPy code, the type checker will complain about it,
    since its usage is discouraged. Please see : [Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是有效的 NumPy 代码，但类型检查器会对此提出抱怨，因为不鼓励使用它。请参见：[数据类型对象](arrays.dtypes.html#arrays-dtypes)
- en: Number precision
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字精度
- en: The precision of [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")
    subclasses is treated as a covariant generic parameter (see [`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase")), simplifying the annotating of processes involving precision-based
    casting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")子类的精度被视为协变泛型参数（见[`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase")），简化了涉及基于精度的转换的注释过程。'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Consequently, the likes of [`float16`](arrays.scalars.html#numpy.float16 "numpy.float16"),
    [`float32`](arrays.scalars.html#numpy.float32 "numpy.float32") and [`float64`](arrays.scalars.html#numpy.float64
    "numpy.float64") are still sub-types of [`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating"), but, contrary to runtime, they’re not necessarily considered
    as sub-classes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[`float16`](arrays.scalars.html#numpy.float16 "numpy.float16")、[`float32`](arrays.scalars.html#numpy.float32
    "numpy.float32")和[`float64`](arrays.scalars.html#numpy.float64 "numpy.float64")仍然是[`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating")的子类型，但与运行时相反，它们未必被视为子类。
- en: Timedelta64
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Timedelta64
- en: The [`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    class is not considered a subclass of [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger"), the former only inheriting from [`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic") while static type checking.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    类在静态类型检查时不被视为[`signedinteger`](arrays.scalars.html#numpy.signedinteger "numpy.signedinteger")的子类，它只从[`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic")继承。'
- en: 0D arrays
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 0维数组
- en: During runtime numpy aggressively casts any passed 0D arrays into their corresponding
    [`generic`](arrays.scalars.html#numpy.generic "numpy.generic") instance. Until
    the introduction of shape typing (see [**PEP 646**](https://peps.python.org/pep-0646/))
    it is unfortunately not possible to make the necessary distinction between 0D
    and >0D arrays. While thus not strictly correct, all operations are that can potentially
    perform a 0D-array -> scalar cast are currently annotated as exclusively returning
    an *ndarray*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '在运行时，numpy会将任何传递进来的0维数组积极地转换为相应的[`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic")实例。在引入形状类型（参见[**PEP 646**](https://peps.python.org/pep-0646/)）之前，很遗憾目前无法进行必要的区分0D和>
    0D数组。因此，尽管不严格正确，所有可能执行0维数组->标量转换的操作都目前被标注为只返回*ndarray*。 '
- en: 'If it is known in advance that an operation _will_ perform a 0D-array -> scalar
    cast, then one can consider manually remedying the situation with either [`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(in Python v3.11)") or a `# type: ignore` comment.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '如果事先知道某个操作将执行0维数组->标量的转换，那么可以考虑使用[`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(在 Python v3.11)")或`# type: ignore`注释手动解决该问题。'
- en: Record array dtypes
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录数组数据类型
- en: 'The dtype of [`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray
    "numpy.recarray"), and the `numpy.rec` functions in general, can be specified
    in one of two ways:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray "numpy.recarray")的数据类型，以及一般情况下的`numpy.rec`函数，可以通过以下两种方式之一指定：'
- en: Directly via the `dtype` argument.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`dtype`参数直接指定。
- en: 'With up to five helper arguments that operate via [`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser"): `formats`, `names`, `titles`, `aligned` and `byteorder`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有通过 [`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser") 操作的最多五个辅助参数：`formats`、`names`、`titles`、`aligned` 和 `byteorder`。
- en: These two approaches are currently typed as being mutually exclusive, *i.e.*
    if `dtype` is specified than one may not specify `formats`. While this mutual
    exclusivity is not (strictly) enforced during runtime, combining both dtype specifiers
    can lead to unexpected or even downright buggy behavior.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这两种方法被标记为互斥，*即* 如果指定了 `dtype`，则不能指定 `formats`。虽然这种互斥性在运行时不是（严格）强制执行的，但结合两种
    dtype 指定符可能会导致意外或甚至明显错误的行为。
- en: API
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(in
    Python v3.11)") representing objects that can be coerced into an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 代表可以强制转换为 [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    的对象的 [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(在
    Python v3.11 中)")。
- en: 'Among others this includes the likes of:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其中包括但不限于：
- en: Scalars.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量。
- en: (Nested) sequences.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （嵌套的）序列。
- en: Objects implementing the *__array__* protocol.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 *__array__* 协议的对象。
- en: New in version 1.20.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.20 中新增。
- en: See Also
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[array_like](../glossary.html#term-array_like):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[array_like](../glossary.html#term-array_like):'
- en: Any scalar or sequence that can be interpreted as an ndarray.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可解释为 ndarray 的标量或序列。
- en: Examples
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(in
    Python v3.11)") representing objects that can be coerced into a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 代表可以强制转换为 [`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype") 的对象的
    [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(在 Python
    v3.11 中)")。
- en: 'Among others this includes the likes of:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其中包括但不限于：
- en: '[`type`](https://docs.python.org/3/library/functions.html#type "(in Python
    v3.11)") objects.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`type`](https://docs.python.org/3/library/functions.html#type "(在 Python v3.11
    中)") 对象。'
- en: Character codes or the names of [`type`](https://docs.python.org/3/library/functions.html#type
    "(in Python v3.11)") objects.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符代码或 [`type`](https://docs.python.org/3/library/functions.html#type "(在 Python
    v3.11 中)") 对象的名称。
- en: Objects with the `.dtype` attribute.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 `.dtype` 属性的对象。
- en: New in version 1.20.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.20 中新增。
- en: See Also
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Specifying and constructing data types](arrays.dtypes.html#arrays-dtypes-constructing)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[指定和构造数据类型](arrays.dtypes.html#arrays-dtypes-constructing)'
- en: A comprehensive overview of all objects that can be coerced into data types.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可以强制转换为数据类型的对象的全面概述。
- en: Examples
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A [generic](https://docs.python.org/3/glossary.html#term-generic-type "(in Python
    v3.11)") version of [`np.ndarray[Any, np.dtype[+ScalarType]]`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`np.ndarray[Any, np.dtype[+ScalarType]]`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 的[通用](https://docs.python.org/3/glossary.html#term-generic-type
    "(在 Python v3.11 中)") 版本。'
- en: Can be used during runtime for typing arrays with a given dtype and unspecified
    shape.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可在运行时用于为具有给定 dtype 和未指定形状的数组进行类型标注。
- en: New in version 1.21.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.21 中新增。
- en: Examples
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A type representing [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")
    precision during static type checking.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number") 精度的类型在静态类型检查期间。
- en: Used exclusively for the purpose static type checking, [`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase") represents the base of a hierarchical set of subclasses.
    Each subsequent subclass is herein used for representing a lower level of precision,
    *e.g.* `64Bit > 32Bit > 16Bit`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 专门用于静态类型检查目的，[`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase") 代表一个层次化子类集合的基类。每个后续子类用于表示更低级别的精度，*例如*
    `64Bit > 32Bit > 16Bit`。
- en: New in version 1.20.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.20 中新增。
- en: Examples
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'Below is a typical usage example: [`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase")
    is herein used for annotating a function that takes a float and integer of arbitrary
    precision as arguments and returns a new float of whichever precision is largest
    (*e.g.* `np.float16 + np.int64 -> np.float64`).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个典型的使用示例：[`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase") 用于为接受任意精度的浮点数和整数作为参数并返回精度较大的新浮点数的函数进行注释（*例如*
    `np.float16 + np.int64 -> np.float64`）。
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Mypy plugin
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mypy 插件
- en: New in version 1.21.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.21 中新增。
- en: 'A [mypy](http://mypy-lang.org/) plugin for managing a number of platform-specific
    annotations. Its functionality can be split into three distinct parts:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理一些特定平台注释的 [mypy](http://mypy-lang.org/) 插件。其功能可以分为三个明确的部分：
- en: Assigning the (platform-dependent) precisions of certain [`number`](arrays.scalars.html#numpy.number
    "numpy.number") subclasses, including the likes of [`int_`](arrays.scalars.html#numpy.int_
    "numpy.int_"), [`intp`](arrays.scalars.html#numpy.intp "numpy.intp") and [`longlong`](arrays.scalars.html#numpy.longlong
    "numpy.longlong"). See the documentation on [scalar types](arrays.scalars.html#arrays-scalars-built-in)
    for a comprehensive overview of the affected classes. Without the plugin the precision
    of all relevant classes will be inferred as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)").
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配了某些[`number`](arrays.scalars.html#numpy.number "numpy.number")子类的（平台相关）精度，包括[`int_`](arrays.scalars.html#numpy.int_
    "numpy.int_")、[`intp`](arrays.scalars.html#numpy.intp "numpy.intp")和[`longlong`](arrays.scalars.html#numpy.longlong
    "numpy.longlong")的精度。有关受影响类的综合概述，请参阅[标量类型](arrays.scalars.html#arrays-scalars-built-in)的文档。没有使用插件，所有相关类的精度将被推断为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.11 中)")。
- en: Removing all extended-precision [`number`](arrays.scalars.html#numpy.number
    "numpy.number") subclasses that are unavailable for the platform in question.
    Most notably this includes the likes of [`float128`](arrays.scalars.html#numpy.float128
    "numpy.float128") and [`complex256`](arrays.scalars.html#numpy.complex256 "numpy.complex256").
    Without the plugin *all* extended-precision types will, as far as mypy is concerned,
    be available to all platforms.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除在特定平台上不可用的所有扩展精度的[`number`](arrays.scalars.html#numpy.number "numpy.number")子类。最显著的包括[`float128`](arrays.scalars.html#numpy.float128
    "numpy.float128")和[`complex256`](arrays.scalars.html#numpy.complex256 "numpy.complex256")。如果不使用插件，*所有*扩展精度类型在
    mypy 看来都对所有平台可用。
- en: Assigning the (platform-dependent) precision of [`c_intp`](routines.ctypeslib.html#numpy.ctypeslib.c_intp
    "numpy.ctypeslib.c_intp"). Without the plugin the type will default to [`ctypes.c_int64`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int64
    "(in Python v3.11)").
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配[`c_intp`](routines.ctypeslib.html#numpy.ctypeslib.c_intp "numpy.ctypeslib.c_intp")的（平台相关）精度。没有使用插件，类型将默认为[`ctypes.c_int64`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int64
    "(在 Python v3.11 中)")。
- en: New in version 1.22.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.22 中的新功能。
- en: Examples
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用该插件，必须将其添加到 mypy 的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Examples
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用该插件，必须将其添加到 mypy 的[配置文件](https://mypy.readthedocs.io/en/stable/config_file.html)中：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Differences from the runtime NumPy API
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与运行时 NumPy API 的差异
- en: NumPy is very flexible. Trying to describe the full range of possibilities statically
    would result in types that are not very helpful. For that reason, the typed NumPy
    API is often stricter than the runtime NumPy API. This section describes some
    notable differences.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 非常灵活。试图静态描述所有可能性将导致不太有帮助的类型。因此，类型化 NumPy API 往往比运行时 NumPy API 严格。本节描述了一些值得注意的差异。
- en: ArrayLike
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArrayLike
- en: The [`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike") type tries
    to avoid creating object arrays. For example,
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike")类型尝试避免创建对象数组。例如，'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'is valid NumPy code which will create a 0-dimensional object array. Type checkers
    will complain about the above example when using the NumPy types however. If you
    really intended to do the above, then you can either use a `# type: ignore` comment:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '这是有效的 NumPy 代码，将创建一个 0 维对象数组。然而，当使用 NumPy 类型时，类型检查器会对上述示例提出抱怨。如果您真的打算执行上述操作，那么您可以使用`#
    type: ignore`注释：'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'or explicitly type the array like object as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)"):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '或者将数组对象明确类型为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在 Python v3.11 中)"):'
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ndarray
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray
- en: 'It’s possible to mutate the dtype of an array at runtime. For example, the
    following code is valid:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的数据类型可以在运行时进行变异。例如，以下代码是有效的：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This sort of mutation is not allowed by the types. Users who want to write statically
    typed code should instead use the [`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view") method to create a view of the array with a different dtype.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类型不允许此类变异。希望编写静态类型代码的用户应该使用[`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view")方法，以创建具有不同数据类型的数组视图。
- en: DTypeLike
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DTypeLike
- en: 'The [`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike") type tries
    to avoid creation of dtype objects using dictionary of fields like below:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike") 类型试图避免像下面这样使用字段字典创建dtype对象：'
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Although this is valid NumPy code, the type checker will complain about it,
    since its usage is discouraged. Please see : [Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是有效的NumPy代码，类型检查器会对其提出异议，因为不鼓励使用。请参见：[数据类型对象](arrays.dtypes.html#arrays-dtypes)
- en: Number precision
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字精度
- en: The precision of [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")
    subclasses is treated as a covariant generic parameter (see [`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase")), simplifying the annotating of processes involving precision-based
    casting.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")子类的精度被视为协变通用参数（参见[`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase")），简化了涉及基于精度的转换的注释过程。'
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Consequently, the likes of [`float16`](arrays.scalars.html#numpy.float16 "numpy.float16"),
    [`float32`](arrays.scalars.html#numpy.float32 "numpy.float32") and [`float64`](arrays.scalars.html#numpy.float64
    "numpy.float64") are still sub-types of [`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating"), but, contrary to runtime, they’re not necessarily considered
    as sub-classes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[`float16`](arrays.scalars.html#numpy.float16 "numpy.float16")、[`float32`](arrays.scalars.html#numpy.float32
    "numpy.float32")和[`float64`](arrays.scalars.html#numpy.float64 "numpy.float64")等类型仍然是[`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating")的子类型，但与运行时相反，它们不一定被视为子类。
- en: Timedelta64
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Timedelta64
- en: The [`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    class is not considered a subclass of [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger"), the former only inheriting from [`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic") while static type checking.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    类不被视为[`signedinteger`](arrays.scalars.html#numpy.signedinteger "numpy.signedinteger")的子类，前者仅在静态类型检查中继承自[`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic")。'
- en: 0D arrays
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 零维数组
- en: During runtime numpy aggressively casts any passed 0D arrays into their corresponding
    [`generic`](arrays.scalars.html#numpy.generic "numpy.generic") instance. Until
    the introduction of shape typing (see [**PEP 646**](https://peps.python.org/pep-0646/))
    it is unfortunately not possible to make the necessary distinction between 0D
    and >0D arrays. While thus not strictly correct, all operations are that can potentially
    perform a 0D-array -> scalar cast are currently annotated as exclusively returning
    an *ndarray*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，NumPy会将任何传递的0维数组强制转换为相应的[`generic`](arrays.scalars.html#numpy.generic "numpy.generic")实例。在引入形状类型编制（参见[**PEP
    646**](https://peps.python.org/pep-0646/)）之前，不幸的是目前无法区分0维和>0维数组。因此，所有可能进行0维数组
    -> 标量转换的操作当前都被注释地专门返回一个*ndarray*，虽然这不严格正确。
- en: 'If it is known in advance that an operation _will_ perform a 0D-array -> scalar
    cast, then one can consider manually remedying the situation with either [`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(in Python v3.11)") or a `# type: ignore` comment.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '如果预先知道一个操作将执行0维数组 -> 标量转换，那么可以考虑使用[`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(in Python v3.11)")或`# type: ignore`注释手动处理情况。'
- en: Record array dtypes
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录数组dtypes
- en: 'The dtype of [`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray
    "numpy.recarray"), and the `numpy.rec` functions in general, can be specified
    in one of two ways:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray "numpy.recarray")的dtype，以及一般的`numpy.rec`函数，可以通过两种方式指定：'
- en: Directly via the `dtype` argument.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接通过`dtype`参数。
- en: 'With up to five helper arguments that operate via [`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser"): `formats`, `names`, `titles`, `aligned` and `byteorder`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser")提供的最多五个帮助参数进行操作：`formats`、`names`、`titles`、`aligned`和`byteorder`。
- en: These two approaches are currently typed as being mutually exclusive, *i.e.*
    if `dtype` is specified than one may not specify `formats`. While this mutual
    exclusivity is not (strictly) enforced during runtime, combining both dtype specifiers
    can lead to unexpected or even downright buggy behavior.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这两种方法被彼此排斥化为互斥，*即*如果指定了`dtype`，则不能指定`formats`。尽管这种互斥在运行时并没有(严格)执行，但结合两种dtype说明符可能会导致意外或严重错误行为。
- en: ArrayLike
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArrayLike
- en: The [`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike") type tries
    to avoid creating object arrays. For example,
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ArrayLike`](#numpy.typing.ArrayLike "numpy.typing.ArrayLike")类型尝试避免创建对象数组。例如，'
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'is valid NumPy code which will create a 0-dimensional object array. Type checkers
    will complain about the above example when using the NumPy types however. If you
    really intended to do the above, then you can either use a `# type: ignore` comment:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '是有效的 NumPy 代码，它将创建一个0维对象数组。然而，当使用 NumPy 类型时，类型检查器会对上述示例报错。如果您真的打算执行上述操作，那么您可以使用`#
    type: ignore`注释：'
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'or explicitly type the array like object as [`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.11)"):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '或者将类似数组的对象明确类型为[`Any`](https://docs.python.org/3/library/typing.html#typing.Any
    "(在Python v3.11中)"):'
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ndarray
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ndarray
- en: 'It’s possible to mutate the dtype of an array at runtime. For example, the
    following code is valid:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在运行时更改数组的 dtype。例如，以下代码是有效的：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This sort of mutation is not allowed by the types. Users who want to write statically
    typed code should instead use the [`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view") method to create a view of the array with a different dtype.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 类型不允许进行此类变异。希望编写静态类型代码的用户应该使用 [`numpy.ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view
    "numpy.ndarray.view") 方法以不同的 dtype 创建数组的视图。
- en: DTypeLike
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DTypeLike
- en: 'The [`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike") type tries
    to avoid creation of dtype objects using dictionary of fields like below:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DTypeLike`](#numpy.typing.DTypeLike "numpy.typing.DTypeLike")类型尝试避免使用以下格式的字段字典创建
    dtype 对象：'
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Although this is valid NumPy code, the type checker will complain about it,
    since its usage is discouraged. Please see : [Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是有效的 NumPy 代码，但类型检查器会对其报错，因为它的使用是不鼓励的。请参阅：[数据类型对象](arrays.dtypes.html#arrays-dtypes)
- en: Number precision
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值精度
- en: The precision of [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")
    subclasses is treated as a covariant generic parameter (see [`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase")), simplifying the annotating of processes involving precision-based
    casting.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")子类的精度被视为协变通用参数（参见[`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase"）），简化了涉及基于精度的转换的注释。'
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Consequently, the likes of [`float16`](arrays.scalars.html#numpy.float16 "numpy.float16"),
    [`float32`](arrays.scalars.html#numpy.float32 "numpy.float32") and [`float64`](arrays.scalars.html#numpy.float64
    "numpy.float64") are still sub-types of [`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating"), but, contrary to runtime, they’re not necessarily considered
    as sub-classes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，[`float16`](arrays.scalars.html#numpy.float16 "numpy.float16")、[`float32`](arrays.scalars.html#numpy.float32
    "numpy.float32")和[`float64`](arrays.scalars.html#numpy.float64 "numpy.float64")仍然是[`floating`](arrays.scalars.html#numpy.floating
    "numpy.floating")的子类型，但与运行时相反，它们不一定被视为子类。
- en: Timedelta64
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Timedelta64
- en: The [`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")
    class is not considered a subclass of [`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger"), the former only inheriting from [`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic") while static type checking.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在静态类型检查中，[`timedelta64`](arrays.scalars.html#numpy.timedelta64 "numpy.timedelta64")类不被视为[`signedinteger`](arrays.scalars.html#numpy.signedinteger
    "numpy.signedinteger")的子类，前者仅继承自 [`generic`](arrays.scalars.html#numpy.generic
    "numpy.generic")。
- en: 0D arrays
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 0D 数组
- en: During runtime numpy aggressively casts any passed 0D arrays into their corresponding
    [`generic`](arrays.scalars.html#numpy.generic "numpy.generic") instance. Until
    the introduction of shape typing (see [**PEP 646**](https://peps.python.org/pep-0646/))
    it is unfortunately not possible to make the necessary distinction between 0D
    and >0D arrays. While thus not strictly correct, all operations are that can potentially
    perform a 0D-array -> scalar cast are currently annotated as exclusively returning
    an *ndarray*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时，numpy会将任何传入的0D数组强制转换为相应的[`generic`](arrays.scalars.html#numpy.generic "numpy.generic")实例。在引入
    shape typing（参见[**PEP 646**](https://peps.python.org/pep-0646/)) 之前，不幸的是无法对0D和>0D数组进行必要的区分。因此，虽然不严格正确，但目前将所有可能执行0D-array
    -> scalar转换的操作都注释为仅返回*ndarray*。
- en: 'If it is known in advance that an operation _will_ perform a 0D-array -> scalar
    cast, then one can consider manually remedying the situation with either [`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(in Python v3.11)") or a `# type: ignore` comment.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '如果预先知道一个操作_will_执行0D-array -> 标量转换，则可以考虑使用[`typing.cast`](https://docs.python.org/3/library/typing.html#typing.cast
    "(在Python v3.11)")或者`# type: ignore`注释手动解决这种情况。'
- en: Record array dtypes
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录数组dtypes
- en: 'The dtype of [`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray
    "numpy.recarray"), and the `numpy.rec` functions in general, can be specified
    in one of two ways:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.recarray`](generated/numpy.recarray.html#numpy.recarray "numpy.recarray")的dtype，以及通用的`numpy.rec`函数，可以通过两种方式指定:'
- en: Directly via the `dtype` argument.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`dtype`参数直接指定。
- en: 'With up to five helper arguments that operate via [`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser"): `formats`, `names`, `titles`, `aligned` and `byteorder`.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '通过[`numpy.format_parser`](generated/numpy.format_parser.html#numpy.format_parser
    "numpy.format_parser")操作的最多五个辅助参数: `formats`、`names`、`titles`、`aligned`和`byteorder`。'
- en: These two approaches are currently typed as being mutually exclusive, *i.e.*
    if `dtype` is specified than one may not specify `formats`. While this mutual
    exclusivity is not (strictly) enforced during runtime, combining both dtype specifiers
    can lead to unexpected or even downright buggy behavior.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这两种方法的类型被定义为互斥的，*即*如果指定了`dtype`，则不允许指定`formats`。虽然这种互斥性在运行时并没有(严格)强制执行，但结合两种dtype指定器可能会导致意外或甚至严重的错误行为。
- en: API
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: A [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(in
    Python v3.11)") representing objects that can be coerced into an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 代表可以强制转换为[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")的[`Union`](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.11")。
- en: 'Among others this includes the likes of:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '其中包括:'
- en: Scalars.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量。
- en: (Nested) sequences.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (嵌套) 序列。
- en: Objects implementing the *__array__* protocol.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现*__array__*协议的对象。
- en: New in version 1.20.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 1.20版中的新功能。
- en: See Also
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[array_like](../glossary.html#term-array_like):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[array_like](../glossary.html#term-array_like):'
- en: Any scalar or sequence that can be interpreted as an ndarray.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以解释为ndarray的标量或序列。
- en: Examples
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A [`Union`](https://docs.python.org/3/library/typing.html#typing.Union "(in
    Python v3.11)") representing objects that can be coerced into a [`dtype`](generated/numpy.dtype.html#numpy.dtype
    "numpy.dtype").
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 代表可以被强制转换为[`dtype`](generated/numpy.dtype.html#numpy.dtype "numpy.dtype")的对象的[`Union`](https://docs.python.org/3/library/typing.html#typing.Union
    "(在Python v3.11)")。
- en: 'Among others this includes the likes of:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '其中包括:'
- en: '[`type`](https://docs.python.org/3/library/functions.html#type "(in Python
    v3.11)") objects.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`type`](https://docs.python.org/3/library/functions.html#type "(在Python v3.11)")
    对象。'
- en: Character codes or the names of [`type`](https://docs.python.org/3/library/functions.html#type
    "(in Python v3.11)") objects.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符代码或[`type`](https://docs.python.org/3/library/functions.html#type "(在Python
    v3.11)")对象的名称。
- en: Objects with the `.dtype` attribute.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有`.dtype`属性的对象。
- en: New in version 1.20.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 1.20版中的新功能。
- en: See Also
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Specifying and constructing data types](arrays.dtypes.html#arrays-dtypes-constructing)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[指定和构造数据类型](arrays.dtypes.html#arrays-dtypes-constructing)'
- en: A comprehensive overview of all objects that can be coerced into data types.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可强制转换为数据类型的对象的全面概述。
- en: Examples
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A [generic](https://docs.python.org/3/glossary.html#term-generic-type "(in Python
    v3.11)") version of [`np.ndarray[Any, np.dtype[+ScalarType]]`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray").
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[`np.ndarray[Any, np.dtype[+ScalarType]]`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的[通用](https://docs.python.org/3/glossary.html#term-generic-type
    "(在Python v3.11)")版本。'
- en: Can be used during runtime for typing arrays with a given dtype and unspecified
    shape.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在运行时用于对具有给定dtype和未指定形状的数组进行类型标记。
- en: New in version 1.21.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 1.21版中的新功能。
- en: Examples
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A type representing [`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")
    precision during static type checking.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 用于静态类型检查期间的[`numpy.number`](arrays.scalars.html#numpy.number "numpy.number")精度类型。
- en: Used exclusively for the purpose static type checking, [`NBitBase`](#numpy.typing.NBitBase
    "numpy.typing.NBitBase") represents the base of a hierarchical set of subclasses.
    Each subsequent subclass is herein used for representing a lower level of precision,
    *e.g.* `64Bit > 32Bit > 16Bit`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供静态类型检查目的使用，[`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase") 表示一组子类的基类。每个后续子类在此用于表示更低级的精度，*e.g.*
    `64Bit > 32Bit > 16Bit`。
- en: New in version 1.20.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 1.20版中的新功能。
- en: Examples
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: 'Below is a typical usage example: [`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase")
    is herein used for annotating a function that takes a float and integer of arbitrary
    precision as arguments and returns a new float of whichever precision is largest
    (*e.g.* `np.float16 + np.int64 -> np.float64`).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个典型的使用示例：[`NBitBase`](#numpy.typing.NBitBase "numpy.typing.NBitBase") 在这里用于注释一个接受任意精度的浮点数和整数作为参数，并返回具有最大精度的新浮点数的函数（*例如*
    `np.float16 + np.int64 -> np.float64`）。
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
