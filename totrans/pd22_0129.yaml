- en: pandas.to_numeric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html](https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Convert argument to a numeric type.
  prefs: []
  type: TYPE_NORMAL
- en: The default return dtype is float64 or int64 depending on the data supplied.
    Use the downcast parameter to obtain other dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that precision loss may occur if really large numbers are passed
    in. Due to the internal limitations of ndarray, if numbers smaller than -9223372036854775808
    (np.iinfo(np.int64).min) or larger than 18446744073709551615 (np.iinfo(np.uint64).max)
    are passed in, it is very likely they will be converted to float so that they
    can be stored in an ndarray. These warnings apply similarly to Series since it
    internally leverages ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg**scalar, list, tuple, 1-d array, or Series'
  prefs: []
  type: TYPE_NORMAL
- en: Argument to be converted.
  prefs: []
  type: TYPE_NORMAL
- en: '**errors**{‘ignore’, ‘raise’, ‘coerce’}, default ‘raise’'
  prefs: []
  type: TYPE_NORMAL
- en: If ‘raise’, then invalid parsing will raise an exception.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If ‘coerce’, then invalid parsing will be set as NaN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If ‘ignore’, then invalid parsing will return the input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changed in version 2.2.
  prefs: []
  type: TYPE_NORMAL
- en: “ignore” is deprecated. Catch exceptions explicitly instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**downcast**str, default None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Can be ‘integer’, ‘signed’, ‘unsigned’, or ‘float’. If not None, and if the
    data has been successfully cast to a numerical dtype (or if the data was numeric
    to begin with), downcast that resulting data to the smallest numerical dtype possible
    according to the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘integer’ or ‘signed’: smallest signed int dtype (min.: np.int8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘unsigned’: smallest unsigned int dtype (min.: np.uint8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘float’: smallest float dtype (min.: np.float32)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As this behaviour is separate from the core conversion to numeric values, any
    errors raised during the downcasting will be surfaced regardless of the value
    of the ‘errors’ input.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, downcasting will only occur if the size of the resulting data’s
    dtype is strictly larger than the dtype it is to be cast to, so if none of the
    dtypes checked satisfy that specification, no downcasting will be performed on
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype_backend**{‘numpy_nullable’, ‘pyarrow’}, default ‘numpy_nullable’'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back-end data type applied to the resultant [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (still experimental). Behaviour is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"numpy_nullable"`: returns nullable-dtype-backed [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") (default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"pyarrow"`: returns pyarrow-backed nullable [`ArrowDtype`](pandas.ArrowDtype.html#pandas.ArrowDtype
    "pandas.ArrowDtype") DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: ret
  prefs: []
  type: TYPE_NORMAL
- en: Numeric if parsing succeeded. Return type depends on input. Series if Series,
    otherwise ndarray.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.astype`](pandas.DataFrame.astype.html#pandas.DataFrame.astype "pandas.DataFrame.astype")'
  prefs: []
  type: TYPE_NORMAL
- en: Cast argument to a specified dtype.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_datetime`](pandas.to_datetime.html#pandas.to_datetime "pandas.to_datetime")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to datetime.
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_timedelta`](pandas.to_timedelta.html#pandas.to_timedelta "pandas.to_timedelta")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert argument to timedelta.
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.ndarray.astype`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "(in NumPy v1.26)")'
  prefs: []
  type: TYPE_NORMAL
- en: Cast a numpy array to a specified type.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.convert_dtypes`](pandas.DataFrame.convert_dtypes.html#pandas.DataFrame.convert_dtypes
    "pandas.DataFrame.convert_dtypes")'
  prefs: []
  type: TYPE_NORMAL
- en: Convert dtypes.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Take separate series and convert to numeric, coercing when told to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Downcasting of nullable integer and floating dtypes is supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
