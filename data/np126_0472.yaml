- en: numpy.find_common_type
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: numpy.find_common_type
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html](https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html](https://numpy.org/doc/1.26/reference/generated/numpy.find_common_type.html)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Determine common type following standard coercion rules.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循标准强制规则确定共同类型。
- en: 'Deprecated since version NumPy: 1.25'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自 NumPy 版本1.25起已弃用：
- en: This function is deprecated, use [`numpy.promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types") or [`numpy.result_type`](numpy.result_type.html#numpy.result_type
    "numpy.result_type") instead. To achieve semantics for the *scalar_types* argument,
    use [`numpy.result_type`](numpy.result_type.html#numpy.result_type "numpy.result_type")
    and pass the Python values *0*, *0.0*, or *0j*. This will give the same results
    in almost all cases. More information and rare exception can be found in the [NumPy
    1.25 release notes](https://numpy.org/devdocs/release/1.25.0-notes.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数已被弃用，请使用[`numpy.promote_types`](numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types")或[`numpy.result_type`](numpy.result_type.html#numpy.result_type
    "numpy.result_type")。要为*scalar_types*参数实现语义，请使用[`numpy.result_type`](numpy.result_type.html#numpy.result_type
    "numpy.result_type")并传递Python值 *0*, *0.0*，或 *0j*。在几乎所有情况下，这将得到相同的结果。有关更多信息和罕见的例外，请参阅[NumPy
    1.25 发行说明](https://numpy.org/devdocs/release/1.25.0-notes.html)。
- en: 'Parameters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**array_types**sequence'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**array_types**序列'
- en: A list of dtypes or dtype convertible objects representing arrays.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由表示数组的dtypes或可转换为dtype的对象组成的列表。
- en: '**scalar_types**sequence'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**scalar_types**序列'
- en: A list of dtypes or dtype convertible objects representing scalars.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由表示标量的dtypes或可转换为dtype的对象组成的列表。
- en: 'Returns:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**datatype**dtype'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**datatype**dtype'
- en: The common data type, which is the maximum of *array_types* ignoring *scalar_types*,
    unless the maximum of *scalar_types* is of a different kind ([`dtype.kind`](numpy.dtype.kind.html#numpy.dtype.kind
    "numpy.dtype.kind")). If the kind is not understood, then None is returned.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 共同的数据类型，即*array_types*中的最大值，忽略*scalar_types*，除非*scalar_types*的最大值属于不同种类（[`dtype.kind`](numpy.dtype.kind.html#numpy.dtype.kind
    "numpy.dtype.kind")）。如果该种类不被理解，则返回None。
- en: See also
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参考
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), [`common_type`](numpy.common_type.html#numpy.common_type
    "numpy.common_type"), [`can_cast`](numpy.can_cast.html#numpy.can_cast "numpy.can_cast"),
    [`mintypecode`](numpy.mintypecode.html#numpy.mintypecode "numpy.mintypecode")'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype"), [`common_type`](numpy.common_type.html#numpy.common_type
    "numpy.common_type"), [`can_cast`](numpy.can_cast.html#numpy.can_cast "numpy.can_cast"),
    [`mintypecode`](numpy.mintypecode.html#numpy.mintypecode "numpy.mintypecode")'
- en: Examples
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The standard casting rules ensure that a scalar cannot up-cast an array unless
    the scalar is of a fundamentally different kind of data (i.e. under a different
    hierarchy in the data type hierarchy) then the array:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的类型转换规则确保了标量不会将数组向上转型，除非标量属于一种完全不同类型的数据（即在数据类型层次结构中处于不同的层级）：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Complex is of a different type, so it up-casts the float in the *array_types*
    argument:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 复数是一种不同类型，因此它会将*array_types*参数中的浮点数向上转型：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Type specifier strings are convertible to dtypes and can therefore be used
    instead of dtypes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类型说明字符串可转换为dtypes，因此可以用于替代dtypes：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
