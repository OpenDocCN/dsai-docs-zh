- en: Compatibility Policy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兼容性政策
- en: 原文：[https://numpy.org/doc/1.26/reference/random/compatibility.html](https://numpy.org/doc/1.26/reference/random/compatibility.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/random/compatibility.html](https://numpy.org/doc/1.26/reference/random/compatibility.html)
- en: '[`numpy.random`](index.html#module-numpy.random "numpy.random") has a somewhat
    stricter compatibility policy than the rest of NumPy. Users of pseudorandomness
    often have use cases for being able to reproduce runs in fine detail given the
    same seed (so-called “stream compatibility”), and so we try to balance those needs
    with the flexibility to enhance our algorithms. [NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19
    "(in NumPy Enhancement Proposals)") describes the evolution of this policy.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random`](index.html#module-numpy.random "numpy.random")的兼容性政策比NumPy的其他部分要严格一些。伪随机性的用户通常需要能够复现相同种子在细节上的运行情况（所谓的“流兼容性”），因此我们试图在这些需求与增强算法的灵活性之间取得平衡。[NEP
    19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19 "(in NumPy Enhancement
    Proposals)")描述了这一政策的发展。'
- en: The main kind of compatibility that we enforce is stream-compatibility from
    run to run under certain conditions. If you create a [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") with the same [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator"), with the same seed, perform the same sequence of
    method calls with the same arguments, on the same build of `numpy`, in the same
    environment, on the same machine, you should get the same stream of numbers. Note
    that these conditions are very strict. There are a number of factors outside of
    NumPy’s control that limit our ability to guarantee much more than this. For example,
    different CPUs implement floating point arithmetic differently, and this can cause
    differences in certain edge cases that cascade to the rest of the stream. [`Generator.multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal"), for another example, uses a matrix
    decomposition from `numpy.linalg`. Even on the same platform, a different build
    of `numpy` may use a different version of this matrix decomposition algorithm
    from the LAPACK that it links to, causing [`Generator.multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal") to return completely different (but
    equally valid!) results. We strive to prefer algorithms that are more resistant
    to these effects, but this is always imperfect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强制执行的主要兼容性类型是在某些条件下从运行到运行的流兼容性。如果您使用相同的[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")，相同的种子创建一个[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator") ，在相同的`numpy`版本的相同环境的相同机器上使用相同的参数执行相同的方法调用序列，您应该得到相同的数字流。请注意，这些条件非常严格。NumPy无法控制许多限制我们能够保证的事情。例如，不同的CPU以不同方式实现浮点运算，这可能导致某些边缘情况的差异并传播到剩余的数字流。另一个例子，[`Generator.multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal") 使用了来自`numpy.linalg`的矩阵分解。即使在同一平台上，`numpy`的不同版本可能使用来自其链接的LAPACK的不同版本的矩阵分解算法，导致[`Generator.multivariate_normal`](generated/numpy.random.Generator.multivariate_normal.html#numpy.random.Generator.multivariate_normal
    "numpy.random.Generator.multivariate_normal") 返回完全不同（但同样有效！）的结果。我们努力倾向于更能抵抗这些影响的算法，但这总是不完美的。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most of the [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    methods allow you to draw multiple values from a distribution as arrays. The requested
    size of this array is a parameter, for the purposes of the above policy. Calling
    `rng.random()` 5 times is not *guaranteed* to give the same numbers as `rng.random(5)`.
    We reserve the ability to decide to use different algorithms for different-sized
    blocks. In practice, this happens rarely.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")方法允许您从分布中绘制多个值作为数组。该数组的请求大小是一个参数，符合以上策略的目的。调用`rng.random()`
    5次并不能 *保证* 给出与`rng.random(5)`相同的数字。我们保留决定对不同大小的块使用不同算法的能力。实际上，这种情况很少发生。
- en: Like the rest of NumPy, we generally maintain API source compatibility from
    version to version. If we *must* make an API-breaking change, then we will only
    do so with an appropriate deprecation period and warnings, according to [general
    NumPy policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 的其余部分一样，我们通常会保持版本之间的 API 源兼容性。如果我们*必须*进行破坏 API 的更改，那么我们将会在适当的弃用期和警告下进行，根据
    [general NumPy policy](https://numpy.org/neps/nep-0023-backwards-compatibility.html#nep23
    "(in NumPy Enhancement Proposals)")。
- en: Breaking stream-compatibility in order to introduce new features or improve
    performance in [`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    or [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    will be *allowed* with *caution*. Such changes will be considered features, and
    as such will be no faster than the standard release cadence of features (i.e.
    on `X.Y` releases, never `X.Y.Z`). Slowness will not be considered a bug for this
    purpose. Correctness bug fixes that break stream-compatibility can happen on bugfix
    releases, per usual, but developers should consider if they can wait until the
    next feature release. We encourage developers to strongly weight user’s pain from
    the break in stream-compatibility against the improvements. One example of a worthwhile
    improvement would be to change algorithms for a significant increase in performance,
    for example, moving from the [Box-Muller transform](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform)
    method of Gaussian variate generation to the faster [Ziggurat algorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm).
    An example of a discouraged improvement would be tweaking the Ziggurat tables
    just a little bit for a small performance improvement.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引入新功能或提高[`Generator`](generator.html#numpy.random.Generator "numpy.random.Generator")
    或 [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    的性能，我们*谨慎地*允许破坏流兼容性。此类更改将被视为功能，因此它们不会比特性的标准发布节奏更快（即在`X.Y`上的发布，而不是`X.Y.Z`）。为此目的，慢性不会被视为缺陷。破坏流兼容性的正确性
    bug 修复可以在 bug 修复版本中发生，正如惯例，但开发人员应考虑是否可以等待下一个功能发布。我们鼓励开发人员在改进与兼容性破坏造成的用户痛苦之间进行权衡。一个值得改进的例子是改变算法以显著提高性能，例如从[Box-Muller
    transform](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform)的高斯变量生成方法转移到更快的
    [Ziggurat algorithm](https://en.wikipedia.org/wiki/Ziggurat_algorithm)。一个不鼓励的改进例子将是微调
    Ziggurat 表，仅仅为了小幅性能提升。
- en: Note
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In particular, [`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    is allowed to change the default [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") that it uses (again, with *caution* and plenty of
    advance warning).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，允许[`default_rng`](generator.html#numpy.random.default_rng "numpy.random.default_rng")
    更改它使用的默认 [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator")（同样，需要*谨慎*和充分的提前警告）。
- en: In general, [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") classes have stronger guarantees of version-to-version
    stream compatibility. This allows them to be a firmer building block for downstream
    users that need it. Their limited API surface makes it easier for them to maintain
    this compatibility from version to version. See the docstrings of each [`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") class for their individual compatibility guarantees.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 类拥有更强的版本之间流兼容性的保证。这使它们成为下游用户的更牢固的构建模块，需要使用者。它们有限的
    API 界面使它们更容易地在版本之间保持兼容性。查看每个[`BitGenerator`](bit_generators/generated/numpy.random.BitGenerator.html#numpy.random.BitGenerator
    "numpy.random.BitGenerator") 类的文档字符串，了解其个别的兼容性保证。
- en: The legacy [`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")
    and the [associated convenience functions](legacy.html#functions-in-numpy-random)
    have a stricter version-to-version compatibility guarantee. For reasons outlined
    in [NEP 19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19 "(in NumPy Enhancement
    Proposals)"), we had made stronger promises about their version-to-version stability
    early in NumPy’s development. There are still some limited use cases for this
    kind of compatibility (like generating data for tests), so we maintain as much
    compatibility as we can. There will be no more modifications to [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState"), not even to fix correctness bugs. There are a few
    gray areas where we can make minor fixes to keep [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") working without segfaulting as NumPy’s internals change,
    and some docstring fixes. However, the previously-mentioned caveats about the
    variability from machine to machine and build to build still apply to [`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState") just as much as it does to [`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator").
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留的[`RandomState`](legacy.html#numpy.random.RandomState "numpy.random.RandomState")和[相关方便的函数](legacy.html#functions-in-numpy-random)拥有更严格的版本兼容性保证。出于[NEP
    19](https://numpy.org/neps/nep-0019-rng-policy.html#nep19 "(in NumPy Enhancement
    Proposals)")中概述的原因，在NumPy的早期开发阶段，我们对它们的版本间稳定性做出了更强的承诺。仍然存在一些有限的使用情况需要这种兼容性（比如为测试生成数据），因此我们尽可能地保持兼容性。不会对[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")进行任何修改，甚至不能修复正确性错误。我们可以在一些灰色地带进行一些微小的修复，以使[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")在NumPy内部发生变化时仍能正常工作，以及一些文档字符串的修复。然而，之前提到的关于从机器到机器和构建到构建的变异性的注意事项同样适用于[`RandomState`](legacy.html#numpy.random.RandomState
    "numpy.random.RandomState")和[`Generator`](generator.html#numpy.random.Generator
    "numpy.random.Generator")。
