- en: scipy.ndimage.gaussian_filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.gaussian_filter.html#scipy.ndimage.gaussian_filter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.gaussian_filter.html#scipy.ndimage.gaussian_filter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional Gaussian filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The input array.
  prefs: []
  type: TYPE_NORMAL
- en: '**sigma**scalar or sequence of scalars'
  prefs: []
  type: TYPE_NORMAL
- en: Standard deviation for Gaussian kernel. The standard deviations of the Gaussian
    filter are given for each axis as a sequence, or as a single number, in which
    case it is equal for all axes.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**int or sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the filter along each axis is given as a sequence of integers,
    or as a single number. An order of 0 corresponds to convolution with a Gaussian
    kernel. A positive order corresponds to convolution with that derivative of a
    Gaussian.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**array or dtype, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The array in which to place the output, or the dtype of the returned array.
    By default an array of the same dtype as input will be created.
  prefs: []
  type: TYPE_NORMAL
- en: '**mode**str or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *mode* parameter determines how the input array is extended when the filter
    overlaps a border. By passing a sequence of modes with length equal to the number
    of dimensions of the input array, different modes can be specified along each
    axis. Default value is ‘reflect’. The valid values and their behavior is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘reflect’ (*d c b a | a b c d | d c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the edge of the last pixel. This mode
    is also sometimes referred to as half-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘constant’ (*k k k k | a b c d | k k k k*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by filling all values beyond the edge with the same constant
    value, defined by the *cval* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: ‘nearest’ (*a a a a | a b c d | d d d d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by replicating the last pixel.
  prefs: []
  type: TYPE_NORMAL
- en: ‘mirror’ (*d c b | a b c d | c b a*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by reflecting about the center of the last pixel. This
    mode is also sometimes referred to as whole-sample symmetric.
  prefs: []
  type: TYPE_NORMAL
- en: ‘wrap’ (*a b c d | a b c d | a b c d*)
  prefs: []
  type: TYPE_NORMAL
- en: The input is extended by wrapping around to the opposite edge.
  prefs: []
  type: TYPE_NORMAL
- en: 'For consistency with the interpolation functions, the following mode names
    can also be used:'
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-constant’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-mirror’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘reflect’.
  prefs: []
  type: TYPE_NORMAL
- en: ‘grid-wrap’
  prefs: []
  type: TYPE_NORMAL
- en: This is a synonym for ‘wrap’.
  prefs: []
  type: TYPE_NORMAL
- en: '**cval**scalar, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Value to fill past edges of input if *mode* is ‘constant’. Default is 0.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**truncate**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Truncate the filter at this many standard deviations. Default is 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**radius**None or int or sequence of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Radius of the Gaussian kernel. The radius are given for each axis as a sequence,
    or as a single number, in which case it is equal for all axes. If specified, the
    size of the kernel along each axis will be `2*radius + 1`, and *truncate* is ignored.
    Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: '**axes**tuple of int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If None, *input* is filtered along all axes. Otherwise, *input* is filtered
    along the specified axes. When *axes* is specified, any tuples used for *sigma*,
    *order*, *mode* and/or *radius* must match the length of *axes*. The ith entry
    in any of these tuples corresponds to the ith entry in *axes*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**gaussian_filter**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Returned array of same shape as *input*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The multidimensional filter is implemented as a sequence of 1-D convolution
    filters. The intermediate arrays are stored in the same data type as the output.
    Therefore, for output types with a limited precision, the results may be imprecise
    because intermediate results may be stored with insufficient precision.
  prefs: []
  type: TYPE_NORMAL
- en: The Gaussian kernel will have size `2*radius + 1` along each axis. If *radius*
    is None, the default `radius = round(truncate * sigma)` will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-ndimage-gaussian_filter-1.png](../Images/b736ba113b3d19ed90869d2d11890253.png)'
  prefs: []
  type: TYPE_IMG
