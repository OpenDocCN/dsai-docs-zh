- en: Development workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发工作流程
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/contributor/development_workflow.html)
- en: '*Note: consider watching* [SciPy Development Workflow](https://youtu.be/HgU01gJbzMY)
    *before or after reading to see an example of fixing a bug and submitting a pull
    request.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*注：在阅读或之后，考虑观看* [SciPy 开发工作流程](https://youtu.be/HgU01gJbzMY) *的示例，以修复 bug 并提交拉取请求。*'
- en: This guide assumes that you have created your own fork (copy) of the SciPy repository,
    cloned the repository on your own machine, and built SciPy from this source code.
    If you haven’t, check the [Building from source](../../building/index.html#building-from-source)
    pages appropriate to your system. Before getting started here, there are two other
    things you need to do just once before you start modifying SciPy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南假定你已经创建了自己的 SciPy 仓库分支（副本），在你自己的机器上克隆了仓库，并从这个源代码构建了 SciPy。如果没有，请查看适合你系统的
    [从源码构建](../../building/index.html#building-from-source) 页面。在开始之前，还有两件事你需要做一次：
- en: 'In a terminal, introduce yourself to Git:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，向 Git 介绍你自己：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This information credits you for your work, but note that it will become publicly
    available if you “push” your work to GitHub. See [Setting your commit email address
    in Git](https://help.github.com/en/articles/setting-your-commit-email-address-in-git)
    for more information.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些信息为你的工作贡献提供了认可，但请注意，如果你“推送”你的工作到 GitHub，这些信息将会变成公开可见。更多信息请参见 [设置你的 Git 提交邮箱地址](https://help.github.com/en/articles/setting-your-commit-email-address-in-git)。
- en: 'Navigate to the root directory of your local SciPy repository and enter:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到你本地 SciPy 仓库的根目录，并输入：
- en: '[PRE1]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This associates the name `upstream` with the official SciPy repository located
    at [https://github.com/scipy/scipy.git](https://github.com/scipy/scipy.git). Note
    that when you cloned your fork of the SciPy repository, Git already associated
    the name `origin` with your fork. The reason you need both of these [“remotes”](https://help.github.com/en/categories/managing-remotes)
    is that you will typically start with the latest version of SciPy from the official
    repository `upstream`, make changes, “push” your changes to your fork of the repository
    `origin`, and then submit a “pull request” asking SciPy to “pull” your changes
    from your fork into the official repository.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将把名字 `upstream` 关联到位于 [https://github.com/scipy/scipy.git](https://github.com/scipy/scipy.git)
    的官方 SciPy 仓库。请注意，当你克隆 SciPy 仓库的分支时，Git 已经将名字 `origin` 关联到你的分支上。你需要这两个 [“远程”](https://help.github.com/en/categories/managing-remotes)
    的原因是，你通常会从官方仓库 `upstream` 开始，做出改动，然后把你的改动“推送”到你的分支 `origin`，然后提交一个“拉取请求”请求 SciPy
    把你的改动从你的分支合并到官方仓库。
- en: 'Initialize git submodules:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化 git 子模块：
- en: '[PRE2]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This fetches and updates any submodules that SciPy needs (such as *Boost*).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将获取并更新 SciPy 所需的任何子模块（如 *Boost*）。
- en: Basic workflow
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本工作流程
- en: 'In short:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之：
- en: Start a new *feature branch* for each set of edits that you do. See [below](#making-a-new-feature-branch).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次编辑时，请为每组编辑启动一个*功能分支*。参见 [下文](#making-a-new-feature-branch)。
- en: Hack away! See [below](#editing-workflow).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始吧！参见 [下文](#editing-workflow)。
- en: 'When finished:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后：
- en: '*Contributors*: push your feature branch to your own Github repo, and [create
    a pull request](#asking-for-merging).'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*贡献者*：将你的功能分支推送到你自己的 Github 仓库，并[创建一个拉取请求](#asking-for-merging)。'
- en: '*Core developers* If you want to push changes without further review, see the
    notes [below](../gitwash/useful_git.html#pushing-to-main).'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*核心开发者* 如果你想在无需进一步审核的情况下推送更改，请参阅下文 [这里](../gitwash/useful_git.html#pushing-to-main)
    的注意事项。'
- en: This way of working helps to keep work well organized and the history as clear
    as possible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式有助于保持工作有序，并尽可能清晰地记录历史。
- en: See also
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: There are many online tutorials to help you [learn git](https://www.atlassian.com/git/tutorials/).
    For discussions of specific git workflows, see these discussions on [linux git
    workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html),
    and [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多在线教程可以帮助你[学习 git](https://www.atlassian.com/git/tutorials/)。关于特定 git 工作流的讨论，请参阅这些讨论：[linux
    git workflow](https://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html)，以及
    [ipython git workflow](https://mail.python.org/pipermail/ipython-dev/2010-October/005632.html)。
- en: '### Making a new feature branch'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '### 制作一个新的功能分支'
- en: 'First, navigate to the SciPy root directory in your terminal and fetch new
    commits from the `upstream` repository:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在终端中导航到 SciPy 根目录，并从`upstream`存储库获取新的提交：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, create a new branch based on the main branch of the upstream repository:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上游存储库的主分支基础上创建一个新分支：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Equivalently, you might want to keep the main branch of your own repository
    up to date and create a new branch based on that:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可能希望保持自己仓库的主分支更新，并基于此创建一个新分支：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In order, these commands
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序执行以下命令
- en: ensure that the `main` branch of your local repository is checked out,
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的本地仓库当前检出了`main`分支，
- en: apply all the latest changes from the `upstream/main` (main SciPy repository
    main branch) to your local `main` branch, and
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有最新的更改从`upstream/main`（SciPy 仓库的主分支）应用到您的本地`main`分支，并
- en: create and check out a new branch (`-b`) based on your local `main` branch.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并检出一个基于您本地`main`分支的新分支（使用 `-b`）。
- en: In any case, it’s important that your feature branch include the latest changes
    from the upstream main to help avoid [merge conflicts](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line)
    when it’s time to submit a pull request.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，确保您的功能分支包含来自上游主分支的最新更改，以帮助避免提交拉取请求时的[合并冲突](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line)。
- en: 'It’s also a good idea to build this branch and run tests before continuing.
    Assuming you’ve followed one of the [Building from source](../../building/index.html#building-from-source)
    pages to set up your development environment, you’ll need to activate your development
    environment and then run tests (note that the `dev.py test` command will perform
    a build automatically if needed):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，建议先构建并运行测试这个分支。假设您已经按照其中一个[从源代码构建](../../building/index.html#building-from-source)页面设置好了开发环境，您需要激活开发环境，然后运行测试（请注意，如果需要，`dev.py
    test` 命令将自动执行构建）：
- en: '[PRE6]  ### The editing workflow'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]  ### 编辑工作流程'
- en: Overview
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 概述
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In more detail
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更详细地说，
- en: Make some changes. When you feel that you’ve made a complete, working set of
    related changes, move on to the next steps.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些更改。当您感觉已经完成了一个完整的、可工作的相关更改集时，继续下一步骤。
- en: 'Optional: Check which files have changed with `git status` (see [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)).
    You’ll see a listing like this one:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选步骤：使用 `git status` 检查更改的文件（参见 [git status](https://www.kernel.org/pub/software/scm/git/docs/git-status.html)）。您会看到如下列表：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Optional: Compare the changes with the previous version using with `git diff`
    ([git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)).
    This brings up a simple text browser interface that highlights the difference
    between your files and the previous version.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选步骤：使用 `git diff` 比较与上一个版本的更改（参见 [git diff](https://www.kernel.org/pub/software/scm/git/docs/git-diff.html)）。这将打开一个简单的文本浏览器界面，突出显示您的文件与上一个版本之间的差异。
- en: Add any relevant modified or new files using `git add modified_file` (see [git
    add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)). This puts
    the files into a staging area, which is a queue of files that will be added to
    your next commit. Only add files that have related, complete changes. Leave files
    with unfinished changes for later commits.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git add modified_file` 添加任何相关修改或新文件（参见 [git add](https://www.kernel.org/pub/software/scm/git/docs/git-add.html)）。这将把文件放入暂存区，即将添加到您的下一个提交的文件队列中。仅添加具有相关、完整更改的文件。将带有未完成更改的文件留到稍后提交。
- en: 'To commit the staged files into the local copy of your repo, do `git commit`.
    At this point, a text editor will open up to allow you to write a commit message.
    Read the [commit message section](#writing-the-commit-message) to be sure that
    you are writing a properly formatted and sufficiently detailed commit message.
    After saving your message and closing the editor, your commit will be saved. For
    trivial commits, a short commit message can be passed in through the command line
    using the `-m` flag. For example, `git commit -am "ENH: Some message"`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要将暂存的文件提交到本地仓库的副本中，请运行 `git commit`。此时，将会打开一个文本编辑器，允许您编写提交消息。请阅读[提交消息部分](#writing-the-commit-message)，确保您编写了格式正确且足够详细的提交消息。保存消息并关闭编辑器后，您的提交将被保存。对于简单的提交，可以使用
    `-m` 标志通过命令行传递简短的提交消息。例如，`git commit -am "ENH: Some message"`。'
- en: 'In some cases, you will see this form of the commit command: `git commit -a`.
    The extra `-a` flag automatically commits all modified files and removes all deleted
    files. This can save you some typing of numerous `git add` commands; however,
    it can add unwanted changes to a commit if you’re not careful. For more information,
    see [why the -a flag?](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - and the helpful use-case description in the [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git).'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，你会看到这种形式的提交命令：`git commit -a`。额外的 `-a` 标志会自动提交所有修改的文件并移除所有删除的文件。这可以节省你键入大量
    `git add` 命令的时间；但是，如果不小心，它可能会向提交添加不必要的更改。欲了解更多信息，请参见 [为什么使用 -a 标志？](http://www.gitready.com/beginner/2009/01/18/the-staging-area.html)
    - 以及在 [tangled working copy problem](https://tomayko.com/writings/the-thing-about-git)
    中的有用用例描述。
- en: 'Push the changes to your forked repo on [github](https://github.com/scipy/scipy):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到您在 [github](https://github.com/scipy/scipy) 上分叉的仓库：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more information, see [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html).
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参见 [git push](https://www.kernel.org/pub/software/scm/git/docs/git-push.html)。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Assuming you have followed the instructions in these pages, git will create
    a default link to your [github](https://github.com/scipy/scipy) repo called `origin`.
    In git >= 1.7, you can ensure that the link to origin is permanently set by using
    the `--set-upstream` option:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经按照这些页面的说明操作，git 将会为你的 [github](https://github.com/scipy/scipy) 仓库创建一个名为
    `origin` 的默认链接。在 git >= 1.7 中，你可以通过使用 `--set-upstream` 选项来永久设置到 origin 的链接：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From now on, [git](https://git-scm.com/) will know that `my-new-feature` is
    related to the `my-new-feature` branch in your own [github](https://github.com/scipy/scipy)
    repo. Subsequent push calls are then simplified to the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，[git](https://git-scm.com/) 将会知道 `my-new-feature` 与你自己的[github](https://github.com/scipy/scipy)
    仓库中的 `my-new-feature` 分支相关联。随后的推送调用将简化为以下内容：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You have to use `--set-upstream` for each new branch that you create.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个新分支的创建，你必须使用`--set-upstream`。
- en: It may be the case that while you were working on your edits, new commits have
    been added to `upstream` that affect your work. In this case, follow the [Rebasing
    on main](../gitwash/useful_git.html#rebasing-on-main) instructions to apply those
    changes to your branch.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在您编辑时，已经有新的提交添加到 `upstream`，这些提交可能会影响到您的工作。在这种情况下，按照 [在主分支上重新基础](../gitwash/useful_git.html#rebasing-on-main)
    的说明将这些更改应用到您的分支上。
- en: '#### Writing the commit message'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 撰写提交信息'
- en: 'Commit messages should be clear and follow a few basic rules. Example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提交信息应当清晰，并遵循几个基本规则。例如：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Describing the motivation for a change, the nature of a bug for bug fixes or
    some details on what an enhancement does are also good to include in a commit
    message. Messages should be understandable without looking at the code changes.
    A commit message like `MAINT: fixed another one` is an example of what not to
    do; the reader has to go look for context elsewhere.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '描述变更的动机，修复bug的性质或者增强功能的细节都是值得在提交信息中包含的。提交信息应该在不查看代码变更的情况下也能够理解。像 `MAINT: fixed
    another one` 这样的提交信息就是不好的例子；读者必须去寻找其他上下文来理解。'
- en: 'Standard acronyms to start the commit message with are:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 提交信息的标准首字母缩写包括：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can add some markers to skip part of the continuous integration. See [Continuous
    Integration](continuous_integration.html#continuous-integration).  #### Asking
    for your changes to be merged with the main repo'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加一些标记来跳过连续集成的部分。参见 [连续集成](continuous_integration.html#continuous-integration)。####
    请求将您的更改与主仓库合并
- en: When you feel your work is finished, you can create a pull request (PR). Github
    has a nice help page that outlines the process for [filing pull requests](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当你觉得你的工作完成时，你可以创建一个拉取请求（PR）。Github有一个很好的帮助页面介绍了 [如何提交拉取请求](https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request)。
- en: 'If your changes involve modifications to the API or addition/modification of
    a function, you should initiate a code review. This involves sending an email
    to the [SciPy mailing list](https://mail.python.org/mailman3/lists/scipy-dev.python.org/)
    with a link to your PR along with a description of and a motivation for your changes.  ####
    Checklist before submitting a PR'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的更改涉及对API的修改或者函数的添加/修改，您应该启动一次代码审查。这包括向 [SciPy邮件列表](https://mail.python.org/mailman3/lists/scipy-dev.python.org/)
    发送一封带有您PR链接以及变更描述和动机的电子邮件。#### 提交PR之前的检查清单
- en: Did you check that the code can be distributed under a BSD license? See [License
    Considerations](../hacking.html#license-considerations).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您确认代码可以根据BSD许可证分发吗？请参阅[许可证考虑](../hacking.html#license-considerations)。
- en: Are there unit tests with good code coverage? See [NumPy/SciPy Testing Guidelines](https://docs.scipy.org/doc/numpy/reference/testing.html).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有良好代码覆盖率的单元测试？请参阅[NumPy/SciPy测试指南](https://docs.scipy.org/doc/numpy/reference/testing.html)。
- en: Do all unit tests pass locally? See [Building from source for SciPy development](../../building/index.html#the-dev-py-interface).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有单元测试在本地都通过了吗？请参阅[从源代码构建SciPy开发](../../building/index.html#the-dev-py-interface)。
- en: Do all public function have docstrings including examples? See the [numpydoc
    docstring guide](https://numpydoc.readthedocs.io/en/latest/format.html).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有公共函数都有文档字符串，包括示例吗？请参阅[numpydoc文档字符串指南](https://numpydoc.readthedocs.io/en/latest/format.html)。
- en: Does the documentation render correctly? See [Rendering documentation locally
    with Sphinx](rendering_documentation.html#rendering-documentation).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档是否正确渲染？请参阅[使用Sphinx在本地渲染文档](rendering_documentation.html#rendering-documentation)。
- en: Is the code style correct? See [PEP8 and SciPy](pep8.html#pep8-scipy).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码风格是否正确？请参阅[PEP8和SciPy](pep8.html#pep8-scipy)。
- en: Are there benchmarks? See [Benchmarking SciPy with airspeed velocity](benchmarking.html#benchmarking-with-asv).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有基准测试？请参阅[使用airspeed velocity对SciPy进行基准测试](benchmarking.html#benchmarking-with-asv)。
- en: Is the commit message [formatted correctly](https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
    "(in NumPy v2.0.dev0)")?
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交消息格式是否正确？请参阅[正确格式化的提交消息](https://numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
    "(在NumPy v2.0.dev0)")？
- en: 'Is the docstring of the new functionality tagged with `.. versionadded:: X.Y.Z`
    (where `X.Y.Z` is the version number of the next release? See the `updating`,
    `workers`, and `constraints` documentation of [`differential_evolution`](https://github.com/scipy/scipy/blob/main/scipy/optimize/_differentialevolution.py),
    for example.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '新功能的文档字符串是否标记为`.. versionadded:: X.Y.Z`（其中`X.Y.Z`是下一个版本的版本号）？例如，请参阅[`differential_evolution`](https://github.com/scipy/scipy/blob/main/scipy/optimize/_differentialevolution.py)的`updating`、`workers`和`constraints`文档。'
- en: In case of larger additions, is there a tutorial or more extensive module-level
    description? Tutorial files are in `doc/source/tutorial`.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有较大的新增内容，是否有教程或更详细的模块级描述？教程文件在`doc/source/tutorial`中。
- en: If new files are added, are they integrated correctly via `meson.build`? See
    [Compiled code](contributor_toc.html#compiled-code) for more information.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新增文件，它们是否通过`meson.build`正确集成？有关更多信息，请参阅[编译代码](contributor_toc.html#compiled-code)。
