- en: Creating a development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/development/contributing_environment.html](https://pandas.pydata.org/docs/development/contributing_environment.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To test out code changes, you’ll need to build pandas from source, which requires
    a C/C++ compiler and Python environment. If you’re making documentation changes,
    you can skip to [contributing to the documentation](contributing_documentation.html#contributing-documentation)
    but if you skip creating the development environment you won’t be able to build
    the documentation locally before pushing your changes. It’s recommended to also
    install the [pre-commit hooks](contributing_codebase.html#contributing-pre-commit).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: install a C compiler'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How to do this will depend on your platform. If you choose to use `Docker` or
    `GitPod` in the next step, then you can skip this step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**'
  prefs: []
  type: TYPE_NORMAL
- en: You will need [Build Tools for Visual Studio 2022](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You DO NOT need to install Visual Studio 2022. You only need “Build Tools for
    Visual Studio 2022” found by scrolling down to “All downloads” -> “Tools for Visual
    Studio”. In the installer, select the “Desktop development with C++” Workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can install the necessary components on the commandline using
    [vs_BuildTools.exe](https://learn.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use the [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)
    and consult the `Linux` instructions below.
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS**'
  prefs: []
  type: TYPE_NORMAL
- en: To use the [mamba](#contributing-mamba)-based compilers, you will need to install
    the Developer Tools using `xcode-select --install`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use a different compiler, general information can be found
    here: [https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**'
  prefs: []
  type: TYPE_NORMAL
- en: For Linux-based [mamba](#contributing-mamba) installations, you won’t have to
    install any additional components outside of the mamba environment. The instructions
    below are only needed if your setup isn’t based on mamba environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some Linux distributions will come with a pre-installed C compiler. To find
    out which compilers (and versions) are installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[GCC (GNU Compiler Collection)](https://gcc.gnu.org/), is a widely used compiler,
    which supports C and a number of other languages. If GCC is listed as an installed
    compiler nothing more is required.'
  prefs: []
  type: TYPE_NORMAL
- en: If no C compiler is installed, or you wish to upgrade, or you’re using a different
    Linux distribution, consult your favorite search engine for compiler installation/update
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Let us know if you have any difficulties by opening an issue or reaching out
    on our contributor community [Slack](community.html#community-slack).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: create an isolated environment'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin, please:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have [cloned the repository](contributing.html#contributing-forking)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd` to the pandas source directory you just created with the clone command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Option 1: using mamba (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your mamba is up to date (`mamba update mamba`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]  ### Option 2: using pip'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unix**/**macOS with virtualenv**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Unix**/**macOS with pyenv**'
  prefs: []
  type: TYPE_NORMAL
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Windows**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  prefs: []
  type: TYPE_NORMAL
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Option 3: using Docker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Commands**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run Container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCharm (Professional)**'
  prefs: []
  type: TYPE_NORMAL
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 4: using Gitpod'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: build and install pandas'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are currently two supported ways of building pandas, pip/meson and setuptools(setup.py).
    Historically, pandas has only supported using setuptools to build pandas. However,
    this method requires a lot of convoluted code in setup.py and also has many issues
    in compiling pandas in parallel due to limitations in setuptools.
  prefs: []
  type: TYPE_NORMAL
- en: The newer build system, invokes the meson backend through pip (via a [PEP 517](https://peps.python.org/pep-0517/)
    build). It automatically uses all available cores on your CPU, and also avoids
    the need for manual rebuilds by rebuilding automatically whenever pandas is imported
    (with an editable install).
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, you should compile pandas with meson. Because the meson build
    system is newer, you may find bugs/minor issues as it matures. You can report
    these bugs [here](https://github.com/pandas-dev/pandas/issues/49683).
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile pandas with meson, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The version number is pulled from the latest repository tag. Be sure to fetch
    the latest tags from upstream before building:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Build options**'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to pass options from the pip frontend to the meson backend if
    you would like to configure your install. Occasionally, you’ll want to use this
    to adjust the build directory, and/or toggle debug/optimization levels.
  prefs: []
  type: TYPE_NORMAL
- en: You can pass a build directory to pandas by appending `--config-settings builddir="your
    builddir here"` to your pip command. This option allows you to configure where
    meson stores your built C extensions, and allows for fast rebuilds.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it might be useful to compile pandas with debugging symbols, when
    debugging C extensions. Appending `--config-settings setup-args="-Ddebug=true"`
    will do the trick.
  prefs: []
  type: TYPE_NORMAL
- en: With pip, it is possible to chain together multiple config settings (for example
    specifying both a build directory and building with debug symbols would look like
    `--config-settings builddir="your builddir here" --config-settings=setup-args="-Dbuildtype=debug"`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiling pandas with setup.py**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method of compiling pandas will be deprecated and removed very soon, as
    the meson backend matures.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile pandas with setuptools, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If pandas is already installed (via meson), you have to uninstall it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is because python setup.py develop will not uninstall the loader script
    that `meson-python` uses to import the extension from the build folder, which
    may cause errors such as an `FileNotFoundError` to be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You will need to repeat this step each time the C extensions change, for example
    if you modified any file in `pandas/_libs` or if you did a fetch and merge from
    `upstream/main`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Checking the build**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point you should be able to import pandas from your locally built version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At this point you may want to try [running the test suite](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite).
  prefs: []
  type: TYPE_NORMAL
- en: '**Keeping up to date with the latest build**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When building pandas with meson, importing pandas will automatically trigger
    a rebuild, even when C/Cython files are modified. By default, no output will be
    produced by this rebuild (the import will just take longer). If you would like
    to see meson’s output when importing pandas, you can set the environment variable
    `MESONPY_EDTIABLE_VERBOSE`. For example, this would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to see this verbose output every time, you can set the `editable-verbose`
    config setting to `true` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you ever find yourself wondering whether setuptools or meson was used to
    build your pandas, you can check the value of `pandas._built_with_meson`, which
    will be true if meson was used to compile pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: install a C compiler'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How to do this will depend on your platform. If you choose to use `Docker` or
    `GitPod` in the next step, then you can skip this step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**'
  prefs: []
  type: TYPE_NORMAL
- en: You will need [Build Tools for Visual Studio 2022](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2022).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You DO NOT need to install Visual Studio 2022. You only need “Build Tools for
    Visual Studio 2022” found by scrolling down to “All downloads” -> “Tools for Visual
    Studio”. In the installer, select the “Desktop development with C++” Workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can install the necessary components on the commandline using
    [vs_BuildTools.exe](https://learn.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?source=recommendations&view=vs-2022)
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use the [WSL](https://learn.microsoft.com/en-us/windows/wsl/install)
    and consult the `Linux` instructions below.
  prefs: []
  type: TYPE_NORMAL
- en: '**macOS**'
  prefs: []
  type: TYPE_NORMAL
- en: To use the [mamba](#contributing-mamba)-based compilers, you will need to install
    the Developer Tools using `xcode-select --install`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to use a different compiler, general information can be found
    here: [https://devguide.python.org/setup/#macos](https://devguide.python.org/setup/#macos)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**'
  prefs: []
  type: TYPE_NORMAL
- en: For Linux-based [mamba](#contributing-mamba) installations, you won’t have to
    install any additional components outside of the mamba environment. The instructions
    below are only needed if your setup isn’t based on mamba environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some Linux distributions will come with a pre-installed C compiler. To find
    out which compilers (and versions) are installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[GCC (GNU Compiler Collection)](https://gcc.gnu.org/), is a widely used compiler,
    which supports C and a number of other languages. If GCC is listed as an installed
    compiler nothing more is required.'
  prefs: []
  type: TYPE_NORMAL
- en: If no C compiler is installed, or you wish to upgrade, or you’re using a different
    Linux distribution, consult your favorite search engine for compiler installation/update
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Let us know if you have any difficulties by opening an issue or reaching out
    on our contributor community [Slack](community.html#community-slack).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: create an isolated environment'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin, please:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you have [cloned the repository](contributing.html#contributing-forking)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd` to the pandas source directory you just created with the clone command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '### Option 1: using mamba (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your mamba is up to date (`mamba update mamba`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]  ### Option 2: using pip'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unix**/**macOS with virtualenv**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Unix**/**macOS with pyenv**'
  prefs: []
  type: TYPE_NORMAL
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Windows**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  prefs: []
  type: TYPE_NORMAL
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Option 3: using Docker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Commands**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run Container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCharm (Professional)**'
  prefs: []
  type: TYPE_NORMAL
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 4: using Gitpod'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  prefs: []
  type: TYPE_NORMAL
- en: '### Option 1: using mamba (recommended)'
  prefs: []
  type: TYPE_NORMAL
- en: Install miniforge to get [mamba](https://mamba.readthedocs.io/en/latest/installation/mamba-installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your mamba is up to date (`mamba update mamba`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create and activate the `pandas-dev` mamba environment using the following
    commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '### Option 2: using pip'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to have at least the [minimum Python version](../getting_started/install.html#install-version)
    that pandas supports. You also need to have `setuptools` 51.0.0 or later to build
    pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Unix**/**macOS with virtualenv**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Unix**/**macOS with pyenv**'
  prefs: []
  type: TYPE_NORMAL
- en: Consult the docs for setting up pyenv [here](https://github.com/pyenv/pyenv).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Windows**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is a brief overview on how to set-up a virtual environment with Powershell
    under Windows. For details please refer to the [official virtualenv user guide](https://virtualenv.pypa.io/en/latest/user_guide.html#activators).
  prefs: []
  type: TYPE_NORMAL
- en: Use an ENV_DIR of your choice. We’ll use `~\\virtualenvs\\pandas-dev` where
    `~` is the folder pointed to by either `$env:USERPROFILE` (Powershell) or `%USERPROFILE%`
    (cmd.exe) environment variable. Any parent directories should already exist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Option 3: using Docker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pandas provides a `DockerFile` in the root directory to build a Docker image
    with a full pandas development environment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker Commands**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build the Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run Container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Even easier, you can integrate Docker with the following IDEs:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the DockerFile to launch a remote session with Visual Studio Code,
    a popular free IDE, using the `.devcontainer.json` file. See [https://code.visualstudio.com/docs/remote/containers](https://code.visualstudio.com/docs/remote/containers)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCharm (Professional)**'
  prefs: []
  type: TYPE_NORMAL
- en: Enable Docker support and use the Services tool window to build and manage images
    as well as run and interact with containers. See [https://www.jetbrains.com/help/pycharm/docker.html](https://www.jetbrains.com/help/pycharm/docker.html)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 4: using Gitpod'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gitpod is an open-source platform that automatically creates the correct development
    environment right in your browser, reducing the need to install local development
    environments and deal with incompatible dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Windows user, unfamiliar with using the command line or building
    pandas for the first time, it is often faster to build with Gitpod. Here are the
    in-depth instructions for [building pandas with GitPod](contributing_gitpod.html#contributing-gitpod).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: build and install pandas'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are currently two supported ways of building pandas, pip/meson and setuptools(setup.py).
    Historically, pandas has only supported using setuptools to build pandas. However,
    this method requires a lot of convoluted code in setup.py and also has many issues
    in compiling pandas in parallel due to limitations in setuptools.
  prefs: []
  type: TYPE_NORMAL
- en: The newer build system, invokes the meson backend through pip (via a [PEP 517](https://peps.python.org/pep-0517/)
    build). It automatically uses all available cores on your CPU, and also avoids
    the need for manual rebuilds by rebuilding automatically whenever pandas is imported
    (with an editable install).
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, you should compile pandas with meson. Because the meson build
    system is newer, you may find bugs/minor issues as it matures. You can report
    these bugs [here](https://github.com/pandas-dev/pandas/issues/49683).
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile pandas with meson, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The version number is pulled from the latest repository tag. Be sure to fetch
    the latest tags from upstream before building:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Build options**'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to pass options from the pip frontend to the meson backend if
    you would like to configure your install. Occasionally, you’ll want to use this
    to adjust the build directory, and/or toggle debug/optimization levels.
  prefs: []
  type: TYPE_NORMAL
- en: You can pass a build directory to pandas by appending `--config-settings builddir="your
    builddir here"` to your pip command. This option allows you to configure where
    meson stores your built C extensions, and allows for fast rebuilds.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it might be useful to compile pandas with debugging symbols, when
    debugging C extensions. Appending `--config-settings setup-args="-Ddebug=true"`
    will do the trick.
  prefs: []
  type: TYPE_NORMAL
- en: With pip, it is possible to chain together multiple config settings (for example
    specifying both a build directory and building with debug symbols would look like
    `--config-settings builddir="your builddir here" --config-settings=setup-args="-Dbuildtype=debug"`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiling pandas with setup.py**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method of compiling pandas will be deprecated and removed very soon, as
    the meson backend matures.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile pandas with setuptools, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If pandas is already installed (via meson), you have to uninstall it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is because python setup.py develop will not uninstall the loader script
    that `meson-python` uses to import the extension from the build folder, which
    may cause errors such as an `FileNotFoundError` to be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You will need to repeat this step each time the C extensions change, for example
    if you modified any file in `pandas/_libs` or if you did a fetch and merge from
    `upstream/main`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Checking the build**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point you should be able to import pandas from your locally built version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: At this point you may want to try [running the test suite](https://pandas.pydata.org/docs/dev/development/contributing_codebase.html#running-the-test-suite).
  prefs: []
  type: TYPE_NORMAL
- en: '**Keeping up to date with the latest build**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When building pandas with meson, importing pandas will automatically trigger
    a rebuild, even when C/Cython files are modified. By default, no output will be
    produced by this rebuild (the import will just take longer). If you would like
    to see meson’s output when importing pandas, you can set the environment variable
    `MESONPY_EDTIABLE_VERBOSE`. For example, this would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to see this verbose output every time, you can set the `editable-verbose`
    config setting to `true` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you ever find yourself wondering whether setuptools or meson was used to
    build your pandas, you can check the value of `pandas._built_with_meson`, which
    will be true if meson was used to compile pandas.
  prefs: []
  type: TYPE_NORMAL
