- en: numpy.take_along_axis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html](https://numpy.org/doc/1.26/reference/generated/numpy.take_along_axis.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Take values from the input array by matching 1d index and data slices.
  prefs: []
  type: TYPE_NORMAL
- en: This iterates over matching 1d slices oriented along the specified axis in the
    index and data arrays, and uses the former to look up values in the latter. These
    slices can be different lengths.
  prefs: []
  type: TYPE_NORMAL
- en: Functions returning an index along an axis, like [`argsort`](numpy.argsort.html#numpy.argsort
    "numpy.argsort") and [`argpartition`](numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), produce suitable indices for this function.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arr**ndarray (Ni…, M, Nk…)'
  prefs: []
  type: TYPE_NORMAL
- en: Source array
  prefs: []
  type: TYPE_NORMAL
- en: '**indices**ndarray (Ni…, J, Nk…)'
  prefs: []
  type: TYPE_NORMAL
- en: Indices to take along each 1d slice of *arr*. This must match the dimension
    of arr, but dimensions Ni and Nj only need to broadcast against *arr*.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int'
  prefs: []
  type: TYPE_NORMAL
- en: The axis to take 1d slices along. If axis is None, the input array is treated
    as if it had first been flattened to 1d, for consistency with [`sort`](numpy.sort.html#numpy.sort
    "numpy.sort") and [`argsort`](numpy.argsort.html#numpy.argsort "numpy.argsort").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'out: ndarray (Ni…, J, Nk…)'
  prefs: []
  type: TYPE_NORMAL
- en: The indexed result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`take`](numpy.take.html#numpy.take "numpy.take")'
  prefs: []
  type: TYPE_NORMAL
- en: Take along an axis, using the same indices for every 1d slice
  prefs: []
  type: TYPE_NORMAL
- en: '[`put_along_axis`](numpy.put_along_axis.html#numpy.put_along_axis "numpy.put_along_axis")'
  prefs: []
  type: TYPE_NORMAL
- en: Put values into the destination array by matching 1d index and data slices
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This is equivalent to (but faster than) the following use of [`ndindex`](numpy.ndindex.html#numpy.ndindex
    "numpy.ndindex") and [`s_`](numpy.s_.html#numpy.s_ "numpy.s_"), which sets each
    of `ii` and `kk` to a tuple of indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Equivalently, eliminating the inner loop, the last two lines would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: For this sample array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can sort either by using sort directly, or argsort and this function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The same works for max and min, if you maintain the trivial dimension with
    `keepdims`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If we want to get the max and min at the same time, we can stack the indices
    first
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
