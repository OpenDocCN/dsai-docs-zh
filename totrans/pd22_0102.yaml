- en: pandas.read_stata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html](https://pandas.pydata.org/docs/reference/api/pandas.read_stata.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Read Stata file into DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**filepath_or_buffer**str, path object or file-like object'
  prefs: []
  type: TYPE_NORMAL
- en: 'Any valid string path is acceptable. The string could be a URL. Valid URL schemes
    include http, ftp, s3, and file. For file URLs, a host is expected. A local file
    could be: `file://localhost/path/to/table.dta`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to pass in a path object, pandas accepts any `os.PathLike`.
  prefs: []
  type: TYPE_NORMAL
- en: By file-like object, we refer to objects with a `read()` method, such as a file
    handle (e.g. via builtin `open` function) or `StringIO`.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_dates**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Convert date variables to DataFrame time values.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_categoricals**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Read value labels and convert columns to Categorical/Factor variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**index_col**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Column to set as index.
  prefs: []
  type: TYPE_NORMAL
- en: '**convert_missing**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Flag indicating whether to convert missing values to their Stata representations.
    If False, missing values are replaced with nan. If True, columns containing missing
    values are returned with object data types and missing values are represented
    by StataMissingValue objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**preserve_dtypes**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Preserve Stata datatypes. If False, numeric data are upcast to pandas default
    types for foreign data (float64 or int64).
  prefs: []
  type: TYPE_NORMAL
- en: '**columns**list or None'
  prefs: []
  type: TYPE_NORMAL
- en: Columns to retain. Columns will be returned in the given order. None returns
    all columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**order_categoricals**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Flag indicating whether converted categorical data are ordered.
  prefs: []
  type: TYPE_NORMAL
- en: '**chunksize**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Return StataReader object for iterations, returns chunks with given number of
    lines.
  prefs: []
  type: TYPE_NORMAL
- en: '**iterator**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Return StataReader object.
  prefs: []
  type: TYPE_NORMAL
- en: '**compression**str or dict, default ‘infer’'
  prefs: []
  type: TYPE_NORMAL
- en: 'For on-the-fly decompression of on-disk data. If ‘infer’ and ‘filepath_or_buffer’
    is path-like, then detect compression from the following extensions: ‘.gz’, ‘.bz2’,
    ‘.zip’, ‘.xz’, ‘.zst’, ‘.tar’, ‘.tar.gz’, ‘.tar.xz’ or ‘.tar.bz2’ (otherwise no
    compression). If using ‘zip’ or ‘tar’, the ZIP file must contain only one data
    file to be read in. Set to `None` for no decompression. Can also be a dict with
    key `''method''` set to one of {`''zip''`, `''gzip''`, `''bz2''`, `''zstd''`,
    `''xz''`, `''tar''`} and other key-value pairs are forwarded to `zipfile.ZipFile`,
    `gzip.GzipFile`, `bz2.BZ2File`, `zstandard.ZstdDecompressor`, `lzma.LZMAFile`
    or `tarfile.TarFile`, respectively. As an example, the following could be passed
    for Zstandard decompression using a custom compression dictionary: `compression={''method'':
    ''zstd'', ''dict_data'': my_compression_dict}`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.5.0: Added support for .tar files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**storage_options**dict, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Extra options that make sense for a particular storage connection, e.g. host,
    port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded
    to `urllib.request.Request` as header options. For other URLs (e.g. starting with
    “s3://”, and “gcs://”) the key-value pairs are forwarded to `fsspec.open`. Please
    see `fsspec` and `urllib` for more details, and for more examples on storage options
    refer [here](https://pandas.pydata.org/docs/user_guide/io.html?highlight=storage_options#reading-writing-remote-files).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame or pandas.api.typing.StataReader
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`io.stata.StataReader`'
  prefs: []
  type: TYPE_NORMAL
- en: Low-level reader for Stata data files.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.to_stata`](pandas.DataFrame.to_stata.html#pandas.DataFrame.to_stata
    "pandas.DataFrame.to_stata")'
  prefs: []
  type: TYPE_NORMAL
- en: Export Stata data files.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Categorical variables read through an iterator may not have the same categories
    and dtype. This occurs when a variable stored in a DTA file is associated to an
    incomplete set of value labels that only label a strict subset of the values.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dummy stata for this example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Read a Stata dta file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Read a Stata dta file in 10,000 line chunks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
