["```py\n>>> from sympy.abc import x, y\n>>> from sympy import solve\n>>> solve(x**2 - y, x, dict=True)\n[{x: -sqrt(y)}, {x: sqrt(y)}] \n```", "```py\n>>> from sympy import solveset\n>>> from sympy.abc import x, y\n>>> solveset(x**2 - y, x)\n{-sqrt(y), sqrt(y)} \n```", "```py\n>>> from sympy import solve, solveset\n>>> from sympy.abc import x, y\n>>> solve(x**2 - y, x, dict=True)\n[{x: -sqrt(y)}, {x: sqrt(y)}]\n>>> solveset(x**2 - y, x)\n{-sqrt(y), sqrt(y)} \n```", "```py\n>>> from sympy import Eq, solve, solveset\n>>> from sympy.abc import x, y\n>>> eqn = Eq(x**2, y)\n>>> eqn\nEq(x**2, y)\n>>> solutions = solve(eqn, x, dict=True)\n>>> print(solutions)\n[{x: -sqrt(y)}, {x: sqrt(y)}]\n>>> solutions_set = solveset(eqn, x)\n>>> print(solutions_set)\n{-sqrt(y), sqrt(y)}\n>>> for solution_set in solutions_set:\n...     print(solution_set)\nsqrt(y)\n-sqrt(y) \n```", "```py\n>>> from sympy import Symbol, solve, solveset\n>>> x = Symbol('x')\n>>> solve(x**4 - 256, x, dict=True)\n[{x: -4}, {x: 4}, {x: -4*I}, {x: 4*I}]\n>>> solveset(x**4 - 256, x)\n{-4, 4, -4*I, 4*I} \n```", "```py\n>>> from sympy import Symbol, solve\n>>> x = Symbol('x', real=True)\n>>> solve(x**4 - 256, x, dict=True)\n[{x: -4}, {x: 4}] \n```", "```py\n>>> from sympy import Or, Symbol, solve\n>>> x = Symbol('x', real=True)\n>>> expr = (x-4)*(x-3)*(x-2)*(x-1)\n>>> solution = solve(expr, x)\n>>> print(solution)\n[1, 2, 3, 4]\n>>> solution_outside_2_3 = [v for v in solution if (v.is_real and Or(v<2,v>3))]\n>>> print(solution_outside_2_3)\n[1, 4] \n```", "```py\n>>> from sympy import S, solveset\n>>> from sympy.abc import x\n>>> solveset(x**4 - 256, x, domain=S.Reals)\n{-4, 4} \n```", "```py\n>>> from sympy import Interval, pi, sin, solveset\n>>> from sympy.abc import x\n>>> solveset(sin(x), x, Interval(-pi, pi))\n{0, -pi, pi} \n```", "```py\n>>> from sympy import solveset, S\n>>> from sympy.abc import x\n>>> solveset(x**2 + 1, x, domain=S.Reals)\nEmptySet \n```", "```py\n>>> from sympy import pprint, sin, solveset\n>>> from sympy.abc import x\n>>> solution = solveset(sin(x), x)\n>>> pprint(solution)\n{2*n*pi | n in Integers} U {2*n*pi + pi | n in Integers} \n```", "```py\n>>> from sympy import sin, solve\n>>> from sympy.calculus.util import periodicity\n>>> from sympy.abc import x\n>>> f = sin(x)\n>>> solve(f, x)\n[0, pi]\n>>> periodicity(f, x)\n2*pi \n```", "```py\n>>> from sympy.abc import x\n>>> from sympy import solve, diff\n>>> f = x**3 + x**2 - x\n>>> derivative = diff(f, x)\n>>> critical_points = solve(derivative, x, dict=True)\n>>> print(critical_points)\n[{x: -1}, {x: 1/3}]\n>>> point1, point2 = critical_points\n>>> print(f.subs(point1))\n1\n>>> print(f.subs(point2))\n-5/27\n>>> curvature = diff(f, x, 2)\n>>> print(curvature.subs(point1))\n-4\n>>> print(curvature.subs(point2))\n4 \n```", "```py\n>>> from sympy import solveset\n>>> from sympy.abc import x, y\n>>> solution_set = solveset(x**2 - y, x)\n>>> print(solution_set)\n{-sqrt(y), sqrt(y)}\n>>> solution_list = list(solution_set)\n>>> print(solution_list)\n[sqrt(y), -sqrt(y)] \n```", "```py\n>>> from sympy import S, solveset, symbols\n>>> x, y = symbols('x, y')\n>>> solution_set = solveset(x**2 - y, x, domain=S.Reals)\n>>> print(solution_set)\nIntersection({-sqrt(y), sqrt(y)}, Reals)\n>>> list(solution_set)\nTraceback (most recent call last):\n  ...\nTypeError: The computation had not completed because of the undecidable set\nmembership is found in every candidates. \n```", "```py\n>>> from sympy import S, Symbol, solveset\n>>> x = Symbol('x')\n>>> y = Symbol('y', real=True, positive=True)\n>>> solution_set = solveset(x**2 - y, x, domain=S.Reals)\n>>> print(solution_set)\n{-sqrt(y), sqrt(y)}\n>>> list(solution_set)\n[sqrt(y), -sqrt(y)] \n```", "```py\n>>> from sympy import S, solveset, symbols\n>>> x, y = symbols('x, y')\n>>> solution_set = solveset(x**2 - y, x, domain=S.Reals)\n>>> print(solution_set)\nIntersection({-sqrt(y), sqrt(y)}, Reals)\n>>> solution_set_args = solution_set.args\n>>> print(solution_set.args)\n(Reals, {-sqrt(y), sqrt(y)})\n>>> list(solution_set_args[1])\n[sqrt(y), -sqrt(y)] \n```", "```py\n>>> from sympy import cos, solve\n>>> from sympy.abc import x\n>>> solve(cos(x) - x, x, dict=True)\nTraceback (most recent call last):\n  ...\nNotImplementedError: multiple generators [x, cos(x)]\nNo algorithms are implemented to solve equation -x + cos(x) \n```"]