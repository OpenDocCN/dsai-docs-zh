["```py\n>>> from scipy.fft import fft, ifft\n>>> import numpy as np\n>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\n>>> y = fft(x)\n>>> y\narray([ 4.5       +0.j        ,  2.08155948-1.65109876j,\n -1.83155948+1.60822041j, -1.83155948-1.60822041j,\n 2.08155948+1.65109876j])\n>>> yinv = ifft(y)\n>>> yinv\narray([ 1.0+0.j,  2.0+0.j,  1.0+0.j, -1.0+0.j,  1.5+0.j]) \n```", "```py\n>>> np.sum(x)\n4.5 \n```", "```py\n>>> from scipy.fft import fft, fftfreq\n>>> import numpy as np\n>>> # Number of sample points\n>>> N = 600\n>>> # sample spacing\n>>> T = 1.0 / 800.0\n>>> x = np.linspace(0.0, N*T, N, endpoint=False)\n>>> y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\n>>> yf = fft(y)\n>>> xf = fftfreq(N, T)[:N//2]\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(xf, 2.0/N * np.abs(yf[0:N//2]))\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import fft, fftfreq\n>>> import numpy as np\n>>> # Number of sample points\n>>> N = 600\n>>> # sample spacing\n>>> T = 1.0 / 800.0\n>>> x = np.linspace(0.0, N*T, N, endpoint=False)\n>>> y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\n>>> yf = fft(y)\n>>> from scipy.signal.windows import blackman\n>>> w = blackman(N)\n>>> ywf = fft(y*w)\n>>> xf = fftfreq(N, T)[:N//2]\n>>> import matplotlib.pyplot as plt\n>>> plt.semilogy(xf[1:N//2], 2.0/N * np.abs(yf[1:N//2]), '-b')\n>>> plt.semilogy(xf[1:N//2], 2.0/N * np.abs(ywf[1:N//2]), '-r')\n>>> plt.legend(['FFT', 'FFT w. window'])\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import fftfreq\n>>> freq = fftfreq(8, 0.125)\n>>> freq\narray([ 0., 1., 2., 3., -4., -3., -2., -1.]) \n```", "```py\n>>> from scipy.fft import fftshift\n>>> x = np.arange(8)\n>>> fftshift(x)\narray([4, 5, 6, 7, 0, 1, 2, 3]) \n```", "```py\n>>> from scipy.fft import fft, fftfreq, fftshift\n>>> import numpy as np\n>>> # number of signal points\n>>> N = 400\n>>> # sample spacing\n>>> T = 1.0 / 800.0\n>>> x = np.linspace(0.0, N*T, N, endpoint=False)\n>>> y = np.exp(50.0 * 1.j * 2.0*np.pi*x) + 0.5*np.exp(-80.0 * 1.j * 2.0*np.pi*x)\n>>> yf = fft(y)\n>>> xf = fftfreq(N, T)\n>>> xf = fftshift(xf)\n>>> yplot = fftshift(yf)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(xf, 1.0/N * np.abs(yplot))\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import fft, rfft, irfft\n>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5, 1.0])\n>>> fft(x)\narray([ 5.5 +0.j        ,  2.25-0.4330127j , -2.75-1.29903811j,\n 1.5 +0.j        , -2.75+1.29903811j,  2.25+0.4330127j ])\n>>> yr = rfft(x)\n>>> yr\narray([ 5.5 +0.j        ,  2.25-0.4330127j , -2.75-1.29903811j,\n 1.5 +0.j        ])\n>>> irfft(yr)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5,  1\\. ])\n>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\n>>> fft(x)\narray([ 4.5       +0.j        ,  2.08155948-1.65109876j,\n -1.83155948+1.60822041j, -1.83155948-1.60822041j,\n 2.08155948+1.65109876j])\n>>> yr = rfft(x)\n>>> yr\narray([ 4.5       +0.j        ,  2.08155948-1.65109876j,\n -1.83155948+1.60822041j]) \n```", "```py\n>>> irfft(yr)\narray([ 1.70788987,  2.40843925, -0.37366961,  0.75734049]) \n```", "```py\n>>> irfft(yr, n=len(x))\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> from scipy.fft import ifftn\n>>> import matplotlib.pyplot as plt\n>>> import matplotlib.cm as cm\n>>> import numpy as np\n>>> N = 30\n>>> f, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, sharex='col', sharey='row')\n>>> xf = np.zeros((N,N))\n>>> xf[0, 5] = 1\n>>> xf[0, N-5] = 1\n>>> Z = ifftn(xf)\n>>> ax1.imshow(xf, cmap=cm.Reds)\n>>> ax4.imshow(np.real(Z), cmap=cm.gray)\n>>> xf = np.zeros((N, N))\n>>> xf[5, 0] = 1\n>>> xf[N-5, 0] = 1\n>>> Z = ifftn(xf)\n>>> ax2.imshow(xf, cmap=cm.Reds)\n>>> ax5.imshow(np.real(Z), cmap=cm.gray)\n>>> xf = np.zeros((N, N))\n>>> xf[5, 10] = 1\n>>> xf[N-5, N-10] = 1\n>>> Z = ifftn(xf)\n>>> ax3.imshow(xf, cmap=cm.Reds)\n>>> ax6.imshow(np.real(Z), cmap=cm.gray)\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import dct, idct\n>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5]) \n```", "```py\n>>> dct(dct(x, type=2, norm='ortho'), type=3, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dct(dct(x, type=2), type=3)\narray([ 10.,  20.,  10., -10.,  15.]) \n```", "```py\n>>> # Normalized inverse: no scaling factor\n>>> idct(dct(x, type=2), type=2)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dct(dct(x, type=1, norm='ortho'), type=1, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5])\n>>> # Unnormalized round-trip via DCT-I: scaling factor 2*(N-1) = 8\n>>> dct(dct(x, type=1), type=1)\narray([ 8\\. ,  16.,  8\\. , -8\\. ,  12.])\n>>> # Normalized inverse: no scaling factor\n>>> idct(dct(x, type=1), type=1)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dct(dct(x, type=4, norm='ortho'), type=4, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5])\n>>> # Unnormalized round-trip via DCT-IV: scaling factor 2*N = 10\n>>> dct(dct(x, type=4), type=4)\narray([ 10.,  20.,  10., -10.,  15.])\n>>> # Normalized inverse: no scaling factor\n>>> idct(dct(x, type=4), type=4)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> from scipy.fft import dct, idct\n>>> import matplotlib.pyplot as plt\n>>> N = 100\n>>> t = np.linspace(0,20,N, endpoint=False)\n>>> x = np.exp(-t/3)*np.cos(2*t)\n>>> y = dct(x, norm='ortho')\n>>> window = np.zeros(N)\n>>> window[:20] = 1\n>>> yr = idct(y*window, norm='ortho')\n>>> sum(abs(x-yr)**2) / sum(abs(x)**2)\n0.0009872817275276098\n>>> plt.plot(t, x, '-bx')\n>>> plt.plot(t, yr, 'ro')\n>>> window = np.zeros(N)\n>>> window[:15] = 1\n>>> yr = idct(y*window, norm='ortho')\n>>> sum(abs(x-yr)**2) / sum(abs(x)**2)\n0.06196643004256714\n>>> plt.plot(t, yr, 'g+')\n>>> plt.legend(['x', '$x_{20}$', '$x_{15}$'])\n>>> plt.grid()\n>>> plt.show() \n```", "```py\n>>> from scipy.fft import dst, idst\n>>> x = np.array([1.0, 2.0, 1.0, -1.0, 1.5]) \n```", "```py\n>>> dst(dst(x, type=2, norm='ortho'), type=3, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dst(dst(x, type=2), type=3)\narray([ 10.,  20.,  10., -10.,  15.]) \n```", "```py\n>>> idst(dst(x, type=2), type=2)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dst(dst(x, type=1, norm='ortho'), type=1, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5])\n>>>  # scaling factor 2*(N+1) = 12\n>>> dst(dst(x, type=1), type=1)\narray([ 12.,  24.,  12., -12.,  18.])\n>>>  # no scaling factor\n>>> idst(dst(x, type=1), type=1)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```", "```py\n>>> dst(dst(x, type=4, norm='ortho'), type=4, norm='ortho')\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5])\n>>>  # scaling factor 2*N = 10\n>>> dst(dst(x, type=4), type=4)\narray([ 10.,  20.,  10., -10.,  15.])\n>>>  # no scaling factor\n>>> idst(dst(x, type=4), type=4)\narray([ 1\\. ,  2\\. ,  1\\. , -1\\. ,  1.5]) \n```"]