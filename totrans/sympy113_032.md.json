["```py\n>>> from sympy import roots\n>>> from sympy.abc import x, a, b, c\n>>> roots(a*x**2 + b*x + c, x)\n{-b/(2*a) - sqrt(-4*a*c + b**2)/(2*a): 1,\n -b/(2*a) + sqrt(-4*a*c + b**2)/(2*a): 1} \n```", "```py\n>>> from sympy import solve, roots, real_roots, factor, nroots, RootOf, expand\n>>> from sympy import Poly\n>>> expression = (x+2)**2 * (x-3)\n>>> symbolic = (x+a)**2 * (x-b) \n```", "```py\n>>> solve(expression, x, dict=True)\n[{x: -2}, {x: 3}]\n>>> solve(symbolic, x, dict=True)\n[{x: -a}, {x: b}] \n```", "```py\n>>> from sympy import solve\n>>> from sympy.abc import x\n>>> # By default, solve() uses the radical formula, yielding very complex terms\n>>> solve(x**4 - x + 1, x)\n[-sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3))/2 - sqrt(-2*(1/16 + sqrt(687)*I/144)**(1/3) - 2/sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3)) - 2/(3*(1/16 + sqrt(687)*I/144)**(1/3)))/2,\n sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3))/2 - sqrt(-2*(1/16 + sqrt(687)*I/144)**(1/3) + 2/sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3)) - 2/(3*(1/16 + sqrt(687)*I/144)**(1/3)))/2,\n sqrt(-2*(1/16 + sqrt(687)*I/144)**(1/3) - 2/sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3)) - 2/(3*(1/16 + sqrt(687)*I/144)**(1/3)))/2 - sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3))/2,\n sqrt(-2*(1/16 + sqrt(687)*I/144)**(1/3) + 2/sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3)) - 2/(3*(1/16 + sqrt(687)*I/144)**(1/3)))/2 + sqrt(2/(3*(1/16 + sqrt(687)*I/144)**(1/3)) + 2*(1/16 + sqrt(687)*I/144)**(1/3))/2]\n>>> # If you set quartics=False, solve() uses RootOf()\n>>> solve(x**4 - x + 1, x, quartics=False)\n[CRootOf(x**4 - x + 1, 0),\n CRootOf(x**4 - x + 1, 1),\n CRootOf(x**4 - x + 1, 2),\n CRootOf(x**4 - x + 1, 3)] \n```", "```py\n>>> roots(expression, x)\n{-2: 2, 3: 1}\n>>> roots(symbolic, x)\n{-a: 2, b: 1} \n```", "```py\n>>> expression_expanded = expand(expression)\n>>> expression_expanded\nx**3 + x**2 - 8*x - 12\n>>> factor(expression_expanded)\n(x - 3)*(x + 2)**2\n>>> symbolic_expanded = expand(symbolic)\n>>> symbolic_expanded\n-a**2*b + a**2*x - 2*a*b*x + 2*a*x**2 - b*x**2 + x**3\n>>> factor(symbolic_expanded)\n(a + x)**2*(-b + x) \n```", "```py\n>>> from sympy import expand, factor\n>>> from sympy.abc import x, a\n>>> p = expand((x - a**2)*(x + a + a**3))\n>>> p\n-a**5 + a**3*x - a**3 - a**2*x + a*x + x**2\n>>> factor(p)\n(-a**2 + x)*(a**3 + a + x) \n```", "```py\n>>> from sympy import real_roots\n>>> from sympy.abc import x\n>>> cubed = x**3 - 1\n>>> # roots() returns real and complex roots\n>>> roots(cubed)\n{1: 1, -1/2 - sqrt(3)*I/2: 1, -1/2 + sqrt(3)*I/2: 1}\n>>> # real_roots() returns only real roots\n>>> real_roots(cubed)\n[1] \n```", "```py\n>>> [RootOf(expression, n) for n in range(3)]\n[-2, -2, 3] \n```", "```py\n>>> nroots(expression)\n[3.0, -2.0 - 4.18482169793536e-14*I, -2.0 + 4.55872552179222e-14*I] \n```", "```py\n>>> [r.n(2) for r in real_roots(expression)]\n[-2.0, -2.0, 3.0]\n>>> [r.is_real for r in real_roots(expression)]\n[True, True, True] \n```", "```py\n>>> rq0, rq1, rq2, rq3 = roots(x**4 + 3*x**2 + 2*x + 1)\n>>> rq0\nsqrt(-4 - 2*(-1/8 + sqrt(237)*I/36)**(1/3) + 4/sqrt(-2 + 7/(6*(-1/8 + sqrt(237)*I/36)**(1/3)) + 2*(-1/8 + sqrt(237)*I/36)**(1/3)) - 7/(6*(-1/8 + sqrt(237)*I/36)**(1/3)))/2 - sqrt(-2 + 7/(6*(-1/8 + sqrt(237)*I/36)**(1/3)) + 2*(-1/8 + sqrt(237)*I/36)**(1/3))/2 \n```", "```py\n>>> rq0.n()\n-0.349745826211722 - 0.438990337475312*I \n```", "```py\n>>> from sympy import solve, roots, nroots, real_roots, expand, RootOf, CRootOf, Symbol\n>>> from sympy import Poly\n>>> from sympy.abc import x\n>>> expression_complex = (x**2+4)**2 * (x-3)\n>>> solve(expression_complex, x, dict=True)\n[{x: 3}, {x: -2*I}, {x: 2*I}] \n```", "```py\n>>> a = Symbol(\"a\", positive=True)\n>>> symbolic_complex = (x**2+a)**2 * (x-3)\n>>> solve(symbolic_complex, x, dict=True)\n[{x: 3}, {x: -I*sqrt(a)}, {x: I*sqrt(a)}] \n```", "```py\n>>> roots(expression_complex, x)\n{3: 1, -2*I: 2, 2*I: 2} \n```", "```py\n>>> [RootOf(expression_complex, n) for n in range(0,3)]\n[3, -2*I, -2*I] \n```", "```py\n>>> real_roots(expression_complex)\n[3] \n```", "```py\n>>> expression_complex_poly = Poly(expression_complex)\n>>> expression_complex_poly.all_roots()\n[3, -2*I, -2*I, 2*I, 2*I] \n```", "```py\n>>> expression = (x+2)**2 * (x-3)\n>>> my_real_roots = real_roots(expression)\n>>> my_real_roots\n[-2, -2, 3]\n>>> for root in my_real_roots:\n...         print(f\"expression({root}) = {expression.subs(x,  root)}\")\nexpression(-2) = 0\nexpression(-2) = 0\nexpression(3) = 0 \n```", "```py\n>>> my_roots = roots(expression)\n>>> my_roots\n{-2: 2, 3: 1}\n>>> for root, multiplicity in my_roots.items():\n...     print(f\"Root {root} has multiplicity of {multiplicity}\")\nRoot 3 has multiplicity of 1\nRoot -2 has multiplicity of 2 \n```", "```py\n>>> from sympy.abc import y\n>>> factored = factor(expression_expanded)\n>>> factored\n(x - 3)*(x + 2)**2\n>>> factored.subs(x, 2*y)\n(2*y - 3)*(2*y + 2)**2\n>>> factored.subs(x, 7)\n324 \n```", "```py\n>>> from sympy import roots, solve, real_roots, nroots\n>>> from sympy.abc import x\n>>> fifth_order = x**5 - x + 1\n>>> nroots(fifth_order)\n[-1.16730397826142,\n -0.181232444469875 - 1.08395410131771*I,\n -0.181232444469875 + 1.08395410131771*I,\n 0.764884433600585 - 0.352471546031726*I,\n 0.764884433600585 + 0.352471546031726*I] \n```", "```py\n>>> roots(fifth_order, x)\n{} \n```", "```py\n>>> roots(x**5 - x + 1, x, strict=True)\nTraceback (most recent call last):\n...\nsympy.polys.polyerrors.UnsolvableFactorError: Strict mode: some factors cannot be solved in radicals, so a complete\nlist of solutions cannot be returned. Call roots with strict=False to\nget solutions expressible in radicals (if there are any). \n```", "```py\n>>> fifth_order_solved = solve(fifth_order, x, dict=True)\n>>> fifth_order_solved\n[{x: CRootOf(x**5 - x + 1, 0)},\n{x: CRootOf(x**5 - x + 1, 1)},\n{x: CRootOf(x**5 - x + 1, 2)},\n{x: CRootOf(x**5 - x + 1, 3)},\n{x: CRootOf(x**5 - x + 1, 4)}] \n```", "```py\n>>> for root in fifth_order_solved:\n...     print(root[x].n(10))\n-1.167303978\n-0.1812324445 - 1.083954101*I\n-0.1812324445 + 1.083954101*I\n0.7648844336 - 0.352471546*I\n0.7648844336 + 0.352471546*I \n```", "```py\n>>> real_root = real_roots(fifth_order, x)\n>>> real_root\n[CRootOf(x**5 - x + 1, 0)]\n>>> real_root[0].n(10)\n-1.167303978 \n```", "```py\n>>> from sympy import init_printing\n>>> init_printing()\n>>> real_roots(fifth_order)\n / 5           \\\n[CRootOf\\x  - x + 1, 0/]\n>>> r = r0, r1, r2, r3, r4 = Poly(fifth_order, x).all_roots(); r\n / 5           \\         / 5           \\         / 5           \\         / 5           \\         / 5           \\\n[CRootOf\\x  - x + 1, 0/, CRootOf\\x  - x + 1, 1/, CRootOf\\x  - x + 1, 2/, CRootOf\\x  - x + 1, 3/, CRootOf\\x  - x + 1, 4/]\n>>> r0\n / 5           \\\nCRootOf\\x  - x + 1, 0/ \n```", "```py\n>>> r0.n()\n-1.16730397826142\n>>> r0.is_real\nTrue\n>>> r1.n()\n-0.181232444469875 - 1.08395410131771*I\n>>> r2.n()\n-0.181232444469875 + 1.08395410131771*I\n>>> r1\n / 5           \\\nCRootOf\\x  - x + 1, 1/\n>>> r1.conjugate()\n / 5           \\\nCRootOf\\x  - x + 1, 2/\n>>> r1.is_real\nFalse \n```"]