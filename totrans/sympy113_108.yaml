- en: Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/sets.html](https://docs.sympy.org/latest/modules/sets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Basic Sets'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The base class for any kind of set.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is not meant to be used directly as a container of items. It does not behave
    like the builtin `set`; see [`FiniteSet`](#sympy.sets.sets.FiniteSet "sympy.sets.sets.FiniteSet")
    for that.
  prefs: []
  type: TYPE_NORMAL
- en: Real intervals are represented by the [`Interval`](#sympy.sets.sets.Interval
    "sympy.sets.sets.Interval") class and unions of sets by the [`Union`](#sympy.sets.sets.Union
    "sympy.sets.sets.Union") class. The empty set is represented by the [`EmptySet`](#sympy.sets.sets.EmptySet
    "sympy.sets.sets.EmptySet") class and available as a singleton as `S.EmptySet`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The boundary or frontier of a set.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A point x is on the boundary of a set S if
  prefs: []
  type: TYPE_NORMAL
- en: x is in the closure of S. I.e. Every neighborhood of x contains a point in S.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: x is not in the interior of S. I.e. There does not exist an open set centered
    on x contained entirely within S.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are the points on the outer rim of S. If S is open then these points need
    not actually be contained within S.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the boundary of an interval is its start and end points. This is
    true regardless of whether or not the interval is open.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Property method which returns the closure of a set. The closure is defined as
    the union of the set itself and its boundary.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The complement of ‘self’ w.r.t the given universe.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns a SymPy value indicating whether `other` is contained in `self`: `true`
    if it is, `false` if it is not, else an unevaluated `Contains` expression (or,
    as in the case of ConditionSet and a union of FiniteSet/Intervals, an expression
    indicating the conditions for containment).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As a shortcut it is possible to use the `in` operator, but that will raise an
    error unless an affirmative true or false is not obtained.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The result of ‘in’ is a bool, not a SymPy value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The infimum of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Property method which returns the interior of a set. The interior of a set S
    consists all points of S that do not belong to the boundary of S.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns the intersection of ‘self’ and ‘other’.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Alias for [`intersect()`](#sympy.sets.sets.Set.intersect "sympy.sets.sets.Set.intersect")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A property method to check whether a set is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A set is closed if its complement is an open set. The closedness of a subset
    of the reals is determined with respect to R and its standard topology.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `self` and `other` are disjoint.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R837](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Disjoint_sets](https://en.wikipedia.org/wiki/Disjoint_sets)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Property method to check whether a set is open.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A set is open if and only if it has an empty intersection with its boundary.
    In particular, a subset A of the reals is open if and only if each one of its
    points is contained in an open interval that is a subset of A.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `self` is a proper subset of `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `self` is a proper superset of `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `self` is a subset of `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `self` is a superset of `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Alias for [`is_disjoint()`](#sympy.sets.sets.Set.is_disjoint "sympy.sets.sets.Set.is_disjoint")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Alias for [`is_subset()`](#sympy.sets.sets.Set.is_subset "sympy.sets.sets.Set.is_subset")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Alias for [`is_superset()`](#sympy.sets.sets.Set.is_superset "sympy.sets.sets.Set.is_superset")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The kind of a Set
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Any [`Set`](#sympy.sets.sets.Set "sympy.sets.sets.Set") will have kind [`SetKind`](#sympy.sets.conditionset.SetKind
    "sympy.sets.sets.SetKind") which is parametrised by the kind of the elements of
    the set. For example most sets are sets of numbers and will have kind `SetKind(NumberKind)`.
    If elements of sets are different in kind than their kind will `SetKind(UndefinedKind)`.
    See [`sympy.core.kind.Kind`](core.html#sympy.core.kind.Kind "sympy.core.kind.Kind")
    for an explanation of the kind system.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A [`sympy.sets.powerset.PowerSet`](#sympy.sets.powerset.PowerSet "sympy.sets.powerset.PowerSet")
    is a set of sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'A [`ProductSet`](#sympy.sets.sets.ProductSet "sympy.sets.sets.ProductSet")
    represents the set of tuples of elements of other sets. Its kind is [`sympy.core.containers.TupleKind`](core.html#sympy.core.containers.TupleKind
    "sympy.core.containers.TupleKind") parametrised by the kinds of the elements of
    those sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'When all elements of the set do not have same kind, the kind will be returned
    as `SetKind(UndefinedKind)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The kind of the elements of a set are given by the `element_kind` attribute
    of `SetKind`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`NumberKind`](core.html#sympy.core.kind.NumberKind "sympy.core.kind.NumberKind"),
    [`sympy.core.kind.UndefinedKind`](core.html#sympy.core.kind.UndefinedKind "sympy.core.kind.UndefinedKind"),
    [`sympy.core.containers.TupleKind`](core.html#sympy.core.containers.TupleKind
    "sympy.core.containers.TupleKind"), [`MatrixKind`](matrices/kind.html#sympy.matrices.kind.MatrixKind
    "sympy.matrices.kind.MatrixKind"), [`sympy.matrices.expressions.sets.MatrixSet`](matrices/expressions.html#sympy.matrices.expressions.MatrixSet
    "sympy.matrices.expressions.sets.MatrixSet"), [`sympy.sets.conditionset.ConditionSet`](#sympy.sets.conditionset.ConditionSet
    "sympy.sets.conditionset.ConditionSet"), [`Rationals`](#sympy.sets.fancysets.Rationals
    "sympy.sets.fancysets.Rationals"), [`Naturals`](#sympy.sets.fancysets.Naturals
    "sympy.sets.fancysets.Naturals"), [`Integers`](#sympy.sets.fancysets.Integers
    "sympy.sets.fancysets.Integers"), [`sympy.sets.fancysets.ImageSet`](#sympy.sets.fancysets.ImageSet
    "sympy.sets.fancysets.ImageSet"), [`sympy.sets.fancysets.Range`](#sympy.sets.fancysets.Range
    "sympy.sets.fancysets.Range"), [`sympy.sets.fancysets.ComplexRegion`](#sympy.sets.fancysets.ComplexRegion
    "sympy.sets.fancysets.ComplexRegion"), [`sympy.sets.powerset.PowerSet`](#sympy.sets.powerset.PowerSet
    "sympy.sets.powerset.PowerSet"), [`sympy.sets.sets.ProductSet`](#sympy.sets.sets.ProductSet
    "sympy.sets.sets.ProductSet"), [`sympy.sets.sets.Interval`](#sympy.sets.sets.Interval
    "sympy.sets.sets.Interval"), [`sympy.sets.sets.Union`](#sympy.sets.sets.Union
    "sympy.sets.sets.Union"), [`sympy.sets.sets.Intersection`](#sympy.sets.sets.Intersection
    "sympy.sets.sets.Intersection"), [`sympy.sets.sets.Complement`](#sympy.sets.sets.Complement
    "sympy.sets.sets.Complement"), [`sympy.sets.sets.EmptySet`](#sympy.sets.sets.EmptySet
    "sympy.sets.sets.EmptySet"), [`sympy.sets.sets.UniversalSet`](#sympy.sets.sets.UniversalSet
    "sympy.sets.sets.UniversalSet"), [`sympy.sets.sets.FiniteSet`](#sympy.sets.sets.FiniteSet
    "sympy.sets.sets.FiniteSet"), [`sympy.sets.sets.SymmetricDifference`](#sympy.sets.sets.SymmetricDifference
    "sympy.sets.sets.SymmetricDifference"), [`sympy.sets.sets.DisjointUnion`](#sympy.sets.sets.DisjointUnion
    "sympy.sets.sets.DisjointUnion")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The (Lebesgue) measure of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Find the Power set of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of an empty set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of a finite set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of an interval:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R838](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Power_set](https://en.wikipedia.org/wiki/Power_set)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The supremum of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Returns symmetric difference of `self` and `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R839](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Symmetric_difference](https://en.wikipedia.org/wiki/Symmetric_difference)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Returns the union of `self` and `other`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'As a shortcut it is possible to use the `+` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly it is possible to use the `-` operator for set differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Return an image of the set under transformation `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If this function cannot compute the image, it returns an unevaluated ImageSet
    object.
  prefs: []
  type: TYPE_NORMAL
- en: \[\{ f(x) \mid x \in \mathrm{self} \}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Expressions applied to the set of Integers are simplified to show as few negatives
    as possible and linear expressions are converted to a canonical form. If this
    is not desirable then the unevaluated ImageSet should be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.sets.fancysets.ImageSet`](#sympy.sets.fancysets.ImageSet "sympy.sets.fancysets.ImageSet")'
  prefs: []
  type: TYPE_NORMAL
- en: Elementary Sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Represents a real interval as a Set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: Returns an interval with end points `start` and `end`.
  prefs: []
  type: TYPE_NORMAL
- en: For `left_open=True` (default `left_open` is `False`) the interval will be open
    on the left. Similarly, for `right_open=True` the interval will be open on the
    right.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Only real end points are supported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Interval(a, b)` with \(a > b\) will return the empty set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `evalf()` method to turn an Interval into an mpmath `mpi` interval instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R840](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Interval_%28mathematics%29](https://en.wikipedia.org/wiki/Interval_%28mathematics%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Return an interval not including the left boundary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Return an interval not including the right boundary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite an interval in terms of inequalities and logic operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The right end point of the interval.
  prefs: []
  type: TYPE_NORMAL
- en: This property takes the same value as the `sup` property.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the left endpoint is negative infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the right endpoint is positive infinity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: True if interval is left-open.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Return an interval including neither boundary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: True if interval is right-open.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The left end point of the interval.
  prefs: []
  type: TYPE_NORMAL
- en: This property takes the same value as the `inf` property.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Represents a finite set of Sympy expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R841](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Finite_set](https://en.wikipedia.org/wiki/Finite_set)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a FiniteSet in terms of equalities and logic operators.
  prefs: []
  type: TYPE_NORMAL
- en: Compound Sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Represents a union of sets as a [`Set`](#sympy.sets.sets.Set "sympy.sets.sets.Set").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The Union constructor will always try to merge overlapping intervals, if possible.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Intersection`](#sympy.sets.sets.Intersection "sympy.sets.sets.Intersection")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R842](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Union_%28set_theory%29](https://en.wikipedia.org/wiki/Union_%28set_theory%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a Union in terms of equalities and logic operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Represents an intersection of sets as a [`Set`](#sympy.sets.sets.Set "sympy.sets.sets.Set").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: We often use the .intersect method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Union`](#sympy.sets.sets.Union "sympy.sets.sets.Union")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R843](#id7)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Intersection_%28set_theory%29](https://en.wikipedia.org/wiki/Intersection_%28set_theory%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite an Intersection in terms of equalities and logic operators
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Represents a Cartesian Product of Sets.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns a Cartesian product given several sets as either an iterable or individual
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Can use `*` operator on any sets for convenient shorthand.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The Cartesian product is not commutative or associative e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Passes most operations down to the argument sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R844](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cartesian_product](https://en.wikipedia.org/wiki/Cartesian_product)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: A property method which tests whether a set is iterable or not. Returns True
    if set is iterable, otherwise returns False.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Represents the set difference or relative complement of a set with another set.
  prefs: []
  type: TYPE_NORMAL
- en: \[A - B = \{x \in A \mid x \notin B\}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Intersection`](#sympy.sets.sets.Intersection "sympy.sets.sets.Intersection"),
    [`Union`](#sympy.sets.sets.Union "sympy.sets.sets.Union")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R845](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/ComplementSet.html](https://mathworld.wolfram.com/ComplementSet.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a complement in terms of equalities and logic operators
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Simplify a [`Complement`](#sympy.sets.sets.Complement "sympy.sets.sets.Complement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Represents the set of elements which are in either of the sets and not in their
    intersection.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Complement`](#sympy.sets.sets.Complement "sympy.sets.sets.Complement"), [`Union`](#sympy.sets.sets.Union
    "sympy.sets.sets.Union")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R846](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Symmetric_difference](https://en.wikipedia.org/wiki/Symmetric_difference)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a symmetric_difference in terms of equalities and logic operators
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Represents the disjoint union (also known as the external disjoint union) of
    a finite number of sets.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Disjoint_union](https://en.wikipedia.org/wiki/Disjoint_union)'
  prefs: []
  type: TYPE_NORMAL
- en: Singleton Sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Represents the empty set. The empty set is available as a singleton as `S.EmptySet`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UniversalSet`](#sympy.sets.sets.UniversalSet "sympy.sets.sets.UniversalSet")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R847](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Empty_set](https://en.wikipedia.org/wiki/Empty_set)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Represents the set of all things. The universal set is available as a singleton
    as `S.UniversalSet`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`EmptySet`](#sympy.sets.sets.EmptySet "sympy.sets.sets.EmptySet")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R848](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Universal_set](https://en.wikipedia.org/wiki/Universal_set)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Special Sets'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Represents the rational numbers. This set is also available as the singleton
    `S.Rationals`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Represents the natural numbers (or counting numbers) which are all positive
    integers starting from 1\. This set is also available as the singleton `S.Naturals`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Naturals0`](#sympy.sets.fancysets.Naturals0 "sympy.sets.fancysets.Naturals0")'
  prefs: []
  type: TYPE_NORMAL
- en: non-negative integers (i.e. includes 0, too)
  prefs: []
  type: TYPE_NORMAL
- en: '[`Integers`](#sympy.sets.fancysets.Integers "sympy.sets.fancysets.Integers")'
  prefs: []
  type: TYPE_NORMAL
- en: also includes negative integers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Represents the whole numbers which are all the non-negative integers, inclusive
    of zero.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Naturals`](#sympy.sets.fancysets.Naturals "sympy.sets.fancysets.Naturals")'
  prefs: []
  type: TYPE_NORMAL
- en: positive integers; does not include 0
  prefs: []
  type: TYPE_NORMAL
- en: '[`Integers`](#sympy.sets.fancysets.Integers "sympy.sets.fancysets.Integers")'
  prefs: []
  type: TYPE_NORMAL
- en: also includes the negative integers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Represents all integers: positive, negative and zero. This set is also available
    as the singleton `S.Integers`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Naturals0`](#sympy.sets.fancysets.Naturals0 "sympy.sets.fancysets.Naturals0")'
  prefs: []
  type: TYPE_NORMAL
- en: non-negative integers
  prefs: []
  type: TYPE_NORMAL
- en: '[`Integers`](#sympy.sets.fancysets.Integers "sympy.sets.fancysets.Integers")'
  prefs: []
  type: TYPE_NORMAL
- en: positive and negative integers and zero
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Represents all real numbers from negative infinity to positive infinity, including
    all integer, rational and irrational numbers. This set is also available as the
    singleton `S.Reals`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ComplexRegion`](#sympy.sets.fancysets.ComplexRegion "sympy.sets.fancysets.ComplexRegion")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: The `Set` of all complex numbers
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Reals`](#sympy.sets.fancysets.Reals "sympy.sets.fancysets.Reals"), [`ComplexRegion`](#sympy.sets.fancysets.ComplexRegion
    "sympy.sets.fancysets.ComplexRegion")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Image of a set under a mathematical function. The transformation must be given
    as a Lambda function which has as many arguments as the elements of the set upon
    which it operates, e.g. 1 argument when acting on the set of integers or 2 arguments
    when acting on a complex region.
  prefs: []
  type: TYPE_NORMAL
- en: This function is not normally called directly, but is called from `imageset`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: If you want to get value for \(x\) = 2, 1/2 etc. (Please check whether the \(x\)
    value is in `base_set` or not before passing it as args)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.sets.sets.imageset`](#sympy.sets.sets.imageset "sympy.sets.sets.imageset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Represents a range of integers. Can be called as `Range(stop)`, `Range(start,
    stop)`, or `Range(start, stop, step)`; when `step` is not given it defaults to
    1.
  prefs: []
  type: TYPE_NORMAL
- en: '`Range(stop)` is the same as `Range(0, stop, 1)` and the stop value (just as
    for Python ranges) is not included in the Range values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'The step can also be negative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'The stop value is made canonical so equivalent ranges always have the same
    args:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Infinite ranges are allowed. `oo` and `-oo` are never included in the set (`Range`
    is always a subset of `Integers`). If the starting point is infinite, then the
    final value is `stop - step`. To iterate such a range, it needs to be reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Although `Range` is a `Set` (and supports the normal set operations) it maintains
    the order of the elements and can be used in contexts where `range` would be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Although slicing of a Range will always return a Range – possibly empty – an
    empty set will be returned from any intersection that is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Range will accept symbolic arguments but has very limited support for doing
    anything other than displaying the Range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Better success will be had when using integer symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite a Range in terms of equalities and logic operators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Return an equivalent Range in the opposite order.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Represents the Set of all Complex Numbers. It can represent a region of Complex
    Plane in both the standard forms Polar and Rectangular coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Polar Form Input is in the form of the ProductSet or Union of ProductSets of
    the intervals of `r` and `theta`, and use the flag `polar=True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \[Z = \{z \in \mathbb{C} \mid z = r\times (\cos(\theta) + I\sin(\theta)), r
    \in [\texttt{r}], \theta \in [\texttt{theta}]\}\]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rectangular Form Input is in the form of the ProductSet or Union of ProductSets
    of interval of x and y, the real and imaginary parts of the Complex numbers in
    a plane. Default input type is in rectangular form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: \[Z = \{z \in \mathbb{C} \mid z = x + Iy, x \in [\operatorname{re}(z)], y \in
    [\operatorname{im}(z)]\}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: c1 represents the rectangular region in complex plane surrounded by the coordinates
    (2, 4), (3, 4), (3, 6) and (2, 6), of the four vertices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: c2 represents the Union of two rectangular regions in complex plane. One of
    them surrounded by the coordinates of c1 and other surrounded by the coordinates
    (4, 1), (6, 1), (6, 8) and (4, 8).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: c2 represents the region in complex plane inside the Unit Disk centered at the
    origin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`CartesianComplexRegion`](#sympy.sets.fancysets.CartesianComplexRegion "sympy.sets.fancysets.CartesianComplexRegion"),
    [`PolarComplexRegion`](#sympy.sets.fancysets.PolarComplexRegion "sympy.sets.fancysets.PolarComplexRegion"),
    [`Complexes`](#sympy.sets.fancysets.Complexes "sympy.sets.fancysets.Complexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Return the union of intervals of \(x\) when, self is in rectangular form, or
    the union of intervals of \(r\) when self is in polar form.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Return the union of intervals of \(y\) when, self is in rectangular form, or
    the union of intervals of \(theta\) when self is in polar form.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Converts given subset of real numbers to a complex region.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple of sets (ProductSets) input of the self.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Return raw input sets to the self.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Set representing a square region of the complex plane.
  prefs: []
  type: TYPE_NORMAL
- en: \[Z = \{z \in \mathbb{C} \mid z = x + Iy, x \in [\operatorname{re}(z)], y \in
    [\operatorname{im}(z)]\}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ComplexRegion`](#sympy.sets.fancysets.ComplexRegion "sympy.sets.fancysets.ComplexRegion"),
    [`PolarComplexRegion`](#sympy.sets.fancysets.PolarComplexRegion "sympy.sets.fancysets.PolarComplexRegion"),
    [`Complexes`](#sympy.sets.fancysets.Complexes "sympy.sets.fancysets.Complexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Set representing a polar region of the complex plane.
  prefs: []
  type: TYPE_NORMAL
- en: \[Z = \{z \in \mathbb{C} \mid z = r\times (\cos(\theta) + I\sin(\theta)), r
    \in [\texttt{r}], \theta \in [\texttt{theta}]\}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ComplexRegion`](#sympy.sets.fancysets.ComplexRegion "sympy.sets.fancysets.ComplexRegion"),
    [`CartesianComplexRegion`](#sympy.sets.fancysets.CartesianComplexRegion "sympy.sets.fancysets.CartesianComplexRegion"),
    [`Complexes`](#sympy.sets.fancysets.Complexes "sympy.sets.fancysets.Complexes")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Normalize a Real Set \(theta\) in the interval \([0, 2\pi)\). It returns a normalized
    value of theta in the Set. For Interval, a maximum of one cycle \([0, 2\pi]\),
    is returned i.e. for theta equal to \([0, 10\pi]\), returned normalized value
    would be \([0, 2\pi)\). As of now intervals with end points as non-multiples of
    `pi` is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NotImplementedError**'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithms for Normalizing theta Set are not yet implemented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ValueError**'
  prefs: []
  type: TYPE_NORMAL
- en: The input is not valid, i.e. the input is not a real set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**RuntimeError**'
  prefs: []
  type: TYPE_NORMAL
- en: It is a bug, please report to the github issue tracker.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]  ## Power sets'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: A symbolic object representing a power set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Set'
  prefs: []
  type: TYPE_NORMAL
- en: The set to take power of.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: The flag to control evaluation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the evaluation is disabled for finite sets, it can take advantage of using
    subset test as a membership test.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Power set \(\mathcal{P}(S)\) is defined as a set containing all the subsets
    of \(S\).
  prefs: []
  type: TYPE_NORMAL
- en: If the set \(S\) is a finite set, its power set would have \(2^{\left| S \right|}\)
    elements, where \(\left| S \right|\) denotes the cardinality of \(S\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of a finite set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of an empty set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'A power set of an infinite set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluating the power set of a finite set to its explicit form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R849](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Power_set](https://en.wikipedia.org/wiki/Power_set)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R850](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Axiom_of_power_set](https://en.wikipedia.org/wiki/Axiom_of_power_set)  ##
    Condition Sets'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Set of elements which satisfies a given condition.
  prefs: []
  type: TYPE_NORMAL
- en: \[\{x \mid \textrm{condition}(x) = \texttt{True}, x \in S\}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'If the value is not in the base set, the result is false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'Symbols with assumptions should be avoided or else the condition may evaluate
    without consideration of the set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'Only free symbols can be changed by using \(subs\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if `pi` is in `c` use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'If no base set is specified, the universal set is implied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Only symbols or symbol-like expressions can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'When the base set is a ConditionSet, the symbols will be unified if possible
    with preference for the outermost symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Asserts that x is an element of the set S.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R851](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Element_%28mathematics%29](https://en.wikipedia.org/wiki/Element_%28mathematics%29)'
  prefs: []
  type: TYPE_NORMAL
- en: SetKind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: SetKind is kind for all Sets
  prefs: []
  type: TYPE_NORMAL
- en: Every instance of Set will have kind `SetKind` parametrised by the kind of the
    elements of the `Set`. The kind of the elements might be `NumberKind`, or `TupleKind`
    or something else. When not all elements have the same kind then the kind of the
    elements will be given as `UndefinedKind`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**element_kind: Kind (optional)**'
  prefs: []
  type: TYPE_NORMAL
- en: The kind of the elements of the set. In a well defined set all elements will
    have the same kind. Otherwise the kind should [`sympy.core.kind.UndefinedKind`](core.html#sympy.core.kind.UndefinedKind
    "sympy.core.kind.UndefinedKind"). The `element_kind` argument is optional but
    should only be omitted in the case of `EmptySet` whose kind is simply `SetKind()`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.core.kind.NumberKind`](core.html#sympy.core.kind.NumberKind "sympy.core.kind.NumberKind"),
    [`sympy.matrices.kind.MatrixKind`](matrices/kind.html#sympy.matrices.kind.MatrixKind
    "sympy.matrices.kind.MatrixKind"), [`sympy.core.containers.TupleKind`](core.html#sympy.core.containers.TupleKind
    "sympy.core.containers.TupleKind")'
  prefs: []
  type: TYPE_NORMAL
- en: Iteration over sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For set unions, \(\{a, b\} \cup \{x, y\}\) can be treated as \(\{a, b, x, y\}\)
    for iteration regardless of the distinctiveness of the elements, however, for
    set intersections, assuming that \(\{a, b\} \cap \{x, y\}\) is \(\varnothing\)
    or \(\{a, b \}\) would not always be valid, since some of \(a\), \(b\), \(x\)
    or \(y\) may or may not be the elements of the intersection.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over the elements of a set involving intersection, complement, or
    symmetric difference yields (possibly duplicate) elements of the set provided
    that all elements are known to be the elements of the set. If any element cannot
    be determined to be a member of a set then the iteration gives `TypeError`. This
    happens in the same cases where `x in y` would give an error.
  prefs: []
  type: TYPE_NORMAL
- en: There are some reasons to implement like this, even if it breaks the consistency
    with how the python set iterator works. We keep in mind that sympy set comprehension
    like `FiniteSet(*s)` from a existing sympy sets could be a common usage. And this
    approach would make `FiniteSet(*s)` to be consistent with any symbolic set processing
    methods like `FiniteSet(*simplify(s))`.
  prefs: []
  type: TYPE_NORMAL
