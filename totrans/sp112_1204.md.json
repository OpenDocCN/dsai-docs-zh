["```py\nscipy.stats.truncnorm = <scipy.stats._continuous_distns.truncnorm_gen object>\n```", "```py\na, b = (a_trunc - loc) / scale, (b_trunc - loc) / scale \n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import truncnorm\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> a, b = 0.1, 2\n>>> mean, var, skew, kurt = truncnorm.stats(a, b, moments='mvsk') \n```", "```py\n>>> x = np.linspace(truncnorm.ppf(0.01, a, b),\n...                 truncnorm.ppf(0.99, a, b), 100)\n>>> ax.plot(x, truncnorm.pdf(x, a, b),\n...        'r-', lw=5, alpha=0.6, label='truncnorm pdf') \n```", "```py\n>>> rv = truncnorm(a, b)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf') \n```", "```py\n>>> vals = truncnorm.ppf([0.001, 0.5, 0.999], a, b)\n>>> np.allclose([0.001, 0.5, 0.999], truncnorm.cdf(vals, a, b))\nTrue \n```", "```py\n>>> r = truncnorm.rvs(a, b, size=1000) \n```", "```py\n>>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim([x[0], x[-1]])\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> loc, scale = 1, 0.5\n>>> rv = truncnorm(a, b, loc=loc, scale=scale)\n>>> x = np.linspace(truncnorm.ppf(0.01, a, b),\n...                 truncnorm.ppf(0.99, a, b), 100)\n>>> r = rv.rvs(size=1000) \n```", "```py\n>>> fig, ax = plt.subplots(1, 1)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')\n>>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim(a, b)\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> a_transformed, b_transformed = (a - loc) / scale, (b - loc) / scale\n>>> rv = truncnorm(a_transformed, b_transformed, loc=loc, scale=scale)\n>>> x = np.linspace(truncnorm.ppf(0.01, a, b),\n...                 truncnorm.ppf(0.99, a, b), 100)\n>>> r = rv.rvs(size=10000) \n```", "```py\n>>> fig, ax = plt.subplots(1, 1)\n>>> ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')\n>>> ax.hist(r, density=True, bins='auto', histtype='stepfilled', alpha=0.2)\n>>> ax.set_xlim(a-0.1, b+0.1)\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```"]