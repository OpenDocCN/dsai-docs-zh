- en: pandas.DataFrame.reindex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reindex.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reindex.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Conform DataFrame to new index with optional filling logic.
  prefs: []
  type: TYPE_NORMAL
- en: Places NA/NaN in locations having no value in the previous index. A new object
    is produced unless the new index is equivalent to the current one and `copy=False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**labels**array-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New labels / index to conform the axis specified by ‘axis’ to.
  prefs: []
  type: TYPE_NORMAL
- en: '**index**array-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New labels for the index. Preferably an Index object to avoid duplicating data.
  prefs: []
  type: TYPE_NORMAL
- en: '**columns**array-like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: New labels for the columns. Preferably an Index object to avoid duplicating
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int or str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis to target. Can be either the axis name (‘index’, ‘columns’) or number (0,
    1).
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{None, ‘backfill’/’bfill’, ‘pad’/’ffill’, ‘nearest’}'
  prefs: []
  type: TYPE_NORMAL
- en: 'Method to use for filling holes in reindexed DataFrame. Please note: this is
    only applicable to DataFrames/Series with a monotonically increasing/decreasing
    index.'
  prefs: []
  type: TYPE_NORMAL
- en: 'None (default): don’t fill gaps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pad / ffill: Propagate last valid observation forward to next valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'backfill / bfill: Use next valid observation to fill gap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nearest: Use nearest valid observations to fill gap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**copy**bool, default True'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new object, even if the passed indexes are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The copy keyword will change behavior in pandas 3.0. [Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html)
    will be enabled by default, which means that all methods with a copy keyword will
    use a lazy copy mechanism to defer the copy and ignore the copy keyword. The copy
    keyword will be removed in a future version of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: You can already get the future behavior and improvements through enabling copy
    on write `pd.options.mode.copy_on_write = True`
  prefs: []
  type: TYPE_NORMAL
- en: '**level**int or name'
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast across a level, matching Index values on the passed MultiIndex level.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**scalar, default np.nan'
  prefs: []
  type: TYPE_NORMAL
- en: Value to use for missing values. Defaults to NaN, but can be any “compatible”
    value.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum number of consecutive elements to forward or backward fill.
  prefs: []
  type: TYPE_NORMAL
- en: '**tolerance**optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum distance between original and new labels for inexact matches. The values
    of the index at the matching locations most satisfy the equation `abs(index[indexer]
    - target) <= tolerance`.
  prefs: []
  type: TYPE_NORMAL
- en: Tolerance may be a scalar value, which applies the same tolerance to all values,
    or list-like, which applies variable tolerance per element. List-like includes
    list, tuple, array, Series, and must be the same size as the index and its dtype
    must exactly match the index’s type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame with changed index.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.set_index`](pandas.DataFrame.set_index.html#pandas.DataFrame.set_index
    "pandas.DataFrame.set_index")'
  prefs: []
  type: TYPE_NORMAL
- en: Set row labels.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.reset_index`](pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index")'
  prefs: []
  type: TYPE_NORMAL
- en: Remove row labels or move them to new columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.reindex_like`](pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like
    "pandas.DataFrame.reindex_like")'
  prefs: []
  type: TYPE_NORMAL
- en: Change to same indices as other DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame.reindex` supports two calling conventions'
  prefs: []
  type: TYPE_NORMAL
- en: '`(index=index_labels, columns=column_labels, ...)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(labels, axis={''index'', ''columns''}, ...)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We *highly* recommend using keyword arguments to clarify your intent.
  prefs: []
  type: TYPE_NORMAL
- en: Create a dataframe with some fictional data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a new index and reindex the dataframe. By default values in the new index
    that do not have corresponding records in the dataframe are assigned `NaN`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can fill in the missing values by passing a value to the keyword `fill_value`.
    Because the index is not monotonically increasing or decreasing, we cannot use
    arguments to the keyword `method` to fill the `NaN` values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also reindex the columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Or we can use “axis-style” keyword arguments
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To further illustrate the filling functionality in `reindex`, we will create
    a dataframe with a monotonically increasing index (for example, a sequence of
    dates).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Suppose we decide to expand the dataframe to cover a wider date range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The index entries that did not have a value in the original data frame (for
    example, ‘2009-12-29’) are by default filled with `NaN`. If desired, we can fill
    in the missing values using one of several options.
  prefs: []
  type: TYPE_NORMAL
- en: For example, to back-propagate the last valid value to fill the `NaN` values,
    pass `bfill` as an argument to the `method` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the `NaN` value present in the original dataframe (at index
    value 2010-01-03) will not be filled by any of the value propagation schemes.
    This is because filling while reindexing does not look at dataframe values, but
    only compares the original and desired indexes. If you do want to fill in the
    `NaN` values present in the original dataframe, use the `fillna()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See the [user guide](../../user_guide/basics.html#basics-reindexing) for more.
  prefs: []
  type: TYPE_NORMAL
