- en: Formal Power Series
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形式幂级数
- en: 原文：[https://docs.sympy.org/latest/modules/series/formal.html](https://docs.sympy.org/latest/modules/series/formal.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/series/formal.html](https://docs.sympy.org/latest/modules/series/formal.html)
- en: Methods for computing and manipulating Formal Power Series.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计算和操作形式幂级数的方法。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Represents Formal Power Series of a function.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表示函数的形式幂级数。
- en: Explanation
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: No computation is performed. This class should only to be used to represent
    a series. No checks are performed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行计算。此类仅用于表示级数。不执行检查。
- en: For computing a series use [`fps()`](#sympy.series.formal.fps "sympy.series.formal.fps").
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 用于计算系列的 [`fps()`](#sympy.series.formal.fps "sympy.series.formal.fps").
- en: See also
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.series.formal.fps`](#sympy.series.formal.fps "sympy.series.formal.fps")'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.fps`](#sympy.series.formal.fps "sympy.series.formal.fps")'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: self.coeff_bell(n) returns a sequence of Bell polynomials of the second kind.
    Note that `n` should be a integer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.coeff_bell(n)` 返回第二类贝尔多项式的序列。请注意 `n` 应为整数。'
- en: The second kind of Bell polynomials (are sometimes called “partial” Bell polynomials
    or incomplete Bell polynomials) are defined as
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二类贝尔多项式（有时称为“部分”贝尔多项式或不完全贝尔多项式）定义为
- en: \[B_{n,k}(x_1, x_2,\dotsc x_{n-k+1}) = \sum_{j_1+j_2+j_2+\dotsb=k \atop j_1+2j_2+3j_2+\dotsb=n}
    \frac{n!}{j_1!j_2!\dotsb j_{n-k+1}!} \left(\frac{x_1}{1!} \right)^{j_1} \left(\frac{x_2}{2!}
    \right)^{j_2} \dotsb \left(\frac{x_{n-k+1}}{(n-k+1)!} \right) ^{j_{n-k+1}}.\]
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: \[B_{n,k}(x_1, x_2,\dotsc x_{n-k+1}) = \sum_{j_1+j_2+j_2+\dotsb=k \atop j_1+2j_2+3j_2+\dotsb=n}
    \frac{n!}{j_1!j_2!\dotsb j_{n-k+1}!} \left(\frac{x_1}{1!} \right)^{j_1} \left(\frac{x_2}{2!}
    \right)^{j_2} \dotsb \left(\frac{x_{n-k+1}}{(n-k+1)!} \right) ^{j_{n-k+1}}.\]
- en: '`bell(n, k, (x1, x2, ...))` gives Bell polynomials of the second kind, \(B_{n,k}(x_1,
    x_2, \dotsc, x_{n-k+1})\).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bell(n, k, (x1, x2, ...))` 给出第二类贝尔多项式，\(B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\).'
- en: See also
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell")'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell")'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Returns the truncated terms of the formal power series of the composed function,
    up to specified `n`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 返回组合函数的形式幂级数的截断项，最多到指定的 `n`。
- en: 'Parameters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**n** : Number, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : 数字，可选'
- en: Specifies the order of the term up to which the polynomial should be truncated.
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定应截断多项式的项的顺序。
- en: Explanation
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `f` and `g` are two formal power series of two different functions, then
    the coefficient sequence `ak` of the composed formal power series \(fp\) will
    be as follows.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `f` 和 `g` 是两个不同函数的形式幂级数，则组合形式幂级数 `fp` 的系数序列 `ak` 如下。
- en: \[\sum\limits_{k=0}^{n} b_k B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sum\limits_{k=0}^{n} b_k B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
- en: Examples
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose")'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose")'
- en: References
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R824](#id1)]'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R824](#id1)]'
- en: 'Comtet, Louis: Advanced combinatorics; the art of finite and infinite expansions.
    Reidel, 1974.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'Comtet, Louis: Advanced combinatorics; the art of finite and infinite expansions.
    Reidel, 1974.'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Returns an infinite representation of the series
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 返回系列的无限表示
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Integrate Formal Power Series.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 积分形式幂级数。
- en: Examples
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Returns the truncated terms of the inverse of the formal power series, up to
    specified `n`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 返回形式幂级数的截断项的逆，最多到指定的 `n`。
- en: 'Parameters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**n** : Number, optional'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : 数字，可选'
- en: Specifies the order of the term up to which the polynomial should be truncated.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定应截断多项式的项的顺序。
- en: Explanation
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If `f` and `g` are two formal power series of two different functions, then
    the coefficient sequence `ak` of the composed formal power series `fp` will be
    as follows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `f` 和 `g` 是两个不同函数的形式幂级数，则组合形式幂级数 `fp` 的系数序列 `ak` 如下。
- en: \[\sum\limits_{k=0}^{n} (-1)^{k} x_0^{-k-1} B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: \[\sum\limits_{k=0}^{n} (-1)^{k} x_0^{-k-1} B_{n,k}(x_1, x_2, \dotsc, x_{n-k+1})\]
- en: Examples
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.functions.combinatorial.numbers.bell`](../functions/combinatorial.html#sympy.functions.combinatorial.numbers.bell
    "sympy.functions.combinatorial.numbers.bell"), [`sympy.series.formal.FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse")'
- en: References
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R825](#id2)]'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R825](#id2)]'
- en: 'Comtet, Louis: Advanced combinatorics; the art of finite and infinite expansions.
    Reidel, 1974.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'Comtet, Louis: 高级组合数学；有限和无限展开的艺术。Reidel, 1974.'
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Truncated series as polynomial.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 截断的级数作为多项式。
- en: Explanation
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns series expansion of `f` upto order `O(x**n)` as a polynomial(without
    `O` term).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `f` 的级数展开，直到阶数为 `O(x**n)` 作为多项式（不包括 `O` 项）。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Multiplies two Formal Power Series, using discrete convolution and return the
    truncated terms upto specified order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 两个形式幂级数相乘，使用离散卷积并返回截断的指定阶数的项。
- en: 'Parameters:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**n** : Number, optional'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** : 数字, 可选'
- en: Specifies the order of the term up to which the polynomial should be truncated.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指定应截断多项式的项的顺序。
- en: Examples
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: See also
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.discrete.convolutions`](../discrete.html#module-sympy.discrete.convolutions
    "sympy.discrete.convolutions"), [`sympy.series.formal.FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct")'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.discrete.convolutions`](../discrete.html#module-sympy.discrete.convolutions
    "sympy.discrete.convolutions"), [`sympy.series.formal.FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct")'
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Truncated series.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 截断级数。
- en: Explanation
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns truncated series expansion of f upto order `O(x**n)`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 f 的截断级数展开，直到阶数为 `O(x**n)`。
- en: If n is `None`, returns an infinite iterator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 n 为 `None`，则返回一个无限迭代器。
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Generates Formal Power Series of `f`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 生成 `f` 的形式幂级数。
- en: 'Parameters:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**x** : Symbol, optional'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**x** : 符号, 可选'
- en: If x is None and `f` is univariate, the univariate symbols will be supplied,
    otherwise an error will be raised.
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 x 为 None 并且 `f` 是单变量的，则将提供单变量符号，否则将引发错误。
- en: '**x0** : number, optional'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0** : 数字, 可选'
- en: Point to perform series expansion about. Default is 0.
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 执行级数展开的点。默认为 0。
- en: '**dir** : {1, -1, ‘+’, ‘-‘}, optional'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**dir** : {1, -1, ‘+’, ‘-‘}, 可选'
- en: If dir is 1 or ‘+’ the series is calculated from the right and for -1 or ‘-’
    the series is calculated from the left. For smooth functions this flag will not
    alter the results. Default is 1.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果 dir 为 1 或 ‘+’，则从右边计算级数；如果为 -1 或 ‘-’，则从左边计算级数。对于光滑函数，此标志不会改变结果。默认为 1。
- en: '**hyper** : {True, False}, optional'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**hyper** : {True, False}, 可选'
- en: Set hyper to False to skip the hypergeometric algorithm. By default it is set
    to False.
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将 hyper 设置为 False 以跳过超几何算法。默认设置为 False。
- en: '**order** : int, optional'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**order** : 整数, 可选'
- en: Order of the derivative of `f`, Default is 4.
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`f` 的导数的顺序，默认为 4。'
- en: '**rational** : {True, False}, optional'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**rational** : {True, False}, 可选'
- en: Set rational to False to skip rational algorithm. By default it is set to True.
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将 rational 设置为 False 以跳过有理算法。默认设置为 True。
- en: '**full** : {True, False}, optional'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**full** : {True, False}, 可选'
- en: Set full to True to increase the range of rational algorithm. See [`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm") for details. By default it is set to
    False.
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将 full 设置为 True 以增加有理算法的范围。有关详细信息，请参阅 [`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm")。默认设置为 False。
- en: Explanation
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Returns the formal series expansion of `f` around `x = x0` with respect to `x`
    in the form of a `FormalPowerSeries` object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于 `x = x0` 的 `f` 的形式级数展开，关于 `x` 的形式为 `FormalPowerSeries` 对象。
- en: Formal Power Series is represented using an explicit formula computed using
    different algorithms.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 形式幂级数使用使用不同算法计算的显式公式表示。
- en: See [`compute_fps()`](#sympy.series.formal.compute_fps "sympy.series.formal.compute_fps")
    for the more details regarding the computation of formula.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有关计算公式的详细信息，请参阅 [`compute_fps()`](#sympy.series.formal.compute_fps "sympy.series.formal.compute_fps")。
- en: Examples
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Rational Functions
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有理函数
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Symbolic Functions
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 符号函数
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: See also
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.compute_fps`](#sympy.series.formal.compute_fps
    "sympy.series.formal.compute_fps")'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.compute_fps`](#sympy.series.formal.compute_fps
    "sympy.series.formal.compute_fps")'
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Computes the formula for Formal Power Series of a function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 计算函数的形式幂级数的公式。
- en: 'Parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**x** : Symbol'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**：符号'
- en: '**x0** : number, optional'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**x0**：数值，可选'
- en: Point to perform series expansion about. Default is 0.
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 执行级数展开的点。默认为0。
- en: '**dir** : {1, -1, ‘+’, ‘-‘}, optional'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**dir**：{1, -1, ‘+’, ‘-‘}，可选'
- en: If dir is 1 or ‘+’ the series is calculated from the right and for -1 or ‘-’
    the series is calculated from the left. For smooth functions this flag will not
    alter the results. Default is 1.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果dir为1或‘+’，则从右侧计算级数；如果为-1或‘-’，则从左侧计算级数。对于平滑函数，此标志不会改变结果。默认为1。
- en: '**hyper** : {True, False}, optional'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**hyper**：{True, False}，可选'
- en: Set hyper to False to skip the hypergeometric algorithm. By default it is set
    to False.
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将hyper设置为False以跳过超几何算法。默认为False。
- en: '**order** : int, optional'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**：整数，可选'
- en: Order of the derivative of `f`, Default is 4.
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`f`的导数阶数，默认为4。'
- en: '**rational** : {True, False}, optional'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**rational**：{True, False}，可选'
- en: Set rational to False to skip rational algorithm. By default it is set to True.
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将rational设置为False以跳过有理算法。默认为True。
- en: '**full** : {True, False}, optional'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**full**：{True, False}，可选'
- en: Set full to True to increase the range of rational algorithm. See [`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm") for details. By default it is set to
    False.
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将full设置为True以增加有理算法的范围。详见[`rational_algorithm()`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm")。默认为False。
- en: 'Returns:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**ak** : sequence'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**ak**：序列'
- en: Sequence of coefficients.
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 系数序列。
- en: '**xk** : sequence'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**xk**：序列'
- en: Sequence of powers of x.
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x的幂序列。
- en: '**ind** : Expr'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**ind**：表达式'
- en: Independent terms.
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立项。
- en: '**mul** : Pow'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**mul**：Pow'
- en: Common terms.
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 常见术语。
- en: Explanation
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Tries to compute the formula by applying the following techniques (in order):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试应用以下技术计算公式（按顺序）：
- en: rational_algorithm
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: rational_algorithm
- en: Hypergeometric algorithm
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超几何算法
- en: See also
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.series.formal.rational_algorithm`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm"), [`sympy.series.formal.hyper_algorithm`](#sympy.series.formal.hyper_algorithm
    "sympy.series.formal.hyper_algorithm")'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.rational_algorithm`](#sympy.series.formal.rational_algorithm
    "sympy.series.formal.rational_algorithm")，[`sympy.series.formal.hyper_algorithm`](#sympy.series.formal.hyper_algorithm
    "sympy.series.formal.hyper_algorithm")'
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Represents the composed formal power series of two functions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 表示两个函数的组合形式幂级数。
- en: Explanation
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行计算。项按逐项逻辑计算，而不是点对点逻辑。
- en: There are two differences between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose") object. The first argument contains
    the outer function and the inner function involved in the omposition. Also, the
    coefficient sequence contains the generic sequence which is to be multiplied by
    a custom `bell_seq` finite sequence. The finite terms will then be added up to
    get the final terms.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries "sympy.series.formal.FormalPowerSeries")对象与[`FormalPowerSeriesCompose`](#sympy.series.formal.FormalPowerSeriesCompose
    "sympy.series.formal.FormalPowerSeriesCompose")对象之间有两个区别。第一个参数包含组合中涉及的外部函数和内部函数。此外，系数序列包含将与自定义`bell_seq`有限序列相乘的通用序列。然后将有限项相加以获得最终项。'
- en: See also
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries")，[`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Function for the composed formal power series.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 组合形式幂级数的函数。
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Represents the Inverse of a formal power series.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 表示形式幂级数的逆。
- en: Explanation
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不执行计算。项按逐项逻辑计算，而不是点对点逻辑。
- en: There is a single difference between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse") object. The coefficient sequence
    contains the generic sequence which is to be multiplied by a custom `bell_seq`
    finite sequence. The finite terms will then be added up to get the final terms.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries "sympy.series.formal.FormalPowerSeries")
    对象与 [`FormalPowerSeriesInverse`](#sympy.series.formal.FormalPowerSeriesInverse
    "sympy.series.formal.FormalPowerSeriesInverse") 对象之间有一个区别。系数序列包含一个通用序列，将乘以一个自定义的
    `bell_seq` 有限序列。然后将添加有限项以得到最终项。'
- en: See also
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries")，[`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Function for the inverse of a formal power series.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 形式幂级数的反函数。
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Represents the product of two formal power series of two functions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 表示两个函数的形式幂级数的乘积。
- en: Explanation
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: No computation is performed. Terms are calculated using a term by term logic,
    instead of a point by point logic.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 不进行计算。使用逐项逻辑计算项，而不是点对点逻辑。
- en: There are two differences between a [`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries") object and a [`FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct") object. The first argument contains
    the two functions involved in the product. Also, the coefficient sequence contains
    both the coefficient sequence of the formal power series of the involved functions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries "sympy.series.formal.FormalPowerSeries")
    对象与 [`FormalPowerSeriesProduct`](#sympy.series.formal.FormalPowerSeriesProduct
    "sympy.series.formal.FormalPowerSeriesProduct") 对象之间有两个区别。第一个参数包含参与乘积的两个函数。此外，系数序列包含涉及函数的形式幂级数的系数序列。'
- en: See also
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries"), [`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.FormalPowerSeries`](#sympy.series.formal.FormalPowerSeries
    "sympy.series.formal.FormalPowerSeries")，[`sympy.series.formal.FiniteFormalPowerSeries`](#sympy.series.formal.FiniteFormalPowerSeries
    "sympy.series.formal.FiniteFormalPowerSeries")'
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Function of the product of two formal power series.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 两个形式幂级数的乘积函数。
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Base Class for Product, Compose and Inverse classes
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 产品、组合和反函数的基类
- en: Rational Algorithm
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有理算法
- en: '[PRE31]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Returns a list of all the rationally independent terms.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有有理独立项的列表。
- en: Examples
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Rational algorithm for computing formula of coefficients of Formal Power Series
    of a function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 计算函数形式幂级数系数的有理算法。
- en: 'Parameters:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**x** : Symbol'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**：符号'
- en: '**order** : int, optional'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**：整数，可选'
- en: Order of the derivative of `f`, Default is 4.
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 函数 `f` 的导数阶数，默认为 4。
- en: '**full** : bool'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**full**：布尔值'
- en: 'Returns:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**formula** : Expr'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**formula**：表达式'
- en: '**ind** : Expr'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**ind**：表达'
- en: Independent terms.
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立项。
- en: '**order** : int'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**order**：整数'
- en: '**full** : bool'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**full**：布尔值'
- en: Explanation
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Applicable when f(x) or some derivative of f(x) is a rational function in x.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当 f(x) 或 f(x) 的某个导数是 x 的有理函数时适用。
- en: '[`rational_algorithm()`](#sympy.series.formal.rational_algorithm "sympy.series.formal.rational_algorithm")
    uses [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart")
    function for partial fraction decomposition. [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") by default uses ‘undetermined coefficients method’.
    By setting `full=True`, ‘Bronstein’s algorithm’ can be used instead.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`rational_algorithm()`](#sympy.series.formal.rational_algorithm "sympy.series.formal.rational_algorithm")
    使用 [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart")
    函数进行部分分解。[`apart()`](../polys/reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart")
    默认使用‘未定系数法’。通过设置 `full=True`，可以改用‘Bronstein 算法’。'
- en: Looks for derivative of a function up to 4’th order (by default). This can be
    overridden using order option.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找函数的 4 阶导数（默认）。可以使用 order 选项覆盖此行为。
- en: Examples
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Notes
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: By setting `full=True`, range of admissible functions to be solved using `rational_algorithm`
    can be increased. This option should be used carefully as it can significantly
    slow down the computation as `doit` is performed on the [`RootSum`](../polys/reference.html#sympy.polys.rootoftools.RootSum
    "sympy.polys.rootoftools.RootSum") object returned by the [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") function. Use `full=False` whenever possible.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置 `full=True`，可以增加使用 `rational_algorithm` 解决的可接受函数范围。应谨慎使用此选项，因为它会显著减慢由 [`apart()`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart") 函数返回的 [`RootSum`](../polys/reference.html#sympy.polys.rootoftools.RootSum
    "sympy.polys.rootoftools.RootSum") 对象上的 `doit` 计算。尽可能使用 `full=False`。
- en: See also
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.polys.partfrac.apart`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.polys.partfrac.apart`](../polys/reference.html#sympy.polys.partfrac.apart
    "sympy.polys.partfrac.apart")'
- en: References
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R826](#id3)]'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R826](#id3)]'
- en: Formal Power Series - Dominik Gruntz, Wolfram Koepf
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 形式幂级数 - Dominik Gruntz, Wolfram Koepf
- en: '[[R827](#id4)]'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R827](#id4)]'
- en: Power Series in Computer Algebra - Wolfram Koepf
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代数中的幂级数 - Wolfram Koepf
- en: Hypergeometric Algorithm
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超几何算法
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Generates simple DE.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 生成简单的 DE。
- en: Explanation
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: DE is of the form
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: DE 的形式为
- en: \[f^k(x) + \sum\limits_{j=0}^{k-1} A_j f^j(x) = 0\]
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: \[f^k(x) + \sum\limits_{j=0}^{k-1} A_j f^j(x) = 0\]
- en: where \(A_j\) should be rational function in x.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(A_j\) 应该是 x 的有理函数。
- en: Generates DE’s upto order 4 (default). DE’s can also have free parameters.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 生成至多 4 阶（默认）的 DE。DE 也可以具有自由参数。
- en: By increasing order, higher order DE’s can be found.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加阶数，可以找到更高阶的 DE。
- en: Yields a tuple of (DE, order).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组 (DE, order)。
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Converts a DE with constant coefficients (explike) into a RE.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有常数系数的 DE（如指数式）转换为 RE。
- en: Explanation
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Performs the substitution:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 执行替换：
- en: \[f^j(x) \to r(k + j)\]
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: \[f^j(x) \to r(k + j)\]
- en: Normalises the terms so that lowest order of a term is always r(k).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化术语，使得术语的最低阶始终为 r(k)。
- en: Examples
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: See also
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.series.formal.hyper_re`](#sympy.series.formal.hyper_re "sympy.series.formal.hyper_re")'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.hyper_re`](#sympy.series.formal.hyper_re "sympy.series.formal.hyper_re")'
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Converts a DE into a RE.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将 DE 转换为 RE。
- en: Explanation
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Performs the substitution:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 执行替换：
- en: \[x^l f^j(x) \to (k + 1 - l)_j . a_{k + j - l}\]
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: \[x^l f^j(x) \to (k + 1 - l)_j . a_{k + j - l}\]
- en: Normalises the terms so that lowest order of a term is always r(k).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化术语，使得术语的最低阶始终为 r(k)。
- en: Examples
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE43]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: See also
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.series.formal.exp_re`](#sympy.series.formal.exp_re "sympy.series.formal.exp_re")'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.exp_re`](#sympy.series.formal.exp_re "sympy.series.formal.exp_re")'
- en: '[PRE45]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Solves RE of hypergeometric type.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 解决超几何类型的 RE。
- en: 'Returns:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**formula** : Expr'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**formula** : 表达式'
- en: '**ind** : Expr'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**ind** : 表达式'
- en: Independent terms.
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立项。
- en: '**order** : int'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**order** : 整数'
- en: Explanation
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Attempts to solve RE of the form
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试解决形式为 RE 的方程
- en: Q(k)*a(k + m) - P(k)*a(k)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Q(k)*a(k + m) - P(k)*a(k)
- en: 'Transformations that preserve Hypergeometric type:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 保持超几何类型的变换：
- en: 'x**n*f(x): b(k + m) = R(k - n)*b(k)'
  id: totrans-245
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'x**n*f(x): b(k + m) = R(k - n)*b(k)'
- en: ''
  id: totrans-246
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-247
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(A*x): b(k + m) = A**m*R(k)*b(k)'
  id: totrans-248
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'f(A*x): b(k + m) = A**m*R(k)*b(k)'
- en: ''
  id: totrans-249
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-250
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(x**n): b(k + n*m) = R(k/n)*b(k)'
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'f(x**n): b(k + n*m) = R(k/n)*b(k)'
- en: ''
  id: totrans-252
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f(x**(1/m)): b(k + 1) = R(k*m)*b(k)'
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'f(x**(1/m)): b(k + 1) = R(k*m)*b(k)'
- en: ''
  id: totrans-255
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-256
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f’(x): b(k + m) = ((k + m + 1)/(k + 1))*R(k + 1)*b(k)'
  id: totrans-257
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'f’(x): b(k + m) = ((k + m + 1)/(k + 1))*R(k + 1)*b(k)'
- en: Some of these transformations have been used to solve the RE.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一些这些变换已被用来解决 RE。
- en: Examples
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE46]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: References
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R828](#id5)]'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R828](#id5)]'
- en: Formal Power Series - Dominik Gruntz, Wolfram Koepf
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 形式幂级数 - Dominik Gruntz, Wolfram Koepf
- en: '[[R829](#id6)]'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R829](#id6)]'
- en: Power Series in Computer Algebra - Wolfram Koepf
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 计算代数中的幂级数 - Wolfram Koepf
- en: '[PRE49]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Solves the DE.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 解决 DE。
- en: 'Returns:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: '**formula** : Expr'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**formula** : 表达式'
- en: '**ind** : Expr'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**ind** : 表达式'
- en: Independent terms.
  id: totrans-273
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 独立项。
- en: '**order** : int'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**order** : 整数'
- en: Explanation
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: Tries to solve DE by either converting into a RE containing two terms or converting
    into a DE having constant coefficients.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过将其转换为包含两项的 RE 或将其转换为具有常数系数的 DE 来解决 DE。
- en: Examples
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE50]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Hypergeometric algorithm for computing Formal Power Series.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 用于计算形式幂级数的超几何算法。
- en: Explanation
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: 'Steps:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤：
- en: Generates DE
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成 DE
- en: Convert the DE into RE
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 DE 转换为 RE
- en: Solves the RE
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 RE
- en: Examples
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE54]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`sympy.series.formal.simpleDE`](#sympy.series.formal.simpleDE "sympy.series.formal.simpleDE"),
    [`sympy.series.formal.solve_de`](#sympy.series.formal.solve_de "sympy.series.formal.solve_de")'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sympy.series.formal.simpleDE`](#sympy.series.formal.simpleDE "sympy.series.formal.simpleDE"),
    [`sympy.series.formal.solve_de`](#sympy.series.formal.solve_de "sympy.series.formal.solve_de")'
