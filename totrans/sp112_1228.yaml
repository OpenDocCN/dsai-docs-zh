- en: scipy.stats.multivariate_hypergeom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multivariate_hypergeom.html#scipy.stats.multivariate_hypergeom](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.multivariate_hypergeom.html#scipy.stats.multivariate_hypergeom)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A multivariate hypergeometric random variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**m**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The number of each type of object in the population. That is, \(m[i]\) is the
    number of objects of type \(i\).
  prefs: []
  type: TYPE_NORMAL
- en: '**n**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The number of samples taken from the population.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, np.random.RandomState, np.random.Generator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used for drawing random variates. If *seed* is *None*, the *RandomState* singleton
    is used. If *seed* is an int, a new `RandomState` instance is used, seeded with
    seed. If *seed* is already a `RandomState` or `Generator` instance, then that
    object is used. Default is *None*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom")'
  prefs: []
  type: TYPE_NORMAL
- en: The hypergeometric distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.stats.multinomial`](scipy.stats.multinomial.html#scipy.stats.multinomial
    "scipy.stats.multinomial")'
  prefs: []
  type: TYPE_NORMAL
- en: The multinomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '*m* must be an array of positive integers. If the quantile \(i\) contains values
    out of the range \([0, m_i]\) where \(m_i\) is the number of objects of type \(i\)
    in the population or if the parameters are inconsistent with one another (e.g.
    `x.sum() != n`), methods return the appropriate value (e.g. `0` for `pmf`). If
    *m* or *n* contain negative values, the result will contain `nan` there.'
  prefs: []
  type: TYPE_NORMAL
- en: The probability mass function for [`multivariate_hypergeom`](#scipy.stats.multivariate_hypergeom
    "scipy.stats.multivariate_hypergeom") is
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}P(X_1 = x_1, X_2 = x_2, \ldots, X_k = x_k) = \frac{\binom{m_1}{x_1}
    \binom{m_2}{x_2} \cdots \binom{m_k}{x_k}}{\binom{M}{n}}, \\ \quad (x_1, x_2, \ldots,
    x_k) \in \mathbb{N}^k \text{ with } \sum_{i=1}^k x_i = n\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(m_i\) are the number of objects of type \(i\), \(M\) is the total number
    of objects in the population (sum of all the \(m_i\)), and \(n\) is the size of
    the sample to be taken from the population.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.6.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: The Multivariate Hypergeometric Distribution, [http://www.randomservices.org/random/urn/MultiHypergeometric.html](http://www.randomservices.org/random/urn/MultiHypergeometric.html)
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Thomas J. Sargent and John Stachurski, 2020, Multivariate Hypergeometric Distribution
    [https://python.quantecon.org/_downloads/pdf/multi_hyper.pdf](https://python.quantecon.org/_downloads/pdf/multi_hyper.pdf)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'To evaluate the probability mass function of the multivariate hypergeometric
    distribution, with a dichotomous population of size \(10\) and \(20\), at a sample
    of size \(12\) with \(8\) objects of the first type and \(4\) objects of the second
    type, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`multivariate_hypergeom`](#scipy.stats.multivariate_hypergeom "scipy.stats.multivariate_hypergeom")
    distribution is identical to the corresponding [`hypergeom`](scipy.stats.hypergeom.html#scipy.stats.hypergeom
    "scipy.stats.hypergeom") distribution (tiny numerical differences notwithstanding)
    when only two types (good and bad) of objects are present in the population as
    in the example above. Consider another example for a comparison with the hypergeometric
    distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The functions `pmf`, `logpmf`, `mean`, `var`, `cov`, and `rvs` support broadcasting,
    under the convention that the vector parameters (`x`, `m`, and `n`) are interpreted
    as if each row along the last axis is a single object. For instance, we can combine
    the previous two calls to [`multivariate_hypergeom`](#scipy.stats.multivariate_hypergeom
    "scipy.stats.multivariate_hypergeom") as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This broadcasting also works for `cov`, where the output objects are square
    matrices of size `m.shape[-1]`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That is, `result[0]` is equal to `multivariate_hypergeom.cov(m=[7, 9], n=8)`
    and `result[1]` is equal to `multivariate_hypergeom.cov(m=[10, 15], n=12)`.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the object may be called (as a function) to fix the *m* and *n*
    parameters, returning a “frozen” multivariate hypergeometric random variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **pmf(x, m, n)** | Probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpmf(x, m, n)** | Log of the probability mass function. |'
  prefs: []
  type: TYPE_TB
- en: '| **rvs(m, n, size=1, random_state=None)** | Draw random samples from a multivariate
    hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(m, n)** | Mean of the multivariate hypergeometric distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **var(m, n)** | Variance of the multivariate hypergeometric distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cov(m, n)** | Compute the covariance matrix of the multivariate hypergeometric
    distribution. |'
  prefs: []
  type: TYPE_TB
