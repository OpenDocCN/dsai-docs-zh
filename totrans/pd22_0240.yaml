- en: pandas.DataFrame.query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Query the columns of a DataFrame with a boolean expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr**str'
  prefs: []
  type: TYPE_NORMAL
- en: The query string to evaluate.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to variables in the environment by prefixing them with an ‘@’
    character like `@a + b`.
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to column names that are not valid Python variable names by surrounding
    them in backticks. Thus, column names containing spaces or punctuations (besides
    underscores) or starting with digits must be surrounded by backticks. (For example,
    a column named “Area (cm^2)” would be referenced as ``Area (cm^2)``). Column names
    which are Python keywords (like “list”, “for”, “import”, etc) cannot be used.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if one of your columns is called `a a` and you want to sum it with
    `b`, your query should be ``a a` + b`.
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to modify the DataFrame rather than creating a new one.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`eval()`](pandas.eval.html#pandas.eval "pandas.eval")
    for complete details on the keyword arguments accepted by [`DataFrame.query()`](#pandas.DataFrame.query
    "pandas.DataFrame.query").
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame or None
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame resulting from the provided query expression or None if `inplace=True`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`eval`](pandas.eval.html#pandas.eval "pandas.eval")'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate a string describing operations on DataFrame columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.eval`](pandas.DataFrame.eval.html#pandas.DataFrame.eval "pandas.DataFrame.eval")'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate a string describing operations on DataFrame columns.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The result of the evaluation of this expression is first passed to [`DataFrame.loc`](pandas.DataFrame.loc.html#pandas.DataFrame.loc
    "pandas.DataFrame.loc") and if that fails because of a multidimensional key (e.g.,
    a DataFrame) then the result will be passed to `DataFrame.__getitem__()`.
  prefs: []
  type: TYPE_NORMAL
- en: This method uses the top-level [`eval()`](pandas.eval.html#pandas.eval "pandas.eval")
    function to evaluate the passed query.
  prefs: []
  type: TYPE_NORMAL
- en: The [`query()`](#pandas.DataFrame.query "pandas.DataFrame.query") method uses
    a slightly modified Python syntax by default. For example, the `&` and `|` (bitwise)
    operators have the precedence of their boolean cousins, [`and`](https://docs.python.org/3/reference/expressions.html#and
    "(in Python v3.12)") and [`or`](https://docs.python.org/3/reference/expressions.html#or
    "(in Python v3.12)"). This *is* syntactically valid Python, however the semantics
    are different.
  prefs: []
  type: TYPE_NORMAL
- en: You can change the semantics of the expression by passing the keyword argument
    `parser='python'`. This enforces the same semantics as evaluation in Python space.
    Likewise, you can pass `engine='python'` to evaluate an expression using Python
    itself as a backend. This is not recommended as it is inefficient compared to
    using `numexpr` as the engine.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DataFrame.index`](pandas.DataFrame.index.html#pandas.DataFrame.index "pandas.DataFrame.index")
    and [`DataFrame.columns`](pandas.DataFrame.columns.html#pandas.DataFrame.columns
    "pandas.DataFrame.columns") attributes of the [`DataFrame`](pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instance are placed in the query namespace by default, which
    allows you to treat both the index and columns of the frame as a column in the
    frame. The identifier `index` is used for the frame index; you can also use the
    name of the index to identify it in a query. Please note that Python keywords
    may not be used as identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: For further details and examples see the `query` documentation in [indexing](../../user_guide/indexing.html#indexing-query).
  prefs: []
  type: TYPE_NORMAL
- en: '*Backtick quoted variables*'
  prefs: []
  type: TYPE_NORMAL
- en: Backtick quoted variables are parsed as literal Python code and are converted
    internally to a Python valid identifier. This can lead to the following problems.
  prefs: []
  type: TYPE_NORMAL
- en: During parsing a number of disallowed characters inside the backtick quoted
    string are replaced by strings that are allowed as a Python identifier. These
    characters include all operators in Python, the space character, the question
    mark, the exclamation mark, the dollar sign, and the euro sign. For other characters
    that fall outside the ASCII range (U+0001..U+007F) and those that are not further
    specified in PEP 3131, the query parser will raise an error. This excludes whitespace
    different than the space character, but also the hashtag (as it is used for comments)
    and the backtick itself (backtick can also not be escaped).
  prefs: []
  type: TYPE_NORMAL
- en: In a special case, quotes that make a pair around a backtick can confuse the
    parser. For example, ``it's` > `that's`` will raise an error, as it forms a quoted
    string (`'s > `that'`) with a backtick inside.
  prefs: []
  type: TYPE_NORMAL
- en: See also the Python documentation about lexical analysis ([https://docs.python.org/3/reference/lexical_analysis.html](https://docs.python.org/3/reference/lexical_analysis.html))
    in combination with the source code in `pandas.core.computation.parsing`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous expression is equivalent to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For columns with spaces in their name, you can use backtick quoting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The previous expression is equivalent to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
