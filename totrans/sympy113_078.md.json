["```py\n>>> from sympy import *\n>>> init_printing(use_unicode=False)\n>>> x = Symbol('x')\n>>> integrate(x**2 + x + 1, x)\n 3    2\nx    x\n-- + -- + x\n3    2 \n```", "```py\n>>> integrate(x/(x**2+2*x+1), x)\n 1\nlog(x + 1) + -----\n x + 1 \n```", "```py\n>>> integrate(x**2 * exp(x) * cos(x), x)\n 2  x           2  x                         x           x\nx *e *sin(x)   x *e *cos(x)      x          e *sin(x)   e *cos(x)\n------------ + ------------ - x*e *sin(x) + --------- - ---------\n 2              2                           2           2 \n```", "```py\n>>> integrate(exp(-x**2)*erf(x), x)\n ____    2\n\\/ pi *erf (x)\n--------------\n 4 \n```", "```py\nsympy.integrals.transforms.mellin_transform(f, x, s, **hints)\n```", "```py\n>>> from sympy import mellin_transform, exp\n>>> from sympy.abc import x, s\n>>> mellin_transform(exp(-x), x, s)\n(gamma(s), (0, oo), True) \n```", "```py\nclass sympy.integrals.transforms.MellinTransform(*args)\n```", "```py\nsympy.integrals.transforms.inverse_mellin_transform(F, s, x, strip, **hints)\n```", "```py\n>>> from sympy import inverse_mellin_transform, oo, gamma\n>>> from sympy.abc import x, s\n>>> inverse_mellin_transform(gamma(s), s, x, (0, oo))\nexp(-x) \n```", "```py\n>>> f = 1/(s**2 - 1)\n>>> inverse_mellin_transform(f, s, x, (-oo, -1))\nx*(1 - 1/x**2)*Heaviside(x - 1)/2\n>>> inverse_mellin_transform(f, s, x, (-1, 1))\n-x*Heaviside(1 - x)/2 - Heaviside(x - 1)/(2*x)\n>>> inverse_mellin_transform(f, s, x, (1, oo))\n(1/2 - x**2/2)*Heaviside(1 - x)/x \n```", "```py\nclass sympy.integrals.transforms.InverseMellinTransform(*args)\n```", "```py\nsympy.integrals.transforms.laplace_transform(f, t, s, legacy_matrix=True, **hints)\n```", "```py\n>>> from sympy import DiracDelta, exp, laplace_transform\n>>> from sympy.abc import t, s, a\n>>> laplace_transform(t**4, t, s)\n(24/s**5, 0, True)\n>>> laplace_transform(t**a, t, s)\n(gamma(a + 1)/(s*s**a), 0, re(a) > -1)\n>>> laplace_transform(DiracDelta(t)-a*exp(-a*t), t, s, simplify=True)\n(s/(a + s), -re(a), True) \n```", "```py\n>>> from sympy import Function, laplace_correspondence, diff, solve\n>>> from sympy import laplace_initial_conds, inverse_laplace_transform\n>>> from sympy.abc import d, k, m, v\n>>> x = Function('x')\n>>> X = Function('X')\n>>> f = m*diff(x(t), t, 2) + d*diff(x(t), t) + k*x(t)\n>>> F = laplace_transform(f, t, s, noconds=True)\n>>> F = laplace_correspondence(F, {x: X})\n>>> F = laplace_initial_conds(F, t, {x: [0, v]})\n>>> F\nd*s*X(s) + k*X(s) + m*(s**2*X(s) - v)\n>>> Xs = solve(F, X(s))[0]\n>>> Xs\nm*v/(d*s + k + m*s**2)\n>>> inverse_laplace_transform(Xs, s, t)\n2*v*exp(-d*t/(2*m))*sin(t*sqrt((-d**2 + 4*k*m)/m**2)/2)*Heaviside(t)/sqrt((-d**2 + 4*k*m)/m**2) \n```", "```py\nsympy.integrals.transforms.laplace_correspondence(f, fdict, /)\n```", "```py\n>>> from sympy import laplace_transform, diff, Function\n>>> from sympy import laplace_correspondence, inverse_laplace_transform\n>>> from sympy.abc import t, s\n>>> y = Function(\"y\")\n>>> Y = Function(\"Y\")\n>>> z = Function(\"z\")\n>>> Z = Function(\"Z\")\n>>> f = laplace_transform(diff(y(t), t, 1) + z(t), t, s, noconds=True)\n>>> laplace_correspondence(f, {y: Y, z: Z})\ns*Y(s) + Z(s) - y(0)\n>>> f = inverse_laplace_transform(Y(s), s, t)\n>>> laplace_correspondence(f, {y: Y})\ny(t) \n```", "```py\nsympy.integrals.transforms.laplace_initial_conds(f, t, fdict, /)\n```", "```py\n>>> from sympy import laplace_transform, diff, Function\n>>> from sympy import laplace_correspondence, laplace_initial_conds\n>>> from sympy.abc import t, s\n>>> y = Function(\"y\")\n>>> Y = Function(\"Y\")\n>>> f = laplace_transform(diff(y(t), t, 3), t, s, noconds=True)\n>>> g = laplace_correspondence(f, {y: Y})\n>>> laplace_initial_conds(g, t, {y: [2, 4, 8, 16, 32]})\ns**3*Y(s) - 2*s**2 - 4*s - 8 \n```", "```py\nclass sympy.integrals.transforms.LaplaceTransform(*args)\n```", "```py\ndoit(**hints)\n```", "```py\nsympy.integrals.transforms.inverse_laplace_transform(F, s, t, plane=None, **hints)\n```", "```py\n>>> from sympy import inverse_laplace_transform, exp, Symbol\n>>> from sympy.abc import s, t\n>>> a = Symbol('a', positive=True)\n>>> inverse_laplace_transform(exp(-a*s)/s, s, t)\nHeaviside(-a + t) \n```", "```py\nclass sympy.integrals.transforms.InverseLaplaceTransform(*args)\n```", "```py\ndoit(**hints)\n```", "```py\nsympy.integrals.transforms.fourier_transform(f, x, k, **hints)\n```", "```py\n>>> from sympy import fourier_transform, exp\n>>> from sympy.abc import x, k\n>>> fourier_transform(exp(-x**2), x, k)\nsqrt(pi)*exp(-pi**2*k**2)\n>>> fourier_transform(exp(-x**2), x, k, noconds=False)\n(sqrt(pi)*exp(-pi**2*k**2), True) \n```", "```py\nsympy.integrals.transforms._fourier_transform(f, x, k, a, b, name, simplify=True)\n```", "```py\nclass sympy.integrals.transforms.FourierTransform(*args)\n```", "```py\nsympy.integrals.transforms.inverse_fourier_transform(F, k, x, **hints)\n```", "```py\n>>> from sympy import inverse_fourier_transform, exp, sqrt, pi\n>>> from sympy.abc import x, k\n>>> inverse_fourier_transform(sqrt(pi)*exp(-(pi*k)**2), k, x)\nexp(-x**2)\n>>> inverse_fourier_transform(sqrt(pi)*exp(-(pi*k)**2), k, x, noconds=False)\n(exp(-x**2), True) \n```", "```py\nclass sympy.integrals.transforms.InverseFourierTransform(*args)\n```", "```py\nsympy.integrals.transforms.sine_transform(f, x, k, **hints)\n```", "```py\n>>> from sympy import sine_transform, exp\n>>> from sympy.abc import x, k, a\n>>> sine_transform(x*exp(-a*x**2), x, k)\nsqrt(2)*k*exp(-k**2/(4*a))/(4*a**(3/2))\n>>> sine_transform(x**(-a), x, k)\n2**(1/2 - a)*k**(a - 1)*gamma(1 - a/2)/gamma(a/2 + 1/2) \n```", "```py\nclass sympy.integrals.transforms.SineTransform(*args)\n```", "```py\nsympy.integrals.transforms.inverse_sine_transform(F, k, x, **hints)\n```", "```py\n>>> from sympy import inverse_sine_transform, exp, sqrt, gamma\n>>> from sympy.abc import x, k, a\n>>> inverse_sine_transform(2**((1-2*a)/2)*k**(a - 1)*\n...     gamma(-a/2 + 1)/gamma((a+1)/2), k, x)\nx**(-a)\n>>> inverse_sine_transform(sqrt(2)*k*exp(-k**2/(4*a))/(4*sqrt(a)**3), k, x)\nx*exp(-a*x**2) \n```", "```py\nclass sympy.integrals.transforms.InverseSineTransform(*args)\n```", "```py\nsympy.integrals.transforms.cosine_transform(f, x, k, **hints)\n```", "```py\n>>> from sympy import cosine_transform, exp, sqrt, cos\n>>> from sympy.abc import x, k, a\n>>> cosine_transform(exp(-a*x), x, k)\nsqrt(2)*a/(sqrt(pi)*(a**2 + k**2))\n>>> cosine_transform(exp(-a*sqrt(x))*cos(a*sqrt(x)), x, k)\na*exp(-a**2/(2*k))/(2*k**(3/2)) \n```", "```py\nclass sympy.integrals.transforms.CosineTransform(*args)\n```", "```py\nsympy.integrals.transforms.inverse_cosine_transform(F, k, x, **hints)\n```", "```py\n>>> from sympy import inverse_cosine_transform, sqrt, pi\n>>> from sympy.abc import x, k, a\n>>> inverse_cosine_transform(sqrt(2)*a/(sqrt(pi)*(a**2 + k**2)), k, x)\nexp(-a*x)\n>>> inverse_cosine_transform(1/sqrt(k), k, x)\n1/sqrt(x) \n```", "```py\nclass sympy.integrals.transforms.InverseCosineTransform(*args)\n```", "```py\nsympy.integrals.transforms.hankel_transform(f, r, k, nu, **hints)\n```", "```py\n>>> from sympy import hankel_transform, inverse_hankel_transform\n>>> from sympy import exp\n>>> from sympy.abc import r, k, m, nu, a \n```", "```py\n>>> ht = hankel_transform(1/r**m, r, k, nu)\n>>> ht\n2*k**(m - 2)*gamma(-m/2 + nu/2 + 1)/(2**m*gamma(m/2 + nu/2)) \n```", "```py\n>>> inverse_hankel_transform(ht, k, r, nu)\nr**(-m) \n```", "```py\n>>> ht = hankel_transform(exp(-a*r), r, k, 0)\n>>> ht\na/(k**3*(a**2/k**2 + 1)**(3/2)) \n```", "```py\n>>> inverse_hankel_transform(ht, k, r, 0)\nexp(-a*r) \n```", "```py\nclass sympy.integrals.transforms.HankelTransform(*args)\n```", "```py\nsympy.integrals.transforms.inverse_hankel_transform(F, k, r, nu, **hints)\n```", "```py\n>>> from sympy import hankel_transform, inverse_hankel_transform\n>>> from sympy import exp\n>>> from sympy.abc import r, k, m, nu, a \n```", "```py\n>>> ht = hankel_transform(1/r**m, r, k, nu)\n>>> ht\n2*k**(m - 2)*gamma(-m/2 + nu/2 + 1)/(2**m*gamma(m/2 + nu/2)) \n```", "```py\n>>> inverse_hankel_transform(ht, k, r, nu)\nr**(-m) \n```", "```py\n>>> ht = hankel_transform(exp(-a*r), r, k, 0)\n>>> ht\na/(k**3*(a**2/k**2 + 1)**(3/2)) \n```", "```py\n>>> inverse_hankel_transform(ht, k, r, 0)\nexp(-a*r) \n```", "```py\nclass sympy.integrals.transforms.InverseHankelTransform(*args)\n```", "```py\nclass sympy.integrals.transforms.IntegralTransform(*args)\n```", "```py\n>>> from sympy import LaplaceTransform\n>>> LaplaceTransform._name\n'Laplace' \n```", "```py\ndoit(**hints)\n```", "```py\nproperty function\n```", "```py\nproperty function_variable\n```", "```py\nproperty transform_variable\n```", "```py\nexception sympy.integrals.transforms.IntegralTransformError(transform, function, msg)\n```", "```py\n    sympy.integrals.rationaltools.ratint(f, x, **flags)\n    ```", "```py\n    >>> from sympy.integrals.rationaltools import ratint\n    >>> from sympy.abc import x \n    ```", "```py\n    >>> ratint(36/(x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2), x)\n    (12*x + 6)/(x**2 - 1) + 4*log(x - 2) - 4*log(x + 1) \n    ```", "```py\n    sympy.integrals.rationaltools.ratint_ratpart(f, g, x)\n    ```", "```py\n    >>> from sympy.integrals.rationaltools import ratint_ratpart\n    >>> from sympy.abc import x, y\n    >>> from sympy import Poly\n    >>> ratint_ratpart(Poly(1, x, domain='ZZ'),\n    ... Poly(x + 1, x, domain='ZZ'), x)\n    (0, 1/(x + 1))\n    >>> ratint_ratpart(Poly(1, x, domain='EX'),\n    ... Poly(x**2 + y**2, x, domain='EX'), x)\n    (0, 1/(x**2 + y**2))\n    >>> ratint_ratpart(Poly(36, x, domain='ZZ'),\n    ... Poly(x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2, x, domain='ZZ'), x)\n    ((12*x + 6)/(x**2 - 1), 12/(x**2 - x - 2)) \n    ```", "```py\n    sympy.integrals.rationaltools.ratint_logpart(f, g, x, t=None)\n    ```", "```py\n     ___    ___\n    d  f   d  \\  `   \\  `\n    -- - = --  )      )   a log(s_i(a, x))\n    dx g   dx /__,   /__,\n             i=1..n a | q_i(a) = 0 \n    ```", "```py\n    >>> from sympy.integrals.rationaltools import ratint_logpart\n    >>> from sympy.abc import x\n    >>> from sympy import Poly\n    >>> ratint_logpart(Poly(1, x, domain='ZZ'),\n    ... Poly(x**2 + x + 1, x, domain='ZZ'), x)\n    [(Poly(x + 3*_t/2 + 1/2, x, domain='QQ[_t]'),\n    ...Poly(3*_t**2 + 1, _t, domain='ZZ'))]\n    >>> ratint_logpart(Poly(12, x, domain='ZZ'),\n    ... Poly(x**2 - x - 2, x, domain='ZZ'), x)\n    [(Poly(x - 3*_t/8 - 1/2, x, domain='QQ[_t]'),\n    ...Poly(-_t**2 + 16, _t, domain='ZZ'))] \n    ```", "```py\n    sympy.integrals.trigonometry.trigintegrate(f, x, conds='piecewise')\n    ```", "```py\n    >>> from sympy import sin, cos, tan, sec\n    >>> from sympy.integrals.trigonometry import trigintegrate\n    >>> from sympy.abc import x \n    ```", "```py\n    >>> trigintegrate(sin(x)*cos(x), x)\n    sin(x)**2/2 \n    ```", "```py\n    >>> trigintegrate(sin(x)**2, x)\n    x/2 - sin(x)*cos(x)/2 \n    ```", "```py\n    >>> trigintegrate(tan(x)*sec(x), x)\n    1/cos(x) \n    ```", "```py\n    >>> trigintegrate(sin(x)*tan(x), x)\n    -log(sin(x) - 1)/2 + log(sin(x) + 1)/2 - sin(x) \n    ```", "```py\n    sympy.integrals.deltafunctions.deltaintegrate(f, x)\n    ```", "```py\n    >>> from sympy.abc import x, y, z\n    >>> from sympy.integrals.deltafunctions import deltaintegrate\n    >>> from sympy import sin, cos, DiracDelta\n    >>> deltaintegrate(x*sin(x)*cos(x)*DiracDelta(x - 1), x)\n    sin(1)*cos(1)*Heaviside(x - 1)\n    >>> deltaintegrate(y**2*DiracDelta(x - z)*DiracDelta(y - z), y)\n    z**2*DiracDelta(x - z)*Heaviside(y - z) \n    ```", "```py\n    sympy.integrals.singularityfunctions.singularityintegrate(f, x)\n    ```", "```py\n    >>> from sympy.integrals.singularityfunctions import singularityintegrate\n    >>> from sympy import SingularityFunction, symbols, Function\n    >>> x, a, n, y = symbols('x a n y')\n    >>> f = Function('f')\n    >>> singularityintegrate(SingularityFunction(x, a, 3), x)\n    SingularityFunction(x, a, 4)/4\n    >>> singularityintegrate(5*SingularityFunction(x, 5, -2), x)\n    5*SingularityFunction(x, 5, -1)\n    >>> singularityintegrate(6*SingularityFunction(x, 5, -1), x)\n    6*SingularityFunction(x, 5, 0)\n    >>> singularityintegrate(x*SingularityFunction(x, 0, -1), x)\n    0\n    >>> singularityintegrate(SingularityFunction(x, 1, -1) * f(x), x)\n    f(1)*SingularityFunction(x, 1, 0) \n    ```", "```py\n    sympy.integrals.risch.risch_integrate(f, x, extension=None, handle_first='log', separate_integral=False, rewrite_complex=None, conds='piecewise')\n    ```", "```py\n    >>> from sympy.integrals.risch import risch_integrate\n    >>> from sympy import exp, log, pprint\n    >>> from sympy.abc import x \n    ```", "```py\n    >>> pprint(risch_integrate(exp(-x**2), x))\n     /\n     |\n     |    2\n     |  -x\n     | e    dx\n     |\n    / \n    ```", "```py\n    >>> pprint(risch_integrate((2*log(x)**2 - log(x) - x**2)/(log(x)**3 -\n    ... x**2*log(x)), x))\n     /\n     |\n     log(-x + log(x))   log(x + log(x))    |   1\n    - ---------------- + --------------- +  | ------ dx\n     2                  2           | log(x)\n     |\n     / \n    ```", "```py\n    >>> pprint(risch_integrate(exp(x)*exp(exp(x)), x))\n     / x\\\n     \\e /\n    e\n    >>> pprint(risch_integrate(exp(exp(x)), x))\n     /\n     |\n     |  / x\\\n     |  \\e /\n     | e     dx\n     |\n    / \n    ```", "```py\n    >>> pprint(risch_integrate(x*x**x*log(x) + x**x + x*x**x, x))\n     x\n    x*x\n    >>> pprint(risch_integrate(x**x, x))\n     /\n     |\n     |  x\n     | x  dx\n     |\n    / \n    ```", "```py\n    >>> pprint(risch_integrate(-1/(x*log(x)*log(log(x))**2), x))\n     1\n    -----------\n    log(log(x)) \n    ```", "```py\n    class sympy.integrals.risch.NonElementaryIntegral(function, *symbols, **assumptions)\n    ```", "```py\n    >>> from sympy import integrate, exp, log, Integral\n    >>> from sympy.abc import x \n    ```", "```py\n    >>> a = integrate(exp(-x**2), x, risch=True)\n    >>> print(a)\n    Integral(exp(-x**2), x)\n    >>> type(a)\n    <class 'sympy.integrals.risch.NonElementaryIntegral'> \n    ```", "```py\n    >>> expr = (2*log(x)**2 - log(x) - x**2)/(log(x)**3 - x**2*log(x))\n    >>> b = integrate(expr, x, risch=True)\n    >>> print(b)\n    -log(-x + log(x))/2 + log(x + log(x))/2 + Integral(1/log(x), x)\n    >>> type(b.atoms(Integral).pop())\n    <class 'sympy.integrals.risch.NonElementaryIntegral'> \n    ```", "```py\n    sympy.integrals.manualintegrate.manualintegrate(f, var)\n    ```", "```py\n    >>> from sympy import sin, cos, tan, exp, log, integrate\n    >>> from sympy.integrals.manualintegrate import manualintegrate\n    >>> from sympy.abc import x\n    >>> manualintegrate(1 / x, x)\n    log(x)\n    >>> integrate(1/x)\n    log(x)\n    >>> manualintegrate(log(x), x)\n    x*log(x) - x\n    >>> integrate(log(x))\n    x*log(x) - x\n    >>> manualintegrate(exp(x) / (1 + exp(2 * x)), x)\n    atan(exp(x))\n    >>> integrate(exp(x) / (1 + exp(2 * x)))\n    RootSum(4*_z**2 + 1, Lambda(_i, _i*log(2*_i + exp(x))))\n    >>> manualintegrate(cos(x)**4 * sin(x), x)\n    -cos(x)**5/5\n    >>> integrate(cos(x)**4 * sin(x), x)\n    -cos(x)**5/5\n    >>> manualintegrate(cos(x)**4 * sin(x)**3, x)\n    cos(x)**7/7 - cos(x)**5/5\n    >>> integrate(cos(x)**4 * sin(x)**3, x)\n    cos(x)**7/7 - cos(x)**5/5\n    >>> manualintegrate(tan(x), x)\n    -log(cos(x))\n    >>> integrate(tan(x), x)\n    -log(cos(x)) \n    ```", "```py\n    sympy.integrals.manualintegrate.integral_steps(integrand, symbol, **options)\n    ```", "```py\n    >>> from sympy import exp, sin\n    >>> from sympy.integrals.manualintegrate import integral_steps\n    >>> from sympy.abc import x\n    >>> print(repr(integral_steps(exp(x) / (1 + exp(2 * x)), x)))     \n    URule(integrand=exp(x)/(exp(2*x) + 1), variable=x, u_var=_u, u_func=exp(x),\n    substep=ArctanRule(integrand=1/(_u**2 + 1), variable=_u, a=1, b=1, c=1))\n    >>> print(repr(integral_steps(sin(x), x)))     \n    SinRule(integrand=sin(x), variable=x)\n    >>> print(repr(integral_steps((x**2 + 3)**2, x)))     \n    RewriteRule(integrand=(x**2 + 3)**2, variable=x, rewritten=x**4 + 6*x**2 + 9,\n    substep=AddRule(integrand=x**4 + 6*x**2 + 9, variable=x,\n    substeps=[PowerRule(integrand=x**4, variable=x, base=x, exp=4),\n    ConstantTimesRule(integrand=6*x**2, variable=x, constant=6, other=x**2,\n    substep=PowerRule(integrand=x**2, variable=x, base=x, exp=2)),\n    ConstantRule(integrand=9, variable=x)])) \n    ```", "```py\n    sympy.integrals.heurisch.heurisch(f, x, rewrite=False, hints=None, mappings=None, retries=3, degree_offset=0, unnecessary_permutations=None, _try_heurisch=None)\n    ```", "```py\n    >>> from sympy import tan\n    >>> from sympy.integrals.heurisch import heurisch\n    >>> from sympy.abc import x, y \n    ```", "```py\n    >>> heurisch(y*tan(x), x)\n    y*log(tan(x)**2 + 1)/2 \n    ```", "```py\n    sympy.integrals.heurisch.components(f, x)\n    ```", "```py\n    >>> from sympy import cos, sin\n    >>> from sympy.abc import x\n    >>> from sympy.integrals.heurisch import components \n    ```", "```py\n    >>> components(sin(x)*cos(x)**2, x)\n    {x, sin(x), cos(x)} \n    ```", "```py\nsympy.integrals.integrals.integrate(f, var, ...)\n```", "```py\n>>> from sympy import integrate, log, exp, oo\n>>> from sympy.abc import a, x, y \n```", "```py\n>>> integrate(x*y, x)\nx**2*y/2 \n```", "```py\n>>> integrate(log(x), x)\nx*log(x) - x \n```", "```py\n>>> integrate(log(x), (x, 1, a))\na*log(a) - a + 1 \n```", "```py\n>>> integrate(x)\nx**2/2 \n```", "```py\n>>> from sympy import sqrt\n>>> integrate(sqrt(1 + x), (x, 0, x))\n2*(x + 1)**(3/2)/3 - 2/3\n>>> integrate(sqrt(1 + x), x)\n2*(x + 1)**(3/2)/3 \n```", "```py\n>>> integrate(x*y)\nTraceback (most recent call last):\n...\nValueError: specify integration variables to integrate x*y \n```", "```py\n>>> integrate(x**a*exp(-x), (x, 0, oo)) # same as conds='piecewise'\nPiecewise((gamma(a + 1), re(a) > -1),\n (Integral(x**a*exp(-x), (x, 0, oo)), True)) \n```", "```py\n>>> integrate(x**a*exp(-x), (x, 0, oo), conds='none')\ngamma(a + 1) \n```", "```py\n>>> integrate(x**a*exp(-x), (x, 0, oo), conds='separate')\n(gamma(a + 1), re(a) > -1) \n```", "```py\nsympy.integrals.integrals.line_integrate(field, Curve, variables)\n```", "```py\n>>> from sympy import Curve, line_integrate, E, ln\n>>> from sympy.abc import x, y, t\n>>> C = Curve([E**t + 1, E**t - 1], (t, 0, ln(2)))\n>>> line_integrate(x + y, C, [x, y])\n3*sqrt(2) \n```", "```py\nclass sympy.integrals.integrals.Integral(function, *symbols, **assumptions)\n```", "```py\nis_commutative\n```", "```py\nas_sum(n=None, method='midpoint', evaluate=True)\n```", "```py\n>>> from sympy import Integral, sin, sqrt\n>>> from sympy.abc import x, n\n>>> e = Integral(sin(x), (x, 3, 7))\n>>> e\nIntegral(sin(x), (x, 3, 7)) \n```", "```py\n>>> e.as_sum(2, 'left')\n2*sin(5) + 2*sin(3) \n```", "```py\n>>> e.as_sum(2, 'midpoint')\n2*sin(4) + 2*sin(6) \n```", "```py\n>>> e.as_sum(2, 'right')\n2*sin(5) + 2*sin(7) \n```", "```py\n>>> s = e.as_sum(2, 'trapezoid')\n>>> s\n2*sin(5) + sin(3) + sin(7)\n>>> (e.as_sum(2, 'left') + e.as_sum(2, 'right'))/2 == s\nTrue \n```", "```py\n>>> e = Integral(1/sqrt(x), (x, 0, 1))\n>>> e.as_sum(5).n(4)\n1.730\n>>> e.as_sum(10).n(4)\n1.809\n>>> e.doit().n(4)  # the actual value is 2\n2.000 \n```", "```py\n>>> e.as_sum(5, 'left')\nzoo \n```", "```py\n>>> e = Integral(x**2, (x, 0, 2))\n>>> e.as_sum(n, 'right').expand()\n8/3 + 4/n + 4/(3*n**2) \n```", "```py\n>>> e.as_sum(method='midpoint').expand()\n8/3 - 2/(3*_n**2) \n```", "```py\n>>> e.as_sum(n, 'midpoint', evaluate=False)\n2*Sum((2*_k/n - 1/n)**2, (_k, 1, n))/n \n```", "```py\ndoit(**hints)\n```", "```py\n>>> from sympy import Piecewise, S\n>>> from sympy.abc import x, t\n>>> p = x**2 + Piecewise((0, x/t < 0), (1, True))\n>>> p.integrate((t, S(4)/5, 1), (x, -1, 1))\n1/3 \n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy import Integral\n>>> from sympy.abc import x, y\n>>> Integral(x, (x, y, 1)).free_symbols\n{y} \n```", "```py\nprincipal_value(**kwargs)\n```", "```py\n>>> from sympy import Integral, oo\n>>> from sympy.abc import x\n>>> Integral(x+1, (x, -oo, oo)).principal_value()\noo\n>>> f = 1 / (x**3)\n>>> Integral(f, (x, -oo, oo)).principal_value()\n0\n>>> Integral(f, (x, -10, 10)).principal_value()\n0\n>>> Integral(f, (x, -10, oo)).principal_value() + Integral(f, (x, -oo, 10)).principal_value()\n0 \n```", "```py\ntransform(x, u)\n```", "```py\n>>> from sympy.abc import a, x, u\n>>> from sympy import Integral, cos, sqrt \n```", "```py\n>>> i = Integral(x*cos(x**2 - 1), (x, 0, 1)) \n```", "```py\n>>> i.transform(x, u)\nIntegral(u*cos(u**2 - 1), (u, 0, 1)) \n```", "```py\n>>> ui = i.transform(x**2 - 1, u)\n>>> ui\nIntegral(cos(u)/2, (u, -1, 0)) \n```", "```py\n>>> Integral(cos(x**2 - 1), (x, 0, 1)).transform(x**2 - 1, u)\nTraceback (most recent call last):\n...\nValueError:\nThe mapping between F(x) and f(u) did not give a unique integrand. \n```", "```py\n>>> ui.transform(sqrt(u + 1), x) == i\nTrue \n```", "```py\n>>> ui.transform(u, x**2 - 1) == i\nTrue \n```", "```py\n>>> i.transform(a, x) == i\nTrue \n```", "```py\n>>> Integral(x, (x, 0, 1)).transform(x, (u + a, u))\nIntegral(a + u, (u, -a, 1 - a))\n>>> Integral(x, (x, 0, 1)).transform(x, (u + a, a))\nIntegral(a + u, (a, -u, 1 - u)) \n```", "```py\nclass sympy.concrete.expr_with_limits.ExprWithLimits(function, *symbols, **assumptions)\n```", "```py\nproperty bound_symbols\n```", "```py\n>>> from sympy import Integral\n>>> from sympy.abc import x, i, j, k\n>>> Integral(x**i, (i, 1, 3), (j, 2), k).bound_symbols\n[i, j] \n```", "```py\nproperty free_symbols\n```", "```py\n>>> from sympy import Sum\n>>> from sympy.abc import x, y\n>>> Sum(x, (x, y, 1)).free_symbols\n{y} \n```", "```py\nproperty function\n```", "```py\n>>> from sympy import Integral\n>>> from sympy.abc import x\n>>> Integral(x**2, (x,)).function\nx**2 \n```", "```py\nproperty has_finite_limits\n```", "```py\n>>> from sympy import Sum, Integral, Product, oo, Symbol\n>>> x = Symbol('x')\n>>> Sum(x, (x, 1, 8)).has_finite_limits\nTrue \n```", "```py\n>>> Integral(x, (x, 1, oo)).has_finite_limits\nFalse \n```", "```py\n>>> M = Symbol('M')\n>>> Sum(x, (x, 1, M)).has_finite_limits \n```", "```py\n>>> N = Symbol('N', integer=True)\n>>> Product(x, (x, 1, N)).has_finite_limits\nTrue \n```", "```py\nproperty has_reversed_limits\n```", "```py\n>>> from sympy import Sum, Integral, Product, oo, Symbol\n>>> x = Symbol('x')\n>>> Sum(x, (x, 8, 1)).has_reversed_limits\nTrue \n```", "```py\n>>> Sum(x, (x, 1, oo)).has_reversed_limits\nFalse \n```", "```py\n>>> M = Symbol('M')\n>>> Integral(x, (x, 1, M)).has_reversed_limits \n```", "```py\n>>> N = Symbol('N', integer=True, positive=True)\n>>> Sum(x, (x, 1, N)).has_reversed_limits\nFalse \n```", "```py\n>>> Product(x, (x, 2, N)).has_reversed_limits \n```", "```py\n>>> Product(x, (x, 2, N)).subs(N, N + 2).has_reversed_limits\nFalse \n```", "```py\nproperty is_number\n```", "```py\nproperty limits\n```", "```py\n>>> from sympy import Integral\n>>> from sympy.abc import x, i\n>>> Integral(x**i, (i, 1, 3)).limits\n((i, 1, 3),) \n```", "```py\nproperty variables\n```", "```py\n>>> from sympy import Sum\n>>> from sympy.abc import x, i\n>>> Sum(x**i, (i, 1, 3)).variables\n[i] \n```", "```py\nsympy.integrals.quadrature.gauss_legendre(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_legendre\n>>> x, w = gauss_legendre(3, 5)\n>>> x\n[-0.7746, 0, 0.7746]\n>>> w\n[0.55556, 0.88889, 0.55556]\n>>> x, w = gauss_legendre(4, 5)\n>>> x\n[-0.86114, -0.33998, 0.33998, 0.86114]\n>>> w\n[0.34785, 0.65215, 0.65215, 0.34785] \n```", "```py\nsympy.integrals.quadrature.gauss_laguerre(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_laguerre\n>>> x, w = gauss_laguerre(3, 5)\n>>> x\n[0.41577, 2.2943, 6.2899]\n>>> w\n[0.71109, 0.27852, 0.010389]\n>>> x, w = gauss_laguerre(6, 5)\n>>> x\n[0.22285, 1.1889, 2.9927, 5.7751, 9.8375, 15.983]\n>>> w\n[0.45896, 0.417, 0.11337, 0.010399, 0.00026102, 8.9855e-7] \n```", "```py\nsympy.integrals.quadrature.gauss_hermite(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_hermite\n>>> x, w = gauss_hermite(3, 5)\n>>> x\n[-1.2247, 0, 1.2247]\n>>> w\n[0.29541, 1.1816, 0.29541] \n```", "```py\n>>> x, w = gauss_hermite(6, 5)\n>>> x\n[-2.3506, -1.3358, -0.43608, 0.43608, 1.3358, 2.3506]\n>>> w\n[0.00453, 0.15707, 0.72463, 0.72463, 0.15707, 0.00453] \n```", "```py\nsympy.integrals.quadrature.gauss_gen_laguerre(n, alpha, n_digits)\n```", "```py\n>>> from sympy import S\n>>> from sympy.integrals.quadrature import gauss_gen_laguerre\n>>> x, w = gauss_gen_laguerre(3, -S.Half, 5)\n>>> x\n[0.19016, 1.7845, 5.5253]\n>>> w\n[1.4493, 0.31413, 0.00906] \n```", "```py\n>>> x, w = gauss_gen_laguerre(4, 3*S.Half, 5)\n>>> x\n[0.97851, 2.9904, 6.3193, 11.712]\n>>> w\n[0.53087, 0.67721, 0.11895, 0.0023152] \n```", "```py\nsympy.integrals.quadrature.gauss_chebyshev_t(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_chebyshev_t\n>>> x, w = gauss_chebyshev_t(3, 5)\n>>> x\n[0.86602, 0, -0.86602]\n>>> w\n[1.0472, 1.0472, 1.0472] \n```", "```py\n>>> x, w = gauss_chebyshev_t(6, 5)\n>>> x\n[0.96593, 0.70711, 0.25882, -0.25882, -0.70711, -0.96593]\n>>> w\n[0.5236, 0.5236, 0.5236, 0.5236, 0.5236, 0.5236] \n```", "```py\nsympy.integrals.quadrature.gauss_chebyshev_u(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_chebyshev_u\n>>> x, w = gauss_chebyshev_u(3, 5)\n>>> x\n[0.70711, 0, -0.70711]\n>>> w\n[0.3927, 0.7854, 0.3927] \n```", "```py\n>>> x, w = gauss_chebyshev_u(6, 5)\n>>> x\n[0.90097, 0.62349, 0.22252, -0.22252, -0.62349, -0.90097]\n>>> w\n[0.084489, 0.27433, 0.42658, 0.42658, 0.27433, 0.084489] \n```", "```py\nsympy.integrals.quadrature.gauss_jacobi(n, alpha, beta, n_digits)\n```", "```py\n>>> from sympy import S\n>>> from sympy.integrals.quadrature import gauss_jacobi\n>>> x, w = gauss_jacobi(3, S.Half, -S.Half, 5)\n>>> x\n[-0.90097, -0.22252, 0.62349]\n>>> w\n[1.7063, 1.0973, 0.33795] \n```", "```py\n>>> x, w = gauss_jacobi(6, 1, 1, 5)\n>>> x\n[-0.87174, -0.5917, -0.2093, 0.2093, 0.5917, 0.87174]\n>>> w\n[0.050584, 0.22169, 0.39439, 0.39439, 0.22169, 0.050584] \n```", "```py\nsympy.integrals.quadrature.gauss_lobatto(n, n_digits)\n```", "```py\n>>> from sympy.integrals.quadrature import gauss_lobatto\n>>> x, w = gauss_lobatto(3, 5)\n>>> x\n[-1, 0, 1]\n>>> w\n[0.33333, 1.3333, 0.33333]\n>>> x, w = gauss_lobatto(4, 5)\n>>> x\n[-1, -0.44721, 0.44721, 1]\n>>> w\n[0.16667, 0.83333, 0.83333, 0.16667] \n```", "```py\n>>> from sympy.integrals.intpoly import *\n>>> init_printing(use_unicode=False)\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), x)\n1/6\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), x + x*y + y**2)\n7/24 \n```", "```py\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), [3, x*y + y**2, x**4], max_degree=4)\n 4               2\n{3: 3/2, x : 1/30, x*y + y : 1/8}\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), [1.125, x, x**2, 6.89*x**3, x*y + y**2, x**4], max_degree=4)\n 2              3  689    4               2\n{1.125: 9/16, x: 1/6, x : 1/12, 6.89*x : ----, x : 1/30, x*y + y : 1/8}\n 2000 \n```", "```py\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)),max_degree=3)\n 2         3                 2         3                      2         2\n{0: 0, 1: 1/2, x: 1/6, x : 1/12, x : 1/20, y: 1/6, y : 1/12, y : 1/20, x*y: 1/24, x*y : 1/60, x *y: 1/60} \n```", "```py\n>>> from sympy.integrals.intpoly import *\n>>> cube = [[(0, 0, 0), (0, 0, 5), (0, 5, 0), (0, 5, 5), (5, 0, 0), (5, 0, 5), (5, 5, 0), (5, 5, 5)], [2, 6, 7, 3], [3, 7, 5, 1], [7, 6, 4, 5], [1, 5, 4, 0], [3, 1, 0, 2], [0, 4, 6, 2]]\n>>> polytope_integrate(cube, x**2 + y**2 + z**2 + x*y + y*z + x*z)\n-21875/4\n>>> octahedron = [[(S(-1) / sqrt(2), 0, 0), (0, S(1) / sqrt(2), 0), (0, 0, S(-1) / sqrt(2)), (0, 0, S(1) / sqrt(2)), (0, S(-1) / sqrt(2), 0), (S(1) / sqrt(2), 0, 0)], [3, 4, 5], [3, 5, 1], [3, 1, 0], [3, 0, 4], [4, 0, 2], [4, 2, 5], [2, 0, 1], [5, 2, 1]]\n>>> polytope_integrate(octahedron, x**2 + y**2 + z**2 + x*y + y*z + x*z)\n ___\n\\/ 2\n-----\n 20 \n```", "```py\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), [3, x*y + y**2, x**4], max_degree=4)\n 4               2\n{3: 3/2, x : 1/30, x*y + y : 1/8}\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)), [1.125, x, x**2, 6.89*x**3, x*y + y**2, x**4], max_degree=4)\n 2              3  689    4               2\n{1.125: 9/16, x: 1/6, x : 1/12, 6.89*x : ----, x : 1/30, x*y + y : 1/8}\n 2000 \n```", "```py\n>>> polytope_integrate(Polygon((0, 0), (0, 1), (1, 0)),max_degree=3)\n 2         3                 2         3                      2         2\n{0: 0, 1: 1/2, x: 1/6, x : 1/12, x : 1/20, y: 1/6, y : 1/12, y : 1/20, x*y: 1/24, x*y : 1/60, x *y: 1/60} \n```", "```py\nsympy.integrals.intpoly.polytope_integrate(poly, expr=None, *, clockwise=False, max_degree=None)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import Point, Polygon\n>>> from sympy.integrals.intpoly import polytope_integrate\n>>> polygon = Polygon(Point(0, 0), Point(0, 1), Point(1, 1), Point(1, 0))\n>>> polys = [1, x, y, x*y, x**2*y, x*y**2]\n>>> expr = x*y\n>>> polytope_integrate(polygon, expr)\n1/4\n>>> polytope_integrate(polygon, polys, max_degree=3)\n{1: 1, x: 1/2, y: 1/2, x*y: 1/4, x*y**2: 1/6, x**2*y: 1/6} \n```"]