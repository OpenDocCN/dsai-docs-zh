["```py\nclass sympy.physics.mechanics.wrapping_geometry.WrappingCylinder(radius, point, axis)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (Point, ReferenceFrame,\n...     WrappingCylinder)\n>>> N = ReferenceFrame('N')\n>>> r = symbols('r')\n>>> pO = Point('pO')\n>>> ax = N.x \n```", "```py\n>>> WrappingCylinder(r, pO, ax)\nWrappingCylinder(radius=r, point=pO, axis=N.x) \n```", "```py\nproperty axis\n```", "```py\ngeodesic_end_vectors(point_1, point_2)\n```", "```py\ngeodesic_length(point_1, point_2)\n```", "```py\n>>> from sympy import symbols, cos, sin\n>>> from sympy.physics.mechanics import (Point, ReferenceFrame,\n...     WrappingCylinder, dynamicsymbols)\n>>> N = ReferenceFrame('N')\n>>> r = symbols('r')\n>>> pO = Point('pO')\n>>> pO.set_vel(N, 0)\n>>> cylinder = WrappingCylinder(r, pO, N.x)\n>>> p1 = Point('p1')\n>>> p2 = Point('p2') \n```", "```py\n>>> q = dynamicsymbols('q')\n>>> p1.set_pos(pO, N.x + r*N.y)\n>>> p1.pos_from(pO)\nN.x + r*N.y\n>>> p2.set_pos(pO, r*(cos(q)*N.y + sin(q)*N.z).normalize())\n>>> p2.pos_from(pO).simplify()\nr*cos(q(t))*N.y + r*sin(q(t))*N.z \n```", "```py\n>>> cylinder.geodesic_length(p1, p2).simplify()\nsqrt(r**2*q(t)**2 + 1) \n```", "```py\nproperty point\n```", "```py\npoint_on_surface(point)\n```", "```py\nproperty radius\n```", "```py\nclass sympy.physics.mechanics.wrapping_geometry.WrappingGeometryBase\n```", "```py\nabstract geodesic_end_vectors(point_1, point_2)\n```", "```py\nabstract geodesic_length(point_1, point_2)\n```", "```py\nabstract property point\n```", "```py\nabstract point_on_surface(point)\n```", "```py\nclass sympy.physics.mechanics.wrapping_geometry.WrappingSphere(radius, point)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import Point, WrappingSphere\n>>> r = symbols('r')\n>>> pO = Point('pO') \n```", "```py\n>>> WrappingSphere(r, pO)\nWrappingSphere(radius=r, point=pO) \n```", "```py\ngeodesic_end_vectors(point_1, point_2)\n```", "```py\ngeodesic_length(point_1, point_2)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.mechanics import (Point, ReferenceFrame,\n...     WrappingSphere)\n>>> N = ReferenceFrame('N')\n>>> r = symbols('r')\n>>> pO = Point('pO')\n>>> pO.set_vel(N, 0)\n>>> sphere = WrappingSphere(r, pO)\n>>> p1 = Point('p1')\n>>> p2 = Point('p2') \n```", "```py\n>>> p1.set_pos(pO, r*N.x)\n>>> p1.pos_from(pO)\nr*N.x\n>>> p2.set_pos(pO, r*(N.y + N.z).normalize())\n>>> p2.pos_from(pO)\nsqrt(2)*r/2*N.y + sqrt(2)*r/2*N.z \n```", "```py\n>>> sphere.geodesic_length(p1, p2)\npi*r/2 \n```", "```py\nproperty point\n```", "```py\npoint_on_surface(point)\n```", "```py\nproperty radius\n```"]