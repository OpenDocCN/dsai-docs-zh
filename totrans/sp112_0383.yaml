- en: scipy.ndimage.label
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.label.html#scipy.ndimage.label](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.ndimage.label.html#scipy.ndimage.label)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Label features in an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**input**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An array-like object to be labeled. Any non-zero values in *input* are counted
    as features and zero values are considered the background.
  prefs: []
  type: TYPE_NORMAL
- en: '**structure**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'A structuring element that defines feature connections. *structure* must be
    centrosymmetric (see Notes). If no structuring element is provided, one is automatically
    generated with a squared connectivity equal to one. That is, for a 2-D *input*
    array, the default structuring element is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**output**(None, data-type, array_like), optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *output* is a data type, it specifies the type of the resulting labeled feature
    array. If *output* is an array-like object, then *output* will be updated with
    the labeled features from this function. This function can operate in-place, by
    passing output=input. Note that the output must be able to store the largest label,
    or this function will raise an Exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**label**ndarray or int'
  prefs: []
  type: TYPE_NORMAL
- en: An integer ndarray where each unique feature in *input* has a unique label in
    the returned array.
  prefs: []
  type: TYPE_NORMAL
- en: '**num_features**int'
  prefs: []
  type: TYPE_NORMAL
- en: How many objects were found.
  prefs: []
  type: TYPE_NORMAL
- en: If *output* is None, this function returns a tuple of (*labeled_array*, *num_features*).
  prefs: []
  type: TYPE_NORMAL
- en: If *output* is a ndarray, then it will be updated with values in *labeled_array*
    and only *num_features* will be returned by this function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`find_objects`](scipy.ndimage.find_objects.html#scipy.ndimage.find_objects
    "scipy.ndimage.find_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: generate a list of slices for the labeled features (or objects); useful for
    finding features’ position or dimensions
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: A centrosymmetric matrix is a matrix that is symmetric about the center. See
    [[1]](#rb0c155ee96c3-1) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *structure* matrix must be centrosymmetric to ensure two-way connections.
    For instance, if the *structure* matrix is not centrosymmetric and is defined
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'and the *input* is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: then the structure matrix would indicate the entry 2 in the input is connected
    to 1, but 1 is not connected to 2.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'James R. Weaver, “Centrosymmetric (cross-symmetric) matrices, their basic properties,
    eigenvalues, and eigenvectors.” The American Mathematical Monthly 92.10 (1985):
    711-717.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an image with some features, then label it using the default (cross-shaped)
    structuring element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the 4 features are labeled with a different integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a structuring element that will consider features connected even if
    they touch diagonally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: or,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Label the image using the new structuring element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the 2 labeled features (note that features 1, 3, and 4 from above are
    now considered a single feature):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
