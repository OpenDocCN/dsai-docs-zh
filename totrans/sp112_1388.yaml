- en: Compiler selection and customizing a build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html](https://docs.scipy.org/doc/scipy-1.12.0/building/compilers_and_options.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Selecting a specific compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meson supports the standard environment variables `CC`, `CXX` and `FC` to select
    specific C, C++ and/or Fortran compilers. These environment variables are documented
    in [the reference tables in the Meson docs](https://mesonbuild.com/Reference-tables.html#compiler-and-linker-flag-environment-variables).
  prefs: []
  type: TYPE_NORMAL
- en: Note that environment variables only get applied from a clean build, because
    they affect the configure stage (i.e., `meson setup`). An incremental rebuild
    does not react to changes in environment variables - you have to run `git clean
    -xdf` and do a full rebuild, or run `meson setup --reconfigure`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom compiler or linker flag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Meson by design prefers builds being configured through command-line options
    passed to `meson setup`. It provides many built-in options:'
  prefs: []
  type: TYPE_NORMAL
- en: For enabling a debug build and the optimization level, see the next section
    on “build types”,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling `-Werror` in a portable manner is done via `-Dwerror=true`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling warning levels is done via `-Dwarning_level=<val>`, with `<val>` one
    of `{0, 1, 2, 3, everything}`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many other builtin options, from activating Visual Studio (`-Dvsenv=true`)
    and building with link time optimization (`-Db_lto`) to changing the default C++
    language level (`-Dcpp_std='c++17'`) or linker flags (`-Dcpp_link_args='-Wl,-z,defs'`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a comprehensive overview of options, see [Meson’s builtin options docs page](https://mesonbuild.com/Builtin-options.html).
  prefs: []
  type: TYPE_NORMAL
- en: Meson also supports the standard environment variables `CFLAGS`, `CXXFLAGS`,
    `FFLAGS` and `LDFLAGS` to inject extra flags - with the same caveat as in the
    previous section about those environment variables being picked up only for a
    clean build and not an incremental build.
  prefs: []
  type: TYPE_NORMAL
- en: Using different build types with Meson
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meson provides different build types while configuring the project. You can
    see the available options for build types in [the “core options” section of the
    Meson documentation](https://mesonbuild.com/Builtin-options.html#core-options).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that you are building from scratch (do `git clean -xdf` if needed),
    you can configure the build as following to use the `debug` build type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use the `dev.py` interface for further building, installing and
    testing SciPy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will work because after initial configuration, Meson will remember the
    config options.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling build parallelism
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, `ninja` will launch `2*n_cpu + 2`, with `n_cpu` the number of physical
    CPU cores, parallel build jobs. This is fine in the vast majority of cases, and
    results in close to optimal build times. In some cases, on machines with a small
    amount of RAM relative to the number of CPU cores, this leads to a job running
    out of memory. In case that happens, lower the number of jobs `N` such that you
    have at least 2 GB RAM per job. For example, to launch 6 jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use GCC and Clang builds in parallel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It may be useful to have several builds of SciPy in the same repo, for example
    to compare the differences between two compilers for diagnosing an issue. As discussed,
    Meson is fully out-of-place, so different builds will not interfere with each
    other. We assume in the rest of this section that GCC is the default. For example,
    let us build using GCC and Clang.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build with GCC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the above command, meson will build with the (default) GCC compilers in
    the `build` directory, and install to the `build-install` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build with Clang:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the above commands, Meson will build with the Clang, Clang++ and Gfortran
    compilers in the `build-clang` directory, and then install SciPy into `build-clang-install`.
  prefs: []
  type: TYPE_NORMAL
- en: Meson will remember the compiler selection for the `build-clang` directory and
    it cannot be changed, so each future invocation of `python dev.py --build-dir=build-clang
    <command>` it will automatically use Clang.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip: use an alias to make this easier to use, e.g., `alias dev-clang="python
    dev.py --build-dir=build-clang"` and then `dev-clang build`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A common reason to have two builds is to compare between them. For example,
    to run the `scipy.linalg` tests for builds with both compilers, do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
