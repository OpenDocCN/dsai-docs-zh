- en: 'Quick Start Guide: Raspberry Pi with Ultralytics YOLOv8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`docs.ultralytics.com/guides/raspberry-pi/`](https://docs.ultralytics.com/guides/raspberry-pi/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This comprehensive guide provides a detailed walkthrough for deploying Ultralytics
    YOLOv8 on [Raspberry Pi](https://www.raspberrypi.com) devices. Additionally, it
    showcases performance benchmarks to demonstrate the capabilities of YOLOv8 on
    these small and powerful devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[`www.youtube.com/embed/yul4gq_LrOI`](https://www.youtube.com/embed/yul4gq_LrOI)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watch:** Raspberry Pi 5 updates and improvements.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This guide has been tested with Raspberry Pi 4 and Raspberry Pi 5 running the
    latest [Raspberry Pi OS Bookworm (Debian 12)](https://www.raspberrypi.com/software/operating-systems/).
    Using this guide for older Raspberry Pi devices such as the Raspberry Pi 3 is
    expected to work as long as the same Raspberry Pi OS Bookworm is installed.
  prefs: []
  type: TYPE_NORMAL
- en: What is Raspberry Pi?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Raspberry Pi is a small, affordable, single-board computer. It has become popular
    for a wide range of projects and applications, from hobbyist home automation to
    industrial uses. Raspberry Pi boards are capable of running a variety of operating
    systems, and they offer GPIO (General Purpose Input/Output) pins that allow for
    easy integration with sensors, actuators, and other hardware components. They
    come in different models with varying specifications, but they all share the same
    basic design philosophy of being low-cost, compact, and versatile.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi Series Comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|  | Raspberry Pi 3 | Raspberry Pi 4 | Raspberry Pi 5 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CPU | Broadcom BCM2837, Cortex-A53 64Bit SoC | Broadcom BCM2711, Cortex-A72
    64Bit SoC | Broadcom BCM2712, Cortex-A76 64Bit SoC |'
  prefs: []
  type: TYPE_TB
- en: '| CPU Max Frequency | 1.4GHz | 1.8GHz | 2.4GHz |'
  prefs: []
  type: TYPE_TB
- en: '| GPU | Videocore IV | Videocore VI | VideoCore VII |'
  prefs: []
  type: TYPE_TB
- en: '| GPU Max Frequency | 400Mhz | 500Mhz | 800Mhz |'
  prefs: []
  type: TYPE_TB
- en: '| Memory | 1GB LPDDR2 SDRAM | 1GB, 2GB, 4GB, 8GB LPDDR4-3200 SDRAM | 4GB, 8GB
    LPDDR4X-4267 SDRAM |'
  prefs: []
  type: TYPE_TB
- en: '| PCIe | N/A | N/A | 1xPCIe 2.0 Interface |'
  prefs: []
  type: TYPE_TB
- en: '| Max Power Draw | 2.5A@5V | 3A@5V | 5A@5V (PD enabled) |'
  prefs: []
  type: TYPE_TB
- en: What is Raspberry Pi OS?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Raspberry Pi OS](https://www.raspberrypi.com/software) (formerly known as
    Raspbian) is a Unix-like operating system based on the Debian GNU/Linux distribution
    for the Raspberry Pi family of compact single-board computers distributed by the
    Raspberry Pi Foundation. Raspberry Pi OS is highly optimized for the Raspberry
    Pi with ARM CPUs and uses a modified LXDE desktop environment with the Openbox
    stacking window manager. Raspberry Pi OS is under active development, with an
    emphasis on improving the stability and performance of as many Debian packages
    as possible on Raspberry Pi.'
  prefs: []
  type: TYPE_NORMAL
- en: Flash Raspberry Pi OS to Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do after getting your hands on a Raspberry Pi is to flash
    a micro-SD card with Raspberry Pi OS, insert into the device and boot into the
    OS. Follow along with detailed [Getting Started Documentation by Raspberry Pi](https://www.raspberrypi.com/documentation/computers/getting-started.html)
    to prepare your device for first use.
  prefs: []
  type: TYPE_NORMAL
- en: Set Up Ultralytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways of setting up Ultralytics package on Raspberry Pi to build
    your next Computer Vision project. You can use either of them.
  prefs: []
  type: TYPE_NORMAL
- en: Start with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start without Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start with Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fastest way to get started with Ultralytics YOLOv8 on Raspberry Pi is to
    run with pre-built docker image for Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Execute the below command to pull the Docker container and run on Raspberry
    Pi. This is based on [arm64v8/debian](https://hub.docker.com/r/arm64v8/debian)
    docker image which contains Debian 12 (Bookworm) in a Python3 environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After this is done, skip to Use NCNN on Raspberry Pi section.
  prefs: []
  type: TYPE_NORMAL
- en: Start without Docker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Install Ultralytics Package
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Here we will install Ultralytics package on the Raspberry Pi with optional dependencies
    so that we can export the PyTorch models to other different formats.
  prefs: []
  type: TYPE_NORMAL
- en: Update packages list, install pip and upgrade to latest
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install `ultralytics` pip package with optional dependencies
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reboot the device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use NCNN on Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Out of all the model export formats supported by Ultralytics, [NCNN](https://docs.ultralytics.com/integrations/ncnn)
    delivers the best inference performance when working with Raspberry Pi devices
    because NCNN is highly optimized for mobile/ embedded platforms (such as ARM architecture).
    Therefor our recommendation is to use NCNN with Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Convert Model to NCNN and Run Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The YOLOv8n model in PyTorch format is converted to NCNN to run inference with
    the exported model.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more details about supported export options, visit the [Ultralytics documentation
    page on deployment options](https://docs.ultralytics.com/guides/model-deployment-options).
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 5 vs Raspberry Pi 4 YOLOv8 Benchmarks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'YOLOv8 benchmarks were run by the Ultralytics team on nine different model
    formats measuring speed and accuracy: PyTorch, TorchScript, ONNX, OpenVINO, TF
    SavedModel, TF GraphDef, TF Lite, PaddlePaddle, NCNN. Benchmarks were run on both
    Raspberry Pi 5 and Raspberry Pi 4 at FP32 precision with default input image size
    of 640.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We have only included benchmarks for YOLOv8n and YOLOv8s models because other
    models sizes are too big to run on the Raspberry Pis and does not offer decent
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison Chart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Performance
  prefs: []
  type: TYPE_NORMAL
- en: '![NVIDIA Jetson Ecosystem](img/710743298bfb2ebc093b0bfdcac928a2.png)![NVIDIA
    Jetson Ecosystem](img/9e1bdc9addc8a5c54c7efdcd444d35d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Detailed Comparison Table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The below table represents the benchmark results for two different models (YOLOv8n,
    YOLOv8s) across nine different formats (PyTorch, TorchScript, ONNX, OpenVINO,
    TF SavedModel, TF GraphDef, TF Lite, PaddlePaddle, NCNN), running on both Raspberry
    Pi 4 and Raspberry Pi 5, giving us the status, size, mAP50-95(B) metric, and inference
    time for each combination.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs: []
  type: TYPE_NORMAL
- en: '| Format | Status | Size on disk (MB) | mAP50-95(B) | Inference time (ms/im)
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTorch | ✅ | 6.2 | 0.6381 | 508.61 |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | ✅ | 12.4 | 0.6092 | 558.38 |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | ✅ | 12.2 | 0.6092 | 198.69 |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | ✅ | 12.3 | 0.6092 | 704.70 |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | ✅ | 30.6 | 0.6092 | 367.64 |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | ✅ | 12.3 | 0.6092 | 473.22 |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | ✅ | 12.3 | 0.6092 | 380.67 |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | ✅ | 24.4 | 0.6092 | 703.51 |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | ✅ | 12.2 | 0.6034 | 94.28 |'
  prefs: []
  type: TYPE_TB
- en: '| Format | Status | Size on disk (MB) | mAP50-95(B) | Inference time (ms/im)
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTorch | ✅ | 21.5 | 0.6967 | 969.49 |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | ✅ | 43.0 | 0.7136 | 1110.04 |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | ✅ | 42.8 | 0.7136 | 451.37 |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | ✅ | 42.9 | 0.7136 | 873.51 |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | ✅ | 107.0 | 0.7136 | 658.15 |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | ✅ | 42.8 | 0.7136 | 946.01 |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | ✅ | 42.8 | 0.7136 | 1013.27 |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | ✅ | 85.5 | 0.7136 | 1560.23 |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | ✅ | 42.7 | 0.7204 | 211.26 |'
  prefs: []
  type: TYPE_TB
- en: '| Format | Status | Size on disk (MB) | mAP50-95(B) | Inference time (ms/im)
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTorch | ✅ | 6.2 | 0.6381 | 1068.42 |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | ✅ | 12.4 | 0.6092 | 1248.01 |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | ✅ | 12.2 | 0.6092 | 560.04 |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | ✅ | 12.3 | 0.6092 | 534.93 |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | ✅ | 30.6 | 0.6092 | 816.50 |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | ✅ | 12.3 | 0.6092 | 1007.57 |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | ✅ | 12.3 | 0.6092 | 950.29 |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | ✅ | 24.4 | 0.6092 | 1507.75 |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | ✅ | 12.2 | 0.6092 | 414.73 |'
  prefs: []
  type: TYPE_TB
- en: '| Format | Status | Size on disk (MB) | mAP50-95(B) | Inference time (ms/im)
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PyTorch | ✅ | 21.5 | 0.6967 | 2589.58 |'
  prefs: []
  type: TYPE_TB
- en: '| TorchScript | ✅ | 43.0 | 0.7136 | 2901.33 |'
  prefs: []
  type: TYPE_TB
- en: '| ONNX | ✅ | 42.8 | 0.7136 | 1436.33 |'
  prefs: []
  type: TYPE_TB
- en: '| OpenVINO | ✅ | 42.9 | 0.7136 | 1225.19 |'
  prefs: []
  type: TYPE_TB
- en: '| TF SavedModel | ✅ | 107.0 | 0.7136 | 1770.95 |'
  prefs: []
  type: TYPE_TB
- en: '| TF GraphDef | ✅ | 42.8 | 0.7136 | 2146.66 |'
  prefs: []
  type: TYPE_TB
- en: '| TF Lite | ✅ | 42.8 | 0.7136 | 2945.03 |'
  prefs: []
  type: TYPE_TB
- en: '| PaddlePaddle | ✅ | 85.5 | 0.7136 | 3962.62 |'
  prefs: []
  type: TYPE_TB
- en: '| NCNN | ✅ | 42.7 | 0.7136 | 1042.39 |'
  prefs: []
  type: TYPE_TB
- en: Reproduce Our Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To reproduce the above Ultralytics benchmarks on all export formats, run this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that benchmarking results might vary based on the exact hardware and software
    configuration of a system, as well as the current workload of the system at the
    time the benchmarks are run. For the most reliable results use a dataset with
    a large number of images, i.e. `data='coco8.yaml' (4 val images), or`data='coco.yaml'`
    (5000 val images).
  prefs: []
  type: TYPE_NORMAL
- en: Use Raspberry Pi Camera
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Raspberry Pi for Computer Vision projects, it can be essentially
    to grab real-time video feeds to perform inference. The onboard MIPI CSI connector
    on the Raspberry Pi allows you to connect official Raspberry PI camera modules.
    In this guide, we have used a [Raspberry Pi Camera Module 3](https://www.raspberrypi.com/products/camera-module-3)
    to grab the video feeds and perform inference using YOLOv8 models.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the [different camera modules offered by Raspberry Pi](https://www.raspberrypi.com/documentation/accessories/camera.html)
    and also [how to get started with the Raspberry Pi camera modules](https://www.raspberrypi.com/documentation/computers/camera_software.html#introducing-the-raspberry-pi-cameras).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 5 uses smaller CSI connectors than the Raspberry Pi 4 (15-pin vs
    22-pin), so you will need a [15-pin to 22pin adapter cable](https://www.raspberrypi.com/products/camera-cable)
    to connect to a Raspberry Pi Camera.
  prefs: []
  type: TYPE_NORMAL
- en: Test the Camera
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute the following command after connecting the camera to the Raspberry Pi.
    You should see a live video feed from the camera for about 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about [`rpicam-hello` usage on official Raspberry Pi documentation](https://www.raspberrypi.com/documentation/computers/camera_software.html#rpicam-hello)
  prefs: []
  type: TYPE_NORMAL
- en: Inference with Camera
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are 2 methods of using the Raspberry Pi Camera to inference YOLOv8 models.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs: []
  type: TYPE_NORMAL
- en: We can use `picamera2`which comes pre-installed with Raspberry Pi OS to access
    the camera and inference YOLOv8 models.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We need to initiate a TCP stream with `rpicam-vid` from the connected camera
    so that we can use this stream URL as an input when we are inferencing later.
    Execute the following command to start the TCP stream.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Learn more about [`rpicam-vid` usage on official Raspberry Pi documentation](https://www.raspberrypi.com/documentation/computers/camera_software.html#rpicam-vid)
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Check our document on [Inference Sources](https://docs.ultralytics.com/modes/predict/#inference-sources)
    if you want to change the image/ video input type
  prefs: []
  type: TYPE_NORMAL
- en: Best Practices when using Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a couple of best practices to follow in order to enable maximum performance
    on Raspberry Pis running YOLOv8.
  prefs: []
  type: TYPE_NORMAL
- en: Use an SSD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using Raspberry Pi for 24x7 continued usage, it is recommended to use an
    SSD for the system because an SD card will not be able to withstand continuous
    writes and might get broken. With the onboard PCIe connector on the Raspberry
    Pi 5, now you can connect SSDs using an adapter such as the [NVMe Base for Raspberry
    Pi 5](https://shop.pimoroni.com/products/nvme-base).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Flash without GUI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When flashing Raspberry Pi OS, you can choose to not install the Desktop environment
    (Raspberry Pi OS Lite) and this can save a bit of RAM on the device, leaving more
    space for computer vision processing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next Steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations on successfully setting up YOLO on your Raspberry Pi! For further
    learning and support, visit Ultralytics YOLOv8 Docs and [Kashmir World Foundation](https://www.kashmirworldfoundation.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgements and Citations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This guide was initially created by Daan Eeltink for Kashmir World Foundation,
    an organization dedicated to the use of YOLO for the conservation of endangered
    species. We acknowledge their pioneering work and educational focus in the realm
    of object detection technologies.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Kashmir World Foundation's activities, you can visit
    their [website](https://www.kashmirworldfoundation.org/).
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How do I set up Ultralytics YOLOv8 on a Raspberry Pi without using Docker?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To set up Ultralytics YOLOv8 on a Raspberry Pi without Docker, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the package list and install `pip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Ultralytics package with optional dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reboot the device to apply changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For detailed instructions, refer to the Start without Docker section.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I use Ultralytics YOLOv8's NCNN format on Raspberry Pi for AI tasks?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ultralytics YOLOv8's NCNN format is highly optimized for mobile and embedded
    platforms, making it ideal for running AI tasks on Raspberry Pi devices. NCNN
    maximizes inference performance by leveraging ARM architecture, providing faster
    and more efficient processing compared to other formats. For more details on supported
    export options, visit the Ultralytics documentation page on deployment options.
  prefs: []
  type: TYPE_NORMAL
- en: How can I convert a YOLOv8 model to NCNN format for use on Raspberry Pi?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can convert a PyTorch YOLOv8 model to NCNN format using either Python or
    CLI commands:'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For more details, see the Use NCNN on Raspberry Pi section.
  prefs: []
  type: TYPE_NORMAL
- en: What are the hardware differences between Raspberry Pi 4 and Raspberry Pi 5
    relevant to running YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Key differences include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU**: Raspberry Pi 4 uses Broadcom BCM2711, Cortex-A72 64-bit SoC, while
    Raspberry Pi 5 uses Broadcom BCM2712, Cortex-A76 64-bit SoC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max CPU Frequency**: Raspberry Pi 4 has a max frequency of 1.8GHz, whereas
    Raspberry Pi 5 reaches 2.4GHz.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory**: Raspberry Pi 4 offers up to 8GB of LPDDR4-3200 SDRAM, while Raspberry
    Pi 5 features LPDDR4X-4267 SDRAM, available in 4GB and 8GB variants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These enhancements contribute to better performance benchmarks for YOLOv8 models
    on Raspberry Pi 5 compared to Raspberry Pi 4\. Refer to the Raspberry Pi Series
    Comparison table for more details.
  prefs: []
  type: TYPE_NORMAL
- en: How can I set up a Raspberry Pi Camera Module to work with Ultralytics YOLOv8?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two methods to set up a Raspberry Pi Camera for YOLOv8 inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using `picamera2`**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Using a TCP Stream**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For detailed setup instructions, visit the Inference with Camera section.
  prefs: []
  type: TYPE_NORMAL
