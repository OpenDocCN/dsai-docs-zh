- en: scipy.interpolate.UnivariateSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1-D smoothing spline fit to a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: Fits a spline y = spl(x) of degree *k* to the provided *x*, *y* data. *s* specifies
    the number of knots by specifying a smoothing condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array of independent input data. Must be increasing; must be strictly increasing
    if *s* is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: 1-D array of dependent input data, of the same length as *x*.
  prefs: []
  type: TYPE_NORMAL
- en: '**w**(N,) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Weights for spline fitting. Must be positive. If *w* is None, weights are all
    1\. Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: '**bbox**(2,) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence specifying the boundary of the approximation interval. If *bbox*
    is None, `bbox=[x[0], x[-1]]`. Default is None.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the smoothing spline. Must be 1 <= *k* <= 5. `k = 3` is a cubic spline.
    Default is 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**s**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Positive smoothing factor used to choose the number of knots. Number of knots
    will be increased until the smoothing condition is satisfied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because of numerical issues, the actual condition is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If *s* is None, *s* will be set as *len(w)* for a smoothing spline that uses
    all data points. If 0, spline will interpolate through all data points. This is
    equivalent to [`InterpolatedUnivariateSpline`](scipy.interpolate.InterpolatedUnivariateSpline.html#scipy.interpolate.InterpolatedUnivariateSpline
    "scipy.interpolate.InterpolatedUnivariateSpline"). Default is None. The user can
    use the *s* to control the tradeoff between closeness and smoothness of fit. Larger
    *s* means more smoothing while smaller values of *s* indicate less smoothing.
    Recommended values of *s* depend on the weights, *w*. If the weights represent
    the inverse of the standard-deviation of *y*, then a good *s* value should be
    found in the range (m-sqrt(2*m),m+sqrt(2*m)) where m is the number of datapoints
    in *x*, *y*, and *w*. This means `s = len(w)` should be a good value if `1/w[i]`
    is an estimate of the standard deviation of `y[i]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**ext**int or str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the extrapolation mode for elements not in the interval defined by
    the knot sequence.
  prefs: []
  type: TYPE_NORMAL
- en: if ext=0 or ‘extrapolate’, return the extrapolated value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=1 or ‘zeros’, return 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=2 or ‘raise’, raise a ValueError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=3 or ‘const’, return the boundary value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input arrays contain only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination
    or non-sensical results) if the inputs do contain infinities or NaNs. Default
    is False.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`BivariateSpline`](scipy.interpolate.BivariateSpline.html#scipy.interpolate.BivariateSpline
    "scipy.interpolate.BivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a base class for bivariate splines.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothBivariateSpline`](scipy.interpolate.SmoothBivariateSpline.html#scipy.interpolate.SmoothBivariateSpline
    "scipy.interpolate.SmoothBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline through the given points
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQBivariateSpline`](scipy.interpolate.LSQBivariateSpline.html#scipy.interpolate.LSQBivariateSpline
    "scipy.interpolate.LSQBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectSphereBivariateSpline`](scipy.interpolate.RectSphereBivariateSpline.html#scipy.interpolate.RectSphereBivariateSpline
    "scipy.interpolate.RectSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh on a sphere
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothSphereBivariateSpline`](scipy.interpolate.SmoothSphereBivariateSpline.html#scipy.interpolate.SmoothSphereBivariateSpline
    "scipy.interpolate.SmoothSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline in spherical coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQSphereBivariateSpline`](scipy.interpolate.LSQSphereBivariateSpline.html#scipy.interpolate.LSQSphereBivariateSpline
    "scipy.interpolate.LSQSphereBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline in spherical coordinates using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline over a rectangular mesh
  prefs: []
  type: TYPE_NORMAL
- en: '[`InterpolatedUnivariateSpline`](scipy.interpolate.InterpolatedUnivariateSpline.html#scipy.interpolate.InterpolatedUnivariateSpline
    "scipy.interpolate.InterpolatedUnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a interpolating univariate spline for a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplrep`](scipy.interpolate.bisplrep.html#scipy.interpolate.bisplrep "scipy.interpolate.bisplrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find a bivariate B-spline representation of a surface
  prefs: []
  type: TYPE_NORMAL
- en: '[`bisplev`](scipy.interpolate.bisplev.html#scipy.interpolate.bisplev "scipy.interpolate.bisplev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a bivariate B-spline and its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: '[`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find the B-spline representation of a 1-D curve
  prefs: []
  type: TYPE_NORMAL
- en: '[`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a B-spline or its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: '[`sproot`](scipy.interpolate.sproot.html#scipy.interpolate.sproot "scipy.interpolate.sproot")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find the roots of a cubic B-spline
  prefs: []
  type: TYPE_NORMAL
- en: '[`splint`](scipy.interpolate.splint.html#scipy.interpolate.splint "scipy.interpolate.splint")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate the definite integral of a B-spline between two given
    points
  prefs: []
  type: TYPE_NORMAL
- en: '[`spalde`](scipy.interpolate.spalde.html#scipy.interpolate.spalde "scipy.interpolate.spalde")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate all derivatives of a B-spline
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The number of data points must be larger than the spline degree *k*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NaN handling**: If the input arrays contain `nan` values, the result is not
    useful, since the underlying spline fitting routines cannot deal with `nan`. A
    workaround is to use zero weights for not-a-number data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice the need to replace a `nan` by a numerical value (precise value does
    not matter as long as the corresponding weight is zero.)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on algorithms described in [[1]](#r7b7bd71fb0ec-1), [[2]](#r7b7bd71fb0ec-2),
    [[3]](#r7b7bd71fb0ec-3), and [[4]](#r7b7bd71fb0ec-4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “An algorithm for smoothing, differentiation and integration of
    experimental data using spline functions”, J.Comp.Appl.Maths 1 (1975) 165-184.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “A fast algorithm for smoothing data on a rectangular grid while
    using spline functions”, SIAM J.Numer.Anal. 19 (1982) 1286-1304.
  prefs: []
  type: TYPE_NORMAL
- en: '[[3](#id3)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “An improved algorithm for curve fitting with spline functions”,
    report tw54, Dept. Computer Science,K.U. Leuven, 1981.
  prefs: []
  type: TYPE_NORMAL
- en: '[[4](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: P. Dierckx, “Curve and surface fitting with splines”, Monographs on Numerical
    Analysis, Oxford University Press, 1993.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the default value for the smoothing parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Manually change the amount of smoothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-UnivariateSpline-1.png](../Images/0d655455f94239bf6955396cec8fa46a.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.UnivariateSpline.__call__.html#scipy.interpolate.UnivariateSpline.__call__
    "scipy.interpolate.UnivariateSpline.__call__")(x[, nu, ext]) | Evaluate spline
    (or its nu-th derivative) at positions x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.UnivariateSpline.antiderivative.html#scipy.interpolate.UnivariateSpline.antiderivative
    "scipy.interpolate.UnivariateSpline.antiderivative")([n]) | Construct a new spline
    representing the antiderivative of this spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.UnivariateSpline.derivative.html#scipy.interpolate.UnivariateSpline.derivative
    "scipy.interpolate.UnivariateSpline.derivative")([n]) | Construct a new spline
    representing the derivative of this spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivatives`](scipy.interpolate.UnivariateSpline.derivatives.html#scipy.interpolate.UnivariateSpline.derivatives
    "scipy.interpolate.UnivariateSpline.derivatives")(x) | Return all derivatives
    of the spline at the point x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_coeffs`](scipy.interpolate.UnivariateSpline.get_coeffs.html#scipy.interpolate.UnivariateSpline.get_coeffs
    "scipy.interpolate.UnivariateSpline.get_coeffs")() | Return spline coefficients.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_knots`](scipy.interpolate.UnivariateSpline.get_knots.html#scipy.interpolate.UnivariateSpline.get_knots
    "scipy.interpolate.UnivariateSpline.get_knots")() | Return positions of interior
    knots of the spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_residual`](scipy.interpolate.UnivariateSpline.get_residual.html#scipy.interpolate.UnivariateSpline.get_residual
    "scipy.interpolate.UnivariateSpline.get_residual")() | Return weighted sum of
    squared residuals of the spline approximation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integral`](scipy.interpolate.UnivariateSpline.integral.html#scipy.interpolate.UnivariateSpline.integral
    "scipy.interpolate.UnivariateSpline.integral")(a, b) | Return definite integral
    of the spline between two given points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots`](scipy.interpolate.UnivariateSpline.roots.html#scipy.interpolate.UnivariateSpline.roots
    "scipy.interpolate.UnivariateSpline.roots")() | Return the zeros of the spline.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_smoothing_factor`](scipy.interpolate.UnivariateSpline.set_smoothing_factor.html#scipy.interpolate.UnivariateSpline.set_smoothing_factor
    "scipy.interpolate.UnivariateSpline.set_smoothing_factor")(s) | Continue spline
    computation with the given smoothing factor s and with the knots found at the
    last call. |'
  prefs: []
  type: TYPE_TB
- en: '| **validate_input** |  |'
  prefs: []
  type: TYPE_TB
