- en: Printing (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/vector/api/printing.html](https://docs.sympy.org/latest/modules/physics/vector/api/printing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Initializes time derivative printing for all SymPy objects, i.e. any functions
    of time will be displayed in a more compact notation. The main benefit of this
    is for printing of time derivatives; instead of displaying as `Derivative(f(t),t)`,
    it will display `f'`. This is only actually needed for when derivatives are present
    and are not in a physics.vector.Vector or physics.vector.Dyadic object. This function
    is a light wrapper to [`init_printing()`](../../../interactive.html#sympy.interactive.printing.init_printing
    "sympy.interactive.printing.init_printing"). Any keyword arguments for it are
    valid here.
  prefs: []
  type: TYPE_NORMAL
- en: Initializes pretty-printer depending on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pretty_print** : bool, default=True'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, use [`pretty_print()`](../../../printing.html#sympy.printing.pretty.pretty.pretty_print
    "sympy.printing.pretty.pretty.pretty_print") to stringify or the provided pretty
    printer; if `False`, use [`sstrrepr()`](../../../printing.html#sympy.printing.str.sstrrepr
    "sympy.printing.str.sstrrepr") to stringify or the provided string printer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**order** : string or None, default=’lex’'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different settings for this parameter: `''lex''` (default),
    which is lexographic order; `''grlex''`, which is graded lexographic order; `''grevlex''`,
    which is reversed graded lexographic order; `''old''`, which is used for compatibility
    reasons and for long expressions; `None`, which sets it to lex.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**use_unicode** : bool or None, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, use unicode characters; if `False`, do not use unicode characters;
    if `None`, make a guess based on the environment.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**use_latex** : string, bool, or None, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, use default LaTeX rendering in GUI interfaces (png and mathjax);
    if `False`, do not use LaTeX rendering; if `None`, make a guess based on the environment;
    if `'png'`, enable LaTeX rendering with an external LaTeX compiler, falling back
    to matplotlib if external compilation fails; if `'matplotlib'`, enable LaTeX rendering
    with matplotlib; if `'mathjax'`, enable LaTeX text generation, for example MathJax
    rendering in IPython notebook or text rendering in LaTeX documents; if `'svg'`,
    enable LaTeX rendering with an external latex compiler, no fallback
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**wrap_line** : bool'
  prefs: []
  type: TYPE_NORMAL
- en: If True, lines will wrap at the end; if False, they will not wrap but continue
    as one line. This is only relevant if `pretty_print` is True.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**num_columns** : int or None, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: If `int`, number of columns before wrapping is set to num_columns; if `None`,
    number of columns before wrapping is set to terminal width. This is only relevant
    if `pretty_print` is `True`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**no_global** : bool, default=False'
  prefs: []
  type: TYPE_NORMAL
- en: If `True`, the settings become system wide; if `False`, use just for this console/session.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ip** : An interactive console'
  prefs: []
  type: TYPE_NORMAL
- en: This can either be an instance of IPython, or a class that derives from code.InteractiveConsole.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**euler** : bool, optional, default=False'
  prefs: []
  type: TYPE_NORMAL
- en: Loads the euler package in the LaTeX preamble for handwritten style fonts ([https://www.ctan.org/pkg/euler](https://www.ctan.org/pkg/euler)).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**forecolor** : string or None, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: DVI setting for foreground color. `None` means that either `'Black'`, `'White'`,
    or `'Gray'` will be selected based on a guess of the IPython terminal color setting.
    See notes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**backcolor** : string, optional, default=’Transparent’'
  prefs: []
  type: TYPE_NORMAL
- en: DVI setting for background color. See notes.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**fontsize** : string or int, optional, default=’10pt’'
  prefs: []
  type: TYPE_NORMAL
- en: A font size to pass to the LaTeX documentclass function in the preamble. Note
    that the options are limited by the documentclass. Consider using scale instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**latex_mode** : string, optional, default=’plain’'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mode used in the LaTeX printer. Can be one of: `{''inline''|''plain''|''equation''|''equation*''}`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**print_builtin** : boolean, optional, default=True'
  prefs: []
  type: TYPE_NORMAL
- en: If `True` then floats and integers will be printed. If `False` the printer will
    only print SymPy types.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**str_printer** : function, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: A custom string printer function. This should mimic [`sstrrepr()`](../../../printing.html#sympy.printing.str.sstrrepr
    "sympy.printing.str.sstrrepr").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**pretty_printer** : function, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: A custom pretty printer. This should mimic [`pretty()`](../../../printing.html#sympy.printing.pretty.pretty.pretty
    "sympy.printing.pretty.pretty.pretty").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**latex_printer** : function, optional, default=None'
  prefs: []
  type: TYPE_NORMAL
- en: A custom LaTeX printer. This should mimic [`latex()`](../../../printing.html#sympy.printing.latex.latex
    "sympy.printing.latex.latex").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**scale** : float, optional, default=1.0'
  prefs: []
  type: TYPE_NORMAL
- en: Scale the LaTeX output when using the `'png'` or `'svg'` backends. Useful for
    high dpi screens.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**settings :**'
  prefs: []
  type: TYPE_NORMAL
- en: Any additional settings for the `latex` and `pretty` commands can be used to
    fine-tune the output.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use the string printer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Function for printing of expressions generated in the sympy.physics vector package.
  prefs: []
  type: TYPE_NORMAL
- en: Extends SymPy’s StrPrinter, takes the same setting accepted by SymPy’s [`sstr()`](../../../printing.html#sympy.printing.str.sstr
    "sympy.printing.str.sstr"), and is equivalent to `print(sstr(foo))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : valid SymPy object'
  prefs: []
  type: TYPE_NORMAL
- en: SymPy expression to print.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**settings** : args'
  prefs: []
  type: TYPE_NORMAL
- en: Same as the settings accepted by SymPy’s sstr().
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Function for pretty printing of expressions generated in the sympy.physics vector
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Mainly used for expressions not inside a vector; the output of running scripts
    and generating equations of motion. Takes the same options as SymPy’s [`pretty_print()`](../../../printing.html#sympy.printing.pretty.pretty.pretty_print
    "sympy.printing.pretty.pretty.pretty_print"); see that function for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : valid SymPy object'
  prefs: []
  type: TYPE_NORMAL
- en: SymPy expression to pretty print
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**settings** : args'
  prefs: []
  type: TYPE_NORMAL
- en: Same as those accepted by SymPy’s pretty_print.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Function for printing latex representation of sympy.physics.vector objects.
  prefs: []
  type: TYPE_NORMAL
- en: For latex representation of Vectors, Dyadics, and dynamicsymbols. Takes the
    same options as SymPy’s [`latex()`](../../../printing.html#sympy.printing.latex.latex
    "sympy.printing.latex.latex"); see that function for more information;
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : valid SymPy object'
  prefs: []
  type: TYPE_NORMAL
- en: SymPy expression to represent in LaTeX form
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**settings** : args'
  prefs: []
  type: TYPE_NORMAL
- en: Same as latex()
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
