- en: The N-dimensional array (ndarray)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: N维数组（ndarray）
- en: 原文：[https://numpy.org/doc/1.26/reference/arrays.ndarray.html](https://numpy.org/doc/1.26/reference/arrays.ndarray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://numpy.org/doc/1.26/reference/arrays.ndarray.html](https://numpy.org/doc/1.26/reference/arrays.ndarray.html)
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") is
    a (usually fixed-size) multidimensional container of items of the same type and
    size. The number of dimensions and items in an array is defined by its [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape"), which is a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11)") of *N* non-negative integers that specify the sizes of each
    dimension. The type of items in the array is specified by a separate [data-type
    object (dtype)](arrays.dtypes.html#arrays-dtypes), one of which is associated
    with each ndarray.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")是一个（通常是固定大小的）相同类型和大小项目的多维容器。数组的维数和项目数由其[`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape")定义，这是一个指定每个维度大小的非负整数的[`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.11")。数组中项目的类型由一个单独的[数据类型对象（dtype）](arrays.dtypes.html#arrays-dtypes)指定，每个ndarray都关联一个数据类型。'
- en: As with other container objects in Python, the contents of an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") can be accessed and modified by [indexing or slicing](arrays.indexing.html#arrays-indexing)
    the array (using, for example, *N* integers), and via the methods and attributes
    of the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python中的其他容器对象一样，可以通过对数组进行[索引或切片](arrays.indexing.html#arrays-indexing)（例如使用*N*个整数）以及通过[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的方法和属性来访问和修改数组的内容。
- en: Different [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    can share the same data, so that changes made in one [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") may be visible in another. That is, an ndarray can be a *“view”*
    to another ndarray, and the data it is referring to is taken care of by the *“base”*
    ndarray. ndarrays can also be views to memory owned by Python [`strings`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)") or objects implementing the `buffer` or [array](arrays.interface.html#arrays-interface)
    interfaces.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")可以共享相同的数据，因此在一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")中所做的更改可能在另一个中可见。也就是说，ndarray可以是另一个ndarray的*“视图”*，它所引用的数据由*“基本”*
    ndarray处理。ndarray也可以是Python[`字符串`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.11)")或实现`buffer`或[array](arrays.interface.html#arrays-interface)接口的对象的内存视图。
- en: Example
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: 'A 2-dimensional array of size 2 x 3, composed of 4-byte integer elements:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由4字节整数元素组成的大小为2 x 3的二维数组：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The array can be indexed using Python container-like syntax:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以使用 Python 容器类似的语法进行索引：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example [slicing](arrays.indexing.html#arrays-indexing) can produce views
    of the array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[切片](arrays.indexing.html#arrays-indexing)可以生成数组的视图：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Constructing arrays
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建数组
- en: 'New arrays can be constructed using the routines detailed in [Array creation
    routines](routines.array-creation.html#routines-array-creation), and also by using
    the low-level [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    constructor:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[Array creation routines](routines.array-creation.html#routines-array-creation)中详细介绍的例程构建新数组，也可以使用低级[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")构造函数：
- en: '| [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(shape[, dtype, buffer, offset, ...])
    | An array object represents a multidimensional, homogeneous array of fixed-size
    items. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(形状[, dtype, buffer, 偏移, ...])|数组对象表示固定大小项的多维同类型数组。|'
- en: '## Indexing arrays'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数组索引'
- en: Arrays can be indexed using an extended Python slicing syntax, `array[selection]`.
    Similar syntax is also used for accessing fields in a [structured data type](../glossary.html#term-structured-data-type).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以使用扩展的Python切片语法`array[selection]`进行索引。类似的语法也用于访问[结构化数据类型](../glossary.html#term-structured-data-type)中的字段。
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Array Indexing](arrays.indexing.html#arrays-indexing).  ## Internal memory
    layout of an ndarray'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组索引](arrays.indexing.html#arrays-indexing)。## ndarray的内部内存布局'
- en: An instance of class [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") consists of a contiguous one-dimensional segment of computer
    memory (owned by the array, or by some other object), combined with an indexing
    scheme that maps *N* integers into the location of an item in the block. The ranges
    in which the indices can vary is specified by the [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") of the array. How many bytes each item takes and how the
    bytes are interpreted is defined by the [data-type object](arrays.dtypes.html#arrays-dtypes)
    associated with the array.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")类的实例由计算机内存的连续1维段（由数组或其他对象拥有）组成，结合将*N*个整数映射到块中项目位置的索引方案。索引可以变化的范围由数组的[`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape")指定。每个项目占用多少字节以及如何解释字节是由与数组相关联的[数据类型对象](arrays.dtypes.html#arrays-dtypes)定义的。
- en: 'A segment of memory is inherently 1-dimensional, and there are many different
    schemes for arranging the items of an *N*-dimensional array in a 1-dimensional
    block. NumPy is flexible, and [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects can accommodate any *strided indexing scheme*. In a strided
    scheme, the N-dimensional index \((n_0, n_1, ..., n_{N-1})\) corresponds to the
    offset (in bytes):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 内存的一部分本质上是1维的，对于*N*维数组，有许多不同的方案来在1维块中排列数组的元素。NumPy是灵活的，[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 对象可以适应任何*步进索引方案*。在步进方案中，N维索引\((n_0, n_1, ..., n_{N-1})\) 对应于偏移量（以字节为单位）：
- en: \[n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k\]
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: \[n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k\]
- en: 'from the beginning of the memory block associated with the array. Here, \(s_k\)
    are integers which specify the [`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") of the array. The [column-major](../glossary.html#term-column-major)
    order (used, for example, in the Fortran language and in *Matlab*) and [row-major](../glossary.html#term-row-major)
    order (used in C) schemes are just specific kinds of strided scheme, and correspond
    to memory that can be *addressed* by the strides:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从与数组相关联的内存块的开头。这里，\(s_k\) 是指定数组的[`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides")的整数。[列主序](../glossary.html#term-column-major)（例如，在Fortran语言和*Matlab*中使用）和[行主序](../glossary.html#term-row-major)（在C语言中使用）方案只是特定类型的步进方案，对应的内存可以通过步幅来*访问*：
- en: \[s_k^{\mathrm{column}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{row}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: \[s_k^{\mathrm{column}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{row}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
- en: where \(d_j\) *= self.shape[j]*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当 \(d_j\) *= self.shape[j]* 时。
- en: Both the C and Fortran orders are [contiguous](../glossary.html#term-contiguous),
    *i.e.,* single-segment, memory layouts, in which every part of the memory block
    can be accessed by some combination of the indices.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: C顺序和Fortran顺序都是[连续的](../glossary.html#term-contiguous)，*即*单片段的内存布局，其中内存块的每个部分都可以通过一些索引的组合来访问。
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Contiguous arrays* and *single-segment arrays* are synonymous and are used
    interchangeably throughout the documentation.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*Contiguous arrays* 和 *single-segment arrays* 是同义词，在整个文档中可以互换使用。'
- en: 'While a C-style and Fortran-style contiguous array, which has the corresponding
    flags set, can be addressed with the above strides, the actual strides may be
    different. This can happen in two cases:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然C风格和Fortran风格的连续数组拥有相应的标志位，可以通过上述步幅来访问，但实际步幅可能是不同的。这种情况可能出现在两种情况下：
- en: If `self.shape[k] == 1` then for any legal index `index[k] == 0`. This means
    that in the formula for the offset \(n_k = 0\) and thus \(s_k n_k = 0\) and the
    value of \(s_k\) *= self.strides[k]* is arbitrary.
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `self.shape[k] == 1`，那么对于任何合法的索引 `index[k] == 0`。这意味着在偏移量的公式中 \(n_k = 0\)，因此
    \(s_k n_k = 0\)，而 \(s_k\) *= self.strides[k]* 是任意的值。
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If an array has no elements (`self.size == 0`) there is no legal index and the
    strides are never used. Any array with no elements may be considered C-style and
    Fortran-style contiguous.
  id: totrans-32
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个数组没有元素（`self.size == 0`），那么没有合法的索引，步幅也不会被使用。任何没有元素的数组都可以被视为C风格和Fortran风格的连续数组。
- en: Point 1\. means that `self` and `self.squeeze()` always have the same contiguity
    and `aligned` flags value. This also means that even a high dimensional array
    could be C-style and Fortran-style contiguous at the same time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第1点意味着 `self` 和 `self.squeeze()` 总是具有相同的连续性和 `aligned` 标志值。这也意味着即使是高维数组也可以同时具有C风格和Fortran风格的连续性。
- en: An array is considered aligned if the memory offsets for all elements and the
    base offset itself is a multiple of *self.itemsize*. Understanding *memory-alignment*
    leads to better performance on most hardware.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有元素的内存偏移和基本偏移本身是* self.itemsize*的倍数，则认为数组是对齐的。了解*内存对齐*可以在大多数硬件上获得更好的性能。
- en: Warning
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: It does *not* generally hold that `self.strides[-1] == self.itemsize` for C-style
    contiguous arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous
    arrays is true.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于C风格连续数组，通常不成立`self.strides[-1] == self.itemsize`或者对于Fortran风格连续数组`self.strides[0]
    == self.itemsize`。
- en: '`NPY_RELAXED_STRIDES_DEBUG=1` can be used to help find errors when incorrectly
    relying on the strides in C-extension code (see below warning).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`NPY_RELAXED_STRIDES_DEBUG=1`可用于帮助找到在C扩展代码中错误地依赖步幅时的错误（见下面的警告）。'
- en: Data in new [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is in the [row-major](../glossary.html#term-row-major) (C) order, unless otherwise
    specified, but, for example, [basic array slicing](arrays.indexing.html#arrays-indexing)
    often produces [views](../glossary.html#term-view) in a different scheme.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 新[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")中的数据按[行主序](../glossary.html#term-row-major)(C)存储，除非另有规定，但是，例如，[基本数组切片](arrays.indexing.html#arrays-indexing)通常会产生不同方案的[视图](../glossary.html#term-view)。
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Several algorithms in NumPy work on arbitrarily strided arrays. However, some
    algorithms require single-segment arrays. When an irregularly strided array is
    passed in to such algorithms, a copy is automatically made.  ## Array attributes'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的多种算法适用于任意步幅的数组。然而，一些算法需要单段数组。当不规则步幅的数组传递给此类算法时，将自动进行复制。## 数组属性
- en: Array attributes reflect information that is intrinsic to the array itself.
    Generally, accessing an array through its attributes allows you to get and sometimes
    set intrinsic properties of the array without creating a new array. The exposed
    attributes are the core parts of an array and only some of them can be reset meaningfully
    without creating a new array. Information on each attribute is given below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 数组属性反映了数组本身固有的信息。通常，通过其属性访问数组可以获取并有时设置数组的固有属性，而无需创建新数组。公开的属性是数组的核心部分，只有其中的一些属性可以在不创建新数组的情况下被有意义地重置。下面给出了每个属性的信息。
- en: Memory layout
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存布局
- en: 'The following attributes contain information about the memory layout of the
    array:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '以下属性包含有关数组的内存布局的信息:'
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | 数组的内存布局信息。|'
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | 数组维度的元组。|'
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | 遍历数组时在每个维度上移动的字节数元组。|'
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | 数组维度的数量。|'
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | 指向数组数据起始处的Python缓冲区对象。|'
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | 数组中的元素数量。|'
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | 数组元素的字节长度。|'
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | 数组元素占用的总字节数。|'
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | 如果内存来自其他对象，则为基本对象。|'
- en: Data type
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据类型对象](arrays.dtypes.html#arrays-dtypes)'
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组关联的数据类型对象可以在[`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") 属性中找到：
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | 数组元素的数据类型。 |'
- en: Other attributes
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他属性
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | 转置数组的视图。 |'
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | 数组的实部。 |'
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | 数组的虚部。 |'
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | 数组上的一维迭代器。 |'
- en: '### Array interface'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数组接口'
- en: See also
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](arrays.interface.html#arrays-interface).'
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | 数组接口的Python端 |'
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | 数组接口的C端 |'
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(在Python
    v3.11中)") 外部函数接口'
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |  ## Array methods'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | 简化数组与ctypes模块交互的对象。 |  ## 数组方法'
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") object
    has many methods which operate on or with the array in some fashion, typically
    returning an array result. These methods are briefly explained below. (Each method’s
    docstring has a more complete description.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") 对象有许多方法，这些方法以某种方式在数组上操作或与数组一起操作，通常返回一个数组结果。以下简要解释了这些方法。（每个方法的文档字符串中有更完整的描述。）
- en: 'For the following methods there are also corresponding functions in [`numpy`](index.html#module-numpy
    "numpy"): [`all`](generated/numpy.all.html#numpy.all "numpy.all"), [`any`](generated/numpy.any.html#numpy.any
    "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"), [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), [`argsort`](generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"), [`compress`](generated/numpy.compress.html#numpy.compress
    "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy"),
    [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"), [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum
    "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal"),
    [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"), [`max`](generated/numpy.amax.html#numpy.amax
    "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin
    "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero"),
    [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition"),
    [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"), [`ptp`](generated/numpy.ptp.html#numpy.ptp
    "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel"), [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以下方法，[`numpy`](index.html#module-numpy "numpy")中也有相应的函数：[`all`](generated/numpy.all.html#numpy.all
    "numpy.all"), [`any`](generated/numpy.any.html#numpy.any "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax
    "numpy.argmax"), [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"),
    [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition "numpy.argpartition"),
    [`argsort`](generated/numpy.argsort.html#numpy.argsort "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose
    "numpy.choose"), [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"),
    [`compress`](generated/numpy.compress.html#numpy.compress "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy
    "numpy.copy"), [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal
    "numpy.diagonal"), [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"),
    [`max`](generated/numpy.amax.html#numpy.amax "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean
    "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`partition`](generated/numpy.partition.html#numpy.partition
    "numpy.partition"), [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`ptp`](generated/numpy.ptp.html#numpy.ptp "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put
    "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel"),
    [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").
- en: Array conversion
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组转换
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | 将数组中的一个元素复制到标准的Python标量并返回。 |'
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | 将数组作为一个`a.ndim`级别深度嵌套的Python标量列表返回。 |'
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | 将标量插入数组（如果可能的话，将标量转换为数组的数据类型） |'
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | *tobytes* 的兼容别名，具有完全相同的行为。 |'
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | 构造包含数组中原始数据字节的Python字节。 |'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组以文本或二进制形式写入文件（默认为二进制）。 |'
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | 将数组的 pickle 转储到指定的文件。 |'
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | 将数组的 pickle 作为字符串返回。 |'
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | 数组的副本，转换为指定的类型。 |'
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | 交换数组元素的字节 |'
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | 返回数组的副本。 |'
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | 具有相同数据的数组的新视图。 |'
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | 以特定类型返回给定数组的字段。 |'
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | 分别设置数组标志 WRITEABLE、ALIGNED、WRITEBACKIFCOPY。
    |'
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | 用标量值填充数组。 |'
- en: Shape manipulation
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shape manipulation
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 reshape、resize 和 transpose，可以用 `n` 个整数替换单个元组参数，这将被解释为一个 n-元组。
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | 返回包含相同数据的新形状的数组。 |'
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | 在原地改变数组的形状和大小。 |'
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | 返回具有转置轴的数组的视图。 |'
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | 返回数组的*axis1*和*axis2*交换的视图。'
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | 返回折叠为一维的数组的副本。'
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | 返回一个扁平化的数组。'
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | 从*a*中删除长度为一的轴。'
- en: Item selection and manipulation
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目选择和操作
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于带有*axis*关键字的数组方法，默认为*None*。如果*axis*为*None*，则数组被视为一维数组。*axis*的任何其他值代表应该进行操作的维度。
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | 返回由给定索引处的*a*的元素组成的数组。'
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | 对所有*indices*中的*n*，设置`a.flat[n] = values[n]`。'
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | 重复数组的元素。'
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | 使用索引数组从一组选择中构建新数组。'
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | 对数组进行原地排序。'
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | 返回对该数组进行排序的索引。'
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | 重新安排数组中的元素，使第*k*个位置的元素的值位于排序数组中它所在的位置。'
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | 返回将该数组划分的索引。'
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | 找到应将v的元素插入a以保持顺序的索引。'
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | 返回非零元素的索引。'
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | 返回沿着给定轴选择的此数组的切片。'
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | 返回指定的对角线。'
- en: Calculation
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算
- en: Many of these methods take an argument named *axis*. In such cases,
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 许多方法都带有名为 *axis* 的参数。在这种情况下，
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *axis* 是 *None*（默认值），则数组被视为 1-D 数组，并且操作在整个数组上执行。如果 self 是 0 维数组或数组标量，则此行为也是默认值。
    （数组标量是 float32、float64 等类型/类的实例，而 0 维数组是包含恰好一个数组标量的 ndarray 实例。）
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *axis* 是整数，则操作在给定轴上完成（对于可以沿给定轴创建的每个 1-D 子数组）。
- en: Example of the *axis* argument
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*axis* 参数的示例'
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一个大小为 3 x 3 x 3 的三维数组，沿着其三个轴进行求和
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 *dtype* 指定应该对其进行缩减操作（如求和）的数据类型。默认减少数据类型与 *self* 的数据类型相同。 为了避免溢出，执行较大数据类型的计算减少可能是有用的。
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对于几种方法，还可以提供可选的 *out* 参数，并且结果将放入给定的输出数组中。 *out* 参数必须是一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")，并且具有相同数量的元素。 它可以具有不同的数据类型，在这种情况下将执行强制转换。
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | 返回沿给定轴的最大值。'
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | 返回沿给定轴的最大值的索引。'
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | 返回沿给定轴的最小值。'
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | 返回沿给定轴的最小值的索引。'
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | 沿着给定轴的峰值到峰值（最大值 - 最小值）。'
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | 返回其值限制为`[min, max]`的数组。'
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | 复共轭所有元素。'
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | 返回*a*，其中每个元素舍入到给定的小数位数。'
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | 返回数组对角线和。'
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | 返回沿给定轴的数组元素的总和。'
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | 返回沿给定轴的元素的累积和。'
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | 返回沿给定轴的数组元素的平均值。'
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | 返回数组元素沿给定轴的方差。'
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | 返回沿给定轴的数组元素的标准差。'
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | 返回沿给定轴的数组元素的乘积'
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | 返回沿给定轴的元素的累积乘积。'
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | 如果所有元素求值为True，则返回True。'
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | 如果*a*的任何元素求值为True，则返回True。'
- en: Arithmetic, matrix multiplication, and comparison operations
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术运算、矩阵乘法和比较操作
- en: Arithmetic and comparison operations on [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") are defined as element-wise operations, and generally yield [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects as results.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")上的算术和比较运算被定义为逐元素操作，并且通常产生[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")对象作为结果。
- en: Each of the arithmetic operations (`+`, `-`, `*`, `/`, `//`, `%`, `divmod()`,
    `**` or `pow()`, `<<`, `>>`, `&`, `^`, `|`, `~`) and the comparisons (`==`, `<`,
    `>`, `<=`, `>=`, `!=`) is equivalent to the corresponding universal function (or
    [ufunc](../glossary.html#term-ufunc) for short) in NumPy. For more information,
    see the section on [Universal Functions](ufuncs.html#ufuncs).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 每个算术运算(`+`, `-`, `*`, `/`, `//`, `%`, `divmod()`, `**` or `pow()`, `<<`, `>>`,
    `&`, `^`, `|`, `~`) 和比较(`==`, `<`, `>`, `<=`, `>=`, `!=`) 都等同于NumPy中对应的通用函数（或简称[ufunc](../glossary.html#term-ufunc)）。更多信息，请参阅[通用函数](ufuncs.html#ufuncs)部分。
- en: 'Comparison operators:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符：
- en: '| [`ndarray.__lt__`](generated/numpy.ndarray.__lt__.html#numpy.ndarray.__lt__
    "numpy.ndarray.__lt__")(value, /) | Return self<value. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__lt__`](generated/numpy.ndarray.__lt__.html#numpy.ndarray.__lt__
    "numpy.ndarray.__lt__")(value, /) | 返回self<value。'
- en: '| [`ndarray.__le__`](generated/numpy.ndarray.__le__.html#numpy.ndarray.__le__
    "numpy.ndarray.__le__")(value, /) | Return self<=value. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__le__`](generated/numpy.ndarray.__le__.html#numpy.ndarray.__le__
    "numpy.ndarray.__le__")(value, /) | 返回self<=value。'
- en: '| [`ndarray.__gt__`](generated/numpy.ndarray.__gt__.html#numpy.ndarray.__gt__
    "numpy.ndarray.__gt__")(value, /) | Return self>value. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__gt__`](generated/numpy.ndarray.__gt__.html#numpy.ndarray.__gt__
    "numpy.ndarray.__gt__")(value, /) | 返回self>value。'
- en: '| [`ndarray.__ge__`](generated/numpy.ndarray.__ge__.html#numpy.ndarray.__ge__
    "numpy.ndarray.__ge__")(value, /) | Return self>=value. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ge__`](generated/numpy.ndarray.__ge__.html#numpy.ndarray.__ge__
    "numpy.ndarray.__ge__")(value, /) | 返回self>=value。'
- en: '| [`ndarray.__eq__`](generated/numpy.ndarray.__eq__.html#numpy.ndarray.__eq__
    "numpy.ndarray.__eq__")(value, /) | Return self==value. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__eq__`](generated/numpy.ndarray.__eq__.html#numpy.ndarray.__eq__
    "numpy.ndarray.__eq__")(value, /) | 返回self==value。'
- en: '| [`ndarray.__ne__`](generated/numpy.ndarray.__ne__.html#numpy.ndarray.__ne__
    "numpy.ndarray.__ne__")(value, /) | Return self!=value. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ne__`](generated/numpy.ndarray.__ne__.html#numpy.ndarray.__ne__
    "numpy.ndarray.__ne__")(value, /) | 返回self!=value。'
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的布尔值（[`bool()`](https://docs.python.org/3/library/functions.html#bool "(in
    Python v3.11)")）：
- en: '| [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")(/) | True if self else False |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")(/) | 如果self为真，则为真，否则为假。'
- en: Note
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Truth-value testing of an array invokes [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__"), which raises an error if the number of elements in
    the array is larger than 1, because the truth value of such arrays is ambiguous.
    Use [`.any()`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")
    and [`.all()`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")
    instead to be clear about what is meant in such cases. (If the number of elements
    is 0, the array evaluates to `False`.)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组的真值测试调用[`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")，如果数组中的元素数量大于1，会引发错误，因为这些数组的真值是不明确的。在这种情况下，应该使用[`.any()`](generated/numpy.ndarray.any.html#numpy.ndarray.any
    "numpy.ndarray.any")和[`.all()`](generated/numpy.ndarray.all.html#numpy.ndarray.all
    "numpy.ndarray.all")来明确表示意思（如果元素的数量为0，则数组的值为`False`）。
- en: 'Unary operations:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一��操作：
- en: '| [`ndarray.__neg__`](generated/numpy.ndarray.__neg__.html#numpy.ndarray.__neg__
    "numpy.ndarray.__neg__")(/) | -self |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__neg__`](generated/numpy.ndarray.__neg__.html#numpy.ndarray.__neg__
    "numpy.ndarray.__neg__")(/) | -self |'
- en: '| [`ndarray.__pos__`](generated/numpy.ndarray.__pos__.html#numpy.ndarray.__pos__
    "numpy.ndarray.__pos__")(/) | +self |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__pos__`](generated/numpy.ndarray.__pos__.html#numpy.ndarray.__pos__
    "numpy.ndarray.__pos__")(/) | +self |'
- en: '| [`ndarray.__abs__`](generated/numpy.ndarray.__abs__.html#numpy.ndarray.__abs__
    "numpy.ndarray.__abs__")(self) |  |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__abs__`](generated/numpy.ndarray.__abs__.html#numpy.ndarray.__abs__
    "numpy.ndarray.__abs__")(self) |  |'
- en: '| [`ndarray.__invert__`](generated/numpy.ndarray.__invert__.html#numpy.ndarray.__invert__
    "numpy.ndarray.__invert__")(/) | ~self |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__invert__`](generated/numpy.ndarray.__invert__.html#numpy.ndarray.__invert__
    "numpy.ndarray.__invert__")(/) | ~self |'
- en: 'Arithmetic:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算：
- en: '| [`ndarray.__add__`](generated/numpy.ndarray.__add__.html#numpy.ndarray.__add__
    "numpy.ndarray.__add__")(value, /) | Return self+value. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__add__`](generated/numpy.ndarray.__add__.html#numpy.ndarray.__add__
    "numpy.ndarray.__add__")(value, /) | 返回self+value。'
- en: '| [`ndarray.__sub__`](generated/numpy.ndarray.__sub__.html#numpy.ndarray.__sub__
    "numpy.ndarray.__sub__")(value, /) | Return self-value. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__sub__`](generated/numpy.ndarray.__sub__.html#numpy.ndarray.__sub__
    "numpy.ndarray.__sub__")(value, /) | 返回self-value。'
- en: '| [`ndarray.__mul__`](generated/numpy.ndarray.__mul__.html#numpy.ndarray.__mul__
    "numpy.ndarray.__mul__")(value, /) | Return self*value. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__mul__`](generated/numpy.ndarray.__mul__.html#numpy.ndarray.__mul__
    "numpy.ndarray.__mul__")(value, /) | 返回self*value。'
- en: '| [`ndarray.__truediv__`](generated/numpy.ndarray.__truediv__.html#numpy.ndarray.__truediv__
    "numpy.ndarray.__truediv__")(value, /) | Return self/value. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__truediv__`](generated/numpy.ndarray.__truediv__.html#numpy.ndarray.__truediv__
    "numpy.ndarray.__truediv__")(value, /) | 返回self/value。'
- en: '| [`ndarray.__floordiv__`](generated/numpy.ndarray.__floordiv__.html#numpy.ndarray.__floordiv__
    "numpy.ndarray.__floordiv__")(value, /) | Return self//value. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__floordiv__`](generated/numpy.ndarray.__floordiv__.html#numpy.ndarray.__floordiv__
    "numpy.ndarray.__floordiv__")(value, /) | 返回self//value。'
- en: '| [`ndarray.__mod__`](generated/numpy.ndarray.__mod__.html#numpy.ndarray.__mod__
    "numpy.ndarray.__mod__")(value, /) | Return self%value. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__mod__`](generated/numpy.ndarray.__mod__.html#numpy.ndarray.__mod__
    "numpy.ndarray.__mod__")(value, /) | 返回self%value。'
- en: '| [`ndarray.__divmod__`](generated/numpy.ndarray.__divmod__.html#numpy.ndarray.__divmod__
    "numpy.ndarray.__divmod__")(value, /) | Return divmod(self, value). |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__divmod__`](generated/numpy.ndarray.__divmod__.html#numpy.ndarray.__divmod__
    "numpy.ndarray.__divmod__")(value, /) | 返回 divmod(self, value)。 |'
- en: '| [`ndarray.__pow__`](generated/numpy.ndarray.__pow__.html#numpy.ndarray.__pow__
    "numpy.ndarray.__pow__")(value[, mod]) | Return pow(self, value, mod). |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__pow__`](generated/numpy.ndarray.__pow__.html#numpy.ndarray.__pow__
    "numpy.ndarray.__pow__")(value[, mod]) | 返回 pow(self, value, mod)。 |'
- en: '| [`ndarray.__lshift__`](generated/numpy.ndarray.__lshift__.html#numpy.ndarray.__lshift__
    "numpy.ndarray.__lshift__")(value, /) | Return self<<value. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__lshift__`](generated/numpy.ndarray.__lshift__.html#numpy.ndarray.__lshift__
    "numpy.ndarray.__lshift__")(value, /) | 返回 self<<value。 |'
- en: '| [`ndarray.__rshift__`](generated/numpy.ndarray.__rshift__.html#numpy.ndarray.__rshift__
    "numpy.ndarray.__rshift__")(value, /) | Return self>>value. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__rshift__`](generated/numpy.ndarray.__rshift__.html#numpy.ndarray.__rshift__
    "numpy.ndarray.__rshift__")(value, /) | 返回 self>>value。 |'
- en: '| [`ndarray.__and__`](generated/numpy.ndarray.__and__.html#numpy.ndarray.__and__
    "numpy.ndarray.__and__")(value, /) | Return self&value. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__and__`](generated/numpy.ndarray.__and__.html#numpy.ndarray.__and__
    "numpy.ndarray.__and__")(value, /) | 返回 self&value。 |'
- en: '| [`ndarray.__or__`](generated/numpy.ndarray.__or__.html#numpy.ndarray.__or__
    "numpy.ndarray.__or__")(value, /) | Return self&#124;value. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__or__`](generated/numpy.ndarray.__or__.html#numpy.ndarray.__or__
    "numpy.ndarray.__or__")(value, /) | 返回 self∣value。 |'
- en: '| [`ndarray.__xor__`](generated/numpy.ndarray.__xor__.html#numpy.ndarray.__xor__
    "numpy.ndarray.__xor__")(value, /) | Return self^value. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__xor__`](generated/numpy.ndarray.__xor__.html#numpy.ndarray.__xor__
    "numpy.ndarray.__xor__")(value, /) | 返回 self^value。 |'
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Any third argument to [`pow`](https://docs.python.org/3/library/functions.html#pow
    "(in Python v3.11)") is silently ignored, as the underlying [`ufunc`](generated/numpy.power.html#numpy.power
    "numpy.power") takes only two arguments.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pow`](https://docs.python.org/3/library/functions.html#pow "(in Python v3.11)")
    的第三个参数被悄悄忽略，因为底层的 [`ufunc`](generated/numpy.power.html#numpy.power "numpy.power")
    只接受两个参数。'
- en: Because [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is a built-in type (written in C), the `__r{op}__` special methods are not directly
    defined.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为 [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") 是一个内置类型（用C编写），`__r{op}__`
    特殊方法不是直接定义的。
- en: The functions called to implement many arithmetic special methods for arrays
    can be modified using [`__array_ufunc__`](arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__").
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用 [`__array_ufunc__`](arrays.classes.html#numpy.class.__array_ufunc__ "numpy.class.__array_ufunc__")
    可以修改为数组实现许多算术特殊方法的函数。
- en: 'Arithmetic, in-place:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 算术，原地：
- en: '| [`ndarray.__iadd__`](generated/numpy.ndarray.__iadd__.html#numpy.ndarray.__iadd__
    "numpy.ndarray.__iadd__")(value, /) | Return self+=value. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__iadd__`](generated/numpy.ndarray.__iadd__.html#numpy.ndarray.__iadd__
    "numpy.ndarray.__iadd__")(value, /) | 返回 self+=value。 |'
- en: '| [`ndarray.__isub__`](generated/numpy.ndarray.__isub__.html#numpy.ndarray.__isub__
    "numpy.ndarray.__isub__")(value, /) | Return self-=value. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__isub__`](generated/numpy.ndarray.__isub__.html#numpy.ndarray.__isub__
    "numpy.ndarray.__isub__")(value, /) | 返回 self-=value。 |'
- en: '| [`ndarray.__imul__`](generated/numpy.ndarray.__imul__.html#numpy.ndarray.__imul__
    "numpy.ndarray.__imul__")(value, /) | Return self*=value. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__imul__`](generated/numpy.ndarray.__imul__.html#numpy.ndarray.__imul__
    "numpy.ndarray.__imul__")(value, /) | 返回 self*=value。 |'
- en: '| [`ndarray.__itruediv__`](generated/numpy.ndarray.__itruediv__.html#numpy.ndarray.__itruediv__
    "numpy.ndarray.__itruediv__")(value, /) | Return self/=value. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__itruediv__`](generated/numpy.ndarray.__itruediv__.html#numpy.ndarray.__itruediv__
    "numpy.ndarray.__itruediv__")(value, /) | 返回 self/=value。 |'
- en: '| [`ndarray.__ifloordiv__`](generated/numpy.ndarray.__ifloordiv__.html#numpy.ndarray.__ifloordiv__
    "numpy.ndarray.__ifloordiv__")(value, /) | Return self//=value. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ifloordiv__`](generated/numpy.ndarray.__ifloordiv__.html#numpy.ndarray.__ifloordiv__
    "numpy.ndarray.__ifloordiv__")(value, /) | 返回 self//=value。 |'
- en: '| [`ndarray.__imod__`](generated/numpy.ndarray.__imod__.html#numpy.ndarray.__imod__
    "numpy.ndarray.__imod__")(value, /) | Return self%=value. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__imod__`](generated/numpy.ndarray.__imod__.html#numpy.ndarray.__imod__
    "numpy.ndarray.__imod__")(value, /) | 返回 self%=value。 |'
- en: '| [`ndarray.__ipow__`](generated/numpy.ndarray.__ipow__.html#numpy.ndarray.__ipow__
    "numpy.ndarray.__ipow__")(value, /) | Return self**=value. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ipow__`](generated/numpy.ndarray.__ipow__.html#numpy.ndarray.__ipow__
    "numpy.ndarray.__ipow__")(value, /) | 返回 self**=value。 |'
- en: '| [`ndarray.__ilshift__`](generated/numpy.ndarray.__ilshift__.html#numpy.ndarray.__ilshift__
    "numpy.ndarray.__ilshift__")(value, /) | Return self<<=value. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ilshift__`](generated/numpy.ndarray.__ilshift__.html#numpy.ndarray.__ilshift__
    "numpy.ndarray.__ilshift__")(value, /) | 返回 self<<=value。 |'
- en: '| [`ndarray.__irshift__`](generated/numpy.ndarray.__irshift__.html#numpy.ndarray.__irshift__
    "numpy.ndarray.__irshift__")(value, /) | Return self>>=value. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__irshift__`](generated/numpy.ndarray.__irshift__.html#numpy.ndarray.__irshift__
    "numpy.ndarray.__irshift__")(value, /) | 返回 self>>=value。'
- en: '| [`ndarray.__iand__`](generated/numpy.ndarray.__iand__.html#numpy.ndarray.__iand__
    "numpy.ndarray.__iand__")(value, /) | Return self&=value. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__iand__`](generated/numpy.ndarray.__iand__.html#numpy.ndarray.__iand__
    "numpy.ndarray.__iand__")(value, /) | 返回 self&=value。'
- en: '| [`ndarray.__ior__`](generated/numpy.ndarray.__ior__.html#numpy.ndarray.__ior__
    "numpy.ndarray.__ior__")(value, /) | Return self&#124;=value. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ior__`](generated/numpy.ndarray.__ior__.html#numpy.ndarray.__ior__
    "numpy.ndarray.__ior__")(value, /) | 返回 self&#124;=value。'
- en: '| [`ndarray.__ixor__`](generated/numpy.ndarray.__ixor__.html#numpy.ndarray.__ixor__
    "numpy.ndarray.__ixor__")(value, /) | Return self^=value. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__ixor__`](generated/numpy.ndarray.__ixor__.html#numpy.ndarray.__ixor__
    "numpy.ndarray.__ixor__")(value, /) | 返回 self^=value。'
- en: Warning
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: 'In place operations will perform the calculation using the precision decided
    by the data type of the two operands, but will silently downcast the result (if
    necessary) so it can fit back into the array. Therefore, for mixed precision calculations,
    `A {op}= B` can be different than `A = A {op} B`. For example, suppose `a = ones((3,3))`.
    Then, `a += 3j` is different than `a = a + 3j`: while they both perform the same
    computation, `a += 3` casts the result to fit back in `a`, whereas `a = a + 3j`
    re-binds the name `a` to the result.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 原地操作将使用由两个操作数的数据类型决定的精度进行计算，但会悄然将结果降级（如果需要），以便它可以适合回到数组中。因此，对于混合精度计算，`A {op}=
    B` 可以不同于 `A = A {op} B`。例如，假设 `a = ones((3,3))`。然后，`a += 3j` 不同于 `a = a + 3j`：虽然它们都执行相同的计算，`a
    += 3` 将结果转换为适合`a`，而`a = a + 3j` 重新绑定名称`a`到结果。
- en: 'Matrix Multiplication:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵乘法：
- en: '| [`ndarray.__matmul__`](generated/numpy.ndarray.__matmul__.html#numpy.ndarray.__matmul__
    "numpy.ndarray.__matmul__")(value, /) | Return [self@value](/cdn-cgi/l/email-protection#0a796f666c2c29393d312c293f38312c293e32317c6b667f6f).
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__matmul__`](generated/numpy.ndarray.__matmul__.html#numpy.ndarray.__matmul__
    "numpy.ndarray.__matmul__")(value, /) | 返回 [self@value](/cdn-cgi/l/email-protection#0a796f666c2c29393d312c293f38312c293e32317c6b667f6f)。'
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Matrix operators `@` and `@=` were introduced in Python 3.5 following [**PEP
    465**](https://peps.python.org/pep-0465/), and the `@` operator has been introduced
    in NumPy 1.10.0\. Further information can be found in the [`matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") documentation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵运算符 `@` 和 `@=` 是在 Python 3.5 中遵循 [**PEP 465**](https://peps.python.org/pep-0465/)引入的，并且
    `@` 运算符已在 NumPy 1.10.0中引入。更多信息可以在 [`matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") 文档中找到。
- en: Special methods
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊方法
- en: 'For standard library functions:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标准库函数：
- en: '| [`ndarray.__copy__`](generated/numpy.ndarray.__copy__.html#numpy.ndarray.__copy__
    "numpy.ndarray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__copy__`](generated/numpy.ndarray.__copy__.html#numpy.ndarray.__copy__
    "numpy.ndarray.__copy__")() | 如果在数组上调用 [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(在 Python v3.11)")时使用。'
- en: '| [`ndarray.__deepcopy__`](generated/numpy.ndarray.__deepcopy__.html#numpy.ndarray.__deepcopy__
    "numpy.ndarray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__deepcopy__`](generated/numpy.ndarray.__deepcopy__.html#numpy.ndarray.__deepcopy__
    "numpy.ndarray.__deepcopy__")(memo, /) | 如果在数组上调用[`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(在 Python v3.11)")时使用。'
- en: '| [`ndarray.__reduce__`](generated/numpy.ndarray.__reduce__.html#numpy.ndarray.__reduce__
    "numpy.ndarray.__reduce__")() | For pickling. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__reduce__`](generated/numpy.ndarray.__reduce__.html#numpy.ndarray.__reduce__
    "numpy.ndarray.__reduce__")() | 用于pickle。'
- en: '| [`ndarray.__setstate__`](generated/numpy.ndarray.__setstate__.html#numpy.ndarray.__setstate__
    "numpy.ndarray.__setstate__")(state, /) | For unpickling. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__setstate__`](generated/numpy.ndarray.__setstate__.html#numpy.ndarray.__setstate__
    "numpy.ndarray.__setstate__")(state, /) | 用于取消pickle。'
- en: 'Basic customization:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 基本自定义：
- en: '| [`ndarray.__new__`](generated/numpy.ndarray.__new__.html#numpy.ndarray.__new__
    "numpy.ndarray.__new__")(*args, **kwargs) |  |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__new__`](generated/numpy.ndarray.__new__.html#numpy.ndarray.__new__
    "numpy.ndarray.__new__")(*args, **kwargs) |  |'
- en: '| [`ndarray.__array__`](generated/numpy.ndarray.__array__.html#numpy.ndarray.__array__
    "numpy.ndarray.__array__")([dtype], /) | Returns either a new reference to self
    if dtype is not given or a new array of provided data type if dtype is different
    from the current dtype of the array. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__array__`](generated/numpy.ndarray.__array__.html#numpy.ndarray.__array__
    "numpy.ndarray.__array__")([dtype], /) | 如果未给出 dtype，则返回对自身的新引用；如果 dtype 与数组的当前
    dtype 不同，则返回提供的数据类型的新数组。'
- en: '| [`ndarray.__array_wrap__`](generated/numpy.ndarray.__array_wrap__.html#numpy.ndarray.__array_wrap__
    "numpy.ndarray.__array_wrap__")(array[, context], /) | Returns a view of [`array`](generated/numpy.array.html#numpy.array
    "numpy.array") with the same type as self. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__array_wrap__`](generated/numpy.ndarray.__array_wrap__.html#numpy.ndarray.__array_wrap__
    "numpy.ndarray.__array_wrap__")(array[, context], /) | 返回与 self 相同类型的数组[`array`](generated/numpy.array.html#numpy.array
    "numpy.array")的视图。 |'
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 容器定制：（参见[索引](arrays.indexing.html#arrays-indexing)）
- en: '| [`ndarray.__len__`](generated/numpy.ndarray.__len__.html#numpy.ndarray.__len__
    "numpy.ndarray.__len__")(/) | Return len(self). |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__len__`](generated/numpy.ndarray.__len__.html#numpy.ndarray.__len__
    "numpy.ndarray.__len__")(/) | 返回 self 的长度。 |'
- en: '| [`ndarray.__getitem__`](generated/numpy.ndarray.__getitem__.html#numpy.ndarray.__getitem__
    "numpy.ndarray.__getitem__")(key, /) | Return self[key]. |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__getitem__`](generated/numpy.ndarray.__getitem__.html#numpy.ndarray.__getitem__
    "numpy.ndarray.__getitem__")(key, /) | 返回 self[key]。 |'
- en: '| [`ndarray.__setitem__`](generated/numpy.ndarray.__setitem__.html#numpy.ndarray.__setitem__
    "numpy.ndarray.__setitem__")(key, value, /) | Set self[key] to value. |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__setitem__`](generated/numpy.ndarray.__setitem__.html#numpy.ndarray.__setitem__
    "numpy.ndarray.__setitem__")(key, value, /) | 将 self[key] 设置为 value。 |'
- en: '| [`ndarray.__contains__`](generated/numpy.ndarray.__contains__.html#numpy.ndarray.__contains__
    "numpy.ndarray.__contains__")(key, /) | Return key in self. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__contains__`](generated/numpy.ndarray.__contains__.html#numpy.ndarray.__contains__
    "numpy.ndarray.__contains__")(key, /) | 返回 key 是否在 self 中。 |'
- en: Conversion; the operations [`int()`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)"), [`float()`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") and [`complex()`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)"). They work only on arrays that have one element in them and
    return the appropriate scalar.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 转换；操作[`int()`](https://docs.python.org/3/library/functions.html#int "(在 Python
    v3.11 中)")、[`float()`](https://docs.python.org/3/library/functions.html#float
    "(在 Python v3.11 中)") 和[`complex()`](https://docs.python.org/3/library/functions.html#complex
    "(在 Python v3.11 中)")。它们仅适用于具有一个元素的数组，并返回适当的标量。
- en: '| [`ndarray.__int__`](generated/numpy.ndarray.__int__.html#numpy.ndarray.__int__
    "numpy.ndarray.__int__")(self) |  |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__int__`](generated/numpy.ndarray.__int__.html#numpy.ndarray.__int__
    "numpy.ndarray.__int__")(self) |  |'
- en: '| [`ndarray.__float__`](generated/numpy.ndarray.__float__.html#numpy.ndarray.__float__
    "numpy.ndarray.__float__")(self) |  |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__float__`](generated/numpy.ndarray.__float__.html#numpy.ndarray.__float__
    "numpy.ndarray.__float__")(self) |  |'
- en: '| [`ndarray.__complex__`](generated/numpy.ndarray.__complex__.html#numpy.ndarray.__complex__
    "numpy.ndarray.__complex__") |  |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__complex__`](generated/numpy.ndarray.__complex__.html#numpy.ndarray.__complex__
    "numpy.ndarray.__complex__") |  |'
- en: 'String representations:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串表示：
- en: '| [`ndarray.__str__`](generated/numpy.ndarray.__str__.html#numpy.ndarray.__str__
    "numpy.ndarray.__str__")(/) | Return str(self). |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__str__`](generated/numpy.ndarray.__str__.html#numpy.ndarray.__str__
    "numpy.ndarray.__str__")(/) | 返回 str(self)。 |'
- en: '| [`ndarray.__repr__`](generated/numpy.ndarray.__repr__.html#numpy.ndarray.__repr__
    "numpy.ndarray.__repr__")(/) | Return repr(self). |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__repr__`](generated/numpy.ndarray.__repr__.html#numpy.ndarray.__repr__
    "numpy.ndarray.__repr__")(/) | 返回 repr(self)。 |'
- en: 'Utility method for typing:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数组的实用方法：
- en: '| [`ndarray.__class_getitem__`](generated/numpy.ndarray.__class_getitem__.html#numpy.ndarray.__class_getitem__
    "numpy.ndarray.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") type.
    |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.__class_getitem__`](generated/numpy.ndarray.__class_getitem__.html#numpy.ndarray.__class_getitem__
    "numpy.ndarray.__class_getitem__")(item, /) | 返回围绕[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")类型的参数化包装器。 |'
- en: Constructing arrays
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建数组
- en: 'New arrays can be constructed using the routines detailed in [Array creation
    routines](routines.array-creation.html#routines-array-creation), and also by using
    the low-level [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    constructor:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[数组创建例程](routines.array-creation.html#routines-array-creation)中详细描述的例程构建新数组，也可以使用低级别的[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")构造器：
- en: '| [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(shape[, dtype, buffer, offset, ...])
    | An array object represents a multidimensional, homogeneous array of fixed-size
    items. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")(shape[, dtype, buffer, offset, ...])
    | 数组对象表示具有固定大小项的多维同构数组。 |'
- en: '## Indexing arrays'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数组索引'
- en: Arrays can be indexed using an extended Python slicing syntax, `array[selection]`.
    Similar syntax is also used for accessing fields in a [structured data type](../glossary.html#term-structured-data-type).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用扩展的 Python 切片语法 `array[selection]` 对数组进行索引。类似的语法也用于访问[结构化数据类型](../glossary.html#term-structured-data-type)中的字段。
- en: See also
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Array Indexing](arrays.indexing.html#arrays-indexing).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组索引](arrays.indexing.html#arrays-indexing)。'
- en: '## Internal memory layout of an ndarray'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '## ndarray 的内部内存布局'
- en: An instance of class [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") consists of a contiguous one-dimensional segment of computer
    memory (owned by the array, or by some other object), combined with an indexing
    scheme that maps *N* integers into the location of an item in the block. The ranges
    in which the indices can vary is specified by the [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") of the array. How many bytes each item takes and how the
    bytes are interpreted is defined by the [data-type object](arrays.dtypes.html#arrays-dtypes)
    associated with the array.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") 类的一个实例由计算机内存中的一段连续的一维区段（由数组所拥有，或由其他对象拥有）以及将
    *N* 个整数映射到区块中条目位置的索引方案组成。索引范围由数组的 [`shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") 指定。每个条目占用多少字节以及这些字节如何解释由与数组关联的 [数据类型对象](arrays.dtypes.html#arrays-dtypes)
    定义。'
- en: 'A segment of memory is inherently 1-dimensional, and there are many different
    schemes for arranging the items of an *N*-dimensional array in a 1-dimensional
    block. NumPy is flexible, and [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects can accommodate any *strided indexing scheme*. In a strided
    scheme, the N-dimensional index \((n_0, n_1, ..., n_{N-1})\) corresponds to the
    offset (in bytes):'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 内存段本质上是一维的，有许多不同的方案可以将 *N* 维数组的条目排列在一维块中。NumPy 是灵活的，[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") 对象可以适应任何*跨步索引方案*。在跨步方案中，N 维索引 \((n_0, n_1, ..., n_{N-1})\) 对应于偏移量（以字节表示）：
- en: \[n_{\mathrm{offset}} = \sum_{k=0}^{N-1} s_k n_k\]
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: \[n_{\mathrm{偏移量}} = \sum_{k=0}^{N-1} s_k n_k\]
- en: 'from the beginning of the memory block associated with the array. Here, \(s_k\)
    are integers which specify the [`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") of the array. The [column-major](../glossary.html#term-column-major)
    order (used, for example, in the Fortran language and in *Matlab*) and [row-major](../glossary.html#term-row-major)
    order (used in C) schemes are just specific kinds of strided scheme, and correspond
    to memory that can be *addressed* by the strides:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 从与数组关联的内存块的起始位置开始计算。这里，\(s_k\) 是指定数组的 [`strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") 的整数。[列优先](../glossary.html#term-column-major)顺序（例如，在Fortran语言和*
    Matlab *中使用）和[行优先](../glossary.html#term-row-major)顺序（在C中使用）方案只是特定类型的跨步方案，并且对应于可以通过跨步*寻址*的内存：
- en: \[s_k^{\mathrm{column}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{row}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: \[s_k^{\mathrm{列}} = \mathrm{itemsize} \prod_{j=0}^{k-1} d_j , \quad s_k^{\mathrm{行}}
    = \mathrm{itemsize} \prod_{j=k+1}^{N-1} d_j .\]
- en: where \(d_j\) *= self.shape[j]*.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 \(d_j\) *= self.shape[j]*。
- en: Both the C and Fortran orders are [contiguous](../glossary.html#term-contiguous),
    *i.e.,* single-segment, memory layouts, in which every part of the memory block
    can be accessed by some combination of the indices.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: C 和 Fortran 顺序都是[连续](../glossary.html#term-contiguous)，即单一段，内存布局，其中内存块的每个部分都可以通过某种结合的索引访问。
- en: Note
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Contiguous arrays* and *single-segment arrays* are synonymous and are used
    interchangeably throughout the documentation.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*连续数组* 和 *单一段数组* 是同义词，文档中可以互换使用。'
- en: 'While a C-style and Fortran-style contiguous array, which has the corresponding
    flags set, can be addressed with the above strides, the actual strides may be
    different. This can happen in two cases:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 C 风格和 Fortran 风格的连续数组具有相应的标志设置，可以通过上述步幅进行寻址，但实际的步幅可能不同。这种情况可能发生在两种情况下：
- en: If `self.shape[k] == 1` then for any legal index `index[k] == 0`. This means
    that in the formula for the offset \(n_k = 0\) and thus \(s_k n_k = 0\) and the
    value of \(s_k\) *= self.strides[k]* is arbitrary.
  id: totrans-236
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `self.shape[k] == 1`，则对于任何合法索引 `index[k] == 0`。这意味着在偏移量的公式中 \(n_k = 0\)，因此
    \(s_k n_k = 0\)，而 \(s_k\) 的值 *= self.strides[k]* 是任意的。
- en: ''
  id: totrans-237
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-238
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If an array has no elements (`self.size == 0`) there is no legal index and the
    strides are never used. Any array with no elements may be considered C-style and
    Fortran-style contiguous.
  id: totrans-239
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个数组没有元素（`self.size == 0`），则没有合法的索引，步幅永远不会被使用。任何没有元素的数组都可以被认为是C风格和Fortran风格连续的。
- en: Point 1\. means that `self` and `self.squeeze()` always have the same contiguity
    and `aligned` flags value. This also means that even a high dimensional array
    could be C-style and Fortran-style contiguous at the same time.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 点1.表示`self`和`self.squeeze()`始终具有相同的连续性和`aligned`标志值。这也意味着即使是高维数组在同一时间也可以是C风格和Fortran风格连续的。
- en: An array is considered aligned if the memory offsets for all elements and the
    base offset itself is a multiple of *self.itemsize*. Understanding *memory-alignment*
    leads to better performance on most hardware.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有元素的内存偏移和基本偏移本身都是* self.itemsize*的倍数，那么数组被视为对齐。了解*内存对齐*可在大多数硬件上获得更好的性能。
- en: Warning
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: It does *not* generally hold that `self.strides[-1] == self.itemsize` for C-style
    contiguous arrays or `self.strides[0] == self.itemsize` for Fortran-style contiguous
    arrays is true.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，并不总是成立`self.strides[-1] == self.itemsize`对于C风格连续数组或`self.strides[0] ==
    self.itemsize`对于Fortran风格连续数组是正确的。
- en: '`NPY_RELAXED_STRIDES_DEBUG=1` can be used to help find errors when incorrectly
    relying on the strides in C-extension code (see below warning).'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`NPY_RELAXED_STRIDES_DEBUG=1`来帮助找到在C扩展代码中错误依赖步幅时的错误（见下面的警告）。
- en: Data in new [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is in the [row-major](../glossary.html#term-row-major) (C) order, unless otherwise
    specified, but, for example, [basic array slicing](arrays.indexing.html#arrays-indexing)
    often produces [views](../glossary.html#term-view) in a different scheme.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 新建的[`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")中的数据是按照[行主序](../glossary.html#term-row-major)（C）顺序排列，除非另有指定，但例如，[基本数组切片](arrays.indexing.html#arrays-indexing)通常会产生不同方案的[视图](../glossary.html#term-view)。
- en: Note
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Several algorithms in NumPy work on arbitrarily strided arrays. However, some
    algorithms require single-segment arrays. When an irregularly strided array is
    passed in to such algorithms, a copy is automatically made.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的几个算法适用于任意步幅的数组。然而，一些算法需要单一段数组。当一个不规则步幅的数组传递给这样的算法时，会自动进行复制。
- en: '## Array attributes'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数组属性'
- en: Array attributes reflect information that is intrinsic to the array itself.
    Generally, accessing an array through its attributes allows you to get and sometimes
    set intrinsic properties of the array without creating a new array. The exposed
    attributes are the core parts of an array and only some of them can be reset meaningfully
    without creating a new array. Information on each attribute is given below.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 数组属性反映了数组本身固有的信息。通常，通过其属性访问数组可以获取并有时设置数组的固有属性，而无需创建新的数组。公开的属性是数组的核心部分，其中只有一些属性可以在不创建新数组的情况下有意义地被重置。下面给出了每个属性的信息。
- en: Memory layout
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存布局
- en: 'The following attributes contain information about the memory layout of the
    array:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性包含有关数组内存布局的信息：
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | 关于数组内存布局的信息。 |'
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | 数组维度的元组。 |'
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | 遍历数组时在每个维度上移动的字节元组。 |'
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | 数组的维数。 |'
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | 指向数组数据开头的Python缓冲区对象。 |'
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | 数组中的元素个数。 |'
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | 每个数组元素的长度（字节）。 |'
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | 数组元素占用的总字节数。 |'
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | 如果内存来自其他对象，则为基本对象。 |'
- en: Data type
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: See also
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据类型对象](arrays.dtypes.html#arrays-dtypes)'
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组关联的数据类型对象可以在 [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") 属性中找到：
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | 数组元素的数据类型。 |'
- en: Other attributes
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他属性
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | 数组的转置视图。 |'
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | 数组的实部。 |'
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | 数组的虚部。 |'
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | 数组的一维迭代器。 |'
- en: '### Array interface'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数组接口'
- en: See also
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](arrays.interface.html#arrays-interface)。'
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | 数组接口的 Python 部分 |'
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | 数组接口的 C 部分 |'
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "（在
    Python v3.11 中）") 外部函数接口'
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | 用于简化数组与 ctypes 模块交互的对象。 |'
- en: Memory layout
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内存布局
- en: 'The following attributes contain information about the memory layout of the
    array:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性包含有关数组内存布局的信息：
- en: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | Information about the memory layout of the array. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flags`](generated/numpy.ndarray.flags.html#numpy.ndarray.flags
    "numpy.ndarray.flags") | 数组的内存布局信息。 |'
- en: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | Tuple of array dimensions. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.shape`](generated/numpy.ndarray.shape.html#numpy.ndarray.shape
    "numpy.ndarray.shape") | 数组维度的元组。 |'
- en: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | Tuple of bytes to step in each dimension when traversing
    an array. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.strides`](generated/numpy.ndarray.strides.html#numpy.ndarray.strides
    "numpy.ndarray.strides") | 对于遍历数组时在每个维度中移动的字节数元组。 |'
- en: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | Number of array dimensions. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ndim`](generated/numpy.ndarray.ndim.html#numpy.ndarray.ndim "numpy.ndarray.ndim")
    | 数组维度数。 |'
- en: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | Python buffer object pointing to the start of the array''s data. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.data`](generated/numpy.ndarray.data.html#numpy.ndarray.data "numpy.ndarray.data")
    | 指向数组数据起始位置的 Python 缓冲对象。 |'
- en: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | Number of elements in the array. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.size`](generated/numpy.ndarray.size.html#numpy.ndarray.size "numpy.ndarray.size")
    | 数组中的元素数。 |'
- en: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | Length of one array element in bytes. |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.itemsize`](generated/numpy.ndarray.itemsize.html#numpy.ndarray.itemsize
    "numpy.ndarray.itemsize") | 一个数组元素的长度（以字节为单位）。 |'
- en: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | Total bytes consumed by the elements of the array. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.nbytes`](generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes
    "numpy.ndarray.nbytes") | 数组元素消耗的总字节数。 |'
- en: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | Base object if memory is from some other object. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.base`](generated/numpy.ndarray.base.html#numpy.ndarray.base "numpy.ndarray.base")
    | 如果内存来自其他对象，则为基本对象。 |'
- en: Data type
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: See also
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Data type objects](arrays.dtypes.html#arrays-dtypes)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[数据类型对象](arrays.dtypes.html#arrays-dtypes)'
- en: 'The data type object associated with the array can be found in the [`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") attribute:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组关联的数据类型对象可以在[`dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype")属性中找到：
- en: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | Data-type of the array''s elements. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dtype`](generated/numpy.ndarray.dtype.html#numpy.ndarray.dtype
    "numpy.ndarray.dtype") | 数组元素的数据类型。 |'
- en: Other attributes
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他属性
- en: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | View of the transposed array. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.T`](generated/numpy.ndarray.T.html#numpy.ndarray.T "numpy.ndarray.T")
    | 转置数组的视图。 |'
- en: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | The real part of the array. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.real`](generated/numpy.ndarray.real.html#numpy.ndarray.real "numpy.ndarray.real")
    | 数组的实部。 |'
- en: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | The imaginary part of the array. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.imag`](generated/numpy.ndarray.imag.html#numpy.ndarray.imag "numpy.ndarray.imag")
    | 数组的虚部。 |'
- en: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | A 1-D iterator over the array. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.flat`](generated/numpy.ndarray.flat.html#numpy.ndarray.flat "numpy.ndarray.flat")
    | 数组上的1-D迭代器。 |'
- en: '### Array interface'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '### 数组接口'
- en: See also
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The array interface protocol](arrays.interface.html#arrays-interface).'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](arrays.interface.html#arrays-interface)。'
- en: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | Python-side of the array interface |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_interface__`](arrays.interface.html#object.__array_interface__
    "object.__array_interface__") | 数组接口的Python端 |'
- en: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | C-side of the array interface |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| [`__array_struct__`](arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    | 数组接口的C端 |'
- en: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(in
    Python v3.11)") foreign function interface'
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "(在Python
    v3.11中)") 外部函数接口'
- en: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | An object to simplify the interaction of the array with
    the ctypes module. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.ctypes`](generated/numpy.ndarray.ctypes.html#numpy.ndarray.ctypes
    "numpy.ndarray.ctypes") | 简化数组与ctypes模块交互的对象。 |'
- en: '## Array methods'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '## 数组方法'
- en: An [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") object
    has many methods which operate on or with the array in some fashion, typically
    returning an array result. These methods are briefly explained below. (Each method’s
    docstring has a more complete description.)
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")对象具有许多操作数组的方法，通常以某种方式返回数组结果。以下简要解释了这些方法（每个方法的文档字符串有更完整的描述）。
- en: 'For the following methods there are also corresponding functions in [`numpy`](index.html#module-numpy
    "numpy"): [`all`](generated/numpy.all.html#numpy.all "numpy.all"), [`any`](generated/numpy.any.html#numpy.any
    "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax "numpy.argmax"),
    [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"), [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition
    "numpy.argpartition"), [`argsort`](generated/numpy.argsort.html#numpy.argsort
    "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose "numpy.choose"),
    [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"), [`compress`](generated/numpy.compress.html#numpy.compress
    "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy "numpy.copy"),
    [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"), [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum
    "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal "numpy.diagonal"),
    [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"), [`max`](generated/numpy.amax.html#numpy.amax
    "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin
    "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero "numpy.nonzero"),
    [`partition`](generated/numpy.partition.html#numpy.partition "numpy.partition"),
    [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"), [`ptp`](generated/numpy.ptp.html#numpy.ptp
    "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel
    "numpy.ravel"), [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下面的方法，[`numpy`](index.html#module-numpy "numpy") 中也有对应的函数：[`all`](generated/numpy.all.html#numpy.all
    "numpy.all"), [`any`](generated/numpy.any.html#numpy.any "numpy.any"), [`argmax`](generated/numpy.argmax.html#numpy.argmax
    "numpy.argmax"), [`argmin`](generated/numpy.argmin.html#numpy.argmin "numpy.argmin"),
    [`argpartition`](generated/numpy.argpartition.html#numpy.argpartition "numpy.argpartition"),
    [`argsort`](generated/numpy.argsort.html#numpy.argsort "numpy.argsort"), [`choose`](generated/numpy.choose.html#numpy.choose
    "numpy.choose"), [`clip`](generated/numpy.clip.html#numpy.clip "numpy.clip"),
    [`compress`](generated/numpy.compress.html#numpy.compress "numpy.compress"), [`copy`](generated/numpy.copy.html#numpy.copy
    "numpy.copy"), [`cumprod`](generated/numpy.cumprod.html#numpy.cumprod "numpy.cumprod"),
    [`cumsum`](generated/numpy.cumsum.html#numpy.cumsum "numpy.cumsum"), [`diagonal`](generated/numpy.diagonal.html#numpy.diagonal
    "numpy.diagonal"), [`imag`](generated/numpy.imag.html#numpy.imag "numpy.imag"),
    [`max`](generated/numpy.amax.html#numpy.amax "numpy.amax"), [`mean`](generated/numpy.mean.html#numpy.mean
    "numpy.mean"), [`min`](generated/numpy.amin.html#numpy.amin "numpy.amin"), [`nonzero`](generated/numpy.nonzero.html#numpy.nonzero
    "numpy.nonzero"), [`partition`](generated/numpy.partition.html#numpy.partition
    "numpy.partition"), [`prod`](generated/numpy.prod.html#numpy.prod "numpy.prod"),
    [`ptp`](generated/numpy.ptp.html#numpy.ptp "numpy.ptp"), [`put`](generated/numpy.put.html#numpy.put
    "numpy.put"), [`ravel`](generated/numpy.ravel.html#numpy.ravel "numpy.ravel"),
    [`real`](generated/numpy.real.html#numpy.real "numpy.real"), [`repeat`](generated/numpy.repeat.html#numpy.repeat
    "numpy.repeat"), [`reshape`](generated/numpy.reshape.html#numpy.reshape "numpy.reshape"),
    [`round`](generated/numpy.around.html#numpy.around "numpy.around"), [`searchsorted`](generated/numpy.searchsorted.html#numpy.searchsorted
    "numpy.searchsorted"), [`sort`](generated/numpy.sort.html#numpy.sort "numpy.sort"),
    [`squeeze`](generated/numpy.squeeze.html#numpy.squeeze "numpy.squeeze"), [`std`](generated/numpy.std.html#numpy.std
    "numpy.std"), [`sum`](generated/numpy.sum.html#numpy.sum "numpy.sum"), [`swapaxes`](generated/numpy.swapaxes.html#numpy.swapaxes
    "numpy.swapaxes"), [`take`](generated/numpy.take.html#numpy.take "numpy.take"),
    [`trace`](generated/numpy.trace.html#numpy.trace "numpy.trace"), [`transpose`](generated/numpy.transpose.html#numpy.transpose
    "numpy.transpose"), [`var`](generated/numpy.var.html#numpy.var "numpy.var").
- en: Array conversion
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组转换
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | 复制数组的一个元素到标准的 Python 标量，并返回它。 |'
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | 把数组转换为一个有 `a.ndim` 层嵌套的 Python 标量列表。 |'
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | 将标量插入数组（如果可能，标量会被转换为数组的dtype）。'
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | *tobytes*的兼容别名，行为完全相同。'
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | 构造包含数组中原始数据字节的Python字节。'
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | 将数组写入文件为文本或二进制（默认）���'
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | 将数组的pickle存储到指定文件。'
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | 返回数组的pickle作为一个字符串。'
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | 将数组复制并转换为指定类型。'
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | 交换数组元素的字节。'
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | 返回数组的副本。'
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | 用相同数据创建数组的新视图。'
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | 以特定类型返回给定数组的字段。'
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | 设置数组标志，分别为WRITEABLE，ALIGNED，WRITEBACKIFCOPY。'
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | 用标量值填充数组。'
- en: Shape manipulation
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 形状操作
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 对于reshape，resize和transpose，单个元组参数可以由`n`个整数代替，这将被解释为n元组。
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | 返回包含相同数据且具有新形状的数组。'
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | 在原地改变数组的形状和大小。'
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | 返回数组的轴转置。'
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
- en: Calculation
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these methods take an argument named *axis*. In such cases,
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of the *axis* argument
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
- en: Array conversion
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '| [`ndarray.item`](generated/numpy.ndarray.item.html#numpy.ndarray.item "numpy.ndarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tolist`](generated/numpy.ndarray.tolist.html#numpy.ndarray.tolist
    "numpy.ndarray.tolist")() | Return the array as an `a.ndim`-levels deep nested
    list of Python scalars. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.itemset`](generated/numpy.ndarray.itemset.html#numpy.ndarray.itemset
    "numpy.ndarray.itemset")(*args) | Insert scalar into an array (scalar is cast
    to array''s dtype, if possible) |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tostring`](generated/numpy.ndarray.tostring.html#numpy.ndarray.tostring
    "numpy.ndarray.tostring")([order]) | A compatibility alias for *tobytes*, with
    exactly the same behavior. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tobytes`](generated/numpy.ndarray.tobytes.html#numpy.ndarray.tobytes
    "numpy.ndarray.tobytes")([order]) | Construct Python bytes containing the raw
    data bytes in the array. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.tofile`](generated/numpy.ndarray.tofile.html#numpy.ndarray.tofile
    "numpy.ndarray.tofile")(fid[, sep, format]) | Write array to a file as text or
    binary (default). |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dump`](generated/numpy.ndarray.dump.html#numpy.ndarray.dump "numpy.ndarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.dumps`](generated/numpy.ndarray.dumps.html#numpy.ndarray.dumps
    "numpy.ndarray.dumps")() | Returns the pickle of the array as a string. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.astype`](generated/numpy.ndarray.astype.html#numpy.ndarray.astype
    "numpy.ndarray.astype")(dtype[, order, casting, ...]) | Copy of the array, cast
    to a specified type. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.byteswap`](generated/numpy.ndarray.byteswap.html#numpy.ndarray.byteswap
    "numpy.ndarray.byteswap")([inplace]) | Swap the bytes of the array elements |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.copy`](generated/numpy.ndarray.copy.html#numpy.ndarray.copy "numpy.ndarray.copy")([order])
    | Return a copy of the array. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.view`](generated/numpy.ndarray.view.html#numpy.ndarray.view "numpy.ndarray.view")([dtype][, type])
    | New view of array with the same data. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.getfield`](generated/numpy.ndarray.getfield.html#numpy.ndarray.getfield
    "numpy.ndarray.getfield")(dtype[, offset]) | Returns a field of the given array
    as a certain type. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.setflags`](generated/numpy.ndarray.setflags.html#numpy.ndarray.setflags
    "numpy.ndarray.setflags")([write, align, uic]) | Set array flags WRITEABLE, ALIGNED,
    WRITEBACKIFCOPY, respectively. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.fill`](generated/numpy.ndarray.fill.html#numpy.ndarray.fill "numpy.ndarray.fill")(value)
    | Fill the array with a scalar value. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
- en: Shape manipulation
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reshape, resize, and transpose, the single tuple argument may be replaced
    with `n` integers which will be interpreted as an n-tuple.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.reshape`](generated/numpy.ndarray.reshape.html#numpy.ndarray.reshape
    "numpy.ndarray.reshape")(shape[, order]) | Returns an array containing the same
    data with a new shape. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.resize`](generated/numpy.ndarray.resize.html#numpy.ndarray.resize
    "numpy.ndarray.resize")(new_shape[, refcheck]) | Change shape and size of array
    in-place. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.transpose`](generated/numpy.ndarray.transpose.html#numpy.ndarray.transpose
    "numpy.ndarray.transpose")(*axes) | Returns a view of the array with axes transposed.
    |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.swapaxes`](generated/numpy.ndarray.swapaxes.html#numpy.ndarray.swapaxes
    "numpy.ndarray.swapaxes")(axis1, axis2) | Return a view of the array with *axis1*
    and *axis2* interchanged. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.flatten`](generated/numpy.ndarray.flatten.html#numpy.ndarray.flatten
    "numpy.ndarray.flatten")([order]) | Return a copy of the array collapsed into
    one dimension. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ravel`](generated/numpy.ndarray.ravel.html#numpy.ndarray.ravel
    "numpy.ndarray.ravel")([order]) | Return a flattened array. |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.squeeze`](generated/numpy.ndarray.squeeze.html#numpy.ndarray.squeeze
    "numpy.ndarray.squeeze")([axis]) | Remove axes of length one from *a*. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
- en: Item selection and manipulation
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For array methods that take an *axis* keyword, it defaults to *None*. If axis
    is *None*, then the array is treated as a 1-D array. Any other value for *axis*
    represents the dimension along which the operation should proceed.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.take`](generated/numpy.ndarray.take.html#numpy.ndarray.take "numpy.ndarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.put`](generated/numpy.ndarray.put.html#numpy.ndarray.put "numpy.ndarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.repeat`](generated/numpy.ndarray.repeat.html#numpy.ndarray.repeat
    "numpy.ndarray.repeat")(repeats[, axis]) | Repeat elements of an array. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.choose`](generated/numpy.ndarray.choose.html#numpy.ndarray.choose
    "numpy.ndarray.choose")(choices[, out, mode]) | Use an index array to construct
    a new array from a set of choices. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sort`](generated/numpy.ndarray.sort.html#numpy.ndarray.sort "numpy.ndarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argsort`](generated/numpy.ndarray.argsort.html#numpy.ndarray.argsort
    "numpy.ndarray.argsort")([axis, kind, order]) | Returns the indices that would
    sort this array. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.partition`](generated/numpy.ndarray.partition.html#numpy.ndarray.partition
    "numpy.ndarray.partition")(kth[, axis, kind, order]) | Rearranges the elements
    in the array in such a way that the value of the element in kth position is in
    the position it would be in a sorted array. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argpartition`](generated/numpy.ndarray.argpartition.html#numpy.ndarray.argpartition
    "numpy.ndarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.searchsorted`](generated/numpy.ndarray.searchsorted.html#numpy.ndarray.searchsorted
    "numpy.ndarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.nonzero`](generated/numpy.ndarray.nonzero.html#numpy.ndarray.nonzero
    "numpy.ndarray.nonzero")() | Return the indices of the elements that are non-zero.
    |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.compress`](generated/numpy.ndarray.compress.html#numpy.ndarray.compress
    "numpy.ndarray.compress")(condition[, axis, out]) | Return selected slices of
    this array along given axis. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.diagonal`](generated/numpy.ndarray.diagonal.html#numpy.ndarray.diagonal
    "numpy.ndarray.diagonal")([offset, axis1, axis2]) | Return specified diagonals.
    |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
- en: Calculation
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of these methods take an argument named *axis*. In such cases,
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: If *axis* is *None* (the default), the array is treated as a 1-D array and the
    operation is performed over the entire array. This behavior is also the default
    if self is a 0-dimensional array or array scalar. (An array scalar is an instance
    of the types/classes float32, float64, etc., whereas a 0-dimensional array is
    an ndarray instance containing precisely one array scalar.)
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *axis* is an integer, then the operation is done over the given axis (for
    each 1-D subarray that can be created along the given axis).
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of the *axis* argument
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: A 3-dimensional array of size 3 x 3 x 3, summed over each of its three axes
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The parameter *dtype* specifies the data type over which a reduction operation
    (like summing) should take place. The default reduce data type is the same as
    the data type of *self*. To avoid overflow, it can be useful to perform the reduction
    using a larger data type.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: For several methods, an optional *out* argument can also be provided and the
    result will be placed into the output array given. The *out* argument must be
    an [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") and
    have the same number of elements. It can have a different data type in which case
    casting will be performed.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.max`](generated/numpy.ndarray.max.html#numpy.ndarray.max "numpy.ndarray.max")([axis, out, keepdims, initial, ...])
    | Return the maximum along a given axis. |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmax`](generated/numpy.ndarray.argmax.html#numpy.ndarray.argmax
    "numpy.ndarray.argmax")([axis, out, keepdims]) | Return indices of the maximum
    values along the given axis. |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.min`](generated/numpy.ndarray.min.html#numpy.ndarray.min "numpy.ndarray.min")([axis, out, keepdims, initial, ...])
    | Return the minimum along a given axis. |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.argmin`](generated/numpy.ndarray.argmin.html#numpy.ndarray.argmin
    "numpy.ndarray.argmin")([axis, out, keepdims]) | Return indices of the minimum
    values along the given axis. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.ptp`](generated/numpy.ndarray.ptp.html#numpy.ndarray.ptp "numpy.ndarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.clip`](generated/numpy.ndarray.clip.html#numpy.ndarray.clip "numpy.ndarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.conj`](generated/numpy.ndarray.conj.html#numpy.ndarray.conj "numpy.ndarray.conj")()
    | Complex-conjugate all elements. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.round`](generated/numpy.ndarray.round.html#numpy.ndarray.round
    "numpy.ndarray.round")([decimals, out]) | Return *a* with each element rounded
    to the given number of decimals. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.trace`](generated/numpy.ndarray.trace.html#numpy.ndarray.trace
    "numpy.ndarray.trace")([offset, axis1, axis2, dtype, out]) | Return the sum along
    diagonals of the array. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.sum`](generated/numpy.ndarray.sum.html#numpy.ndarray.sum "numpy.ndarray.sum")([axis, dtype, out, keepdims, ...])
    | Return the sum of the array elements over the given axis. |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumsum`](generated/numpy.ndarray.cumsum.html#numpy.ndarray.cumsum
    "numpy.ndarray.cumsum")([axis, dtype, out]) | Return the cumulative sum of the
    elements along the given axis. |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.mean`](generated/numpy.ndarray.mean.html#numpy.ndarray.mean "numpy.ndarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.var`](generated/numpy.ndarray.var.html#numpy.ndarray.var "numpy.ndarray.var")([axis, dtype, out, ddof, ...])
    | Returns the variance of the array elements, along given axis. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.std`](generated/numpy.ndarray.std.html#numpy.ndarray.std "numpy.ndarray.std")([axis, dtype, out, ddof, ...])
    | Returns the standard deviation of the array elements along given axis. |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.prod`](generated/numpy.ndarray.prod.html#numpy.ndarray.prod "numpy.ndarray.prod")([axis, dtype, out, keepdims, ...])
    | Return the product of the array elements over the given axis |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.cumprod`](generated/numpy.ndarray.cumprod.html#numpy.ndarray.cumprod
    "numpy.ndarray.cumprod")([axis, dtype, out]) | Return the cumulative product of
    the elements along the given axis. |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.all`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.any`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
- en: Arithmetic, matrix multiplication, and comparison operations
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arithmetic and comparison operations on [`ndarrays`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") are defined as element-wise operations, and generally yield [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") objects as results.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Each of the arithmetic operations (`+`, `-`, `*`, `/`, `//`, `%`, `divmod()`,
    `**` or `pow()`, `<<`, `>>`, `&`, `^`, `|`, `~`) and the comparisons (`==`, `<`,
    `>`, `<=`, `>=`, `!=`) is equivalent to the corresponding universal function (or
    [ufunc](../glossary.html#term-ufunc) for short) in NumPy. For more information,
    see the section on [Universal Functions](ufuncs.html#ufuncs).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparison operators:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__lt__`](generated/numpy.ndarray.__lt__.html#numpy.ndarray.__lt__
    "numpy.ndarray.__lt__")(value, /) | Return self<value. |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__le__`](generated/numpy.ndarray.__le__.html#numpy.ndarray.__le__
    "numpy.ndarray.__le__")(value, /) | Return self<=value. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__gt__`](generated/numpy.ndarray.__gt__.html#numpy.ndarray.__gt__
    "numpy.ndarray.__gt__")(value, /) | Return self>value. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ge__`](generated/numpy.ndarray.__ge__.html#numpy.ndarray.__ge__
    "numpy.ndarray.__ge__")(value, /) | Return self>=value. |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__eq__`](generated/numpy.ndarray.__eq__.html#numpy.ndarray.__eq__
    "numpy.ndarray.__eq__")(value, /) | Return self==value. |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ne__`](generated/numpy.ndarray.__ne__.html#numpy.ndarray.__ne__
    "numpy.ndarray.__ne__")(value, /) | Return self!=value. |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
- en: 'Truth value of an array ([`bool()`](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.11)")):'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__")(/) | True if self else False |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Truth-value testing of an array invokes [`ndarray.__bool__`](generated/numpy.ndarray.__bool__.html#numpy.ndarray.__bool__
    "numpy.ndarray.__bool__"), which raises an error if the number of elements in
    the array is larger than 1, because the truth value of such arrays is ambiguous.
    Use [`.any()`](generated/numpy.ndarray.any.html#numpy.ndarray.any "numpy.ndarray.any")
    and [`.all()`](generated/numpy.ndarray.all.html#numpy.ndarray.all "numpy.ndarray.all")
    instead to be clear about what is meant in such cases. (If the number of elements
    is 0, the array evaluates to `False`.)
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'Unary operations:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__neg__`](generated/numpy.ndarray.__neg__.html#numpy.ndarray.__neg__
    "numpy.ndarray.__neg__")(/) | -self |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pos__`](generated/numpy.ndarray.__pos__.html#numpy.ndarray.__pos__
    "numpy.ndarray.__pos__")(/) | +self |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__abs__`](generated/numpy.ndarray.__abs__.html#numpy.ndarray.__abs__
    "numpy.ndarray.__abs__")(self) |  |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__invert__`](generated/numpy.ndarray.__invert__.html#numpy.ndarray.__invert__
    "numpy.ndarray.__invert__")(/) | ~self |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
- en: 'Arithmetic:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__add__`](generated/numpy.ndarray.__add__.html#numpy.ndarray.__add__
    "numpy.ndarray.__add__")(value, /) | Return self+value. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__sub__`](generated/numpy.ndarray.__sub__.html#numpy.ndarray.__sub__
    "numpy.ndarray.__sub__")(value, /) | Return self-value. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mul__`](generated/numpy.ndarray.__mul__.html#numpy.ndarray.__mul__
    "numpy.ndarray.__mul__")(value, /) | Return self*value. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__truediv__`](generated/numpy.ndarray.__truediv__.html#numpy.ndarray.__truediv__
    "numpy.ndarray.__truediv__")(value, /) | Return self/value. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__floordiv__`](generated/numpy.ndarray.__floordiv__.html#numpy.ndarray.__floordiv__
    "numpy.ndarray.__floordiv__")(value, /) | Return self//value. |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__mod__`](generated/numpy.ndarray.__mod__.html#numpy.ndarray.__mod__
    "numpy.ndarray.__mod__")(value, /) | Return self%value. |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__divmod__`](generated/numpy.ndarray.__divmod__.html#numpy.ndarray.__divmod__
    "numpy.ndarray.__divmod__")(value, /) | Return divmod(self, value). |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__pow__`](generated/numpy.ndarray.__pow__.html#numpy.ndarray.__pow__
    "numpy.ndarray.__pow__")(value[, mod]) | Return pow(self, value, mod). |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__lshift__`](generated/numpy.ndarray.__lshift__.html#numpy.ndarray.__lshift__
    "numpy.ndarray.__lshift__")(value, /) | Return self<<value. |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__rshift__`](generated/numpy.ndarray.__rshift__.html#numpy.ndarray.__rshift__
    "numpy.ndarray.__rshift__")(value, /) | Return self>>value. |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__and__`](generated/numpy.ndarray.__and__.html#numpy.ndarray.__and__
    "numpy.ndarray.__and__")(value, /) | Return self&value. |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__or__`](generated/numpy.ndarray.__or__.html#numpy.ndarray.__or__
    "numpy.ndarray.__or__")(value, /) | Return self&#124;value. |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__xor__`](generated/numpy.ndarray.__xor__.html#numpy.ndarray.__xor__
    "numpy.ndarray.__xor__")(value, /) | Return self^value. |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: Any third argument to [`pow`](https://docs.python.org/3/library/functions.html#pow
    "(in Python v3.11)") is silently ignored, as the underlying [`ufunc`](generated/numpy.power.html#numpy.power
    "numpy.power") takes only two arguments.
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    is a built-in type (written in C), the `__r{op}__` special methods are not directly
    defined.
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions called to implement many arithmetic special methods for arrays
    can be modified using [`__array_ufunc__`](arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__").
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arithmetic, in-place:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__iadd__`](generated/numpy.ndarray.__iadd__.html#numpy.ndarray.__iadd__
    "numpy.ndarray.__iadd__")(value, /) | Return self+=value. |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__isub__`](generated/numpy.ndarray.__isub__.html#numpy.ndarray.__isub__
    "numpy.ndarray.__isub__")(value, /) | Return self-=value. |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imul__`](generated/numpy.ndarray.__imul__.html#numpy.ndarray.__imul__
    "numpy.ndarray.__imul__")(value, /) | Return self*=value. |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__itruediv__`](generated/numpy.ndarray.__itruediv__.html#numpy.ndarray.__itruediv__
    "numpy.ndarray.__itruediv__")(value, /) | Return self/=value. |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ifloordiv__`](generated/numpy.ndarray.__ifloordiv__.html#numpy.ndarray.__ifloordiv__
    "numpy.ndarray.__ifloordiv__")(value, /) | Return self//=value. |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__imod__`](generated/numpy.ndarray.__imod__.html#numpy.ndarray.__imod__
    "numpy.ndarray.__imod__")(value, /) | Return self%=value. |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ipow__`](generated/numpy.ndarray.__ipow__.html#numpy.ndarray.__ipow__
    "numpy.ndarray.__ipow__")(value, /) | Return self**=value. |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ilshift__`](generated/numpy.ndarray.__ilshift__.html#numpy.ndarray.__ilshift__
    "numpy.ndarray.__ilshift__")(value, /) | Return self<<=value. |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__irshift__`](generated/numpy.ndarray.__irshift__.html#numpy.ndarray.__irshift__
    "numpy.ndarray.__irshift__")(value, /) | Return self>>=value. |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__iand__`](generated/numpy.ndarray.__iand__.html#numpy.ndarray.__iand__
    "numpy.ndarray.__iand__")(value, /) | Return self&=value. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ior__`](generated/numpy.ndarray.__ior__.html#numpy.ndarray.__ior__
    "numpy.ndarray.__ior__")(value, /) | Return self&#124;=value. |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__ixor__`](generated/numpy.ndarray.__ixor__.html#numpy.ndarray.__ixor__
    "numpy.ndarray.__ixor__")(value, /) | Return self^=value. |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
- en: Warning
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 'In place operations will perform the calculation using the precision decided
    by the data type of the two operands, but will silently downcast the result (if
    necessary) so it can fit back into the array. Therefore, for mixed precision calculations,
    `A {op}= B` can be different than `A = A {op} B`. For example, suppose `a = ones((3,3))`.
    Then, `a += 3j` is different than `a = a + 3j`: while they both perform the same
    computation, `a += 3` casts the result to fit back in `a`, whereas `a = a + 3j`
    re-binds the name `a` to the result.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: 'Matrix Multiplication:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__matmul__`](generated/numpy.ndarray.__matmul__.html#numpy.ndarray.__matmul__
    "numpy.ndarray.__matmul__")(value, /) | Return [self@value](/cdn-cgi/l/email-protection#0a796f666c2c29393d312c293f38312c293e32317c6b667f6f).
    |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Matrix operators `@` and `@=` were introduced in Python 3.5 following [**PEP
    465**](https://peps.python.org/pep-0465/), and the `@` operator has been introduced
    in NumPy 1.10.0\. Further information can be found in the [`matmul`](generated/numpy.matmul.html#numpy.matmul
    "numpy.matmul") documentation.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Special methods
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For standard library functions:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__copy__`](generated/numpy.ndarray.__copy__.html#numpy.ndarray.__copy__
    "numpy.ndarray.__copy__")() | Used if [`copy.copy`](https://docs.python.org/3/library/copy.html#copy.copy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__deepcopy__`](generated/numpy.ndarray.__deepcopy__.html#numpy.ndarray.__deepcopy__
    "numpy.ndarray.__deepcopy__")(memo, /) | Used if [`copy.deepcopy`](https://docs.python.org/3/library/copy.html#copy.deepcopy
    "(in Python v3.11)") is called on an array. |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__reduce__`](generated/numpy.ndarray.__reduce__.html#numpy.ndarray.__reduce__
    "numpy.ndarray.__reduce__")() | For pickling. |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setstate__`](generated/numpy.ndarray.__setstate__.html#numpy.ndarray.__setstate__
    "numpy.ndarray.__setstate__")(state, /) | For unpickling. |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
- en: 'Basic customization:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__new__`](generated/numpy.ndarray.__new__.html#numpy.ndarray.__new__
    "numpy.ndarray.__new__")(*args, **kwargs) |  |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array__`](generated/numpy.ndarray.__array__.html#numpy.ndarray.__array__
    "numpy.ndarray.__array__")([dtype], /) | Returns either a new reference to self
    if dtype is not given or a new array of provided data type if dtype is different
    from the current dtype of the array. |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__array_wrap__`](generated/numpy.ndarray.__array_wrap__.html#numpy.ndarray.__array_wrap__
    "numpy.ndarray.__array_wrap__")(array[, context], /) | Returns a view of [`array`](generated/numpy.array.html#numpy.array
    "numpy.array") with the same type as self. |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
- en: 'Container customization: (see [Indexing](arrays.indexing.html#arrays-indexing))'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__len__`](generated/numpy.ndarray.__len__.html#numpy.ndarray.__len__
    "numpy.ndarray.__len__")(/) | Return len(self). |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__getitem__`](generated/numpy.ndarray.__getitem__.html#numpy.ndarray.__getitem__
    "numpy.ndarray.__getitem__")(key, /) | Return self[key]. |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__setitem__`](generated/numpy.ndarray.__setitem__.html#numpy.ndarray.__setitem__
    "numpy.ndarray.__setitem__")(key, value, /) | Set self[key] to value. |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__contains__`](generated/numpy.ndarray.__contains__.html#numpy.ndarray.__contains__
    "numpy.ndarray.__contains__")(key, /) | Return key in self. |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
- en: Conversion; the operations [`int()`](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.11)"), [`float()`](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.11)") and [`complex()`](https://docs.python.org/3/library/functions.html#complex
    "(in Python v3.11)"). They work only on arrays that have one element in them and
    return the appropriate scalar.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__int__`](generated/numpy.ndarray.__int__.html#numpy.ndarray.__int__
    "numpy.ndarray.__int__")(self) |  |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__float__`](generated/numpy.ndarray.__float__.html#numpy.ndarray.__float__
    "numpy.ndarray.__float__")(self) |  |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__complex__`](generated/numpy.ndarray.__complex__.html#numpy.ndarray.__complex__
    "numpy.ndarray.__complex__") |  |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
- en: 'String representations:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__str__`](generated/numpy.ndarray.__str__.html#numpy.ndarray.__str__
    "numpy.ndarray.__str__")(/) | Return str(self). |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
- en: '| [`ndarray.__repr__`](generated/numpy.ndarray.__repr__.html#numpy.ndarray.__repr__
    "numpy.ndarray.__repr__")(/) | Return repr(self). |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
- en: 'Utility method for typing:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '| [`ndarray.__class_getitem__`](generated/numpy.ndarray.__class_getitem__.html#numpy.ndarray.__class_getitem__
    "numpy.ndarray.__class_getitem__")(item, /) | Return a parametrized wrapper around
    the [`ndarray`](generated/numpy.ndarray.html#numpy.ndarray "numpy.ndarray") type.
    |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
