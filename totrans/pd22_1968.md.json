["```py\n    In [1]: dfl = pd.DataFrame(np.random.randn(5, 2), columns=list('AB'))\n\n    In [2]: dfl\n    Out[2]: \n     A         B\n    0  0.469112 -0.282863\n    1 -1.509059 -1.135632\n    2  1.212112 -0.173215\n    3  0.119209 -1.044236\n    4 -0.861849 -2.104569\n\n    [5 rows x 2 columns]\n\n    In [3]: dfl.iloc[:, 2:3]\n    Out[3]: \n    Empty DataFrame\n    Columns: []\n    Index: [0, 1, 2, 3, 4]\n\n    [5 rows x 0 columns]\n\n    In [4]: dfl.iloc[:, 1:3]\n    Out[4]: \n     B\n    0 -0.282863\n    1 -1.135632\n    2 -0.173215\n    3 -1.044236\n    4 -2.104569\n\n    [5 rows x 1 columns]\n\n    In [5]: dfl.iloc[4:6]\n    Out[5]: \n     A         B\n    4 -0.861849 -2.104569\n\n    [1 rows x 2 columns] \n    ```", "```py\n    >>> dfl.iloc[[4, 5, 6]]\n    IndexError: positional indexers are out-of-bounds\n\n    >>> dfl.iloc[:, 4]\n    IndexError: single positional indexer is out-of-bounds \n    ```", "```py\n    In [6]: i = pd.Index([1, 2, 3, 'a', 'b', 'c'])\n\n    In [7]: i[[0, 1, 2]]\n    Out[7]: Index([1, 2, 3], dtype='object')\n\n    In [8]: i.drop(['a', 'b', 'c'])\n    Out[8]: Index([1, 2, 3], dtype='object') \n    ```", "```py\n    In [9]: i[[0, 1, 2]].astype(np.int_)\n    Out[9]: Index([1, 2, 3], dtype='int64') \n    ```", "```py\n    # Old behavior, casted MultiIndex to an Index\n    In [10]: tuple_ind\n    Out[10]: Index([('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd')], dtype='object')\n\n    In [11]: df_multi.set_index(tuple_ind)\n    Out[11]: \n     0         1\n    (a, c)  0.471435 -1.190976\n    (a, d)  1.432707 -0.312652\n    (b, c) -0.720589  0.887163\n    (b, d)  0.859588 -0.636524\n\n    [4 rows x 2 columns]\n\n    # New behavior\n    In [12]: mi\n    Out[12]: \n    MultiIndex([('a', 'c'),\n     ('a', 'd'),\n     ('b', 'c'),\n     ('b', 'd')],\n     )\n\n    In [13]: df_multi.set_index(mi)\n    Out[13]: \n     0         1\n    a c  0.471435 -1.190976\n     d  1.432707 -0.312652\n    b c -0.720589  0.887163\n     d  0.859588 -0.636524\n\n    [4 rows x 2 columns] \n    ```", "```py\n    # Old output, 2-level MultiIndex of tuples\n    In [14]: df_multi.set_index([df_multi.index, df_multi.index])\n    Out[14]: \n     0         1\n    (a, c) (a, c)  0.471435 -1.190976\n    (a, d) (a, d)  1.432707 -0.312652\n    (b, c) (b, c) -0.720589  0.887163\n    (b, d) (b, d)  0.859588 -0.636524\n\n    [4 rows x 2 columns]\n\n    # New output, 4-level MultiIndex\n    In [15]: df_multi.set_index([df_multi.index, df_multi.index])\n    Out[15]: \n     0         1\n    a c a c  0.471435 -1.190976\n     d a d  1.432707 -0.312652\n    b c b c -0.720589  0.887163\n     d b d  0.859588 -0.636524\n\n    [4 rows x 2 columns] \n    ```", "```py\n    In [1]: df = pd.DataFrame(np.random.randn(10, 4), columns=list('ABCD'))\n\n    In [4]: covs = pd.rolling_cov(df[['A', 'B', 'C']],\n     ....:                       df[['B', 'C', 'D']],\n     ....:                       5,\n     ....:                       pairwise=True)\n\n    In [5]: covs[df.index[-1]]\n    Out[5]:\n     B         C         D\n    A  0.035310  0.326593 -0.505430\n    B  0.137748 -0.006888 -0.005383\n    C -0.006888  0.861040  0.020762 \n    ```", "```py\n    >>> x = pd.Series(np.random.rand(10) > 0.5)\n    >>> y = True\n    >>> x + y  # warning generated: should do x | y instead\n    UserWarning: evaluating in Python space because the '+' operator is not\n    supported by numexpr for the bool dtype, use '|' instead\n    >>> x / y  # this raises because it doesn't make sense\n    NotImplementedError: operator '/' not implemented for bool dtypes \n    ```", "```py\n    In [16]: dfd = pd.DataFrame(np.arange(25).reshape(-1, 5),\n     ....:                   index=[0, 1, 2, 3, 4],\n     ....:                   columns=[0, 1, 2, 3, 4])\n     ....: \n\n    # show dimensions since this is truncated\n    In [17]: with pd.option_context('display.max_rows', 2, 'display.max_columns', 2,\n     ....:                       'display.show_dimensions', 'truncate'):\n     ....:    print(dfd)\n     ....: \n     0  ...   4\n    0    0  ...   4\n    ..  ..  ...  ..\n    4   20  ...  24\n\n    [5 rows x 5 columns]\n\n    # will not show dimensions since it is not truncated\n    In [18]: with pd.option_context('display.max_rows', 10, 'display.max_columns', 40,\n     ....:                       'display.show_dimensions', 'truncate'):\n     ....:    print(dfd)\n     ....: \n     0   1   2   3   4\n    0   0   1   2   3   4\n    1   5   6   7   8   9\n    2  10  11  12  13  14\n    3  15  16  17  18  19\n    4  20  21  22  23  24 \n    ```", "```py\n    In [1]: df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['A', 'B'])\n\n    In [2]: g = df.groupby('A')\n\n    In [3]: g.head(1)  # filters DataFrame\n    Out[3]:\n     A  B\n    0  1  2\n    2  5  6\n\n    In [4]: g.apply(lambda x: x.head(1))  # used to simply fall-through\n    Out[4]:\n     A  B\n    A\n    1 0  1  2\n    5 2  5  6 \n    ```", "```py\n    In [19]: g[['B']].head(1)\n    Out[19]:\n     B\n    0  2\n    2  6\n\n    [2 rows x 1 columns] \n    ```", "```py\n    In [19]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=['A', 'B'])\n\n    In [20]: g = df.groupby('A')\n\n    In [21]: g.nth(0)\n    Out[21]: \n     A    B\n    0  1  NaN\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    # this is equivalent to g.first()\n    In [22]: g.nth(0, dropna='any')\n    Out[22]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    # this is equivalent to g.last()\n    In [23]: g.nth(-1, dropna='any')\n    Out[23]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [24]: gf = df.groupby('A', as_index=False)\n\n    In [25]: gf.nth(0)\n    Out[25]: \n     A    B\n    0  1  NaN\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    In [26]: gf.nth(0, dropna='any')\n    Out[26]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [27]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6], [5, 8]], columns=['A', 'B'])\n\n    In [28]: g = df.groupby('A')\n\n    In [29]: g.count()\n    Out[29]: \n     B\n    A \n    1  1\n    5  2\n\n    [2 rows x 1 columns]\n\n    In [30]: g.describe()\n    Out[30]: \n     B \n     count mean       std  min  25%  50%  75%  max\n    A \n    1   1.0  4.0       NaN  4.0  4.0  4.0  4.0  4.0\n    5   2.0  7.0  1.414214  6.0  6.5  7.0  7.5  8.0\n\n    [2 rows x 8 columns] \n    ```", "```py\n    In [31]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6], [5, 8]], columns=['A', 'B'])\n\n    In [32]: g = df.groupby('A', as_index=False)\n\n    In [33]: g.count()\n    Out[33]: \n     A  B\n    0  1  1\n    1  5  2\n\n    [2 rows x 2 columns]\n\n    In [34]: g.describe()\n    Out[34]: \n     A     B \n     count mean       std  min  25%  50%  75%  max\n    0  1   1.0  4.0       NaN  4.0  4.0  4.0  4.0  4.0\n    1  5   2.0  7.0  1.414214  6.0  6.5  7.0  7.5  8.0\n\n    [2 rows x 9 columns] \n    ```", "```py\nIn [35]: from sqlalchemy import create_engine\n\n# Create your connection.\nIn [36]: engine = create_engine('sqlite:///:memory:') \n```", "```py\nIn [37]: df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'c']})\n\nIn [38]: df.to_sql(name='db_table', con=engine, index=False)\nOut[38]: 3 \n```", "```py\nIn [39]: pd.read_sql_table('db_table', engine)\nOut[39]: \n A  B\n0  1  a\n1  2  b\n2  3  c\n\n[3 rows x 2 columns] \n```", "```py\nIn [40]: pd.read_sql_query('SELECT * FROM db_table', engine)\nOut[40]: \n A  B\n0  1  a\n1  2  b\n2  3  c\n\n[3 rows x 2 columns] \n```", "```py\n >>> df.loc[(slice('A1', 'A3'), ...), :]  # noqa: E901\n\nrather than this: \n```", "```py\n>>> df.loc[(slice('A1', 'A3'), ...)]  # noqa: E901 \n```", "```py\nIn [41]: def mklbl(prefix, n):\n ....:    return [\"%s%s\" % (prefix, i) for i in range(n)]\n ....: \n\nIn [42]: index = pd.MultiIndex.from_product([mklbl('A', 4),\n ....:                                    mklbl('B', 2),\n ....:                                    mklbl('C', 4),\n ....:                                    mklbl('D', 2)])\n ....: \n\nIn [43]: columns = pd.MultiIndex.from_tuples([('a', 'foo'), ('a', 'bar'),\n ....:                                     ('b', 'foo'), ('b', 'bah')],\n ....:                                    names=['lvl0', 'lvl1'])\n ....: \n\nIn [44]: df = pd.DataFrame(np.arange(len(index) * len(columns)).reshape((len(index),\n ....:                  len(columns))),\n ....:                  index=index,\n ....:                  columns=columns).sort_index().sort_index(axis=1)\n ....: \n\nIn [45]: df\nOut[45]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C0 D0    1    0    3    2\n D1    5    4    7    6\n C1 D0    9    8   11   10\n D1   13   12   15   14\n C2 D0   17   16   19   18\n...          ...  ...  ...  ...\nA3 B1 C1 D1  237  236  239  238\n C2 D0  241  240  243  242\n D1  245  244  247  246\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[64 rows x 4 columns] \n```", "```py\nIn [46]: df.loc[(slice('A1', 'A3'), slice(None), ['C1', 'C3']), :]\nOut[46]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA1 B0 C1 D0   73   72   75   74\n D1   77   76   79   78\n C3 D0   89   88   91   90\n D1   93   92   95   94\n B1 C1 D0  105  104  107  106\n...          ...  ...  ...  ...\nA3 B0 C3 D1  221  220  223  222\n B1 C1 D0  233  232  235  234\n D1  237  236  239  238\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[24 rows x 4 columns] \n```", "```py\nIn [47]: idx = pd.IndexSlice\n\nIn [48]: df.loc[idx[:, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[48]: \nlvl0           a    b\nlvl1         foo  foo\nA0 B0 C1 D0    8   10\n D1   12   14\n C3 D0   24   26\n D1   28   30\n B1 C1 D0   40   42\n...          ...  ...\nA3 B0 C3 D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[32 rows x 2 columns] \n```", "```py\nIn [49]: df.loc['A1', (slice(None), 'foo')]\nOut[49]: \nlvl0        a    b\nlvl1      foo  foo\nB0 C0 D0   64   66\n D1   68   70\n C1 D0   72   74\n D1   76   78\n C2 D0   80   82\n...       ...  ...\nB1 C1 D1  108  110\n C2 D0  112  114\n D1  116  118\n C3 D0  120  122\n D1  124  126\n\n[16 rows x 2 columns]\n\nIn [50]: df.loc[idx[:, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[50]: \nlvl0           a    b\nlvl1         foo  foo\nA0 B0 C1 D0    8   10\n D1   12   14\n C3 D0   24   26\n D1   28   30\n B1 C1 D0   40   42\n...          ...  ...\nA3 B0 C3 D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[32 rows x 2 columns] \n```", "```py\nIn [51]: mask = df[('a', 'foo')] > 200\n\nIn [52]: df.loc[idx[mask, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[52]: \nlvl0           a    b\nlvl1         foo  foo\nA3 B0 C1 D1  204  206\n C3 D0  216  218\n D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[7 rows x 2 columns] \n```", "```py\nIn [53]: df.loc(axis=0)[:, :, ['C1', 'C3']]\nOut[53]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C1 D0    9    8   11   10\n D1   13   12   15   14\n C3 D0   25   24   27   26\n D1   29   28   31   30\n B1 C1 D0   41   40   43   42\n...          ...  ...  ...  ...\nA3 B0 C3 D1  221  220  223  222\n B1 C1 D0  233  232  235  234\n D1  237  236  239  238\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[32 rows x 4 columns] \n```", "```py\nIn [54]: df2 = df.copy()\n\nIn [55]: df2.loc(axis=0)[:, :, ['C1', 'C3']] = -10\n\nIn [56]: df2\nOut[56]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C0 D0    1    0    3    2\n D1    5    4    7    6\n C1 D0  -10  -10  -10  -10\n D1  -10  -10  -10  -10\n C2 D0   17   16   19   18\n...          ...  ...  ...  ...\nA3 B1 C1 D1  -10  -10  -10  -10\n C2 D0  241  240  243  242\n D1  245  244  247  246\n C3 D0  -10  -10  -10  -10\n D1  -10  -10  -10  -10\n\n[64 rows x 4 columns] \n```", "```py\nIn [57]: df2 = df.copy()\n\nIn [58]: df2.loc[idx[:, :, ['C1', 'C3']], :] = df2 * 1000\n\nIn [59]: df2\nOut[59]: \nlvl0              a               b \nlvl1            bar     foo     bah     foo\nA0 B0 C0 D0       1       0       3       2\n D1       5       4       7       6\n C1 D0    9000    8000   11000   10000\n D1   13000   12000   15000   14000\n C2 D0      17      16      19      18\n...             ...     ...     ...     ...\nA3 B1 C1 D1  237000  236000  239000  238000\n C2 D0     241     240     243     242\n D1     245     244     247     246\n C3 D0  249000  248000  251000  250000\n D1  253000  252000  255000  254000\n\n[64 rows x 4 columns] \n```", "```py\n    # non-floating point indexes can only be indexed by integers / labels\n    In [1]: pd.Series(1, np.arange(5))[3.0]\n     pandas/core/index.py:469: FutureWarning: scalar indexers for index type Int64Index should be integers and not floating point\n    Out[1]: 1\n\n    In [2]: pd.Series(1, np.arange(5)).iloc[3.0]\n     pandas/core/index.py:469: FutureWarning: scalar indexers for index type Int64Index should be integers and not floating point\n    Out[2]: 1\n\n    In [3]: pd.Series(1, np.arange(5)).iloc[3.0:4]\n     pandas/core/index.py:527: FutureWarning: slice indexers when using iloc should be integers and not floating point\n    Out[3]:\n     3    1\n     dtype: int64\n\n    # these are Float64Indexes, so integer or floating point is acceptable\n    In [4]: pd.Series(1, np.arange(5.))[3]\n    Out[4]: 1\n\n    In [5]: pd.Series(1, np.arange(5.))[3.0]\n    Out[6]: 1 \n    ```", "```py\n    In [60]: pd.Series({('a', 'b'): 1, ('a', 'a'): 0,\n     ....:           ('a', 'c'): 2, ('b', 'a'): 3, ('b', 'b'): 4})\n     ....: \n    Out[60]: \n    a  b    1\n     a    0\n     c    2\n    b  a    3\n     b    4\n    Length: 5, dtype: int64\n\n    In [61]: pd.DataFrame({('a', 'b'): {('A', 'B'): 1, ('A', 'C'): 2},\n     ....:             ('a', 'a'): {('A', 'C'): 3, ('A', 'B'): 4},\n     ....:             ('a', 'c'): {('A', 'B'): 5, ('A', 'C'): 6},\n     ....:             ('b', 'a'): {('A', 'C'): 7, ('A', 'B'): 8},\n     ....:             ('b', 'b'): {('A', 'D'): 9, ('A', 'B'): 10}})\n     ....: \n    Out[61]: \n     a              b \n     b    a    c    a     b\n    A B  1.0  4.0  5.0  8.0  10.0\n     C  2.0  3.0  6.0  7.0   NaN\n     D  NaN  NaN  NaN  NaN   9.0\n\n    [3 rows x 5 columns] \n    ```", "```py\n    In [62]: household = pd.DataFrame({'household_id': [1, 2, 3],\n     ....:                          'male': [0, 1, 0],\n     ....:                          'wealth': [196087.3, 316478.7, 294750]\n     ....:                          },\n     ....:                         columns=['household_id', 'male', 'wealth']\n     ....:                         ).set_index('household_id')\n     ....: \n\n    In [63]: household\n    Out[63]: \n     male    wealth\n    household_id \n    1                0  196087.3\n    2                1  316478.7\n    3                0  294750.0\n\n    [3 rows x 2 columns]\n\n    In [64]: portfolio = pd.DataFrame({'household_id': [1, 2, 2, 3, 3, 3, 4],\n     ....:                          'asset_id': [\"nl0000301109\",\n     ....:                                       \"nl0000289783\",\n     ....:                                       \"gb00b03mlx29\",\n     ....:                                       \"gb00b03mlx29\",\n     ....:                                       \"lu0197800237\",\n     ....:                                       \"nl0000289965\",\n     ....:                                       np.nan],\n     ....:                          'name': [\"ABN Amro\",\n     ....:                                   \"Robeco\",\n     ....:                                   \"Royal Dutch Shell\",\n     ....:                                   \"Royal Dutch Shell\",\n     ....:                                   \"AAB Eastern Europe Equity Fund\",\n     ....:                                   \"Postbank BioTech Fonds\",\n     ....:                                   np.nan],\n     ....:                          'share': [1.0, 0.4, 0.6, 0.15, 0.6, 0.25, 1.0]\n     ....:                          },\n     ....:                         columns=['household_id', 'asset_id', 'name', 'share']\n     ....:                         ).set_index(['household_id', 'asset_id'])\n     ....: \n\n    In [65]: portfolio\n    Out[65]: \n     name  share\n    household_id asset_id \n    1            nl0000301109                        ABN Amro   1.00\n    2            nl0000289783                          Robeco   0.40\n     gb00b03mlx29               Royal Dutch Shell   0.60\n    3            gb00b03mlx29               Royal Dutch Shell   0.15\n     lu0197800237  AAB Eastern Europe Equity Fund   0.60\n     nl0000289965          Postbank BioTech Fonds   0.25\n    4            NaN                                      NaN   1.00\n\n    [7 rows x 2 columns]\n\n    In [66]: household.join(portfolio, how='inner')\n    Out[66]: \n     male  ...  share\n    household_id asset_id            ... \n    1            nl0000301109     0  ...   1.00\n    2            nl0000289783     1  ...   0.40\n     gb00b03mlx29     1  ...   0.60\n    3            gb00b03mlx29     0  ...   0.15\n     lu0197800237     0  ...   0.60\n     nl0000289965     0  ...   0.25\n\n    [6 rows x 4 columns] \n    ```", "```py\n    In [67]: import datetime\n\n    In [68]: df = pd.DataFrame({\n     ....:    'Branch': 'A A A A A B'.split(),\n     ....:    'Buyer': 'Carl Mark Carl Carl Joe Joe'.split(),\n     ....:    'Quantity': [1, 3, 5, 1, 8, 1],\n     ....:    'Date': [datetime.datetime(2013, 11, 1, 13, 0),\n     ....:             datetime.datetime(2013, 9, 1, 13, 5),\n     ....:             datetime.datetime(2013, 10, 1, 20, 0),\n     ....:             datetime.datetime(2013, 10, 2, 10, 0),\n     ....:             datetime.datetime(2013, 11, 1, 20, 0),\n     ....:             datetime.datetime(2013, 10, 2, 10, 0)],\n     ....:    'PayDay': [datetime.datetime(2013, 10, 4, 0, 0),\n     ....:               datetime.datetime(2013, 10, 15, 13, 5),\n     ....:               datetime.datetime(2013, 9, 5, 20, 0),\n     ....:               datetime.datetime(2013, 11, 2, 10, 0),\n     ....:               datetime.datetime(2013, 10, 7, 20, 0),\n     ....:               datetime.datetime(2013, 9, 5, 10, 0)]})\n     ....: \n\n    In [69]: df\n    Out[69]: \n     Branch Buyer  Quantity                Date              PayDay\n    0      A  Carl         1 2013-11-01 13:00:00 2013-10-04 00:00:00\n    1      A  Mark         3 2013-09-01 13:05:00 2013-10-15 13:05:00\n    2      A  Carl         5 2013-10-01 20:00:00 2013-09-05 20:00:00\n    3      A  Carl         1 2013-10-02 10:00:00 2013-11-02 10:00:00\n    4      A   Joe         8 2013-11-01 20:00:00 2013-10-07 20:00:00\n    5      B   Joe         1 2013-10-02 10:00:00 2013-09-05 10:00:00\n\n    [6 rows x 5 columns] \n    ```", "```py\n    In [75]: df.pivot_table(values='Quantity',\n     ....:               index=pd.Grouper(freq='M', key='Date'),\n     ....:               columns=pd.Grouper(freq='M', key='PayDay'),\n     ....:               aggfunc=\"sum\")\n    Out[75]:\n    PayDay      2013-09-30  2013-10-31  2013-11-30\n    Date\n    2013-09-30         NaN         3.0         NaN\n    2013-10-31         6.0         NaN         1.0\n    2013-11-30         NaN         9.0         NaN\n\n    [3 rows x 3 columns] \n    ```", "```py\n    In [76]: prng = pd.period_range('2013-01-01 09:00', periods=100, freq='H')\n\n    In [77]: ps = pd.Series(np.random.randn(len(prng)), index=prng)\n\n    In [78]: ps\n    Out[78]:\n    2013-01-01 09:00    0.015696\n    2013-01-01 10:00   -2.242685\n    2013-01-01 11:00    1.150036\n    2013-01-01 12:00    0.991946\n    2013-01-01 13:00    0.953324\n     ...\n    2013-01-05 08:00    0.285296\n    2013-01-05 09:00    0.484288\n    2013-01-05 10:00    1.363482\n    2013-01-05 11:00   -0.781105\n    2013-01-05 12:00   -0.468018\n    Freq: H, Length: 100, dtype: float64\n\n    In [79]: ps['2013-01-02']\n    Out[79]:\n    2013-01-02 00:00    0.553439\n    2013-01-02 01:00    1.318152\n    2013-01-02 02:00   -0.469305\n    2013-01-02 03:00    0.675554\n    2013-01-02 04:00   -1.817027\n     ...\n    2013-01-02 19:00    0.036142\n    2013-01-02 20:00   -2.074978\n    2013-01-02 21:00    0.247792\n    2013-01-02 22:00   -0.897157\n    2013-01-02 23:00   -0.136795\n    Freq: H, Length: 24, dtype: float64 \n    ```", "```py\n    In [1]: dfl = pd.DataFrame(np.random.randn(5, 2), columns=list('AB'))\n\n    In [2]: dfl\n    Out[2]: \n     A         B\n    0  0.469112 -0.282863\n    1 -1.509059 -1.135632\n    2  1.212112 -0.173215\n    3  0.119209 -1.044236\n    4 -0.861849 -2.104569\n\n    [5 rows x 2 columns]\n\n    In [3]: dfl.iloc[:, 2:3]\n    Out[3]: \n    Empty DataFrame\n    Columns: []\n    Index: [0, 1, 2, 3, 4]\n\n    [5 rows x 0 columns]\n\n    In [4]: dfl.iloc[:, 1:3]\n    Out[4]: \n     B\n    0 -0.282863\n    1 -1.135632\n    2 -0.173215\n    3 -1.044236\n    4 -2.104569\n\n    [5 rows x 1 columns]\n\n    In [5]: dfl.iloc[4:6]\n    Out[5]: \n     A         B\n    4 -0.861849 -2.104569\n\n    [1 rows x 2 columns] \n    ```", "```py\n    >>> dfl.iloc[[4, 5, 6]]\n    IndexError: positional indexers are out-of-bounds\n\n    >>> dfl.iloc[:, 4]\n    IndexError: single positional indexer is out-of-bounds \n    ```", "```py\n    In [6]: i = pd.Index([1, 2, 3, 'a', 'b', 'c'])\n\n    In [7]: i[[0, 1, 2]]\n    Out[7]: Index([1, 2, 3], dtype='object')\n\n    In [8]: i.drop(['a', 'b', 'c'])\n    Out[8]: Index([1, 2, 3], dtype='object') \n    ```", "```py\n    In [9]: i[[0, 1, 2]].astype(np.int_)\n    Out[9]: Index([1, 2, 3], dtype='int64') \n    ```", "```py\n    # Old behavior, casted MultiIndex to an Index\n    In [10]: tuple_ind\n    Out[10]: Index([('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd')], dtype='object')\n\n    In [11]: df_multi.set_index(tuple_ind)\n    Out[11]: \n     0         1\n    (a, c)  0.471435 -1.190976\n    (a, d)  1.432707 -0.312652\n    (b, c) -0.720589  0.887163\n    (b, d)  0.859588 -0.636524\n\n    [4 rows x 2 columns]\n\n    # New behavior\n    In [12]: mi\n    Out[12]: \n    MultiIndex([('a', 'c'),\n     ('a', 'd'),\n     ('b', 'c'),\n     ('b', 'd')],\n     )\n\n    In [13]: df_multi.set_index(mi)\n    Out[13]: \n     0         1\n    a c  0.471435 -1.190976\n     d  1.432707 -0.312652\n    b c -0.720589  0.887163\n     d  0.859588 -0.636524\n\n    [4 rows x 2 columns] \n    ```", "```py\n    # Old output, 2-level MultiIndex of tuples\n    In [14]: df_multi.set_index([df_multi.index, df_multi.index])\n    Out[14]: \n     0         1\n    (a, c) (a, c)  0.471435 -1.190976\n    (a, d) (a, d)  1.432707 -0.312652\n    (b, c) (b, c) -0.720589  0.887163\n    (b, d) (b, d)  0.859588 -0.636524\n\n    [4 rows x 2 columns]\n\n    # New output, 4-level MultiIndex\n    In [15]: df_multi.set_index([df_multi.index, df_multi.index])\n    Out[15]: \n     0         1\n    a c a c  0.471435 -1.190976\n     d a d  1.432707 -0.312652\n    b c b c -0.720589  0.887163\n     d b d  0.859588 -0.636524\n\n    [4 rows x 2 columns] \n    ```", "```py\n    In [1]: df = pd.DataFrame(np.random.randn(10, 4), columns=list('ABCD'))\n\n    In [4]: covs = pd.rolling_cov(df[['A', 'B', 'C']],\n     ....:                       df[['B', 'C', 'D']],\n     ....:                       5,\n     ....:                       pairwise=True)\n\n    In [5]: covs[df.index[-1]]\n    Out[5]:\n     B         C         D\n    A  0.035310  0.326593 -0.505430\n    B  0.137748 -0.006888 -0.005383\n    C -0.006888  0.861040  0.020762 \n    ```", "```py\n    >>> x = pd.Series(np.random.rand(10) > 0.5)\n    >>> y = True\n    >>> x + y  # warning generated: should do x | y instead\n    UserWarning: evaluating in Python space because the '+' operator is not\n    supported by numexpr for the bool dtype, use '|' instead\n    >>> x / y  # this raises because it doesn't make sense\n    NotImplementedError: operator '/' not implemented for bool dtypes \n    ```", "```py\n    In [16]: dfd = pd.DataFrame(np.arange(25).reshape(-1, 5),\n     ....:                   index=[0, 1, 2, 3, 4],\n     ....:                   columns=[0, 1, 2, 3, 4])\n     ....: \n\n    # show dimensions since this is truncated\n    In [17]: with pd.option_context('display.max_rows', 2, 'display.max_columns', 2,\n     ....:                       'display.show_dimensions', 'truncate'):\n     ....:    print(dfd)\n     ....: \n     0  ...   4\n    0    0  ...   4\n    ..  ..  ...  ..\n    4   20  ...  24\n\n    [5 rows x 5 columns]\n\n    # will not show dimensions since it is not truncated\n    In [18]: with pd.option_context('display.max_rows', 10, 'display.max_columns', 40,\n     ....:                       'display.show_dimensions', 'truncate'):\n     ....:    print(dfd)\n     ....: \n     0   1   2   3   4\n    0   0   1   2   3   4\n    1   5   6   7   8   9\n    2  10  11  12  13  14\n    3  15  16  17  18  19\n    4  20  21  22  23  24 \n    ```", "```py\n    In [1]: df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['A', 'B'])\n\n    In [2]: g = df.groupby('A')\n\n    In [3]: g.head(1)  # filters DataFrame\n    Out[3]:\n     A  B\n    0  1  2\n    2  5  6\n\n    In [4]: g.apply(lambda x: x.head(1))  # used to simply fall-through\n    Out[4]:\n     A  B\n    A\n    1 0  1  2\n    5 2  5  6 \n    ```", "```py\n    In [19]: g[['B']].head(1)\n    Out[19]:\n     B\n    0  2\n    2  6\n\n    [2 rows x 1 columns] \n    ```", "```py\n    In [19]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=['A', 'B'])\n\n    In [20]: g = df.groupby('A')\n\n    In [21]: g.nth(0)\n    Out[21]: \n     A    B\n    0  1  NaN\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    # this is equivalent to g.first()\n    In [22]: g.nth(0, dropna='any')\n    Out[22]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    # this is equivalent to g.last()\n    In [23]: g.nth(-1, dropna='any')\n    Out[23]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [24]: gf = df.groupby('A', as_index=False)\n\n    In [25]: gf.nth(0)\n    Out[25]: \n     A    B\n    0  1  NaN\n    2  5  6.0\n\n    [2 rows x 2 columns]\n\n    In [26]: gf.nth(0, dropna='any')\n    Out[26]: \n     A    B\n    1  1  4.0\n    2  5  6.0\n\n    [2 rows x 2 columns] \n    ```", "```py\n    In [27]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6], [5, 8]], columns=['A', 'B'])\n\n    In [28]: g = df.groupby('A')\n\n    In [29]: g.count()\n    Out[29]: \n     B\n    A \n    1  1\n    5  2\n\n    [2 rows x 1 columns]\n\n    In [30]: g.describe()\n    Out[30]: \n     B \n     count mean       std  min  25%  50%  75%  max\n    A \n    1   1.0  4.0       NaN  4.0  4.0  4.0  4.0  4.0\n    5   2.0  7.0  1.414214  6.0  6.5  7.0  7.5  8.0\n\n    [2 rows x 8 columns] \n    ```", "```py\n    In [31]: df = pd.DataFrame([[1, np.nan], [1, 4], [5, 6], [5, 8]], columns=['A', 'B'])\n\n    In [32]: g = df.groupby('A', as_index=False)\n\n    In [33]: g.count()\n    Out[33]: \n     A  B\n    0  1  1\n    1  5  2\n\n    [2 rows x 2 columns]\n\n    In [34]: g.describe()\n    Out[34]: \n     A     B \n     count mean       std  min  25%  50%  75%  max\n    0  1   1.0  4.0       NaN  4.0  4.0  4.0  4.0  4.0\n    1  5   2.0  7.0  1.414214  6.0  6.5  7.0  7.5  8.0\n\n    [2 rows x 9 columns] \n    ```", "```py\nIn [35]: from sqlalchemy import create_engine\n\n# Create your connection.\nIn [36]: engine = create_engine('sqlite:///:memory:') \n```", "```py\nIn [37]: df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'c']})\n\nIn [38]: df.to_sql(name='db_table', con=engine, index=False)\nOut[38]: 3 \n```", "```py\nIn [39]: pd.read_sql_table('db_table', engine)\nOut[39]: \n A  B\n0  1  a\n1  2  b\n2  3  c\n\n[3 rows x 2 columns] \n```", "```py\nIn [40]: pd.read_sql_query('SELECT * FROM db_table', engine)\nOut[40]: \n A  B\n0  1  a\n1  2  b\n2  3  c\n\n[3 rows x 2 columns] \n```", "```py\n >>> df.loc[(slice('A1', 'A3'), ...), :]  # noqa: E901\n\nrather than this: \n```", "```py\n>>> df.loc[(slice('A1', 'A3'), ...)]  # noqa: E901 \n```", "```py\nIn [41]: def mklbl(prefix, n):\n ....:    return [\"%s%s\" % (prefix, i) for i in range(n)]\n ....: \n\nIn [42]: index = pd.MultiIndex.from_product([mklbl('A', 4),\n ....:                                    mklbl('B', 2),\n ....:                                    mklbl('C', 4),\n ....:                                    mklbl('D', 2)])\n ....: \n\nIn [43]: columns = pd.MultiIndex.from_tuples([('a', 'foo'), ('a', 'bar'),\n ....:                                     ('b', 'foo'), ('b', 'bah')],\n ....:                                    names=['lvl0', 'lvl1'])\n ....: \n\nIn [44]: df = pd.DataFrame(np.arange(len(index) * len(columns)).reshape((len(index),\n ....:                  len(columns))),\n ....:                  index=index,\n ....:                  columns=columns).sort_index().sort_index(axis=1)\n ....: \n\nIn [45]: df\nOut[45]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C0 D0    1    0    3    2\n D1    5    4    7    6\n C1 D0    9    8   11   10\n D1   13   12   15   14\n C2 D0   17   16   19   18\n...          ...  ...  ...  ...\nA3 B1 C1 D1  237  236  239  238\n C2 D0  241  240  243  242\n D1  245  244  247  246\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[64 rows x 4 columns] \n```", "```py\nIn [46]: df.loc[(slice('A1', 'A3'), slice(None), ['C1', 'C3']), :]\nOut[46]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA1 B0 C1 D0   73   72   75   74\n D1   77   76   79   78\n C3 D0   89   88   91   90\n D1   93   92   95   94\n B1 C1 D0  105  104  107  106\n...          ...  ...  ...  ...\nA3 B0 C3 D1  221  220  223  222\n B1 C1 D0  233  232  235  234\n D1  237  236  239  238\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[24 rows x 4 columns] \n```", "```py\nIn [47]: idx = pd.IndexSlice\n\nIn [48]: df.loc[idx[:, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[48]: \nlvl0           a    b\nlvl1         foo  foo\nA0 B0 C1 D0    8   10\n D1   12   14\n C3 D0   24   26\n D1   28   30\n B1 C1 D0   40   42\n...          ...  ...\nA3 B0 C3 D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[32 rows x 2 columns] \n```", "```py\nIn [49]: df.loc['A1', (slice(None), 'foo')]\nOut[49]: \nlvl0        a    b\nlvl1      foo  foo\nB0 C0 D0   64   66\n D1   68   70\n C1 D0   72   74\n D1   76   78\n C2 D0   80   82\n...       ...  ...\nB1 C1 D1  108  110\n C2 D0  112  114\n D1  116  118\n C3 D0  120  122\n D1  124  126\n\n[16 rows x 2 columns]\n\nIn [50]: df.loc[idx[:, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[50]: \nlvl0           a    b\nlvl1         foo  foo\nA0 B0 C1 D0    8   10\n D1   12   14\n C3 D0   24   26\n D1   28   30\n B1 C1 D0   40   42\n...          ...  ...\nA3 B0 C3 D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[32 rows x 2 columns] \n```", "```py\nIn [51]: mask = df[('a', 'foo')] > 200\n\nIn [52]: df.loc[idx[mask, :, ['C1', 'C3']], idx[:, 'foo']]\nOut[52]: \nlvl0           a    b\nlvl1         foo  foo\nA3 B0 C1 D1  204  206\n C3 D0  216  218\n D1  220  222\n B1 C1 D0  232  234\n D1  236  238\n C3 D0  248  250\n D1  252  254\n\n[7 rows x 2 columns] \n```", "```py\nIn [53]: df.loc(axis=0)[:, :, ['C1', 'C3']]\nOut[53]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C1 D0    9    8   11   10\n D1   13   12   15   14\n C3 D0   25   24   27   26\n D1   29   28   31   30\n B1 C1 D0   41   40   43   42\n...          ...  ...  ...  ...\nA3 B0 C3 D1  221  220  223  222\n B1 C1 D0  233  232  235  234\n D1  237  236  239  238\n C3 D0  249  248  251  250\n D1  253  252  255  254\n\n[32 rows x 4 columns] \n```", "```py\nIn [54]: df2 = df.copy()\n\nIn [55]: df2.loc(axis=0)[:, :, ['C1', 'C3']] = -10\n\nIn [56]: df2\nOut[56]: \nlvl0           a         b \nlvl1         bar  foo  bah  foo\nA0 B0 C0 D0    1    0    3    2\n D1    5    4    7    6\n C1 D0  -10  -10  -10  -10\n D1  -10  -10  -10  -10\n C2 D0   17   16   19   18\n...          ...  ...  ...  ...\nA3 B1 C1 D1  -10  -10  -10  -10\n C2 D0  241  240  243  242\n D1  245  244  247  246\n C3 D0  -10  -10  -10  -10\n D1  -10  -10  -10  -10\n\n[64 rows x 4 columns] \n```", "```py\nIn [57]: df2 = df.copy()\n\nIn [58]: df2.loc[idx[:, :, ['C1', 'C3']], :] = df2 * 1000\n\nIn [59]: df2\nOut[59]: \nlvl0              a               b \nlvl1            bar     foo     bah     foo\nA0 B0 C0 D0       1       0       3       2\n D1       5       4       7       6\n C1 D0    9000    8000   11000   10000\n D1   13000   12000   15000   14000\n C2 D0      17      16      19      18\n...             ...     ...     ...     ...\nA3 B1 C1 D1  237000  236000  239000  238000\n C2 D0     241     240     243     242\n D1     245     244     247     246\n C3 D0  249000  248000  251000  250000\n D1  253000  252000  255000  254000\n\n[64 rows x 4 columns] \n```", "```py\n    # non-floating point indexes can only be indexed by integers / labels\n    In [1]: pd.Series(1, np.arange(5))[3.0]\n     pandas/core/index.py:469: FutureWarning: scalar indexers for index type Int64Index should be integers and not floating point\n    Out[1]: 1\n\n    In [2]: pd.Series(1, np.arange(5)).iloc[3.0]\n     pandas/core/index.py:469: FutureWarning: scalar indexers for index type Int64Index should be integers and not floating point\n    Out[2]: 1\n\n    In [3]: pd.Series(1, np.arange(5)).iloc[3.0:4]\n     pandas/core/index.py:527: FutureWarning: slice indexers when using iloc should be integers and not floating point\n    Out[3]:\n     3    1\n     dtype: int64\n\n    # these are Float64Indexes, so integer or floating point is acceptable\n    In [4]: pd.Series(1, np.arange(5.))[3]\n    Out[4]: 1\n\n    In [5]: pd.Series(1, np.arange(5.))[3.0]\n    Out[6]: 1 \n    ```", "```py\n    In [60]: pd.Series({('a', 'b'): 1, ('a', 'a'): 0,\n     ....:           ('a', 'c'): 2, ('b', 'a'): 3, ('b', 'b'): 4})\n     ....: \n    Out[60]: \n    a  b    1\n     a    0\n     c    2\n    b  a    3\n     b    4\n    Length: 5, dtype: int64\n\n    In [61]: pd.DataFrame({('a', 'b'): {('A', 'B'): 1, ('A', 'C'): 2},\n     ....:             ('a', 'a'): {('A', 'C'): 3, ('A', 'B'): 4},\n     ....:             ('a', 'c'): {('A', 'B'): 5, ('A', 'C'): 6},\n     ....:             ('b', 'a'): {('A', 'C'): 7, ('A', 'B'): 8},\n     ....:             ('b', 'b'): {('A', 'D'): 9, ('A', 'B'): 10}})\n     ....: \n    Out[61]: \n     a              b \n     b    a    c    a     b\n    A B  1.0  4.0  5.0  8.0  10.0\n     C  2.0  3.0  6.0  7.0   NaN\n     D  NaN  NaN  NaN  NaN   9.0\n\n    [3 rows x 5 columns] \n    ```", "```py\n    In [62]: household = pd.DataFrame({'household_id': [1, 2, 3],\n     ....:                          'male': [0, 1, 0],\n     ....:                          'wealth': [196087.3, 316478.7, 294750]\n     ....:                          },\n     ....:                         columns=['household_id', 'male', 'wealth']\n     ....:                         ).set_index('household_id')\n     ....: \n\n    In [63]: household\n    Out[63]: \n     male    wealth\n    household_id \n    1                0  196087.3\n    2                1  316478.7\n    3                0  294750.0\n\n    [3 rows x 2 columns]\n\n    In [64]: portfolio = pd.DataFrame({'household_id': [1, 2, 2, 3, 3, 3, 4],\n     ....:                          'asset_id': [\"nl0000301109\",\n     ....:                                       \"nl0000289783\",\n     ....:                                       \"gb00b03mlx29\",\n     ....:                                       \"gb00b03mlx29\",\n     ....:                                       \"lu0197800237\",\n     ....:                                       \"nl0000289965\",\n     ....:                                       np.nan],\n     ....:                          'name': [\"ABN Amro\",\n     ....:                                   \"Robeco\",\n     ....:                                   \"Royal Dutch Shell\",\n     ....:                                   \"Royal Dutch Shell\",\n     ....:                                   \"AAB Eastern Europe Equity Fund\",\n     ....:                                   \"Postbank BioTech Fonds\",\n     ....:                                   np.nan],\n     ....:                          'share': [1.0, 0.4, 0.6, 0.15, 0.6, 0.25, 1.0]\n     ....:                          },\n     ....:                         columns=['household_id', 'asset_id', 'name', 'share']\n     ....:                         ).set_index(['household_id', 'asset_id'])\n     ....: \n\n    In [65]: portfolio\n    Out[65]: \n     name  share\n    household_id asset_id \n    1            nl0000301109                        ABN Amro   1.00\n    2            nl0000289783                          Robeco   0.40\n     gb00b03mlx29               Royal Dutch Shell   0.60\n    3            gb00b03mlx29               Royal Dutch Shell   0.15\n     lu0197800237  AAB Eastern Europe Equity Fund   0.60\n     nl0000289965          Postbank BioTech Fonds   0.25\n    4            NaN                                      NaN   1.00\n\n    [7 rows x 2 columns]\n\n    In [66]: household.join(portfolio, how='inner')\n    Out[66]: \n     male  ...  share\n    household_id asset_id            ... \n    1            nl0000301109     0  ...   1.00\n    2            nl0000289783     1  ...   0.40\n     gb00b03mlx29     1  ...   0.60\n    3            gb00b03mlx29     0  ...   0.15\n     lu0197800237     0  ...   0.60\n     nl0000289965     0  ...   0.25\n\n    [6 rows x 4 columns] \n    ```", "```py\n    In [67]: import datetime\n\n    In [68]: df = pd.DataFrame({\n     ....:    'Branch': 'A A A A A B'.split(),\n     ....:    'Buyer': 'Carl Mark Carl Carl Joe Joe'.split(),\n     ....:    'Quantity': [1, 3, 5, 1, 8, 1],\n     ....:    'Date': [datetime.datetime(2013, 11, 1, 13, 0),\n     ....:             datetime.datetime(2013, 9, 1, 13, 5),\n     ....:             datetime.datetime(2013, 10, 1, 20, 0),\n     ....:             datetime.datetime(2013, 10, 2, 10, 0),\n     ....:             datetime.datetime(2013, 11, 1, 20, 0),\n     ....:             datetime.datetime(2013, 10, 2, 10, 0)],\n     ....:    'PayDay': [datetime.datetime(2013, 10, 4, 0, 0),\n     ....:               datetime.datetime(2013, 10, 15, 13, 5),\n     ....:               datetime.datetime(2013, 9, 5, 20, 0),\n     ....:               datetime.datetime(2013, 11, 2, 10, 0),\n     ....:               datetime.datetime(2013, 10, 7, 20, 0),\n     ....:               datetime.datetime(2013, 9, 5, 10, 0)]})\n     ....: \n\n    In [69]: df\n    Out[69]: \n     Branch Buyer  Quantity                Date              PayDay\n    0      A  Carl         1 2013-11-01 13:00:00 2013-10-04 00:00:00\n    1      A  Mark         3 2013-09-01 13:05:00 2013-10-15 13:05:00\n    2      A  Carl         5 2013-10-01 20:00:00 2013-09-05 20:00:00\n    3      A  Carl         1 2013-10-02 10:00:00 2013-11-02 10:00:00\n    4      A   Joe         8 2013-11-01 20:00:00 2013-10-07 20:00:00\n    5      B   Joe         1 2013-10-02 10:00:00 2013-09-05 10:00:00\n\n    [6 rows x 5 columns] \n    ```", "```py\n    In [75]: df.pivot_table(values='Quantity',\n     ....:               index=pd.Grouper(freq='M', key='Date'),\n     ....:               columns=pd.Grouper(freq='M', key='PayDay'),\n     ....:               aggfunc=\"sum\")\n    Out[75]:\n    PayDay      2013-09-30  2013-10-31  2013-11-30\n    Date\n    2013-09-30         NaN         3.0         NaN\n    2013-10-31         6.0         NaN         1.0\n    2013-11-30         NaN         9.0         NaN\n\n    [3 rows x 3 columns] \n    ```", "```py\n    In [76]: prng = pd.period_range('2013-01-01 09:00', periods=100, freq='H')\n\n    In [77]: ps = pd.Series(np.random.randn(len(prng)), index=prng)\n\n    In [78]: ps\n    Out[78]:\n    2013-01-01 09:00    0.015696\n    2013-01-01 10:00   -2.242685\n    2013-01-01 11:00    1.150036\n    2013-01-01 12:00    0.991946\n    2013-01-01 13:00    0.953324\n     ...\n    2013-01-05 08:00    0.285296\n    2013-01-05 09:00    0.484288\n    2013-01-05 10:00    1.363482\n    2013-01-05 11:00   -0.781105\n    2013-01-05 12:00   -0.468018\n    Freq: H, Length: 100, dtype: float64\n\n    In [79]: ps['2013-01-02']\n    Out[79]:\n    2013-01-02 00:00    0.553439\n    2013-01-02 01:00    1.318152\n    2013-01-02 02:00   -0.469305\n    2013-01-02 03:00    0.675554\n    2013-01-02 04:00   -1.817027\n     ...\n    2013-01-02 19:00    0.036142\n    2013-01-02 20:00   -2.074978\n    2013-01-02 21:00    0.247792\n    2013-01-02 22:00   -0.897157\n    2013-01-02 23:00   -0.136795\n    Freq: H, Length: 24, dtype: float64 \n    ```"]