- en: Compressed Sparse Graph Routines (scipy.sparse.csgraph)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩稀疏图例程（scipy.sparse.csgraph）
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/csgraph.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/csgraph.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/tutorial/csgraph.html](https://docs.scipy.org/doc/scipy-1.12.0/tutorial/csgraph.html)
- en: 'Example: Word Ladders'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：单词阶梯
- en: 'A [Word Ladder](https://en.wikipedia.org/wiki/Word_ladder) is a word game invented
    by Lewis Carroll, in which players find paths between words by switching one letter
    at a time. For example, one can link “ape” and “man” in the following way:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[单词阶梯](https://zh.wikipedia.org/wiki/Word_ladder)是由刘易斯·卡罗尔发明的一种文字游戏，玩家通过逐个改变一个字母来找出单词之间的路径。例如，可以这样连接“ape”和“man”：'
- en: \[{\rm ape \to apt \to ait \to bit \to big \to bag \to mag \to man}\]
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: \[{\rm ape \to apt \to ait \to bit \to big \to bag \to mag \to man}\]
- en: Note that each step involves changing just one letter of the word. This is just
    one possible path from “ape” to “man”, but is it the shortest possible path? If
    we desire to find the shortest word-ladder path between two given words, the sparse
    graph submodule can help.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每一步都涉及更改单词中的一个字母。这只是从“ape”到“man”的一条可能路径，但是否是最短路径呢？如果我们希望找到两个给定单词之间的最短单词阶梯路径，稀疏图子模块可以帮助。
- en: 'First, we need a list of valid words. Many operating systems have such a list
    built in. For example, on linux, a word list can often be found at one of the
    following locations:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个有效单词的列表。许多操作系统都内置了这样的列表。例如，在Linux上，可以在以下位置之一找到单词列表：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another easy source for words are the Scrabble word lists available at various
    sites around the internet (search with your favorite search engine). We’ll first
    create this list. The system word lists consist of a file with one word per line.
    The following should be modified to use the particular word list you have available:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个获取单词的简单来源是各种互联网上的Scrabble单词列表（使用您喜爱的搜索引擎进行搜索）。我们首先要创建这个列表。系统单词列表由一个每行一个单词的文件组成。以下内容应修改以使用您现有的单词列表：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We want to look at words of length 3, so let’s select just those words of the
    correct length. We’ll also eliminate words which start with upper-case (proper
    nouns) or contain non-alphanumeric characters, like apostrophes and hyphens. Finally,
    we’ll make sure everything is lower-case for comparison later:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要查看长度为3的单词，所以让我们只选择正确长度的单词。我们还将消除以大写字母开头（专有名词）或包含非字母数字字符（如撇号和连字符）的单词。最后，我们会确保为后续比较转换为小写：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we have a list of 586 valid three-letter words (the exact number may change
    depending on the particular list used). Each of these words will become a node
    in our graph, and we will create edges connecting the nodes associated with each
    pair of words which differs by only one letter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个包含586个有效的三个字母单词的列表（具体数字可能根据特定列表而变化）。这些单词中的每一个将成为我们图中的一个节点，并且我们将创建连接每对仅相差一个字母的单词节点的边。
- en: 'There are efficient ways to do this, and inefficient ways to do this. To do
    this as efficiently as possible, we’re going to use some sophisticated numpy array
    manipulation:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有有效的方法来做到这一点，也有低效的方法。为了尽可能高效地完成这个任务，我们将使用一些复杂的numpy数组操作：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have an array where each entry is three unicode characters long. We’d like
    to find all pairs where exactly one character is different. We’ll start by converting
    each word to a 3-D vector:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个数组，其中每个条目都是三个Unicode字符长。我们希望找到所有只有一个字符不同的配对。我们将从将每个单词转换为三维向量开始：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we’ll use the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance)
    between each point to determine which pairs of words are connected. The Hamming
    distance measures the fraction of entries between two vectors which differ: any
    two words with a Hamming distance equal to \(1/N\), where \(N\) is the number
    of letters, are connected in the word ladder:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用[汉明距离](https://zh.wikipedia.org/wiki/汉明距离)来确定哪些单词对之间存在连接。汉明距离衡量两个向量之间不同条目的比例：任何两个汉明距离等于\(1/N\)的单词，其中\(N\)是字母数，将在单词阶梯中连接起来：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When comparing the distances, we don’t use an equality because this can be
    unstable for floating point values. The inequality produces the desired result,
    as long as no two entries of the word list are identical. Now, that our graph
    is set up, we’ll use a shortest path search to find the path between any two words
    in the graph:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较距离时，我们不使用相等性，因为这对于浮点值来说可能不稳定。不等式产生了期望的结果，只要单词列表中没有两个条目完全相同。现在，我们的图已经设置好了，我们将使用最短路径搜索来找到图中任意两个单词之间的路径：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We need to check that these match, because if the words are not in the list,
    that will not be the case. Now, all we need is to find the shortest path between
    these two indices in the graph. We’ll use [Dijkstra’s algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm),
    because it allows us to find the path for just one node:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要检查这些是否匹配，因为如果单词不在列表中，情况就不同。现在，我们只需要找到图中这两个索引之间的最短路径。我们将使用[Dijkstra算法](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)，因为它允许我们仅为一个节点找到路径：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So we see that the shortest path between “ape” and “man” contains only five
    steps. We can use the predecessors returned by the algorithm to reconstruct this
    path:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到“猿”和“人”之间的最短路径只包含五步。我们可以使用算法返回的前导来重构这条路径：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is three fewer links than our initial example: the path from “ape” to
    “man” is only five steps.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 比我们最初的例子少了三个链接：从“猿”到“人”的路径只有五步。
- en: 'Using other tools in the module, we can answer other questions. For example,
    are there three-letter words which are not linked in a word ladder? This is a
    question of connected components in the graph:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块中的其他工具，我们可以回答其他问题。例如，有没有在单词梯子中没有链接的三个字母单词？这是关于图中连通分量的一个问题：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this particular sample of three-letter words, there are 15 connected components:
    that is, 15 distinct sets of words with no paths between the sets. How many words
    are there in each of these sets? We can learn this from the list of components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的三个字母单词样本中，有15个连通分量：即，有15个不同的单词集合，这些集合之间没有路径。每个集合中有多少个单词？我们可以从连通分量的列表中学到这些信息：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is one large connected set and 14 smaller ones. Let’s look at the words
    in the smaller ones:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个大的连通集和14个较小的连通集。让我们来看看较小连通集中的单词：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These are all the three-letter words which do not connect to others via a word
    ladder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是不通过单词梯子与其他单词连接的三个字母单词。
- en: 'We might also be curious about which words are maximally separated. Which two
    words take the most links to connect? We can determine this by computing the matrix
    of all shortest paths. Note that, by convention, the distance between two non-connected
    points is reported to be infinity, so we’ll need to remove these before finding
    the maximum:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还对哪些单词之间的分离最大感到好奇。哪两个单词需要最多的链接才能连接起来？我们可以通过计算所有最短路径的矩阵来确定这一点。请注意，按照惯例，两个非连接点之间的距离被报告为无穷大，因此在找到最大值之前我们需要将这些移除：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, there is at least one pair of words which takes 13 steps to get from one
    to the other! Let’s determine which these are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，至少有一对单词需要13步才能从一个单词到另一个单词！让我们确定这些是哪些：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We see that there are two pairs of words which are maximally separated from
    each other: ‘imp’ and ‘ump’ on the one hand, and ‘ohm’ and ‘ohs’ on the other.
    We can find the connecting list in the same way as above:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有两对单词彼此之间的最大分离：一方面是‘imp’和‘ump’，另一方面是‘ohm’和‘ohs’。我们可以以与上述相同的方式找到连接列表：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This gives us the path we desired to see.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们展示了我们所期望看到的路径。
- en: Word ladders are just one potential application of scipy’s fast graph algorithms
    for sparse matrices. Graph theory makes appearances in many areas of mathematics,
    data analysis, and machine learning. The sparse graph tools are flexible enough
    to handle many of these situations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单词梯子只是scipy稀疏矩阵快速图算法的一个潜在应用。图论在数学、数据分析和机器学习的许多领域中都有出现。稀疏图工具足够灵活，可以处理许多这些情况。
