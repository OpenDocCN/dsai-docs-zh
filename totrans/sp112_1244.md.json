["```py\nscipy.stats.nchypergeom_wallenius = <scipy.stats._discrete_distns.nchypergeom_wallenius_gen object>\n```", "```py\n>>> import numpy as np\n>>> from scipy.stats import nchypergeom_wallenius\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 1) \n```", "```py\n>>> M, n, N, odds = 140, 80, 60, 0.5\n>>> mean, var, skew, kurt = nchypergeom_wallenius.stats(M, n, N, odds, moments='mvsk') \n```", "```py\n>>> x = np.arange(nchypergeom_wallenius.ppf(0.01, M, n, N, odds),\n...               nchypergeom_wallenius.ppf(0.99, M, n, N, odds))\n>>> ax.plot(x, nchypergeom_wallenius.pmf(x, M, n, N, odds), 'bo', ms=8, label='nchypergeom_wallenius pmf')\n>>> ax.vlines(x, 0, nchypergeom_wallenius.pmf(x, M, n, N, odds), colors='b', lw=5, alpha=0.5) \n```", "```py\n>>> rv = nchypergeom_wallenius(M, n, N, odds)\n>>> ax.vlines(x, 0, rv.pmf(x), colors='k', linestyles='-', lw=1,\n...         label='frozen pmf')\n>>> ax.legend(loc='best', frameon=False)\n>>> plt.show() \n```", "```py\n>>> prob = nchypergeom_wallenius.cdf(x, M, n, N, odds)\n>>> np.allclose(x, nchypergeom_wallenius.ppf(prob, M, n, N, odds))\nTrue \n```", "```py\n>>> r = nchypergeom_wallenius.rvs(M, n, N, odds, size=1000) \n```"]