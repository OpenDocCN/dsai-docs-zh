["```py\nscipy.stats.skewtest(a, axis=0, nan_policy='propagate', alternative='two-sided')\n```", "```py\n>>> import numpy as np\n>>> x = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236]) \n```", "```py\n>>> from scipy import stats\n>>> res = stats.skewtest(x)\n>>> res.statistic\n2.7788579769903414 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> dist = stats.norm()\n>>> st_val = np.linspace(-5, 5, 100)\n>>> pdf = dist.pdf(st_val)\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> def st_plot(ax):  # we'll reuse this\n...     ax.plot(st_val, pdf)\n...     ax.set_title(\"Skew Test Null Distribution\")\n...     ax.set_xlabel(\"statistic\")\n...     ax.set_ylabel(\"probability density\")\n>>> st_plot(ax)\n>>> plt.show() \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> st_plot(ax)\n>>> pvalue = dist.cdf(-res.statistic) + dist.sf(res.statistic)\n>>> annotation = (f'p-value={pvalue:.3f}\\n(shaded area)')\n>>> props = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n>>> _ = ax.annotate(annotation, (3, 0.005), (3.25, 0.02), arrowprops=props)\n>>> i = st_val >= res.statistic\n>>> ax.fill_between(st_val[i], y1=0, y2=pdf[i], color='C0')\n>>> i = st_val <= -res.statistic\n>>> ax.fill_between(st_val[i], y1=0, y2=pdf[i], color='C0')\n>>> ax.set_xlim(-5, 5)\n>>> ax.set_ylim(0, 0.1)\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.005455036974740185 \n```", "```py\n>>> def statistic(x, axis):\n...     # get just the skewtest statistic; ignore the p-value\n...     return stats.skewtest(x, axis=axis).statistic\n>>> res = stats.monte_carlo_test(x, stats.norm.rvs, statistic)\n>>> fig, ax = plt.subplots(figsize=(8, 5))\n>>> st_plot(ax)\n>>> ax.hist(res.null_distribution, np.linspace(-5, 5, 50),\n...         density=True)\n>>> ax.legend(['aymptotic approximation\\n(many observations)',\n...            'Monte Carlo approximation\\n(11 observations)'])\n>>> plt.show() \n```", "```py\n>>> res.pvalue\n0.0062  # may vary \n```"]