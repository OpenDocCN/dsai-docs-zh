- en: Oriented Bounding Boxes Object Detection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定向边界框目标检测
- en: 原文：[`docs.ultralytics.com/tasks/obb/`](https://docs.ultralytics.com/tasks/obb/)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`docs.ultralytics.com/tasks/obb/`](https://docs.ultralytics.com/tasks/obb/)
- en: Oriented object detection goes a step further than object detection and introduce
    an extra angle to locate objects more accurate in an image.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 定向目标检测比普通目标检测更进一步，引入额外的角度以在图像中更准确地定位对象。
- en: The output of an oriented object detector is a set of rotated bounding boxes
    that exactly enclose the objects in the image, along with class labels and confidence
    scores for each box. Object detection is a good choice when you need to identify
    objects of interest in a scene, but don't need to know exactly where the object
    is or its exact shape.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 定向目标检测器的输出是一组旋转的边界框，精确包围图像中的对象，并附带每个框的类别标签和置信度分数。当您需要识别场景中感兴趣的对象但不需要精确知道对象在哪里或其精确形状时，目标检测是一个不错的选择。
- en: Tip
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: YOLOv8 OBB models use the `-obb` suffix, i.e. `yolov8n-obb.pt` and are pretrained
    on [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8 OBB 模型使用 `-obb` 后缀，例如 `yolov8n-obb.pt` 并在[DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    数据集上预训练。
- en: '|'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[`www.youtube.com/embed/Z7Z9pHF8wJc`](https://www.youtube.com/embed/Z7Z9pHF8wJc)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/Z7Z9pHF8wJc`](https://www.youtube.com/embed/Z7Z9pHF8wJc)'
- en: '**Watch:** Object Detection using Ultralytics YOLOv8 Oriented Bounding Boxes
    (YOLOv8-OBB) |'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** 使用Ultralytics YOLOv8 定向边界框（YOLOv8-OBB）进行目标检测 |'
- en: '[`www.youtube.com/embed/uZ7SymQfqKI`](https://www.youtube.com/embed/uZ7SymQfqKI)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`www.youtube.com/embed/uZ7SymQfqKI`](https://www.youtube.com/embed/uZ7SymQfqKI)'
- en: '**Watch:** Object Detection with YOLOv8-OBB using Ultralytics HUB |'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**观看：** 使用Ultralytics HUB 的YOLOv8-OBB 进行目标检测 |'
- en: Visual Samples
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视觉样本
- en: '| Ships Detection using OBB | Vehicle Detection using OBB |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 使用OBB 进行船只检测 | 使用OBB 进行车辆检测 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Ships Detection using OBB](img/9746d59315102b8321668f12dc976c22.png) |
    ![Vehicle Detection using OBB](img/afa9d27b5f1ea8d233f8d5945949d05c.png) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| ![使用OBB 进行船只检测](img/9746d59315102b8321668f12dc976c22.png) | ![使用OBB 进行车辆检测](img/afa9d27b5f1ea8d233f8d5945949d05c.png)
    |'
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models/v8)'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[模型](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models/v8)'
- en: YOLOv8 pretrained OBB models are shown here, which are pretrained on the [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    dataset.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8 预训练的OBB 模型显示在此处，这些模型是在[DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    数据集上预训练的。
- en: '[Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models)
    download automatically from the latest Ultralytics [release](https://github.com/ultralytics/assets/releases)
    on first use.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[模型](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/cfg/models)在首次使用时会自动从最新的Ultralytics
    [发布版](https://github.com/ultralytics/assets/releases)下载。'
- en: '| Model | size ^((pixels)) | mAP^(test 50) | Speed ^(CPU ONNX'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '| 模型 | 尺寸 ^((像素)) | mAP^(测试 50) | 速度 ^(CPU ONNX'
- en: (ms)) | Speed ^(A100 TensorRT
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: (ms)) | 速度 ^(A100 TensorRT
- en: (ms)) | params ^((M)) | FLOPs ^((B)) |
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: (ms)) | 参数 ^((M)) | FLOPs ^((B)) |
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| [YOLOv8n-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-obb.pt)
    | 1024 | 78.0 | 204.77 | 3.57 | 3.1 | 23.3 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8n-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8n-obb.pt)
    | 1024 | 78.0 | 204.77 | 3.57 | 3.1 | 23.3 |'
- en: '| [YOLOv8s-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-obb.pt)
    | 1024 | 79.5 | 424.88 | 4.07 | 11.4 | 76.3 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8s-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8s-obb.pt)
    | 1024 | 79.5 | 424.88 | 4.07 | 11.4 | 76.3 |'
- en: '| [YOLOv8m-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-obb.pt)
    | 1024 | 80.5 | 763.48 | 7.61 | 26.4 | 208.6 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8m-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8m-obb.pt)
    | 1024 | 80.5 | 763.48 | 7.61 | 26.4 | 208.6 |'
- en: '| [YOLOv8l-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-obb.pt)
    | 1024 | 80.7 | 1278.42 | 11.83 | 44.5 | 433.8 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8l-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8l-obb.pt)
    | 1024 | 80.7 | 1278.42 | 11.83 | 44.5 | 433.8 |'
- en: '| [YOLOv8x-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-obb.pt)
    | 1024 | 81.36 | 1759.10 | 13.23 | 69.5 | 676.7 |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [YOLOv8x-obb](https://github.com/ultralytics/assets/releases/download/v8.2.0/yolov8x-obb.pt)
    | 1024 | 81.36 | 1759.10 | 13.23 | 69.5 | 676.7 |'
- en: '**mAP^(test)** values are for single-model multiscale on [DOTAv1 test](https://captain-whu.github.io/DOTA/index.html)
    dataset.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mAP^(测试)** 值是在[DOTAv1 测试](https://captain-whu.github.io/DOTA/index.html)
    数据集上的单模型多尺度结果。'
- en: Reproduce by `yolo val obb data=DOTAv1.yaml device=0 split=test` and submit
    merged results to [DOTA evaluation](https://captain-whu.github.io/DOTA/evaluation.html).
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 `yolo val obb data=DOTAv1.yaml device=0 split=test` 复现，并将合并结果提交到 [DOTA evaluation](https://captain-whu.github.io/DOTA/evaluation.html)。
- en: '**Speed** averaged over DOTAv1 val images using an [Amazon EC2 P4d](https://aws.amazon.com/ec2/instance-types/p4/)
    instance.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Speed** 使用 [Amazon EC2 P4d](https://aws.amazon.com/ec2/instance-types/p4/)
    实例在 DOTAv1 val 图像上平均。'
- en: Reproduce by `yolo val obb data=DOTAv1.yaml batch=1 device=0|cpu`
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 `yolo val obb data=DOTAv1.yaml batch=1 device=0|cpu` 复现
- en: Train
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: Train YOLOv8n-obb on the `dota8.yaml` dataset for 100 epochs at image size 640\.
    For a full list of available arguments see the Configuration page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像尺寸为 640 的情况下，在 `dota8.yaml` 数据集上对 YOLOv8n-obb 进行 100 个 epochs 的训练。查看 Configuration
    页面获取所有可用参数的完整列表。
- en: Example
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dataset format
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据集格式
- en: OBB dataset format can be found in detail in the Dataset Guide.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: OBB 数据集格式详细信息可在 Dataset Guide 中找到。
- en: Val
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Val
- en: Validate trained YOLOv8n-obb model accuracy on the DOTA8 dataset. No argument
    need to passed as the `model` retains its training `data` and arguments as model
    attributes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DOTA8 数据集上验证训练好的 YOLOv8n-obb 模型的准确性。不需要传递任何参数，因为`model`保留其训练`data`和参数作为模型属性。
- en: Example
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Predict
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测
- en: Use a trained YOLOv8n-obb model to run predictions on images.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用训练好的 YOLOv8n-obb 模型对图像进行预测。
- en: Example
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See full `predict` mode details in the Predict page.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Predict 页面中的完整`predict`模式详细信息。
- en: Export
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出
- en: Export a YOLOv8n-obb model to a different format like ONNX, CoreML, etc.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将 YOLOv8n-obb 模型导出为 ONNX、CoreML 等不同格式。
- en: Example
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Available YOLOv8-obb export formats are in the table below. You can export to
    any format using the `format` argument, i.e. `format='onnx'` or `format='engine'`.
    You can predict or validate directly on exported models, i.e. `yolo predict model=yolov8n-obb.onnx`.
    Usage examples are shown for your model after export completes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 YOLOv8-obb 导出格式列在下表中。您可以使用`format`参数导出任何格式，例如`format='onnx'`或`format='engine'`。您可以直接在导出的模型上进行预测或验证，例如`yolo
    predict model=yolov8n-obb.onnx`。导出完成后，模型的使用示例将显示在您的模型中。
- en: '| Format | `format` Argument | Model | Metadata | Arguments |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Format | `format` 参数 | 模型 | 元数据 | 参数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| [PyTorch](https://pytorch.org/) | - | `yolov8n-obb.pt` | ✅ | - |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [PyTorch](https://pytorch.org/) | - | `yolov8n-obb.pt` | ✅ | - |'
- en: '| TorchScript | `torchscript` | `yolov8n-obb.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| TorchScript | `torchscript` | `yolov8n-obb.torchscript` | ✅ | `imgsz`, `optimize`,
    `batch` |'
- en: '| ONNX | `onnx` | `yolov8n-obb.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| ONNX | `onnx` | `yolov8n-obb.onnx` | ✅ | `imgsz`, `half`, `dynamic`, `simplify`,
    `opset`, `batch` |'
- en: '| OpenVINO | `openvino` | `yolov8n-obb_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| OpenVINO | `openvino` | `yolov8n-obb_openvino_model/` | ✅ | `imgsz`, `half`,
    `int8`, `batch`, `dynamic` |'
- en: '| TensorRT | `engine` | `yolov8n-obb.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| TensorRT | `engine` | `yolov8n-obb.engine` | ✅ | `imgsz`, `half`, `dynamic`,
    `simplify`, `workspace`, `int8`, `batch` |'
- en: '| CoreML | `coreml` | `yolov8n-obb.mlpackage` | ✅ | `imgsz`, `half`, `int8`,
    `nms`, `batch` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| CoreML | `coreml` | `yolov8n-obb.mlpackage` | ✅ | `imgsz`, `half`, `int8`,
    `nms`, `batch` |'
- en: '| TF SavedModel | `saved_model` | `yolov8n-obb_saved_model/` | ✅ | `imgsz`,
    `keras`, `int8`, `batch` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| TF SavedModel | `saved_model` | `yolov8n-obb_saved_model/` | ✅ | `imgsz`,
    `keras`, `int8`, `batch` |'
- en: '| TF GraphDef | `pb` | `yolov8n-obb.pb` | ❌ | `imgsz`, `batch` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| TF GraphDef | `pb` | `yolov8n-obb.pb` | ❌ | `imgsz`, `batch` |'
- en: '| TF Lite | `tflite` | `yolov8n-obb.tflite` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| TF Lite | `tflite` | `yolov8n-obb.tflite` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
- en: '| TF Edge TPU | `edgetpu` | `yolov8n-obb_edgetpu.tflite` | ✅ | `imgsz` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| TF Edge TPU | `edgetpu` | `yolov8n-obb_edgetpu.tflite` | ✅ | `imgsz` |'
- en: '| TF.js | `tfjs` | `yolov8n-obb_web_model/` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| TF.js | `tfjs` | `yolov8n-obb_web_model/` | ✅ | `imgsz`, `half`, `int8`,
    `batch` |'
- en: '| PaddlePaddle | `paddle` | `yolov8n-obb_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| PaddlePaddle | `paddle` | `yolov8n-obb_paddle_model/` | ✅ | `imgsz`, `batch`
    |'
- en: '| NCNN | `ncnn` | `yolov8n-obb_ncnn_model/` | ✅ | `imgsz`, `half`, `batch`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| NCNN | `ncnn` | `yolov8n-obb_ncnn_model/` | ✅ | `imgsz`, `half`, `batch`
    |'
- en: See full `export` details in the Export page.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 Export 页面中的完整`export`详细信息。
- en: FAQ
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FAQ
- en: What are Oriented Bounding Boxes (OBB) and how do they differ from regular bounding
    boxes?
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是有向边界框（OBB），它们与常规边界框有何不同？
- en: Oriented Bounding Boxes (OBB) include an additional angle to enhance object
    localization accuracy in images. Unlike regular bounding boxes, which are axis-aligned
    rectangles, OBBs can rotate to fit the orientation of the object better. This
    is particularly useful for applications requiring precise object placement, such
    as aerial or satellite imagery (Dataset Guide).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 定向边界框（OBB）在图像中增加了一个额外的角度，以提高对象定位的准确性。与常规的轴对齐矩形边界框不同，OBB 可以旋转以更好地适应对象的方向。这在需要精确对象放置的应用中特别有用，比如航空或卫星图像（数据集指南）。
- en: How do I train a YOLOv8n-obb model using a custom dataset?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用自定义数据集训练 YOLOv8n-obb 模型？
- en: 'To train a YOLOv8n-obb model with a custom dataset, follow the example below
    using Python or CLI:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用自定义数据集训练 YOLOv8n-obb 模型，请按照下面的示例使用 Python 或 CLI：
- en: Example
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more training arguments, check the Configuration section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多训练参数，请检查配置部分。
- en: What datasets can I use for training YOLOv8-OBB models?
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我可以用什么数据集训练 YOLOv8-OBB 模型？
- en: YOLOv8-OBB models are pretrained on datasets like [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    but you can use any dataset formatted for OBB. Detailed information on OBB dataset
    formats can be found in the Dataset Guide.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOv8-OBB 模型预先训练在像 [DOTAv1](https://github.com/ultralytics/ultralytics/blob/main/ultralytics/cfg/datasets/DOTAv1.yaml)
    这样的数据集上，但您可以使用任何格式化为 OBB 的数据集。有关 OBB 数据集格式的详细信息，请参阅数据集指南。
- en: How can I export a YOLOv8-OBB model to ONNX format?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何将 YOLOv8-OBB 模型导出为 ONNX 格式？
- en: 'Exporting a YOLOv8-OBB model to ONNX format is straightforward using either
    Python or CLI:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 或 CLI 可以轻松将 YOLOv8-OBB 模型导出为 ONNX 格式：
- en: Example
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For more export formats and details, refer to the Export page.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多导出格式和详细信息，请参阅导出页面。
- en: How do I validate the accuracy of a YOLOv8n-obb model?
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何验证 YOLOv8n-obb 模型的准确性？
- en: 'To validate a YOLOv8n-obb model, you can use Python or CLI commands as shown
    below:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证 YOLOv8n-obb 模型，您可以使用下面显示的 Python 或 CLI 命令：
- en: Example
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See full validation details in the Val section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Val 部分查看完整的验证细节。
