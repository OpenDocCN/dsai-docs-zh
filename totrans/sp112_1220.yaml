- en: scipy.stats.wishart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.wishart.html#scipy.stats.wishart](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.wishart.html#scipy.stats.wishart)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Wishart random variable.
  prefs: []
  type: TYPE_NORMAL
- en: The *df* keyword specifies the degrees of freedom. The *scale* keyword specifies
    the scale matrix, which must be symmetric and positive definite. In this context,
    the scale matrix is often interpreted in terms of a multivariate normal precision
    matrix (the inverse of the covariance matrix). These arguments must satisfy the
    relationship `df > scale.ndim - 1`, but see notes on using the *rvs* method with
    `df < scale.ndim`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**df**int'
  prefs: []
  type: TYPE_NORMAL
- en: Degrees of freedom, must be greater than or equal to dimension of the scale
    matrix
  prefs: []
  type: TYPE_NORMAL
- en: '**scale**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric positive definite scale matrix of the distribution
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, np.random.RandomState, np.random.Generator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used for drawing random variates. If *seed* is *None*, the *RandomState* singleton
    is used. If *seed* is an int, a new `RandomState` instance is used, seeded with
    seed. If *seed* is already a `RandomState` or `Generator` instance, then that
    object is used. Default is *None*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: scipy.linalg.LinAlgError
  prefs: []
  type: TYPE_NORMAL
- en: If the scale matrix *scale* is not positive definite.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`invwishart`](scipy.stats.invwishart.html#scipy.stats.invwishart "scipy.stats.invwishart"),
    [`chi2`](scipy.stats.chi2.html#scipy.stats.chi2 "scipy.stats.chi2")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The scale matrix *scale* must be a symmetric positive definite matrix. Singular
    matrices, including the symmetric positive semi-definite case, are not supported.
    Symmetry is not checked; only the lower triangular portion is used.
  prefs: []
  type: TYPE_NORMAL
- en: The Wishart distribution is often denoted
  prefs: []
  type: TYPE_NORMAL
- en: \[W_p(\nu, \Sigma)\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(\nu\) is the degrees of freedom and \(\Sigma\) is the \(p \times p\)
    scale matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'The probability density function for [`wishart`](#scipy.stats.wishart "scipy.stats.wishart")
    has support over positive definite matrices \(S\); if \(S \sim W_p(\nu, \Sigma)\),
    then its PDF is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: \[f(S) = \frac{|S|^{\frac{\nu - p - 1}{2}}}{2^{ \frac{\nu p}{2} } |\Sigma|^\frac{\nu}{2}
    \Gamma_p \left ( \frac{\nu}{2} \right )} \exp\left( -tr(\Sigma^{-1} S) / 2 \right)\]
  prefs: []
  type: TYPE_NORMAL
- en: If \(S \sim W_p(\nu, \Sigma)\) (Wishart) then \(S^{-1} \sim W_p^{-1}(\nu, \Sigma^{-1})\)
    (inverse Wishart).
  prefs: []
  type: TYPE_NORMAL
- en: If the scale matrix is 1-dimensional and equal to one, then the Wishart distribution
    \(W_1(\nu, 1)\) collapses to the \(\chi^2(\nu)\) distribution.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm [[2]](#r5d8b44ec26eb-2) implemented by the *rvs* method may produce
    numerically singular matrices with \(p - 1 < \nu < p\); the user may wish to check
    for this condition and generate replacement samples as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'M.L. Eaton, “Multivariate Statistics: A Vector Space Approach”, Wiley, 1983.'
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: 'W.B. Smith and R.R. Hocking, “Algorithm AS 53: Wishart Variate Generator”,
    Applied Statistics, vol. 21, pp. 341-345, 1972.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-wishart-1_00_00.png](../Images/aae230a7900edc3a2f88a69ad590f0ff.png)'
  prefs: []
  type: TYPE_IMG
- en: The input quantiles can be any shape of array, as long as the last axis labels
    the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the object may be called (as a function) to fix the degrees
    of freedom and scale parameters, returning a “frozen” Wishart random variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **pdf(x, df, scale)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, df, scale)** | Log of the probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **rvs(df, scale, size=1, random_state=None)** | Draw random samples from
    a Wishart distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy()** | Compute the differential entropy of the Wishart distribution.
    |'
  prefs: []
  type: TYPE_TB
