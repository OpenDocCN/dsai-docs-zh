["```py\nconda install numpy \n```", "```py\npip install numpy \n```", "```py\nimport numpy as np \n```", "```py\n>>> a = np.arange(6)\n>>> a2 = a[np.newaxis, :]\n>>> a2.shape\n(1, 6) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> print(a[0])\n[1 2 3 4] \n```", "```py\n[[0., 0., 0.],\n [1., 1., 1.]] \n```", "```py\n>>> import numpy as np\n>>> a = np.array([1, 2, 3]) \n```", "```py\n>>> np.zeros(2)\narray([0., 0.]) \n```", "```py\n>>> np.ones(2)\narray([1., 1.]) \n```", "```py\n>>> # Create an empty array with 2 elements\n>>> np.empty(2) \narray([3.14, 42\\.  ])  # may vary \n```", "```py\n>>> np.arange(4)\narray([0, 1, 2, 3]) \n```", "```py\n>>> np.arange(2, 9, 2)\narray([2, 4, 6, 8]) \n```", "```py\n>>> np.linspace(0, 10, num=5)\narray([ 0\\. ,  2.5,  5\\. ,  7.5, 10\\. ]) \n```", "```py\n>>> x = np.ones(2, dtype=np.int64)\n>>> x\narray([1, 1]) \n```", "```py\n>>> arr = np.array([2, 1, 5, 3, 7, 4, 6, 8]) \n```", "```py\n>>> np.sort(arr)\narray([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4])\n>>> b = np.array([5, 6, 7, 8]) \n```", "```py\n>>> np.concatenate((a, b))\narray([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> x = np.array([[1, 2], [3, 4]])\n>>> y = np.array([[5, 6]]) \n```", "```py\n>>> np.concatenate((x, y), axis=0)\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> array_example = np.array([[[0, 1, 2, 3],\n...                            [4, 5, 6, 7]],\n...\n...                           [[0, 1, 2, 3],\n...                            [4, 5, 6, 7]],\n...\n...                           [[0 ,1 ,2, 3],\n...                            [4, 5, 6, 7]]]) \n```", "```py\n>>> array_example.ndim\n3 \n```", "```py\n>>> array_example.size\n24 \n```", "```py\n>>> array_example.shape\n(3, 2, 4) \n```", "```py\n>>> a = np.arange(6)\n>>> print(a)\n[0 1 2 3 4 5] \n```", "```py\n>>> b = a.reshape(3, 2)\n>>> print(b)\n[[0 1]\n [2 3]\n [4 5]] \n```", "```py\n>>> np.reshape(a, newshape=(1, 6), order='C')\narray([[0, 1, 2, 3, 4, 5]]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6])\n>>> a.shape\n(6,) \n```", "```py\n>>> a2 = a[np.newaxis, :]\n>>> a2.shape\n(1, 6) \n```", "```py\n>>> row_vector = a[np.newaxis, :]\n>>> row_vector.shape\n(1, 6) \n```", "```py\n>>> col_vector = a[:, np.newaxis]\n>>> col_vector.shape\n(6, 1) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6])\n>>> a.shape\n(6,) \n```", "```py\n>>> b = np.expand_dims(a, axis=1)\n>>> b.shape\n(6, 1) \n```", "```py\n>>> c = np.expand_dims(a, axis=0)\n>>> c.shape\n(1, 6) \n```", "```py\n>>> data = np.array([1, 2, 3])\n\n>>> data[1]\n2\n>>> data[0:2]\narray([1, 2])\n>>> data[1:]\narray([2, 3])\n>>> data[-2:]\narray([2, 3]) \n```", "```py\n>>> a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> print(a[a < 5])\n[1 2 3 4] \n```", "```py\n>>> five_up = (a >= 5)\n>>> print(a[five_up])\n[ 5  6  7  8  9 10 11 12] \n```", "```py\n>>> divisible_by_2 = a[a%2==0]\n>>> print(divisible_by_2)\n[ 2  4  6  8 10 12] \n```", "```py\n>>> c = a[(a > 2) & (a < 11)]\n>>> print(c)\n[ 3  4  5  6  7  8  9 10] \n```", "```py\n>>> five_up = (a > 5) | (a == 5)\n>>> print(five_up)\n[[False False False False]\n [ True  True  True  True]\n [ True  True  True True]] \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> b = np.nonzero(a < 5)\n>>> print(b)\n(array([0, 0, 0, 0]), array([0, 1, 2, 3])) \n```", "```py\n>>> list_of_coordinates= list(zip(b[0], b[1]))\n\n>>> for coord in list_of_coordinates:\n...     print(coord)\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3) \n```", "```py\n>>> print(a[b])\n[1 2 3 4] \n```", "```py\n>>> not_there = np.nonzero(a == 42)\n>>> print(not_there)\n(array([], dtype=int64), array([], dtype=int64)) \n```", "```py\n>>> a = np.array([1,  2,  3,  4,  5,  6,  7,  8,  9, 10]) \n```", "```py\n>>> arr1 = a[3:8]\n>>> arr1\narray([4, 5, 6, 7, 8]) \n```", "```py\n>>> a1 = np.array([[1, 1],\n...                [2, 2]])\n\n>>> a2 = np.array([[3, 3],\n...                [4, 4]]) \n```", "```py\n>>> np.vstack((a1, a2))\narray([[1, 1],\n [2, 2],\n [3, 3],\n [4, 4]]) \n```", "```py\n>>> np.hstack((a1, a2))\narray([[1, 1, 3, 3],\n [2, 2, 4, 4]]) \n```", "```py\n>>> x = np.arange(1, 25).reshape(2, 12)\n>>> x\narray([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]) \n```", "```py\n>>> np.hsplit(x, 3)\n [array([[ 1,  2,  3,  4],\n [13, 14, 15, 16]]), array([[ 5,  6,  7,  8],\n [17, 18, 19, 20]]), array([[ 9, 10, 11, 12],\n [21, 22, 23, 24]])] \n```", "```py\n>>> np.hsplit(x, (3, 4))\n [array([[ 1,  2,  3],\n [13, 14, 15]]), array([[ 4],\n [16]]), array([[ 5,  6,  7,  8,  9, 10, 11, 12],\n [17, 18, 19, 20, 21, 22, 23, 24]])] \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> b1 = a[0, :]\n>>> b1\narray([1, 2, 3, 4])\n>>> b1[0] = 99\n>>> b1\narray([99,  2,  3,  4])\n>>> a\narray([[99,  2,  3,  4],\n [ 5,  6,  7,  8],\n [ 9, 10, 11, 12]]) \n```", "```py\n>>> b2 = a.copy() \n```", "```py\n>>> data = np.array([1, 2])\n>>> ones = np.ones(2, dtype=int)\n>>> data + ones\narray([2, 3]) \n```", "```py\n>>> data - ones\narray([0, 1])\n>>> data * data\narray([1, 4])\n>>> data / data\narray([1., 1.]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4])\n\n>>> a.sum()\n10 \n```", "```py\n>>> b = np.array([[1, 1], [2, 2]]) \n```", "```py\n>>> b.sum(axis=0)\narray([3, 3]) \n```", "```py\n>>> b.sum(axis=1)\narray([2, 4]) \n```", "```py\n>>> data = np.array([1.0, 2.0])\n>>> data * 1.6\narray([1.6, 3.2]) \n```", "```py\n>>> data.max()\n2.0\n>>> data.min()\n1.0\n>>> data.sum()\n3.0 \n```", "```py\n>>> a = np.array([[0.45053314, 0.17296777, 0.34376245, 0.5510652],\n...               [0.54627315, 0.05093587, 0.40067661, 0.55645993],\n...               [0.12697628, 0.82485143, 0.26590556, 0.56917101]]) \n```", "```py\n>>> a.sum()\n4.8595784 \n```", "```py\n>>> a.min()\n0.05093587 \n```", "```py\n>>> a.min(axis=0)\narray([0.12697628, 0.05093587, 0.26590556, 0.5510652 ]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4], [5, 6]])\n>>> data\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> data[0, 1]\n2\n>>> data[1:3]\narray([[3, 4],\n [5, 6]])\n>>> data[0:2, 0]\narray([1, 3]) \n```", "```py\n>>> data.max()\n6\n>>> data.min()\n1\n>>> data.sum()\n21 \n```", "```py\n>>> data = np.array([[1, 2], [5, 3], [4, 6]])\n>>> data\narray([[1, 2],\n [5, 3],\n [4, 6]])\n>>> data.max(axis=0)\narray([5, 6])\n>>> data.max(axis=1)\narray([2, 5, 6]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4]])\n>>> ones = np.array([[1, 1], [1, 1]])\n>>> data + ones\narray([[2, 3],\n [4, 5]]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4], [5, 6]])\n>>> ones_row = np.array([[1, 1]])\n>>> data + ones_row\narray([[2, 3],\n [4, 5],\n [6, 7]]) \n```", "```py\n>>> np.ones((4, 3, 2))\narray([[[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]]]) \n```", "```py\n>>> np.ones(3)\narray([1., 1., 1.])\n>>> np.zeros(3)\narray([0., 0., 0.])\n>>> rng = np.random.default_rng()  # the simplest way to generate random numbers\n>>> rng.random(3) \narray([0.63696169, 0.26978671, 0.04097352]) \n```", "```py\n>>> np.ones((3, 2))\narray([[1., 1.],\n [1., 1.],\n [1., 1.]])\n>>> np.zeros((3, 2))\narray([[0., 0.],\n [0., 0.],\n [0., 0.]])\n>>> rng.random((3, 2)) \narray([[0.01652764, 0.81327024],\n [0.91275558, 0.60663578],\n [0.72949656, 0.54362499]])  # may vary \n```", "```py\n>>> rng.integers(5, size=(2, 4)) \narray([[2, 1, 1, 0],\n [0, 0, 0, 4]])  # may vary \n```", "```py\n>>> a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20]) \n```", "```py\n>>> unique_values = np.unique(a)\n>>> print(unique_values)\n[11 12 13 14 15 16 17 18 19 20] \n```", "```py\n>>> unique_values, indices_list = np.unique(a, return_index=True)\n>>> print(indices_list)\n[ 0  2  3  4  5  6  7 12 13 14] \n```", "```py\n>>> unique_values, occurrence_count = np.unique(a, return_counts=True)\n>>> print(occurrence_count)\n[3 2 2 2 1 1 1 1 1 1] \n```", "```py\n>>> a_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]]) \n```", "```py\n>>> unique_values = np.unique(a_2d)\n>>> print(unique_values)\n[ 1  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> unique_rows = np.unique(a_2d, axis=0)\n>>> print(unique_rows)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]] \n```", "```py\n>>> unique_rows, indices, occurrence_count = np.unique(\n...      a_2d, axis=0, return_counts=True, return_index=True)\n>>> print(unique_rows)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(indices)\n[0 1 2]\n>>> print(occurrence_count)\n[2 1 1] \n```", "```py\n>>> data.reshape(2, 3)\narray([[1, 2, 3],\n [4, 5, 6]])\n>>> data.reshape(3, 2)\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> arr = np.arange(6).reshape((2, 3))\n>>> arr\narray([[0, 1, 2],\n [3, 4, 5]]) \n```", "```py\n>>> arr.transpose()\narray([[0, 3],\n [1, 4],\n [2, 5]]) \n```", "```py\n>>> arr.T\narray([[0, 3],\n [1, 4],\n [2, 5]]) \n```", "```py\n>>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> reversed_arr = np.flip(arr) \n```", "```py\n>>> print('Reversed Array: ', reversed_arr)\nReversed Array:  [8 7 6 5 4 3 2 1] \n```", "```py\n>>> arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> reversed_arr = np.flip(arr_2d)\n>>> print(reversed_arr)\n[[12 11 10  9]\n [ 8  7  6  5]\n [ 4  3  2  1]] \n```", "```py\n>>> reversed_arr_rows = np.flip(arr_2d, axis=0)\n>>> print(reversed_arr_rows)\n[[ 9 10 11 12]\n [ 5  6  7  8]\n [ 1  2  3  4]] \n```", "```py\n>>> reversed_arr_columns = np.flip(arr_2d, axis=1)\n>>> print(reversed_arr_columns)\n[[ 4  3  2  1]\n [ 8  7  6  5]\n [12 11 10  9]] \n```", "```py\n>>> arr_2d[1] = np.flip(arr_2d[1])\n>>> print(arr_2d)\n[[ 1  2  3  4]\n [ 8  7  6  5]\n [ 9 10 11 12]] \n```", "```py\n>>> arr_2d[:,1] = np.flip(arr_2d[:,1])\n>>> print(arr_2d)\n[[ 1 10  3  4]\n [ 8  7  6  5]\n [ 9  2 11 12]] \n```", "```py\n>>> x = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> x.flatten()\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]) \n```", "```py\n>>> a1 = x.flatten()\n>>> a1[0] = 99\n>>> print(x)  # Original array\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(a1)  # New array\n[99  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> a2 = x.ravel()\n>>> a2[0] = 98\n>>> print(x)  # Original array\n[[98  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(a2)  # New array\n[98  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> help(max)\nHelp on built-in function max in module builtins:\n\nmax(...)\n max(iterable, *[, default=obj, key=func]) -> value\n max(arg1, arg2, *args, *[, key=func]) -> value\n\n With a single iterable argument, return its biggest item. The\n default keyword-only argument specifies an object to return if\n the provided iterable is empty.\n With two or more arguments, return the largest argument. \n```", "```py\nIn [0]: max?\nmax(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value\n\nWith a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.\nType:      builtin_function_or_method \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\nIn [1]: a?\nType:            ndarray\nString form:     [1 2 3 4 5 6]\nLength:          6\nFile:            ~/anaconda3/lib/python3.9/site-packages/numpy/__init__.py\nDocstring:       <no docstring>\nClass docstring:\nndarray(shape, dtype=float, buffer=None, offset=0,\n strides=None, order=None)\n\nAn array object represents a multidimensional, homogeneous array\nof fixed-size items.  An associated data-type object describes the\nformat of each element in the array (its byte-order, how many bytes it\noccupies in memory, whether it is an integer, a floating point number,\nor something else, etc.)\n\nArrays should be constructed using `array`, `zeros` or `empty` (refer\nto the See Also section below).  The parameters given here refer to\na low-level method (`ndarray(...)`) for instantiating an array.\n\nFor more information, refer to the `numpy` module and examine the\nmethods and attributes of an array.\n\nParameters\n----------\n(for the __new__ method; see Notes below)\n\nshape : tuple of ints\n        Shape of created array.\n... \n```", "```py\n>>> def double(a):\n...  '''Return a * 2'''\n...   return a * 2 \n```", "```py\nIn [2]: double?\nSignature: double(a)\nDocstring: Return a * 2\nFile:      ~/Desktop/<ipython-input-23-b5adf20be596>\nType:      function \n```", "```py\nIn [3]: double??\nSignature: double(a)\nSource:\ndef double(a):\n '''Return a * 2'''\n return a * 2\nFile:      ~/Desktop/<ipython-input-23-b5adf20be596>\nType:      function \n```", "```py\nIn [4]: len?\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method \n```", "```py\nIn [5]: len??\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\n>>> np.save('filename', a) \n```", "```py\n>>> b = np.load('filename.npy') \n```", "```py\n>>> print(b)\n[1 2 3 4 5 6] \n```", "```py\n>>> csv_arr = np.array([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> np.savetxt('new_file.csv', csv_arr) \n```", "```py\n>>> np.loadtxt('new_file.csv')\narray([1., 2., 3., 4., 5., 6., 7., 8.]) \n```", "```py\n>>> import pandas as pd\n\n>>> # If all of your columns are the same type:\n>>> x = pd.read_csv('music.csv', header=0).values\n>>> print(x)\n[['Billie Holiday' 'Jazz' 1300000 27000000]\n ['Jimmie Hendrix' 'Rock' 2700000 70000000]\n ['Miles Davis' 'Jazz' 1500000 48000000]\n ['SIA' 'Pop' 2000000 74000000]]\n\n>>> # You can also simply select the columns you need:\n>>> x = pd.read_csv('music.csv', usecols=['Artist', 'Plays']).values\n>>> print(x)\n[['Billie Holiday' 27000000]\n ['Jimmie Hendrix' 70000000]\n ['Miles Davis' 48000000]\n ['SIA' 74000000]] \n```", "```py\n>>> a = np.array([[-2.58289208,  0.43014843, -1.24082018, 1.59572603],\n...               [ 0.99027828, 1.17150989,  0.94125714, -0.14692469],\n...               [ 0.76989341,  0.81299683, -0.95068423, 0.11769564],\n...               [ 0.20484034,  0.34784527,  1.96979195, 0.51992837]]) \n```", "```py\n>>> df = pd.DataFrame(a)\n>>> print(df)\n 0         1         2         3\n0 -2.582892  0.430148 -1.240820  1.595726\n1  0.990278  1.171510  0.941257 -0.146925\n2  0.769893  0.812997 -0.950684  0.117696\n3  0.204840  0.347845  1.969792  0.519928 \n```", "```py\n>>> df.to_csv('pd.csv') \n```", "```py\n>>> data = pd.read_csv('pd.csv') \n```", "```py\n>>> np.savetxt('np.csv', a, fmt='%.2f', delimiter=',', header='1,  2,  3,  4') \n```", "```py\n$ cat np.csv\n#  1,  2,  3,  4\n-2.58,0.43,-1.24,1.60\n0.99,1.17,0.94,-0.15\n0.77,0.81,-0.95,0.12\n0.20,0.35,1.97,0.52 \n```", "```py\n>>> a = np.array([2, 1, 5, 7, 4, 6, 8, 14, 10, 9, 18, 20, 22]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n\n# If you're using Jupyter Notebook, you may also want to run the following\n# line of code to display your code in the notebook:\n\n%matplotlib inline \n```", "```py\n>>> plt.plot(a)\n\n# If you are running from a command line, you may need to do this:\n# >>> plt.show() \n```", "```py\n>>> x = np.linspace(0, 5, 20)\n>>> y = np.linspace(0, 10, 20)\n>>> plt.plot(x, y, 'purple') # line\n>>> plt.plot(x, y, 'o')      # dots \n```", "```py\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(projection='3d')\n>>> X = np.arange(-5, 5, 0.15)\n>>> Y = np.arange(-5, 5, 0.15)\n>>> X, Y = np.meshgrid(X, Y)\n>>> R = np.sqrt(X**2 + Y**2)\n>>> Z = np.sin(R)\n\n>>> ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis') \n```", "```py\nconda install numpy \n```", "```py\npip install numpy \n```", "```py\nimport numpy as np \n```", "```py\n>>> a = np.arange(6)\n>>> a2 = a[np.newaxis, :]\n>>> a2.shape\n(1, 6) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> print(a[0])\n[1 2 3 4] \n```", "```py\n[[0., 0., 0.],\n [1., 1., 1.]] \n```", "```py\n>>> import numpy as np\n>>> a = np.array([1, 2, 3]) \n```", "```py\n>>> np.zeros(2)\narray([0., 0.]) \n```", "```py\n>>> np.ones(2)\narray([1., 1.]) \n```", "```py\n>>> # Create an empty array with 2 elements\n>>> np.empty(2) \narray([3.14, 42\\.  ])  # may vary \n```", "```py\n>>> np.arange(4)\narray([0, 1, 2, 3]) \n```", "```py\n>>> np.arange(2, 9, 2)\narray([2, 4, 6, 8]) \n```", "```py\n>>> np.linspace(0, 10, num=5)\narray([ 0\\. ,  2.5,  5\\. ,  7.5, 10\\. ]) \n```", "```py\n>>> x = np.ones(2, dtype=np.int64)\n>>> x\narray([1, 1]) \n```", "```py\n>>> arr = np.array([2, 1, 5, 3, 7, 4, 6, 8]) \n```", "```py\n>>> np.sort(arr)\narray([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4])\n>>> b = np.array([5, 6, 7, 8]) \n```", "```py\n>>> np.concatenate((a, b))\narray([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> x = np.array([[1, 2], [3, 4]])\n>>> y = np.array([[5, 6]]) \n```", "```py\n>>> np.concatenate((x, y), axis=0)\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> array_example = np.array([[[0, 1, 2, 3],\n...                            [4, 5, 6, 7]],\n...\n...                           [[0, 1, 2, 3],\n...                            [4, 5, 6, 7]],\n...\n...                           [[0 ,1 ,2, 3],\n...                            [4, 5, 6, 7]]]) \n```", "```py\n>>> array_example.ndim\n3 \n```", "```py\n>>> array_example.size\n24 \n```", "```py\n>>> array_example.shape\n(3, 2, 4) \n```", "```py\n>>> a = np.arange(6)\n>>> print(a)\n[0 1 2 3 4 5] \n```", "```py\n>>> b = a.reshape(3, 2)\n>>> print(b)\n[[0 1]\n [2 3]\n [4 5]] \n```", "```py\n>>> np.reshape(a, newshape=(1, 6), order='C')\narray([[0, 1, 2, 3, 4, 5]]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6])\n>>> a.shape\n(6,) \n```", "```py\n>>> a2 = a[np.newaxis, :]\n>>> a2.shape\n(1, 6) \n```", "```py\n>>> row_vector = a[np.newaxis, :]\n>>> row_vector.shape\n(1, 6) \n```", "```py\n>>> col_vector = a[:, np.newaxis]\n>>> col_vector.shape\n(6, 1) \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6])\n>>> a.shape\n(6,) \n```", "```py\n>>> b = np.expand_dims(a, axis=1)\n>>> b.shape\n(6, 1) \n```", "```py\n>>> c = np.expand_dims(a, axis=0)\n>>> c.shape\n(1, 6) \n```", "```py\n>>> data = np.array([1, 2, 3])\n\n>>> data[1]\n2\n>>> data[0:2]\narray([1, 2])\n>>> data[1:]\narray([2, 3])\n>>> data[-2:]\narray([2, 3]) \n```", "```py\n>>> a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> print(a[a < 5])\n[1 2 3 4] \n```", "```py\n>>> five_up = (a >= 5)\n>>> print(a[five_up])\n[ 5  6  7  8  9 10 11 12] \n```", "```py\n>>> divisible_by_2 = a[a%2==0]\n>>> print(divisible_by_2)\n[ 2  4  6  8 10 12] \n```", "```py\n>>> c = a[(a > 2) & (a < 11)]\n>>> print(c)\n[ 3  4  5  6  7  8  9 10] \n```", "```py\n>>> five_up = (a > 5) | (a == 5)\n>>> print(five_up)\n[[False False False False]\n [ True  True  True  True]\n [ True  True  True True]] \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> b = np.nonzero(a < 5)\n>>> print(b)\n(array([0, 0, 0, 0]), array([0, 1, 2, 3])) \n```", "```py\n>>> list_of_coordinates= list(zip(b[0], b[1]))\n\n>>> for coord in list_of_coordinates:\n...     print(coord)\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3) \n```", "```py\n>>> print(a[b])\n[1 2 3 4] \n```", "```py\n>>> not_there = np.nonzero(a == 42)\n>>> print(not_there)\n(array([], dtype=int64), array([], dtype=int64)) \n```", "```py\n>>> a = np.array([1,  2,  3,  4,  5,  6,  7,  8,  9, 10]) \n```", "```py\n>>> arr1 = a[3:8]\n>>> arr1\narray([4, 5, 6, 7, 8]) \n```", "```py\n>>> a1 = np.array([[1, 1],\n...                [2, 2]])\n\n>>> a2 = np.array([[3, 3],\n...                [4, 4]]) \n```", "```py\n>>> np.vstack((a1, a2))\narray([[1, 1],\n [2, 2],\n [3, 3],\n [4, 4]]) \n```", "```py\n>>> np.hstack((a1, a2))\narray([[1, 1, 3, 3],\n [2, 2, 4, 4]]) \n```", "```py\n>>> x = np.arange(1, 25).reshape(2, 12)\n>>> x\narray([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]]) \n```", "```py\n>>> np.hsplit(x, 3)\n [array([[ 1,  2,  3,  4],\n [13, 14, 15, 16]]), array([[ 5,  6,  7,  8],\n [17, 18, 19, 20]]), array([[ 9, 10, 11, 12],\n [21, 22, 23, 24]])] \n```", "```py\n>>> np.hsplit(x, (3, 4))\n [array([[ 1,  2,  3],\n [13, 14, 15]]), array([[ 4],\n [16]]), array([[ 5,  6,  7,  8,  9, 10, 11, 12],\n [17, 18, 19, 20, 21, 22, 23, 24]])] \n```", "```py\n>>> a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> b1 = a[0, :]\n>>> b1\narray([1, 2, 3, 4])\n>>> b1[0] = 99\n>>> b1\narray([99,  2,  3,  4])\n>>> a\narray([[99,  2,  3,  4],\n [ 5,  6,  7,  8],\n [ 9, 10, 11, 12]]) \n```", "```py\n>>> b2 = a.copy() \n```", "```py\n>>> data = np.array([1, 2])\n>>> ones = np.ones(2, dtype=int)\n>>> data + ones\narray([2, 3]) \n```", "```py\n>>> data - ones\narray([0, 1])\n>>> data * data\narray([1, 4])\n>>> data / data\narray([1., 1.]) \n```", "```py\n>>> a = np.array([1, 2, 3, 4])\n\n>>> a.sum()\n10 \n```", "```py\n>>> b = np.array([[1, 1], [2, 2]]) \n```", "```py\n>>> b.sum(axis=0)\narray([3, 3]) \n```", "```py\n>>> b.sum(axis=1)\narray([2, 4]) \n```", "```py\n>>> data = np.array([1.0, 2.0])\n>>> data * 1.6\narray([1.6, 3.2]) \n```", "```py\n>>> data.max()\n2.0\n>>> data.min()\n1.0\n>>> data.sum()\n3.0 \n```", "```py\n>>> a = np.array([[0.45053314, 0.17296777, 0.34376245, 0.5510652],\n...               [0.54627315, 0.05093587, 0.40067661, 0.55645993],\n...               [0.12697628, 0.82485143, 0.26590556, 0.56917101]]) \n```", "```py\n>>> a.sum()\n4.8595784 \n```", "```py\n>>> a.min()\n0.05093587 \n```", "```py\n>>> a.min(axis=0)\narray([0.12697628, 0.05093587, 0.26590556, 0.5510652 ]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4], [5, 6]])\n>>> data\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> data[0, 1]\n2\n>>> data[1:3]\narray([[3, 4],\n [5, 6]])\n>>> data[0:2, 0]\narray([1, 3]) \n```", "```py\n>>> data.max()\n6\n>>> data.min()\n1\n>>> data.sum()\n21 \n```", "```py\n>>> data = np.array([[1, 2], [5, 3], [4, 6]])\n>>> data\narray([[1, 2],\n [5, 3],\n [4, 6]])\n>>> data.max(axis=0)\narray([5, 6])\n>>> data.max(axis=1)\narray([2, 5, 6]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4]])\n>>> ones = np.array([[1, 1], [1, 1]])\n>>> data + ones\narray([[2, 3],\n [4, 5]]) \n```", "```py\n>>> data = np.array([[1, 2], [3, 4], [5, 6]])\n>>> ones_row = np.array([[1, 1]])\n>>> data + ones_row\narray([[2, 3],\n [4, 5],\n [6, 7]]) \n```", "```py\n>>> np.ones((4, 3, 2))\narray([[[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]],\n\n [[1., 1.],\n [1., 1.],\n [1., 1.]]]) \n```", "```py\n>>> np.ones(3)\narray([1., 1., 1.])\n>>> np.zeros(3)\narray([0., 0., 0.])\n>>> rng = np.random.default_rng()  # the simplest way to generate random numbers\n>>> rng.random(3) \narray([0.63696169, 0.26978671, 0.04097352]) \n```", "```py\n>>> np.ones((3, 2))\narray([[1., 1.],\n [1., 1.],\n [1., 1.]])\n>>> np.zeros((3, 2))\narray([[0., 0.],\n [0., 0.],\n [0., 0.]])\n>>> rng.random((3, 2)) \narray([[0.01652764, 0.81327024],\n [0.91275558, 0.60663578],\n [0.72949656, 0.54362499]])  # may vary \n```", "```py\n>>> rng.integers(5, size=(2, 4)) \narray([[2, 1, 1, 0],\n [0, 0, 0, 4]])  # may vary \n```", "```py\n>>> a = np.array([11, 11, 12, 13, 14, 15, 16, 17, 12, 13, 11, 14, 18, 19, 20]) \n```", "```py\n>>> unique_values = np.unique(a)\n>>> print(unique_values)\n[11 12 13 14 15 16 17 18 19 20] \n```", "```py\n>>> unique_values, indices_list = np.unique(a, return_index=True)\n>>> print(indices_list)\n[ 0  2  3  4  5  6  7 12 13 14] \n```", "```py\n>>> unique_values, occurrence_count = np.unique(a, return_counts=True)\n>>> print(occurrence_count)\n[3 2 2 2 1 1 1 1 1 1] \n```", "```py\n>>> a_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]]) \n```", "```py\n>>> unique_values = np.unique(a_2d)\n>>> print(unique_values)\n[ 1  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> unique_rows = np.unique(a_2d, axis=0)\n>>> print(unique_rows)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]] \n```", "```py\n>>> unique_rows, indices, occurrence_count = np.unique(\n...      a_2d, axis=0, return_counts=True, return_index=True)\n>>> print(unique_rows)\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(indices)\n[0 1 2]\n>>> print(occurrence_count)\n[2 1 1] \n```", "```py\n>>> data.reshape(2, 3)\narray([[1, 2, 3],\n [4, 5, 6]])\n>>> data.reshape(3, 2)\narray([[1, 2],\n [3, 4],\n [5, 6]]) \n```", "```py\n>>> arr = np.arange(6).reshape((2, 3))\n>>> arr\narray([[0, 1, 2],\n [3, 4, 5]]) \n```", "```py\n>>> arr.transpose()\narray([[0, 3],\n [1, 4],\n [2, 5]]) \n```", "```py\n>>> arr.T\narray([[0, 3],\n [1, 4],\n [2, 5]]) \n```", "```py\n>>> arr = np.array([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> reversed_arr = np.flip(arr) \n```", "```py\n>>> print('Reversed Array: ', reversed_arr)\nReversed Array:  [8 7 6 5 4 3 2 1] \n```", "```py\n>>> arr_2d = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> reversed_arr = np.flip(arr_2d)\n>>> print(reversed_arr)\n[[12 11 10  9]\n [ 8  7  6  5]\n [ 4  3  2  1]] \n```", "```py\n>>> reversed_arr_rows = np.flip(arr_2d, axis=0)\n>>> print(reversed_arr_rows)\n[[ 9 10 11 12]\n [ 5  6  7  8]\n [ 1  2  3  4]] \n```", "```py\n>>> reversed_arr_columns = np.flip(arr_2d, axis=1)\n>>> print(reversed_arr_columns)\n[[ 4  3  2  1]\n [ 8  7  6  5]\n [12 11 10  9]] \n```", "```py\n>>> arr_2d[1] = np.flip(arr_2d[1])\n>>> print(arr_2d)\n[[ 1  2  3  4]\n [ 8  7  6  5]\n [ 9 10 11 12]] \n```", "```py\n>>> arr_2d[:,1] = np.flip(arr_2d[:,1])\n>>> print(arr_2d)\n[[ 1 10  3  4]\n [ 8  7  6  5]\n [ 9  2 11 12]] \n```", "```py\n>>> x = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) \n```", "```py\n>>> x.flatten()\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]) \n```", "```py\n>>> a1 = x.flatten()\n>>> a1[0] = 99\n>>> print(x)  # Original array\n[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(a1)  # New array\n[99  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> a2 = x.ravel()\n>>> a2[0] = 98\n>>> print(x)  # Original array\n[[98  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n>>> print(a2)  # New array\n[98  2  3  4  5  6  7  8  9 10 11 12] \n```", "```py\n>>> help(max)\nHelp on built-in function max in module builtins:\n\nmax(...)\n max(iterable, *[, default=obj, key=func]) -> value\n max(arg1, arg2, *args, *[, key=func]) -> value\n\n With a single iterable argument, return its biggest item. The\n default keyword-only argument specifies an object to return if\n the provided iterable is empty.\n With two or more arguments, return the largest argument. \n```", "```py\nIn [0]: max?\nmax(iterable, *[, default=obj, key=func]) -> value\nmax(arg1, arg2, *args, *[, key=func]) -> value\n\nWith a single iterable argument, return its biggest item. The\ndefault keyword-only argument specifies an object to return if\nthe provided iterable is empty.\nWith two or more arguments, return the largest argument.\nType:      builtin_function_or_method \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\nIn [1]: a?\nType:            ndarray\nString form:     [1 2 3 4 5 6]\nLength:          6\nFile:            ~/anaconda3/lib/python3.9/site-packages/numpy/__init__.py\nDocstring:       <no docstring>\nClass docstring:\nndarray(shape, dtype=float, buffer=None, offset=0,\n strides=None, order=None)\n\nAn array object represents a multidimensional, homogeneous array\nof fixed-size items.  An associated data-type object describes the\nformat of each element in the array (its byte-order, how many bytes it\noccupies in memory, whether it is an integer, a floating point number,\nor something else, etc.)\n\nArrays should be constructed using `array`, `zeros` or `empty` (refer\nto the See Also section below).  The parameters given here refer to\na low-level method (`ndarray(...)`) for instantiating an array.\n\nFor more information, refer to the `numpy` module and examine the\nmethods and attributes of an array.\n\nParameters\n----------\n(for the __new__ method; see Notes below)\n\nshape : tuple of ints\n        Shape of created array.\n... \n```", "```py\n>>> def double(a):\n...  '''Return a * 2'''\n...   return a * 2 \n```", "```py\nIn [2]: double?\nSignature: double(a)\nDocstring: Return a * 2\nFile:      ~/Desktop/<ipython-input-23-b5adf20be596>\nType:      function \n```", "```py\nIn [3]: double??\nSignature: double(a)\nSource:\ndef double(a):\n '''Return a * 2'''\n return a * 2\nFile:      ~/Desktop/<ipython-input-23-b5adf20be596>\nType:      function \n```", "```py\nIn [4]: len?\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method \n```", "```py\nIn [5]: len??\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method \n```", "```py\n>>> a = np.array([1, 2, 3, 4, 5, 6]) \n```", "```py\n>>> np.save('filename', a) \n```", "```py\n>>> b = np.load('filename.npy') \n```", "```py\n>>> print(b)\n[1 2 3 4 5 6] \n```", "```py\n>>> csv_arr = np.array([1, 2, 3, 4, 5, 6, 7, 8]) \n```", "```py\n>>> np.savetxt('new_file.csv', csv_arr) \n```", "```py\n>>> np.loadtxt('new_file.csv')\narray([1., 2., 3., 4., 5., 6., 7., 8.]) \n```", "```py\n>>> import pandas as pd\n\n>>> # If all of your columns are the same type:\n>>> x = pd.read_csv('music.csv', header=0).values\n>>> print(x)\n[['Billie Holiday' 'Jazz' 1300000 27000000]\n ['Jimmie Hendrix' 'Rock' 2700000 70000000]\n ['Miles Davis' 'Jazz' 1500000 48000000]\n ['SIA' 'Pop' 2000000 74000000]]\n\n>>> # You can also simply select the columns you need:\n>>> x = pd.read_csv('music.csv', usecols=['Artist', 'Plays']).values\n>>> print(x)\n[['Billie Holiday' 27000000]\n ['Jimmie Hendrix' 70000000]\n ['Miles Davis' 48000000]\n ['SIA' 74000000]] \n```", "```py\n>>> a = np.array([[-2.58289208,  0.43014843, -1.24082018, 1.59572603],\n...               [ 0.99027828, 1.17150989,  0.94125714, -0.14692469],\n...               [ 0.76989341,  0.81299683, -0.95068423, 0.11769564],\n...               [ 0.20484034,  0.34784527,  1.96979195, 0.51992837]]) \n```", "```py\n>>> df = pd.DataFrame(a)\n>>> print(df)\n 0         1         2         3\n0 -2.582892  0.430148 -1.240820  1.595726\n1  0.990278  1.171510  0.941257 -0.146925\n2  0.769893  0.812997 -0.950684  0.117696\n3  0.204840  0.347845  1.969792  0.519928 \n```", "```py\n>>> df.to_csv('pd.csv') \n```", "```py\n>>> data = pd.read_csv('pd.csv') \n```", "```py\n>>> np.savetxt('np.csv', a, fmt='%.2f', delimiter=',', header='1,  2,  3,  4') \n```", "```py\n$ cat np.csv\n#  1,  2,  3,  4\n-2.58,0.43,-1.24,1.60\n0.99,1.17,0.94,-0.15\n0.77,0.81,-0.95,0.12\n0.20,0.35,1.97,0.52 \n```", "```py\n>>> a = np.array([2, 1, 5, 7, 4, 6, 8, 14, 10, 9, 18, 20, 22]) \n```", "```py\n>>> import matplotlib.pyplot as plt\n\n# If you're using Jupyter Notebook, you may also want to run the following\n# line of code to display your code in the notebook:\n\n%matplotlib inline \n```", "```py\n>>> plt.plot(a)\n\n# If you are running from a command line, you may need to do this:\n# >>> plt.show() \n```", "```py\n>>> x = np.linspace(0, 5, 20)\n>>> y = np.linspace(0, 10, 20)\n>>> plt.plot(x, y, 'purple') # line\n>>> plt.plot(x, y, 'o')      # dots \n```", "```py\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(projection='3d')\n>>> X = np.arange(-5, 5, 0.15)\n>>> Y = np.arange(-5, 5, 0.15)\n>>> X, Y = np.meshgrid(X, Y)\n>>> R = np.sqrt(X**2 + Y**2)\n>>> Z = np.sin(R)\n\n>>> ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis') \n```"]