["```py\nscipy.stats.ttest_1samp(a, popmean, axis=0, nan_policy='propagate', alternative='two-sided', *, keepdims=False)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> rng = np.random.default_rng()\n>>> rvs = stats.uniform.rvs(size=50, random_state=rng)\n>>> stats.ttest_1samp(rvs, popmean=0.5)\nTtestResult(statistic=2.456308468440, pvalue=0.017628209047638, df=49) \n```", "```py\n>>> rvs = stats.norm.rvs(size=50, random_state=rng)\n>>> stats.ttest_1samp(rvs, popmean=0.5)\nTtestResult(statistic=-7.433605518875, pvalue=1.416760157221e-09, df=49) \n```", "```py\n>>> stats.ttest_1samp(rvs, popmean=0.5, alternative='greater')\nTtestResult(statistic=-7.433605518875, pvalue=0.99999999929, df=49) \n```", "```py\n>>> rvs = stats.uniform.rvs(size=(100, 50), random_state=rng)\n>>> res = stats.ttest_1samp(rvs, popmean=0.5, axis=1)\n>>> np.sum(res.pvalue < 0.01)\n1 \n```", "```py\n>>> rvs = stats.norm.rvs(size=50, random_state=rng)\n>>> res = stats.ttest_1samp(rvs, popmean=0)\n>>> ci = res.confidence_interval(confidence_level=0.95)\n>>> ci\nConfidenceInterval(low=-0.3193887540880017, high=0.2898583388980972) \n```", "```py\n>>> res = stats.ttest_1samp(rvs, popmean=ci.low)\n>>> np.testing.assert_allclose(res.pvalue, 0.05)\n>>> res = stats.ttest_1samp(rvs, popmean=ci.high)\n>>> np.testing.assert_allclose(res.pvalue, 0.05) \n```", "```py\n>>> rvs = stats.norm.rvs(size=(50, 1000), loc=1, random_state=rng)\n>>> res = stats.ttest_1samp(rvs, popmean=0)\n>>> ci = res.confidence_interval()\n>>> contains_pop_mean = (ci.low < 1) & (ci.high > 1)\n>>> contains_pop_mean.sum()\n953 \n```"]