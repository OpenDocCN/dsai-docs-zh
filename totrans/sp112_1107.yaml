- en: scipy.stats.rv_discrete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.rv_discrete.html#scipy.stats.rv_discrete)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A generic discrete random variable class meant for subclassing.
  prefs: []
  type: TYPE_NORMAL
- en: '[`rv_discrete`](#scipy.stats.rv_discrete "scipy.stats.rv_discrete") is a base
    class to construct specific distribution classes and instances for discrete random
    variables. It can also be used to construct an arbitrary distribution defined
    by a list of support points and corresponding probabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lower bound of the support of the distribution, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: '**b**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upper bound of the support of the distribution, default: plus infinity'
  prefs: []
  type: TYPE_NORMAL
- en: '**moment_tol**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The tolerance for the generic calculation of moments.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**tuple of two array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: '`(xk, pk)` where `xk` are integers and `pk` are the non-zero probabilities
    between 0 and 1 with `sum(pk) = 1`. `xk` and `pk` must have the same shape, and
    `xk` must be unique.'
  prefs: []
  type: TYPE_NORMAL
- en: '**inc**integer, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Increment for the support of the distribution. Default is 1\. (other values
    have not been tested)
  prefs: []
  type: TYPE_NORMAL
- en: '**badvalue**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The value in a result arrays that indicates a value that for which some argument
    restriction is violated, default is np.nan.
  prefs: []
  type: TYPE_NORMAL
- en: '**name**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the instance. This string is used to construct the default example
    for distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '**longname**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'This string is used as part of the first line of the docstring returned when
    a subclass has no docstring of its own. Note: *longname* exists for backwards
    compatibility, do not use for new subclasses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**shapes**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the distribution. For example “m, n” for a distribution that takes
    two integers as the two shape arguments for all its methods If not provided, shape
    parameters will be inferred from the signatures of the private methods, `_pmf`
    and `_cdf` of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, [`numpy.random.Generator`](https://numpy.org/devdocs/reference/random/generator.html#numpy.random.Generator
    "(in NumPy v2.0.dev0)"), [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)")}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *seed* is None (or *np.random*), the [`numpy.random.RandomState`](https://numpy.org/devdocs/reference/random/legacy.html#numpy.random.RandomState
    "(in NumPy v2.0.dev0)") singleton is used. If *seed* is an int, a new `RandomState`
    instance is used, seeded with *seed*. If *seed* is already a `Generator` or `RandomState`
    instance then that instance is used.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This class is similar to [`rv_continuous`](scipy.stats.rv_continuous.html#scipy.stats.rv_continuous
    "scipy.stats.rv_continuous"). Whether a shape parameter is valid is decided by
    an `_argcheck` method (which defaults to checking that its arguments are strictly
    positive.) The main differences are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The support of the distribution is a set of integers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of the probability density function, `pdf` (and the corresponding private
    `_pdf`), this class defines the *probability mass function*, [`pmf`](scipy.stats.rv_discrete.pmf.html#scipy.stats.rv_discrete.pmf
    "scipy.stats.rv_discrete.pmf") (and the corresponding private `_pmf`.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no `scale` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default implementations of methods (e.g. `_cdf`) are not designed for distributions
    with support that is unbounded below (i.e. `a=-np.inf`), so they must be overridden.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a new discrete distribution, we would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'and create an instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that above we defined the Poisson distribution in the standard form. Shifting
    the distribution can be done by providing the `loc` parameter to the methods of
    the instance. For example, `poisson.pmf(x, mu, loc)` delegates the work to `poisson._pmf(x-loc,
    mu)`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discrete distributions from a list of probabilities**'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can construct an arbitrary discrete rv defined on a finite
    set of values `xk` with `Prob{X=xk} = pk` by using the `values` keyword argument
    to the [`rv_discrete`](#scipy.stats.rv_discrete "scipy.stats.rv_discrete") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deepcopying / Pickling**'
  prefs: []
  type: TYPE_NORMAL
- en: If a distribution or frozen distribution is deepcopied (pickled/unpickled, etc.),
    any underlying random number generator is deepcopied with it. An implication is
    that if a distribution relies on the singleton RandomState before copying, it
    will rely on a copy of that random state after copying, and `np.random.seed` will
    no longer control the state.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom made discrete distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-rv_discrete-1_00_00.png](../Images/36d0ae7bb6724a8f6921bd7dd7a347f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Random number generation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`random_state`](scipy.stats.rv_discrete.random_state.html#scipy.stats.rv_discrete.random_state
    "scipy.stats.rv_discrete.random_state")'
  prefs: []
  type: TYPE_NORMAL
- en: Get or set the generator object for generating random variates.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`rvs`](scipy.stats.rv_discrete.rvs.html#scipy.stats.rv_discrete.rvs "scipy.stats.rv_discrete.rvs")(*args, **kwargs)
    | Random variates of given type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`pmf`](scipy.stats.rv_discrete.pmf.html#scipy.stats.rv_discrete.pmf "scipy.stats.rv_discrete.pmf")(k, *args, **kwds)
    | Probability mass function at k of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logpmf`](scipy.stats.rv_discrete.logpmf.html#scipy.stats.rv_discrete.logpmf
    "scipy.stats.rv_discrete.logpmf")(k, *args, **kwds) | Log of the probability mass
    function at k of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cdf`](scipy.stats.rv_discrete.cdf.html#scipy.stats.rv_discrete.cdf "scipy.stats.rv_discrete.cdf")(k, *args, **kwds)
    | Cumulative distribution function of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logcdf`](scipy.stats.rv_discrete.logcdf.html#scipy.stats.rv_discrete.logcdf
    "scipy.stats.rv_discrete.logcdf")(k, *args, **kwds) | Log of the cumulative distribution
    function at k of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sf`](scipy.stats.rv_discrete.sf.html#scipy.stats.rv_discrete.sf "scipy.stats.rv_discrete.sf")(k, *args, **kwds)
    | Survival function (1 - [`cdf`](scipy.stats.rv_discrete.cdf.html#scipy.stats.rv_discrete.cdf
    "scipy.stats.rv_discrete.cdf")) at k of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`logsf`](scipy.stats.rv_discrete.logsf.html#scipy.stats.rv_discrete.logsf
    "scipy.stats.rv_discrete.logsf")(k, *args, **kwds) | Log of the survival function
    of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ppf`](scipy.stats.rv_discrete.ppf.html#scipy.stats.rv_discrete.ppf "scipy.stats.rv_discrete.ppf")(q, *args, **kwds)
    | Percent point function (inverse of [`cdf`](scipy.stats.rv_discrete.cdf.html#scipy.stats.rv_discrete.cdf
    "scipy.stats.rv_discrete.cdf")) at q of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`isf`](scipy.stats.rv_discrete.isf.html#scipy.stats.rv_discrete.isf "scipy.stats.rv_discrete.isf")(q, *args, **kwds)
    | Inverse survival function (inverse of [`sf`](scipy.stats.rv_discrete.sf.html#scipy.stats.rv_discrete.sf
    "scipy.stats.rv_discrete.sf")) at q of the given RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`moment`](scipy.stats.rv_discrete.moment.html#scipy.stats.rv_discrete.moment
    "scipy.stats.rv_discrete.moment")(order, *args, **kwds) | non-central moment of
    distribution of specified order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`stats`](scipy.stats.rv_discrete.stats.html#scipy.stats.rv_discrete.stats
    "scipy.stats.rv_discrete.stats")(*args, **kwds) | Some statistics of the given
    RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`entropy`](scipy.stats.rv_discrete.entropy.html#scipy.stats.rv_discrete.entropy
    "scipy.stats.rv_discrete.entropy")(*args, **kwds) | Differential entropy of the
    RV. |'
  prefs: []
  type: TYPE_TB
- en: '| [`expect`](scipy.stats.rv_discrete.expect.html#scipy.stats.rv_discrete.expect
    "scipy.stats.rv_discrete.expect")([func, args, loc, lb, ub, ...]) | Calculate
    expected value of a function with respect to the distribution for discrete distribution
    by numerical summation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`median`](scipy.stats.rv_discrete.median.html#scipy.stats.rv_discrete.median
    "scipy.stats.rv_discrete.median")(*args, **kwds) | Median of the distribution.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](scipy.stats.rv_discrete.mean.html#scipy.stats.rv_discrete.mean "scipy.stats.rv_discrete.mean")(*args, **kwds)
    | Mean of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](scipy.stats.rv_discrete.std.html#scipy.stats.rv_discrete.std "scipy.stats.rv_discrete.std")(*args, **kwds)
    | Standard deviation of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](scipy.stats.rv_discrete.var.html#scipy.stats.rv_discrete.var "scipy.stats.rv_discrete.var")(*args, **kwds)
    | Variance of the distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| [`interval`](scipy.stats.rv_discrete.interval.html#scipy.stats.rv_discrete.interval
    "scipy.stats.rv_discrete.interval")(confidence, *args, **kwds) | Confidence interval
    with equal areas around the median. |'
  prefs: []
  type: TYPE_TB
- en: '| [`__call__`](scipy.stats.rv_discrete.__call__.html#scipy.stats.rv_discrete.__call__
    "scipy.stats.rv_discrete.__call__")(*args, **kwds) | Freeze the distribution for
    the given arguments. |'
  prefs: []
  type: TYPE_TB
- en: '| [`support`](scipy.stats.rv_discrete.support.html#scipy.stats.rv_discrete.support
    "scipy.stats.rv_discrete.support")(*args, **kwargs) | Support of the distribution.
    |'
  prefs: []
  type: TYPE_TB
