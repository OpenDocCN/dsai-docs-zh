- en: numpy.matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.matrix.html](https://numpy.org/doc/1.26/reference/generated/numpy.matrix.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is no longer recommended to use this class, even for linear algebra. Instead
    use regular arrays. The class may be removed in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a matrix from an array-like object, or from a string of data. A matrix
    is a specialized 2-D array that retains its 2-D nature through operations. It
    has certain special operators, such as `*` (matrix multiplication) and `**` (matrix
    power).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array_like or string'
  prefs: []
  type: TYPE_NORMAL
- en: If [`data`](numpy.matrix.data.html#numpy.matrix.data "numpy.matrix.data") is
    a string, it is interpreted as a matrix with commas or spaces separating columns,
    and semicolons separating rows.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type of the output matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**bool'
  prefs: []
  type: TYPE_NORMAL
- en: If [`data`](numpy.matrix.data.html#numpy.matrix.data "numpy.matrix.data") is
    already an [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray"), then
    this flag determines whether the data is copied (the default), or whether a view
    is constructed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`array`](numpy.array.html#numpy.array "numpy.array")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`A`](numpy.matrix.A.html#numpy.matrix.A "numpy.matrix.A")'
  prefs: []
  type: TYPE_NORMAL
- en: Return *self* as an [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`A1`](numpy.matrix.A1.html#numpy.matrix.A1 "numpy.matrix.A1")'
  prefs: []
  type: TYPE_NORMAL
- en: Return *self* as a flattened [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
  prefs: []
  type: TYPE_NORMAL
- en: '[`H`](numpy.matrix.H.html#numpy.matrix.H "numpy.matrix.H")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the (complex) conjugate transpose of *self*.
  prefs: []
  type: TYPE_NORMAL
- en: '[`I`](numpy.matrix.I.html#numpy.matrix.I "numpy.matrix.I")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the (multiplicative) inverse of invertible *self*.
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](numpy.matrix.T.html#numpy.matrix.T "numpy.matrix.T")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the transpose of the matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[`base`](numpy.matrix.base.html#numpy.matrix.base "numpy.matrix.base")'
  prefs: []
  type: TYPE_NORMAL
- en: Base object if memory is from some other object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ctypes`](numpy.matrix.ctypes.html#numpy.matrix.ctypes "numpy.matrix.ctypes")'
  prefs: []
  type: TYPE_NORMAL
- en: An object to simplify the interaction of the array with the ctypes module.
  prefs: []
  type: TYPE_NORMAL
- en: '[`data`](numpy.matrix.data.html#numpy.matrix.data "numpy.matrix.data")'
  prefs: []
  type: TYPE_NORMAL
- en: Python buffer object pointing to the start of the array’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type of the array’s elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flags`](numpy.matrix.flags.html#numpy.matrix.flags "numpy.matrix.flags")'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the memory layout of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flat`](numpy.matrix.flat.html#numpy.matrix.flat "numpy.matrix.flat")'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D iterator over the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
  prefs: []
  type: TYPE_NORMAL
- en: The imaginary part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`itemsize`](numpy.matrix.itemsize.html#numpy.matrix.itemsize "numpy.matrix.itemsize")'
  prefs: []
  type: TYPE_NORMAL
- en: Length of one array element in bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbytes`](numpy.matrix.nbytes.html#numpy.matrix.nbytes "numpy.matrix.nbytes")'
  prefs: []
  type: TYPE_NORMAL
- en: Total bytes consumed by the elements of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndim`](numpy.matrix.ndim.html#numpy.matrix.ndim "numpy.matrix.ndim")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")'
  prefs: []
  type: TYPE_NORMAL
- en: The real part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](numpy.matrix.size.html#numpy.matrix.size "numpy.matrix.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements in the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`strides`](numpy.matrix.strides.html#numpy.matrix.strides "numpy.matrix.strides")'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of bytes to step in each dimension when traversing an array.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`all`](numpy.matrix.all.html#numpy.matrix.all "numpy.matrix.all")([axis, out])
    | Test whether all matrix elements along a given axis evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](numpy.matrix.any.html#numpy.matrix.any "numpy.matrix.any")([axis, out])
    | Test whether any array element along a given axis evaluates to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](numpy.matrix.argmax.html#numpy.matrix.argmax "numpy.matrix.argmax")([axis, out])
    | Indexes of the maximum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](numpy.matrix.argmin.html#numpy.matrix.argmin "numpy.matrix.argmin")([axis, out])
    | Indexes of the minimum values along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argpartition`](numpy.matrix.argpartition.html#numpy.matrix.argpartition
    "numpy.matrix.argpartition")(kth[, axis, kind, order]) | Returns the indices that
    would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](numpy.matrix.argsort.html#numpy.matrix.argsort "numpy.matrix.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](numpy.matrix.astype.html#numpy.matrix.astype "numpy.matrix.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`byteswap`](numpy.matrix.byteswap.html#numpy.matrix.byteswap "numpy.matrix.byteswap")([inplace])
    | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`choose`](numpy.matrix.choose.html#numpy.matrix.choose "numpy.matrix.choose")(choices[, out, mode])
    | Use an index array to construct a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](numpy.matrix.clip.html#numpy.matrix.clip "numpy.matrix.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compress`](numpy.matrix.compress.html#numpy.matrix.compress "numpy.matrix.compress")(condition[, axis, out])
    | Return selected slices of this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](numpy.matrix.conj.html#numpy.matrix.conj "numpy.matrix.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](numpy.matrix.conjugate.html#numpy.matrix.conjugate "numpy.matrix.conjugate")()
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](numpy.matrix.copy.html#numpy.matrix.copy "numpy.matrix.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumprod`](numpy.matrix.cumprod.html#numpy.matrix.cumprod "numpy.matrix.cumprod")([axis, dtype, out])
    | Return the cumulative product of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumsum`](numpy.matrix.cumsum.html#numpy.matrix.cumsum "numpy.matrix.cumsum")([axis, dtype, out])
    | Return the cumulative sum of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](numpy.matrix.diagonal.html#numpy.matrix.diagonal "numpy.matrix.diagonal")([offset, axis1, axis2])
    | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dump`](numpy.matrix.dump.html#numpy.matrix.dump "numpy.matrix.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dumps`](numpy.matrix.dumps.html#numpy.matrix.dumps "numpy.matrix.dumps")()
    | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill`](numpy.matrix.fill.html#numpy.matrix.fill "numpy.matrix.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatten`](numpy.matrix.flatten.html#numpy.matrix.flatten "numpy.matrix.flatten")([order])
    | Return a flattened copy of the matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getA`](numpy.matrix.getA.html#numpy.matrix.getA "numpy.matrix.getA")()
    | Return *self* as an [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getA1`](numpy.matrix.getA1.html#numpy.matrix.getA1 "numpy.matrix.getA1")()
    | Return *self* as a flattened [`ndarray`](numpy.ndarray.html#numpy.ndarray "numpy.ndarray").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`getH`](numpy.matrix.getH.html#numpy.matrix.getH "numpy.matrix.getH")()
    | Returns the (complex) conjugate transpose of *self*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getI`](numpy.matrix.getI.html#numpy.matrix.getI "numpy.matrix.getI")()
    | Returns the (multiplicative) inverse of invertible *self*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getT`](numpy.matrix.getT.html#numpy.matrix.getT "numpy.matrix.getT")()
    | Returns the transpose of the matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getfield`](numpy.matrix.getfield.html#numpy.matrix.getfield "numpy.matrix.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`item`](numpy.matrix.item.html#numpy.matrix.item "numpy.matrix.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itemset`](numpy.matrix.itemset.html#numpy.matrix.itemset "numpy.matrix.itemset")(*args)
    | Insert scalar into an array (scalar is cast to array''s dtype, if possible)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](numpy.matrix.max.html#numpy.matrix.max "numpy.matrix.max")([axis, out])
    | Return the maximum value along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](numpy.matrix.mean.html#numpy.matrix.mean "numpy.matrix.mean")([axis, dtype, out])
    | Returns the average of the matrix elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](numpy.matrix.min.html#numpy.matrix.min "numpy.matrix.min")([axis, out])
    | Return the minimum value along an axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`newbyteorder`](numpy.matrix.newbyteorder.html#numpy.matrix.newbyteorder
    "numpy.matrix.newbyteorder")([new_order]) | Return the array with the same data
    viewed with a different byte order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](numpy.matrix.nonzero.html#numpy.matrix.nonzero "numpy.matrix.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](numpy.matrix.partition.html#numpy.matrix.partition "numpy.matrix.partition")(kth[, axis, kind, order])
    | Rearranges the elements in the array in such a way that the value of the element
    in kth position is in the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prod`](numpy.matrix.prod.html#numpy.matrix.prod "numpy.matrix.prod")([axis, dtype, out])
    | Return the product of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ptp`](numpy.matrix.ptp.html#numpy.matrix.ptp "numpy.matrix.ptp")([axis, out])
    | Peak-to-peak (maximum - minimum) value along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put`](numpy.matrix.put.html#numpy.matrix.put "numpy.matrix.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](numpy.matrix.ravel.html#numpy.matrix.ravel "numpy.matrix.ravel")([order])
    | Return a flattened matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](numpy.matrix.repeat.html#numpy.matrix.repeat "numpy.matrix.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](numpy.matrix.reshape.html#numpy.matrix.reshape "numpy.matrix.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](numpy.matrix.resize.html#numpy.matrix.resize "numpy.matrix.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](numpy.matrix.round.html#numpy.matrix.round "numpy.matrix.round")([decimals, out])
    | Return *a* with each element rounded to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](numpy.matrix.searchsorted.html#numpy.matrix.searchsorted
    "numpy.matrix.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setfield`](numpy.matrix.setfield.html#numpy.matrix.setfield "numpy.matrix.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setflags`](numpy.matrix.setflags.html#numpy.matrix.setflags "numpy.matrix.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort`](numpy.matrix.sort.html#numpy.matrix.sort "numpy.matrix.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`squeeze`](numpy.matrix.squeeze.html#numpy.matrix.squeeze "numpy.matrix.squeeze")([axis])
    | Return a possibly reshaped matrix. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](numpy.matrix.std.html#numpy.matrix.std "numpy.matrix.std")([axis, dtype, out, ddof])
    | Return the standard deviation of the array elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](numpy.matrix.sum.html#numpy.matrix.sum "numpy.matrix.sum")([axis, dtype, out])
    | Returns the sum of the matrix elements, along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapaxes`](numpy.matrix.swapaxes.html#numpy.matrix.swapaxes "numpy.matrix.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take`](numpy.matrix.take.html#numpy.matrix.take "numpy.matrix.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobytes`](numpy.matrix.tobytes.html#numpy.matrix.tobytes "numpy.matrix.tobytes")([order])
    | Construct Python bytes containing the raw data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tofile`](numpy.matrix.tofile.html#numpy.matrix.tofile "numpy.matrix.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolist`](numpy.matrix.tolist.html#numpy.matrix.tolist "numpy.matrix.tolist")()
    | Return the matrix as a (possibly nested) list. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tostring`](numpy.matrix.tostring.html#numpy.matrix.tostring "numpy.matrix.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.matrix.tobytes.html#numpy.matrix.tobytes
    "numpy.matrix.tobytes"), with exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](numpy.matrix.trace.html#numpy.matrix.trace "numpy.matrix.trace")([offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](numpy.matrix.transpose.html#numpy.matrix.transpose "numpy.matrix.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](numpy.matrix.var.html#numpy.matrix.var "numpy.matrix.var")([axis, dtype, out, ddof])
    | Returns the variance of the matrix elements, along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`view`](numpy.matrix.view.html#numpy.matrix.view "numpy.matrix.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| **dot** |  |'
  prefs: []
  type: TYPE_TB
