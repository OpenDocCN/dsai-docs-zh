- en: Reviewer guidelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评审员指南
- en: 原文：[https://numpy.org/doc/1.26/dev/reviewer_guidelines.html](https://numpy.org/doc/1.26/dev/reviewer_guidelines.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/dev/reviewer_guidelines.html](https://numpy.org/doc/1.26/dev/reviewer_guidelines.html)
- en: Reviewing open pull requests (PRs) helps move the project forward. We encourage
    people outside the project to get involved as well; it’s a great way to get familiar
    with the codebase.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 评审未完成的拉取请求（PR）有助于推动项目向前发展。我们也鼓励项目之外的人参与进来；这是熟悉代码库的好方法。
- en: Who can be a reviewer?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁可以成为评审员？
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 评审可以来自 NumPy 团队之外 - 我们欢迎来自领域专家（例如 *linalg* 或 *fft*）或其他项目维护者的贡献。你不需要是 NumPy 维护者（具有合并
    PR 权限的 NumPy 团队成员）才能进行评审。
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还不认识你，请在[邮件列表或 Slack](https://numpy.org/community/)中介绍自己，然后再开始评审拉取请求。
- en: Communication Guidelines
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交流指南
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每一个 PR，无论好坏，都是一种慷慨的行为。以积极的评论开篇将有助于作者感到受到了奖励，你后续的评论可能会被更清晰地听到。你也会感觉良好。
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能的话，从大的问题开始，这样作者就知道它们已经被理解了。抵制立即逐行查看或以小型普遍问题开头的诱惑。
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是项目的代表，而 NumPy 在一段时间前决定了[它将成为何种项目](https://numpy.org/code-of-conduct/)：开放、富有同理心、欢迎、友好和耐心。对贡献者要[友善](https://youtu.be/tzFWz5fiVKU?t=49m30s)。
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让完美成为好的敌人，特别是对于文档。如果你发现自己提出了许多小建议，或者对样式或语法过于吹毛求疵，请考虑在解决所有重要问题后合并当前的 PR。然后，要么直接推送一个提交（如果你是维护者），要么自己开启一个跟进
    PR。
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在评审回复中需要帮助，请查看一些[标准回复](#saved-replies)。
- en: Reviewer Checklist
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评审员清单
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有条件下，预期行为是否清晰？一些需要注意的事项：
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于意外输入，如空数组或 nan/inf 值，会发生什么？
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否测试了轴或形状参数是 *int* 还是 *tuples*？
- en: Are unusual *dtypes* tested if a function supports those?
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个函数支持那些不寻常的 *dtypes*，那么是否测试了它们？
- en: Should variable names be improved for clarity or consistency?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名称应该改进以提高清晰度或一致性吗？
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该添加注释，还是移除那些无用或多余的注释？
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档是否遵循了[NumPy 指南](howto-docs.html#howto-document)？文档字符串是否格式正确？
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否遵循了 NumPy 的[风格指南](index.html#stylistic-guidelines)？
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是维护者，并且从 PR 描述中不明显，那么在合并消息中添加一个简短的说明，说明分支的作用，如果关闭一个问题，还要添加“Closes gh-123”，其中
    123 是问题编号。
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于代码更改，至少有一个维护者（即具有提交权限的人）应审查并批准拉取请求。如果您是第一个审查 PR 并同意更改，请使用 GitHub 的 [批准审查](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    工具标记为批准。如果 PR 很简单，例如明显地是正确的 bug 修复，可以立即合并。如果更复杂或更改了公共 API，请将其保持开放至少几天，以便其他维护者有机会审查。
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您是已经批准的 PR 的后续审阅者，请使用与新 PR 相同的审查方法（关注更大的问题，抵制只是加一些琐碎意见的诱惑）。如果您有提交权限并认为不需要进行更多审查，请合并
    PR。
- en: For maintainers
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于维护者
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并 PR 之前，请确保所有自动化 CI 测试通过，并且 [文档构建](index.html#building-docs) 无任何错误。
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出现合并冲突时，请要求 PR 提交者在主分支上进行 [rebase 操作](development_workflow.html#rebasing-on-main)。
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于新增功能或存在某种复杂性的 PR，请在合并之前等待至少一两天。这样，其他人有机会在代码合并之前发表评论。考虑将其添加到发布说明中。
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并贡献时，提交者负责确保这些满足 [NumPy 的开发流程准则](index.html#guidelines) 中列出的要求。此外，请检查新功能和向后兼容性断裂是否已在
    [numpy-discussion 邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)
    上讨论。
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并 PR 之前，对于您认为太混乱的 PR，压缩提交或清理提交消息是可以的。在此过程中，请记住保留原始作者的姓名。确保提交消息遵循 [NumPy 的规则](development_workflow.html#writing-the-commit-message)。
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要拒绝一个 PR 时：如果非常明显，您可以直接关闭它并解释原因。如果不是，那么首先解释为什么认为该 PR 不适合包含在 NumPy 中，然后让第二个
    committer 发表评论或关闭。
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 PR 提交者在 6 个月内未对您的评论作出回应，请将相关 PR 移至带有“inactive”标签的非活跃类别。在这一点上，维护者可以关闭该 PR。如果有兴趣完成正在考虑的
    PR，可以随时表示，无需等待 6 个月，只需发表评论即可。
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励维护者在合并之前进行必要的小改动（例如，修复代码风格或语法错误）。如果某个 PR 变得不活跃，维护者可能会进行较大的更改。请记住，PR 是贡献者与审阅者之间的合作，有时直接推送是完成它的最佳方式。
- en: API Changes
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 更改
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，大多数公共 API 更改应提前讨论，并经常与更广泛的观众（邮件列表上，甚至通过 NEP）讨论。
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于公共 C-API 的更改，请注意 NumPy C-API 具有向后兼容性，因此任何添加必须与先前版本兼容。如果情况不是这样，必须添加保护。
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 `PyUnicodeScalarObject` 结构包含以下内容：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `buffer_fmt` 字段是在 NumPy 1.20 中添加到其末尾的（所有先前的字段保持 ABI 兼容性）。同样，`numpy/core/code_generators/numpy_api.py`
    中添加到 API 表中的任何函数必须使用 `MinVersion` 注释。例如：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 仅有标题功能（如新的宏）通常无需受到保护。
- en: GitHub Workflow
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub 工作流
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，请根据需要使用 GitHub 上的工作流跟踪功能：
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成审查后，如果您想要请求提交者进行更改，请将您的审查状态更改为“需要更改”。您可以在 GitHub 的 PR 页面上的“文件更改”选项卡中进行此操作，点击右上角的“审查更改”按钮。
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对当前情况感到满意，请将拉取请求标记为已批准（与更改请求相同方式）。另外（对于维护者）：如果您认为准备好合并拉取请求，可直接合并。
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在自己的机器上检出拉取请求代码的副本可能会有所帮助，这样您可以在本地测试。您可以使用[GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)通过点击
    PR 页面右上角的“Open with”按钮来实现这一点。
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的[开发环境](development_environment.html#development-environment)已设置好，现在可以构建代码并进行测试了。
- en: '## Standard replies for reviewing'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '## 审查的标准回复'
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将其中一些保存在 GitHub 的[保存的回复](https://github.com/settings/replies/)中进行审查：
- en: '**Usage question**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用问题**'
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**You’re welcome to update the docs**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**欢迎您更新文档**'
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Self-contained example for bug**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**提供关于 bug 的自包含示例**'
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Software versions**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件版本**'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: python -c 'import numpy; print(numpy.version.version)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: python -c 'import numpy; print(numpy.version.version)'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Code blocks**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码块**'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Linking to code**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**链接至代码**'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Better description and title**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的描述和标题**'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Regression test needed**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要回归测试**'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Don’t change unrelated**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**请勿更改无关内容**'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Who can be a reviewer?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁可以成为审查人员？
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 审查可以来自 NumPy 团队之外 - 我们欢迎来自领域专家（例如，*linalg* 或 *fft*）或其他项目的维护者的贡献。您不需要成为 NumPy
    维护者（拥有合并 PR 权限的 NumPy 团队成员）才能进行审查。
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还不认识您，请考虑在开始审查拉取请求之前在[邮件列表或 Slack](https://numpy.org/community/)中介绍自己。
- en: Communication Guidelines
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沟通准则
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 PR，无论好坏，都是一种慷慨的行为。以积极的评论开头将帮助作者感到受到奖励，您随后的评论可能会被更清楚地听取。您也会感觉良好。
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能的话，首先处理重大问题，这样作者就知道它们已被理解。抵制立即逐行查看或以小而普遍的问题开始的诱惑。
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是项目的代表，NumPy在一段时间前决定[它将成为的项目类型](https://numpy.org/code-of-conduct/)：开放、有同理心、友好、热情和耐心。对贡献者要[友善](https://youtu.be/tzFWz5fiVKU?t=49m30s)。
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让完美成为好的敌人，特别是对于文档。如果发现自己提出了许多小建议，或者在样式或语法方面过于吹毛求疵，请考虑在解决所有重要问题后合并当前PR。然后，要么直接推送一个提交（如果你是维护者），要么自己打开一个后续PR。
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在审查中需要帮助编写回复，请查看一些[用于审阅的标准回复](#saved-replies)。
- en: Reviewer Checklist
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审阅者清单
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有条件下都清晰地了解预期行为吗？一些需要注意的事项：
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于意外输入（如空数组或nan/inf值），会发生什么？
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轴或形状参数是否已经测试过为*int*或*tuple*？
- en: Are unusual *dtypes* tested if a function supports those?
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果函数支持不寻常的*dtypes*，是否已经测试过？
- en: Should variable names be improved for clarity or consistency?
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名称是否应当为了明确性或一致性而改进？
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否应添加评论，还是删除不必要或多余的评论？
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档是否遵循[NumPy指南](howto-docs.html#howto-document)？文档字符串是否格式正确？
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否遵循NumPy的[风格指南](index.html#stylistic-guidelines)？
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是一位维护者，并且从PR描述中不明显，请在合并消息中添加对分支所做的简短说明，并且，如果关闭了一个问题，请同时添加“Closes gh-123”，其中123是问题编号。
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于代码更改，至少有一位维护者（即有提交权限的人）应审查并批准拉取请求。如果您是第一个审查PR并且同意更改，请使用GitHub [批准审阅](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    工具标记。如果PR很简单，例如明显正确的错误修复，可以立即合并。如果更复杂或更改了公共API，请至少保持几天的开放状态，以便其他维护者有机会审查。
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你是已经批准的PR的后续审阅者，请使用与新PR相同的审阅方法（关注更大的问题，抑制只添加一些微不足道的问题的诱惑）。如果你有提交权限并认为不再需要审查，请合并PR。
- en: For maintainers
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于维护者
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并PR之前，请确保所有自动化CI测试都通过，并且[文档构建](index.html#building-docs)没有任何错误。
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果出现合并冲突，请要求PR提交者对主干进行[变基](development_workflow.html#rebasing-on-main)。
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于添加新功能或在某种程度上复杂的PR，请至少等待一到两天再合并。这样，其他人在代码合并之前有机会发表评论。考虑将其添加到发布说明中。
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并贡献时，提交者负责确保这些符合NumPy的[开发过程准则](index.html#guidelines)的要求。此外，请检查在[numpy-discussion邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)上讨论了新功能和向后兼容性的突破。
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并您认为太混乱的PR的提交或整理提交消息都可以。在执行此操作时，请确保保留原始作者的姓名。确保提交消息遵循[NumPy的规则](development_workflow.html#writing-the-commit-message)。
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要拒绝一个PR时：如果情况非常明显，您可以关闭它并解释原因。如果不是，那么首先解释为什么您认为PR不适合包含在NumPy中，然后让第二个提交者评论或关闭，这是一个很好的主意。
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果PR提交者在6个月内不回应您的评论，请将相关PR移至不活跃类别，并附上“不活跃”标签。此时，维护者可以关闭PR。如果有任何兴趣完成正在考虑的PR，则可以随时通过评论指示，无需等待6个月。
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励维护者在合并之前只需要进行小的更改（例如修复代码风格或语法错误）时完成PR。如果一个PR变得不活跃，维护者可以进行较大的更改。请记住，PR是贡献者与审阅者之间的合作，有时直接推动是完成它的最佳方式。
- en: API Changes
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API更改
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，大多数公共API更改应提前进行讨论，并通常应与更广泛的受众（在邮件列表中，甚至通过NEP）进行讨论。
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对公共C-API的更改，请注意NumPy C-API是向后兼容的，因此任何添加必须与先前版本ABI兼容。如果不是这种情况，您必须添加一个保护。
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如`PyUnicodeScalarObject`结构包含以下内容：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`buffer_fmt`字段在NumPy 1.20中添加到其末尾（所有先前字段保持ABI兼容）。同样，必须在`numpy/core/code_generators/numpy_api.py`中的API表中添加函数时使用`MinVersion`注释。例如：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通常只有头部功能（例如新宏）不需要受到保护。
- en: GitHub Workflow
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub工作流
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，请根据需要在GitHub上使用工作流跟踪功能：
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完成审查后，如果您希望要求提交者进行更改，请将您的审查状态更改为“请求更改”。这可以在GitHub的PR页面上的“文件更改”选项卡上完成，审查更改（右上角的按钮）。
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对当前状态感到满意，请将拉取请求标记为已批准（与请求更改相同）。另外（对于维护者）：如果您认为它已经准备好合并，请合并拉取请求。
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可能对您有帮助的是在自己的计算机上检出拉取请求的代码副本，以便在本地实验。您可以使用[GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)通过单击
    PR 页面右上角的“打开方式”按钮来实现这一点。
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经设置好[开发环境](development_environment.html#development-environment)，现在您可以构建代码并进行测试。
- en: For maintainers
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于维护者
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有自动化 CI 测试通过才能合并 PR，并且[文档构建](index.html#building-docs)没有任何错误。
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出现合并冲突时，请请求 PR 提交者[基于主分支进行变基](development_workflow.html#rebasing-on-main)。
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于添加新功能或在某种程度上复杂的 PR，请等待至少一天或两天才合并。这样，其他人有机会在代码合并之前发表评论。考虑将其添加到发布说明中。
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并贡献时，提交者负责确保这些符合 NumPy 的[开发流程指南](index.html#guidelines)。还要检查新功能和向后兼容性破坏是否在[numpy-discussion
    邮件列表](https://mail.python.org/mailman/listinfo/numpy-discussion)上进行了讨论。
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并您认为混乱的 PR 的提交记录或清理提交消息是可以接受的。在此过程中请记得保留原作者的姓名。确保提交消息遵循[NumPy 的规则](development_workflow.html#writing-the-commit-message)。
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要拒绝一个 PR 时：如果非常明显，可以直接关闭并解释原因。如果不够明显，那么先解释为什么您认为这个 PR 不适合包含在 NumPy 中，然后让第二位提交者发表评论或关闭。
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 PR 提交者在 6 个月内没有回复您的评论，请将相关 PR 移动到不活跃类别，并附上“不活跃”标签。此时，维护者可以关闭该 PR。如果有兴趣完成考虑中的
    PR，可以通过评论随时表示，而不必等待 6 个月。
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励维护者在合并之前仅需要进行少量更改（例如修复代码风格或语法错误）即可完成 PR。如果 PR 变得不活跃，维护者可以进行较大的更改。请记住，PR 是贡献者和审阅者之间的协作，有时直接推送是完成
    PR 的最佳方式。
- en: API Changes
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 更改
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，大多数公共 API 更改应提前讨论，通常需要与更广泛的受众（例如邮件列表或甚至通过 NEP）讨论。
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于公共C-API的更改，请注意NumPy C-API向后兼容，因此任何添加都必须与上一版本的ABI兼容。如果不是这种情况，您必须添加保护。
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 例如`PyUnicodeScalarObject`结构包含以下内容：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`buffer_fmt`字段是在NumPy 1.20中添加到其末尾的（所有以前的字段仍然与ABI兼容）。同样，任何添加到`numpy/core/code_generators/numpy_api.py`中的API表的函数必须使用`MinVersion`注释。例如：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 仅包含头文件功能（例如新的宏）通常不需要保护。
- en: GitHub Workflow
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub工作流程
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查拉取请求时，请在GitHub上使用适当的工作流程跟踪功能：
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完成审查后，如果您想要要求提交者做出更改，请将您的审查状态更改为“Request changes”。这可以在GitHub的PR页面，文件更改标签页，审查更改（右上角的按钮）上完成。
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对当前状态感到满意，请将拉取请求标记为Approved（与请求更改的方法相同）。此外（对于维护人员）：如果认为它已准备好合并，请合并拉取请求。
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将拉取请求代码的副本检出到您自己的机器上可能会有所帮助，这样您就可以在本地使用它。您可以使用[GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)通过单击PR页面右上角的“Open
    with”按钮来实现这一点。
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经设置好 [开发环境](development_environment.html#development-environment)，您现在可以构建代码并测试了。
- en: '## Standard replies for reviewing'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '## 审查的标准回复'
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些保存到GitHub的[saved replies](https://github.com/settings/replies/)中可以帮助您进行审查：
- en: '**Usage question**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用问题**'
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**You’re welcome to update the docs**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**欢迎您更新文档**'
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Self-contained example for bug**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**用于修复错误的自包含示例**'
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Software versions**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件版本**'
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: python -c 'import numpy; print(numpy.version.version)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: python -c 'import numpy; print(numpy.version.version)'
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Code blocks**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码块**'
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Linking to code**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**链接到代码**'
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Better description and title**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的描述和标题**'
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Regression test needed**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**需要回归测试**'
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Don’t change unrelated**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要更改无关的内容**'
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
