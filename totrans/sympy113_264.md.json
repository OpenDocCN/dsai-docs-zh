["```py\nsympy.geometry.util.intersection(*entities, pairwise=False, **kwargs)\n```", "```py\n>>> from sympy import Ray, Circle, intersection\n>>> c = Circle((0, 1), 1)\n>>> intersection(c, c.center)\n[]\n>>> right = Ray((0, 0), (1, 0))\n>>> up = Ray((0, 0), (0, 1))\n>>> intersection(c, right, up)\n[Point2D(0, 0)]\n>>> intersection(c, right, up, pairwise=True)\n[Point2D(0, 0), Point2D(0, 2)]\n>>> left = Ray((1, 0), (0, 0))\n>>> intersection(right, left)\n[Segment2D(Point2D(0, 0), Point2D(1, 0))] \n```", "```py\nsympy.geometry.util.convex_hull(*args, polygon=True)\n```", "```py\n>>> from sympy import convex_hull\n>>> points = [(1, 1), (1, 2), (3, 1), (-5, 2), (15, 4)]\n>>> convex_hull(*points)\nPolygon(Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4))\n>>> convex_hull(*points, **dict(polygon=False))\n([Point2D(-5, 2), Point2D(15, 4)],\n [Point2D(-5, 2), Point2D(1, 1), Point2D(3, 1), Point2D(15, 4)]) \n```", "```py\nsympy.geometry.util.are_similar(e1, e2)\n```", "```py\n>>> from sympy import Point, Circle, Triangle, are_similar\n>>> c1, c2 = Circle(Point(0, 0), 4), Circle(Point(1, 4), 3)\n>>> t1 = Triangle(Point(0, 0), Point(1, 0), Point(0, 1))\n>>> t2 = Triangle(Point(0, 0), Point(2, 0), Point(0, 2))\n>>> t3 = Triangle(Point(0, 0), Point(3, 0), Point(0, 1))\n>>> are_similar(t1, t2)\nTrue\n>>> are_similar(t1, t3)\nFalse \n```", "```py\nsympy.geometry.util.centroid(*args)\n```", "```py\n>>> from sympy import Point, Segment, Polygon\n>>> from sympy.geometry.util import centroid\n>>> p = Polygon((0, 0), (10, 0), (10, 10))\n>>> q = p.translate(0, 20)\n>>> p.centroid, q.centroid\n(Point2D(20/3, 10/3), Point2D(20/3, 70/3))\n>>> centroid(p, q)\nPoint2D(20/3, 40/3)\n>>> p, q = Segment((0, 0), (2, 0)), Segment((0, 0), (2, 2))\n>>> centroid(p, q)\nPoint2D(1, 2 - sqrt(2))\n>>> centroid(Point(0, 0), Point(2, 0))\nPoint2D(1, 0) \n```", "```py\n>>> p = Polygon((0, 0), (1, 0), (1, 1), (0, 1))\n>>> q = Polygon((1, 0), (3, 0), (3, 1), (1, 1))\n>>> centroid(p, q)\nPoint2D(3/2, 1/2)\n>>> centroid(p, p, p, q) # centroid x-coord shifts left\nPoint2D(11/10, 1/2) \n```", "```py\n>>> centroid(p, p.translate(0, 1), p.translate(0, -1), q)\nPoint2D(11/10, 1/2) \n```", "```py\nsympy.geometry.util.idiff(eq, y, x, n=1)\n```", "```py\n>>> from sympy.abc import x, y, a\n>>> from sympy.geometry.util import idiff \n```", "```py\n>>> circ = x**2 + y**2 - 4\n>>> idiff(circ, y, x)\n-x/y\n>>> idiff(circ, y, x, 2).simplify()\n(-x**2 - y**2)/y**3 \n```", "```py\n>>> idiff(x + a + y, y, x)\n-1 \n```", "```py\n>>> idiff(x + a + y, [y, a], x)\n-Derivative(a, x) - 1 \n```"]