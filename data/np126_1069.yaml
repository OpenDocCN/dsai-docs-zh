- en: Python Types and C-Structures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 类型和 C 结构
- en: 原文：[https://numpy.org/doc/1.26/reference/c-api/types-and-structures.html](https://numpy.org/doc/1.26/reference/c-api/types-and-structures.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/c-api/types-and-structures.html](https://numpy.org/doc/1.26/reference/c-api/types-and-structures.html)
- en: Several new types are defined in the C-code. Most of these are accessible from
    Python, but a few are not exposed due to their limited use. Every new Python type
    has an associated [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")* with an internal structure that includes a pointer to a
    “method table” that defines how the new object behaves in Python. When you receive
    a Python object into C code, you always get a pointer to a [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure. Because a [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure is very generic and defines only [`PyObject_HEAD`](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD
    "(in Python v3.11)"), by itself it is not very interesting. However, different
    objects contain more details after the [`PyObject_HEAD`](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD
    "(in Python v3.11)") (but you have to cast to the correct type to access them
    — or use accessor functions or macros).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几种新类型在 C 代码中定义。其中大多数可以从 Python 中访问，但由于使用受限，有些则没有暴露出来。每个新的 Python 类型都有一个关联的[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")*，其内部结构包括指向“方法表”的指针，定义了新对象在 Python 中的行为。在 C 代码中接收到 Python
    对象时，始终会得到一个指向[`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") 结构的指针。因为 [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") 结构非常通用，仅定义了 [`PyObject_HEAD`](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD
    "(in Python v3.11)")，因此本身并不是很有趣。但是，不同类型的对象在[`PyObject_HEAD`](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD
    "(in Python v3.11)")之后包含更多细节（但你必须将其转换为正确的类型才能访问它们 - 或者使用访问器函数或宏）。
- en: New Python Types Defined
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义了新的 Python 类型
- en: 'Python types are the functional equivalent in C of classes in Python. By constructing
    a new Python type you make available a new object for Python. The ndarray object
    is an example of a new type defined in C. New types are defined in C by two basic
    steps:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类型在 C 语言中等效于 Python 中的类。通过构建新的 Python 类型，可以为 Python 提供一个新的对象。ndarray
    对象就是在 C 中定义的一个新类型的例子。通过两个基本步骤在 C 中定义新类型：
- en: creating a C-structure (usually named `Py{Name}Object`) that is binary- compatible
    with the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure itself but holds the additional information needed
    for that particular object;
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 C 结构（通常命名为 `Py{Name}Object`），它与 [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") 结构本身二进制兼容，但包含了特定对象需要的额外信息；
- en: populating the [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)") table (pointed to by the ob_type member of the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure) with pointers to functions that implement the
    desired behavior for the type.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用指针指向实现所需行为的函数，将[`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)")表（由[`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") 结构的 ob_type 成员指向）填充。
- en: Instead of special method names which define behavior for Python classes, there
    are “function tables” which point to functions that implement the desired results.
    Since Python 2.2, the PyTypeObject itself has become dynamic which allows C types
    that can be “sub-typed “from other C-types in C, and sub-classed in Python. The
    children types inherit the attributes and methods from their parent(s).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不再使用定义 Python 类的特殊方法名，而是使用指向实现所需结果的函数的“函数表”。自从 Python 2.2 开始，PyTypeObject 本身变得动态，允许从其他
    C 类型“子类型化” C 类型，并在 Python 中派生子类。子类型继承其父类的属性和方法。
- en: 'There are two major new types: the ndarray ( [`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type") ) and the ufunc ( [`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type")
    ). Additional types play a supportive role: the [`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type"), the [`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type"),
    and the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") . The
    [`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type") is the type for a
    flat iterator for an ndarray (the object that is returned when getting the flat
    attribute). The [`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type")
    is the type of the object returned when calling `broadcast` (). It handles iteration
    and broadcasting over a collection of nested sequences. Also, the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type") is the data-type-descriptor type whose instances describe
    the data. Finally, there are 21 new scalar-array types which are new Python scalars
    corresponding to each of the fundamental data types available for arrays. An additional
    10 other types are place holders that allow the array scalars to fit into a hierarchy
    of actual Python types.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种主要的新类型：ndarray（ [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") ）和 ufunc（
    [`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type") ）。其他类型起着支持作用：[`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type")、[`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type")
    和 [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type")。[`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type") 是用于 ndarray 的平面迭代器的类型（获取 flat 属性时返回的对象）。[`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type
    "PyArrayMultiIter_Type") 是在调用 `broadcast` () 时返回的对象的类型。它处理对嵌套序列集合的迭代和广播。此外，[`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type") 是描述数据的数据类型描述符类型，其实例描述数据。最后，有 21 种新的标量数组类型，它们是与数组可用的每种基本数据类型对应的新的
    Python 标量。另外还有 10 种其他类型是占位符，允许数组标量适应实际 Python 类型的层次结构。
- en: PyArray_Type and PyArrayObject
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Type 和 PyArrayObject
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Python type of the ndarray is [`PyArray_Type`](#c.PyArray_Type "PyArray_Type").
    In C, every ndarray is a pointer to a [`PyArrayObject`](#c.PyArrayObject "PyArrayObject")
    structure. The ob_type member of this structure contains a pointer to the [`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type") typeobject.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray 的 Python 类型是 [`PyArray_Type`](#c.PyArray_Type "PyArray_Type")。在 C 中，每个
    ndarray 都是指向 [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") 结构的指针。此结构的 `ob_type`
    成员包含指向 [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 类型对象的指针。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C-structure contains
    all of the required information for an array. All instances of an ndarray (and
    its subclasses) will have this structure. For future compatibility, these structure
    members should normally be accessed using the provided macros. If you need a shorter
    name, then you can make use of [`NPY_AO`](#c.NPY_AO "NPY_AO") (deprecated) which
    is defined to be equivalent to [`PyArrayObject`](#c.PyArrayObject "PyArrayObject").
    Direct access to the struct fields are deprecated. Use the `PyArray_*(arr)` form
    instead. As of NumPy 1.20, the size of this struct is not considered part of the
    NumPy ABI (see note at the end of the member list).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C 结构包含数组的所有必需信息。所有 ndarray（及其子类）的实例都将具有此结构。为了未来的兼容性，应该通常使用提供的宏来访问这些结构成员。如果需要更短的名称，那么可以使用已弃用的
    [`NPY_AO`](#c.NPY_AO "NPY_AO")，它被定义为等同于 [`PyArrayObject`](#c.PyArrayObject "PyArrayObject")。直接访问结构字段已被弃用。请改用
    `PyArray_*(arr)` 形式。截至 NumPy 1.20，此结构的大小不被视为 NumPy ABI 的一部分（请参见成员列表末尾的注释）。'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is needed by all Python objects. It consists of (at least) a reference
    count member ( `ob_refcnt` ) and a pointer to the typeobject ( `ob_type` ). (Other
    elements may also be present if Python was compiled with special options see Include/object.h
    in the Python source tree for more information). The ob_type member points to
    a Python type object.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有 Python 对象所需的。它至少包含一个引用计数成员（ `ob_refcnt` ）和一个指向类型对象的指针（ `ob_type` ）。（如果
    Python 是使用特殊选项编译的，还可能存在其他元素，请参阅 Python 源树中的 Include/object.h 了解更多信息）。`ob_type`
    成员指向 Python 类型对象。
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Accessible via [`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA"), this
    data member is a pointer to the first element of the array. This pointer can (and
    normally should) be recast to the data type of the array.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA") 可访问，此数据成员是数组的第一个元素的指针。这个指针可以（通常应该）重新转换为数组的数据类型。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An integer providing the number of dimensions for this array. When nd is 0,
    the array is sometimes called a rank-0 array. Such arrays have undefined dimensions
    and strides and cannot be accessed. Macro [`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM") defined in `ndarraytypes.h` points to this data member. [`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") is the largest number of dimensions for any array.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数，提供此数组的维数。当 nd 为 0 时，有时称为秩-0 数组。这种数组具有未定义的维度和步幅，无法访问。宏[`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM")定义在`ndarraytypes.h`指向这个数据成员。[`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") 是任何数组的最大维数。
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: An array of integers providing the shape in each dimension as long as nd \(\geq\)
    1\. The integer is always large enough to hold a pointer on the platform, so the
    dimension size is only limited by memory. [`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") is the macro associated with this data member.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数数组，为每个维度提供该维度中的形状，只要 nd \(\geq\) 1。这个整数总是足够大，能够在平台上保存一个指针，所以维度大小仅受内存限制。[`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") 是与这个数据成员相关联的宏。
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An array of integers providing for each dimension the number of bytes that must
    be skipped to get to the next element in that dimension. Associated with macro
    [`PyArray_STRIDES`](array.html#c.PyArray_STRIDES "PyArray_STRIDES").
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数数组，为每个维度提供必须跳过的字节数，以到达该维度中的下一个元素。与宏[`PyArray_STRIDES`](array.html#c.PyArray_STRIDES
    "PyArray_STRIDES")相关联。
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Pointed to by [`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE"), this
    member is used to hold a pointer to another Python object that is related to this
    array. There are two use cases:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE")指向，这个成员用于保存与这个数组相关的另一个
    Python 对象的指针。有两个用例：
- en: If this array does not own its own memory, then base points to the Python object
    that owns it (perhaps another array object)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个数组没有拥有自己的内存，那么 base 指向拥有它的 Python 对象（也许是另一个数组对象）。
- en: If this array has the [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY") flag set, then this array is a working copy of a
    “misbehaved” array.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个数组设置了[`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY")标志，那么这个数组是一个“不良”数组的工作副本。
- en: When `PyArray_ResolveWritebackIfCopy` is called, the array pointed to by base
    will be updated with the contents of this array.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`PyArray_ResolveWritebackIfCopy`时，base 指向的数组将使用这个数组的内容更新。
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A pointer to a data-type descriptor object (see below). The data-type descriptor
    object is an instance of a new built-in type which allows a generic description
    of memory. There is a descriptor structure for each data type supported. This
    descriptor structure contains useful information about the type as well as a pointer
    to a table of function pointers to implement specific functionality. As the name
    suggests, it is associated with the macro [`PyArray_DESCR`](array.html#c.PyArray_DESCR
    "PyArray_DESCR").
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数据类型描述符对象的指针（见下文）。数据类型描述符对象是新建的内置类型的实例，它允许对内存进行通用描述。对每个支持的数据类型都存在一个描述符结构。这个描述符结构包含有关类型的有用信息，以及一个指向实现特定功能的函数指针表的指针。顾名思义，它与宏[`PyArray_DESCR`](array.html#c.PyArray_DESCR
    "PyArray_DESCR")相关联。
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Pointed to by the macro [`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS"),
    this data member represents the flags indicating how the memory pointed to by
    data is to be interpreted. Possible flags are [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS"), [`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA"), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED"),
    [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE"),
    [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY "NPY_ARRAY_WRITEBACKIFCOPY").
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由宏[`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS")指向，这个数据成员表示标志，指示数据指针指向的内存应如何解释。可能的标志是[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS")，[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")，[`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA")，[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")，[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")，[`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY")。
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This member allows array objects to have weak references (using the weakref
    module).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个成员允许数组对象具有弱引用（使用 weakref 模块）。
- en: Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Further members are considered private and version dependent. If the size of
    the struct is important for your code, special care must be taken. A possible
    use-case when this is relevant is subclassing in C. If your code relies on `sizeof(PyArrayObject)`
    to be constant, you must add the following check at import time:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其他成员被视为私有和与版本有关。如果结构的大小对您的代码很重要，必须特别小心。当这一点相关时的一种可能的用例是在 C 中进行子类化。如果您的代码依赖于
    `sizeof(PyArrayObject)` 的大小是不变的，您在导入时必须添加以下检查：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: To ensure that your code does not have to be compiled for a specific NumPy version,
    you may add a constant, leaving room for changes in NumPy. A solution guaranteed
    to be compatible with any future NumPy version requires the use of a runtime calculate
    offset and allocation size.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的代码不必为特定的 NumPy 版本进行编译，您可以添加一个常数，留出 NumPy 变化的空间。可确保与将来任何 NumPy 版本兼容的解决方案需要使用运行时计算偏移和分配大小。
- en: PyArrayDescr_Type and PyArray_Descr
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayDescr_Type 和 PyArray_Descr
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") is the built-in
    type of the data-type-descriptor objects used to describe how the bytes comprising
    the array are to be interpreted. There are 21 statically-defined [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") objects for the built-in data-types. While these participate
    in reference counting, their reference count should never reach zero. There is
    also a dynamic table of user-defined [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr")
    objects that is also maintained. Once a data-type-descriptor object is “registered”
    it should never be deallocated either. The function [`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType
    "PyArray_DescrFromType") (…) can be used to retrieve a [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") object from an enumerated type-number (either built-in or user-
    defined).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") 是用于描述数组所包含的字节应如何解释的数据类型描述对象的内置类型。内置数据类型有
    21 个静态定义的 [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") 对象。虽然这些对象参与引用计数，但它们的引用计数永远不应该达到零。还有一个动态的用户自定义
    [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") 对象表也会被维护。一旦数据类型描述对象被“注册”，它就不应该被释放。函数
    [`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType "PyArray_DescrFromType")
    (…) 可以用来从一个枚举类型编号（内置或用户自定义）中检索出一个 [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr")
    对象。'
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") structure lies at the
    heart of the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type").
    While it is described here for completeness, it should be considered internal
    to NumPy and manipulated via `PyArrayDescr_*` or `PyDataType*` functions and macros.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") 结构位于 [`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type") 的核心。虽然这里描述了它，但它应被视为 NumPy 的内部部分，并通过 `PyArrayDescr_*` 或 `PyDataType*`
    函数和宏进行操作。这个结构的大小会随着 NumPy 的版本变化而变化。为确保兼容性：'
- en: Never declare a non-pointer instance of the struct
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行指针算术运算
- en: Never use `sizeof(PyArray_Descr)`
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用 `sizeof(PyArray_Descr)`
- en: 'It has the following structure:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下结构：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Pointer to a typeobject that is the corresponding Python type for the elements
    of this array. For the builtin types, this points to the corresponding array scalar.
    For user-defined types, this should point to a user-defined typeobject. This typeobject
    can either inherit from array scalars or not. If it does not inherit from array
    scalars, then the [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM") and
    [`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM") flags should be set
    in the `flags` member.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 指向该数组元素对应的 Python 类型的类型对象的指针。对于内置类型，这将指向对应的 array scalar。对于用户定义类型，这应该指向用户定义的类型对象。这个类型对象可以继承自数组标量，也可以不继承。如果它不继承自数组标量，那么`flags`
    成员中应该设置 [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM") 和 [`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM
    "NPY_USE_SETITEM") 标志。
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: A character code indicating the kind of array (using the array interface typestring
    notation). A ‘b’ represents Boolean, a ‘i’ represents signed integer, a ‘u’ represents
    unsigned integer, ‘f’ represents floating point, ‘c’ represents complex floating
    point, ‘S’ represents 8-bit zero-terminated bytes, ‘U’ represents 32-bit/character
    unicode string, and ‘V’ represents arbitrary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数组种类的字符代码（使用数组接口类型字符串表示）。‘b’ 表示布尔型，‘i’ 表示有符号整数，‘u’ 表示无符号整数，‘f’ 表示浮点型，‘c’ 表示复数浮点型，‘S’
    表示 8 位零终结字节，‘U’ 表示 32 位/字符 Unicode 字符串，‘V’ 表示任意类型。
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: A traditional character code indicating the data type.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 指示数据类型的传统字符代码。
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A character indicating the byte-order: ‘>’ (big-endian), ‘<’ (little- endian),
    ‘=’ (native), ‘|’ (irrelevant, ignore). All builtin data- types have byteorder
    ‘=’.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表示字节顺序的字符：‘>’（大端），‘<’（小端），‘=’（本地），‘|’（不相关，忽略）。所有内置数据类型的字节顺序为‘=’。
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A data-type bit-flag that determines if the data-type exhibits object- array
    like behavior. Each bit in this member is a flag which are named as:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 决定数据类型是否具有对象数组行为的数据类型位标志。此成员中的每个位都是一个标志，其命名为：
- en: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
- en: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
- en: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
- en: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
- en: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
- en: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
- en: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
- en: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
- en: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
- en: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A number that uniquely identifies the data type. For new data-types, this number
    is assigned when the data-type is registered.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一标识数据类型的数字。对于新的数据类型，当数据类型注册时会分配此数字。
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For data types that are always the same size (such as long), this holds the
    size of the data type. For flexible data types where different arrays can have
    a different elementsize, this should be 0.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于始终大小相同的数据类型（例如 long），这表示数据类型的大小。对于灵活的数据类型，其中不同的数组可以具有不同的元素大小，这应为 0。
- en: '[PRE24]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A number providing alignment information for this data type. Specifically,
    it shows how far from the start of a 2-element structure (whose first element
    is a `char` ), the compiler places an item of this type: `offsetof(struct {char
    c; type v;}, v)`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 提供此数据类型的对齐信息的数字。具体来说，它显示编译器在从 2 个元素结构的开始（其第一个元素是一个 `char`）放置此类型的项目的距离：`offsetof(struct
    {char c; type v;}, v)`
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If this is non- `NULL`, then this data-type descriptor is a C-style contiguous
    array of another data-type descriptor. In other-words, each element that this
    descriptor describes is actually an array of some other base descriptor. This
    is most useful as the data-type descriptor for a field in another data-type descriptor.
    The fields member should be `NULL` if this is non- `NULL` (the fields member of
    the base descriptor can be non- `NULL` however).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此为非 `NULL`，则此数据类型描述符是另一个数据类型描述符的 C 风格连续数组。换句话说，此描述符描述的每个元素实际上是另一个基本描述符的数组。如果此为非
    `NULL`，则字段成员应为 `NULL`（但是基本描述符的字段成员可以为非 `NULL`）。
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The data-type-descriptor object of the base-type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 基本类型的数据类型描述符对象。
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The shape (always C-style contiguous) of the sub-array as a Python tuple.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 子数组的形状（始终为 C 风格连续）作为 Python 元组。
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If this is non-NULL, then this data-type-descriptor has fields described by
    a Python dictionary whose keys are names (and also titles if given) and whose
    values are tuples that describe the fields. Recall that a data-type-descriptor
    always describes a fixed-length set of bytes. A field is a named sub-region of
    that total, fixed-length collection. A field is described by a tuple composed
    of another data- type-descriptor and a byte offset. Optionally, the tuple may
    contain a title which is normally a Python string. These tuples are placed in
    this dictionary keyed by name (and also title if given).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此为非空，则此数据类型描述符具有由Python字典描述的字段，其键是名称（如果给定也是标题），其值是描述字段的元组。请注意，数据类型描述符始终描述一组固定长度的字节。字段是总的、固定长度集合的命名子区域。字段由另一个数据类型描述符和字节偏移量组成的元组描述。可选地，元组可能包含通常为Python字符串的标题。这些元组根据名称（如果给定还有标题）放置在此字典中。
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: An ordered tuple of field names. It is NULL if no field is defined.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 字段名称的有序元组。如果未定义字段，则为 NULL。
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A pointer to a structure containing functions that the type needs to implement
    internal features. These functions are not the same thing as the universal functions
    (ufuncs) described later. Their signatures can vary arbitrarily.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个包含类型需要实现内部特性的函数的结构体的指针。这些函数不同于后面描述的通用函数（ufuncs）。它们的签名可以任意变化。
- en: '[PRE33]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Metadata about this dtype.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此数据类型的元数据。
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Metadata specific to the C implementation of the particular dtype. Added for
    NumPy 1.7.0.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特定于特定dtype的C实现的元数据。增加于NumPy 1.7.0。
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Currently unused. Reserved for future use in caching hash values.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 目前未使用。保留以用于在缓存哈希值中将来使用。
- en: '[PRE37]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Indicates that items of this data-type must be reference counted (using [`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(in Python v3.11)") and [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)") ).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此数据类型的项必须进行引用计数（使用[`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(在Python v3.11)") 和 [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(在Python v3.11)")）。
- en: '[PRE38]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Same as [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT").
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")。
- en: '[PRE39]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Indicates arrays of this data-type must be converted to a list before pickling.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 表示必须将这种数据类型的数组在pickling之前转换为列表。
- en: '[PRE40]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Indicates the item is a pointer to some other data-type
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 表示该项是指向其他数据类型的指针。
- en: '[PRE41]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Indicates memory for this data-type must be initialized (set to 0) on creation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表示必须在创建时初始化（设置为0）此数据类型的内存。
- en: '[PRE42]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Indicates this data-type requires the Python C-API during access (so don’t give
    up the GIL if array access is going to be needed).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在访问时此数据类型需要Python C-API（因此如果需要数组访问，请不要放弃GIL）。
- en: '[PRE43]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: On array access use the `f->getitem` function pointer instead of the standard
    conversion to an array scalar. Must use if you don’t define an array scalar to
    go along with the data-type.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组访问时，使用`f->getitem`函数指针，而不是标准的转换为数组标量。如果没有定义与数据类型相匹配的数组标量，必须使用。
- en: '[PRE44]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: When creating a 0-d array from an array scalar use `f->setitem` instead of the
    standard copy from an array scalar. Must use if you don’t define an array scalar
    to go along with the data-type.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当从数组标量创建0维数组时，使用`f->setitem`而不是标准的从数组标量复制。如果你没有定义与数据类型相匹配的数组标量，必须使用。
- en: '[PRE45]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The bits that are inherited for the parent data-type if these bits are set in
    any field of the data-type. Currently ( [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")
    ).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在数据类型的任何字段中设置了这些位，则从父数据类型继承这些位。目前（[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE46]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Bits set for the object data-type: ( [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE
    "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")
    | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为对象数据类型设置的位：（[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM
    "NPY_USE_GETITEM") | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")
    | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT
    "NPY_NEEDS_INIT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE47]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Return true if all the given flags are set for the data-type object.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据类型对象的所有给定标志都设置为真，则返回真。
- en: '[PRE48]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Equivalent to [`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")
    (*dtype*, [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")（*dtype*，[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT")）。
- en: '[PRE49]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Functions implementing internal features. Not all of these function pointers
    must be defined for a given type. The required members are `nonzero`, `copyswap`,
    `copyswapn`, `setitem`, `getitem`, and `cast`. These are assumed to be non- `NULL`
    and `NULL` entries will cause a program crash. The other functions may be `NULL`
    which will just mean reduced functionality for that data-type. (Also, the nonzero
    function will be filled in with a default function if it is `NULL` when you register
    a user-defined data-type).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 实现内部特性的函数。并非必须为给定类型定义所有这些函数指针。必须定义的成员包括`nonzero`、`copyswap`、`copyswapn`、`setitem`、`getitem`和`cast`。这默认假定为非
    `NULL`，而`NULL`条目将导致程序崩溃。其他函数可以是 `NULL`，这只会导致该数据类型的功能减少。（此外，如果在注册用户定义的数据类型时`nonzero`函数为空，将使用默认函数填充`nonzero`函数）。
- en: '[PRE50]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The concept of a behaved segment is used in the description of the function
    pointers. A behaved segment is one that is aligned and in native machine byte-order
    for the data-type. The `nonzero`, `copyswap`, `copyswapn`, `getitem`, and `setitem`
    functions can (and must) deal with mis-behaved arrays. The other functions require
    behaved memory segments.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 描述函数指针时使用了行为良好段的概念。行为良好的段是指与数据类型对齐且符合本机字节顺序的段。`nonzero`、`copyswap`、`copyswapn`、`getitem`
    和 `setitem` 函数可以（必须）处理不规范的数组。其他函数则需要行为良好的内存段。
- en: '[PRE51]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: An array of function pointers to cast from the current type to all of the other
    builtin types. Each function casts a contiguous, aligned, and notswapped buffer
    pointed at by *from* to a contiguous, aligned, and notswapped buffer pointed at
    by *to* The number of items to cast is given by *n*, and the arguments *fromarr*
    and *toarr* are interpreted as PyArrayObjects for flexible arrays to get itemsize
    information.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针数组，用于将当前类型转换为所有其他内置类型。每个函数都将由 *from* 指向的连续、对齐且未交换的缓冲区转换为由 *to* 指向的连续、对齐且未交换的缓冲区。要转换的项数由
    *n* 给出，并且参数 *fromarr* 和 *toarr* 被解释为灵活数组的 PyArrayObjects 以获取 itemsize 信息。
- en: '[PRE52]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: A pointer to a function that returns a standard Python object from a single
    element of the array object *arr* pointed to by *data*. This function must be
    able to deal with “misbehaved “(misaligned and/or swapped) arrays correctly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针，用于从由 *data* 指向的数组对象 *arr* 的单个元素返回标准 Python 对象。此函数必须能够正确处理“不规范”的（未对齐和/或交换的）数组。
- en: '[PRE53]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: A pointer to a function that sets the Python object *item* into the array, *arr*,
    at the position pointed to by *data* . This function deals with “misbehaved” arrays.
    If successful, a zero is returned, otherwise, a negative one is returned (and
    a Python error set).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针，用于将 Python 对象 *item* 设置到由 *data* 指向的数组 *arr* 中的位置。此函数处理“不规范”的数组。如果成功，返回零，否则返回负一（并设置
    Python 错误）。
- en: '[PRE54]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: These members are both pointers to functions to copy data from *src* to *dest*
    and *swap* if indicated. The value of arr is only used for flexible ( [`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING"), [`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE"),
    and [`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID "NPY_VOID") ) arrays (and is
    obtained from `arr->descr->elsize` ). The second function copies a single value,
    while the first loops over n values with the provided strides. These functions
    can deal with misbehaved *src* data. If *src* is NULL then no copy is performed.
    If *swap* is 0, then no byteswapping occurs. It is assumed that *dest* and *src*
    do not overlap. If they overlap, then use `memmove` (…) first followed by `copyswap(n)`
    with NULL valued `src`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成员都是指向从 *src* 复制数据到 *dest* 并在需要时交换的函数的指针。仅当为灵活数组（[`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING")、[`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE")
    和 [`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID "NPY_VOID") ）时才使用 arr 的值（从 `arr->descr->elsize`
    获取）。第二个函数复制单个值，而第一个函数则使用提供的步幅循环 n 值。这些函数可以处理不规范的 *src* 数据。如果 *src* 为 NULL，则不执行复制。如果
    *swap* 为 0，则不执行字节交换。假设 *dest* 和 *src* 不重叠。如果它们重叠，则首先使用 `memmove`（…）再使用值为 NULL
    的 `src` 执行 `copyswap(n)`。
- en: '[PRE56]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: A pointer to a function that compares two elements of the array, `arr`, pointed
    to by `d1` and `d2`. This function requires behaved (aligned and not swapped)
    arrays. The return value is 1 if * `d1` > * `d2`, 0 if * `d1` == * `d2`, and -1
    if * `d1` < * `d2`. The array object `arr` is used to retrieve itemsize and field
    information for flexible arrays.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针，用于比较由 `d1` 和 `d2` 指向的数组 `arr` 的两个元素。此函数需要行为良好（对齐且未交换）的数组。如果 * `d1` >
    * `d2`，返回值为 1；如果 * `d1` == * `d2`，返回值为 0；如果 * `d1` < * `d2`，返回值为 -1。数组对象 `arr`
    用于检索灵活数组的 itemsize 和字段信息。
- en: '[PRE57]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: A pointer to a function that retrieves the index of the largest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the largest element is returned in `max_ind`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针，用于从由 *data* 指向的元素开始的 `n` 个元素中检索最大的索引。此函数要求内存段是连续且行为良好的。返回值始终为 0。最大元素的索引在
    `max_ind` 中返回。
- en: '[PRE58]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: A pointer to a function that multiplies two `n` -length sequences together,
    adds them, and places the result in element pointed to by `op` of `arr`. The start
    of the two sequences are pointed to by `ip1` and `ip2`. To get to the next element
    in each sequence requires a jump of `is1` and `is2` *bytes*, respectively. This
    function requires behaved (though not necessarily contiguous) memory.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向将两个`n`长度的序列相乘，相加，并将结果放置到由`op`指向的`arr`元素中的函数的指针。序列的开始分别由`ip1`和`ip2`指向。要获取每个序列中的下一个元素需要跳过`is1`和`is2`
    *字节*。此函数需要表现良好的（尽管不一定是连续的）内存。
- en: '[PRE59]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: A pointer to a function that scans (scanf style) one element of the corresponding
    type from the file descriptor `fd` into the array memory pointed to by `ip`. The
    array is assumed to be behaved. The last argument `arr` is the array to be scanned
    into. Returns number of receiving arguments successfully assigned (which may be
    zero in case a matching failure occurred before the first receiving argument was
    assigned), or EOF if input failure occurs before the first receiving argument
    was assigned. This function should be called without holding the Python GIL, and
    has to grab it for error reporting.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向从文件描述符`fd`中扫描（类似于scanf）相应类型的元素到由`ip`指向的数组内存中的函数的指针。假定数组表现良好。最后一个参数`arr`是要扫描的数组。返回成功分配的接收参数的数量（如果在分配第一个接收参数之前匹配失败，则可能为零），或者如果在分配第一个接收参数之前发生输入故障，则为EOF。调用此函数时应该不持有Python
    GIL，并且必须为错误报告抓取它。
- en: '[PRE60]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A pointer to a function that converts the string pointed to by `str` to one
    element of the corresponding type and places it in the memory location pointed
    to by `ip`. After the conversion is completed, `*endptr` points to the rest of
    the string. The last argument `arr` is the array into which ip points (needed
    for variable-size data- types). Returns 0 on success or -1 on failure. Requires
    a behaved array. This function should be called without holding the Python GIL,
    and has to grab it for error reporting.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向将`str`指向的字符串转换为相应类型的一个元素并将其放置到由`ip`指向的内存位置的函数的指针。转换完成后，`*endptr`指向字符串的其余部分。最后一个参数`arr`是ip指向的数组（需要用于变量大小数据类型）。成功返回0，失败返回-1。需要一个表现良好的数组。调用此函数时应该不持有Python
    GIL，并且必须为错误报告抓取它。
- en: '[PRE61]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: A pointer to a function that returns TRUE if the item of `arr` pointed to by
    `data` is nonzero. This function can deal with misbehaved arrays.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向如果`data`指向的`arr`的项为非零则返回TRUE的函数的指针。此函数可以处理行为不当的数组。
- en: '[PRE62]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: A pointer to a function that fills a contiguous array of given length with data.
    The first two elements of the array must already be filled- in. From these two
    values, a delta will be computed and the values from item 3 to the end will be
    computed by repeatedly adding this computed delta. The data buffer must be well-behaved.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向填充给定长度的连续数组数据的函数的指针。数组的前两个元素必须已经被填充。根据这两个值，将计算出一个增量，然后从第3个元素到最后的值将通过重复添加这个计算出的增量来计算。数据缓冲区必须表现良好。
- en: '[PRE63]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: A pointer to a function that fills a contiguous `buffer` of the given `length`
    with a single scalar `value` whose address is given. The final argument is the
    array which is needed to get the itemsize for variable-length arrays.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向使用单个标量`value`的地址填充给定`长度`的连续`buffer`的函数的指针。最后一个参数是所需用于变长数组的itemsize的数组。
- en: '[PRE64]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: An array of function pointers to a particular sorting algorithms. A particular
    sorting algorithm is obtained using a key (so far [`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT"), [`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT"),
    and [`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT "NPY_MERGESORT")
    are defined). These sorts are done in-place assuming contiguous and aligned data.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向特定排序算法的函数指针数组。可以使用一个关键字（到目前为止定义了[`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT")、[`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT")和[`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT
    "NPY_MERGESORT")）。这些排序是在假定连续和对齐的数据上进行的。
- en: '[PRE65]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: An array of function pointers to sorting algorithms for this data type. The
    same sorting algorithms as for sort are available. The indices producing the sort
    are returned in `result` (which must be initialized with indices 0 to `length-1`
    inclusive).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向此数据类型的排序算法的函数指针数组。可用于排序的排序算法与sort相同。产生排序的索引被返回到`result`中（必须初始化为包含0到`length-1`的索引）。
- en: '[PRE66]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Either `NULL` or a dictionary containing low-level casting functions for user-
    defined data-types. Each function is wrapped in a [PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)")* and keyed by the data-type number.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是`NULL`或包含用户定义数据类型的低级转换函数的字典。每个函数都包装在一个[PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)")*中，并以数据类型编号为键。
- en: '[PRE67]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: A function to determine how scalars of this type should be interpreted. The
    argument is `NULL` or a 0-dimensional array containing the data (if that is needed
    to determine the kind of scalar). The return value must be of type [`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND").
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定此类型的标量应如何解释的函数。参数是一个包含数据的0维数组（如果需要确定标量的种类，则需要该数据）。返回值必须是类型为[`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND")的值。
- en: '[PRE68]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Either `NULL` or an array of [`NPY_NSCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS") pointers. These pointers should each be either `NULL` or a
    pointer to an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")) indicating data-types that a scalar of this data-type of the specified
    kind can be cast to safely (this usually means without losing precision).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是`NULL`或一个包含[`NPY_NSCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS")指针的数组。这些指针每个都应该是`NULL`，或者是指向整数数组的指针（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")终止），指示此数据类型的指定种类的标量可以安全地转换为的数据类型（通常意味着不会失去精度）。
- en: '[PRE69]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Either `NULL` or an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE") ) indicated data-types that this data-type can be cast to safely
    (this usually means without losing precision).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是`NULL`或一个整数数组（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE "NPY_NOTYPE")终止），指示此数据类型可以安全地转换为的数据类型（通常意味着不会失去精度）。
- en: '[PRE70]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Deprecated since version 1.17: The use of this function will give a deprecation
    warning when `np.clip`. Instead of this function, the datatype must instead use
    `PyUFunc_RegisterLoopForDescr` to attach a custom loop to `np.core.umath.clip`,
    `np.minimum`, and `np.maximum`.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.17起弃用：使用此函数将在`np.clip`时产生弃用警告。不再使用此函数，数据类型必须使用`PyUFunc_RegisterLoopForDescr`将自定义循环附加到`np.core.umath.clip`、`np.minimum`和`np.maximum`。
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that reads `n_in` items from `in`, and writes to `out` the read value
    if it is within the limits pointed to by `min` and `max`, or the corresponding
    limit if outside. The memory segments must be contiguous and behaved, and either
    `min` or `max` may be `NULL`, but not both.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从`in`中读取`n_in`项，并在其指向的限制范围内写入到`out`，如果超出范围，则写入相应的限制值。内存段必须是连续的且行为良好，`min`和`max`中的一个可以是`NULL`，但不能同时为空。
- en: '[PRE71]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that takes a pointer `in` to an array of `n_in` items, a pointer
    `mask` to an array of `n_in` boolean values, and a pointer `vals` to an array
    of `nv` items. Items from `vals` are copied into `in` wherever the value in `mask`
    is non-zero, tiling `vals` as needed if `nv < n_in`. All arrays must be contiguous
    and behaved.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，它接受一个指向长度为`n_in`项的数组的指针`in`，一个指向长度为`n_in`的布尔值数组的指针`mask`，以及一个指向长度为`nv`项的数组的指针`vals`。将`vals`中的项复制到`in`中，其中`mask`中的值为非零，如果`nv
    < n_in`，则根据需要平铺`vals`。所有数组必须是连续的且行为良好。
- en: '[PRE72]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that takes a pointer `src` to a C contiguous, behaved segment, interpreted
    as a 3-dimensional array of shape `(n_outer, nindarray, nelem)`, a pointer `indarray`
    to a contiguous, behaved segment of `m_middle` integer indices, and a pointer
    `dest` to a C contiguous, behaved segment, interpreted as a 3-dimensional array
    of shape `(n_outer, m_middle, nelem)`. The indices in `indarray` are used to index
    `src` along the second dimension, and copy the corresponding chunks of `nelem`
    items into `dest`. `clipmode` (which can take on the values [`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE"), [`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP") or [`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP")) determines how will indices smaller than 0 or larger than `nindarray`
    will be handled.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，它接受一个指针`src`，指向一个C连续的、行为良好的段，解释为形状为`(n_outer, nindarray, nelem)`的三维数组，一个指向`m_middle`整数索引的C连续的、行为良好的段的指针`indarray`，以及一个指向C连续的、行为良好的段的指针`dest`，解释为形状为`(n_outer,
    m_middle, nelem)`的三维数组。`indarray` 中的索引用于沿第二维索引`src`，并将对应的`nelem`项的块复制到`dest`中。`clipmode`（可以取值[`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE")、[`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP") 或 [`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP")）确定如何处理小于0或大于`nindarray`的索引。
- en: '[PRE73]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: A pointer to a function that retrieves the index of the smallest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the smallest element is returned in `min_ind`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针，用于检索从`data`指向的元素开始的包含`n`个元素的`arr`中最小元素的索引。此函数要求内存段是连续的且行为良好。返回值始终为0。最小元素的索引将返回到`min_ind`中。
- en: The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") typeobject implements many
    of the features of [`Python objects`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)") including the [`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(in Python v3.11)"), [`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(in Python v3.11)"), [`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(in Python v3.11)"), and [`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(in Python v3.11)") interfaces. The [`rich comparison`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(in Python v3.11)")) is also used along with new-style attribute lookup for member
    ([`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(in Python v3.11)")) and properties ([`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(in Python v3.11)")). The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") can
    also be sub-typed.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 类型对象实现了许多[`Python 对象`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(在 Python v3.11)")的特性，包括[`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(在 Python v3.11)")、[`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(在 Python v3.11)")、[`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(在 Python v3.11)") 和[`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(在 Python v3.11)") 接口。[`富比较`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(在 Python v3.11)") 也与新式属性查找一起使用，用于成员（[`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(在 Python v3.11)")）和属性（[`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(在 Python v3.11)")）的访问。[`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 也可以被子类型化。'
- en: Tip
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `tp_as_number` methods use a generic approach to call whatever function
    has been registered for handling the operation. When the `_multiarray_umath module`
    is imported, it sets the numeric operations for all arrays to the corresponding
    ufuncs. This choice can be changed with [`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature") The `tp_str` and `tp_repr` methods can also
    be altered using [`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction").
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`tp_as_number` 方法使用一种通用方法调用已注册用于处理操作的任何函数。当导入`_multiarray_umath 模块`时，它将所有数组的数值操作设置为相应的ufuncs。可以使用[`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature") 来更改此选择。`tp_str` 和 `tp_repr` 方法也可以使用[`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction") 进行更改。'
- en: PyUFunc_Type and PyUFuncObject
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyUFunc_Type 和 PyUFuncObject
- en: '[PRE74]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The ufunc object is implemented by creation of the [`PyUFunc_Type`](#c.PyUFunc_Type
    "PyUFunc_Type"). It is a very simple type that implements only basic getattribute
    behavior, printing behavior, and has call behavior which allows these objects
    to act like functions. The basic idea behind the ufunc is to hold a reference
    to fast 1-dimensional (vector) loops for each data type that supports the operation.
    These one-dimensional loops all have the same signature and are the key to creating
    a new ufunc. They are called by the generic looping code as appropriate to implement
    the N-dimensional function. There are also some generic 1-d loops defined for
    floating and complexfloating arrays that allow you to define a ufunc using a single
    scalar function (*e.g.* atanh).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc对象是通过创建[`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type")来实现的。 它是一种非常简单的类型，只实现了基本的getAttribute行为、打印行为，并且有call行为，这样这些对象就可以像函数一样。
    ufunc的基本思想是保存对支持操作的数据类型的快速1维（向量）循环的引用。 所有这些一维循环都具有相同的签名，并且是创建新ufunc的关键。 它们由通用循环代码适当调用以实现N维函数。
    还为浮点和复数浮点数组定义了一些通用的一维循环，允许你使用单个标量函数（*例如*atanh）来定义ufunc。
- en: '[PRE75]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The core of the ufunc is the [`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")
    which contains all the information needed to call the underlying C-code loops
    that perform the actual work. While it is described here for completeness, it
    should be considered internal to NumPy and manipulated via `PyUFunc_*` functions.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc的核心是[`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")，其中包含调用执行实际工作的基础C代码循环所需的所有信息。
    虽然这里描述了这一点以确保兼容性： *infotext* *default*可以在不同的NumPy版本中更改。 为了确保兼容性。
- en: Never declare a non-pointer instance of the struct
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝不声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行指针算术
- en: Never use `sizeof(PyUFuncObject)`
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用`sizeof(PyUFuncObject)`
- en: 'It has the following structure:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下结构：
- en: '[PRE76]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The number of input arguments.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数的数量。
- en: '[PRE78]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The number of output arguments.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 输出参数的数量。
- en: '[PRE79]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The total number of arguments (*nin* + *nout*). This must be less than [`NPY_MAXARGS`](array.html#c.NPY_MAXARGS
    "NPY_MAXARGS").
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的总数（* nin * + * nout *）。 这必须小于[`NPY_MAXARGS`](array.html#c.NPY_MAXARGS "NPY_MAXARGS")。
- en: '[PRE80]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Either [`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One"), [`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero"), [`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne"),
    [`PyUFunc_None`](ufunc.html#c.PyUFunc_None "PyUFunc_None"), [`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone"), or [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue") to indicate the identity for this operation. It is only
    used for a reduce-like call on an empty array.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One")，[`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero")，[`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne")，[`PyUFunc_None`](ufunc.html#c.PyUFunc_None
    "PyUFunc_None")，[`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone")或[`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")中的任何一个，以指示此操作的标识。 仅用于对空数组进行类似缩小的调用。'
- en: '[PRE81]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: An array of function pointers — one for each data type supported by the ufunc.
    This is the vector loop that is called to implement the underlying function *dims*
    [0] times. The first argument, *args*, is an array of *nargs* pointers to behaved
    memory. Pointers to the data for the input arguments are first, followed by the
    pointers to the data for the output arguments. How many bytes must be skipped
    to get to the next element in the sequence is specified by the corresponding entry
    in the *steps* array. The last argument allows the loop to receive extra information.
    This is commonly used so that a single, generic vector loop can be used for multiple
    functions. In this case, the actual scalar function to call is passed in as *extradata*.
    The size of this function pointer array is ntypes.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针数组 - 每种ufunc支持的数据类型一个。 这是被调用以实现基础功能*dims*[0]次的向量循环。 第一个参数*args*是一个* nargs
    *指针的数组，指向行为良好的内存。 首先是输入参数数据的指针，然后是输出参数数据的指针。 必须跳过多少字节才能到达序列中下一个元素由* steps *数组中的对应条目指定。
    最后一个参数允许循环接收额外信息。 通常用于使单个通用向量循环用于多个函数。 在这种情况下，要调用的实际标量函数被传递为* extradata *。 这个函数指针数组的大小是ntypes。
- en: '[PRE82]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Extra data to be passed to the 1-d vector loops or `NULL` if no extra-data is
    needed. This C-array must be the same size ( *i.e.* ntypes) as the functions array.
    `NULL` is used if extra_data is not needed. Several C-API calls for UFuncs are
    just 1-d vector loops that make use of this extra data to receive a pointer to
    the actual function to call.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递给1-d向量循环的额外数据，如果不需要额外数据则为`NULL`。这个C数组必须与函数数组的大小相同（*即* ntypes）。如果不需要额外数据，则使用`NULL`。几个用于UFuncs的C
    API调用只是利用这些额外数据运行1-d向量循环，以接收指向要调用的实际函数的指针。
- en: '[PRE83]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The number of supported data types for the ufunc. This number specifies how
    many different 1-d loops (of the builtin data types) are available.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc支持的数据类型数。这个数字指定可用的不同1-d循环（内置数据类型）的数量。
- en: '[PRE84]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Unused.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用。
- en: '[PRE85]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: A string name for the ufunc. This is used dynamically to build the __doc__ attribute
    of ufuncs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为ufunc的字符串名称。这是动态使用的，用于构建ufunc的__doc__属性。
- en: '[PRE86]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: An array of \(nargs \times ntypes\) 8-bit type_numbers which contains the type
    signature for the function for each of the supported (builtin) data types. For
    each of the *ntypes* functions, the corresponding set of type numbers in this
    array shows how the *args* argument should be interpreted in the 1-d vector loop.
    These type numbers do not have to be the same type and mixed-type ufuncs are supported.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 \(nargs \times ntypes\) 8位类型编号数组，包含每个支持（内置）数据类型的函数的类型签名。对于每个 *ntypes* 函数，该数组中对应的一组类型编号显示了如何在1-d向量循环中解释
    *args* 参数。这些类型编号不必是相同类型，支持混合类型的ufunc。
- en: '[PRE87]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Documentation for the ufunc. Should not contain the function signature as this
    is generated dynamically when __doc__ is retrieved.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 用于ufunc的文档。不应包含函数签名，因为在检索__doc__时动态生成。
- en: '[PRE88]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Any dynamically allocated memory. Currently, this is used for dynamic ufuncs
    created from a python function to store room for the types, data, and name members.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 任何动态分配的内存。目前，这用于从Python函数创建动态ufunc，用于存储类型、数据和名称成员的空间。
- en: '[PRE89]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: For ufuncs dynamically created from python functions, this member holds a reference
    to the underlying Python function.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从Python函数动态创建的ufunc，该成员持有对底层Python函数的引用。
- en: '[PRE90]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: A dictionary of user-defined 1-d vector loops (stored as CObject ptrs) for user-defined
    types. A loop may be registered by the user for any user-defined type. It is retrieved
    by type number. User defined type numbers are always larger than [`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF").
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的1-d向量循环的字典（存储为CObject指针）用于用户定义的类型。用户可以为任何用户定义的类型注册循环。它通过类型编号检索。用户定义的类型编号总是大于[`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF")。
- en: '[PRE91]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 0 for scalar ufuncs; 1 for generalized ufuncs
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 标量ufunc为0；广义ufunc为1
- en: '[PRE92]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Number of distinct core dimension names in the signature
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 签名中具有不同核心维度名称的数量
- en: '[PRE93]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Number of core dimensions of each argument
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数的核心维度数
- en: '[PRE94]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Dimension indices in a flattened form; indices of argument `k` are stored in
    `core_dim_ixs[core_offsets[k] : core_offsets[k] + core_numdims[k]]`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '展平形式的维度索引；参数`k`的索引存储在`core_dim_ixs[core_offsets[k] : core_offsets[k] + core_numdims[k]]`中'
- en: '[PRE95]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Position of 1st core dimension of each argument in `core_dim_ixs`, equivalent
    to cumsum(`core_num_dims`)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数在`core_dim_ixs`中第1个核心维度的位置，相当于cumsum(`core_num_dims`)
- en: '[PRE96]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Core signature string
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 核心签名字符串
- en: '[PRE97]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: A function which resolves the types and fills an array with the dtypes for the
    inputs and outputs
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 解析类型并填充输入和输出的dtypes的函数
- en: '[PRE98]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Deprecated since version 1.22: Some fallback support for this slot exists,
    but will be removed eventually. A universal function that relied on this will
    have to be ported eventually. See [NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)") and [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.22起弃用：此插槽存在一些回退支持，但最终将被移除。依赖于此的通用函数最终将需要移植。请参阅[NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)") 和 [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")
- en: '[PRE99]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: For a possible future loop selector with a different signature.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 用于可能的具有不同签名的未来循环选择器。
- en: '[PRE100]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Override the default operand flags for each ufunc operand.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个ufunc操作数覆盖默认操作数标志。
- en: '[PRE101]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Override the default nditer flags for the ufunc.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为ufunc覆盖默认nditer标志。
- en: Added in API version 0x0000000D
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 添加在API版本0x0000000D中
- en: '[PRE102]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: For each distinct core dimension, the possible [frozen](generalized-ufuncs.html#frozen)
    size if [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED "UFUNC_CORE_DIM_SIZE_INFERRED")
    is `0`
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个不同的核心维度，如果 [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED") 为 `0`，则可能的 [frozen](generalized-ufuncs.html#frozen)
    大小
- en: '[PRE103]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: For each distinct core dimension, a set of flags ( [`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE
    "UFUNC_CORE_DIM_CAN_IGNORE") and [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED"))
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个不同的核心维度，一组标志（[`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE
    "UFUNC_CORE_DIM_CAN_IGNORE") 和 [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED")）
- en: '[PRE104]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Identity for reduction, when [`PyUFuncObject.identity`](#c.PyUFuncObject.identity
    "PyUFuncObject.identity") is equal to [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue").
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 缩减的标识，当 [`PyUFuncObject.identity`](#c.PyUFuncObject.identity "PyUFuncObject.identity")
    等于 [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue "PyUFunc_IdentityValue")
    时。
- en: '[PRE105]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: if the dim name ends in `?`
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度名称以 `?` 结尾
- en: '[PRE106]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: if the dim size will be determined from the operands and not from a [frozen](generalized-ufuncs.html#frozen)
    signature
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度大小将由操作数而不是从 [frozen](generalized-ufuncs.html#frozen) 签名确定
- en: PyArrayIter_Type and PyArrayIterObject
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayIter_Type 和 PyArrayIterObject
- en: '[PRE107]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    array. It is the object returned from the flat attribute of an ndarray. It is
    also used extensively throughout the implementation internals to loop over an
    N-dimensional array. The tp_as_mapping interface is implemented so that the iterator
    object can be indexed (using 1-d indexing), and a few methods are implemented
    through the tp_methods table. This object implements the next method and can be
    used anywhere an iterator can be used in Python.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，使得可以轻松地循环遍历 N 维数组。它是从 ndarray 的 flat 属性返回的对象。它还在整个实现内部广泛使用，以循环遍历 N
    维数组。实现了 tp_as_mapping 接口，以便可以索引迭代器对象（使用 1-d 索引），并且通过 tp_methods 表实现了一些方法。此对象实现了
    next 方法，并且可以在 Python 中使用任何迭代器可以使用的地方。
- en: '[PRE108]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The C-structure corresponding to an object of [`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type") is the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject").
    The [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") is used to
    keep track of a pointer into an N-dimensional array. It contains associated information
    used to quickly march through the array. The pointer can be adjusted in three
    basic ways: 1) advance to the “next” position in the array in a C-style contiguous
    fashion, 2) advance to an arbitrary N-dimensional coordinate in the array, and
    3) advance to an arbitrary one-dimensional index into the array. The members of
    the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") structure
    are used in these calculations. Iterator objects keep their own dimension and
    strides information about an array. This can be adjusted as needed for “broadcasting,”
    or to loop over only specific dimensions.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type") 对象对应的 C 结构是 [`PyArrayIterObject`](#c.PyArrayIterObject
    "PyArrayIterObject")。 [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject")
    用于跟踪指向 N 维数组的指针。它包含用于快速遍历数组的相关信息。指针可以通过三种基本方式进行调整：1）以 C 风格连续地前进到数组中的“下一个”位置，2）前进到数组中的任意
    N 维坐标，和 3）前进到数组中的任意一维索引。[`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject")
    结构的成员在这些计算中使用。迭代器对象保存关于数组的自己的维度和跨度信息。这可以根据需要进行“广播”，或者仅循环特定维度。
- en: '[PRE109]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: \(N-1\) where \(N\) is the number of dimensions in the underlying array.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: \(N-1\) 其中 \(N\) 是底层数组中的维数。
- en: '[PRE111]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The current 1-d index into the array.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的当前 1-d 索引。
- en: '[PRE112]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The total size of the underlying array.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 底层数组的总大小。
- en: '[PRE113]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: An \(N\) -dimensional index into the array.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 对数组的 \(N\) 维索引。
- en: '[PRE114]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: The size of the array minus 1 in each dimension.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 数组在每个维度上的大小减去 1。
- en: '[PRE115]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: The strides of the array. How many bytes needed to jump to the next element
    in each dimension.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的跨度。在每个维度跳转到下一个元素所需的字节数。
- en: '[PRE116]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: How many bytes needed to jump from the end of a dimension back to its beginning.
    Note that `backstrides[k] == strides[k] * dims_m1[k]`, but it is stored here as
    an optimization.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 从维度的末尾跳回到其开头所需的字节数。请注意 `backstrides[k] == strides[k] * dims_m1[k]`，但这里存储为一种优化。
- en: '[PRE117]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: This array is used in computing an N-d index from a 1-d index. It contains needed
    products of the dimensions.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此数组用于从 1-d 索引计算 N-d 索引。它包含维度的所需乘积。
- en: '[PRE118]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: A pointer to the underlying ndarray this iterator was created to represent.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 指向创建此迭代器代表的底层 ndarray 的指针。
- en: '[PRE119]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: This member points to an element in the ndarray indicated by the index.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员指向由索引指示的 ndarray 中的元素。
- en: '[PRE120]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: This flag is true if the underlying array is [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"). It is used to simplify calculations when possible.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 若底层数组是 [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")，则此标志为真。在可能的情况下，可用于简化计算。
- en: How to use an array iterator on a C-level is explained more fully in later sections.
    Typically, you do not need to concern yourself with the internal structure of
    the iterator object, and merely interact with it through the use of the macros
    [`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT "PyArray_ITER_NEXT") (it),
    [`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO "PyArray_ITER_GOTO") (it,
    dest), or [`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D "PyArray_ITER_GOTO1D")
    (it, index). All of these macros require the argument *it* to be a [PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 C 级别上使用数组迭代器在后续章节中有更详细的解释。通常，您无需关心迭代器对象的内部结构，只需通过宏 [`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT
    "PyArray_ITER_NEXT") (it)、[`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO
    "PyArray_ITER_GOTO") (it, dest) 或 [`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D
    "PyArray_ITER_GOTO1D") (it, index) 与其进行交互。所有这些宏都需要参数 *it* 为 [PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*。
- en: PyArrayMultiIter_Type and PyArrayMultiIterObject
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayMultiIter_Type 和 PyArrayMultiIterObject
- en: '[PRE121]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: This type provides an iterator that encapsulates the concept of broadcasting.
    It allows \(N\) arrays to be broadcast together so that the loop progresses in
    C-style contiguous fashion over the broadcasted array. The corresponding C-structure
    is the [`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject "PyArrayMultiIterObject")
    whose memory layout must begin any object, *obj*, passed in to the [`PyArray_Broadcast`](array.html#c.PyArray_Broadcast
    "PyArray_Broadcast") (obj) function. Broadcasting is performed by adjusting array
    iterators so that each iterator represents the broadcasted shape and size, but
    has its strides adjusted so that the correct element from the array is used at
    each iteration.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 该类型提供了一种封装广播概念的迭代器。它允许 \(N\) 个数组一起进行广播，使循环以 C 样式连续方式在广播的数组上进行。相应的 C 结构是 [`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject
    "PyArrayMultiIterObject")，其内存布局必须以传递给 [`PyArray_Broadcast`](array.html#c.PyArray_Broadcast
    "PyArray_Broadcast") (obj) 函数的任何对象 *obj* 开始。通过调整数组迭代器来执行广播，使得每个迭代器表示广播的形状和大小，但其步长被调整，以便在每次迭代中使用数组的正确元素。
- en: '[PRE122]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: The number of arrays that need to be broadcast to the same shape.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 需要广播到相同形状的数组的数量。
- en: '[PRE125]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The total broadcasted size.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 总的广播大小。
- en: '[PRE126]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: The current (1-d) index into the broadcasted result.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当前（1-d）索引进入广播结果。
- en: '[PRE127]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: The number of dimensions in the broadcasted result.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果中的维数。
- en: '[PRE128]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: The shape of the broadcasted result (only `nd` slots are used).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果的形状（仅使用 `nd` 槽）。
- en: '[PRE129]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: An array of iterator objects that holds the iterators for the arrays to be broadcast
    together. On return, the iterators are adjusted for broadcasting.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一个迭代器对象数组，其中包含要一起广播的数组的迭代器。返回时，迭代器会进行调整以进行广播。
- en: PyArrayNeighborhoodIter_Type and PyArrayNeighborhoodIterObject
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayNeighborhoodIter_Type 和 PyArrayNeighborhoodIterObject
- en: '[PRE130]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    neighborhood.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，可轻松循环遍历 N 维邻域。
- en: '[PRE131]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: The C-structure corresponding to an object of [`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type
    "PyArrayNeighborhoodIter_Type") is the [`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject
    "PyArrayNeighborhoodIterObject").
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type "PyArrayNeighborhoodIter_Type")
    对象对应的 C 结构是 [`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject
    "PyArrayNeighborhoodIterObject")。
- en: '[PRE132]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: PyArrayFlags_Type and PyArrayFlagsObject
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayFlags_Type 和 PyArrayFlagsObject
- en: '[PRE133]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: When the flags attribute is retrieved from Python, a special builtin object
    of this type is constructed. This special type makes it easier to work with the
    different flags by accessing them as attributes or by accessing them as if the
    object were a dictionary with the flag names as entries.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 Python 中检索 flags 属性时，将构建此特殊内置对象的特殊类型。这种特殊类型通过将它们作为属性访问或通过将对象视为具有标志名称条目的字典来访问它们，使得更容易处理不同的标志。
- en: '[PRE134]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: ScalarArrayTypes
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ScalarArrayTypes
- en: There is a Python type for each of the different built-in data types that can
    be present in the array. Most of these are simple wrappers around the corresponding
    data type in C. The C-names for these types are `Py{TYPE}ArrType_Type` where `{TYPE}`
    can be
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 每种内置数据类型在Python中都有一个类型。这些大多是简单的包装器，用于对应C中的相应数据类型。这些类型的C名称为`Py{TYPE}ArrType_Type`，其中`{TYPE}`可以是
- en: '**Bool**, **Byte**, **Short**, **Int**, **Long**, **LongLong**, **UByte**,
    **UShort**, **UInt**, **ULong**, **ULongLong**, **Half**, **Float**, **Double**,
    **LongDouble**, **CFloat**, **CDouble**, **CLongDouble**, **String**, **Unicode**,
    **Void**, and **Object**.'
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Bool**，**Byte**，**Short**，**Int**，**Long**，**LongLong**，**UByte**，**UShort**，**UInt**，**ULong**，**ULongLong**，**Half**，**Float**，**Double**，**LongDouble**，**CFloat**，**CDouble**，**CLongDouble**，**String**，**Unicode**，**Void**和**Object**。'
- en: These type names are part of the C-API and can therefore be created in extension
    C-code. There is also a `PyIntpArrType_Type` and a `PyUIntpArrType_Type` that
    are simple substitutes for one of the integer types that can hold a pointer on
    the platform. The structure of these scalar objects is not exposed to C-code.
    The function [`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype "PyArray_ScalarAsCtype")
    (..) can be used to extract the C-type value from the array scalar and the function
    [`PyArray_Scalar`](array.html#c.PyArray_Scalar "PyArray_Scalar") (…) can be used
    to construct an array scalar from a C-value.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型名称是C-API的一部分，因此可以在扩展的C代码中创建。还有一个`PyIntpArrType_Type`和一个`PyUIntpArrType_Type`，它们是平台上可以容纳指针的整数类型之一的简单替代品。这些标量对象的结构对C代码不可见。函数[`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype
    "PyArray_ScalarAsCtype")（..）可以用于从数组标量中提取C类型值，函数[`PyArray_Scalar`](array.html#c.PyArray_Scalar
    "PyArray_Scalar")（…）可以用于从C值构造数组标量。
- en: Other C-Structures
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他C-结构
- en: A few new C-structures were found to be useful in the development of NumPy.
    These C-structures are used in at least one C-API call and are therefore documented
    here. The main reason these structures were defined is to make it easy to use
    the Python ParseTuple C-API to convert from Python objects to a useful C-Object.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 开发NumPy时发现有几个新的C-结构很有用。这些C结构至少在一个C-API调用中使用，因此在这里记录。定义这些结构的主要原因是为了方便使用Python
    ParseTuple C-API，将Python对象转换为有用的C对象。
- en: PyArray_Dims
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Dims
- en: '[PRE136]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'This structure is very useful when shape and/or strides information is supposed
    to be interpreted. The structure is:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 当形状和/或步幅信息被解释时，这个结构非常有用。结构如下：
- en: '[PRE137]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: The members of this structure are
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构体的成员是
- en: '[PRE138]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: A pointer to a list of ([`npy_intp`](dtype.html#c.npy_intp "npy_intp")) integers
    which usually represent array shape or array strides.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向([`npy_intp`](dtype.html#c.npy_intp "npy_intp"))整数列表的指针，通常表示数组形状或数组步幅。
- en: '[PRE139]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: The length of the list of integers. It is assumed safe to access *ptr* [0] to
    *ptr* [len-1].
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 整数列表的长度。假定安全访问*ptr*[0]至*ptr*[len-1]。
- en: PyArray_Chunk
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Chunk
- en: '[PRE140]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: This is equivalent to the buffer object structure in Python up to the ptr member.
    On 32-bit platforms (*i.e.* if [`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")),
    the len member also matches an equivalent member of the buffer object. It is useful
    to represent a generic single-segment chunk of memory.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这与Python中的缓冲对象结构相当，直到ptr成员。在32位平台上（*即*如果[`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")），len成员也与缓冲对象的等效成员匹配。它用于表示通用的单段内存块。
- en: '[PRE141]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: The members are
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 成员是
- en: '[PRE142]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The Python object this chunk of memory comes from. Needed so that memory can
    be accounted for properly.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此内存块来自的Python对象。需要这样才能正确地计算内存。
- en: '[PRE143]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: A pointer to the start of the single-segment chunk of memory.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 单段内存块开始的指针。
- en: '[PRE144]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: The length of the segment in bytes.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 段的长度（以字节为单位）。
- en: '[PRE145]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Any data flags (*e.g.* [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") ) that should be used to interpret the memory.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 用来解释内存的任何数据标志（*例如* [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")）。
- en: PyArrayInterface
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayInterface
- en: See also
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The array interface protocol](../arrays.interface.html#arrays-interface)'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](../arrays.interface.html#arrays-interface)'
- en: '[PRE146]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: The [`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") structure is
    defined so that NumPy and other extension modules can use the rapid array interface
    protocol. The [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") method of an object that supports the rapid array interface
    protocol should return a [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") that contains a pointer to a [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure with the relevant details of the array. After the
    new array is created, the attribute should be `DECREF`’d which will free the [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure. Remember to `INCREF` the object (whose [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") attribute was retrieved) and point the base member
    of the new [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") to this same object.
    In this way the memory for the array will be managed correctly.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") 结构被定义为NumPy和其他扩展模块可以使用快速的数组接口协议。支持快速数组接口协议的对象的[`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__")方法应该返回一个包含指向[`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface")结构的相关细节的指针的[`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(在 Python v3.11)")。创建新数组后，应该对属性执行`DECREF`，这将释放[`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface")结构。记得对检索到的[`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__")属性的对象进行`INCREF`，并将新的[`PyArrayObject`](#c.PyArrayObject
    "PyArrayObject")的base成员指向这个相同的对象。以这种方式管理数组的内存将是正确的。'
- en: '[PRE147]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: the integer 2 as a sanity check.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 整数 2 作为一个健全性检查。
- en: '[PRE149]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: the number of dimensions in the array.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的维数。
- en: '[PRE150]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: A character indicating what kind of array is present according to the typestring
    convention with ‘t’ -> bitfield, ‘b’ -> Boolean, ‘i’ -> signed integer, ‘u’ ->
    unsigned integer, ‘f’ -> floating point, ‘c’ -> complex floating point, ‘O’ ->
    object, ‘S’ -> (byte-)string, ‘U’ -> unicode, ‘V’ -> void.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类型字符串约定，指示存在何种类型数组的字符，‘t’ -> 位域，‘b’ -> 布尔值，‘i’ -> 有符号整数，‘u’ -> 无符号整数，‘f’ ->
    浮点数，‘c’ -> 复数浮点数，‘O’ -> 对象，‘S’ -> （字节）字符串，‘U’ -> Unicode，‘V’ -> 空。
- en: '[PRE151]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: The number of bytes each item in the array requires.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中每个项需要的字节数。
- en: '[PRE152]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Any of the bits [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS") (1), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") (2), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED") (0x100), [`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED
    "NPY_ARRAY_NOTSWAPPED") (0x200), or [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") (0x400) to indicate something about the data. The [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED"), [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), and [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") flags can actually be determined from the other parameters.
    The flag [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    (0x800) can also be set to indicate to objects consuming the version 3 array interface
    that the descr member of the structure is present (it will be ignored by objects
    consuming version 2 of the array interface).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 位[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")
    (1), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS "NPY_ARRAY_F_CONTIGUOUS")
    (2), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")
    (0x100), [`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED "NPY_ARRAY_NOTSWAPPED")
    (0x200)，或[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE")
    (0x400)，指示有关数据的一些信息。[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")、[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS")和[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")标志实际上可以从其他参数中确定。标志[`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR") (0x800)也可以设置为指示给消耗版本 3 数组接口的对象，这个结构的descr成员是存在的（对消耗版本 2 数组接口的对象会被忽略）。
- en: '[PRE153]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: An array containing the size of the array in each dimension.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 包含每个维度中数组大小的数组。
- en: '[PRE154]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: An array containing the number of bytes to jump to get to the next element in
    each dimension.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 包含每个维度中移动到下一个元素所需的字节数的数组。
- en: '[PRE155]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: A pointer *to* the first element of the array.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的第一个元素的指针。
- en: '[PRE156]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: A Python object describing the data-type in more detail (same as the *descr*
    key in [`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")). This can be `NULL` if *typekind* and *itemsize*
    provide enough information. This field is also ignored unless [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR") flag is on in *flags*.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细描述数据类型的Python对象（与[`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")中的*descr*键相同）。如果*typekind*和*itemsize*提供足够信息，则这可以是`NULL`。除非*flags*中打开了
    [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    标志，否则也会忽略此字段。
- en: Internally used structures
  id: totrans-358
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部使用的结构
- en: Internally, the code uses some additional Python objects primarily for memory
    management. These types are not accessible directly from Python, and are not exposed
    to the C-API. They are included here only for completeness and assistance in understanding
    the code.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，代码使用一些额外的Python对象主要用于内存管理。这些类型无法直接从Python访问，也不暴露给C-API。它们在这里仅用于完整性和帮助理解代码。
- en: '[PRE157]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: A simple linked-list of C-structures containing the information needed to define
    a 1-d loop for a ufunc for every defined signature of a user-defined data-type.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含为每个用户定义的数据类型的每个已定义签名定义1-d循环的信息的C-结构的简单链接列表。
- en: '[PRE158]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Advanced indexing is handled with this Python type. It is simply a loose wrapper
    around the C-structure containing the variables needed for advanced array indexing.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 高级索引由这种Python类型处理。它只是包装了包含高级数组索引所需变量的C结构的松散包装。
- en: '[PRE159]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The C-structure associated with [`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type
    "PyArrayMapIter_Type"). This structure is useful if you are trying to understand
    the advanced-index mapping code. It is defined in the `arrayobject.h` header.
    This type is not exposed to Python and could be replaced with a C-structure. As
    a Python type it takes advantage of reference- counted memory management.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type "PyArrayMapIter_Type")相关联的C结构。如果您试图理解高级索引映射代码，这个结构很有用。它在`arrayobject.h`头文件中定义。这种类型不暴露给Python，可以用C结构替换。作为Python类型，它利用了引用计数内存管理。
- en: New Python Types Defined
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义的新Python类型
- en: 'Python types are the functional equivalent in C of classes in Python. By constructing
    a new Python type you make available a new object for Python. The ndarray object
    is an example of a new type defined in C. New types are defined in C by two basic
    steps:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: Python类型相当于Python中的类。通过构建一个新的Python类型，您可以为Python提供一个新对象。`ndarray`对象就是在C中定义的一个新类型的示例。定义新类型的基本步骤是：
- en: creating a C-structure (usually named `Py{Name}Object`) that is binary- compatible
    with the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure itself but holds the additional information needed
    for that particular object;
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个与[`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")结构本身二进制兼容但包含特定对象所需的附加信息的C结构（通常命名为`Py{Name}Object`）;
- en: populating the [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)") table (pointed to by the ob_type member of the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)") structure) with pointers to functions that implement the
    desired behavior for the type.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充[`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11")表（由[`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject
    "(in Python v3.11)")结构的ob_type成员指向的）：指向实现该类型所需行为的函数的指针。
- en: Instead of special method names which define behavior for Python classes, there
    are “function tables” which point to functions that implement the desired results.
    Since Python 2.2, the PyTypeObject itself has become dynamic which allows C types
    that can be “sub-typed “from other C-types in C, and sub-classed in Python. The
    children types inherit the attributes and methods from their parent(s).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是为Python类定义行为的特殊方法名称，有指向实现所需结果的功能表。自Python 2.2以来，`PyTypeObject`本身已经变得动态，允许在C中“从其他C类型”继承的C类型，“在Python中子类化”。子类型从其父类型继承属性和方法。
- en: 'There are two major new types: the ndarray ( [`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type") ) and the ufunc ( [`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type")
    ). Additional types play a supportive role: the [`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type"), the [`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type"),
    and the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") . The
    [`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type") is the type for a
    flat iterator for an ndarray (the object that is returned when getting the flat
    attribute). The [`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type")
    is the type of the object returned when calling `broadcast` (). It handles iteration
    and broadcasting over a collection of nested sequences. Also, the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type") is the data-type-descriptor type whose instances describe
    the data. Finally, there are 21 new scalar-array types which are new Python scalars
    corresponding to each of the fundamental data types available for arrays. An additional
    10 other types are place holders that allow the array scalars to fit into a hierarchy
    of actual Python types.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要的新类型：`ndarray`（ [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") ）和`ufunc`（
    [`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type") ）。其他类型起辅助作用：[`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type")，[`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type "PyArrayMultiIter_Type")和[`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type")。[`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type")是`ndarray`的平坦迭代器类型（在获取flat属性时返回的对象）。[`PyArrayMultiIter_Type`](#c.PyArrayMultiIter_Type
    "PyArrayMultiIter_Type")是调用`broadcast`()时返回的对象类型。它处理迭代和广播集合的嵌套序列。另外，[`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type")是数据类型描述符类型，其实例描述数据。最后，还有21种新的标量数组类型，这些是对应于数组的可用基本数据类型的新Python标量。另外还有10种其他类型，这些是占位符，允许数组标量适应实际Python类型的层次结构。
- en: PyArray_Type and PyArrayObject
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[`PyArray_Type`](#c.PyArray_Type "PyArray_Type")和`PyArrayObject`'
- en: '[PRE160]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: The Python type of the ndarray is [`PyArray_Type`](#c.PyArray_Type "PyArray_Type").
    In C, every ndarray is a pointer to a [`PyArrayObject`](#c.PyArrayObject "PyArrayObject")
    structure. The ob_type member of this structure contains a pointer to the [`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type") typeobject.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`的Python类型是[`PyArray_Type`](#c.PyArray_Type "PyArray_Type")。在C中，每个`ndarray`都是指向[`PyArrayObject`](#c.PyArrayObject
    "PyArrayObject")结构体的指针。该结构体的`ob_type`成员包含一个指向[`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type")类型对象的指针。'
- en: '[PRE161]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: The [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C-structure contains
    all of the required information for an array. All instances of an ndarray (and
    its subclasses) will have this structure. For future compatibility, these structure
    members should normally be accessed using the provided macros. If you need a shorter
    name, then you can make use of [`NPY_AO`](#c.NPY_AO "NPY_AO") (deprecated) which
    is defined to be equivalent to [`PyArrayObject`](#c.PyArrayObject "PyArrayObject").
    Direct access to the struct fields are deprecated. Use the `PyArray_*(arr)` form
    instead. As of NumPy 1.20, the size of this struct is not considered part of the
    NumPy ABI (see note at the end of the member list).
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C结构体包含数组的所有必需信息。所有`ndarray`实例（及其子类）都将具有此结构。为了将来的兼容性，应使用提供的宏来访问这些结构成员。如果需要更短的名称，可以使用[`NPY_AO`](#c.NPY_AO
    "NPY_AO")（已弃用），其定义等同于[`PyArrayObject`](#c.PyArrayObject "PyArrayObject")。已弃用直接访问结构字段。请改为使用`PyArray_*(arr)`形式。从NumPy
    1.20开始，这个结构的大小不被视为NumPy ABI的一部分（请参见成员列表末尾的说明）。'
- en: '[PRE163]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: This is needed by all Python objects. It consists of (at least) a reference
    count member ( `ob_refcnt` ) and a pointer to the typeobject ( `ob_type` ). (Other
    elements may also be present if Python was compiled with special options see Include/object.h
    in the Python source tree for more information). The ob_type member points to
    a Python type object.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这对所有Python对象都是必需的。它由（至少）一个引用计数成员（`ob_refcnt`）和一个指向类型对象（`ob_type`）的指针组成。（如果Python是使用特殊选项编译的，可能还有其他元素，请参见Python源代码树中的Include/object.h了解更多信息）。ob_type成员指向Python类型对象。
- en: '[PRE165]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Accessible via [`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA"), this
    data member is a pointer to the first element of the array. This pointer can (and
    normally should) be recast to the data type of the array.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 可通过[`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA")访问，此数据成员是数组的第一个元素的指针。这个指针可以（通常应该）重塑为数组的数据类型。
- en: '[PRE166]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: An integer providing the number of dimensions for this array. When nd is 0,
    the array is sometimes called a rank-0 array. Such arrays have undefined dimensions
    and strides and cannot be accessed. Macro [`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM") defined in `ndarraytypes.h` points to this data member. [`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") is the largest number of dimensions for any array.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数，提供此数组的维度数量。当 nd 为 0 时，该数组有时被称为 0 阶数组。这样的数组具有未定义的维度和跨度，无法访问。宏 [`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM") 在 `ndarraytypes.h` 中定义，指向这个数据成员。[`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") 是任何数组的最大维度数量。
- en: '[PRE167]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: An array of integers providing the shape in each dimension as long as nd \(\geq\)
    1\. The integer is always large enough to hold a pointer on the platform, so the
    dimension size is only limited by memory. [`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") is the macro associated with this data member.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数数组，为每个维度提供每个维度的形状，只要 nd \(\geq\) 1。整数总是足够大以容纳平台上的指针，因此维度大小仅受内存限制。[`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") 是与这个数据成员相关联的宏。
- en: '[PRE168]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: An array of integers providing for each dimension the number of bytes that must
    be skipped to get to the next element in that dimension. Associated with macro
    [`PyArray_STRIDES`](array.html#c.PyArray_STRIDES "PyArray_STRIDES").
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 一个整数数组，为每个维度提供跳过的字节数，以便在该维度中到达下一个元素。与宏 [`PyArray_STRIDES`](array.html#c.PyArray_STRIDES
    "PyArray_STRIDES") 相关联。
- en: '[PRE169]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Pointed to by [`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE"), this
    member is used to hold a pointer to another Python object that is related to this
    array. There are two use cases:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE") 指向，这个成员用于保存与该数组相关的另一个
    Python 对象的指针。有两种用例：
- en: If this array does not own its own memory, then base points to the Python object
    that owns it (perhaps another array object)
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个数组不拥有自己的内存，那么 base 指向拥有它的 Python 对象（也许是另一个数组对象）。
- en: If this array has the [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY") flag set, then this array is a working copy of a
    “misbehaved” array.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个数组设置了 [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY") 标志，那么这个数组是一个“行为异常”的数组的工作副本。
- en: When `PyArray_ResolveWritebackIfCopy` is called, the array pointed to by base
    will be updated with the contents of this array.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `PyArray_ResolveWritebackIfCopy` 时，将使用该数组的内容更新由 base 指向的数组。
- en: '[PRE170]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: A pointer to a data-type descriptor object (see below). The data-type descriptor
    object is an instance of a new built-in type which allows a generic description
    of memory. There is a descriptor structure for each data type supported. This
    descriptor structure contains useful information about the type as well as a pointer
    to a table of function pointers to implement specific functionality. As the name
    suggests, it is associated with the macro [`PyArray_DESCR`](array.html#c.PyArray_DESCR
    "PyArray_DESCR").
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向数据类型描述对象的指针（参见下文）。数据类型描述对象是一个新的内置类型的实例，它允许对内存进行通用描述。每种支持的数据类型都有一个描述结构体。这个描述结构体包含有关该类型的有用信息，以及指向实现特定功能的函数指针表的指针。顾名思义，它与宏
    [`PyArray_DESCR`](array.html#c.PyArray_DESCR "PyArray_DESCR") 相关联。
- en: '[PRE171]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Pointed to by the macro [`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS"),
    this data member represents the flags indicating how the memory pointed to by
    data is to be interpreted. Possible flags are [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS"), [`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA"), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED"),
    [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE"),
    [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY "NPY_ARRAY_WRITEBACKIFCOPY").
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 由宏 [`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS") 指向，这个数据成员表示数据指向的内存应该如何解释的标志。可能的标志有
    [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")、[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")、[`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA")、[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")、[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")、[`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY")。
- en: '[PRE172]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: This member allows array objects to have weak references (using the weakref
    module).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这个成员允许数组对象具有弱引用（使用 weakref 模块）。
- en: Note
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Further members are considered private and version dependent. If the size of
    the struct is important for your code, special care must be taken. A possible
    use-case when this is relevant is subclassing in C. If your code relies on `sizeof(PyArrayObject)`
    to be constant, you must add the following check at import time:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的成员被视为私有和版本相关。如果结构的大小对您的代码很重要，必须特别小心。当这是相关的可能使用案例是在C中进行子类化。如果您的代码依赖于`sizeof(PyArrayObject)`是恒定的，您必须在导入时添加以下检查：
- en: '[PRE173]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: To ensure that your code does not have to be compiled for a specific NumPy version,
    you may add a constant, leaving room for changes in NumPy. A solution guaranteed
    to be compatible with any future NumPy version requires the use of a runtime calculate
    offset and allocation size.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保您的代码不必针对特定的NumPy版本进行编译，可以添加一个常量，为NumPy中的变化留出空间。 确保兼容任何未来的NumPy版本的解决方案需要运行时计算偏移量和分配大小。
- en: PyArrayDescr_Type and PyArray_Descr
  id: totrans-404
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayDescr_Type和PyArray_Descr
- en: '[PRE174]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") is the built-in
    type of the data-type-descriptor objects used to describe how the bytes comprising
    the array are to be interpreted. There are 21 statically-defined [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") objects for the built-in data-types. While these participate
    in reference counting, their reference count should never reach zero. There is
    also a dynamic table of user-defined [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr")
    objects that is also maintained. Once a data-type-descriptor object is “registered”
    it should never be deallocated either. The function [`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType
    "PyArray_DescrFromType") (…) can be used to retrieve a [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") object from an enumerated type-number (either built-in or user-
    defined).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") 是用于描述组成数组的字节该如何解释的数据类型描述符对象的内置类型。有21个静态定义的[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象用于内置数据类型。尽管这些参与引用计数，但它们的引用计数永远不应该为零。还维护了一个动态的用户定义的[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象表。一旦“注册”了数据类型描述符对象，就不应该将其释放。函数[`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType
    "PyArray_DescrFromType") (…)可以用于从枚举类型号（内置或用户定义的）中检索[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象。'
- en: '[PRE175]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'The [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") structure lies at the
    heart of the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type").
    While it is described here for completeness, it should be considered internal
    to NumPy and manipulated via `PyArrayDescr_*` or `PyDataType*` functions and macros.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") 结构位于[`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type")的核心。虽然此处为完整起见进行了描述，但应将其视为NumPy的内部结构，并通过`PyArrayDescr_*`或`PyDataType*`函数和宏来操作。此结构的大小可能会随NumPy的不同版本而发生变化。为确保兼容性：'
- en: Never declare a non-pointer instance of the struct
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行指针算术运算
- en: Never use `sizeof(PyArray_Descr)`
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用`sizeof(PyArray_Descr)`
- en: 'It has the following structure:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下结构：
- en: '[PRE176]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Pointer to a typeobject that is the corresponding Python type for the elements
    of this array. For the builtin types, this points to the corresponding array scalar.
    For user-defined types, this should point to a user-defined typeobject. This typeobject
    can either inherit from array scalars or not. If it does not inherit from array
    scalars, then the [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM") and
    [`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM") flags should be set
    in the `flags` member.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 指向对应于此数组元素的Python类型的类型对象的指针。 对于内置类型，这指向对应的数组标量。 对于用户定义的类型，这应指向用户定义的类型对象。 这个类型对象可以继承自数组标量，也可以不继承。
    如果它不继承自数组标量，那么`flags`成员中应该设置[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")和[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM
    "NPY_USE_SETITEM")标志。
- en: '[PRE178]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: A character code indicating the kind of array (using the array interface typestring
    notation). A ‘b’ represents Boolean, a ‘i’ represents signed integer, a ‘u’ represents
    unsigned integer, ‘f’ represents floating point, ‘c’ represents complex floating
    point, ‘S’ represents 8-bit zero-terminated bytes, ‘U’ represents 32-bit/character
    unicode string, and ‘V’ represents arbitrary.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数组种类的字符代码（使用数组接口类型字符串表示法）。 'b'代表布尔值，'i'代表有符号整数，'u'代表无符号整数，'f'代表浮点数，'c'代表复数浮点数，'S'代表8位零终止字节，'U'代表32位/字符的unicode字符串，'V'代表任意长度。
- en: '[PRE179]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: A traditional character code indicating the data type.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的字符代码，表示数据类型。
- en: '[PRE180]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'A character indicating the byte-order: ‘>’ (big-endian), ‘<’ (little- endian),
    ‘=’ (native), ‘|’ (irrelevant, ignore). All builtin data- types have byteorder
    ‘=’.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表示字节顺序的字符：‘>’（大端），‘<’（小端），‘=’（本机），‘|’（无关，忽略）。所有内置数据类型都具有字节顺序‘=’。
- en: '[PRE181]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'A data-type bit-flag that determines if the data-type exhibits object- array
    like behavior. Each bit in this member is a flag which are named as:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 一个确定数据类型是否展示类似对象数组的行为的数据类型位标志。这个成员中的每个位是一个标志，它们被命名为：
- en: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
- en: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
- en: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
- en: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
- en: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
- en: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
- en: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
- en: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
- en: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
- en: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
- en: '[PRE182]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: A number that uniquely identifies the data type. For new data-types, this number
    is assigned when the data-type is registered.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 一个唯一标识数据类型的数字。对于新数据类型，当数据类型被注册时，分配这个数字。
- en: '[PRE183]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: For data types that are always the same size (such as long), this holds the
    size of the data type. For flexible data types where different arrays can have
    a different elementsize, this should be 0.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 对于始终相同大小的数据类型（例如long），这个成员保存数据类型的大小。对于灵活的数据类型，不同的数组可能具有不同的元素大小，这个值应该为0。
- en: '[PRE184]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'A number providing alignment information for this data type. Specifically,
    it shows how far from the start of a 2-element structure (whose first element
    is a `char` ), the compiler places an item of this type: `offsetof(struct {char
    c; type v;}, v)`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 提供这个数据类型的对齐信息的数字。具体来说，它显示编译器在一个2元结构的开始处（其第一个元素是一个`char`）放置该类型的项的距离：`offsetof(struct
    {char c; type v;}, v)`
- en: '[PRE185]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: If this is non- `NULL`, then this data-type descriptor is a C-style contiguous
    array of another data-type descriptor. In other-words, each element that this
    descriptor describes is actually an array of some other base descriptor. This
    is most useful as the data-type descriptor for a field in another data-type descriptor.
    The fields member should be `NULL` if this is non- `NULL` (the fields member of
    the base descriptor can be non- `NULL` however).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是非`NULL`，那么这个数据类型描述符是另一个数据类型描述符的C风格连续数组。换句话说，这个描述符描述的每个元素实际上是另一个基本描述符的数组。这对于作为另一个数据类型描述符中字段的数据类型描述符最有用。如果这个非`NULL`，则fields成员应该为`NULL`（但是base描述符的fields成员可以为非`NULL`）。
- en: '[PRE186]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: The data-type-descriptor object of the base-type.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 基本类型的数据类型描述符对象。
- en: '[PRE189]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: The shape (always C-style contiguous) of the sub-array as a Python tuple.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 子数组的形状（始终是C风格连续）作为Python元组。
- en: '[PRE190]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: If this is non-NULL, then this data-type-descriptor has fields described by
    a Python dictionary whose keys are names (and also titles if given) and whose
    values are tuples that describe the fields. Recall that a data-type-descriptor
    always describes a fixed-length set of bytes. A field is a named sub-region of
    that total, fixed-length collection. A field is described by a tuple composed
    of another data- type-descriptor and a byte offset. Optionally, the tuple may
    contain a title which is normally a Python string. These tuples are placed in
    this dictionary keyed by name (and also title if given).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不是NULL，则这个数据类型描述符具有由Python字典描述的字段，其键是名称（如果给定也是标题），其值是描述字段的元组。请记住，数据类型描述符总是描述一组固定长度的字节。字段是该总体固定长度集合的命名子区域。字段由另一个数据类型描述符和一个字节偏移的元组描述。可选地，元组可以包含通常是Python字符串的标题。这些元组被放在此字典中，以名称（如果给定也是标题）为键。
- en: '[PRE191]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: An ordered tuple of field names. It is NULL if no field is defined.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 字段名称的有序元组。如果未定义字段，则为NULL。
- en: '[PRE192]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: A pointer to a structure containing functions that the type needs to implement
    internal features. These functions are not the same thing as the universal functions
    (ufuncs) described later. Their signatures can vary arbitrarily.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 指向包含类型需要实现内部功能的函数的结构的指针。这些函数与后面描述的通用函数（ufuncs）不同。它们的签名可以任意变化。
- en: '[PRE193]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Metadata about this dtype.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个数据类型的元数据。
- en: '[PRE194]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Metadata specific to the C implementation of the particular dtype. Added for
    NumPy 1.7.0.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于特定dtype的C实现的元数据。添加到NumPy 1.7.0中。
- en: '[PRE195]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Currently unused. Reserved for future use in caching hash values.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 当前未使用。保留用于将来缓存哈希值。
- en: '[PRE197]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: Indicates that items of this data-type must be reference counted (using [`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(in Python v3.11)") and [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)") ).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 表示这种数据类型的项必须进行引用计数（使用[`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(in Python v3.11)")和[`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)")）。
- en: '[PRE198]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Same as [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT").
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")相同。
- en: '[PRE199]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Indicates arrays of this data-type must be converted to a list before pickling.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 表示必须在将数组转储为列表之前将这种数据类型的数组转换为列表。
- en: '[PRE200]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Indicates the item is a pointer to some other data-type
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 表示该项是指向其他数据类型的指针
- en: '[PRE201]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Indicates memory for this data-type must be initialized (set to 0) on creation.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 表示必须初始化此数据类型的内存（设置为0）。
- en: '[PRE202]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: Indicates this data-type requires the Python C-API during access (so don’t give
    up the GIL if array access is going to be needed).
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 表明此数据类型在访问时需要Python C-API（因此，在需要数组访问时不要放弃GIL）。
- en: '[PRE203]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: On array access use the `f->getitem` function pointer instead of the standard
    conversion to an array scalar. Must use if you don’t define an array scalar to
    go along with the data-type.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组访问时，使用`f->getitem`函数指针而不是标准的转换为数组标量。如果不定义与数据类型一起使用的数组标量，必须使用。
- en: '[PRE204]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: When creating a 0-d array from an array scalar use `f->setitem` instead of the
    standard copy from an array scalar. Must use if you don’t define an array scalar
    to go along with the data-type.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 从数组标量创建一个0-d数组时，请使用`f->setitem`而不是标准的从数组标量复制。如果不定义与数据类型一起使用的数组标量，必须使用。
- en: '[PRE205]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: The bits that are inherited for the parent data-type if these bits are set in
    any field of the data-type. Currently ( [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")
    ).
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据类型的任何字段中设置了这些位，则从父数据类型继承的位。目前（[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE206]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Bits set for the object data-type: ( [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE
    "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")
    | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")).'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 对象数据类型的设置位：（[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM
    "NPY_USE_GETITEM") | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")
    | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT
    "NPY_NEEDS_INIT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE207]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Return true if all the given flags are set for the data-type object.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对于数据类型对象设置了所有给定的标志，则返回true。
- en: '[PRE208]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Equivalent to [`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")
    (*dtype*, [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")（*dtype*，[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT")）。
- en: '[PRE209]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Functions implementing internal features. Not all of these function pointers
    must be defined for a given type. The required members are `nonzero`, `copyswap`,
    `copyswapn`, `setitem`, `getitem`, and `cast`. These are assumed to be non- `NULL`
    and `NULL` entries will cause a program crash. The other functions may be `NULL`
    which will just mean reduced functionality for that data-type. (Also, the nonzero
    function will be filled in with a default function if it is `NULL` when you register
    a user-defined data-type).
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 实现内部功能的函数。并非所有这些函数指针必须对给定类型进行定义。所需成员是`nonzero`、`copyswap`、`copyswapn`、`setitem`、`getitem`和`cast`。假定这些都是非`NULL`的，而`NULL`条目将导致程序崩溃。其他函数可能是`NULL`，这意味着该数据类型的功能将减少。
    （同时，如果在注册用户定义的数据类型时`NULL`，则`nonzero`函数将填充为默认函数）。
- en: '[PRE210]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: The concept of a behaved segment is used in the description of the function
    pointers. A behaved segment is one that is aligned and in native machine byte-order
    for the data-type. The `nonzero`, `copyswap`, `copyswapn`, `getitem`, and `setitem`
    functions can (and must) deal with mis-behaved arrays. The other functions require
    behaved memory segments.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '"表现正常"的概念用于描述函数指针。一个表现正常的段是指对齐且符合数据类型本机字节顺序的段。`nonzero`、`copyswap`、`copyswapn`、`getitem`和`setitem`函数可以（而且必须）处理不正常的数组。其他函数要求内存段表现正常。'
- en: '[PRE211]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: An array of function pointers to cast from the current type to all of the other
    builtin types. Each function casts a contiguous, aligned, and notswapped buffer
    pointed at by *from* to a contiguous, aligned, and notswapped buffer pointed at
    by *to* The number of items to cast is given by *n*, and the arguments *fromarr*
    and *toarr* are interpreted as PyArrayObjects for flexible arrays to get itemsize
    information.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 一串函数指针，用于将当前类型向所有其他内置类型转换。每个函数将一个由*from*指向的连续、对齐、未交换的缓冲区转换为一个由*to*指向的连续、对齐和未交换的缓冲区。要转换的项数由*n*给出，参数*fromarr*和*toarr*被解释为灵活数组的PyArrayObjects以获取itemsize信息。
- en: '[PRE212]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: A pointer to a function that returns a standard Python object from a single
    element of the array object *arr* pointed to by *data*. This function must be
    able to deal with “misbehaved “(misaligned and/or swapped) arrays correctly.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向从由*data*指向的数组对象*arr*的单个元素返回标准Python对象的函数的指针。这个函数必须能够正确处理“不正常”（不对齐和/或交换）的数组。
- en: '[PRE213]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: A pointer to a function that sets the Python object *item* into the array, *arr*,
    at the position pointed to by *data* . This function deals with “misbehaved” arrays.
    If successful, a zero is returned, otherwise, a negative one is returned (and
    a Python error set).
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向将Python对象*item*设置到由*data*指向的数组*arr*中的函数的指针。这个函数处理“不正常的”数组。如果成功，返回值为零，否则返回一个负数（并设置一个Python错误）。
- en: '[PRE214]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: These members are both pointers to functions to copy data from *src* to *dest*
    and *swap* if indicated. The value of arr is only used for flexible ( [`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING"), [`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE"),
    and [`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID "NPY_VOID") ) arrays (and is
    obtained from `arr->descr->elsize` ). The second function copies a single value,
    while the first loops over n values with the provided strides. These functions
    can deal with misbehaved *src* data. If *src* is NULL then no copy is performed.
    If *swap* is 0, then no byteswapping occurs. It is assumed that *dest* and *src*
    do not overlap. If they overlap, then use `memmove` (…) first followed by `copyswap(n)`
    with NULL valued `src`.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成员都是指向从*src*复制数据到*dest*并在需要时进行*swap*的函数的指针。arr的值仅用于灵活（[`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING")，[`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE")和[`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID
    "NPY_VOID")）数组（并且从`arr->descr->elsize`中获取）。第二个函数复制单个值，而第一个函数使用提供的步幅循环n次。这些函数可以处理不正常的*src*数据。如果*src*为NULL，则不执行复制。如果*swap*为0，则不进行字节交换。假定*dest*和*src*不重叠。如果它们重叠，则首先使用`memmove`（…），然后使用带有空值`src`的`copyswap(n)`。
- en: '[PRE216]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: A pointer to a function that compares two elements of the array, `arr`, pointed
    to by `d1` and `d2`. This function requires behaved (aligned and not swapped)
    arrays. The return value is 1 if * `d1` > * `d2`, 0 if * `d1` == * `d2`, and -1
    if * `d1` < * `d2`. The array object `arr` is used to retrieve itemsize and field
    information for flexible arrays.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向比较数组`arr`中由`d1`和`d2`指向的两个元素的函数的指针。这个函数要求数组表现正常（对齐并且没有交换）。如果* `d1` > * `d2`，返回值为1；如果*
    `d1` == * `d2`，返回值为0；如果* `d1` < * `d2`，返回值为-1。数组对象`arr`用于获取灵活数组的itemsize和字段信息。
- en: '[PRE217]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: A pointer to a function that retrieves the index of the largest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the largest element is returned in `max_ind`.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向从由`data`指向的元素开始的`arr`中`n`个元素中最大值的索引的函数的指针。这个函数要求内存段是连续的并且表现正常。返回值总是0。最大元素的索引存储在`max_ind`中。
- en: '[PRE218]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: A pointer to a function that multiplies two `n` -length sequences together,
    adds them, and places the result in element pointed to by `op` of `arr`. The start
    of the two sequences are pointed to by `ip1` and `ip2`. To get to the next element
    in each sequence requires a jump of `is1` and `is2` *bytes*, respectively. This
    function requires behaved (though not necessarily contiguous) memory.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，用于将两个长度为`n`的序列相乘，并将它们相加，然后将结果放在`arr`的`op`指向的元素中。两个序列的起始位置分别由`ip1`和`ip2`指向。要达到每个序列的下一个元素，需要分别跳过`is1`和`is2`
    *字节*。此函数需要被认为是行为良好的（尽管不一定连续）内存。
- en: '[PRE219]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: A pointer to a function that scans (scanf style) one element of the corresponding
    type from the file descriptor `fd` into the array memory pointed to by `ip`. The
    array is assumed to be behaved. The last argument `arr` is the array to be scanned
    into. Returns number of receiving arguments successfully assigned (which may be
    zero in case a matching failure occurred before the first receiving argument was
    assigned), or EOF if input failure occurs before the first receiving argument
    was assigned. This function should be called without holding the Python GIL, and
    has to grab it for error reporting.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，用于从文件描述符`fd`中以（scanf风格）扫描相应类型的元素到`ip`指向的数组内存中。假定该数组是被认为是行为良好的。最后一个参数`arr`是要扫描到的数组。返回成功分配的接收参数的数量（如果在分配第一个接收参数之前发生匹配失败，这个数量可能为零），或者在分配第一个接收参数之前发生输入失败时返回EOF。在报告错误时应该在不持有Python
    GIL的情况下调用此函数，并且会为错误报告而调用GIL。
- en: '[PRE220]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: A pointer to a function that converts the string pointed to by `str` to one
    element of the corresponding type and places it in the memory location pointed
    to by `ip`. After the conversion is completed, `*endptr` points to the rest of
    the string. The last argument `arr` is the array into which ip points (needed
    for variable-size data- types). Returns 0 on success or -1 on failure. Requires
    a behaved array. This function should be called without holding the Python GIL,
    and has to grab it for error reporting.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，用于将由`str`指向的字符串转换为相应类型的一个元素，并将其放入`ip`指向的内存位置。转换完成后，`*endptr`指向字符串的其余部分。最后一个参数`arr`是ip指向的数组（对于可变大小数据类型是必需的）。成功返回0，失败返回-1。需要一个被认为是行为良好的数组。在报告错误时应该在不持有Python
    GIL的情况下调用此函数，并且会为错误报告而调用GIL。
- en: '[PRE221]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: A pointer to a function that returns TRUE if the item of `arr` pointed to by
    `data` is nonzero. This function can deal with misbehaved arrays.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，如果`data`指向的`arr`项是非零则返回TRUE。此函数可以处理行为不良的数组。
- en: '[PRE222]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: A pointer to a function that fills a contiguous array of given length with data.
    The first two elements of the array must already be filled- in. From these two
    values, a delta will be computed and the values from item 3 to the end will be
    computed by repeatedly adding this computed delta. The data buffer must be well-behaved.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，用于用数据填充给定长度的连续数组。数组的前两个元素必须已经填充了值。从这两个值中，将计算出一个增量，并且从第3个到最后一个元素将会反复地加上这个计算出的增量。数据缓冲区必须是行为良好的。
- en: '[PRE223]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: A pointer to a function that fills a contiguous `buffer` of the given `length`
    with a single scalar `value` whose address is given. The final argument is the
    array which is needed to get the itemsize for variable-length arrays.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个函数的指针，用于使用给定的单一标量值向长度为给定`length`的连续`buffer`填充数据。最后一个参数是所需的用于变长数组获取itemsize的数组。
- en: '[PRE224]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: An array of function pointers to a particular sorting algorithms. A particular
    sorting algorithm is obtained using a key (so far [`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT"), [`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT"),
    and [`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT "NPY_MERGESORT")
    are defined). These sorts are done in-place assuming contiguous and aligned data.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向特定排序算法的函数指针数组。使用键（到目前为止已经定义了[`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT")，[`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT")，和[`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT
    "NPY_MERGESORT")）可以获取特定的排序算法。这些排序是就地进行的，假定数据是连续的和对齐的。
- en: '[PRE225]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: An array of function pointers to sorting algorithms for this data type. The
    same sorting algorithms as for sort are available. The indices producing the sort
    are returned in `result` (which must be initialized with indices 0 to `length-1`
    inclusive).
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指向用于此数据类型的排序算法的函数指针数组。与sort相同的排序算法可用。产生排序的索引将会返回在`result`中（必须初始化为包含0到`length-1`的索引）。
- en: '[PRE226]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Either `NULL` or a dictionary containing low-level casting functions for user-
    defined data-types. Each function is wrapped in a [PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)")* and keyed by the data-type number.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 要么为`NULL`，要么是包含用户定义数据类型的低级转换函数的字典。每个函数都被包装在一个[PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(在Python v3.11)")*中，并由数据类型编号键入。
- en: '[PRE227]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: A function to determine how scalars of this type should be interpreted. The
    argument is `NULL` or a 0-dimensional array containing the data (if that is needed
    to determine the kind of scalar). The return value must be of type [`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND").
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 用于确定应如何解释此类型标量的函数。参数为`NULL`或包含数据的0维数组（如果需要确定标量类型）。返回值必须是[`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND")类型。
- en: '[PRE228]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Either `NULL` or an array of [`NPY_NSCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS") pointers. These pointers should each be either `NULL` or a
    pointer to an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")) indicating data-types that a scalar of this data-type of the specified
    kind can be cast to safely (this usually means without losing precision).
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 要么为`NULL`，要么为[`NPY_SCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS")指针数组。这些指针应该是`NULL`，或者指向整数数组（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")结尾），表示此数据类型的标量可以安全转换为指定类型的数据类型（通常表示不会失去精度）。
- en: '[PRE229]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Either `NULL` or an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE") ) indicated data-types that this data-type can be cast to safely
    (this usually means without losing precision).
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 要么为`NULL`，要么为整数数组（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE "NPY_NOTYPE")结尾），表示此数据类型可以安全转换为的数据类型（通常表示不会失去精度）。
- en: '[PRE230]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'Deprecated since version 1.17: The use of this function will give a deprecation
    warning when `np.clip`. Instead of this function, the datatype must instead use
    `PyUFunc_RegisterLoopForDescr` to attach a custom loop to `np.core.umath.clip`,
    `np.minimum`, and `np.maximum`.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.17起弃用：使用此函数将在`np.clip`时产生弃用警告。该数据类型必须使用`PyUFunc_RegisterLoopForDescr`来将自定义循环附加到`np.core.umath.clip`，`np.minimum`和`np.maximum`。
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that reads `n_in` items from `in`, and writes to `out` the read value
    if it is within the limits pointed to by `min` and `max`, or the corresponding
    limit if outside. The memory segments must be contiguous and behaved, and either
    `min` or `max` may be `NULL`, but not both.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，从`in`中读取`n_in`个项目，并将读取的值写入`out`，如果在`min`和`max`指向的限制范围内，则在外部使用对应的限制。内存段必须是连续的且规范化的，并且`min`或`max`可能为`NULL`，但不能同时为`NULL`。
- en: '[PRE231]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that takes a pointer `in` to an array of `n_in` items, a pointer
    `mask` to an array of `n_in` boolean values, and a pointer `vals` to an array
    of `nv` items. Items from `vals` are copied into `in` wherever the value in `mask`
    is non-zero, tiling `vals` as needed if `nv < n_in`. All arrays must be contiguous
    and behaved.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，接受指向`n_in`个项目数组的指针`in`，指向`n_in`个布尔值的数组的指针`mask`，以及指向`nv`个项目的数组的指针`vals`。无需失去精度地将`vals`中的项复制到`in`中，只需在`mask`中的值非零时，根据需要平铺`vals`，如果`nv
    < n_in`。所有数组都必须是连续的且规范化的。
- en: '[PRE232]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.19起弃用：设置此函数已被弃用，应始终为`NULL`，如果设置，将被忽略。
- en: A function that takes a pointer `src` to a C contiguous, behaved segment, interpreted
    as a 3-dimensional array of shape `(n_outer, nindarray, nelem)`, a pointer `indarray`
    to a contiguous, behaved segment of `m_middle` integer indices, and a pointer
    `dest` to a C contiguous, behaved segment, interpreted as a 3-dimensional array
    of shape `(n_outer, m_middle, nelem)`. The indices in `indarray` are used to index
    `src` along the second dimension, and copy the corresponding chunks of `nelem`
    items into `dest`. `clipmode` (which can take on the values [`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE"), [`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP") or [`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP")) determines how will indices smaller than 0 or larger than `nindarray`
    will be handled.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，它接受一个指向C连续、行为良好的段`src`，解释为形状为`(n_outer, nindarray, nelem)`的三维数组的指针，一个指向`m_middle`整数索引的连续的、行为良好的段`indarray`的指针，以及一个指向C连续、行为良好的段的指针`dest`，解释为形状为`(n_outer,
    m_middle, nelem)`的三维数组。`indarray`中的索引用于沿着第二维对`src`进行索引，并将相应的`nelem`项的块复制到`dest`中。`clipmode`（可以取值[`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE")、[`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP")或[`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP"）确定小于0或大于`nindarray`的索引将如何处理。
- en: '[PRE233]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: A pointer to a function that retrieves the index of the smallest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the smallest element is returned in `min_ind`.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指针，指向一个函数，用于检索`data`指向的开始于`arr`的`n`个元素中最小元素的索引。此函数要求内存段是连续的且行为良好。返回值始终为0。最小元素的索引存储在`min_ind`中。
- en: The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") typeobject implements many
    of the features of [`Python objects`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)") including the [`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(in Python v3.11)"), [`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(in Python v3.11)"), [`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(in Python v3.11)"), and [`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(in Python v3.11)") interfaces. The [`rich comparison`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(in Python v3.11)")) is also used along with new-style attribute lookup for member
    ([`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(in Python v3.11)")) and properties ([`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(in Python v3.11)")). The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") can
    also be sub-typed.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 类型对象实现了许多[`Python对象`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)")的特性，包括[`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(in Python v3.11)")、[`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(in Python v3.11)")、[`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(in Python v3.11)")和[`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(in Python v3.11)")接口。还使用了[`rich comparison`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(in Python v3.11)")，以及新式属性查找用于成员([`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(in Python v3.11)"))和属性([`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(in Python v3.11)"))。[`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 也可以被子类型化。'
- en: Tip
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `tp_as_number` methods use a generic approach to call whatever function
    has been registered for handling the operation. When the `_multiarray_umath module`
    is imported, it sets the numeric operations for all arrays to the corresponding
    ufuncs. This choice can be changed with [`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature") The `tp_str` and `tp_repr` methods can also
    be altered using [`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction").
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`tp_as_number`方法使用一种通用方法来调用已注册用于处理操作的任何函数。导入`_multiarray_umath`模块时，它将为所有数组设置相应的ufunc数值操作。这个选择可以使用[`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature")进行更改。还可以使用[`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction")更改`tp_str`和`tp_repr`方法。'
- en: PyUFunc_Type and PyUFuncObject
  id: totrans-541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyUFunc_Type和PyUFuncObject
- en: '[PRE234]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: The ufunc object is implemented by creation of the [`PyUFunc_Type`](#c.PyUFunc_Type
    "PyUFunc_Type"). It is a very simple type that implements only basic getattribute
    behavior, printing behavior, and has call behavior which allows these objects
    to act like functions. The basic idea behind the ufunc is to hold a reference
    to fast 1-dimensional (vector) loops for each data type that supports the operation.
    These one-dimensional loops all have the same signature and are the key to creating
    a new ufunc. They are called by the generic looping code as appropriate to implement
    the N-dimensional function. There are also some generic 1-d loops defined for
    floating and complexfloating arrays that allow you to define a ufunc using a single
    scalar function (*e.g.* atanh).
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc对象是通过创建[`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type")来实现的。它是一个非常简单的类型，仅实现了基本的getattribute行为、打印行为，并具有调用行为，使这些对象可以像函数一样工作。ufunc背后的基本思想是存储每种支持操作的数据类型的快速一维（向量）循环的引用.
    所有这些一维循环都有相同的标识并且是创建新ufunc的关键。它们由通用循环代码在适当时调用以实现N维功能。还为浮点和复数浮点数组定义了一些通用的1-d循环，使您可以使用单个标量函数(*例如*atanh)来定义一个ufunc。
- en: '[PRE235]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'The core of the ufunc is the [`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")
    which contains all the information needed to call the underlying C-code loops
    that perform the actual work. While it is described here for completeness, it
    should be considered internal to NumPy and manipulated via `PyUFunc_*` functions.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc的核心是[`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")，它包含调用执行实际工作的底层C代码循环所需的所有信息。虽然这里对其进行了描述以便完整，但应该将其视为NumPy的内部部分，并通过`PyUFunc_*`函数进行操作。该结构的大小可能会随着NumPy版本的更改而改变。为确保兼容性：
- en: Never declare a non-pointer instance of the struct
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行指针算术
- en: Never use `sizeof(PyUFuncObject)`
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用`sizeof(PyUFuncObject)`
- en: 'It has the following structure:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下结构：
- en: '[PRE236]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: The number of input arguments.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数的数量。
- en: '[PRE238]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: The number of output arguments.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 输出参数的数量。
- en: '[PRE239]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: The total number of arguments (*nin* + *nout*). This must be less than [`NPY_MAXARGS`](array.html#c.NPY_MAXARGS
    "NPY_MAXARGS").
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的总数(*nin* + *nout*)。这个必须小于[`NPY_MAXARGS`](array.html#c.NPY_MAXARGS "NPY_MAXARGS")。
- en: '[PRE240]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Either [`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One"), [`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero"), [`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne"),
    [`PyUFunc_None`](ufunc.html#c.PyUFunc_None "PyUFunc_None"), [`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone"), or [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue") to indicate the identity for this operation. It is only
    used for a reduce-like call on an empty array.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One")、[`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero")、[`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne")、[`PyUFunc_None`](ufunc.html#c.PyUFunc_None
    "PyUFunc_None")、[`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone")或[`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")来指示此操作的标识。它仅在对空数组进行类似缩减的调用时使用。
- en: '[PRE241]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: An array of function pointers — one for each data type supported by the ufunc.
    This is the vector loop that is called to implement the underlying function *dims*
    [0] times. The first argument, *args*, is an array of *nargs* pointers to behaved
    memory. Pointers to the data for the input arguments are first, followed by the
    pointers to the data for the output arguments. How many bytes must be skipped
    to get to the next element in the sequence is specified by the corresponding entry
    in the *steps* array. The last argument allows the loop to receive extra information.
    This is commonly used so that a single, generic vector loop can be used for multiple
    functions. In this case, the actual scalar function to call is passed in as *extradata*.
    The size of this function pointer array is ntypes.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针数组，每一种数据类型都有一个。这个向量循环用于实现底层函数*dims*[0]次。第一个参数*args*是一个具有*nargs*指针的数组，指向行为良好的内存。首先是指向输入参数数据的指针，然后是指向输出参数数据的指针。必须跳过多少字节才能到达序列中的下一个元素由*steps*数组中的相应条目指定。最后一个参数允许循环接收额外的信息。这通常是为了使单个通用向量循环用于多个函数。在这种情况下，要调用的实际标量函数以*extradata*的形式传递。此函数指针数组的大小为ntypes。
- en: '[PRE242]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Extra data to be passed to the 1-d vector loops or `NULL` if no extra-data is
    needed. This C-array must be the same size ( *i.e.* ntypes) as the functions array.
    `NULL` is used if extra_data is not needed. Several C-API calls for UFuncs are
    just 1-d vector loops that make use of this extra data to receive a pointer to
    the actual function to call.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给1维向量循环的额外数据，如果不需要额外数据，则为`NULL`。这个C数组的大小必须与函数数组相同（即ntypes）。如果不需要extra_data，则使用`NULL`。一些用于UFuncs的C-API调用只是1维向量循环，利用这些额外数据来接收要调用的实际函数的指针。
- en: '[PRE243]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: The number of supported data types for the ufunc. This number specifies how
    many different 1-d loops (of the builtin data types) are available.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: Ufunc支持的数据类型数。此数字指定有多少不同的1维循环（内置数据类型）可用。
- en: '[PRE244]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Unused.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用。
- en: '[PRE245]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: A string name for the ufunc. This is used dynamically to build the __doc__ attribute
    of ufuncs.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: Ufunc的字符串名称。这个动态用于构建ufunc的__doc__属性。
- en: '[PRE246]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: An array of \(nargs \times ntypes\) 8-bit type_numbers which contains the type
    signature for the function for each of the supported (builtin) data types. For
    each of the *ntypes* functions, the corresponding set of type numbers in this
    array shows how the *args* argument should be interpreted in the 1-d vector loop.
    These type numbers do not have to be the same type and mixed-type ufuncs are supported.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 一个\(nargs \times ntypes\)的8位type_numbers数组，其中包含每个支持的（内置）数据类型的函数的类型签名。对于*ntypes*个函数中的每一个，该数组中相应的一组类型编号显示了如何在1维向量循环中解释*args*参数。这些类型编号不必是相同的类型，支持混合类型的ufunc。
- en: '[PRE247]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Documentation for the ufunc. Should not contain the function signature as this
    is generated dynamically when __doc__ is retrieved.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: UFunc的文档。不应包含函数签名，因为这在检索__doc__时动态生成。
- en: '[PRE248]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Any dynamically allocated memory. Currently, this is used for dynamic ufuncs
    created from a python function to store room for the types, data, and name members.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 任何动态分配的内存。目前，这用于从python函数创建的动态ufunc中存储类型、数据和名称成员的空间。
- en: '[PRE249]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: For ufuncs dynamically created from python functions, this member holds a reference
    to the underlying Python function.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从python函数动态创建的ufunc，此成员保存对底层Python函数的引用。
- en: '[PRE250]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: A dictionary of user-defined 1-d vector loops (stored as CObject ptrs) for user-defined
    types. A loop may be registered by the user for any user-defined type. It is retrieved
    by type number. User defined type numbers are always larger than [`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF").
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的1维向量循环的字典（存储为CObject ptrs），用于用户定义的类型。用户可以为任何用户定义的类型注册循环。它通过类型编号检索。用户定义的类型编号始终大于[`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF")。
- en: '[PRE251]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 0 for scalar ufuncs; 1 for generalized ufuncs
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 标量ufunc的为0；广义ufunc的为1。
- en: '[PRE252]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Number of distinct core dimension names in the signature
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 签名中的不同核心维度名称数
- en: '[PRE253]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Number of core dimensions of each argument
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数的核心维度数
- en: '[PRE254]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'Dimension indices in a flattened form; indices of argument `k` are stored in
    `core_dim_ixs[core_offsets[k] : core_offsets[k] + core_numdims[k]]`'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '展平形式的维度索引；参数`k`的索引存储在`core_dim_ixs[core_offsets[k] : core_offsets[k] + core_numdims[k]]`'
- en: '[PRE255]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Position of 1st core dimension of each argument in `core_dim_ixs`, equivalent
    to cumsum(`core_num_dims`)
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数在`core_dim_ixs`中的第一个核心维度的位置，相当于cumsum(`core_num_dims`)
- en: '[PRE256]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Core signature string
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 核心签名字符串
- en: '[PRE257]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: A function which resolves the types and fills an array with the dtypes for the
    inputs and outputs
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 解析类型并填充一个数组以获取输入和输出的dtype的函数
- en: '[PRE258]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'Deprecated since version 1.22: Some fallback support for this slot exists,
    but will be removed eventually. A universal function that relied on this will
    have to be ported eventually. See [NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)") and [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.22起弃用：该插槽的一些回退支持存在，但最终将被移除。依赖于此的通用函数最终将必须进行移植。参见[NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)")和[NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")
- en: '[PRE259]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: For a possible future loop selector with a different signature.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可能的具有不同签名的未来循环选择器。
- en: '[PRE260]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Override the default operand flags for each ufunc operand.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖每个ufunc操作数的默认操作数标志。
- en: '[PRE261]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Override the default nditer flags for the ufunc.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖ufunc的默认nditer标志。
- en: Added in API version 0x0000000D
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在API版本0x0000000D中添加
- en: '[PRE262]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: For each distinct core dimension, the possible [frozen](generalized-ufuncs.html#frozen)
    size if [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED "UFUNC_CORE_DIM_SIZE_INFERRED")
    is `0`
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个不同的核心维度，如果[`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED")为`0`，则可能为[冻结](generalized-ufuncs.html#frozen)大小
- en: '[PRE263]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: For each distinct core dimension, a set of flags ( [`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE
    "UFUNC_CORE_DIM_CAN_IGNORE") and [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED"))
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个不同的核心维度，一组标志（[`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE
    "UFUNC_CORE_DIM_CAN_IGNORE") 和 [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED"))
- en: '[PRE264]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Identity for reduction, when [`PyUFuncObject.identity`](#c.PyUFuncObject.identity
    "PyUFuncObject.identity") is equal to [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue").
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 缩减的身份，当[`PyUFuncObject.identity`](#c.PyUFuncObject.identity "PyUFuncObject.identity")等于[`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")时。
- en: '[PRE265]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: if the dim name ends in `?`
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度名称以`?`结尾
- en: '[PRE266]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: if the dim size will be determined from the operands and not from a [frozen](generalized-ufuncs.html#frozen)
    signature
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度大小将根据操作数确定而不是来自[冻结](generalized-ufuncs.html#frozen)签名
- en: PyArrayIter_Type and PyArrayIterObject
  id: totrans-612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayIter_Type 和 PyArrayIterObject
- en: '[PRE267]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    array. It is the object returned from the flat attribute of an ndarray. It is
    also used extensively throughout the implementation internals to loop over an
    N-dimensional array. The tp_as_mapping interface is implemented so that the iterator
    object can be indexed (using 1-d indexing), and a few methods are implemented
    through the tp_methods table. This object implements the next method and can be
    used anywhere an iterator can be used in Python.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，可以轻松地循环遍历N维数组。它是从ndarray的flat属性返回的对象。它还广泛地用于实现内部，以便循环遍历N维数组。实现了tp_as_mapping接口，以便可以索引迭代器对象（使用1-d索引），并且通过tp_methods表实现了一些方法。这个对象实现了next方法，并且可以在Python中的任何地方使用迭代器。
- en: '[PRE268]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'The C-structure corresponding to an object of [`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type") is the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject").
    The [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") is used to
    keep track of a pointer into an N-dimensional array. It contains associated information
    used to quickly march through the array. The pointer can be adjusted in three
    basic ways: 1) advance to the “next” position in the array in a C-style contiguous
    fashion, 2) advance to an arbitrary N-dimensional coordinate in the array, and
    3) advance to an arbitrary one-dimensional index into the array. The members of
    the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") structure
    are used in these calculations. Iterator objects keep their own dimension and
    strides information about an array. This can be adjusted as needed for “broadcasting,”
    or to loop over only specific dimensions.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type")对象对应的C结构是[`PyArrayIterObject`](#c.PyArrayIterObject
    "PyArrayIterObject")。 [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject")用于跟踪N维数组中的指针。它包含用于快速遍历数组的相关信息。指针可以通过三种基本方式进行调整：1）以C样式的连续方式前进到数组中的“下一个”位置，2）前进到数组中的任意N维坐标，3）前进到数组中的任意一维索引。[`PyArrayIterObject`](#c.PyArrayIterObject
    "PyArrayIterObject")结构的成员用于进行这些计算。迭代器对象保留有关数组的自己的维度和跨度信息。这可根据需要进行调整，以进行“广播”，或仅在特定维度上循环。
- en: '[PRE269]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: \(N-1\) where \(N\) is the number of dimensions in the underlying array.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: \(N-1\)，其中\(N\)是底层数组中的维数。
- en: '[PRE271]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: The current 1-d index into the array.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 到数组的当前一维索引。
- en: '[PRE272]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: The total size of the underlying array.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 底层数组的总大小。
- en: '[PRE273]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: An \(N\) -dimensional index into the array.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 到数组的\(N\) -维索引。
- en: '[PRE274]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: The size of the array minus 1 in each dimension.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 每个维度中数组大小减1。
- en: '[PRE275]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: The strides of the array. How many bytes needed to jump to the next element
    in each dimension.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的跨度。在每个维度中跳到下一个元素需要多少字节。
- en: '[PRE276]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: How many bytes needed to jump from the end of a dimension back to its beginning.
    Note that `backstrides[k] == strides[k] * dims_m1[k]`, but it is stored here as
    an optimization.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 从维度末尾跳回到开头需要多少字节。注意`backstrides[k] == strides[k] * dims_m1[k]`，但它被存储在这里作为一种优化。
- en: '[PRE277]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: This array is used in computing an N-d index from a 1-d index. It contains needed
    products of the dimensions.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 该数组用于从一维索引计算N维索引。它包含所需的维度的乘积。
- en: '[PRE278]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: A pointer to the underlying ndarray this iterator was created to represent.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 指向此迭代器被创建以代表的基础ndarray的指针。
- en: '[PRE279]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: This member points to an element in the ndarray indicated by the index.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员指向由索引指示的ndarray中的一个元素。
- en: '[PRE280]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: This flag is true if the underlying array is [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"). It is used to simplify calculations when possible.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层数组是[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")，则此标志为true。它用于在可能的情况下简化计算。
- en: How to use an array iterator on a C-level is explained more fully in later sections.
    Typically, you do not need to concern yourself with the internal structure of
    the iterator object, and merely interact with it through the use of the macros
    [`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT "PyArray_ITER_NEXT") (it),
    [`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO "PyArray_ITER_GOTO") (it,
    dest), or [`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D "PyArray_ITER_GOTO1D")
    (it, index). All of these macros require the argument *it* to be a [PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在C级别上使用数组迭代器在后续章节中有更详细的解释。通常情况下，您不需要关心迭代器对象的内部结构，只需通过宏[`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT
    "PyArray_ITER_NEXT") (it)、[`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO
    "PyArray_ITER_GOTO") (it, dest)或者[`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D
    "PyArray_ITER_GOTO1D") (it, index)来与之交互即可，所有这些宏要求参数*it*是[PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*。
- en: PyArrayMultiIter_Type and PyArrayMultiIterObject
  id: totrans-641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayMultiIter_Type和PyArrayMultiIterObject
- en: '[PRE281]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: This type provides an iterator that encapsulates the concept of broadcasting.
    It allows \(N\) arrays to be broadcast together so that the loop progresses in
    C-style contiguous fashion over the broadcasted array. The corresponding C-structure
    is the [`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject "PyArrayMultiIterObject")
    whose memory layout must begin any object, *obj*, passed in to the [`PyArray_Broadcast`](array.html#c.PyArray_Broadcast
    "PyArray_Broadcast") (obj) function. Broadcasting is performed by adjusting array
    iterators so that each iterator represents the broadcasted shape and size, but
    has its strides adjusted so that the correct element from the array is used at
    each iteration.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型提供了一种封装广播概念的迭代器。它允许将\(N\)个数组一起广播，使得循环按照广播数组的C风格连续方式进行。相应的C结构是[`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject
    "PyArrayMultiIterObject")，其内存布局必须从任何传递给[`PyArray_Broadcast`](array.html#c.PyArray_Broadcast
    "PyArray_Broadcast") (obj)函数的对象*obj*开始。通过调整数组迭代器执行广播，使得每个迭代器表示广播的形状和大小，但其步幅调整为每次迭代中使用数组的正确元素。
- en: '[PRE282]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: The number of arrays that need to be broadcast to the same shape.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 需要广播到相同形状的数组的数量。
- en: '[PRE285]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: The total broadcasted size.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 广播的总大小。
- en: '[PRE286]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: The current (1-d) index into the broadcasted result.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果的当前（1-D）索引。
- en: '[PRE287]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: The number of dimensions in the broadcasted result.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果中的维数。
- en: '[PRE288]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: The shape of the broadcasted result (only `nd` slots are used).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果的形状（仅使用`nd`个插槽）。
- en: '[PRE289]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: An array of iterator objects that holds the iterators for the arrays to be broadcast
    together. On return, the iterators are adjusted for broadcasting.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 一个迭代器对象数组，其中包含要合并广播的数组的迭代器。返回时，这些迭代器已调整为进行广播。
- en: PyArrayNeighborhoodIter_Type and PyArrayNeighborhoodIterObject
  id: totrans-658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayNeighborhoodIter_Type和PyArrayNeighborhoodIterObject
- en: '[PRE290]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    neighborhood.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，它可以轻松地在N维邻域上循环。
- en: '[PRE291]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: The C-structure corresponding to an object of [`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type
    "PyArrayNeighborhoodIter_Type") is the [`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject
    "PyArrayNeighborhoodIterObject").
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type "PyArrayNeighborhoodIter_Type")对象对应的C结构是[`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject
    "PyArrayNeighborhoodIterObject")。
- en: '[PRE292]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: PyArrayFlags_Type and PyArrayFlagsObject
  id: totrans-664
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayFlags_Type和PyArrayFlagsObject
- en: '[PRE293]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: When the flags attribute is retrieved from Python, a special builtin object
    of this type is constructed. This special type makes it easier to work with the
    different flags by accessing them as attributes or by accessing them as if the
    object were a dictionary with the flag names as entries.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 当从Python检索flags属性时，会构造一个特殊的内置对象的此类型。这种特殊的类型使得通过访问它们作为属性或者假定对象是一个以标志名称为条目的字典而访问它们来更容易地处理不同的标志。
- en: '[PRE294]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: ScalarArrayTypes
  id: totrans-669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标量数组类型
- en: There is a Python type for each of the different built-in data types that can
    be present in the array. Most of these are simple wrappers around the corresponding
    data type in C. The C-names for these types are `Py{TYPE}ArrType_Type` where `{TYPE}`
    can be
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中可能出现的不同内置数据类型都有对应的 Python 类型。其中大多数类型只是对应的 C 语言数据类型的简单封装。这些类型在 C 语言中的名称为 `Py{TYPE}ArrType_Type`，其中
    `{TYPE}` 可以是
- en: '**Bool**, **Byte**, **Short**, **Int**, **Long**, **LongLong**, **UByte**,
    **UShort**, **UInt**, **ULong**, **ULongLong**, **Half**, **Float**, **Double**,
    **LongDouble**, **CFloat**, **CDouble**, **CLongDouble**, **String**, **Unicode**,
    **Void**, and **Object**.'
  id: totrans-671
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Bool**、**Byte**、**Short**、**Int**、**Long**、**LongLong**、**UByte**、**UShort**、**UInt**、**ULong**、**ULongLong**、**Half**、**Float**、**Double**、**LongDouble**、**CFloat**、**CDouble**、**CLongDouble**、**String**、**Unicode**、**Void**
    和 **Object**。'
- en: These type names are part of the C-API and can therefore be created in extension
    C-code. There is also a `PyIntpArrType_Type` and a `PyUIntpArrType_Type` that
    are simple substitutes for one of the integer types that can hold a pointer on
    the platform. The structure of these scalar objects is not exposed to C-code.
    The function [`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype "PyArray_ScalarAsCtype")
    (..) can be used to extract the C-type value from the array scalar and the function
    [`PyArray_Scalar`](array.html#c.PyArray_Scalar "PyArray_Scalar") (…) can be used
    to construct an array scalar from a C-value.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型名称属于 C-API 的一部分，因此可以在扩展 C 代码中创建。还有一个 `PyIntpArrType_Type` 和 `PyUIntpArrType_Type`，它们是平台上可以保存指针的整数类型的简单替代品。这些标量对象的结构对
    C 代码不可见。函数 [`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype "PyArray_ScalarAsCtype")
    (..) 可以用于从数组标量中提取 C 类型值，而函数 [`PyArray_Scalar`](array.html#c.PyArray_Scalar "PyArray_Scalar")
    (…) 可以用于从 C 值构造一个数组标量。
- en: PyArray_Type and PyArrayObject
  id: totrans-673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '-   [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 和 `PyArrayObject`'
- en: '[PRE296]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: The Python type of the ndarray is [`PyArray_Type`](#c.PyArray_Type "PyArray_Type").
    In C, every ndarray is a pointer to a [`PyArrayObject`](#c.PyArrayObject "PyArrayObject")
    structure. The ob_type member of this structure contains a pointer to the [`PyArray_Type`](#c.PyArray_Type
    "PyArray_Type") typeobject.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray 的 Python 类型是[`PyArray_Type`](#c.PyArray_Type "PyArray_Type")。在 C 中，每个
    ndarray 都是一个指向 [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") 结构的指针。这个结构的
    ob_type 成员包含一个指向 [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") 类型对象的指针。
- en: '[PRE297]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: The [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C-structure contains
    all of the required information for an array. All instances of an ndarray (and
    its subclasses) will have this structure. For future compatibility, these structure
    members should normally be accessed using the provided macros. If you need a shorter
    name, then you can make use of [`NPY_AO`](#c.NPY_AO "NPY_AO") (deprecated) which
    is defined to be equivalent to [`PyArrayObject`](#c.PyArrayObject "PyArrayObject").
    Direct access to the struct fields are deprecated. Use the `PyArray_*(arr)` form
    instead. As of NumPy 1.20, the size of this struct is not considered part of the
    NumPy ABI (see note at the end of the member list).
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayObject`](#c.PyArrayObject "PyArrayObject") C 结构包含数组的所有必要信息。所有 ndarray（及其子类）的实例都具有这一结构。为了未来的兼容性，应该使用提供的宏来访问这些结构成员。如果需要更短的名称，那么可以使用
    [`NPY_AO`](#c.NPY_AO "NPY_AO")（已弃用），它被定义为等同于 [`PyArrayObject`](#c.PyArrayObject
    "PyArrayObject")。直接访问结构字段已被弃用。请改用 `PyArray_*(arr)` 形式。从 NumPy 1.20 开始，此结构的大小不被认为是
    NumPy ABI 的一部分（请参见成员列表末尾的注释）。'
- en: '[PRE299]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: This is needed by all Python objects. It consists of (at least) a reference
    count member ( `ob_refcnt` ) and a pointer to the typeobject ( `ob_type` ). (Other
    elements may also be present if Python was compiled with special options see Include/object.h
    in the Python source tree for more information). The ob_type member points to
    a Python type object.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于所有 Python 对象。它至少包含一个引用计数成员（ `ob_refcnt` ）和一个类型对象指针（ `ob_type` ）。（如果使用特殊选项编译Python，可能还有其他成员，请参见
    Python 源代码树中的 Include/object.h 获取更多信息。）ob_type 成员指向一个 Python 类型对象。
- en: '[PRE301]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: Accessible via [`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA"), this
    data member is a pointer to the first element of the array. This pointer can (and
    normally should) be recast to the data type of the array.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`PyArray_DATA`](array.html#c.PyArray_DATA "PyArray_DATA") 可以访问到这个数据成员，它是数组的第一个元素的指针。这个指针可以（通常应该）被重新解释为数组的数据类型。
- en: '[PRE302]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: An integer providing the number of dimensions for this array. When nd is 0,
    the array is sometimes called a rank-0 array. Such arrays have undefined dimensions
    and strides and cannot be accessed. Macro [`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM") defined in `ndarraytypes.h` points to this data member. [`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") is the largest number of dimensions for any array.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 为此数组提供维数的整数。当 nd 为 0 时，有时称该数组为秩为 0 的数组。这样的数组具有未定义的维度和步幅，并且无法访问。宏 [`PyArray_NDIM`](array.html#c.PyArray_NDIM
    "PyArray_NDIM") 在 `ndarraytypes.h` 中定义，指向此数据成员。[`NPY_MAXDIMS`](array.html#c.NPY_MAXDIMS
    "NPY_MAXDIMS") 是任何数组的最大维数。
- en: '[PRE303]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: An array of integers providing the shape in each dimension as long as nd \(\geq\)
    1\. The integer is always large enough to hold a pointer on the platform, so the
    dimension size is only limited by memory. [`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") is the macro associated with this data member.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 一个提供每个维度的形状的整数数组，只要 nd \(\geq\) 1\. 该整数始终足够大，以容纳平台上的指针，因此维度大小仅受内存限制。[`PyArray_DIMS`](array.html#c.PyArray_DIMS
    "PyArray_DIMS") 是与此数据成员关联的宏。
- en: '[PRE304]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: An array of integers providing for each dimension the number of bytes that must
    be skipped to get to the next element in that dimension. Associated with macro
    [`PyArray_STRIDES`](array.html#c.PyArray_STRIDES "PyArray_STRIDES").
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个维度提供一个整数数组，指定必须跳过多少字节才能到达该维度中的下一个元素。与宏[`PyArray_STRIDES`](array.html#c.PyArray_STRIDES
    "PyArray_STRIDES") 相关。
- en: '[PRE305]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'Pointed to by [`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE"), this
    member is used to hold a pointer to another Python object that is related to this
    array. There are two use cases:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`PyArray_BASE`](array.html#c.PyArray_BASE "PyArray_BASE") 指向，此成员用于保存指向与此数组相关的另一个
    Python 对象的指针。有两种用法：
- en: If this array does not own its own memory, then base points to the Python object
    that owns it (perhaps another array object)
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果该数组不拥有自己的内存，则 base 指向拥有它的 Python 对象（也许是另一个数组对象）。
- en: If this array has the [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY") flag set, then this array is a working copy of a
    “misbehaved” array.
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果此数组设置了[`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY") 标志，则此数组是“行为不端”数组的工作副本。
- en: When `PyArray_ResolveWritebackIfCopy` is called, the array pointed to by base
    will be updated with the contents of this array.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `PyArray_ResolveWritebackIfCopy` 时，base 指向的数组将使用此数组的内容进行更新。
- en: '[PRE306]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: A pointer to a data-type descriptor object (see below). The data-type descriptor
    object is an instance of a new built-in type which allows a generic description
    of memory. There is a descriptor structure for each data type supported. This
    descriptor structure contains useful information about the type as well as a pointer
    to a table of function pointers to implement specific functionality. As the name
    suggests, it is associated with the macro [`PyArray_DESCR`](array.html#c.PyArray_DESCR
    "PyArray_DESCR").
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数据类型描述符对象的指针（见下文）。数据类型描述符对象是一种新的内置类型的实例，允许对内存进行通用描述。对于支持的每种数据类型都有一个描述符结构。此描述符结构包含有关类型的有用信息以及实现特定功能的函数指针表的指针。正如名称所示，它与宏[`PyArray_DESCR`](array.html#c.PyArray_DESCR
    "PyArray_DESCR") 相关联。
- en: '[PRE307]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Pointed to by the macro [`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS"),
    this data member represents the flags indicating how the memory pointed to by
    data is to be interpreted. Possible flags are [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS"), [`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA"), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED"),
    [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE"),
    [`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY "NPY_ARRAY_WRITEBACKIFCOPY").
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 由宏[`PyArray_FLAGS`](array.html#c.PyArray_FLAGS "PyArray_FLAGS") 指向的，这个数据成员表示标志，指示由
    data 指向的内存应如何解释。可能的标志有[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS")、[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")、[`NPY_ARRAY_OWNDATA`](array.html#c.NPY_ARRAY_OWNDATA
    "NPY_ARRAY_OWNDATA")、[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")、[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")、[`NPY_ARRAY_WRITEBACKIFCOPY`](array.html#c.NPY_ARRAY_WRITEBACKIFCOPY
    "NPY_ARRAY_WRITEBACKIFCOPY")。
- en: '[PRE308]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: This member allows array objects to have weak references (using the weakref
    module).
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员允许数组对象具有弱引用（使用 weakref 模块）。
- en: Note
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Further members are considered private and version dependent. If the size of
    the struct is important for your code, special care must be taken. A possible
    use-case when this is relevant is subclassing in C. If your code relies on `sizeof(PyArrayObject)`
    to be constant, you must add the following check at import time:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的成员被视为私有和版本相关的。如果结构的大小对您的代码很重要，则必须特别小心。当这一点是相关的时候可能的用例是在 C 中进行子类化。如果您的代码依赖于`sizeof(PyArrayObject)`是常量，您必须在导入时添加以下检查：
- en: '[PRE309]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: To ensure that your code does not have to be compiled for a specific NumPy version,
    you may add a constant, leaving room for changes in NumPy. A solution guaranteed
    to be compatible with any future NumPy version requires the use of a runtime calculate
    offset and allocation size.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的代码不必为特定的 NumPy 版本编译，您可以添加一个常量，为 NumPy 的更改留出空间。一个确保与任何未来 NumPy 版本兼容的解决方案需要使用运行时计算偏移和分配大小。
- en: PyArrayDescr_Type and PyArray_Descr
  id: totrans-705
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayDescr_Type 和 PyArray_Descr
- en: '[PRE310]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: The [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type") is the built-in
    type of the data-type-descriptor objects used to describe how the bytes comprising
    the array are to be interpreted. There are 21 statically-defined [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") objects for the built-in data-types. While these participate
    in reference counting, their reference count should never reach zero. There is
    also a dynamic table of user-defined [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr")
    objects that is also maintained. Once a data-type-descriptor object is “registered”
    it should never be deallocated either. The function [`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType
    "PyArray_DescrFromType") (…) can be used to retrieve a [`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr") object from an enumerated type-number (either built-in or user-
    defined).
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type")是用于描述如何解释组成数组的字节的数据类型描述符对象的内置类型。有21个静态定义的[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象用于内置数据类型。虽然它们参与引用计数，但它们的引用计数永远不应该达到零。还有一个动态的用户定义的[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象表也在维护中。一旦数据类型描述符对象被“注册”，就不应该被释放。函数[`PyArray_DescrFromType`](array.html#c.PyArray_DescrFromType
    "PyArray_DescrFromType")（…）可以用于从枚举类型编号（内置或用户定义的）检索[`PyArray_Descr`](#c.PyArray_Descr
    "PyArray_Descr")对象。'
- en: '[PRE311]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'The [`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr") structure lies at the
    heart of the [`PyArrayDescr_Type`](#c.PyArrayDescr_Type "PyArrayDescr_Type").
    While it is described here for completeness, it should be considered internal
    to NumPy and manipulated via `PyArrayDescr_*` or `PyDataType*` functions and macros.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Descr`](#c.PyArray_Descr "PyArray_Descr")结构位于[`PyArrayDescr_Type`](#c.PyArrayDescr_Type
    "PyArrayDescr_Type")的核心。虽然这里对其进行了描述以保持完整性，但应该将其视为 NumPy 的内部结构，并通过`PyArrayDescr_*`或`PyDataType*`函数和宏来操作。此结构的大小可能会随
    NumPy 版本的变化而变化。为了确保兼容性：'
- en: Never declare a non-pointer instance of the struct
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要进行指针算术运算
- en: Never use `sizeof(PyArray_Descr)`
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用 `sizeof(PyArray_Descr)`
- en: 'It has the following structure:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下结构：
- en: '[PRE312]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Pointer to a typeobject that is the corresponding Python type for the elements
    of this array. For the builtin types, this points to the corresponding array scalar.
    For user-defined types, this should point to a user-defined typeobject. This typeobject
    can either inherit from array scalars or not. If it does not inherit from array
    scalars, then the [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM") and
    [`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM") flags should be set
    in the `flags` member.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 指向与此数组元素对应的 Python 类型的类型对象的指针。对于内置类型，这指向相应的数组标量。对于用户定义的类型，这应该指向用户定义的类型对象。这个类型对象可以继承自数组标量，也可以不继承。如果它不继承自数组标量，则`flags`成员中应设置[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM
    "NPY_USE_GETITEM")和[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")标志。
- en: '[PRE314]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: A character code indicating the kind of array (using the array interface typestring
    notation). A ‘b’ represents Boolean, a ‘i’ represents signed integer, a ‘u’ represents
    unsigned integer, ‘f’ represents floating point, ‘c’ represents complex floating
    point, ‘S’ represents 8-bit zero-terminated bytes, ‘U’ represents 32-bit/character
    unicode string, and ‘V’ represents arbitrary.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数组种类的字符代码（使用数组接口类型字符串表示法）。‘b’表示布尔，‘i’表示有符号整数，‘u’表示无符号整数，‘f’表示浮点数，‘c’表示复数浮点数，‘S’表示8位以零结尾的字节，‘U’表示32位/字符的Unicode字符串，‘V’表示任意。
- en: '[PRE315]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: A traditional character code indicating the data type.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据类型的传统字符代码。
- en: '[PRE316]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: 'A character indicating the byte-order: ‘>’ (big-endian), ‘<’ (little- endian),
    ‘=’ (native), ‘|’ (irrelevant, ignore). All builtin data- types have byteorder
    ‘=’.'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 表示字节顺序的字符：‘>’（大端）、‘<’（小端）、‘=’（本地）、‘|’（不相关，忽略）。所有内置数据类型的字节顺序都是‘=’。
- en: '[PRE317]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'A data-type bit-flag that determines if the data-type exhibits object- array
    like behavior. Each bit in this member is a flag which are named as:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数据类型位标志，确定数据类型是否表现出对象数组的行为。该成员中的每个位都是一个标志，命名为：
- en: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")'
- en: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_HASOBJECT`](#c.NPY_ITEM_HASOBJECT "NPY_ITEM_HASOBJECT")'
- en: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE")'
- en: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")'
- en: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")'
- en: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
  id: totrans-730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")'
- en: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")'
- en: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_USE_SETITEM`](#c.NPY_USE_SETITEM "NPY_USE_SETITEM")'
- en: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_FROM_FIELDS`](#c.NPY_FROM_FIELDS "NPY_FROM_FIELDS")'
- en: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`NPY_OBJECT_DTYPE_FLAGS`](#c.NPY_OBJECT_DTYPE_FLAGS "NPY_OBJECT_DTYPE_FLAGS")'
- en: '[PRE318]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: A number that uniquely identifies the data type. For new data-types, this number
    is assigned when the data-type is registered.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 一个唯一标识数据类型的数字。对于新数据类型，当数据类型被注册时，会分配这个数字。
- en: '[PRE319]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: For data types that are always the same size (such as long), this holds the
    size of the data type. For flexible data types where different arrays can have
    a different elementsize, this should be 0.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 对于始终大小相同的数据类型（例如long），这保存数据类型的大小。对于灵活的数据类型，其中不同的数组可以具有不同的元素大小，这应为0。
- en: '[PRE320]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: 'A number providing alignment information for this data type. Specifically,
    it shows how far from the start of a 2-element structure (whose first element
    is a `char` ), the compiler places an item of this type: `offsetof(struct {char
    c; type v;}, v)`'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 为此数据类型提供对齐信息的数字。具体来说，它显示了编译器将该类型的项目放置在起始为 `char` 的 2 元结构中的距离：`offsetof(struct
    {char c; type v;}, v)`
- en: '[PRE321]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: If this is non- `NULL`, then this data-type descriptor is a C-style contiguous
    array of another data-type descriptor. In other-words, each element that this
    descriptor describes is actually an array of some other base descriptor. This
    is most useful as the data-type descriptor for a field in another data-type descriptor.
    The fields member should be `NULL` if this is non- `NULL` (the fields member of
    the base descriptor can be non- `NULL` however).
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是非 `NULL`，那么这个数据类型描述符是另一个数据类型描述符的C风格连续数组。换句话说，这个描述符描述的每个元素实际上都是另一个基本描述符的数组。这在作为另一个数据类型描述符中的字段的数据类型描述符时最有用。如果这是非
    `NULL`，则 fields 成员应为 `NULL`（但基本描述符的 fields 成员可以是非 `NULL`）。
- en: '[PRE322]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: The data-type-descriptor object of the base-type.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 基础类型的数据类型描述符对象。
- en: '[PRE325]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: The shape (always C-style contiguous) of the sub-array as a Python tuple.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Python元组的子数组的形状（始终是C风格连续的）。
- en: '[PRE326]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: If this is non-NULL, then this data-type-descriptor has fields described by
    a Python dictionary whose keys are names (and also titles if given) and whose
    values are tuples that describe the fields. Recall that a data-type-descriptor
    always describes a fixed-length set of bytes. A field is a named sub-region of
    that total, fixed-length collection. A field is described by a tuple composed
    of another data- type-descriptor and a byte offset. Optionally, the tuple may
    contain a title which is normally a Python string. These tuples are placed in
    this dictionary keyed by name (and also title if given).
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是非NULL，则此数据类型描述符具有由Python字典描述的字段，其键是名称（如果给定也是标题），其值是描述字段的元组。回想一下，数据类型描述符总是描述一组固定长度的字节。字段是该总体、固定长度的集合的命名子区域。字段由另一个数据类型描述符和字节偏移量组成的元组描述。可选地，元组可以包含一个标题，通常是Python字符串。这些元组被放置在此字典中，键为名称（如果给定也是标题）。
- en: '[PRE327]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: An ordered tuple of field names. It is NULL if no field is defined.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有序的字段名称元组。如果未定义字段，则为NULL。
- en: '[PRE328]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: A pointer to a structure containing functions that the type needs to implement
    internal features. These functions are not the same thing as the universal functions
    (ufuncs) described later. Their signatures can vary arbitrarily.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 指向包含类型需要实现内部功能的函数的结构体指针。这些函数与后面描述的通用函数（ufuncs）不是同一种东西。它们的签名可以任意变化。
- en: '[PRE329]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Metadata about this dtype.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此数据类型的元数据。
- en: '[PRE330]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Metadata specific to the C implementation of the particular dtype. Added for
    NumPy 1.7.0.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于特定数据类型的C实现的元数据。添加于NumPy 1.7.0。
- en: '[PRE331]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: Currently unused. Reserved for future use in caching hash values.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 目前未使用。保留以缓存散列值的未来使用。
- en: '[PRE333]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Indicates that items of this data-type must be reference counted (using [`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(in Python v3.11)") and [`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)") ).
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 表明此数据类型的项目必须进行引用计数（使用[`Py_INCREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF
    "(in Python v3.11)")和[`Py_DECREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF
    "(in Python v3.11)")）。
- en: '[PRE334]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Same as [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT").
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")相同。
- en: '[PRE335]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: Indicates arrays of this data-type must be converted to a list before pickling.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此数据类型的数��必须在pickling之前转换为列表。
- en: '[PRE336]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: Indicates the item is a pointer to some other data-type
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 表示项目是指向其他数据类型的指针。
- en: '[PRE337]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Indicates memory for this data-type must be initialized (set to 0) on creation.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此数据类型的内存在创建时必须初始化（设置为0）。
- en: '[PRE338]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: Indicates this data-type requires the Python C-API during access (so don’t give
    up the GIL if array access is going to be needed).
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 表明此数据类型在访问时需要 Python C-API（因此如果需要数组访问，则不要放弃 GIL）。
- en: '[PRE339]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: On array access use the `f->getitem` function pointer instead of the standard
    conversion to an array scalar. Must use if you don’t define an array scalar to
    go along with the data-type.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组访问中，使用`f->getitem`函数指针，而不是标准的转换为数组标量。如果没有定义与数据类型相配套的数组标量，则必须使用。
- en: '[PRE340]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: When creating a 0-d array from an array scalar use `f->setitem` instead of the
    standard copy from an array scalar. Must use if you don’t define an array scalar
    to go along with the data-type.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 从数组标量创建0维数组时，请使用`f->setitem`，而不是标准的从数组标量复制。如果没有定义与数据类型相匹配的数组标量，则必须使用。
- en: '[PRE341]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: The bits that are inherited for the parent data-type if these bits are set in
    any field of the data-type. Currently ( [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")
    ).
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些位在数据类型的任何字段中设置，那么这些位就会继承自父数据类型。当前（[`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE342]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'Bits set for the object data-type: ( [`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE
    "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM "NPY_USE_GETITEM")
    | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER") | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT
    "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT "NPY_NEEDS_INIT")
    | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")).'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 为对象数据类型设置的位：（[`NPY_LIST_PICKLE`](#c.NPY_LIST_PICKLE "NPY_LIST_PICKLE") | [`NPY_USE_GETITEM`](#c.NPY_USE_GETITEM
    "NPY_USE_GETITEM") | [`NPY_ITEM_IS_POINTER`](#c.NPY_ITEM_IS_POINTER "NPY_ITEM_IS_POINTER")
    | [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT") | [`NPY_NEEDS_INIT`](#c.NPY_NEEDS_INIT
    "NPY_NEEDS_INIT") | [`NPY_NEEDS_PYAPI`](#c.NPY_NEEDS_PYAPI "NPY_NEEDS_PYAPI")）。
- en: '[PRE343]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Return true if all the given flags are set for the data-type object.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据类型对象上设置了给定标志，则返回 true。
- en: '[PRE344]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Equivalent to [`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")
    (*dtype*, [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")).
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`PyDataType_FLAGCHK`](#c.PyDataType_FLAGCHK "PyDataType_FLAGCHK")（*dtype*,
    [`NPY_ITEM_REFCOUNT`](#c.NPY_ITEM_REFCOUNT "NPY_ITEM_REFCOUNT")）。
- en: '[PRE345]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: Functions implementing internal features. Not all of these function pointers
    must be defined for a given type. The required members are `nonzero`, `copyswap`,
    `copyswapn`, `setitem`, `getitem`, and `cast`. These are assumed to be non- `NULL`
    and `NULL` entries will cause a program crash. The other functions may be `NULL`
    which will just mean reduced functionality for that data-type. (Also, the nonzero
    function will be filled in with a default function if it is `NULL` when you register
    a user-defined data-type).
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 实现内部功能的函数。并非所有这些函数指针都必须为给定类型定义。所需成员包括`nonzero`、`copyswap`、`copyswapn`、`setitem`、`getitem`和`cast`。假定这些为非`NULL`，而`NULL`条目将导致程序崩溃。其他功能可能为`NULL`，这只会减少该数据类型的功能。（另外，如果在注册用户定义的数据类型时`NULL`，则`nonzero`函数将用默认函数填充）。
- en: '[PRE346]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: The concept of a behaved segment is used in the description of the function
    pointers. A behaved segment is one that is aligned and in native machine byte-order
    for the data-type. The `nonzero`, `copyswap`, `copyswapn`, `getitem`, and `setitem`
    functions can (and must) deal with mis-behaved arrays. The other functions require
    behaved memory segments.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述函数指针时使用了行为良好的段的概念。 行为良好的段是指与数据类型的本机机器字节顺序对齐的段。 `nonzero`、`copyswap`、`copyswapn`、`getitem`
    和 `setitem` 函数可以（并且必须）处理不规范的数组。 其他函数需要行为良好的内存段。
- en: '[PRE347]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: An array of function pointers to cast from the current type to all of the other
    builtin types. Each function casts a contiguous, aligned, and notswapped buffer
    pointed at by *from* to a contiguous, aligned, and notswapped buffer pointed at
    by *to* The number of items to cast is given by *n*, and the arguments *fromarr*
    and *toarr* are interpreted as PyArrayObjects for flexible arrays to get itemsize
    information.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将当前类型转换为所有其他内置类型的函数指针数组。 每个函数将由 *from* 指向的连续、对齐且未交换的缓冲区转换为由 *to* 指向的连续、对齐且未交换的缓冲区。
    要转换的项目数由 *n* 给出，并且参数 *fromarr* 和 *toarr* 被解释为灵活数组的 PyArrayObjects 以获取 itemsize
    信息。
- en: '[PRE348]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: A pointer to a function that returns a standard Python object from a single
    element of the array object *arr* pointed to by *data*. This function must be
    able to deal with “misbehaved “(misaligned and/or swapped) arrays correctly.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 指向从由 *data* 指向的数组对象 *arr* 的单个元素返回标准 Python 对象的函数的指针。 该函数必须能够正确处理“不规范”（未对齐和/或已交换）的数组。
- en: '[PRE349]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: A pointer to a function that sets the Python object *item* into the array, *arr*,
    at the position pointed to by *data* . This function deals with “misbehaved” arrays.
    If successful, a zero is returned, otherwise, a negative one is returned (and
    a Python error set).
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 指向将 Python 对象 *item* 设置到数组 *arr* 中由 *data* 指向位置的函数的指针。 该函数处理“不规范”的数组。 如果成功，则返回零，否则返回负一（并设置
    Python 错误）。
- en: '[PRE350]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: These members are both pointers to functions to copy data from *src* to *dest*
    and *swap* if indicated. The value of arr is only used for flexible ( [`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING"), [`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE"),
    and [`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID "NPY_VOID") ) arrays (and is
    obtained from `arr->descr->elsize` ). The second function copies a single value,
    while the first loops over n values with the provided strides. These functions
    can deal with misbehaved *src* data. If *src* is NULL then no copy is performed.
    If *swap* is 0, then no byteswapping occurs. It is assumed that *dest* and *src*
    do not overlap. If they overlap, then use `memmove` (…) first followed by `copyswap(n)`
    with NULL valued `src`.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成员都是指向从 *src* 复制数据到 *dest* 并在需要时交换的函数的指针。 arr 的值仅用于灵活（[`NPY_STRING`](dtype.html#c.NPY_TYPES.NPY_STRING
    "NPY_STRING")、[`NPY_UNICODE`](dtype.html#c.NPY_TYPES.NPY_UNICODE "NPY_UNICODE")
    和 [`NPY_VOID`](dtype.html#c.NPY_TYPES.NPY_VOID "NPY_VOID")）数组（并从 `arr->descr->elsize`
    获取）。 第二个函数复制单个值，而第一个函数则使用提供的步幅循环 n 个值。 这些函数可以处理不规范的 *src* 数据。 如果 *src* 为 NULL，则不执行复制。
    如果 *swap* 为 0，则不进行字节交换。 假定 *dest* 和 *src* 不重叠。 如果它们重叠，则首先使用 `memmove`（…）后跟 NULL
    值的 `src` 进行 `copyswap(n)`。
- en: '[PRE352]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: A pointer to a function that compares two elements of the array, `arr`, pointed
    to by `d1` and `d2`. This function requires behaved (aligned and not swapped)
    arrays. The return value is 1 if * `d1` > * `d2`, 0 if * `d1` == * `d2`, and -1
    if * `d1` < * `d2`. The array object `arr` is used to retrieve itemsize and field
    information for flexible arrays.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 指向比较数组 `arr` 中由 `d1` 和 `d2` 指向的两个元素的函数的指针。 此函数需要行为良好的（对齐且未交换）数组。 如果 * `d1` >
    * `d2`，则返回值为 1，如果 * `d1` == * `d2`，则返回值为 0，如果 * `d1` < * `d2`，则返回值为 -1。 用于灵活数组的数组对象
    `arr` 用于检索 itemsize 和字段信息。
- en: '[PRE353]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: A pointer to a function that retrieves the index of the largest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the largest element is returned in `max_ind`.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 指向从由 *data* 指向的数组中从指向的元素开始的 `n` 个元素中检索最大索引的函数的指针。 此函数要求内存段是连续且行为良好的。 返回值始终为
    0。 最大元素的索引在 `max_ind` 中返回。
- en: '[PRE354]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: A pointer to a function that multiplies two `n` -length sequences together,
    adds them, and places the result in element pointed to by `op` of `arr`. The start
    of the two sequences are pointed to by `ip1` and `ip2`. To get to the next element
    in each sequence requires a jump of `is1` and `is2` *bytes*, respectively. This
    function requires behaved (though not necessarily contiguous) memory.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，将两个`n`长度序列相乘，相加，并将结果放置在`arr`的`op`指向的元素中。两个序列的起始点由`ip1`和`ip2`指向。要进入每个序列的下一个元素，分别需要跳过`is1`和`is2`
    *字节*。此函数需要良好行为的内存（尽管不一定是连续的）。
- en: '[PRE355]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: A pointer to a function that scans (scanf style) one element of the corresponding
    type from the file descriptor `fd` into the array memory pointed to by `ip`. The
    array is assumed to be behaved. The last argument `arr` is the array to be scanned
    into. Returns number of receiving arguments successfully assigned (which may be
    zero in case a matching failure occurred before the first receiving argument was
    assigned), or EOF if input failure occurs before the first receiving argument
    was assigned. This function should be called without holding the Python GIL, and
    has to grab it for error reporting.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，从文件描述符`fd`中扫描（类似于scanf）相应类型的一个元素到由`ip`指向的数组内存中。假定数组良好行为。最后一个参数`arr`是要扫描到的数组。返回成功分配的接收参数的数量（如果在分配第一个接收参数之前发生匹配失败，则可能为零），或者如果在分配第一个接收参数之前发生输入失败则返回EOF。此函数应在不持有Python
    GIL的情况下调用，并且在报告错误时必须抓取它。
- en: '[PRE356]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: A pointer to a function that converts the string pointed to by `str` to one
    element of the corresponding type and places it in the memory location pointed
    to by `ip`. After the conversion is completed, `*endptr` points to the rest of
    the string. The last argument `arr` is the array into which ip points (needed
    for variable-size data- types). Returns 0 on success or -1 on failure. Requires
    a behaved array. This function should be called without holding the Python GIL,
    and has to grab it for error reporting.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，将由`str`指向的字符串转换为相应类型的一个元素，并将其放置在由`ip`指向的内存位置。转换完成后，`*endptr`指向字符串的剩余部分。最后一个参数`arr`是`ip`指向的数组（对于可变大小数据类型需要）。成功返回0，失败返回-1。需要一个良好行为的数组。此函数应在不持有Python
    GIL的情况下调用，并且在报告错误时必须抓取它。
- en: '[PRE357]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: A pointer to a function that returns TRUE if the item of `arr` pointed to by
    `data` is nonzero. This function can deal with misbehaved arrays.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，如果`data`指向的`arr`的项非零，则返回TRUE。该函数可处理不良行为的数组。
- en: '[PRE358]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: A pointer to a function that fills a contiguous array of given length with data.
    The first two elements of the array must already be filled- in. From these two
    values, a delta will be computed and the values from item 3 to the end will be
    computed by repeatedly adding this computed delta. The data buffer must be well-behaved.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，用于将给定长度的连续数组填充到数据中。数组的前两个元素必须已经填充。从这两个值中，将计算一个增量，然后通过重复添加此计算出的增量来计算从第3个项目到末尾的值。数据缓冲区必须良好行为。
- en: '[PRE359]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: A pointer to a function that fills a contiguous `buffer` of the given `length`
    with a single scalar `value` whose address is given. The final argument is the
    array which is needed to get the itemsize for variable-length arrays.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 指向函数的指针，用给定的`value`填充给定`length`的连续`buffer`。最后一个参数是需要获取变长数组的项大小。
- en: '[PRE360]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: An array of function pointers to a particular sorting algorithms. A particular
    sorting algorithm is obtained using a key (so far [`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT"), [`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT"),
    and [`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT "NPY_MERGESORT")
    are defined). These sorts are done in-place assuming contiguous and aligned data.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 一组函数指针的数组，指向特定的排序算法。使用键（到目前为止已定义[`NPY_QUICKSORT`](array.html#c.NPY_SORTKIND.NPY_QUICKSORT
    "NPY_QUICKSORT")、[`NPY_HEAPSORT`](array.html#c.NPY_SORTKIND.NPY_HEAPSORT "NPY_HEAPSORT")和[`NPY_MERGESORT`](array.html#c.NPY_SORTKIND.NPY_MERGESORT
    "NPY_MERGESORT")）获得特定的排序算法。这些排序是就地完成的，假设数据是连续且对齐的。
- en: '[PRE361]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: An array of function pointers to sorting algorithms for this data type. The
    same sorting algorithms as for sort are available. The indices producing the sort
    are returned in `result` (which must be initialized with indices 0 to `length-1`
    inclusive).
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 一组函数指针的数组，用于这种数据类型的排序算法。与sort相同的排序算法可用。产生排序的索引将返回到`result`（必须初始化为0到`length-1`的索引）。
- en: '[PRE362]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: Either `NULL` or a dictionary containing low-level casting functions for user-
    defined data-types. Each function is wrapped in a [PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)")* and keyed by the data-type number.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为`NULL`，也可以是包含用户定义数据类型的低级转换函数的字典。每个函数都包装在[PyCapsule](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)")*中，并以数据类型编号为键。
- en: '[PRE363]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: A function to determine how scalars of this type should be interpreted. The
    argument is `NULL` or a 0-dimensional array containing the data (if that is needed
    to determine the kind of scalar). The return value must be of type [`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND").
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 一个确定此类型标量应该如何解释的函数。该参数为`NULL`或包含数据的零维数组（如果需要确定标量的类型）。返回值必须为类型[`NPY_SCALARKIND`](array.html#c.NPY_SCALARKIND
    "NPY_SCALARKIND")。
- en: '[PRE364]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: Either `NULL` or an array of [`NPY_NSCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS") pointers. These pointers should each be either `NULL` or a
    pointer to an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")) indicating data-types that a scalar of this data-type of the specified
    kind can be cast to safely (this usually means without losing precision).
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为`NULL`，也可以是[`NPY_NSCALARKINDS`](array.html#c.NPY_SCALARKIND.NPY_NSCALARKINDS
    "NPY_NSCALARKINDS")指针数组。这些指针可以是`NULL`，也可以是指向整数数组的指针（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE")结尾），指示此指定类型的标量可以安全转换的数据类型（通常意味着不会失去精度）。
- en: '[PRE365]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: Either `NULL` or an array of integers (terminated by [`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE
    "NPY_NOTYPE") ) indicated data-types that this data-type can be cast to safely
    (this usually means without losing precision).
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为`NULL`，也可以是一个整数数组（以[`NPY_NOTYPE`](dtype.html#c.NPY_NOTYPE "NPY_NOTYPE")结尾），指示此数据类型可以安全转换的数据类型（通常意味着不会失去精度）。
- en: '[PRE366]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'Deprecated since version 1.17: The use of this function will give a deprecation
    warning when `np.clip`. Instead of this function, the datatype must instead use
    `PyUFunc_RegisterLoopForDescr` to attach a custom loop to `np.core.umath.clip`,
    `np.minimum`, and `np.maximum`.'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.17版本起已弃用：当`np.clip`时，使用此函数会引发弃用警告。而不是使用此函数，数据类型必须使用`PyUFunc_RegisterLoopForDescr`将自定义循环附加到`np.core.umath.clip`、`np.minimum`和`np.maximum`。
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.19版本起已弃用：设置此函数已被弃用，应该始终为`NULL`，如果设置了，将被忽略。
- en: A function that reads `n_in` items from `in`, and writes to `out` the read value
    if it is within the limits pointed to by `min` and `max`, or the corresponding
    limit if outside. The memory segments must be contiguous and behaved, and either
    `min` or `max` may be `NULL`, but not both.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从`in`中读取`n_in`个项目，并在`min`和`max`指向的限制内写入`out`的值的函数，如果读取的值在`min`和`max`指向的限制内，或者在外部，则相应的限制。内存段必须是连续的且表现良好，`min`或`max`可以为`NULL`，但不能同时为`NULL`。
- en: '[PRE367]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.19版本起已弃用：设置此函数已被弃用，应该始终为`NULL`，如果设置了，将被忽略。
- en: A function that takes a pointer `in` to an array of `n_in` items, a pointer
    `mask` to an array of `n_in` boolean values, and a pointer `vals` to an array
    of `nv` items. Items from `vals` are copied into `in` wherever the value in `mask`
    is non-zero, tiling `vals` as needed if `nv < n_in`. All arrays must be contiguous
    and behaved.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 一个使用指针`in`指向一个包含`n_in`个项目的数组，指针`mask`指向一个包含`n_in`个布尔值的数组，以及指针`vals`指向一个包含`nv`个项目的数组的函数。将`vals`中的项目复制到`in`中，无论`mask`中的值是否为非零，在`nv
    < n_in`的情况下需要按需平铺`vals`。所有数组必须是连续的且表现良好。
- en: '[PRE368]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: 'Deprecated since version 1.19: Setting this function is deprecated and should
    always be `NULL`, if set, it will be ignored.'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.19版本起已弃用：设置此函数已被弃用，应该始终为`NULL`，如果设置了，将被忽略。
- en: A function that takes a pointer `src` to a C contiguous, behaved segment, interpreted
    as a 3-dimensional array of shape `(n_outer, nindarray, nelem)`, a pointer `indarray`
    to a contiguous, behaved segment of `m_middle` integer indices, and a pointer
    `dest` to a C contiguous, behaved segment, interpreted as a 3-dimensional array
    of shape `(n_outer, m_middle, nelem)`. The indices in `indarray` are used to index
    `src` along the second dimension, and copy the corresponding chunks of `nelem`
    items into `dest`. `clipmode` (which can take on the values [`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE"), [`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP") or [`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP")) determines how will indices smaller than 0 or larger than `nindarray`
    will be handled.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，它接受指向C连续、行为良好段的指针`src`，解释为形状为`(n_outer, nindarray, nelem)`的3维数组，指向`indarray`指针到`m_middle`整数索引的连续、行为良好段，以及指向C连续、行为良好段的指针`dest`，解释为形状为`(n_outer,
    m_middle, nelem)`的3维数组。`indarray`中的索引用于沿第二维索引`src`，并将`nelem`项的相应块复制到`dest`。`clipmode`（可以取值[`NPY_RAISE`](array.html#c.NPY_CLIPMODE.NPY_RAISE
    "NPY_RAISE")、[`NPY_WRAP`](array.html#c.NPY_CLIPMODE.NPY_WRAP "NPY_WRAP")或[`NPY_CLIP`](array.html#c.NPY_CLIPMODE.NPY_CLIP
    "NPY_CLIP")）确定小于0或大于`nindarray`的索引将如何处理。
- en: '[PRE369]'
  id: totrans-837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: A pointer to a function that retrieves the index of the smallest of `n` elements
    in `arr` beginning at the element pointed to by `data`. This function requires
    that the memory segment be contiguous and behaved. The return value is always
    0\. The index of the smallest element is returned in `min_ind`.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 指针指向一个函数，该函数检索数组`arr`中从指向`data`的元素开始的`n`个元素中最小的索引。此函数要求内存段是连续且行为良好。返回值始终为0。最小元素的索引在`min_ind`中返回。
- en: The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") typeobject implements many
    of the features of [`Python objects`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(in Python v3.11)") including the [`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(in Python v3.11)"), [`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(in Python v3.11)"), [`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(in Python v3.11)"), and [`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(in Python v3.11)") interfaces. The [`rich comparison`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(in Python v3.11)")) is also used along with new-style attribute lookup for member
    ([`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(in Python v3.11)")) and properties ([`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(in Python v3.11)")). The [`PyArray_Type`](#c.PyArray_Type "PyArray_Type") can
    also be sub-typed.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArray_Type`](#c.PyArray_Type "PyArray_Type")类型对象实现了许多[`Python对象`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject
    "(在Python v3.11)")的特性，包括[`tp_as_number`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_number
    "(在Python v3.11)")、[`tp_as_sequence`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_sequence
    "(在Python v3.11)")、[`tp_as_mapping`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_mapping
    "(在Python v3.11)")和[`tp_as_buffer`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_buffer
    "(在Python v3.11)")接口。还使用了[`rich comparison`](https://docs.python.org/3/c-api/typeobj.html#c.richcmpfunc
    "(在Python v3.11)")以及成员([`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
    "(在Python v3.11)"))和属性([`tp_getset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset
    "(在Python v3.11)"))的新式属性查找。[`PyArray_Type`](#c.PyArray_Type "PyArray_Type")也可以被子类化。'
- en: Tip
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `tp_as_number` methods use a generic approach to call whatever function
    has been registered for handling the operation. When the `_multiarray_umath module`
    is imported, it sets the numeric operations for all arrays to the corresponding
    ufuncs. This choice can be changed with [`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature") The `tp_str` and `tp_repr` methods can also
    be altered using [`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction").
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '`tp_as_number` 方法使用通用方法调用已注册用于处理操作的函数。当导入`_multiarray_umath`模块时，它将所有数组的数字操作设置为相应的ufunc。可以使用[`PyUFunc_ReplaceLoopBySignature`](ufunc.html#c.PyUFunc_ReplaceLoopBySignature
    "PyUFunc_ReplaceLoopBySignature")更改此选择，也可以使用[`PyArray_SetStringFunction`](array.html#c.PyArray_SetStringFunction
    "PyArray_SetStringFunction")改变`tp_str`和`tp_repr`方法。'
- en: PyUFunc_Type and PyUFuncObject
  id: totrans-842
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyUFunc_Type 和 PyUFuncObject
- en: '[PRE370]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: The ufunc object is implemented by creation of the [`PyUFunc_Type`](#c.PyUFunc_Type
    "PyUFunc_Type"). It is a very simple type that implements only basic getattribute
    behavior, printing behavior, and has call behavior which allows these objects
    to act like functions. The basic idea behind the ufunc is to hold a reference
    to fast 1-dimensional (vector) loops for each data type that supports the operation.
    These one-dimensional loops all have the same signature and are the key to creating
    a new ufunc. They are called by the generic looping code as appropriate to implement
    the N-dimensional function. There are also some generic 1-d loops defined for
    floating and complexfloating arrays that allow you to define a ufunc using a single
    scalar function (*e.g.* atanh).
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc对象是通过创建[`PyUFunc_Type`](#c.PyUFunc_Type "PyUFunc_Type")来实现的。这是一种非常简单的类型，仅实现了基本的getattribute行为、打印行为，并具有调用行为，允许这些对象像函数一样运行。ufunc的基本思想是持有对支持该操作的每种数据类型的快速1维（向量）循环的引用。这些一维循环都具有相同的签名，并且是创建新ufunc的关键。它们由通用循环代码在适当的时候调用，以实现N维函数。还为浮点和复数浮点数组定义了一些通用的1-d循环，允许您使用单个标量函数定义ufunc（*例如*atanh）。
- en: '[PRE371]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'The core of the ufunc is the [`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")
    which contains all the information needed to call the underlying C-code loops
    that perform the actual work. While it is described here for completeness, it
    should be considered internal to NumPy and manipulated via `PyUFunc_*` functions.
    The size of this structure is subject to change across versions of NumPy. To ensure
    compatibility:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc的核心是[`PyUFuncObject`](#c.PyUFuncObject "PyUFuncObject")，它包含调用执行实际工作的基础C代码循环所需的所有信息。虽然这里描述了完整的内容，但它应被视为NumPy的内部内容，并通过`PyUFunc_*`函数来操作。该结构的大小可能会因NumPy的不同版本而发生变化。为了确保兼容性：
- en: Never declare a non-pointer instance of the struct
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要声明结构的非指针实例
- en: Never perform pointer arithmetic
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要执行指针算术
- en: Never use `sizeof(PyUFuncObject)`
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用`sizeof(PyUFuncObject)`
- en: 'It has the following structure:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下结构：
- en: '[PRE372]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: The number of input arguments.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数的数量。
- en: '[PRE374]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: The number of output arguments.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 输出参数的数量。
- en: '[PRE375]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: The total number of arguments (*nin* + *nout*). This must be less than [`NPY_MAXARGS`](array.html#c.NPY_MAXARGS
    "NPY_MAXARGS").
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的总数（*nin* + *nout*）。这必须小于[`NPY_MAXARGS`](array.html#c.NPY_MAXARGS "NPY_MAXARGS")。
- en: '[PRE376]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: Either [`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One"), [`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero"), [`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne"),
    [`PyUFunc_None`](ufunc.html#c.PyUFunc_None "PyUFunc_None"), [`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone"), or [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue") to indicate the identity for this operation. It is only
    used for a reduce-like call on an empty array.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 要么[`PyUFunc_One`](ufunc.html#c.PyUFunc_One "PyUFunc_One")、[`PyUFunc_Zero`](ufunc.html#c.PyUFunc_Zero
    "PyUFunc_Zero")、[`PyUFunc_MinusOne`](ufunc.html#c.PyUFunc_MinusOne "PyUFunc_MinusOne")、[`PyUFunc_None`](ufunc.html#c.PyUFunc_None
    "PyUFunc_None")、[`PyUFunc_ReorderableNone`](ufunc.html#c.PyUFunc_ReorderableNone
    "PyUFunc_ReorderableNone")或[`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue")用于指示该操作的身份。它仅在对空数组进行类似于reduce的调用时使用。
- en: '[PRE377]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: An array of function pointers — one for each data type supported by the ufunc.
    This is the vector loop that is called to implement the underlying function *dims*
    [0] times. The first argument, *args*, is an array of *nargs* pointers to behaved
    memory. Pointers to the data for the input arguments are first, followed by the
    pointers to the data for the output arguments. How many bytes must be skipped
    to get to the next element in the sequence is specified by the corresponding entry
    in the *steps* array. The last argument allows the loop to receive extra information.
    This is commonly used so that a single, generic vector loop can be used for multiple
    functions. In this case, the actual scalar function to call is passed in as *extradata*.
    The size of this function pointer array is ntypes.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数指针数组—每种ufunc支持的数据类型都有一个。这是被调用以实现底层函数的向量循环，*dims* [0]次。第一个参数*args*是一个包含*nargs*指针的行为内存数组。首先是输入参数的数据指针，然后是输出参数的数据指针。必须跳过多少字节才能到达序列中的下一个元素是由*steps*数组中的相应条目指定的。最后一个参数允许循环接收额外的信息。这通常用于一个通用的向量循环可以用于多个函数的情况。在这种情况下，要调用的实际标量函数作为*extradata*传递进来。该函数指针数组的大小为ntypes。
- en: '[PRE378]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Extra data to be passed to the 1-d vector loops or `NULL` if no extra-data is
    needed. This C-array must be the same size ( *i.e.* ntypes) as the functions array.
    `NULL` is used if extra_data is not needed. Several C-API calls for UFuncs are
    just 1-d vector loops that make use of this extra data to receive a pointer to
    the actual function to call.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递给 1-d 向量循环的额外数据，如果不需要额外数据则为 `NULL`。这个 C 数组必须与函数数组的大小相同（*即* ntypes）。如果不需要额外数据，则使用
    `NULL`。对于 UFuncs 的几个 C-API 调用只是使用这些额外数据的 1-d 向量循环，以接收指向要调用的实际函数的指针。
- en: '[PRE379]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: The number of supported data types for the ufunc. This number specifies how
    many different 1-d loops (of the builtin data types) are available.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc 支持的数据类型数量。这个数字指定了内置数据类型的多少不同的 1-d 循环可用。
- en: '[PRE380]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Unused.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 未使用。
- en: '[PRE381]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: A string name for the ufunc. This is used dynamically to build the __doc__ attribute
    of ufuncs.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc 的字符串名称。这在动态构建 ufuncs 的 `__doc__` 属性时使用。
- en: '[PRE382]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: An array of \(nargs \times ntypes\) 8-bit type_numbers which contains the type
    signature for the function for each of the supported (builtin) data types. For
    each of the *ntypes* functions, the corresponding set of type numbers in this
    array shows how the *args* argument should be interpreted in the 1-d vector loop.
    These type numbers do not have to be the same type and mixed-type ufuncs are supported.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 \(nargs \times ntypes\) 的 8 位 type_numbers 数组，其中包含函数对于每个支持的（内置）数据类型的类型签名。对于每个
    *ntypes* 函数，该数组中相应的类型编号集显示了 1-d 向量循环中 *args* 参数应该如何解释。这些类型编号不必是相同的类型，支持混合类型的 ufuncs。
- en: '[PRE383]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: Documentation for the ufunc. Should not contain the function signature as this
    is generated dynamically when __doc__ is retrieved.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: ufunc 的文档。不应该包含函数签名，因为在检索 `__doc__` 时会动态生成。
- en: '[PRE384]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: Any dynamically allocated memory. Currently, this is used for dynamic ufuncs
    created from a python function to store room for the types, data, and name members.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 任何动态分配的内存。目前，这用于从 Python 函数创建动态ufuncs，用于存储类型、数据和名称成员的空间。
- en: '[PRE385]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: For ufuncs dynamically created from python functions, this member holds a reference
    to the underlying Python function.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从 Python 函数动态创建的 ufuncs，这个成员保存对底层 Python 函数的引用。
- en: '[PRE386]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: A dictionary of user-defined 1-d vector loops (stored as CObject ptrs) for user-defined
    types. A loop may be registered by the user for any user-defined type. It is retrieved
    by type number. User defined type numbers are always larger than [`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF").
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的 1-d 向量循环的字典（存储为 CObject ptrs）用于用户定义的类型。用户可以为任何用户定义的类型注册一个循环。它通过类型编号检索。用户定义的类型编号始终大于[`NPY_USERDEF`](dtype.html#c.NPY_USERDEF
    "NPY_USERDEF")。
- en: '[PRE387]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: 0 for scalar ufuncs; 1 for generalized ufuncs
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 标量 ufunc 为 0；广义 ufunc 为 1
- en: '[PRE388]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Number of distinct core dimension names in the signature
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 签名中核心维度名称的不同个数
- en: '[PRE389]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: Number of core dimensions of each argument
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数的核心维度的数量
- en: '[PRE390]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: 'Dimension indices in a flattened form; indices of argument `k` are stored in
    `core_dim_ixs[core_offsets[k] : core_offsets[k] + core_numdims[k]]`'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '以扁平化的形式存储的维度索引；第 `k` 个参数的索引存储在 `core_dim_ixs[core_offsets[k] : core_offsets[k]
    + core_numdims[k]]`'
- en: '[PRE391]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Position of 1st core dimension of each argument in `core_dim_ixs`, equivalent
    to cumsum(`core_num_dims`)
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 每个参数中第一个核心维度的位置在 `core_dim_ixs` 中，等同于累加和(`core_num_dims`)
- en: '[PRE392]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Core signature string
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 核心签名字符串
- en: '[PRE393]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: A function which resolves the types and fills an array with the dtypes for the
    inputs and outputs
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 解析类型并填充输入和输出的 dtypes 的函数
- en: '[PRE394]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: 'Deprecated since version 1.22: Some fallback support for this slot exists,
    but will be removed eventually. A universal function that relied on this will
    have to be ported eventually. See [NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)") and [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.22 起弃用：这个插槽存在某些后备支持，但最终将被移除。依赖于此的通用函数最终将必须迁移。参见[NEP 41](https://numpy.org/neps/nep-0041-improved-dtype-support.html#nep41
    "(in NumPy Enhancement Proposals)") 和 [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)")
- en: '[PRE395]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: For a possible future loop selector with a different signature.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 用于可能的将来使用具有不同签名的循环选择器。
- en: '[PRE396]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Override the default operand flags for each ufunc operand.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 重写每个 ufunc 操作数的默认操作数标志。
- en: '[PRE397]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Override the default nditer flags for the ufunc.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 重写 ufunc 的默认 nditer 标志。
- en: Added in API version 0x0000000D
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 在 API 版本 0x0000000D 中添加
- en: '[PRE398]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: For each distinct core dimension, the possible [frozen](generalized-ufuncs.html#frozen)
    size if [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED "UFUNC_CORE_DIM_SIZE_INFERRED")
    is `0`
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个不同的核心尺寸，如果[`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED") 等于 `0`，则是[p</span>](_static/includes/variable.html#frozen)签名的可能大小
- en: '[PRE399]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: For each distinct core dimension, a set of flags ( [`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE
    "UFUNC_CORE_DIM_CAN_IGNORE") and [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED
    "UFUNC_CORE_DIM_SIZE_INFERRED"))
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 每个不同的核心维度，一组标志（[`UFUNC_CORE_DIM_CAN_IGNORE`](#c.UFUNC_CORE_DIM_CAN_IGNORE "UFUNC_CORE_DIM_CAN_IGNORE")
    和 [`UFUNC_CORE_DIM_SIZE_INFERRED`](#c.UFUNC_CORE_DIM_SIZE_INFERRED "UFUNC_CORE_DIM_SIZE_INFERRED")）
- en: '[PRE400]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: Identity for reduction, when [`PyUFuncObject.identity`](#c.PyUFuncObject.identity
    "PyUFuncObject.identity") is equal to [`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue
    "PyUFunc_IdentityValue").
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 缩减的身份，当[`PyUFuncObject.identity`](#c.PyUFuncObject.identity "PyUFuncObject.identity")
    等于[`PyUFunc_IdentityValue`](ufunc.html#c.PyUFunc_IdentityValue "PyUFunc_IdentityValue")时。
- en: '[PRE401]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: if the dim name ends in `?`
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 如果维度名称以 `?` 结尾
- en: '[PRE402]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: if the dim size will be determined from the operands and not from a [frozen](generalized-ufuncs.html#frozen)
    signature
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 若维度大小将由操作数确定，并非来自[frozen](generalized-ufuncs.html#frozen)签名
- en: PyArrayIter_Type and PyArrayIterObject
  id: totrans-913
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayIter_Type 和 PyArrayIterObject
- en: '[PRE403]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    array. It is the object returned from the flat attribute of an ndarray. It is
    also used extensively throughout the implementation internals to loop over an
    N-dimensional array. The tp_as_mapping interface is implemented so that the iterator
    object can be indexed (using 1-d indexing), and a few methods are implemented
    through the tp_methods table. This object implements the next method and can be
    used anywhere an iterator can be used in Python.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，它可以轻松地循环访问 N 维数组。 这是从 ndarray 的 flat 属性返回的对象。 它还广泛用于整体实现内部，用于循环访问
    N 维数组。<span class="fn"></span> interface 已实现，使得可以对迭代器对象进行索引（使用 1-d 索引），并且一些方法通过`tp_methods`表进行了实现。
    此对象实现了`next`方法，并且可以在 Python 中使用任何可以使用迭代器的地方。
- en: '[PRE404]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: 'The C-structure corresponding to an object of [`PyArrayIter_Type`](#c.PyArrayIter_Type
    "PyArrayIter_Type") is the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject").
    The [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") is used to
    keep track of a pointer into an N-dimensional array. It contains associated information
    used to quickly march through the array. The pointer can be adjusted in three
    basic ways: 1) advance to the “next” position in the array in a C-style contiguous
    fashion, 2) advance to an arbitrary N-dimensional coordinate in the array, and
    3) advance to an arbitrary one-dimensional index into the array. The members of
    the [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject") structure
    are used in these calculations. Iterator objects keep their own dimension and
    strides information about an array. This can be adjusted as needed for “broadcasting,”
    or to loop over only specific dimensions.'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayIter_Type`](#c.PyArrayIter_Type "PyArrayIter_Type")对象对应的 C-结构是[`PyArrayIterObject`](#c.PyArrayIterObject
    "PyArrayIterObject"). [`PyArrayIterObject`](#c.PyArrayIterObject "PyArrayIterObject")
    用于跟踪指向 N 维数组的指针。 它包含相关信息，用于快速遍历数组。 指针可以通过三种基本方法进行调整：1) 以 C 风格连续的方式前进到数组中的“下一个”位置，2)
    前进到数组中的任意 N 维坐标，和3) 前进到数组中的任意一维索引。 这些计算中使用了[`PyArrayIterObject`](#c.PyArrayIterObject
    "PyArrayIterObject")结构的成员。 迭代器对象保留其数组的维度和步幅信息。这可以根据需要进行“广播”，或者仅循环特定维度。
- en: '[PRE405]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: \(N-1\) where \(N\) is the number of dimensions in the underlying array.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: \(N-1\) 其中 \(N\) 是底层数组中的维数。
- en: '[PRE407]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: The current 1-d index into the array.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 当前数组的 1-d 索引。
- en: '[PRE408]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: The total size of the underlying array.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 底层数组的总大小。
- en: '[PRE409]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: An \(N\) -dimensional index into the array.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 \(N\) -维数组的索引。
- en: '[PRE410]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: The size of the array minus 1 in each dimension.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 每个维度中数组的大小减 1。
- en: '[PRE411]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: The strides of the array. How many bytes needed to jump to the next element
    in each dimension.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的步幅。在每个维度中，跳到下一个元素需要多少字节。
- en: '[PRE412]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: How many bytes needed to jump from the end of a dimension back to its beginning.
    Note that `backstrides[k] == strides[k] * dims_m1[k]`, but it is stored here as
    an optimization.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 从维度末尾跳回到其开头需要多少字节。注意 `backstrides[k] == strides[k] * dims_m1[k]`，但它存储在这里是一种优化。
- en: '[PRE413]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: This array is used in computing an N-d index from a 1-d index. It contains needed
    products of the dimensions.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '此数组用于计算从 1-d 索引到 N-d 索引的所需乘积。 '
- en: '[PRE414]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: A pointer to the underlying ndarray this iterator was created to represent.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此迭代器表示的基础 ndarray 的指针。
- en: '[PRE415]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: This member points to an element in the ndarray indicated by the index.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 此成员指向由索引指示的 ndarray 中的元素。
- en: '[PRE416]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: This flag is true if the underlying array is [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"). It is used to simplify calculations when possible.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 如果底层数组为[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")，则此标志为真。它用于尽可能简化计算。
- en: How to use an array iterator on a C-level is explained more fully in later sections.
    Typically, you do not need to concern yourself with the internal structure of
    the iterator object, and merely interact with it through the use of the macros
    [`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT "PyArray_ITER_NEXT") (it),
    [`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO "PyArray_ITER_GOTO") (it,
    dest), or [`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D "PyArray_ITER_GOTO1D")
    (it, index). All of these macros require the argument *it* to be a [PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 C 级别上使用数组迭代器在后续部分中有更详细的解释。通常情况下，您无需关注迭代器对象的内部结构，而只需通过宏 [`PyArray_ITER_NEXT`](array.html#c.PyArray_ITER_NEXT
    "PyArray_ITER_NEXT") (it)、[`PyArray_ITER_GOTO`](array.html#c.PyArray_ITER_GOTO
    "PyArray_ITER_GOTO") (it, dest) 或 [`PyArray_ITER_GOTO1D`](array.html#c.PyArray_ITER_GOTO1D
    "PyArray_ITER_GOTO1D") (it, index) 与之交互即可。所有这些宏都要求参数 *it* 是一个 [PyArrayIterObject](#c.PyArrayIterObject
    "PyArrayIterObject")*。
- en: PyArrayMultiIter_Type and PyArrayMultiIterObject
  id: totrans-942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[PyArrayMultiIter_Type](https://wiki.example.org/PyArrayMultiIter_Type) 和 [PyArrayMultiIterObject](https://wiki.example.org/PyArrayMultiIterObject)'
- en: '[PRE417]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: This type provides an iterator that encapsulates the concept of broadcasting.
    It allows \(N\) arrays to be broadcast together so that the loop progresses in
    C-style contiguous fashion over the broadcasted array. The corresponding C-structure
    is the [`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject "PyArrayMultiIterObject")
    whose memory layout must begin any object, *obj*, passed in to the [`PyArray_Broadcast`](array.html#c.PyArray_Broadcast
    "PyArray_Broadcast") (obj) function. Broadcasting is performed by adjusting array
    iterators so that each iterator represents the broadcasted shape and size, but
    has its strides adjusted so that the correct element from the array is used at
    each iteration.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型提供了一种封装了广播概念的迭代器。它允许将 \(N\) 个数组一起广播，以便循环按照 C 风格的连续方式在广播的数组上进行。相应的 C 结构是
    [`PyArrayMultiIterObject`](#c.PyArrayMultiIterObject "PyArrayMultiIterObject")，其内存布局必须从传递给
    [`PyArray_Broadcast`](array.html#c.PyArray_Broadcast "PyArray_Broadcast") (obj)
    函数的任何对象 *obj* 开始。通过调整数组迭代器来执行广播，使得每个迭代器表示广播的形状和大小，但其步幅被调整，以便在每次迭代中使用数组中的正确元素。
- en: '[PRE418]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: The number of arrays that need to be broadcast to the same shape.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 需要广播到相同形状的数组数量。
- en: '[PRE421]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: The total broadcasted size.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 广播的总大小。
- en: '[PRE422]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: The current (1-d) index into the broadcasted result.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果中当前的（1-d）索引。
- en: '[PRE423]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: The number of dimensions in the broadcasted result.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果中的维数数量。
- en: '[PRE424]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: The shape of the broadcasted result (only `nd` slots are used).
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 广播结果的形状（仅使用 `nd` 个槽）。
- en: '[PRE425]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: An array of iterator objects that holds the iterators for the arrays to be broadcast
    together. On return, the iterators are adjusted for broadcasting.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含为一起广播的数组调整过迭代器的迭代器对象数组。返回时，这些迭代器已调整好以进行广播。
- en: PyArrayNeighborhoodIter_Type and PyArrayNeighborhoodIterObject
  id: totrans-959
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[PyArrayNeighborhoodIter_Type](https://wiki.example.org/PyArrayNeighborhoodIter_Type)
    和 [PyArrayNeighborhoodIterObject](https://wiki.example.org/PyArrayNeighborhoodIterObject)'
- en: '[PRE426]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: This is an iterator object that makes it easy to loop over an N-dimensional
    neighborhood.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个迭代器对象，使得在 N 维邻域上循环变得��易。
- en: '[PRE427]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: The C-structure corresponding to an object of [`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type
    "PyArrayNeighborhoodIter_Type") is the [`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject
    "PyArrayNeighborhoodIterObject").
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象 [`PyArrayNeighborhoodIter_Type`](#c.PyArrayNeighborhoodIter_Type "PyArrayNeighborhoodIter_Type")
    对应的 C 结构是 [`PyArrayNeighborhoodIterObject`](#c.PyArrayNeighborhoodIterObject "PyArrayNeighborhoodIterObject")。
- en: '[PRE428]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: PyArrayFlags_Type and PyArrayFlagsObject
  id: totrans-965
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[PyArrayFlags_Type](https://wiki.example.org/PyArrayFlags_Type) 和 [PyArrayFlagsObject](https://wiki.example.org/PyArrayFlagsObject)'
- en: '[PRE429]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: When the flags attribute is retrieved from Python, a special builtin object
    of this type is constructed. This special type makes it easier to work with the
    different flags by accessing them as attributes or by accessing them as if the
    object were a dictionary with the flag names as entries.
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 Python 检索 flags 属性时，将构造这种特殊的内置对象。这种特殊类型通过将其作为属性访问这些不同的标志，或者通过将其作为字典访问，其中标志名称作为条目，使得更容易处理不同的标志。
- en: '[PRE430]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: ScalarArrayTypes
  id: totrans-970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ScalarArrayTypes
- en: There is a Python type for each of the different built-in data types that can
    be present in the array. Most of these are simple wrappers around the corresponding
    data type in C. The C-names for these types are `Py{TYPE}ArrType_Type` where `{TYPE}`
    can be
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数组中可能存在的不同内置数据类型，每个都有一个Python类型。其中大部分只是对应的C中数据类型的简单包装。这些类型的C名称为`Py{TYPE}ArrType_Type`，其中`{TYPE}`可以是
- en: '**Bool**, **Byte**, **Short**, **Int**, **Long**, **LongLong**, **UByte**,
    **UShort**, **UInt**, **ULong**, **ULongLong**, **Half**, **Float**, **Double**,
    **LongDouble**, **CFloat**, **CDouble**, **CLongDouble**, **String**, **Unicode**,
    **Void**, and **Object**.'
  id: totrans-972
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Bool**，**Byte**，**Short**，**Int**，**Long**，**LongLong**，**UByte**，**UShort**，**UInt**，**ULong**，**ULongLong**，**Half**，**Float**，**Double**，**LongDouble**，**CFloat**，**CDouble**，**CLongDouble**，**String**，**Unicode**，**Void**，和**Object**。'
- en: These type names are part of the C-API and can therefore be created in extension
    C-code. There is also a `PyIntpArrType_Type` and a `PyUIntpArrType_Type` that
    are simple substitutes for one of the integer types that can hold a pointer on
    the platform. The structure of these scalar objects is not exposed to C-code.
    The function [`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype "PyArray_ScalarAsCtype")
    (..) can be used to extract the C-type value from the array scalar and the function
    [`PyArray_Scalar`](array.html#c.PyArray_Scalar "PyArray_Scalar") (…) can be used
    to construct an array scalar from a C-value.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型名称是C-API的一部分，因此可以在扩展C代码中创建它们。还有一个`PyIntpArrType_Type`和一个`PyUIntpArrType_Type`，它们可以简单地替代可以在平台上保存指针的整数类型之一。这些标量对象的结构不暴露给C代码。函数[`PyArray_ScalarAsCtype`](array.html#c.PyArray_ScalarAsCtype
    "PyArray_ScalarAsCtype")（..）可用于从数组标量中提取C类型值，而函数[`PyArray_Scalar`](array.html#c.PyArray_Scalar
    "PyArray_Scalar")（...）可用于从C值构造数组标量。
- en: Other C-Structures
  id: totrans-974
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他C结构
- en: A few new C-structures were found to be useful in the development of NumPy.
    These C-structures are used in at least one C-API call and are therefore documented
    here. The main reason these structures were defined is to make it easy to use
    the Python ParseTuple C-API to convert from Python objects to a useful C-Object.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 发现在NumPy开发中几个新的C结构非常有用。这些C结构至少在一个C-API调用中被使用，因此在此进行了文档化。定义这些结构的主要原因是为了简化使用Python
    ParseTuple C-API，将Python对象转换为有用的C对象。
- en: PyArray_Dims
  id: totrans-976
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Dims
- en: '[PRE432]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: 'This structure is very useful when shape and/or strides information is supposed
    to be interpreted. The structure is:'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要解释形状和/或步幅信息时，此结构非常有用。该结构是：
- en: '[PRE433]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: The members of this structure are
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 该结构的成员有
- en: '[PRE434]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: A pointer to a list of ([`npy_intp`](dtype.html#c.npy_intp "npy_intp")) integers
    which usually represent array shape or array strides.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 指向（[`npy_intp`](dtype.html#c.npy_intp "npy_intp")）整数列表的指针，通常表示数组形状或数组步幅。
- en: '[PRE435]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: The length of the list of integers. It is assumed safe to access *ptr* [0] to
    *ptr* [len-1].
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 整数列表的长度。假定可以安全地访问*ptr*[0]至*ptr*[len-1]。
- en: PyArray_Chunk
  id: totrans-985
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Chunk
- en: '[PRE436]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: This is equivalent to the buffer object structure in Python up to the ptr member.
    On 32-bit platforms (*i.e.* if [`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")),
    the len member also matches an equivalent member of the buffer object. It is useful
    to represent a generic single-segment chunk of memory.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于Python中缓冲区对象结构，直到ptr成员。在32位平台上（即如果[`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")），len成员也与缓冲区对象的等效成员匹配。用于表示通用单段内存块。
- en: '[PRE437]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: The members are
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 其成员有
- en: '[PRE438]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: The Python object this chunk of memory comes from. Needed so that memory can
    be accounted for properly.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 此内存块来自的Python对象。需要这样做以正确计算内存。
- en: '[PRE439]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: A pointer to the start of the single-segment chunk of memory.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 指向内存单段块的起始位置的指针。
- en: '[PRE440]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: The length of the segment in bytes.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 段的长度（以字节为单位）。
- en: '[PRE441]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: Any data flags (*e.g.* [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") ) that should be used to interpret the memory.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应该用于解释内存的数据标志（例如[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE")）。
- en: PyArrayInterface
  id: totrans-998
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayInterface
- en: See also
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The array interface protocol](../arrays.interface.html#arrays-interface)'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](../arrays.interface.html#arrays-interface)'
- en: '[PRE442]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: The [`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") structure is
    defined so that NumPy and other extension modules can use the rapid array interface
    protocol. The [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") method of an object that supports the rapid array interface
    protocol should return a [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") that contains a pointer to a [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure with the relevant details of the array. After the
    new array is created, the attribute should be `DECREF`’d which will free the [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure. Remember to `INCREF` the object (whose [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") attribute was retrieved) and point the base member
    of the new [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") to this same object.
    In this way the memory for the array will be managed correctly.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") 结构定义了 NumPy 和其他扩展模块可以使用的快速数组接口协议。支持快速数组接口协议的对象的
    [`__array_struct__`](../arrays.interface.html#object.__array_struct__ "object.__array_struct__")
    方法应返回一个包含指向 [`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") 结构的指针的
    [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "(in Python
    v3.11)")，其中包含数组的相关详细信息。创建新数组后，应`DECREF`该属性，这将释放 [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") 结构的内存。记得`INCREF`获取 [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") 属性的对象，并将新 [`PyArrayObject`](#c.PyArrayObject "PyArrayObject")
    的 base 成员指向同一对象。通过这种方式，数组的内存将正确管理。'
- en: '[PRE443]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-1004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: the integer 2 as a sanity check.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 作为健全性检查的整数 2。
- en: '[PRE445]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: the number of dimensions in the array.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的维度数。
- en: '[PRE446]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: A character indicating what kind of array is present according to the typestring
    convention with ‘t’ -> bitfield, ‘b’ -> Boolean, ‘i’ -> signed integer, ‘u’ ->
    unsigned integer, ‘f’ -> floating point, ‘c’ -> complex floating point, ‘O’ ->
    object, ‘S’ -> (byte-)string, ‘U’ -> unicode, ‘V’ -> void.
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类型字符串约定指示存在什么类型的数组的字符，将 ‘t’ -> 位域，‘b’ -> 布尔值，‘i’ -> 有符号整数，‘u’ -> 无符号整数，‘f’
    -> 浮点，‘c’ -> 复数浮点，‘O’ -> 对象，‘S’ -> （字节）字符串，‘U’ -> Unicode，‘V’ -> void。
- en: '[PRE447]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: The number of bytes each item in the array requires.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中每个项所需的字节数。
- en: '[PRE448]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: Any of the bits [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS") (1), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") (2), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED") (0x100), [`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED
    "NPY_ARRAY_NOTSWAPPED") (0x200), or [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") (0x400) to indicate something about the data. The [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED"), [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), and [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") flags can actually be determined from the other parameters.
    The flag [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    (0x800) can also be set to indicate to objects consuming the version 3 array interface
    that the descr member of the structure is present (it will be ignored by objects
    consuming version 2 of the array interface).
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一个位 [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")
    (1)，[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS "NPY_ARRAY_F_CONTIGUOUS")
    (2)，[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED "NPY_ARRAY_ALIGNED")
    (0x100)，[`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED "NPY_ARRAY_NOTSWAPPED")
    (0x200)，或 [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE "NPY_ARRAY_WRITEABLE")
    (0x400)，以指示有关数据的一些信息。实际上，可以从其他参数确定标志 [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED")，[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS") 和 [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")。标志 [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR") (0x800) 也可以设置，以向消费版本 3 数组接口的对象指示结构的 descr 成员存在（版本 2 的数组接口将忽略它）。
- en: '[PRE449]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: An array containing the size of the array in each dimension.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 包含数组每个维度的大小的数组。
- en: '[PRE450]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: An array containing the number of bytes to jump to get to the next element in
    each dimension.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在每个维度中跳过下一个元素所需的字节数的数组。
- en: '[PRE451]'
  id: totrans-1018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: A pointer *to* the first element of the array.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组第一个元素的指针。
- en: '[PRE452]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: A Python object describing the data-type in more detail (same as the *descr*
    key in [`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")). This can be `NULL` if *typekind* and *itemsize*
    provide enough information. This field is also ignored unless [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR") flag is on in *flags*.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据类型详细信息的Python对象（与[`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")中的*descr*键相同）。如果*typekind*和*itemsize*提供足够的信息，这个字段可以为`NULL`。除非在*flags*中打开了[`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR")标志，否则此字段也会被忽略。
- en: Internally used structures
  id: totrans-1022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部使用的结构
- en: Internally, the code uses some additional Python objects primarily for memory
    management. These types are not accessible directly from Python, and are not exposed
    to the C-API. They are included here only for completeness and assistance in understanding
    the code.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，该代码使用了一些额外的Python对象，主要用于内存管理。这些类型无法直接从Python访问，并且不会暴露给C-API。它们在此处仅用于完整性和帮助理解代码。
- en: '[PRE453]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: A simple linked-list of C-structures containing the information needed to define
    a 1-d loop for a ufunc for every defined signature of a user-defined data-type.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的C结构链表，包含了为用户定义的数据类型的每个定义的签名定义1-d循环所需的信息。
- en: '[PRE454]'
  id: totrans-1026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: Advanced indexing is handled with this Python type. It is simply a loose wrapper
    around the C-structure containing the variables needed for advanced array indexing.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此Python类型处理高级索引。它只是一个松散的包装器，包装了包含高级数组索引所需变量的C结构。
- en: '[PRE455]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: The C-structure associated with [`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type
    "PyArrayMapIter_Type"). This structure is useful if you are trying to understand
    the advanced-index mapping code. It is defined in the `arrayobject.h` header.
    This type is not exposed to Python and could be replaced with a C-structure. As
    a Python type it takes advantage of reference- counted memory management.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type "PyArrayMapIter_Type")相关联的C结构。如果你正在尝试理解高级索引映射代码，这个结构很有用。它在`arrayobject.h`头文件中定义。此类型未暴露给Python，可以用C结构替换。作为Python类型，它利用引用计数内存管理。
- en: PyArray_Dims
  id: totrans-1030
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Dims
- en: '[PRE456]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'This structure is very useful when shape and/or strides information is supposed
    to be interpreted. The structure is:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '当形状和/或步长信息需要被解释时，这个结构非常有用。结构是:'
- en: '[PRE457]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: The members of this structure are
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构的成员是
- en: '[PRE458]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: A pointer to a list of ([`npy_intp`](dtype.html#c.npy_intp "npy_intp")) integers
    which usually represent array shape or array strides.
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 指向一个([`npy_intp`](dtype.html#c.npy_intp "npy_intp"))整数列表的指针，通常表示数组的形状或数组的步长。
- en: '[PRE459]'
  id: totrans-1037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: The length of the list of integers. It is assumed safe to access *ptr* [0] to
    *ptr* [len-1].
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 整数列表的长度。假定可以安全访问*ptr*[0]到*ptr*[len-1]。
- en: PyArray_Chunk
  id: totrans-1039
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArray_Chunk
- en: '[PRE460]'
  id: totrans-1040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: This is equivalent to the buffer object structure in Python up to the ptr member.
    On 32-bit platforms (*i.e.* if [`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")),
    the len member also matches an equivalent member of the buffer object. It is useful
    to represent a generic single-segment chunk of memory.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 这与Python中的缓冲对象结构相当，直到ptr成员。在32位平台上（*即* if [`NPY_SIZEOF_INT`](config.html#c.NPY_SIZEOF_INT
    "NPY_SIZEOF_INT") == [`NPY_SIZEOF_INTP`](config.html#c.NPY_SIZEOF_INTP "NPY_SIZEOF_INTP")），len成员也与缓冲对象的等效成员匹配。它用于表示通用单段内存块。
- en: '[PRE461]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: The members are
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成员是
- en: '[PRE462]'
  id: totrans-1044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: The Python object this chunk of memory comes from. Needed so that memory can
    be accounted for properly.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 分配这块内存的Python对象。需要这样以便能够正确计算内存使用。
- en: '[PRE463]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: A pointer to the start of the single-segment chunk of memory.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 指向单个内存块的起始指针。
- en: '[PRE464]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: The length of the segment in bytes.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 段的字节长度。
- en: '[PRE465]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: Any data flags (*e.g.* [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") ) that should be used to interpret the memory.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解释内存的任何数据标志（*例如* [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")）。
- en: PyArrayInterface
  id: totrans-1052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyArrayInterface
- en: See also
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[The array interface protocol](../arrays.interface.html#arrays-interface)'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组接口协议](../arrays.interface.html#arrays-interface)'
- en: '[PRE466]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: The [`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface") structure is
    defined so that NumPy and other extension modules can use the rapid array interface
    protocol. The [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") method of an object that supports the rapid array interface
    protocol should return a [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11)") that contains a pointer to a [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure with the relevant details of the array. After the
    new array is created, the attribute should be `DECREF`’d which will free the [`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface") structure. Remember to `INCREF` the object (whose [`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__") attribute was retrieved) and point the base member
    of the new [`PyArrayObject`](#c.PyArrayObject "PyArrayObject") to this same object.
    In this way the memory for the array will be managed correctly.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyArrayInterface`](#c.PyArrayInterface "PyArrayInterface")结构被定义为NumPy和其他扩展模块可以使用快速数组接口协议。支持快速数组接口协议的对象的[`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__")方法应返回包含指向具有数组的相关细节的[`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface")结构的指针的[`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule
    "(in Python v3.11")。创建新数组后，应`DECREF`该属性，这将释放[`PyArrayInterface`](#c.PyArrayInterface
    "PyArrayInterface")结构。记得`INCREF`这个对象（其[`__array_struct__`](../arrays.interface.html#object.__array_struct__
    "object.__array_struct__")属性已被检索）并将新[`PyArrayObject`](#c.PyArrayObject "PyArrayObject")的base成员指向同一对象。这样数组的内存将得到正确管理。'
- en: '[PRE467]'
  id: totrans-1057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-1058
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: the integer 2 as a sanity check.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 整数`2`作为健全性检查。
- en: '[PRE469]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: the number of dimensions in the array.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的维度数。
- en: '[PRE470]'
  id: totrans-1062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: A character indicating what kind of array is present according to the typestring
    convention with ‘t’ -> bitfield, ‘b’ -> Boolean, ‘i’ -> signed integer, ‘u’ ->
    unsigned integer, ‘f’ -> floating point, ‘c’ -> complex floating point, ‘O’ ->
    object, ‘S’ -> (byte-)string, ‘U’ -> unicode, ‘V’ -> void.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类型字符串约定指示出现的数组类型的字符，‘t’ -> 位字段，‘b’ -> 布尔，‘i’ -> 有符号整数，‘u’ -> 无符号整数，‘f’ ->
    浮点数，‘c’ -> 复数浮点数，‘O’ -> 对象，‘S’ -> （字节）字符串，‘U’ -> Unicode，‘V’ -> 空。
- en: '[PRE471]'
  id: totrans-1064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: The number of bytes each item in the array requires.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中每个项所需的字节数。
- en: '[PRE472]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Any of the bits [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS") (1), [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") (2), [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED") (0x100), [`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED
    "NPY_ARRAY_NOTSWAPPED") (0x200), or [`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE") (0x400) to indicate something about the data. The [`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED"), [`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS"), and [`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS") flags can actually be determined from the other parameters.
    The flag [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR "NPY_ARR_HAS_DESCR")
    (0x800) can also be set to indicate to objects consuming the version 3 array interface
    that the descr member of the structure is present (it will be ignored by objects
    consuming version 2 of the array interface).
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 位之一[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS "NPY_ARRAY_C_CONTIGUOUS")（1）、[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")（2）、[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED")（0x100）、[`NPY_ARRAY_NOTSWAPPED`](array.html#c.NPY_ARRAY_NOTSWAPPED
    "NPY_ARRAY_NOTSWAPPED")（0x200）或[`NPY_ARRAY_WRITEABLE`](array.html#c.NPY_ARRAY_WRITEABLE
    "NPY_ARRAY_WRITEABLE")（0x400）用于指示数据的某些内容。[`NPY_ARRAY_ALIGNED`](array.html#c.NPY_ARRAY_ALIGNED
    "NPY_ARRAY_ALIGNED")、[`NPY_ARRAY_C_CONTIGUOUS`](array.html#c.NPY_ARRAY_C_CONTIGUOUS
    "NPY_ARRAY_C_CONTIGUOUS")和[`NPY_ARRAY_F_CONTIGUOUS`](array.html#c.NPY_ARRAY_F_CONTIGUOUS
    "NPY_ARRAY_F_CONTIGUOUS")标志实际上可以从其他参数中确定。标志[`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR")（0x800）也可以设置为指示消耗版本3数组接口的对象，结构的descr成员存在（对于消耗版本2的数组接口的对象将被忽略）。
- en: '[PRE473]'
  id: totrans-1068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: An array containing the size of the array in each dimension.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 包含每个维度中数组大小的数组。
- en: '[PRE474]'
  id: totrans-1070
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: An array containing the number of bytes to jump to get to the next element in
    each dimension.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 包含跳转到每个维度中下一个元素所需字节数的数组。
- en: '[PRE475]'
  id: totrans-1072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: A pointer *to* the first element of the array.
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 指向数组第一个元素的指针。
- en: '[PRE476]'
  id: totrans-1074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: A Python object describing the data-type in more detail (same as the *descr*
    key in [`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")). This can be `NULL` if *typekind* and *itemsize*
    provide enough information. This field is also ignored unless [`NPY_ARR_HAS_DESCR`](../arrays.interface.html#c.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR") flag is on in *flags*.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据类型的Python对象更详细（与[`__array_interface__`](../arrays.interface.html#object.__array_interface__
    "object.__array_interface__")中的*descr*键相同）。如果*typekind*和*itemsize*提供足够信息，则此字段可以是`NULL`。除非*flags*中打开了[`NPY_ARR_HAS_DESCR`](../arrays.interface.html#C.NPY_ARR_HAS_DESCR
    "NPY_ARR_HAS_DESCR")标志，否则此字段也会被忽略。
- en: Internally used structures
  id: totrans-1076
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部使用的结构
- en: Internally, the code uses some additional Python objects primarily for memory
    management. These types are not accessible directly from Python, and are not exposed
    to the C-API. They are included here only for completeness and assistance in understanding
    the code.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，代码主要用于内存管理的一些额外的Python对象。这些类型不能直接从Python访问，也未暴露给C-API。它们仅在此列出，以完整和帮助理解代码。
- en: '[PRE477]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: A simple linked-list of C-structures containing the information needed to define
    a 1-d loop for a ufunc for every defined signature of a user-defined data-type.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 包含定义用户定义数据类型的每个签名的1-d循环所需信息的C结构的简单链接列表。
- en: '[PRE478]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Advanced indexing is handled with this Python type. It is simply a loose wrapper
    around the C-structure containing the variables needed for advanced array indexing.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 高级索引使用这种Python类型处理。它只是围绕包含高级数组索引所需变量的C结构的松散包装。
- en: '[PRE479]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: The C-structure associated with [`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type
    "PyArrayMapIter_Type"). This structure is useful if you are trying to understand
    the advanced-index mapping code. It is defined in the `arrayobject.h` header.
    This type is not exposed to Python and could be replaced with a C-structure. As
    a Python type it takes advantage of reference- counted memory management.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`PyArrayMapIter_Type`](#c.PyArrayMapIter_Type "PyArrayMapIter_Type")相关联的C结构。如果您试图理解高级索引映射代码，这个结构非常有用。它在`arrayobject.h`头文件中定义。这种类型并未暴露给Python，可以用C结构替代。作为Python类型，它利用引用计数的内存管理。
