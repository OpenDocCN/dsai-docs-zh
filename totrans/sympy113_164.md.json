["```py\nsympy.physics.vector.dynamicsymbols(names, level=0, **assumptions)\n```", "```py\n>>> from sympy.physics.vector import dynamicsymbols\n>>> from sympy import diff, Symbol\n>>> q1 = dynamicsymbols('q1')\n>>> q1\nq1(t)\n>>> q2 = dynamicsymbols('q2', real=True)\n>>> q2.is_real\nTrue\n>>> q3 = dynamicsymbols('q3', positive=True)\n>>> q3.is_positive\nTrue\n>>> q4, q5 = dynamicsymbols('q4,q5', commutative=False)\n>>> bool(q4*q5 != q5*q4)\nTrue\n>>> q6 = dynamicsymbols('q6', integer=True)\n>>> q6.is_integer\nTrue\n>>> diff(q1, Symbol('t'))\nDerivative(q1(t), t) \n```", "```py\nsympy.physics.vector.functions.dot(vec1, vec2)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, dot\n>>> from sympy import symbols\n>>> q1 = symbols('q1')\n>>> N = ReferenceFrame('N')\n>>> dot(N.x, N.x)\n1\n>>> dot(N.x, N.y)\n0\n>>> A = N.orientnew('A', 'Axis', [q1, N.x])\n>>> dot(N.y, A.y)\ncos(q1) \n```", "```py\nsympy.physics.vector.functions.cross(vec1, vec2)\n```", "```py\n>>> from sympy import symbols\n>>> from sympy.physics.vector import ReferenceFrame, cross\n>>> q1 = symbols('q1')\n>>> N = ReferenceFrame('N')\n>>> cross(N.x, N.y)\nN.z\n>>> A = ReferenceFrame('A')\n>>> A.orient_axis(N, q1, N.x)\n>>> cross(A.x, N.y)\nN.z\n>>> cross(N.y, A.x)\n- sin(q1)*A.y - cos(q1)*A.z \n```", "```py\nsympy.physics.vector.functions.outer(vec1, vec2)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, outer\n>>> N = ReferenceFrame('N')\n>>> outer(N.x, N.x)\n(N.x|N.x) \n```", "```py\nsympy.physics.vector.functions.express(expr, frame, frame2=None, variables=False)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, outer, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> N = ReferenceFrame('N')\n>>> q = dynamicsymbols('q')\n>>> B = N.orientnew('B', 'Axis', [q, N.z])\n>>> d = outer(N.x, N.x)\n>>> from sympy.physics.vector import express\n>>> express(d, B, N)\ncos(q)*(B.x|N.x) - sin(q)*(B.y|N.x)\n>>> express(B.x, N)\ncos(q)*N.x + sin(q)*N.y\n>>> express(N[0], B, variables=True)\nB_x*cos(q) - B_y*sin(q) \n```", "```py\nsympy.physics.vector.functions.time_derivative(expr, frame, order=1)\n```", "```py\n>>> from sympy.physics.vector import ReferenceFrame, dynamicsymbols\n>>> from sympy.physics.vector import init_vprinting\n>>> init_vprinting(pretty_print=False)\n>>> from sympy import Symbol\n>>> q1 = Symbol('q1')\n>>> u1 = dynamicsymbols('u1')\n>>> N = ReferenceFrame('N')\n>>> A = N.orientnew('A', 'Axis', [q1, N.x])\n>>> v = u1 * N.x\n>>> A.set_ang_vel(N, 10*A.x)\n>>> from sympy.physics.vector import time_derivative\n>>> time_derivative(v, N)\nu1'*N.x\n>>> time_derivative(u1*A[0], N)\nN_x*u1'\n>>> B = N.orientnew('B', 'Axis', [u1, N.z])\n>>> from sympy.physics.vector import outer\n>>> d = outer(N.x, N.x)\n>>> time_derivative(d, B)\n- u1'*(N.y|N.x) - u1'*(N.x|N.y) \n```"]