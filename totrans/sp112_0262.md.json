["```py\nscipy.linalg.eigh(a, b=None, *, lower=True, eigvals_only=False, overwrite_a=False, overwrite_b=False, turbo=<object object>, eigvals=<object object>, type=1, check_finite=True, subset_by_index=None, subset_by_value=None, driver=None)\n```", "```py\n a @ vi = λ * b @ vi\nvi.conj().T @ a @ vi = λ\nvi.conj().T @ b @ vi = 1 \n```", "```py\n1 =>     a @ v = w @ b @ v\n2 => a @ b @ v = w @ v\n3 => b @ a @ v = w @ v \n```", "```py\ntype 1 and 3 :      v.conj().T @ a @ v = w\ntype 2       : inv(v).conj().T @ a @ inv(v) = w\n\ntype 1 or 2  :      v.conj().T @ b @ v  = I\ntype 3       : v.conj().T @ inv(b) @ v  = I \n```", "```py\n>>> import numpy as np\n>>> from scipy.linalg import eigh\n>>> A = np.array([[6, 3, 1, 5], [3, 0, 5, 1], [1, 5, 6, 2], [5, 1, 2, 2]])\n>>> w, v = eigh(A)\n>>> np.allclose(A @ v - v @ np.diag(w), np.zeros((4, 4)))\nTrue \n```", "```py\n>>> w = eigh(A, eigvals_only=True) \n```", "```py\n>>> A = np.array([[34, -4, -10, -7, 2],\n...               [-4, 7, 2, 12, 0],\n...               [-10, 2, 44, 2, -19],\n...               [-7, 12, 2, 79, -34],\n...               [2, 0, -19, -34, 29]])\n>>> eigh(A, eigvals_only=True, subset_by_value=[-np.inf, 10])\narray([6.69199443e-07, 9.11938152e+00]) \n```", "```py\n>>> w, v = eigh(A, subset_by_index=[1, 1])\n>>> w\narray([9.11938152])\n>>> v.shape  # only a single column is returned\n(5, 1) \n```"]