- en: Binary operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制操作
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.bitwise.html](https://numpy.org/doc/1.26/reference/routines.bitwise.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/routines.bitwise.html](https://numpy.org/doc/1.26/reference/routines.bitwise.html)
- en: Elementwise bit operations
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐元素位操作
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位AND，逐元素地。 |'
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | 计算两个数组的按位OR，逐元素地。 |'
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位XOR，逐元素地。 |'
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | 计算元素的按位取反，或按位NOT，逐元素地。 |'
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | 将整数的位向左移动。 |'
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | 将整数的位向右移动。 |'
- en: Bit packing
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位打包
- en: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | Packs the elements of a binary-valued array into bits in a uint8 array. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | 将二值数组的元素打包到一个uint8数组的位中。 |'
- en: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | Unpacks elements of a uint8 array into a binary-valued output array. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | 将uint8数组的元素解包到一个二值输出数组中。 |'
- en: Output formatting
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出格式化
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | 返回输入数字的二进制表示作为字符串。 |'
- en: Elementwise bit operations
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐元素位操作
- en: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise AND of two arrays element-wise. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_and`](generated/numpy.bitwise_and.html#numpy.bitwise_and "numpy.bitwise_and")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位AND，逐元素地。 |'
- en: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | Compute the bit-wise OR of two arrays element-wise. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_or`](generated/numpy.bitwise_or.html#numpy.bitwise_or "numpy.bitwise_or")(x1, x2, /[, out, where, casting, ...])
    | 计算两个数组的按位OR，逐元素地。 |'
- en: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | Compute the bit-wise XOR of two arrays element-wise. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`bitwise_xor`](generated/numpy.bitwise_xor.html#numpy.bitwise_xor "numpy.bitwise_xor")(x1, x2, /[, out, where, ...])
    | 计算两个数组的按位XOR，逐元素地。 |'
- en: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | Compute bit-wise inversion, or bit-wise NOT, element-wise. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`invert`](generated/numpy.invert.html#numpy.invert "numpy.invert")(x, /[, out, where, casting, order, ...])
    | 计算元素的按位取反，或按位NOT，逐元素地。 |'
- en: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | Shift the bits of an integer to the left. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`left_shift`](generated/numpy.left_shift.html#numpy.left_shift "numpy.left_shift")(x1, x2, /[, out, where, casting, ...])
    | 将整数的位向左移动。 |'
- en: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | Shift the bits of an integer to the right. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`right_shift`](generated/numpy.right_shift.html#numpy.right_shift "numpy.right_shift")(x1, x2, /[, out, where, ...])
    | 将整数的位向右移动。 |'
- en: Bit packing
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位打包
- en: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | Packs the elements of a binary-valued array into bits in a uint8 array. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [`packbits`](generated/numpy.packbits.html#numpy.packbits "numpy.packbits")(a, /[, axis, bitorder])
    | 将二值数组的元素打包为 uint8 数组中的位。'
- en: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | Unpacks elements of a uint8 array into a binary-valued output array. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [`unpackbits`](generated/numpy.unpackbits.html#numpy.unpackbits "numpy.unpackbits")(a, /[, axis, count, bitorder])
    | 将 uint8 数组的元素解包为二值输出数组。'
- en: Output formatting
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出格式化
- en: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | Return the binary representation of the input number as a string. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [`binary_repr`](generated/numpy.binary_repr.html#numpy.binary_repr "numpy.binary_repr")(num[, width])
    | 将输入数字返回为字符串形式的二进制表示。'
