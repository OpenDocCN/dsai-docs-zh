- en: numpy.linalg.multi_dot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.linalg.multi_dot.html](https://numpy.org/doc/1.26/reference/generated/numpy.linalg.multi_dot.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compute the dot product of two or more arrays in a single function call, while
    automatically selecting the fastest evaluation order.
  prefs: []
  type: TYPE_NORMAL
- en: '[`multi_dot`](#numpy.linalg.multi_dot "numpy.linalg.multi_dot") chains [`numpy.dot`](numpy.dot.html#numpy.dot
    "numpy.dot") and uses optimal parenthesization of the matrices [[1]](#r451bed364cc6-1)
    [[2]](#r451bed364cc6-2). Depending on the shapes of the matrices, this can speed
    up the multiplication a lot.'
  prefs: []
  type: TYPE_NORMAL
- en: If the first argument is 1-D it is treated as a row vector. If the last argument
    is 1-D it is treated as a column vector. The other arguments must be 2-D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of [`multi_dot`](#numpy.linalg.multi_dot "numpy.linalg.multi_dot") as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arrays**sequence of array_like'
  prefs: []
  type: TYPE_NORMAL
- en: If the first argument is 1-D it is treated as row vector. If the last argument
    is 1-D it is treated as column vector. The other arguments must be 2-D.
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Output argument. This must have the exact kind that would be returned if it
    was not used. In particular, it must have the right type, must be C-contiguous,
    and its dtype must be the dtype that would be returned for *dot(a, b)*. This is
    a performance feature. Therefore, if these conditions are not met, an exception
    is raised, instead of attempting to be flexible.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.19.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**output**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Returns the dot product of the supplied arrays.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.dot`](numpy.dot.html#numpy.dot "numpy.dot")'
  prefs: []
  type: TYPE_NORMAL
- en: dot multiplication with two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'The cost for a matrix multiplication can be calculated with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Assume we have three matrices \(A_{10x100}, B_{100x5}, C_{5x50}\).
  prefs: []
  type: TYPE_NORMAL
- en: 'The costs for the two different parenthesizations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Cormen, “Introduction to Algorithms”, Chapter 15.2, p. 370-378
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Matrix_chain_multiplication](https://en.wikipedia.org/wiki/Matrix_chain_multiplication)'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[`multi_dot`](#numpy.linalg.multi_dot "numpy.linalg.multi_dot") allows you
    to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'instead of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
