- en: numpy.ma.hstack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ma.hstack.html](https://numpy.org/doc/1.26/reference/generated/numpy.ma.hstack.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: hstack
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence horizontally (column wise).
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to concatenation along the second axis, except for 1-D arrays
    where it concatenates along the first axis. Rebuilds arrays divided by [`hsplit`](numpy.hsplit.html#numpy.hsplit
    "numpy.hsplit").
  prefs: []
  type: TYPE_NORMAL
- en: This function makes most sense for arrays with up to 3 dimensions. For instance,
    for pixel-data with a height (first axis), width (second axis), and r/g/b channels
    (third axis). The functions [`concatenate`](numpy.concatenate.html#numpy.concatenate
    "numpy.concatenate"), [`stack`](numpy.stack.html#numpy.stack "numpy.stack") and
    [`block`](numpy.block.html#numpy.block "numpy.block") provide more general stacking
    and concatenation operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tup**sequence of ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: The arrays must have the same shape along all but the second axis, except 1-D
    arrays which can be any length.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**str or dtype'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the destination array will have this dtype. Cannot be provided
    together with *out*.
  prefs: []
  type: TYPE_NORMAL
- en: '**.. versionadded:: 1.24**'
  prefs: []
  type: TYPE_NORMAL
- en: '**casting**{‘no’, ‘equiv’, ‘safe’, ‘same_kind’, ‘unsafe’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls what kind of data casting may occur. Defaults to ‘same_kind’.
  prefs: []
  type: TYPE_NORMAL
- en: '**.. versionadded:: 1.24**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**stacked**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: The array formed by stacking the given arrays.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`concatenate`](numpy.concatenate.html#numpy.concatenate "numpy.concatenate")'
  prefs: []
  type: TYPE_NORMAL
- en: Join a sequence of arrays along an existing axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`stack`](numpy.stack.html#numpy.stack "numpy.stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Join a sequence of arrays along a new axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[`block`](numpy.block.html#numpy.block "numpy.block")'
  prefs: []
  type: TYPE_NORMAL
- en: Assemble an nd-array from nested lists of blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '[`vstack`](numpy.vstack.html#numpy.vstack "numpy.vstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence vertically (row wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[`dstack`](numpy.dstack.html#numpy.dstack "numpy.dstack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack arrays in sequence depth wise (along third axis).
  prefs: []
  type: TYPE_NORMAL
- en: '[`column_stack`](numpy.column_stack.html#numpy.column_stack "numpy.column_stack")'
  prefs: []
  type: TYPE_NORMAL
- en: Stack 1-D arrays as columns into a 2-D array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`hsplit`](numpy.hsplit.html#numpy.hsplit "numpy.hsplit")'
  prefs: []
  type: TYPE_NORMAL
- en: Split an array into multiple sub-arrays horizontally (column-wise).
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The function is applied to both the _data and the _mask, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
