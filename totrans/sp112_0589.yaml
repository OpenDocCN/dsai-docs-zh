- en: scipy.signal.butter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.butter.html#scipy.signal.butter](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.butter.html#scipy.signal.butter)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Butterworth digital and analog filter design.
  prefs: []
  type: TYPE_NORMAL
- en: Design an Nth-order digital or analog Butterworth filter and return the filter
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**N**int'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the filter. For ‘bandpass’ and ‘bandstop’ filters, the resulting
    order of the final second-order sections (‘sos’) matrix is `2*N`, with *N* the
    number of biquad sections of the desired system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wn**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The critical frequency or frequencies. For lowpass and highpass filters, Wn
    is a scalar; for bandpass and bandstop filters, Wn is a length-2 sequence.
  prefs: []
  type: TYPE_NORMAL
- en: For a Butterworth filter, this is the point at which the gain drops to 1/sqrt(2)
    that of the passband (the “-3 dB point”).
  prefs: []
  type: TYPE_NORMAL
- en: For digital filters, if *fs* is not specified, *Wn* units are normalized from
    0 to 1, where 1 is the Nyquist frequency (*Wn* is thus in half cycles / sample
    and defined as 2*critical frequencies / *fs*). If *fs* is specified, *Wn* is in
    the same units as *fs*.
  prefs: []
  type: TYPE_NORMAL
- en: For analog filters, *Wn* is an angular frequency (e.g. rad/s).
  prefs: []
  type: TYPE_NORMAL
- en: '**btype**{‘lowpass’, ‘highpass’, ‘bandpass’, ‘bandstop’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The type of filter. Default is ‘lowpass’.
  prefs: []
  type: TYPE_NORMAL
- en: '**analog**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: When True, return an analog filter, otherwise a digital filter is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**output**{‘ba’, ‘zpk’, ‘sos’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type of output: numerator/denominator (‘ba’), pole-zero (‘zpk’), or second-order
    sections (‘sos’). Default is ‘ba’ for backwards compatibility, but ‘sos’ should
    be used for general-purpose filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The sampling frequency of the digital system.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**b, a**ndarray, ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Numerator (*b*) and denominator (*a*) polynomials of the IIR filter. Only returned
    if `output='ba'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**z, p, k**ndarray, ndarray, float'
  prefs: []
  type: TYPE_NORMAL
- en: Zeros, poles, and system gain of the IIR filter transfer function. Only returned
    if `output='zpk'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**sos**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Second-order sections representation of the IIR filter. Only returned if `output='sos'`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`buttord`](scipy.signal.buttord.html#scipy.signal.buttord "scipy.signal.buttord"),
    [`buttap`](scipy.signal.buttap.html#scipy.signal.buttap "scipy.signal.buttap")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The Butterworth filter has maximally flat frequency response in the passband.
  prefs: []
  type: TYPE_NORMAL
- en: The `'sos'` output parameter was added in 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: If the transfer function form `[b, a]` is requested, numerical problems can
    occur since the conversion between roots and the polynomial coefficients is a
    numerically sensitive operation, even for N >= 4\. It is recommended to work with
    the SOS representation.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Designing high-order and narrowband IIR filters in TF form can result in unstable
    or incorrect filtering due to floating point numerical precision issues. Consider
    inspecting output filter characteristics [`freqz`](scipy.signal.freqz.html#scipy.signal.freqz
    "scipy.signal.freqz") or designing the filters with second-order sections via
    `output='sos'`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Design an analog filter and plot its frequency response, showing the critical
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-butter-1_00_00.png](../Images/affb051d0fb00bd50e374a7f24e4a80c.png)'
  prefs: []
  type: TYPE_IMG
- en: Generate a signal made up of 10 Hz and 20 Hz, sampled at 1 kHz
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Design a digital high-pass filter at 15 Hz to remove the 10 Hz tone, and apply
    it to the signal. (It’s recommended to use second-order sections format when filtering,
    to avoid numerical error with transfer function (`ba`) format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-butter-1_01_00.png](../Images/b360d930607eec25430f9ca3360f940a.png)'
  prefs: []
  type: TYPE_IMG
