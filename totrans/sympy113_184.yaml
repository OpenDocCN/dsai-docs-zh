- en: Autolev Parser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Autolev 解析器
- en: Original text：[https://docs.sympy.org/latest/modules/physics/mechanics/autolev_parser.html](https://docs.sympy.org/latest/modules/physics/mechanics/autolev_parser.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/mechanics/autolev_parser.html](https://docs.sympy.org/latest/modules/physics/mechanics/autolev_parser.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 介绍'
- en: Autolev (now superseded by MotionGenesis) is a domain specific language used
    for symbolic multibody dynamics. The SymPy mechanics module now has enough power
    and functionality to be a fully featured symbolic dynamics module. This parser
    parses Autolev (version 4.1) code to SymPy code by making use of SymPy’s math
    libraries and the mechanics module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Autolev（现在被 MotionGenesis 取代）是用于符号多体动力学的特定领域语言。SymPy 力学模块现在具有足够的能力和功能，可以作为一个完整的符号动力学模块。该解析器通过利用
    SymPy 的数学库和力学模块，将 Autolev（版本 4.1）代码解析为 SymPy 代码。
- en: The parser has been built using the [ANTLR](https://www.antlr.org/) framework
    and its main purpose is to help former users of Autolev to get familiarized with
    multibody dynamics in SymPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该解析器是使用 [ANTLR](https://www.antlr.org/) 框架构建的，其主要目的是帮助 Autolev 的旧用户熟悉 SymPy
    中的多体动力学。
- en: The sections below shall discuss details of the parser like usage, gotchas,
    issues and future improvements. For a detailed comparison of Autolev and SymPy
    Mechanics you might want to look at the [SymPy Mechanics for Autolev Users guide](sympy_mechanics_for_autolev_users.html#sympy-mechanics-for-autolev-users).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的部分将讨论解析器的细节，如使用方法、常见问题、问题和未来的改进。如果你想详细比较 Autolev 和 SymPy Mechanics，可以参考[SymPy
    Mechanics for Autolev Users guide](sympy_mechanics_for_autolev_users.html#sympy-mechanics-for-autolev-users)。
- en: '## Usage'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用方法'
- en: We first start with an Autolev code file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从一个 Autolev 代码文件开始。
- en: 'Let us take this example (Comments `%` have been included to show the Autolev
    responses):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以这个例子为例（注释 `%` 用于展示 Autolev 的响应）：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The parser can be used as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器可以如下使用：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The commented code is not part of the output code. The print statements demonstrate
    how to get responses similar to the ones in the Autolev file. Note that we need
    to use SymPy functions like `.ang_vel_in()`, `.dcm()` etc in many cases unlike
    directly printing out the variables like `zero`. If you are completely new to
    SymPy mechanics, the [SymPy Mechanics for Autolev Users guide](sympy_mechanics_for_autolev_users.html#sympy-mechanics-for-autolev-users)
    guide should help. You might also have to use basic SymPy simplifications and
    manipulations like `trigsimp()`, `expand()`, `evalf()` etc for getting outputs
    similar to Autolev. Refer to the [SymPy Tutorial](https://docs.sympy.org/latest/tutorial/index.html)
    to know more about these.  ## Gotchas'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '注释代码不属于输出代码的一部分。打印语句展示了如何获取类似 Autolev 文件中的响应。请注意，我们需要在许多情况下使用 SymPy 函数，如 `.ang_vel_in()`、`.dcm()`
    等，而不是直接打印变量如 `zero`。如果你完全是 SymPy 力学的新手，[SymPy Mechanics for Autolev Users guide](sympy_mechanics_for_autolev_users.html#sympy-mechanics-for-autolev-users)
    应该会有所帮助。你可能还需要使用基本的 SymPy 简化和操作，如 `trigsimp()`、`expand()`、`evalf()` 等，以获取类似 Autolev
    的输出。更多相关信息请参考 [SymPy Tutorial](https://docs.sympy.org/latest/tutorial/index.html)。  ##
    注意事项'
- en: 'Don’t use variable names that conflict with Python’s reserved words. This is
    one example where this is violated:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用与 Python 保留字冲突的变量名。这是一个违反规则的例子：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Make sure that the names of vectors and scalars are different. Autolev treats
    these differently but these will get overwritten in Python. The parser currently
    allows the names of bodies and scalars/vectors to coincide but doesn’t do this
    between scalars and vectors. This should probably be changed in the future.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保矢量和标量的名称不同。Autolev 将这些视为不同的内容，但在 Python 中会被覆盖。目前解析器允许体和标量/矢量的名称相同，但不允许标量和矢量之间相同。这在将来可能需要改变。
- en: '[PRE4]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When dealing with Matrices returned by functions, one must check the order of
    the values as they may not be the same as in Autolev. This is especially the case
    for eigenvalues and eigenvectors.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当处理函数返回的矩阵时，必须检查值的顺序，因为它们可能与 Autolev 中的不同。特别是对于特征值和特征向量而言。
- en: '[PRE6]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When using `EVALUATE`, use something like `90*UNITS(deg,rad)` for angle substitutions
    as radians are the default in SymPy. You could also add `np.deg2rad()` directly
    in the SymPy code.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 `EVALUATE` 时，如 `90*UNITS(deg,rad)` 用于角替代，因为在 SymPy 中弧度是默认的。你也可以直接在 SymPy
    代码中添加 `np.deg2rad()`。
- en: This need not be done for the output code (generated on parsing the `CODE` commands)
    as the parser takes care of this when `deg` units are given in the `INPUT` declarations.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在解析 `CODE` 命令生成的输出代码时，不需要这样做，因为解析器在 `INPUT` 声明中给出 `deg` 单位时会处理这个问题。
- en: The `DEGREES` setting, on the other hand, works only in some cases like in `SIMPROT`
    where an angle is expected.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，`DEGREES` 设置仅在某些情况下有效，例如在需要角度的 `SIMPROT` 中。
- en: '[PRE8]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '* * *'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Most of the Autolev settings have not been parsed and have no effect on the
    parser. The only ones that work somewhat are `COMPLEX` and `DEGREES`. It is advised
    to look into alternatives to these in SymPy and Python.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数 Autolev 设置尚未解析，对解析器没有影响。唯一部分起作用的是 `COMPLEX` 和 `DEGREES`。建议查找 SymPy 和 Python
    中的替代方案。
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The `REPRESENT` command is not supported. Use the `MATRIX`, `VECTOR` or `DYADIC`
    commands instead. Autolev 4.1 suggests these over `REPRESENT` as well while still
    allowing it but the parser doesn’t parse it.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REPRESENT` 命令不受支持。请改用 `MATRIX`、`VECTOR` 或 `DYADIC` 命令。Autolev 4.1 也建议使用这些命令而不是
    `REPRESENT`，虽然仍允许使用，但解析器不解析它。'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Do not use variables declarations of the type `WO{3}RD{2,4}`. The parser can
    only handle one variable name followed by one pair of curly braces and any number
    of `'` s. You would have to declare all the cases manually if you want to achieve
    something like `WO{3}RD{2,4}`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用类似 `WO{3}RD{2,4}` 的变量声明类型。解析器只能处理一个变量名后跟一对花括号和任意数量的 `'`。如果要实现类似 `WO{3}RD{2,4}`
    的效果，必须手动声明所有情况。
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The parser can handle normal versions of most commands but it may not parse
    functions with Matrix arguments properly in most cases. Eg:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器可以处理大多数命令的普通版本，但在大多数情况下可能无法正确解析带有矩阵参数的函数。例如：
- en: '`M=COEF([E1;E2],[U1,U2,U3])`'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`M=COEF([E1;E2],[U1,U2,U3])`'
- en: This would compute the coefficients of `U1`, `U2` and `U3` in `E1` and `E2`.
    It is preferable to manually construct a Matrix using the regular versions of
    these commands.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将计算 `E1` 和 `E2` 中 `U1`、`U2` 和 `U3` 的系数。最好使用这些命令的常规版本手动构造一个矩阵。
- en: '[PRE10]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '* * *'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '`MOTIONVARIABLE` declarations must be used for the generalized coordinates
    and speeds and all other variables must be declared in regular `VARIABLE` declarations.
    The parser requires this to distinguish between them to pass the correct parameters
    to the Kane’s method object.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须使用 `MOTIONVARIABLE` 声明广义坐标和速度，并且必须在常规的 `VARIABLE` 声明中声明所有其他变量。解析器需要这样做以区分它们，并将正确的参数传递给
    Kane 方法对象。
- en: It is also preferred to always declare the speeds corresponding to the coordinates
    and to pass in the kinematic differential equations. The parser is able to handle
    some cases where this isn’t the case by introducing some dummy variables of its
    own but SymPy on its own does require them.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还建议始终声明与坐标对应的速度，并传递运动微分方程。解析器能够处理某些情况，即使没有这些也引入自己的一些虚拟变量，但 SymPy 自身确实需要它们。
- en: Also note that older Autolev declarations like `VARIABLES U{3}'` are not supported
    either.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还要注意，像 `VARIABLES U{3}'` 这样的旧 Autolev 声明也不受支持。
- en: '[PRE11]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Need to change `me.dynamicsymbols._t` to `me.dynamicsymbols('t')` for all occurrences
    of it in the Kane’s equations. For example have a look at line 10 of this [spring
    damper example](https://github.com/sympy/sympy/blob/master/sympy/parsing/autolev/test-examples/pydy-example-repo/mass_spring_damper.py#L10).
    This equation is used in forming the Kane’s equations so we need to change `me.dynamicsymbols._t`
    to `me.dynamicsymbols('t')` in this case.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在所有出现的 Kane 方程中将 `me.dynamicsymbols._t` 更改为 `me.dynamicsymbols('t')`。例如，查看此
    [弹簧阻尼器示例](https://github.com/sympy/sympy/blob/master/sympy/parsing/autolev/test-examples/pydy-example-repo/mass_spring_damper.py#L10)
    的第 10 行。此方程用于形成 Kane 方程，因此在这种情况下需要将 `me.dynamicsymbols._t` 更改为 `me.dynamicsymbols('t')`。
- en: The main reason that this needs to be done is because PyDy requires time dependent
    specifieds to be explicitly laid out while Autolev simply takes care of the stray
    time variables in the equations by itself.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样做的主要原因是因为 PyDy 要求明确列出时间相关的指定变量，而 Autolev 则通过方程自动处理方程中的时间变量。
- en: The problem is that PyDy’s System class does not accept `dynamicsymbols._t`
    as a specified. Refer to issue [#396](https://github.com/pydy/pydy/issues/396).
    This change is not actually ideal so a better solution should be figured out in
    the future.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 问题在于 PyDy 的 System 类不接受 `dynamicsymbols._t` 作为指定。参见问题 [#396](https://github.com/pydy/pydy/issues/396)。这种改变实际上并不理想，因此未来应该找到更好的解决方案。
- en: '* * *'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The parser creates SymPy `symbols` and `dynamicsymbols` by parsing variable
    declarations in the Autolev Code.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器通过解析 Autolev 代码中的变量声明来创建 SymPy 的 `symbols` 和 `dynamicsymbols`。
- en: For intermediate expressions which are directly initialized the parser does
    not create SymPy symbols. It just assigns them to the expression.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于直接初始化的中间表达式，解析器不会创建 SymPy 符号，只是将它们分配给表达式。
- en: On the other hand, when a declared variable is assigned to an expression, the
    parser stores the expression against the variable in a dictionary so as to not
    reassign it to a completely different entity. This constraint is due to the inherent
    nature of Python and how it differs from a language like Autolev.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一方面，当声明变量被赋予表达式时，解析器将表达式存储在字典中，以避免将其重新分配给完全不同的实体。这个约束是由Python的固有特性及其与Autolev等语言的不同之处所决定的。
- en: Also, Autolev seems to be able to assume whether to use a variable or the rhs
    expression that variable has been assigned to in equations even without an explicit
    `RHS()` call in some cases. For the parser to work correctly however, it is better
    to use `RHS()` wherever a variable’s rhs expression is meant to be used.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，Autolev似乎能够假定在某些情况下使用变量或rhs表达式，即使在表达式中没有明确的`RHS()`调用。然而，为了解析器能够正常工作，最好在变量的rhs表达式应使用`RHS()`。
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '* * *'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This is how the `SOLVE` command is parsed:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析`SOLVE`命令的方法如下：
- en: '[PRE15]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The indexing like `[x]` and `[y]` doesn’t always work so you might want to look
    at the underlying dictionary that solve returns and index it correctly.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像`[x]`和`[y]`这样的索引并不总是有效，因此您可能需要查看solve返回的底层字典并正确索引它。
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Inertia declarations and Inertia functions work somewhat differently in the
    context of the parser. This might be hard to understand at first but this had
    to be done to bridge the gap due to the differences in SymPy and Autolev. Here
    are some points about them:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在解析器的上下文中，惯性声明和惯性函数的工作方式略有不同。这一点起初可能很难理解，但由于SymPy和Autolev之间的差异，必须这样做以弥合差距。以下是它们的一些要点：
- en: 1\. Inertia declarations (`INERTIA B,I1,I2,I3`) set the inertias of rigid bodies.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1\. 惯性声明(`INERTIA B,I1,I2,I3`)设置刚体的惯性。
- en: 2\. Inertia setters of the form `I_C_D>> = expr` however, set the inertias only
    when C is a body. If C is a particle then `I_C_D>> = expr` simply parses to `i_c_d
    = expr` and `i_c_d` acts like a regular variable.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2\. 形式为`I_C_D>> = expr`的惯性设置器只有在C是物体时才设置惯性。如果C是粒子，则`I_C_D>> = expr`仅简单地解析为`i_c_d
    = expr`，并且`i_c_d`表现得像一个普通变量。
- en: 3\. When it comes to inertia getters (`I_C_D>>` used in an expression or `INERTIA`
    commands), these MUST be used with the `EXPRESS` command to specify the frame
    as SymPy needs this information to compute the inertia dyadic.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 3\. 当涉及惯性获取器（在表达式中使用的`I_C_D>>`或`INERTIA`命令中使用）时，这些必须与`EXPRESS`命令一起使用以指定框架，因为SymPy需要此信息来计算惯性二阶张量。
- en: '[PRE17]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '* * *'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In an inertia declaration of a body, if the inertia is being set about a point
    other than the center of mass, one needs to make sure that the position vector
    setter for that point and the center of mass appears before the inertia declaration
    as SymPy will throw an error otherwise.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在物体的惯性声明中，如果惯性是围绕除了质心以外的点设置的，则需要确保该点的位置向量设置器和质心在惯性声明之前出现，否则SymPy会抛出错误。
- en: '[PRE18]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '* * *'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Note that all Autolev commands have not been implemented. The parser now covers
    the important ones in their basic forms. If you are doubtful whether a command
    is included or not, please have a look at [this file](https://github.com/sympy/sympy/blob/master/sympy/parsing/autolev/_listener_autolev_antlr.py)
    in the source code. Search for “<command>” to verify this. Looking at the code
    for the specific command will also give an idea about what form it is expected
    to work in.  ## Limitations and Issues'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '注意，并非所有的Autolev命令都已实现。解析器现在覆盖了它们的基本形式中的重要部分。如果您对是否包含某个命令感到怀疑，请查看[此文件](https://github.com/sympy/sympy/blob/master/sympy/parsing/autolev/_listener_autolev_antlr.py)中的源代码。搜索“<command>”以验证此事。查看特定命令的代码也将有助于了解预期的工作形式。
    ## 限制和问题'
- en: 'A lot of the issues have already been discussed in the Gotchas section. Some
    of these are:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很多问题已经在“陷阱”部分讨论过了。其中一些是：
- en: Vector names coinciding with scalar names are overwritten in Python.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Python中，向量名称与标量名称重合时会被覆盖。
- en: Some convenient variable declarations aren’t parsed.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些方便的变量声明没有被解析。
- en: Some convenient forms of functions to return matrices aren’t parsed.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些返回矩阵的方便形式的函数没有被解析。
- en: Settings aren’t parsed.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置没有被解析。
- en: symbols and rhs expressions work very differently in Python which might cause
    undesirable results.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python中的符号和rhs表达式工作方式非常不同，这可能导致不良结果。
- en: Dictionary indexing for the parsed code of the `SOLVE` command is not proper
    in many cases.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析`SOLVE`命令的代码的字典索引在许多情况下并不正确。
- en: Need to change `dynamicsymbols._t` to `dynamicsymbols('t')` for the PyDy simulation
    code to work properly.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要将`dynamicsymbols._t`更改为`dynamicsymbols('t')`以使PyDy仿真代码正常工作。
- en: 'Here are some other ones:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有其他一些：
- en: Eigenvectors do not seem to work as expected. The values in Autolev and SymPy
    are not the same in many cases.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征向量似乎没有按预期工作。在许多情况下，Autolev和SymPy中的值并不相同。
- en: Block matrices aren’t parsed by the parser. It would actually be easier to make
    a change in SymPy to allow matrices to accept other matrices for arguments.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器不能解析块矩阵。实际上，通过对SymPy进行更改以允许矩阵接受其他矩阵作为参数将更容易实现这一点。
- en: The SymPy equivalent of the `TAYLOR` command `.series()` does not work with
    `dynamicsymbols()`.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SymPy中`TAYLOR`命令的等效`.series()`与`dynamicsymbols()`不兼容。
- en: Only `DEPENDENT` constraints are currently parsed. Need to parse `AUXILIARY`
    constraints as well. This should be done soon as it isn’t very difficult.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当前的`DEPENDENT`约束条件被解析。需要解析`AUXILIARY`约束条件。这应该很快完成，因为这并不是很困难。
- en: None of the energy and momentum functions are parsed right now. It would be
    nice to get these working as well. Some changes should probably be made to SymPy.
    For instance, SymPy doesn’t have a function equivalent to `NICHECK()`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前没有正确解析任何能量和动量函数。将这些功能也搞定会很好。可能需要对SymPy进行一些更改。例如，SymPy没有等效于`NICHECK()`的函数。
- en: The numerical integration parts work properly only in the case of the `KANE`
    command with no arguments. Things like `KANE(F1,F2)` do not currently work.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值积分部分目前只在没有参数的`KANE`命令的情况下正常工作。像`KANE(F1,F2)`这样的事情目前不起作用。
- en: 'Also, the PyDy numerical simulation code works only for cases where the matrix
    say `ZERO = FR() + FRSTAR()` is solved for. It doesn’t work well when the matrix
    has some other equations plugged in as well. One hurdle faced in achieving this
    was that PyDy’s System class automatically takes in the `forcing_full` and `mass_matrix_full`
    and solves them without giving the user the flexibility to specify the equations.
    It would be nice to add this functionality to the System class.  ## Future Improvements'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，PyDy数值仿真代码仅适用于像`ZERO = FR() + FRSTAR()`这样的情况下。当矩阵插入其他方程时效果不佳。在实现这一点时遇到的一个障碍是PyDy的System类自动接受`forcing_full`和`mass_matrix_full`并解决它们，而不给用户指定方程的灵活性。希望能向System类添加此功能。##
    未来改进
- en: 1\. Completing Dynamics Online
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 完成在线动力学
- en: 'The parser has been built by referring to and parsing codes from the [Autolev
    Tutorial](https://mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf) and the book
    *Dynamics Online: Theory and Implementation Using Autolev*. Basically, the process
    involved going through each of these codes, validating the parser results and
    improving the rules if required to make sure the codes parsed well.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '解析器是通过参考和解析来自[Autolev教程](https://mae.ufl.edu/~fregly/PDFs/autolev_tutorial.pdf)和书籍*Dynamics
    Online: Theory and Implementation Using Autolev*中的代码构建的。基本上，这个过程涉及通过每个代码，验证解析器的结果，并改进规则（如果需要）以确保代码解析良好。'
- en: The parsed codes of these are available on GitLab [here](https://gitlab.com/sympy/autolev-test-examples).
    The repo is private so access needs to be requested. As of now, most codes till
    Chapter 4 of *Dynamics Online* have been parsed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解析代码可在GitLab [这里](https://gitlab.com/sympy/autolev-test-examples)找到。仓库是私有的，因此需要请求访问权限。截至目前，大部分*Dynamics
    Online*第4章的代码已经解析完成。
- en: Completing all the remaining codes of the book (namely, *2-10*, *2-11*, *rest
    of Ch4*, *Ch5* and *Ch6* (less important) ) would make the parser more complete.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 完成书中所有剩余的代码（即*2-10*、*2-11*、*第4章剩余部分*、*第5章*和*第6章*（较不重要））将使解析器更加完整。
- en: 2\. Fixing Issues
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 修复问题
- en: The second thing to do would be to go about fixing the problems described above
    in the [Gotchas](#gotchas-autolev) and [Limitations and Issues](#issues) sections
    in order of priority and ease. Many of these require changes in the parser code
    while some of these are better fixed by adding some functionality to SymPy.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第二件事是按照优先级和易用性顺序解决上述“Gotchas”和“Limitations and Issues”部分中描述的问题。其中许多问题需要对解析器代码进行更改，而有些问题最好通过向SymPy添加一些功能来解决。
- en: 3\. Switching to an AST
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 切换至AST
- en: The parser is currently built using a kind of Concrete Syntax Tree (CST) using
    the [ANTLR](https://www.antlr.org/) framework. It would be ideal to switch from
    a CST to an Abstract Syntax Tree (AST). This way, the parser code will be independent
    of the ANTLR grammar which makes it a lot more flexible. It would also be easier
    to make changes to the grammar and the rules of the parser.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当前解析器使用一种具体语法树（CST）来构建，使用[ANTLR](https://www.antlr.org/)框架。理想情况下，从CST切换到抽象语法树（AST）会更好。这样，解析器代码将不再依赖于ANTLR语法，使其更加灵活。同时，更改语法和解析器规则也会更加容易。
