["```py\n    `from ultralytics import YOLO  # Load a model model = YOLO(\"yolov8n-seg.pt\")  # Run inference results = model.predict()` \n    ```", "```py\n    `'ultralytics/assets/bus.jpg' 'ultralytics/assets/zidane.jpg'` \n    ```", "```py\n    `from pathlib import Path  import numpy as np  # (2) Iterate detection results (helpful for multiple images) for r in res:     img = np.copy(r.orig_img)     img_name = Path(r.path).stem  # source image base-name      # Iterate each object contour (multiple detections)     for ci, c in enumerate(r):         # (1) Get detection class name         label = c.names[c.boxes.cls.tolist().pop()]` \n    ```", "```py\n    `import cv2  # Create binary mask b_mask = np.zeros(img.shape[:2], np.uint8)  # (1) Extract contour result contour = c.masks.xy.pop() # (2) Changing the type contour = contour.astype(np.int32) # (3) Reshaping contour = contour.reshape(-1, 1, 2)   # Draw contour onto mask _ = cv2.drawContours(b_mask, [contour], -1, (255, 255, 255), cv2.FILLED)` \n    ```", "```py\n    `# Create 3-channel mask mask3ch = cv2.cvtColor(b_mask, cv2.COLOR_GRAY2BGR)  # Isolate object with binary mask isolated = cv2.bitwise_and(mask3ch, img)` \n    ```", "```py\n    `# (1) Bounding box coordinates x1, y1, x2, y2 = c.boxes.xyxy.cpu().numpy().squeeze().astype(np.int32) # Crop image to object region iso_crop = isolated[y1:y2, x1:x2]` \n    ```", "```py\n    `# Isolate object with transparent background (when saved as PNG) isolated = np.dstack([img, b_mask])` \n    ```", "```py\n    `# (1) Bounding box coordinates x1, y1, x2, y2 = c.boxes.xyxy.cpu().numpy().squeeze().astype(np.int32) # Crop image to object region iso_crop = isolated[y1:y2, x1:x2]` \n    ```", "```py\n    `# Save isolated object to file _ = cv2.imwrite(f\"{img_name}_{label}-{ci}.png\", iso_crop)` \n    ```", "```py\n`from pathlib import Path  import cv2 import numpy as np  from ultralytics import YOLO  m = YOLO(\"yolov8n-seg.pt\")  # (4)! res = m.predict()  # (3)!  # Iterate detection results (5) for r in res:     img = np.copy(r.orig_img)     img_name = Path(r.path).stem      # Iterate each object contour (6)     for ci, c in enumerate(r):         label = c.names[c.boxes.cls.tolist().pop()]          b_mask = np.zeros(img.shape[:2], np.uint8)          # Create contour mask (1)         contour = c.masks.xy.pop().astype(np.int32).reshape(-1, 1, 2)         _ = cv2.drawContours(b_mask, [contour], -1, (255, 255, 255), cv2.FILLED)          # Choose one:          # OPTION-1: Isolate object with black background         mask3ch = cv2.cvtColor(b_mask, cv2.COLOR_GRAY2BGR)         isolated = cv2.bitwise_and(mask3ch, img)          # OPTION-2: Isolate object with transparent background (when saved as PNG)         isolated = np.dstack([img, b_mask])          # OPTIONAL: detection crop (from either OPT1 or OPT2)         x1, y1, x2, y2 = c.boxes.xyxy.cpu().numpy().squeeze().astype(np.int32)         iso_crop = isolated[y1:y2, x1:x2]          # TODO your actions go here (2)` \n```", "```py\n    `from ultralytics import YOLO  model = YOLO(\"yolov8n-seg.pt\") results = model.predict(source=\"path/to/your/image.jpg\")` \n    ```", "```py\n    `import cv2 import numpy as np  img = np.copy(results[0].orig_img) b_mask = np.zeros(img.shape[:2], np.uint8) contour = results[0].masks.xy[0].astype(np.int32).reshape(-1, 1, 2) cv2.drawContours(b_mask, [contour], -1, (255, 255, 255), cv2.FILLED)` \n    ```", "```py\n    `mask3ch = cv2.cvtColor(b_mask, cv2.COLOR_GRAY2BGR) isolated = cv2.bitwise_and(mask3ch, img)` \n    ```", "```py\n    `mask3ch = cv2.cvtColor(b_mask, cv2.COLOR_GRAY2BGR) isolated = cv2.bitwise_and(mask3ch, img)` \n    ```", "```py\n    `isolated = np.dstack([img, b_mask])` \n    ```", "```py\n    `x1, y1, x2, y2 = results[0].boxes.xyxy[0].cpu().numpy().astype(np.int32)` \n    ```", "```py\n    `iso_crop = isolated[y1:y2, x1:x2]` \n    ```", "```py\n`results = model.predict(source=\"path/to/your/image.jpg\", save_crop=True)` \n```"]