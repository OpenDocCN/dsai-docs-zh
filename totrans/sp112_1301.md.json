["```py\nscipy.stats.goodness_of_fit(dist, data, *, known_params=None, fit_params=None, guessed_params=None, statistic='ad', n_mc_samples=9999, random_state=None)\n```", "```py\n>>> import numpy as np\n>>> from scipy import stats\n>>> rng = np.random.default_rng()\n>>> x = stats.uniform.rvs(size=75, random_state=rng) \n```", "```py\n>>> loc, scale = np.mean(x), np.std(x, ddof=1)\n>>> cdf = stats.norm(loc, scale).cdf\n>>> stats.ks_1samp(x, cdf)\nKstestResult(statistic=0.1119257570456813, pvalue=0.2827756409939257) \n```", "```py\n>>> known_params = {'loc': loc, 'scale': scale}\n>>> res = stats.goodness_of_fit(stats.norm, x, known_params=known_params,\n...                             statistic='ks', random_state=rng)\n>>> res.statistic, res.pvalue\n(0.1119257570456813, 0.2788) \n```", "```py\n>>> res = stats.goodness_of_fit(stats.norm, x, statistic='ks',\n...                             random_state=rng)\n>>> res.statistic, res.pvalue\n(0.1119257570456813, 0.0196) \n```", "```py\n>>> res = stats.anderson(x, 'norm')\n>>> print(res.statistic)\n1.2139573337497467\n>>> print(res.critical_values)\n[0.549 0.625 0.75  0.875 1.041]\n>>> print(res.significance_level)\n[15\\.  10\\.   5\\.   2.5  1\\. ] \n```", "```py\n>>> res = stats.goodness_of_fit(stats.norm, x, statistic='ad',\n...                             random_state=rng)\n>>> res.statistic, res.pvalue\n(1.2139573337497467, 0.0034) \n```", "```py\n>>> rng = np.random.default_rng()\n>>> x = stats.chi(df=2.2, loc=0, scale=2).rvs(size=1000, random_state=rng)\n>>> res = stats.goodness_of_fit(stats.rayleigh, x, statistic='cvm',\n...                             known_params={'loc': 0}, random_state=rng) \n```", "```py\n>>> res.fit_result  # location is as specified, and scale is reasonable\n params: FitParams(loc=0.0, scale=2.1026719844231243)\n success: True\n message: 'The fit was performed successfully.'\n>>> import matplotlib.pyplot as plt  # matplotlib must be installed to plot\n>>> res.fit_result.plot()\n>>> plt.show() \n```", "```py\n>>> _, ax = plt.subplots()\n>>> ax.hist(np.log10(res.null_distribution))\n>>> ax.set_xlabel(\"log10 of CVM statistic under the null hypothesis\")\n>>> ax.set_ylabel(\"Frequency\")\n>>> ax.set_title(\"Histogram of the Monte Carlo null distribution\")\n>>> plt.show() \n```", "```py\n>>> res.statistic, res.pvalue\n(0.2231991510248692, 0.0525) \n```"]