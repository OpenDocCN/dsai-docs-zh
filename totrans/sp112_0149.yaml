- en: scipy.integrate.LSODA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adams/BDF method with automatic stiffness detection and switching.
  prefs: []
  type: TYPE_NORMAL
- en: This is a wrapper to the Fortran solver from ODEPACK [[1]](#r838579b36be5-1).
    It switches automatically between the nonstiff Adams method and the stiff BDF
    method. The method was originally detailed in [[2]](#r838579b36be5-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fun**callable'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. `fun` must return an array of the same shape
    as `y`. See *vectorized* for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t0**float'
  prefs: []
  type: TYPE_NORMAL
- en: Initial time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y0**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Initial state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  prefs: []
  type: TYPE_NORMAL
- en: '**first_step**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  prefs: []
  type: TYPE_NORMAL
- en: '**min_step**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum allowed step size. Default is 0.0, i.e., the step size is not bounded
    and determined solely by the solver.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_step**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtol, atol**float and array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  prefs: []
  type: TYPE_NORMAL
- en: '**jac**None or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Jacobian matrix of the right-hand side of the system with respect to `y`. The
    Jacobian matrix has shape (n, n) and its element (i, j) is equal to `d f_i / d
    y_j`. The function will be called as `jac(t, y)`. If None (default), the Jacobian
    will be approximated by finite differences. It is generally recommended to provide
    the Jacobian rather than relying on a finite-difference approximation.
  prefs: []
  type: TYPE_NORMAL
- en: '**lband, uband**int or None'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters defining the bandwidth of the Jacobian, i.e., `jac[i, j] != 0 only
    for i - lband <= j <= i + uband`. Setting these requires your jac routine to return
    the Jacobian in the packed format: the returned array must have `n` columns and
    `uband + lband + 1` rows in which Jacobian diagonals are written. Specifically
    `jac_packed[uband + i - j , j] = jac[i, j]`. The same format is used in [`scipy.linalg.solve_banded`](scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded") (check for an illustration). These parameters can
    be also used with `jac=None` to reduce the number of Jacobian elements estimated
    by finite differences.'
  prefs: []
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether *fun* may be called in a vectorized fashion. False (default) is recommended
    for this solver.
  prefs: []
  type: TYPE_NORMAL
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  prefs: []
  type: TYPE_NORMAL
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  prefs: []
  type: TYPE_NORMAL
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by methods ‘Radau’ and ‘BDF’, but will result in slower execution
    for this solver.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: A. C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE Solvers,” IMACS
    Transactions on Scientific Computation, Vol 1., pp. 55-64, 1983.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: L. Petzold, “Automatic selection of methods for solving stiff and nonstiff systems
    of ordinary differential equations”, SIAM Journal on Scientific and Statistical
    Computing, Vol. 4, No. 1, pp. 136-148, 1983.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of equations.
  prefs: []
  type: TYPE_NORMAL
- en: '**status**string'
  prefs: []
  type: TYPE_NORMAL
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time.
  prefs: []
  type: TYPE_NORMAL
- en: '**direction**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'Integration direction: +1 or -1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**float'
  prefs: []
  type: TYPE_NORMAL
- en: Current time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_old**float'
  prefs: []
  type: TYPE_NORMAL
- en: Previous time. None if no steps were made yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**njev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the Jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dense_output`](scipy.integrate.LSODA.dense_output.html#scipy.integrate.LSODA.dense_output
    "scipy.integrate.LSODA.dense_output")() | Compute a local interpolant over the
    last successful step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`step`](scipy.integrate.LSODA.step.html#scipy.integrate.LSODA.step "scipy.integrate.LSODA.step")()
    | Perform one integration step. |'
  prefs: []
  type: TYPE_TB
