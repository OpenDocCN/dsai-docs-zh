- en: pandas.errors.DtypeWarning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.errors.DtypeWarning.html](https://pandas.pydata.org/docs/reference/api/pandas.errors.DtypeWarning.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Warning raised when reading different dtypes in a column from a file.
  prefs: []
  type: TYPE_NORMAL
- en: Raised for a dtype incompatibility. This can happen whenever read_csv or read_table
    encounter non-uniform dtypes in a column(s) of a given CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`read_csv`'
  prefs: []
  type: TYPE_NORMAL
- en: Read CSV (comma-separated) file into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '`read_table`'
  prefs: []
  type: TYPE_NORMAL
- en: Read general delimited file into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This warning is issued when dealing with larger files because the dtype checking
    happens per chunk read.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the warning, the CSV file is read with mixed types in a single column
    which will be an object type. See the examples below to better understand this
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: This example creates and reads a large CSV file with a column that contains
    int and str.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important to notice that `df2` will contain both str and int for the same input,
    ‘1’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'One way to solve this issue is using the dtype parameter in the read_csv and
    read_table functions to explicit the conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: No warning was issued.
  prefs: []
  type: TYPE_NORMAL
