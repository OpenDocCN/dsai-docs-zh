- en: Shor’s Algorithm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shor 算法
- en: Original text：[https://docs.sympy.org/latest/modules/physics/quantum/shor.html](https://docs.sympy.org/latest/modules/physics/quantum/shor.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.sympy.org/latest/modules/physics/quantum/shor.html](https://docs.sympy.org/latest/modules/physics/quantum/shor.html)
- en: Shor’s algorithm and helper functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Shor 算法及其辅助函数。
- en: 'Todo:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项：
- en: Get the CMod gate working again using the new Gate API.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的 Gate API 重新使 CMod 门工作。
- en: Fix everything.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复一切。
- en: Update docstrings and reformat.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新文档字符串并重新格式化。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A controlled mod gate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个控制的模门。
- en: 'This is black box controlled Mod function for use by shor’s algorithm. TODO:
    implement a decompose property that returns how to do this in terms of elementary
    gates'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于 Shor 算法的黑盒子控制模函数。TODO：实现一个 decompose 属性，以元素门的术语返回如何执行此操作。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: N is the type of modular arithmetic we are doing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: N 是我们进行的模算术的类型。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Base of the controlled mod function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 控制模函数的基础。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Size of 1/2 input register. First 1/2 holds output.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 1/2 输入寄存器的大小。前半部分保存输出。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finds the period of a in modulo N arithmetic
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在模 N 算术中找到 a 的周期
- en: 'This is quantum part of Shor’s algorithm. It takes two registers, puts first
    in superposition of states with Hadamards so: `|k>|0>` with k being all possible
    choices. It then does a controlled mod and a QFT to determine the order of a.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Shor 算法的量子部分。它接受两个寄存器，将第一个置于哈达玛德变换的状态叠加中：`|k>|0>`，其中 k 是所有可能的选择。然后进行一个控制模门和一个量子傅立叶变换以确定
    a 的阶。
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This function implements Shor’s factoring algorithm on the Integer N
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数在整数 N 上实现了 Shor 的因数分解算法。
- en: The algorithm starts by picking a random number (a) and seeing if it is coprime
    with N. If it is not, then the gcd of the two numbers is a factor and we are done.
    Otherwise, it begins the period_finding subroutine which finds the period of a
    in modulo N arithmetic. This period, if even, can be used to calculate factors
    by taking a**(r/2)-1 and a**(r/2)+1. These values are returned.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 算法首先随机选择一个数（a），并检查它是否与 N 互质。如果不是，则两个数的最大公约数是一个因子，我们完成了。否则，它开始执行 period_finding
    子例程，用于找到在模 N 算术中 a 的周期。如果这个周期是偶数，可以通过取 a**(r/2)-1 和 a**(r/2)+1 来计算因子。这些值被返回。
