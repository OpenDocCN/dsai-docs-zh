- en: NumPy 1.22.0 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.22.0-notes.html](https://numpy.org/doc/1.26/release/1.22.0-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'NumPy 1.22.0 is a big release featuring the work of 153 contributors spread
    over 609 pull requests. There have been many improvements, highlights are:'
  prefs: []
  type: TYPE_NORMAL
- en: Annotations of the main namespace are essentially complete. Upstream is a moving
    target, so there will likely be further improvements, but the major work is done.
    This is probably the most user visible enhancement in this release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A preliminary version of the proposed Array-API is provided. This is a step
    in creating a standard collection of functions that can be used across applications
    such as CuPy and JAX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy now has a DLPack backend. DLPack provides a common interchange format
    for array (tensor) data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New methods for `quantile`, `percentile`, and related functions. The new methods
    provide a complete set of the methods commonly found in the literature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The universal functions have been refactored to implement most of [NEP 43](https://numpy.org/neps/nep-0043-extensible-ufuncs.html#nep43
    "(in NumPy Enhancement Proposals)"). This also unlocks the ability to experiment
    with the future DType API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new configurable allocator for use by downstream projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are in addition to the ongoing work to provide SIMD support for commonly
    used functions, improvements to F2PY, and better documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Python versions supported in this release are 3.8-3.10, Python 3.7 has been
    dropped. Note that the Mac wheels are now based on OS X 10.14 rather than 10.9
    that was used in previous NumPy release cycles. 10.14 is the oldest release supported
    by Apple. Also note that 32 bit wheels are only provided for Python 3.8 and 3.9
    on Windows, all other wheels are 64 bits on account of Ubuntu, Fedora, and other
    Linux distributions dropping 32 bit support. All 64 bit wheels are also linked
    with 64 bit integer OpenBLAS, which should fix the occasional problems encountered
    by folks using truly huge arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecated numeric style dtype strings have been removed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use delimiter rather than delimitor as kwarg in mrecords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  prefs: []
  type: TYPE_NORMAL
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  prefs: []
  type: TYPE_NORMAL
- en: The `np.MachAr` class has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  prefs: []
  type: TYPE_NORMAL
- en: Removed floor division support for complex types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Floor division of complex types will now result in a `TypeError`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7 is no longer supported
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  prefs: []
  type: TYPE_NORMAL
- en: str/repr of complex dtypes now include space after punctuation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  prefs: []
  type: TYPE_NORMAL
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  prefs: []
  type: TYPE_NORMAL
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  prefs: []
  type: TYPE_NORMAL
- en: Change in generation of random 32 bit floating point variates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Masked inner-loops cannot be customized anymore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  prefs: []
  type: TYPE_NORMAL
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  prefs: []
  type: TYPE_NORMAL
- en: Experimental exposure of future DType and UFunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NEP 49 configurable allocators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of the NEP 47 (adopting the array API standard)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  prefs: []
  type: TYPE_NORMAL
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  prefs: []
  type: TYPE_NORMAL
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  prefs: []
  type: TYPE_NORMAL
- en: Add NEP 47-compatible dlpack support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  prefs: []
  type: TYPE_NORMAL
- en: '`bit_count` to compute the number of 1-bits in an integer'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  prefs: []
  type: TYPE_NORMAL
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  prefs: []
  type: TYPE_NORMAL
- en: Preliminary support for `windows/arm64` target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  prefs: []
  type: TYPE_NORMAL
- en: Added support for LoongArch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  prefs: []
  type: TYPE_NORMAL
- en: A `.clang-format` file has been added
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  prefs: []
  type: TYPE_NORMAL
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic parser for Fortran dimension specifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ctypeslib.load_library` can now take any path-like object'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  prefs: []
  type: TYPE_NORMAL
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  prefs: []
  type: TYPE_NORMAL
- en: Add new methods for `quantile` and `percentile`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  prefs: []
  type: TYPE_NORMAL
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  prefs: []
  type: TYPE_NORMAL
- en: Please see the documentation of `numpy.percentile` for more information.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  prefs: []
  type: TYPE_NORMAL
- en: Missing parameters have been added to the `nan<x>` functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'nanmin: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmax: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmin: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmax: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nansum: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanprod: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmean: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanvar: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanstd: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  prefs: []
  type: TYPE_NORMAL
- en: Annotating the main Numpy namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  prefs: []
  type: TYPE_NORMAL
- en: Vectorize umath module using AVX-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS v0.3.18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deprecated numeric style dtype strings have been removed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated numeric style dtype strings have been removed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the strings `"Bytes0"`, `"Datetime64"`, `"Str0"`, `"Uint32"`, and `"Uint64"`
    as a dtype will now raise a `TypeError`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19539](https://github.com/numpy/numpy/pull/19539))
  prefs: []
  type: TYPE_NORMAL
- en: Expired deprecations for `loads`, `ndfromtxt`, and `mafromtxt` in npyio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.loads` was deprecated in v1.15, with the recommendation that users use
    `pickle.loads` instead. `ndfromtxt` and `mafromtxt` were both deprecated in v1.17
    - users should use `numpy.genfromtxt` instead with the appropriate value for the
    `usemask` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19615](https://github.com/numpy/numpy/pull/19615))
  prefs: []
  type: TYPE_NORMAL
- en: Deprecations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use delimiter rather than delimitor as kwarg in mrecords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  prefs: []
  type: TYPE_NORMAL
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  prefs: []
  type: TYPE_NORMAL
- en: The `np.MachAr` class has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  prefs: []
  type: TYPE_NORMAL
- en: Use delimiter rather than delimitor as kwarg in mrecords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The misspelled keyword argument `delimitor` of `numpy.ma.mrecords.fromtextfile()`
    has been changed to `delimiter`, using it will emit a deprecation warning.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19921](https://github.com/numpy/numpy/pull/19921))
  prefs: []
  type: TYPE_NORMAL
- en: Passing boolean `kth` values to (arg-)partition has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.partition` and `numpy.argpartition` would previously accept boolean
    values for the `kth` parameter, which would subsequently be converted into integers.
    This behavior has now been deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20000](https://github.com/numpy/numpy/pull/20000))
  prefs: []
  type: TYPE_NORMAL
- en: The `np.MachAr` class has been deprecated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `numpy.MachAr` class and `finfo.machar <numpy.finfo>` attribute have been
    deprecated. Users are encouraged to access the property if interest directly from
    the corresponding `numpy.finfo` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20201](https://github.com/numpy/numpy/pull/20201))
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  prefs: []
  type: TYPE_NORMAL
- en: Removed floor division support for complex types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Floor division of complex types will now result in a `TypeError`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7 is no longer supported
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  prefs: []
  type: TYPE_NORMAL
- en: str/repr of complex dtypes now include space after punctuation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  prefs: []
  type: TYPE_NORMAL
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  prefs: []
  type: TYPE_NORMAL
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  prefs: []
  type: TYPE_NORMAL
- en: Change in generation of random 32 bit floating point variates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  prefs: []
  type: TYPE_NORMAL
- en: Distutils forces strict floating point model on clang
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NumPy now sets the `-ftrapping-math` option on clang to enforce correct floating
    point error handling for universal functions. Clang defaults to non-IEEE and C99
    conform behaviour otherwise. This change (using the equivalent but newer `-ffp-exception-behavior=strict`)
    was attempted in NumPy 1.21, but was effectively never used.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19479](https://github.com/numpy/numpy/pull/19479))
  prefs: []
  type: TYPE_NORMAL
- en: Removed floor division support for complex types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Floor division of complex types will now result in a `TypeError`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19135](https://github.com/numpy/numpy/pull/19135))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.vectorize` functions now produce the same output class as the base function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a function that respects `numpy.ndarray` subclasses is vectorized using
    `numpy.vectorize`, the vectorized function will now be subclass-safe also for
    cases that a signature is given (i.e., when creating a `gufunc`): the output class
    will be the same as that returned by the first call to the underlying function.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19356](https://github.com/numpy/numpy/pull/19356))
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.7 is no longer supported
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python support has been dropped. This is rather strict, there are changes that
    require Python >= 3.8.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19665](https://github.com/numpy/numpy/pull/19665))
  prefs: []
  type: TYPE_NORMAL
- en: str/repr of complex dtypes now include space after punctuation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repr of `np.dtype({"names": ["a"], "formats": [int], "offsets": [2]})`
    is now `dtype({''names'': [''a''], ''formats'': [''<i8''], ''offsets'': [2], ''itemsize'':
    10})`, whereas spaces where previously omitted after colons and between fields.'
  prefs: []
  type: TYPE_NORMAL
- en: The old behavior can be restored via `np.set_printoptions(legacy="1.21")`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19687](https://github.com/numpy/numpy/pull/19687))
  prefs: []
  type: TYPE_NORMAL
- en: Corrected `advance` in `PCG64DSXM` and `PCG64`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fixed a bug in the `advance` method of `PCG64DSXM` and `PCG64`. The bug only
    affects results when the step was larger than \(2^{64}\) on platforms that do
    not support 128-bit integers(e.g., Windows and 32-bit Linux).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20049](https://github.com/numpy/numpy/pull/20049))
  prefs: []
  type: TYPE_NORMAL
- en: Change in generation of random 32 bit floating point variates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There was bug in the generation of 32 bit floating point values from the uniform
    distribution that would result in the least significant bit of the random variate
    always being 0\. This has been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: This change affects the variates produced by the `random.Generator` methods
    `random`, `standard_normal`, `standard_exponential`, and `standard_gamma`, but
    only when the dtype is specified as `numpy.float32`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20314](https://github.com/numpy/numpy/pull/20314))
  prefs: []
  type: TYPE_NORMAL
- en: C API changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Masked inner-loops cannot be customized anymore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  prefs: []
  type: TYPE_NORMAL
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  prefs: []
  type: TYPE_NORMAL
- en: Experimental exposure of future DType and UFunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  prefs: []
  type: TYPE_NORMAL
- en: Masked inner-loops cannot be customized anymore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The masked inner-loop selector is now never used. A warning will be given in
    the unlikely event that it was customized.
  prefs: []
  type: TYPE_NORMAL
- en: We do not expect that any code uses this. If you do use it, you must unset the
    selector on newer NumPy version. Please also contact the NumPy developers, we
    do anticipate providing a new, more specific, mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: The customization was part of a never-implemented feature to allow for faster
    masked operations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19259](https://github.com/numpy/numpy/pull/19259))
  prefs: []
  type: TYPE_NORMAL
- en: Experimental exposure of future DType and UFunc API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new header `experimental_public_dtype_api.h` allows to experiment with future
    API for improved universal function and especially user DType support. At this
    time it is advisable to experiment using the development version of NumPy since
    some changes are expected and new features will be unlocked.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19919](https://github.com/numpy/numpy/pull/19919))
  prefs: []
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NEP 49 configurable allocators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of the NEP 47 (adopting the array API standard)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  prefs: []
  type: TYPE_NORMAL
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  prefs: []
  type: TYPE_NORMAL
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  prefs: []
  type: TYPE_NORMAL
- en: Add NEP 47-compatible dlpack support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  prefs: []
  type: TYPE_NORMAL
- en: '`bit_count` to compute the number of 1-bits in an integer'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  prefs: []
  type: TYPE_NORMAL
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  prefs: []
  type: TYPE_NORMAL
- en: Preliminary support for `windows/arm64` target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  prefs: []
  type: TYPE_NORMAL
- en: Added support for LoongArch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  prefs: []
  type: TYPE_NORMAL
- en: A `.clang-format` file has been added
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  prefs: []
  type: TYPE_NORMAL
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic parser for Fortran dimension specifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  prefs: []
  type: TYPE_NORMAL
- en: NEP 49 configurable allocators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As detailed in [NEP 49](https://numpy.org/neps/nep-0049.html), the function
    used for allocation of the data segment of a ndarray can be changed. The policy
    can be set globally or in a context. For more information see the NEP and the
    [Memory management in NumPy](../reference/c-api/data_memory.html#data-memory)
    reference docs. Also add a `NUMPY_WARN_IF_NO_MEM_POLICY` override to warn on dangerous
    use of transfering ownership by setting `NPY_ARRAY_OWNDATA`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17582](https://github.com/numpy/numpy/pull/17582))
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of the NEP 47 (adopting the array API standard)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An initial implementation of [NEP 47](https://numpy.org/neps/nep-0047-array-api-standard.html)
    (adoption the array API standard) has been added as `numpy.array_api`. The implementation
    is experimental and will issue a UserWarning on import, as the [array API standard](https://data-apis.org/array-api/latest/index.html)
    is still in draft state. `numpy.array_api` is a conforming implementation of the
    array API standard, which is also minimal, meaning that only those functions and
    behaviors that are required by the standard are implemented (see the NEP for more
    info). Libraries wishing to make use of the array API standard are encouraged
    to use `numpy.array_api` to check that they are only using functionality that
    is guaranteed to be present in standard conforming implementations.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18585](https://github.com/numpy/numpy/pull/18585))
  prefs: []
  type: TYPE_NORMAL
- en: Generate C/C++ API reference documentation from comments blocks is now possible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This feature depends on [Doxygen](https://www.doxygen.nl/index.html) in the
    generation process and on [Breathe](https://breathe.readthedocs.io/en/latest/)
    to integrate it with Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18884](https://github.com/numpy/numpy/pull/18884))
  prefs: []
  type: TYPE_NORMAL
- en: Assign the platform-specific `c_intp` precision via a mypy plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [mypy](http://mypy-lang.org/) plugin, introduced in [numpy/numpy#17843](https://github.com/numpy/numpy/pull/17843),
    has again been expanded: the plugin now is now responsible for setting the platform-specific
    precision of `numpy.ctypeslib.c_intp`, the latter being used as data type for
    various `numpy.ndarray.ctypes` attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Without the plugin, aforementioned type will default to `ctypes.c_int64`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the plugin, one must add it to their mypy [configuration file](https://mypy.readthedocs.io/en/stable/config_file.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19062](https://github.com/numpy/numpy/pull/19062))
  prefs: []
  type: TYPE_NORMAL
- en: Add NEP 47-compatible dlpack support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a `ndarray.__dlpack__()` method which returns a `dlpack` C structure wrapped
    in a `PyCapsule`. Also add a `np._from_dlpack(obj)` function, where `obj` supports
    `__dlpack__()`, and returns an `ndarray`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19083](https://github.com/numpy/numpy/pull/19083))
  prefs: []
  type: TYPE_NORMAL
- en: '`keepdims` optional argument added to `numpy.argmin`, `numpy.argmax`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`keepdims` argument is added to `numpy.argmin`, `numpy.argmax`. If set to `True`,
    the axes which are reduced are left in the result as dimensions with size one.
    The resulting array has the same number of dimensions and will broadcast with
    the input array.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19211](https://github.com/numpy/numpy/pull/19211))
  prefs: []
  type: TYPE_NORMAL
- en: '`bit_count` to compute the number of 1-bits in an integer'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computes the number of 1-bits in the absolute value of the input. This works
    on all the numpy integer types. Analogous to the builtin `int.bit_count` or `popcount`
    in C++.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19355](https://github.com/numpy/numpy/pull/19355))
  prefs: []
  type: TYPE_NORMAL
- en: The `ndim` and `axis` attributes have been added to `numpy.AxisError`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ndim` and `axis` parameters are now also stored as attributes within each
    `numpy.AxisError` instance.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19459](https://github.com/numpy/numpy/pull/19459))
  prefs: []
  type: TYPE_NORMAL
- en: Preliminary support for `windows/arm64` target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy` added support for windows/arm64 target. Please note `OpenBLAS` support
    is not yet available for windows/arm64 target.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19513](https://github.com/numpy/numpy/pull/19513))
  prefs: []
  type: TYPE_NORMAL
- en: Added support for LoongArch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LoongArch is a new instruction set, numpy compilation failure on LoongArch architecture,
    so add the commit.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19527](https://github.com/numpy/numpy/pull/19527))
  prefs: []
  type: TYPE_NORMAL
- en: A `.clang-format` file has been added
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Clang-format is a C/C++ code formatter, together with the added `.clang-format`
    file, it produces code close enough to the NumPy C_STYLE_GUIDE for general use.
    Clang-format version 12+ is required due to the use of several new features, it
    is available in Fedora 34 and Ubuntu Focal among other distributions.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19754](https://github.com/numpy/numpy/pull/19754))
  prefs: []
  type: TYPE_NORMAL
- en: '`is_integer` is now available to `numpy.floating` and `numpy.integer`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on its counterpart in Python `float` and `int`, the numpy floating point
    and integer types now support `float.is_integer`. Returns `True` if the number
    is finite with integral value, and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19803](https://github.com/numpy/numpy/pull/19803))
  prefs: []
  type: TYPE_NORMAL
- en: Symbolic parser for Fortran dimension specifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new symbolic parser has been added to f2py in order to correctly parse dimension
    specifications. The parser is the basis for future improvements and provides compatibility
    with Draft Fortran 202x.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19805](https://github.com/numpy/numpy/pull/19805))
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray`, `dtype` and `number` are now runtime-subscriptable'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mimicking [**PEP 585**](https://peps.python.org/pep-0585/), the `numpy.ndarray`,
    `numpy.dtype` and `numpy.number` classes are now subscriptable for python 3.9
    and later. Consequently, expressions that were previously only allowed in .pyi
    stub files or with the help of `from __future__ import annotations` are now also
    legal during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: ([gh-19879](https://github.com/numpy/numpy/pull/19879))
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ctypeslib.load_library` can now take any path-like object'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  prefs: []
  type: TYPE_NORMAL
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  prefs: []
  type: TYPE_NORMAL
- en: Add new methods for `quantile` and `percentile`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  prefs: []
  type: TYPE_NORMAL
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  prefs: []
  type: TYPE_NORMAL
- en: Please see the documentation of `numpy.percentile` for more information.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  prefs: []
  type: TYPE_NORMAL
- en: Missing parameters have been added to the `nan<x>` functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'nanmin: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmax: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmin: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmax: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nansum: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanprod: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmean: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanvar: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanstd: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  prefs: []
  type: TYPE_NORMAL
- en: Annotating the main Numpy namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  prefs: []
  type: TYPE_NORMAL
- en: Vectorize umath module using AVX-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS v0.3.18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  prefs: []
  type: TYPE_NORMAL
- en: '`ctypeslib.load_library` can now take any path-like object'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All parameters in the can now take any [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object
    "(in Python v3.11)"). This includes the likes of strings, bytes and objects implementing
    the [`__fspath__`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__
    "(in Python v3.11)") protocol.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-17530](https://github.com/numpy/numpy/pull/17530))
  prefs: []
  type: TYPE_NORMAL
- en: Add `smallest_normal` and `smallest_subnormal` attributes to `finfo`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The attributes `smallest_normal` and `smallest_subnormal` are available as an
    extension of `finfo` class for any floating-point data type. To use these new
    attributes, write `np.finfo(np.float64).smallest_normal` or `np.finfo(np.float64).smallest_subnormal`.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18536](https://github.com/numpy/numpy/pull/18536))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` accepts stacked matrices as inputs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.linalg.qr` is able to produce results for stacked matrices as inputs.
    Moreover, the implementation of QR decomposition has been shifted to C from Python.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19151](https://github.com/numpy/numpy/pull/19151))
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts `os.PathLike` implementations'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`numpy.fromregex` now accepts objects implementing the `__fspath__<os.PathLike>`
    protocol, *e.g.* `pathlib.Path`.'
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19680](https://github.com/numpy/numpy/pull/19680))
  prefs: []
  type: TYPE_NORMAL
- en: Add new methods for `quantile` and `percentile`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`quantile` and `percentile` now have have a `method=` keyword argument supporting
    13 different methods. This replaces the `interpolation=` keyword argument.'
  prefs: []
  type: TYPE_NORMAL
- en: The methods are now aligned with nine methods which can be found in scientific
    literature and the R language. The remaining methods are the previous discontinuous
    variations of the default “linear” one.
  prefs: []
  type: TYPE_NORMAL
- en: Please see the documentation of `numpy.percentile` for more information.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19857](https://github.com/numpy/numpy/pull/19857))
  prefs: []
  type: TYPE_NORMAL
- en: Missing parameters have been added to the `nan<x>` functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of the `nan<x>` functions previously lacked parameters that were present
    in their `<x>`-based counterpart, *e.g.* the `where` parameter was present in
    `numpy.mean` but absent from `numpy.nanmean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameters have now been added to the `nan<x>` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'nanmin: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmax: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmin: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanargmax: `keepdims` & `out`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nansum: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanprod: `initial` & `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanmean: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanvar: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nanstd: `where`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ([gh-20027](https://github.com/numpy/numpy/pull/20027))
  prefs: []
  type: TYPE_NORMAL
- en: Annotating the main Numpy namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting from the 1.20 release, PEP 484 type annotations have been included
    for parts of the NumPy library; annotating the remaining functions being a work
    in progress. With the release of 1.22 this process has been completed for the
    main NumPy namespace, which is now fully annotated.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the main namespace, a limited number of sub-packages contain annotations
    as well. This includes, among others, `numpy.testing`, `numpy.linalg` and `numpy.random`
    (available since 1.21).
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20217](https://github.com/numpy/numpy/pull/20217))
  prefs: []
  type: TYPE_NORMAL
- en: Vectorize umath module using AVX-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By leveraging Intel Short Vector Math Library (SVML), 18 umath functions (`exp2`,
    `log2`, `log10`, `expm1`, `log1p`, `cbrt`, `sin`, `cos`, `tan`, `arcsin`, `arccos`,
    `arctan`, `sinh`, `cosh`, `tanh`, `arcsinh`, `arccosh`, `arctanh`) are vectorized
    using AVX-512 instruction set for both single and double precision implementations.
    This change is currently enabled only for Linux users and on processors with AVX-512
    instruction set. It provides an average speed up of 32x and 14x for single and
    double precision functions respectively.
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-19478](https://github.com/numpy/numpy/pull/19478))
  prefs: []
  type: TYPE_NORMAL
- en: OpenBLAS v0.3.18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the OpenBLAS used in testing and in wheels to v0.3.18
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-20058](https://github.com/numpy/numpy/pull/20058))
  prefs: []
  type: TYPE_NORMAL
