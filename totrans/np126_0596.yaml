- en: numpy.isscalar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.isscalar.html](https://numpy.org/doc/1.26/reference/generated/numpy.isscalar.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if the type of *element* is a scalar type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**element**any'
  prefs: []
  type: TYPE_NORMAL
- en: Input argument, can be of any type and shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**val**bool'
  prefs: []
  type: TYPE_NORMAL
- en: True if *element* is a scalar type, False if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '`ndim`'
  prefs: []
  type: TYPE_NORMAL
- en: Get the number of dimensions of an array
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If you need a stricter way to identify a *numerical* scalar, use `isinstance(x,
    numbers.Number)`, as that returns `False` for most non-numerical elements such
    as strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases `np.ndim(x) == 0` should be used instead of this function, as
    that will also return true for 0d arrays. This is how numpy overloads functions
    in the style of the `dx` arguments to [`gradient`](numpy.gradient.html#numpy.gradient
    "numpy.gradient") and the `bins` argument to [`histogram`](numpy.histogram.html#numpy.histogram
    "numpy.histogram"). Some key differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '| x | `isscalar(x)` | `np.ndim(x) == 0` |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PEP 3141 numeric objects (including builtins) | `True` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| builtin string and buffer objects | `True` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| other builtin objects, like [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path
    "(in Python v3.11)"), *Exception*, the result of [`re.compile`](https://docs.python.org/3/library/re.html#re.compile
    "(in Python v3.11)") | `False` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| third-party objects like [`matplotlib.figure.Figure`](https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure
    "(in Matplotlib v3.8.0)") | `False` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| zero-dimensional numpy arrays | `False` | `True` |'
  prefs: []
  type: TYPE_TB
- en: '| other numpy arrays | `False` | `False` |'
  prefs: []
  type: TYPE_TB
- en: '| *list*, *tuple*, and other sequence objects | `False` | `False` |'
  prefs: []
  type: TYPE_TB
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy supports PEP 3141 numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
