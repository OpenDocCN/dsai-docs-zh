- en: Merge, join, concatenate and compare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/user_guide/merging.html](https://pandas.pydata.org/docs/user_guide/merging.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pandas provides various methods for combining and comparing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat"):
    Merge multiple [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects along a shared index or column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join"): Merge multiple [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects along the columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first"): Update missing values with non-missing values
    in the same location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge"):
    Combine two [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects with SQL-style joining'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`merge_ordered()`](../reference/api/pandas.merge_ordered.html#pandas.merge_ordered
    "pandas.merge_ordered"): Combine two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects along an ordered axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof"): Combine two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects by near instead of exact matching keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Series.compare()`](../reference/api/pandas.Series.compare.html#pandas.Series.compare
    "pandas.Series.compare") and [`DataFrame.compare()`](../reference/api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare"): Show differences in values between two [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    function concatenates an arbitrary amount of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects along an axis while performing optional set logic
    (union or intersection) of the indexes on the other axes. Like `numpy.concatenate`,
    [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    takes a list or dict of homogeneously-typed objects and concatenates them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_basic.png](../Images/197770ddfae446f6c9a3b471d42f8669.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    makes a full copy of the data, and iteratively reusing [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") can create unnecessary copies. Collect all [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") objects in a list before using [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When concatenating [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with named axes, pandas will attempt to preserve these index/column
    names whenever possible. In the case where all inputs share a common name, this
    name will be assigned to the result. When the input names do not all agree, the
    result will be unnamed. The same is true for [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), but the logic is applied separately on a level-by-level
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: Joining logic of the resulting axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `join` keyword specifies how to handle axis values that don’t exist in the
    first [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '`join=''outer''` takes the union of all axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1.png](../Images/e0a246f6ecd997eeab68391ea5b9af68.png)'
  prefs: []
  type: TYPE_IMG
- en: '`join=''inner''` takes the intersection of the axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_inner.png](../Images/4ee4f3cb678d35fab2c005e31ec737be.png)'
  prefs: []
  type: TYPE_IMG
- en: To perform an effective “left” join using the *exact index* from the original
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    result can be reindexed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_join_axes.png](../Images/cb9604d242237ed6938c5e927b2fa4ae.png)
    ### Ignoring indexes on the concatenation axis'
  prefs: []
  type: TYPE_NORMAL
- en: For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects which don’t have a meaningful index, the `ignore_index` ignores overlapping
    indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_ignore_index.png](../Images/2686a54b2c5df0d2d2d8aa37c9022d30.png)
    ### Concatenating [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") together'
  prefs: []
  type: TYPE_NORMAL
- en: You can concatenate a mix of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects. The [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will be transformed to [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the column name as the name of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_mixed_ndim.png](../Images/abb00ea5c6e5767b44562e9a6d9903bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Unnamed [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    will be numbered consecutively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_unnamed_series.png](../Images/63664821a48db8b69bbc1964bb3c5b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ignore_index=True` will drop all name references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_series_ignore_index.png](../Images/79ee3ad5dcb5904fec9497b9e15eb143.png)'
  prefs: []
  type: TYPE_IMG
- en: Resulting `keys`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keys` argument adds another axis level to the resulting index or column
    (creating a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")) associate specific keys with each original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_keys.png](../Images/d6a46e6554d82ae5b512a02bfcf175ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The `keys` argument cane override the column names when creating a new [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") based on existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass a dict to [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") in which case the dict keys will be used for the `keys` argument
    unless other `keys` argument is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict.png](../Images/15dbb4b38b5d1d27ea2558f176a0cbcc.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys.png](../Images/0cfb0a5b40f00a0b835166985e8b07d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") created has levels that are constructed from the passed keys
    and the index of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`levels` argument allows specifying resulting levels associated with the `keys`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys_names.png](../Images/1c96e034f06f6b7a0b5712c611dc9eaa.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '### Appending rows to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that you want to append as a single row to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), you can convert the row into a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and use [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_append_series_as_row.png](../Images/77fde4bb7a02c92ae6eb25ada45b7d30.png)
    ## [`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")'
  prefs: []
  type: TYPE_IMG
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    performs join operations similar to relational databases like SQL. Users who are
    familiar with SQL but new to pandas can reference a [comparison with SQL](../getting_started/comparison/comparison_with_sql.html#compare-with-sql-join).'
  prefs: []
  type: TYPE_NORMAL
- en: Merge types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    implements common SQL style joining operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**one-to-one**: joining two [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects on their indexes which must contain unique values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-one**: joining a unique index to one or more columns in a different
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-many** : joining columns on columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When joining columns on columns, potentially a many-to-many join, any indexes
    on the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects **will be discarded**.
  prefs: []
  type: TYPE_NORMAL
- en: For a **many-to-many** join, if a key combination appears more than once in
    both tables, the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have the **Cartesian product** of the associated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key.png](../Images/d6b1819ca63e08197b1b784609ad8a00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `how` argument to [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") specifies which keys are included in the resulting table. If a
    key combination **does not appear** in either the left or right tables, the values
    in the joined table will be `NA`. Here is a summary of the `how` options and their
    SQL equivalent names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Merge method | SQL Join Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `left` | `LEFT OUTER JOIN` | Use keys from left frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `right` | `RIGHT OUTER JOIN` | Use keys from right frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `outer` | `FULL OUTER JOIN` | Use union of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `inner` | `INNER JOIN` | Use intersection of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `cross` | `CROSS JOIN` | Create the cartesian product of rows of both frames
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_left.png](../Images/253bd4aaabe02d0bcdd272f9731ce2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_right.png](../Images/a3483bb3808d5fb8e615597ae350a683.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_outer.png](../Images/eeddf21647b87d1651568da32a0be109.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_inner.png](../Images/5498faa79b3230a481f502ef680b88bd.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_cross.png](../Images/827cef2fb97ff68b18aa8afafcb58f6b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") if the names of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") correspond to the columns from the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). Transform the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") using [`Series.reset_index()`](../reference/api/pandas.Series.reset_index.html#pandas.Series.reset_index
    "pandas.Series.reset_index") before merging
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Performing an outer join with duplicate join keys in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_dup.png](../Images/ace1e3045f1df8ac6a20d19356459687.png)'
  prefs: []
  type: TYPE_IMG
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Merging on duplicate keys significantly increase the dimensions of the result
    and can cause a memory overflow.
  prefs: []
  type: TYPE_NORMAL
- en: '### Merge key uniqueness'
  prefs: []
  type: TYPE_NORMAL
- en: The `validate` argument checks whether the uniqueness of merge keys. Key uniqueness
    is checked before merge operations and can protect against memory overflows and
    unexpected key duplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If the user is aware of the duplicates in the right [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but wants to ensure there are no duplicates in the left [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), one can use the `validate='one_to_many'` argument instead,
    which will not raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]  ### Merge result indicator'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    accepts the argument `indicator`. If `True`, a Categorical-type column called
    `_merge` will be added to the output object that takes on values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Observation Origin | `_merge` value |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''left''` frame | `left_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''right''` frame | `right_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key in both frames | `both` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: A string argument to `indicator` will use the value as the name for the indicator
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Overlapping value columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The merge `suffixes` argument takes a tuple of list of strings to append to
    overlapping column names in the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to disambiguate the result columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped.png](../Images/8c37a04a49eefe5656851f9861af467d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped_suffix.png](../Images/861ebb2092353e7e4692c58cca1395fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") combines the columns of multiple, potentially differently-indexed
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    into a single result [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join.png](../Images/958e38166937d7b3995bdf9922d4c2cb.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_outer.png](../Images/b9190cb19f0e22525642dc93dba6a5b8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_inner.png](../Images/36c80fb763b9198ec32e85eec57c495e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") takes an optional `on` argument which may be a column
    or multiple column names that the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is to be aligned.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_key_columns.png](../Images/f4a5bcb443bc503a385b8f36db80a2ea.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_key_columns.png](../Images/835ae7c7cab842287fc2e7b5544e6233.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To join on multiple keys, the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") must have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multikeys.png](../Images/3159cfc1f3a8e84e6f77a34c3ac0db12.png)'
  prefs: []
  type: TYPE_IMG
- en: The default for [`DataFrame.join`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") is to perform a left join which uses only the keys found
    in the calling [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). Other join types can be specified with `how`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multikeys_inner.png](../Images/058604df4940b8437cb695ea2b1bfe5e.png)
    ### Joining a single Index to a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: You can join a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on a level. The `name` of the [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with match the level name of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multiindex_inner.png](../Images/3e6cd56d549619ebb7011eb0f63eea27.png)
    ### Joining with two [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")'
  prefs: []
  type: TYPE_IMG
- en: The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") of the input argument must be completely used in the join
    and is a subset of the indices in the left argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_two_multiindex.png](../Images/3086dd016d56c1223fc9b9f2d53e2a04.png)
    ### Merging on a combination of columns and index levels'
  prefs: []
  type: TYPE_NORMAL
- en: Strings passed as the `on`, `left_on`, and `right_on` parameters may refer to
    either column names or index level names. This enables merging [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instances on a combination of index levels and columns without
    resetting indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merge_on_index_and_column.png](../Images/c378e41324f59aa100c6d738821c0e90.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    are joined on a string that matches an index level in both arguments, the index
    level is preserved as an index level in the resulting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") are joined using only some of the levels of a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), the extra levels will be dropped from the resulting join.
    To preserve those levels, use [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") on those level names to move those levels to columns
    prior to the join.  ### Joining multiple [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: A list or tuple of `:class:`DataFrame`` can also be passed to [`join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") to join them together on their indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multi_df.png](../Images/635c66ddbfd5b984d8d9adbfaca4c009.png)
    ### [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") update missing values from one [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the non-missing values in another [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in the corresponding location.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_combine_first.png](../Images/80f33f5d7d088a4b5535f04d8d06b6f7.png)
    ## [`merge_ordered()`](../reference/api/pandas.merge_ordered.html#pandas.merge_ordered
    "pandas.merge_ordered")'
  prefs: []
  type: TYPE_IMG
- en: '[`merge_ordered()`](../reference/api/pandas.merge_ordered.html#pandas.merge_ordered
    "pandas.merge_ordered") combines order data such as numeric or time series data
    with optional filling of missing data with `fill_method`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]  ## [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") is similar to an ordered left-join except that mactches are
    on the nearest key rather than equal keys. For each row in the `left` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the last row in the `right` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") are selected where the `on` key is less than the left’s key.
    Both [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    must be sorted by the key.'
  prefs: []
  type: TYPE_NORMAL
- en: Optionally an [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") can perform a group-wise merge by matching the `by` key in
    addition to the nearest match on the `on` key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") within `2ms` between the quote time and the trade time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") within `10ms` between the quote time and the trade time and
    exclude exact matches on time. Note that though we exclude the exact matches (of
    the quotes), prior quotes **do** propagate to that point in time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]  ## [`compare()`](../reference/api/pandas.Series.compare.html#pandas.Series.compare
    "pandas.Series.compare")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`Series.compare()`](../reference/api/pandas.Series.compare.html#pandas.Series.compare
    "pandas.Series.compare") and [`DataFrame.compare()`](../reference/api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare") methods allow you to compare two [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), respectively, and summarize their differences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: By default, if two corresponding values are equal, they will be shown as `NaN`.
    Furthermore, if all values in an entire row / column, the row / column will be
    omitted from the result. The remaining differences will be aligned on columns.
  prefs: []
  type: TYPE_NORMAL
- en: Stack the differences on rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Keep all original rows and columns with `keep_shape=True`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Keep all the original values even if they are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]  ## [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    function concatenates an arbitrary amount of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") or [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects along an axis while performing optional set logic
    (union or intersection) of the indexes on the other axes. Like `numpy.concatenate`,
    [`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    takes a list or dict of homogeneously-typed objects and concatenates them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_basic.png](../Images/197770ddfae446f6c9a3b471d42f8669.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`concat()`](../reference/api/pandas.concat.html#pandas.concat "pandas.concat")
    makes a full copy of the data, and iteratively reusing [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") can create unnecessary copies. Collect all [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") objects in a list before using [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When concatenating [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with named axes, pandas will attempt to preserve these index/column
    names whenever possible. In the case where all inputs share a common name, this
    name will be assigned to the result. When the input names do not all agree, the
    result will be unnamed. The same is true for [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), but the logic is applied separately on a level-by-level
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: Joining logic of the resulting axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `join` keyword specifies how to handle axis values that don’t exist in the
    first [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '`join=''outer''` takes the union of all axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1.png](../Images/e0a246f6ecd997eeab68391ea5b9af68.png)'
  prefs: []
  type: TYPE_IMG
- en: '`join=''inner''` takes the intersection of the axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_inner.png](../Images/4ee4f3cb678d35fab2c005e31ec737be.png)'
  prefs: []
  type: TYPE_IMG
- en: To perform an effective “left” join using the *exact index* from the original
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    result can be reindexed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_join_axes.png](../Images/cb9604d242237ed6938c5e927b2fa4ae.png)
    ### Ignoring indexes on the concatenation axis'
  prefs: []
  type: TYPE_NORMAL
- en: For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects which don’t have a meaningful index, the `ignore_index` ignores overlapping
    indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_ignore_index.png](../Images/2686a54b2c5df0d2d2d8aa37c9022d30.png)
    ### Concatenating [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") together'
  prefs: []
  type: TYPE_NORMAL
- en: You can concatenate a mix of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects. The [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will be transformed to [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the column name as the name of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_mixed_ndim.png](../Images/abb00ea5c6e5767b44562e9a6d9903bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Unnamed [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    will be numbered consecutively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_unnamed_series.png](../Images/63664821a48db8b69bbc1964bb3c5b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ignore_index=True` will drop all name references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_series_ignore_index.png](../Images/79ee3ad5dcb5904fec9497b9e15eb143.png)'
  prefs: []
  type: TYPE_IMG
- en: Resulting `keys`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keys` argument adds another axis level to the resulting index or column
    (creating a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")) associate specific keys with each original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_keys.png](../Images/d6a46e6554d82ae5b512a02bfcf175ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The `keys` argument cane override the column names when creating a new [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") based on existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass a dict to [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") in which case the dict keys will be used for the `keys` argument
    unless other `keys` argument is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict.png](../Images/15dbb4b38b5d1d27ea2558f176a0cbcc.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys.png](../Images/0cfb0a5b40f00a0b835166985e8b07d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") created has levels that are constructed from the passed keys
    and the index of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '`levels` argument allows specifying resulting levels associated with the `keys`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys_names.png](../Images/1c96e034f06f6b7a0b5712c611dc9eaa.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '### Appending rows to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that you want to append as a single row to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), you can convert the row into a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and use [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_append_series_as_row.png](../Images/77fde4bb7a02c92ae6eb25ada45b7d30.png)'
  prefs: []
  type: TYPE_IMG
- en: Joining logic of the resulting axis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `join` keyword specifies how to handle axis values that don’t exist in the
    first [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '`join=''outer''` takes the union of all axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1.png](../Images/e0a246f6ecd997eeab68391ea5b9af68.png)'
  prefs: []
  type: TYPE_IMG
- en: '`join=''inner''` takes the intersection of the axis values'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_inner.png](../Images/4ee4f3cb678d35fab2c005e31ec737be.png)'
  prefs: []
  type: TYPE_IMG
- en: To perform an effective “left” join using the *exact index* from the original
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame"),
    result can be reindexed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_axis1_join_axes.png](../Images/cb9604d242237ed6938c5e927b2fa4ae.png)
    ### Ignoring indexes on the concatenation axis'
  prefs: []
  type: TYPE_NORMAL
- en: For [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    objects which don’t have a meaningful index, the `ignore_index` ignores overlapping
    indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_ignore_index.png](../Images/2686a54b2c5df0d2d2d8aa37c9022d30.png)
    ### Concatenating [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") together'
  prefs: []
  type: TYPE_NORMAL
- en: You can concatenate a mix of [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") and [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects. The [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") will be transformed to [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the column name as the name of the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_mixed_ndim.png](../Images/abb00ea5c6e5767b44562e9a6d9903bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Unnamed [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    will be numbered consecutively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_unnamed_series.png](../Images/63664821a48db8b69bbc1964bb3c5b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`ignore_index=True` will drop all name references.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_series_ignore_index.png](../Images/79ee3ad5dcb5904fec9497b9e15eb143.png)'
  prefs: []
  type: TYPE_IMG
- en: Resulting `keys`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keys` argument adds another axis level to the resulting index or column
    (creating a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")) associate specific keys with each original [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_keys.png](../Images/d6a46e6554d82ae5b512a02bfcf175ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The `keys` argument cane override the column names when creating a new [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") based on existing [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also pass a dict to [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat") in which case the dict keys will be used for the `keys` argument
    unless other `keys` argument is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict.png](../Images/15dbb4b38b5d1d27ea2558f176a0cbcc.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys.png](../Images/0cfb0a5b40f00a0b835166985e8b07d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") created has levels that are constructed from the passed keys
    and the index of the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`levels` argument allows specifying resulting levels associated with the `keys`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_concat_dict_keys_names.png](../Images/1c96e034f06f6b7a0b5712c611dc9eaa.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '### Appending rows to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    that you want to append as a single row to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), you can convert the row into a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") and use [`concat()`](../reference/api/pandas.concat.html#pandas.concat
    "pandas.concat")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_append_series_as_row.png](../Images/77fde4bb7a02c92ae6eb25ada45b7d30.png)
    ## [`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")'
  prefs: []
  type: TYPE_IMG
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    performs join operations similar to relational databases like SQL. Users who are
    familiar with SQL but new to pandas can reference a [comparison with SQL](../getting_started/comparison/comparison_with_sql.html#compare-with-sql-join).'
  prefs: []
  type: TYPE_NORMAL
- en: Merge types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    implements common SQL style joining operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**one-to-one**: joining two [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects on their indexes which must contain unique values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-one**: joining a unique index to one or more columns in a different
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-many** : joining columns on columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When joining columns on columns, potentially a many-to-many join, any indexes
    on the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects **will be discarded**.
  prefs: []
  type: TYPE_NORMAL
- en: For a **many-to-many** join, if a key combination appears more than once in
    both tables, the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have the **Cartesian product** of the associated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key.png](../Images/d6b1819ca63e08197b1b784609ad8a00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `how` argument to [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") specifies which keys are included in the resulting table. If a
    key combination **does not appear** in either the left or right tables, the values
    in the joined table will be `NA`. Here is a summary of the `how` options and their
    SQL equivalent names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Merge method | SQL Join Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `left` | `LEFT OUTER JOIN` | Use keys from left frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `right` | `RIGHT OUTER JOIN` | Use keys from right frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `outer` | `FULL OUTER JOIN` | Use union of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `inner` | `INNER JOIN` | Use intersection of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `cross` | `CROSS JOIN` | Create the cartesian product of rows of both frames
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_left.png](../Images/253bd4aaabe02d0bcdd272f9731ce2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_right.png](../Images/a3483bb3808d5fb8e615597ae350a683.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_outer.png](../Images/eeddf21647b87d1651568da32a0be109.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_inner.png](../Images/5498faa79b3230a481f502ef680b88bd.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_cross.png](../Images/827cef2fb97ff68b18aa8afafcb58f6b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") if the names of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") correspond to the columns from the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). Transform the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") using [`Series.reset_index()`](../reference/api/pandas.Series.reset_index.html#pandas.Series.reset_index
    "pandas.Series.reset_index") before merging
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Performing an outer join with duplicate join keys in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_dup.png](../Images/ace1e3045f1df8ac6a20d19356459687.png)'
  prefs: []
  type: TYPE_IMG
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Merging on duplicate keys significantly increase the dimensions of the result
    and can cause a memory overflow.
  prefs: []
  type: TYPE_NORMAL
- en: '### Merge key uniqueness'
  prefs: []
  type: TYPE_NORMAL
- en: The `validate` argument checks whether the uniqueness of merge keys. Key uniqueness
    is checked before merge operations and can protect against memory overflows and
    unexpected key duplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: If the user is aware of the duplicates in the right [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but wants to ensure there are no duplicates in the left [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), one can use the `validate='one_to_many'` argument instead,
    which will not raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]  ### Merge result indicator'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    accepts the argument `indicator`. If `True`, a Categorical-type column called
    `_merge` will be added to the output object that takes on values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Observation Origin | `_merge` value |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''left''` frame | `left_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''right''` frame | `right_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key in both frames | `both` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: A string argument to `indicator` will use the value as the name for the indicator
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Overlapping value columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The merge `suffixes` argument takes a tuple of list of strings to append to
    overlapping column names in the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to disambiguate the result columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped.png](../Images/8c37a04a49eefe5656851f9861af467d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped_suffix.png](../Images/861ebb2092353e7e4692c58cca1395fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Merge types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    implements common SQL style joining operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**one-to-one**: joining two [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects on their indexes which must contain unique values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-one**: joining a unique index to one or more columns in a different
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**many-to-many** : joining columns on columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When joining columns on columns, potentially a many-to-many join, any indexes
    on the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") objects **will be discarded**.
  prefs: []
  type: TYPE_NORMAL
- en: For a **many-to-many** join, if a key combination appears more than once in
    both tables, the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") will have the **Cartesian product** of the associated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key.png](../Images/d6b1819ca63e08197b1b784609ad8a00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `how` argument to [`merge()`](../reference/api/pandas.merge.html#pandas.merge
    "pandas.merge") specifies which keys are included in the resulting table. If a
    key combination **does not appear** in either the left or right tables, the values
    in the joined table will be `NA`. Here is a summary of the `how` options and their
    SQL equivalent names:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Merge method | SQL Join Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `left` | `LEFT OUTER JOIN` | Use keys from left frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `right` | `RIGHT OUTER JOIN` | Use keys from right frame only |'
  prefs: []
  type: TYPE_TB
- en: '| `outer` | `FULL OUTER JOIN` | Use union of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `inner` | `INNER JOIN` | Use intersection of keys from both frames |'
  prefs: []
  type: TYPE_TB
- en: '| `cross` | `CROSS JOIN` | Create the cartesian product of rows of both frames
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_left.png](../Images/253bd4aaabe02d0bcdd272f9731ce2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_right.png](../Images/a3483bb3808d5fb8e615597ae350a683.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_outer.png](../Images/eeddf21647b87d1651568da32a0be109.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_inner.png](../Images/5498faa79b3230a481f502ef680b88bd.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_cross.png](../Images/827cef2fb97ff68b18aa8afafcb58f6b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can [`Series`](../reference/api/pandas.Series.html#pandas.Series "pandas.Series")
    and a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") if the names of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") correspond to the columns from the [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). Transform the [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") using [`Series.reset_index()`](../reference/api/pandas.Series.reset_index.html#pandas.Series.reset_index
    "pandas.Series.reset_index") before merging
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Performing an outer join with duplicate join keys in [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_on_key_dup.png](../Images/ace1e3045f1df8ac6a20d19356459687.png)'
  prefs: []
  type: TYPE_IMG
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Merging on duplicate keys significantly increase the dimensions of the result
    and can cause a memory overflow.
  prefs: []
  type: TYPE_NORMAL
- en: '### Merge key uniqueness'
  prefs: []
  type: TYPE_NORMAL
- en: The `validate` argument checks whether the uniqueness of merge keys. Key uniqueness
    is checked before merge operations and can protect against memory overflows and
    unexpected key duplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: If the user is aware of the duplicates in the right [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") but wants to ensure there are no duplicates in the left [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), one can use the `validate='one_to_many'` argument instead,
    which will not raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '### Merge result indicator'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge()`](../reference/api/pandas.merge.html#pandas.merge "pandas.merge")
    accepts the argument `indicator`. If `True`, a Categorical-type column called
    `_merge` will be added to the output object that takes on values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Observation Origin | `_merge` value |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''left''` frame | `left_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key only in `''right''` frame | `right_only` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| Merge key in both frames | `both` |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: A string argument to `indicator` will use the value as the name for the indicator
    column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Overlapping value columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The merge `suffixes` argument takes a tuple of list of strings to append to
    overlapping column names in the input [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") to disambiguate the result columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped.png](../Images/8c37a04a49eefe5656851f9861af467d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_overlapped_suffix.png](../Images/861ebb2092353e7e4692c58cca1395fe.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join")'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") combines the columns of multiple, potentially differently-indexed
    [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    into a single result [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join.png](../Images/958e38166937d7b3995bdf9922d4c2cb.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_outer.png](../Images/b9190cb19f0e22525642dc93dba6a5b8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_inner.png](../Images/36c80fb763b9198ec32e85eec57c495e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") takes an optional `on` argument which may be a column
    or multiple column names that the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") is to be aligned.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_key_columns.png](../Images/f4a5bcb443bc503a385b8f36db80a2ea.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_key_columns.png](../Images/835ae7c7cab842287fc2e7b5544e6233.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To join on multiple keys, the passed [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") must have a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multikeys.png](../Images/3159cfc1f3a8e84e6f77a34c3ac0db12.png)'
  prefs: []
  type: TYPE_IMG
- en: The default for [`DataFrame.join`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") is to perform a left join which uses only the keys found
    in the calling [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"). Other join types can be specified with `how`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multikeys_inner.png](../Images/058604df4940b8437cb695ea2b1bfe5e.png)
    ### Joining a single Index to a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: You can join a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on a level. The `name` of the [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with match the level name of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multiindex_inner.png](../Images/3e6cd56d549619ebb7011eb0f63eea27.png)
    ### Joining with two [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")'
  prefs: []
  type: TYPE_IMG
- en: The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") of the input argument must be completely used in the join
    and is a subset of the indices in the left argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_two_multiindex.png](../Images/3086dd016d56c1223fc9b9f2d53e2a04.png)
    ### Merging on a combination of columns and index levels'
  prefs: []
  type: TYPE_NORMAL
- en: Strings passed as the `on`, `left_on`, and `right_on` parameters may refer to
    either column names or index level names. This enables merging [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instances on a combination of index levels and columns without
    resetting indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merge_on_index_and_column.png](../Images/c378e41324f59aa100c6d738821c0e90.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    are joined on a string that matches an index level in both arguments, the index
    level is preserved as an index level in the resulting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") are joined using only some of the levels of a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), the extra levels will be dropped from the resulting join.
    To preserve those levels, use [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") on those level names to move those levels to columns
    prior to the join.  ### Joining multiple [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: A list or tuple of `:class:`DataFrame`` can also be passed to [`join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") to join them together on their indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multi_df.png](../Images/635c66ddbfd5b984d8d9adbfaca4c009.png)
    ### [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") update missing values from one [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the non-missing values in another [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in the corresponding location.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_combine_first.png](../Images/80f33f5d7d088a4b5535f04d8d06b6f7.png)
    ### Joining a single Index to a MultiIndex'
  prefs: []
  type: TYPE_NORMAL
- en: You can join a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") to a [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") on a level. The `name` of the [`Index`](../reference/api/pandas.Index.html#pandas.Index
    "pandas.Index") with match the level name of the [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multiindex_inner.png](../Images/3e6cd56d549619ebb7011eb0f63eea27.png)
    ### Joining with two [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex")'
  prefs: []
  type: TYPE_IMG
- en: The [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex") of the input argument must be completely used in the join
    and is a subset of the indices in the left argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_merge_two_multiindex.png](../Images/3086dd016d56c1223fc9b9f2d53e2a04.png)
    ### Merging on a combination of columns and index levels'
  prefs: []
  type: TYPE_NORMAL
- en: Strings passed as the `on`, `left_on`, and `right_on` parameters may refer to
    either column names or index level names. This enables merging [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") instances on a combination of index levels and columns without
    resetting indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merge_on_index_and_column.png](../Images/c378e41324f59aa100c6d738821c0e90.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    are joined on a string that matches an index level in both arguments, the index
    level is preserved as an index level in the resulting [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    are joined using only some of the levels of a [`MultiIndex`](../reference/api/pandas.MultiIndex.html#pandas.MultiIndex
    "pandas.MultiIndex"), the extra levels will be dropped from the resulting join.
    To preserve those levels, use [`DataFrame.reset_index()`](../reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index
    "pandas.DataFrame.reset_index") on those level names to move those levels to columns
    prior to the join.
  prefs: []
  type: TYPE_NORMAL
- en: '### Joining multiple [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame")'
  prefs: []
  type: TYPE_NORMAL
- en: A list or tuple of `:class:`DataFrame`` can also be passed to [`join()`](../reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join
    "pandas.DataFrame.join") to join them together on their indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_join_multi_df.png](../Images/635c66ddbfd5b984d8d9adbfaca4c009.png)
    ### [`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first")'
  prefs: []
  type: TYPE_IMG
- en: '[`DataFrame.combine_first()`](../reference/api/pandas.DataFrame.combine_first.html#pandas.DataFrame.combine_first
    "pandas.DataFrame.combine_first") update missing values from one [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") with the non-missing values in another [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") in the corresponding location.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '![../_images/merging_combine_first.png](../Images/80f33f5d7d088a4b5535f04d8d06b6f7.png)
    ## [`merge_ordered()`](../reference/api/pandas.merge_ordered.html#pandas.merge_ordered
    "pandas.merge_ordered")'
  prefs: []
  type: TYPE_IMG
- en: '[`merge_ordered()`](../reference/api/pandas.merge_ordered.html#pandas.merge_ordered
    "pandas.merge_ordered") combines order data such as numeric or time series data
    with optional filling of missing data with `fill_method`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '## [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") is similar to an ordered left-join except that mactches are
    on the nearest key rather than equal keys. For each row in the `left` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame"), the last row in the `right` [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") are selected where the `on` key is less than the left’s key.
    Both [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame "pandas.DataFrame")
    must be sorted by the key.'
  prefs: []
  type: TYPE_NORMAL
- en: Optionally an [`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") can perform a group-wise merge by matching the `by` key in
    addition to the nearest match on the `on` key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") within `2ms` between the quote time and the trade time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[`merge_asof()`](../reference/api/pandas.merge_asof.html#pandas.merge_asof
    "pandas.merge_asof") within `10ms` between the quote time and the trade time and
    exclude exact matches on time. Note that though we exclude the exact matches (of
    the quotes), prior quotes **do** propagate to that point in time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '## [`compare()`](../reference/api/pandas.Series.compare.html#pandas.Series.compare
    "pandas.Series.compare")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`Series.compare()`](../reference/api/pandas.Series.compare.html#pandas.Series.compare
    "pandas.Series.compare") and [`DataFrame.compare()`](../reference/api/pandas.DataFrame.compare.html#pandas.DataFrame.compare
    "pandas.DataFrame.compare") methods allow you to compare two [`DataFrame`](../reference/api/pandas.DataFrame.html#pandas.DataFrame
    "pandas.DataFrame") or [`Series`](../reference/api/pandas.Series.html#pandas.Series
    "pandas.Series"), respectively, and summarize their differences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: By default, if two corresponding values are equal, they will be shown as `NaN`.
    Furthermore, if all values in an entire row / column, the row / column will be
    omitted from the result. The remaining differences will be aligned on columns.
  prefs: []
  type: TYPE_NORMAL
- en: Stack the differences on rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Keep all original rows and columns with `keep_shape=True`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Keep all the original values even if they are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
