- en: Reviewer guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/dev/reviewer_guidelines.html](https://numpy.org/doc/1.26/dev/reviewer_guidelines.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reviewing open pull requests (PRs) helps move the project forward. We encourage
    people outside the project to get involved as well; it’s a great way to get familiar
    with the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Who can be a reviewer?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  prefs: []
  type: TYPE_NORMAL
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Communication Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewer Checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are unusual *dtypes* tested if a function supports those?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should variable names be improved for clarity or consistency?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For maintainers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  prefs: []
  type: TYPE_NORMAL
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  prefs: []
  type: TYPE_NORMAL
- en: '## Standard replies for reviewing'
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage question**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**You’re welcome to update the docs**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Self-contained example for bug**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Software versions**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: python -c 'import numpy; print(numpy.version.version)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Code blocks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Linking to code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Better description and title**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Regression test needed**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Don’t change unrelated**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Who can be a reviewer?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reviews can come from outside the NumPy team – we welcome contributions from
    domain experts (for instance, *linalg* or *fft*) or maintainers of other projects.
    You do not need to be a NumPy maintainer (a NumPy team member with permission
    to merge a PR) to review.
  prefs: []
  type: TYPE_NORMAL
- en: If we do not know you yet, consider introducing yourself in [the mailing list
    or Slack](https://numpy.org/community/) before you start reviewing pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: Communication Guidelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every PR, good or bad, is an act of generosity. Opening with a positive comment
    will help the author feel rewarded, and your subsequent remarks may be heard more
    clearly. You may feel good also.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Begin if possible with the large issues, so the author knows they’ve been understood.
    Resist the temptation to immediately go line by line, or to open with small pervasive
    issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are the face of the project, and NumPy some time ago decided [the kind
    of project it will be](https://numpy.org/code-of-conduct/): open, empathetic,
    welcoming, friendly and patient. Be [kind](https://youtu.be/tzFWz5fiVKU?t=49m30s)
    to contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not let perfect be the enemy of the good, particularly for documentation.
    If you find yourself making many small suggestions, or being too nitpicky on style
    or grammar, consider merging the current PR when all important concerns are addressed.
    Then, either push a commit directly (if you are a maintainer) or open a follow-up
    PR yourself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need help writing replies in reviews, check out some [standard replies
    for reviewing](#saved-replies).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewer Checklist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Is the intended behavior clear under all conditions? Some things to watch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens with unexpected inputs like empty arrays or nan/inf values?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are axis or shape arguments tested to be *int* or *tuples*?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are unusual *dtypes* tested if a function supports those?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should variable names be improved for clarity or consistency?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should comments be added, or rather removed as unhelpful or extraneous?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the documentation follow the [NumPy guidelines](howto-docs.html#howto-document)?
    Are the docstrings properly formatted?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the code follow NumPy’s [Stylistic Guidelines](index.html#stylistic-guidelines)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a maintainer, and it is not obvious from the PR description, add
    a short explanation of what a branch did to the merge message and, if closing
    an issue, also add “Closes gh-123” where 123 is the issue number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For code changes, at least one maintainer (i.e. someone with commit rights)
    should review and approve a pull request. If you are the first to review a PR
    and approve of the changes use the GitHub [approve review](https://help.github.com/articles/reviewing-changes-in-pull-requests/)
    tool to mark it as such. If a PR is straightforward, for example it’s a clearly
    correct bug fix, it can be merged straight away. If it’s more complex or changes
    public API, please leave it open for at least a couple of days so other maintainers
    get a chance to review.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a subsequent reviewer on an already approved PR, please use the same
    review method as for a new PR (focus on the larger issues, resist the temptation
    to add only a few nitpicks). If you have commit rights and think no more review
    is needed, merge the PR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For maintainers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  prefs: []
  type: TYPE_NORMAL
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  prefs: []
  type: TYPE_NORMAL
- en: For maintainers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure all automated CI tests pass before merging a PR, and that the [documentation
    builds](index.html#building-docs) without any errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of merge conflicts, ask the PR submitter to [rebase on main](development_workflow.html#rebasing-on-main).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PRs that add new features or are in some way complex, wait at least a day
    or two before merging it. That way, others get a chance to comment before the
    code goes in. Consider adding it to the release notes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When merging contributions, a committer is responsible for ensuring that those
    meet the requirements outlined in the [Development process guidelines](index.html#guidelines)
    for NumPy. Also, check that new features and backwards compatibility breaks were
    discussed on the [numpy-discussion mailing list](https://mail.python.org/mailman/listinfo/numpy-discussion).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squashing commits or cleaning up commit messages of a PR that you consider too
    messy is OK. Remember to retain the original author’s name when doing this. Make
    sure commit messages follow the [rules for NumPy](development_workflow.html#writing-the-commit-message).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to reject a PR: if it’s very obvious, you can just close it and
    explain why. If it’s not, then it’s a good idea to first explain why you think
    the PR is not suitable for inclusion in NumPy and then let a second committer
    comment or close.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PR submitter doesn’t respond to your comments for 6 months, move the
    PR in question to the inactive category with the “inactive” tag attached. At this
    point, the PR can be closed by a maintainer. If there is any interest in finalizing
    the PR under consideration, this can be indicated at any time, without waiting
    6 months, by a comment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintainers are encouraged to finalize PRs when only small changes are necessary
    before merging (e.g., fixing code style or grammatical errors). If a PR becomes
    inactive, maintainers may make larger changes. Remember, a PR is a collaboration
    between a contributor and a reviewer/s, sometimes a direct push is the best way
    to finish it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned most public API changes should be discussed ahead of time and often
    with a wider audience (on the mailing list, or even through a NEP).
  prefs: []
  type: TYPE_NORMAL
- en: For changes in the public C-API be aware that the NumPy C-API is backwards compatible
    so that any addition must be ABI compatible with previous versions. When it is
    not the case, you must add a guard.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example `PyUnicodeScalarObject` struct contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the `buffer_fmt` field was added to its end in NumPy 1.20 (all previous
    fields remained ABI compatible). Similarly, any function added to the API table
    in `numpy/core/code_generators/numpy_api.py` must use the `MinVersion` annotation.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Header only functionality (such as a new macro) typically does not need to be
    guarded.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When reviewing pull requests, please use workflow tracking features on GitHub
    as appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished reviewing, if you want to ask for the submitter to make
    changes, change your review status to “Changes requested.” This can be done on
    GitHub, PR page, Files changed tab, Review changes (button on the top right).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re happy about the current status, mark the pull request as Approved
    (same way as Changes requested). Alternatively (for maintainers): merge the pull
    request, if you think it is ready to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be helpful to have a copy of the pull request code checked out on your
    own machine so that you can play with it locally. You can use the [GitHub CLI](https://docs.github.com/en/github/getting-started-with-github/github-cli)
    to do this by clicking the `Open with` button in the upper right-hand corner of
    the PR page.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you have your [development environment](development_environment.html#development-environment)
    set up, you can now build the code and test it.
  prefs: []
  type: TYPE_NORMAL
- en: '## Standard replies for reviewing'
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be helpful to store some of these in GitHub’s [saved replies](https://github.com/settings/replies/)
    for reviewing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage question**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**You’re welcome to update the docs**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Self-contained example for bug**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Software versions**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: python -c 'import numpy; print(numpy.version.version)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Code blocks**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Linking to code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Better description and title**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Regression test needed**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Don’t change unrelated**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
