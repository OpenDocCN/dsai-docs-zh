- en: scipy.signal.deconvolve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.deconvolve.html#scipy.signal.deconvolve](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.deconvolve.html#scipy.signal.deconvolve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Deconvolves `divisor` out of `signal` using inverse filtering.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the quotient and remainder such that `signal = convolve(divisor, quotient)
    + remainder`
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**signal**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Signal data, typically a recorded signal
  prefs: []
  type: TYPE_NORMAL
- en: '**divisor**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Divisor data, typically an impulse response or filter that was applied to the
    original signal
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quotient**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Quotient, typically the recovered original signal
  prefs: []
  type: TYPE_NORMAL
- en: '**remainder**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Remainder
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`numpy.polydiv`](https://numpy.org/devdocs/reference/generated/numpy.polydiv.html#numpy.polydiv
    "(in NumPy v2.0.dev0)")'
  prefs: []
  type: TYPE_NORMAL
- en: performs polynomial division (same operation, but also accepts poly1d objects)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Deconvolve a signal that’s been filtered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
