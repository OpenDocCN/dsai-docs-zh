- en: Testing Guidelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试准则
- en: 原文：[https://numpy.org/doc/1.26/reference/testing.html](https://numpy.org/doc/1.26/reference/testing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/testing.html](https://numpy.org/doc/1.26/reference/testing.html)
- en: '## Introduction'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## 介绍'
- en: Until the 1.15 release, NumPy used the [nose](https://nose.readthedocs.io/en/latest/)
    testing framework, it now uses the [pytest](https://pytest.readthedocs.io) framework.
    The older framework is still maintained in order to support downstream projects
    that use the old numpy framework, but all tests for NumPy should use pytest.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 直到1.15版本，NumPy使用了[nose](https://nose.readthedocs.io/en/latest/)测试框架，现在使用[pytest](https://pytest.readthedocs.io)框架。老的框架仍在维护，以支持使用旧numpy框架的下游项目，但所有NumPy的测试应该使用pytest。
- en: Our goal is that every module and package in NumPy should have a thorough set
    of unit tests. These tests should exercise the full functionality of a given routine
    as well as its robustness to erroneous or unexpected input arguments. Well-designed
    tests with good coverage make an enormous difference to the ease of refactoring.
    Whenever a new bug is found in a routine, you should write a new test for that
    specific case and add it to the test suite to prevent that bug from creeping back
    in unnoticed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是NumPy中的每个模块和包都应该有一套全面的单元测试。这些测试应该对给定例程的全部功能进行测试，以及对错误或意外输入参数的鲁棒性。设计良好且覆盖率良好的测试对于重构的易用性有着巨大的影响。每当发现例程中的新bug时，您应该为该特定情况编写一个新的测试，并将其添加到测试套件中，以防止该bug不经意地再次回归。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy uses the testing framework from [`numpy.testing`](routines.testing.html#module-numpy.testing
    "numpy.testing"), so all of the NumPy examples shown below are also applicable
    to SciPy
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy使用[`numpy.testing`](routines.testing.html#module-numpy.testing "numpy.testing")中的测试框架，因此下面显示的所有NumPy示例也适用于SciPy
- en: Testing NumPy
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试NumPy
- en: NumPy can be tested in a number of ways, choose any way you feel comfortable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy可以以多种方式进行测试，选择您感到舒适的任何方式。
- en: Running tests from inside Python
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Python内部运行测试
- en: 'You can test an installed NumPy by [`numpy.test`](#numpy.test "numpy.test"),
    for example, To run NumPy’s full test suite, use the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[`numpy.test`](#numpy.test "numpy.test")测试已安装的NumPy，例如，要运行NumPy的全面测试套件，请使用以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The test method may take two or more arguments; the first `label` is a string
    specifying what should be tested and the second `verbose` is an integer giving
    the level of output verbosity. See the docstring [`numpy.test`](#numpy.test "numpy.test")
    for details. The default value for `label` is ‘fast’ - which will run the standard
    tests. The string ‘full’ will run the full battery of tests, including those identified
    as being slow to run. If `verbose` is 1 or less, the tests will just show information
    messages about the tests that are run; but if it is greater than 1, then the tests
    will also provide warnings on missing tests. So if you want to run every test
    and get messages about which modules don’t have tests:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法可能需要两个或更多参数；第一个`label`是一个指定应该被测试的内容的字符串，第二个`verbose`是一个给出输出详细程度的整数。参见docstring
    [`numpy.test`](#numpy.test "numpy.test")获取详情。`label`的默认值为'fast' - 运行标准测试。字符串'full'将运行全部测试，包括那些被识别为运行缓慢的测试。如果`verbose`为1或更小，则测试将只显示有关运行的测试的信息消息；但如果大于1，则测试还将提供有关缺少测试的警告。因此，如果要运行每个测试并获取有关哪些模块没有测试的消息：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, if you are only interested in testing a subset of NumPy, for example,
    the `core` module, use the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您只对测试NumPy的一个子集感兴趣，例如`core`模块，请使用以下命令：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running tests from the command line
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: 'If you want to build NumPy in order to work on NumPy itself, use the `spin`
    utility. To run NumPy’s full test suite:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要构建NumPy以便对NumPy本身进行工作，请使用`spin`工具。要运行NumPy的全面测试套件：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Testing a subset of NumPy:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试NumPy的一个子集：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试的详细信息，请参阅[测试构建](../dev/development_environment.html#testing-builds)
- en: Other methods of running tests
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他运行测试的方法
- en: Run tests using your favourite IDE such as [vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)
    or [pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜爱的IDE（例如[vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)或[pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)）运行测试
- en: Writing your own tests
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撰写您自己的测试
- en: If you are writing a package that you’d like to become part of NumPy, please
    write the tests as you develop the package. Every Python module, extension module,
    or subpackage in the NumPy package directory should have a corresponding `test_<name>.py`
    file. Pytest examines these files for test methods (named `test*`) and test classes
    (named `Test*`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个希望成为NumPy一部分的包，请在开发包的同时编写测试。NumPy包目录中的每个Python模块、扩展模块或子包都应有一个相应的`test_<name>.py`文件。Pytest会检查这些文件以寻找测试方法（命名为`test*`）和测试类（命名为`Test*`）。
- en: 'Suppose you have a NumPy module `numpy/xxx/yyy.py` containing a function `zzz()`.
    To test this function you would create a test module called `test_yyy.py`. If
    you only need to test one aspect of `zzz`, you can simply add a test function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个NumPy模块`numpy/xxx/yyy.py`，其中包含一个函数`zzz()`。为了测试这个函数，你会创建一个名为`test_yyy.py`的测试模块。如果你只需要测试`zzz`的一个方面，你可以简单地添加一个测试函数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'More often, we need to group a number of tests together, so we create a test
    class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是，我们需要将多个测试组合在一起，因此我们创建一个测试类：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Within these test methods, `assert` and related functions are used to test whether
    a certain assumption is valid. If the assertion fails, the test fails. `pytest`
    internally rewrites the `assert` statement to give informative output when it
    fails, so should be preferred over the legacy variant `numpy.testing.assert_`.
    Whereas plain `assert` statements are ignored when running Python in optimized
    mode with `-O`, this is not an issue when running tests with pytest.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些测试方法中，使用`assert`和相关函数来测试某个假设是否成立。如果断言失败，测试也失败。`pytest`在内部重写`assert`语句，以在失败时提供信息性的输出，因此应优先使用它而不是旧版的`numpy.testing.assert_`。而在使用`-O`标志以优化模式运行Python时，普通的`assert`语句会被忽略，但在使用pytest运行测试时，这并不是一个问题。
- en: Similarly, the pytest functions [`pytest.raises`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.raises
    "(in pytest v0.1.dev156+g45f34df)") and [`pytest.warns`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.warns
    "(in pytest v0.1.dev156+g45f34df)") should be preferred over their legacy counterparts
    [`numpy.testing.assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises") and [`numpy.testing.assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns"), since the pytest variants are more broadly used
    and allow more explicit targeting of warnings and errors when used with the `match`
    regex.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，应优先使用pytest函数[`pytest.raises`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.raises
    "(在pytest v0.1.dev156+g45f34df中)")和[`pytest.warns`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.warns
    "(在pytest v0.1.dev156+g45f34df中)")而不是它们的旧版对应物[`numpy.testing.assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")和[`numpy.testing.assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")，因为pytest的变体更广泛使用，并在与`match`正则表达式一起使用时允许更明确地定位警告和错误。
- en: Note that `test_` functions or methods should not have a docstring, because
    that makes it hard to identify the test from the output of running the test suite
    with `verbose=2` (or similar verbosity setting). Use plain comments (`#`) if necessary.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`test_`函数或方法不应该有文档字符串，因为这会使得在使用`verbose=2`（或类似的详细设置）运行测试套件时难以识别测试。必要时使用普通的注释(`#`)。
- en: Also since much of NumPy is legacy code that was originally written without
    unit tests, there are still several modules that don’t have tests yet. Please
    feel free to choose one of these modules and develop tests for it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，由于很多NumPy代码是没有单元测试的传统代码，仍然有几个模块尚未进行测试。请随意选择其中一个模块并为其开发测试。
- en: Using C code in tests
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试中使用C代码
- en: NumPy exposes a rich [C-API](c-api/index.html#c-api) . These are tested using
    c-extension modules written “as-if” they know nothing about the internals of NumPy,
    rather using the official C-API interfaces only. Examples of such modules are
    tests for a user-defined `rational` dtype in `_rational_tests` or the ufunc machinery
    tests in `_umath_tests` which are part of the binary distribution. Starting from
    version 1.21, you can also write snippets of C code in tests that will be compiled
    locally into c-extension modules and loaded into python.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy暴露了丰富的[C-API](c-api/index.html#c-api)。这些是使用c扩展模块编写的，其“仿佛”不知道NumPy内部结构，而只使用官方C-API接口进行测试。这样的模块示例包括用户定义的`rational`
    dtype 的测试在`_rational_tests`中，或二进制发行版中的ufunc机制测试在`_umath_tests`中。从1.21版本开始，你还可以在测试中编写一些C代码，这些代码将在本地编译为c扩展模块并加载到Python中。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build and imports a c-extension module *modname* from a list of function fragments
    *functions*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数片段*functions*列表中构建和导入c扩展模块*modname*。
- en: 'Parameters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**functions**list of fragments'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**片段列表'
- en: Each fragment is a sequence of func_name, calling convention, snippet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个片段都是一个func_name、调用约定、片段的序列。
- en: '**prologue**string'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**序言**字符串'
- en: Code to precede the rest, usually extra `#include` or `#define` macros.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在其余部分之前的代码，通常是额外的`#include`或`#define`宏。
- en: '**build_dir**pathlib.Path'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_dir**pathlib.Path'
- en: Where to build the module, usually a temporary directory
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里构建模块，通常是一个临时目录
- en: '**include_dirs**list'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**列表'
- en: Extra directories to find include files when compiling
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时额外的目录查找包括文件
- en: '**more_init**string'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**more_init**字符串'
- en: Code to appear in the module PyMODINIT_FUNC
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在模块PyMODINIT_FUNC中的代码
- en: 'Returns:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'out: module'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：模块
- en: The module will have been loaded and is ready for use
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 模块已被加载并准备好使用
- en: Examples
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Labeling tests
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记测试
- en: 'Unlabeled tests like the ones above are run in the default `numpy.test()` run.
    If you want to label your test as slow - and therefore reserved for a full `numpy.test(label=''full'')`
    run, you can label it with `pytest.mark.slow`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面的未加标签的测试一样，会在默认的`numpy.test()`运行中运行。如果您想将测试标记为慢 - 因此保留给完整的`numpy.test(label='full')`运行，您可以使用`pytest.mark.slow`进行标记：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly for methods:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样对于方法：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Easier setup and teardown functions / methods
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更容易的设置和拆卸函数/方法
- en: 'Testing looks for module-level or class method-level setup and teardown functions
    by name; thus:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Testing会按名称查找模块级或类方法级设置和拆卸功能；因此：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setup and teardown functions to functions and methods are known as “fixtures”,
    and they should be used sparingly. `pytest` supports more general fixture at various
    scopes which may be used automatically via special arguments. For example, the
    special argument name `tmpdir` is used in test to create a temporary directory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和拆卸功能和方法被称为“fixtures”，应该谨慎使用。`pytest`支持各种作用域的更一般的fixture，可以通过特殊参数自动使用。例如，在测试中使用特殊参数名`tmpdir`来创建临时目录。
- en: Parametric tests
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化测试
- en: One very nice feature of testing is allowing easy testing across a range of
    parameters - a nasty problem for standard unit tests. Use the `pytest.mark.parametrize`
    decorator.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的一个非常好的特性是允许跨一系列参数轻松进行测试 - 这对于标准单元测试来说是一个棘手的问题。使用`pytest.mark.parametrize`装饰器。
- en: Doctests
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Doctests
- en: Doctests are a convenient way of documenting the behavior of a function and
    allowing that behavior to be tested at the same time. The output of an interactive
    Python session can be included in the docstring of a function, and the test framework
    can run the example and compare the actual output to the expected output.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Doctests是一种方便的方式来记录函数的行为并允许同时测试该行为。交互式Python会话的输出可以包含在函数的文档字符串中，测试框架可以运行示例并将实际输出与预期输出进行比较。
- en: 'The doctests can be run by adding the `doctests` argument to the `test()` call;
    for example, to run all tests (including doctests) for numpy.lib:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`test()`调用中添加`doctests`参数来运行Doctests；例如，要运行numpy.lib的所有测试（包括Doctests）：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The doctests are run as if they are in a fresh Python instance which has executed
    `import numpy as np`. Tests that are part of a NumPy subpackage will have that
    subpackage already imported. E.g. for a test in `numpy/linalg/tests/`, the namespace
    will be created such that `from numpy import linalg` has already executed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 和这些测试一样，Doctests会被视为在已经执行了`import numpy as np`的新Python实例中运行。属于NumPy子包的测试将已经导入该子包。例如，对于`numpy/linalg/tests/`中的测试，将创建命名空间，以便`from
    numpy import linalg`已经执行。
- en: '`tests/`'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tests/`'
- en: Rather than keeping the code and the tests in the same directory, we put all
    the tests for a given subpackage in a `tests/` subdirectory. For our example,
    if it doesn’t already exist you will need to create a `tests/` directory in `numpy/xxx/`.
    So the path for `test_yyy.py` is `numpy/xxx/tests/test_yyy.py`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 相比将代码和测试放在同一个目录中，我们将给定子包的所有测试放在一个`tests/`子目录中。例如，对于我们的示例，如果`numpy/xxx/`中尚不存在该目录，则需要创建一个`tests/`目录。因此，`test_yyy.py`的路径是`numpy/xxx/tests/test_yyy.py`。
- en: 'Once the `numpy/xxx/tests/test_yyy.py` is written, its possible to run the
    tests by going to the `tests/` directory and typing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写了`numpy/xxx/tests/test_yyy.py`，可以通过转到`tests/`目录并键入以下内容来运行测试：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or if you add `numpy/xxx/tests/` to the Python path, you could run the tests
    interactively in the interpreter like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您将`numpy/xxx/tests/`添加到Python路径中，也可以在解释器中交互式地运行测试，就像这样：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`__init__.py` and `setup.py`'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__.py`和`setup.py`'
- en: 'Usually, however, adding the `tests/` directory to the python path isn’t desirable.
    Instead it would better to invoke the test straight from the module `xxx`. To
    this end, simply place the following lines at the end of your package’s `__init__.py`
    file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将`tests/`目录添加到Python路径中并不理想。相反，最好直接从模块`xxx`中调用测试。为此，只需将以下行放置在包的`__init__.py`文件的末尾：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will also need to add the tests directory in the configuration section
    of your setup.py:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在setup.py的配置部分中添加测试目录：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you can do the following to test your module:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以执行以下操作来测试您的模块：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, when invoking the entire NumPy test suite, your tests will be found and
    run:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在调用整个NumPy测试套件时，将找到并运行您的测试：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tips & Tricks
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技巧与窍门
- en: Creating many similar tests
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建许多类似的测试
- en: 'If you have a collection of tests that must be run multiple times with minor
    variations, it can be helpful to create a base class containing all the common
    tests, and then create a subclass for each variation. Several examples of this
    technique exist in NumPy; below are excerpts from one in [numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一组必须以轻微变化运行多次的测试，那么创建一个包含所有公共测试的基类，然后为每个变化创建一个子类可能会有所帮助。NumPy中存在几个此技术的示例；以下是来自[numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py)的摘录：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this case, we wanted to test solving a linear algebra problem using matrices
    of several data types, using `linalg.solve` and `linalg.inv`. The common test
    cases (for single-precision, double-precision, etc. matrices) are collected in
    `LinalgTestCase`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想要测试使用几种数据类型的矩阵来解决线性代数问题，使用`linalg.solve`和`linalg.inv`。常见的测试用例（用于单精度、双精度等矩阵）收集在`LinalgTestCase`中。
- en: Known failures & skipping tests
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已知失败与跳过测试
- en: Sometimes you might want to skip a test or mark it as a known failure, such
    as when the test suite is being written before the code it’s meant to test, or
    if a test only fails on a particular architecture.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能希望跳过测试或将其标记为已知失败，例如当测试套件在编写它的代码之前，或者如果测试仅在特定架构上失败时。
- en: 'To skip a test, simply use `skipif`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过一个测试，只需使用`skipif`：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The test is marked as skipped if `SkipMyTest` evaluates to nonzero, and the
    message in verbose test output is the second argument given to `skipif`. Similarly,
    a test can be marked as a known failure by using `xfail`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SkipMyTest`评估为非零，则将测试标记为跳过，并且详细测试输出中的消息是给定给`skipif`的第二个参数。类似地，可以使用`xfail`将测试标记为已知失败：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Of course, a test can be unconditionally skipped or marked as a known failure
    by using `skip` or `xfail` without argument, respectively.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以使用`skip`或`xfail`无条件地跳过测试或将其标记为已知失败，而不带参数。
- en: A total of the number of skipped and known failing tests is displayed at the
    end of the test run. Skipped tests are marked as `'S'` in the test results (or
    `'SKIPPED'` for `verbose > 1`), and known failing tests are marked as `'x'` (or
    `'XFAIL'` if `verbose > 1`).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行结束时会显示跳过和已知失败测试的总数。跳过的测试在测试结果中标记为`'S'`（对于`verbose > 1`，标记为`'SKIPPED'`），已知失败的测试标记为`'x'`（或对于`verbose
    > 1`，标记为`'XFAIL'`）。
- en: Tests on random data
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机数据的测试
- en: Tests on random data are good, but since test failures are meant to expose new
    bugs or regressions, a test that passes most of the time but fails occasionally
    with no code changes is not helpful. Make the random data deterministic by setting
    the random number seed before generating it. Use either Python’s `random.seed(some_number)`
    or NumPy’s `numpy.random.seed(some_number)`, depending on the source of random
    numbers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数据的测试很好，但由于测试失败旨在暴露新的错误或回归，因此一个大部分时间都通过但偶尔在没有代码更改的情况下失败的测试是没有帮助的。通过在生成随机数据之前设置随机数种子来使随机数据具有确定性。使用Python的`random.seed(some_number)`或NumPy的`numpy.random.seed(some_number)`，取决于随机数的来源。
- en: Alternatively, you can use [Hypothesis](https://hypothesis.readthedocs.io/en/latest/)
    to generate arbitrary data. Hypothesis manages both Python’s and Numpy’s random
    seeds for you, and provides a very concise and powerful way to describe data (including
    `hypothesis.extra.numpy`, e.g. for a set of mutually-broadcastable shapes).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用[Hypothesis](https://hypothesis.readthedocs.io/en/latest/)生成任意数据。Hypothesis为您管理Python和NumPy的随机种子，并提供一种非常简洁和强大的描述数据的方式（包括`hypothesis.extra.numpy`，例如一组互相广播的形状）。
- en: The advantages over random generation include tools to replay and share failures
    without requiring a fixed seed, reporting *minimal* examples for each failure,
    and better-than-naive-random techniques for triggering bugs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与随机生成相比的优势包括工具，可以在不需要固定种子的情况下重新播放和共享失败，为每次失败报告*最小*示例，并且触发错误的技术优于朴素的随机技术。
- en: Documentation for `numpy.test`
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于`numpy.test`的文档
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Pytest test runner.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest测试运行器。
- en: 'A test function is typically added to a package’s __init__.py like so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将测试函数添加到软件包的__init__.py中，如下所示：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Calling this test function finds and runs all tests associated with the module
    and all its sub-modules.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此测试函数会查找并运行与模块及其所有子模块相关的所有测试。
- en: 'Parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**module_name**module name'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**module name'
- en: The name of the module to test.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的模块的名称。
- en: Notes
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: Unlike the previous `nose`-based implementation, this class is not publicly
    exposed as it performs some `numpy`-specific warning suppression.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与先前基于`nose`的实现不同，该类不是公开的，因为它执行了一些`numpy`特定的警告抑制。
- en: 'Attributes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**module_name**str'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**str'
- en: Full path to the package to test.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的软件包的完整路径。
- en: Introduction
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: Until the 1.15 release, NumPy used the [nose](https://nose.readthedocs.io/en/latest/)
    testing framework, it now uses the [pytest](https://pytest.readthedocs.io) framework.
    The older framework is still maintained in order to support downstream projects
    that use the old numpy framework, but all tests for NumPy should use pytest.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.15版本之前，NumPy使用了 [nose](https://nose.readthedocs.io/en/latest/) 测试框架，现在使用
    [pytest](https://pytest.readthedocs.io) 框架。旧框架仍然得到维护，以支持使用旧numpy框架的下游项目，但所有NumPy的测试都应该使用pytest。
- en: Our goal is that every module and package in NumPy should have a thorough set
    of unit tests. These tests should exercise the full functionality of a given routine
    as well as its robustness to erroneous or unexpected input arguments. Well-designed
    tests with good coverage make an enormous difference to the ease of refactoring.
    Whenever a new bug is found in a routine, you should write a new test for that
    specific case and add it to the test suite to prevent that bug from creeping back
    in unnoticed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是，NumPy中的每个模块和包都应该有一套完善的单元测试。这些测试应该在给定例程的全功能性以及对错误或意外输入参数的鲁棒性方面进行测试。设计良好且覆盖率良好的测试对于重构的便利性有着巨大影响。每当在例程中发现新错误时，您应该为该特定情况编写一个新的测试，并将其添加到测试套件中，以防止该错误不经意地潜回。
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: SciPy uses the testing framework from [`numpy.testing`](routines.testing.html#module-numpy.testing
    "numpy.testing"), so all of the NumPy examples shown below are also applicable
    to SciPy
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy使用来自[`numpy.testing`](routines.testing.html#module-numpy.testing "numpy.testing")的测试框架，因此下面显示的所有NumPy示例也适用于SciPy。
- en: Testing NumPy
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试NumPy
- en: NumPy can be tested in a number of ways, choose any way you feel comfortable.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy可以以多种方式进行测试，选择您感到舒适的任何方式。
- en: Running tests from inside Python
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Python内部运行测试
- en: 'You can test an installed NumPy by [`numpy.test`](#numpy.test "numpy.test"),
    for example, To run NumPy’s full test suite, use the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[`numpy.test`](#numpy.test "numpy.test")来测试已安装的NumPy，例如，要运行NumPy的完整测试套件，请使用以下方法：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The test method may take two or more arguments; the first `label` is a string
    specifying what should be tested and the second `verbose` is an integer giving
    the level of output verbosity. See the docstring [`numpy.test`](#numpy.test "numpy.test")
    for details. The default value for `label` is ‘fast’ - which will run the standard
    tests. The string ‘full’ will run the full battery of tests, including those identified
    as being slow to run. If `verbose` is 1 or less, the tests will just show information
    messages about the tests that are run; but if it is greater than 1, then the tests
    will also provide warnings on missing tests. So if you want to run every test
    and get messages about which modules don’t have tests:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法可能需要两个或多个参数；第一个`label`是一个指定应该进行测试的字符串，第二个`verbose`是一个整数，表示输出冗余级别。有关详细信息，请参见docstring
    [`numpy.test`](#numpy.test "numpy.test")。`label`的默认值为‘fast’ - 这将运行标准测试。字符串‘full’将运行完整的测试套件，包括被标识为运行缓慢的测试。如果`verbose`为1或更少，测试将只显示有关运行的测试的信息消息；但如果大于1，则测试还将提供有关缺少测试的警告。因此，如果您想运行每个测试并获取有关哪些模块没有测试的消息：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, if you are only interested in testing a subset of NumPy, for example,
    the `core` module, use the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您只对测试NumPy的子集感兴趣，例如`core`模块，请使用以下方法：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Running tests from the command line
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: 'If you want to build NumPy in order to work on NumPy itself, use the `spin`
    utility. To run NumPy’s full test suite:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想构建NumPy以便在NumPy本身上工作，请使用`spin`实用程序。要运行NumPy的完整测试套件：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Testing a subset of NumPy:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 测试NumPy的子集：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试的详细信息，请参阅[测试构建](../dev/development_environment.html#testing-builds)
- en: Other methods of running tests
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他运行测试的方法
- en: Run tests using your favourite IDE such as [vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)
    or [pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你最喜欢的IDE，比如[vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)或[pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)来运行测试
- en: Running tests from inside Python
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Python内部运行测试
- en: 'You can test an installed NumPy by [`numpy.test`](#numpy.test "numpy.test"),
    for example, To run NumPy’s full test suite, use the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过[`numpy.test`](#numpy.test "numpy.test")来测试安装的NumPy，例如，要运行NumPy的完整测试套件，请使用以下命令：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The test method may take two or more arguments; the first `label` is a string
    specifying what should be tested and the second `verbose` is an integer giving
    the level of output verbosity. See the docstring [`numpy.test`](#numpy.test "numpy.test")
    for details. The default value for `label` is ‘fast’ - which will run the standard
    tests. The string ‘full’ will run the full battery of tests, including those identified
    as being slow to run. If `verbose` is 1 or less, the tests will just show information
    messages about the tests that are run; but if it is greater than 1, then the tests
    will also provide warnings on missing tests. So if you want to run every test
    and get messages about which modules don’t have tests:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 测试方法可能需要两个或更多参数；第一个`label`是一个字符串，指定应该测试什么，第二个`verbose`是一个整数，表示输出详细程度。有关详细信息，请参阅[`numpy.test`](#numpy.test
    "numpy.test")的文档字符串。`label`的默认值是'fast' - 这将运行标准测试。字符串'full'将运行所有测试，包括标识为运行缓慢的测试。如果`verbose`为1或更低，则测试将仅显示有关运行的测试的信息消息；但如果大于1，则测试还将提供有关缺少测试的警告。所以如果你想运行每个测试并得到关于哪些模块没有测试的消息：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, if you are only interested in testing a subset of NumPy, for example,
    the `core` module, use the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你只对测试NumPy的子集感兴趣，比如`core`模块，可以使用以下命令：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Running tests from the command line
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: 'If you want to build NumPy in order to work on NumPy itself, use the `spin`
    utility. To run NumPy’s full test suite:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想构建NumPy以便在NumPy本身上工作，请使用`spin`实用程序。要运行NumPy的完整测试套件：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Testing a subset of NumPy:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 测试NumPy的子集：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: For detailed info on testing, see [Testing builds](../dev/development_environment.html#testing-builds)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有关测试的详细信息，请参阅[测试构建](../dev/development_environment.html#testing-builds)
- en: Other methods of running tests
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他运行测试的方法
- en: Run tests using your favourite IDE such as [vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)
    or [pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你最喜欢的IDE，比如[vscode](https://code.visualstudio.com/docs/python/testing#_enable-a-test-framework)或[pycharm](https://www.jetbrains.com/help/pycharm/testing-your-first-python-application.html)来运行测试
- en: Writing your own tests
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写你自己的测试
- en: If you are writing a package that you’d like to become part of NumPy, please
    write the tests as you develop the package. Every Python module, extension module,
    or subpackage in the NumPy package directory should have a corresponding `test_<name>.py`
    file. Pytest examines these files for test methods (named `test*`) and test classes
    (named `Test*`).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个希望成为NumPy一部分的软件包，请在开发软件包时编写测试。NumPy软件包目录中的每个Python模块、扩展模块或子软件包都应该有一个对应的`test_<name>.py`文件。Pytest会检查这些文件中的测试方法（命名为`test*`）和测试类（命名为`Test*`）。
- en: 'Suppose you have a NumPy module `numpy/xxx/yyy.py` containing a function `zzz()`.
    To test this function you would create a test module called `test_yyy.py`. If
    you only need to test one aspect of `zzz`, you can simply add a test function:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个NumPy模块`numpy/xxx/yyy.py`，其中包含一个函数`zzz()`。要测试这个函数，你需要创建一个名为`test_yyy.py`的测试模块。如果你只需要测试`zzz`的一个方面，你可以简单地添加一个测试函数：
- en: '[PRE34]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'More often, we need to group a number of tests together, so we create a test
    class:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 更多时候，我们需要将许多测试组合在一起，因此创建一个测试类：
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Within these test methods, `assert` and related functions are used to test whether
    a certain assumption is valid. If the assertion fails, the test fails. `pytest`
    internally rewrites the `assert` statement to give informative output when it
    fails, so should be preferred over the legacy variant `numpy.testing.assert_`.
    Whereas plain `assert` statements are ignored when running Python in optimized
    mode with `-O`, this is not an issue when running tests with pytest.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些测试方法中，使用`assert`和相关函数来测试某个假设是否有效。如果断言失败，则测试失败。`pytest`在内部重写`assert`语句以在失败时给出信息性的输出，因此应该优先使用它而不是遗留的变体`numpy.testing.assert_`。而在使用`-O`参数以优化模式运行Python时，简单的`assert`语句将被忽略，但在使用pytest运行测试时不会出现这个问题。
- en: Similarly, the pytest functions [`pytest.raises`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.raises
    "(in pytest v0.1.dev156+g45f34df)") and [`pytest.warns`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.warns
    "(in pytest v0.1.dev156+g45f34df)") should be preferred over their legacy counterparts
    [`numpy.testing.assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises") and [`numpy.testing.assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns"), since the pytest variants are more broadly used
    and allow more explicit targeting of warnings and errors when used with the `match`
    regex.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，应该优先使用pytest函数[`pytest.raises`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.raises
    "(在pytest v0.1.dev156+g45f34df中)")和[`pytest.warns`](https://docs.pytest.org/en/stable/reference/reference.html#pytest.warns
    "(在pytest v0.1.dev156+g45f34df中)")，而不是遗留的对应项[`numpy.testing.assert_raises`](generated/numpy.testing.assert_raises.html#numpy.testing.assert_raises
    "numpy.testing.assert_raises")和[`numpy.testing.assert_warns`](generated/numpy.testing.assert_warns.html#numpy.testing.assert_warns
    "numpy.testing.assert_warns")，因为pytest的变体更广泛地被使用，并允许与`match`正则表达式一起更明确地定位警告和错误。
- en: Note that `test_` functions or methods should not have a docstring, because
    that makes it hard to identify the test from the output of running the test suite
    with `verbose=2` (or similar verbosity setting). Use plain comments (`#`) if necessary.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`test_`函数或方法不应该有文档字符串，因为这样会使得在使用`verbose=2`（或类似的详细程度设置）运行测试套件的输出中很难识别测试。必要时使用纯注释（`#`）。
- en: Also since much of NumPy is legacy code that was originally written without
    unit tests, there are still several modules that don’t have tests yet. Please
    feel free to choose one of these modules and develop tests for it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于NumPy的大部分代码都是没有经过单元测试的遗留代码，仍然有几个模块尚未经过测试。请随意选择其中一个模块并为其开发测试。
- en: Using C code in tests
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试中使用C代码
- en: NumPy exposes a rich [C-API](c-api/index.html#c-api) . These are tested using
    c-extension modules written “as-if” they know nothing about the internals of NumPy,
    rather using the official C-API interfaces only. Examples of such modules are
    tests for a user-defined `rational` dtype in `_rational_tests` or the ufunc machinery
    tests in `_umath_tests` which are part of the binary distribution. Starting from
    version 1.21, you can also write snippets of C code in tests that will be compiled
    locally into c-extension modules and loaded into python.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy公开了丰富的[C-API](c-api/index.html#c-api)。这些是使用c扩展模块进行测试的，这些模块被编写得就像它们对NumPy的内部一无所知一样，而只是使用官方的C-API接口。这些模块的示例包括`_rational_tests`中对用户定义的`rational`数据类型的测试，以及二进制发布包中的一部分——在`_umath_tests`中的ufunc机制测试。从1.21版本开始，您还可以在测试中编写一小段C代码，该代码将被本地编译为c扩展模块，并加载到python中。
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Build and imports a c-extension module *modname* from a list of function fragments
    *functions*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从片段列表*functions*中构建并导入c扩展模块*modname*。
- en: 'Parameters:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**functions**list of fragments'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**functions**片段列表'
- en: Each fragment is a sequence of func_name, calling convention, snippet.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 每个片段都是一个func_name,调用约定,片段的序列。
- en: '**prologue**string'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**prologue**string'
- en: Code to precede the rest, usually extra `#include` or `#define` macros.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在其余部分之前的代码，通常是额外的`#include`或`#define`宏
- en: '**build_dir**pathlib.Path'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_dir**pathlib.Path'
- en: Where to build the module, usually a temporary directory
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的构建目录，通常是临时目录
- en: '**include_dirs**list'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**list'
- en: Extra directories to find include files when compiling
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时查找包含文件的额外目录
- en: '**more_init**string'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**more_init**string'
- en: Code to appear in the module PyMODINIT_FUNC
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在模块PyMODINIT_FUNC中的代码
- en: 'Returns:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'out: module'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'out: 模块'
- en: The module will have been loaded and is ready for use
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 模块已加载并准备就绪
- en: Examples
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Labeling tests
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试标签
- en: 'Unlabeled tests like the ones above are run in the default `numpy.test()` run.
    If you want to label your test as slow - and therefore reserved for a full `numpy.test(label=''full'')`
    run, you can label it with `pytest.mark.slow`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 像上面那样未标记的测试会在默认的 `numpy.test()` 运行中运行。如果要将测试标记为慢速 - 因此保留给完整的 `numpy.test(label='full')`
    运行，则可以使用 `pytest.mark.slow` 标记它：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Similarly for methods:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于方法也是类似的：
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Easier setup and teardown functions / methods
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更容易的设置和拆卸函数/方法
- en: 'Testing looks for module-level or class method-level setup and teardown functions
    by name; thus:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 测试通过名称查找模块级别或类方法级别的设置和拆卸函数；因此：
- en: '[PRE40]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Setup and teardown functions to functions and methods are known as “fixtures”,
    and they should be used sparingly. `pytest` supports more general fixture at various
    scopes which may be used automatically via special arguments. For example, the
    special argument name `tmpdir` is used in test to create a temporary directory.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数和方法的设置和拆卸函数称为“固件”，并且应该谨慎使用。`pytest` 支持各种作用域的更通用的固件，可以通过特殊参数自动使用。例如，特殊参数名称
    `tmpdir` 用于在测试中创建临时目录。
- en: Parametric tests
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化测试
- en: One very nice feature of testing is allowing easy testing across a range of
    parameters - a nasty problem for standard unit tests. Use the `pytest.mark.parametrize`
    decorator.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的一个非常好的特性是允许轻松地在一系列参数上进行测试 - 这对于标准单元测试来说是一个讨厌的问题。使用 `pytest.mark.parametrize`
    装饰器。
- en: Doctests
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Doctests
- en: Doctests are a convenient way of documenting the behavior of a function and
    allowing that behavior to be tested at the same time. The output of an interactive
    Python session can be included in the docstring of a function, and the test framework
    can run the example and compare the actual output to the expected output.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Doctests 是一种方便的方式，用于记录函数的行为并同时允许测试该行为。交互式 Python 会话的输出可以包含在函数的文档字符串中，测试框架可以运行示例并将实际输出与预期输出进行比较。
- en: 'The doctests can be run by adding the `doctests` argument to the `test()` call;
    for example, to run all tests (including doctests) for numpy.lib:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 `doctests` 参数添加到 `test()` 调用中来运行 doctests；例如，要运行 numpy.lib 的所有测试（包括 doctests）：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The doctests are run as if they are in a fresh Python instance which has executed
    `import numpy as np`. Tests that are part of a NumPy subpackage will have that
    subpackage already imported. E.g. for a test in `numpy/linalg/tests/`, the namespace
    will be created such that `from numpy import linalg` has already executed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: doctests 被运行，就好像它们在一个已执行 `import numpy as np` 的新的 Python 实例中一样。作为 NumPy 子包的一部分的测试将已经导入该子包。例如，在
    `numpy/linalg/tests/` 中的测试中，将创建命名空间，使得 `from numpy import linalg` 已经执行。
- en: '`tests/`'
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tests/`'
- en: Rather than keeping the code and the tests in the same directory, we put all
    the tests for a given subpackage in a `tests/` subdirectory. For our example,
    if it doesn’t already exist you will need to create a `tests/` directory in `numpy/xxx/`.
    So the path for `test_yyy.py` is `numpy/xxx/tests/test_yyy.py`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 与其将代码和测试保存在同一个目录中，不如将给定子包的所有测试放在一个 `tests/` 子目录中。对于我们的示例，如果尚不存在，您将需要在 `numpy/xxx/`
    中创建一个 `tests/` 目录。因此，`test_yyy.py` 的路径是 `numpy/xxx/tests/test_yyy.py`。
- en: 'Once the `numpy/xxx/tests/test_yyy.py` is written, its possible to run the
    tests by going to the `tests/` directory and typing:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编写了 `numpy/xxx/tests/test_yyy.py`，就可以转到 `tests/` 目录并键入以下内容来运行测试：
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Or if you add `numpy/xxx/tests/` to the Python path, you could run the tests
    interactively in the interpreter like this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果将 `numpy/xxx/tests/` 添加到 Python 路径中，可以像这样在解释器中交互式运行测试：
- en: '[PRE43]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`__init__.py` and `setup.py`'
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__.py` 和 `setup.py`'
- en: 'Usually, however, adding the `tests/` directory to the python path isn’t desirable.
    Instead it would better to invoke the test straight from the module `xxx`. To
    this end, simply place the following lines at the end of your package’s `__init__.py`
    file:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，将 `tests/` 目录添加到 Python 路径不是一个理想的做法。相反，最好直接从模块 `xxx` 调用测试。为此，只需将以下行放在包的 `__init__.py`
    文件的末尾：
- en: '[PRE44]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You will also need to add the tests directory in the configuration section
    of your setup.py:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在 setup.py 的配置部分中添加 tests 目录：
- en: '[PRE45]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now you can do the following to test your module:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以执行以下操作来测试您的模块：
- en: '[PRE46]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Also, when invoking the entire NumPy test suite, your tests will be found and
    run:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在调用整个 NumPy 测试套件时，将找到并运行您的测试：
- en: '[PRE47]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Using C code in tests
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试中使用 C 代码
- en: NumPy exposes a rich [C-API](c-api/index.html#c-api) . These are tested using
    c-extension modules written “as-if” they know nothing about the internals of NumPy,
    rather using the official C-API interfaces only. Examples of such modules are
    tests for a user-defined `rational` dtype in `_rational_tests` or the ufunc machinery
    tests in `_umath_tests` which are part of the binary distribution. Starting from
    version 1.21, you can also write snippets of C code in tests that will be compiled
    locally into c-extension modules and loaded into python.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了丰富的 [C-API](c-api/index.html#c-api) . 使用这些时会使用基于官方 C-API 接口编写的 c 扩展模块进行测试，这些模块“好像”对
    NumPy 的内部一无所知。这样的模块示例包括 `_rational_tests` 中针对用户定义的 `rational` dtype 的测试，或者 `_umath_tests`
    中的 ufunc 机制测试，这些都是二进制分发的一部分。从版本 1.21 开始，您还可以在测试中编写一些 C 代码片段，这些代码片段将在本地编译成 c 扩展模块并加载到
    python 中。
- en: '[PRE48]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Build and imports a c-extension module *modname* from a list of function fragments
    *functions*.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数片段列表 *functions* 中构建并导入 c 扩展模块 *modname*。
- en: 'Parameters:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**functions**list of fragments'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**functions**函数片段列表'
- en: Each fragment is a sequence of func_name, calling convention, snippet.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 每个片段是一个函数名、调用约定、代码片段的序列。
- en: '**prologue**string'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**prologue**字符串'
- en: Code to precede the rest, usually extra `#include` or `#define` macros.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 前面加上的代码，通常是额外的 `#include` 或 `#define` 宏。
- en: '**build_dir**pathlib.Path'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_dir**pathlib.Path'
- en: Where to build the module, usually a temporary directory
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 模块构建位置，通常为临时目录
- en: '**include_dirs**list'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**列表'
- en: Extra directories to find include files when compiling
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时查找包含文件的额外目录
- en: '**more_init**string'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**more_init**字符串'
- en: Code to appear in the module PyMODINIT_FUNC
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在模块 PyMODINIT_FUNC 中的代码
- en: 'Returns:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: 'out: module'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：模块
- en: The module will have been loaded and is ready for use
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 模块已经加载并准备就绪
- en: Examples
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE49]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Labeling tests
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标记测试
- en: 'Unlabeled tests like the ones above are run in the default `numpy.test()` run.
    If you want to label your test as slow - and therefore reserved for a full `numpy.test(label=''full'')`
    run, you can label it with `pytest.mark.slow`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 类似上述的无标签测试会在默认的 `numpy.test()` 运行中运行。如果要将测试标记为慢速 - 因此保留为完整的 `numpy.test(label='full')`
    运行，可以使用 `pytest.mark.slow` 进行标记：
- en: '[PRE50]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Similarly for methods:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于方法：
- en: '[PRE51]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Easier setup and teardown functions / methods
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更容易的设置和拆卸函数/方法
- en: 'Testing looks for module-level or class method-level setup and teardown functions
    by name; thus:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 测试会根据名称查找模块级或类方法级的设置和拆卸函数；因此：
- en: '[PRE52]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Setup and teardown functions to functions and methods are known as “fixtures”,
    and they should be used sparingly. `pytest` supports more general fixture at various
    scopes which may be used automatically via special arguments. For example, the
    special argument name `tmpdir` is used in test to create a temporary directory.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为函数和方法的设置和拆卸函数称为“ fixtures”，应该谨慎使用。`pytest` 支持各种范围的通用 fixture，可以通过特殊参数自动使用。例如，测试中使用的特殊参数名称
    `tmpdir` 用于创建临时目录。
- en: Parametric tests
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化测试
- en: One very nice feature of testing is allowing easy testing across a range of
    parameters - a nasty problem for standard unit tests. Use the `pytest.mark.parametrize`
    decorator.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常好的测试功能是允许在一系列参数上进行轻松测试 - 这对于标准单元测试来说是一项麻烦的问题。使用 `pytest.mark.parametrize`
    装饰器。
- en: Doctests
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档测试
- en: Doctests are a convenient way of documenting the behavior of a function and
    allowing that behavior to be tested at the same time. The output of an interactive
    Python session can be included in the docstring of a function, and the test framework
    can run the example and compare the actual output to the expected output.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Doctest（文档测试）是一种方便的方式来记录函数的行为，并同时允许对该行为进行测试。可以将交互式 Python 会话的输出包含在函数的文档字符串中，测试框架可以运行示例并将实际输出与预期输出进行比较。
- en: 'The doctests can be run by adding the `doctests` argument to the `test()` call;
    for example, to run all tests (including doctests) for numpy.lib:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 `doctests` 参数添加到 `test()` 调用中来运行文档测试；例如，要运行 numpy.lib 的所有测试（包括文档测试）：
- en: '[PRE53]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The doctests are run as if they are in a fresh Python instance which has executed
    `import numpy as np`. Tests that are part of a NumPy subpackage will have that
    subpackage already imported. E.g. for a test in `numpy/linalg/tests/`, the namespace
    will be created such that `from numpy import linalg` has already executed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 文档测试会被视为在一个全新的已执行 `import numpy as np` 的 Python 实例中运行。作为 NumPy 子包一部分的测试将已经导入该子包。例如，在
    `numpy/linalg/tests/` 中的一个测试中，已经创建了这样的命名空间，以便 `from numpy import linalg` 已经执行。
- en: '`tests/`'
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`tests/`'
- en: Rather than keeping the code and the tests in the same directory, we put all
    the tests for a given subpackage in a `tests/` subdirectory. For our example,
    if it doesn’t already exist you will need to create a `tests/` directory in `numpy/xxx/`.
    So the path for `test_yyy.py` is `numpy/xxx/tests/test_yyy.py`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是将代码和测试放在同一目录中，我们将给定子包的所有测试放入`tests/`子目录中。例如，对于我们的示例，如果`numpy/xxx/`中没有`tests/`目录，您需要创建一个`tests/`目录。因此，`test_yyy.py`的路径是`numpy/xxx/tests/test_yyy.py`。
- en: 'Once the `numpy/xxx/tests/test_yyy.py` is written, its possible to run the
    tests by going to the `tests/` directory and typing:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 写完`numpy/xxx/tests/test_yyy.py`后，可以进入`tests/`目录并键入以下命令来运行测试：
- en: '[PRE54]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Or if you add `numpy/xxx/tests/` to the Python path, you could run the tests
    interactively in the interpreter like this:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果将`numpy/xxx/tests/`添加到Python路径中，您可以在解释器中像这样运行测试：
- en: '[PRE55]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '`__init__.py` and `setup.py`'
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__init__.py`和`setup.py`'
- en: 'Usually, however, adding the `tests/` directory to the python path isn’t desirable.
    Instead it would better to invoke the test straight from the module `xxx`. To
    this end, simply place the following lines at the end of your package’s `__init__.py`
    file:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，将`tests/`目录添加到Python路径中并不理想。相反，最好直接从模块`xxx`中调用测试。为此，在包的`__init__.py`文件的末尾添加以下几行即可：
- en: '[PRE56]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You will also need to add the tests directory in the configuration section
    of your setup.py:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在`setup.py`的配置部分中添加测试目录：
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now you can do the following to test your module:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照以下方式测试您的模块：
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Also, when invoking the entire NumPy test suite, your tests will be found and
    run:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，当调用整个NumPy测试套件时，将找到并运行您的测试：
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Tips & Tricks
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小贴士和技巧
- en: Creating many similar tests
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建许多类似的测试
- en: 'If you have a collection of tests that must be run multiple times with minor
    variations, it can be helpful to create a base class containing all the common
    tests, and then create a subclass for each variation. Several examples of this
    technique exist in NumPy; below are excerpts from one in [numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py):'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一组必须以微小变化多次运行的测试，可以创建一个包含所有常见测试的基类，然后为每个变体创建一个子类。NumPy中存在多种此类技术的示例；以下是其中一个示例的摘录：[numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py)。
- en: '[PRE60]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this case, we wanted to test solving a linear algebra problem using matrices
    of several data types, using `linalg.solve` and `linalg.inv`. The common test
    cases (for single-precision, double-precision, etc. matrices) are collected in
    `LinalgTestCase`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望使用几种数据类型的矩阵解决线性代数问题，使用`linalg.solve`和`linalg.inv`进行测试。常见的测试用例（例如单精度、双精度等矩阵）都收集在`LinalgTestCase`中。
- en: Known failures & skipping tests
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已知的失败和跳过测试
- en: Sometimes you might want to skip a test or mark it as a known failure, such
    as when the test suite is being written before the code it’s meant to test, or
    if a test only fails on a particular architecture.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望跳过测试或将其标记为已知失败，例如在编写测试套件时在编写代码之前，或者如果测试仅在特定架构上失败。
- en: 'To skip a test, simply use `skipif`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过测试，只需使用`skipif`：
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The test is marked as skipped if `SkipMyTest` evaluates to nonzero, and the
    message in verbose test output is the second argument given to `skipif`. Similarly,
    a test can be marked as a known failure by using `xfail`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SkipMyTest`对非零进行评估，则测试将被标记为跳过，而详细测试输出中的消息将是`skipif`给出的第二个参数。类似地，可以使用`xfail`将测试标记为已知失败：
- en: '[PRE62]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Of course, a test can be unconditionally skipped or marked as a known failure
    by using `skip` or `xfail` without argument, respectively.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以使用`skip`或`xfail`无条件跳过测试或将其标记为已知失败，而无需参数。
- en: A total of the number of skipped and known failing tests is displayed at the
    end of the test run. Skipped tests are marked as `'S'` in the test results (or
    `'SKIPPED'` for `verbose > 1`), and known failing tests are marked as `'x'` (or
    `'XFAIL'` if `verbose > 1`).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试运行结束时，显示跳过测试和已知失败测试的总数。跳过的测试在测试结果中标记为`'S'`（或者对于`verbose > 1`，标记为`'SKIPPED'`），已知失败的测试标记为`'x'`（或者对于`verbose
    > 1`，标记为`'XFAIL'`）。
- en: Tests on random data
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机数据的测试
- en: Tests on random data are good, but since test failures are meant to expose new
    bugs or regressions, a test that passes most of the time but fails occasionally
    with no code changes is not helpful. Make the random data deterministic by setting
    the random number seed before generating it. Use either Python’s `random.seed(some_number)`
    or NumPy’s `numpy.random.seed(some_number)`, depending on the source of random
    numbers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数据上的测试是很好的，但是由于测试失败的目的是暴露新的bug或回归，一个大多数时间通过但偶尔会因为没有代码更改而失败的测试是没有帮助的。通过在生成之前设置随机数种子使随机数据可重现。可以使用Python的`random.seed(some_number)`或NumPy的`numpy.random.seed(some_number)`，取决于随机数的来源。
- en: Alternatively, you can use [Hypothesis](https://hypothesis.readthedocs.io/en/latest/)
    to generate arbitrary data. Hypothesis manages both Python’s and Numpy’s random
    seeds for you, and provides a very concise and powerful way to describe data (including
    `hypothesis.extra.numpy`, e.g. for a set of mutually-broadcastable shapes).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用[Hypothesis](https://hypothesis.readthedocs.io/en/latest/)生成任意数据。Hypothesis为你管理Python和Numpy的随机种子，并提供一种非常简明而强大的方式来描述数据（包括`hypothesis.extra.numpy`，例如用于一组可互相广播的形状）。
- en: The advantages over random generation include tools to replay and share failures
    without requiring a fixed seed, reporting *minimal* examples for each failure,
    and better-than-naive-random techniques for triggering bugs.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在随机生成上的优势包括工具可以重播和共享失败而不需要固定种子，为每个失败报告*最小*的例子，以及为触发bug提供比朴素随机更好的技术。
- en: Documentation for `numpy.test`
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.test`的文档'
- en: '[PRE63]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Pytest test runner.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest测试运行器。
- en: 'A test function is typically added to a package’s __init__.py like so:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数通常被添加到包的__init__.py中，如下所示：
- en: '[PRE64]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Calling this test function finds and runs all tests associated with the module
    and all its sub-modules.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此测试函数会找到并运行与模块及其所有子模块关联的所有测试。
- en: 'Parameters:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**module_name**module name'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**module name'
- en: The name of the module to test.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的模块的名称。
- en: Notes
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: Unlike the previous `nose`-based implementation, this class is not publicly
    exposed as it performs some `numpy`-specific warning suppression.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 与先前基于`nose`的实现不同，这个类并不是公开的，因为它执行了一些`numpy`特定的警告抑制。
- en: 'Attributes:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**module_name**str'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**str'
- en: Full path to the package to test.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的包的完整路径。
- en: Creating many similar tests
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建许多类似的测试
- en: 'If you have a collection of tests that must be run multiple times with minor
    variations, it can be helpful to create a base class containing all the common
    tests, and then create a subclass for each variation. Several examples of this
    technique exist in NumPy; below are excerpts from one in [numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一系列的测试需要多次运行，并且需要做一些小的变化，创建一个包含所有公共测试的基类，然后为每个变种创建一个子类是很有帮助的。NumPy中存在这种技术的几个例子；下面摘录自[numpy/linalg/tests/test_linalg.py](https://github.com/numpy/numpy/blob/main/numpy/linalg/tests/test_linalg.py)：
- en: '[PRE65]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In this case, we wanted to test solving a linear algebra problem using matrices
    of several data types, using `linalg.solve` and `linalg.inv`. The common test
    cases (for single-precision, double-precision, etc. matrices) are collected in
    `LinalgTestCase`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想测试使用几种数据类型的矩阵来解决线性代数问题，使用`linalg.solve`和`linalg.inv`。通常的测试案例（单精度、双精度等矩阵）都被收集在`LinalgTestCase`中。
- en: Known failures & skipping tests
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已知的失败与跳过的测试
- en: Sometimes you might want to skip a test or mark it as a known failure, such
    as when the test suite is being written before the code it’s meant to test, or
    if a test only fails on a particular architecture.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望跳过一个测试或将其标记为已知的失败，比如在编写测试套件之前编写的代码，或者测试只在特定体系结构上失败。
- en: 'To skip a test, simply use `skipif`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要跳过一个测试，简单地使用`skipif`：
- en: '[PRE66]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The test is marked as skipped if `SkipMyTest` evaluates to nonzero, and the
    message in verbose test output is the second argument given to `skipif`. Similarly,
    a test can be marked as a known failure by using `xfail`:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SkipMyTest`评估为非零，则测试被标记为跳过，详细测试输出中的消息是`skipif`给定的第二个参数。同样，可以使用`xfail`将测试标记为已知失败：
- en: '[PRE67]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Of course, a test can be unconditionally skipped or marked as a known failure
    by using `skip` or `xfail` without argument, respectively.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以使用`skip`或`xfail`无需参数无条件跳过测试或将其标记为已知的失败。
- en: A total of the number of skipped and known failing tests is displayed at the
    end of the test run. Skipped tests are marked as `'S'` in the test results (or
    `'SKIPPED'` for `verbose > 1`), and known failing tests are marked as `'x'` (or
    `'XFAIL'` if `verbose > 1`).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行结束时显示跳过和已知失败测试的总数。跳过的测试在测试结果中标记为`'S'`（或`verbose > 1`时标记为`'SKIPPED'`），已知失败的测试标记为`'x'`（或`verbose
    > 1`时标记为`'XFAIL'`）。
- en: Tests on random data
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机数据测试
- en: Tests on random data are good, but since test failures are meant to expose new
    bugs or regressions, a test that passes most of the time but fails occasionally
    with no code changes is not helpful. Make the random data deterministic by setting
    the random number seed before generating it. Use either Python’s `random.seed(some_number)`
    or NumPy’s `numpy.random.seed(some_number)`, depending on the source of random
    numbers.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 随机数据测试虽然很好，但由于测试失败意味着暴露新的错误或回归，因此大部分时间通过但偶尔失败而没有代码更改的测试并不有用。通过在生成之前设置随机数种子来使随机数据具有确定性。根据随机数的来源使用Python的`random.seed(some_number)`或NumPy的`numpy.random.seed(some_number)`。
- en: Alternatively, you can use [Hypothesis](https://hypothesis.readthedocs.io/en/latest/)
    to generate arbitrary data. Hypothesis manages both Python’s and Numpy’s random
    seeds for you, and provides a very concise and powerful way to describe data (including
    `hypothesis.extra.numpy`, e.g. for a set of mutually-broadcastable shapes).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用[Hypothesis](https://hypothesis.readthedocs.io/en/latest/)生成任意数据。Hypothesis为您管理Python和Numpy的随机种子，并提供了一种非常简洁而强大的描述数据的方法（包括`hypothesis.extra.numpy`，例如一组相互广播的形状）。
- en: The advantages over random generation include tools to replay and share failures
    without requiring a fixed seed, reporting *minimal* examples for each failure,
    and better-than-naive-random techniques for triggering bugs.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 与随机生成相比的优点包括工具可以重放和分享失败而不需要固定的种子，为每个失败报告提供*最小*示例，并且触发错误的技术比朴素随机更好。
- en: Documentation for `numpy.test`
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.test`的文档'
- en: '[PRE68]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Pytest test runner.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Pytest测试运行器。
- en: 'A test function is typically added to a package’s __init__.py like so:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数通常像这样添加到包的__init__.py中：
- en: '[PRE69]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Calling this test function finds and runs all tests associated with the module
    and all its sub-modules.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此测试函数会查找并运行与模块及其所有子模块相关联的所有测试。
- en: 'Parameters:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**module_name**module name'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**模块名'
- en: The name of the module to test.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的模块的名称。
- en: Notes
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记
- en: Unlike the previous `nose`-based implementation, this class is not publicly
    exposed as it performs some `numpy`-specific warning suppression.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前基于`nose`的实现不同，这个类不会公开暴露，因为它执行了一些特定于`numpy`的警告抑制。
- en: 'Attributes:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**module_name**str'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_name**str'
- en: Full path to the package to test.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试的包的完整路径。
