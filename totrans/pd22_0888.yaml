- en: pandas.tseries.offsets.DateOffset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.tseries.offsets.DateOffset.html](https://pandas.pydata.org/docs/reference/api/pandas.tseries.offsets.DateOffset.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Standard kind of date increment used for a date range.
  prefs: []
  type: TYPE_NORMAL
- en: Works exactly like the keyword argument form of relativedelta. Note that the
    positional argument form of relativedelata is not supported. Use of the keyword
    n is discouraged– you would be better off specifying n in the keywords you use,
    but regardless it is there for you. n is needed for DateOffset subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'DateOffset works as follows. Each offset specify a set of dates that conform
    to the DateOffset. For example, Bday defines this set to be the set of dates that
    are weekdays (M-F). To test if a date is in the set of a DateOffset dateOffset
    we can use the is_on_offset method: dateOffset.is_on_offset(date).'
  prefs: []
  type: TYPE_NORMAL
- en: If a date is not on a valid date, the rollback and rollforward methods can be
    used to roll the date to the nearest valid date before/after the date.
  prefs: []
  type: TYPE_NORMAL
- en: 'DateOffsets can be created to move dates forward a given number of valid dates.
    For example, Bday(2) can be added to a date to move it two business days forward.
    If the date does not start on a valid date, first it is moved to a valid date.
    Thus pseudo code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When a date offset is created for a negative number of periods, the date is
    first rolled forward. The pseudo code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Zero presents a problem. Should it roll forward or back? We arbitrarily have
    it rollforward:'
  prefs: []
  type: TYPE_NORMAL
- en: date + BDay(0) == BDay.rollforward(date)
  prefs: []
  type: TYPE_NORMAL
- en: Since 0 is a bit weird, we suggest avoiding its use.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, adding a DateOffsets specified by the singular form of the date component
    can be used to replace certain component of the timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int, default 1'
  prefs: []
  type: TYPE_NORMAL
- en: The number of time periods the offset represents. If specified without a temporal
    pattern, defaults to n days.
  prefs: []
  type: TYPE_NORMAL
- en: '**normalize**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to round the result of a DateOffset addition down to the previous midnight.
  prefs: []
  type: TYPE_NORMAL
- en: '**weekday**int {0, 1, …, 6}, default 0'
  prefs: []
  type: TYPE_NORMAL
- en: A specific integer for the day of the week.
  prefs: []
  type: TYPE_NORMAL
- en: 0 is Monday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 is Tuesday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 is Wednesday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 is Thursday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 is Friday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 is Saturday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 is Sunday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead Weekday type from dateutil.relativedelta can be used.
  prefs: []
  type: TYPE_NORMAL
- en: MO is Monday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TU is Tuesday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WE is Wednesday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TH is Thursday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FR is Friday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SA is Saturday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SU is Sunday.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****kwds**'
  prefs: []
  type: TYPE_NORMAL
- en: Temporal parameter that add to or replace the offset value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters that **add** to the offset (like Timedelta):'
  prefs: []
  type: TYPE_NORMAL
- en: years
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: months
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: weeks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: days
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: milliseconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: microseconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nanoseconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters that **replace** the offset value:'
  prefs: []
  type: TYPE_NORMAL
- en: year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: weekday
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: second
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: microsecond
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nanosecond.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`dateutil.relativedelta.relativedelta`](https://matplotlib.org/stable/api/dates_api.html#matplotlib.dates.relativedelta
    "(in Matplotlib v3.8.4)")'
  prefs: []
  type: TYPE_NORMAL
- en: The relativedelta type is designed to be applied to an existing datetime an
    can replace specific components of that datetime, or represents an interval of
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `base` | Returns a copy of the calling offset object with n=1 and all other
    attributes equal. |'
  prefs: []
  type: TYPE_TB
- en: '| [`freqstr`](pandas.tseries.offsets.DateOffset.freqstr.html#pandas.tseries.offsets.DateOffset.freqstr
    "pandas.tseries.offsets.DateOffset.freqstr") | Return a string representing the
    frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`kwds`](pandas.tseries.offsets.DateOffset.kwds.html#pandas.tseries.offsets.DateOffset.kwds
    "pandas.tseries.offsets.DateOffset.kwds") | Return a dict of extra parameters
    for the offset. |'
  prefs: []
  type: TYPE_TB
- en: '| [`n`](pandas.tseries.offsets.DateOffset.n.html#pandas.tseries.offsets.DateOffset.n
    "pandas.tseries.offsets.DateOffset.n") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`name`](pandas.tseries.offsets.DateOffset.name.html#pandas.tseries.offsets.DateOffset.name
    "pandas.tseries.offsets.DateOffset.name") | Return a string representing the base
    frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nanos`](pandas.tseries.offsets.DateOffset.nanos.html#pandas.tseries.offsets.DateOffset.nanos
    "pandas.tseries.offsets.DateOffset.nanos") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`normalize`](pandas.tseries.offsets.DateOffset.normalize.html#pandas.tseries.offsets.DateOffset.normalize
    "pandas.tseries.offsets.DateOffset.normalize") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`rule_code`](pandas.tseries.offsets.DateOffset.rule_code.html#pandas.tseries.offsets.DateOffset.rule_code
    "pandas.tseries.offsets.DateOffset.rule_code") |  |'
  prefs: []
  type: TYPE_TB
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`copy`](pandas.tseries.offsets.DateOffset.copy.html#pandas.tseries.offsets.DateOffset.copy
    "pandas.tseries.offsets.DateOffset.copy")() | Return a copy of the frequency.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_anchored`](pandas.tseries.offsets.DateOffset.is_anchored.html#pandas.tseries.offsets.DateOffset.is_anchored
    "pandas.tseries.offsets.DateOffset.is_anchored")() | (DEPRECATED) Return boolean
    whether the frequency is a unit frequency (n=1). |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_month_end`](pandas.tseries.offsets.DateOffset.is_month_end.html#pandas.tseries.offsets.DateOffset.is_month_end
    "pandas.tseries.offsets.DateOffset.is_month_end")(ts) | Return boolean whether
    a timestamp occurs on the month end. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_month_start`](pandas.tseries.offsets.DateOffset.is_month_start.html#pandas.tseries.offsets.DateOffset.is_month_start
    "pandas.tseries.offsets.DateOffset.is_month_start")(ts) | Return boolean whether
    a timestamp occurs on the month start. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_on_offset`](pandas.tseries.offsets.DateOffset.is_on_offset.html#pandas.tseries.offsets.DateOffset.is_on_offset
    "pandas.tseries.offsets.DateOffset.is_on_offset")(dt) | Return boolean whether
    a timestamp intersects with this frequency. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_quarter_end`](pandas.tseries.offsets.DateOffset.is_quarter_end.html#pandas.tseries.offsets.DateOffset.is_quarter_end
    "pandas.tseries.offsets.DateOffset.is_quarter_end")(ts) | Return boolean whether
    a timestamp occurs on the quarter end. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_quarter_start`](pandas.tseries.offsets.DateOffset.is_quarter_start.html#pandas.tseries.offsets.DateOffset.is_quarter_start
    "pandas.tseries.offsets.DateOffset.is_quarter_start")(ts) | Return boolean whether
    a timestamp occurs on the quarter start. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_year_end`](pandas.tseries.offsets.DateOffset.is_year_end.html#pandas.tseries.offsets.DateOffset.is_year_end
    "pandas.tseries.offsets.DateOffset.is_year_end")(ts) | Return boolean whether
    a timestamp occurs on the year end. |'
  prefs: []
  type: TYPE_TB
- en: '| [`is_year_start`](pandas.tseries.offsets.DateOffset.is_year_start.html#pandas.tseries.offsets.DateOffset.is_year_start
    "pandas.tseries.offsets.DateOffset.is_year_start")(ts) | Return boolean whether
    a timestamp occurs on the year start. |'
  prefs: []
  type: TYPE_TB
- en: '| `rollback`(dt) | Roll provided date backward to next offset only if not on
    offset. |'
  prefs: []
  type: TYPE_TB
- en: '| `rollforward`(dt) | Roll provided date forward to next offset only if not
    on offset. |'
  prefs: []
  type: TYPE_TB
