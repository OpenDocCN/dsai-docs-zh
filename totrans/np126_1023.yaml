- en: numpy.testing.assert_array_equal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html](https://numpy.org/doc/1.26/reference/generated/numpy.testing.assert_array_equal.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Raises an AssertionError if two array_like objects are not equal.
  prefs: []
  type: TYPE_NORMAL
- en: Given two array_like objects, check that the shape is equal and all elements
    of these objects are equal (but see the Notes for the special handling of a scalar).
    An exception is raised at shape mismatch or conflicting values. In contrast to
    the standard usage in numpy, NaNs are compared like numbers, no assertion is raised
    if both objects have NaNs in the same positions.
  prefs: []
  type: TYPE_NORMAL
- en: The usual caution for verifying equality with floating point numbers is advised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The actual object to check.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The desired, expected object.
  prefs: []
  type: TYPE_NORMAL
- en: '**err_msg**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The error message to be printed in case of failure.
  prefs: []
  type: TYPE_NORMAL
- en: '**verbose**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the conflicting values are appended to the error message.
  prefs: []
  type: TYPE_NORMAL
- en: '**strict**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, raise an AssertionError when either the shape or the data type of the
    array_like objects does not match. The special handling for scalars mentioned
    in the Notes section is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.24.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: AssertionError
  prefs: []
  type: TYPE_NORMAL
- en: If actual and desired objects are not equal.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose")'
  prefs: []
  type: TYPE_NORMAL
- en: Compare two array_like objects for equality with desired relative and/or absolute
    precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[`assert_array_almost_equal_nulp`](numpy.testing.assert_array_almost_equal_nulp.html#numpy.testing.assert_array_almost_equal_nulp
    "numpy.testing.assert_array_almost_equal_nulp"), [`assert_array_max_ulp`](numpy.testing.assert_array_max_ulp.html#numpy.testing.assert_array_max_ulp
    "numpy.testing.assert_array_max_ulp"), [`assert_equal`](numpy.testing.assert_equal.html#numpy.testing.assert_equal
    "numpy.testing.assert_equal")'
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: When one of *x* and *y* is a scalar and the other is array_like, the function
    checks that each element of the array_like object is equal to the scalar. This
    behaviour can be disabled with the *strict* parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'The first assert does not raise an exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Assert fails with numerical imprecision with floats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use [`assert_allclose`](numpy.testing.assert_allclose.html#numpy.testing.assert_allclose
    "numpy.testing.assert_allclose") or one of the nulp (number of floating point
    values) functions for these cases instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned in the Notes section, [`assert_array_equal`](#numpy.testing.assert_array_equal
    "numpy.testing.assert_array_equal") has special handling for scalars. Here the
    test checks that each value in *x* is 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Use *strict* to raise an AssertionError when comparing a scalar with an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The *strict* parameter also ensures that the array data types match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
