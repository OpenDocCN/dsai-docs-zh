- en: Development Workflow Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html](https://docs.sympy.org/latest/contributing/new-contributors-guide/workflow-process.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This guide is intended for people are already familiar with contributing to
    open source projects on GitHub. If you are new to GitHub, read the [Setup Development
    Environment](dev-setup.html) guide first.
  prefs: []
  type: TYPE_NORMAL
- en: '## Checklist for Contributions'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a checklist of things that need to be done when making a pull request
    to SymPy. These things all need to be done before a pull request is merged. It
    is not necessary to do all of them before the pull request is opened at all, but
    it is often a good idea to check the basic things first before opening a pull
    request, or even before committing a change.
  prefs: []
  type: TYPE_NORMAL
- en: '**Make sure [code quality checks](#workflow-process-code-quality) pass.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**[Add tests](#workflow-process-add-tests).** All new functionality should
    be tested. Bug fixes should add regression tests. Tests are written in pytest
    `assert f(x) == y` style and are included in corresponding `tests` directories
    in the `sympy/` source. See the guide on [writing tests](writing-tests.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New public functions and methods should have a docstring.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docstrings should include [doctests](writing-tests.html#writing-tests-doctests).**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make sure all tests pass.** [You may want to run a relevant subset of the
    test suite locally](#workflow-process-run-tests) before committing (e.g., `./bin/test
    solvers`). When you open a pull request, all tests will be run on CI. The CI must
    be all green before a PR can be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Write good commit messages](#workflow-process-commit-messages).**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (First time contributors only) **[Add your name to the `.mailmap` file](#mailmap-instructions)**.
    The “test / authors” CI build on GitHub will fail if this is not done correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross reference relevant issues in the pull request description.** If the
    pull request fixes an issue (i.e., the issue should be closed once the PR is merged),
    use the [“fixes #123” syntax](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add a comment to the original issue cross-referencing the pull request**
    for visibility. If there is not a corresponding issue, this is OK. It is not necessary
    to open an issue unless there are further improvements needed beyond your PR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Add a release notes entry](https://github.com/sympy/sympy/wiki/Writing-Release-Notes).**
    This should be done when opening the pull request, in the pull request description
    field. It can be edited at any time before the pull request is merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Respond to review comments.** All SymPy pull requests must be reviewed by
    someone else before they can be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick an issue to fix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to start with the main code base is to fix some existing bugs.
    Peruse the [“Easy to fix” issues](https://github.com/sympy/sympy/issues?q=is%3Aopen+is%3Aissue+label%3A%22Easy+to+Fix%22)
    in the issue tracker and see if one interests you. If you’d like to try to fix
    it, then create a message in the issue saying that you’d like to work on it. If
    it isn’t clear how to fix it, ask for suggestions on how to do it in the issue
    itself or on the [mailing list](https://groups.google.com/g/sympy).
  prefs: []
  type: TYPE_NORMAL
- en: SymPy’s code is organized into Python packages and modules. The core code is
    in the `sympy/core` directory and other packages in the sympy directory have more
    specific code. For example, `sympy/printing` contains the code that handles how
    SymPy objects are printed to the terminal and Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: If you are making a change that does not yet have an issue, it is not required
    to open an issue first. This is only necessary if you feel you want to discuss
    the change before you make a pull request, for example, if you’re not sure if
    something is actually a bug, or if you’re not sure if a new feature is in scope.
    It’s also fine to just open a pull request and discuss it there. Discussions are
    easier to have when there is actual code to talk about, so a pull request is preferable
    if you have changes, even if they aren’t fully ready to merge yet.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new branch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do before making changes to the code is to make a branch
    in git.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, **never commit to `master`**. `master` should only be used to pull
    in upstream changes from the main sympy/sympy repo. If you commit to `master`,
    it will be difficult to pull these changes in, and it will also be difficult if
    you wish to make more than one pull request at a time.
  prefs: []
  type: TYPE_NORMAL
- en: First pick a name for your branch. See [Branch names](#workflow-process-branch-names)
    below. To create and checkout (that is, make it the working branch) a new branch
    run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The last two commands can also be combined into a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To view all branches, with your current branch highlighted, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And remember, **never type the following commands in master**: `git merge`,
    `git add`, `git commit`, `git rebase`. If you made some commits to your local
    master by accident, you will have to hard reset to drop the commits.'
  prefs: []
  type: TYPE_NORMAL
- en: '### Branch names'
  prefs: []
  type: TYPE_NORMAL
- en: Use a short, easy to type branch name that somehow relates to the changes. Remember
    that developers who wish to try out your code will need to type your branch name
    in the command line to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using issue numbers in branch names as these are not easy to type (most
    SymPy issue numbers are 5 digits long) and they won’t really be indicative of
    what the change is about without looking up the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of good branch names are
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Ultimately the branch name is not that important, so don’t spend too much time
    thinking about it. It’s only function is to distinguish the code for this contribution
    from other contributions you may make.
  prefs: []
  type: TYPE_NORMAL
- en: Modify code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When making your fix, keep in mind there are several requirements that every
    contribution should follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '### Code Quality'
  prefs: []
  type: TYPE_NORMAL
- en: SymPy contributions must have sufficient code quality to be accepted. There
    are some code quality checks that will run automatically on the CI once you create
    a pull request, but you can also run them locally with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, all tests are required to pass. The CI will automatically run
    the tests, but you can also [run them yourself](#workflow-process-run-tests).
    It is recommended to run at least the tests that relate to the code you modified
    before committing to ensure you did not make any mistakes or accidentally break
    something.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you submit your pull request, you should check the GitHub Actions checks
    once they complete to see if there are any test failures. If there are, you will
    need to fix them before the pull request will be accepted.  ### Add Tests'
  prefs: []
  type: TYPE_NORMAL
- en: All new functionality should be tested. If you are fixing a bug, it should be
    accompanied with a regression test. That is, a test that would fail before the
    bug fix but now passes. Often you can use a code example from an issue as a test
    case, although it is also OK to simplify such examples or to write your own, so
    long as it tests the issue in question.
  prefs: []
  type: TYPE_NORMAL
- en: Tests are located alongside the code in `tests/` directories, in files named
    `test_<thing>.py`. In most cases, if you modified `sympy/<submodule>/<file>.py`
    then the test for the functionality will go in `sympy/<submodule>/tests/test_<file>.py`.
    For example, the tests for the functions in `sympy/simplify/sqrtdenest.py` are
    in `sympy/simplify/tests/test_sqrtdenest.py`. There are some exceptions to this
    rule so in general try to find where the existing tests are for a function and
    add your tests alongside them.
  prefs: []
  type: TYPE_NORMAL
- en: Tests follow a simple pattern, which should be apparent from reading the existing
    test files. Tests are in functions that start with `test_` and contain lines like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: New test cases can be added to an existing test function if it is relevant,
    or you can create a new test function.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All new methods, functions, and classes should have a docstring showing how
    to use them. A docstring is a triple quoted string that goes right after the `def`
    line that describes the function. Docstrings should follow the format as outlined
    in the [Docstrings Style Guide](../docstring.html#style-guide-docstring-guidelines).
  prefs: []
  type: TYPE_NORMAL
- en: One important thing that should be included in every docstring is examples.
    Examples are also called *doctests*, because they are tested with the `bin/doctest`
    script to ensure they output is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Doctests need to include imports for every function used define any symbols
    that are used. Users should be able to copy and paste the example inputs into
    their own Python session and get the exact same outputs. `from sympy import *`
    is not allowed in doctests, as this would make it unclear which functions come
    from SymPy.
  prefs: []
  type: TYPE_NORMAL
- en: The [docstring style guide](../docstring.html#style-guide-docstring-examples-section)
    has more details on how to format examples in docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind, doctests are *not* tests. Think of them as examples that happen
    to be tested. Some key differences:'
  prefs: []
  type: TYPE_NORMAL
- en: write doctests to be informative; write regular tests to check for regressions
    and corner cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: doctests can be changed at any time; regular tests should not be changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In particular, we should be able to change or delete any doctest at any time
    if it makes the docstring better to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example docstring with doctests (from `sympy/functions/special/delta_functions.py`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, all public function docstrings should be included in the Sphinx
    API documentation. Depending on the module, this may mean you need to add an `..
    autofunction::` line to the corresponding `doc/src/modules/<module>.rst` file.
    You should [build the documentation](build-docs.html#build-the-documentation)
    and look at it to ensure there are no markup errors in the rendered HTML.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to write a more long-form guide or tutorial, you may include this
    in the Sphinx documentation as a Markdown or RST file instead of putting it in
    a docstring. While this is not a requirement for new contributions, we are always
    looking to add new well-written long-form guides to our documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have made a pull request on GitHub, the CI will automatically build
    a preview of the documentation that you can view. On the pull request page, scroll
    to the bottom where the checks are, and find the link that says “Click here to
    see a preview of the documentation.”
  prefs: []
  type: TYPE_NORMAL
- en: '## Run the Tests'
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways of running SymPy tests but the easiest is to use the
    `bin/test` script.
  prefs: []
  type: TYPE_NORMAL
- en: The script takes a number of options and arguments. Run `bin/test --help` for
    all supported arguments. Under the hood it uses `pytest`, and you can use that
    directly as well if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run all tests by using the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To run tests for a specific file, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Where `test_basic` is from file `sympy/core/basic.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run tests for modules, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will run tests for the `core` and `utilities` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similary, run quality tests with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Commit the changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the changes are ready, you should commit them. You can check what files
    are changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Check total changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you created any new files, add them with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You are ready to commit changes locally. A commit also contains a `commit message`
    which describes it. See the next section for guidelines on writing good commit
    messages. Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: An editor window will appear automatically in this case. In Linux, this is vim
    by default. You can change what editor pops up by changing the `$EDITOR` shell
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also with the help of option `-a` you can tell the command `commit` to automatically
    stage files that have been modified and deleted, but new files you have not told
    git about will not be affected, e.g.,:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to stage only part of your changes, you can use the interactive
    commit feature. Just type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: and choose the changes you want in the resulting interface.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting junk files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of editors can create some configuration files, binary files, or temporary
    files in your SymPy directory, which should be removed before merging your commits.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking down individual files can be cumbersome.
  prefs: []
  type: TYPE_NORMAL
- en: You may think of using `.gitignore`, however, editing the `.gitignore` itself
    would have the agreement from the community.
  prefs: []
  type: TYPE_NORMAL
- en: Using `.git/info/exclude` would be the best, because it is only applied locally.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files](https://stackoverflow.com/questions/22906851/when-would-you-use-git-info-exclude-instead-of-gitignore-to-exclude-files)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.github.com/get-started/getting-started-with-git/ignoring-files](https://docs.github.com/get-started/getting-started-with-git/ignoring-files)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Writing commit messages'
  prefs: []
  type: TYPE_NORMAL
- en: 'The commit message has two parts: a title (first line) and the body. The two
    are separated by a blank line.'
  prefs: []
  type: TYPE_NORMAL
- en: Commit messages summarize what the commit does. Just as with the code, your
    commit messages will become a permanent part of the project git history. So you
    should put some effort into making them high quality. Commit messages are intended
    for human readers, both for people who will be reviewing your code right now,
    and for people who might come across your commit in the future while researching
    some change in the code. Thus, include information that helps others understand
    your commit here, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Tools like `git shortlog` and the GitHub UI only show the first line of the
    commit by default, so it is important to convey the most important aspects of
    the commit in the first line.
  prefs: []
  type: TYPE_NORMAL
- en: Keep the first line 71 characters or less and subsequent lines to 78 characters
    or less. This allows the one-line form of the log to display the summary without
    wrapping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make sure to leave a blank line after the summary**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not end the first line with a period (full stop). Subsequent lines should
    use periods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide context for the commit if possible,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'e.g. `integrals: Improved speed of heurisch()` instead of just `Improved speed
    of heurisch()`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reference any relevant issue numbers. You do not need to reference the pull
    request for the change itself, but issues that are fixed should be referenced
    either by `#12345` or `https://github.com/sympy/sympy/issues/12345`. You should
    also provide a brief summary of an issue rather than just referring to the issue
    number so that people don’t have to look around for context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A commit won’t always be seen in the context of your branch, so it is often
    helpful to give each commit some context. This is not required, though, as it
    is not hard to look at the commit metadata to see what files were modified or
    at the commit history to see the nearby related commits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use plain English. Write in complete sentences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe what actually changed. Don’t just write something like `Modified solvers.py`.
    People can already see what files are modified from the commit diff. What the
    message is there for is to tell them what the diff actually does, so they don’t
    have to try to figure it out. Similarly, although relevant issues should be cross-referenced
    as noted above, the message should contain enough of a basic summary that people
    can understand what is going on without having to look up the issue. The issue
    can provide more detailed context for people who are interested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to avoid short commit messages, like “Fix”, and commit messages that give
    no context, like “Found the bug”. When in doubt, a longer commit message is probably
    better than a short one. Avoid using the `-m` switch to `git commit` to write
    a commit message on the command line. Rather, let it open your editor so you can
    write a longer commit message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give an overview of what the commit does if it is difficult to figure out just
    from looking at the diff.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include other relevant information, e.g.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Known issues
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A concrete example (for commits that add new features/improve performance etc.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use bullet lists when suitable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feel free to use Unicode characters, such as output from the SymPy Unicode pretty
    printer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of a good commit message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is an example commit message from the commit [bf0e81e12a2f75711c30f0788daf4e58f72b2a41](https://github.com/sympy/sympy/commit/bf0e81e12a2f75711c30f0788daf4e58f72b2a41),
    which is part of the SymPy history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Co-Author
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Occasionally, there can be multiple people working as a team for one PR, or
    you have applied some suggestions from the community.
  prefs: []
  type: TYPE_NORMAL
- en: For these cases, you may use co-author feature of GitHub by adding
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: to the bottom of the commit message. See [https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors](https://docs.github.com/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors).
  prefs: []
  type: TYPE_NORMAL
- en: Make a Pull Request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once your changes are ready for review, push them up to GitHub, and make a pull
    request.
  prefs: []
  type: TYPE_NORMAL
- en: It is also OK to make a pull request before the changes are completely ready,
    to get some early feedback. It is better to get feedback early before you spend
    too much time on it. If your pull request is not completely ready for merging,
    open it in the “DRAFT” state on GitHub. You can also add “[WIP]” (which stands
    for “work in progress”) to the beginning of the pull request title to indicate
    this. Just be sure to remove the DRAFT state or [WIP] when your PR is ready for
    final review.
  prefs: []
  type: TYPE_NORMAL
- en: Writing pull request title and description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you make a pull request, be sure to fill out the pull request description
    template. This includes adding cross-references to any relevant issues (with “fixes”
    if appropriate), and adding a release notes entry.
  prefs: []
  type: TYPE_NORMAL
- en: '**Descriptive titles are very important.** The pull request title should indicate
    what is fixed. Pull requests with undescriptive titles will tend to be ignored
    by reviewers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of bad pull request titles are
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: “Modified solvers.py”
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '“Fix issue #12345”'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: These do indicate to reviewers what is actually changed in the pull request,
    and hence, they are likely to just pass it over instead of reviewing it. An example
    of a better pull request title is
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: “Fix a bug with solve() on transcendental functions”
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not put issue numbers or file names in the pull request title. Issue numbers
    should go in the description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the DRAFT status or include the prefix “[WIP]” in the title if you aren’t
    ready to have the pull request merged and remove the status/prefix when you are
    ready.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The description is a good place to:'
  prefs: []
  type: TYPE_NORMAL
- en: Show what you have done, perhaps comparing output from master with the output
    after your changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the issue that was addressed like “#1234”; that format will automatically
    create a link to the corresponding issue or pull request, e.g. “This is similar
    to the problem in issue #1234…”. This format also works in the discussion section
    of the pull request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use phrases like “closes #1234” or “fixed #1234” (or similar that [follow the
    auto-close syntax](https://docs.github.com/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue)
    and are also [discussed here](https://github.blog/2013-05-14-closing-issues-via-pull-requests/)).
    Then those other issues or pull requests will be closed automatically when your
    pull request is merged. Note: this syntax does not work in the discussion of the
    pull request. See this [quick guide](https://github.com/sympy/sympy/wiki/Issue-PR-Autoclosing-syntax)
    for the valid and invalid syntax for automatically closing issues from pull requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the pull request needs a release notes entry. See [https://github.com/sympy/sympy/wiki/Writing-Release-Notes](https://github.com/sympy/sympy/wiki/Writing-Release-Notes)
    on how to write release notes in the pull request description. The SymPy Bot will
    check that your PR has release notes automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is best to just fill out the pull request template (the text that is there
    when you open a pull request). If you fill out all the sections in the template,
    you will have a good pull request description.
  prefs: []
  type: TYPE_NORMAL
- en: '### Add your name and email address to the .mailmap file.'
  prefs: []
  type: TYPE_NORMAL
- en: Every author’s name and email address is stored in the [AUTHORS](https://github.com/sympy/sympy/blob/master/AUTHORS)
    file, but this file should not be edited directly. The AUTHORS file is updated
    automatically when a new version of SymPy is released based on the name and email
    addresses that are recorded in the commits. Every commit made with git stores
    the name and email address that git is configured with (see [Configure git settings](dev-setup.html#configure-git-settings)).
    The [.mailmap](https://github.com/sympy/sympy/blob/master/.mailmap) file is used
    to associate the name/email recorded in the commits with an author name and email
    address that will be listed in the AUTHORS file.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you make a pull request you will need to add your name and email
    address to the .mailmap file by adding a line like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This line in the .mailmap file associates the author name with the corresponding
    commits. The first name and email address is what will eventually go in the AUTHORS
    file. The second entry is what is recorded in the commit metadata. (see [Mapping
    user names to AUTHORS file entry](#mailmap-mapping-names))
  prefs: []
  type: TYPE_NORMAL
- en: 'The commit metadata name and email should exactly match the name and email
    that you have configured with git before making the commits (see [Configure git
    settings](dev-setup.html#configure-git-settings)). The `bin/mailmap_check.py`
    script can check that this has been done correctly. If you have made a commit
    but not yet added yourself to the .mailmap file then you will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that you should add your name and email address to the .mailmap
    file. If you add this at the end of the file then `git diff` will show:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can rerun the `bin/mailmap_check.py` script and you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line their says that the .mailmap file was “reordered”. This is because
    the file should be in alphabetical order. The script will have moved your name
    into the correct position so now you can see the change as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you rerun the script you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The key information here is “No changes needed in .mailmap” which means that
    you have correctly updated the .mailmap file. You should now add and commit these
    changes as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]  ### Mapping user names to AUTHORS file entry'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes a commit will be made with an incorrect name or email address or
    an author will make multiple commits with different names and email addresses
    or an author wishes to use a proper name that differs from their github name.
    In this case a line should be added to the .mailmap file where the first name
    and email address is what should be recorded in the AUTHORS file and the others
    are the name and email address that was incorrectly used in the other commits.
    For example if the commit was recorded with the name `joeb` and the email address
    `wrong@email.com` but the AUTHORS file should show `Joe Bloggs` as above then
    there should be a line in the .mailmap file like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A common reason that this can happen is if making commits with the GitHub web
    UI which always recorded the name as github username and the email as something
    like `1785690389+joeb@users.noreply.github.com`. In this case a line will need
    to be added to .mailmap like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Multiple lines like this can be added to the .mailmap file. They should record
    all of the different name and email address combinations that have been used by
    an author and map all of them to a single author name that will show in the AUTHORS
    file.
  prefs: []
  type: TYPE_NORMAL
- en: If your pull request is merged and you have not previously been added to the
    AUTHORS file then your name will be added at the time of the next release of SymPy.
  prefs: []
  type: TYPE_NORMAL
