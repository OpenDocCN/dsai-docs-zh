- en: scipy.interpolate.KroghInterpolator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.KroghInterpolator.html#scipy.interpolate.KroghInterpolator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Interpolating polynomial for a set of points.
  prefs: []
  type: TYPE_NORMAL
- en: The polynomial passes through all the pairs `(xi, yi)`. One may additionally
    specify a number of derivatives at each point *xi*; this is done by repeating
    the value *xi* and specifying the derivatives as successive *yi* values.
  prefs: []
  type: TYPE_NORMAL
- en: Allows evaluation of the polynomial and all its derivatives. For reasons of
    numerical stability, this function does not compute the coefficients of the polynomial,
    although they can be obtained by evaluating all the derivatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**xi**array_like, shape (npoints, )'
  prefs: []
  type: TYPE_NORMAL
- en: Known x-coordinates. Must be sorted in increasing order.
  prefs: []
  type: TYPE_NORMAL
- en: '**yi**array_like, shape (…, npoints, …)'
  prefs: []
  type: TYPE_NORMAL
- en: Known y-coordinates. When an xi occurs two or more times in a row, the corresponding
    yi’s represent derivative values. The length of *yi* along the interpolation axis
    must be equal to the length of *xi*. Use the *axis* parameter to select the correct
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis in the *yi* array corresponding to the x-coordinate values. Defaults to
    `axis=0`.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that the algorithms implemented here are not necessarily the most numerically
    stable known. Moreover, even in a world of exact computation, unless the x coordinates
    are chosen very carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice
    - polynomial interpolation itself is a very ill-conditioned process due to the
    Runge phenomenon. In general, even with well-chosen x values, degrees higher than
    about thirty cause problems with numerical instability in this code.
  prefs: []
  type: TYPE_NORMAL
- en: Based on [[1]](#r47cfdf6b0bbf-1).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: Krogh, “Efficient Algorithms for Polynomial Interpolation and Numerical Differentiation”,
    1970.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To produce a polynomial that is zero at 0 and 1 and has derivative 2 at 0, call
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This constructs the quadratic \(2x^2-2x\). The derivative condition is indicated
    by the repeated zero in the *xi* array; the corresponding yi values are 0, the
    function value, and 2, the derivative value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For another example, given *xi*, *yi*, and a derivative *ypi* for each point,
    appropriate arrays can be constructed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To produce a vector-valued polynomial, supply a higher-dimensional array for
    *yi*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This constructs a linear polynomial giving (2,3) at 0 and (4,5) at 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**'
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.KroghInterpolator.__call__.html#scipy.interpolate.KroghInterpolator.__call__
    "scipy.interpolate.KroghInterpolator.__call__")(x) | Evaluate the interpolant
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.KroghInterpolator.derivative.html#scipy.interpolate.KroghInterpolator.derivative
    "scipy.interpolate.KroghInterpolator.derivative")(x[, der]) | Evaluate a single
    derivative of the polynomial at the point *x*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivatives`](scipy.interpolate.KroghInterpolator.derivatives.html#scipy.interpolate.KroghInterpolator.derivatives
    "scipy.interpolate.KroghInterpolator.derivatives")(x[, der]) | Evaluate several
    derivatives of the polynomial at the point *x* |'
  prefs: []
  type: TYPE_TB
