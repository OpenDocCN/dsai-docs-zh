- en: NumPy 1.16.1 Release Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/release/1.16.1-notes.html](https://numpy.org/doc/1.26/release/1.16.1-notes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The NumPy 1.16.1 release fixes bugs reported against the 1.16.0 release, and
    also backports several enhancements from master that seem appropriate for a release
    series that is the last to support Python 2.7\. The wheels on PyPI are linked
    with OpenBLAS v0.3.4+, which should fix the known threading issues found in previous
    OpenBLAS versions.
  prefs: []
  type: TYPE_NORMAL
- en: Downstream developers building this release should use Cython >= 0.29.2 and,
    if using OpenBLAS, OpenBLAS > v0.3.4.
  prefs: []
  type: TYPE_NORMAL
- en: If you are installing using pip, you may encounter a problem with older installed
    versions of NumPy that pip did not delete becoming mixed with the current version,
    resulting in an `ImportError`. That problem is particularly common on Debian derived
    distributions due to a modified pip. The fix is to make sure all previous NumPy
    versions installed by pip have been removed. See [#12736](https://github.com/numpy/numpy/issues/12736)
    for discussion of the issue. Note that previously this problem resulted in an
    `AttributeError`.
  prefs: []
  type: TYPE_NORMAL
- en: Contributors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 16 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Antoine Pitrou
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arcesio Castaneda Medina +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charles Harris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Markiewicz +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Gohlke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher J. Markiewicz +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Hrisca +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EelcoPeacs +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OBATA Akio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralf Gommers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Berg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephan Hoyer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[#12767](https://github.com/numpy/numpy/pull/12767): ENH: add mm->q floordiv'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12768](https://github.com/numpy/numpy/pull/12768): ENH: port np.core.overrides
    to C for speed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12769](https://github.com/numpy/numpy/pull/12769): ENH: Add np.ctypeslib.as_ctypes_type(dtype),
    improve *np.ctypeslib.as_ctypes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12773](https://github.com/numpy/numpy/pull/12773): ENH: add “max difference”
    messages to np.testing.assert_array_equal…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12820](https://github.com/numpy/numpy/pull/12820): ENH: Add mm->qm divmod'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12890](https://github.com/numpy/numpy/pull/12890): ENH: add _dtype_ctype
    to namespace for freeze analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The changed error message emitted by array comparison testing functions may
    affect doctests. See below for detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Casting from double and single denormals to float16 has been corrected. In some
    rare cases, this may result in results being rounded up instead of down, changing
    the last bit (ULP) of the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: divmod operation is now supported for two `timedelta64` operands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The divmod operator now handles two `np.timedelta64` operands, with type signature
    `mm->qm`.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further improvements to `ctypes` support in `np.ctypeslib`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new [`numpy.ctypeslib.as_ctypes_type`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes_type
    "numpy.ctypeslib.as_ctypes_type") function has been added, which can be used to
    converts a *dtype* into a best-guess [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes
    "(in Python v3.11)") type. Thanks to this new function, [`numpy.ctypeslib.as_ctypes`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes
    "numpy.ctypeslib.as_ctypes") now supports a much wider range of array types, including
    structures, booleans, and integers of non-native endianness.
  prefs: []
  type: TYPE_NORMAL
- en: Array comparison assertions include maximum differences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Error messages from array comparison tests such as *np.testing.assert_allclose*
    now include “max absolute difference” and “max relative difference,” in addition
    to the previous “mismatch” percentage. This information makes it easier to update
    absolute and relative error tolerances.
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`timedelta64 % 0` behavior adjusted to return `NaT`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The modulus operation with two `np.timedelta64` operands now returns `NaT` in
    the case of division by zero, rather than returning zero
  prefs: []
  type: TYPE_NORMAL
- en: Contributors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A total of 16 people contributed to this release. People with a “+” by their
    names contributed a patch for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Antoine Pitrou
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arcesio Castaneda Medina +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charles Harris
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chris Markiewicz +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christoph Gohlke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Christopher J. Markiewicz +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daniel Hrisca +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EelcoPeacs +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eric Wieser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kevin Sheppard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matti Picus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OBATA Akio +
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralf Gommers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Berg
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephan Hoyer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tyler Reddy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[#12767](https://github.com/numpy/numpy/pull/12767): ENH: add mm->q floordiv'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12768](https://github.com/numpy/numpy/pull/12768): ENH: port np.core.overrides
    to C for speed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12769](https://github.com/numpy/numpy/pull/12769): ENH: Add np.ctypeslib.as_ctypes_type(dtype),
    improve *np.ctypeslib.as_ctypes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12773](https://github.com/numpy/numpy/pull/12773): ENH: add “max difference”
    messages to np.testing.assert_array_equal…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12820](https://github.com/numpy/numpy/pull/12820): ENH: Add mm->qm divmod'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#12890](https://github.com/numpy/numpy/pull/12890): ENH: add _dtype_ctype
    to namespace for freeze analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The changed error message emitted by array comparison testing functions may
    affect doctests. See below for detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Casting from double and single denormals to float16 has been corrected. In some
    rare cases, this may result in results being rounded up instead of down, changing
    the last bit (ULP) of the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: divmod operation is now supported for two `timedelta64` operands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The divmod operator now handles two `np.timedelta64` operands, with type signature
    `mm->qm`.
  prefs: []
  type: TYPE_NORMAL
- en: divmod operation is now supported for two `timedelta64` operands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The divmod operator now handles two `np.timedelta64` operands, with type signature
    `mm->qm`.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further improvements to `ctypes` support in `np.ctypeslib`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new [`numpy.ctypeslib.as_ctypes_type`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes_type
    "numpy.ctypeslib.as_ctypes_type") function has been added, which can be used to
    converts a *dtype* into a best-guess [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes
    "(in Python v3.11)") type. Thanks to this new function, [`numpy.ctypeslib.as_ctypes`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes
    "numpy.ctypeslib.as_ctypes") now supports a much wider range of array types, including
    structures, booleans, and integers of non-native endianness.
  prefs: []
  type: TYPE_NORMAL
- en: Array comparison assertions include maximum differences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Error messages from array comparison tests such as *np.testing.assert_allclose*
    now include “max absolute difference” and “max relative difference,” in addition
    to the previous “mismatch” percentage. This information makes it easier to update
    absolute and relative error tolerances.
  prefs: []
  type: TYPE_NORMAL
- en: Further improvements to `ctypes` support in `np.ctypeslib`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new [`numpy.ctypeslib.as_ctypes_type`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes_type
    "numpy.ctypeslib.as_ctypes_type") function has been added, which can be used to
    converts a *dtype* into a best-guess [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes
    "(in Python v3.11)") type. Thanks to this new function, [`numpy.ctypeslib.as_ctypes`](../reference/routines.ctypeslib.html#numpy.ctypeslib.as_ctypes
    "numpy.ctypeslib.as_ctypes") now supports a much wider range of array types, including
    structures, booleans, and integers of non-native endianness.
  prefs: []
  type: TYPE_NORMAL
- en: Array comparison assertions include maximum differences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Error messages from array comparison tests such as *np.testing.assert_allclose*
    now include “max absolute difference” and “max relative difference,” in addition
    to the previous “mismatch” percentage. This information makes it easier to update
    absolute and relative error tolerances.
  prefs: []
  type: TYPE_NORMAL
- en: Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`timedelta64 % 0` behavior adjusted to return `NaT`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The modulus operation with two `np.timedelta64` operands now returns `NaT` in
    the case of division by zero, rather than returning zero
  prefs: []
  type: TYPE_NORMAL
- en: '`timedelta64 % 0` behavior adjusted to return `NaT`'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The modulus operation with two `np.timedelta64` operands now returns `NaT` in
    the case of division by zero, rather than returning zero
  prefs: []
  type: TYPE_NORMAL
