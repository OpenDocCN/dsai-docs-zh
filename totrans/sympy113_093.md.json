["```py\nsympy.solvers.pde.pde_separate(eq, fun, sep, strategy='mul')\n```", "```py\n>>> from sympy import E, Eq, Function, pde_separate, Derivative as D\n>>> from sympy.abc import x, t\n>>> u, X, T = map(Function, 'uXT') \n```", "```py\n>>> eq = Eq(D(u(x, t), x), E**(u(x, t))*D(u(x, t), t))\n>>> pde_separate(eq, u(x, t), [X(x), T(t)], strategy='add')\n[exp(-X(x))*Derivative(X(x), x), exp(T(t))*Derivative(T(t), t)] \n```", "```py\n>>> eq = Eq(D(u(x, t), x, 2), D(u(x, t), t, 2))\n>>> pde_separate(eq, u(x, t), [X(x), T(t)], strategy='mul')\n[Derivative(X(x), (x, 2))/X(x), Derivative(T(t), (t, 2))/T(t)] \n```", "```py\nsympy.solvers.pde.pde_separate_add(eq, fun, sep)\n```", "```py\n>>> from sympy import E, Eq, Function, pde_separate_add, Derivative as D\n>>> from sympy.abc import x, t\n>>> u, X, T = map(Function, 'uXT') \n```", "```py\n>>> eq = Eq(D(u(x, t), x), E**(u(x, t))*D(u(x, t), t))\n>>> pde_separate_add(eq, u(x, t), [X(x), T(t)])\n[exp(-X(x))*Derivative(X(x), x), exp(T(t))*Derivative(T(t), t)] \n```", "```py\nsympy.solvers.pde.pde_separate_mul(eq, fun, sep)\n```", "```py\n>>> from sympy import Function, Eq, pde_separate_mul, Derivative as D\n>>> from sympy.abc import x, y\n>>> u, X, Y = map(Function, 'uXY') \n```", "```py\n>>> eq = Eq(D(u(x, y), x, 2), D(u(x, y), y, 2))\n>>> pde_separate_mul(eq, u(x, y), [X(x), Y(y)])\n[Derivative(X(x), (x, 2))/X(x), Derivative(Y(y), (y, 2))/Y(y)] \n```", "```py\nsympy.solvers.pde.pdsolve(eq, func=None, hint='default', dict=False, solvefun=None, **kwargs)\n```", "```py\n    >>> from sympy import Function, Derivative\n    >>> from sympy.abc import x, y # x and y are the independent variables\n    >>> f = Function(\"f\")(x, y) # f is a function of x and y\n    >>> # fx will be the partial derivative of f with respect to x\n    >>> fx = Derivative(f, x)\n    >>> # fy will be the partial derivative of f with respect to y\n    >>> fy = Derivative(f, y) \n    ```", "```py\n>>> from sympy.solvers.pde import pdsolve\n>>> from sympy import Function, Eq\n>>> from sympy.abc import x, y\n>>> f = Function('f')\n>>> u = f(x, y)\n>>> ux = u.diff(x)\n>>> uy = u.diff(y)\n>>> eq = Eq(1 + (2*(ux/u)) + (3*(uy/u)), 0)\n>>> pdsolve(eq)\nEq(f(x, y), F(3*x - 2*y)*exp(-2*x/13 - 3*y/13)) \n```", "```py\nsympy.solvers.pde.classify_pde(eq, func=None, dict=False, *, prep=True, **kwargs)\n```", "```py\n>>> from sympy.solvers.pde import classify_pde\n>>> from sympy import Function, Eq\n>>> from sympy.abc import x, y\n>>> f = Function('f')\n>>> u = f(x, y)\n>>> ux = u.diff(x)\n>>> uy = u.diff(y)\n>>> eq = Eq(1 + (2*(ux/u)) + (3*(uy/u)), 0)\n>>> classify_pde(eq)\n('1st_linear_constant_coeff_homogeneous',) \n```", "```py\nsympy.solvers.pde.checkpdesol(pde, sol, func=None, solve_for_func=True)\n```", "```py\n>>> from sympy import Function, symbols\n>>> from sympy.solvers.pde import checkpdesol, pdsolve\n>>> x, y = symbols('x y')\n>>> f = Function('f')\n>>> eq = 2*f(x,y) + 3*f(x,y).diff(x) + 4*f(x,y).diff(y)\n>>> sol = pdsolve(eq)\n>>> assert checkpdesol(eq, sol)[0]\n>>> eq = x*f(x,y) + f(x,y).diff(x)\n>>> checkpdesol(eq, sol)\n(False, (x*F(4*x - 3*y) - 6*F(4*x - 3*y)/25 + 4*Subs(Derivative(F(_xi_1), _xi_1), _xi_1, 4*x - 3*y))*exp(-6*x/25 - 8*y/25)) \n```", "```py\nsympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous(eq, func, order, match, solvefun)\n```", "```py\n>>> from sympy.solvers import pdsolve\n>>> from sympy.abc import x, y, a, b, c\n>>> from sympy import Function, pprint\n>>> f = Function('f')\n>>> u = f(x,y)\n>>> ux = u.diff(x)\n>>> uy = u.diff(y)\n>>> genform = a*ux + b*uy + c*u\n>>> pprint(genform)\n d               d\na*--(f(x, y)) + b*--(f(x, y)) + c*f(x, y)\n dx              dy\n\n>>> pprint(pdsolve(genform))\n -c*(a*x + b*y)\n ---------------\n 2    2\n a  + b\nf(x, y) = F(-a*y + b*x)*e \n```", "```py\n>>> from sympy import pdsolve\n>>> from sympy import Function, pprint\n>>> from sympy.abc import x,y\n>>> f = Function('f')\n>>> pdsolve(f(x,y) + f(x,y).diff(x) + f(x,y).diff(y))\nEq(f(x, y), F(x - y)*exp(-x/2 - y/2))\n>>> pprint(pdsolve(f(x,y) + f(x,y).diff(x) + f(x,y).diff(y)))\n x   y\n - - - -\n 2   2\nf(x, y) = F(x - y)*e \n```", "```py\nsympy.solvers.pde.pde_1st_linear_constant_coeff(eq, func, order, match, solvefun)\n```", "```py\n>>> from sympy.solvers import pdsolve\n>>> from sympy.abc import x, y, a, b, c\n>>> from sympy import Function, pprint\n>>> f = Function('f')\n>>> G = Function('G')\n>>> u = f(x, y)\n>>> ux = u.diff(x)\n>>> uy = u.diff(y)\n>>> genform = a*ux + b*uy + c*u - G(x,y)\n>>> pprint(genform)\n d               d\na*--(f(x, y)) + b*--(f(x, y)) + c*f(x, y) - G(x, y)\n dx              dy\n>>> pprint(pdsolve(genform, hint='1st_linear_constant_coeff_Integral'))\n //          a*x + b*y                                             \\         \\|\n ||              /                                                 |         ||\n ||             |                                                  |         ||\n ||             |                                      c*xi        |         ||\n ||             |                                     -------      |         ||\n ||             |                                      2    2      |         ||\n ||             |      /a*xi + b*eta  -a*eta + b*xi\\  a  + b       |         ||\n ||             |     G|------------, -------------|*e        d(xi)|         ||\n ||             |      |   2    2         2    2   |               |         ||\n ||             |      \\  a  + b         a  + b    /               |  -c*xi  ||\n ||             |                                                  |  -------||\n ||            /                                                   |   2    2||\n ||                                                                |  a  + b ||\nf(x, y) = ||F(eta) + -------------------------------------------------------|*e       ||\n ||                                  2    2                        |         ||\n \\\\                                 a  + b                         /         /|eta=-a*y + b*x, xi=a*x + b*y \n```", "```py\n>>> from sympy.solvers.pde import pdsolve\n>>> from sympy import Function, pprint, exp\n>>> from sympy.abc import x,y\n>>> f = Function('f')\n>>> eq = -2*f(x,y).diff(x) + 4*f(x,y).diff(y) + 5*f(x,y) - exp(x + 3*y)\n>>> pdsolve(eq)\nEq(f(x, y), (F(4*x + 2*y)*exp(x/2) + exp(x + 4*y)/15)*exp(-y)) \n```", "```py\nsympy.solvers.pde.pde_1st_linear_variable_coeff(eq, func, order, match, solvefun)\n```", "```py\n>>> from sympy.abc import x, y\n>>> from sympy import Function, pprint\n>>> a, b, c, G, f= [Function(i) for i in ['a', 'b', 'c', 'G', 'f']]\n>>> u = f(x,y)\n>>> ux = u.diff(x)\n>>> uy = u.diff(y)\n>>> genform = a(x, y)*u + b(x, y)*ux + c(x, y)*uy - G(x,y)\n>>> pprint(genform)\n d                     d\n-G(x, y) + a(x, y)*f(x, y) + b(x, y)*--(f(x, y)) + c(x, y)*--(f(x, y))\n dx                    dy \n```", "```py\n>>> from sympy.solvers.pde import pdsolve\n>>> from sympy import Function, pprint\n>>> from sympy.abc import x,y\n>>> f = Function('f')\n>>> eq =  x*(u.diff(x)) - y*(u.diff(y)) + y**2*u - y**2\n>>> pdsolve(eq)\nEq(f(x, y), F(x*y)*exp(y**2/2) + 1) \n```"]