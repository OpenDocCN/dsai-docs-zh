- en: Packaging (numpy.distutils)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包（numpy.distutils）
- en: 原文：[https://numpy.org/doc/1.26/reference/distutils.html](https://numpy.org/doc/1.26/reference/distutils.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/reference/distutils.html](https://numpy.org/doc/1.26/reference/distutils.html)
- en: Warning
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`numpy.distutils` is deprecated, and will be removed for Python >= 3.12\. For
    more details, see [Status of numpy.distutils and migration advice](distutils_status_migration.html#distutils-status-migration)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.distutils` 已被弃用，并将在 Python >= 3.12 版本中移除。更多详情，请参阅[Status of numpy.distutils
    and migration advice](distutils_status_migration.html#distutils-status-migration)。'
- en: Warning
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Note that `setuptools` does major releases often and those may contain changes
    that break `numpy.distutils`, which will *not* be updated anymore for new `setuptools`
    versions. It is therefore recommended to set an upper version bound in your build
    configuration for the last known version of `setuptools` that works with your
    build.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`setuptools`经常进行重大发布，可能包含破坏`numpy.distutils`的更改，而`numpy.distutils`将不再针对新的`setuptools`版本进行更新。因此，建议在您的构建配置中设置一个上限版本，以确保最后已知可与您的构建配合使用的`setuptools`版本。
- en: NumPy provides enhanced distutils functionality to make it easier to build and
    install sub-packages, auto-generate code, and extension modules that use Fortran-compiled
    libraries. To use features of NumPy distutils, use the `setup` command from `numpy.distutils.core`.
    A useful [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    class is also provided in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util") that can make it easier to construct keyword arguments
    to pass to the setup function (by passing the dictionary obtained from the todict()
    method of the class). More information is available in the [NumPy distutils -
    users guide](distutils_guide.html#distutils-user-guide).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了增强的 distutils 功能，使构建和安装子包、自动生成代码以及使用Fortran编译库的扩展模块更容易。要使用 NumPy distutils
    的功能，请使用`numpy.distutils.core`中的 `setup` 命令。同时，[`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util") 还提供了一个有用的 [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") 类，可以更轻松地构建传递给 setup 函数的关键字参数（通过传递从该类的
    todict() 方法获得的字典）。更多信息请参阅[NumPy distutils - 用户指南](distutils_guide.html#distutils-user-guide)。
- en: The choice and location of linked libraries such as BLAS and LAPACK as well
    as include paths and other such build options can be specified in a `site.cfg`
    file located in the NumPy root repository or a `.numpy-site.cfg` file in your
    home directory. See the `site.cfg.example` example file included in the NumPy
    repository or sdist for documentation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 选择和链接库的位置，例如 BLAS 和 LAPACK，以及包含路径等其他构建选项可以在 NumPy 根仓库中的 `site.cfg` 文件或者位于用户主目录中的
    `.numpy-site.cfg` 文件中指定。参见在 NumPy 仓库或者 sdist 中附带的 `site.cfg.example` 示例文件获取文档。
- en: '## Modules in [`numpy.distutils`](#module-numpy.distutils "numpy.distutils")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '## [`numpy.distutils`](#module-numpy.distutils "numpy.distutils") 中的模块'
- en: '[distutils.misc_util](distutils/misc_util.html)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[distutils.misc_util](distutils/misc_util.html)'
- en: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)'
- en: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)'
- en: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)'
- en: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)'
- en: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)'
- en: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)'
- en: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)'
- en: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)'
- en: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)'
- en: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)'
- en: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)'
- en: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)'
- en: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)'
- en: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)'
- en: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)'
- en: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)'
- en: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)'
- en: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)'
- en: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)'
- en: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)'
- en: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)'
- en: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)'
- en: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)'
- en: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
- en: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
- en: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
- en: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
- en: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
- en: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
- en: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
- en: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
- en: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
- en: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
- en: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
- en: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
- en: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
- en: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
- en: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
- en: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
- en: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
- en: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
- en: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
- en: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | Provides the *CCompilerOpt* class, used for
    handling the CPU/hardware optimization, starting from parsing the command arguments,
    to managing the relation between the CPU baseline and dispatch-able features,
    also generating the required C headers and ending with compiling the sources with
    proper compiler''s flags. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | 提供*CCompilerOpt*类，用于处理CPU/硬件优化，从解析命令参数开始，到管理CPU基线和可调度特性之间的关系，还生成所需的C标头，并以合适的编译器标志编译源代码。
    |'
- en: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
- en: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
- en: 'Parameters:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
- en: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
- en: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
- en: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) | Returns a list of files
    named ''fname'' from 1) System-wide directory (directory-location of this module)
    2) Users HOME directory (os.environ[''HOME'']) 3) Local directory |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) |  从1）系统范围的目录（这个模块的目录位置）2）用户HOME目录（os.environ[''HOME'']）3）本地目录返回一个名为“fname”的文件列表
    |'
- en: Configuration class
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置类
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Construct a configuration instance for the given package name. If *parent_name*
    is not None, then construct the package as a sub-package of the *parent_name*
    package. If *top_path* and *package_path* are None then they are assumed equal
    to the path of the file this instance was created in. The setup.py files in the
    numpy distribution are good examples of how to use the [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") instance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的包名称构造一个配置实例。如果*parent_name*不为None，则构造包作为*parent_name*包的子包。如果*top_path*和*package_path*为None，则它们被假定为与创建此实例的文件的路径相等。numpy分配中的setup.py文件是如何使用[`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration")实例的很好的例子。
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Return a dictionary compatible with the keyword arguments of distutils setup
    function.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与distutils setup函数的关键字参数兼容的字典。
- en: Examples
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Return the distutils distribution object for self.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回self的distutils分发对象。
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Return list of subpackage configurations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子包配置列表。
- en: 'Parameters:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**subpackage_name**str or None'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_name**str或None'
- en: Name of the subpackage to get the configuration. ‘*’ in subpackage_name is handled
    as a wildcard.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 获取配置的子包的名称。在subpackage_name中的‘*’被视为通配符。
- en: '**subpackage_path**str'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_path**str'
- en: If None, then the path is assumed to be the local path plus the subpackage_name.
    If a setup.py file is not found in the subpackage_path, then a default configuration
    is used.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为None，则假定路径为本地路径加上subpackage_name。如果在subpackage_path中找不到setup.py文件，则使用默认配置。
- en: '**parent_name**str'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**parent_name**str'
- en: Parent name.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 父名称。
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add a sub-package to the current Configuration instance.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 向当前Configuration实例添加一个子包。
- en: This is useful in a setup.py script for adding sub-packages to a package.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在setup.py脚本中，这对于向包添加子包非常有用。
- en: 'Parameters:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**subpackage_name**str'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_name**str'
- en: name of the subpackage
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 子包的名称
- en: '**subpackage_path**str'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_path**str'
- en: if given, the subpackage path such as the subpackage is in subpackage_path /
    subpackage_name. If None,the subpackage is assumed to be located in the local
    path / subpackage_name.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供，则子包路径例如子包位于子包路径/子包名称。如果为None，则假定子包位于本地路径/子包名称。
- en: '**standalone**bool'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**standalone**bool'
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add data files to configuration data_files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据文件添加到配置数据文件中。
- en: 'Parameters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**files**sequence'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**files**序列'
- en: Argument(s) can be either
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是
- en: 2-sequence (<datadir prefix>,<path to data file(s)>)
  id: totrans-93
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-序列（<数据目录前缀>，<数据文件路径>）
- en: ''
  id: totrans-94
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: paths to data files where python datadir prefix defaults to package dir.
  id: totrans-96
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据文件的路径，其中python数据目录前缀默认为包目录。
- en: Notes
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The form of each element of the files sequence is very flexible allowing many
    combinations of where to get the files from the package and where they should
    ultimately be installed on the system. The most basic usage is for an element
    of the files argument sequence to be a simple filename. This will cause that file
    from the local path to be installed to the installation path of the self.name
    package (package path). The file argument can also be a relative path in which
    case the entire relative path will be installed into the package directory. Finally,
    the file can be an absolute path name in which case the file will be found at
    the absolute path name but installed to the package path.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 文件序列的每个元素的形式非常灵活，允许从包中获取文件的多种组合以及它们应最终安装到系统的位置。最基本的用法是让文件参数序列的一个元素成为一个简单的文件名。这将导致将该文件从本地路径安装到self.name包的安装路径（包路径）。文件参数还可以是相对路径，此时整个相对路径将安装到包目录中。最后，文件可以是绝对路径名，此时文件将在绝对路径名处找到，但安装到包路径。
- en: This basic behavior can be augmented by passing a 2-tuple in as the file argument.
    The first element of the tuple should specify the relative path (under the package
    install directory) where the remaining sequence of files should be installed to
    (it has nothing to do with the file-names in the source distribution). The second
    element of the tuple is the sequence of files that should be installed. The files
    in this sequence can be filenames, relative paths, or absolute paths. For absolute
    paths the file will be installed in the top-level package installation directory
    (regardless of the first argument). Filenames and relative path names will be
    installed in the package install directory under the path name given as the first
    element of the tuple.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将2元组作为文件参数传递来增强此基本行为。元组的第一个元素应指定应将其余文件序列安装到的相对路径（在包安装目录下）（它与源分发中的文件名无关）。元组的第二个元素是应安装的文件序列。此序列中的文件可以是文件名、相对路径或绝对路径。对于绝对路径，文件将安装在顶级包安装目录中（不管第一个参数如何）。文件名和相对路径名将安装在给定为元组第一个元素的路径名下的包安装目录中。
- en: 'Rules for installation paths:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 安装路径规则：
- en: file.txt -> (., file.txt)-> parent/file.txt
  id: totrans-101
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: file.txt -> (., file.txt)-> parent/file.txt
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
  id: totrans-104
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
- en: ''
  id: totrans-105
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-106
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
- en: ''
  id: totrans-108
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*`.txt -> parent/a.txt, parent/b.txt'
  id: totrans-110
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*`.txt -> parent/a.txt, parent/b.txt'
- en: ''
  id: totrans-111
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-112
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
  id: totrans-113
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
- en: ''
  id: totrans-114
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-115
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
  id: totrans-116
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
- en: ''
  id: totrans-117
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-118
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, file.txt) -> parent/sun/file.txt
  id: totrans-119
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-120
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/file.txt) -> parent/sun/file.txt
  id: totrans-122
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, bar/file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-124
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
  id: totrans-125
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  id: totrans-128
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-130
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  id: totrans-131
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
- en: ''
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-133
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
  id: totrans-134
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
- en: An additional feature is that the path to a data-file can actually be a function
    that takes no arguments and returns the actual path(s) to the data-files. This
    is useful when the data files are generated while building the package.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特性是数据文件的路径实际上可以是一个不带参数且返回数据文件实际路径的函数。这在构建包时生成数据文件时非常有用。
- en: Examples
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: Add files to the list of data_files to be included with the package.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件添加到要随包一起包含的数据文件列表中。
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'will install these data files to:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些数据文件安装到：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'where <package install directory> is the package (or sub-package) directory
    such as ‘/usr/lib/python2.4/site-packages/mypackage’ (‘C: Python2.4 Lib site-packages
    mypackage’) or ‘/usr/lib/python2.4/site- packages/mypackage/mysubpackage’ (‘C:
    Python2.4 Lib site-packages mypackage mysubpackage’).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '其中<package install directory>是包（或子包）目录，例如‘/usr/lib/python2.4/site-packages/mypackage’（‘C:
    Python2.4 Lib site-packages mypackage’）或‘/usr/lib/python2.4/site- packages/mypackage/mysubpackage’（‘C:
    Python2.4 Lib site-packages mypackage mysubpackage’）。'
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Recursively add files under data_path to data_files list.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地将data_path下的文件添加到data_files列表中。
- en: Recursively add files under data_path to the list of data_files to be installed
    (and distributed). The data_path can be either a relative path-name, or an absolute
    path-name, or a 2-tuple where the first argument shows where in the install directory
    the data directory should be installed to.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地将data_path下的文件添加到要安装（和分发）的data_files列表中。data_path可以是相对路径名、绝对路径名，或者是一个2元组，第一个参数指示数据目录应安装到安装目录的何处。
- en: 'Parameters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**data_path**seq or str'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**data_path**seq或str'
- en: Argument can be either
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是
- en: 2-sequence (<datadir suffix>, <path to data directory>)
  id: totrans-148
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2序列（<datadir后缀>，<数据目录路径>）
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-150
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path to data directory where python datadir suffix defaults to package dir.
  id: totrans-151
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据目录的路径，其中python datadir后缀默认为包目录。
- en: Notes
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: 'Rules for installation paths:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 安装路径规则：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Examples
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'For example suppose the source directory contains fun/foo.dat and fun/bar/car.dat:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设源目录包含fun/foo.dat和fun/bar/car.dat：
- en: '[PRE11]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Will install data-files to the locations:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置：
- en: '[PRE12]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add paths to configuration include directories.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将路径添加到配置的包含目录中。
- en: Add the given sequence of paths to the beginning of the include_dirs list. This
    list will be visible to all extension modules of the current package.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的路径序列添加到include_dirs列表的开头。这个列表将���当前包的所有扩展模块可见。
- en: '[PRE14]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Add installable headers to configuration.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将可安装的头文件添加到配置中。
- en: Add the given sequence of files to the beginning of the headers list. By default,
    headers will be installed under <python- include>/<self.name.replace(‘.’,’/’)>/
    directory. If an item of files is a tuple, then its first argument specifies the
    actual installation location relative to the <python-include> path.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的文件序列添加到头文件列表的开头。默认情况下，头文件将安装在<python-include>/<self.name.replace(‘.’,’/’)>/目录下。如果files的项是元组，则其第一个参数指定相对于<python-include>路径的实际安装位置。
- en: 'Parameters:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**files**str or seq'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**files**str或seq'
- en: 'Argument(s) can be either:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是：
- en: 2-sequence (<includedir suffix>,<path to header file(s)>)
  id: totrans-169
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2序列（<includedir后缀>，<头文件路径>）
- en: ''
  id: totrans-170
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-171
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path(s) to header file(s) where python includedir suffix will default to package
    name.
  id: totrans-172
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头文件路径，其中python 包含目录后缀将默认为包名称。
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add extension to configuration.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将扩展添加到配置中。
- en: Create and add an Extension instance to the ext_modules list. This method also
    takes the following optional keyword arguments that are passed on to the Extension
    constructor.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并将一个Extension实例添加到ext_modules列表中。此方法还接受以下可选关键字参数，这些参数传递给Extension构造函数。
- en: 'Parameters:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**str'
- en: name of the extension
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展名
- en: '**sources**seq'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**seq'
- en: list of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件列表。源文件列表可能包含函数（称为源文件生成器），它们必须将扩展实例和构建目录作为输入，并返回一个源文件或源文件列表或None。如果返回None，则不生成任何源文件。如果处理完所有源文件生成器后Extension实例没有源文件，则不会构建扩展模块。
- en: '**include_dirs**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**'
- en: '**define_macros**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**define_macros**'
- en: '**undef_macros**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**undef_macros**'
- en: '**library_dirs**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**library_dirs**'
- en: '**libraries**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**libraries**'
- en: '**runtime_library_dirs**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**runtime_library_dirs**'
- en: '**extra_objects**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_objects**'
- en: '**extra_compile_args**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_compile_args**'
- en: '**extra_link_args**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_link_args**'
- en: '**extra_f77_compile_args**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_f77_compile_args**'
- en: '**extra_f90_compile_args**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_f90_compile_args**'
- en: '**export_symbols**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**export_symbols**'
- en: '**swig_opts**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**swig_opts**'
- en: '**depends**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**depends**'
- en: The depends list contains paths to files or directories that the sources of
    the extension module depend on. If any path in the depends list is newer than
    the extension module, then the module will be rebuilt.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖列表包含扩展模块源文件所依赖的文件或目录的路径。如果依赖列表中的任何路径比扩展模块更新，那么将重新构建该模块。
- en: '**language**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**language**'
- en: '**f2py_options**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**f2py_options**'
- en: '**module_dirs**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_dirs**'
- en: '**extra_info**dict or list'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_info**dict或list'
- en: dict or list of dict of keywords to be appended to keywords.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要附加到关键字的关键字的字典或关键字的列表。
- en: Notes
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: The self.paths(…) method is applied to all lists that may contain paths.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对可能包含路径的所有列表应用 self.paths(…) 方法。
- en: '[PRE16]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add library to configuration.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将库添加到配置中。
- en: 'Parameters:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**str'
- en: Name of the extension.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的名称。
- en: '**sources**sequence'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**序列'
- en: List of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 源列表。源列表可能包含函数（称为源生成器），这些函数必须接受扩展实例和构建目录作为输入，并返回一个源文件或源文件列表或 None。如果返回 None，则不生成任何源。如果
    Extension 实例在处理所有源生成器后没有源，则不会构建扩展模块。
- en: '**build_info**dict, optional'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_info**字典，可选'
- en: 'The following keys are allowed:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 允许以下键：
- en: depends
  id: totrans-212
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项
- en: ''
  id: totrans-213
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-214
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  id: totrans-215
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: ''
  id: totrans-216
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-217
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  id: totrans-218
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: include_dirs
- en: ''
  id: totrans-219
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-220
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  id: totrans-221
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_compiler_args
- en: ''
  id: totrans-222
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-223
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  id: totrans-224
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f77_compile_args
- en: ''
  id: totrans-225
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-226
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  id: totrans-227
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f90_compile_args
- en: ''
  id: totrans-228
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-229
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  id: totrans-230
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: f2py_options
- en: ''
  id: totrans-231
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-232
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  id: totrans-233
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: '[PRE17]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add scripts to configuration.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本添加到配置中。
- en: Add the sequence of files to the beginning of the scripts list. Scripts will
    be installed under the <prefix>/bin/ directory.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件序列添加到脚本列表的开头。脚本将安装在 <prefix>/bin/ 目录下。
- en: '[PRE18]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Similar to add_library, but the specified library is installed.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 add_library，但安装指定的库。
- en: Most C libraries used with [`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(in Python v3.11)") are only used to build python extensions, but libraries built
    through this method will be installed so that they can be reused by third-party
    packages.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数与 [`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(在 Python v3.11 中)") 一起使用的 C 库仅用于构建 Python 扩展，但通过此方法构建的库将被安装，以便它们可以被第三方包重用。
- en: 'Parameters:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**str'
- en: Name of the installed library.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 安装的库的名称。
- en: '**sources**sequence'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**序列'
- en: List of the library’s source files. See [`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library") for details.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 库的源文件列表。有关详细信息，请参见 [`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library")。
- en: '**install_dir**str'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**install_dir**str'
- en: Path to install the library, relative to the current sub-package.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 库的安装路径，相对于当前子包。
- en: '**build_info**dict, optional'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_info**字典，可选'
- en: 'The following keys are allowed:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 允许以下键：
- en: depends
  id: totrans-249
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项
- en: ''
  id: totrans-250
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  id: totrans-252
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: ''
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  id: totrans-255
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: include_dirs
- en: ''
  id: totrans-256
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-257
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  id: totrans-258
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_compiler_args
- en: ''
  id: totrans-259
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-260
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  id: totrans-261
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f77_compile_args
- en: ''
  id: totrans-262
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-263
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  id: totrans-264
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f90_compile_args
- en: ''
  id: totrans-265
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-266
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  id: totrans-267
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: f2py_options
- en: ''
  id: totrans-268
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-269
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  id: totrans-270
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: 'Returns:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: None
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: None
- en: See also
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library"),
    [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library")，[`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config")，[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
- en: Notes
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: The best way to encode the options required to link against the specified C
    libraries is to use a “libname.ini” file, and use [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") to retrieve the required options (see [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config") for more information).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 链接到指定的 C 库所需选项的最佳方法是使用“libname.ini”文件，并使用 [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") 检索所需的选项（有关更多信息，请参见 [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config")）。
- en: '[PRE19]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Generate and install a npy-pkg config file from a template.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板生成并安装一个 npy-pkg 配置文件。
- en: The config file generated from *template* is installed in the given install
    directory, using *subst_dict* for variable substitution.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *template* 生成的配置文件将使用 *subst_dict* 进行变量替换，并安装在给定的安装目录中。
- en: 'Parameters:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**template**str'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**template**str'
- en: The path of the template, relatively to the current package path.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的路径，相对于当前包路径。
- en: '**install_dir**str'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**install_dir**str'
- en: Where to install the npy-pkg config file, relatively to the current package
    path.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 npy-pkg 配置文件的位置，相对于当前软件包路径而言。
- en: '**subst_dict**dict, optional'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**subst_dict**dict，可选'
- en: If given, any string of the form `@key@` will be replaced by `subst_dict[key]`
    in the template file when installed. The install prefix is always available through
    the variable `@prefix@`, since the install prefix is not easy to get reliably
    from setup.py.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了任何形式为 `@key@` 的字符串，将在模板文件安装时将其替换为 `subst_dict[key]`。安装前缀始终可以通过变量 `@prefix@`
    获得，因为从 setup.py 可靠地获取安装前缀并不容易。
- en: See also
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library")，[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
- en: Notes
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: This works for both standard installs and in-place builds, i.e. the `@prefix@`
    refer to the source directory for in-place builds.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于标准安装和就地编译，即 `@prefix@` 指的是就地编译的源目录。
- en: Examples
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE20]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Assuming the foo.ini.in file has the following content:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 foo.ini.in 文件具有以下内容：
- en: '[PRE21]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The generated file will have the following content:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件将具有以下内容：
- en: '[PRE22]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: and will be installed as foo.ini in the ‘lib’ subpath.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 并将安装为 `lib` 子路径下的 foo.ini 文件。
- en: When cross-compiling with numpy distutils, it might be necessary to use modified
    npy-pkg-config files. Using the default/generated files will link with the host
    libraries (i.e. libnpymath.a). For cross-compilation you of-course need to link
    with target libraries, while using the host Python installation.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 numpy distutils 进行交叉编译时，可能需要使用修改后的 npy-pkg-config 文件。使用默认生成的文件将链接到主机库（即
    libnpymath.a）。而在交叉编译时，必须链接到目标库，同时使用主机 Python 安装。
- en: You can copy out the numpy/core/lib/npy-pkg-config directory, add a pkgdir value
    to the .ini files and set NPY_PKG_CONFIG_PATH environment variable to point to
    the directory with the modified npy-pkg-config files.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以拷贝 numpy/core/lib/npy-pkg-config 目录，向 .ini 文件中添加 pkgdir 值，并将 NPY_PKG_CONFIG_PATH
    环境变量设置为指向修改后的 npy-pkg-config 文件所在的目录。
- en: 'Example npymath.ini modified for cross-compilation:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 修改的 npymath.ini 示例用于交叉编译：
- en: '[PRE23]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Apply glob to paths and prepend local_path if needed.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 对路径应用 glob 并根据需要添加 local_path。
- en: Applies glob.glob(…) to each path in the sequence (if needed) and pre-pends
    the local_path if needed. Because this is called on all source lists, this allows
    wildcard characters to be specified in lists of sources for extension modules
    and libraries and scripts and allows path-names be relative to the source directory.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 对序列中的每个路径应用 glob.glob(…)（如果需要），并根据需要添加 local_path。因为此方法在所有源列表上调用，所以可以在扩展模块、库、脚本的源列表中指定通配符和相对于源目录的路径名。
- en: '[PRE25]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Returns the numpy.distutils config command instance.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 numpy.distutils 配置命令的实例。
- en: '[PRE26]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Return a path to a temporary directory where temporary files should be placed.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应放置临时文件的临时目录的路径。
- en: '[PRE27]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Check for availability of Fortran 77 compiler.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Fortran 77 编译器的可用性。
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码生成函数中使用它，以确保设置的发行实例已被初始化。
- en: Notes
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: True if a Fortran 77 compiler is available (because a simple Fortran 77 code
    was able to be compiled successfully).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在 Fortran 77 编译器（因为简单的 Fortran 77 代码能够成功编译），则为真。
- en: '[PRE28]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Check for availability of Fortran 90 compiler.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Fortran 90 编译器的可用性。
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码生成函数中使用它，以确保设置的发行实例已被初始化。
- en: Notes
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: True if a Fortran 90 compiler is available (because a simple Fortran 90 code
    was able to be compiled successfully)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在 Fortran 90 编译器（因为简单的 Fortran 90 代码能够成功编译），则为真。
- en: '[PRE29]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Try to get version string of a package.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试获取软件包的版本字符串。
- en: Return a version string of the current package or None if the version information
    could not be detected.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前软件包的版本字符串，如果无法检测到版本信息，则返回 None。
- en: Notes
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: This method scans files named __version__.py, <packagename>_version.py, version.py,
    and __svn_version__.py for string variables version, __version__, and <packagename>_version,
    until a version number is found.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法扫描名为 __version__.py、<packagename>_version.py、version.py 和 __svn_version__.py
    的文件，以查找字符串变量 version、__version__ 和 <packagename>_version，直到找到版本号。
- en: '[PRE30]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Appends a data function to the data_files list that will generate __svn_version__.py
    file to the current package directory.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 向data_files列表附加一个数据函数，用于在当前包目录中生成__svn_version__.py文件。
- en: Generate package __svn_version__.py file from SVN revision number, it will be
    removed after python exits but will be available when sdist, etc commands are
    executed.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 从SVN版本号生成包__svn_version__.py文件，它在python退出后将被删除，但在执行sdist等命令时可用。
- en: Notes
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If __svn_version__.py existed before, nothing is done.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果__svn_version__.py在之前存在，则不执行任何操作。
- en: This is intended for working with source directories that are in an SVN repository.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于在SVN存储库中的源目录中的工作。
- en: '[PRE31]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Generate package __config__.py file containing system_info information used
    during building the package.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 生成包含在构建软件包期间使用的system_info信息的包__config__.py文件。
- en: This file is installed to the package installation directory.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将被安装到包安装目录中。
- en: '[PRE32]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Get resources information.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 获取资源信息。
- en: Return information (from system_info.get_info) for all of the names in the argument
    list in a single dictionary.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 以单个字典的形式返回参数列表中所有名称的信息（来自system_info.get_info）。
- en: Building Installable C libraries
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建可安装的C库
- en: 'Conventional C libraries (installed through *add_library*) are not installed,
    and are just used during the build (they are statically linked). An installable
    C library is a pure C library, which does not depend on the python C runtime,
    and is installed such that it may be used by third-party packages. To build and
    install the C library, you just use the method *add_installed_library* instead
    of *add_library*, which takes the same arguments except for an additional `install_dir`
    argument:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的C库（通过*add_library*安装）不会被安装，仅在构建过程中使用（它们是静态链接的）。可安装的C库是一个纯C库，不依赖于python C运行时，并且被安装以便它可以被第三方软件包使用。要构建和安装C库，只需使用方法*add_installed_library*，而不是*add_library*，它除了额外的`install_dir`参数外，其他参数和*add_library*相同：
- en: '[PRE33]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: npy-pkg-config files
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npy-pkg-config文件
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使必要的构建选项对第三方可用，您可以使用[`numpy.distutils`](#module-numpy.distutils "numpy.distutils")中实现的*npy-pkg-config*机制。该机制基于包含所有选项的.ini文件。.ini文件与pkg-config
    UNIX实用程序使用的.pc文件非常相似：
- en: '[PRE34]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在构建时需要生成该文件，因为它仅需要在构建时才能获得一些已知信息（例如前缀）。如果使用[`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration")方法*add_npy_pkg_config*，则大部分情况下会自动生成。假设我们有一个模板文件foo.ini.in如下所示：
- en: '[PRE35]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'and the following code in setup.py:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 以及setup.py中的以下代码：
- en: '[PRE36]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件foo.ini安装到目录package_dir/lib中，并且foo.ini文件将从foo.ini.in生成，其中每个`@version@`都将被替换为`subst_dict['version']`。字典还自动添加了一个额外的前缀替换规则，其中包含安装前缀（因为这不容易从setup.py中获取）。npy-pkg-config文件也可以安装在与numpy使用的相同位置，使用从`get_npy_pkg_dir`函数返回的路径。
- en: Reusing a C library from another package
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重用另一个软件包中的C库
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 信息可以很容易地从[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")函数中获取，该函数位于[`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util")中：
- en: '[PRE37]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提供一个附加的 .ini 文件路径列表给 [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")。
- en: Conversion of `.src` files
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.src` 文件的转换  '
- en: NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases. See [Conversion of .src files using
    Templates](distutils_guide.html#templating).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy distutils 支持自动转换命名为 <somefile>.src 的源文件。此功能可用于维护非常相似的代码块，只需在块之间进行简单的更改。在设置的构建阶段中，如果遇到名为
    <somefile>.src 的模板文件，则会从模板构造一个名为 <somefile> 的新文件，并将其放置在生成目录中以供使用。支持两种模板转换形式。第一种形式用于命名为
    <file>.ext.src 的文件，其中 ext 是已识别的 Fortran 扩展名（f、f90、f95、f77、for、ftn、pyf）。第二种形式用于所有其他情况。请参阅
    [使用模板转换 .src 文件](distutils_guide.html#templating)。
- en: '## Modules in [`numpy.distutils`](#module-numpy.distutils "numpy.distutils")'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '## Modules in [`numpy.distutils`](#module-numpy.distutils "numpy.distutils")  '
- en: '[distutils.misc_util](distutils/misc_util.html)'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[distutils.misc_util](distutils/misc_util.html)  '
- en: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`all_strings`](distutils/misc_util.html#numpy.distutils.misc_util.all_strings)  '
- en: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`allpath`](distutils/misc_util.html#numpy.distutils.misc_util.allpath)  '
- en: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`appendpath`](distutils/misc_util.html#numpy.distutils.misc_util.appendpath)  '
- en: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`as_list`](distutils/misc_util.html#numpy.distutils.misc_util.as_list)  '
- en: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`blue_text`](distutils/misc_util.html#numpy.distutils.misc_util.blue_text)  '
- en: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`cyan_text`](distutils/misc_util.html#numpy.distutils.misc_util.cyan_text)  '
- en: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`cyg2win32`](distutils/misc_util.html#numpy.distutils.misc_util.cyg2win32)  '
- en: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`default_config_dict`](distutils/misc_util.html#numpy.distutils.misc_util.default_config_dict)  '
- en: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`dict_append`](distutils/misc_util.html#numpy.distutils.misc_util.dict_append)  '
- en: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`dot_join`](distutils/misc_util.html#numpy.distutils.misc_util.dot_join)  '
- en: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`exec_mod_from_location`](distutils/misc_util.html#numpy.distutils.misc_util.exec_mod_from_location)  '
- en: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`filter_sources`](distutils/misc_util.html#numpy.distutils.misc_util.filter_sources)  '
- en: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`generate_config_py`](distutils/misc_util.html#numpy.distutils.misc_util.generate_config_py)  '
- en: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_build_architecture`](distutils/misc_util.html#numpy.distutils.misc_util.get_build_architecture)  '
- en: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_cmd`](distutils/misc_util.html#numpy.distutils.misc_util.get_cmd)  '
- en: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_data_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_data_files)  '
- en: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_dependencies`](distutils/misc_util.html#numpy.distutils.misc_util.get_dependencies)  '
- en: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)'
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_ext_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_ext_source_files)  '
- en: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_frame`](distutils/misc_util.html#numpy.distutils.misc_util.get_frame)  '
- en: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info)  '
- en: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_language`](distutils/misc_util.html#numpy.distutils.misc_util.get_language)  '
- en: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_lib_source_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_lib_source_files)  '
- en: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_mathlibs`](distutils/misc_util.html#numpy.distutils.misc_util.get_mathlibs)  '
- en: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_num_build_jobs`](distutils/misc_util.html#numpy.distutils.misc_util.get_num_build_jobs)'
- en: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_numpy_include_dirs`](distutils/misc_util.html#numpy.distutils.misc_util.get_numpy_include_dirs)'
- en: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_pkg_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_pkg_info)'
- en: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`get_script_files`](distutils/misc_util.html#numpy.distutils.misc_util.get_script_files)'
- en: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`gpaths`](distutils/misc_util.html#numpy.distutils.misc_util.gpaths)'
- en: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`green_text`](distutils/misc_util.html#numpy.distutils.misc_util.green_text)'
- en: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`has_cxx_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_cxx_sources)'
- en: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`has_f_sources`](distutils/misc_util.html#numpy.distutils.misc_util.has_f_sources)'
- en: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_local_src_dir`](distutils/misc_util.html#numpy.distutils.misc_util.is_local_src_dir)'
- en: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_sequence`](distutils/misc_util.html#numpy.distutils.misc_util.is_sequence)'
- en: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`is_string`](distutils/misc_util.html#numpy.distutils.misc_util.is_string)'
- en: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`mingw32`](distutils/misc_util.html#numpy.distutils.misc_util.mingw32)'
- en: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`minrelpath`](distutils/misc_util.html#numpy.distutils.misc_util.minrelpath)'
- en: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`njoin`](distutils/misc_util.html#numpy.distutils.misc_util.njoin)'
- en: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`red_text`](distutils/misc_util.html#numpy.distutils.misc_util.red_text)'
- en: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`sanitize_cxx_flags`](distutils/misc_util.html#numpy.distutils.misc_util.sanitize_cxx_flags)'
- en: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`terminal_has_colors`](distutils/misc_util.html#numpy.distutils.misc_util.terminal_has_colors)'
- en: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`yellow_text`](distutils/misc_util.html#numpy.distutils.misc_util.yellow_text)'
- en: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| [`ccompiler`](generated/numpy.distutils.ccompiler.html#module-numpy.distutils.ccompiler
    "numpy.distutils.ccompiler") |  |'
- en: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | Provides the *CCompilerOpt* class, used for
    handling the CPU/hardware optimization, starting from parsing the command arguments,
    to managing the relation between the CPU baseline and dispatch-able features,
    also generating the required C headers and ending with compiling the sources with
    proper compiler''s flags. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| [`ccompiler_opt`](generated/numpy.distutils.ccompiler_opt.html#module-numpy.distutils.ccompiler_opt
    "numpy.distutils.ccompiler_opt") | 提供*CCompilerOpt*类，用于处理CPU/硬件优化，从解析命令参数开始，管理CPU基线和可调度功能之间的关系，还生成所需的C头文件，最后以正确的编译器标志编译源代码。'
- en: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| [`cpuinfo.cpu`](generated/numpy.distutils.cpuinfo.cpu.html#numpy.distutils.cpuinfo.cpu
    "numpy.distutils.cpuinfo.cpu") |  |'
- en: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| [`core.Extension`](generated/numpy.distutils.core.Extension.html#numpy.distutils.core.Extension
    "numpy.distutils.core.Extension")(name, sources[, ...]) |'
- en: 'Parameters:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 'Parameters:'
- en: '|'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| [`exec_command`](generated/numpy.distutils.exec_command.html#module-numpy.distutils.exec_command
    "numpy.distutils.exec_command") | exec_command |'
- en: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| [`log.set_verbosity`](generated/numpy.distutils.log.set_verbosity.html#numpy.distutils.log.set_verbosity
    "numpy.distutils.log.set_verbosity")(v[, force]) |  |'
- en: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| [`system_info.get_info`](generated/numpy.distutils.system_info.get_info.html#numpy.distutils.system_info.get_info
    "numpy.distutils.system_info.get_info")(name[, notfound_action]) | notfound_action:
    |'
- en: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) | Returns a list of files
    named ''fname'' from 1) System-wide directory (directory-location of this module)
    2) Users HOME directory (os.environ[''HOME'']) 3) Local directory |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| [`system_info.get_standard_file`](generated/numpy.distutils.system_info.get_standard_file.html#numpy.distutils.system_info.get_standard_file
    "numpy.distutils.system_info.get_standard_file")(fname) | 从以下位置之一返回名为 ''fname''
    的文件列表：1) 系统范围的目录（该模块的目录位置） 2) 用户主目录（os.environ[''HOME'']） 3) 本地目录 |'
- en: Configuration class
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置类
- en: '[PRE38]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Construct a configuration instance for the given package name. If *parent_name*
    is not None, then construct the package as a sub-package of the *parent_name*
    package. If *top_path* and *package_path* are None then they are assumed equal
    to the path of the file this instance was created in. The setup.py files in the
    numpy distribution are good examples of how to use the [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") instance.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的包名称构造一个配置实例。如果parent_name不为None，则将包构造为parent_name包的子包。如果top_path和package_path为None，则它们被假定为与创建此实例的文件的路径相等。numpy分发中的setup.py文件是如何使用[`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration")实例的好例子。
- en: '[PRE39]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return a dictionary compatible with the keyword arguments of distutils setup
    function.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与distutils安装函数的关键字参数兼容的字典。
- en: Examples
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE40]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Return the distutils distribution object for self.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 返回self的distutils分发对象。
- en: '[PRE42]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return list of subpackage configurations.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子包配置的列表。
- en: 'Parameters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**subpackage_name**str or None'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_name**str 或 None'
- en: Name of the subpackage to get the configuration. ‘*’ in subpackage_name is handled
    as a wildcard.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 获取配置的子包名称。子包名称中的‘*’将被视为通配符处理。
- en: '**subpackage_path**str'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_path**str'
- en: If None, then the path is assumed to be the local path plus the subpackage_name.
    If a setup.py file is not found in the subpackage_path, then a default configuration
    is used.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为None，则路径假定为本地路径加上subpackage_name。如果在subpackage_path中找不到setup.py文件，则使用默认配置。
- en: '**parent_name**str'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**parent_name**str'
- en: Parent name.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 父级名称。
- en: '[PRE43]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Add a sub-package to the current Configuration instance.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 将子包添加到当前Configuration实例中。
- en: This is useful in a setup.py script for adding sub-packages to a package.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 这在setup.py脚本中对包添加子包时非常有用。
- en: 'Parameters:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**subpackage_name**str'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_name**str'
- en: name of the subpackage
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 子包的名称。
- en: '**subpackage_path**str'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '**subpackage_path**str'
- en: if given, the subpackage path such as the subpackage is in subpackage_path /
    subpackage_name. If None,the subpackage is assumed to be located in the local
    path / subpackage_name.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了该参数，则子包的路径为subpackage_path / subpackage_name。如果为None，则假定子包位于本地路径 / subpackage_name。
- en: '**standalone**bool'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '**standalone**bool'
- en: '[PRE44]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Add data files to configuration data_files.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据文件添加到配置数据文件中。
- en: 'Parameters:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**files**sequence'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**files**sequence'
- en: Argument(s) can be either
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是以下内容之一
- en: 2-sequence (<datadir prefix>,<path to data file(s)>)
  id: totrans-438
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2-sequence（<datadir前缀>，<数据文件的路径>）
- en: ''
  id: totrans-439
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-440
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: paths to data files where python datadir prefix defaults to package dir.
  id: totrans-441
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据文件的路径，默认为包目录。
- en: Notes
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: The form of each element of the files sequence is very flexible allowing many
    combinations of where to get the files from the package and where they should
    ultimately be installed on the system. The most basic usage is for an element
    of the files argument sequence to be a simple filename. This will cause that file
    from the local path to be installed to the installation path of the self.name
    package (package path). The file argument can also be a relative path in which
    case the entire relative path will be installed into the package directory. Finally,
    the file can be an absolute path name in which case the file will be found at
    the absolute path name but installed to the package path.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 文件序列的每个元素的形式非常灵活，允许从包中获取文件的许多组合，以及它们应该最终安装在系统上的位置。最基本的用法是将files参数序列的一个元素设置为简单的文件名。这将导致将本地路径的该文件安装到self.name包的安装路径（包路径）中。文件参数还可以是相对路径，这样将整个相对路径安装到包目录中。最后，文件可以是绝对路径名，在这种情况下，文件将在绝对路径名处找到，但安装到包路径中。
- en: This basic behavior can be augmented by passing a 2-tuple in as the file argument.
    The first element of the tuple should specify the relative path (under the package
    install directory) where the remaining sequence of files should be installed to
    (it has nothing to do with the file-names in the source distribution). The second
    element of the tuple is the sequence of files that should be installed. The files
    in this sequence can be filenames, relative paths, or absolute paths. For absolute
    paths the file will be installed in the top-level package installation directory
    (regardless of the first argument). Filenames and relative path names will be
    installed in the package install directory under the path name given as the first
    element of the tuple.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 该基本行为可以通过将2元组作为文件参数传递进行增强。元组的第一个元素应指定应安装剩余一系列文件的相对路径（在包安装目录下）（与源分发中的文件名无关）。元组的第二个元素是应安装的文件序列。该序列中的文件可以是文件名，相对路径或绝对路径。对于绝对路径，该文件将安装在顶层包安装目录中（而不管第一个参数）。文件名和相对路径名将安装在作为元组第一个元素给出的路径名下的包安装目录中。
- en: 'Rules for installation paths:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 安装路径规则：
- en: file.txt -> (., file.txt)-> parent/file.txt
  id: totrans-446
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: file.txt -> (., file.txt)-> parent/file.txt
- en: ''
  id: totrans-447
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-448
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
  id: totrans-449
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt
- en: ''
  id: totrans-450
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-451
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
  id: totrans-452
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt
- en: ''
  id: totrans-453
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-454
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*`.txt -> parent/a.txt, parent/b.txt'
  id: totrans-455
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*`.txt -> parent/a.txt，parent/b.txt'
- en: ''
  id: totrans-456
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-457
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
  id: totrans-458
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: foo/`*`.txt`` -> parent/foo/a.txt, parent/foo/b.txt
- en: ''
  id: totrans-459
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-460
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
  id: totrans-461
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*/*.txt` -> (`*`, `*`/`*`.txt) -> parent/c/a.txt, parent/d/b.txt'
- en: ''
  id: totrans-462
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-463
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, file.txt) -> parent/sun/file.txt
  id: totrans-464
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-465
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-466
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/file.txt) -> parent/sun/file.txt
  id: totrans-467
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, bar/file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-468
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-469
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
  id: totrans-470
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, /foo/bar/file.txt) -> parent/sun/file.txt
- en: ''
  id: totrans-471
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-472
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  id: totrans-473
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, `*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
- en: ''
  id: totrans-474
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-475
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
  id: totrans-476
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun, bar/`*`.txt) -> parent/sun/a.txt, parent/sun/b.txt
- en: ''
  id: totrans-477
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-478
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
  id: totrans-479
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: (sun/`*`, `*`/`*`.txt) -> parent/sun/c/a.txt, parent/d/b.txt
- en: An additional feature is that the path to a data-file can actually be a function
    that takes no arguments and returns the actual path(s) to the data-files. This
    is useful when the data files are generated while building the package.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 一个附加特性是数据文件的路径实际上可以是一个不带参数并返回数据文件实际路径的函数。当数据文件在构建软件包时生成时，这将非常有用。
- en: Examples
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: Add files to the list of data_files to be included with the package.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件添加到要与该软件包一起包含的data_files列表中。
- en: '[PRE45]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'will install these data files to:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些数据文件安装到：
- en: '[PRE46]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'where <package install directory> is the package (or sub-package) directory
    such as ‘/usr/lib/python2.4/site-packages/mypackage’ (‘C: Python2.4 Lib site-packages
    mypackage’) or ‘/usr/lib/python2.4/site- packages/mypackage/mysubpackage’ (‘C:
    Python2.4 Lib site-packages mypackage mysubpackage’).'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 其中<包安装目录>是包（或子包）目录，例如'/usr/lib/python2.4/site-packages/mypackage'（'C:Python2.4
    Lib site-packages mypackage'）或'/usr/lib/python2.4/site-packages/mypackage/mysubpackage'（'C:Python2.4
    Lib site-packages mypackage mysubpackage'）。
- en: '[PRE47]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Recursively add files under data_path to data_files list.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地将data_path下的文件添加到data_files列表中。
- en: Recursively add files under data_path to the list of data_files to be installed
    (and distributed). The data_path can be either a relative path-name, or an absolute
    path-name, or a 2-tuple where the first argument shows where in the install directory
    the data directory should be installed to.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 递归地将data_path下的文件添加到要安装（和分发）的data_files列表中。data_path可以是相对路径名，也可以是绝对路径名，还可以是一个2元组，其中第一个参数显示数据文件夹应安装到安装目录中的位置。
- en: 'Parameters:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '**data_path**seq or str'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '**data_path**seq或str'
- en: Argument can be either
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是
- en: 2-sequence (<datadir suffix>, <path to data directory>)
  id: totrans-493
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2元组（<datadir后缀>，<数据目录路径>）
- en: ''
  id: totrans-494
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-495
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path to data directory where python datadir suffix defaults to package dir.
  id: totrans-496
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据目录路径，其中python datadir后缀默认为包目录。
- en: Notes
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Rules for installation paths:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 安装路径规则：
- en: '[PRE48]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Examples
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: 'For example suppose the source directory contains fun/foo.dat and fun/bar/car.dat:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设源目录包含fun/foo.dat和fun/bar/car.dat：
- en: '[PRE49]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Will install data-files to the locations:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据文件安装到以下位置：
- en: '[PRE50]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add paths to configuration include directories.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到配置包含目录的路径。
- en: Add the given sequence of paths to the beginning of the include_dirs list. This
    list will be visible to all extension modules of the current package.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的路径序列添加到include_dirs列表的开头。这个列表将对当前包的所有扩展模块可见。
- en: '[PRE52]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add installable headers to configuration.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 将可安装的头文件添加到配置中。
- en: Add the given sequence of files to the beginning of the headers list. By default,
    headers will be installed under <python- include>/<self.name.replace(‘.’,’/’)>/
    directory. If an item of files is a tuple, then its first argument specifies the
    actual installation location relative to the <python-include> path.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的文件序列添加到头文件列表的开头。默认情况下，头文件将安装在<python-include>/<self.name.replace（‘.’，‘/’）>/目录下。如果files的项目是元组，则其第一个参数指定相对于<python-include>路径的实际安装位置。
- en: 'Parameters:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**files**str or seq'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '**files**字符串或序列'
- en: 'Argument(s) can be either:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以是：
- en: 2-sequence (<includedir suffix>,<path to header file(s)>)
  id: totrans-514
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2元组（<includedir后缀>，<头文件路径>）
- en: ''
  id: totrans-515
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-516
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: path(s) to header file(s) where python includedir suffix will default to package
    name.
  id: totrans-517
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头文件的路径，其中python include目录后缀默认为包名称。
- en: '[PRE53]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Add extension to configuration.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 添加扩展到配置。
- en: Create and add an Extension instance to the ext_modules list. This method also
    takes the following optional keyword arguments that are passed on to the Extension
    constructor.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并将一个Extension实例添加到ext_modules列表。此方法还接受以下可选关键字参数，这些参数传递给Extension构造函数。
- en: 'Parameters:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**字符串'
- en: name of the extension
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的名称
- en: '**sources**seq'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**序列'
- en: list of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件列表。源文件列表可能包含函数（称为源代码生成器），其必须以扩展实例和构建目录为输入，并返回源文件或源文件列表或None。如果返回None，则不会生成任何源文件。如果扩展实例在处理所有源代码生成器后没有源文件，则不会构建任何扩展模块。
- en: '**include_dirs**'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '**include_dirs**'
- en: '**define_macros**'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '**define_macros**'
- en: '**undef_macros**'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '**undef_macros**'
- en: '**library_dirs**'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '**library_dirs**'
- en: '**libraries**'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '**libraries**'
- en: '**runtime_library_dirs**'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '**runtime_library_dirs**'
- en: '**extra_objects**'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_objects**'
- en: '**extra_compile_args**'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_compile_args**'
- en: '**extra_link_args**'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_link_args**'
- en: '**extra_f77_compile_args**'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_f77_compile_args**'
- en: '**extra_f90_compile_args**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_f90_compile_args**'
- en: '**export_symbols**'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '**export_symbols**'
- en: '**swig_opts**'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '**swig_opts**'
- en: '**depends**'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '**depends**'
- en: The depends list contains paths to files or directories that the sources of
    the extension module depend on. If any path in the depends list is newer than
    the extension module, then the module will be rebuilt.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: depends列表包含扩展模块的来源依赖的文件或目录路径。如果depends列表中的任何路径比扩展模块更新，那么模块将被重建。
- en: '**language**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '**language**'
- en: '**f2py_options**'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '**f2py_options**'
- en: '**module_dirs**'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '**module_dirs**'
- en: '**extra_info**dict or list'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '**extra_info**字典或列表'
- en: dict or list of dict of keywords to be appended to keywords.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 字典或关键字列表以附加到关键字。
- en: Notes
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The self.paths(…) method is applied to all lists that may contain paths.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有可能包含路径的列表应用self.paths(...)方法。
- en: '[PRE54]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Add library to configuration.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 将库添加到配置。
- en: 'Parameters:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**字符串'
- en: Name of the extension.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的名称。
- en: '**sources**sequence'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**序列'
- en: List of the sources. The list of sources may contain functions (called source
    generators) which must take an extension instance and a build directory as inputs
    and return a source file or list of source files or None. If None is returned
    then no sources are generated. If the Extension instance has no sources after
    processing all source generators, then no extension module is built.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 源文件列表。源文件列表可能包含函数（称为源代码生成器），其必须以扩展实例和构建目录为输入，并返回源文件或源文件列表或None。如果返回None，则不会生成任何源文件。如果扩展实例在处理所有源代码生成器后没有源文件，则不会构建任何扩展模块。
- en: '**build_info**dict, optional'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_info**字典，可选'
- en: 'The following keys are allowed:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 允许以下键：
- en: depends
  id: totrans-557
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: depends
- en: ''
  id: totrans-558
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-559
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  id: totrans-560
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: ''
  id: totrans-561
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-562
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  id: totrans-563
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: include_dirs
- en: ''
  id: totrans-564
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-565
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  id: totrans-566
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_compiler_args
- en: ''
  id: totrans-567
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-568
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  id: totrans-569
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f77_compile_args
- en: ''
  id: totrans-570
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-571
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  id: totrans-572
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f90_compile_args
- en: ''
  id: totrans-573
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-574
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  id: totrans-575
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: f2py_options
- en: ''
  id: totrans-576
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-577
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  id: totrans-578
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: '[PRE55]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Add scripts to configuration.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 添加脚本到配置。
- en: Add the sequence of files to the beginning of the scripts list. Scripts will
    be installed under the <prefix>/bin/ directory.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件序列添加到脚本列表的开头。脚本将安装在<prefix>/bin/目录下。
- en: '[PRE56]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Similar to add_library, but the specified library is installed.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于add_library，但指定的库已安装。
- en: Most C libraries used with [`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(in Python v3.11)") are only used to build python extensions, but libraries built
    through this method will be installed so that they can be reused by third-party
    packages.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数与[`distutils`](https://docs.python.org/3/library/distutils.html#module-distutils
    "(in Python v3.11)")一起使用的 C 库仅用于构建 Python 扩展，但通过此方法构建的库将被安装，以便它们可以被第三方包重复使用。
- en: 'Parameters:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**name**str'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '**name**str'
- en: Name of the installed library.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 安装库的名称。
- en: '**sources**sequence'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '**sources**sequence'
- en: List of the library’s source files. See [`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library") for details.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 库的源文件列表。有关详情，请参见[`add_library`](#numpy.distutils.misc_util.Configuration.add_library
    "numpy.distutils.misc_util.Configuration.add_library")。
- en: '**install_dir**str'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '**install_dir**str'
- en: Path to install the library, relative to the current sub-package.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 库的安装路径，相对于当前子包。
- en: '**build_info**dict, optional'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**build_info**dict，可选'
- en: 'The following keys are allowed:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 允许以下键：
- en: depends
  id: totrans-594
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖
- en: ''
  id: totrans-595
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-596
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: macros
  id: totrans-597
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏
- en: ''
  id: totrans-598
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-599
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: include_dirs
  id: totrans-600
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: include_dirs
- en: ''
  id: totrans-601
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-602
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_compiler_args
  id: totrans-603
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_compiler_args
- en: ''
  id: totrans-604
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-605
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f77_compile_args
  id: totrans-606
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f77_compile_args
- en: ''
  id: totrans-607
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-608
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: extra_f90_compile_args
  id: totrans-609
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: extra_f90_compile_args
- en: ''
  id: totrans-610
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-611
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: f2py_options
  id: totrans-612
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: f2py_options
- en: ''
  id: totrans-613
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-614
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: language
  id: totrans-615
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: 'Returns:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: None
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 无
- en: See also
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library"),
    [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`add_library`](#numpy.distutils.misc_util.Configuration.add_library "numpy.distutils.misc_util.Configuration.add_library")，[`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config")，[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
- en: Notes
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: The best way to encode the options required to link against the specified C
    libraries is to use a “libname.ini” file, and use [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") to retrieve the required options (see [`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config") for more information).
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 链接到指定的 C 库所需选项的最佳方法是使用“libname.ini”文件，并使用[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")检索所需选项（有关更多信息，请参见[`add_npy_pkg_config`](#numpy.distutils.misc_util.Configuration.add_npy_pkg_config
    "numpy.distutils.misc_util.Configuration.add_npy_pkg_config")）。
- en: '[PRE57]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Generate and install a npy-pkg config file from a template.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板生成并安装一个 npy-pkg 配置文件。
- en: The config file generated from *template* is installed in the given install
    directory, using *subst_dict* for variable substitution.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 从*template*生成的配置文件使用*subst_dict*进行变量替换，并安装在给定的安装目录中。
- en: 'Parameters:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**template**str'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '**template**str'
- en: The path of the template, relatively to the current package path.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的路径，相对于当前包路径。
- en: '**install_dir**str'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '**install_dir**str'
- en: Where to install the npy-pkg config file, relatively to the current package
    path.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 npy-pkg 配置文件的位置，相对于当前包路径。
- en: '**subst_dict**dict, optional'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '**subst_dict**dict，可选'
- en: If given, any string of the form `@key@` will be replaced by `subst_dict[key]`
    in the template file when installed. The install prefix is always available through
    the variable `@prefix@`, since the install prefix is not easy to get reliably
    from setup.py.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定，任何形式为`@key@`的字符串在安装时都将在模板文件中被`subst_dict[key]`替换。由于从setup.py中可靠地获取安装前缀并不容易，所以安装前缀始终可通过变量`@prefix@`获得。
- en: See also
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library"), [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[`add_installed_library`](#numpy.distutils.misc_util.Configuration.add_installed_library
    "numpy.distutils.misc_util.Configuration.add_installed_library")，[`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")'
- en: Notes
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This works for both standard installs and in-place builds, i.e. the `@prefix@`
    refer to the source directory for in-place builds.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于标准安装和原地构建，即对于原地构建，`@prefix@`指的是源目录。
- en: Examples
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE58]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Assuming the foo.ini.in file has the following content:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 假设foo.ini.in文件具有以下内容：
- en: '[PRE59]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The generated file will have the following content:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件将具有以下内容：
- en: '[PRE60]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: and will be installed as foo.ini in the ‘lib’ subpath.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 并将安装为‘lib’子路径中的foo.ini。
- en: When cross-compiling with numpy distutils, it might be necessary to use modified
    npy-pkg-config files. Using the default/generated files will link with the host
    libraries (i.e. libnpymath.a). For cross-compilation you of-course need to link
    with target libraries, while using the host Python installation.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 numpy distutils 进行交叉编译时，可能需要使用修改过的 npy-pkg-config 文件。使用默认/生成的文件将链接到宿主库（即
    libnpymath.a）。在交叉编译时，你当然需要链接到目标库，同时使用宿主 Python 安装。
- en: You can copy out the numpy/core/lib/npy-pkg-config directory, add a pkgdir value
    to the .ini files and set NPY_PKG_CONFIG_PATH environment variable to point to
    the directory with the modified npy-pkg-config files.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将 numpy/core/lib/npy-pkg-config 目录复制出来，向 .ini 文件添加 pkgdir 值，并将 NPY_PKG_CONFIG_PATH
    环境变量设置为指向修改后的 npy-pkg-config 文件的目录。
- en: 'Example npymath.ini modified for cross-compilation:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 修改了用于交叉编译的 npymath.ini 示例：
- en: '[PRE61]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Apply glob to paths and prepend local_path if needed.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 对路径应用 glob 并在需要时在路径前加上 local_path。
- en: Applies glob.glob(…) to each path in the sequence (if needed) and pre-pends
    the local_path if needed. Because this is called on all source lists, this allows
    wildcard characters to be specified in lists of sources for extension modules
    and libraries and scripts and allows path-names be relative to the source directory.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 对序列中的每个路径（如果需要）应用 glob.glob(…)并在需要时在路径前加上 local_path。因为这在所有源列表上都会被调用，这允许在扩展模块、库和脚本的源列表中指定通配符字符，同时也允许路径名相对于源目录。
- en: '[PRE63]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Returns the numpy.distutils config command instance.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 numpy.distutils 配置命令实例。
- en: '[PRE64]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Return a path to a temporary directory where temporary files should be placed.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个临时目录的路径，用于存放临时文件。
- en: '[PRE65]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Check for availability of Fortran 77 compiler.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否可用 Fortran 77 编译器。
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 在源生成函数内部使用，以确保设置分发实例已被初始化。
- en: Notes
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: True if a Fortran 77 compiler is available (because a simple Fortran 77 code
    was able to be compiled successfully).
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用（因为能够成功编译简单的 Fortran 77 代码），则返回 True。
- en: '[PRE66]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Check for availability of Fortran 90 compiler.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否可用 Fortran 90 编译器。
- en: Use it inside source generating function to ensure that setup distribution instance
    has been initialized.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 在源生成函数内部使用，以确保设置分发实例已被初始化。
- en: Notes
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: True if a Fortran 90 compiler is available (because a simple Fortran 90 code
    was able to be compiled successfully)
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用（因为能够成功编译简单的 Fortran 90 代码），则返回 True。
- en: '[PRE67]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Try to get version string of a package.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试获取包的版本字符串。
- en: Return a version string of the current package or None if the version information
    could not be detected.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前包的版本字符串，如果无法检测到版本信息，则返回 None。
- en: Notes
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method scans files named __version__.py, <packagename>_version.py, version.py,
    and __svn_version__.py for string variables version, __version__, and <packagename>_version,
    until a version number is found.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法扫描名为 __version__.py、<packagename>_version.py、version.py 和 __svn_version__.py
    的文件，查找字符串变量 version、__version__ 和 <packagename>_version，直到找到版本号为止。
- en: '[PRE68]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Appends a data function to the data_files list that will generate __svn_version__.py
    file to the current package directory.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 向 data_files 列表添加一个生成 __svn_version__.py 文件的数据函数，将其生成到当前包目录。
- en: Generate package __svn_version__.py file from SVN revision number, it will be
    removed after python exits but will be available when sdist, etc commands are
    executed.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SVN 修订号生成包 __svn_version__.py 文件，它将在 Python 退出时被移除，但在执行 sdist 等命令时仍然可用。
- en: Notes
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If __svn_version__.py existed before, nothing is done.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 __svn_version__.py 存在，则不进行任何操作。
- en: This is intended for working with source directories that are in an SVN repository.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了处理处于 SVN 代码库中的源目录而设计的。
- en: '[PRE69]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Generate package __config__.py file containing system_info information used
    during building the package.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 生成包含在构建包期间使用的 system_info 信息的包 __config__.py 文件。
- en: This file is installed to the package installation directory.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将安装到包安装目录中。
- en: '[PRE70]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Get resources information.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 获取资源信息。
- en: Return information (from system_info.get_info) for all of the names in the argument
    list in a single dictionary.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 以单个字典的形式返回参数列表中所有名称的信息（来自 system_info.get_info）。
- en: Building Installable C libraries
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建可安装的 C 库
- en: 'Conventional C libraries (installed through *add_library*) are not installed,
    and are just used during the build (they are statically linked). An installable
    C library is a pure C library, which does not depend on the python C runtime,
    and is installed such that it may be used by third-party packages. To build and
    install the C library, you just use the method *add_installed_library* instead
    of *add_library*, which takes the same arguments except for an additional `install_dir`
    argument:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 C 库（通过 *add_library* 安装）不会被安装，而只是在构建期间使用（它们是静态链接的）。可安装的 C 库是一个纯 C 库，不依赖于
    python C 运行时，并且被安装以便第三方包可以使用。要构建和安装 C 库，只需使用方法 *add_installed_library* 而不是 *add_library*，它接受相同的参数，除了额外的
    `install_dir` 参数：
- en: '[PRE71]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: npy-pkg-config files
  id: totrans-684
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npy-pkg-config 文件
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 要使必要的构建选项对第三方可用，可以使用 *npy-pkg-config* 机制，该机制在 [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils") 中实现。该机制基于一个 .ini 文件，其中包含所有选项。一个 .ini 文件与 pkg-config unix 实用程序使用的
    .pc 文件非常相似：
- en: '[PRE72]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，文件需要在构建期间生成，因为它只在构建时需要一些仅在构建时已知的信息（例如前缀）。如果使用了 [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") 方法 *add_npy_pkg_config*，那么这主要是自动的。假设我们有一个模板文件
    foo.ini.in，如下所示：
- en: '[PRE73]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'and the following code in setup.py:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在 setup.py 中的以下代码：
- en: '[PRE74]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件 foo.ini 安装到目录 package_dir/lib 中，并且 foo.ini 文件将从 foo.ini.in 生成，其中每个 `@version@`
    将被 `subst_dict['version']` 替换。字典还自动添加了一个额外的前缀替换规则，其中包含安装前缀（因为这在 setup.py 中不容易获取）。npy-pkg-config
    文件也可以安装到与 numpy 使用的相同位置，使用从 `get_npy_pkg_dir` 函数返回的路径。
- en: Reusing a C library from another package
  id: totrans-692
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从另一个包中重用 C 库
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 信息可以轻松地从 [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util") 中的 [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") 函数中检索到：
- en: '[PRE75]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的 .ini 文件搜索路径列表可以提供给 [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info")。
- en: npy-pkg-config files
  id: totrans-696
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npy-pkg-config 文件
- en: 'To make the necessary build options available to third parties, you could use
    the *npy-pkg-config* mechanism implemented in [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils"). This mechanism is based on a .ini file which contains all
    the options. A .ini file is very similar to .pc files as used by the pkg-config
    unix utility:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 要使必要的构建选项对第三方可用，可以使用 *npy-pkg-config* 机制，该机制在 [`numpy.distutils`](#module-numpy.distutils
    "numpy.distutils") 中实现。该机制基于一个 .ini 文件，其中包含所有选项。一个 .ini 文件与 pkg-config unix 实用程序使用的
    .pc 文件非常相似：
- en: '[PRE76]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Generally, the file needs to be generated during the build, since it needs
    some information known at build time only (e.g. prefix). This is mostly automatic
    if one uses the [`Configuration`](#numpy.distutils.misc_util.Configuration "numpy.distutils.misc_util.Configuration")
    method *add_npy_pkg_config*. Assuming we have a template file foo.ini.in as follows:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，文件需要在构建期间生成，因为它只在构建时需要一些仅在构建时已知的信息（例如前缀）。如果使用了 [`Configuration`](#numpy.distutils.misc_util.Configuration
    "numpy.distutils.misc_util.Configuration") 方法 *add_npy_pkg_config*，那么这主要是自动的。假设我们有一个模板文件
    foo.ini.in，如下所示：
- en: '[PRE77]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'and the following code in setup.py:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在 setup.py 中的以下代码：
- en: '[PRE78]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This will install the file foo.ini into the directory package_dir/lib, and the
    foo.ini file will be generated from foo.ini.in, where each `@version@` will be
    replaced by `subst_dict['version']`. The dictionary has an additional prefix substitution
    rule automatically added, which contains the install prefix (since this is not
    easy to get from setup.py). npy-pkg-config files can also be installed at the
    same location as used for numpy, using the path returned from `get_npy_pkg_dir`
    function.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件 foo.ini 安装到目录 package_dir/lib 中，并且 foo.ini 文件将从 foo.ini.in 生成，其中每个 `@version@`
    将被 `subst_dict['version']` 替换。字典还会自动添加一个额外的前缀替换规则，其中包含安装前缀（因为这在 setup.py 中不容易获取）。npy-pkg-config
    文件也可以安装到与 numpy 使用的相同位置，使用从 `get_npy_pkg_dir` 函数返回的路径。
- en: Reusing a C library from another package
  id: totrans-704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重用另一个软件包中的 C 库
- en: 'Info are easily retrieved from the [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") function in [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util"):'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 信息可以轻松从 [`numpy.distutils.misc_util`](distutils/misc_util.html#module-numpy.distutils.misc_util
    "numpy.distutils.misc_util") 中的 `get_info` 函数中检索：
- en: '[PRE79]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: An additional list of paths to look for .ini files can be given to [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info").
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向 [`get_info`](distutils/misc_util.html#numpy.distutils.misc_util.get_info
    "numpy.distutils.misc_util.get_info") 函数提供一个额外的路径列表，用于查找 .ini 文件。
- en: Conversion of `.src` files
  id: totrans-708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.src` 文件的转换'
- en: NumPy distutils supports automatic conversion of source files named <somefile>.src.
    This facility can be used to maintain very similar code blocks requiring only
    simple changes between blocks. During the build phase of setup, if a template
    file named <somefile>.src is encountered, a new file named <somefile> is constructed
    from the template and placed in the build directory to be used instead. Two forms
    of template conversion are supported. The first form occurs for files named <file>.ext.src
    where ext is a recognized Fortran extension (f, f90, f95, f77, for, ftn, pyf).
    The second form is used for all other cases. See [Conversion of .src files using
    Templates](distutils_guide.html#templating).
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy distutils 支持自动转换命名为 <somefile>.src 的源文件。这个功能可以用来维护非常相似的代码块，只需要在块之间进行简单的更改。在设置的构建阶段中，如果遇到名为
    <somefile>.src 的模板文件，则会从模板构建一个新文件命名为 <somefile> 并放置在构建目录中以供使用。支持两种形式的模板转换。第一种形式适用于以已识别的
    Fortran 扩展名（f、f90、f95、f77、for、ftn、pyf）命名的文件。第二种形式适用于所有其他情况。请参阅[使用模板转换 .src 文件](distutils_guide.html#templating)。
