["```py\nclass sympy.combinatorics.polyhedron.Polyhedron(corners, faces=(), pgroup=())\n```", "```py\nproperty array_form\n```", "```py\n>>> from sympy.combinatorics.polyhedron import tetrahedron\n>>> tetrahedron = tetrahedron.copy()\n>>> tetrahedron.array_form\n[0, 1, 2, 3] \n```", "```py\n>>> tetrahedron.rotate(0)\n>>> tetrahedron.array_form\n[0, 2, 3, 1]\n>>> tetrahedron.pgroup[0].array_form\n[0, 2, 3, 1] \n```", "```py\nproperty corners\n```", "```py\n>>> from sympy.combinatorics import Polyhedron\n>>> from sympy.abc import a, b, c, d\n>>> p = Polyhedron(list('abcd'))\n>>> p.corners == p.vertices == (a, b, c, d)\nTrue \n```", "```py\nproperty cyclic_form\n```", "```py\nproperty edges\n```", "```py\n>>> from sympy.combinatorics import Polyhedron\n>>> from sympy.abc import a, b, c\n>>> corners = (a, b, c)\n>>> faces = [(0, 1, 2)]\n>>> Polyhedron(corners, faces).edges\n{(0, 1), (0, 2), (1, 2)} \n```", "```py\nproperty faces\n```", "```py\nproperty pgroup\n```", "```py\nreset()\n```", "```py\n>>> from sympy.combinatorics.polyhedron import tetrahedron as T\n>>> T = T.copy()\n>>> T.corners\n(0, 1, 2, 3)\n>>> T.rotate(0)\n>>> T.corners\n(0, 2, 3, 1)\n>>> T.reset()\n>>> T.corners\n(0, 1, 2, 3) \n```", "```py\nrotate(perm)\n```", "```py\n>>> from sympy.combinatorics import Polyhedron, Permutation\n>>> from sympy.combinatorics.polyhedron import cube\n>>> cube = cube.copy()\n>>> cube.corners\n(0, 1, 2, 3, 4, 5, 6, 7)\n>>> cube.rotate(0)\n>>> cube.corners\n(1, 2, 3, 0, 5, 6, 7, 4) \n```", "```py\n>>> cube.reset()\n>>> cube.rotate(Permutation([[1, 2]], size=8))\n>>> cube.corners\n(0, 2, 1, 3, 4, 5, 6, 7) \n```", "```py\n>>> shadow = h5 = Polyhedron(list('abcde'))\n>>> p = Permutation([3, 0, 1, 2, 4])\n>>> h5.rotate(p)\n>>> h5.corners\n(d, a, b, c, e)\n>>> _ == shadow.corners\nTrue\n>>> copy = h5.copy()\n>>> h5.rotate(p)\n>>> h5.corners == copy.corners\nFalse \n```", "```py\nproperty size\n```", "```py\nproperty vertices\n```", "```py\n>>> from sympy.combinatorics import Polyhedron\n>>> from sympy.abc import a, b, c, d\n>>> p = Polyhedron(list('abcd'))\n>>> p.corners == p.vertices == (a, b, c, d)\nTrue \n```"]