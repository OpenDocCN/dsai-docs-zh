- en: scipy.signal.lsim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lsim.html#scipy.signal.lsim](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.lsim.html#scipy.signal.lsim)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Simulate output of a continuous-time linear system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**system**an instance of the LTI class or a tuple describing the system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following gives the number of elements in the tuple and the interpretation:'
  prefs: []
  type: TYPE_NORMAL
- en: '1: (instance of [`lti`](scipy.signal.lti.html#scipy.signal.lti "scipy.signal.lti"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2: (num, den)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3: (zeros, poles, gain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4: (A, B, C, D)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**U**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: An input array describing the input at each time *T* (interpolation is assumed
    between given times). If there are multiple inputs, then each column of the rank-2
    array represents an input. If U = 0 or None, a zero input is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**T**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The time steps at which the input is defined and at which the output is desired.
    Must be nonnegative, increasing, and equally spaced.
  prefs: []
  type: TYPE_NORMAL
- en: '**X0**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The initial conditions on the state vector (zero by default).
  prefs: []
  type: TYPE_NORMAL
- en: '**interp**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to use linear (True, the default) or zero-order-hold (False) interpolation
    for the input array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**T**1D ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Time values for the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**yout**1D ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: System response.
  prefs: []
  type: TYPE_NORMAL
- en: '**xout**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Time evolution of the state vector.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If (num, den) is passed in for `system`, coefficients for both the numerator
    and denominator should be specified in descending exponent order (e.g. `s^2 +
    3s + 5` would be represented as `[1, 3, 5]`).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use [`lsim`](#scipy.signal.lsim "scipy.signal.lsim") to simulate an analog
    Bessel filter applied to a signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a low-pass Bessel filter with a cutoff of 12 Hz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Generate data to which the filter is applied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The input signal is the sum of three sinusoidal curves, with frequencies 4 Hz,
    40 Hz, and 80 Hz. The filter should mostly eliminate the 40 Hz and 80 Hz components,
    leaving just the 4 Hz signal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Simulate the filter with [`lsim`](#scipy.signal.lsim "scipy.signal.lsim").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Plot the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-lsim-1_00_00.png](../Images/028debdf7654e2f7ae0e2f380f0a7e79.png)'
  prefs: []
  type: TYPE_IMG
- en: In a second example, we simulate a double integrator `y'' = u`, with a constant
    input `u = 1`. We’ll use the state space representation of the integrator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*t* and *u* define the time and input signal for the system to be simulated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Compute the simulation, and then plot *y*. As expected, the plot shows the curve
    `y = 0.5*t**2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-lsim-1_01_00.png](../Images/f3ed4463fc6f4ecd59913551392b5233.png)'
  prefs: []
  type: TYPE_IMG
