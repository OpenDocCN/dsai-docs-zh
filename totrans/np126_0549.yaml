- en: numpy.lib.format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.lib.format.html](https://numpy.org/doc/1.26/reference/generated/numpy.lib.format.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Binary serialization
  prefs: []
  type: TYPE_NORMAL
- en: NPY format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A simple format for saving numpy arrays to disk with the full information about
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The `.npy` format is the standard binary file format in NumPy for persisting
    a *single* arbitrary NumPy array on disk. The format stores all of the shape and
    dtype information necessary to reconstruct the array correctly even on another
    machine with a different architecture. The format is designed to be as simple
    as possible while achieving its limited goals.
  prefs: []
  type: TYPE_NORMAL
- en: The `.npz` format is the standard format for persisting *multiple* NumPy arrays
    on disk. A `.npz` file is a zip file containing multiple `.npy` files, one for
    each array.
  prefs: []
  type: TYPE_NORMAL
- en: Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can represent all NumPy arrays including nested record arrays and object arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Represents the data in its native binary form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Fortran-contiguous arrays directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores all of the necessary information to reconstruct the array including shape
    and dtype on a machine of a different architecture. Both little-endian and big-endian
    arrays are supported, and a file with little-endian numbers will yield a little-endian
    array on any machine reading the file. The types are described in terms of their
    actual sizes. For example, if a machine with a 64-bit C “long int” writes out
    an array with “long ints”, a reading machine with 32-bit C “long ints” will yield
    an array with 64-bit integers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is straightforward to reverse engineer. Datasets often live longer than the
    programs that created them. A competent developer should be able to create a solution
    in their preferred programming language to read most `.npy` files that they have
    been given without much documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows memory-mapping of the data. See [`open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be read from a filelike stream object instead of an actual file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores object arrays, i.e. arrays containing elements that are arbitrary Python
    objects. Files with object arrays are not to be mmapable, but can be read and
    written to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arbitrary subclasses of numpy.ndarray are not completely preserved. Subclasses
    will be accepted for writing, but only the array data will be written out. A regular
    numpy.ndarray object will be created upon reading the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Due to limitations in the interpretation of structured dtypes, dtypes with fields
    with empty names will have the names replaced by ‘f0’, ‘f1’, etc. Such arrays
    will not round-trip through the format entirely accurately. The data is intact;
    only the field names will differ. We are working on a fix for this. This fix will
    not require a change in the file format. The arrays with such structures can still
    be saved and restored, and the correct dtype may be restored by using the `loadedarray.view(correct_dtype)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: File extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend using the `.npy` and `.npz` extensions for files saved in this
    format. This is by no means a requirement; applications may wish to use these
    file formats but use an extension specific to the application. In the absence
    of an obvious alternative, however, we suggest using `.npy` and `.npz`.
  prefs: []
  type: TYPE_NORMAL
- en: Version numbering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version numbering of these formats is independent of NumPy version numbering.
    If the format is upgraded, the code in *numpy.io* will still be able to read and
    write Version 1.0 files.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 1.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first 6 bytes are a magic string: exactly `\x93NUMPY`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the major version number of the file format,
    e.g. `\x01`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the minor version number of the file format,
    e.g. `\x00`. Note: the version of the file format is not tied to the version of
    the numpy package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 2 bytes form a little-endian unsigned short int: the length of the
    header data HEADER_LEN.'
  prefs: []
  type: TYPE_NORMAL
- en: The next HEADER_LEN bytes form the header data describing the array’s format.
    It is an ASCII string which contains a Python literal expression of a dictionary.
    It is terminated by a newline (`\n`) and padded with spaces (`\x20`) to make the
    total of `len(magic string) + 2 + len(length) + HEADER_LEN` be evenly divisible
    by 64 for alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dictionary contains three keys:'
  prefs: []
  type: TYPE_NORMAL
- en: “descr”dtype.descr
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An object that can be passed as an argument to the [`numpy.dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor to create the array’s dtype.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “fortran_order”bool
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whether the array data is Fortran-contiguous or not. Since Fortran-contiguous
    arrays are a common form of non-C-contiguity, we allow them to be written directly
    to disk for efficiency.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “shape”tuple of int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The shape of the array.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For repeatability and readability, the dictionary keys are sorted in alphabetic
    order. This is for convenience only. A writer SHOULD implement this if possible.
    A reader MUST NOT depend on this.
  prefs: []
  type: TYPE_NORMAL
- en: Following the header comes the array data. If the dtype contains Python objects
    (i.e. `dtype.hasobject is True`), then the data is a Python pickle of the array.
    Otherwise the data is the contiguous (either C- or Fortran-, depending on `fortran_order`)
    bytes of the array. Consumers can figure out the number of bytes by multiplying
    the number of elements given by the shape (noting that `shape=()` means there
    is 1 element) by `dtype.itemsize`.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 2.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version 1.0 format only allowed the array header to have a total size of
    65535 bytes. This can be exceeded by structured arrays with a large number of
    columns. The version 2.0 format extends the header size to 4 GiB. [`numpy.save`](numpy.save.html#numpy.save
    "numpy.save") will automatically save in 2.0 format if the data requires it, else
    it will always use the more compatible 1.0 format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The description of the fourth element of the header therefore has become: “The
    next 4 bytes form a little-endian unsigned int: the length of the header data
    HEADER_LEN.”'
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 3.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This version replaces the ASCII string (which in practice was latin1) with a
    utf8-encoded string, so supports structured types with any unicode field names.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.npy` format, including motivation for creating it and a comparison of
    alternatives, is described in the [“npy-format” NEP](https://numpy.org/neps/nep-0001-npy-format.html
    "(in NumPy Enhancement Proposals)"), however details have evolved with time and
    this document is more current.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs: []
  type: TYPE_NORMAL
- en: '| [`descr_to_dtype`](numpy.lib.format.descr_to_dtype.html#numpy.lib.format.descr_to_dtype
    "numpy.lib.format.descr_to_dtype")(descr) | Returns a dtype based off the given
    description. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dtype_to_descr`](numpy.lib.format.dtype_to_descr.html#numpy.lib.format.dtype_to_descr
    "numpy.lib.format.dtype_to_descr")(dtype) | Get a serializable descriptor from
    the dtype. |'
  prefs: []
  type: TYPE_TB
- en: '| [`header_data_from_array_1_0`](numpy.lib.format.header_data_from_array_1_0.html#numpy.lib.format.header_data_from_array_1_0
    "numpy.lib.format.header_data_from_array_1_0")(array) | Get the dictionary of
    header metadata from a numpy.ndarray. |'
  prefs: []
  type: TYPE_TB
- en: '| [`magic`](numpy.lib.format.magic.html#numpy.lib.format.magic "numpy.lib.format.magic")(major, minor)
    | Return the magic string for the given file format version. |'
  prefs: []
  type: TYPE_TB
- en: '| [`open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap")(filename[, mode, dtype, shape, ...]) | Open a
    .npy file as a memory-mapped array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_array`](numpy.lib.format.read_array.html#numpy.lib.format.read_array
    "numpy.lib.format.read_array")(fp[, allow_pickle, ...]) | Read an array from an
    NPY file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_array_header_1_0`](numpy.lib.format.read_array_header_1_0.html#numpy.lib.format.read_array_header_1_0
    "numpy.lib.format.read_array_header_1_0")(fp[, max_header_size]) | Read an array
    header from a filelike object using the 1.0 file format version. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_array_header_2_0`](numpy.lib.format.read_array_header_2_0.html#numpy.lib.format.read_array_header_2_0
    "numpy.lib.format.read_array_header_2_0")(fp[, max_header_size]) | Read an array
    header from a filelike object using the 2.0 file format version. |'
  prefs: []
  type: TYPE_TB
- en: '| [`read_magic`](numpy.lib.format.read_magic.html#numpy.lib.format.read_magic
    "numpy.lib.format.read_magic")(fp) | Read the magic string to get the version
    of the file format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write_array`](numpy.lib.format.write_array.html#numpy.lib.format.write_array
    "numpy.lib.format.write_array")(fp, array[, version, ...]) | Write an array to
    an NPY file, including a header. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write_array_header_1_0`](numpy.lib.format.write_array_header_1_0.html#numpy.lib.format.write_array_header_1_0
    "numpy.lib.format.write_array_header_1_0")(fp, d) | Write the header for an array
    using the 1.0 format. |'
  prefs: []
  type: TYPE_TB
- en: '| [`write_array_header_2_0`](numpy.lib.format.write_array_header_2_0.html#numpy.lib.format.write_array_header_2_0
    "numpy.lib.format.write_array_header_2_0")(fp, d) | Write the header for an array
    using the 2.0 format. |'
  prefs: []
  type: TYPE_TB
- en: NPY format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A simple format for saving numpy arrays to disk with the full information about
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The `.npy` format is the standard binary file format in NumPy for persisting
    a *single* arbitrary NumPy array on disk. The format stores all of the shape and
    dtype information necessary to reconstruct the array correctly even on another
    machine with a different architecture. The format is designed to be as simple
    as possible while achieving its limited goals.
  prefs: []
  type: TYPE_NORMAL
- en: The `.npz` format is the standard format for persisting *multiple* NumPy arrays
    on disk. A `.npz` file is a zip file containing multiple `.npy` files, one for
    each array.
  prefs: []
  type: TYPE_NORMAL
- en: Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can represent all NumPy arrays including nested record arrays and object arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Represents the data in its native binary form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Fortran-contiguous arrays directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores all of the necessary information to reconstruct the array including shape
    and dtype on a machine of a different architecture. Both little-endian and big-endian
    arrays are supported, and a file with little-endian numbers will yield a little-endian
    array on any machine reading the file. The types are described in terms of their
    actual sizes. For example, if a machine with a 64-bit C “long int” writes out
    an array with “long ints”, a reading machine with 32-bit C “long ints” will yield
    an array with 64-bit integers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is straightforward to reverse engineer. Datasets often live longer than the
    programs that created them. A competent developer should be able to create a solution
    in their preferred programming language to read most `.npy` files that they have
    been given without much documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows memory-mapping of the data. See [`open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be read from a filelike stream object instead of an actual file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores object arrays, i.e. arrays containing elements that are arbitrary Python
    objects. Files with object arrays are not to be mmapable, but can be read and
    written to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arbitrary subclasses of numpy.ndarray are not completely preserved. Subclasses
    will be accepted for writing, but only the array data will be written out. A regular
    numpy.ndarray object will be created upon reading the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Due to limitations in the interpretation of structured dtypes, dtypes with fields
    with empty names will have the names replaced by ‘f0’, ‘f1’, etc. Such arrays
    will not round-trip through the format entirely accurately. The data is intact;
    only the field names will differ. We are working on a fix for this. This fix will
    not require a change in the file format. The arrays with such structures can still
    be saved and restored, and the correct dtype may be restored by using the `loadedarray.view(correct_dtype)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: File extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend using the `.npy` and `.npz` extensions for files saved in this
    format. This is by no means a requirement; applications may wish to use these
    file formats but use an extension specific to the application. In the absence
    of an obvious alternative, however, we suggest using `.npy` and `.npz`.
  prefs: []
  type: TYPE_NORMAL
- en: Version numbering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version numbering of these formats is independent of NumPy version numbering.
    If the format is upgraded, the code in *numpy.io* will still be able to read and
    write Version 1.0 files.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 1.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first 6 bytes are a magic string: exactly `\x93NUMPY`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the major version number of the file format,
    e.g. `\x01`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the minor version number of the file format,
    e.g. `\x00`. Note: the version of the file format is not tied to the version of
    the numpy package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 2 bytes form a little-endian unsigned short int: the length of the
    header data HEADER_LEN.'
  prefs: []
  type: TYPE_NORMAL
- en: The next HEADER_LEN bytes form the header data describing the array’s format.
    It is an ASCII string which contains a Python literal expression of a dictionary.
    It is terminated by a newline (`\n`) and padded with spaces (`\x20`) to make the
    total of `len(magic string) + 2 + len(length) + HEADER_LEN` be evenly divisible
    by 64 for alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dictionary contains three keys:'
  prefs: []
  type: TYPE_NORMAL
- en: “descr”dtype.descr
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An object that can be passed as an argument to the [`numpy.dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor to create the array’s dtype.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “fortran_order”bool
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whether the array data is Fortran-contiguous or not. Since Fortran-contiguous
    arrays are a common form of non-C-contiguity, we allow them to be written directly
    to disk for efficiency.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “shape”tuple of int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The shape of the array.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For repeatability and readability, the dictionary keys are sorted in alphabetic
    order. This is for convenience only. A writer SHOULD implement this if possible.
    A reader MUST NOT depend on this.
  prefs: []
  type: TYPE_NORMAL
- en: Following the header comes the array data. If the dtype contains Python objects
    (i.e. `dtype.hasobject is True`), then the data is a Python pickle of the array.
    Otherwise the data is the contiguous (either C- or Fortran-, depending on `fortran_order`)
    bytes of the array. Consumers can figure out the number of bytes by multiplying
    the number of elements given by the shape (noting that `shape=()` means there
    is 1 element) by `dtype.itemsize`.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 2.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version 1.0 format only allowed the array header to have a total size of
    65535 bytes. This can be exceeded by structured arrays with a large number of
    columns. The version 2.0 format extends the header size to 4 GiB. [`numpy.save`](numpy.save.html#numpy.save
    "numpy.save") will automatically save in 2.0 format if the data requires it, else
    it will always use the more compatible 1.0 format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The description of the fourth element of the header therefore has become: “The
    next 4 bytes form a little-endian unsigned int: the length of the header data
    HEADER_LEN.”'
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 3.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This version replaces the ASCII string (which in practice was latin1) with a
    utf8-encoded string, so supports structured types with any unicode field names.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.npy` format, including motivation for creating it and a comparison of
    alternatives, is described in the [“npy-format” NEP](https://numpy.org/neps/nep-0001-npy-format.html
    "(in NumPy Enhancement Proposals)"), however details have evolved with time and
    this document is more current.
  prefs: []
  type: TYPE_NORMAL
- en: Capabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Can represent all NumPy arrays including nested record arrays and object arrays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Represents the data in its native binary form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Fortran-contiguous arrays directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores all of the necessary information to reconstruct the array including shape
    and dtype on a machine of a different architecture. Both little-endian and big-endian
    arrays are supported, and a file with little-endian numbers will yield a little-endian
    array on any machine reading the file. The types are described in terms of their
    actual sizes. For example, if a machine with a 64-bit C “long int” writes out
    an array with “long ints”, a reading machine with 32-bit C “long ints” will yield
    an array with 64-bit integers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is straightforward to reverse engineer. Datasets often live longer than the
    programs that created them. A competent developer should be able to create a solution
    in their preferred programming language to read most `.npy` files that they have
    been given without much documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows memory-mapping of the data. See [`open_memmap`](numpy.lib.format.open_memmap.html#numpy.lib.format.open_memmap
    "numpy.lib.format.open_memmap").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be read from a filelike stream object instead of an actual file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stores object arrays, i.e. arrays containing elements that are arbitrary Python
    objects. Files with object arrays are not to be mmapable, but can be read and
    written to disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Arbitrary subclasses of numpy.ndarray are not completely preserved. Subclasses
    will be accepted for writing, but only the array data will be written out. A regular
    numpy.ndarray object will be created upon reading the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Due to limitations in the interpretation of structured dtypes, dtypes with fields
    with empty names will have the names replaced by ‘f0’, ‘f1’, etc. Such arrays
    will not round-trip through the format entirely accurately. The data is intact;
    only the field names will differ. We are working on a fix for this. This fix will
    not require a change in the file format. The arrays with such structures can still
    be saved and restored, and the correct dtype may be restored by using the `loadedarray.view(correct_dtype)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: File extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend using the `.npy` and `.npz` extensions for files saved in this
    format. This is by no means a requirement; applications may wish to use these
    file formats but use an extension specific to the application. In the absence
    of an obvious alternative, however, we suggest using `.npy` and `.npz`.
  prefs: []
  type: TYPE_NORMAL
- en: Version numbering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version numbering of these formats is independent of NumPy version numbering.
    If the format is upgraded, the code in *numpy.io* will still be able to read and
    write Version 1.0 files.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 1.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first 6 bytes are a magic string: exactly `\x93NUMPY`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the major version number of the file format,
    e.g. `\x01`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 1 byte is an unsigned byte: the minor version number of the file format,
    e.g. `\x00`. Note: the version of the file format is not tied to the version of
    the numpy package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next 2 bytes form a little-endian unsigned short int: the length of the
    header data HEADER_LEN.'
  prefs: []
  type: TYPE_NORMAL
- en: The next HEADER_LEN bytes form the header data describing the array’s format.
    It is an ASCII string which contains a Python literal expression of a dictionary.
    It is terminated by a newline (`\n`) and padded with spaces (`\x20`) to make the
    total of `len(magic string) + 2 + len(length) + HEADER_LEN` be evenly divisible
    by 64 for alignment purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dictionary contains three keys:'
  prefs: []
  type: TYPE_NORMAL
- en: “descr”dtype.descr
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An object that can be passed as an argument to the [`numpy.dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") constructor to create the array’s dtype.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “fortran_order”bool
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whether the array data is Fortran-contiguous or not. Since Fortran-contiguous
    arrays are a common form of non-C-contiguity, we allow them to be written directly
    to disk for efficiency.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “shape”tuple of int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The shape of the array.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For repeatability and readability, the dictionary keys are sorted in alphabetic
    order. This is for convenience only. A writer SHOULD implement this if possible.
    A reader MUST NOT depend on this.
  prefs: []
  type: TYPE_NORMAL
- en: Following the header comes the array data. If the dtype contains Python objects
    (i.e. `dtype.hasobject is True`), then the data is a Python pickle of the array.
    Otherwise the data is the contiguous (either C- or Fortran-, depending on `fortran_order`)
    bytes of the array. Consumers can figure out the number of bytes by multiplying
    the number of elements given by the shape (noting that `shape=()` means there
    is 1 element) by `dtype.itemsize`.
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 2.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The version 1.0 format only allowed the array header to have a total size of
    65535 bytes. This can be exceeded by structured arrays with a large number of
    columns. The version 2.0 format extends the header size to 4 GiB. [`numpy.save`](numpy.save.html#numpy.save
    "numpy.save") will automatically save in 2.0 format if the data requires it, else
    it will always use the more compatible 1.0 format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The description of the fourth element of the header therefore has become: “The
    next 4 bytes form a little-endian unsigned int: the length of the header data
    HEADER_LEN.”'
  prefs: []
  type: TYPE_NORMAL
- en: Format Version 3.0
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This version replaces the ASCII string (which in practice was latin1) with a
    utf8-encoded string, so supports structured types with any unicode field names.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.npy` format, including motivation for creating it and a comparison of
    alternatives, is described in the [“npy-format” NEP](https://numpy.org/neps/nep-0001-npy-format.html
    "(in NumPy Enhancement Proposals)"), however details have evolved with time and
    this document is more current.
  prefs: []
  type: TYPE_NORMAL
