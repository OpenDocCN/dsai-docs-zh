- en: scipy.interpolate.interpn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.interpn.html#scipy.interpolate.interpn](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.interpn.html#scipy.interpolate.interpn)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional interpolation on regular or rectilinear grids.
  prefs: []
  type: TYPE_NORMAL
- en: Strictly speaking, not all regular grids are supported - this function works
    on *rectilinear* grids, that is, a rectangular grid with even or uneven spacing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points**tuple of ndarray of float, with shapes (m1, ), …, (mn, )'
  prefs: []
  type: TYPE_NORMAL
- en: The points defining the regular grid in n dimensions. The points in each dimension
    (i.e. every elements of the points tuple) must be strictly ascending or descending.
  prefs: []
  type: TYPE_NORMAL
- en: '**values**array_like, shape (m1, …, mn, …)'
  prefs: []
  type: TYPE_NORMAL
- en: The data on the regular grid in n dimensions. Complex data can be acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: '**xi**ndarray of shape (…, ndim)'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates to sample the gridded data at
  prefs: []
  type: TYPE_NORMAL
- en: '**method**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The method of interpolation to perform. Supported are “linear”, “nearest”, “slinear”,
    “cubic”, “quintic”, “pchip”, and “splinef2d”. “splinef2d” is only supported for
    2-dimensional data.
  prefs: []
  type: TYPE_NORMAL
- en: '**bounds_error**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, when interpolated values are requested outside of the domain of the
    input data, a ValueError is raised. If False, then *fill_value* is used.
  prefs: []
  type: TYPE_NORMAL
- en: '**fill_value**number, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, the value to use for points outside of the interpolation domain.
    If None, values outside the domain are extrapolated. Extrapolation is not supported
    by method “splinef2d”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**values_x**ndarray, shape xi.shape[:-1] + values.shape[ndim:]'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolated values at *xi*. See notes for behaviour when `xi.ndim == 1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`NearestNDInterpolator`](scipy.interpolate.NearestNDInterpolator.html#scipy.interpolate.NearestNDInterpolator
    "scipy.interpolate.NearestNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Nearest neighbor interpolation on unstructured data in N dimensions
  prefs: []
  type: TYPE_NORMAL
- en: '[`LinearNDInterpolator`](scipy.interpolate.LinearNDInterpolator.html#scipy.interpolate.LinearNDInterpolator
    "scipy.interpolate.LinearNDInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise linear interpolant on unstructured data in N dimensions
  prefs: []
  type: TYPE_NORMAL
- en: '[`RegularGridInterpolator`](scipy.interpolate.RegularGridInterpolator.html#scipy.interpolate.RegularGridInterpolator
    "scipy.interpolate.RegularGridInterpolator")'
  prefs: []
  type: TYPE_NORMAL
- en: interpolation on a regular or rectilinear grid in arbitrary dimensions ([`interpn`](#scipy.interpolate.interpn
    "scipy.interpolate.interpn") wraps this class).
  prefs: []
  type: TYPE_NORMAL
- en: '[`RectBivariateSpline`](scipy.interpolate.RectBivariateSpline.html#scipy.interpolate.RectBivariateSpline
    "scipy.interpolate.RectBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: Bivariate spline approximation over a rectangular mesh
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.ndimage.map_coordinates`](scipy.ndimage.map_coordinates.html#scipy.ndimage.map_coordinates
    "scipy.ndimage.map_coordinates")'
  prefs: []
  type: TYPE_NORMAL
- en: interpolation on grids with equal spacing (suitable for e.g., N-D image resampling)
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.14.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `xi.ndim == 1` a new axis is inserted into the 0 position of
    the returned array, values_x, so its shape is instead `(1,) + values.shape[ndim:]`.
  prefs: []
  type: TYPE_NORMAL
- en: If the input data is such that input dimensions have incommensurate units and
    differ by many orders of magnitude, the interpolant may have numerical artifacts.
    Consider rescaling the data before interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Evaluate a simple example function on the points of a regular 3-D grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate the interpolating function at a point
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
