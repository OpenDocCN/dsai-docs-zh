- en: pandas.DataFrame.replace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Replace values given in to_replace with value.
  prefs: []
  type: TYPE_NORMAL
- en: Values of the Series/DataFrame are replaced with other values dynamically. This
    differs from updating with `.loc` or `.iloc`, which require you to specify a location
    to update with some value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**to_replace**str, regex, list, dict, Series, int, float, or None'
  prefs: []
  type: TYPE_NORMAL
- en: How to find the values that will be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'numeric, str or regex:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'numeric: numeric values equal to to_replace will be replaced with value'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'str: string exactly matching to_replace will be replaced with value'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'regex: regexs matching to_replace will be replaced with value'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'list of str, regex, or numeric:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, if to_replace and value are both lists, they `must` be the same length.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Second, if `regex=True` then all of the strings in `both` lists will be interpreted
    as regexs otherwise they will match directly. This doesn’t matter much for value
    since there are only a few possible substitution regexes you can use.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: str, regex and numeric rules apply as above.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'dict:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dicts can be used to specify different replacement values for different existing
    values. For example, `{''a'': ''b'', ''y'': ''z''}` replaces the value ‘a’ with
    ‘b’ and ‘y’ with ‘z’. To use a dict in this way, the optional value parameter
    should not be given.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a DataFrame a dict can specify that different values should be replaced
    in different columns. For example, `{''a'': 1, ''b'': ''z''}` looks for the value
    1 in column ‘a’ and the value ‘z’ in column ‘b’ and replaces these values with
    whatever is specified in value. The value parameter should not be `None` in this
    case. You can treat this as a special case of passing two lists except that you
    are specifying the column to search in.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a DataFrame nested dictionaries, e.g., `{''a'': {''b'': np.nan}}`, are
    read as follows: look in column ‘a’ for the value ‘b’ and replace it with NaN.
    The optional value parameter should not be specified to use a nested dict in this
    way. You can nest regular expressions as well. Note that column names (the top-level
    dictionary keys in a nested dictionary) `cannot` be regular expressions.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that the regex argument must be a string, compiled regular expression,
    or list, dict, ndarray or Series of such elements. If value is also `None` then
    this `must` be a nested dictionary or Series.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: See the examples section for examples of each of these.
  prefs: []
  type: TYPE_NORMAL
- en: '**value**scalar, dict, list, str, regex, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Value to replace any values matching to_replace with. For a DataFrame a dict
    of values can be used to specify which value to use for each column (columns not
    in the dict will not be filled). Regular expressions, strings and lists or dicts
    of such objects are also allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**inplace**bool, default False'
  prefs: []
  type: TYPE_NORMAL
- en: If True, performs operation inplace and returns None.
  prefs: []
  type: TYPE_NORMAL
- en: '**limit**int, default None'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum size gap to forward or backward fill.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**regex**bool or same types as to_replace, default False'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to interpret to_replace and/or value as regular expressions. Alternatively,
    this could be a regular expression or a list, dict, or array of regular expressions
    in which case to_replace must be `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '**method**{‘pad’, ‘ffill’, ‘bfill’}'
  prefs: []
  type: TYPE_NORMAL
- en: The method to use when for replacement, when to_replace is a scalar, list or
    tuple and value is `None`.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated since version 2.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Series/DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: Object after replacement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: AssertionError
  prefs: []
  type: TYPE_NORMAL
- en: If regex is not a `bool` and to_replace is not `None`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeError
  prefs: []
  type: TYPE_NORMAL
- en: If to_replace is not a scalar, array-like, `dict`, or `None`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If to_replace is a `dict` and value is not a `list`, `dict`, `ndarray`, or `Series`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If to_replace is `None` and regex is not compilable into a regular expression
    or is a list, dict, ndarray, or Series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When replacing multiple `bool` or `datetime64` objects and the arguments to
    to_replace does not match the type of the value being replaced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ValueError
  prefs: []
  type: TYPE_NORMAL
- en: If a `list` or an `ndarray` is passed to to_replace and value but they are not
    the same length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.fillna`](pandas.Series.fillna.html#pandas.Series.fillna "pandas.Series.fillna")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill NA values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.fillna`](pandas.DataFrame.fillna.html#pandas.DataFrame.fillna "pandas.DataFrame.fillna")'
  prefs: []
  type: TYPE_NORMAL
- en: Fill NA values.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.where`](pandas.Series.where.html#pandas.Series.where "pandas.Series.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace values based on boolean condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.where`](pandas.DataFrame.where.html#pandas.DataFrame.where "pandas.DataFrame.where")'
  prefs: []
  type: TYPE_NORMAL
- en: Replace values based on boolean condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[`DataFrame.map`](pandas.DataFrame.map.html#pandas.DataFrame.map "pandas.DataFrame.map")'
  prefs: []
  type: TYPE_NORMAL
- en: Apply a function to a Dataframe elementwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.map`](pandas.Series.map.html#pandas.Series.map "pandas.Series.map")'
  prefs: []
  type: TYPE_NORMAL
- en: Map values of Series according to an input mapping or function.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Series.str.replace`](pandas.Series.str.replace.html#pandas.Series.str.replace
    "pandas.Series.str.replace")'
  prefs: []
  type: TYPE_NORMAL
- en: Simple string replacement.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Regex substitution is performed under the hood with `re.sub`. The rules for
    substitution for `re.sub` are the same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expressions will only substitute on strings, meaning you cannot provide,
    for example, a regular expression matching floating point numbers and expect the
    columns in your frame that have a numeric dtype to be matched. However, if those
    floating point numbers *are* strings, then you can do this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method has *a lot* of options. You are encouraged to experiment and play
    with this method to gain intuition about how it works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When dict is used as the to_replace value, it is like key(s) in the dict are
    the to_replace part and value(s) in the dict are the value parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalar `to_replace` and `value`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**List-like `to_replace`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**dict-like `to_replace`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Regular expression `to_replace`**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Compare the behavior of `s.replace({''a'': None})` and `s.replace(''a'', None)`
    to understand the peculiarities of the to_replace parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When one uses a dict as the to_replace value, it is like the value(s) in the
    dict are equal to the value parameter. `s.replace({''a'': None})` is equivalent
    to `s.replace(to_replace={''a'': None}, value=None, method=None)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When `value` is not explicitly passed and to_replace is a scalar, list or tuple,
    replace uses the method parameter (default ‘pad’) to do the replacement. So this
    is why the ‘a’ values are being replaced by 10 in rows 1 and 2 and ‘b’ in row
    4 in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.1.0: The ‘method’ parameter and padding behavior
    are deprecated.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On the other hand, if `None` is explicitly passed for `value`, it will be respected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.0: Previously the explicit `None` was silently ignored.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When `regex=True`, `value` is not `None` and to_replace is a string, the replacement
    will be applied in all columns of the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If `value` is not `None` and to_replace is a dictionary, the dictionary keys
    will be the DataFrame columns that the replacement will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
