- en: scipy.interpolate.InterpolatedUnivariateSpline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.html#scipy.interpolate.InterpolatedUnivariateSpline](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.interpolate.InterpolatedUnivariateSpline.html#scipy.interpolate.InterpolatedUnivariateSpline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 1-D interpolating spline for a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: Fits a spline y = spl(x) of degree *k* to the provided *x*, *y* data. Spline
    function passes through all provided points. Equivalent to [`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline") with *s* = 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Input dimension of data points – must be strictly increasing
  prefs: []
  type: TYPE_NORMAL
- en: '**y**(N,) array_like'
  prefs: []
  type: TYPE_NORMAL
- en: input dimension of data points
  prefs: []
  type: TYPE_NORMAL
- en: '**w**(N,) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Weights for spline fitting. Must be positive. If None (default), weights are
    all 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**bbox**(2,) array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 2-sequence specifying the boundary of the approximation interval. If None (default),
    `bbox=[x[0], x[-1]]`.
  prefs: []
  type: TYPE_NORMAL
- en: '**k**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Degree of the smoothing spline. Must be `1 <= k <= 5`. Default is `k = 3`, a
    cubic spline.
  prefs: []
  type: TYPE_NORMAL
- en: '**ext**int or str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the extrapolation mode for elements not in the interval defined by
    the knot sequence.
  prefs: []
  type: TYPE_NORMAL
- en: if ext=0 or ‘extrapolate’, return the extrapolated value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=1 or ‘zeros’, return 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=2 or ‘raise’, raise a ValueError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if ext=3 of ‘const’, return the boundary value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default value is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '**check_finite**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether to check that the input arrays contain only finite numbers. Disabling
    may give a performance gain, but may result in problems (crashes, non-termination
    or non-sensical results) if the inputs do contain infinities or NaNs. Default
    is False.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UnivariateSpline`](scipy.interpolate.UnivariateSpline.html#scipy.interpolate.UnivariateSpline
    "scipy.interpolate.UnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smooth univariate spline to fit a given set of data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQUnivariateSpline`](scipy.interpolate.LSQUnivariateSpline.html#scipy.interpolate.LSQUnivariateSpline
    "scipy.interpolate.LSQUnivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a spline for which knots are user-selected
  prefs: []
  type: TYPE_NORMAL
- en: '[`SmoothBivariateSpline`](scipy.interpolate.SmoothBivariateSpline.html#scipy.interpolate.SmoothBivariateSpline
    "scipy.interpolate.SmoothBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a smoothing bivariate spline through the given points
  prefs: []
  type: TYPE_NORMAL
- en: '[`LSQBivariateSpline`](scipy.interpolate.LSQBivariateSpline.html#scipy.interpolate.LSQBivariateSpline
    "scipy.interpolate.LSQBivariateSpline")'
  prefs: []
  type: TYPE_NORMAL
- en: a bivariate spline using weighted least-squares fitting
  prefs: []
  type: TYPE_NORMAL
- en: '[`splrep`](scipy.interpolate.splrep.html#scipy.interpolate.splrep "scipy.interpolate.splrep")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find the B-spline representation of a 1-D curve
  prefs: []
  type: TYPE_NORMAL
- en: '[`splev`](scipy.interpolate.splev.html#scipy.interpolate.splev "scipy.interpolate.splev")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate a B-spline or its derivatives
  prefs: []
  type: TYPE_NORMAL
- en: '[`sproot`](scipy.interpolate.sproot.html#scipy.interpolate.sproot "scipy.interpolate.sproot")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to find the roots of a cubic B-spline
  prefs: []
  type: TYPE_NORMAL
- en: '[`splint`](scipy.interpolate.splint.html#scipy.interpolate.splint "scipy.interpolate.splint")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate the definite integral of a B-spline between two given
    points
  prefs: []
  type: TYPE_NORMAL
- en: '[`spalde`](scipy.interpolate.spalde.html#scipy.interpolate.spalde "scipy.interpolate.spalde")'
  prefs: []
  type: TYPE_NORMAL
- en: a function to evaluate all derivatives of a B-spline
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: The number of data points must be larger than the spline degree *k*.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-interpolate-InterpolatedUnivariateSpline-1_00_00.png](../Images/6f593497f24dc4747264957d8ad8e3db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that the `spl(x)` interpolates *y*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`__call__`](scipy.interpolate.InterpolatedUnivariateSpline.__call__.html#scipy.interpolate.InterpolatedUnivariateSpline.__call__
    "scipy.interpolate.InterpolatedUnivariateSpline.__call__")(x[, nu, ext]) | Evaluate
    spline (or its nu-th derivative) at positions x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`antiderivative`](scipy.interpolate.InterpolatedUnivariateSpline.antiderivative.html#scipy.interpolate.InterpolatedUnivariateSpline.antiderivative
    "scipy.interpolate.InterpolatedUnivariateSpline.antiderivative")([n]) | Construct
    a new spline representing the antiderivative of this spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivative`](scipy.interpolate.InterpolatedUnivariateSpline.derivative.html#scipy.interpolate.InterpolatedUnivariateSpline.derivative
    "scipy.interpolate.InterpolatedUnivariateSpline.derivative")([n]) | Construct
    a new spline representing the derivative of this spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`derivatives`](scipy.interpolate.InterpolatedUnivariateSpline.derivatives.html#scipy.interpolate.InterpolatedUnivariateSpline.derivatives
    "scipy.interpolate.InterpolatedUnivariateSpline.derivatives")(x) | Return all
    derivatives of the spline at the point x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_coeffs`](scipy.interpolate.InterpolatedUnivariateSpline.get_coeffs.html#scipy.interpolate.InterpolatedUnivariateSpline.get_coeffs
    "scipy.interpolate.InterpolatedUnivariateSpline.get_coeffs")() | Return spline
    coefficients. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_knots`](scipy.interpolate.InterpolatedUnivariateSpline.get_knots.html#scipy.interpolate.InterpolatedUnivariateSpline.get_knots
    "scipy.interpolate.InterpolatedUnivariateSpline.get_knots")() | Return positions
    of interior knots of the spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_residual`](scipy.interpolate.InterpolatedUnivariateSpline.get_residual.html#scipy.interpolate.InterpolatedUnivariateSpline.get_residual
    "scipy.interpolate.InterpolatedUnivariateSpline.get_residual")() | Return weighted
    sum of squared residuals of the spline approximation. |'
  prefs: []
  type: TYPE_TB
- en: '| [`integral`](scipy.interpolate.InterpolatedUnivariateSpline.integral.html#scipy.interpolate.InterpolatedUnivariateSpline.integral
    "scipy.interpolate.InterpolatedUnivariateSpline.integral")(a, b) | Return definite
    integral of the spline between two given points. |'
  prefs: []
  type: TYPE_TB
- en: '| [`roots`](scipy.interpolate.InterpolatedUnivariateSpline.roots.html#scipy.interpolate.InterpolatedUnivariateSpline.roots
    "scipy.interpolate.InterpolatedUnivariateSpline.roots")() | Return the zeros of
    the spline. |'
  prefs: []
  type: TYPE_TB
- en: '| [`set_smoothing_factor`](scipy.interpolate.InterpolatedUnivariateSpline.set_smoothing_factor.html#scipy.interpolate.InterpolatedUnivariateSpline.set_smoothing_factor
    "scipy.interpolate.InterpolatedUnivariateSpline.set_smoothing_factor")(s) | Continue
    spline computation with the given smoothing factor s and with the knots found
    at the last call. |'
  prefs: []
  type: TYPE_TB
- en: '| **validate_input** |  |'
  prefs: []
  type: TYPE_TB
