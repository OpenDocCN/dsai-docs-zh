- en: Power Series (numpy.polynomial.polynomial)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/routines.polynomials.polynomial.html](https://numpy.org/doc/1.26/reference/routines.polynomials.polynomial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module provides a number of objects (mostly functions) useful for dealing
    with polynomials, including a [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial") class that encapsulates the usual arithmetic
    operations. (General information on how this module represents and works with
    polynomial objects is in the docstring for its “parent” sub-package, [`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")).
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")(coef[, domain, window, symbol]) | A
    power series class. |'
  prefs: []
  type: TYPE_TB
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polydomain`](generated/numpy.polynomial.polynomial.polydomain.html#numpy.polynomial.polynomial.polydomain
    "numpy.polynomial.polynomial.polydomain") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyzero`](generated/numpy.polynomial.polynomial.polyzero.html#numpy.polynomial.polynomial.polyzero
    "numpy.polynomial.polynomial.polyzero") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyone`](generated/numpy.polynomial.polynomial.polyone.html#numpy.polynomial.polynomial.polyone
    "numpy.polynomial.polynomial.polyone") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyx`](generated/numpy.polynomial.polynomial.polyx.html#numpy.polynomial.polynomial.polyx
    "numpy.polynomial.polynomial.polyx") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyadd`](generated/numpy.polynomial.polynomial.polyadd.html#numpy.polynomial.polynomial.polyadd
    "numpy.polynomial.polynomial.polyadd")(c1, c2) | Add one polynomial to another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polysub`](generated/numpy.polynomial.polynomial.polysub.html#numpy.polynomial.polynomial.polysub
    "numpy.polynomial.polynomial.polysub")(c1, c2) | Subtract one polynomial from
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polymulx`](generated/numpy.polynomial.polynomial.polymulx.html#numpy.polynomial.polynomial.polymulx
    "numpy.polynomial.polynomial.polymulx")(c) | Multiply a polynomial by x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polymul`](generated/numpy.polynomial.polynomial.polymul.html#numpy.polynomial.polynomial.polymul
    "numpy.polynomial.polynomial.polymul")(c1, c2) | Multiply one polynomial by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polydiv`](generated/numpy.polynomial.polynomial.polydiv.html#numpy.polynomial.polynomial.polydiv
    "numpy.polynomial.polynomial.polydiv")(c1, c2) | Divide one polynomial by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polypow`](generated/numpy.polynomial.polynomial.polypow.html#numpy.polynomial.polynomial.polypow
    "numpy.polynomial.polynomial.polypow")(c, pow[, maxpower]) | Raise a polynomial
    to a power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval`](generated/numpy.polynomial.polynomial.polyval.html#numpy.polynomial.polynomial.polyval
    "numpy.polynomial.polynomial.polyval")(x, c[, tensor]) | Evaluate a polynomial
    at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval2d`](generated/numpy.polynomial.polynomial.polyval2d.html#numpy.polynomial.polynomial.polyval2d
    "numpy.polynomial.polynomial.polyval2d")(x, y, c) | Evaluate a 2-D polynomial
    at points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval3d`](generated/numpy.polynomial.polynomial.polyval3d.html#numpy.polynomial.polynomial.polyval3d
    "numpy.polynomial.polynomial.polyval3d")(x, y, z, c) | Evaluate a 3-D polynomial
    at points (x, y, z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`polygrid2d`](generated/numpy.polynomial.polynomial.polygrid2d.html#numpy.polynomial.polynomial.polygrid2d
    "numpy.polynomial.polynomial.polygrid2d")(x, y, c) | Evaluate a 2-D polynomial
    on the Cartesian product of x and y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polygrid3d`](generated/numpy.polynomial.polynomial.polygrid3d.html#numpy.polynomial.polynomial.polygrid3d
    "numpy.polynomial.polynomial.polygrid3d")(x, y, z, c) | Evaluate a 3-D polynomial
    on the Cartesian product of x, y and z. |'
  prefs: []
  type: TYPE_TB
- en: Calculus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyder`](generated/numpy.polynomial.polynomial.polyder.html#numpy.polynomial.polynomial.polyder
    "numpy.polynomial.polynomial.polyder")(c[, m, scl, axis]) | Differentiate a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyint`](generated/numpy.polynomial.polynomial.polyint.html#numpy.polynomial.polynomial.polyint
    "numpy.polynomial.polynomial.polyint")(c[, m, k, lbnd, scl, axis]) | Integrate
    a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: Misc Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyfromroots`](generated/numpy.polynomial.polynomial.polyfromroots.html#numpy.polynomial.polynomial.polyfromroots
    "numpy.polynomial.polynomial.polyfromroots")(roots) | Generate a monic polynomial
    with given roots. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyroots`](generated/numpy.polynomial.polynomial.polyroots.html#numpy.polynomial.polynomial.polyroots
    "numpy.polynomial.polynomial.polyroots")(c) | Compute the roots of a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvalfromroots`](generated/numpy.polynomial.polynomial.polyvalfromroots.html#numpy.polynomial.polynomial.polyvalfromroots
    "numpy.polynomial.polynomial.polyvalfromroots")(x, r[, tensor]) | Evaluate a polynomial
    specified by its roots at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander`](generated/numpy.polynomial.polynomial.polyvander.html#numpy.polynomial.polynomial.polyvander
    "numpy.polynomial.polynomial.polyvander")(x, deg) | Vandermonde matrix of given
    degree. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander2d`](generated/numpy.polynomial.polynomial.polyvander2d.html#numpy.polynomial.polynomial.polyvander2d
    "numpy.polynomial.polynomial.polyvander2d")(x, y, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander3d`](generated/numpy.polynomial.polynomial.polyvander3d.html#numpy.polynomial.polynomial.polyvander3d
    "numpy.polynomial.polynomial.polyvander3d")(x, y, z, deg) | Pseudo-Vandermonde
    matrix of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polycompanion`](generated/numpy.polynomial.polynomial.polycompanion.html#numpy.polynomial.polynomial.polycompanion
    "numpy.polynomial.polynomial.polycompanion")(c) | Return the companion matrix
    of c. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyfit`](generated/numpy.polynomial.polynomial.polyfit.html#numpy.polynomial.polynomial.polyfit
    "numpy.polynomial.polynomial.polyfit")(x, y, deg[, rcond, full, w]) | Least-squares
    fit of a polynomial to data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polytrim`](generated/numpy.polynomial.polynomial.polytrim.html#numpy.polynomial.polynomial.polytrim
    "numpy.polynomial.polynomial.polytrim")(c[, tol]) | Remove "small" "trailing"
    coefficients from a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyline`](generated/numpy.polynomial.polynomial.polyline.html#numpy.polynomial.polynomial.polyline
    "numpy.polynomial.polynomial.polyline")(off, scl) | Returns an array representing
    a linear polynomial. |'
  prefs: []
  type: TYPE_TB
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")'
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`Polynomial`](generated/numpy.polynomial.polynomial.Polynomial.html#numpy.polynomial.polynomial.Polynomial
    "numpy.polynomial.polynomial.Polynomial")(coef[, domain, window, symbol]) | A
    power series class. |'
  prefs: []
  type: TYPE_TB
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polydomain`](generated/numpy.polynomial.polynomial.polydomain.html#numpy.polynomial.polynomial.polydomain
    "numpy.polynomial.polynomial.polydomain") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyzero`](generated/numpy.polynomial.polynomial.polyzero.html#numpy.polynomial.polynomial.polyzero
    "numpy.polynomial.polynomial.polyzero") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyone`](generated/numpy.polynomial.polynomial.polyone.html#numpy.polynomial.polynomial.polyone
    "numpy.polynomial.polynomial.polyone") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyx`](generated/numpy.polynomial.polynomial.polyx.html#numpy.polynomial.polynomial.polyx
    "numpy.polynomial.polynomial.polyx") | An array object represents a multidimensional,
    homogeneous array of fixed-size items. |'
  prefs: []
  type: TYPE_TB
- en: Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyadd`](generated/numpy.polynomial.polynomial.polyadd.html#numpy.polynomial.polynomial.polyadd
    "numpy.polynomial.polynomial.polyadd")(c1, c2) | Add one polynomial to another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polysub`](generated/numpy.polynomial.polynomial.polysub.html#numpy.polynomial.polynomial.polysub
    "numpy.polynomial.polynomial.polysub")(c1, c2) | Subtract one polynomial from
    another. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polymulx`](generated/numpy.polynomial.polynomial.polymulx.html#numpy.polynomial.polynomial.polymulx
    "numpy.polynomial.polynomial.polymulx")(c) | Multiply a polynomial by x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polymul`](generated/numpy.polynomial.polynomial.polymul.html#numpy.polynomial.polynomial.polymul
    "numpy.polynomial.polynomial.polymul")(c1, c2) | Multiply one polynomial by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polydiv`](generated/numpy.polynomial.polynomial.polydiv.html#numpy.polynomial.polynomial.polydiv
    "numpy.polynomial.polynomial.polydiv")(c1, c2) | Divide one polynomial by another.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polypow`](generated/numpy.polynomial.polynomial.polypow.html#numpy.polynomial.polynomial.polypow
    "numpy.polynomial.polynomial.polypow")(c, pow[, maxpower]) | Raise a polynomial
    to a power. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval`](generated/numpy.polynomial.polynomial.polyval.html#numpy.polynomial.polynomial.polyval
    "numpy.polynomial.polynomial.polyval")(x, c[, tensor]) | Evaluate a polynomial
    at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval2d`](generated/numpy.polynomial.polynomial.polyval2d.html#numpy.polynomial.polynomial.polyval2d
    "numpy.polynomial.polynomial.polyval2d")(x, y, c) | Evaluate a 2-D polynomial
    at points (x, y). |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyval3d`](generated/numpy.polynomial.polynomial.polyval3d.html#numpy.polynomial.polynomial.polyval3d
    "numpy.polynomial.polynomial.polyval3d")(x, y, z, c) | Evaluate a 3-D polynomial
    at points (x, y, z). |'
  prefs: []
  type: TYPE_TB
- en: '| [`polygrid2d`](generated/numpy.polynomial.polynomial.polygrid2d.html#numpy.polynomial.polynomial.polygrid2d
    "numpy.polynomial.polynomial.polygrid2d")(x, y, c) | Evaluate a 2-D polynomial
    on the Cartesian product of x and y. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polygrid3d`](generated/numpy.polynomial.polynomial.polygrid3d.html#numpy.polynomial.polynomial.polygrid3d
    "numpy.polynomial.polynomial.polygrid3d")(x, y, z, c) | Evaluate a 3-D polynomial
    on the Cartesian product of x, y and z. |'
  prefs: []
  type: TYPE_TB
- en: Calculus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyder`](generated/numpy.polynomial.polynomial.polyder.html#numpy.polynomial.polynomial.polyder
    "numpy.polynomial.polynomial.polyder")(c[, m, scl, axis]) | Differentiate a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyint`](generated/numpy.polynomial.polynomial.polyint.html#numpy.polynomial.polynomial.polyint
    "numpy.polynomial.polynomial.polyint")(c[, m, k, lbnd, scl, axis]) | Integrate
    a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: Misc Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| [`polyfromroots`](generated/numpy.polynomial.polynomial.polyfromroots.html#numpy.polynomial.polynomial.polyfromroots
    "numpy.polynomial.polynomial.polyfromroots")(roots) | Generate a monic polynomial
    with given roots. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyroots`](generated/numpy.polynomial.polynomial.polyroots.html#numpy.polynomial.polynomial.polyroots
    "numpy.polynomial.polynomial.polyroots")(c) | Compute the roots of a polynomial.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvalfromroots`](generated/numpy.polynomial.polynomial.polyvalfromroots.html#numpy.polynomial.polynomial.polyvalfromroots
    "numpy.polynomial.polynomial.polyvalfromroots")(x, r[, tensor]) | Evaluate a polynomial
    specified by its roots at points x. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander`](generated/numpy.polynomial.polynomial.polyvander.html#numpy.polynomial.polynomial.polyvander
    "numpy.polynomial.polynomial.polyvander")(x, deg) | Vandermonde matrix of given
    degree. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander2d`](generated/numpy.polynomial.polynomial.polyvander2d.html#numpy.polynomial.polynomial.polyvander2d
    "numpy.polynomial.polynomial.polyvander2d")(x, y, deg) | Pseudo-Vandermonde matrix
    of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyvander3d`](generated/numpy.polynomial.polynomial.polyvander3d.html#numpy.polynomial.polynomial.polyvander3d
    "numpy.polynomial.polynomial.polyvander3d")(x, y, z, deg) | Pseudo-Vandermonde
    matrix of given degrees. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polycompanion`](generated/numpy.polynomial.polynomial.polycompanion.html#numpy.polynomial.polynomial.polycompanion
    "numpy.polynomial.polynomial.polycompanion")(c) | Return the companion matrix
    of c. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyfit`](generated/numpy.polynomial.polynomial.polyfit.html#numpy.polynomial.polynomial.polyfit
    "numpy.polynomial.polynomial.polyfit")(x, y, deg[, rcond, full, w]) | Least-squares
    fit of a polynomial to data. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polytrim`](generated/numpy.polynomial.polynomial.polytrim.html#numpy.polynomial.polynomial.polytrim
    "numpy.polynomial.polynomial.polytrim")(c[, tol]) | Remove "small" "trailing"
    coefficients from a polynomial. |'
  prefs: []
  type: TYPE_TB
- en: '| [`polyline`](generated/numpy.polynomial.polynomial.polyline.html#numpy.polynomial.polynomial.polyline
    "numpy.polynomial.polynomial.polyline")(off, scl) | Returns an array representing
    a linear polynomial. |'
  prefs: []
  type: TYPE_TB
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`numpy.polynomial`](routines.polynomials.package.html#module-numpy.polynomial
    "numpy.polynomial")'
  prefs: []
  type: TYPE_NORMAL
