["```py\nsympy.crypto.crypto.AZ(s=None)\n```", "```py\n>>> from sympy.crypto.crypto import AZ\n>>> AZ('Hello, world!')\n'HELLOWORLD'\n>>> AZ('Hello, world!'.split())\n['HELLO', 'WORLD'] \n```", "```py\nsympy.crypto.crypto.padded_key(key, symbols)\n```", "```py\n>>> from sympy.crypto.crypto import padded_key\n>>> padded_key('PUPPY', 'OPQRSTUVWXY')\n'PUYOQRSTVWX'\n>>> padded_key('RSA', 'ARTIST')\nTraceback (most recent call last):\n...\nValueError: duplicate characters in symbols: T \n```", "```py\nsympy.crypto.crypto.check_and_join(phrase, symbols=None, filter=None)\n```", "```py\n>>> from sympy.crypto.crypto import check_and_join\n>>> check_and_join('a phrase')\n'a phrase'\n>>> check_and_join('a phrase'.upper().split())\n'APHRASE'\n>>> check_and_join('a phrase!'.upper().split(), 'ARE', filter=True)\n'ARAE'\n>>> check_and_join('a phrase!'.upper().split(), 'ARE')\nTraceback (most recent call last):\n...\nValueError: characters in phrase but not symbols: \"!HPS\" \n```", "```py\nsympy.crypto.crypto.cycle_list(k, n)\n```", "```py\n>>> from sympy.crypto.crypto import cycle_list\n>>> cycle_list(3, 10)\n[3, 4, 5, 6, 7, 8, 9, 0, 1, 2] \n```", "```py\nsympy.crypto.crypto.encipher_shift(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_shift, decipher_shift\n>>> msg = \"GONAVYBEATARMY\"\n>>> ct = encipher_shift(msg, 1); ct\n'HPOBWZCFBUBSNZ' \n```", "```py\n>>> encipher_shift(ct, -1)\n'GONAVYBEATARMY' \n```", "```py\n>>> decipher_shift(ct, 1)\n'GONAVYBEATARMY' \n```", "```py\nsympy.crypto.crypto.decipher_shift(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_shift, decipher_shift\n>>> msg = \"GONAVYBEATARMY\"\n>>> ct = encipher_shift(msg, 1); ct\n'HPOBWZCFBUBSNZ' \n```", "```py\n>>> encipher_shift(ct, -1)\n'GONAVYBEATARMY' \n```", "```py\n>>> decipher_shift(ct, 1)\n'GONAVYBEATARMY' \n```", "```py\nsympy.crypto.crypto.encipher_rot13(msg, symbols=None)\n```", "```py\nsympy.crypto.crypto.decipher_rot13(msg, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_rot13, decipher_rot13\n>>> msg = 'GONAVYBEATARMY'\n>>> ciphertext = encipher_rot13(msg);ciphertext\n'TBANILORNGNEZL'\n>>> decipher_rot13(ciphertext)\n'GONAVYBEATARMY'\n>>> encipher_rot13(msg) == decipher_rot13(msg)\nTrue\n>>> msg == decipher_rot13(ciphertext)\nTrue \n```", "```py\nsympy.crypto.crypto.encipher_affine(msg, key, symbols=None, _inverse=False)\n```", "```py\nsympy.crypto.crypto.decipher_affine(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_affine, decipher_affine\n>>> msg = \"GO NAVY BEAT ARMY\"\n>>> key = (3, 1)\n>>> encipher_affine(msg, key)\n'TROBMVENBGBALV'\n>>> decipher_affine(_, key)\n'GONAVYBEATARMY' \n```", "```py\nsympy.crypto.crypto.encipher_atbash(msg, symbols=None)\n```", "```py\nsympy.crypto.crypto.decipher_atbash(msg, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_atbash, decipher_atbash\n>>> msg = 'GONAVYBEATARMY'\n>>> encipher_atbash(msg)\n'TLMZEBYVZGZINB'\n>>> decipher_atbash(msg)\n'TLMZEBYVZGZINB'\n>>> encipher_atbash(msg) == decipher_atbash(msg)\nTrue\n>>> msg == encipher_atbash(encipher_atbash(msg))\nTrue \n```", "```py\nsympy.crypto.crypto.encipher_substitution(msg, old, new=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_substitution, AZ\n>>> old = 'OEYAG'\n>>> new = '034^6'\n>>> msg = AZ(\"go navy! beat army!\")\n>>> ct = encipher_substitution(msg, old, new); ct\n'60N^V4B3^T^RM4' \n```", "```py\n>>> encipher_substitution(ct, new, old)\n'GONAVYBEATARMY' \n```", "```py\n>>> old = 'NAVY'\n>>> new = 'ANYV'\n>>> encipher = lambda x: encipher_substitution(x, old, new)\n>>> encipher('NAVY')\n'ANYV'\n>>> encipher(_)\n'NAVY' \n```", "```py\n>>> ords = dict(zip('abc', ['\\\\%i' % ord(i) for i in 'abc']))\n>>> print(encipher_substitution('abc', ords))\n\\97\\98\\99 \n```", "```py\nsympy.crypto.crypto.encipher_vigenere(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_vigenere, AZ\n>>> key = \"encrypt\"\n>>> msg = \"meet me on monday\"\n>>> encipher_vigenere(msg, key)\n'QRGKKTHRZQEBPR' \n```", "```py\n>>> from sympy.crypto.crypto import decipher_vigenere, padded_key\n>>> alp = padded_key('KRYPTOS', AZ())\n>>> key = 'PALIMPSEST'\n>>> msg = 'EMUFPHZLRFAXYUSDJKZLDKRNSHGNFIVJ'\n>>> decipher_vigenere(msg, key, alp)\n'BETWEENSUBTLESHADINGANDTHEABSENC' \n```", "```py\n>>> m = AZ('go navy, beat army! yes you can'); m\n'GONAVYBEATARMYYESYOUCAN'\n>>> key = AZ('gold bug'); n1 = len(key); n2 = len(m)\n>>> auto_key = key + m[:n2 - n1]; auto_key\n'GOLDBUGGONAVYBEATARMYYE'\n>>> ct = encipher_vigenere(m, auto_key); ct\n'MCYDWSHKOGAMKZCELYFGAYR'\n>>> n1 = len(key)\n>>> pt = []\n>>> while ct:\n...     part, ct = ct[:n1], ct[n1:]\n...     pt.append(decipher_vigenere(part, key))\n...     key = pt[-1]\n...\n>>> ''.join(pt) == m\nTrue \n```", "```py\nsympy.crypto.crypto.decipher_vigenere(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import decipher_vigenere\n>>> key = \"encrypt\"\n>>> ct = \"QRGK kt HRZQE BPR\"\n>>> decipher_vigenere(ct, key)\n'MEETMEONMONDAY' \n```", "```py\nsympy.crypto.crypto.encipher_hill(msg, key, symbols=None, pad='Q')\n```", "```py\nsympy.crypto.crypto.decipher_hill(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_hill, decipher_hill\n>>> from sympy import Matrix \n```", "```py\n>>> key = Matrix([[1, 2], [3, 5]])\n>>> encipher_hill(\"meet me on monday\", key)\n'UEQDUEODOCTCWQ'\n>>> decipher_hill(_, key)\n'MEETMEONMONDAY' \n```", "```py\n>>> key = Matrix([[1, 1, 1, 2], [0, 1, 1, 0],\n...               [2, 2, 3, 4], [1, 1, 0, 1]])\n>>> msg = \"ST\"\n>>> encipher_hill(msg, key)\n'HJEB'\n>>> decipher_hill(_, key)\n'STQQ'\n>>> encipher_hill(msg, key, pad=\"Z\")\n'ISPK'\n>>> decipher_hill(_, key)\n'STZZ' \n```", "```py\n>>> decipher_hill(\"HD\", key)\n'ORMV'\n>>> decipher_hill(\"IS\", key)\n'UIKY' \n```", "```py\nsympy.crypto.crypto.encipher_bifid(msg, key, symbols=None)\n```", "```py\nsympy.crypto.crypto.decipher_bifid(msg, key, symbols=None)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     encipher_bifid, decipher_bifid, AZ) \n```", "```py\n>>> alp = AZ().replace('J', '')\n>>> ct = AZ(\"meet me on monday!\")\n>>> key = AZ(\"gold bug\")\n>>> encipher_bifid(ct, key, alp)\n'IEILHHFSTSFQYE' \n```", "```py\n>>> decipher_bifid('''\n... IEILH\n... HFSTS\n... FQYEJ''', key, alp)\n'MEETMEONMONDAY' \n```", "```py\n>>> key = ''\n>>> encipher_bifid('hello world!', key)\n'bmtwmg-bIo*w'\n>>> decipher_bifid(_, key)\n'hello world!' \n```", "```py\n>>> key = 'gold bug'\n>>> encipher_bifid('hello world!', 'gold_bug')\n'hg2sfuei7t}w' \n```", "```py\n>>> decipher_bifid(_, 'gold pug')\n'heldo~wor6d!' \n```", "```py\nsympy.crypto.crypto.bifid5_square(key=None)\n```", "```py\n>>> from sympy.crypto.crypto import bifid5_square\n>>> bifid5_square(\"gold bug\")\nMatrix([\n[G, O, L, D, B],\n[U, A, C, E, F],\n[H, I, K, M, N],\n[P, Q, R, S, T],\n[V, W, X, Y, Z]]) \n```", "```py\nsympy.crypto.crypto.encipher_bifid5(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     encipher_bifid5, decipher_bifid5) \n```", "```py\n>>> round_trip = lambda m, k: \\\n...     decipher_bifid5(encipher_bifid5(m, k), k)\n>>> key = 'a'\n>>> msg = \"JOSIE\"\n>>> round_trip(msg, key)\n'OSIE'\n>>> round_trip(msg.replace(\"J\", \"I\"), key)\n'IOSIE'\n>>> j = \"QIQ\"\n>>> round_trip(msg.replace(\"J\", j), key).replace(j, \"J\")\n'JOSIE' \n```", "```py\nsympy.crypto.crypto.decipher_bifid5(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_bifid5, decipher_bifid5\n>>> key = \"gold bug\"\n>>> encipher_bifid5('meet me on friday', key)\n'IEILEHFSTSFXEE'\n>>> encipher_bifid5('meet me on monday', key)\n'IEILHHFSTSFQYE'\n>>> decipher_bifid5(_, key)\n'MEETMEONMONDAY' \n```", "```py\nsympy.crypto.crypto.encipher_bifid6(msg, key)\n```", "```py\nsympy.crypto.crypto.decipher_bifid6(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_bifid6, decipher_bifid6\n>>> key = \"gold bug\"\n>>> encipher_bifid6('meet me on monday at 8am', key)\n'KFKLJJHF5MMMKTFRGPL'\n>>> decipher_bifid6(_, key)\n'MEETMEONMONDAYAT8AM' \n```", "```py\nsympy.crypto.crypto.bifid6_square(key=None)\n```", "```py\n>>> from sympy.crypto.crypto import bifid6_square\n>>> key = \"gold bug\"\n>>> bifid6_square(key)\nMatrix([\n[G, O, L, D, B, U],\n[A, C, E, F, H, I],\n[J, K, M, N, P, Q],\n[R, S, T, V, W, X],\n[Y, Z, 0, 1, 2, 3],\n[4, 5, 6, 7, 8, 9]]) \n```", "```py\nsympy.crypto.crypto.rsa_public_key(*args, **kwargs)\n```", "```py\n> >>> from sympy.crypto.crypto import rsa_public_key\n> \n> >>> rsa_public_key(61, 53, 17, totient='Carmichael', index=0)\n> \n> (3233, 17)\n> \n> >>> rsa_public_key(61, 53, 17, totient='Carmichael', index=1)\n> \n> (3233, 797)\n> \n> >>> rsa_public_key(61, 53, 17, totient='Carmichael', index=2)\n> \n> (3233, 1577) \n> ```", "```py\n>>> from sympy.crypto.crypto import rsa_public_key \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> rsa_public_key(p, q, e)\n(15, 7)\n>>> rsa_public_key(p, q, 30)\nFalse \n```", "```py\n>>> primes = [2, 3, 5, 7, 11, 13]\n>>> e = 7\n>>> args = primes + [e]\n>>> rsa_public_key(*args)\n(30030, 7) \n```", "```py\nsympy.crypto.crypto.rsa_private_key(*args, **kwargs)\n```", "```py\n> >>> from sympy.crypto.crypto import rsa_private_key\n> \n> >>> rsa_private_key(61, 53, 17, totient='Euler')\n> \n> (3233, 2753) \n> ```", "```py\n> >>> from sympy.crypto.crypto import rsa_private_key\n> \n> >>> rsa_private_key(61, 53, 17, totient='Carmichael')\n> \n> (3233, 413) \n> ```", "```py\n> >>> from sympy.crypto.crypto import rsa_private_key\n> \n> >>> rsa_private_key(61, 53, 17, totient='Carmichael', index=0)\n> \n> (3233, 413)\n> \n> >>> rsa_private_key(61, 53, 17, totient='Carmichael', index=1)\n> \n> (3233, 1193)\n> \n> >>> rsa_private_key(61, 53, 17, totient='Carmichael', index=2)\n> \n> (3233, 1973) \n> ```", "```py\n>>> from sympy.crypto.crypto import rsa_private_key \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> rsa_private_key(p, q, e)\n(15, 7)\n>>> rsa_private_key(p, q, 30)\nFalse \n```", "```py\n>>> primes = [2, 3, 5, 7, 11, 13]\n>>> e = 7\n>>> args = primes + [e]\n>>> rsa_private_key(*args)\n(30030, 823) \n```", "```py\nsympy.crypto.crypto.encipher_rsa(i, key, factors=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_rsa\n>>> from sympy.crypto.crypto import rsa_public_key, rsa_private_key \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> puk = rsa_public_key(p, q, e)\n>>> msg = 12\n>>> encipher_rsa(msg, puk)\n3 \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> prk = rsa_private_key(p, q, e)\n>>> msg = 12\n>>> encipher_rsa(msg, prk)\n3 \n```", "```py\n>>> encipher_rsa(msg, prk, factors=[p, q])\n3 \n```", "```py\nsympy.crypto.crypto.decipher_rsa(i, key, factors=None)\n```", "```py\n>>> from sympy.crypto.crypto import decipher_rsa, encipher_rsa\n>>> from sympy.crypto.crypto import rsa_public_key, rsa_private_key \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> prk = rsa_private_key(p, q, e)\n>>> puk = rsa_public_key(p, q, e)\n>>> msg = 12\n>>> new_msg = encipher_rsa(msg, prk)\n>>> new_msg\n3\n>>> decipher_rsa(new_msg, puk)\n12 \n```", "```py\n>>> p, q, e = 3, 5, 7\n>>> prk = rsa_private_key(p, q, e)\n>>> puk = rsa_public_key(p, q, e)\n>>> msg = 12\n>>> new_msg = encipher_rsa(msg, puk)\n>>> new_msg\n3\n>>> decipher_rsa(new_msg, prk)\n12 \n```", "```py\n>>> decipher_rsa(new_msg, prk, factors=[p, q])\n12 \n```", "```py\nsympy.crypto.crypto.kid_rsa_public_key(a, b, A, B)\n```", "```py\n>>> from sympy.crypto.crypto import kid_rsa_public_key\n>>> a, b, A, B = 3, 4, 5, 6\n>>> kid_rsa_public_key(a, b, A, B)\n(369, 58) \n```", "```py\nsympy.crypto.crypto.kid_rsa_private_key(a, b, A, B)\n```", "```py\n>>> from sympy.crypto.crypto import kid_rsa_private_key\n>>> a, b, A, B = 3, 4, 5, 6\n>>> kid_rsa_private_key(a, b, A, B)\n(369, 70) \n```", "```py\nsympy.crypto.crypto.encipher_kid_rsa(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     encipher_kid_rsa, kid_rsa_public_key)\n>>> msg = 200\n>>> a, b, A, B = 3, 4, 5, 6\n>>> key = kid_rsa_public_key(a, b, A, B)\n>>> encipher_kid_rsa(msg, key)\n161 \n```", "```py\nsympy.crypto.crypto.decipher_kid_rsa(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     kid_rsa_public_key, kid_rsa_private_key,\n...     decipher_kid_rsa, encipher_kid_rsa)\n>>> a, b, A, B = 3, 4, 5, 6\n>>> d = kid_rsa_private_key(a, b, A, B)\n>>> msg = 200\n>>> pub = kid_rsa_public_key(a, b, A, B)\n>>> pri = kid_rsa_private_key(a, b, A, B)\n>>> ct = encipher_kid_rsa(msg, pub)\n>>> decipher_kid_rsa(ct, pri)\n200 \n```", "```py\nsympy.crypto.crypto.encode_morse(msg, sep='|', mapping=None)\n```", "```py\n>>> from sympy.crypto.crypto import encode_morse\n>>> msg = 'ATTACK RIGHT FLANK'\n>>> encode_morse(msg)\n'.-|-|-|.-|-.-.|-.-||.-.|..|--.|....|-||..-.|.-..|.-|-.|-.-' \n```", "```py\nsympy.crypto.crypto.decode_morse(msg, sep='|', mapping=None)\n```", "```py\n>>> from sympy.crypto.crypto import decode_morse\n>>> mc = '--|---|...-|.||.|.-|...|-'\n>>> decode_morse(mc)\n'MOVE EAST' \n```", "```py\nsympy.crypto.crypto.lfsr_sequence(key, fill, n)\n```", "```py\n>>> from sympy.crypto.crypto import lfsr_sequence\n>>> from sympy.polys.domains import FF\n>>> F = FF(2)\n>>> fill = [F(1), F(1), F(0), F(1)]\n>>> key = [F(1), F(0), F(0), F(1)]\n>>> lfsr_sequence(key, fill, 10)\n[1 mod 2, 1 mod 2, 0 mod 2, 1 mod 2, 0 mod 2,\n1 mod 2, 1 mod 2, 0 mod 2, 0 mod 2, 1 mod 2] \n```", "```py\nsympy.crypto.crypto.lfsr_autocorrelation(L, P, k)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     lfsr_sequence, lfsr_autocorrelation)\n>>> from sympy.polys.domains import FF\n>>> F = FF(2)\n>>> fill = [F(1), F(1), F(0), F(1)]\n>>> key = [F(1), F(0), F(0), F(1)]\n>>> s = lfsr_sequence(key, fill, 20)\n>>> lfsr_autocorrelation(s, 15, 7)\n-1/15\n>>> lfsr_autocorrelation(s, 15, 0)\n1 \n```", "```py\nsympy.crypto.crypto.lfsr_connection_polynomial(s)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     lfsr_sequence, lfsr_connection_polynomial)\n>>> from sympy.polys.domains import FF\n>>> F = FF(2)\n>>> fill = [F(1), F(1), F(0), F(1)]\n>>> key = [F(1), F(0), F(0), F(1)]\n>>> s = lfsr_sequence(key, fill, 20)\n>>> lfsr_connection_polynomial(s)\nx**4 + x + 1\n>>> fill = [F(1), F(0), F(0), F(1)]\n>>> key = [F(1), F(1), F(0), F(1)]\n>>> s = lfsr_sequence(key, fill, 20)\n>>> lfsr_connection_polynomial(s)\nx**3 + 1\n>>> fill = [F(1), F(0), F(1)]\n>>> key = [F(1), F(1), F(0)]\n>>> s = lfsr_sequence(key, fill, 20)\n>>> lfsr_connection_polynomial(s)\nx**3 + x**2 + 1\n>>> fill = [F(1), F(0), F(1)]\n>>> key = [F(1), F(0), F(1)]\n>>> s = lfsr_sequence(key, fill, 20)\n>>> lfsr_connection_polynomial(s)\nx**3 + x + 1 \n```", "```py\nsympy.crypto.crypto.elgamal_public_key(key)\n```", "```py\n>>> from sympy.crypto.crypto import elgamal_public_key\n>>> elgamal_public_key((1031, 14, 636))\n(1031, 14, 212) \n```", "```py\nsympy.crypto.crypto.elgamal_private_key(digit=10, seed=None)\n```", "```py\n>>> from sympy.crypto.crypto import elgamal_private_key\n>>> from sympy.ntheory import is_primitive_root, isprime\n>>> a, b, _ = elgamal_private_key()\n>>> isprime(a)\nTrue\n>>> is_primitive_root(b, a)\nTrue \n```", "```py\nsympy.crypto.crypto.encipher_elgamal(i, key, seed=None)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_elgamal, elgamal_private_key, elgamal_public_key\n>>> pri = elgamal_private_key(5, seed=[3]); pri\n(37, 2, 3)\n>>> pub = elgamal_public_key(pri); pub\n(37, 2, 8)\n>>> msg = 36\n>>> encipher_elgamal(msg, pub, seed=[3])\n(8, 6) \n```", "```py\nsympy.crypto.crypto.decipher_elgamal(msg, key)\n```", "```py\n>>> from sympy.crypto.crypto import decipher_elgamal\n>>> from sympy.crypto.crypto import encipher_elgamal\n>>> from sympy.crypto.crypto import elgamal_private_key\n>>> from sympy.crypto.crypto import elgamal_public_key \n```", "```py\n>>> pri = elgamal_private_key(5, seed=[3])\n>>> pub = elgamal_public_key(pri); pub\n(37, 2, 8)\n>>> msg = 17\n>>> decipher_elgamal(encipher_elgamal(msg, pub), pri) == msg\nTrue \n```", "```py\nsympy.crypto.crypto.dh_public_key(key)\n```", "```py\n>>> from sympy.crypto.crypto import dh_private_key, dh_public_key\n>>> p, g, a = dh_private_key();\n>>> _p, _g, x = dh_public_key((p, g, a))\n>>> p == _p and g == _g\nTrue\n>>> x == pow(g, a, p)\nTrue \n```", "```py\nsympy.crypto.crypto.dh_private_key(digit=10, seed=None)\n```", "```py\n>>> from sympy.crypto.crypto import dh_private_key\n>>> from sympy.ntheory import isprime, is_primitive_root\n>>> p, g, _ = dh_private_key()\n>>> isprime(p)\nTrue\n>>> is_primitive_root(g, p)\nTrue\n>>> p, g, _ = dh_private_key(5)\n>>> isprime(p)\nTrue\n>>> is_primitive_root(g, p)\nTrue \n```", "```py\nsympy.crypto.crypto.dh_shared_key(key, b)\n```", "```py\n>>> from sympy.crypto.crypto import (\n...     dh_private_key, dh_public_key, dh_shared_key)\n>>> prk = dh_private_key();\n>>> p, g, x = dh_public_key(prk);\n>>> sk = dh_shared_key((p, g, x), 1000)\n>>> sk == pow(x, 1000, p)\nTrue \n```", "```py\nsympy.crypto.crypto.gm_public_key(p, q, a=None, seed=None)\n```", "```py\nsympy.crypto.crypto.gm_private_key(p, q, a=None)\n```", "```py\nsympy.crypto.crypto.encipher_gm(i, key, seed=None)\n```", "```py\nsympy.crypto.crypto.decipher_gm(message, key)\n```", "```py\nsympy.crypto.crypto.encipher_railfence(message, rails)\n```", "```py\n>>> from sympy.crypto.crypto import encipher_railfence\n>>> message = \"hello world\"\n>>> encipher_railfence(message,3)\n'horel ollwd' \n```", "```py\nsympy.crypto.crypto.decipher_railfence(ciphertext, rails)\n```", "```py\n>>> from sympy.crypto.crypto import decipher_railfence\n>>> decipher_railfence(\"horel ollwd\",3)\n'hello world' \n```"]