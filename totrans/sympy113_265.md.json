["```py\nclass sympy.geometry.point.Point(*args, **kwargs)\n```", "```py\n>>> from sympy import Point\n>>> from sympy.abc import x\n>>> Point(1, 2, 3)\nPoint3D(1, 2, 3)\n>>> Point([1, 2])\nPoint2D(1, 2)\n>>> Point(0, x)\nPoint2D(0, x)\n>>> Point(dim=4)\nPoint(0, 0, 0, 0) \n```", "```py\n>>> Point(0.5, 0.25)\nPoint2D(1/2, 1/4)\n>>> Point(0.5, 0.25, evaluate=False)\nPoint2D(0.5, 0.25) \n```", "```py\nstatic affine_rank(*args)\n```", "```py\nproperty ambient_dimension\n```", "```py\nclassmethod are_coplanar(*points)\n```", "```py\n>>> from sympy import Point3D\n>>> p1 = Point3D(1, 2, 2)\n>>> p2 = Point3D(2, 7, 2)\n>>> p3 = Point3D(0, 0, 2)\n>>> p4 = Point3D(1, 1, 2)\n>>> Point3D.are_coplanar(p1, p2, p3, p4)\nTrue\n>>> p5 = Point3D(0, 1, 3)\n>>> Point3D.are_coplanar(p1, p2, p3, p5)\nFalse \n```", "```py\ncanberra_distance(p)\n```", "```py\n>>> from sympy import Point\n>>> p1, p2 = Point(1, 1), Point(3, 3)\n>>> p1.canberra_distance(p2)\n1\n>>> p1, p2 = Point(0, 0), Point(3, 3)\n>>> p1.canberra_distance(p2)\n2 \n```", "```py\ndistance(other)\n```", "```py\n>>> from sympy import Point, Line\n>>> p1, p2 = Point(1, 1), Point(4, 5)\n>>> l = Line((3, 1), (2, 2))\n>>> p1.distance(p2)\n5\n>>> p1.distance(l)\nsqrt(2) \n```", "```py\n>>> from sympy.abc import x, y\n>>> p3 = Point(x, y)\n>>> p3.distance((0, 0))\nsqrt(x**2 + y**2) \n```", "```py\ndot(p)\n```", "```py\nequals(other)\n```", "```py\nintersection(other)\n```", "```py\n>>> from sympy import Point\n>>> p1, p2, p3 = Point(0, 0), Point(1, 1), Point(0, 0)\n>>> p1.intersection(p2)\n[]\n>>> p1.intersection(p3)\n[Point2D(0, 0)] \n```", "```py\nis_collinear(*args)\n```", "```py\n>>> from sympy import Point\n>>> from sympy.abc import x\n>>> p1, p2 = Point(0, 0), Point(1, 1)\n>>> p3, p4, p5 = Point(2, 2), Point(x, x), Point(1, 2)\n>>> Point.is_collinear(p1, p2, p3, p4)\nTrue\n>>> Point.is_collinear(p1, p2, p3, p5)\nFalse \n```", "```py\nis_concyclic(*args)\n```", "```py\n>>> from sympy import Point \n```", "```py\n>>> p1, p2, p3, p4 = Point(1, 0), (0, 1), (-1, 0), (0, -1) \n```", "```py\n>>> p1.is_concyclic() == p1.is_concyclic(p2, p3, p4) == True\nTrue \n```", "```py\n>>> p = Point(1, 1) \n```", "```py\n>>> p.is_concyclic(p1, p2, p3)\nFalse \n```", "```py\nproperty is_nonzero\n```", "```py\nis_scalar_multiple(p)\n```", "```py\nproperty is_zero\n```", "```py\nproperty length\n```", "```py\n>>> from sympy import Point\n>>> p = Point(0, 1)\n>>> p.length\n0 \n```", "```py\nmidpoint(p)\n```", "```py\n>>> from sympy import Point\n>>> p1, p2 = Point(1, 1), Point(13, 5)\n>>> p1.midpoint(p2)\nPoint2D(7, 3) \n```", "```py\nproperty origin\n```", "```py\nproperty orthogonal_direction\n```", "```py\n>>> from sympy import Line, Point\n>>> a = Point(1, 2, 3)\n>>> a.orthogonal_direction\nPoint3D(-2, 1, 0)\n>>> b = _\n>>> Line(b, b.origin).is_perpendicular(Line(a, a.origin))\nTrue \n```", "```py\nstatic project(a, b)\n```", "```py\n>>> from sympy import Line, Point\n>>> a = Point(1, 2)\n>>> b = Point(2, 5)\n>>> z = a.origin\n>>> p = Point.project(a, b)\n>>> Line(p, a).is_perpendicular(Line(p, b))\nTrue\n>>> Point.is_collinear(z, p, b)\nTrue \n```", "```py\ntaxicab_distance(p)\n```", "```py\n>>> from sympy import Point\n>>> p1, p2 = Point(1, 1), Point(4, 5)\n>>> p1.taxicab_distance(p2)\n7 \n```", "```py\nproperty unit\n```", "```py\nclass sympy.geometry.point.Point2D(*args, _nocheck=False, **kwargs)\n```", "```py\n>>> from sympy import Point2D\n>>> from sympy.abc import x\n>>> Point2D(1, 2)\nPoint2D(1, 2)\n>>> Point2D([1, 2])\nPoint2D(1, 2)\n>>> Point2D(0, x)\nPoint2D(0, x) \n```", "```py\n>>> Point2D(0.5, 0.25)\nPoint2D(1/2, 1/4)\n>>> Point2D(0.5, 0.25, evaluate=False)\nPoint2D(0.5, 0.25) \n```", "```py\nproperty bounds\n```", "```py\nproperty coordinates\n```", "```py\n>>> from sympy import Point2D\n>>> p = Point2D(0, 1)\n>>> p.coordinates\n(0, 1) \n```", "```py\nrotate(angle, pt=None)\n```", "```py\n>>> from sympy import Point2D, pi\n>>> t = Point2D(1, 0)\n>>> t.rotate(pi/2)\nPoint2D(0, 1)\n>>> t.rotate(pi/2, (2, 0))\nPoint2D(2, -1) \n```", "```py\nscale(x=1, y=1, pt=None)\n```", "```py\n>>> from sympy import Point2D\n>>> t = Point2D(1, 1)\n>>> t.scale(2)\nPoint2D(2, 1)\n>>> t.scale(2, 2)\nPoint2D(2, 2) \n```", "```py\ntransform(matrix)\n```", "```py\ntranslate(x=0, y=0)\n```", "```py\n>>> from sympy import Point2D\n>>> t = Point2D(0, 1)\n>>> t.translate(2)\nPoint2D(2, 1)\n>>> t.translate(2, 2)\nPoint2D(2, 3)\n>>> t + Point2D(2, 2)\nPoint2D(2, 3) \n```", "```py\nproperty x\n```", "```py\n>>> from sympy import Point2D\n>>> p = Point2D(0, 1)\n>>> p.x\n0 \n```", "```py\nproperty y\n```", "```py\n>>> from sympy import Point2D\n>>> p = Point2D(0, 1)\n>>> p.y\n1 \n```", "```py\nclass sympy.geometry.point.Point3D(*args, _nocheck=False, **kwargs)\n```", "```py\n>>> from sympy import Point3D\n>>> from sympy.abc import x\n>>> Point3D(1, 2, 3)\nPoint3D(1, 2, 3)\n>>> Point3D([1, 2, 3])\nPoint3D(1, 2, 3)\n>>> Point3D(0, x, 3)\nPoint3D(0, x, 3) \n```", "```py\n>>> Point3D(0.5, 0.25, 2)\nPoint3D(1/2, 1/4, 2)\n>>> Point3D(0.5, 0.25, 3, evaluate=False)\nPoint3D(0.5, 0.25, 3) \n```", "```py\nstatic are_collinear(*points)\n```", "```py\n>>> from sympy import Point3D\n>>> from sympy.abc import x\n>>> p1, p2 = Point3D(0, 0, 0), Point3D(1, 1, 1)\n>>> p3, p4, p5 = Point3D(2, 2, 2), Point3D(x, x, x), Point3D(1, 2, 6)\n>>> Point3D.are_collinear(p1, p2, p3, p4)\nTrue\n>>> Point3D.are_collinear(p1, p2, p3, p5)\nFalse \n```", "```py\nproperty coordinates\n```", "```py\n>>> from sympy import Point3D\n>>> p = Point3D(0, 1, 2)\n>>> p.coordinates\n(0, 1, 2) \n```", "```py\ndirection_cosine(point)\n```", "```py\n>>> from sympy import Point3D\n>>> p1 = Point3D(1, 2, 3)\n>>> p1.direction_cosine(Point3D(2, 3, 5))\n[sqrt(6)/6, sqrt(6)/6, sqrt(6)/3] \n```", "```py\ndirection_ratio(point)\n```", "```py\n>>> from sympy import Point3D\n>>> p1 = Point3D(1, 2, 3)\n>>> p1.direction_ratio(Point3D(2, 3, 5))\n[1, 1, 2] \n```", "```py\nintersection(other)\n```", "```py\n>>> from sympy import Point3D\n>>> p1, p2, p3 = Point3D(0, 0, 0), Point3D(1, 1, 1), Point3D(0, 0, 0)\n>>> p1.intersection(p2)\n[]\n>>> p1.intersection(p3)\n[Point3D(0, 0, 0)] \n```", "```py\nscale(x=1, y=1, z=1, pt=None)\n```", "```py\n>>> from sympy import Point3D\n>>> t = Point3D(1, 1, 1)\n>>> t.scale(2)\nPoint3D(2, 1, 1)\n>>> t.scale(2, 2)\nPoint3D(2, 2, 1) \n```", "```py\ntransform(matrix)\n```", "```py\ntranslate(x=0, y=0, z=0)\n```", "```py\n>>> from sympy import Point3D\n>>> t = Point3D(0, 1, 1)\n>>> t.translate(2)\nPoint3D(2, 1, 1)\n>>> t.translate(2, 2)\nPoint3D(2, 3, 1)\n>>> t + Point3D(2, 2, 2)\nPoint3D(2, 3, 3) \n```", "```py\nproperty x\n```", "```py\n>>> from sympy import Point3D\n>>> p = Point3D(0, 1, 3)\n>>> p.x\n0 \n```", "```py\nproperty y\n```", "```py\n>>> from sympy import Point3D\n>>> p = Point3D(0, 1, 2)\n>>> p.y\n1 \n```", "```py\nproperty z\n```", "```py\n>>> from sympy import Point3D\n>>> p = Point3D(0, 1, 1)\n>>> p.z\n1 \n```"]