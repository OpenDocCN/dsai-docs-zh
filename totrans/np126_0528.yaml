- en: numpy.loadtxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.loadtxt.html](https://numpy.org/doc/1.26/reference/generated/numpy.loadtxt.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Load data from a text file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fname**file, str, pathlib.Path, list of str, generator'
  prefs: []
  type: TYPE_NORMAL
- en: File, filename, list, or generator to read. If the filename extension is `.gz`
    or `.bz2`, the file is first decompressed. Note that generators must return bytes
    or strings. The strings in a list or produced by a generator are treated as lines.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data-type of the resulting array; default: float. If this is a structured data-type,
    the resulting array will be 1-dimensional, and each row will be interpreted as
    an element of the array. In this case, the number of columns used must match the
    number of fields in the data-type.'
  prefs: []
  type: TYPE_NORMAL
- en: '**comments**str or sequence of str or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The characters or list of characters used to indicate the start of a comment.
    None implies no comments. For backwards compatibility, byte strings will be decoded
    as ‘latin1’. The default is ‘#’.
  prefs: []
  type: TYPE_NORMAL
- en: '**delimiter**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The character used to separate the values. For backwards compatibility, byte
    strings will be decoded as ‘latin1’. The default is whitespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: Only single character delimiters are supported.
    Newline characters cannot be used as the delimiter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**converters**dict or callable, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Converter functions to customize value parsing. If *converters* is callable,
    the function is applied to all columns, else it must be a dict that maps column
    number to a parser function. See examples for further details. Default: None.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: The ability to pass a single callable to be applied
    to all columns was added.'
  prefs: []
  type: TYPE_NORMAL
- en: '**skiprows**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Skip the first *skiprows* lines, including comments; default: 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**usecols**int or sequence, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Which columns to read, with 0 being the first. For example, `usecols = (1,4,5)`
    will extract the 2nd, 5th and 6th columns. The default, None, results in all columns
    being read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.11.0: When a single column has to be read it is possible
    to use an integer instead of a tuple. E.g `usecols = 3` reads the fourth column
    the same way as `usecols = (3,)` would.'
  prefs: []
  type: TYPE_NORMAL
- en: '**unpack**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If True, the returned array is transposed, so that arguments may be unpacked
    using `x, y, z = loadtxt(...)`. When used with a structured data-type, arrays
    are returned for each field. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: '**ndmin**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned array will have at least *ndmin* dimensions. Otherwise mono-dimensional
    axes will be squeezed. Legal values: 0 (default), 1 or 2.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.6.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoding**str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Encoding used to decode the inputfile. Does not apply to input streams. The
    special value ‘bytes’ enables backward compatibility workarounds that ensures
    you receive byte arrays as results if possible and passes ‘latin1’ encoded strings
    to converters. Override this value to receive unicode arrays and pass strings
    as input to converters. If set to None the system default is used. The default
    value is ‘bytes’.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.14.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_rows**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Read *max_rows* rows of content after *skiprows* lines. The default is to read
    all the rows. Note that empty rows containing no data such as empty lines and
    comment lines are not counted towards *max_rows*, while such lines are counted
    in *skiprows*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: Lines containing no data, including comment lines
    (e.g., lines starting with ‘#’ or as specified via *comments*) are not counted
    towards *max_rows*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**quotechar**unicode character or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The character used to denote the start and end of a quoted item. Occurrences
    of the delimiter or comment characters are ignored within a quoted item. The default
    value is `quotechar=None`, which means quoting support is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: If two consecutive instances of *quotechar* are found within a quoted field,
    the first is treated as an escape character. See examples.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.23.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**like**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Reference object to allow the creation of arrays which are not NumPy arrays.
    If an array-like passed in as `like` supports the `__array_function__` protocol,
    the result will be defined by it. In this case, it ensures the creation of an
    array object compatible with that passed in via this argument.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.20.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Data read from the text file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`load`](numpy.load.html#numpy.load "numpy.load"), [`fromstring`](numpy.fromstring.html#numpy.fromstring
    "numpy.fromstring"), [`fromregex`](numpy.fromregex.html#numpy.fromregex "numpy.fromregex")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`genfromtxt`](numpy.genfromtxt.html#numpy.genfromtxt "numpy.genfromtxt")'
  prefs: []
  type: TYPE_NORMAL
- en: Load data with missing values handled as specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[`scipy.io.loadmat`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.io.loadmat.html#scipy.io.loadmat
    "(in SciPy v1.11.2)")'
  prefs: []
  type: TYPE_NORMAL
- en: reads MATLAB data files
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function aims to be a fast reader for simply formatted files. The [`genfromtxt`](numpy.genfromtxt.html#numpy.genfromtxt
    "numpy.genfromtxt") function provides more sophisticated handling of, e.g., lines
    with missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Each row in the input text file must have the same number of values to be able
    to read all values. If all rows do not have same number of values, a subset of
    up to n columns (where n is the least number of values present in all rows) can
    be read by specifying the columns via *usecols*.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: The strings produced by the Python float.hex method can be used as input for
    floats.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The *converters* argument is used to specify functions to preprocess the text
    prior to parsing. *converters* can be a dictionary that maps preprocessing functions
    to each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*converters* can be a callable instead of a dictionary, in which case it is
    applied to all columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This example shows how *converters* can be used to convert a field with a trailing
    minus sign into a negative number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a callable as the converter can be particularly useful for handling values
    with different formatting, e.g. floats with underscores:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This idea can be extended to automatically handle values specified in many
    different formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that with the default `encoding="bytes"`, the inputs to the converter function
    are latin-1 encoded byte strings. To deactivate the implicit encoding prior to
    conversion, use `encoding=None`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Support for quoted fields is enabled with the *quotechar* parameter. Comment
    and delimiter characters are ignored when they appear within a quoted item delineated
    by *quotechar*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Quoted fields can be separated by multiple whitespace characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Two consecutive quote characters within a quoted field are treated as a single
    escaped character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Read subset of columns when all rows do not contain equal number of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
