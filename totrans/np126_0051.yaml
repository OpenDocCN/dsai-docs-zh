- en: numpy.ndarray.view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.view.html](https://numpy.org/doc/1.26/reference/generated/numpy.ndarray.view.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: New view of array with the same data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Passing None for `dtype` is different from omitting the parameter, since the
    former invokes `dtype(None)` which is an alias for `dtype('float_')`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type or ndarray sub-class, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type descriptor of the returned view, e.g., float32 or int16. Omitting
    it results in the view having the same data-type as *a*. This argument can also
    be specified as an ndarray sub-class, which then specifies the type of the returned
    object (this is equivalent to setting the `type` parameter).
  prefs: []
  type: TYPE_NORMAL
- en: '**type**Python type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Type of the returned view, e.g., ndarray or matrix. Again, omission of the parameter
    results in type preservation.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: '`a.view()` is used two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a.view(some_dtype)` or `a.view(dtype=some_dtype)` constructs a view of the
    array’s memory with a different data-type. This can cause a reinterpretation of
    the bytes of memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '`a.view(ndarray_subclass)` or `a.view(type=ndarray_subclass)` just returns
    an instance of *ndarray_subclass* that looks at the same array (same shape, dtype,
    etc.) This does not cause a reinterpretation of the memory.'
  prefs: []
  type: TYPE_NORMAL
- en: For `a.view(some_dtype)`, if `some_dtype` has a different number of bytes per
    entry than the previous dtype (for example, converting a regular array to a structured
    array), then the last axis of `a` must be contiguous. This axis will be resized
    in the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.23.0: Only the last axis needs to be contiguous. Previously,
    the entire array had to be C-contiguous.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Viewing array data using a different type and dtype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating a view on a structured array so it can be used in calculations
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Making changes to the view changes the underlying array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using a view to convert an array to a recarray:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Views share data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Views that change the dtype size (bytes per entry) should normally be avoided
    on arrays defined by slices, transposes, fortran-ordering, etc.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'However, views that change dtype are totally fine for arrays with a contiguous
    last axis, even if the rest of the axes are not C-contiguous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
