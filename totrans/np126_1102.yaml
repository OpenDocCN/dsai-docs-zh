- en: NumPy 1.25.0 Release Notes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 1.25.0 发布说明
- en: 原文：[https://numpy.org/doc/1.26/release/1.25.0-notes.html](https://numpy.org/doc/1.26/release/1.25.0-notes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://numpy.org/doc/1.26/release/1.25.0-notes.html](https://numpy.org/doc/1.26/release/1.25.0-notes.html)
- en: 'The NumPy 1.25.0 release continues the ongoing work to improve the handling
    and promotion of dtypes, increase the execution speed, and clarify the documentation.
    There has also been work to prepare for the future NumPy 2.0.0 release, resulting
    in a large number of new and expired deprecation. Highlights are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.25.0 版本持续改进处理和提升数据类型（dtypes）的工作，增加执行速度，并澄清文档。还进行了为未来 NumPy 2.0.0 版本做准备的工作，导致大量新的和过时的弃用。亮点包括：
- en: Support for MUSL, there are now MUSL wheels.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 MUSL，现在有 MUSL wheels。
- en: Support the Fujitsu C/C++ compiler.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持富士通 C/C++ 编译器。
- en: Object arrays are now supported in einsum
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在支持对象数组在 einsum 中使用
- en: Support for inplace matrix multiplication (`@=`).
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持原地矩阵乘法 (`@=`)。
- en: We will be releasing a NumPy 1.26 when Python 3.12 comes out. That is needed
    because distutils has been dropped by Python 3.12 and we will be switching to
    using meson for future builds. The next mainline release will be NumPy 2.0.0\.
    We plan that the 2.0 series will still support downstream projects built against
    earlier versions of NumPy.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 3.12 发布时，我们将发布 NumPy 1.26 版本。这是必要的，因为 Python 3.12 放弃了 distutils，我们将转而使用
    meson 进行未来构建。下一个主要发布版本将是 NumPy 2.0.0。我们计划 2.0 系列仍将支持针对早期 NumPy 版本构建的下游项目。
- en: The Python versions supported in this release are 3.9-3.11.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本版本支持的 Python 版本为 3.9-3.11。
- en: Deprecations
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: '`np.core.MachAr` is deprecated. It is private API. In names defined in `np.core`
    should generally be considered private.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.core.MachAr` 已弃用。这是私有 API。在 `np.core` 中定义的名称通常应视为私有。'
- en: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
- en: '`np.finfo(None)` is deprecated.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.finfo(None)` 已弃用。'
- en: ([gh-23011](https://github.com/numpy/numpy/pull/23011))
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23011](https://github.com/numpy/numpy/pull/23011))
- en: '`np.round_` is deprecated. Use *np.round* instead.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.round_` 已弃用。请改用 *np.round*。'
- en: ([gh-23302](https://github.com/numpy/numpy/pull/23302))
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23302](https://github.com/numpy/numpy/pull/23302))
- en: '`np.product` is deprecated. Use *np.prod* instead.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.product` 已弃用。请改用 *np.prod*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.cumproduct` is deprecated. Use *np.cumprod* instead.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.cumproduct` 已弃用。请改用 *np.cumprod*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.sometrue` is deprecated. Use *np.any* instead.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.sometrue` 已弃用。请改用 *np.any*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.alltrue` is deprecated. Use *np.all* instead.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.alltrue` 已弃用。请改用 *np.all*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: 'Only ndim-0 arrays are treated as scalars. NumPy used to treat all arrays of
    size 1 (e.g., `np.array([3.14])`) as scalars. In the future, this will be limited
    to arrays of ndim 0 (e.g., `np.array(3.14)`). The following expressions will report
    a deprecation warning:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅 ndim-0 数组被视为标量。NumPy 曾将所有大小为 1 的数组（例如，`np.array([3.14])`）视为标量。将来，这将限制为 ndim
    0 的数组（例如，`np.array(3.14)`）。以下表达式将报告弃用警告：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ([gh-10615](https://github.com/numpy/numpy/pull/10615))
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-10615](https://github.com/numpy/numpy/pull/10615))
- en: '`np.find_common_type` is deprecated. [`numpy.find_common_type`](../reference/generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type") is now deprecated and its use should be replaced with
    either [`numpy.result_type`](../reference/generated/numpy.result_type.html#numpy.result_type
    "numpy.result_type") or [`numpy.promote_types`](../reference/generated/numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types"). Most users leave the second `scalar_types` argument to
    `find_common_type` as `[]` in which case `np.result_type` and `np.promote_types`
    are both faster and more robust. When not using `scalar_types` the main difference
    is that the replacement intentionally converts non-native byte-order to native
    byte order. Further, `find_common_type` returns `object` dtype rather than failing
    promotion. This leads to differences when the inputs are not all numeric. Importantly,
    this also happens for e.g. timedelta/datetime for which NumPy promotion rules
    are currently sometimes surprising.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.find_common_type`已被弃用。[`numpy.find_common_type`](../reference/generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type")现已被弃用，应该用[`numpy.result_type`](../reference/generated/numpy.result_type.html#numpy.result_type
    "numpy.result_type")或[`numpy.promote_types`](../reference/generated/numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types")替换。大多数用户将`find_common_type`的第二个`scalar_types`参数保留为`[]`，在这种情况下，`np.result_type`和`np.promote_types`都更快且更可靠。当不使用`scalar_types`时，主要区别在于替代故意将非本机字节顺序转换为本机字节顺序。此外，`find_common_type`返回`object`
    dtype而不是失败的提升。当输入不全为数值时，这会导致差异。重要的是，对于例如时间间隔/日期时间这样的情况，NumPy提升规则目前有时会令人惊讶。'
- en: When the `scalar_types` argument is not `[]` things are more complicated. In
    most cases, using `np.result_type` and passing the Python values `0`, `0.0`, or
    `0j` has the same result as using `int`, `float`, or `complex` in *scalar_types*.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`scalar_types`参数不是`[]`时，情况会变得更加复杂。在大多数情况下，使用`np.result_type`并传递Python值`0`，`0.0`或`0j`的结果与在*scalar_types*中使用`int`，`float`或`complex`相同。
- en: When `scalar_types` is constructed, `np.result_type` is the correct replacement
    and it may be passed scalar values like `np.float32(0.0)`. Passing values other
    than 0, may lead to value-inspecting behavior (which `np.find_common_type` never
    used and NEP 50 may change in the future). The main possible change in behavior
    in this case, is when the array types are signed integers and scalar types are
    unsigned.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当构建`scalar_types`时，`np.result_type`是正确的替代方案，可以传递标量值如`np.float32(0.0)`。传递除0以外的值可能会导致值检查行为（`np.find_common_type`从未使用过，NEP
    50将来可能会更改）。在这种情况下，主要的行为变化可能是当数组类型为有符号整数而标量类型为无符号整数时。
- en: If you are unsure about how to replace a use of `scalar_types` or when non-numeric
    dtypes are likely, please do not hesitate to open a NumPy issue to ask for help.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不确定如何替换对`scalar_types`的使用，或者可能存在非数值dtype，请不要犹豫打开一个NumPy问题寻求帮助。
- en: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
- en: Expired deprecations
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 已过时的弃用行为
- en: '`np.core.machar` and `np.finfo.machar` have been removed.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.core.machar`和`np.finfo.machar`已被移除。'
- en: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
- en: '`+arr` will now raise an error when the dtype is not numeric (and positive
    is undefined).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当dtype不是数值时，`+arr`现在会引发错误（正数未定义）。
- en: ([gh-22998](https://github.com/numpy/numpy/pull/22998))
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22998](https://github.com/numpy/numpy/pull/22998))
- en: A sequence must now be passed into the stacking family of functions (`stack`,
    `vstack`, `hstack`, `dstack` and `column_stack`).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在必须将序列传递给堆叠函数家族（`stack`，`vstack`，`hstack`，`dstack`和`column_stack`）。
- en: ([gh-23019](https://github.com/numpy/numpy/pull/23019))
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23019](https://github.com/numpy/numpy/pull/23019))
- en: '`np.clip` now defaults to same-kind casting. Falling back to unsafe casting
    was deprecated in NumPy 1.17.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.clip`现在默认使用相同类型转换。在NumPy 1.17中，回退到不安全的转换已被弃用。'
- en: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
- en: '`np.clip` will now propagate `np.nan` values passed as `min` or `max`. Previously,
    a scalar NaN was usually ignored. This was deprecated in NumPy 1.17.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.clip`现在会传播作为`min`或`max`传递的`np.nan`值。以前，标量NaN通常被忽略。这在NumPy 1.17中已被弃用。'
- en: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
- en: The `np.dual` submodule has been removed.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.dual`子模块已被移除。'
- en: ([gh-23480](https://github.com/numpy/numpy/pull/23480))
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23480](https://github.com/numpy/numpy/pull/23480))
- en: NumPy now always ignores sequence behavior for an array-like (defining one of
    the array protocols). (Deprecation started NumPy 1.20)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy现在总是忽略数组类似对象的序列行为（定义了数组协议之一）。（从NumPy 1.20开始弃用）
- en: ([gh-23660](https://github.com/numpy/numpy/pull/23660))
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23660](https://github.com/numpy/numpy/pull/23660))
- en: The niche `FutureWarning` when casting to a subarray dtype in `astype` or the
    array creation functions such as `asarray` is now finalized. The behavior is now
    always the same as if the subarray dtype was wrapped into a single field (which
    was the workaround, previously). (FutureWarning since NumPy 1.20)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`astype`或`asarray`等数组创建函数中，当转换为子数组dtype时出现的`FutureWarning`现已最终确定。现在的行为总是与将子数组dtype包装成单个字段时相同（这是以前的解决方法）。
    （自NumPy 1.20起的FutureWarning）
- en: ([gh-23666](https://github.com/numpy/numpy/pull/23666))
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23666](https://github.com/numpy/numpy/pull/23666))
- en: '`==` and `!=` warnings have been finalized. The `==` and `!=` operators on
    arrays now always:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==`和`!=`警告已最终确定。 数组上的`==`和`!=`运算符现在总是：'
- en: raise errors that occur during comparisons such as when the arrays have incompatible
    shapes (`np.array([1, 2]) == np.array([1, 2, 3])`).
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引发在比较期间发生的错误，例如当数组具有不兼容的形状时（`np.array([1, 2]) == np.array([1, 2, 3])`）。
- en: return an array of all `True` or all `False` when values are fundamentally not
    comparable (e.g. have different dtypes). An example is `np.array(["a"]) == np.array([1])`.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当值在根本上不可比较时（例如具有不同的dtype）返回一个全为`True`或全为`False`的数组。 一个例子是`np.array(["a"]) ==
    np.array([1])`。
- en: This mimics the Python behavior of returning `False` and `True` when comparing
    incompatible types like `"a" == 1` and `"a" != 1`. For a long time these gave
    `DeprecationWarning` or `FutureWarning`.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这模仿了Python在比较不兼容类型时返回`False`和`True`的行为，例如`"a" == 1`和`"a" != 1`。 很长一段时间以来，这些都会产生`DeprecationWarning`或`FutureWarning`。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: Nose support has been removed. NumPy switched to using pytest in 2018 and nose
    has been unmaintained for many years. We have kept NumPy’s nose support to avoid
    breaking downstream projects who might have been using it and not yet switched
    to pytest or some other testing framework. With the arrival of Python 3.12, unpatched
    nose will raise an error. It is time to move on.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除对Nose的支持。 NumPy在2018年转而使用pytest，而nose已经多年未得到维护。 我们保留了NumPy的nose支持，以避免破坏可能仍在使用它而尚未转换为pytest或其他测试框架的下游项目。
    随着Python 3.12的到来，未打补丁的nose将引发错误。 是时候继续前进了。
- en: '*Decorators removed*:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*已移除的装饰器*：'
- en: raises
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: raises
- en: slow
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 慢
- en: setastest
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: setastest
- en: skipif
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: skipif
- en: knownfailif
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: knownfailif
- en: deprecated
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已弃用
- en: parametrize
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数化
- en: _needs_refcount
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _needs_refcount
- en: These are not to be confused with pytest versions with similar names, e.g.,
    pytest.mark.slow, pytest.mark.skipif, pytest.mark.parametrize.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些不应与具有类似名称的pytest版本混淆，例如pytest.mark.slow，pytest.mark.skipif，pytest.mark.parametrize。
- en: '*Functions removed*:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*已移除的函数*：'
- en: Tester
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试员
- en: import_nose
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: import_nose
- en: run_module_suite
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: run_module_suite
- en: ([gh-23041](https://github.com/numpy/numpy/pull/23041))
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23041](https://github.com/numpy/numpy/pull/23041))
- en: The `numpy.testing.utils` shim has been removed. Importing from the `numpy.testing.utils`
    shim has been deprecated since 2019, the shim has now been removed. All imports
    should be made directly from `numpy.testing`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除`numpy.testing.utils`的shim。 自2019年以来，从`numpy.testing.utils`的shim导入已被弃用，现在已删除该shim。
    所有导入应直接从`numpy.testing`进行。
- en: ([gh-23060](https://github.com/numpy/numpy/pull/23060))
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23060](https://github.com/numpy/numpy/pull/23060))
- en: The environment variable to disable dispatching has been removed. Support for
    the `NUMPY_EXPERIMENTAL_ARRAY_FUNCTION` environment variable has been removed.
    This variable disabled dispatching with `__array_function__`.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除禁用调度的环境变量。 已移除对`NUMPY_EXPERIMENTAL_ARRAY_FUNCTION`环境变量的支持。 此变量禁用了`__array_function__`的调度。
- en: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
- en: Support for `y=` as an alias of `out=` has been removed. The `fix`, `isposinf`
    and `isneginf` functions allowed using `y=` as a (deprecated) alias for `out=`.
    This is no longer supported.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除对`y=`作为`out=`的别名的支持。 `fix`，`isposinf`和`isneginf`函数允许使用`y=`作为`out=`的（已弃用的）别名。
    这不再受支持。
- en: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
- en: Compatibility notes
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The `busday_count` method now correctly handles cases where the `begindates`
    is later in time than the `enddates`. Previously, the `enddates` was included,
    even though the documentation states it is always excluded.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`busday_count`方法现在正确处理`begindates`晚于`enddates`的情况。 以前，即使文档规定始日期始终不包括在内，`enddates`也会被包括在内。'
- en: ([gh-23229](https://github.com/numpy/numpy/pull/23229))
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23229](https://github.com/numpy/numpy/pull/23229))
- en: When comparing datetimes and timedelta using `np.equal` or `np.not_equal` numpy
    previously allowed the comparison with `casting="unsafe"`. This operation now
    fails. Forcing the output dtype using the `dtype` kwarg can make the operation
    succeed, but we do not recommend it.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`np.equal`或`np.not_equal`比较日期时间和时间间隔时，numpy以前允许使用`casting="unsafe"`进行比较。这个操作现在会失败。通过使用`dtype`关键字参数强制输出dtype可以使操作成功，但我们不建议这样做。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: When loading data from a file handle using `np.load`, if the handle is at the
    end of file, as can happen when reading multiple arrays by calling `np.load` repeatedly,
    numpy previously raised `ValueError` if `allow_pickle=False`, and `OSError` if
    `allow_pickle=True`. Now it raises `EOFError` instead, in both cases.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`np.load`从文件句柄加载数据时，如果句柄位于文件末尾，可能会通过多次调用`np.load`读取多个数组，numpy以前会在`allow_pickle=False`时引发`ValueError`，在`allow_pickle=True`时引发`OSError`。现在无论哪种情况都会引发`EOFError`。
- en: ([gh-23105](https://github.com/numpy/numpy/pull/23105))
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23105](https://github.com/numpy/numpy/pull/23105))
- en: '`np.pad` with `mode=wrap` pads with strict multiples of original data'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`mode=wrap`的`np.pad`用原始数据的严格倍数填充
- en: Code based on earlier version of `pad` that uses `mode="wrap"` will return different
    results when the padding size is larger than initial array.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 基于早期版本的`pad`的代码，使用`mode="wrap"`，当填充大小大于初始数组时，将返回不同的结果。
- en: '`np.pad` with `mode=wrap` now always fills the space with strict multiples
    of original data even if the padding size is larger than the initial array.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mode=wrap`的`np.pad`现在总是用原始数据的严格倍数填充空间，即使填充大小大于初始数组。
- en: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
- en: Cython `long_t` and `ulong_t` removed
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了Cython中的`long_t`和`ulong_t`
- en: '`long_t` and `ulong_t` were aliases for `longlong_t` and `ulonglong_t` and
    confusing (a remainder from of Python 2). This change may lead to the errors:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`long_t`和`ulong_t`是`longlong_t`和`ulonglong_t`的别名，令人困惑（Python 2的遗留物）。这个更改可能会导致错误：'
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We recommend use of bit-sized types such as `cnp.int64_t` or the use of `cnp.intp_t`
    which is 32 bits on 32 bit systems and 64 bits on 64 bit systems (this is most
    compatible with indexing). If C `long` is desired, use plain `long` or `npy_long`.
    `cnp.int_t` is also `long` (NumPy’s default integer). However, `long` is 32 bit
    on 64 bit windows and we may wish to adjust this even in NumPy. (Please do not
    hesitate to contact NumPy developers if you are curious about this.)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐使用诸如`cnp.int64_t`这样的位大小类型，或者使用在32位系统上为32位，在64位系统上为64位的`cnp.intp_t`（这对索引最兼容）。如果需要C
    `long`，请使用普通的`long`或`npy_long`。`cnp.int_t`也是`long`（NumPy的默认整数）。但是，在64位Windows上，`long`是32位的，即使在NumPy中我们可能希望调整这一点。（如果您对此感到好奇，请随时联系NumPy开发人员。）
- en: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
- en: Changed error message and type for bad `axes` argument to `ufunc`
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改了对`ufunc`的错误消息和类型的错误`axes`参数
- en: The error message and type when a wrong `axes` value is passed to `ufunc(...,
    axes=[...])`` has changed. The message is now more indicative of the problem,
    and if the value is mismatched an `AxisError` will be raised. A `TypeError` will
    still be raised for invalid input types.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当向`ufunc(..., axes=[...])`传递错误的`axes`值时，错误消息和类型已更改。现在的消息更能指示问题，如果值不匹配，则会引发`AxisError`。对于无效的输入类型仍会引发`TypeError`。
- en: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
- en: Array-likes that define `__array_ufunc__` can now override ufuncs if used as
    `where`
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义了`__array_ufunc__`的类数组现在可以在作为`where`使用时覆盖ufuncs
- en: If the `where` keyword argument of a [`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc
    "numpy.ufunc") is a subclass of [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or is a duck type that defines [`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__") it can override the behavior of the ufunc using
    the same mechanism as the input and output arguments. Note that for this to work
    properly, the `where.__array_ufunc__` implementation will have to unwrap the `where`
    argument to pass it into the default implementation of the `ufunc` or, for [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") subclasses before using `super().__array_ufunc__`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")的`where`关键字参数是[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类，或者是定义了[`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__")的鸭子类型，它可以使用与输入和输出参数相同的机制覆盖ufunc的行为。请注意，为了使其正常工作，`where.__array_ufunc__`实现将必须解包`where`参数以将其传递给`ufunc`的默认实现，或者对于[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")子类，在使用`super().__array_ufunc__`之前。
- en: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
- en: Compiling against the NumPy C API is now backwards compatible by default
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在默认情况下，针��NumPy C API的编译是向后兼容的
- en: 'NumPy now defaults to exposing a backwards compatible subset of the C-API.
    This makes the use of `oldest-supported-numpy` unnecessary. Libraries can override
    the default minimal version to be compatible with using:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在默认公开C-API的向后兼容子集。这使得使用`oldest-supported-numpy`变得不必要。库可以通过在包含NumPy之前或通过向编译器传递等效的`-D`选项来覆盖默认的最小版本，以便与使用：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: before including NumPy or by passing the equivalent `-D` option to the compiler.
    The NumPy 1.25 default is `NPY_1_19_API_VERSION`. Because the NumPy 1.19 C API
    was identical to the NumPy 1.16 one resulting programs will be compatible with
    NumPy 1.16 (from a C-API perspective). This default will be increased in future
    non-bugfix releases. You can still compile against an older NumPy version and
    run on a newer one.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 1.25的默认值是`NPY_1_19_API_VERSION`。因为NumPy 1.19 C API与NumPy 1.16相同，因此生成的程序将与NumPy
    1.16兼容（从C-API的角度来看）。这个默认值将在未来的非bug修复版本中增加。您仍然可以针对较旧的NumPy版本进行编译，并在更新的版本上运行。
- en: For more details please see [For downstream package authors](../dev/depending_on_numpy.html#for-downstream-package-authors).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息请参见[对于下游包作者](../dev/depending_on_numpy.html#for-downstream-package-authors)。
- en: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
- en: New Features
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: '`np.einsum` now accepts arrays with `object` dtype'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum`现在接受具有`object` dtype的数组'
- en: The code path will call python operators on object dtype arrays, much like `np.dot`
    and `np.matmul`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 代码路径将在对象dtype数组上调用python运算符，就像`np.dot`和`np.matmul`一样。
- en: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
- en: Add support for inplace matrix multiplication
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加了对原地矩阵乘法的支持
- en: It is now possible to perform inplace matrix multiplication via the `@=` operator.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过`@=`运算符执行原地矩阵乘法。
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
- en: Added `NPY_ENABLE_CPU_FEATURES` environment variable
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了`NPY_ENABLE_CPU_FEATURES`环境变量
- en: Users may now choose to enable only a subset of the built CPU features at runtime
    by specifying the *NPY_ENABLE_CPU_FEATURES* environment variable. Note that these
    specified features must be outside the baseline, since those are always assumed.
    Errors will be raised if attempting to enable a feature that is either not supported
    by your CPU, or that NumPy was not built with.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以选择在运行时通过指定*NPY_ENABLE_CPU_FEATURES*环境变量来启用内置CPU功能的子集。请注意，这些指定的功能必须在基线之外，因为基线始终被假定。如果尝试启用CPU不支持的功能，或者NumPy未构建的功能，将会引发错误。
- en: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
- en: NumPy now has an `np.exceptions` namespace
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy现在有一个`np.exceptions`命名空间
- en: NumPy now has a dedicated namespace making most exceptions and warnings available.
    All of these remain available in the main namespace, although some may be moved
    slowly in the future. The main reason for this is to increase discoverability
    and add future exceptions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个专用的命名空间，使大多数异常和警告可用。所有这些仍然在主命名空间中可用，尽管一些可能会在将来慢慢移动。这样做的主要原因是增加可发现性并添加未来的异常。
- en: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
- en: '`np.linalg` functions return NamedTuples'
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg` 函数返回 NamedTuples'
- en: '`np.linalg` functions that return tuples now return namedtuples. These functions
    are `eig()`, `eigh()`, `qr()`, `slogdet()`, and `svd()`. The return type is unchanged
    in instances where these functions return non-tuples with certain keyword arguments
    (like `svd(compute_uv=False)`).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 返回元组的 `np.linalg` 函数现在返回命名元组。这些函数是 `eig()`、`eigh()`、`qr()`、`slogdet()` 和 `svd()`。在这些函数返回具有特定关键字参数的非元组的实例中，返回类型保持不变（例如
    `svd(compute_uv=False)`）。
- en: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
- en: String functions in `np.char` are compatible with NEP 42 custom dtypes
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.char` 中的字符串函数与 NEP 42 自定义数据类型兼容'
- en: Custom dtypes that represent unicode strings or byte strings can now be passed
    to the string functions in `np.char`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将表示 Unicode 字符串或字节字符串的自定义数据类型传递给 `np.char` 中的字符串函数。
- en: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
- en: String dtype instances can be created from the string abstract dtype classes
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以从字符串抽象数据类型类创建字符串数据类型实例
- en: It is now possible to create a string dtype instance with a size without using
    the string name of the dtype. For example, `type(np.dtype('U'))(8)` will create
    a dtype that is equivalent to `np.dtype('U8')`. This feature is most useful when
    writing generic code dealing with string dtype classes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以创建具有大小的字符串数据类型实例，而无需使用数据类型的字符串名称。例如，`type(np.dtype('U'))(8)` 将创建一个等效于 `np.dtype('U8')`
    的数据类型。在编写处理字符串数据类型类的通用代码时，此功能非常有用。
- en: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
- en: Fujitsu C/C++ compiler is now supported
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持富士通 C/C++ 编译器
- en: 'Support for Fujitsu compiler has been added. To build with Fujitsu compiler,
    run:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对富士通编译器的支持。要使用富士通编译器构建，请运行：
- en: python setup.py build -c fujitsu
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: python setup.py build -c fujitsu
- en: SSL2 is now supported
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持 SSL2
- en: Support for SSL2 has been added. SSL2 is a library that provides OpenBLAS compatible
    GEMM functions. To enable SSL2, it need to edit site.cfg and build with Fujitsu
    compiler. See site.cfg.example.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对 SSL2 的支持。SSL2 是一个提供 OpenBLAS 兼容 GEMM 函数的库。要启用 SSL2，需要编辑 site.cfg 并使用富士通编译器构建。请参阅
    site.cfg.example。
- en: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
- en: Improvements
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`NDArrayOperatorsMixin` specifies that it has no `__slots__`'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin` 指定没有 `__slots__`'
- en: The `NDArrayOperatorsMixin` class now specifies that it contains no `__slots__`,
    ensuring that subclasses can now make use of this feature in Python.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin` 类现在指定不包含 `__slots__`，确保子类现在可以在 Python 中使用此功能。'
- en: ([gh-23113](https://github.com/numpy/numpy/pull/23113))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23113](https://github.com/numpy/numpy/pull/23113))
- en: Fix power of complex zero
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复复数零的幂
- en: '`np.power` now returns a different result for `0^{non-zero}` for complex numbers.
    Note that the value is only defined when the real part of the exponent is larger
    than zero. Previously, NaN was returned unless the imaginary part was strictly
    zero. The return value is either `0+0j` or `0-0j`.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.power` ��在为复数返回不同的结果 `0^{非零}`。请注意，当指数的实部大于零时才定义该值。以前，除非虚部严格为零，否则返回 NaN。返回值为
    `0+0j` 或 `0-0j`。'
- en: ([gh-18535](https://github.com/numpy/numpy/pull/18535))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18535](https://github.com/numpy/numpy/pull/18535))
- en: New `DTypePromotionError`
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的 `DTypePromotionError`
- en: 'NumPy now has a new `DTypePromotionError` which is used when two dtypes cannot
    be promoted to a common one, for example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 现在有一个新的 `DTypePromotionError`，当两个数据类型无法提升为公共数据类型时使用，例如：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: raises this new exception.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 引发此新异常。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: '*np.show_config* uses information from Meson'
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.show_config* 使用来自 Meson 的信息'
- en: Build and system information now contains information from Meson. *np.show_config*
    now has a new optional parameter `mode` to help customize the output.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和系统信息现在包含来自 Meson 的信息。*np.show_config* 现在具有一个新的可选参数 `mode`，可帮助自定义输出。
- en: ([gh-22769](https://github.com/numpy/numpy/pull/22769))
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22769](https://github.com/numpy/numpy/pull/22769))
- en: Fix `np.ma.diff` not preserving the mask when called with arguments prepend/append.
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复 `np.ma.diff` 在使用参数 prepend/append 时未保留掩码的问题。
- en: Calling `np.ma.diff` with arguments prepend and/or append now returns a `MaskedArray`
    with the input mask preserved.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用参数 prepend 和/或 append 调用 `np.ma.diff` 现在返回一个保留输入掩码的 `MaskedArray`。
- en: Previously, a `MaskedArray` without the mask was returned.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，返回没有掩码的 `MaskedArray`。
- en: ([gh-22776](https://github.com/numpy/numpy/pull/22776))
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22776](https://github.com/numpy/numpy/pull/22776))
- en: Corrected error handling for NumPy C-API in Cython
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修正了 Cython 中 NumPy C-API 的错误处理
- en: Many NumPy C functions defined for use in Cython were lacking the correct error
    indicator like `except -1` or `except *`. These have now been added.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 许多为在 Cython 中使用而定义的 NumPy C 函数缺乏正确的错误指示器，如 `except -1` 或 `except *`。现在已经添加了这些。
- en: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
- en: Ability to directly spawn random number generators
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接生成随机数生成器的能力
- en: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn") now allows to directly spawn new independent child
    generators via the [`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn") mechanism. [`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") does the same for the underlying bit generator.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn") 现在允许通过 [`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn") 机制直接生成新的独立子生成器。[`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") 对底层位生成器执行相同操作。'
- en: 'Additionally, [`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq") now gives direct access to the seed sequence
    used for initializing the bit generator. This allows for example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq") 现在直接访问用于初始化位生成器的种子序列。例如，这允许：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Previously, this was hard to do without passing the `SeedSequence` explicitly.
    Please see [`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") for more information.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这是很难做到的，没有显式传递 `SeedSequence`。请参阅 [`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 获取更多信息。
- en: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
- en: '`numpy.logspace` now supports a non-scalar `base` argument'
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.logspace` 现在支持非标量 `base` 参数'
- en: The `base` argument of `numpy.logspace` can now be array-like if it is broadcastable
    against the `start` and `stop` arguments.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.logspace` 的 `base` 参数现在可以是类似数组的，如果可以与 `start` 和 `stop` 参数进行广播。'
- en: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
- en: '`np.ma.dot()` now supports for non-2d arrays'
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.dot()` 现在支持非 2d 数组'
- en: Previously `np.ma.dot()` only worked if `a` and `b` were both 2d. Now it works
    for non-2d arrays as well as `np.dot()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以前 `np.ma.dot()` 仅在 `a` 和 `b` 都是 2d 时才起作用。现在它也适用于非 2d 数组，如 `np.dot()`。
- en: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
- en: Explicitly show keys of .npz file in repr
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式显示 .npz 文件的键在 repr 中
- en: '`NpzFile` shows keys of loaded .npz file when printed.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `NpzFile` 时显示加载的 .npz 文件的键。
- en: '[PRE6]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ([gh-23357](https://github.com/numpy/numpy/pull/23357))
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23357](https://github.com/numpy/numpy/pull/23357))
- en: NumPy now exposes DType classes in `np.dtypes`
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 现在在 `np.dtypes` 中公开了 DType 类
- en: The new `numpy.dtypes` module now exposes DType classes and will contain future
    dtype related functionality. Most users should have no need to use these classes
    directly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `numpy.dtypes` 模块现在公开了 DType 类，并将包含未来与 dtype 相关的功能。大多数用户不需要直接使用这些类。
- en: ([gh-23358](https://github.com/numpy/numpy/pull/23358))
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23358](https://github.com/numpy/numpy/pull/23358))
- en: Drop dtype metadata before saving in .npy or .npz files
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 .npy 或 .npz 文件中保存之前删除 dtype 元数据
- en: Currently, a `*.npy` file containing a table with a dtype with metadata cannot
    be read back. Now, *np.save* and *np.savez* drop metadata before saving.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，包含具有元数据的 dtype 的表的 `*.npy` 文件无法读取。现在，*np.save* 和 *np.savez* 在保存之前会删除元数据。
- en: ([gh-23371](https://github.com/numpy/numpy/pull/23371))
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23371](https://github.com/numpy/numpy/pull/23371))
- en: '`numpy.lib.recfunctions.structured_to_unstructured` returns views in more cases'
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.lib.recfunctions.structured_to_unstructured` 在更多情况下返回视图'
- en: '`structured_to_unstructured` now returns a view, if the stride between the
    fields is constant. Prior, padding between the fields or a reversed field would
    lead to a copy. This change only applies to `ndarray`, `memmap` and `recarray`.
    For all other array subclasses, the behavior remains unchanged.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`structured_to_unstructured` 现在返回一个视图，如果字段之间的步幅是恒定的。之前，字段之间的填充或反转字段会导致复制。此更改仅适用于
    `ndarray`、`memmap` 和 `recarray`。对于所有其他数组子类，行为保持不变。'
- en: ([gh-23652](https://github.com/numpy/numpy/pull/23652))
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23652](https://github.com/numpy/numpy/pull/23652))
- en: Signed and unsigned integers always compare correctly
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有符号和无符号整数始终正确比较
- en: When `uint64` and `int64` are mixed in NumPy, NumPy typically promotes both
    to `float64`. This behavior may be argued about but is confusing for comparisons
    `==`, `<=`, since the results returned can be incorrect but the conversion is
    hidden since the result is a boolean. NumPy will now return the correct results
    for these by avoiding the cast to float.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 NumPy 中混合使用 `uint64` 和 `int64` 时，NumPy 通常会将两者都提升为 `float64`。这种行为可能会引起争议，但对于比较
    `==`、`<=` 来说是令人困惑的，因为返回的结果可能是不正确的，但转换是隐藏的，因为结果是布尔值。现在 NumPy 将通过避免转换为浮点数来返回这些正确的结果。
- en: ([gh-23713](https://github.com/numpy/numpy/pull/23713))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23713](https://github.com/numpy/numpy/pull/23713))
- en: Performance improvements and changes
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进和变化
- en: Faster `np.argsort` on AVX-512 enabled processors
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在启用 AVX-512 的处理器上更快的 `np.argsort`
- en: 32-bit and 64-bit quicksort algorithm for np.argsort gain up to 6x speed up
    on processors that support AVX-512 instruction set.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 32 位和 64 位快速排序算法对 np.argsort 可以在支持 AVX-512 指令集的处理器上提高多达 6 倍的速度。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [英特尔公司](https://open.intel.com/) 赞助此工作。
- en: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
- en: Faster `np.sort` on AVX-512 enabled processors
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在启用 AVX-512 的处理器上更快的 `np.sort`
- en: Quicksort for 16-bit and 64-bit dtypes gain up to 15x and 9x speed up on processors
    that support AVX-512 instruction set.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 16 位和 64 位数据类型的快速排序在支持 AVX-512 指令集的处理器上提高了多达 15 倍和 9 倍的速度。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [英特尔公司](https://open.intel.com/) 赞助此工作。
- en: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
- en: '`__array_function__` machinery is now much faster'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_function__` 机制现在更快'
- en: The overhead of the majority of functions in NumPy is now smaller especially
    when keyword arguments are used. This change significantly speeds up many simple
    function calls.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 中大多数函数的开销现在更小，特别是在使用关键字参数时。这一变化显著加快了许多简单函数调用的速度。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: '`ufunc.at` can be much faster'
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ufunc.at` 可以更快'
- en: 'Generic `ufunc.at` can be up to 9x faster. The conditions for this speedup:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的 `ufunc.at` 可以提高多达 9 倍的速度。此加速的条件：
- en: operands are aligned
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作数已对齐
- en: no casting
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不进行强制转换
- en: If ufuncs with appropriate indexed loops on 1d arguments with the above conditions,
    `ufunc.at` can be up to 60x faster (an additional 7x speedup). Appropriate indexed
    loops have been added to `add`, `subtract`, `multiply`, `floor_divide`, `maximum`,
    `minimum`, `fmax`, and `fmin`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在满足上述条件的情况下，对 1 维参数使用适当的索引循环的 ufuncs，`ufunc.at` 的速度可以提高多达 60 倍（额外提升 7 倍速度）。已经在
    `add`、`subtract`、`multiply`、`floor_divide`、`maximum`、`minimum`、`fmax` 和 `fmin`
    中添加了适当的索引循环。
- en: The internal logic is similar to the logic used for regular ufuncs, which also
    have fast paths.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 内部逻辑类似于常规 ufuncs 使用的逻辑，也有快速路径。
- en: Thanks to the [D. E. Shaw group](https://deshaw.com/) for sponsoring this work.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [D. E. Shaw 集团](https://deshaw.com/) 赞助此工作。
- en: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
- en: Faster membership test on `NpzFile`
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快的 `NpzFile` 成员测试
- en: Membership test on `NpzFile` will no longer decompress the archive if it is
    successful.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`NpzFile` 上的成员测试如果成功将不再解压存档。'
- en: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
- en: Changes
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变化
- en: '`np.r_[]` and `np.c_[]` with certain scalar values'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.r_[]` 和 `np.c_[]` 与特定标量值'
- en: 'In rare cases, using mainly `np.r_` with scalars can lead to different results.
    The main potential changes are highlighted by the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见情况下，主要使用 `np.r_` 与标量可能导致不同的结果。主要潜在变化如下所示：
- en: '[PRE7]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Where the second example returned:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例返回：
- en: '[PRE8]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first one is due to a signed integer scalar with an unsigned integer array,
    while the second is due to `255` not fitting into `int8` and NumPy currently inspecting
    values to make this work. (Note that the second example is expected to change
    in the future due to [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)"); it will then raise an error.)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是由于带有无符号整数数组的有符号整数标量，而第二个是由于`255`无法容纳在`int8`中，NumPy目前正在检查值以使其正常工作。（请注意，由于[NEP
    50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50 "(在NumPy增强提案中)");
    未来预计第二个示例将发生变化，然后将引发错误。）
- en: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
- en: Most NumPy functions are wrapped into a C-callable
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大多数NumPy函数被包装为C可调用函数
- en: To speed up the `__array_function__` dispatching, most NumPy functions are now
    wrapped into C-callables and are not proper Python functions or C methods. They
    still look and feel the same as before (like a Python function), and this should
    only improve performance and user experience (cleaner tracebacks). However, please
    inform the NumPy developers if this change confuses your program for some reason.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为加快`__array_function__`分派速度，大多数NumPy函数现在被包装为C可调用函数，而不是真正的Python函数或C方法。它们看起来和以前一样（像一个Python函数），这只会提高性能和用户体验（更清晰的回溯）。但是，如果此更改因某种原因使您的程序混淆，请通知NumPy开发人员。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: C++ standard library usage
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C++标准库使用
- en: NumPy builds now depend on the C++ standard library, because the `numpy.core._multiarray_umath`
    extension is linked with the C++ linker.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy构建现在依赖于C++标准库，因为`numpy.core._multiarray_umath`扩展与C++链接器链接。
- en: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
- en: Deprecations
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弃用
- en: '`np.core.MachAr` is deprecated. It is private API. In names defined in `np.core`
    should generally be considered private.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.core.MachAr`已被弃用。这是私有API。在`np.core`中定义的名称通常应被视为私有。'
- en: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
- en: '`np.finfo(None)` is deprecated.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.finfo(None)`已被弃用。'
- en: ([gh-23011](https://github.com/numpy/numpy/pull/23011))
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23011](https://github.com/numpy/numpy/pull/23011))
- en: '`np.round_` is deprecated. Use *np.round* instead.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.round_`已被弃用。请改用*np.round*。'
- en: ([gh-23302](https://github.com/numpy/numpy/pull/23302))
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23302](https://github.com/numpy/numpy/pull/23302))
- en: '`np.product` is deprecated. Use *np.prod* instead.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.product`已被弃用。请改用*np.prod*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.cumproduct` is deprecated. Use *np.cumprod* instead.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.cumproduct`已被弃用。请改用*np.cumprod*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.sometrue` is deprecated. Use *np.any* instead.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.sometrue`已被弃用。请改用*np.any*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: '`np.alltrue` is deprecated. Use *np.all* instead.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.alltrue`已被弃用。请改用*np.all*。'
- en: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23314](https://github.com/numpy/numpy/pull/23314))
- en: 'Only ndim-0 arrays are treated as scalars. NumPy used to treat all arrays of
    size 1 (e.g., `np.array([3.14])`) as scalars. In the future, this will be limited
    to arrays of ndim 0 (e.g., `np.array(3.14)`). The following expressions will report
    a deprecation warning:'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅将ndim-0数组视为标量。NumPy过去将所有大小为1的数组（例如，`np.array([3.14])`）视为标量。将来，这将限制为ndim 0的数组（例如，`np.array(3.14)`）。以下表达式将报告弃用警告：
- en: '[PRE9]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ([gh-10615](https://github.com/numpy/numpy/pull/10615))
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-10615](https://github.com/numpy/numpy/pull/10615))
- en: '`np.find_common_type` is deprecated. [`numpy.find_common_type`](../reference/generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type") is now deprecated and its use should be replaced with
    either [`numpy.result_type`](../reference/generated/numpy.result_type.html#numpy.result_type
    "numpy.result_type") or [`numpy.promote_types`](../reference/generated/numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types"). Most users leave the second `scalar_types` argument to
    `find_common_type` as `[]` in which case `np.result_type` and `np.promote_types`
    are both faster and more robust. When not using `scalar_types` the main difference
    is that the replacement intentionally converts non-native byte-order to native
    byte order. Further, `find_common_type` returns `object` dtype rather than failing
    promotion. This leads to differences when the inputs are not all numeric. Importantly,
    this also happens for e.g. timedelta/datetime for which NumPy promotion rules
    are currently sometimes surprising.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.find_common_type` 已被弃用。[`numpy.find_common_type`](../reference/generated/numpy.find_common_type.html#numpy.find_common_type
    "numpy.find_common_type") 现在已被弃用，应该用 [`numpy.result_type`](../reference/generated/numpy.result_type.html#numpy.result_type
    "numpy.result_type") 或 [`numpy.promote_types`](../reference/generated/numpy.promote_types.html#numpy.promote_types
    "numpy.promote_types") 替代。大多数用户将 `find_common_type` 的第二个 `scalar_types` 参数设为 `[]`，在这种情况下，`np.result_type`
    和 `np.promote_types` 都更快且更可靠。当不使用 `scalar_types` 时，主要区别在于替代意图将非本机字节顺序转换为本机字节顺序。此外，`find_common_type`
    返回 `object` dtype 而不是失败的提升。当输入不全为数字时，这会导致差异。重要的是，对于例如 timedelta/datetime 这样的情况，NumPy
    提升规则目前有时会令人惊讶。'
- en: When the `scalar_types` argument is not `[]` things are more complicated. In
    most cases, using `np.result_type` and passing the Python values `0`, `0.0`, or
    `0j` has the same result as using `int`, `float`, or `complex` in *scalar_types*.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 `scalar_types` 参数不是 `[]` 时，情况会更加复杂。在大多数情况下，使用 `np.result_type` 并传递 Python
    值 `0`、`0.0` 或 `0j` 的结果与在 *scalar_types* 中使用 `int`、`float` 或 `complex` 是相同的。
- en: When `scalar_types` is constructed, `np.result_type` is the correct replacement
    and it may be passed scalar values like `np.float32(0.0)`. Passing values other
    than 0, may lead to value-inspecting behavior (which `np.find_common_type` never
    used and NEP 50 may change in the future). The main possible change in behavior
    in this case, is when the array types are signed integers and scalar types are
    unsigned.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当构建 `scalar_types` 时，`np.result_type` 是正确的替代方案，可以传递标量值如 `np.float32(0.0)`。传递非
    0 的值可能导致值检查行为（`np.find_common_type` 从未使用过，NEP 50 可能会在未来更改）。在这种情况下，主要可能的行为变化是当数组类型为有符号整数而标量类型为无符号整数时。
- en: If you are unsure about how to replace a use of `scalar_types` or when non-numeric
    dtypes are likely, please do not hesitate to open a NumPy issue to ask for help.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不确定如何替换 `scalar_types` 的使用，或者非数值 dtype 可能存在，请不要犹豫打开一个 NumPy 问题寻求帮助。
- en: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
- en: Expired deprecations
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过期的弃用
- en: '`np.core.machar` and `np.finfo.machar` have been removed.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.core.machar` 和 `np.finfo.machar` 已被移除。'
- en: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22638](https://github.com/numpy/numpy/pull/22638))
- en: '`+arr` will now raise an error when the dtype is not numeric (and positive
    is undefined).'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 dtype 不是数值时，`+arr` 现在会引发错误（正数未定义）。
- en: ([gh-22998](https://github.com/numpy/numpy/pull/22998))
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22998](https://github.com/numpy/numpy/pull/22998))
- en: A sequence must now be passed into the stacking family of functions (`stack`,
    `vstack`, `hstack`, `dstack` and `column_stack`).
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '现在必须将序列传递给堆叠函数家族（`stack`、`vstack`、`hstack`、`dstack` 和 `column_stack`）。 '
- en: ([gh-23019](https://github.com/numpy/numpy/pull/23019))
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23019](https://github.com/numpy/numpy/pull/23019))
- en: '`np.clip` now defaults to same-kind casting. Falling back to unsafe casting
    was deprecated in NumPy 1.17.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.clip` 现在默认使用相同类型转换。在 NumPy 1.17 中，回退到不安全的转换已被弃用。'
- en: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
- en: '`np.clip` will now propagate `np.nan` values passed as `min` or `max`. Previously,
    a scalar NaN was usually ignored. This was deprecated in NumPy 1.17.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.clip` 现在会传播作为 `min` 或 `max` 传递的 `np.nan` 值。以前，标量 NaN 通常被忽略。在 NumPy 1.17
    中已被弃用。'
- en: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23403](https://github.com/numpy/numpy/pull/23403))
- en: The `np.dual` submodule has been removed.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`np.dual` 子模块已被移除。'
- en: ([gh-23480](https://github.com/numpy/numpy/pull/23480))
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23480](https://github.com/numpy/numpy/pull/23480))
- en: NumPy now always ignores sequence behavior for an array-like (defining one of
    the array protocols). (Deprecation started NumPy 1.20)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy 现在总是忽略数组类似对象的序列行为（定义数组协议之一）。（从 NumPy 1.20 开始弃用）
- en: ([gh-23660](https://github.com/numpy/numpy/pull/23660))
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23660](https://github.com/numpy/numpy/pull/23660))
- en: The niche `FutureWarning` when casting to a subarray dtype in `astype` or the
    array creation functions such as `asarray` is now finalized. The behavior is now
    always the same as if the subarray dtype was wrapped into a single field (which
    was the workaround, previously). (FutureWarning since NumPy 1.20)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `astype` 或数组创建函数（如 `asarray`）中转换为子数组 dtype 时的 `FutureWarning` 现已最终确定。现在的行为总是与将子数组
    dtype 包装成单个字段时相同（这是以前的解决方法）。（自 NumPy 1.20 起为 FutureWarning）
- en: ([gh-23666](https://github.com/numpy/numpy/pull/23666))
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23666](https://github.com/numpy/numpy/pull/23666))
- en: '`==` and `!=` warnings have been finalized. The `==` and `!=` operators on
    arrays now always:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==` 和 `!=` 警告已最终确定。现在数组上的 `==` 和 `!=` 运算符总是：'
- en: raise errors that occur during comparisons such as when the arrays have incompatible
    shapes (`np.array([1, 2]) == np.array([1, 2, 3])`).
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在比较过程中引发错误，例如当数组具有不兼容的形状时（`np.array([1, 2]) == np.array([1, 2, 3])`）。
- en: return an array of all `True` or all `False` when values are fundamentally not
    comparable (e.g. have different dtypes). An example is `np.array(["a"]) == np.array([1])`.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当值在本质上不可比较时（例如具有不同的 dtype），返回全部为 `True` 或全部为 `False` 的数组。一个例子是 `np.array(["a"])
    == np.array([1])`。
- en: This mimics the Python behavior of returning `False` and `True` when comparing
    incompatible types like `"a" == 1` and `"a" != 1`. For a long time these gave
    `DeprecationWarning` or `FutureWarning`.
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这模仿了 Python 的行为，当比较不兼容类型时返回 `False` 和 `True`，例如 `"a" == 1` 和 `"a" != 1`。很长一段时间，这些会产生
    `DeprecationWarning` 或 `FutureWarning`。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: Nose support has been removed. NumPy switched to using pytest in 2018 and nose
    has been unmaintained for many years. We have kept NumPy’s nose support to avoid
    breaking downstream projects who might have been using it and not yet switched
    to pytest or some other testing framework. With the arrival of Python 3.12, unpatched
    nose will raise an error. It is time to move on.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除 Nose 支持。NumPy 在 2018 年转而使用 pytest，而 nose 已经多年未得到维护。我们保留了 NumPy 的 nose 支持，以避免破坏可能仍在使用它而尚未转换为
    pytest 或其他测试框架的下游项目。随着 Python 3.12 的到来，未打补丁的 nose 将引发错误。是时候前进了。
- en: '*Decorators removed*:'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*已移除的装饰器*：'
- en: raises
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: raises
- en: slow
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: slow
- en: setastest
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: setastest
- en: skipif
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: skipif
- en: knownfailif
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: knownfailif
- en: deprecated
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: deprecated
- en: parametrize
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: parametrize
- en: _needs_refcount
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: _needs_refcount
- en: These are not to be confused with pytest versions with similar names, e.g.,
    pytest.mark.slow, pytest.mark.skipif, pytest.mark.parametrize.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些不应与具有类似名称的 pytest 版本混淆，例如 pytest.mark.slow、pytest.mark.skipif、pytest.mark.parametrize。
- en: '*Functions removed*:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*已移除的函数*：'
- en: Tester
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tester
- en: import_nose
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: import_nose
- en: run_module_suite
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: run_module_suite
- en: ([gh-23041](https://github.com/numpy/numpy/pull/23041))
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23041](https://github.com/numpy/numpy/pull/23041))
- en: The `numpy.testing.utils` shim has been removed. Importing from the `numpy.testing.utils`
    shim has been deprecated since 2019, the shim has now been removed. All imports
    should be made directly from `numpy.testing`.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除 `numpy.testing.utils` 的 shim。自 2019 年以来，从 `numpy.testing.utils` 的 shim 导入已被弃用，现已移除。所有导入应直接从
    `numpy.testing` 进行。
- en: ([gh-23060](https://github.com/numpy/numpy/pull/23060))
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23060](https://github.com/numpy/numpy/pull/23060))
- en: The environment variable to disable dispatching has been removed. Support for
    the `NUMPY_EXPERIMENTAL_ARRAY_FUNCTION` environment variable has been removed.
    This variable disabled dispatching with `__array_function__`.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除禁用分派的环境变量。已移除对 `NUMPY_EXPERIMENTAL_ARRAY_FUNCTION` 环境变量的支持。此变量禁用了 `__array_function__`
    的分派。
- en: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
- en: Support for `y=` as an alias of `out=` has been removed. The `fix`, `isposinf`
    and `isneginf` functions allowed using `y=` as a (deprecated) alias for `out=`.
    This is no longer supported.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已移除 `y=` 作为 `out=` 的别名的支持。`fix`、`isposinf` 和 `isneginf` 函数允许使用 `y=` 作为（已弃用的）`out=`
    的别名。这不再受支持。
- en: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23376](https://github.com/numpy/numpy/pull/23376))
- en: Compatibility notes
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性说明
- en: The `busday_count` method now correctly handles cases where the `begindates`
    is later in time than the `enddates`. Previously, the `enddates` was included,
    even though the documentation states it is always excluded.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`busday_count` 方法现在正确处理 `begindates` 晚于 `enddates` 的情况。以前，即使文档规定始终排除 `enddates`，但
    `enddates` 仍然被包括在内。'
- en: ([gh-23229](https://github.com/numpy/numpy/pull/23229))
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23229](https://github.com/numpy/numpy/pull/23229))
- en: When comparing datetimes and timedelta using `np.equal` or `np.not_equal` numpy
    previously allowed the comparison with `casting="unsafe"`. This operation now
    fails. Forcing the output dtype using the `dtype` kwarg can make the operation
    succeed, but we do not recommend it.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `np.equal` 或 `np.not_equal` 比较日期时间和时间增量时，numpy 以前允许使用 `casting="unsafe"`
    进行比较。现在此操作会失败。通过使用 `dtype` 关键字参数强制输出数据类型可以使操作成功，但我们不建议这样做。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: When loading data from a file handle using `np.load`, if the handle is at the
    end of file, as can happen when reading multiple arrays by calling `np.load` repeatedly,
    numpy previously raised `ValueError` if `allow_pickle=False`, and `OSError` if
    `allow_pickle=True`. Now it raises `EOFError` instead, in both cases.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 `np.load` 从文件句柄加载数据时，如果句柄位于文件末尾，可能会通过多次调用 `np.load` 读取多个数组，numpy 以前在 `allow_pickle=False`
    时引发 `ValueError`，在 `allow_pickle=True` 时引发 `OSError`。现在无论哪种情况都会引发 `EOFError`。
- en: ([gh-23105](https://github.com/numpy/numpy/pull/23105))
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ([gh-23105](https://github.com/numpy/numpy/pull/23105))
- en: '`np.pad` with `mode=wrap` pads with strict multiples of original data'
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `mode=wrap` 的 `np.pad` 会以原始数据的严格倍数进行填充
- en: Code based on earlier version of `pad` that uses `mode="wrap"` will return different
    results when the padding size is larger than initial array.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 基于早期版本的 `pad` 的代码使用 `mode="wrap"`，当填充大小大于初始数组时，将返回不同的结果。
- en: '`np.pad` with `mode=wrap` now always fills the space with strict multiples
    of original data even if the padding size is larger than the initial array.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mode=wrap` 的 `np.pad` 现在始终以原始数据的严格倍数填充空间，即使填充大小大于初始数组。
- en: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
- en: Cython `long_t` and `ulong_t` removed
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了 Cython 中的 `long_t` 和 `ulong_t`
- en: '`long_t` and `ulong_t` were aliases for `longlong_t` and `ulonglong_t` and
    confusing (a remainder from of Python 2). This change may lead to the errors:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`long_t` 和 `ulong_t` 是 `longlong_t` 和 `ulonglong_t` 的别名，这容易引起混淆（这是 Python 2
    的遗留问题）。这个改变可能导致以下错误：'
- en: '[PRE10]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We recommend use of bit-sized types such as `cnp.int64_t` or the use of `cnp.intp_t`
    which is 32 bits on 32 bit systems and 64 bits on 64 bit systems (this is most
    compatible with indexing). If C `long` is desired, use plain `long` or `npy_long`.
    `cnp.int_t` is also `long` (NumPy’s default integer). However, `long` is 32 bit
    on 64 bit windows and we may wish to adjust this even in NumPy. (Please do not
    hesitate to contact NumPy developers if you are curious about this.)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用诸如 `cnp.int64_t` 这样的位大小类型，或者使用 `cnp.intp_t`，在 32 位系统上为 32 位，在 64 位系统上为
    64 位（这对索引最兼容）。如果需要 C 的 `long`，请使用普通的 `long` 或 `npy_long`。`cnp.int_t` 也是 `long`（NumPy
    的默认整数）。但是，在 64 位 Windows 上，`long` 是 32 位，即使在 NumPy 中我们可能希望调整这一点。（如果您对此感到好奇，请随时联系
    NumPy 开发人员。）
- en: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
- en: Changed error message and type for bad `axes` argument to `ufunc`
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于 `ufunc` 的错误 `axes` 参数，已更改错误消息和类型
- en: The error message and type when a wrong `axes` value is passed to `ufunc(...,
    axes=[...])`` has changed. The message is now more indicative of the problem,
    and if the value is mismatched an `AxisError` will be raised. A `TypeError` will
    still be raised for invalid input types.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当向 `ufunc(..., axes=[...])` 传递错误的 `axes` 值时，错误消息和类型已更改。现在的消息更具指示性，如果值不匹配，则会引发
    `AxisError`。对于无效的输入类型仍会引发 `TypeError`。
- en: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
- en: Array-likes that define `__array_ufunc__` can now override ufuncs if used as
    `where`
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义了 `__array_ufunc__` 的类数组现在可以在作为 `where` 使用时覆盖 ufuncs。
- en: If the `where` keyword argument of a [`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc
    "numpy.ufunc") is a subclass of [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or is a duck type that defines [`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__") it can override the behavior of the ufunc using
    the same mechanism as the input and output arguments. Note that for this to work
    properly, the `where.__array_ufunc__` implementation will have to unwrap the `where`
    argument to pass it into the default implementation of the `ufunc` or, for [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") subclasses before using `super().__array_ufunc__`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")的`where`关键字参数是[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类或者是定义了[`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__")的鸭子类型，它可以通过与输入和输出参数相同的机制覆盖`ufunc`的行为。请注意，为了使其正常工作，`where.__array_ufunc__`的实现将必须解开`where`参数以将其传递给`ufunc`的默认实现，或者在使用`super().__array_ufunc__`之前将其传递给[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类。
- en: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
- en: Compiling against the NumPy C API is now backwards compatible by default
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在，默认情况下，针对NumPy C API进行编译是向后兼容的。
- en: 'NumPy now defaults to exposing a backwards compatible subset of the C-API.
    This makes the use of `oldest-supported-numpy` unnecessary. Libraries can override
    the default minimal version to be compatible with using:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在默认公开一个向后兼容的C-API子集。这使得使用`oldest-supported-numpy`变得不必要。库可以覆盖默认的最小版本以与以下兼容：
- en: '[PRE11]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: before including NumPy or by passing the equivalent `-D` option to the compiler.
    The NumPy 1.25 default is `NPY_1_19_API_VERSION`. Because the NumPy 1.19 C API
    was identical to the NumPy 1.16 one resulting programs will be compatible with
    NumPy 1.16 (from a C-API perspective). This default will be increased in future
    non-bugfix releases. You can still compile against an older NumPy version and
    run on a newer one.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含NumPy之前或通过将等效的`-D`选项传递给编译器之前。NumPy 1.25的默认值是`NPY_1_19_API_VERSION`。因为NumPy
    1.19 C API与NumPy 1.16相同，因此生成的程序将与NumPy 1.16兼容（从C-API的角度看）。这个默认值将在未来的非bug修复版本中增加。您仍然可以针对较旧的NumPy版本进行编译，并在更新的版本上运行。
- en: For more details please see [For downstream package authors](../dev/depending_on_numpy.html#for-downstream-package-authors).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 更多细节请参见[For downstream package authors](../dev/depending_on_numpy.html#for-downstream-package-authors)。
- en: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
- en: '`np.pad` with `mode=wrap` pads with strict multiples of original data'
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`mode=wrap`的`np.pad`使用原始数据的严格倍数填充。
- en: Code based on earlier version of `pad` that uses `mode="wrap"` will return different
    results when the padding size is larger than initial array.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 基于早期版本的`pad`的代码，使用`mode="wrap"`会在填充大小大于初始数组时返回不同的结果。
- en: '`np.pad` with `mode=wrap` now always fills the space with strict multiples
    of original data even if the padding size is larger than the initial array.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`np.pad`使用`mode=wrap`时，即使填充大小大于初始数组，也始终使用原始数据的严格倍数填充空间。
- en: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22575](https://github.com/numpy/numpy/pull/22575))
- en: Cython `long_t` and `ulong_t` removed
  id: totrans-319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除了Cython的`long_t`和`ulong_t`。
- en: '`long_t` and `ulong_t` were aliases for `longlong_t` and `ulonglong_t` and
    confusing (a remainder from of Python 2). This change may lead to the errors:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`long_t`和`ulong_t`是`longlong_t`和`ulonglong_t`的别名，令人困惑（Python 2的遗留物）。这个更改可能导致错误：'
- en: '[PRE12]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We recommend use of bit-sized types such as `cnp.int64_t` or the use of `cnp.intp_t`
    which is 32 bits on 32 bit systems and 64 bits on 64 bit systems (this is most
    compatible with indexing). If C `long` is desired, use plain `long` or `npy_long`.
    `cnp.int_t` is also `long` (NumPy’s default integer). However, `long` is 32 bit
    on 64 bit windows and we may wish to adjust this even in NumPy. (Please do not
    hesitate to contact NumPy developers if you are curious about this.)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用比特大小类型，如`cnp.int64_t`或使用在32位系统上为32位，在64位系统上为64位的`cnp.intp_t`（这对索引最兼容）。如果需要C
    `long`，请使用普通的`long`或`npy_long`。`cnp.int_t`也是`long`（NumPy的默认整数）。但是，在64位Windows上，`long`是32位，我们可能会在NumPy中进行调整（如果您对此感到好奇，请随时联系NumPy开发人员）。
- en: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22637](https://github.com/numpy/numpy/pull/22637))
- en: Changed error message and type for bad `axes` argument to `ufunc`
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改了`ufunc`的错误消息和`axes`参数的类型。
- en: The error message and type when a wrong `axes` value is passed to `ufunc(...,
    axes=[...])`` has changed. The message is now more indicative of the problem,
    and if the value is mismatched an `AxisError` will be raised. A `TypeError` will
    still be raised for invalid input types.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当将错误的`axes`值传递给`ufunc(..., axes=[...])`时，错误消息和类型已更改。现在的消息更能指示问题，如果值不匹配，则会引发`AxisError`。对于无效的输入类型仍会引发`TypeError`。
- en: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22675](https://github.com/numpy/numpy/pull/22675))
- en: Array-likes that define `__array_ufunc__` can now override ufuncs if used as
    `where`
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果作为`where`使用的Array-like定义了`__array_ufunc__`，现在可以覆盖ufunc。
- en: If the `where` keyword argument of a [`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc
    "numpy.ufunc") is a subclass of [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") or is a duck type that defines [`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__") it can override the behavior of the ufunc using
    the same mechanism as the input and output arguments. Note that for this to work
    properly, the `where.__array_ufunc__` implementation will have to unwrap the `where`
    argument to pass it into the default implementation of the `ufunc` or, for [`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray") subclasses before using `super().__array_ufunc__`.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`numpy.ufunc`](../reference/generated/numpy.ufunc.html#numpy.ufunc "numpy.ufunc")的`where`关键字参数是[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")的子类或者是定义了[`numpy.class.__array_ufunc__`](../reference/arrays.classes.html#numpy.class.__array_ufunc__
    "numpy.class.__array_ufunc__")的鸭子类型，它可以通过与输入和输出参数相同的机制覆盖ufunc的行为。请注意，为了使其正常工作，`where.__array_ufunc__`的实现将必须解开`where`参数以将其传递给`ufunc`的默认实现，或者在使用`super().__array_ufunc__`之前解开[`numpy.ndarray`](../reference/generated/numpy.ndarray.html#numpy.ndarray
    "numpy.ndarray")子类。
- en: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23240](https://github.com/numpy/numpy/pull/23240))
- en: Compiling against the NumPy C API is now backwards compatible by default
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译针对NumPy C API现在默认向后兼容
- en: 'NumPy now defaults to exposing a backwards compatible subset of the C-API.
    This makes the use of `oldest-supported-numpy` unnecessary. Libraries can override
    the default minimal version to be compatible with using:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在默认公开C-API的向后兼容子集。这使得使用`oldest-supported-numpy`变得不必要。库可以覆盖默认的最小版本以与使用兼容：
- en: '[PRE13]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: before including NumPy or by passing the equivalent `-D` option to the compiler.
    The NumPy 1.25 default is `NPY_1_19_API_VERSION`. Because the NumPy 1.19 C API
    was identical to the NumPy 1.16 one resulting programs will be compatible with
    NumPy 1.16 (from a C-API perspective). This default will be increased in future
    non-bugfix releases. You can still compile against an older NumPy version and
    run on a newer one.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含NumPy之前或通过向编译器传递等效的`-D`选项之前。NumPy 1.25的默认值是`NPY_1_19_API_VERSION`。因为NumPy
    1.19 C API与NumPy 1.16相同，因此生成的程序将与NumPy 1.16兼容（从C-API的角度看）。这个默认值将在未来的非bug修复版本中增加。您仍然可以针对较旧的NumPy版本进行编译并在更新的版本上运行。
- en: For more details please see [For downstream package authors](../dev/depending_on_numpy.html#for-downstream-package-authors).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息请参见[对于下游包作者](../dev/depending_on_numpy.html#for-downstream-package-authors)。
- en: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23528](https://github.com/numpy/numpy/pull/23528))
- en: New Features
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新功能
- en: '`np.einsum` now accepts arrays with `object` dtype'
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum`现在接受具有`object` dtype的数组'
- en: The code path will call python operators on object dtype arrays, much like `np.dot`
    and `np.matmul`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 代码路径将在对象dtype数组上调用python运算符，就像`np.dot`和`np.matmul`一样。
- en: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
- en: Add support for inplace matrix multiplication
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加对原地矩阵乘法的支持
- en: It is now possible to perform inplace matrix multiplication via the `@=` operator.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过`@=`运算符执行原地矩阵乘法。
- en: '[PRE14]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
- en: Added `NPY_ENABLE_CPU_FEATURES` environment variable
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了`NPY_ENABLE_CPU_FEATURES`环境变量
- en: Users may now choose to enable only a subset of the built CPU features at runtime
    by specifying the *NPY_ENABLE_CPU_FEATURES* environment variable. Note that these
    specified features must be outside the baseline, since those are always assumed.
    Errors will be raised if attempting to enable a feature that is either not supported
    by your CPU, or that NumPy was not built with.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以通过指定*NPY_ENABLE_CPU_FEATURES*环境变量在运行时选择仅启用内置CPU功能的子集。请注意，这些指定的功能必须在基线之外，因为这些功能总是被假定。如果尝试启用CPU不支持的功能，或者NumPy未构建的功能，将引发错误。
- en: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
- en: NumPy now has an `np.exceptions` namespace
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy现在有一个`np.exceptions`命名空间
- en: NumPy now has a dedicated namespace making most exceptions and warnings available.
    All of these remain available in the main namespace, although some may be moved
    slowly in the future. The main reason for this is to increase discoverability
    and add future exceptions.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个专用的命名空间，使大多数异常和警告可用。所有这些仍然在主命名空间中可用，尽管一些可能会在未来慢慢移动。这样做的主要原因是增加可发现性并添加未来的异常。
- en: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
- en: '`np.linalg` functions return NamedTuples'
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg`函数返回NamedTuples'
- en: '`np.linalg` functions that return tuples now return namedtuples. These functions
    are `eig()`, `eigh()`, `qr()`, `slogdet()`, and `svd()`. The return type is unchanged
    in instances where these functions return non-tuples with certain keyword arguments
    (like `svd(compute_uv=False)`).'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 返回元组的`np.linalg`函数现在返回namedtuples。这些函数包括`eig()`、`eigh()`、`qr()`、`slogdet()`和`svd()`。在这些函数返回非元组的情况下，返回类型不变，例如带有某些关键字参数的`svd(compute_uv=False)`。
- en: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
- en: String functions in `np.char` are compatible with NEP 42 custom dtypes
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.char`中的字符串函数与NEP 42自定义dtype兼容'
- en: Custom dtypes that represent unicode strings or byte strings can now be passed
    to the string functions in `np.char`.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将代表unicode字符串或字节字符串的自定义dtype传递给`np.char`中的字符串函数。
- en: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
- en: String dtype instances can be created from the string abstract dtype classes
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以从字符串抽象dtype类创建字符串dtype实例
- en: It is now possible to create a string dtype instance with a size without using
    the string name of the dtype. For example, `type(np.dtype('U'))(8)` will create
    a dtype that is equivalent to `np.dtype('U8')`. This feature is most useful when
    writing generic code dealing with string dtype classes.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以创建一个具有大小的字符串dtype实例，而不使用dtype的字符串名称。例如，`type(np.dtype('U'))(8)`将创建一个等同于`np.dtype('U8')`的dtype。在编写处理字符串dtype类的通用代码时，此功能最为有用。
- en: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
- en: Fujitsu C/C++ compiler is now supported
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 富士通C/C++编译器现在受支持
- en: 'Support for Fujitsu compiler has been added. To build with Fujitsu compiler,
    run:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对富士通编译器的支持。要使用富士通编译器构建，请运行：
- en: python setup.py build -c fujitsu
  id: totrans-361
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: python setup.py build -c fujitsu
- en: SSL2 is now supported
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持SSL2
- en: Support for SSL2 has been added. SSL2 is a library that provides OpenBLAS compatible
    GEMM functions. To enable SSL2, it need to edit site.cfg and build with Fujitsu
    compiler. See site.cfg.example.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对SSL2的支持。SSL2是一个提供OpenBLAS兼容GEMM函数的库。要启用SSL2，需要编辑site.cfg并使用富士通编译器构建。参见site.cfg.example。
- en: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
- en: '`np.einsum` now accepts arrays with `object` dtype'
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.einsum`现在接受具有`object` dtype的数组'
- en: The code path will call python operators on object dtype arrays, much like `np.dot`
    and `np.matmul`.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 代码路径将在对象dtype数组上调用python运算符，类似于`np.dot`和`np.matmul`。
- en: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18053](https://github.com/numpy/numpy/pull/18053))
- en: Add support for inplace matrix multiplication
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加对原地矩阵乘法的支持
- en: It is now possible to perform inplace matrix multiplication via the `@=` operator.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过`@=`运算符执行原地矩阵乘法。
- en: '[PRE15]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-21120](https://github.com/numpy/numpy/pull/21120))
- en: Added `NPY_ENABLE_CPU_FEATURES` environment variable
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加了`NPY_ENABLE_CPU_FEATURES`环境变量
- en: Users may now choose to enable only a subset of the built CPU features at runtime
    by specifying the *NPY_ENABLE_CPU_FEATURES* environment variable. Note that these
    specified features must be outside the baseline, since those are always assumed.
    Errors will be raised if attempting to enable a feature that is either not supported
    by your CPU, or that NumPy was not built with.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以通过指定*NPY_ENABLE_CPU_FEATURES*环境变量在运行时仅启用内置CPU功能的子集。请注意，这些指定的功能必须在基线之外，因为基线始终被假定。如果尝试启用不受CPU支持的功能，或者NumPy未构建的功能，则会引发错误。
- en: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22137](https://github.com/numpy/numpy/pull/22137))
- en: NumPy now has an `np.exceptions` namespace
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy现在有一个`np.exceptions`命名空间
- en: NumPy now has a dedicated namespace making most exceptions and warnings available.
    All of these remain available in the main namespace, although some may be moved
    slowly in the future. The main reason for this is to increase discoverability
    and add future exceptions.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个专用的命名空间，使大多数异常和警告可用。所有这些仍然在主命名空间中可用，尽管一些可能会在将来慢慢移动。这样做的主要原因是增加可发现性并添加未来的异常。
- en: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22644](https://github.com/numpy/numpy/pull/22644))
- en: '`np.linalg` functions return NamedTuples'
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.linalg`函数返回命名元组'
- en: '`np.linalg` functions that return tuples now return namedtuples. These functions
    are `eig()`, `eigh()`, `qr()`, `slogdet()`, and `svd()`. The return type is unchanged
    in instances where these functions return non-tuples with certain keyword arguments
    (like `svd(compute_uv=False)`).'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.linalg`函数现在返回命名元组。这些函数包括`eig()`、`eigh()`、`qr()`、`slogdet()`和`svd()`。在这些函数返回非元组的实例中，返回类型在某些关键字参数下保持不变（比如`svd(compute_uv=False)`）。'
- en: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22786](https://github.com/numpy/numpy/pull/22786))
- en: String functions in `np.char` are compatible with NEP 42 custom dtypes
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.char`中的字符串函数与NEP 42自定义dtype兼容'
- en: Custom dtypes that represent unicode strings or byte strings can now be passed
    to the string functions in `np.char`.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将表示Unicode字符串或字节字符串的自定义dtype传递给`np.char`中的字符串函数。
- en: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22863](https://github.com/numpy/numpy/pull/22863))
- en: String dtype instances can be created from the string abstract dtype classes
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可以从字符串抽象dtype类创建字符串dtype实例
- en: It is now possible to create a string dtype instance with a size without using
    the string name of the dtype. For example, `type(np.dtype('U'))(8)` will create
    a dtype that is equivalent to `np.dtype('U8')`. This feature is most useful when
    writing generic code dealing with string dtype classes.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以创建具有大小的字符串dtype实例，而无需使用dtype的字符串名称。例如，`type(np.dtype('U'))(8)`将创建一个等效于`np.dtype('U8')`的dtype。在处理字符串dtype类的通用代码时，此功能最有用。
- en: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22963](https://github.com/numpy/numpy/pull/22963))
- en: Fujitsu C/C++ compiler is now supported
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持富士通C/C++编译器
- en: 'Support for Fujitsu compiler has been added. To build with Fujitsu compiler,
    run:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对富士通编译器的支持。要使用富士通编译器构建，请运行：
- en: python setup.py build -c fujitsu
  id: totrans-389
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: python setup.py build -c fujitsu
- en: SSL2 is now supported
  id: totrans-390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 现在支持SSL2
- en: Support for SSL2 has been added. SSL2 is a library that provides OpenBLAS compatible
    GEMM functions. To enable SSL2, it need to edit site.cfg and build with Fujitsu
    compiler. See site.cfg.example.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了对SSL2的支持。SSL2是一个提供OpenBLAS兼容GEMM函数的库。要启用SSL2，需要编辑site.cfg并使用富士通编译器构建。请参阅site.cfg.example。
- en: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22982](https://github.com/numpy/numpy/pull/22982))
- en: Improvements
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进
- en: '`NDArrayOperatorsMixin` specifies that it has no `__slots__`'
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin`指定没有`__slots__`'
- en: The `NDArrayOperatorsMixin` class now specifies that it contains no `__slots__`,
    ensuring that subclasses can now make use of this feature in Python.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDArrayOperatorsMixin`类现在指定不包含`__slots__`，确保子类现在可以在Python中使用此功能。'
- en: ([gh-23113](https://github.com/numpy/numpy/pull/23113))
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23113](https://github.com/numpy/numpy/pull/23113))
- en: Fix power of complex zero
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复复数零的幂
- en: '`np.power` now returns a different result for `0^{non-zero}` for complex numbers.
    Note that the value is only defined when the real part of the exponent is larger
    than zero. Previously, NaN was returned unless the imaginary part was strictly
    zero. The return value is either `0+0j` or `0-0j`.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.power`现在为复数返回不同的结果`0^{non-zero}`。请注意，该值仅在指数的实部大于零时定义。以前，除非虚部严格为零，否则返回NaN。返回值为`0+0j`或`0-0j`。'
- en: ([gh-18535](https://github.com/numpy/numpy/pull/18535))
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-18535](https://github.com/numpy/numpy/pull/18535))
- en: New `DTypePromotionError`
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新增 `DTypePromotionError`
- en: 'NumPy now has a new `DTypePromotionError` which is used when two dtypes cannot
    be promoted to a common one, for example:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy现在有一个新的`DTypePromotionError`，当两个dtype无法提升为一个公共dtype时使用，例如：
- en: '[PRE16]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: raises this new exception.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 引发这个新异常。
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
- en: '*np.show_config* uses information from Meson'
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '*np.show_config*使用来自Meson的信息'
- en: Build and system information now contains information from Meson. *np.show_config*
    now has a new optional parameter `mode` to help customize the output.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和系统信息现在包含来自Meson的信息。*np.show_config*现在有一个新的可选参数`mode`，以帮助自定义输出。
- en: ([gh-22769](https://github.com/numpy/numpy/pull/22769))
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22769](https://github.com/numpy/numpy/pull/22769))
- en: Fix `np.ma.diff` not preserving the mask when called with arguments prepend/append.
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复`np.ma.diff`在带有prepend/append参数调用时未保留掩码。
- en: Calling `np.ma.diff` with arguments prepend and/or append now returns a `MaskedArray`
    with the input mask preserved.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`np.ma.diff`时带有prepend和/或append参数现在返回一个保留输入掩码的`MaskedArray`。
- en: Previously, a `MaskedArray` without the mask was returned.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，返回的`MaskedArray`没有掩码。
- en: ([gh-22776](https://github.com/numpy/numpy/pull/22776))
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22776](https://github.com/numpy/numpy/pull/22776))
- en: Corrected error handling for NumPy C-API in Cython
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修正了Cython中NumPy C-API的错误处理
- en: Many NumPy C functions defined for use in Cython were lacking the correct error
    indicator like `except -1` or `except *`. These have now been added.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 许多为在Cython中使用而定义的NumPy C函数缺乏正确的错误指示符，如`except -1`或`except *`。现在已添加。
- en: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
- en: Ability to directly spawn random number generators
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能够直接生成随机数生成器
- en: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn") now allows to directly spawn new independent child
    generators via the [`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn") mechanism. [`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") does the same for the underlying bit generator.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn")现在允许通过[`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn")机制直接生成新的独立子生成器。[`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn")对底层比特生成器执行相同操作。'
- en: 'Additionally, [`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq") now gives direct access to the seed sequence
    used for initializing the bit generator. This allows for example:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，[`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq")现在直接提供用于初始化比特生成器的种子序列的访问。这允许例如：
- en: '[PRE17]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Previously, this was hard to do without passing the `SeedSequence` explicitly.
    Please see [`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") for more information.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这是很难做到的，没有明确传递`SeedSequence`。请参阅[`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence")获取更多信息。
- en: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
- en: '`numpy.logspace` now supports a non-scalar `base` argument'
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.logspace`现在支持非标量`base`参数'
- en: The `base` argument of `numpy.logspace` can now be array-like if it is broadcastable
    against the `start` and `stop` arguments.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.logspace`的`base`参数现在可以是类似数组，如果可以与`start`��`stop`参数进行广播。'
- en: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
- en: '`np.ma.dot()` now supports for non-2d arrays'
  id: totrans-424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.dot()`现在支持非2d数组'
- en: Previously `np.ma.dot()` only worked if `a` and `b` were both 2d. Now it works
    for non-2d arrays as well as `np.dot()`.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 以前`np.ma.dot()`只在`a`和`b`都是2d时有效。现在它也适用于非2d数组，就像`np.dot()`一样。
- en: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
- en: Explicitly show keys of .npz file in repr
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明确在repr中显示.npz文件的键
- en: '`NpzFile` shows keys of loaded .npz file when printed.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`NpzFile`时显示加载的.npz文件的键。
- en: '[PRE18]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ([gh-23357](https://github.com/numpy/numpy/pull/23357))
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: NumPy now exposes DType classes in `np.dtypes`
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new `numpy.dtypes` module now exposes DType classes and will contain future
    dtype related functionality. Most users should have no need to use these classes
    directly.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-23358](https://github.com/numpy/numpy/pull/23358))
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Drop dtype metadata before saving in .npy or .npz files
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Currently, a `*.npy` file containing a table with a dtype with metadata cannot
    be read back. Now, *np.save* and *np.savez* drop metadata before saving.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-23371](https://github.com/numpy/numpy/pull/23371))
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.lib.recfunctions.structured_to_unstructured` returns views in more cases'
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`structured_to_unstructured` now returns a view, if the stride between the
    fields is constant. Prior, padding between the fields or a reversed field would
    lead to a copy. This change only applies to `ndarray`, `memmap` and `recarray`.
    For all other array subclasses, the behavior remains unchanged.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-23652](https://github.com/numpy/numpy/pull/23652))
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Signed and unsigned integers always compare correctly
  id: totrans-440
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When `uint64` and `int64` are mixed in NumPy, NumPy typically promotes both
    to `float64`. This behavior may be argued about but is confusing for comparisons
    `==`, `<=`, since the results returned can be incorrect but the conversion is
    hidden since the result is a boolean. NumPy will now return the correct results
    for these by avoiding the cast to float.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-23713](https://github.com/numpy/numpy/pull/23713))
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '`NDArrayOperatorsMixin` specifies that it has no `__slots__`'
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `NDArrayOperatorsMixin` class now specifies that it contains no `__slots__`,
    ensuring that subclasses can now make use of this feature in Python.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-23113](https://github.com/numpy/numpy/pull/23113))
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Fix power of complex zero
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`np.power` now returns a different result for `0^{non-zero}` for complex numbers.
    Note that the value is only defined when the real part of the exponent is larger
    than zero. Previously, NaN was returned unless the imaginary part was strictly
    zero. The return value is either `0+0j` or `0-0j`.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-18535](https://github.com/numpy/numpy/pull/18535))
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: New `DTypePromotionError`
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy now has a new `DTypePromotionError` which is used when two dtypes cannot
    be promoted to a common one, for example:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: raises this new exception.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-22707](https://github.com/numpy/numpy/pull/22707))
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '*np.show_config* uses information from Meson'
  id: totrans-454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Build and system information now contains information from Meson. *np.show_config*
    now has a new optional parameter `mode` to help customize the output.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-22769](https://github.com/numpy/numpy/pull/22769))
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Fix `np.ma.diff` not preserving the mask when called with arguments prepend/append.
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calling `np.ma.diff` with arguments prepend and/or append now returns a `MaskedArray`
    with the input mask preserved.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Previously, a `MaskedArray` without the mask was returned.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: ([gh-22776](https://github.com/numpy/numpy/pull/22776))
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: Corrected error handling for NumPy C-API in Cython
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many NumPy C functions defined for use in Cython were lacking the correct error
    indicator like `except -1` or `except *`. These have now been added.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 许多为在 Cython 中使用而定义的 NumPy C 函数缺乏正确的错误指示符，如 `except -1` 或 `except *`。现在已经添加了这些。
- en: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22997](https://github.com/numpy/numpy/pull/22997))
- en: Ability to directly spawn random number generators
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接生成随机数生成器的能力
- en: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn") now allows to directly spawn new independent child
    generators via the [`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn") mechanism. [`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") does the same for the underlying bit generator.'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[`numpy.random.Generator.spawn`](../reference/random/generated/numpy.random.Generator.spawn.html#numpy.random.Generator.spawn
    "numpy.random.Generator.spawn") 现在允许通过 [`numpy.random.SeedSequence.spawn`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.spawn.html#numpy.random.SeedSequence.spawn
    "numpy.random.SeedSequence.spawn") 机制直接生成新的独立子生成器。[`numpy.random.BitGenerator.spawn`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.spawn.html#numpy.random.BitGenerator.spawn
    "numpy.random.BitGenerator.spawn") 对底层位生成器执行相同操作。'
- en: 'Additionally, [`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq") now gives direct access to the seed sequence
    used for initializing the bit generator. This allows for example:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`numpy.random.BitGenerator.seed_seq`](../reference/random/bit_generators/generated/numpy.random.BitGenerator.seed_seq.html#numpy.random.BitGenerator.seed_seq
    "numpy.random.BitGenerator.seed_seq") 现在直接提供用于初始化位生成器的种子序列的访问权限。例如，这允许：
- en: '[PRE20]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Previously, this was hard to do without passing the `SeedSequence` explicitly.
    Please see [`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") for more information.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这是很难做到的，没有显式传递 `SeedSequence`。请参阅 [`numpy.random.SeedSequence`](../reference/random/bit_generators/generated/numpy.random.SeedSequence.html#numpy.random.SeedSequence
    "numpy.random.SeedSequence") 了解更多信息。
- en: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23195](https://github.com/numpy/numpy/pull/23195))
- en: '`numpy.logspace` now supports a non-scalar `base` argument'
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.logspace` 现在支持非标量 `base` 参数'
- en: The `base` argument of `numpy.logspace` can now be array-like if it is broadcastable
    against the `start` and `stop` arguments.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`numpy.logspace` 的 `base` 参数现在可以是类似数组，如果它可以与 `start` 和 `stop` 参数进行广播。'
- en: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23275](https://github.com/numpy/numpy/pull/23275))
- en: '`np.ma.dot()` now supports for non-2d arrays'
  id: totrans-473
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.ma.dot()` 现在支持非 2d 数组'
- en: Previously `np.ma.dot()` only worked if `a` and `b` were both 2d. Now it works
    for non-2d arrays as well as `np.dot()`.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，`np.ma.dot()` 只能在 `a` 和 `b` 都是 2d 的情况下工作。现在它也适用于非 2d 数组，就像 `np.dot()` 一样。
- en: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23322](https://github.com/numpy/numpy/pull/23322))
- en: Explicitly show keys of .npz file in repr
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显式显示 .npz 文件的键��� repr 中
- en: '`NpzFile` shows keys of loaded .npz file when printed.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`NpzFile` 在打印时显示加载的 .npz 文件的键。'
- en: '[PRE21]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ([gh-23357](https://github.com/numpy/numpy/pull/23357))
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23357](https://github.com/numpy/numpy/pull/23357))
- en: NumPy now exposes DType classes in `np.dtypes`
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy 现在在 `np.dtypes` 中公开了 DType 类。
- en: The new `numpy.dtypes` module now exposes DType classes and will contain future
    dtype related functionality. Most users should have no need to use these classes
    directly.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `numpy.dtypes` 模块现在公开了 DType 类，并将包含未来与 dtype 相关的功能。大多数用户不需要直接使用这些类。
- en: ([gh-23358](https://github.com/numpy/numpy/pull/23358))
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23358](https://github.com/numpy/numpy/pull/23358))
- en: Drop dtype metadata before saving in .npy or .npz files
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在保存为 .npy 或 .npz 文件之前删除 dtype 元数据
- en: Currently, a `*.npy` file containing a table with a dtype with metadata cannot
    be read back. Now, *np.save* and *np.savez* drop metadata before saving.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，包含具有元数据的 dtype 的表的 `*.npy` 文件无法读取。现在，*np.save* 和 *np.savez* 在保存之前删除元数据。
- en: ([gh-23371](https://github.com/numpy/numpy/pull/23371))
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23371](https://github.com/numpy/numpy/pull/23371))
- en: '`numpy.lib.recfunctions.structured_to_unstructured` returns views in more cases'
  id: totrans-486
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`numpy.lib.recfunctions.structured_to_unstructured` 在更多情况下返回视图'
- en: '`structured_to_unstructured` now returns a view, if the stride between the
    fields is constant. Prior, padding between the fields or a reversed field would
    lead to a copy. This change only applies to `ndarray`, `memmap` and `recarray`.
    For all other array subclasses, the behavior remains unchanged.'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '`structured_to_unstructured`现在如果字段之间的步幅是恒定的，则返回一个视图。以前，字段之间的填充或反转字段会导致复制。此更改仅适用于`ndarray`、`memmap`和`recarray`。对于所有其他数组子类，行为保持不变。'
- en: ([gh-23652](https://github.com/numpy/numpy/pull/23652))
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23652](https://github.com/numpy/numpy/pull/23652))
- en: Signed and unsigned integers always compare correctly
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有符号和无符号整数始终正确比较
- en: When `uint64` and `int64` are mixed in NumPy, NumPy typically promotes both
    to `float64`. This behavior may be argued about but is confusing for comparisons
    `==`, `<=`, since the results returned can be incorrect but the conversion is
    hidden since the result is a boolean. NumPy will now return the correct results
    for these by avoiding the cast to float.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 当NumPy中混合使用`uint64`和`int64`时，NumPy通常会将两者都提升为`float64`。这种行为可能会引起争议，但对于比较`==`、`<=`来说很令人困惑，因为返回的结果可能是不正确的，但转换是隐藏的，因为结果是布尔值。现在NumPy将通过避免转换为浮点数来返回这些正确的结果。
- en: ([gh-23713](https://github.com/numpy/numpy/pull/23713))
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23713](https://github.com/numpy/numpy/pull/23713))
- en: Performance improvements and changes
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进和变化
- en: Faster `np.argsort` on AVX-512 enabled processors
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AVX-512启用处理器上更快的`np.argsort`
- en: 32-bit and 64-bit quicksort algorithm for np.argsort gain up to 6x speed up
    on processors that support AVX-512 instruction set.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 32位和64位快速排序算法对支持AVX-512指令集的处理器获得高���6倍的加速。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[英特尔公司](https://open.intel.com/)赞助此工作。
- en: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
- en: Faster `np.sort` on AVX-512 enabled processors
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AVX-512启用处理器上更快的`np.sort`
- en: Quicksort for 16-bit and 64-bit dtypes gain up to 15x and 9x speed up on processors
    that support AVX-512 instruction set.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 16位和64位数据类型的快速排序获得高达15倍和9倍的加速，对支持AVX-512指令集的处理器。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[英特尔公司](https://open.intel.com/)赞助此工作。
- en: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
- en: '`__array_function__` machinery is now much faster'
  id: totrans-501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_function__`机制现在更快'
- en: The overhead of the majority of functions in NumPy is now smaller especially
    when keyword arguments are used. This change significantly speeds up many simple
    function calls.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 现在NumPy中大多数函数的开销更小，特别是在使用关键字参数时。这个改变显著加快了许多简单函数调用的速度。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: '`ufunc.at` can be much faster'
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ufunc.at`可以更快'
- en: 'Generic `ufunc.at` can be up to 9x faster. The conditions for this speedup:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 通用`ufunc.at`可以快达到9倍。加速的条件：
- en: operands are aligned
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作数对齐
- en: no casting
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无强制转换
- en: If ufuncs with appropriate indexed loops on 1d arguments with the above conditions,
    `ufunc.at` can be up to 60x faster (an additional 7x speedup). Appropriate indexed
    loops have been added to `add`, `subtract`, `multiply`, `floor_divide`, `maximum`,
    `minimum`, `fmax`, and `fmin`.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 如果ufunc在具有上述条件的1d参数上具有适当的索引循环，`ufunc.at`可以快达到60倍（额外7倍加速）。已将适当的索引循环添加到`add`、`subtract`、`multiply`、`floor_divide`、`maximum`、`minimum`、`fmax`和`fmin`中。
- en: The internal logic is similar to the logic used for regular ufuncs, which also
    have fast paths.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 内部逻辑类似于常规ufunc使用的逻辑，也有快速路径。
- en: Thanks to the [D. E. Shaw group](https://deshaw.com/) for sponsoring this work.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[D. E. Shaw集团](https://deshaw.com/)赞助此工作。
- en: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
- en: Faster membership test on `NpzFile`
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`NpzFile`上更快的成员测试
- en: Membership test on `NpzFile` will no longer decompress the archive if it is
    successful.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NpzFile`上的成员测试如果成功将不再解压存档。
- en: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
- en: Faster `np.argsort` on AVX-512 enabled processors
  id: totrans-515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在AVX-512启用处理器上更快的`np.argsort`
- en: 32-bit and 64-bit quicksort algorithm for np.argsort gain up to 6x speed up
    on processors that support AVX-512 instruction set.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 32位和64位快速排序算法对支持AVX-512指令集的处理器获得高达6倍的加速。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[英特尔公司](https://open.intel.com/)赞助此工作。
- en: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23707](https://github.com/numpy/numpy/pull/23707))
- en: Faster `np.sort` on AVX-512 enabled processors
  id: totrans-519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AVX-512启用处理器上更快的`np.sort`
- en: Quicksort for 16-bit and 64-bit dtypes gain up to 15x and 9x speed up on processors
    that support AVX-512 instruction set.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 16位和64位数据类型的快速排序在支持AVX-512指令集的处理器上提高了15倍和9倍的速度。
- en: Thanks to [Intel corporation](https://open.intel.com/) for sponsoring this work.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[英特尔公司](https://open.intel.com/)赞助此工作。
- en: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22315](https://github.com/numpy/numpy/pull/22315))
- en: '`__array_function__` machinery is now much faster'
  id: totrans-523
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`__array_function__`机制现在更快'
- en: The overhead of the majority of functions in NumPy is now smaller especially
    when keyword arguments are used. This change significantly speeds up many simple
    function calls.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 现在NumPy中大多数函数的开销更小，特别是在使用关键字参数时。这一变化显著加快了许多简单函数调用的速度。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: '`ufunc.at` can be much faster'
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ufunc.at`可以更快'
- en: 'Generic `ufunc.at` can be up to 9x faster. The conditions for this speedup:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 通用`ufunc.at`可以快9倍。此加速的条件：
- en: operands are aligned
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作数已对齐
- en: no casting
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需转换
- en: If ufuncs with appropriate indexed loops on 1d arguments with the above conditions,
    `ufunc.at` can be up to 60x faster (an additional 7x speedup). Appropriate indexed
    loops have been added to `add`, `subtract`, `multiply`, `floor_divide`, `maximum`,
    `minimum`, `fmax`, and `fmin`.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在满足上述条件的1d参数上具有适当索引循环的ufunc，`ufunc.at`可以快60倍（额外提速7倍）。已将适当的索引循环添加到`add`、`subtract`、`multiply`、`floor_divide`、`maximum`、`minimum`、`fmax`和`fmin`。
- en: The internal logic is similar to the logic used for regular ufuncs, which also
    have fast paths.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 内部逻辑类似于常规ufunc使用的逻辑，也有快速路径。
- en: Thanks to the [D. E. Shaw group](https://deshaw.com/) for sponsoring this work.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[D. E. Shaw集团](https://deshaw.com/)赞助此工作。
- en: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23136](https://github.com/numpy/numpy/pull/23136))
- en: Faster membership test on `NpzFile`
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`NpzFile`上更快的成员测试
- en: Membership test on `NpzFile` will no longer decompress the archive if it is
    successful.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NpzFile`上的成员测试如果成功将不再解压存档。
- en: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23661](https://github.com/numpy/numpy/pull/23661))
- en: Changes
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更
- en: '`np.r_[]` and `np.c_[]` with certain scalar values'
  id: totrans-538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.r_[]`和`np.c_[]`与特定标量值'
- en: 'In rare cases, using mainly `np.r_` with scalars can lead to different results.
    The main potential changes are highlighted by the following:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见情况下，主要使用`np.r_`与标量可能导致不同的结果。主要潜在变化如下所示：
- en: '[PRE22]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Where the second example returned:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例返回：
- en: '[PRE23]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first one is due to a signed integer scalar with an unsigned integer array,
    while the second is due to `255` not fitting into `int8` and NumPy currently inspecting
    values to make this work. (Note that the second example is expected to change
    in the future due to [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)"); it will then raise an error.)
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是由于带有无符号整数数组的有符号整数标量，而第二个是由于`255`无法容纳在`int8`中，NumPy目前正在检查值以使其正常工作。（请注意，由于[NEP
    50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50 "(在NumPy增强提案中)");
    未来预计第二个示例将发生变化，然后会引发错误。）
- en: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
- en: Most NumPy functions are wrapped into a C-callable
  id: totrans-545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大多数NumPy函数都被封装为可调用的C函数
- en: To speed up the `__array_function__` dispatching, most NumPy functions are now
    wrapped into C-callables and are not proper Python functions or C methods. They
    still look and feel the same as before (like a Python function), and this should
    only improve performance and user experience (cleaner tracebacks). However, please
    inform the NumPy developers if this change confuses your program for some reason.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 为加快`__array_function__`分派，现在大多数NumPy函数都被封装为C可调用函数，而不是正确的Python函数或C方法。它们看起来和感觉仍然与以前一样（像Python函数），这只会提高性能和用户体验（更清晰的回溯）。但是，如果此更改因某种原因使您的程序混淆，请通知NumPy开发人员。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: C++ standard library usage
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C++标准库使用
- en: NumPy builds now depend on the C++ standard library, because the `numpy.core._multiarray_umath`
    extension is linked with the C++ linker.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 现在NumPy构建依赖于C++标准库，因为`numpy.core._multiarray_umath`扩展与C++链接器链接。
- en: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
- en: '`np.r_[]` and `np.c_[]` with certain scalar values'
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`np.r_[]`和`np.c_[]`与特定标量值'
- en: 'In rare cases, using mainly `np.r_` with scalars can lead to different results.
    The main potential changes are highlighted by the following:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见情况下，主要使用`np.r_`与标量可能导致不同的结果。主要潜在变化如下所示：
- en: '[PRE24]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Where the second example returned:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例返回：
- en: '[PRE25]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first one is due to a signed integer scalar with an unsigned integer array,
    while the second is due to `255` not fitting into `int8` and NumPy currently inspecting
    values to make this work. (Note that the second example is expected to change
    in the future due to [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50
    "(in NumPy Enhancement Proposals)"); it will then raise an error.)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是由于带有无符号整数数组的有符号整数标量，而第二个是由于 `255` 无法容纳在 `int8` 中，而 NumPy 目前正在检查值以使其工作。（请注意，由于
    [NEP 50](https://numpy.org/neps/nep-0050-scalar-promotion.html#nep50 "(在 NumPy
    Enhancement Proposals 中)"), 第二个示例预计将来会发生变化；然后会引发错误。）
- en: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-22539](https://github.com/numpy/numpy/pull/22539))
- en: Most NumPy functions are wrapped into a C-callable
  id: totrans-558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大多数 NumPy 函数都被包装成可调用的 C 函数
- en: To speed up the `__array_function__` dispatching, most NumPy functions are now
    wrapped into C-callables and are not proper Python functions or C methods. They
    still look and feel the same as before (like a Python function), and this should
    only improve performance and user experience (cleaner tracebacks). However, please
    inform the NumPy developers if this change confuses your program for some reason.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快 `__array_function__` 的分发，大多数 NumPy 函数现在被包装成 C 可调用函数，而不是正确的 Python 函数或 C
    方法。它们看起来和感觉仍然与以前一样（像一个 Python 函数），这只会提高性能和用户体验（更清晰的回溯）。然而，如果这种变化因某种原因使您的程序混淆，请通知
    NumPy 开发人员。
- en: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23020](https://github.com/numpy/numpy/pull/23020))
- en: C++ standard library usage
  id: totrans-561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C++ 标准库的使用
- en: NumPy builds now depend on the C++ standard library, because the `numpy.core._multiarray_umath`
    extension is linked with the C++ linker.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 NumPy 构建依赖于 C++ 标准库，因为 `numpy.core._multiarray_umath` 扩展与 C++ 链接器链接。
- en: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: ([gh-23601](https://github.com/numpy/numpy/pull/23601))
