["```py\nclass sympy.physics.quantum.tensorproduct.TensorProduct(*args)\n```", "```py\n>>> from sympy import Matrix\n>>> from sympy.physics.quantum import TensorProduct\n\n>>> m1 = Matrix([[1,2],[3,4]])\n>>> m2 = Matrix([[1,0],[0,1]])\n>>> TensorProduct(m1, m2)\nMatrix([\n[1, 0, 2, 0],\n[0, 1, 0, 2],\n[3, 0, 4, 0],\n[0, 3, 0, 4]])\n>>> TensorProduct(m2, m1)\nMatrix([\n[1, 2, 0, 0],\n[3, 4, 0, 0],\n[0, 0, 1, 2],\n[0, 0, 3, 4]]) \n```", "```py\n>>> from sympy import Symbol\n>>> A = Symbol('A',commutative=False)\n>>> B = Symbol('B',commutative=False)\n>>> tp = TensorProduct(A, B)\n>>> tp\nAxB \n```", "```py\n>>> from sympy.physics.quantum import Dagger\n>>> Dagger(tp)\nDagger(A)xDagger(B) \n```", "```py\n>>> C = Symbol('C',commutative=False)\n>>> tp = TensorProduct(A+B,C)\n>>> tp\n(A + B)xC\n>>> tp.expand(tensorproduct=True)\nAxC + BxC \n```", "```py\nsympy.physics.quantum.tensorproduct.tensor_product_simp(e, **hints)\n```", "```py\n>>> from sympy.physics.quantum import tensor_product_simp\n>>> from sympy.physics.quantum import TensorProduct\n>>> from sympy import Symbol\n>>> A = Symbol('A',commutative=False)\n>>> B = Symbol('B',commutative=False)\n>>> C = Symbol('C',commutative=False)\n>>> D = Symbol('D',commutative=False) \n```", "```py\n>>> e = TensorProduct(A,B)*TensorProduct(C,D)\n>>> e\nAxB*CxD\n>>> tensor_product_simp(e)\n(A*C)x(B*D) \n```", "```py\n>>> tensor_product_simp(e**2)\n(A*C)x(B*D)**2 \n```"]