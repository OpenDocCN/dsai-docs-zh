["```py\nsympy.combinatorics.named_groups.SymmetricGroup(n)\n```", "```py\n>>> from sympy.combinatorics.named_groups import SymmetricGroup\n>>> G = SymmetricGroup(4)\n>>> G.is_group\nTrue\n>>> G.order()\n24\n>>> list(G.generate_schreier_sims(af=True))\n[[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 1, 2, 0], [0, 2, 3, 1],\n[1, 3, 0, 2], [2, 0, 1, 3], [3, 2, 0, 1], [0, 3, 1, 2], [1, 0, 2, 3],\n[2, 1, 3, 0], [3, 0, 1, 2], [0, 1, 3, 2], [1, 2, 0, 3], [2, 3, 1, 0],\n[3, 1, 0, 2], [0, 2, 1, 3], [1, 3, 2, 0], [2, 0, 3, 1], [3, 2, 1, 0],\n[0, 3, 2, 1], [1, 0, 3, 2], [2, 1, 0, 3], [3, 0, 2, 1]] \n```", "```py\nsympy.combinatorics.named_groups.CyclicGroup(n)\n```", "```py\n>>> from sympy.combinatorics.named_groups import CyclicGroup\n>>> G = CyclicGroup(6)\n>>> G.is_group\nTrue\n>>> G.order()\n6\n>>> list(G.generate_schreier_sims(af=True))\n[[0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 0], [2, 3, 4, 5, 0, 1],\n[3, 4, 5, 0, 1, 2], [4, 5, 0, 1, 2, 3], [5, 0, 1, 2, 3, 4]] \n```", "```py\nsympy.combinatorics.named_groups.DihedralGroup(n)\n```", "```py\n>>> from sympy.combinatorics.named_groups import DihedralGroup\n>>> G = DihedralGroup(5)\n>>> G.is_group\nTrue\n>>> a = list(G.generate_dimino())\n>>> [perm.cyclic_form for perm in a]\n[[], [[0, 1, 2, 3, 4]], [[0, 2, 4, 1, 3]],\n[[0, 3, 1, 4, 2]], [[0, 4, 3, 2, 1]], [[0, 4], [1, 3]],\n[[1, 4], [2, 3]], [[0, 1], [2, 4]], [[0, 2], [3, 4]],\n[[0, 3], [1, 2]]] \n```", "```py\nsympy.combinatorics.named_groups.AlternatingGroup(n)\n```", "```py\n>>> from sympy.combinatorics.named_groups import AlternatingGroup\n>>> G = AlternatingGroup(4)\n>>> G.is_group\nTrue\n>>> a = list(G.generate_dimino())\n>>> len(a)\n12\n>>> all(perm.is_even for perm in a)\nTrue \n```", "```py\nsympy.combinatorics.named_groups.AbelianGroup(*cyclic_orders)\n```", "```py\n>>> from sympy.combinatorics.named_groups import AbelianGroup\n>>> AbelianGroup(3, 4)\nPermutationGroup([\n (6)(0 1 2),\n (3 4 5 6)])\n>>> _.is_group\nTrue \n```"]