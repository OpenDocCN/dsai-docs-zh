["```py\nIn [1]: store = pd.HDFStore(\"store.h5\")\n\nIn [2]: df = pd.DataFrame(\n ...:    np.random.randn(8, 3),\n ...:    index=pd.date_range(\"1/1/2000\", periods=8),\n ...:    columns=[\"A\", \"B\", \"C\"],\n ...: )\n ...: \n\nIn [3]: df[\"string\"] = \"foo\"\n\nIn [4]: df.loc[df.index[4:6], \"string\"] = np.nan\n\nIn [5]: df.loc[df.index[7:9], \"string\"] = \"bar\"\n\nIn [6]: df[\"string2\"] = \"cool\"\n\nIn [7]: df\nOut[7]: \n A         B         C string string2\n2000-01-01  0.469112 -0.282863 -1.509059    foo    cool\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool\n2000-01-03  0.119209 -1.044236 -0.861849    foo    cool\n2000-01-04 -2.104569 -0.494929  1.071804    foo    cool\n2000-01-05  0.721555 -0.706771 -1.039575    NaN    cool\n2000-01-06  0.271860 -0.424972  0.567020    NaN    cool\n2000-01-07  0.276232 -1.087401 -0.673690    foo    cool\n2000-01-08  0.113648 -1.478427  0.524988    bar    cool\n\n# on-disk operations\nIn [8]: store.append(\"df\", df, data_columns=[\"B\", \"C\", \"string\", \"string2\"])\n\nIn [9]: store.select(\"df\", \"B>0 and string=='foo'\")\nOut[9]: \n A         B         C string string2\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool\n\n# this is in-memory version of this type of selection\nIn [10]: df[(df.B > 0) & (df.string == \"foo\")]\nOut[10]: \n A         B         C string string2\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool \n```", "```py\n# note that this is deprecated as of 0.14.0\n# can be replicated by: store.select_column('df','index').unique()\nstore.unique(\"df\", \"index\")\nstore.unique(\"df\", \"string\") \n```", "```py\nIn [11]: df_mixed = df.copy()\n\nIn [12]: df_mixed[\"datetime64\"] = pd.Timestamp(\"20010102\")\n\nIn [13]: df_mixed.loc[df_mixed.index[3:4], [\"A\", \"B\"]] = np.nan\n\nIn [14]: store.append(\"df_mixed\", df_mixed)\n\nIn [15]: df_mixed1 = store.select(\"df_mixed\")\n\nIn [16]: df_mixed1\nOut[16]: \n A         B  ...  string2                    datetime64\n2000-01-01  0.469112 -0.282863  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-02 -1.135632  1.212112  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-03  0.119209 -1.044236  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-04       NaN       NaN  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-05  0.721555 -0.706771  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-06  0.271860 -0.424972  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-07  0.276232 -1.087401  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-08  0.113648 -1.478427  ...     cool 1970-01-01 00:00:00.978393600\n\n[8 rows x 6 columns]\n\nIn [17]: df_mixed1.dtypes.value_counts()\nOut[17]: \nfloat64           3\nobject            2\ndatetime64[ns]    1\nName: count, dtype: int64 \n```", "```py\nIn [18]: store.select(\"df\", columns=[\"A\", \"B\"])\nOut[18]: \n A         B\n2000-01-01  0.469112 -0.282863\n2000-01-02 -1.135632  1.212112\n2000-01-03  0.119209 -1.044236\n2000-01-04 -2.104569 -0.494929\n2000-01-05  0.721555 -0.706771\n2000-01-06  0.271860 -0.424972\n2000-01-07  0.276232 -1.087401\n2000-01-08  0.113648 -1.478427 \n```", "```py\nIn [19]: index = pd.MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],\n ....:                              ['one', 'two', 'three']],\n ....:                      labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],\n ....:                              [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],\n ....:                      names=['foo', 'bar'])\n ....:\n\nIn [20]: df = pd.DataFrame(np.random.randn(10, 3), index=index,\n ....:                  columns=['A', 'B', 'C'])\n ....:\n\nIn [21]: df\nOut[21]:\n A         B         C\nfoo bar\nfoo one   -0.116619  0.295575 -1.047704\n two    1.640556  1.905836  2.772115\n three  0.088787 -1.144197 -0.633372\nbar one    0.925372 -0.006438 -0.820408\n two   -0.600874 -1.039266  0.824758\nbaz two   -0.824095 -0.337730 -0.927764\n three -0.840123  0.248505 -0.109250\nqux one    0.431977 -0.460710  0.336505\n two   -3.207595 -1.535854  0.409769\n three -0.673145 -0.741113 -0.110891\n\nIn [22]: store.append('mi', df)\n\nIn [23]: store.select('mi')\nOut[23]:\n A         B         C\nfoo bar\nfoo one   -0.116619  0.295575 -1.047704\n two    1.640556  1.905836  2.772115\n three  0.088787 -1.144197 -0.633372\nbar one    0.925372 -0.006438 -0.820408\n two   -0.600874 -1.039266  0.824758\nbaz two   -0.824095 -0.337730 -0.927764\n three -0.840123  0.248505 -0.109250\nqux one    0.431977 -0.460710  0.336505\n two   -3.207595 -1.535854  0.409769\n three -0.673145 -0.741113 -0.110891\n\n# the levels are automatically included as data columns\nIn [24]: store.select('mi', \"foo='bar'\")\nOut[24]:\n A         B         C\nfoo bar\nbar one  0.925372 -0.006438 -0.820408\n two -0.600874 -1.039266  0.824758 \n```", "```py\nIn [19]: df_mt = pd.DataFrame(\n ....:    np.random.randn(8, 6),\n ....:    index=pd.date_range(\"1/1/2000\", periods=8),\n ....:    columns=[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n ....: )\n ....: \n\nIn [20]: df_mt[\"foo\"] = \"bar\"\n\n# you can also create the tables individually\nIn [21]: store.append_to_multiple(\n ....:    {\"df1_mt\": [\"A\", \"B\"], \"df2_mt\": None}, df_mt, selector=\"df1_mt\"\n ....: )\n ....: \n\nIn [22]: store\nOut[22]: \n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n\n# individual tables were created\nIn [23]: store.select(\"df1_mt\")\nOut[23]: \n A         B\n2000-01-01  0.404705  0.577046\n2000-01-02 -1.344312  0.844885\n2000-01-03  0.357021 -0.674600\n2000-01-04  0.276662 -0.472035\n2000-01-05  0.895717  0.805244\n2000-01-06 -1.170299 -0.226169\n2000-01-07 -0.076467 -1.187678\n2000-01-08  1.024180  0.569605\n\nIn [24]: store.select(\"df2_mt\")\nOut[24]: \n C         D         E         F  foo\n2000-01-01 -1.715002 -1.039268 -0.370647 -1.157892  bar\n2000-01-02  1.075770 -0.109050  1.643563 -1.469388  bar\n2000-01-03 -1.776904 -0.968914 -1.294524  0.413738  bar\n2000-01-04 -0.013960 -0.362543 -0.006154 -0.923061  bar\n2000-01-05 -1.206412  2.565646  1.431256  1.340309  bar\n2000-01-06  0.410835  0.813850  0.132003 -0.827317  bar\n2000-01-07  1.130127 -1.436737 -1.413681  1.607920  bar\n2000-01-08  0.875906 -2.211372  0.974466 -2.006747  bar\n\n# as a multiple\nIn [25]: store.select_as_multiple(\n ....:    [\"df1_mt\", \"df2_mt\"], where=[\"A>0\", \"B>0\"], selector=\"df1_mt\"\n ....: )\n ....: \nOut[25]: \n A         B         C         D         E         F  foo\n2000-01-01  0.404705  0.577046 -1.715002 -1.039268 -0.370647 -1.157892  bar\n2000-01-05  0.895717  0.805244 -1.206412  2.565646  1.431256  1.340309  bar\n2000-01-08  1.024180  0.569605  0.875906 -2.211372  0.974466 -2.006747  bar \n```", "```py\nIn [1]: store = pd.HDFStore(\"store.h5\")\n\nIn [2]: df = pd.DataFrame(\n ...:    np.random.randn(8, 3),\n ...:    index=pd.date_range(\"1/1/2000\", periods=8),\n ...:    columns=[\"A\", \"B\", \"C\"],\n ...: )\n ...: \n\nIn [3]: df[\"string\"] = \"foo\"\n\nIn [4]: df.loc[df.index[4:6], \"string\"] = np.nan\n\nIn [5]: df.loc[df.index[7:9], \"string\"] = \"bar\"\n\nIn [6]: df[\"string2\"] = \"cool\"\n\nIn [7]: df\nOut[7]: \n A         B         C string string2\n2000-01-01  0.469112 -0.282863 -1.509059    foo    cool\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool\n2000-01-03  0.119209 -1.044236 -0.861849    foo    cool\n2000-01-04 -2.104569 -0.494929  1.071804    foo    cool\n2000-01-05  0.721555 -0.706771 -1.039575    NaN    cool\n2000-01-06  0.271860 -0.424972  0.567020    NaN    cool\n2000-01-07  0.276232 -1.087401 -0.673690    foo    cool\n2000-01-08  0.113648 -1.478427  0.524988    bar    cool\n\n# on-disk operations\nIn [8]: store.append(\"df\", df, data_columns=[\"B\", \"C\", \"string\", \"string2\"])\n\nIn [9]: store.select(\"df\", \"B>0 and string=='foo'\")\nOut[9]: \n A         B         C string string2\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool\n\n# this is in-memory version of this type of selection\nIn [10]: df[(df.B > 0) & (df.string == \"foo\")]\nOut[10]: \n A         B         C string string2\n2000-01-02 -1.135632  1.212112 -0.173215    foo    cool \n```", "```py\n# note that this is deprecated as of 0.14.0\n# can be replicated by: store.select_column('df','index').unique()\nstore.unique(\"df\", \"index\")\nstore.unique(\"df\", \"string\") \n```", "```py\nIn [11]: df_mixed = df.copy()\n\nIn [12]: df_mixed[\"datetime64\"] = pd.Timestamp(\"20010102\")\n\nIn [13]: df_mixed.loc[df_mixed.index[3:4], [\"A\", \"B\"]] = np.nan\n\nIn [14]: store.append(\"df_mixed\", df_mixed)\n\nIn [15]: df_mixed1 = store.select(\"df_mixed\")\n\nIn [16]: df_mixed1\nOut[16]: \n A         B  ...  string2                    datetime64\n2000-01-01  0.469112 -0.282863  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-02 -1.135632  1.212112  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-03  0.119209 -1.044236  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-04       NaN       NaN  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-05  0.721555 -0.706771  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-06  0.271860 -0.424972  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-07  0.276232 -1.087401  ...     cool 1970-01-01 00:00:00.978393600\n2000-01-08  0.113648 -1.478427  ...     cool 1970-01-01 00:00:00.978393600\n\n[8 rows x 6 columns]\n\nIn [17]: df_mixed1.dtypes.value_counts()\nOut[17]: \nfloat64           3\nobject            2\ndatetime64[ns]    1\nName: count, dtype: int64 \n```", "```py\nIn [18]: store.select(\"df\", columns=[\"A\", \"B\"])\nOut[18]: \n A         B\n2000-01-01  0.469112 -0.282863\n2000-01-02 -1.135632  1.212112\n2000-01-03  0.119209 -1.044236\n2000-01-04 -2.104569 -0.494929\n2000-01-05  0.721555 -0.706771\n2000-01-06  0.271860 -0.424972\n2000-01-07  0.276232 -1.087401\n2000-01-08  0.113648 -1.478427 \n```", "```py\nIn [19]: index = pd.MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],\n ....:                              ['one', 'two', 'three']],\n ....:                      labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],\n ....:                              [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],\n ....:                      names=['foo', 'bar'])\n ....:\n\nIn [20]: df = pd.DataFrame(np.random.randn(10, 3), index=index,\n ....:                  columns=['A', 'B', 'C'])\n ....:\n\nIn [21]: df\nOut[21]:\n A         B         C\nfoo bar\nfoo one   -0.116619  0.295575 -1.047704\n two    1.640556  1.905836  2.772115\n three  0.088787 -1.144197 -0.633372\nbar one    0.925372 -0.006438 -0.820408\n two   -0.600874 -1.039266  0.824758\nbaz two   -0.824095 -0.337730 -0.927764\n three -0.840123  0.248505 -0.109250\nqux one    0.431977 -0.460710  0.336505\n two   -3.207595 -1.535854  0.409769\n three -0.673145 -0.741113 -0.110891\n\nIn [22]: store.append('mi', df)\n\nIn [23]: store.select('mi')\nOut[23]:\n A         B         C\nfoo bar\nfoo one   -0.116619  0.295575 -1.047704\n two    1.640556  1.905836  2.772115\n three  0.088787 -1.144197 -0.633372\nbar one    0.925372 -0.006438 -0.820408\n two   -0.600874 -1.039266  0.824758\nbaz two   -0.824095 -0.337730 -0.927764\n three -0.840123  0.248505 -0.109250\nqux one    0.431977 -0.460710  0.336505\n two   -3.207595 -1.535854  0.409769\n three -0.673145 -0.741113 -0.110891\n\n# the levels are automatically included as data columns\nIn [24]: store.select('mi', \"foo='bar'\")\nOut[24]:\n A         B         C\nfoo bar\nbar one  0.925372 -0.006438 -0.820408\n two -0.600874 -1.039266  0.824758 \n```", "```py\nIn [19]: df_mt = pd.DataFrame(\n ....:    np.random.randn(8, 6),\n ....:    index=pd.date_range(\"1/1/2000\", periods=8),\n ....:    columns=[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n ....: )\n ....: \n\nIn [20]: df_mt[\"foo\"] = \"bar\"\n\n# you can also create the tables individually\nIn [21]: store.append_to_multiple(\n ....:    {\"df1_mt\": [\"A\", \"B\"], \"df2_mt\": None}, df_mt, selector=\"df1_mt\"\n ....: )\n ....: \n\nIn [22]: store\nOut[22]: \n<class 'pandas.io.pytables.HDFStore'>\nFile path: store.h5\n\n# individual tables were created\nIn [23]: store.select(\"df1_mt\")\nOut[23]: \n A         B\n2000-01-01  0.404705  0.577046\n2000-01-02 -1.344312  0.844885\n2000-01-03  0.357021 -0.674600\n2000-01-04  0.276662 -0.472035\n2000-01-05  0.895717  0.805244\n2000-01-06 -1.170299 -0.226169\n2000-01-07 -0.076467 -1.187678\n2000-01-08  1.024180  0.569605\n\nIn [24]: store.select(\"df2_mt\")\nOut[24]: \n C         D         E         F  foo\n2000-01-01 -1.715002 -1.039268 -0.370647 -1.157892  bar\n2000-01-02  1.075770 -0.109050  1.643563 -1.469388  bar\n2000-01-03 -1.776904 -0.968914 -1.294524  0.413738  bar\n2000-01-04 -0.013960 -0.362543 -0.006154 -0.923061  bar\n2000-01-05 -1.206412  2.565646  1.431256  1.340309  bar\n2000-01-06  0.410835  0.813850  0.132003 -0.827317  bar\n2000-01-07  1.130127 -1.436737 -1.413681  1.607920  bar\n2000-01-08  0.875906 -2.211372  0.974466 -2.006747  bar\n\n# as a multiple\nIn [25]: store.select_as_multiple(\n ....:    [\"df1_mt\", \"df2_mt\"], where=[\"A>0\", \"B>0\"], selector=\"df1_mt\"\n ....: )\n ....: \nOut[25]: \n A         B         C         D         E         F  foo\n2000-01-01  0.404705  0.577046 -1.715002 -1.039268 -0.370647 -1.157892  bar\n2000-01-05  0.895717  0.805244 -1.206412  2.565646  1.431256  1.340309  bar\n2000-01-08  1.024180  0.569605  0.875906 -2.211372  0.974466 -2.006747  bar \n```"]