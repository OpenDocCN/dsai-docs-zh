["```py\nclass sympy.geometry.polygon.Polygon(*args, n=0, **kwargs)\n```", "```py\n>>> from sympy import Polygon, pi\n>>> p1, p2, p3, p4, p5 = [(0, 0), (1, 0), (5, 1), (0, 1), (3, 0)]\n>>> Polygon(p1, p2, p3, p4)\nPolygon(Point2D(0, 0), Point2D(1, 0), Point2D(5, 1), Point2D(0, 1))\n>>> Polygon(p1, p2)\nSegment2D(Point2D(0, 0), Point2D(1, 0))\n>>> Polygon(p1, p2, p5)\nSegment2D(Point2D(0, 0), Point2D(3, 0)) \n```", "```py\n>>> Polygon((0, 2), (2, 2), (0, 0), (2, 0)).area\n0 \n```", "```py\n>>> p = Polygon((0,0), 1, n=3)\n>>> p\nRegularPolygon(Point2D(0, 0), 1, 3, 0)\n>>> p.vertices[0]\nPoint2D(1, 0)\n>>> p.args[0]\nPoint2D(0, 0)\n>>> p.spin(pi/2)\n>>> p.vertices[0]\nPoint2D(0, 1) \n```", "```py\nproperty angles\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.angles[p1]\npi/2\n>>> poly.angles[p2]\nacos(-4*sqrt(17)/17) \n```", "```py\narbitrary_point(parameter='t')\n```", "```py\n>>> from sympy import Polygon, Symbol\n>>> t = Symbol('t', real=True)\n>>> tri = Polygon((0, 0), (1, 0), (1, 1))\n>>> p = tri.arbitrary_point('t')\n>>> perimeter = tri.perimeter\n>>> s1, s2 = [s.length for s in tri.sides[:2]]\n>>> p.subs(t, (s1 + s2/2)/perimeter)\nPoint2D(1, 1/2) \n```", "```py\nproperty area\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.area\n3 \n```", "```py\n>>> Z = Polygon((0, 1), (1, 1), (0, 0), (1, 0))\n>>> Z.area\n0 \n```", "```py\n>>> M = Polygon((0, 0), (0, 1), (2, 0), (3, 1), (3, 0))\n>>> M.area\n-3/2 \n```", "```py\nbisectors(prec=None)\n```", "```py\n>>> from sympy import Polygon, Point\n>>> p = Polygon(Point(0, 0), Point(2, 0), Point(1, 1), Point(0, 3))\n>>> p.bisectors(2)\n{Point2D(0, 0): Ray2D(Point2D(0, 0), Point2D(0.71, 0.71)),\n Point2D(0, 3): Ray2D(Point2D(0, 3), Point2D(0.23, 2.0)),\n Point2D(1, 1): Ray2D(Point2D(1, 1), Point2D(0.19, 0.42)),\n Point2D(2, 0): Ray2D(Point2D(2, 0), Point2D(1.1, 0.38))} \n```", "```py\nproperty bounds\n```", "```py\nproperty centroid\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.centroid\nPoint2D(31/18, 11/18) \n```", "```py\ncut_section(line)\n```", "```py\n>>> from sympy import Polygon, Line\n>>> a, b = 20, 10\n>>> p1, p2, p3, p4 = [(0, b), (0, 0), (a, 0), (a, b)]\n>>> rectangle = Polygon(p1, p2, p3, p4)\n>>> t = rectangle.cut_section(Line((0, 5), slope=0))\n>>> t\n(Polygon(Point2D(0, 10), Point2D(0, 5), Point2D(20, 5), Point2D(20, 10)),\nPolygon(Point2D(0, 5), Point2D(0, 0), Point2D(20, 0), Point2D(20, 5)))\n>>> upper_segment, lower_segment = t\n>>> upper_segment.area\n100\n>>> upper_segment.centroid\nPoint2D(10, 15/2)\n>>> lower_segment.centroid\nPoint2D(10, 5/2) \n```", "```py\ndistance(o)\n```", "```py\n>>> from sympy import Point, Polygon, RegularPolygon\n>>> p1, p2 = map(Point, [(0, 0), (7, 5)])\n>>> poly = Polygon(*RegularPolygon(p1, 1, 3).vertices)\n>>> poly.distance(p2)\nsqrt(61) \n```", "```py\nencloses_point(p)\n```", "```py\n>>> from sympy import Polygon, Point\n>>> p = Polygon((0, 0), (4, 0), (4, 4))\n>>> p.encloses_point(Point(2, 1))\nTrue\n>>> p.encloses_point(Point(2, 2))\nFalse\n>>> p.encloses_point(Point(5, 5))\nFalse \n```", "```py\nfirst_moment_of_area(point=None)\n```", "```py\n>>> from sympy import Point, Polygon\n>>> a, b = 50, 10\n>>> p1, p2, p3, p4 = [(0, b), (0, 0), (a, 0), (a, b)]\n>>> p = Polygon(p1, p2, p3, p4)\n>>> p.first_moment_of_area()\n(625, 3125)\n>>> p.first_moment_of_area(point=Point(30, 7))\n(525, 3000) \n```", "```py\nintersection(o)\n```", "```py\n>>> from sympy import Point, Polygon, Line\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly1 = Polygon(p1, p2, p3, p4)\n>>> p5, p6, p7 = map(Point, [(3, 2), (1, -1), (0, 2)])\n>>> poly2 = Polygon(p5, p6, p7)\n>>> poly1.intersection(poly2)\n[Point2D(1/3, 1), Point2D(2/3, 0), Point2D(9/5, 1/5), Point2D(7/3, 1)]\n>>> poly1.intersection(Line(p1, p2))\n[Segment2D(Point2D(0, 0), Point2D(1, 0))]\n>>> poly1.intersection(p1)\n[Point2D(0, 0)] \n```", "```py\nis_convex()\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.is_convex()\nTrue \n```", "```py\nproperty perimeter\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.perimeter\nsqrt(17) + 7 \n```", "```py\nplot_interval(parameter='t')\n```", "```py\n>>> from sympy import Polygon\n>>> p = Polygon((0, 0), (1, 0), (1, 1))\n>>> p.plot_interval()\n[t, 0, 1] \n```", "```py\npolar_second_moment_of_area()\n```", "```py\n>>> from sympy import Polygon, symbols\n>>> a, b = symbols('a, b')\n>>> rectangle = Polygon((0, 0), (a, 0), (a, b), (0, b))\n>>> rectangle.polar_second_moment_of_area()\na**3*b/12 + a*b**3/12 \n```", "```py\nsecond_moment_of_area(point=None)\n```", "```py\n>>> from sympy import Polygon, symbols\n>>> a, b = symbols('a, b')\n>>> p1, p2, p3, p4, p5 = [(0, 0), (a, 0), (a, b), (0, b), (a/3, b/3)]\n>>> rectangle = Polygon(p1, p2, p3, p4)\n>>> rectangle.second_moment_of_area()\n(a*b**3/12, a**3*b/12, 0)\n>>> rectangle.second_moment_of_area(p5)\n(a*b**3/9, a**3*b/9, a**2*b**2/36) \n```", "```py\nsection_modulus(point=None)\n```", "```py\n>>> from sympy import symbols, Polygon, Point\n>>> a, b = symbols('a, b', positive=True)\n>>> rectangle = Polygon((0, 0), (a, 0), (a, b), (0, b))\n>>> rectangle.section_modulus()\n(a*b**2/6, a**2*b/6)\n>>> rectangle.section_modulus(Point(a/4, b/4))\n(-a*b**2/3, -a**2*b/3) \n```", "```py\nproperty sides\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.sides\n[Segment2D(Point2D(0, 0), Point2D(1, 0)),\nSegment2D(Point2D(1, 0), Point2D(5, 1)),\nSegment2D(Point2D(5, 1), Point2D(0, 1)), Segment2D(Point2D(0, 1), Point2D(0, 0))] \n```", "```py\nproperty vertices\n```", "```py\n>>> from sympy import Point, Polygon\n>>> p1, p2, p3, p4 = map(Point, [(0, 0), (1, 0), (5, 1), (0, 1)])\n>>> poly = Polygon(p1, p2, p3, p4)\n>>> poly.vertices\n[Point2D(0, 0), Point2D(1, 0), Point2D(5, 1), Point2D(0, 1)]\n>>> poly.vertices[0]\nPoint2D(0, 0) \n```", "```py\nclass sympy.geometry.polygon.RegularPolygon(c, r, n, rot=0, **kwargs)\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> r = RegularPolygon(Point(0, 0), 5, 3)\n>>> r\nRegularPolygon(Point2D(0, 0), 5, 3, 0)\n>>> r.vertices[0]\nPoint2D(5, 0) \n```", "```py\nproperty angles\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> r = RegularPolygon(Point(0, 0), 5, 3)\n>>> r.angles\n{Point2D(-5/2, -5*sqrt(3)/2): pi/3,\n Point2D(-5/2, 5*sqrt(3)/2): pi/3,\n Point2D(5, 0): pi/3} \n```", "```py\nproperty apothem\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy import RegularPolygon, Point\n>>> radius = Symbol('r')\n>>> rp = RegularPolygon(Point(0, 0), radius, 4)\n>>> rp.apothem\nsqrt(2)*r/2 \n```", "```py\nproperty area\n```", "```py\n>>> from sympy import RegularPolygon\n>>> square = RegularPolygon((0, 0), 1, 4)\n>>> square.area\n2\n>>> _ == square.length**2\nTrue \n```", "```py\nproperty args\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> r = RegularPolygon(Point(0, 0), 5, 3)\n>>> r.args\n(Point2D(0, 0), 5, 3, 0) \n```", "```py\nproperty center\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 5, 4)\n>>> rp.center\nPoint2D(0, 0) \n```", "```py\nproperty centroid\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 5, 4)\n>>> rp.center\nPoint2D(0, 0) \n```", "```py\nproperty circumcenter\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 5, 4)\n>>> rp.circumcenter\nPoint2D(0, 0) \n```", "```py\nproperty circumcircle\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 4, 8)\n>>> rp.circumcircle\nCircle(Point2D(0, 0), 4) \n```", "```py\nproperty circumradius\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy import RegularPolygon, Point\n>>> radius = Symbol('r')\n>>> rp = RegularPolygon(Point(0, 0), radius, 4)\n>>> rp.circumradius\nr \n```", "```py\nencloses_point(p)\n```", "```py\n>>> from sympy import RegularPolygon, S, Point, Symbol\n>>> p = RegularPolygon((0, 0), 3, 4)\n>>> p.encloses_point(Point(0, 0))\nTrue\n>>> r, R = p.inradius, p.circumradius\n>>> p.encloses_point(Point((r + R)/2, 0))\nTrue\n>>> p.encloses_point(Point(R/2, R/2 + (R - r)/10))\nFalse\n>>> t = Symbol('t', real=True)\n>>> p.encloses_point(p.arbitrary_point().subs(t, S.Half))\nFalse\n>>> p.encloses_point(Point(5, 5))\nFalse \n```", "```py\nproperty exterior_angle\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 4, 8)\n>>> rp.exterior_angle\npi/4 \n```", "```py\nproperty incircle\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 4, 7)\n>>> rp.incircle\nCircle(Point2D(0, 0), 4*cos(pi/7)) \n```", "```py\nproperty inradius\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy import RegularPolygon, Point\n>>> radius = Symbol('r')\n>>> rp = RegularPolygon(Point(0, 0), radius, 4)\n>>> rp.inradius\nsqrt(2)*r/2 \n```", "```py\nproperty interior_angle\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 4, 8)\n>>> rp.interior_angle\n3*pi/4 \n```", "```py\nproperty length\n```", "```py\n>>> from sympy import RegularPolygon\n>>> from sympy import sqrt\n>>> s = square_in_unit_circle = RegularPolygon((0, 0), 1, 4)\n>>> s.length\nsqrt(2)\n>>> sqrt((_/2)**2 + s.apothem**2) == s.radius\nTrue \n```", "```py\nproperty radius\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy import RegularPolygon, Point\n>>> radius = Symbol('r')\n>>> rp = RegularPolygon(Point(0, 0), radius, 4)\n>>> rp.radius\nr \n```", "```py\nreflect(line)\n```", "```py\n>>> from sympy import RegularPolygon, Line \n```", "```py\n>>> RegularPolygon((0, 0), 1, 4).reflect(Line((0, 1), slope=-2))\nRegularPolygon(Point2D(4/5, 2/5), -1, 4, atan(4/3)) \n```", "```py\nrotate(angle, pt=None)\n```", "```py\n>>> from sympy import Point, RegularPolygon, pi\n>>> t = RegularPolygon(Point(1, 0), 1, 3)\n>>> t.vertices[0] # vertex on x-axis\nPoint2D(2, 0)\n>>> t.rotate(pi/2).vertices[0] # vertex on y axis now\nPoint2D(0, 2) \n```", "```py\nproperty rotation\n```", "```py\n>>> from sympy import pi\n>>> from sympy.abc import a\n>>> from sympy import RegularPolygon, Point\n>>> RegularPolygon(Point(0, 0), 3, 4, pi/4).rotation\npi/4 \n```", "```py\n>>> RegularPolygon(Point(0, 0), 3, 4, a).rotation\na\n>>> RegularPolygon(Point(0, 0), 3, 4, pi).rotation\n0 \n```", "```py\nscale(x=1, y=1, pt=None)\n```", "```py\n>>> from sympy import RegularPolygon \n```", "```py\n>>> RegularPolygon((0, 0), 1, 4).scale(2, 2)\nRegularPolygon(Point2D(0, 0), 2, 4, 0) \n```", "```py\n>>> RegularPolygon((0, 0), 1, 4).scale(2, 1)\nPolygon(Point2D(2, 0), Point2D(0, 1), Point2D(-2, 0), Point2D(0, -1)) \n```", "```py\nspin(angle)\n```", "```py\n>>> from sympy import Polygon, Point, pi\n>>> r = Polygon(Point(0,0), 1, n=3)\n>>> r.vertices[0]\nPoint2D(1, 0)\n>>> r.spin(pi/6)\n>>> r.vertices[0]\nPoint2D(sqrt(3)/2, 1/2) \n```", "```py\nproperty vertices\n```", "```py\n>>> from sympy import RegularPolygon, Point\n>>> rp = RegularPolygon(Point(0, 0), 5, 4)\n>>> rp.vertices\n[Point2D(5, 0), Point2D(0, 5), Point2D(-5, 0), Point2D(0, -5)] \n```", "```py\nclass sympy.geometry.polygon.Triangle(*args, **kwargs)\n```", "```py\n>>> from sympy import Triangle, Point\n>>> Triangle(Point(0, 0), Point(4, 0), Point(4, 3))\nTriangle(Point2D(0, 0), Point2D(4, 0), Point2D(4, 3)) \n```", "```py\n>>> Triangle(sss=(3, 4, 5))\nTriangle(Point2D(0, 0), Point2D(3, 0), Point2D(3, 4))\n>>> Triangle(asa=(30, 1, 30))\nTriangle(Point2D(0, 0), Point2D(1, 0), Point2D(1/2, sqrt(3)/6))\n>>> Triangle(sas=(1, 45, 2))\nTriangle(Point2D(0, 0), Point2D(2, 0), Point2D(sqrt(2)/2, sqrt(2)/2)) \n```", "```py\nproperty altitudes\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.altitudes[p1]\nSegment2D(Point2D(0, 0), Point2D(1/2, 1/2)) \n```", "```py\nbisectors()\n```", "```py\n>>> from sympy import Point, Triangle, Segment\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> from sympy import sqrt\n>>> t.bisectors()[p2] == Segment(Point(1, 0), Point(0, sqrt(2) - 1))\nTrue \n```", "```py\nproperty circumcenter\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.circumcenter\nPoint2D(1/2, 1/2) \n```", "```py\nproperty circumcircle\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.circumcircle\nCircle(Point2D(1/2, 1/2), sqrt(2)/2) \n```", "```py\nproperty circumradius\n```", "```py\n>>> from sympy import Symbol\n>>> from sympy import Point, Triangle\n>>> a = Symbol('a')\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, a)\n>>> t = Triangle(p1, p2, p3)\n>>> t.circumradius\nsqrt(a**2/4 + 1/4) \n```", "```py\nproperty eulerline\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.eulerline\nLine2D(Point2D(0, 0), Point2D(1/2, 1/2)) \n```", "```py\nproperty excenters\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(6, 0), Point(0, 2)\n>>> t = Triangle(p1, p2, p3)\n>>> t.excenters[t.sides[0]]\nPoint2D(12*sqrt(10), 2/3 + sqrt(10)/3) \n```", "```py\nproperty exradii\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(6, 0), Point(0, 2)\n>>> t = Triangle(p1, p2, p3)\n>>> t.exradii[t.sides[2]]\n-2 + sqrt(10) \n```", "```py\nproperty incenter\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.incenter\nPoint2D(1 - sqrt(2)/2, 1 - sqrt(2)/2) \n```", "```py\nproperty incircle\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(2, 0), Point(0, 2)\n>>> t = Triangle(p1, p2, p3)\n>>> t.incircle\nCircle(Point2D(2 - sqrt(2), 2 - sqrt(2)), 2 - sqrt(2)) \n```", "```py\nproperty inradius\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(4, 0), Point(0, 3)\n>>> t = Triangle(p1, p2, p3)\n>>> t.inradius\n1 \n```", "```py\nis_equilateral()\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(4, 3))\n>>> t1.is_equilateral()\nFalse \n```", "```py\n>>> from sympy import sqrt\n>>> t2 = Triangle(Point(0, 0), Point(10, 0), Point(5, 5*sqrt(3)))\n>>> t2.is_equilateral()\nTrue \n```", "```py\nis_isosceles()\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(2, 4))\n>>> t1.is_isosceles()\nTrue \n```", "```py\nis_right()\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(4, 3))\n>>> t1.is_right()\nTrue \n```", "```py\nis_scalene()\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(1, 4))\n>>> t1.is_scalene()\nTrue \n```", "```py\nis_similar(t2)\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t1 = Triangle(Point(0, 0), Point(4, 0), Point(4, 3))\n>>> t2 = Triangle(Point(0, 0), Point(-4, 0), Point(-4, -3))\n>>> t1.is_similar(t2)\nTrue \n```", "```py\n>>> t2 = Triangle(Point(0, 0), Point(-4, 0), Point(-4, -4))\n>>> t1.is_similar(t2)\nFalse \n```", "```py\nproperty medial\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.medial\nTriangle(Point2D(1/2, 0), Point2D(1/2, 1/2), Point2D(0, 1/2)) \n```", "```py\nproperty medians\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.medians[p1]\nSegment2D(Point2D(0, 0), Point2D(1/2, 1/2)) \n```", "```py\nproperty nine_point_circle\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.nine_point_circle\nCircle(Point2D(1/4, 1/4), sqrt(2)/4) \n```", "```py\nproperty orthocenter\n```", "```py\n>>> from sympy import Point, Triangle\n>>> p1, p2, p3 = Point(0, 0), Point(1, 0), Point(0, 1)\n>>> t = Triangle(p1, p2, p3)\n>>> t.orthocenter\nPoint2D(0, 0) \n```", "```py\nproperty vertices\n```", "```py\n>>> from sympy import Triangle, Point\n>>> t = Triangle(Point(0, 0), Point(4, 0), Point(4, 3))\n>>> t.vertices\n(Point2D(0, 0), Point2D(4, 0), Point2D(4, 3)) \n```"]