- en: numpy.recarray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html](https://numpy.org/doc/1.26/reference/generated/numpy.recarray.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct an ndarray that allows field access using attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays may have a data-types containing fields, analogous to columns in a spread
    sheet. An example is `[(x, int), (y, float)]`, where each entry in the array is
    a pair of `(int, float)`. Normally, these attributes are accessed using dictionary
    lookups such as `arr['x']` and `arr['y']`. Record arrays allow the fields to be
    accessed as members of the array, using `arr.x` and `arr.y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**shape**tuple'
  prefs: []
  type: TYPE_NORMAL
- en: Shape of output array.
  prefs: []
  type: TYPE_NORMAL
- en: '**dtype**data-type, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The desired data-type. By default, the data-type is determined from *formats*,
    *names*, *titles*, *aligned* and *byteorder*.
  prefs: []
  type: TYPE_NORMAL
- en: '**formats**list of data-types, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A list containing the data-types for the different columns, e.g. `['i4', 'f8',
    'i4']`. *formats* does *not* support the new convention of using types directly,
    i.e. `(int, float, int)`. Note that *formats* must be a list, not a tuple. Given
    that *formats* is somewhat limited, we recommend specifying [`dtype`](numpy.dtype.html#numpy.dtype
    "numpy.dtype") instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**names**tuple of str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The name of each column, e.g. `('x', 'y', 'z')`.
  prefs: []
  type: TYPE_NORMAL
- en: '**buf**buffer, optional'
  prefs: []
  type: TYPE_NORMAL
- en: By default, a new array is created of the given shape and data-type. If *buf*
    is specified and is an object exposing the buffer interface, the array will use
    the memory from the existing buffer. In this case, the *offset* and [`strides`](numpy.recarray.strides.html#numpy.recarray.strides
    "numpy.recarray.strides") keywords are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rec**recarray'
  prefs: []
  type: TYPE_NORMAL
- en: Empty array of the given shape and type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**titles**tuple of str, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Aliases for column names. For example, if *names* were `('x', 'y', 'z')` and
    *titles* is `('x_coordinate', 'y_coordinate', 'z_coordinate')`, then `arr['x']`
    is equivalent to both `arr.x` and `arr.x_coordinate`.
  prefs: []
  type: TYPE_NORMAL
- en: '**byteorder**{‘<’, ‘>’, ‘=’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Byte-order for all fields.
  prefs: []
  type: TYPE_NORMAL
- en: '**aligned**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Align the fields in memory as the C-compiler would.
  prefs: []
  type: TYPE_NORMAL
- en: '**strides**tuple of ints, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Buffer (*buf*) is interpreted according to these strides (strides define how
    many bytes each array element, row, column, etc. occupy in memory).
  prefs: []
  type: TYPE_NORMAL
- en: '**offset**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Start reading buffer (*buf*) from this offset onwards.
  prefs: []
  type: TYPE_NORMAL
- en: '**order**{‘C’, ‘F’}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Row-major (C-style) or column-major (Fortran-style) order.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`core.records.fromrecords`](numpy.core.records.fromrecords.html#numpy.core.records.fromrecords
    "numpy.core.records.fromrecords")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a record array from data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`record`](numpy.record.html#numpy.record "numpy.record")'
  prefs: []
  type: TYPE_NORMAL
- en: fundamental data-type for [`recarray`](#numpy.recarray "numpy.recarray").
  prefs: []
  type: TYPE_NORMAL
- en: '[`format_parser`](numpy.format_parser.html#numpy.format_parser "numpy.format_parser")'
  prefs: []
  type: TYPE_NORMAL
- en: determine a data-type from formats, names, titles.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'This constructor can be compared to `empty`: it creates a new record array
    but does not fill it with data. To create a record array from data, use one of
    the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a standard ndarray and convert it to a record array, using `arr.view(np.recarray)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the *buf* keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use *np.rec.fromrecords*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an array with two fields, `x` and `y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'View the array as a record array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new, empty record array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`T`](numpy.recarray.T.html#numpy.recarray.T "numpy.recarray.T")'
  prefs: []
  type: TYPE_NORMAL
- en: View of the transposed array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`base`](numpy.recarray.base.html#numpy.recarray.base "numpy.recarray.base")'
  prefs: []
  type: TYPE_NORMAL
- en: Base object if memory is from some other object.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ctypes`](numpy.recarray.ctypes.html#numpy.recarray.ctypes "numpy.recarray.ctypes")'
  prefs: []
  type: TYPE_NORMAL
- en: An object to simplify the interaction of the array with the ctypes module.
  prefs: []
  type: TYPE_NORMAL
- en: '[`data`](numpy.recarray.data.html#numpy.recarray.data "numpy.recarray.data")'
  prefs: []
  type: TYPE_NORMAL
- en: Python buffer object pointing to the start of the array’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '[`dtype`](numpy.dtype.html#numpy.dtype "numpy.dtype")'
  prefs: []
  type: TYPE_NORMAL
- en: Data-type of the array’s elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flags`](numpy.recarray.flags.html#numpy.recarray.flags "numpy.recarray.flags")'
  prefs: []
  type: TYPE_NORMAL
- en: Information about the memory layout of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`flat`](numpy.recarray.flat.html#numpy.recarray.flat "numpy.recarray.flat")'
  prefs: []
  type: TYPE_NORMAL
- en: A 1-D iterator over the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`imag`](numpy.imag.html#numpy.imag "numpy.imag")'
  prefs: []
  type: TYPE_NORMAL
- en: The imaginary part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`itemsize`](numpy.recarray.itemsize.html#numpy.recarray.itemsize "numpy.recarray.itemsize")'
  prefs: []
  type: TYPE_NORMAL
- en: Length of one array element in bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[`nbytes`](numpy.recarray.nbytes.html#numpy.recarray.nbytes "numpy.recarray.nbytes")'
  prefs: []
  type: TYPE_NORMAL
- en: Total bytes consumed by the elements of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ndim`](numpy.recarray.ndim.html#numpy.recarray.ndim "numpy.recarray.ndim")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`real`](numpy.real.html#numpy.real "numpy.real")'
  prefs: []
  type: TYPE_NORMAL
- en: The real part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`shape`](numpy.shape.html#numpy.shape "numpy.shape")'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[`size`](numpy.recarray.size.html#numpy.recarray.size "numpy.recarray.size")'
  prefs: []
  type: TYPE_NORMAL
- en: Number of elements in the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[`strides`](numpy.recarray.strides.html#numpy.recarray.strides "numpy.recarray.strides")'
  prefs: []
  type: TYPE_NORMAL
- en: Tuple of bytes to step in each dimension when traversing an array.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`all`](numpy.recarray.all.html#numpy.recarray.all "numpy.recarray.all")([axis, out, keepdims, where])
    | Returns True if all elements evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`any`](numpy.recarray.any.html#numpy.recarray.any "numpy.recarray.any")([axis, out, keepdims, where])
    | Returns True if any of the elements of *a* evaluate to True. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmax`](numpy.recarray.argmax.html#numpy.recarray.argmax "numpy.recarray.argmax")([axis, out, keepdims])
    | Return indices of the maximum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argmin`](numpy.recarray.argmin.html#numpy.recarray.argmin "numpy.recarray.argmin")([axis, out, keepdims])
    | Return indices of the minimum values along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argpartition`](numpy.recarray.argpartition.html#numpy.recarray.argpartition
    "numpy.recarray.argpartition")(kth[, axis, kind, order]) | Returns the indices
    that would partition this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`argsort`](numpy.recarray.argsort.html#numpy.recarray.argsort "numpy.recarray.argsort")([axis, kind, order])
    | Returns the indices that would sort this array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`astype`](numpy.recarray.astype.html#numpy.recarray.astype "numpy.recarray.astype")(dtype[, order, casting, subok, copy])
    | Copy of the array, cast to a specified type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`byteswap`](numpy.recarray.byteswap.html#numpy.recarray.byteswap "numpy.recarray.byteswap")([inplace])
    | Swap the bytes of the array elements |'
  prefs: []
  type: TYPE_TB
- en: '| [`choose`](numpy.recarray.choose.html#numpy.recarray.choose "numpy.recarray.choose")(choices[, out, mode])
    | Use an index array to construct a new array from a set of choices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`clip`](numpy.recarray.clip.html#numpy.recarray.clip "numpy.recarray.clip")([min, max, out])
    | Return an array whose values are limited to `[min, max]`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`compress`](numpy.recarray.compress.html#numpy.recarray.compress "numpy.recarray.compress")(condition[, axis, out])
    | Return selected slices of this array along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conj`](numpy.recarray.conj.html#numpy.recarray.conj "numpy.recarray.conj")()
    | Complex-conjugate all elements. |'
  prefs: []
  type: TYPE_TB
- en: '| [`conjugate`](numpy.recarray.conjugate.html#numpy.recarray.conjugate "numpy.recarray.conjugate")()
    | Return the complex conjugate, element-wise. |'
  prefs: []
  type: TYPE_TB
- en: '| [`copy`](numpy.recarray.copy.html#numpy.recarray.copy "numpy.recarray.copy")([order])
    | Return a copy of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumprod`](numpy.recarray.cumprod.html#numpy.recarray.cumprod "numpy.recarray.cumprod")([axis, dtype, out])
    | Return the cumulative product of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`cumsum`](numpy.recarray.cumsum.html#numpy.recarray.cumsum "numpy.recarray.cumsum")([axis, dtype, out])
    | Return the cumulative sum of the elements along the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`diagonal`](numpy.recarray.diagonal.html#numpy.recarray.diagonal "numpy.recarray.diagonal")([offset, axis1, axis2])
    | Return specified diagonals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dump`](numpy.recarray.dump.html#numpy.recarray.dump "numpy.recarray.dump")(file)
    | Dump a pickle of the array to the specified file. |'
  prefs: []
  type: TYPE_TB
- en: '| [`dumps`](numpy.recarray.dumps.html#numpy.recarray.dumps "numpy.recarray.dumps")()
    | Returns the pickle of the array as a string. |'
  prefs: []
  type: TYPE_TB
- en: '| [`fill`](numpy.recarray.fill.html#numpy.recarray.fill "numpy.recarray.fill")(value)
    | Fill the array with a scalar value. |'
  prefs: []
  type: TYPE_TB
- en: '| [`flatten`](numpy.recarray.flatten.html#numpy.recarray.flatten "numpy.recarray.flatten")([order])
    | Return a copy of the array collapsed into one dimension. |'
  prefs: []
  type: TYPE_TB
- en: '| [`getfield`](numpy.recarray.getfield.html#numpy.recarray.getfield "numpy.recarray.getfield")(dtype[, offset])
    | Returns a field of the given array as a certain type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`item`](numpy.recarray.item.html#numpy.recarray.item "numpy.recarray.item")(*args)
    | Copy an element of an array to a standard Python scalar and return it. |'
  prefs: []
  type: TYPE_TB
- en: '| [`itemset`](numpy.recarray.itemset.html#numpy.recarray.itemset "numpy.recarray.itemset")(*args)
    | Insert scalar into an array (scalar is cast to array''s dtype, if possible)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`max`](numpy.recarray.max.html#numpy.recarray.max "numpy.recarray.max")([axis, out, keepdims, initial, where])
    | Return the maximum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`mean`](numpy.recarray.mean.html#numpy.recarray.mean "numpy.recarray.mean")([axis, dtype, out, keepdims, where])
    | Returns the average of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`min`](numpy.recarray.min.html#numpy.recarray.min "numpy.recarray.min")([axis, out, keepdims, initial, where])
    | Return the minimum along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`newbyteorder`](numpy.recarray.newbyteorder.html#numpy.recarray.newbyteorder
    "numpy.recarray.newbyteorder")([new_order]) | Return the array with the same data
    viewed with a different byte order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`nonzero`](numpy.recarray.nonzero.html#numpy.recarray.nonzero "numpy.recarray.nonzero")()
    | Return the indices of the elements that are non-zero. |'
  prefs: []
  type: TYPE_TB
- en: '| [`partition`](numpy.recarray.partition.html#numpy.recarray.partition "numpy.recarray.partition")(kth[, axis, kind, order])
    | Rearranges the elements in the array in such a way that the value of the element
    in kth position is in the position it would be in a sorted array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`prod`](numpy.recarray.prod.html#numpy.recarray.prod "numpy.recarray.prod")([axis, dtype, out, keepdims, initial, ...])
    | Return the product of the array elements over the given axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`ptp`](numpy.recarray.ptp.html#numpy.recarray.ptp "numpy.recarray.ptp")([axis, out, keepdims])
    | Peak to peak (maximum - minimum) value along a given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`put`](numpy.recarray.put.html#numpy.recarray.put "numpy.recarray.put")(indices, values[, mode])
    | Set `a.flat[n] = values[n]` for all *n* in indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`ravel`](numpy.recarray.ravel.html#numpy.recarray.ravel "numpy.recarray.ravel")([order])
    | Return a flattened array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`repeat`](numpy.recarray.repeat.html#numpy.recarray.repeat "numpy.recarray.repeat")(repeats[, axis])
    | Repeat elements of an array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`reshape`](numpy.recarray.reshape.html#numpy.recarray.reshape "numpy.recarray.reshape")(shape[, order])
    | Returns an array containing the same data with a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| [`resize`](numpy.recarray.resize.html#numpy.recarray.resize "numpy.recarray.resize")(new_shape[, refcheck])
    | Change shape and size of array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`round`](numpy.recarray.round.html#numpy.recarray.round "numpy.recarray.round")([decimals, out])
    | Return *a* with each element rounded to the given number of decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| [`searchsorted`](numpy.recarray.searchsorted.html#numpy.recarray.searchsorted
    "numpy.recarray.searchsorted")(v[, side, sorter]) | Find indices where elements
    of v should be inserted in a to maintain order. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setfield`](numpy.recarray.setfield.html#numpy.recarray.setfield "numpy.recarray.setfield")(val, dtype[, offset])
    | Put a value into a specified place in a field defined by a data-type. |'
  prefs: []
  type: TYPE_TB
- en: '| [`setflags`](numpy.recarray.setflags.html#numpy.recarray.setflags "numpy.recarray.setflags")([write, align, uic])
    | Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sort`](numpy.recarray.sort.html#numpy.recarray.sort "numpy.recarray.sort")([axis, kind, order])
    | Sort an array in-place. |'
  prefs: []
  type: TYPE_TB
- en: '| [`squeeze`](numpy.recarray.squeeze.html#numpy.recarray.squeeze "numpy.recarray.squeeze")([axis])
    | Remove axes of length one from *a*. |'
  prefs: []
  type: TYPE_TB
- en: '| [`std`](numpy.recarray.std.html#numpy.recarray.std "numpy.recarray.std")([axis, dtype, out, ddof, keepdims, where])
    | Returns the standard deviation of the array elements along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`sum`](numpy.recarray.sum.html#numpy.recarray.sum "numpy.recarray.sum")([axis, dtype, out, keepdims, initial, where])
    | Return the sum of the array elements over the given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`swapaxes`](numpy.recarray.swapaxes.html#numpy.recarray.swapaxes "numpy.recarray.swapaxes")(axis1, axis2)
    | Return a view of the array with *axis1* and *axis2* interchanged. |'
  prefs: []
  type: TYPE_TB
- en: '| [`take`](numpy.recarray.take.html#numpy.recarray.take "numpy.recarray.take")(indices[, axis, out, mode])
    | Return an array formed from the elements of *a* at the given indices. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes "numpy.recarray.tobytes")([order])
    | Construct Python bytes containing the raw data bytes in the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tofile`](numpy.recarray.tofile.html#numpy.recarray.tofile "numpy.recarray.tofile")(fid[, sep, format])
    | Write array to a file as text or binary (default). |'
  prefs: []
  type: TYPE_TB
- en: '| [`tolist`](numpy.recarray.tolist.html#numpy.recarray.tolist "numpy.recarray.tolist")()
    | Return the array as an `a.ndim`-levels deep nested list of Python scalars. |'
  prefs: []
  type: TYPE_TB
- en: '| [`tostring`](numpy.recarray.tostring.html#numpy.recarray.tostring "numpy.recarray.tostring")([order])
    | A compatibility alias for [`tobytes`](numpy.recarray.tobytes.html#numpy.recarray.tobytes
    "numpy.recarray.tobytes"), with exactly the same behavior. |'
  prefs: []
  type: TYPE_TB
- en: '| [`trace`](numpy.recarray.trace.html#numpy.recarray.trace "numpy.recarray.trace")([offset, axis1, axis2, dtype, out])
    | Return the sum along diagonals of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| [`transpose`](numpy.recarray.transpose.html#numpy.recarray.transpose "numpy.recarray.transpose")(*axes)
    | Returns a view of the array with axes transposed. |'
  prefs: []
  type: TYPE_TB
- en: '| [`var`](numpy.recarray.var.html#numpy.recarray.var "numpy.recarray.var")([axis, dtype, out, ddof, keepdims, where])
    | Returns the variance of the array elements, along given axis. |'
  prefs: []
  type: TYPE_TB
- en: '| [`view`](numpy.recarray.view.html#numpy.recarray.view "numpy.recarray.view")([dtype][, type])
    | New view of array with the same data. |'
  prefs: []
  type: TYPE_TB
- en: '| **dot** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **field** |  |'
  prefs: []
  type: TYPE_TB
