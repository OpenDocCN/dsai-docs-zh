- en: SciPy Roadmap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy路线图
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html](https://docs.scipy.org/doc/scipy-1.12.0/dev/roadmap.html)
- en: This roadmap page contains only the most important ideas and needs for SciPy
    going forward. For a more detailed roadmap, including per-subpackage status, many
    more ideas, API stability and more, see [Detailed SciPy Roadmap](roadmap-detailed.html#scipy-roadmap-detailed).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此路线图页面仅包含SciPy未来发展的最重要想法和需求。更详细的路线图，包括每个子包的状态、更多的想法、API稳定性等，请参见[详细的SciPy路线图](roadmap-detailed.html#scipy-roadmap-detailed)。
- en: Support for distributed arrays and GPU arrays
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持分布式数组和GPU数组
- en: NumPy has split its API from its execution engine with `__array_function__`
    and `__array_ufunc__`. This will enable parts of SciPy to accept distributed arrays
    (e.g. `dask.array.Array`) and GPU arrays (e.g. `cupy.ndarray`) that implement
    the `ndarray` interface. At the moment it is not yet clear which algorithms will
    work out of the box, and if there are significant performance gains when they
    do. We want to create a map of which parts of the SciPy API work, and improve
    support over time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy已经通过`__array_function__`和`__array_ufunc__`将其API与执行引擎分离。这将使得SciPy的部分接受分布式数组（例如`dask.array.Array`）和GPU数组（例如`cupy.ndarray`），这些数组实现了`ndarray`接口。目前还不清楚哪些算法可以直接使用，以及它们是否在使用时能够获得显著的性能提升。我们希望创建一个SciPy
    API的映射，并随着时间的推移改进支持。
- en: In addition to making use of NumPy protocols like `__array_function__`, we can
    make use of these protocols in SciPy as well. That will make it possible to (re)implement
    SciPy functions like, e.g., those in `scipy.signal` for Dask or GPU arrays (see
    [NEP 18 - use outside of NumPy](http://www.numpy.org/neps/nep-0018-array-function-protocol.html#use-outside-of-numpy)).
    NumPy’s features in this areas are still evolving, see e.g. [NEP 37 - A dispatch
    protocol for NumPy-like modules](https://numpy.org/neps/nep-0037-array-module.html),
    and SciPy is an important “client” for those features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 除了利用NumPy的协议如`__array_function__`，我们还可以在SciPy中使用这些协议。这将使得可以（重新）实现SciPy函数，例如在Dask或GPU数组中的`scipy.signal`函数（参见[NEP
    18 - use outside of NumPy](http://www.numpy.org/neps/nep-0018-array-function-protocol.html#use-outside-of-numpy)）。NumPy在这些领域的功能仍在不断发展中，例如参见[NEP
    37 - A dispatch protocol for NumPy-like modules](https://numpy.org/neps/nep-0037-array-module.html)，而SciPy对于这些功能是一个重要的“客户”。
- en: Performance improvements
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能改进
- en: Speed improvements, lower memory usage and the ability to parallelize algorithms
    are beneficial to most science domains and use cases. We have established an API
    design pattern for multiprocessing - using the `workers` keyword - that can be
    adopted in many more functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 加速算法的速度改进，减少内存使用和能够并行化算法对大多数科学领域和使用案例都有益处。我们已经为多进程设计了一个API设计模式 - 使用`workers`关键字
    - 可以在更多的函数中采用。
- en: Enabling the use of an accelerator like Pythran, possibly via Transonic, and
    making it easier for users to use Numba’s `@njit` in their code that relies on
    SciPy functionality would unlock a lot of performance gain. That needs a strategy
    though, all solutions are still maturing (see for example [this overview](https://fluiddyn.netlify.app/transonic-vision.html)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过像Pythran这样的加速器启用，可能通过Transonic实现，并使用户能够更轻松地在依赖于SciPy功能的代码中使用Numba的`@njit`，这将带来大量的性能提升。不过，这需要一个策略，所有的解决方案仍在成熟中（参见例如[此概览](https://fluiddyn.netlify.app/transonic-vision.html)）。
- en: Finally, many individual functions can be optimized for performance. `scipy.optimize`
    and `scipy.interpolate` functions are particularly often requested in this respect.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，许多单独的函数可以针对性能进行优化。尤其是在`scipy.optimize`和`scipy.interpolate`函数方面经常被请求进行优化。
- en: Statistics enhancements
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 统计增强
- en: The following [`scipy.stats`](../reference/stats.html#module-scipy.stats "scipy.stats")
    enhancements and those listed in the [Detailed SciPy Roadmap](roadmap-detailed.html#scipy-roadmap-detailed)
    are of particularly high importance to the project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`scipy.stats`](../reference/stats.html#module-scipy.stats "scipy.stats")中的增强功能以及[详细的SciPy路线图](roadmap-detailed.html#scipy-roadmap-detailed)中列出的内容，对项目特别重要。
- en: Overhaul the univariate distribution infrastructure to address longstanding
    issues (e.g. see [gh-15928](https://github.com/scipy/scipy/issues/15928).)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一元分布基础设施进行全面改进，以解决长期存在的问题（例如参见[gh-15928](https://github.com/scipy/scipy/issues/15928)）。
- en: Consistently handle `nan_policy`, `axis` arguments, and masked arrays in `stats`
    functions (where appropriate).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`stats`函数中一致处理`nan_policy`、`axis`参数和掩码数组（适当的情况下）。
- en: Support for more hardware platforms
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持更多的硬件平台
- en: SciPy now has continuous integration for ARM64 (or `aarch64`) and POWER8/9 (or
    `ppc64le`), and binaries are available via [Miniforge](https://github.com/conda-forge/miniforge).
    Wheels on PyPI for these platforms are now also possible (with the `manylinux2014`
    standard), and requests for those are becoming more frequent.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，SciPy已经为ARM64（或`aarch64`）和POWER8/9（或`ppc64le`）进行了持续集成，并且可以通过[Miniforge](https://github.com/conda-forge/miniforge)获得二进制文件。这些平台上的PyPI轮子现在也是可能的（符合`manylinux2014`标准），对这些轮子的请求也越来越多。
- en: Additionally, having IBM Z (or `s390x`) in CI is now possible with TravisCI
    but not yet done - and `manylinux2014` wheels for that platform are also possible
    then. Finally, resolving open AIX build issues would help users.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在可以在TravisCI上进行IBM Z（或`s390x`）的持续集成，但尚未完成 - 并且那个平台上的`manylinux2014`轮子也可能。最后，解决AIX构建问题会帮助用户。
- en: Implement sparse arrays in addition to sparse matrices
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现稀疏数组，除了稀疏矩阵外。
- en: 'The sparse matrix formats are mostly feature-complete, however the main issue
    is that they act like `numpy.matrix` (which will be deprecated in NumPy at some
    point). What we want is sparse *arrays* that act like `numpy.ndarray`. This is
    being worked on in [https://github.com/pydata/sparse](https://github.com/pydata/sparse),
    which is quite far along. The tentative plan is:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏矩阵格式大部分功能已完善，但主要问题在于它们的行为类似于`numpy.matrix`（在某个时候将在NumPy中废弃）。我们希望的是稀疏*数组*，它们的行为类似于`numpy.ndarray`。这正在[https://github.com/pydata/sparse](https://github.com/pydata/sparse)上进行工作，已经相当成熟。初步计划是：
- en: Start depending on `pydata/sparse` once it’s feature-complete enough (it still
    needs a CSC/CSR equivalent) and okay performance-wise.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦`pydata/sparse`功能完善（它仍然需要CSC/CSR等价物）并且性能足够好，就可以开始依赖它。
- en: Indicate in the documentation that for new code users should prefer `pydata/sparse`
    over sparse matrices.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文档中指出，对于新代码，用户应优先考虑使用`pydata/sparse`而不是稀疏矩阵。
- en: When NumPy deprecates `numpy.matrix`, vendor that or maintain it as a stand-alone
    package.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当NumPy废弃`numpy.matrix`时，作为一个独立包进行维护或供应商化。
