- en: Symbolic Systems in Physics/Mechanics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/symsystem.html](https://docs.sympy.org/latest/modules/physics/mechanics/symsystem.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The \(SymbolicSystem\) class in physics/mechanics is a location for the pertinent
    information of a multibody dynamic system. In its most basic form it contains
    the equations of motion for the dynamic system, however, it can also contain information
    regarding the loads that the system is subject to, the bodies that the system
    is comprised of and any additional equations the user feels is important for the
    system. The goal of this class is to provide a unified output format for the equations
    of motion that numerical analysis code can be designed around.
  prefs: []
  type: TYPE_NORMAL
- en: SymbolicSystem Example Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This code will go over the manual input of the equations of motion for the simple
    pendulum that uses the Cartesian location of the mass as the generalized coordinates
    into \(SymbolicSystem\).
  prefs: []
  type: TYPE_NORMAL
- en: The equations of motion are formed in the physics/mechanics/[examples](https://docs.sympy.org/latest/modules/physics/mechanics/examples/lin_pend_nonmin_example.html).
    In that spot the variables q1 and q2 are used in place of x and y and the reference
    frame is rotated 90 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first step will be to initialize all of the dynamic and constant symbols.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next step is to define the equations of motion in multiple forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Explicit form where the kinematics and dynamics are combined'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x’ = F_1(x, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[2] Implicit form where the kinematics and dynamics are combined'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: M_2(x, p) x’ = F_2(x, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[3] Implicit form where the kinematics and dynamics are separate'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: M_3(q, p) u’ = F_3(q, u, t, r, p) q’ = G(q, u, t, r, p)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: 'x : states, e.g. [q, u] t : time r : specified (exogenous) inputs p : constants
    q : generalized coordinates u : generalized speeds F_1 : right hand side of the
    combined equations in explicit form F_2 : right hand side of the combined equations
    in implicit form F_3 : right hand side of the dynamical equations in implicit
    form M_2 : mass matrix of the combined equations in implicit form M_3 : mass matrix
    of the dynamical equations in implicit form G : right hand side of the kinematical
    differential equations'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now the reference frames, points and particles will be set up so this information
    can be passed into \(system.SymbolicSystem\) in the form of a bodies and loads
    iterable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now the bodies and loads iterables need to be initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The equations of motion are in the form of a differential algebraic equation
    (DAE) and DAE solvers need to know which of the equations are the algebraic expressions.
    This information is passed into \(SymbolicSystem\) as a list specifying which
    rows are the algebraic equations. In this example it is a different row based
    on the chosen equations of motion format. The row index should always correspond
    to the mass matrix that is being input to the \(SymbolicSystem\) class but will
    always correspond to the row index of the combined dynamics and kinematics when
    being accessed from the \(SymbolicSystem\) class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: An iterable containing the states now needs to be created for the system. The
    \(SymbolicSystem\) class can determine which of the states are considered coordinates
    or speeds by passing in the indexes of the coordinates and speeds. If these indexes
    are not passed in the object will not be able to differentiate between coordinates
    and speeds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now the equations of motion instances can be created using the above mentioned
    equations of motion formats.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Like coordinates and speeds, the bodies and loads attributes can only be accessed
    if they are specified during initialization of the \(SymbolicSystem\) class. Lastly
    here are some attributes accessible from the \(SymbolicSystem\) class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
