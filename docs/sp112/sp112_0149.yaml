- en: scipy.integrate.LSODA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: scipy.integrate.LSODA
- en: Original text：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.LSODA.html#scipy.integrate.LSODA)
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adams/BDF method with automatic stiffness detection and switching.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 带有自动刚性检测和切换的 Adams/BDF 方法。
- en: This is a wrapper to the Fortran solver from ODEPACK [[1]](#r838579b36be5-1).
    It switches automatically between the nonstiff Adams method and the stiff BDF
    method. The method was originally detailed in [[2]](#r838579b36be5-2).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个对来自 ODEPACK 的 Fortran 求解器的包装器 [[1]](#r838579b36be5-1)。它在非刚性 Adams 方法和刚性
    BDF 方法之间自动切换。该方法最初在 [[2]](#r838579b36be5-2) 中详细描述。
- en: 'Parameters:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**fun**callable'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**fun**callable'
- en: 'Right-hand side of the system: the time derivative of the state `y` at time
    `t`. The calling signature is `fun(t, y)`, where `t` is a scalar and `y` is an
    ndarray with `len(y) = len(y0)`. `fun` must return an array of the same shape
    as `y`. See *vectorized* for more information.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的右手边：时间 `t` 处状态 `y` 的时间导数。调用签名为 `fun(t, y)`，其中 `t` 是标量，`y` 是形状为 `len(y0)`
    的 ndarray。`fun` 必须返回与 `y` 相同形状的数组。更多信息请参见*向量化*。
- en: '**t0**float'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**t0**float'
- en: Initial time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时间。
- en: '**y0**array_like, shape (n,)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**y0**array_like，形状为 (n,)'
- en: Initial state.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态。
- en: '**t_bound**float'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound**float'
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间 - 积分不会超出此时间。它还决定了积分的方向。
- en: '**first_step**float or None, optional'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**first_step**float 或 None，可选'
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 初始步长。默认为 `None`，表示算法应选择。
- en: '**min_step**float, optional'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**min_step**float，可选'
- en: Minimum allowed step size. Default is 0.0, i.e., the step size is not bounded
    and determined solely by the solver.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最小步长。默认为 0.0，即步长不受限制，完全由求解器确定。
- en: '**max_step**float, optional'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**max_step**float，可选'
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的最大步长。默认为 np.inf，即步长不受限制，完全由求解器确定。
- en: '**rtol, atol**float and array_like, optional'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**rtol, atol**float 和 array_like，可选'
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 相对和绝对容差。求解器保持局部误差估计小于 `atol + rtol * abs(y)`。这里 *rtol* 控制相对精度（正确数字的数量），而 *atol*
    控制绝对精度（正确小数位数）。为了实现期望的 *rtol*，设置 *atol* 小于从 `rtol * abs(y)` 可预期的最小值，以便 *rtol*
    主导可允许的误差。如果 *atol* 大于 `rtol * abs(y)`，则不能保证正确数字的数量。相反，为了实现期望的 *atol*，设置 *rtol*，使得
    `rtol * abs(y)` 总是小于 *atol*。如果 y 的各分量具有不同的尺度，则通过传递形状为 (n,) 的 array_like 来为 *atol*
    的不同分量设置不同的值可能是有益的。默认值为 *rtol* 的 1e-3 和 *atol* 的 1e-6。
- en: '**jac**None or callable, optional'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**jac**None 或 callable，可选'
- en: Jacobian matrix of the right-hand side of the system with respect to `y`. The
    Jacobian matrix has shape (n, n) and its element (i, j) is equal to `d f_i / d
    y_j`. The function will be called as `jac(t, y)`. If None (default), the Jacobian
    will be approximated by finite differences. It is generally recommended to provide
    the Jacobian rather than relying on a finite-difference approximation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 系统右手边关于 `y` 的雅可比矩阵。雅可比矩阵形状为 (n, n)，其元素 (i, j) 等于 `d f_i / d y_j`。函数将作为 `jac(t,
    y)` 调用。如果为 None（默认），雅可比将通过有限差分近似。通常建议提供雅可比矩阵，而不是依赖于有限差分近似。
- en: '**lband, uband**int or None'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**lband, uband**int 或 None'
- en: 'Parameters defining the bandwidth of the Jacobian, i.e., `jac[i, j] != 0 only
    for i - lband <= j <= i + uband`. Setting these requires your jac routine to return
    the Jacobian in the packed format: the returned array must have `n` columns and
    `uband + lband + 1` rows in which Jacobian diagonals are written. Specifically
    `jac_packed[uband + i - j , j] = jac[i, j]`. The same format is used in [`scipy.linalg.solve_banded`](scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded") (check for an illustration). These parameters can
    be also used with `jac=None` to reduce the number of Jacobian elements estimated
    by finite differences.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 定义雅可比矩阵带宽的参数，即，`jac[i, j] != 0` 仅当 `i - lband <= j <= i + uband`。设置这些参数要求您的
    `jac` 程序以压缩格式返回雅可比矩阵：返回的数组必须具有 `n` 列和 `uband + lband + 1` 行，其中雅可比矩阵的对角线被写入。具体而言，`jac_packed[uband
    + i - j , j] = jac[i, j]`。同样的格式也用于 [`scipy.linalg.solve_banded`](scipy.linalg.solve_banded.html#scipy.linalg.solve_banded
    "scipy.linalg.solve_banded")（请参考示例）。这些参数也可以与 `jac=None` 一起使用，以减少通过有限差分估计的雅可比元素数量。
- en: '**vectorized**bool, optional'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**vectorized** bool，可选'
- en: Whether *fun* may be called in a vectorized fashion. False (default) is recommended
    for this solver.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*fun* 是否可以以矢量化方式调用。建议此求解器默认为 False。'
- en: If `vectorized` is False, *fun* will always be called with `y` of shape `(n,)`,
    where `n = len(y0)`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `vectorized` 为 False，则 *fun* 将始终使用形状为 `(n,)` 的 `y` 调用，其中 `n = len(y0)`。
- en: If `vectorized` is True, *fun* may be called with `y` of shape `(n, k)`, where
    `k` is an integer. In this case, *fun* must behave such that `fun(t, y)[:, i]
    == fun(t, y[:, i])` (i.e. each column of the returned array is the time derivative
    of the state corresponding with a column of `y`).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `vectorized` 为 True，则 *fun* 可能以形状为 `(n, k)` 的 `y` 调用，其中 `k` 是整数。在这种情况下，*fun*
    必须使得 `fun(t, y)[:, i] == fun(t, y[:, i])`（即返回数组的每一列都是与 `y` 的相应列对应的状态的时间导数）。
- en: Setting `vectorized=True` allows for faster finite difference approximation
    of the Jacobian by methods ‘Radau’ and ‘BDF’, but will result in slower execution
    for this solver.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 `vectorized=True` 允许 ‘Radau’ 和 ‘BDF’ 方法更快地通过有限差分逼近雅可比矩阵，但会导致此求解器执行速度较慢。
- en: References
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[1](#id1)]'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[[1](#id1)]'
- en: A. C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE Solvers,” IMACS
    Transactions on Scientific Computation, Vol 1., pp. 55-64, 1983.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: A. C. Hindmarsh, “ODEPACK, A Systematized Collection of ODE Solvers,” IMACS
    Transactions on Scientific Computation, Vol 1., pp. 55-64, 1983.
- en: '[[2](#id2)]'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[[2](#id2)]'
- en: L. Petzold, “Automatic selection of methods for solving stiff and nonstiff systems
    of ordinary differential equations”, SIAM Journal on Scientific and Statistical
    Computing, Vol. 4, No. 1, pp. 136-148, 1983.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: L. Petzold, “Automatic selection of methods for solving stiff and nonstiff systems
    of ordinary differential equations”, SIAM Journal on Scientific and Statistical
    Computing, Vol. 4, No. 1, pp. 136-148, 1983.
- en: 'Attributes:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 属性：
- en: '**n**int'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**n** int'
- en: Number of equations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 方程的数量。
- en: '**status**string'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**status** string'
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 求解器的当前状态：‘running’（运行中）、‘finished’（已完成）或‘failed’（失败）。
- en: '**t_bound**float'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_bound** float'
- en: Boundary time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 边界时间。
- en: '**direction**float'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**direction** float'
- en: 'Integration direction: +1 or -1.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 积分方向：+1 或 -1。
- en: '**t**float'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**t** float'
- en: Current time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当前时间。
- en: '**y**ndarray'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**y** ndarray'
- en: Current state.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当前状态。
- en: '**t_old**float'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**t_old** float'
- en: Previous time. None if no steps were made yet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个时间。如果还没有进行步骤，则为无。
- en: '**nfev**int'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**nfev** int'
- en: Number of evaluations of the right-hand side.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧求值的次数。
- en: '**njev**int'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**njev** int'
- en: Number of evaluations of the Jacobian.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 雅可比矩阵的求值次数。
- en: Methods
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: '| [`dense_output`](scipy.integrate.LSODA.dense_output.html#scipy.integrate.LSODA.dense_output
    "scipy.integrate.LSODA.dense_output")() | Compute a local interpolant over the
    last successful step. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`dense_output`](scipy.integrate.LSODA.dense_output.html#scipy.integrate.LSODA.dense_output
    "scipy.integrate.LSODA.dense_output")() | 计算上一次成功步骤的局部插值。 |'
- en: '| [`step`](scipy.integrate.LSODA.step.html#scipy.integrate.LSODA.step "scipy.integrate.LSODA.step")()
    | Perform one integration step. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`step`](scipy.integrate.LSODA.step.html#scipy.integrate.LSODA.step "scipy.integrate.LSODA.step")()
    | 执行一步积分。 |'
