["```py\n[mypy]\nplugins  =  numpy.typing.mypy_plugin \n```", "```py\n>>> np.array(x**2 for x in range(10))\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> np.array(x**2 for x in range(10))  # type: ignore \n```", "```py\n>>> from typing import Any\n>>> array_like: Any = (x**2 for x in range(10))\n>>> np.array(array_like)\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> x = np.array([1, 2])\n>>> x.dtype = np.bool_ \n```", "```py\n>>> x = np.dtype({\"field1\": (float, 1), \"field2\": (int, 3)}) \n```", "```py\n>>> from typing import TypeVar\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T = TypeVar(\"T\", bound=npt.NBitBase)\n>>> def func(a: \"np.floating[T]\", b: \"np.floating[T]\") -> \"np.floating[T]\":\n...     ... \n```", "```py\nnumpy.typing.ArrayLike = typing.Union[...]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> def as_array(a: npt.ArrayLike) -> np.ndarray:\n...     return np.array(a) \n```", "```py\nnumpy.typing.DTypeLike = typing.Union[...]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> def as_dtype(d: npt.DTypeLike) -> np.dtype:\n...     return np.dtype(d) \n```", "```py\nnumpy.typing.NDArray = numpy.ndarray[typing.Any, numpy.dtype[+_ScalarType_co]]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> print(npt.NDArray)\nnumpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]\n\n>>> print(npt.NDArray[np.float64])\nnumpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n>>> NDArrayInt = npt.NDArray[np.int_]\n>>> a: NDArrayInt = np.arange(10)\n\n>>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:\n...     return np.array(a) \n```", "```py\nclass numpy.typing.NBitBase\n```", "```py\n>>> from __future__ import annotations\n>>> from typing import TypeVar, TYPE_CHECKING\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T1 = TypeVar(\"T1\", bound=npt.NBitBase)\n>>> T2 = TypeVar(\"T2\", bound=npt.NBitBase)\n\n>>> def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]:\n...     return a + b\n\n>>> a = np.float16()\n>>> b = np.int64()\n>>> out = add(a, b)\n\n>>> if TYPE_CHECKING:\n...     reveal_locals()\n...     # note: Revealed local types are:\n...     # note:     a: numpy.floating[numpy.typing._16Bit*]\n...     # note:     b: numpy.signedinteger[numpy.typing._64Bit*]\n...     # note:     out: numpy.floating[numpy.typing._64Bit*] \n```", "```py\n[mypy]\nplugins  =  numpy.typing.mypy_plugin \n```", "```py\n[mypy]\nplugins  =  numpy.typing.mypy_plugin \n```", "```py\n>>> np.array(x**2 for x in range(10))\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> np.array(x**2 for x in range(10))  # type: ignore \n```", "```py\n>>> from typing import Any\n>>> array_like: Any = (x**2 for x in range(10))\n>>> np.array(array_like)\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> x = np.array([1, 2])\n>>> x.dtype = np.bool_ \n```", "```py\n>>> x = np.dtype({\"field1\": (float, 1), \"field2\": (int, 3)}) \n```", "```py\n>>> from typing import TypeVar\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T = TypeVar(\"T\", bound=npt.NBitBase)\n>>> def func(a: \"np.floating[T]\", b: \"np.floating[T]\") -> \"np.floating[T]\":\n...     ... \n```", "```py\n>>> np.array(x**2 for x in range(10))\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> np.array(x**2 for x in range(10))  # type: ignore \n```", "```py\n>>> from typing import Any\n>>> array_like: Any = (x**2 for x in range(10))\n>>> np.array(array_like)\narray(<generator object <genexpr> at ...>, dtype=object) \n```", "```py\n>>> x = np.array([1, 2])\n>>> x.dtype = np.bool_ \n```", "```py\n>>> x = np.dtype({\"field1\": (float, 1), \"field2\": (int, 3)}) \n```", "```py\n>>> from typing import TypeVar\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T = TypeVar(\"T\", bound=npt.NBitBase)\n>>> def func(a: \"np.floating[T]\", b: \"np.floating[T]\") -> \"np.floating[T]\":\n...     ... \n```", "```py\nnumpy.typing.ArrayLike = typing.Union[...]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> def as_array(a: npt.ArrayLike) -> np.ndarray:\n...     return np.array(a) \n```", "```py\nnumpy.typing.DTypeLike = typing.Union[...]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> def as_dtype(d: npt.DTypeLike) -> np.dtype:\n...     return np.dtype(d) \n```", "```py\nnumpy.typing.NDArray = numpy.ndarray[typing.Any, numpy.dtype[+_ScalarType_co]]\n```", "```py\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> print(npt.NDArray)\nnumpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]\n\n>>> print(npt.NDArray[np.float64])\nnumpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]\n\n>>> NDArrayInt = npt.NDArray[np.int_]\n>>> a: NDArrayInt = np.arange(10)\n\n>>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:\n...     return np.array(a) \n```", "```py\nclass numpy.typing.NBitBase\n```", "```py\n>>> from __future__ import annotations\n>>> from typing import TypeVar, TYPE_CHECKING\n>>> import numpy as np\n>>> import numpy.typing as npt\n\n>>> T1 = TypeVar(\"T1\", bound=npt.NBitBase)\n>>> T2 = TypeVar(\"T2\", bound=npt.NBitBase)\n\n>>> def add(a: np.floating[T1], b: np.integer[T2]) -> np.floating[T1 | T2]:\n...     return a + b\n\n>>> a = np.float16()\n>>> b = np.int64()\n>>> out = add(a, b)\n\n>>> if TYPE_CHECKING:\n...     reveal_locals()\n...     # note: Revealed local types are:\n...     # note:     a: numpy.floating[numpy.typing._16Bit*]\n...     # note:     b: numpy.signedinteger[numpy.typing._64Bit*]\n...     # note:     out: numpy.floating[numpy.typing._64Bit*] \n```"]