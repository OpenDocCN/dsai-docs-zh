- en: scipy.signal.coherence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.coherence.html#scipy.signal.coherence](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.signal.coherence.html#scipy.signal.coherence)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Estimate the magnitude squared coherence estimate, Cxy, of discrete-time signals
    X and Y using Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '`Cxy = abs(Pxy)**2/(Pxx*Pyy)`, where *Pxx* and *Pyy* are power spectral density
    estimates of X and Y, and *Pxy* is the cross spectral density estimate of X and
    Y.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**y**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Time series of measurement values
  prefs: []
  type: TYPE_NORMAL
- en: '**fs**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Sampling frequency of the *x* and *y* time series. Defaults to 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**window**str or tuple or array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Desired window to use. If *window* is a string or tuple, it is passed to [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") to generate the window values, which are DFT-even by
    default. See [`get_window`](scipy.signal.get_window.html#scipy.signal.get_window
    "scipy.signal.get_window") for a list of windows and required parameters. If *window*
    is array_like it will be used directly as the window and its length must be nperseg.
    Defaults to a Hann window.
  prefs: []
  type: TYPE_NORMAL
- en: '**nperseg**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of each segment. Defaults to None, but if window is str or tuple, is
    set to 256, and if window is array_like, is set to the length of the window.
  prefs: []
  type: TYPE_NORMAL
- en: '**noverlap: int, optional**'
  prefs: []
  type: TYPE_NORMAL
- en: Number of points to overlap between segments. If *None*, `noverlap = nperseg
    // 2`. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfft**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Length of the FFT used, if a zero padded FFT is desired. If *None*, the FFT
    length is *nperseg*. Defaults to *None*.
  prefs: []
  type: TYPE_NORMAL
- en: '**detrend**str or function or *False*, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies how to detrend each segment. If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend
    "scipy.signal.detrend") is a string, it is passed as the *type* argument to the
    [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    function. If it is a function, it takes a segment and returns a detrended segment.
    If [`detrend`](scipy.signal.detrend.html#scipy.signal.detrend "scipy.signal.detrend")
    is *False*, no detrending is done. Defaults to ‘constant’.
  prefs: []
  type: TYPE_NORMAL
- en: '**axis**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Axis along which the coherence is computed for both inputs; the default is over
    the last axis (i.e. `axis=-1`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**f**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Array of sample frequencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cxy**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Magnitude squared coherence of x and y.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`periodogram`](scipy.signal.periodogram.html#scipy.signal.periodogram "scipy.signal.periodogram")'
  prefs: []
  type: TYPE_NORMAL
- en: Simple, optionally modified periodogram
  prefs: []
  type: TYPE_NORMAL
- en: '[`lombscargle`](scipy.signal.lombscargle.html#scipy.signal.lombscargle "scipy.signal.lombscargle")'
  prefs: []
  type: TYPE_NORMAL
- en: Lomb-Scargle periodogram for unevenly sampled data
  prefs: []
  type: TYPE_NORMAL
- en: '[`welch`](scipy.signal.welch.html#scipy.signal.welch "scipy.signal.welch")'
  prefs: []
  type: TYPE_NORMAL
- en: Power spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: '[`csd`](scipy.signal.csd.html#scipy.signal.csd "scipy.signal.csd")'
  prefs: []
  type: TYPE_NORMAL
- en: Cross spectral density by Welch’s method.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: An appropriate amount of overlap will depend on the choice of window and on
    your requirements. For the default Hann window an overlap of 50% is a reasonable
    trade off between accurately estimating the signal power, while not over counting
    any of the data. Narrower windows may require a larger overlap.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.16.0.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'P. Welch, “The use of the fast Fourier transform for the estimation of power
    spectra: A method based on time averaging over short, modified periodograms”,
    IEEE Trans. Audio Electroacoust. vol. 15, pp. 70-73, 1967.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]'
  prefs: []
  type: TYPE_NORMAL
- en: Stoica, Petre, and Randolph Moses, “Spectral Analysis of Signals” Prentice Hall,
    2005
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate two test signals with some common features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compute and plot the coherence.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-signal-coherence-1.png](../Images/9eeedb823da1ad84ac151b46355ac90a.png)'
  prefs: []
  type: TYPE_IMG
