- en: Elementary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/functions/elementary.html](https://docs.sympy.org/latest/modules/functions/elementary.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This module implements elementary functions such as trigonometric, hyperbolic,
    and sqrt, as well as functions like `Abs`, `Max`, `Min` etc.
  prefs: []
  type: TYPE_NORMAL
- en: Complex Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Returns real part of expression. This function performs only elementary analysis
    and so it will fail to decompose properly more complicated expressions. If completely
    simplified result is needed then use `Basic.as_real_imag()` or perform complex
    expansion on instance of this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real part of expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`im`](#sympy.functions.elementary.complexes.im "sympy.functions.elementary.complexes.im")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns the real number with a zero imaginary part.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Returns imaginary part of expression. This function performs only elementary
    analysis and so it will fail to decompose properly more complicated expressions.
    If completely simplified result is needed then use `Basic.as_real_imag()` or perform
    complex expansion on instance of this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Imaginary part of expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`re`](#sympy.functions.elementary.complexes.re "sympy.functions.elementary.complexes.re")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Return the imaginary part with a zero real part.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns the complex sign of an expression:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or imaginary expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Complex sign of expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: 'If the expression is real the sign will be:'
  prefs: []
  type: TYPE_NORMAL
- en: \(1\) if expression is positive
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(0\) if expression is equal to zero
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(-1\) if expression is negative
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the expression is imaginary the sign will be:'
  prefs: []
  type: TYPE_NORMAL
- en: \(I\) if im(expression) is positive
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: \(-I\) if im(expression) is negative
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise an unevaluated expression will be returned. When evaluated, the result
    (in general) will be `cos(arg(expr)) + I*sin(arg(expr))`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Abs`](#sympy.functions.elementary.complexes.Abs "sympy.functions.elementary.complexes.Abs"),
    [`conjugate`](#sympy.functions.elementary.complexes.conjugate "sympy.functions.elementary.complexes.conjugate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Return the absolute value of the argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Absolute value returned can be an expression or integer depending on input arg.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of the built-in function `abs()` to accept symbolic values.
    If you pass a SymPy expression to the built-in `abs()`, it will pass it automatically
    to `Abs()`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the Python built-in will return either an Expr or int depending on
    the argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Abs will always return a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sign`](#sympy.functions.elementary.complexes.sign "sympy.functions.elementary.complexes.sign"),
    [`conjugate`](#sympy.functions.elementary.complexes.conjugate "sympy.functions.elementary.complexes.conjugate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Get the first derivative of the argument to Abs().
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Returns the argument (in radians) of a complex number. The argument is evaluated
    in consistent convention with `atan2` where the branch-cut is taken along the
    negative real axis and `arg(z)` is in the interval \((-\pi,\pi]\). For a positive
    number, the argument is always 0; the argument of a negative number is \(\pi\);
    and the argument of 0 is undefined and returns `nan`. So the `arg` function will
    never nest greater than 3 levels since at the 4th application, the result must
    be nan; for a real number, nan is returned on the 3rd application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**value** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Returns arc tangent of arg measured in radians.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Returns the *complex conjugate* [[R276]](#r276) of an argument. In mathematics,
    the complex conjugate of a complex number is given by changing the sign of the
    imaginary part.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the conjugate of the complex number \(a + ib\) (where \(a\) and \(b\)
    are real numbers) is \(a - ib\)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Complex conjugate of arg as real, imaginary or mixed expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sign`](#sympy.functions.elementary.complexes.sign "sympy.functions.elementary.complexes.sign"),
    [`Abs`](#sympy.functions.elementary.complexes.Abs "sympy.functions.elementary.complexes.Abs")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R276] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Complex_conjugation](https://en.wikipedia.org/wiki/Complex_conjugation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Lift argument to the Riemann surface of the logarithm, using the standard branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Real or complex expression.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.exponential.exp_polar`](#sympy.functions.elementary.exponential.exp_polar
    "sympy.functions.elementary.exponential.exp_polar"), [`periodic_argument`](#sympy.functions.elementary.complexes.periodic_argument
    "sympy.functions.elementary.complexes.periodic_argument")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Represent the argument on a quotient of the Riemann surface of the logarithm.
    That is, given a period \(P\), always return a value in \((-P/2, P/2]\), by using
    \(\exp(PI) = 1\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ar** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: A polar number.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**period** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The period \(P\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.exponential.exp_polar`](#sympy.functions.elementary.exponential.exp_polar
    "sympy.functions.elementary.exponential.exp_polar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`polar_lift`](#sympy.functions.elementary.complexes.polar_lift "sympy.functions.elementary.complexes.polar_lift")'
  prefs: []
  type: TYPE_NORMAL
- en: Lift argument to the Riemann surface of the logarithm
  prefs: []
  type: TYPE_NORMAL
- en: '[`principal_branch`](#sympy.functions.elementary.complexes.principal_branch
    "sympy.functions.elementary.complexes.principal_branch")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Represent a polar number reduced to its principal branch on a quotient of the
    Riemann surface of the logarithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: A polar number.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**period** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Positive real number or infinity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is a function of two arguments. The first argument is a polar number \(z\),
    and the second one a positive real number or infinity, \(p\). The result is `z
    mod exp_polar(I*p)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.exponential.exp_polar`](#sympy.functions.elementary.exponential.exp_polar
    "sympy.functions.elementary.exponential.exp_polar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`polar_lift`](#sympy.functions.elementary.complexes.polar_lift "sympy.functions.elementary.complexes.polar_lift")'
  prefs: []
  type: TYPE_NORMAL
- en: Lift argument to the Riemann surface of the logarithm
  prefs: []
  type: TYPE_NORMAL
- en: '[`periodic_argument`](#sympy.functions.elementary.complexes.periodic_argument
    "sympy.functions.elementary.complexes.periodic_argument")'
  prefs: []
  type: TYPE_NORMAL
- en: Trigonometric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Trigonometric Functions'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the sine of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This function will evaluate automatically in the case \(x/\pi\) is some rational
    number [[R280]](#r280). For example, if \(x\) is a multiple of \(\pi\), \(\pi/2\),
    \(\pi/3\), \(\pi/4\), and \(\pi/6\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R277](#id4)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R278](#id5)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R279](#id6)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Sin](https://functions.wolfram.com/ElementaryFunctions/Sin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[R280] ([1](#id3),[2](#id7))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/TrigonometryAngles.html](https://mathworld.wolfram.com/TrigonometryAngles.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the cosine of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`sin()`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")
    for notes about automatic evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R281](#id8)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R282](#id9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R283](#id10)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Cos](https://functions.wolfram.com/ElementaryFunctions/Cos)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The tangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the tangent of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")
    for notes about automatic evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R284](#id11)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R285](#id12)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R286](#id13)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Tan](https://functions.wolfram.com/ElementaryFunctions/Tan)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The cotangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the cotangent of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")
    for notes about automatic evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R287](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R288](#id15)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R289](#id16)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Cot](https://functions.wolfram.com/ElementaryFunctions/Cot)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The secant function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the secant of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")
    for notes about automatic evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R290](#id17)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R291](#id18)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R292](#id19)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Sec](https://functions.wolfram.com/ElementaryFunctions/Sec)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The cosecant function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the cosecant of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`sin()`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")
    for notes about automatic evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R293](#id20)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Trigonometric_functions](https://en.wikipedia.org/wiki/Trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R294](#id21)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.14](https://dlmf.nist.gov/4.14)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R295](#id22)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/Csc](https://functions.wolfram.com/ElementaryFunctions/Csc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Represents an unnormalized sinc function:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{sinc}(x) = \begin{cases} \frac{\sin x}{x} & \qquad
    x \neq 0 \\ 1 & \qquad x = 0 \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Automated Evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Differentiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Series Expansion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As zero’th order spherical Bessel Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R296](#id23)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Sinc_function](https://en.wikipedia.org/wiki/Sinc_function)'
  prefs: []
  type: TYPE_NORMAL
- en: Trigonometric Inverses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The inverse sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arcsine of x in radians.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`asin(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    0, 1, -1\}\) and for some instances when the result is a rational multiple of
    \(\pi\) (see the `eval` class method).'
  prefs: []
  type: TYPE_NORMAL
- en: A purely imaginary argument will lead to an asinh expression.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R297](#id24)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R298](#id25)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R299](#id26)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcSin](https://functions.wolfram.com/ElementaryFunctions/ArcSin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The inverse cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc cosine of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: '`acos(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    0, 1, -1\}\) and for some instances when the result is a rational multiple of
    \(\pi\) (see the eval class method).'
  prefs: []
  type: TYPE_NORMAL
- en: '`acos(zoo)` evaluates to `zoo` (see note in [`sympy.functions.elementary.trigonometric.asec`](#sympy.functions.elementary.trigonometric.asec
    "sympy.functions.elementary.trigonometric.asec"))'
  prefs: []
  type: TYPE_NORMAL
- en: A purely imaginary argument will be rewritten to asinh.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R300](#id27)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R301](#id28)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R302](#id29)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcCos](https://functions.wolfram.com/ElementaryFunctions/ArcCos)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The inverse tangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc tangent of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`atan(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    0, 1, -1\}\) and for some instances when the result is a rational multiple of
    \(\pi\) (see the eval class method).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R303](#id30)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R304](#id31)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R305](#id32)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcTan](https://functions.wolfram.com/ElementaryFunctions/ArcTan)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The inverse cotangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc cotangent of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`acot(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    \tilde{\infty}, 0, 1, -1\}\) and for some instances when the result is a rational
    multiple of \(\pi\) (see the eval class method).'
  prefs: []
  type: TYPE_NORMAL
- en: A purely imaginary argument will lead to an `acoth` expression.
  prefs: []
  type: TYPE_NORMAL
- en: '`acot(x)` has a branch cut along \((-i, i)\), hence it is discontinuous at
    0\. Its range for real \(x\) is \((-\frac{\pi}{2}, \frac{\pi}{2}]\).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R306](#id33)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R307](#id34)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcCot](https://functions.wolfram.com/ElementaryFunctions/ArcCot)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The inverse secant function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc secant of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`asec(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    0, 1, -1\}\) and for some instances when the result is a rational multiple of
    \(\pi\) (see the eval class method).'
  prefs: []
  type: TYPE_NORMAL
- en: '`asec(x)` has branch cut in the interval \([-1, 1]\). For complex arguments,
    it can be defined [[R311]](#r311) as'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{sec^{-1}}(z) = -i\frac{\log\left(\sqrt{1 - z^2} + 1\right)}{z}\]
  prefs: []
  type: TYPE_NORMAL
- en: At `x = 0`, for positive branch cut, the limit evaluates to `zoo`. For negative
    branch cut, the limit
  prefs: []
  type: TYPE_NORMAL
- en: \[\lim_{z \to 0}-i\frac{\log\left(-\sqrt{1 - z^2} + 1\right)}{z}\]
  prefs: []
  type: TYPE_NORMAL
- en: simplifies to \(-i\log\left(z/2 + O\left(z^3\right)\right)\) which ultimately
    evaluates to `zoo`.
  prefs: []
  type: TYPE_NORMAL
- en: As `acos(x) = asec(1/x)`, a similar argument can be given for `acos(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R308](#id36)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R309](#id37)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R310](#id38)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcSec](https://functions.wolfram.com/ElementaryFunctions/ArcSec)'
  prefs: []
  type: TYPE_NORMAL
- en: '[R311] ([1](#id35),[2](#id39))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://reference.wolfram.com/language/ref/ArcSec.html](https://reference.wolfram.com/language/ref/ArcSec.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The inverse cosecant function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the arc cosecant of x (measured in radians).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`acsc(x)` will evaluate automatically in the cases \(x \in \{\infty, -\infty,
    0, 1, -1\}\)` and for some instances when the result is a rational multiple of
    \(\pi\) (see the `eval` class method).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot"),
    [`atan2`](#sympy.functions.elementary.trigonometric.atan2 "sympy.functions.elementary.trigonometric.atan2")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R312](#id40)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R313](#id41)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.23](https://dlmf.nist.gov/4.23)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R314](#id42)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcCsc](https://functions.wolfram.com/ElementaryFunctions/ArcCsc)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The function `atan2(y, x)` computes \(\operatorname{atan}(y/x)\) taking two
    arguments \(y\) and \(x\). Signs of both \(y\) and \(x\) are considered to determine
    the appropriate quadrant of \(\operatorname{atan}(y/x)\). The range is \((-\pi,
    \pi]\). The complete definition reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\begin{split}\operatorname{atan2}(y, x) = \begin{cases} \arctan\left(\frac
    y x\right) & \qquad x > 0 \\ \arctan\left(\frac y x\right) + \pi& \qquad y \ge
    0, x < 0 \\ \arctan\left(\frac y x\right) - \pi& \qquad y < 0, x < 0 \\ +\frac{\pi}{2}
    & \qquad y > 0, x = 0 \\ -\frac{\pi}{2} & \qquad y < 0, x = 0 \\ \text{undefined}
    & \qquad y = 0, x = 0 \end{cases}\end{split}\]
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention: Note the role reversal of both arguments. The \(y\)-coordinate is
    the first argument and the \(x\)-coordinate the second.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If either \(x\) or \(y\) is complex:'
  prefs: []
  type: TYPE_NORMAL
- en: \[\operatorname{atan2}(y, x) = -i\log\left(\frac{x + iy}{\sqrt{x^2 + y^2}}\right)\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Going counter-clock wise around the origin we find the following angles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: which are all correct. Compare this to the results of the ordinary \(\operatorname{atan}\)
    function for the point \((x, y) = (-1, 1)\)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'where only the \(\operatorname{atan2}\) function reurns what we expect. We
    can differentiate the function with respect to both arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'We can express the \(\operatorname{atan2}\) function in terms of complex logarithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'and in terms of \(\operatorname(atan)\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: but note that this form is undefined on the negative real axis.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sin`](#sympy.functions.elementary.trigonometric.sin "sympy.functions.elementary.trigonometric.sin"),
    [`csc`](#sympy.functions.elementary.trigonometric.csc "sympy.functions.elementary.trigonometric.csc"),
    [`cos`](#sympy.functions.elementary.trigonometric.cos "sympy.functions.elementary.trigonometric.cos"),
    [`sec`](#sympy.functions.elementary.trigonometric.sec "sympy.functions.elementary.trigonometric.sec"),
    [`tan`](#sympy.functions.elementary.trigonometric.tan "sympy.functions.elementary.trigonometric.tan"),
    [`cot`](#sympy.functions.elementary.trigonometric.cot "sympy.functions.elementary.trigonometric.cot"),
    [`asin`](#sympy.functions.elementary.trigonometric.asin "sympy.functions.elementary.trigonometric.asin"),
    [`acsc`](#sympy.functions.elementary.trigonometric.acsc "sympy.functions.elementary.trigonometric.acsc"),
    [`acos`](#sympy.functions.elementary.trigonometric.acos "sympy.functions.elementary.trigonometric.acos"),
    [`asec`](#sympy.functions.elementary.trigonometric.asec "sympy.functions.elementary.trigonometric.asec"),
    [`atan`](#sympy.functions.elementary.trigonometric.atan "sympy.functions.elementary.trigonometric.atan"),
    [`acot`](#sympy.functions.elementary.trigonometric.acot "sympy.functions.elementary.trigonometric.acot")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R315](#id43)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Inverse_trigonometric_functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R316](#id44)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Atan2](https://en.wikipedia.org/wiki/Atan2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R317](#id45)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcTan2](https://functions.wolfram.com/ElementaryFunctions/ArcTan2)'
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hyperbolic Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Base class for hyperbolic functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh"),
    [`coth`](#sympy.functions.elementary.hyperbolic.coth "sympy.functions.elementary.hyperbolic.coth")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '`sinh(x)` is the hyperbolic sine of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic sine function is \(\frac{e^x - e^{-x}}{2}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh"),
    [`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Returns this function as a complex coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next term in the Taylor series expansion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '`cosh(x)` is the hyperbolic cosine of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic cosine function is \(\frac{e^x + e^{-x}}{2}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh"),
    [`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '`tanh(x)` is the hyperbolic tangent of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic tangent function is \(\frac{\sinh(x)}{\cosh(x)}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`atanh`](#sympy.functions.elementary.hyperbolic.atanh "sympy.functions.elementary.hyperbolic.atanh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '`coth(x)` is the hyperbolic cotangent of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic cotangent function is \(\frac{\cosh(x)}{\sinh(x)}\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`acoth`](#sympy.functions.elementary.hyperbolic.acoth "sympy.functions.elementary.hyperbolic.acoth")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '`sech(x)` is the hyperbolic secant of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic secant function is \(\frac{2}{e^x + e^{-x}}\)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh"),
    [`coth`](#sympy.functions.elementary.hyperbolic.coth "sympy.functions.elementary.hyperbolic.coth"),
    [`csch`](#sympy.functions.elementary.hyperbolic.csch "sympy.functions.elementary.hyperbolic.csch"),
    [`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '`csch(x)` is the hyperbolic cosecant of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The hyperbolic cosecant function is \(\frac{2}{e^x - e^{-x}}\)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh"),
    [`sech`](#sympy.functions.elementary.hyperbolic.sech "sympy.functions.elementary.hyperbolic.sech"),
    [`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of this function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next term in the Taylor series expansion
  prefs: []
  type: TYPE_NORMAL
- en: Hyperbolic Inverses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '`asinh(x)` is the inverse hyperbolic sine of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic sine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh"),
    [`atanh`](#sympy.functions.elementary.hyperbolic.atanh "sympy.functions.elementary.hyperbolic.atanh"),
    [`sinh`](#sympy.functions.elementary.hyperbolic.sinh "sympy.functions.elementary.hyperbolic.sinh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '`acosh(x)` is the inverse hyperbolic cosine of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic cosine function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`atanh`](#sympy.functions.elementary.hyperbolic.atanh "sympy.functions.elementary.hyperbolic.atanh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '`atanh(x)` is the inverse hyperbolic tangent of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic tangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh"),
    [`tanh`](#sympy.functions.elementary.hyperbolic.tanh "sympy.functions.elementary.hyperbolic.tanh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`acoth(x)` is the inverse hyperbolic cotangent of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic cotangent function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`acosh`](#sympy.functions.elementary.hyperbolic.acosh "sympy.functions.elementary.hyperbolic.acosh"),
    [`coth`](#sympy.functions.elementary.hyperbolic.coth "sympy.functions.elementary.hyperbolic.coth")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '`asech(x)` is the inverse hyperbolic secant of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic secant function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh"),
    [`atanh`](#sympy.functions.elementary.hyperbolic.atanh "sympy.functions.elementary.hyperbolic.atanh"),
    [`cosh`](#sympy.functions.elementary.hyperbolic.cosh "sympy.functions.elementary.hyperbolic.cosh"),
    [`acoth`](#sympy.functions.elementary.hyperbolic.acoth "sympy.functions.elementary.hyperbolic.acoth")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R318](#id46)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hyperbolic_function](https://en.wikipedia.org/wiki/Hyperbolic_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R319](#id47)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.37](https://dlmf.nist.gov/4.37)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R320](#id48)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcSech/](https://functions.wolfram.com/ElementaryFunctions/ArcSech/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`acsch(x)` is the inverse hyperbolic cosecant of `x`.'
  prefs: []
  type: TYPE_NORMAL
- en: The inverse hyperbolic cosecant function.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`asinh`](#sympy.functions.elementary.hyperbolic.asinh "sympy.functions.elementary.hyperbolic.asinh")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R321](#id49)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Hyperbolic_function](https://en.wikipedia.org/wiki/Hyperbolic_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R322](#id50)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dlmf.nist.gov/4.37](https://dlmf.nist.gov/4.37)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R323](#id51)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://functions.wolfram.com/ElementaryFunctions/ArcCsch/](https://functions.wolfram.com/ElementaryFunctions/ArcCsch/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Returns the inverse of this function.
  prefs: []
  type: TYPE_NORMAL
- en: Integer Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Ceiling is a univariate function which returns the smallest integer value not
    less than its argument. This implementation generalizes ceiling to complex numbers
    by taking the ceiling of the real and imaginary parts separately.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.integers.floor`](#sympy.functions.elementary.integers.floor
    "sympy.functions.elementary.integers.floor")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R324](#id52)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Concrete mathematics” by Graham, pp. 87
  prefs: []
  type: TYPE_NORMAL
- en: '[[R325](#id53)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/CeilingFunction.html](https://mathworld.wolfram.com/CeilingFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Floor is a univariate function which returns the largest integer value not greater
    than its argument. This implementation generalizes floor to complex numbers by
    taking the floor of the real and imaginary parts separately.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.integers.ceiling`](#sympy.functions.elementary.integers.ceiling
    "sympy.functions.elementary.integers.ceiling")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R326](#id54)]'
  prefs: []
  type: TYPE_NORMAL
- en: “Concrete mathematics” by Graham, pp. 87
  prefs: []
  type: TYPE_NORMAL
- en: '[[R327](#id55)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FloorFunction.html](https://mathworld.wolfram.com/FloorFunction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for rounding functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Represents the fractional part of x
  prefs: []
  type: TYPE_NORMAL
- en: For real numbers it is defined [[R328]](#r328) as
  prefs: []
  type: TYPE_NORMAL
- en: \[x - \left\lfloor{x}\right\rfloor\]
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: returns zero for integer arguments
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: rewrite as floor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: for complex arguments
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.integers.floor`](#sympy.functions.elementary.integers.floor
    "sympy.functions.elementary.integers.floor"), [`sympy.functions.elementary.integers.ceiling`](#sympy.functions.elementary.integers.ceiling
    "sympy.functions.elementary.integers.ceiling")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R328] ([1](#id56),[2](#id57))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Fractional_part](https://en.wikipedia.org/wiki/Fractional_part)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R329](#id58)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/FractionalPart.html](https://mathworld.wolfram.com/FractionalPart.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Exponential
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: The exponential function, \(e^x\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**arg** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`log`](#sympy.functions.elementary.exponential.log "sympy.functions.elementary.exponential.log")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Returns this function as a 2-tuple representing a complex number.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.functions.elementary.complexes.re`](#sympy.functions.elementary.complexes.re
    "sympy.functions.elementary.complexes.re"), [`sympy.functions.elementary.complexes.im`](#sympy.functions.elementary.complexes.im
    "sympy.functions.elementary.complexes.im")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Returns the base of the exponential function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the next term in the Taylor series expansion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: The Lambert W function \(W(z)\) is defined as the inverse function of \(w \exp(w)\)
    [[R330]](#r330).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the value of \(W(z)\) is such that \(z = W(z) \exp(W(z))\) for
    any complex number \(z\). The Lambert W function is a multivalued function with
    infinitely many branches \(W_k(z)\), indexed by \(k \in \mathbb{Z}\). Each branch
    gives a different solution \(w\) of the equation \(z = w \exp(w)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Lambert W function has two partially real branches: the principal branch
    (\(k = 0\)) is real for real \(z > -1/e\), and the \(k = -1\) branch is real for
    \(-1/e < z < 0\). All branches except \(k = 0\) have a logarithmic singularity
    at \(z = 0\).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R330] ([1](#id59),[2](#id60))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lambert_W_function](https://en.wikipedia.org/wiki/Lambert_W_function)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Return the first derivative of this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: The natural logarithm function \(\ln(x)\) or \(\log(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Logarithms are taken with the natural base, \(e\). To get a logarithm of a different
    base `b`, use `log(x, b)`, which is essentially short-hand for `log(x)/log(b)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`log` represents the principal branch of the natural logarithm. As such it
    has a branch cut along the negative real axis and returns values having a complex
    argument in \((-\pi, \pi]\).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exp`](#sympy.functions.elementary.exponential.exp "sympy.functions.elementary.exponential.exp")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Returns this function in the form (base, exponent).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Returns this function as a complex coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Returns the first derivative of the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Returns \(e^x\), the inverse function of \(\log(x)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Returns the next term in the Taylor series expansion of \(\log(1+x)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Represent a *polar number* (see g-function Sphinx documentation).
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`exp_polar` represents the function \(Exp: \mathbb{C} \rightarrow \mathcal{S}\),
    sending the complex number \(z = a + bi\) to the polar number \(r = exp(a), \theta
    = b\). It is one of the main functions to construct polar numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'The main difference is that polar numbers do not “wrap around” at \(2 \pi\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'apart from that they behave mostly like classical complex numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.simplify.powsimp.powsimp`](../simplify/simplify.html#sympy.simplify.powsimp.powsimp
    "sympy.simplify.powsimp.powsimp"), [`polar_lift`](#sympy.functions.elementary.complexes.polar_lift
    "sympy.functions.elementary.complexes.polar_lift"), [`periodic_argument`](#sympy.functions.elementary.complexes.periodic_argument
    "sympy.functions.elementary.complexes.periodic_argument"), [`principal_branch`](#sympy.functions.elementary.complexes.principal_branch
    "sympy.functions.elementary.complexes.principal_branch")'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Represents an expression, condition pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Returns the condition of this pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Returns the expression of this pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Represents a piecewise function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: Piecewise( (expr,cond), (expr,cond), … )
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each argument is a 2-tuple defining an expression and condition
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The conds are evaluated in turn returning the first that is True. If any of
    the evaluated conds are not explicitly False, e.g. `x < 1`, the function is returned
    in symbolic form.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If the function is evaluated at a place where all conditions are False, nan
    will be returned.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Pairs where the cond is explicitly False, will be removed and no pair appearing
    after a True condition will ever be retained. If a single pair with a True condition
    remains, it will be returned, even when evaluation is False.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Booleans can contain Piecewise elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'The folded version of this results in a Piecewise whose expressions are Booleans:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'When a Boolean containing Piecewise (like cond) or a Piecewise with Boolean
    expressions (like folded_cond) is used as a condition, it is converted to an equivalent
    [`ITE`](../logic.html#sympy.logic.boolalg.ITE "sympy.logic.boolalg.ITE") object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'When a condition is an `ITE`, it will be converted to a simplified Boolean
    expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`piecewise_fold`](#sympy.functions.elementary.piecewise.piecewise_fold "sympy.functions.elementary.piecewise.piecewise_fold"),
    [`piecewise_exclusive`](#sympy.functions.elementary.piecewise.piecewise_exclusive
    "sympy.functions.elementary.piecewise.piecewise_exclusive"), [`ITE`](../logic.html#sympy.logic.boolalg.ITE
    "sympy.logic.boolalg.ITE")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Return the indefinite integral of the Piecewise such that subsequent substitution
    of x with a value will give the value of the integral (not including the constant
    of integration) up to that point. To only integrate the individual parts of Piecewise,
    use the `piecewise_integrate` method.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Piecewise.piecewise_integrate`](#sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate
    "sympy.functions.elementary.piecewise.Piecewise.piecewise_integrate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Return tuples for each argument of self that give the expression and the interval
    in which it is valid which is contained within the given domain. If a condition
    cannot be converted to a set, an error will be raised. The variable of the conditions
    is assumed to be real; sets of real values are returned.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate this piecewise function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Either return a modified version of the args or, if no modifications were made,
    return None.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modifications that are made here:'
  prefs: []
  type: TYPE_NORMAL
- en: relationals are made canonical
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: any False conditions are dropped
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: any repeat of a previous condition is ignored
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: any args past one with a true condition are dropped
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are no args left, nan will be returned. If there is a single arg with
    a True condition, its corresponding expression will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Return the Piecewise with each expression being replaced with its antiderivative.
    To obtain a continuous antiderivative, use the [`integrate()`](../integrals/integrals.html#sympy.integrals.integrals.integrate
    "sympy.integrals.integrals.integrate") function or method.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that this does not give a continuous function, e.g. at x = 1 the 3rd condition
    applies and the antiderivative there is 2*x so the value of the antiderivative
    is 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'The continuous derivative accounts for the integral *up to* the point of interest,
    however:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Piecewise._eval_integral`](#sympy.functions.elementary.piecewise.Piecewise._eval_integral
    "sympy.functions.elementary.piecewise.Piecewise._eval_integral")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise "sympy.functions.elementary.piecewise.Piecewise")
    with mutually exclusive conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr: a SymPy expression.**'
  prefs: []
  type: TYPE_NORMAL
- en: Any [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise "sympy.functions.elementary.piecewise.Piecewise")
    in the expression will be rewritten.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**skip_nan: ``bool`` (default ``False``)**'
  prefs: []
  type: TYPE_NORMAL
- en: If `skip_nan` is set to `True` then a final [`NaN`](../core.html#sympy.core.numbers.NaN
    "sympy.core.numbers.NaN") case will not be included.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**deep: ``bool`` (default ``True``)**'
  prefs: []
  type: TYPE_NORMAL
- en: If `deep` is `True` then [`piecewise_exclusive()`](#sympy.functions.elementary.piecewise.piecewise_exclusive
    "sympy.functions.elementary.piecewise.piecewise_exclusive") will rewrite any [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise
    "sympy.functions.elementary.piecewise.Piecewise") subexpressions in `expr` rather
    than just rewriting `expr` itself.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An expression equivalent to `expr` but where all [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise
    "sympy.functions.elementary.piecewise.Piecewise") have
  prefs: []
  type: TYPE_NORMAL
- en: been rewritten with mutually exclusive conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: SymPy represents the conditions of a [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise
    "sympy.functions.elementary.piecewise.Piecewise") in an “if-elif”-fashion, allowing
    more than one condition to be simultaneously True. The interpretation is that
    the first condition that is True is the case that holds. While this is a useful
    representation computationally it is not how a piecewise formula is typically
    shown in a mathematical text. The [`piecewise_exclusive()`](#sympy.functions.elementary.piecewise.piecewise_exclusive
    "sympy.functions.elementary.piecewise.piecewise_exclusive") function can be used
    to rewrite any [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise "sympy.functions.elementary.piecewise.Piecewise")
    with more typical mutually exclusive conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Note that further manipulation of the resulting [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise
    "sympy.functions.elementary.piecewise.Piecewise"), e.g. simplifying it, will most
    likely make it non-exclusive. Hence, this is primarily a function to be used in
    conjunction with printing the Piecewise or if one would like to reorder the expression-condition
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: If it is not possible to determine that all possibilities are covered by the
    different cases of the [`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise
    "sympy.functions.elementary.piecewise.Piecewise") then a final [`NaN`](../core.html#sympy.core.numbers.NaN
    "sympy.core.numbers.NaN") case will be included explicitly. This can be prevented
    by passing `skip_nan=True`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise "sympy.functions.elementary.piecewise.Piecewise"),
    [`piecewise_fold`](#sympy.functions.elementary.piecewise.piecewise_fold "sympy.functions.elementary.piecewise.piecewise_fold")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Takes an expression containing a piecewise function and returns the expression
    in piecewise form. In addition, any ITE conditions are rewritten in negation normal
    form and simplified.
  prefs: []
  type: TYPE_NORMAL
- en: The final Piecewise is evaluated (default) but if the raw form is desired, send
    `evaluate=False`; if trivial evaluation is desired, send `evaluate=None` and duplicate
    conditions and processing of True and False will be handled.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Piecewise`](#sympy.functions.elementary.piecewise.Piecewise "sympy.functions.elementary.piecewise.Piecewise"),
    [`piecewise_exclusive`](#sympy.functions.elementary.piecewise.piecewise_exclusive
    "sympy.functions.elementary.piecewise.piecewise_exclusive")'
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: The identity function
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Return, if possible, the minimum value of the list. It is named `Min` and not
    `min` to avoid conflicts with the built-in function `min`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Max`](#sympy.functions.elementary.miscellaneous.Max "sympy.functions.elementary.miscellaneous.Max")'
  prefs: []
  type: TYPE_NORMAL
- en: find maximum values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Return, if possible, the maximum value of the list.
  prefs: []
  type: TYPE_NORMAL
- en: When number of arguments is equal one, then return this argument.
  prefs: []
  type: TYPE_NORMAL
- en: When number of arguments is equal two, then return, if possible, the value from
    (a, b) that is \(\ge\) the other.
  prefs: []
  type: TYPE_NORMAL
- en: In common case, when the length of list greater than 2, the task is more complicated.
    Return only the arguments, which are greater than others, if it is possible to
    determine directional relation.
  prefs: []
  type: TYPE_NORMAL
- en: If is not possible to determine such a relation, return a partially evaluated
    result.
  prefs: []
  type: TYPE_NORMAL
- en: Assumptions are used to make the decision too.
  prefs: []
  type: TYPE_NORMAL
- en: Also, only comparable arguments are permitted.
  prefs: []
  type: TYPE_NORMAL
- en: It is named `Max` and not `max` to avoid conflicts with the built-in function
    `max`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Algorithm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The task can be considered as searching of supremums in the directed complete
    partial orders [[R331]](#r331).
  prefs: []
  type: TYPE_NORMAL
- en: The source values are sequentially allocated by the isolated subsets in which
    supremums are searched and result as Max arguments.
  prefs: []
  type: TYPE_NORMAL
- en: If the resulted supremum is single, then it is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The isolated subsets are the sets of values which are only the comparable with
    each other in the current set. E.g. natural numbers are comparable with each other,
    but not comparable with the \(x\) symbol. Another example: the symbol \(x\) with
    negative assumption is comparable with a natural number.'
  prefs: []
  type: TYPE_NORMAL
- en: Also there are “least” elements, which are comparable with all others, and have
    a zero property (maximum or minimum for all elements). For example, in case of
    \(\infty\), the allocation operation is terminated and only this value is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assumption:'
  prefs: []
  type: TYPE_NORMAL
- en: if \(A > B > C\) then \(A > C\)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if \(A = B\) then \(B\) can be removed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Min`](#sympy.functions.elementary.miscellaneous.Min "sympy.functions.elementary.miscellaneous.Min")'
  prefs: []
  type: TYPE_NORMAL
- en: find minimum values
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R331] ([1](#id61),[2](#id62))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Directed_complete_partial_order](https://en.wikipedia.org/wiki/Directed_complete_partial_order)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R332](#id63)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Lattice_%28order%29](https://en.wikipedia.org/wiki/Lattice_%28order%29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Returns the *k*-th *n*-th root of `arg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k** : int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Should be an integer in \(\{0, 1, ..., n-1\}\). Defaults to the principal root
    if \(0\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter determines if the expression should be evaluated. If `None`, its
    value is taken from `global_parameters.evaluate`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the k-th n-th root, specify k:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'To get all n n-th roots you can use the rootof function. The following examples
    show the roots of unity for n equal 2, 3 and 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'SymPy, like other symbolic algebra systems, returns the complex root of negative
    numbers. This is the principal root and differs from the text-book result that
    one might be expecting. For example, the cube root of -8 does not come back as
    -2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'The real_root function can be used to either make the principal result real
    (or simply to return the real root directly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the n//2-th n-th root of a negative number can be computed with
    root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.rootoftools.rootof`](../polys/reference.html#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"), [`sympy.core.intfunc.integer_nthroot`](../core.html#sympy.core.intfunc.integer_nthroot
    "sympy.core.intfunc.integer_nthroot"), [`sqrt`](#sympy.functions.elementary.miscellaneous.sqrt
    "sympy.functions.elementary.miscellaneous.sqrt"), [`real_root`](#sympy.functions.elementary.miscellaneous.real_root
    "sympy.functions.elementary.miscellaneous.real_root")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R333](#id64)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Square_root](https://en.wikipedia.org/wiki/Square_root)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R334](#id65)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Real_root](https://en.wikipedia.org/wiki/Real_root)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R335](#id66)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Root_of_unity](https://en.wikipedia.org/wiki/Root_of_unity)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R336](#id67)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Principal_value](https://en.wikipedia.org/wiki/Principal_value)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R337](#id68)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/CubeRoot.html](https://mathworld.wolfram.com/CubeRoot.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Returns the principal square root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**evaluate** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter determines if the expression should be evaluated. If `None`, its
    value is taken from `global_parameters.evaluate`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Note that sqrt(x**2) does not simplify to x.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because the two are not equal to each other in general. For example,
    consider x == -1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because sqrt computes the principal square root, so the square may
    put the argument in a different branch. This identity does hold if x is positive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'You can force this simplification by using the powdenest() function with the
    force option set to True:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'To get both branches of the square root you can use the rootof function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'Although `sqrt` is printed, there is no `sqrt` function so looking for `sqrt`
    in an expression will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'To find `sqrt` look for `Pow` with an exponent of `1/2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.rootoftools.rootof`](../polys/reference.html#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"), [`root`](#sympy.functions.elementary.miscellaneous.root
    "sympy.functions.elementary.miscellaneous.root"), [`real_root`](#sympy.functions.elementary.miscellaneous.real_root
    "sympy.functions.elementary.miscellaneous.real_root")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R338](#id69)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Square_root](https://en.wikipedia.org/wiki/Square_root)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R339](#id70)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Principal_value](https://en.wikipedia.org/wiki/Principal_value)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Returns the principal cube root.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**evaluate** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter determines if the expression should be evaluated. If `None`, its
    value is taken from `global_parameters.evaluate`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Note that cbrt(x**3) does not simplify to x.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because the two are not equal to each other in general. For example,
    consider \(x == -1\):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because cbrt computes the principal cube root, this identity does hold
    if \(x\) is positive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.rootoftools.rootof`](../polys/reference.html#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"), [`root`](#sympy.functions.elementary.miscellaneous.root
    "sympy.functions.elementary.miscellaneous.root"), [`real_root`](#sympy.functions.elementary.miscellaneous.real_root
    "sympy.functions.elementary.miscellaneous.real_root")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R340](#id71)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Cube_root](https://en.wikipedia.org/wiki/Cube_root)'
  prefs: []
  type: TYPE_NORMAL
- en: '[[R341](#id72)]'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Principal_value](https://en.wikipedia.org/wiki/Principal_value)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Return the real *n*’th-root of *arg* if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *n* is `None`, then all instances of \((-n)^{1/\text{odd}}\) will be changed
    to \(-n^{1/\text{odd}}\). This will only create a real root of a principal root.
    The presence of other factors may cause the result to not be real.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**evaluate** : bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The parameter determines if the expression should be evaluated. If `None`, its
    value is taken from `global_parameters.evaluate`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'If one creates a non-principal root and applies real_root, the result will
    not be real (so use with caution):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.rootoftools.rootof`](../polys/reference.html#sympy.polys.rootoftools.rootof
    "sympy.polys.rootoftools.rootof"), [`sympy.core.intfunc.integer_nthroot`](../core.html#sympy.core.intfunc.integer_nthroot
    "sympy.core.intfunc.integer_nthroot"), [`root`](#sympy.functions.elementary.miscellaneous.root
    "sympy.functions.elementary.miscellaneous.root"), [`sqrt`](#sympy.functions.elementary.miscellaneous.sqrt
    "sympy.functions.elementary.miscellaneous.sqrt")'
  prefs: []
  type: TYPE_NORMAL
