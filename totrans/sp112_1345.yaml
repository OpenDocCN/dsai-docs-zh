- en: scipy.stats.monte_carlo_test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.monte_carlo_test.html#scipy.stats.monte_carlo_test)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Perform a Monte Carlo hypothesis test.
  prefs: []
  type: TYPE_NORMAL
- en: '*data* contains a sample or a sequence of one or more samples. *rvs* specifies
    the distribution(s) of the sample(s) in *data* under the null hypothesis. The
    value of *statistic* for the given *data* is compared against a Monte Carlo null
    distribution: the value of the statistic for each of *n_resamples* sets of samples
    generated using *rvs*. This gives the p-value, the probability of observing such
    an extreme value of the test statistic under the null hypothesis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data**array-like or sequence of array-like'
  prefs: []
  type: TYPE_NORMAL
- en: An array or sequence of arrays of observations.
  prefs: []
  type: TYPE_NORMAL
- en: '**rvs**callable or tuple of callables'
  prefs: []
  type: TYPE_NORMAL
- en: A callable or sequence of callables that generates random variates under the
    null hypothesis. Each element of *rvs* must be a callable that accepts keyword
    argument `size` (e.g. `rvs(size=(m, n))`) and returns an N-d array sample of that
    shape. If *rvs* is a sequence, the number of callables in *rvs* must match the
    number of samples in *data*, i.e. `len(rvs) == len(data)`. If *rvs* is a single
    callable, *data* is treated as a single sample.
  prefs: []
  type: TYPE_NORMAL
- en: '**statistic**callable'
  prefs: []
  type: TYPE_NORMAL
- en: Statistic for which the p-value of the hypothesis test is to be calculated.
    *statistic* must be a callable that accepts a sample (e.g. `statistic(sample)`)
    or `len(rvs)` separate samples (e.g. `statistic(samples1, sample2)` if *rvs* contains
    two callables and *data* contains two samples) and returns the resulting statistic.
    If *vectorized* is set `True`, *statistic* must also accept a keyword argument
    *axis* and be vectorized to compute the statistic along the provided *axis* of
    the samples in *data*.
  prefs: []
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: If *vectorized* is set `False`, *statistic* will not be passed keyword argument
    *axis* and is expected to calculate the statistic only for 1D samples. If `True`,
    *statistic* will be passed keyword argument *axis* and is expected to calculate
    the statistic along *axis* when passed ND sample arrays. If `None` (default),
    *vectorized* will be set `True` if `axis` is a parameter of *statistic*. Use of
    a vectorized statistic typically reduces computation time.
  prefs: []
  type: TYPE_NORMAL
- en: '**n_resamples**int, default: 9999'
  prefs: []
  type: TYPE_NORMAL
- en: Number of samples drawn from each of the callables of *rvs*. Equivalently, the
    number statistic values under the null hypothesis used as the Monte Carlo null
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**batch**int, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The number of Monte Carlo samples to process in each call to *statistic*. Memory
    usage is O( *batch* * `sample.size[axis]` ). Default is `None`, in which case
    *batch* equals *n_resamples*.
  prefs: []
  type: TYPE_NORMAL
- en: '**alternative**{‘two-sided’, ‘less’, ‘greater’}'
  prefs: []
  type: TYPE_NORMAL
- en: The alternative hypothesis for which the p-value is calculated. For each alternative,
    the p-value is defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`''greater''` : the percentage of the null distribution that is greater than
    or equal to the observed value of the test statistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''less''` : the percentage of the null distribution that is less than or equal
    to the observed value of the test statistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''two-sided''` : twice the smaller of the p-values above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis**int, default: 0'
  prefs: []
  type: TYPE_NORMAL
- en: The axis of *data* (or each sample within *data*) over which to calculate the
    statistic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**res**MonteCarloTestResult'
  prefs: []
  type: TYPE_NORMAL
- en: 'An object with attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: statisticfloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The test statistic of the observed *data*.
  prefs: []
  type: TYPE_NORMAL
- en: pvaluefloat or ndarray
  prefs: []
  type: TYPE_NORMAL
- en: The p-value for the given alternative.
  prefs: []
  type: TYPE_NORMAL
- en: null_distributionndarray
  prefs: []
  type: TYPE_NORMAL
- en: The values of the test statistic generated under the null hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[1]'
  prefs: []
  type: TYPE_NORMAL
- en: 'B. Phipson and G. K. Smyth. “Permutation P-values Should Never Be Zero: Calculating
    Exact P-values When Permutations Are Randomly Drawn.” Statistical Applications
    in Genetics and Molecular Biology 9.1 (2010).'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we wish to test whether a small sample has been drawn from a normal
    distribution. We decide that we will use the skew of the sample as a test statistic,
    and we will consider a p-value of 0.05 to be statistically significant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After collecting our data, we calculate the observed value of the test statistic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To determine the probability of observing such an extreme value of the skewness
    by chance if the sample were drawn from the normal distribution, we can perform
    a Monte Carlo hypothesis test. The test will draw many samples at random from
    their normal distribution, calculate the skewness of each sample, and compare
    our original skewness against this distribution to determine an approximate p-value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The probability of obtaining a test statistic less than or equal to the observed
    value under the null hypothesis is ~70%. This is greater than our chosen threshold
    of 5%, so we cannot consider this to be significant evidence against the null
    hypothesis.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this p-value essentially matches that of [`scipy.stats.skewtest`](scipy.stats.skewtest.html#scipy.stats.skewtest
    "scipy.stats.skewtest"), which relies on an asymptotic distribution of a test
    statistic based on the sample skewness.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This asymptotic approximation is not valid for small sample sizes, but [`monte_carlo_test`](#scipy.stats.monte_carlo_test
    "scipy.stats.monte_carlo_test") can be used with samples of any size.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The Monte Carlo distribution of the test statistic is provided for further investigation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![../../_images/scipy-stats-monte_carlo_test-1.png](../Images/09f672f0f150615035080fdbab28aa2f.png)'
  prefs: []
  type: TYPE_IMG
