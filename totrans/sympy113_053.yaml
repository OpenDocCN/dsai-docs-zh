- en: Predicates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谓词
- en: 原文：[https://docs.sympy.org/latest/modules/assumptions/predicates.html](https://docs.sympy.org/latest/modules/assumptions/predicates.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sympy.org/latest/modules/assumptions/predicates.html](https://docs.sympy.org/latest/modules/assumptions/predicates.html)
- en: '## Common'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '## Common'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Generic predicate.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通用谓词。
- en: Explanation
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.is_true(x))` is true iff `x` is true. This only makes sense if `x` is
    a boolean object.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.is_true(x))` 是当且仅当 `x` 为真时为真。这只有当 `x` 是布尔对象时才有意义。'
- en: Examples
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Wrapping another applied predicate just returns the applied predicate.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 多余地再次包装另一个应用的谓词只会返回应用的谓词。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Wrapping binary relation classes in SymPy core returns applied binary relational
    predicates.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SymPy 核心中将二元关系类包装为应用的二元关系谓词。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notes
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注释
- en: This class is designed to wrap the boolean objects so that they can behave as
    if they are applied predicates. Consequently, wrapping another applied predicate
    is unnecessary and thus it just returns the argument. Also, binary relation classes
    in SymPy core have binary predicates to represent themselves and thus wrapping
    them with `Q.is_true` converts them to these applied predicates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类被设计成包装布尔对象，使它们能够表现得像应用的谓词一样。因此，多余地再次包装另一个应用的谓词是不必要的，因此它只返回参数。此外，SymPy 核心中的二元关系类具有用于表示自身的二元谓词，因此用
    `Q.is_true` 包装它们会将它们转换为这些应用的谓词。
- en: Handler
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: IsTrueHandler'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: IsTrueHandler'
- en: Wrapper allowing to query the truth value of a boolean expression.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包装器允许查询布尔表达式的真值。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Commutative predicate.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可交换谓词。
- en: Explanation
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.commutative(x))` is true iff `x` commutes with any other object with
    respect to multiplication operation.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.commutative(x))` 是当且仅当 `x` 在乘法运算中与任何其他对象都可交换时为真。'
- en: Handler
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: CommutativeHandler'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: CommutativeHandler'
- en: Handler for key ‘commutative’.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Handler for key ‘commutative’.
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Calculus
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微积分
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finite number predicate.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有限数谓词。
- en: Explanation
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.finite(x)` is true if `x` is a number but neither an infinity nor a `NaN`.
    In other words, `ask(Q.finite(x))` is true for all numerical `x` having a bounded
    absolute value.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.finite(x)` 是当且仅当 `x` 是一个数但既不是无穷也不是 `NaN` 时为真。换句话说，对于所有有界绝对值的数值 `x`，`ask(Q.finite(x))`
    都为真。'
- en: Examples
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Handler
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: FiniteHandler'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: FiniteHandler'
- en: Handler for Q.finite. Test that an expression is bounded respect to all its
    variables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Handler for Q.finite. Test that an expression is bounded respect to all its
    variables.
- en: References
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R9](#id2)]'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R9](#id2)]'
- en: '[https://en.wikipedia.org/wiki/Finite](https://en.wikipedia.org/wiki/Finite)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Finite](https://en.wikipedia.org/wiki/Finite)'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Infinite number predicate.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无穷数谓词。
- en: '`Q.infinite(x)` is true iff the absolute value of `x` is infinity.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.infinite(x)` 是当且仅当 `x` 的绝对值为无穷时为真。'
- en: Handler
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: InfiniteHandler'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: InfiniteHandler'
- en: Handler for Q.infinite key.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Handler for Q.infinite key.
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Matrix
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Symmetric matrix predicate.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对称矩阵谓词。
- en: Explanation
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.symmetric(x)` is true iff `x` is a square matrix and is equal to its transpose.
    Every square diagonal matrix is a symmetric matrix.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.symmetric(x)` 是当且仅当 `x` 是方阵且等于其转置时为真。每个方阵对角矩阵都是对称矩阵。'
- en: Examples
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Handler
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: SymmetricHandler'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: SymmetricHandler'
- en: Handler for Q.symmetric.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Handler for Q.symmetric.
- en: References
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R10](#id3)]'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R10](#id3)]'
- en: '[https://en.wikipedia.org/wiki/Symmetric_matrix](https://en.wikipedia.org/wiki/Symmetric_matrix)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Symmetric_matrix](https://en.wikipedia.org/wiki/Symmetric_matrix)'
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Invertible matrix predicate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可逆矩阵谓词。
- en: Explanation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.invertible(x)` is true iff `x` is an invertible matrix. A square matrix
    is called invertible only if its determinant is 0.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.invertible(x)` 是当且仅当 `x` 是可逆矩阵时为真。一个方阵只有在其行列式为非零时才称为可逆矩阵。'
- en: Examples
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Handler
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: InvertibleHandler'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: InvertibleHandler'
- en: Handler for Q.invertible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Handler for Q.invertible.
- en: References
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R11](#id4)]'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R11](#id4)]'
- en: '[https://en.wikipedia.org/wiki/Invertible_matrix](https://en.wikipedia.org/wiki/Invertible_matrix)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Invertible_matrix](https://en.wikipedia.org/wiki/Invertible_matrix)'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Orthogonal matrix predicate.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正交矩阵谓词。
- en: Explanation
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.orthogonal(x)` is true iff `x` is an orthogonal matrix. A square matrix
    `M` is an orthogonal matrix if it satisfies `M^TM = MM^T = I` where `M^T` is the
    transpose matrix of `M` and `I` is an identity matrix. Note that an orthogonal
    matrix is necessarily invertible.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.orthogonal(x)` 是当且仅当 `x` 是正交矩阵时为真。一个方阵 `M` 是正交矩阵，如果它满足 `M^TM = MM^T = I`，其中
    `M^T` 是 `M` 的转置矩阵，`I` 是单位矩阵。需要注意的是，正交矩阵必定可逆。'
- en: Examples
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Handler
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Handler
- en: 'Multiply dispatched method: OrthogonalHandler'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'Multiply dispatched method: OrthogonalHandler'
- en: Handler for key ‘orthogonal’.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘orthogonal’的处理器。
- en: References
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R12](#id5)]'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R12](#id5)]'
- en: '[https://en.wikipedia.org/wiki/Orthogonal_matrix](https://en.wikipedia.org/wiki/Orthogonal_matrix)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Orthogonal_matrix](https://en.wikipedia.org/wiki/Orthogonal_matrix)'
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Unitary matrix predicate.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 酉矩阵断言。
- en: Explanation
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.unitary(x)` is true iff `x` is a unitary matrix. Unitary matrix is an analogue
    to orthogonal matrix. A square matrix `M` with complex elements is unitary if
    :math:`M^TM = MM^T= I` where :math:`M^T` is the conjugate transpose matrix of
    `M`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.unitary(x)` 当且仅当 `x` 是一个酉矩阵时为真。酉矩阵是正交矩阵的类比。一个复元素矩阵 `M` 是酉矩阵如果 :math:`M^TM
    = MM^T= I`，其中 :math:`M^T` 是 `M` 的共轭转置矩阵。'
- en: Examples
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Handler
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: UnitaryHandler'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：UnitaryHandler
- en: Handler for key ‘unitary’.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘unitary’的处理器。
- en: References
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R13](#id6)]'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R13](#id6)]'
- en: '[https://en.wikipedia.org/wiki/Unitary_matrix](https://en.wikipedia.org/wiki/Unitary_matrix)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Unitary_matrix](https://en.wikipedia.org/wiki/Unitary_matrix)'
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Positive definite matrix predicate.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正定矩阵断言。
- en: Explanation
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: If \(M\) is a \(n \times n\) symmetric real matrix, it is said to be positive
    definite if \(Z^TMZ\) is positive for every non-zero column vector \(Z\) of \(n\)
    real numbers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 \(M\) 是一个 \(n \times n\) 的对称实矩阵，当对于每个非零的 \(n\) 维实数列向量 \(Z\)，\(Z^TMZ\) 都是正数时，称其为正定矩阵。
- en: Examples
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Handler
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: PositiveDefiniteHandler'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：PositiveDefiniteHandler
- en: Handler for key ‘positive_definite’.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘positive_definite’的处理器。
- en: References
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R14](#id7)]'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R14](#id7)]'
- en: '[https://en.wikipedia.org/wiki/Positive-definite_matrix](https://en.wikipedia.org/wiki/Positive-definite_matrix)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Positive-definite_matrix](https://en.wikipedia.org/wiki/Positive-definite_matrix)'
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Upper triangular matrix predicate.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上三角矩阵断言。
- en: Explanation
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A matrix \(M\) is called upper triangular matrix if \(M_{ij}=0\) for \(i<j\).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果矩阵 \(M\) 满足 \(M_{ij}=0\) 对于 \(i<j\)，则称其为上三角矩阵。
- en: Examples
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Handler
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: UpperTriangularHandler'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：UpperTriangularHandler
- en: Handler for key ‘upper_triangular’.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘upper_triangular’的处理器。
- en: References
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R15](#id8)]'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R15](#id8)]'
- en: '[https://mathworld.wolfram.com/UpperTriangularMatrix.html](https://mathworld.wolfram.com/UpperTriangularMatrix.html)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/UpperTriangularMatrix.html](https://mathworld.wolfram.com/UpperTriangularMatrix.html)'
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Lower triangular matrix predicate.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下三角矩阵断言。
- en: Explanation
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: A matrix \(M\) is called lower triangular matrix if \(M_{ij}=0\) for \(i>j\).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果矩阵 \(M\) 满足 \(M_{ij}=0\) 对于 \(i>j\)，则称其为下三角矩阵。
- en: Examples
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Handler
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: LowerTriangularHandler'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：LowerTriangularHandler
- en: Handler for key ‘lower_triangular’.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘lower_triangular’的处理器。
- en: References
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R16](#id9)]'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R16](#id9)]'
- en: '[https://mathworld.wolfram.com/LowerTriangularMatrix.html](https://mathworld.wolfram.com/LowerTriangularMatrix.html)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/LowerTriangularMatrix.html](https://mathworld.wolfram.com/LowerTriangularMatrix.html)'
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Diagonal matrix predicate.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对角矩阵断言。
- en: Explanation
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.diagonal(x)` is true iff `x` is a diagonal matrix. A diagonal matrix is
    a matrix in which the entries outside the main diagonal are all zero.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.diagonal(x)` 当且仅当 `x` 是一个对角矩阵时为真。对角矩阵是主对角线以外的元素全部为零的矩阵。'
- en: Examples
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Handler
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: DiagonalHandler'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：DiagonalHandler
- en: Handler for key ‘diagonal’.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘diagonal’的处理器。
- en: References
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R17](#id10)]'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R17](#id10)]'
- en: '[https://en.wikipedia.org/wiki/Diagonal_matrix](https://en.wikipedia.org/wiki/Diagonal_matrix)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Diagonal_matrix](https://en.wikipedia.org/wiki/Diagonal_matrix)'
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Fullrank matrix predicate.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 全秩矩阵断言。
- en: Explanation
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.fullrank(x)` is true iff `x` is a full rank matrix. A matrix is full rank
    if all rows and columns of the matrix are linearly independent. A square matrix
    is full rank iff its determinant is nonzero.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.fullrank(x)` 当且仅当 `x` 是一个满秩矩阵时为真。矩阵的所有行和列线性无关时称其为满秩矩阵。一个方阵的行列式非零时，称其为满秩矩阵。'
- en: Examples
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Handler
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: FullRankHandler'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：FullRankHandler
- en: Handler for key ‘fullrank’.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为‘fullrank’的处理器。
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Square matrix predicate.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 方阵断言。
- en: Explanation
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.square(x)` is true iff `x` is a square matrix. A square matrix is a matrix
    with the same number of rows and columns.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.square(x)` 当且仅当 `x` 是一个方阵时为真。方阵是行数和列数相等的矩阵。'
- en: Examples
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Handler
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: SquareHandler'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：SquareHandler
- en: Handler for Q.square.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 处理键为 Q.square 的处理器。
- en: References
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R18](#id11)]'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R18](#id11)]'
- en: '[https://en.wikipedia.org/wiki/Square_matrix](https://en.wikipedia.org/wiki/Square_matrix)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Square_matrix](https://en.wikipedia.org/wiki/Square_matrix)'
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Integer elements matrix predicate.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 整数元素矩阵断言。
- en: Explanation
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.integer_elements(x)` is true iff all the elements of `x` are integers.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Handler
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: IntegerElementsHandler'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘integer_elements’.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Real elements matrix predicate.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`Q.real_elements(x)` is true iff all the elements of `x` are real numbers.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Handler
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: RealElementsHandler'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘real_elements’.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Complex elements matrix predicate.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`Q.complex_elements(x)` is true iff all the elements of `x` are complex numbers.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Handler
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: ComplexElementsHandler'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘complex_elements’.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Singular matrix predicate.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: A matrix is singular iff the value of its determinant is 0.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Handler
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: SingularHandler'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Predicate fore key ‘singular’.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[[R19](#id12)]'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[https://mathworld.wolfram.com/SingularMatrix.html](https://mathworld.wolfram.com/SingularMatrix.html)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Normal matrix predicate.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: A matrix is normal if it commutes with its conjugate transpose.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Handler
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: NormalHandler'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Predicate fore key ‘normal’.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[[R20](#id13)]'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Normal_matrix](https://en.wikipedia.org/wiki/Normal_matrix)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Triangular matrix predicate.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`Q.triangular(X)` is true if `X` is one that is either lower triangular or
    upper triangular.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Handler
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: TriangularHandler'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Predicate fore key ‘triangular’.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[[R21](#id14)]'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Triangular_matrix](https://en.wikipedia.org/wiki/Triangular_matrix)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Unit triangular matrix predicate.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: A unit triangular matrix is a triangular matrix with 1s on the diagonal.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Handler
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: UnitTriangularHandler'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Predicate fore key ‘unit_triangular’.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Number Theory
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Even number predicate.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`ask(Q.even(x))` is true iff `x` belongs to the set of even integers.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Handler
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: EvenHandler'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘even’.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Odd number predicate.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '`ask(Q.odd(x))` is true iff `x` belongs to the set of odd numbers.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Handler
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: OddHandler'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘odd’. Test that an expression represents an odd number.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Prime number predicate.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`ask(Q.prime(x))` is true iff `x` is a natural number greater than 1 that has
    no positive divisors other than `1` and the number itself.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Handler
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: PrimeHandler'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘prime’. Test that an expression represents a prime number.
    When the expression is an exact number, the result (when True) is subject to the
    limitations of isprime() which is used to return the result.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Composite number predicate.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '`ask(Q.composite(x))` is true iff `x` is a positive integer and has at least
    one positive divisor other than `1` and the number itself.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Handler
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply dispatched method: CompositeHandler'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Handler for key ‘composite’.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Order
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Positive real number predicate.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.positive(x)` is true iff `x` is real and \(x > 0\), that is if `x` is in
    the interval \((0, \infty)\). In particular, infinity is not positive.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.positive(x)` 当且仅当 `x` 是实数且 \( x > 0 \) 时为真，即 `x` 在区间 \((0, \infty)\) 内。特别地，无穷不是正数。'
- en: 'A few important facts about positive numbers:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 关于正数的几个重要事实：
- en: Note that `Q.nonpositive` and `~Q.positive` are *not* the same
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 `Q.nonpositive` 和 `~Q.positive` *不* 是相同的。
- en: thing. `~Q.positive(x)` simply means that `x` is not positive, whereas `Q.nonpositive(x)`
    means that `x` is real and not positive, i.e., `Q.nonpositive(x)` is logically
    equivalent to \(Q.negative(x) | Q.zero(x)`\). So for example, `~Q.positive(I)`
    is true, whereas `Q.nonpositive(I)` is false.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事物。 `~Q.positive(x)` 简单地表示 `x` 不是正数，而 `Q.nonpositive(x)` 表示 `x` 是实数且不是正数，即 `Q.nonpositive(x)`
    在逻辑上等价于 \(Q.negative(x) | Q.zero(x)\)。例如，`~Q.positive(I)` 为真，而 `Q.nonpositive(I)`
    为假。
- en: See the documentation of `Q.real` for more information about
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看有关 `Q.real` 的文档以获取更多信息
- en: related facts.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关事实。
- en: Examples
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE76]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Handler
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: PositiveHandler'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：正数处理程序
- en: Handler for key ‘positive’. Test that an expression is strictly greater than
    zero.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 键为‘正数’的处理程序。测试表达式是否严格大于零。
- en: '[PRE77]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Negative number predicate.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 负数谓词。
- en: Explanation
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.negative(x)` is true iff `x` is a real number and \(x < 0\), that is, it
    is in the interval \((-\infty, 0)\). Note in particular that negative infinity
    is not negative.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.negative(x)` 当且仅当 `x` 是实数且 \( x < 0 \) 时为真，即 `x` 在区间 \((-\infty, 0)\) 内。特别注意负无穷不是负数。'
- en: 'A few important facts about negative numbers:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 关于负数的几个重要事实：
- en: Note that `Q.nonnegative` and `~Q.negative` are *not* the same
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 `Q.nonnegative` 和 `~Q.negative` *不* 是相同的。
- en: thing. `~Q.negative(x)` simply means that `x` is not negative, whereas `Q.nonnegative(x)`
    means that `x` is real and not negative, i.e., `Q.nonnegative(x)` is logically
    equivalent to `Q.zero(x) | Q.positive(x)`. So for example, `~Q.negative(I)` is
    true, whereas `Q.nonnegative(I)` is false.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事物。 `~Q.negative(x)` 简单地表示 `x` 不是负数，而 `Q.nonnegative(x)` 表示 `x` 是实数且不是负数，即 `Q.nonnegative(x)`
    在逻辑上等价于 `Q.zero(x) | Q.positive(x)`。例如，`~Q.negative(I)` 为真，而 `Q.nonnegative(I)`
    为假。
- en: See the documentation of `Q.real` for more information about
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看有关 `Q.real` 的文档以获取更多信息。
- en: related facts.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关事实。
- en: Examples
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE79]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Handler
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: NegativeHandler'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：负数处理程序
- en: Handler for Q.negative. Test that an expression is strictly less than zero.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 用于负数的处理程序。测试表达式是否严格小于零。
- en: '[PRE80]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Zero number predicate.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 零数谓词。
- en: Explanation
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.zero(x))` is true iff the value of `x` is zero.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.zero(x))` 当且仅当 `x` 的值为零时为真。'
- en: Examples
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE82]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Handler
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: ZeroHandler'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：零处理程序
- en: Handler for key ‘zero’.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 键为‘zero’的处理程序。
- en: '[PRE83]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Nonzero real number predicate.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 非零实数谓词。
- en: Explanation
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.nonzero(x))` is true iff `x` is real and `x` is not zero. Note in particular
    that `Q.nonzero(x)` is false if `x` is not real. Use `~Q.zero(x)` if you want
    the negation of being zero without any real assumptions.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.nonzero(x))` 当且仅当 `x` 是实数且 `x` 不为零时为真。特别注意，如果 `x` 不是实数，则 `Q.nonzero(x)`
    为假。如果要求不带任何实数假设的非零否定，请使用 `~Q.zero(x)`。'
- en: 'A few important facts about nonzero numbers:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 关于非零数的几个重要事实：
- en: '`Q.nonzero` is logically equivalent to `Q.positive | Q.negative`.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Q.nonzero` 在逻辑上等价于 `Q.positive | Q.negative`。'
- en: See the documentation of `Q.real` for more information about
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看有关 `Q.real` 的文档以获取更多信息
- en: related facts.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关事实。
- en: Examples
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE85]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Handler
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: NonZeroHandler'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：非零处理程序
- en: Handler for key ‘nonzero’. Test that an expression is not identically zero.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 键为‘非零’的处理程序。测试表达式是否不恒为零。
- en: '[PRE86]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Nonpositive real number predicate.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 非正实数谓词。
- en: Explanation
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.nonpositive(x))` is true iff `x` belongs to the set of negative numbers
    including zero.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.nonpositive(x))` 当且仅当 `x` 属于包括零的负数集时为真。'
- en: Note that `Q.nonpositive` and `~Q.positive` are *not* the same
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意 `Q.nonpositive` 和 `~Q.positive` *不* 是相同的。
- en: thing. `~Q.positive(x)` simply means that `x` is not positive, whereas `Q.nonpositive(x)`
    means that `x` is real and not positive, i.e., `Q.nonpositive(x)` is logically
    equivalent to \(Q.negative(x) | Q.zero(x)`\). So for example, `~Q.positive(I)`
    is true, whereas `Q.nonpositive(I)` is false.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事物。 `~Q.positive(x)` 简单地表示 `x` 不是正数，而 `Q.nonpositive(x)` 表示 `x` 是实数且不是正数，即 `Q.nonpositive(x)`
    在逻辑上等价于 \(Q.negative(x) | Q.zero(x)\)。例如，`~Q.positive(I)` 为真，而 `Q.nonpositive(I)`
    为假。
- en: Examples
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE88]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Handler
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: NonPositiveHandler'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：非正数处理程序
- en: Handler for key ‘nonpositive’.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 键为‘非正数’的处理程序。
- en: '[PRE90]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Nonnegative real number predicate.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 非负实数谓词。
- en: Explanation
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.nonnegative(x))` is true iff `x` belongs to the set of positive numbers
    including zero.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.nonnegative(x))` 当且仅当 `x` 属于包括零在内的正数集时为真。'
- en: Note that `Q.nonnegative` and `~Q.negative` are *not* the same
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，`Q.nonnegative` 和 `~Q.negative` *不* 是相同的
- en: thing. `~Q.negative(x)` simply means that `x` is not negative, whereas `Q.nonnegative(x)`
    means that `x` is real and not negative, i.e., `Q.nonnegative(x)` is logically
    equivalent to `Q.zero(x) | Q.positive(x)`. So for example, `~Q.negative(I)` is
    true, whereas `Q.nonnegative(I)` is false.
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事情。`~Q.negative(x)` 简单地意味着 `x` 不是负数，而 `Q.nonnegative(x)` 意味着 `x` 是实数且不为负数，即
    `Q.nonnegative(x)` 在逻辑上等价于 `Q.zero(x) | Q.positive(x)`。因此，例如，`~Q.negative(I)`
    为真，而 `Q.nonnegative(I)` 为假。
- en: Examples
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE92]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Handler
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 处理
- en: 'Multiply dispatched method: NonNegativeHandler'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 多重调度方法：非负数处理器
- en: Handler for Q.nonnegative.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Q.nonnegative。
- en: '[PRE93]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Sets
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: '[PRE94]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Integer predicate.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 整数谓词。
- en: Explanation
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.integer(x)` is true iff `x` belongs to the set of integer numbers.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.integer(x)` 当且仅当 `x` 属于整数集合时为真。'
- en: Examples
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE95]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Handler
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 处理
- en: 'Multiply dispatched method: IntegerHandler'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 多重调度方法：整数处理器
- en: Handler for Q.integer.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Q.integer。
- en: Test that an expression belongs to the field of integer numbers.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 测试表达式是否属于整数域。
- en: References
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R22](#id15)]'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R22](#id15)]'
- en: '[https://en.wikipedia.org/wiki/Integer](https://en.wikipedia.org/wiki/Integer)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Integer](https://en.wikipedia.org/wiki/Integer)'
- en: '[PRE96]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Rational number predicate.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 有理数谓词。
- en: Explanation
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.rational(x)` is true iff `x` belongs to the set of rational numbers.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.rational(x)` 当且仅当 `x` 属于有理数集合时为真。'
- en: Examples
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE98]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Handler
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 处理
- en: 'Multiply dispatched method: RationalHandler'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 多重调度方法：有理数处理器
- en: Handler for Q.rational.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Q.rational。
- en: Test that an expression belongs to the field of rational numbers.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 测试表达式是否属于有理数域。
- en: References
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R23](#id16)]'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R23](#id16)]'
- en: '[https://en.wikipedia.org/wiki/Rational_number](https://en.wikipedia.org/wiki/Rational_number)'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Rational_number](https://en.wikipedia.org/wiki/Rational_number)'
- en: '[PRE99]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Irrational number predicate.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 无理数谓词。
- en: Explanation
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.irrational(x)` is true iff `x` is any real number that cannot be expressed
    as a ratio of integers.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.irrational(x)` 当且仅当 `x` 是任何不能表示为整数比的实数时为真。'
- en: Examples
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE101]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Handler
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 处理
- en: 'Multiply dispatched method: IrrationalHandler'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 多重调度方法：无理数处理器
- en: Handler for Q.irrational.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 Q.irrational。
- en: Test that an expression is irrational numbers.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 测试表达式是否是无理数。
- en: References
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[[R24](#id17)]'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R24](#id17)]'
- en: '[https://en.wikipedia.org/wiki/Irrational_number](https://en.wikipedia.org/wiki/Irrational_number)'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Irrational_number](https://en.wikipedia.org/wiki/Irrational_number)'
- en: '[PRE102]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Real number predicate.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 实数谓词。
- en: Explanation
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.real(x)` is true iff `x` is a real number, i.e., it is in the interval \((-\infty,
    \infty)\). Note that, in particular the infinities are not real. Use `Q.extended_real`
    if you want to consider those as well.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.real(x)` 当且仅当 `x` 是实数时为真，即它在区间 \((-\infty, \infty)\) 内。请注意，特别是无穷大不是实数。如果要考虑这些，请使用
    `Q.extended_real`。'
- en: 'A few important facts about reals:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实数的几个重要事实：
- en: Every real number is positive, negative, or zero. Furthermore,
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个实数要么是正数、负数或零。此外，
- en: because these sets are pairwise disjoint, each real number is exactly one of
    those three.
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为这些集合两两不交，每个实数恰好是这三个集合中的一个。
- en: Every real number is also complex.
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个实数也是复数。
- en: Every real number is finite.
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个实数都是有限的。
- en: Every real number is either rational or irrational.
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个实数要么是有理数要么是无理数。
- en: Every real number is either algebraic or transcendental.
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个实数要么是代数的要么是超越的。
- en: The facts `Q.negative`, `Q.zero`, `Q.positive`,
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事实 `Q.negative`、`Q.zero`、`Q.positive`，
- en: '`Q.nonnegative`, `Q.nonpositive`, `Q.nonzero`, `Q.integer`, `Q.rational`, and
    `Q.irrational` all imply `Q.real`, as do all facts that imply those facts.'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Q.nonnegative`、`Q.nonpositive`、`Q.nonzero`、`Q.integer`、`Q.rational` 和 `Q.irrational`
    都意味着 `Q.real`，就像暗示这些事实的所有事实一样。'
- en: The facts `Q.algebraic`, and `Q.transcendental` do not imply
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事实 `Q.algebraic` 和 `Q.transcendental` 不意味着
- en: '`Q.real`; they imply `Q.complex`. An algebraic or transcendental number may
    or may not be real.'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Q.real`；它们暗示 `Q.complex`。代数或超越数可能是实数也可能不是。'
- en: The “non” facts (i.e., `Q.nonnegative`, `Q.nonzero`,
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “非”事实（即 `Q.nonnegative`、`Q.nonzero`，
- en: '`Q.nonpositive` and `Q.noninteger`) are not equivalent to not the fact, but
    rather, not the fact *and* `Q.real`. For example, `Q.nonnegative` means `~Q.negative
    & Q.real`. So for example, `I` is not nonnegative, nonzero, or nonpositive.'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Q.nonpositive` 和 `Q.noninteger`）与事实不等同，而是事实和`Q.real`。例如，`Q.nonnegative` 意味着
    `~Q.negative & Q.real`。因此，例如，`I` 不是非负、非零或非正。'
- en: Examples
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE104]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Handler
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 处理
- en: 'Multiply dispatched method: RealHandler'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：RealHandler
- en: Handler for Q.real.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: Q.real 的处理器。
- en: Test that an expression belongs to the field of real numbers.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于实数域。
- en: References
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R25](#id18)]'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R25](#id18)]'
- en: '[https://en.wikipedia.org/wiki/Real_number](https://en.wikipedia.org/wiki/Real_number)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Real_number](https://en.wikipedia.org/wiki/Real_number)'
- en: '[PRE105]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Extended real predicate.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展实数判断。
- en: Explanation
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.extended_real(x)` is true iff `x` is a real number or \(\{-\infty, \infty\}\).'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.extended_real(x)` 当且仅当 `x` 是实数或 \(\{-\infty, \infty\}\) 时为真。'
- en: See documentation of `Q.real` for more information about related facts.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 有关相关事实的 `Q.real` 文档，请参阅文档。
- en: Examples
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE107]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Handler
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: ExtendedRealHandler'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：ExtendedRealHandler
- en: Handler for Q.extended_real.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: Q.extended_real 的处理器。
- en: Test that an expression belongs to the field of extended real
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于扩展实数域
- en: numbers, that is real numbers union {Infinity, -Infinity}.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 数字，即实数并集 {Infinity, -Infinity}。
- en: '[PRE108]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Hermitian predicate.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 厄尔米特数判断。
- en: Explanation
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`ask(Q.hermitian(x))` is true iff `x` belongs to the set of Hermitian operators.'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`ask(Q.hermitian(x))` 当且仅当 `x` 属于厄尔米特操作符集合时为真。'
- en: Handler
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: HermitianHandler'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：HermitianHandler
- en: Handler for Q.hermitian.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: Q.hermitian 的处理器。
- en: Test that an expression belongs to the field of Hermitian operators.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于厄尔米特操作符域。
- en: References
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R26](#id19)]'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R26](#id19)]'
- en: '[https://mathworld.wolfram.com/HermitianOperator.html](https://mathworld.wolfram.com/HermitianOperator.html)'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/HermitianOperator.html](https://mathworld.wolfram.com/HermitianOperator.html)'
- en: '[PRE110]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Complex number predicate.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 复数判断。
- en: Explanation
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.complex(x)` is true iff `x` belongs to the set of complex numbers. Note
    that every complex number is finite.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.complex(x)` 当且仅当 `x` 属于复数集合时为真。请注意每个复数都是有限的。'
- en: Examples
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE112]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Handler
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: ComplexHandler'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：ComplexHandler
- en: Handler for Q.complex.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: Q.complex 的处理器。
- en: Test that an expression belongs to the field of complex numbers.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于复数域。
- en: References
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R27](#id20)]'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R27](#id20)]'
- en: '[https://en.wikipedia.org/wiki/Complex_number](https://en.wikipedia.org/wiki/Complex_number)'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Complex_number](https://en.wikipedia.org/wiki/Complex_number)'
- en: '[PRE113]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Imaginary number predicate.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 虚数判断。
- en: Explanation
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.imaginary(x)` is true iff `x` can be written as a real number multiplied
    by the imaginary unit `I`. Please note that `0` is not considered to be an imaginary
    number.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.imaginary(x)` 当且仅当 `x` 可以写成实数乘以虚数单位 `I` 时为真。请注意 `0` 不被认为是虚数。'
- en: Examples
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE115]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Handler
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: ImaginaryHandler'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：ImaginaryHandler
- en: Handler for Q.imaginary.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: Q.imaginary 的处理器。
- en: Test that an expression belongs to the field of imaginary numbers,
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于虚数域，
- en: that is, numbers in the form x*I, where x is real.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 即形如 x*I 的数，其中 x 是实数。
- en: References
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R28](#id21)]'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R28](#id21)]'
- en: '[https://en.wikipedia.org/wiki/Imaginary_number](https://en.wikipedia.org/wiki/Imaginary_number)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Imaginary_number](https://en.wikipedia.org/wiki/Imaginary_number)'
- en: '[PRE116]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Antihermitian predicate.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 反埃尔米特数判断。
- en: Explanation
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.antihermitian(x)` is true iff `x` belongs to the field of antihermitian
    operators, i.e., operators in the form `x*I`, where `x` is Hermitian.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.antihermitian(x)` 当且仅当 `x` 属于反阿尔米特操作符域时为真，即形如 `x*I` 的操作符，其中 `x` 是厄尔米特的。'
- en: Handler
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: AntiHermitianHandler'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：AntiHermitianHandler
- en: Handler for Q.antihermitian.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: Q.antihermitian 的处理器。
- en: Test that an expression belongs to the field of anti-Hermitian
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 测试一个表达式是否属于反厄尔米特操作符域
- en: operators, that is, operators in the form x*I, where x is Hermitian.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符，即形如 x*I 的操作符，其中 x 是厄尔米特的。
- en: References
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R29](#id22)]'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R29](#id22)]'
- en: '[https://mathworld.wolfram.com/HermitianOperator.html](https://mathworld.wolfram.com/HermitianOperator.html)'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://mathworld.wolfram.com/HermitianOperator.html](https://mathworld.wolfram.com/HermitianOperator.html)'
- en: '[PRE118]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Algebraic number predicate.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 代数数判断。
- en: Explanation
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.algebraic(x)` is true iff `x` belongs to the set of algebraic numbers. `x`
    is algebraic if there is some polynomial in `p(x)\in \mathbb\{Q\}[x]` such that
    `p(x) = 0`.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.algebraic(x)` 当且仅当 `x` 属于代数数集合时为真。如果存在多项式 `p(x)\in \mathbb{Q}[x]` 使得 `p(x)
    = 0`，则 `x` 是代数的。'
- en: Examples
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: '[PRE120]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Handler
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器
- en: 'Multiply dispatched method: AskAlgebraicpredicateHandler'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分派方法：AskAlgebraicpredicateHandler
- en: Handler for key AskAlgebraicpredicateHandler
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: AskAlgebraicpredicateHandler 的关键处理器
- en: References
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[R30](#id23)]'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[[R30](#id23)]'
- en: '[https://en.wikipedia.org/wiki/Algebraic_number](https://en.wikipedia.org/wiki/Algebraic_number)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Algebraic_number](https://en.wikipedia.org/wiki/Algebraic_number)'
- en: '[PRE121]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Transcedental number predicate.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 超越数述词。
- en: Explanation
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 解释
- en: '`Q.transcendental(x)` is true iff `x` belongs to the set of transcendental
    numbers. A transcendental number is a real or complex number that is not algebraic.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`Q.transcendental(x)` 当且仅当 `x` 属于超越数集时为真。超越数是一个既非代数的实数也非复数。'
- en: Handler
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序
- en: 'Multiply dispatched method: Transcendental'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 多重派发方法：超越数
- en: Handler for Q.transcendental key.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: Q.transcendental 键的处理程序。
- en: '[PRE124]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
