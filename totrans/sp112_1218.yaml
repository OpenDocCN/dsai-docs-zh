- en: scipy.stats.dirichlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.dirichlet.html#scipy.stats.dirichlet](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.stats.dirichlet.html#scipy.stats.dirichlet)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A Dirichlet random variable.
  prefs: []
  type: TYPE_NORMAL
- en: The `alpha` keyword specifies the concentration parameters of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 0.15.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**alpha**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: The concentration parameters. The number of entries determines the dimensionality
    of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '**seed**{None, int, np.random.RandomState, np.random.Generator}, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Used for drawing random variates. If *seed* is *None*, the *RandomState* singleton
    is used. If *seed* is an int, a new `RandomState` instance is used, seeded with
    seed. If *seed* is already a `RandomState` or `Generator` instance, then that
    object is used. Default is *None*.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Each \(\alpha\) entry must be positive. The distribution has only support on
    the simplex defined by
  prefs: []
  type: TYPE_NORMAL
- en: \[\sum_{i=1}^{K} x_i = 1\]
  prefs: []
  type: TYPE_NORMAL
- en: where \(0 < x_i < 1\).
  prefs: []
  type: TYPE_NORMAL
- en: If the quantiles don’t lie within the simplex, a ValueError is raised.
  prefs: []
  type: TYPE_NORMAL
- en: The probability density function for [`dirichlet`](#scipy.stats.dirichlet "scipy.stats.dirichlet")
    is
  prefs: []
  type: TYPE_NORMAL
- en: \[f(x) = \frac{1}{\mathrm{B}(\boldsymbol\alpha)} \prod_{i=1}^K x_i^{\alpha_i
    - 1}\]
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: \[\mathrm{B}(\boldsymbol\alpha) = \frac{\prod_{i=1}^K \Gamma(\alpha_i)} {\Gamma\bigl(\sum_{i=1}^K
    \alpha_i\bigr)}\]
  prefs: []
  type: TYPE_NORMAL
- en: and \(\boldsymbol\alpha=(\alpha_1,\ldots,\alpha_K)\), the concentration parameters
    and \(K\) is the dimension of the space where \(x\) takes values.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`dirichlet`](#scipy.stats.dirichlet "scipy.stats.dirichlet")
    interface is somewhat inconsistent. The array returned by the rvs function is
    transposed with respect to the format expected by the pdf and logpdf.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generate a dirichlet random variable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The same PDF but following a log scale
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we specify the dirichlet distribution we can then calculate quantities
    of interest
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also return random samples from the distribution
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the object may be called (as a function) to fix concentration
    parameters, returning a “frozen” Dirichlet random variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| **pdf(x, alpha)** | Probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **logpdf(x, alpha)** | Log of the probability density function. |'
  prefs: []
  type: TYPE_TB
- en: '| **rvs(alpha, size=1, random_state=None)** | Draw random samples from a Dirichlet
    distribution. |'
  prefs: []
  type: TYPE_TB
- en: '| **mean(alpha)** | The mean of the Dirichlet distribution |'
  prefs: []
  type: TYPE_TB
- en: '| **var(alpha)** | The variance of the Dirichlet distribution |'
  prefs: []
  type: TYPE_TB
- en: '| **cov(alpha)** | The covariance of the Dirichlet distribution |'
  prefs: []
  type: TYPE_TB
- en: '| **entropy(alpha)** | Compute the differential entropy of the Dirichlet distribution.
    |'
  prefs: []
  type: TYPE_TB
