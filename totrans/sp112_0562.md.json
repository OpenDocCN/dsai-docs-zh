["```py\nscipy.signal.kaiserord(ripple, width)\n```", "```py\nabs(A(w) - D(w))) < 10**(-ripple/20) \n```", "```py\n>>> import numpy as np\n>>> from scipy.signal import kaiserord, firwin, freqz\n>>> import matplotlib.pyplot as plt\n>>> fs = 1000.0\n>>> cutoff = 175\n>>> width = 24 \n```", "```py\n>>> numtaps, beta = kaiserord(65, width/(0.5*fs))\n>>> numtaps\n167\n>>> beta\n6.20426 \n```", "```py\n>>> taps = firwin(numtaps, cutoff, window=('kaiser', beta),\n...               scale=False, fs=fs) \n```", "```py\n>>> w, h = freqz(taps, worN=8000)\n>>> w *= 0.5*fs/np.pi  # Convert w to Hz. \n```", "```py\n>>> ideal = w < cutoff  # The \"ideal\" frequency response.\n>>> deviation = np.abs(np.abs(h) - ideal)\n>>> deviation[(w > cutoff - 0.5*width) & (w < cutoff + 0.5*width)] = np.nan \n```", "```py\n>>> plt.plot(w, 20*np.log10(np.abs(deviation)))\n>>> plt.xlim(0, 0.5*fs)\n>>> plt.ylim(-90, -60)\n>>> plt.grid(alpha=0.25)\n>>> plt.axhline(-65, color='r', ls='--', alpha=0.3)\n>>> plt.xlabel('Frequency (Hz)')\n>>> plt.ylabel('Deviation from ideal (dB)')\n>>> plt.title('Lowpass Filter Frequency Response')\n>>> plt.show() \n```"]