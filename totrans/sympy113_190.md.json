["```py\nclass sympy.physics.mechanics.system.SymbolicSystem(coord_states, right_hand_side, speeds=None, mass_matrix=None, coordinate_derivatives=None, alg_con=None, output_eqns={}, coord_idxs=None, speed_idxs=None, bodies=None, loads=None)\n```", "```py\n>>> from sympy import Matrix, sin, symbols\n>>> from sympy.physics.mechanics import dynamicsymbols, SymbolicSystem\n>>> l, m, g = symbols('l m g') \n```", "```py\n>>> theta, omega = dynamicsymbols('theta omega') \n```", "```py\n>>> kin_explicit_rhs = Matrix([omega])\n>>> dyn_implicit_mat = Matrix([l**2 * m])\n>>> dyn_implicit_rhs = Matrix([-g * l * m * sin(theta)])\n>>> symsystem = SymbolicSystem([theta], dyn_implicit_rhs, [omega],\n...                            dyn_implicit_mat) \n```", "```py\nproperty alg_con\n```", "```py\nproperty bodies\n```", "```py\nproperty comb_explicit_rhs\n```", "```py\nproperty comb_implicit_mat\n```", "```py\nproperty comb_implicit_rhs\n```", "```py\ncompute_explicit_form()\n```", "```py\nconstant_symbols()\n```", "```py\nproperty coordinates\n```", "```py\nproperty dyn_implicit_mat\n```", "```py\nproperty dyn_implicit_rhs\n```", "```py\ndynamic_symbols()\n```", "```py\nproperty kin_explicit_rhs\n```", "```py\nproperty loads\n```", "```py\nproperty speeds\n```", "```py\nproperty states\n```", "```py\nclass sympy.physics.mechanics.system.System(frame=None, fixed_point=None)\n```", "```py\n>>> from sympy import symbols, simplify\n>>> from sympy.physics.mechanics import (\n...     mechanics_printing, dynamicsymbols, RigidBody, Particle,\n...     ReferenceFrame, PrismaticJoint, PinJoint, System)\n>>> mechanics_printing(pretty_print=False)\n>>> g, l = symbols('g l')\n>>> F = dynamicsymbols('F') \n```", "```py\n>>> rail = RigidBody('rail')\n>>> cart = RigidBody('cart')\n>>> bob = Particle('bob')\n>>> bob_frame = ReferenceFrame('bob_frame') \n```", "```py\n>>> system = System.from_newtonian(rail)\n>>> print(system.bodies[0])\nrail \n```", "```py\n>>> system.add_joints(\n...     PrismaticJoint('slider', rail, cart, joint_axis=rail.x),\n...     PinJoint('pin', cart, bob, joint_axis=cart.z,\n...              child_interframe=bob_frame,\n...              child_point=l * bob_frame.y)\n... )\n>>> system.joints\n(PrismaticJoint: slider  parent: rail  child: cart,\nPinJoint: pin  parent: cart  child: bob) \n```", "```py\n>>> system.q\nMatrix([\n[q_slider],\n[   q_pin]])\n>>> system.u\nMatrix([\n[u_slider],\n[   u_pin]])\n>>> system.kdes\nMatrix([\n[u_slider - q_slider'],\n[      u_pin - q_pin']])\n>>> [body.name for body in system.bodies]\n['rail', 'cart', 'bob'] \n```", "```py\n>>> system.apply_uniform_gravity(-g * system.y)\n>>> system.add_loads((cart.masscenter, F * rail.x))\n>>> system.loads\n((rail_masscenter, - g*rail_mass*rail_frame.y),\n (cart_masscenter, - cart_mass*g*rail_frame.y),\n (bob_masscenter, - bob_mass*g*rail_frame.y),\n (cart_masscenter, F*rail_frame.x)) \n```", "```py\n>>> system.validate_system()\n>>> system.form_eoms()\nMatrix([\n[bob_mass*l*u_pin**2*sin(q_pin) - bob_mass*l*cos(q_pin)*u_pin'\n - (bob_mass + cart_mass)*u_slider' + F],\n[                   -bob_mass*g*l*sin(q_pin) - bob_mass*l**2*u_pin'\n - bob_mass*l*cos(q_pin)*u_slider']])\n>>> simplify(system.mass_matrix)\nMatrix([\n[ bob_mass + cart_mass, bob_mass*l*cos(q_pin)],\n[bob_mass*l*cos(q_pin),         bob_mass*l**2]])\n>>> system.forcing\nMatrix([\n[bob_mass*l*u_pin**2*sin(q_pin) + F],\n[          -bob_mass*g*l*sin(q_pin)]]) \n```", "```py\n>>> system.add_holonomic_constraints(\n...     bob.masscenter.pos_from(rail.masscenter).dot(system.x)\n... )\n>>> system.q_ind = system.get_joint('pin').coordinates\n>>> system.q_dep = system.get_joint('slider').coordinates\n>>> system.u_ind = system.get_joint('pin').speeds\n>>> system.u_dep = system.get_joint('slider').speeds \n```", "```py\n>>> system.validate_system()\n>>> system.form_eoms()\nMatrix([[-bob_mass*g*l*sin(q_pin)\n - bob_mass*l**2*u_pin'\n - bob_mass*l*cos(q_pin)*u_slider'\n - l*(bob_mass*l*u_pin**2*sin(q_pin)\n - bob_mass*l*cos(q_pin)*u_pin'\n - (bob_mass + cart_mass)*u_slider')*cos(q_pin)\n - l*F*cos(q_pin)]])\n>>> simplify(system.mass_matrix)\nMatrix([\n[bob_mass*l**2*sin(q_pin)**2, -cart_mass*l*cos(q_pin)],\n[               l*cos(q_pin),                       1]])\n>>> simplify(system.forcing)\nMatrix([\n[-l*(bob_mass*g*sin(q_pin) + bob_mass*l*u_pin**2*sin(2*q_pin)/2\n + F*cos(q_pin))],\n[\nl*u_pin**2*sin(q_pin)]]) \n```", "```py\nproperty actuators\n```", "```py\nadd_actuators(*actuators)\n```", "```py\nadd_auxiliary_speeds(*speeds)\n```", "```py\nadd_bodies(*bodies)\n```", "```py\nadd_coordinates(*coordinates, independent=True)\n```", "```py\nadd_holonomic_constraints(*constraints)\n```", "```py\nadd_joints(*joints)\n```", "```py\nadd_kdes(*kdes)\n```", "```py\nadd_loads(*loads)\n```", "```py\nadd_nonholonomic_constraints(*constraints)\n```", "```py\nadd_speeds(*speeds, independent=True)\n```", "```py\napply_uniform_gravity(acceleration)\n```", "```py\nproperty bodies\n```", "```py\nproperty eom_method\n```", "```py\nproperty fixed_point\n```", "```py\nproperty forcing\n```", "```py\nproperty forcing_full\n```", "```py\nform_eoms(eom_method=<class 'sympy.physics.mechanics.kane.KanesMethod'>, **kwargs)\n```", "```py\n>>> from sympy import S, symbols\n>>> from sympy.physics.mechanics import (\n...     LagrangesMethod, dynamicsymbols, PrismaticJoint, Particle,\n...     RigidBody, System)\n>>> q = dynamicsymbols('q')\n>>> qd = dynamicsymbols('q', 1)\n>>> m, k, b = symbols('m k b')\n>>> wall = RigidBody('W')\n>>> system = System.from_newtonian(wall)\n>>> bob = Particle('P', mass=m)\n>>> bob.potential_energy = S.Half * k * q**2\n>>> system.add_joints(PrismaticJoint('J', wall, bob, q, qd))\n>>> system.add_loads((bob.masscenter, b * qd * system.x))\n>>> system.form_eoms(LagrangesMethod)\nMatrix([[-b*Derivative(q(t), t) + k*q(t) + m*Derivative(q(t), (t, 2))]]) \n```", "```py\n>>> system.rhs()\nMatrix([\n[               Derivative(q(t), t)],\n[(b*Derivative(q(t), t) - k*q(t))/m]]) \n```", "```py\nproperty frame\n```", "```py\nclassmethod from_newtonian(newtonian)\n```", "```py\nget_body(name)\n```", "```py\nget_joint(name)\n```", "```py\nproperty holonomic_constraints\n```", "```py\nproperty joints\n```", "```py\nproperty kdes\n```", "```py\nproperty loads\n```", "```py\nproperty mass_matrix\n```", "```py\nproperty mass_matrix_full\n```", "```py\nproperty nonholonomic_constraints\n```", "```py\nproperty q\n```", "```py\nproperty q_dep\n```", "```py\nproperty q_ind\n```", "```py\nrhs(inv_method=None)\n```", "```py\nproperty u\n```", "```py\nproperty u_aux\n```", "```py\nproperty u_dep\n```", "```py\nproperty u_ind\n```", "```py\nvalidate_system(eom_method=<class 'sympy.physics.mechanics.kane.KanesMethod'>, check_duplicates=False)\n```", "```py\nproperty velocity_constraints\n```", "```py\nproperty x\n```", "```py\nproperty y\n```", "```py\nproperty z\n```"]