["```py\n> In [1]: np.random.seed(123)\n> \n> In [2]: df = pd.DataFrame(np.random.randn(10, 5), columns=list(\"abcde\"))\n> \n> In [3]: html = df.style.background_gradient(cmap=\"viridis\", low=0.5) \n> ```", "```py\n    In [4]: df = pd.DataFrame({\"A\": [\"foo\"] * 1000})  # noqa: F821\n\n    In [5]: df[\"B\"] = df[\"A\"].astype(\"category\")\n\n    # shows the '+' as we have object dtypes\n    In [6]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000 entries, 0 to 999\n    Data columns (total 2 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       1000 non-null   object \n     1   B       1000 non-null   category\n    dtypes: category(1), object(1)\n    memory usage: 9.0+ KB\n\n    # we have an accurate memory assessment (but can be expensive to compute this)\n    In [7]: df.info(memory_usage=\"deep\")\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000 entries, 0 to 999\n    Data columns (total 2 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       1000 non-null   object \n     1   B       1000 non-null   category\n    dtypes: category(1), object(1)\n    memory usage: 59.9 KB \n    ```", "```py\n    In [8]: pd.Index([1, np.nan, 3]).fillna(2)\n    Out[8]: Index([1.0, 2.0, 3.0], dtype='float64') \n    ```", "```py\n    In [9]: s = pd.Series(list(\"aabb\")).astype(\"category\")\n\n    In [10]: s\n    Out[10]: \n    0    a\n    1    a\n    2    b\n    3    b\n    Length: 4, dtype: category\n    Categories (2, object): ['a', 'b']\n\n    In [11]: s.str.contains(\"a\")\n    Out[11]: \n    0     True\n    1     True\n    2    False\n    3    False\n    Length: 4, dtype: bool\n\n    In [12]: date = pd.Series(pd.date_range(\"1/1/2015\", periods=5)).astype(\"category\")\n\n    In [13]: date\n    Out[13]: \n    0   2015-01-01\n    1   2015-01-02\n    2   2015-01-03\n    3   2015-01-04\n    4   2015-01-05\n    Length: 5, dtype: category\n    Categories (5, datetime64[ns]): [2015-01-01, 2015-01-02, 2015-01-03, 2015-01-04, 2015-01-05]\n\n    In [14]: date.dt.day\n    Out[14]: \n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    Length: 5, dtype: int32 \n    ```", "```py\n> In [1]: np.random.seed(123)\n> \n> In [2]: df = pd.DataFrame(np.random.randn(10, 5), columns=list(\"abcde\"))\n> \n> In [3]: html = df.style.background_gradient(cmap=\"viridis\", low=0.5) \n> ```", "```py\n> In [1]: np.random.seed(123)\n> \n> In [2]: df = pd.DataFrame(np.random.randn(10, 5), columns=list(\"abcde\"))\n> \n> In [3]: html = df.style.background_gradient(cmap=\"viridis\", low=0.5) \n> ```", "```py\n    In [4]: df = pd.DataFrame({\"A\": [\"foo\"] * 1000})  # noqa: F821\n\n    In [5]: df[\"B\"] = df[\"A\"].astype(\"category\")\n\n    # shows the '+' as we have object dtypes\n    In [6]: df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000 entries, 0 to 999\n    Data columns (total 2 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       1000 non-null   object \n     1   B       1000 non-null   category\n    dtypes: category(1), object(1)\n    memory usage: 9.0+ KB\n\n    # we have an accurate memory assessment (but can be expensive to compute this)\n    In [7]: df.info(memory_usage=\"deep\")\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000 entries, 0 to 999\n    Data columns (total 2 columns):\n     #   Column  Non-Null Count  Dtype \n    ---  ------  --------------  ----- \n     0   A       1000 non-null   object \n     1   B       1000 non-null   category\n    dtypes: category(1), object(1)\n    memory usage: 59.9 KB \n    ```", "```py\n    In [8]: pd.Index([1, np.nan, 3]).fillna(2)\n    Out[8]: Index([1.0, 2.0, 3.0], dtype='float64') \n    ```", "```py\n    In [9]: s = pd.Series(list(\"aabb\")).astype(\"category\")\n\n    In [10]: s\n    Out[10]: \n    0    a\n    1    a\n    2    b\n    3    b\n    Length: 4, dtype: category\n    Categories (2, object): ['a', 'b']\n\n    In [11]: s.str.contains(\"a\")\n    Out[11]: \n    0     True\n    1     True\n    2    False\n    3    False\n    Length: 4, dtype: bool\n\n    In [12]: date = pd.Series(pd.date_range(\"1/1/2015\", periods=5)).astype(\"category\")\n\n    In [13]: date\n    Out[13]: \n    0   2015-01-01\n    1   2015-01-02\n    2   2015-01-03\n    3   2015-01-04\n    4   2015-01-05\n    Length: 5, dtype: category\n    Categories (5, datetime64[ns]): [2015-01-01, 2015-01-02, 2015-01-03, 2015-01-04, 2015-01-05]\n\n    In [14]: date.dt.day\n    Out[14]: \n    0    1\n    1    2\n    2    3\n    3    4\n    4    5\n    Length: 5, dtype: int32 \n    ```"]