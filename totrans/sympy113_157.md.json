["```py\n>>> from sympy import Symbol, sin, cos\n>>> from sympy.physics.vector import *\n>>> init_vprinting(pretty_print=False)\n>>> N = ReferenceFrame('N')\n>>> q1 = dynamicsymbols('q1')\n>>> A = N.orientnew('A', 'Axis', [q1, N.x])\n>>> A.ang_vel_in(N)\nq1'*N.x \n```", "```py\n>>> B = ReferenceFrame('B')\n>>> u1 = dynamicsymbols('u1')\n>>> B.set_ang_vel(N, u1 * B.y)\n>>> B.ang_vel_in(N)\nu1*B.y\n>>> N.ang_vel_in(B)\n- u1*B.y \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> A = ReferenceFrame('A')\n>>> B = ReferenceFrame('B')\n>>> C = ReferenceFrame('C')\n>>> D = ReferenceFrame('D')\n>>> u1, u2, u3 = dynamicsymbols('u1 u2 u3')\n>>> A.set_ang_vel(N, 0)\n>>> B.set_ang_vel(A, u1 * A.x)\n>>> C.set_ang_vel(B, -u2 * B.z)\n>>> D.set_ang_vel(C, u3 * C.y)\n>>> D.ang_vel_in(N)\nu1*A.x - u2*B.z + u3*C.y \n```", "```py\n>>> D.set_ang_vel(N, 0)\n>>> D.ang_vel_in(N)\n0 \n```", "```py\n>>> O = Point('O')\n>>> P = O.locatenew('P', 3 * N.x + N.y)\n>>> P.pos_from(O)\n3*N.x + N.y\n>>> Q = Point('Q')\n>>> Q.set_pos(P, N.z)\n>>> Q.pos_from(P)\nN.z\n>>> Q.pos_from(O)\n3*N.x + N.y + N.z \n```", "```py\n>>> O = Point('O')\n>>> O.set_vel(N, u1*N.x)\n>>> O.vel(N)\nu1*N.x \n```", "```py\n>>> O.acc(N)\nu1'*N.x\n>>> O.set_acc(N, u2*u1*N.y)\n>>> O.acc(N)\nu1*u2*N.y \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> u1, u2, u3 = dynamicsymbols('u1 u2 u3')\n>>> R = Symbol('R')\n>>> B = ReferenceFrame('B')\n>>> O = Point('O')\n>>> O.set_vel(N, u1 * N.x + u2 * N.y)\n>>> P = O.locatenew('P', R * B.x)\n>>> B.set_ang_vel(N, u3 * B.z)\n>>> P.v2pt_theory(O, N, B)\nu1*N.x + u2*N.y + R*u3*B.y\n>>> P.a2pt_theory(O, N, B)\nu1'*N.x + u2'*N.y - R*u3**2*B.x + R*u3'*B.y \n```", "```py\n>>> N = ReferenceFrame('N')\n>>> u1, u2 = dynamicsymbols('u1 u2')\n>>> q1, q2 = dynamicsymbols('q1 q2')\n>>> l = Symbol('l')\n>>> R = Symbol('R')\n>>> C = N.orientnew('C', 'Axis', [q1, N.x])\n>>> C.set_ang_vel(N, u1 * N.x)\n>>> O = Point('O')\n>>> O.set_vel(N, 0)\n>>> Q = O.locatenew('Q', -l * C.z)\n>>> P = Q.locatenew('P', R * (cos(q2) * C.x + sin(q2) * C.y))\n>>> P.set_vel(C, R * u2 * (-sin(q2) * C.x + cos(q2) * C.y))\n>>> Q.v2pt_theory(O, N, C)\nl*u1*C.y\n>>> P.v1pt_theory(Q, N, C)\n- R*u2*sin(q2)*C.x + (R*u2*cos(q2) + l*u1)*C.y + R*u1*sin(q2)*C.z \n```"]