- en: Pathway (Docstrings)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/mechanics/api/pathway.html](https://docs.sympy.org/latest/modules/physics/mechanics/api/pathway.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implementations of pathways for use by actuators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Linear pathway between a pair of attachment points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**attachments** : tuple[Point, Point]'
  prefs: []
  type: TYPE_NORMAL
- en: Pair of `Point` objects between which the linear pathway spans. Constructor
    expects two points to be passed, e.g. `LinearPathway(Point('pA'), Point('pB'))`.
    More or fewer points will cause an error to be thrown.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A linear pathway forms a straight-line segment between two points and is the
    simplest pathway that can be formed. It will not interact with any other objects
    in the system, i.e. a `LinearPathway` will intersect other objects to ensure that
    the path between its two ends (its attachments) is the shortest possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'A linear pathway is made up of two points that can move relative to each other,
    and a pair of equal and opposite forces acting on the points. If the positive
    time-varying Euclidean distance between the two points is defined, then the “extension
    velocity” is the time derivative of this distance. The extension velocity is positive
    when the two points are moving away from each other and negative when moving closer
    to each other. The direction for the force acting on either point is determined
    by constructing a unit vector directed from the other point to this point. This
    establishes a sign convention such that a positive force magnitude tends to push
    the points apart. The following diagram shows the positive force sense and the
    distance between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To construct a pathway, two points are required to be passed to the `attachments`
    parameter as a `tuple`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The pathway created above isn’t very interesting without the positions and velocities
    of its attachment points being described. Without this its not possible to describe
    how the pathway moves, i.e. its length or its extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A pathway’s length can be accessed via its `length` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note how what appears to be an overly-complex expression is returned. This is
    actually required as it ensures that a pathway’s length is always positive.
  prefs: []
  type: TYPE_NORMAL
- en: A pathway’s extension velocity can be accessed similarly via its `extension_velocity`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**force** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Magnitude of the force acting along the length of the pathway. As per the sign
    conventions for the pathway length, pathway extension velocity, and pair of point
    forces, if this `Expr` is positive then the force will act to push the pair of
    points away from one another (it is expansile).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The below example shows how to generate the loads produced in a linear actuator
    that produces an expansile force `F`. First, create a linear actuator between
    two points separated by the coordinate `q` in the `x` direction of the global
    frame `N`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now create a symbol `F` to describe the magnitude of the (expansile) force that
    will be produced along the pathway. The list of loads that `KanesMethod` requires
    can be produced by calling the pathway’s `to_loads` method with `F` passed as
    the only argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Obstacle-set pathway between a set of attachment points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**attachments** : tuple[Point, Point]'
  prefs: []
  type: TYPE_NORMAL
- en: The set of `Point` objects that define the segmented obstacle-set pathway.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: An obstacle-set pathway forms a series of straight-line segment between pairs
    of consecutive points in a set of points. It is similiar to multiple linear pathways
    joined end-to-end. It will not interact with any other objects in the system,
    i.e. an `ObstacleSetPathway` will intersect other objects to ensure that the path
    between its pairs of points (its attachments) is the shortest possible.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: To construct an obstacle-set pathway, three or more points are required to be
    passed to the `attachments` parameter as a `tuple`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The pathway created above isn’t very interesting without the positions and velocities
    of its attachment points being described. Without this its not possible to describe
    how the pathway moves, i.e. its length or its extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: A pathway’s length can be accessed via its `length` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A pathway’s extension velocity can be accessed similarly via its `extension_velocity`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The set of points defining a pathway’s segmented path.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**force** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The force acting along the length of the pathway. It is assumed that this `Expr`
    represents an expansile force.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The below example shows how to generate the loads produced in an actuator that
    follows an obstacle-set pathway between four points and produces an expansile
    force `F`. First, create a pair of reference frames, `A` and `B`, in which the
    four points `pA`, `pB`, `pC`, and `pD` will be located. The first two points in
    frame `A` and the second two in frame `B`. Frame `B` will also be oriented such
    that it relates to `A` via a rotation of `q` about an axis `N.z` in a global frame
    (`N.z`, `A.z`, and `B.z` are parallel).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now create a symbol `F` to describe the magnitude of the (expansile) force that
    will be produced along the pathway. The list of loads that `KanesMethod` requires
    can be produced by calling the pathway’s `to_loads` method with `F` passed as
    the only argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for all pathway classes to inherit from.
  prefs: []
  type: TYPE_NORMAL
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Instances of this class cannot be directly instantiated by users. However, it
    can be used to created custom pathway types through subclassing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The pair of points defining a pathway’s ends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: An expression representing the pathway’s extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: An expression representing the pathway’s length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Pathway that wraps a geometry object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**attachment_1** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: First of the pair of `Point` objects between which the wrapping pathway spans.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**attachment_2** : Point'
  prefs: []
  type: TYPE_NORMAL
- en: Second of the pair of `Point` objects between which the wrapping pathway spans.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**geometry** : WrappingGeometryBase'
  prefs: []
  type: TYPE_NORMAL
- en: Geometry about which the pathway wraps.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A wrapping pathway interacts with a geometry object and forms a path that wraps
    smoothly along its surface. The wrapping pathway along the geometry object will
    be the geodesic that the geometry object defines based on the two points. It will
    not interact with any other objects in the system, i.e. a `WrappingPathway` will
    intersect other objects to ensure that the path between its two ends (its attachments)
    is the shortest possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explain the sign conventions used for pathway length, extension velocity,
    and direction of applied forces, we can ignore the geometry with which the wrapping
    pathway interacts. A wrapping pathway is made up of two points that can move relative
    to each other, and a pair of equal and opposite forces acting on the points. If
    the positive time-varying Euclidean distance between the two points is defined,
    then the “extension velocity” is the time derivative of this distance. The extension
    velocity is positive when the two points are moving away from each other and negative
    when moving closer to each other. The direction for the force acting on either
    point is determined by constructing a unit vector directed from the other point
    to this point. This establishes a sign convention such that a positive force magnitude
    tends to push the points apart. The following diagram shows the positive force
    sense and the distance between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To construct a wrapping pathway, like other pathways, a pair of points must
    be passed, followed by an instance of a wrapping geometry class as a keyword argument.
    We’ll use a cylinder with radius `r` and its axis parallel to `N.x` passing through
    a point `pO`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s extension velocity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Geometry around which the pathway wraps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Exact analytical expression for the pathway’s length.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Loads required by the equations of motion method classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**force** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: Magnitude of the force acting along the length of the pathway. It is assumed
    that this `Expr` represents an expansile force.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: '`KanesMethod` requires a list of `Point`-`Vector` tuples to be passed to the
    `loads` parameters of its `kanes_equations` method when constructing the equations
    of motion. This method acts as a utility to produce the correctly-structred pairs
    of points and vectors required so that these can be easily concatenated with other
    items in the list of loads and passed to `KanesMethod.kanes_equations`. These
    loads are also in the correct form to also be passed to the other equations of
    motion method classes, e.g. `LagrangesMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The below example shows how to generate the loads produced in an actuator that
    produces an expansile force `F` while wrapping around a cylinder. First, create
    a cylinder with radius `r` and an axis parallel to the `N.z` direction of the
    global frame `N` that also passes through a point `pO`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Create the pathway of the actuator using the `WrappingPathway` class, defined
    to span between two points `pA` and `pB`. Both points lie on the surface of the
    cylinder and the location of `pB` is defined relative to `pA` by the dynamics
    symbol `q`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now create a symbol `F` to describe the magnitude of the (expansile) force that
    will be produced along the pathway. The list of loads that `KanesMethod` requires
    can be produced by calling the pathway’s `to_loads` method with `F` passed as
    the only argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
