- en: State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/physics/quantum/state.html](https://docs.sympy.org/latest/modules/physics/quantum/state.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dirac notation for states.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A general time-independent Bra in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from State and BraBase. A Bra is the dual of a Ket [[R769]](#r769).
    This class and its subclasses will be the main classes that users will use for
    expressing Bras in Dirac notation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of numbers or parameters that uniquely specify the ket. This will usually
    be its symbol or its quantum numbers. For time-dependent state, this will include
    the time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple Bra and look at its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Bra’s know about their dual Ket’s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Like Kets, Bras can have compound labels and be manipulated in a similar manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Symbols in a Bra can be substituted using `.subs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R769] ([1](#id1),[2](#id2))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bra-ket_notation](https://en.wikipedia.org/wiki/Bra-ket_notation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Bras.
  prefs: []
  type: TYPE_NORMAL
- en: This class defines the dual property and the brackets for printing. This is
    an abstract base class and you should not instantiate it directly, instead use
    Bra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A general time-independent Ket in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from State and KetBase. This class should be used as the base class
    for all physical, time-independent Kets in a system. This class and its subclasses
    will be the main classes that users will use for expressing Kets in Dirac notation
    [[R770]](#r770).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of numbers or parameters that uniquely specify the ket. This will usually
    be its symbol or its quantum numbers. For time-dependent state, this will include
    the time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple Ket and looking at its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Ket’s know about their associated bra:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a linear combination of two kets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Compound labels are passed as tuples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[R770] ([1](#id3),[2](#id4))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Bra-ket_notation](https://en.wikipedia.org/wiki/Bra-ket_notation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Kets.
  prefs: []
  type: TYPE_NORMAL
- en: This class defines the dual property and the brackets for printing. This is
    an abstract base class and you should not instantiate it directly, instead use
    Ket.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Orthogonal Bra in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Orthogonal Ket in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: The inner product of two states with different labels will give zero, states
    with the same label will give one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: General abstract quantum state used as a base class for Ket and Bra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: General abstract quantum state used as a base class for Ket and Bra.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for general abstract states in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: All other state classes defined will need to inherit from this class. It carries
    the basic structure for all other states such as dual, _eval_adjoint and label.
  prefs: []
  type: TYPE_NORMAL
- en: This is an abstract base class and you should not instantiate it directly, instead
    use State.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return the dual state of this one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Return the class used to construct the dual.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return the operator(s) that this state is an eigenstate of
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: General time-dependent Bra in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: This inherits from TimeDepState and BraBase and is the main class that should
    be used for Bras that vary with time. Its dual is a TimeDepBra.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of numbers or parameters that uniquely specify the ket. This will usually
    be its symbol or its quantum numbers. For time-dependent state, this will include
    the time as the final argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: General time-dependent Ket in quantum mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: This inherits from `TimeDepState` and `KetBase` and is the main class that should
    be used for Kets that vary with time. Its dual is a `TimeDepBra`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of numbers or parameters that uniquely specify the ket. This will usually
    be its symbol or its quantum numbers. For time-dependent state, this will include
    the time as the final argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a TimeDepKet and look at its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'TimeDepKets know about their dual bra:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Base class for a general time-dependent quantum state.
  prefs: []
  type: TYPE_NORMAL
- en: This class is used as a base class for any time-dependent state. The main difference
    between this class and the time-independent state is that this class takes a second
    argument that is the time in addition to the usual label argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** : tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The list of numbers or parameters that uniquely specify the ket. This will usually
    be its symbol or its quantum numbers. For time-dependent state, this will include
    the time as the final argument.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The label of the state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The time of the state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Class for representations in continuous bases
  prefs: []
  type: TYPE_NORMAL
- en: This class takes an expression and coordinates in its constructor. It can be
    used to easily calculate normalizations and probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr** : Expr'
  prefs: []
  type: TYPE_NORMAL
- en: The expression representing the functional form of the w.f.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**coords** : Symbol or tuple'
  prefs: []
  type: TYPE_NORMAL
- en: The coordinates to be integrated over, and their bounds
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Particle in a box, specifying bounds in the more primitive way of using Piecewise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can specify the bounds of the function and the indices in
    a more compact way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'All arguments are automatically sympified, so you can define the variables
    as strings rather than symbols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Derivatives of Wavefunctions will return Wavefunctions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return the expression which is the functional form of the Wavefunction
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Override Function’s is_commutative so that order is preserved in represented
    expressions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns true if the Wavefunction is properly normalized
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Return the limits of the coordinates which the w.f. depends on If no limits
    are specified, defaults to `(-oo, oo)`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Return the normalization of the specified functional form.
  prefs: []
  type: TYPE_NORMAL
- en: This function integrates over the coordinates of the Wavefunction, with the
    bounds specified.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Return a normalized version of the Wavefunction
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Return the absolute magnitude of the w.f., \(|\psi(x)|^2\)
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Return the coordinates which the wavefunction depends on
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
