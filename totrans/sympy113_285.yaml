- en: Reference docs for the Poly Domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sympy.org/latest/modules/polys/domainsref.html](https://docs.sympy.org/latest/modules/polys/domainsref.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This page lists the reference documentation for the domains in the polys module.
    For a general introduction to the polys module it is recommended to read [Basic
    functionality of the module](basics.html#polys-basics) instead. For an introductory
    explanation of the what the domain system is and how it is used it is recommended
    to read [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro).
    This page lists the reference docs for the [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") class and its subclasses (the specific domains
    such as `ZZ`) as well as the classes that represent the domain elements.
  prefs: []
  type: TYPE_NORMAL
- en: Domains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we document the various implemented ground domains (see [Introducing the
    Domains of the poly module](domainsintro.html#polys-domainsintro) for more of
    an explanation). There are three types of [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") subclass: abstract domains, concrete domains,
    and “implementation domains”. Abstract domains cannot be (usefully) instantiated
    at all, and just collect together functionality shared by many other domains.
    Concrete domains are those meant to be instantiated and used in the polynomial
    manipulation algorithms. In some cases, there are various possible ways to implement
    the data type the domain provides. For example, depending on what libraries are
    available on the system, the integers are implemented either using the python
    built-in integers, or using gmpy. Note that various aliases are created automatically
    depending on the libraries available. As such e.g. `ZZ` always refers to the most
    efficient implementation of the integer ring available.'
  prefs: []
  type: TYPE_NORMAL
- en: Abstract Domains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Superclass for all domains in the polys domains system.
  prefs: []
  type: TYPE_NORMAL
- en: See [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)
    for an introductory explanation of the domains system.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    class is an abstract base class for all of the concrete domain types. There are
    many different [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    subclasses each of which has an associated `dtype` which is a class representing
    the elements of the domain. The coefficients of a [`Poly`](reference.html#sympy.polys.polytools.Poly
    "sympy.polys.polytools.Poly") are elements of a domain which must be a subclass
    of [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: The most common example domains are the integers [ZZ](#zz) and the rationals
    [QQ](#qq).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The domains can be used directly in which case the domain object e.g. ([ZZ](#zz)
    or [QQ](#qq)) can be used as a constructor for elements of `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The corresponding domain elements can be used with the arithmetic operations
    `+,-,*,**` and depending on the domain some combination of `/,//,%` might be usable.
    For example in [ZZ](#zz) both `//` (floor division) and `%` (modulo division)
    can be used but `/` (true division) cannot. Since [QQ](#qq) is a [`Field`](#sympy.polys.domains.field.Field
    "sympy.polys.domains.field.Field") its elements can be used with `/` but `//`
    and `%` should not be used. Some domains have a [`gcd()`](#sympy.polys.domains.domain.Domain.gcd
    "sympy.polys.domains.domain.Domain.gcd") method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also many other domains including:'
  prefs: []
  type: TYPE_NORMAL
- en: '[GF(p)](#gf-p) for finite fields of prime order.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[RR](#rr) for real (floating point) numbers.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[CC](#cc) for complex (floating point) numbers.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[QQ<a>](#qq-a) for algebraic number fields.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[K[x]](#k-x) for polynomial rings.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[K(x)](#id11) for rational function fields.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[EX](#ex) for arbitrary expressions.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: Each domain is represented by a domain object and also an implementation class
    (`dtype`) for the elements of the domain. For example the [K[x]](#k-x) domains
    are represented by a domain object which is an instance of [`PolynomialRing`](#sympy.polys.domains.PolynomialRing
    "sympy.polys.domains.PolynomialRing") and the elements are always instances of
    [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement").
    The implementation class represents particular types of mathematical expressions
    in a way that is more efficient than a normal SymPy expression which is of type
    [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr"). The domain
    methods [`from_sympy()`](#sympy.polys.domains.domain.Domain.from_sympy "sympy.polys.domains.domain.Domain.from_sympy")
    and [`to_sympy()`](#sympy.polys.domains.domain.Domain.to_sympy "sympy.polys.domains.domain.Domain.to_sympy")
    are used to convert from [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    to a domain element and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The [`convert_from()`](#sympy.polys.domains.domain.Domain.convert_from "sympy.polys.domains.domain.Domain.convert_from")
    method is used to convert domain elements from one domain to another.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Elements from different domains should not be mixed in arithmetic or other
    operations: they should be converted to a common domain first. The domain method
    [`unify()`](#sympy.polys.domains.domain.Domain.unify "sympy.polys.domains.domain.Domain.unify")
    is used to find a domain that can represent all the elements of two given domains.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If a domain is a [`Ring`](#sympy.polys.domains.ring.Ring "sympy.polys.domains.ring.Ring")
    then is might have an associated [`Field`](#sympy.polys.domains.field.Field "sympy.polys.domains.field.Field")
    and vice versa. The [`get_field()`](#sympy.polys.domains.domain.Domain.get_field
    "sympy.polys.domains.domain.Domain.get_field") and [`get_ring()`](#sympy.polys.domains.domain.Domain.get_ring
    "sympy.polys.domains.domain.Domain.get_ring") methods will find or create the
    associated domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DomainElement`](#sympy.polys.domains.domainelement.DomainElement "sympy.polys.domains.domainelement.DomainElement")'
  prefs: []
  type: TYPE_NORMAL
- en: abstract base class for domain elements
  prefs: []
  type: TYPE_NORMAL
- en: '[`construct_domain`](reference.html#sympy.polys.constructor.construct_domain
    "sympy.polys.constructor.construct_domain")'
  prefs: []
  type: TYPE_NORMAL
- en: construct a minimal domain for some expressions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Absolute value of `a`, implies `__abs__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Sum of `a` and `b`, implies `__add__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Convenience method to construct an algebraic extension on a root of a polynomial,
    chosen by root index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**poly** : [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")'
  prefs: []
  type: TYPE_NORMAL
- en: The polynomial whose root generates the extension.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alias** : str, optional (default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol name for the generator of the extension. E.g. “alpha” or “theta”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_index** : int, optional (default=-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies which root of the polynomial is desired. The ordering is as defined
    by the [`ComplexRootOf`](reference.html#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf") class. The default of `-1` selects the
    most natural choice in the common cases of quadratic and cyclotomic fields (the
    square root on the positive real or imaginary axis, resp. \(\mathrm{e}^{2\pi i/n}\)).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns an algebraic field, i.e. \(K(\alpha, \ldots)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Check if `a` and `b` are almost equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Return the characteristic of this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD and cofactors of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Convert `element` to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Convert `element` to `self.dtype` given the base domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Convenience method to construct a cyclotomic field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n** : int'
  prefs: []
  type: TYPE_NORMAL
- en: Construct the nth cyclotomic field.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ss** : boolean, optional (default=False)'
  prefs: []
  type: TYPE_NORMAL
- en: If True, append *n* as a subscript on the alias string.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alias** : str, optional (default=”zeta”)'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol name for the generator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**gen** : [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    optional (default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: Desired variable for the cyclotomic polynomial that defines the field. If `None`,
    a dummy variable will be used.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**root_index** : int, optional (default=-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Specifies which root of the polynomial is desired. The ordering is as defined
    by the [`ComplexRootOf`](reference.html#sympy.polys.rootoftools.ComplexRootOf
    "sympy.polys.rootoftools.ComplexRootOf") class. The default of `-1` selects the
    root \(\mathrm{e}^{2\pi i/n}\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Quotient and remainder for *a* and *b*. Analogue of `divmod(a, b)`
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a: domain element**'
  prefs: []
  type: TYPE_NORMAL
- en: The dividend
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b: domain element**'
  prefs: []
  type: TYPE_NORMAL
- en: The divisor
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '(q, r): tuple of domain elements'
  prefs: []
  type: TYPE_NORMAL
- en: The quotient and remainder
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZeroDivisionError: when the divisor is zero.**'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the same as `divmod(a, b)` except that is more consistent
    when working over some [`Field`](#sympy.polys.domains.field.Field "sympy.polys.domains.field.Field")
    domains such as [QQ](#qq). When working over an arbitrary [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") the [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") method should be used instead of `divmod`.
  prefs: []
  type: TYPE_NORMAL
- en: The key invariant is that if `q, r = K.div(a, b)` then `a == b*q + r`.
  prefs: []
  type: TYPE_NORMAL
- en: The result of `K.div(a, b)` is the same as the tuple `(K.quo(a, b), K.rem(a,
    b))` except that if both quotient and remainder are needed then it is more efficient
    to use [`div()`](#sympy.polys.domains.domain.Domain.div "sympy.polys.domains.domain.Domain.div").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We can use `K.div` instead of `divmod` for floor division and remainder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If `K` is a [`Field`](#sympy.polys.domains.field.Field "sympy.polys.domains.field.Field")
    then the division is always exact with a remainder of [`zero`](#sympy.polys.domains.domain.Domain.zero
    "sympy.polys.domains.domain.Domain.zero").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: If `gmpy` is installed then the `gmpy.mpq` type will be used as the [`dtype`](#sympy.polys.domains.domain.Domain.dtype
    "sympy.polys.domains.domain.Domain.dtype") for [QQ](#qq). The `gmpy.mpq` type
    defines `divmod` in a way that is undesirable so [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") should be used instead of `divmod`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using `//` or `%` with [QQ](#qq) will lead to incorrect results so [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`quo`](#sympy.polys.domains.domain.Domain.quo "sympy.polys.domains.domain.Domain.quo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a // b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`rem`](#sympy.polys.domains.domain.Domain.rem "sympy.polys.domains.domain.Domain.rem")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a % b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`exquo`](#sympy.polys.domains.domain.Domain.exquo "sympy.polys.domains.domain.Domain.exquo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a / b`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Drop generators from this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The type (class) of the elements of this [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Every domain has an associated **dtype** (“datatype”) which is the class of
    the associated domain elements.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`of_type`](#sympy.polys.domains.domain.Domain.of_type "sympy.polys.domains.domain.Domain.of_type")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerical approximation of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of *a* and *b*. Analogue of `a / b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a: domain element**'
  prefs: []
  type: TYPE_NORMAL
- en: The dividend
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**b: domain element**'
  prefs: []
  type: TYPE_NORMAL
- en: The divisor
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'q: domain element'
  prefs: []
  type: TYPE_NORMAL
- en: The exact quotient
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ExactQuotientFailed: if exact division is not possible.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZeroDivisionError: when the divisor is zero.**'
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the same as `a / b` except that an error will be raised
    if the division is inexact (if there is any remainder) and the result will always
    be a domain element. When working in a [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") that is not a [`Field`](#sympy.polys.domains.field.Field
    "sympy.polys.domains.field.Field") (e.g. [ZZ](#zz) or [K[x]](#k-x)) `exquo` should
    be used instead of `/`.
  prefs: []
  type: TYPE_NORMAL
- en: The key invariant is that if `q = K.exquo(a, b)` (and `exquo` does not raise
    an exception) then `a == b*q`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: We can use `K.exquo` instead of `/` for exact division.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Over a [`Field`](#sympy.polys.domains.field.Field "sympy.polys.domains.field.Field")
    such as [QQ](#qq), division (with nonzero divisor) is always exact so in that
    case `/` can be used instead of [`exquo()`](#sympy.polys.domains.domain.Domain.exquo
    "sympy.polys.domains.domain.Domain.exquo").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: Since the default [`dtype`](#sympy.polys.domains.domain.Domain.dtype "sympy.polys.domains.domain.Domain.dtype")
    for [ZZ](#zz) is `int` (or `mpz`) division as `a / b` should not be used as it
    would give a `float` which is not a domain element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand with \(SYMPY_GROUND_TYPES=flint\) elements of [ZZ](#zz) are
    `flint.fmpz` and division would raise an exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Using `/` with [ZZ](#zz) will lead to incorrect results so [`exquo()`](#sympy.polys.domains.domain.Domain.exquo
    "sympy.polys.domains.domain.Domain.exquo") should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`quo`](#sympy.polys.domains.domain.Domain.quo "sympy.polys.domains.domain.Domain.quo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a // b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`rem`](#sympy.polys.domains.domain.Domain.rem "sympy.polys.domains.domain.Domain.rem")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a % b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`div`](#sympy.polys.domains.domain.Domain.div "sympy.polys.domains.domain.Domain.div")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `divmod(a, b)`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Principal square root of a within the domain if `a` is square.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of this method should return an element `b` in the domain
    such that `b * b == a`, or `None` if there is no such `b`. For inexact domains
    like [RR](#rr) and [CC](#cc), a tiny difference in this equality can be tolerated.
    The choice of a “principal” square root should follow a consistent rule whenever
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sqrt`](#sympy.polys.domains.domain.Domain.sqrt "sympy.polys.domains.domain.Domain.sqrt"),
    [`is_square`](#sympy.polys.domains.domain.Domain.is_square "sympy.polys.domains.domain.Domain.is_square")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns a fraction field, i.e. \(K(X)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Convert an algebraic number to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Convert a complex element to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `EX` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `EX` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(mpz)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Convert a rational function to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Convert a polynomial to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Convert an `ExtensionElement` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Convert a polynomial to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Convert a real element object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Convert a SymPy expression to an element of this domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**expr: Expr**'
  prefs: []
  type: TYPE_NORMAL
- en: A normal SymPy expression of type [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a: domain element'
  prefs: []
  type: TYPE_NORMAL
- en: An element of this [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: See [`to_sympy()`](#sympy.polys.domains.domain.Domain.to_sympy "sympy.polys.domains.domain.Domain.to_sympy")
    for explanation and examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_sympy`](#sympy.polys.domains.domain.Domain.to_sympy "sympy.polys.domains.domain.Domain.to_sympy"),
    [`convert_from`](#sympy.polys.domains.domain.Domain.convert_from "sympy.polys.domains.domain.Domain.convert_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Extended GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Returns an exact domain associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Half extended GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Boolean flag indicating if the domain has an associated [`Field`](#sympy.polys.domains.field.Field
    "sympy.polys.domains.field.Field").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_Field`](#sympy.polys.domains.domain.Domain.is_Field "sympy.polys.domains.domain.Domain.is_Field"),
    [`get_field`](#sympy.polys.domains.domain.Domain.get_field "sympy.polys.domains.domain.Domain.get_field")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Boolean flag indicating if the domain has an associated [`Ring`](#sympy.polys.domains.ring.Ring
    "sympy.polys.domains.ring.Ring").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_Field`](#sympy.polys.domains.domain.Domain.is_Field "sympy.polys.domains.domain.Domain.is_Field"),
    [`get_ring`](#sympy.polys.domains.domain.Domain.get_ring "sympy.polys.domains.domain.Domain.get_ring")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Inject generators into this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Returns inversion of `a mod b`, implies something.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Boolean flag indicating if the domain is a [`Field`](#sympy.polys.domains.field.Field
    "sympy.polys.domains.field.Field").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_PID`](#sympy.polys.domains.domain.Domain.is_PID "sympy.polys.domains.domain.Domain.is_PID"),
    [`is_Ring`](#sympy.polys.domains.domain.Domain.is_Ring "sympy.polys.domains.domain.Domain.is_Ring"),
    [`get_field`](#sympy.polys.domains.domain.Domain.get_field "sympy.polys.domains.domain.Domain.get_field"),
    [`has_assoc_Field`](#sympy.polys.domains.domain.Domain.has_assoc_Field "sympy.polys.domains.domain.Domain.has_assoc_Field")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Boolean flag indicating if the domain is a [principal ideal domain](https://en.wikipedia.org/wiki/Principal_ideal_domain).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_Field`](#sympy.polys.domains.domain.Domain.is_Field "sympy.polys.domains.domain.Domain.is_Field"),
    [`get_field`](#sympy.polys.domains.domain.Domain.get_field "sympy.polys.domains.domain.Domain.get_field")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Boolean flag indicating if the domain is a [`Ring`](#sympy.polys.domains.ring.Ring
    "sympy.polys.domains.ring.Ring").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Basically every [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    represents a ring so this flag is not that useful.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_PID`](#sympy.polys.domains.domain.Domain.is_PID "sympy.polys.domains.domain.Domain.is_PID"),
    [`is_Field`](#sympy.polys.domains.domain.Domain.is_Field "sympy.polys.domains.domain.Domain.is_Field"),
    [`get_ring`](#sympy.polys.domains.domain.Domain.get_ring "sympy.polys.domains.domain.Domain.get_ring"),
    [`has_assoc_Ring`](#sympy.polys.domains.domain.Domain.has_assoc_Ring "sympy.polys.domains.domain.Domain.has_assoc_Ring")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Returns whether `a` is a square in the domain.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Returns `True` if there is an element `b` in the domain such that `b * b ==
    a`, otherwise returns `False`. For inexact domains like [RR](#rr) and [CC](#cc),
    a tiny difference in this equality can be tolerated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exsqrt`](#sympy.polys.domains.domain.Domain.exsqrt "sympy.polys.domains.domain.Domain.exsqrt")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is zero.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Returns LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Returns b-base logarithm of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Rersively apply `self` to all elements of `seq`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Product of `a` and `b`, implies `__mul__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerical approximation of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Returns `a` negated, implies `__neg__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Check if `a` is of type `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Returns a fraction field, i.e. \(K(X)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Returns a polynomial ring, i.e. \(K[X]\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The one element of the [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`of_type`](#sympy.polys.domains.domain.Domain.of_type "sympy.polys.domains.domain.Domain.of_type"),
    [`zero`](#sympy.polys.domains.domain.Domain.zero "sympy.polys.domains.domain.Domain.zero")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Returns a polynomial ring, i.e. \(K[X]\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Returns `a` positive, implies `__pos__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Raise `a` to power `b`, implies `__pow__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of *a* and *b*. Analogue of `a // b`.
  prefs: []
  type: TYPE_NORMAL
- en: '`K.quo(a, b)` is equivalent to `K.div(a, b)[0]`. See [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") for more explanation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`rem`](#sympy.polys.domains.domain.Domain.rem "sympy.polys.domains.domain.Domain.rem")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a % b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`div`](#sympy.polys.domains.domain.Domain.div "sympy.polys.domains.domain.Domain.div")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `divmod(a, b)`
  prefs: []
  type: TYPE_NORMAL
- en: '[`exquo`](#sympy.polys.domains.domain.Domain.exquo "sympy.polys.domains.domain.Domain.exquo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a / b`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Modulo division of *a* and *b*. Analogue of `a % b`.
  prefs: []
  type: TYPE_NORMAL
- en: '`K.rem(a, b)` is equivalent to `K.div(a, b)[1]`. See [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") for more explanation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`quo`](#sympy.polys.domains.domain.Domain.quo "sympy.polys.domains.domain.Domain.quo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a // b`
  prefs: []
  type: TYPE_NORMAL
- en: '[`div`](#sympy.polys.domains.domain.Domain.div "sympy.polys.domains.domain.Domain.div")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `divmod(a, b)`
  prefs: []
  type: TYPE_NORMAL
- en: '[`exquo`](#sympy.polys.domains.domain.Domain.exquo "sympy.polys.domains.domain.Domain.exquo")'
  prefs: []
  type: TYPE_NORMAL
- en: Analogue of `a / b`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Returns `a**(-1)` if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Returns a (possibly inexact) square root of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: There is no universal definition of “inexact square root” for all domains. It
    is not recommended to implement this method for domains other then [ZZ](#zz).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`exsqrt`](#sympy.polys.domains.domain.Domain.exsqrt "sympy.polys.domains.domain.Domain.exsqrt")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Difference of `a` and `b`, implies `__sub__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Convert domain element *a* to a SymPy expression (Expr).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a: domain element**'
  prefs: []
  type: TYPE_NORMAL
- en: An element of this [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'expr: Expr'
  prefs: []
  type: TYPE_NORMAL
- en: A normal SymPy expression of type [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Convert a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    element *a* to [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr").
    Most public SymPy functions work with objects of type [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr"). The elements of a [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") have a different internal representation.
    It is not possible to mix domain elements with [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr") so each domain has [`to_sympy()`](#sympy.polys.domains.domain.Domain.to_sympy
    "sympy.polys.domains.domain.Domain.to_sympy") and [`from_sympy()`](#sympy.polys.domains.domain.Domain.from_sympy
    "sympy.polys.domains.domain.Domain.from_sympy") methods to convert its domain
    elements to and from [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr").
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: Construct an element of the [QQ](#qq) domain and then convert it to [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Although the printed forms look similar these objects are not of the same type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Construct an element of [K[x]](#k-x) and convert to [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The [`from_sympy()`](#sympy.polys.domains.domain.Domain.from_sympy "sympy.polys.domains.domain.Domain.from_sympy")
    method is used for the opposite conversion from a normal SymPy expression to a
    domain element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The [`from_sympy()`](#sympy.polys.domains.domain.Domain.from_sympy "sympy.polys.domains.domain.Domain.from_sympy")
    method makes it easier to construct domain elements interactively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`from_sympy`](#sympy.polys.domains.domain.Domain.from_sympy "sympy.polys.domains.domain.Domain.from_sympy"),
    [`convert_from`](#sympy.polys.domains.domain.Domain.convert_from "sympy.polys.domains.domain.Domain.convert_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Alias for [`dtype`](#sympy.polys.domains.domain.Domain.dtype "sympy.polys.domains.domain.Domain.dtype")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Construct a minimal domain that contains elements of `K0` and `K1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Known domains (from smallest to largest):'
  prefs: []
  type: TYPE_NORMAL
- en: '`GF(p)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ZZ`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QQ`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RR(prec, tol)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CC(prec, tol)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALG(a, b, c)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`K[x, y, z]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`K(x, y, z)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Unify two domains where at least one is composite.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'The zero element of the [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`of_type`](#sympy.polys.domains.domain.Domain.of_type "sympy.polys.domains.domain.Domain.of_type"),
    [`one`](#sympy.polys.domains.domain.Domain.one "sympy.polys.domains.domain.Domain.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Represents an element of a domain.
  prefs: []
  type: TYPE_NORMAL
- en: Mix in this trait into a class whose instances should be recognized as elements
    of a domain. Method `parent()` gives that domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Get the domain associated with `self`
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This is used by [`convert()`](#sympy.polys.domains.domain.Domain.convert "sympy.polys.domains.domain.Domain.convert")
    to identify the domain associated with a domain element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Represents a field domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Division of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: This definition of GCD over fields allows to clear denominators in \(primitive()\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Return true if `a` is a invertible
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Returns LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Remainder of `a` and `b`, implies nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Returns `a**(-1)` if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Represents a ring domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of \(a\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Division of `a` and `b`, implies `__divmod__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `a` and `b`, implies `__floordiv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Generate a free module of rank `rank` over self.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Generate an ideal of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Returns inversion of `a mod b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `a` and `b`, implies `__floordiv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Form a quotient ring of `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Here `e` can be an ideal or an iterable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'The division operator has been overloaded for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Remainder of `a` and `b`, implies `__mod__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Returns `a**(-1)` if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Base class for simple domains, e.g. ZZ, QQ.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Inject generators into this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Base class for composite domains, e.g. ZZ[x], ZZ(X).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Drop generators from this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Returns an exact version of this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Inject generators into this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if this domain is exact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Set the ground domain of this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '## GF(p)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Finite field of prime order [GF(p)](#gf-p)
  prefs: []
  type: TYPE_NORMAL
- en: A [GF(p)](#gf-p) domain represents a [finite field](https://en.wikipedia.org/wiki/Finite_field)
    \(\mathbb{F}_p\) of prime order as [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") in the domain system (see [Introducing the
    Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: A [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression with integer coefficients will have the domain [ZZ](#zz).
    However, if the `modulus=p` option is given then the domain will be a finite field
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to factorise a polynomial over [GF(p)](#gf-p) using the modulus
    argument to [`factor()`](reference.html#sympy.polys.polytools.factor "sympy.polys.polytools.factor")
    or by specifying the domain explicitly. The domain can also be given as a string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to use [GF(p)](#gf-p) with the [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") and [`gcd()`](reference.html#sympy.polys.polytools.gcd
    "sympy.polys.polytools.gcd") functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: When using the domain directly [GF(p)](#gf-p) can be used as a constructor to
    create instances which then support the operations `+,-,*,**,/`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to create a [GF(p)](#gf-p) domain of **non-prime** order
    but the resulting ring is **not** a field: it is just the ring of the integers
    modulo `n`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: It would be good to have a proper implementation of prime power fields (`GF(p**n)`)
    but these are not yet implemented in SymPY.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Return the characteristic of this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Square root modulo p of `a` if it is a quadratic residue.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: Always returns the square root that is no larger than `p // 2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(mpz)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY’s `mpq` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Convert mpmath’s `mpf` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `int` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY’s `mpz` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `int` to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s Integer to SymPy’s `Integer`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is a quadratic residue modulo p.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Convert `val` to a Python `int` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Finite field based on Python’s integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Finite field based on GMPY integers.  ## ZZ'
  prefs: []
  type: TYPE_NORMAL
- en: The [ZZ](#zz) domain represents the [integers](https://en.wikipedia.org/wiki/Integer)
    \(\mathbb{Z}\) as a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    in the domain system (see [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression with integer coefficients will have the domain [ZZ](#zz):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding [field of fractions](https://en.wikipedia.org/wiki/Field_of_fractions)
    is the domain of the rationals [QQ](#qq). Conversely [ZZ](#zz) is the [ring of
    integers](https://en.wikipedia.org/wiki/Ring_of_integers) of [QQ](#qq):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the domain directly [ZZ](#zz) can be used as a constructor to create
    instances which then support the operations `+,-,*,**,//,%` (true division `/`
    should not be used with [ZZ](#zz) - see the [`exquo()`](#sympy.polys.domains.domain.Domain.exquo
    "sympy.polys.domains.domain.Domain.exquo") domain method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`gcd()`](#sympy.polys.domains.domain.Domain.gcd "sympy.polys.domains.domain.Domain.gcd")
    method can be used to compute the [gcd](https://en.wikipedia.org/wiki/Greatest_common_divisor)
    of any two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: There are two implementations of [ZZ](#zz) in SymPy. If `gmpy` or `gmpy2` is
    installed then [ZZ](#zz) will be implemented by [`GMPYIntegerRing`](#sympy.polys.domains.GMPYIntegerRing
    "sympy.polys.domains.GMPYIntegerRing") and the elements will be instances of the
    `gmpy.mpz` type. Otherwise if `gmpy` and `gmpy2` are not installed then [ZZ](#zz)
    will be implemented by [`PythonIntegerRing`](#sympy.polys.domains.PythonIntegerRing
    "sympy.polys.domains.PythonIntegerRing") which uses Python’s standard builtin
    `int` type. With larger integers `gmpy` can be more efficient so it is preferred
    when available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: The domain `ZZ` representing the integers \(\mathbb{Z}\).
  prefs: []
  type: TYPE_NORMAL
- en: The [`IntegerRing`](#sympy.polys.domains.IntegerRing "sympy.polys.domains.IntegerRing")
    class represents the ring of integers as a [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") in the domain system. [`IntegerRing`](#sympy.polys.domains.IntegerRing
    "sympy.polys.domains.IntegerRing") is a super class of [`PythonIntegerRing`](#sympy.polys.domains.PythonIntegerRing
    "sympy.polys.domains.PythonIntegerRing") and [`GMPYIntegerRing`](#sympy.polys.domains.GMPYIntegerRing
    "sympy.polys.domains.GMPYIntegerRing") one of which will be the implementation
    for [ZZ](#zz) depending on whether or not `gmpy` or `gmpy2` is installed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Returns an algebraic field, i.e. \(\mathbb{Q}(\alpha, \ldots)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***extension** : One or more [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr").'
  prefs: []
  type: TYPE_NORMAL
- en: Generators of the extension. These should be expressions that are algebraic
    over \(\mathbb{Q}\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alias** : str, [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, this will be used as the alias symbol for the primitive element
    of the returned [`AlgebraicField`](#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AlgebraicField`](#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    representing the algebraic field extension.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Non-negative square root of `a` if `a` is a square.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_square`](#sympy.polys.domains.IntegerRing.is_square "sympy.polys.domains.IntegerRing.is_square")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Compute factorial of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Convert a [`ANP`](#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
    object to [ZZ](#zz).
  prefs: []
  type: TYPE_NORMAL
- en: See [`convert()`](#sympy.polys.domains.domain.Domain.convert "sympy.polys.domains.domain.Domain.convert").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Convert `Expression` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(mpz)` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY `mpq` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Convert mpmath’s `mpf` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `int` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY’s `mpz` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `int` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s Integer to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Compute extended GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Return the associated field of fractions [QQ](#qq)
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[QQ](#qq):'
  prefs: []
  type: TYPE_NORMAL
- en: The associated field of fractions [QQ](#qq), a [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") representing the rational numbers \(\mathbb{Q}\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if `a` is a square.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: An integer is a square if and only if there exists an integer `b` such that
    `b * b == a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: Compute LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Logarithm of *a* to the base *b*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**a: number**'
  prefs: []
  type: TYPE_NORMAL
- en: '**b: number**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '\(\\lfloor\log(a, b)\\rfloor\):'
  prefs: []
  type: TYPE_NORMAL
- en: Floor of the logarithm of *a* to the base *b*
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: This function uses `math.log` which is based on `float` so it will fail for
    large integer arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Compute square root of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Integer ring based on Python’s `int` type.
  prefs: []
  type: TYPE_NORMAL
- en: This will be used as [ZZ](#zz) if `gmpy` and `gmpy2` are not installed. Elements
    are instances of the standard Python `int` type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: Integer ring based on GMPY’s `mpz` type.
  prefs: []
  type: TYPE_NORMAL
- en: This will be the implementation of [ZZ](#zz) if `gmpy` or `gmpy2` is installed.
    Elements will be of type `gmpy.mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Compute factorial of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(mpz)` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: Convert `ModularInteger(int)` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY `mpq` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `Fraction` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Convert mpmath’s `mpf` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Convert GMPY’s `mpz` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Convert Python’s `int` to GMPY’s `mpz`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s Integer to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: Compute GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: Compute extended GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Compute LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Compute square root of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert `a` to a SymPy object.  ## QQ'
  prefs: []
  type: TYPE_NORMAL
- en: The [QQ](#qq) domain represents the [rationals](https://en.wikipedia.org/wiki/Rational_number)
    \(\mathbb{Q}\) as a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    in the domain system (see [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression with rational coefficients will have the domain [QQ](#qq):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding [ring of integers](https://en.wikipedia.org/wiki/Ring_of_integers)
    is the [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    of the integers [ZZ](#zz). Conversely [QQ](#qq) is the [field of fractions](https://en.wikipedia.org/wiki/Field_of_fractions)
    of [ZZ](#zz):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the domain directly [QQ](#qq) can be used as a constructor to create
    instances which then support the operations `+,-,*,**,/` (true division `/` is
    always possible for nonzero divisors in [QQ](#qq)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: There are two implementations of [QQ](#qq) in SymPy. If `gmpy` or `gmpy2` is
    installed then [QQ](#qq) will be implemented by [`GMPYRationalField`](#sympy.polys.domains.GMPYRationalField
    "sympy.polys.domains.GMPYRationalField") and the elements will be instances of
    the `gmpy.mpq` type. Otherwise if `gmpy` and `gmpy2` are not installed then [QQ](#qq)
    will be implemented by [`PythonRationalField`](#sympy.polys.domains.PythonRationalField
    "sympy.polys.domains.PythonRationalField") which is a pure Python class as part
    of sympy. The `gmpy` implementation is preferred because it is significantly faster.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for the domain [QQ](#qq).
  prefs: []
  type: TYPE_NORMAL
- en: The [`RationalField`](#sympy.polys.domains.RationalField "sympy.polys.domains.RationalField")
    class represents the field of rational numbers \(\mathbb{Q}\) as a [`Domain`](#sympy.polys.domains.domain.Domain
    "sympy.polys.domains.domain.Domain") in the domain system. [`RationalField`](#sympy.polys.domains.RationalField
    "sympy.polys.domains.RationalField") is a superclass of [`PythonRationalField`](#sympy.polys.domains.PythonRationalField
    "sympy.polys.domains.PythonRationalField") and [`GMPYRationalField`](#sympy.polys.domains.GMPYRationalField
    "sympy.polys.domains.GMPYRationalField") one of which will be the implementation
    for [QQ](#qq) depending on whether either of `gmpy` or `gmpy2` is installed or
    not.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Returns an algebraic field, i.e. \(\mathbb{Q}(\alpha, \ldots)\).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***extension** : One or more [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: Generators of the extension. These should be expressions that are algebraic
    over \(\mathbb{Q}\).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**alias** : str, [`Symbol`](../core.html#sympy.core.symbol.Symbol "sympy.core.symbol.Symbol"),
    None, optional (default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: If provided, this will be used as the alias symbol for the primitive element
    of the returned [`AlgebraicField`](#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AlgebraicField`](#sympy.polys.domains.AlgebraicField "sympy.polys.domains.AlgebraicField")'
  prefs: []
  type: TYPE_NORMAL
- en: A [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    representing the algebraic field extension.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Division of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Non-negative square root of `a` if `a` is a square.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`is_square`](#sympy.polys.domains.RationalField.is_square "sympy.polys.domains.RationalField.is_square")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Convert a [`ANP`](#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
    object to [QQ](#qq).
  prefs: []
  type: TYPE_NORMAL
- en: See [`convert()`](#sympy.polys.domains.domain.Domain.convert "sympy.polys.domains.domain.Domain.convert")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianElement` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s Integer to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Returns ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if `a` is a square.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: A rational number is a square if and only if there exists a rational number
    `b` such that `b * b == a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Remainder of `a` and `b`, implies nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Rational field based on [MPQ](#mpq).
  prefs: []
  type: TYPE_NORMAL
- en: This will be used as [QQ](#qq) if `gmpy` and `gmpy2` are not installed. Elements
    are instances of [MPQ](#mpq).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Rational field based on GMPY’s `mpq` type.
  prefs: []
  type: TYPE_NORMAL
- en: This will be the implementation of [QQ](#qq) if `gmpy` or `gmpy2` is installed.
    Elements will be of type `gmpy.mpq`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Division of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Returns factorial of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianElement` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s Integer to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Returns ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `a` and `b`, implies `__truediv__`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Remainder of `a` and `b`, implies nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Rational number implementation that is intended to be compatible with gmpy2’s
    mpq.
  prefs: []
  type: TYPE_NORMAL
- en: Also slightly faster than fractions.Fraction.
  prefs: []
  type: TYPE_NORMAL
- en: 'PythonMPQ should be treated as immutable although no effort is made to prevent
    mutation (since that might slow down calculations).  ## MPQ'
  prefs: []
  type: TYPE_NORMAL
- en: The `MPQ` type is either [`PythonMPQ`](#sympy.external.pythonmpq.PythonMPQ "sympy.external.pythonmpq.PythonMPQ")
    or otherwise the `mpq` type from `gmpy2`.
  prefs: []
  type: TYPE_NORMAL
- en: Gaussian domains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Gaussian domains [ZZ_I](#zz-i) and [QQ_I](#qq-i) share common superclasses
    [`GaussianElement`](#sympy.polys.domains.gaussiandomains.GaussianElement "sympy.polys.domains.gaussiandomains.GaussianElement")
    for the domain elements and [`GaussianDomain`](#sympy.polys.domains.gaussiandomains.GaussianDomain
    "sympy.polys.domains.gaussiandomains.GaussianDomain") for the domains themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Base class for Gaussian domains.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: Convert an element from ZZ<I> or QQ<I> to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY mpq to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY mpq to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: Convert a QQ_python element to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Convert a ZZ_python element to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY mpz to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Convert a ZZ_python element to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: Convert a SymPy object to `self.dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Inject generators into this domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `GaussianElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `GaussianElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `GaussianElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `GaussianElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: Base class for elements of Gaussian type domains.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Create a new GaussianElement of the same domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: The domain that this is an element of (ZZ_I or QQ_I)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: Return quadrant index 0-3.
  prefs: []
  type: TYPE_NORMAL
- en: 0 is included in quadrant 0.
  prefs: []
  type: TYPE_NORMAL
- en: '## ZZ_I'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: Ring of Gaussian integers `ZZ_I`
  prefs: []
  type: TYPE_NORMAL
- en: The [ZZ_I](#zz-i) domain represents the [Gaussian integers](https://en.wikipedia.org/wiki/Gaussian_integer)
    \(\mathbb{Z}[i]\) as a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    in the domain system (see [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: By default a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression with coefficients that are combinations of integers
    and `I` (\(\sqrt{-1}\)) will have the domain [ZZ_I](#zz-i).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: The [ZZ_I](#zz-i) domain can be used to factorise polynomials that are reducible
    over the Gaussian integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: The corresponding [field of fractions](https://en.wikipedia.org/wiki/Field_of_fractions)
    is the domain of the Gaussian rationals [QQ_I](#qq-i). Conversely [ZZ_I](#zz-i)
    is the [ring of integers](https://en.wikipedia.org/wiki/Ring_of_integers) of [QQ_I](#qq-i).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: When using the domain directly [ZZ_I](#zz-i) can be used as a constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: The domain elements of [ZZ_I](#zz-i) are instances of [`GaussianInteger`](#sympy.polys.domains.gaussiandomains.GaussianInteger
    "sympy.polys.domains.gaussiandomains.GaussianInteger") which support the rings
    operations `+,-,*,**`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Both floor (`//`) and modulo (`%`) division work with [`GaussianInteger`](#sympy.polys.domains.gaussiandomains.GaussianInteger
    "sympy.polys.domains.gaussiandomains.GaussianInteger") (see the [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div") method).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: True division (`/`) in [ZZ_I](#zz-i) gives an element of [QQ_I](#qq-i). The
    [`exquo()`](#sympy.polys.domains.domain.Domain.exquo "sympy.polys.domains.domain.Domain.exquo")
    method can be used to divide in [ZZ_I](#zz-i) when exact division is possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: The [`gcd()`](#sympy.polys.domains.domain.Domain.gcd "sympy.polys.domains.domain.Domain.gcd")
    method can be used to compute the [gcd](https://en.wikipedia.org/wiki/Greatest_common_divisor)
    of any two elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`GaussianInteger`](#sympy.polys.domains.gaussiandomains.GaussianInteger
    "sympy.polys.domains.gaussiandomains.GaussianInteger")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: Convert a ZZ_I element to ZZ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: Convert a QQ_I element to ZZ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: Greatest common divisor of a and b over ZZ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: Least common multiple of a and b over ZZ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: Return first quadrant element associated with `d`.
  prefs: []
  type: TYPE_NORMAL
- en: Also multiply the other arguments by the same power of i.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: 'Gaussian integer: domain element for [ZZ_I](#zz-i)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]  ## QQ_I'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: Field of Gaussian rationals `QQ_I`
  prefs: []
  type: TYPE_NORMAL
- en: The [QQ_I](#qq-i) domain represents the [Gaussian rationals](https://en.wikipedia.org/wiki/Gaussian_rational)
    \(\mathbb{Q}(i)\) as a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    in the domain system (see [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: By default a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression with coefficients that are combinations of rationals
    and `I` (\(\sqrt{-1}\)) will have the domain [QQ_I](#qq-i).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: The polys option `gaussian=True` can be used to specify that the domain should
    be [QQ_I](#qq-i) even if the coefficients do not contain `I` or are all integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: The [QQ_I](#qq-i) domain can be used to factorise polynomials that are reducible
    over the Gaussian rationals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to specify the [QQ_I](#qq-i) domain explicitly with polys
    functions like [`apart()`](reference.html#sympy.polys.partfrac.apart "sympy.polys.partfrac.apart").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: The corresponding [ring of integers](https://en.wikipedia.org/wiki/Ring_of_integers)
    is the domain of the Gaussian integers [ZZ_I](#zz-i). Conversely [QQ_I](#qq-i)
    is the [field of fractions](https://en.wikipedia.org/wiki/Field_of_fractions)
    of [ZZ_I](#zz-i).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: When using the domain directly [QQ_I](#qq-i) can be used as a constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: The domain elements of [QQ_I](#qq-i) are instances of [`GaussianRational`](#sympy.polys.domains.gaussiandomains.GaussianRational
    "sympy.polys.domains.gaussiandomains.GaussianRational") which support the field
    operations `+,-,*,**,/`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: True division (`/`) in [QQ_I](#qq-i) gives an element of [QQ_I](#qq-i) and is
    always exact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: Both floor (`//`) and modulo (`%`) division can be used with [`GaussianRational`](#sympy.polys.domains.gaussiandomains.GaussianRational
    "sympy.polys.domains.gaussiandomains.GaussianRational") (see [`div()`](#sympy.polys.domains.domain.Domain.div
    "sympy.polys.domains.domain.Domain.div")) but division is always exact so there
    is no remainder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: Get equivalent domain as an `AlgebraicField`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Get the denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`GaussianRational`](#sympy.polys.domains.gaussiandomains.GaussianRational
    "sympy.polys.domains.gaussiandomains.GaussianRational")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: Convert a ComplexField element to QQ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: Convert a ZZ_I element to QQ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Convert a QQ_I element to QQ_I.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: Get the numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: 'Gaussian rational: domain element for [QQ_I](#qq-i)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]  ## QQ<a>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Algebraic number field [QQ<a>](#qq-a)
  prefs: []
  type: TYPE_NORMAL
- en: A [QQ<a>](#qq-a) domain represents an [algebraic number field](https://en.wikipedia.org/wiki/Algebraic_number_field)
    \(\mathbb{Q}(a)\) as a [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    in the domain system (see [Introducing the Domains of the poly module](domainsintro.html#polys-domainsintro)).
  prefs: []
  type: TYPE_NORMAL
- en: A [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    created from an expression involving [algebraic numbers](https://en.wikipedia.org/wiki/Algebraic_number)
    will treat the algebraic numbers as generators if the generators argument is not
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: That is a multivariate polynomial with `sqrt(2)` treated as one of the generators
    (variables). If the generators are explicitly specified then `sqrt(2)` will be
    considered to be a coefficient but by default the [EX](#ex) domain is used. To
    make a [`Poly`](reference.html#sympy.polys.polytools.Poly "sympy.polys.polytools.Poly")
    with a [QQ<a>](#qq-a) domain the argument `extension=True` can be given.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: A generator of the algebraic field extension can also be specified explicitly
    which is particularly useful if the coefficients are all rational but an extension
    field is needed (e.g. to factor the polynomial).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to factorise a polynomial over a [QQ<a>](#qq-a) domain using
    the `extension` argument to [`factor()`](reference.html#sympy.polys.polytools.factor
    "sympy.polys.polytools.factor") or by specifying the domain explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: The `extension=True` argument can be used but will only create an extension
    that contains the coefficients which is usually not enough to factorise the polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to use [QQ<a>](#qq-a) with the [`cancel()`](reference.html#sympy.polys.polytools.cancel
    "sympy.polys.polytools.cancel") and [`gcd()`](reference.html#sympy.polys.polytools.gcd
    "sympy.polys.polytools.gcd") functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: When using the domain directly [QQ<a>](#qq-a) can be used as a constructor to
    create instances which then support the operations `+,-,*,**,/`. The [`algebraic_field()`](#sympy.polys.domains.domain.Domain.algebraic_field
    "sympy.polys.domains.domain.Domain.algebraic_field") method is used to construct
    a particular [QQ<a>](#qq-a) domain. The [`from_sympy()`](#sympy.polys.domains.domain.Domain.from_sympy
    "sympy.polys.domains.domain.Domain.from_sympy") method can be used to create domain
    elements from normal SymPy expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Elements of [QQ<a>](#qq-a) are instances of [`ANP`](#sympy.polys.polyclasses.ANP
    "sympy.polys.polyclasses.ANP") which have limited printing support. The raw display
    shows the internal representation of the element as the list `[4, 3]` representing
    the coefficients of `1` and `sqrt(2)` for this element in the form `a * sqrt(2)
    + b * 1` where `a` and `b` are elements of [QQ](#qq). The minimal polynomial for
    the generator `(x**2 - 2)` is also shown in the [DUP representation](domainsintro.html#dup-representation)
    as the list `[1, 0, -2]`. We can use [`to_sympy()`](#sympy.polys.domains.domain.Domain.to_sympy
    "sympy.polys.domains.domain.Domain.to_sympy") to get a better printed form for
    the elements and to see the results of operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: Any expression representing an algebraic number can be used to generate a [QQ<a>](#qq-a)
    domain provided its [minimal polynomial](https://en.wikipedia.org/wiki/Minimal_polynomial_(field_theory))
    can be computed. The function [`minpoly()`](numberfields.html#sympy.polys.numberfields.minpoly.minpoly
    "sympy.polys.numberfields.minpoly.minpoly") function is used for this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: It is also possible to make an algebraic field from multiple extension elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Multiple extension elements are always combined together to make a single [primitive
    element](https://en.wikipedia.org/wiki/Primitive_element_theorem). In the case
    of `[sqrt(2), sqrt(3)]` the primitive element chosen is `sqrt(2) + sqrt(3)` which
    is why the domain displays as `QQ<sqrt(2) + sqrt(3)>`. The minimal polynomial
    for the primitive element is computed using the [`primitive_element()`](numberfields.html#sympy.polys.numberfields.subfield.primitive_element
    "sympy.polys.numberfields.subfield.primitive_element") function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: The extension elements that generate the domain can be accessed from the domain
    using the [`ext`](#sympy.polys.domains.AlgebraicField.ext "sympy.polys.domains.AlgebraicField.ext")
    and [`orig_ext`](#sympy.polys.domains.AlgebraicField.orig_ext "sympy.polys.domains.AlgebraicField.orig_ext")
    attributes as instances of [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber"). The minimal polynomial for the primitive
    element as a [`DMP`](#sympy.polys.polyclasses.DMP "sympy.polys.polyclasses.DMP")
    instance is available as [`mod`](#sympy.polys.domains.AlgebraicField.mod "sympy.polys.domains.AlgebraicField.mod").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: The [discriminant](https://en.wikipedia.org/wiki/Discriminant_of_an_algebraic_number_field)
    of the field can be obtained from the [`discriminant()`](#sympy.polys.domains.AlgebraicField.discriminant
    "sympy.polys.domains.AlgebraicField.discriminant") method, and an [integral basis](https://en.wikipedia.org/wiki/Algebraic_number_field#Integral_basis)
    from the [`integral_basis()`](#sympy.polys.domains.AlgebraicField.integral_basis
    "sympy.polys.domains.AlgebraicField.integral_basis") method. The latter returns
    a list of [`ANP`](#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
    instances by default, but can be made to return instances of [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr") or [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber") by passing a `fmt` argument. The maximal
    order, or ring of integers, of the field can also be obtained from the [`maximal_order()`](#sympy.polys.domains.AlgebraicField.maximal_order
    "sympy.polys.domains.AlgebraicField.maximal_order") method, as a [`Submodule`](numberfields.html#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: The factorization of a rational prime into prime ideals of the field is computed
    by the [`primes_above()`](#sympy.polys.domains.AlgebraicField.primes_above "sympy.polys.domains.AlgebraicField.primes_above")
    method, which returns a list of [`PrimeIdeal`](numberfields.html#sympy.polys.numberfields.primes.PrimeIdeal
    "sympy.polys.numberfields.primes.PrimeIdeal") instances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: The Galois group of the Galois closure of the field can be computed (when the
    minimal polynomial of the field is of sufficiently small degree).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Notes
  prefs: []
  type: TYPE_NORMAL
- en: It is not currently possible to generate an algebraic extension over any domain
    other than [QQ](#qq). Ideally it would be possible to generate extensions like
    `QQ(x)(sqrt(x**2 - 2))`. This is equivalent to the quotient ring `QQ(x)[y]/(y**2
    - x**2 + 2)` and there are two implementations of this kind of quotient ring/extension
    in the [`QuotientRing`](#sympy.polys.domains.quotientring.QuotientRing "sympy.polys.domains.quotientring.QuotientRing")
    and [`MonogenicFiniteExtension`](agca.html#sympy.polys.agca.extensions.MonogenicFiniteExtension
    "sympy.polys.agca.extensions.MonogenicFiniteExtension") classes. Each of those
    implementations needs some work to make them fully usable though.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: Returns an algebraic field, i.e. \(\mathbb{Q}(\alpha, \ldots)\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: Get the discriminant of the field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`ANP`](#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: Primitive element used for the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Convert AlgebraicField element ‘a’ to another AlgebraicField
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GaussianInteger element ‘a’ to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GaussianRational element ‘a’ to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s expression to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Compute the Galois group of the Galois closure of this field.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'If the field is Galois, the order of the group will equal the degree of the
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: 'If the field is not Galois, then its Galois closure is a proper extension,
    and the order of the Galois group will be greater than the degree of the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.numberfields.galoisgroups.galois_group`](numberfields.html#sympy.polys.numberfields.galoisgroups.galois_group
    "sympy.polys.numberfields.galoisgroups.galois_group")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: Get an integral basis for the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fmt** : str, None, optional (default=None)'
  prefs: []
  type: TYPE_NORMAL
- en: If `None`, return a list of [`ANP`](#sympy.polys.polyclasses.ANP "sympy.polys.polyclasses.ANP")
    instances. If `"sympy"`, convert each element of the list to an [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr"), using `self.to_sympy()`. If `"alg"`, convert each element
    of the list to an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber"), using `self.to_alg_num()`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: 'In the last two cases we get legible expressions, which print somewhat differently
    because of the different types involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`to_sympy`](#sympy.polys.domains.AlgebraicField.to_sympy "sympy.polys.domains.AlgebraicField.to_sympy"),
    [`to_alg_num`](#sympy.polys.domains.AlgebraicField.to_alg_num "sympy.polys.domains.AlgebraicField.to_alg_num"),
    [`maximal_order`](#sympy.polys.domains.AlgebraicField.maximal_order "sympy.polys.domains.AlgebraicField.maximal_order")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Compute the maximal order, or ring of integers, of the field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Submodule`](numberfields.html#sympy.polys.numberfields.modules.Submodule
    "sympy.polys.numberfields.modules.Submodule").'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`integral_basis`](#sympy.polys.domains.AlgebraicField.integral_basis "sympy.polys.domains.AlgebraicField.integral_basis")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: Minimal polynomial for the primitive element of the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Original elements given to generate the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: Compute the prime ideals lying above a given rational prime *p*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` of `dtype` to an [`AlgebraicNumber`](../core.html#sympy.core.numbers.AlgebraicNumber
    "sympy.core.numbers.AlgebraicNumber").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert `a` of `dtype` to a SymPy object.  ## RR'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: Real numbers up to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Check if `a` and `b` are almost equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: Non-negative square root for `a >= 0` and `None` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The square root may be slightly inaccurate due to floating point rounding error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s number to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Returns an exact domain associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `a >= 0` and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: Returns LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Convert a real number to rational number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Convert `element` to SymPy number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: 'An element of a real domain.  ## CC'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: Complex numbers up to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: Check if `a` and `b` are almost equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: Returns the principal complex square root of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: The argument of the principal square root is always within \((-\frac{\pi}{2},
    \frac{\pi}{2}]\). The square root may be slightly inaccurate due to floating point
    rounding error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s number to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: Returns an exact domain associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `ComplexElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `ComplexElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `ComplexElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: Returns `False` for any `ComplexElement`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True`. Every complex number has a complex square root.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: Returns LCM of `a` and `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: Convert `element` to SymPy number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: 'An element of a complex domain.  ## K[x]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: A class for representing multivariate polynomial rings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: Returns factorial of \(a\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: Convert an algebraic number to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath \(mpf\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: Convert a rational function to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: Convert a \(GaussianInteger\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: Convert a \(GaussianRational\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: Convert from old poly ring to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: Convert a polynomial to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python \(Fraction\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY \(mpq\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python \(Fraction\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath \(mpf\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python \(int\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY \(mpz\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python \(int\) object to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s expression to \(dtype\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of \(a\) and \(b\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Extended GCD of \(a\) and \(b\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with \(self\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if \(LC(a)\) is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if \(LC(a)\) is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if \(LC(a)\) is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if \(LC(a)\) is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `a` is a unit of `self`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: Returns LCM of \(a\) and \(b\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert \(a\) to a SymPy object.  ## K(x)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: A class for representing multivariate rational function fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: Returns factorial of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: Convert an algebraic number to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: Convert a rational function to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianInteger` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianRational` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: Convert a polynomial to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s expression to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `LC(a)` is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `LC(a)` is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `LC(a)` is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `LC(a)` is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert `a` to a SymPy object.  ## EX'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: A class for arbitrary expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: An arbitrary expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: Returns denominator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`Expression`](#sympy.polys.domains.expressiondomain.ExpressionDomain.Expression
    "sympy.polys.domains.expressiondomain.ExpressionDomain.Expression")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: Convert an `ANP` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpc` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `EX` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `DMF` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianRational` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `GaussianRational` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: Convert a `DMP` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpq` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `Fraction` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Convert a mpmath `mpf` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Convert a GMPY `mpz` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: Convert a Python `int` object to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: Convert SymPy’s expression to `dtype`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: Returns a field associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: Returns a ring associated with `self`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-negative.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is non-positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Returns True if `a` is positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: Returns numerator of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: Convert `a` to a SymPy object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: An arbitrary expression.
  prefs: []
  type: TYPE_NORMAL
- en: Quotient ring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: Class representing (commutative) quotient rings.
  prefs: []
  type: TYPE_NORMAL
- en: You should not usually instantiate this by hand, instead use the constructor
    from the base ring in the construction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: 'Shorter versions are possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: ring - the base ring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: base_ideal - the ideal used to form the quotient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sparse polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sparse polynomials are represented as dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial ring returning `(ring, x_1, ..., x_n)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol/Expr or sequence of str, Symbol/Expr (non-empty)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    or coercible'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional, defaults to `lex`'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial ring returning `(ring, (x_1, ..., x_n))`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol/Expr or sequence of str, Symbol/Expr (non-empty)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    or coercible'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional, defaults to `lex`'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: Construct a polynomial ring and inject `x_1, ..., x_n` into the global namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** : str'
  prefs: []
  type: TYPE_NORMAL
- en: Symbol/Expr or sequence of str, Symbol/Expr (non-empty)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**domain** : [`Domain`](#sympy.polys.domains.domain.Domain "sympy.polys.domains.domain.Domain")
    or coercible'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional, defaults to `lex`'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: Construct a ring deriving generators and domain from options and input expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exprs** : [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    or sequence of [`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")
    (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** : sequence of [`Symbol`](../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol")/[`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: '**options** : keyword arguments understood by [`Options`](internals.html#sympy.polys.polyoptions.Options
    "sympy.polys.polyoptions.Options")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: Multivariate distributed polynomial ring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: Add a sequence of polynomials or containers of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: Add the elements of `symbols` as generators to `self`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: Add the generators of `other` to `self`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: Remove specified generators from this ring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: Remove specified generators from the ring and inject them into its domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: Compute index of `gen` in `self.gens`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: Return the ith-basis element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: Multiply a sequence of polynomials or containers of polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: Return the elementary symmetric polynomial of degree *n* over this ring’s generators.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: Element of multivariate distributed polynomial ring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: Approximate equality test for polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: Cancel common factors in a rational function `f/g`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: Returns the coefficient that stands next to the given monomial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**element** : PolyElement (with `is_monomial = True`) or 1'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: Coefficient of `self` with respect to `x**deg`.
  prefs: []
  type: TYPE_NORMAL
- en: Treating `self` as a univariate polynomial in `x` this finds the coefficient
    of `x**deg` as a polynomial in the other generators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** : generator or generator index'
  prefs: []
  type: TYPE_NORMAL
- en: The generator or generator index to compute the expression for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**deg** : int'
  prefs: []
  type: TYPE_NORMAL
- en: The degree of the monomial to compute the expression for.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The coefficient of `x**deg` as a polynomial in the same ring.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`coeff`](#sympy.polys.rings.PolyElement.coeff "sympy.polys.rings.PolyElement.coeff"),
    [`coeffs`](#sympy.polys.rings.PolyElement.coeffs "sympy.polys.rings.PolyElement.coeffs")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: Ordered list of polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: Returns the constant coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of polynomial’s coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: Return a copy of polynomial self.
  prefs: []
  type: TYPE_NORMAL
- en: Polynomials are mutable; if one is interested in preserving a polynomial, and
    one plans to use inplace operations, one can copy the polynomial. This method
    makes a shallow copy.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: The leading degree in `x` or the main variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the degree of 0 is negative infinity (`float('-inf')`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: A tuple containing leading degrees in all variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the degree of 0 is negative infinity (`float('-inf')`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: Computes partial derivative in `x`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: Division algorithm, see [CLO] p64.
  prefs: []
  type: TYPE_NORMAL
- en: fv array of polynomials
  prefs: []
  type: TYPE_NORMAL
- en: return qv, r such that self = sum(fv[i]*qv[i]) + r
  prefs: []
  type: TYPE_NORMAL
- en: All polynomials are required not to be Laurent polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: multiply inplace the polynomial p by an element in the coefficient ring, provided
    p is not one of the generators; else multiply not inplace
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over coefficients of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over monomials of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over terms of a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: Leading monomial tuple according to the monomial ordering.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: Leading monomial as a polynomial element.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: Leading term as a polynomial element.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: Unordered list of polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: Unordered list of polynomial monomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: Unordered list of polynomial terms.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: Divides all coefficients by the leading coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: Ordered list of polynomial monomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: Computes the pseudo-division of the polynomial `self` with respect to `g`.
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-division algorithm is used to find the pseudo-quotient `q` and pseudo-remainder
    `r` such that `m*f = g*q + r`, where `m` represents the multiplier and `f` is
    the dividend polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-quotient `q` and pseudo-remainder `r` are polynomials in the variable
    `x`, with the degree of `r` with respect to `x` being strictly less than the degree
    of `g` with respect to `x`.
  prefs: []
  type: TYPE_NORMAL
- en: The multiplier `m` is defined as `LC(g, x) ^ (deg(f, x) - deg(g, x) + 1)`, where
    `LC(g, x)` represents the leading coefficient of `g`.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that in the context of the `prem` method, multivariate
    polynomials in a ring, such as `R[x,y,z]`, are treated as univariate polynomials
    with coefficients that are polynomials, such as `R[x,y][z]`. When dividing `f`
    by `g` with respect to the variable `z`, the pseudo-quotient `q` and pseudo-remainder
    `r` satisfy `m*f = g*q + r`, where `deg(r, z) < deg(g, z)` and `m = LC(g, z)^(deg(f,
    z) - deg(g, z) + 1)`.
  prefs: []
  type: TYPE_NORMAL
- en: In this function, the pseudo-remainder `r` can be obtained using the `prem`
    method, the pseudo-quotient `q` can be obtained using the `pquo` method, and the
    function `pdiv` itself returns a tuple `(q, r)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The polynomial to divide `self` by.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : generator or generator index, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The main variable of the polynomials and default is first generator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-division polynomial (tuple of `q` and `r`).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZeroDivisionError** : If `g` is the zero polynomial.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prem`](#sympy.polys.rings.PolyElement.prem "sympy.polys.rings.PolyElement.prem")'
  prefs: []
  type: TYPE_NORMAL
- en: Computes only the pseudo-remainder more efficiently than \(f.pdiv(g)[1]\).
  prefs: []
  type: TYPE_NORMAL
- en: '[`pquo`](#sympy.polys.rings.PolyElement.pquo "sympy.polys.rings.PolyElement.pquo")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns only the pseudo-quotient.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pexquo`](#sympy.polys.rings.PolyElement.pexquo "sympy.polys.rings.PolyElement.pexquo")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns only an exact pseudo-quotient having no remainder.
  prefs: []
  type: TYPE_NORMAL
- en: '[`div`](#sympy.polys.rings.PolyElement.div "sympy.polys.rings.PolyElement.div")'
  prefs: []
  type: TYPE_NORMAL
- en: Returns quotient and remainder of f and g polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial exact pseudo-quotient in multivariate polynomial ring.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prem`](#sympy.polys.rings.PolyElement.prem "sympy.polys.rings.PolyElement.prem"),
    [`pdiv`](#sympy.polys.rings.PolyElement.pdiv "sympy.polys.rings.PolyElement.pdiv"),
    [`pquo`](#sympy.polys.rings.PolyElement.pquo "sympy.polys.rings.PolyElement.pquo"),
    [`sympy.polys.domains.ring.Ring.exquo`](#sympy.polys.domains.ring.Ring.exquo "sympy.polys.domains.ring.Ring.exquo")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-quotient in multivariate polynomial ring.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`prem`](#sympy.polys.rings.PolyElement.prem "sympy.polys.rings.PolyElement.prem"),
    [`pdiv`](#sympy.polys.rings.PolyElement.pdiv "sympy.polys.rings.PolyElement.pdiv"),
    [`pexquo`](#sympy.polys.rings.PolyElement.pexquo "sympy.polys.rings.PolyElement.pexquo"),
    [`sympy.polys.domains.ring.Ring.quo`](#sympy.polys.domains.ring.Ring.quo "sympy.polys.domains.ring.Ring.quo")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: Pseudo-remainder of the polynomial `self` with respect to `g`.
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-quotient `q` and pseudo-remainder `r` with respect to `z` when dividing
    `f` by `g` satisfy `m*f = g*q + r`, where `deg(r,z) < deg(g,z)` and `m = LC(g,z)**(deg(f,z)
    - deg(g,z)+1)`.
  prefs: []
  type: TYPE_NORMAL
- en: See [`pdiv()`](#sympy.polys.rings.PolyElement.pdiv "sympy.polys.rings.PolyElement.pdiv")
    for explanation of pseudo-division.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The polynomial to divide `self` by.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : generator or generator index, optional'
  prefs: []
  type: TYPE_NORMAL
- en: The main variable of the polynomials and default is first generator.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The pseudo-remainder polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Raises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZeroDivisionError** : If `g` is the zero polynomial.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`pdiv`](#sympy.polys.rings.PolyElement.pdiv "sympy.polys.rings.PolyElement.pdiv"),
    [`pquo`](#sympy.polys.rings.PolyElement.pquo "sympy.polys.rings.PolyElement.pquo"),
    [`pexquo`](#sympy.polys.rings.PolyElement.pexquo "sympy.polys.rings.PolyElement.pexquo"),
    [`sympy.polys.domains.ring.Ring.rem`](#sympy.polys.domains.ring.Ring.rem "sympy.polys.domains.ring.Ring.rem")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: Returns content and a primitive polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: square of a polynomial
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: Eliminate monomials with zero coefficient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: Computes the subresultant PRS of two polynomials `self` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**g** : [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")'
  prefs: []
  type: TYPE_NORMAL
- en: The second polynomial.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**x** : generator or generator index'
  prefs: []
  type: TYPE_NORMAL
- en: The variable with respect to which the subresultant sequence is computed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**R** : list'
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list polynomials representing the subresultant PRS.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Rewrite *self* in terms of elementary symmetric polynomials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: Triple `(p, r, m)`
  prefs: []
  type: TYPE_NORMAL
- en: '`p` is a [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")
    that represents our attempt to express *self* as a function of elementary symmetric
    polynomials. Each variable in `p` stands for one of the elementary symmetric polynomials.
    The correspondence is given by `m`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`r` is the remainder.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`m` is a list of pairs, giving the mapping from variables in `p` to elementary
    symmetric polynomials.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The triple satisfies the equation `p.compose(m) + r == self`. If the remainder
    `r` is zero, *self* is symmetric. If it is nonzero, we were not able to represent
    *self* as symmetric.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explanation
  prefs: []
  type: TYPE_NORMAL
- en: If this [`PolyElement`](#sympy.polys.rings.PolyElement "sympy.polys.rings.PolyElement")
    belongs to a ring of \(n\) variables, we can try to write it as a function of
    the elementary symmetric polynomials on \(n\) variables. We compute a symmetric
    part, and a remainder for any part we were not able to symmetrize.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`sympy.polys.polyfuncs.symmetrize`](reference.html#sympy.polys.polyfuncs.symmetrize
    "sympy.polys.polyfuncs.symmetrize")'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[R783](#id14)]'
  prefs: []
  type: TYPE_NORMAL
- en: Lauer, E. Algorithms for symmetrical polynomials, Proc. 1976 ACM Symp. on Symbolic
    and Algebraic Computing, NY 242-247. [https://dl.acm.org/doi/pdf/10.1145/800205.806342](https://dl.acm.org/doi/pdf/10.1145/800205.806342)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: The tail degree in `x` or the main variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the degree of 0 is negative infinity (`float('-inf')`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: A tuple containing tail degrees in all variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the degree of 0 is negative infinity (`float('-inf')`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: Ordered list of polynomial terms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**order** : [`MonomialOrder`](reference.html#sympy.polys.orderings.MonomialOrder
    "sympy.polys.orderings.MonomialOrder") or coercible, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: Sparse rational functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sparse polynomials are represented as dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: Construct new rational function field returning (field, x1, …, xn).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: Construct new rational function field returning (field, (x1, …, xn)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: Construct new rational function field and inject generators into global namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: Construct a field deriving generators and domain from options and input expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**exprs** : py:class:\(~.Expr\) or sequence of [`Expr`](../core.html#sympy.core.expr.Expr
    "sympy.core.expr.Expr") (sympifiable)'
  prefs: []
  type: TYPE_NORMAL
- en: '**symbols** : sequence of [`Symbol`](../core.html#sympy.core.symbol.Symbol
    "sympy.core.symbol.Symbol")/[`Expr`](../core.html#sympy.core.expr.Expr "sympy.core.expr.Expr")'
  prefs: []
  type: TYPE_NORMAL
- en: '**options** : keyword arguments understood by [`Options`](internals.html#sympy.polys.polyoptions.Options
    "sympy.polys.polyoptions.Options")'
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: Multivariate distributed rational function field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: Element of multivariate distributed rational function field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: Computes partial derivative in `x`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: Dense polynomials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: Dense Multivariate Polynomials over \(K\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: Returns the trailing coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: Make all coefficients in `f` positive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: Add two multivariate polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: Add an element of the ground domain to `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: Returns all coefficients from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: Returns all monomials from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: Returns all terms from a `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: Cancel common factors in a rational function `f/g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Cauchy lower bound on the nonzero roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Cauchy upper bound on the roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: Clear denominators, but keep the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero coefficients from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of `f` and `g` and their cofactors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: Computes functional composition of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: Returns GCD of polynomial coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a `DMP` over the new domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of complex roots of `f` in `[inf, sup]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: Return the number of real roots of `f` in `[inf, sup]`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: Computes functional decomposition of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: Reduce degree of \(f\) by mapping \(x_i^m\) to \(y_i\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading degree of `f` in `x_j`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of degrees of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: Computes the `m`-th order derivative of `f` in `x_j`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: Computes discriminant of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial division with remainder of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: Eject selected generators into the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: Evaluates `f` at the given point `a` in `x_j`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: Remove useless generators from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the removed generators and the new excluded `f`.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: Computes polynomial exact quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: Exact quotient of `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of irreducible factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of irreducible factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: Create an instance of `cls` given a list of native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: Create an instance of `cls` given a list of SymPy coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: Returns polynomial GCD of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: Extended Euclidean algorithm, if univariate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: Computes greatest factorial factorization of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new ground instance of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: Half extended Euclidean algorithm, if univariate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: Returns the homogeneous order of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: Return homogeneous polynomial of `f`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: Inject ground domain generators into `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: Computes the `m`-th order indefinite integral of `f` in `x_j`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: Compute isolating intervals for roots of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: Invert `f` modulo `g`, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a cyclotomic polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a homogeneous polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` has no factors over its domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is linear in all its variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if the leading coefficient of `f` is one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is zero or has only one term.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a unit polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if the GCD of the coefficients of `f` is one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is quadratic in all its variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a square-free polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a zero polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: Returns l1 norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: Return squared l2 norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: Returns polynomial LCM of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: Convert algebraic coefficients to rationals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: Returns maximum norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: Computes the squared Mignotte bound on root separations of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: Divides all coefficients by `LC(f)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero monomials from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: Multiply two multivariate polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: Multiply `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: Negate all coefficients in `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: Computes `Norm(f)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: Returns the `n`-th coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-division of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: Returns a polynomial in \(K[x_{P(1)}, ..., x_{P(n)}]\).
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial exact pseudo-quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: Raise `f` to a non-negative power `n`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: Polynomial pseudo-remainder of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: Returns content and a primitive form of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: Computes polynomial quotient of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `f` by a an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: Refine an isolating interval to the given precision.
  prefs: []
  type: TYPE_NORMAL
- en: '`eps` should be a rational number.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: Computes polynomial remainder of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: Get the representation of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: Computes resultant of `f` and `g` via PRS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: Compute `f**(-1)` mod `x**n`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently compute Taylor shift `f(x + a)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: Efficiently compute Taylor shift `f(X + A)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: Take a continuous subsequence of terms of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of square-free factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: Returns a list of square-free factors of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: Computes square-free norm of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: Computes square-free part of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: Square a multivariate polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: Computes the Sturm sequence of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: Subtract two multivariate polynomials `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: Subtract an element of the ground domain from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: Computes subresultant PRS sequence of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: Returns all non-zero terms from `f` in lex order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: Remove GCD of terms from the polynomial `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: Convert to DUP_Flint if possible.
  prefs: []
  type: TYPE_NORMAL
- en: This method should be used when the domain or level is changed and it potentially
    becomes possible to convert from DMP_Python to DUP_Flint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a dict representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain exact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain a field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a list representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: Make the ground domain a ring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a dict representation with SymPy coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a list representation with SymPy coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a tuple representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: This is needed for hashing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: Returns the total degree of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate functional transformation `q**n * f(p/q)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: Reduce `f` modulo a constant `p`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: Unify and return `DMP` instances of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: Dense Multivariate Fractions over \(K\).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: Add two multivariate fractions `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: Add an element of the ground domain to `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: Remove common factors from `f.num` and `f.den`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: Returns the denominator of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: Computes quotient of fractions `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: Unify representations of two multivariate fractions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: Create a DMP out of the given representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: Computes inverse of a fraction `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a unit fraction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a zero fraction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: Multiply two multivariate fractions `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: Negate all coefficients in `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: Returns the numerator of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: Create a DMF out of the given representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: Unify a multivariate fraction and a polynomial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: Raise `f` to a non-negative power `n`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: Computes quotient of fractions `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: Subtract two multivariate fractions `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: Dense Algebraic Number Polynomials over a field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: Returns the leading coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: Returns the trailing coefficient of `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: Add an element of the ground domain to `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a `ANP` over a new domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a unit algebraic number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: Returns `True` if `f` is a zero algebraic number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: Return `f.mod` as a list with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: Multiply `f` by an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: Raise `f` to a non-negative power `n`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: Quotient of `f` by an element of the ground domain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: Subtract an element of the ground domain from `f`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a dict representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a list representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a dict representation with SymPy coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a list representation with SymPy coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: Convert `f` to a tuple representation with native coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: This is needed for hashing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: Unify representations of two algebraic numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: Unify and return `DMP` instances of `f` and `g`.
  prefs: []
  type: TYPE_NORMAL
