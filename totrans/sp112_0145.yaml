- en: scipy.integrate.RK45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK45.html#scipy.integrate.RK45](https://docs.scipy.org/doc/scipy-1.12.0/reference/generated/scipy.integrate.RK45.html#scipy.integrate.RK45)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Explicit Runge-Kutta method of order 5(4).
  prefs: []
  type: TYPE_NORMAL
- en: This uses the Dormand-Prince pair of formulas [[1]](#r959d327f6269-1). The error
    is controlled assuming accuracy of the fourth-order method accuracy, but steps
    are taken using the fifth-order accurate formula (local extrapolation is done).
    A quartic interpolation polynomial is used for the dense output [[2]](#r959d327f6269-2).
  prefs: []
  type: TYPE_NORMAL
- en: Can be applied in the complex domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fun**callable'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-hand side of the system. The calling signature is `fun(t, y)`. Here `t`
    is a scalar, and there are two options for the ndarray `y`: It can either have
    shape (n,); then `fun` must return array_like with shape (n,). Alternatively it
    can have shape (n, k); then `fun` must return an array_like with shape (n, k),
    i.e., each column corresponds to a single column in `y`. The choice between the
    two options is determined by *vectorized* argument (see below).'
  prefs: []
  type: TYPE_NORMAL
- en: '**t0**float'
  prefs: []
  type: TYPE_NORMAL
- en: Initial time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y0**array_like, shape (n,)'
  prefs: []
  type: TYPE_NORMAL
- en: Initial state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time - the integration won’t continue beyond it. It also determines
    the direction of the integration.
  prefs: []
  type: TYPE_NORMAL
- en: '**first_step**float or None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Initial step size. Default is `None` which means that the algorithm should choose.
  prefs: []
  type: TYPE_NORMAL
- en: '**max_step**float, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded
    and determined solely by the solver.
  prefs: []
  type: TYPE_NORMAL
- en: '**rtol, atol**float and array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Relative and absolute tolerances. The solver keeps the local error estimates
    less than `atol + rtol * abs(y)`. Here *rtol* controls a relative accuracy (number
    of correct digits), while *atol* controls absolute accuracy (number of correct
    decimal places). To achieve the desired *rtol*, set *atol* to be smaller than
    the smallest value that can be expected from `rtol * abs(y)` so that *rtol* dominates
    the allowable error. If *atol* is larger than `rtol * abs(y)` the number of correct
    digits is not guaranteed. Conversely, to achieve the desired *atol* set *rtol*
    such that `rtol * abs(y)` is always smaller than *atol*. If components of y have
    different scales, it might be beneficial to set different *atol* values for different
    components by passing array_like with shape (n,) for *atol*. Default values are
    1e-3 for *rtol* and 1e-6 for *atol*.
  prefs: []
  type: TYPE_NORMAL
- en: '**vectorized**bool, optional'
  prefs: []
  type: TYPE_NORMAL
- en: Whether *fun* is implemented in a vectorized fashion. Default is False.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: '[[1](#id1)]'
  prefs: []
  type: TYPE_NORMAL
- en: J. R. Dormand, P. J. Prince, “A family of embedded Runge-Kutta formulae”, Journal
    of Computational and Applied Mathematics, Vol. 6, No. 1, pp. 19-26, 1980.
  prefs: []
  type: TYPE_NORMAL
- en: '[[2](#id2)]'
  prefs: []
  type: TYPE_NORMAL
- en: L. W. Shampine, “Some Practical Runge-Kutta Formulas”, Mathematics of Computation,,
    Vol. 46, No. 173, pp. 135-150, 1986.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of equations.
  prefs: []
  type: TYPE_NORMAL
- en: '**status**string'
  prefs: []
  type: TYPE_NORMAL
- en: 'Current status of the solver: ‘running’, ‘finished’ or ‘failed’.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t_bound**float'
  prefs: []
  type: TYPE_NORMAL
- en: Boundary time.
  prefs: []
  type: TYPE_NORMAL
- en: '**direction**float'
  prefs: []
  type: TYPE_NORMAL
- en: 'Integration direction: +1 or -1.'
  prefs: []
  type: TYPE_NORMAL
- en: '**t**float'
  prefs: []
  type: TYPE_NORMAL
- en: Current time.
  prefs: []
  type: TYPE_NORMAL
- en: '**y**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Current state.
  prefs: []
  type: TYPE_NORMAL
- en: '**t_old**float'
  prefs: []
  type: TYPE_NORMAL
- en: Previous time. None if no steps were made yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size**float'
  prefs: []
  type: TYPE_NORMAL
- en: Size of the last successful step. None if no steps were made yet.
  prefs: []
  type: TYPE_NORMAL
- en: '**nfev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number evaluations of the system’s right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: '**njev**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of evaluations of the Jacobian. Is always 0 for this solver as it does
    not use the Jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: '**nlu**int'
  prefs: []
  type: TYPE_NORMAL
- en: Number of LU decompositions. Is always 0 for this solver.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| [`dense_output`](scipy.integrate.RK45.dense_output.html#scipy.integrate.RK45.dense_output
    "scipy.integrate.RK45.dense_output")() | Compute a local interpolant over the
    last successful step. |'
  prefs: []
  type: TYPE_TB
- en: '| [`step`](scipy.integrate.RK45.step.html#scipy.integrate.RK45.step "scipy.integrate.RK45.step")()
    | Perform one integration step. |'
  prefs: []
  type: TYPE_TB
