- en: numpy.divmod
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://numpy.org/doc/1.26/reference/generated/numpy.divmod.html](https://numpy.org/doc/1.26/reference/generated/numpy.divmod.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Return element-wise quotient and remainder simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.13.0.
  prefs: []
  type: TYPE_NORMAL
- en: '`np.divmod(x, y)` is equivalent to `(x // y, x % y)`, but faster because it
    avoids redundant work. It is used to implement the Python built-in function `divmod`
    on NumPy arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x1**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Dividend array.
  prefs: []
  type: TYPE_NORMAL
- en: '**x2**array_like'
  prefs: []
  type: TYPE_NORMAL
- en: Divisor array. If `x1.shape != x2.shape`, they must be broadcastable to a common
    shape (which becomes the shape of the output).
  prefs: []
  type: TYPE_NORMAL
- en: '**out**ndarray, None, or tuple of ndarray and None, optional'
  prefs: []
  type: TYPE_NORMAL
- en: A location into which the result is stored. If provided, it must have a shape
    that the inputs broadcast to. If not provided or None, a freshly-allocated array
    is returned. A tuple (possible only as a keyword argument) must have length equal
    to the number of outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**where**array_like, optional'
  prefs: []
  type: TYPE_NORMAL
- en: This condition is broadcast over the input. At locations where the condition
    is True, the *out* array will be set to the ufunc result. Elsewhere, the *out*
    array will retain its original value. Note that if an uninitialized *out* array
    is created via the default `out=None`, locations within it where the condition
    is False will remain uninitialized.
  prefs: []
  type: TYPE_NORMAL
- en: '****kwargs**'
  prefs: []
  type: TYPE_NORMAL
- en: For other keyword-only arguments, see the [ufunc docs](../ufuncs.html#ufuncs-kwargs).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**out1**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise quotient resulting from floor division. This is a scalar if both
    *x1* and *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: '**out2**ndarray'
  prefs: []
  type: TYPE_NORMAL
- en: Element-wise remainder from floor division. This is a scalar if both *x1* and
    *x2* are scalars.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`floor_divide`](numpy.floor_divide.html#numpy.floor_divide "numpy.floor_divide")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to Python’s `//` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`remainder`](numpy.remainder.html#numpy.remainder "numpy.remainder")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to Python’s `%` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`modf`](numpy.modf.html#numpy.modf "numpy.modf")'
  prefs: []
  type: TYPE_NORMAL
- en: Equivalent to `divmod(x, 1)` for positive `x` with the return values switched.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The [`divmod`](#numpy.divmod "numpy.divmod") function can be used as a shorthand
    for `np.divmod` on ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
